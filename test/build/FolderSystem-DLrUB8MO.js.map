{"version":3,"file":"FolderSystem-DLrUB8MO.js","names":["mailSets: readonly MailFolder[]","excludeFolder: MailFolder | null","type: Omit<MailSetKind, MailSetKind.CUSTOM>","folderId: Id","mail: Mail","mailListId: Id","parent: IdTuple | null","parent: IdTuple","folderId: IdTuple","folder: MailFolder","potentialAncestorId: IdTuple","currentFolderPointer: MailFolder | null","subtrees: ReadonlyArray<FolderSubtree>","currentLevel: number","plainList: IndentedFolder[]","systems: ReadonlyArray<FolderSubtree>","predicate: (subtree: FolderSubtree) => boolean","systems: readonly FolderSubtree[]","folderByParent: Map<Id | null, readonly MailFolder[]>","parent: MailFolder","comparator: FolderComparator","folder1: MailFolder","folder2: MailFolder","folderTypeToOrder: Record<SystemMailFolderTypes, number>"],"sources":["../../src/common/api/common/mail/FolderSystem.ts"],"sourcesContent":["import { groupBy, isNotEmpty, partition } from \"@tutao/tutanota-utils\"\nimport { Mail, MailFolder } from \"../../entities/tutanota/TypeRefs.js\"\nimport { isFolder, MailSetKind } from \"../TutanotaConstants.js\"\nimport { elementIdPart, getElementId, getListId, isSameId } from \"../utils/EntityUtils.js\"\n\nexport interface IndentedFolder {\n\tlevel: number\n\tfolder: MailFolder\n}\n\n/** Accessor for the folder trees. */\nexport class FolderSystem {\n\treadonly systemSubtrees: ReadonlyArray<FolderSubtree>\n\treadonly customSubtrees: ReadonlyArray<FolderSubtree>\n\treadonly importedMailSet: Readonly<MailFolder | null>\n\n\tconstructor(mailSets: readonly MailFolder[]) {\n\t\tconst [folders, nonFolders] = partition(mailSets, (f) => isFolder(f))\n\t\tconst folderByParent = groupBy(folders, (folder) => (folder.parentFolder ? elementIdPart(folder.parentFolder) : null))\n\t\tconst topLevelFolders = folders.filter((f) => f.parentFolder == null)\n\n\t\tconst [systemFolders, customFolders] = partition(topLevelFolders, (f) => f.folderType !== MailSetKind.CUSTOM)\n\n\t\tthis.importedMailSet = nonFolders.find((f) => f.folderType === MailSetKind.Imported) || null\n\t\tthis.systemSubtrees = systemFolders.sort(compareSystem).map((f) => this.makeSubtree(folderByParent, f, compareCustom))\n\t\tthis.customSubtrees = customFolders.sort(compareCustom).map((f) => this.makeSubtree(folderByParent, f, compareCustom))\n\t}\n\n\tgetIndentedList(excludeFolder: MailFolder | null = null): IndentedFolder[] {\n\t\treturn [...this.getIndentedFolderList(this.systemSubtrees, excludeFolder), ...this.getIndentedFolderList(this.customSubtrees, excludeFolder)]\n\t}\n\n\t/** Search for a specific folder type. Some mailboxes might not have some system folders! */\n\tgetSystemFolderByType(type: Omit<MailSetKind, MailSetKind.CUSTOM>): MailFolder | null {\n\t\treturn this.systemSubtrees.find((f) => f.folder.folderType === type)?.folder ?? null\n\t}\n\n\tgetFolderById(folderId: Id): MailFolder | null {\n\t\tconst subtree = this.getFolderByIdInSubtrees(this.systemSubtrees, folderId) ?? this.getFolderByIdInSubtrees(this.customSubtrees, folderId)\n\t\treturn subtree?.folder ?? null\n\t}\n\n\tgetFolderByMail(mail: Mail): MailFolder | null {\n\t\tconst sets = mail.sets\n\t\tif (isNotEmpty(sets)) {\n\t\t\tfor (const setId of sets) {\n\t\t\t\tconst folder = this.getFolderById(elementIdPart(setId))\n\t\t\t\tif (folder != null) {\n\t\t\t\t\treturn folder\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null\n\t\t} else {\n\t\t\treturn this.getFolderByMailListIdLegacy(getListId(mail))\n\t\t}\n\t}\n\n\tprivate getFolderByMailListIdLegacy(mailListId: Id): MailFolder | null {\n\t\tconst subtree =\n\t\t\tthis.getFolderByMailListIdInSubtrees(this.systemSubtrees, mailListId) ?? this.getFolderByMailListIdInSubtrees(this.customSubtrees, mailListId)\n\t\treturn subtree?.folder ?? null\n\t}\n\n\t/**\n\t * Returns the children of a parent (applies only to custom folders)\n\t * if no parent is given, the top level custom folders are returned\n\t */\n\tgetCustomFoldersOfParent(parent: IdTuple | null): MailFolder[] {\n\t\tif (parent) {\n\t\t\tconst parentFolder = this.getFolderByIdInSubtrees([...this.customSubtrees, ...this.systemSubtrees], elementIdPart(parent))\n\t\t\treturn parentFolder ? parentFolder.children.map((child) => child.folder) : []\n\t\t} else {\n\t\t\treturn this.customSubtrees.map((subtree) => subtree.folder)\n\t\t}\n\t}\n\n\tgetDescendantFoldersOfParent(parent: IdTuple): IndentedFolder[] {\n\t\tconst parentFolder = this.getFolderByIdInSubtrees([...this.customSubtrees, ...this.systemSubtrees], elementIdPart(parent))\n\t\tif (parentFolder) {\n\t\t\treturn this.getIndentedFolderList([parentFolder]).slice(1)\n\t\t} else {\n\t\t\treturn []\n\t\t}\n\t}\n\n\t/** returns all parents of the folder, including the folder itself */\n\tgetPathToFolder(folderId: IdTuple): MailFolder[] {\n\t\treturn this.getPathToFolderInSubtrees(this.systemSubtrees, folderId) ?? this.getPathToFolderInSubtrees(this.customSubtrees, folderId) ?? []\n\t}\n\n\tcheckFolderForAncestor(folder: MailFolder, potentialAncestorId: IdTuple): boolean {\n\t\tlet currentFolderPointer: MailFolder | null = folder\n\t\twhile (true) {\n\t\t\tif (currentFolderPointer?.parentFolder == null) {\n\t\t\t\treturn false\n\t\t\t} else if (isSameId(currentFolderPointer.parentFolder, potentialAncestorId)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tcurrentFolderPointer = this.getFolderById(elementIdPart(currentFolderPointer.parentFolder))\n\t\t}\n\t}\n\n\tprivate getIndentedFolderList(subtrees: ReadonlyArray<FolderSubtree>, excludeFolder: MailFolder | null = null, currentLevel: number = 0): IndentedFolder[] {\n\t\tconst plainList: IndentedFolder[] = []\n\t\tfor (const subtree of subtrees) {\n\t\t\tif (!excludeFolder || !isSameId(subtree.folder._id, excludeFolder._id)) {\n\t\t\t\tplainList.push({ level: currentLevel, folder: subtree.folder })\n\t\t\t\tplainList.push(...this.getIndentedFolderList(subtree.children, excludeFolder, currentLevel + 1))\n\t\t\t}\n\t\t}\n\t\treturn plainList\n\t}\n\n\tprivate getIndentedSystemList(): IndentedFolder[] {\n\t\treturn this.systemSubtrees.map((subtree) => {\n\t\t\treturn { level: 0, folder: subtree.folder }\n\t\t})\n\t}\n\n\tprivate getFolderByIdInSubtrees(systems: ReadonlyArray<FolderSubtree>, folderId: Id): FolderSubtree | null {\n\t\treturn this.getFolderBy(systems, (system) => isSameId(getElementId(system.folder), folderId))\n\t}\n\n\tprivate getFolderByMailListIdInSubtrees(systems: ReadonlyArray<FolderSubtree>, mailListId: Id): FolderSubtree | null {\n\t\treturn this.getFolderBy(systems, (subtree) => isSameId(subtree.folder.mails, mailListId))\n\t}\n\n\tprivate getFolderBy(systems: ReadonlyArray<FolderSubtree>, predicate: (subtree: FolderSubtree) => boolean): FolderSubtree | null {\n\t\tconst topLevel = systems.find(predicate)\n\t\tif (topLevel) {\n\t\t\treturn topLevel\n\t\t} else {\n\t\t\tfor (const topLevelSystem of systems) {\n\t\t\t\tconst found = this.getFolderBy(topLevelSystem.children, predicate)\n\t\t\t\tif (found) {\n\t\t\t\t\treturn found\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null\n\t}\n\n\tprivate getPathToFolderInSubtrees(systems: readonly FolderSubtree[], folderId: IdTuple): MailFolder[] | null {\n\t\tfor (const system of systems) {\n\t\t\tif (isSameId(system.folder._id, folderId)) {\n\t\t\t\treturn [system.folder]\n\t\t\t}\n\t\t\tconst subpath = this.getPathToFolderInSubtrees(system.children, folderId)\n\t\t\tif (subpath) {\n\t\t\t\treturn [system.folder].concat(...subpath)\n\t\t\t}\n\t\t}\n\t\treturn null\n\t}\n\n\tprivate makeSubtree(folderByParent: Map<Id | null, readonly MailFolder[]>, parent: MailFolder, comparator: FolderComparator): FolderSubtree {\n\t\tconst childrenFolders = folderByParent.get(getElementId(parent))\n\t\tif (childrenFolders) {\n\t\t\tconst childSystems = childrenFolders\n\t\t\t\t.slice()\n\t\t\t\t.sort(comparator)\n\t\t\t\t.map((child) => this.makeSubtree(folderByParent, child, comparator))\n\t\t\treturn { folder: parent, children: childSystems }\n\t\t} else {\n\t\t\treturn { folder: parent, children: [] }\n\t\t}\n\t}\n}\n\ntype FolderComparator = (folder1: MailFolder, folder2: MailFolder) => number\n\nfunction compareCustom(folder1: MailFolder, folder2: MailFolder): number {\n\treturn folder1.name.localeCompare(folder2.name)\n}\n\ntype SystemMailFolderTypes = Exclude<MailSetKind, MailSetKind.CUSTOM | MailSetKind.LABEL | MailSetKind.Imported>\n\nconst folderTypeToOrder: Record<SystemMailFolderTypes, number> = {\n\t[MailSetKind.INBOX]: 0,\n\t[MailSetKind.DRAFT]: 1,\n\t[MailSetKind.SENT]: 2,\n\t[MailSetKind.TRASH]: 4,\n\t[MailSetKind.ARCHIVE]: 5,\n\t[MailSetKind.SPAM]: 6,\n\t[MailSetKind.ALL]: 7,\n}\n\nfunction compareSystem(folder1: MailFolder, folder2: MailFolder): number {\n\tconst order1 = folderTypeToOrder[folder1.folderType as SystemMailFolderTypes] ?? 7\n\tconst order2 = folderTypeToOrder[folder2.folderType as SystemMailFolderTypes] ?? 7\n\treturn order1 - order2\n}\n\n/**\n * an array of FolderSystems represent all folders.\n * the top folders are the toplevel folders in with their respective subfolders.\n */\nexport interface FolderSubtree {\n\treadonly folder: MailFolder\n\treadonly children: readonly FolderSubtree[]\n}\n"],"mappings":"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"}