{"version":3,"file":"IntegrationTest-BY8wHIXc.js","names":["folderListId: Id","contact"],"sources":["../tests/IntegrationTest.ts"],"sourcesContent":["import o from \"@tutao/otest\"\nimport { GroupType } from \"../../src/common/api/common/TutanotaConstants.js\"\nimport type { MailFolder } from \"../../src/common/api/entities/tutanota/TypeRefs.js\"\nimport {\n\tContactAddressTypeRef,\n\tContactListTypeRef,\n\tContactTypeRef,\n\tMailBoxTypeRef,\n\tMailFolderTypeRef,\n\tMailTypeRef,\n} from \"../../src/common/api/entities/tutanota/TypeRefs.js\"\nimport { neverNull } from \"@tutao/tutanota-utils\"\nimport { initLocator, locator } from \"../../src/mail-app/workerUtils/worker/WorkerLocator.js\"\nimport { browserDataStub, createTestEntity } from \"./TestUtils.js\"\nimport { SessionType } from \"../../src/common/api/common/SessionType.js\"\n\nfunction loadFolders(folderListId: Id): Promise<MailFolder[]> {\n\treturn locator.cachingEntityClient.loadAll(MailFolderTypeRef, folderListId)\n}\n\nfunction loadMailboxSystemFolders(): Promise<MailFolder[]> {\n\treturn locator.cachingEntityClient.loadRoot(MailBoxTypeRef, locator.user.getUserGroupId()).then((mailbox) => {\n\t\treturn loadFolders(neverNull(mailbox.folders).folders)\n\t})\n}\n\nfunction loadContactList() {\n\treturn locator.cachingEntityClient.loadRoot(ContactListTypeRef, locator.user.getUserGroupId())\n}\n\no.spec(\"integration test\", function () {\n\tlet mailbox = null\n\to(\"login, read mails, update contact\", async function () {\n\t\tenv.staticUrl = \"http://localhost:9000\"\n\t\tinitLocator(null as any, browserDataStub)\n\t\to.timeout(20000)\n\t\tawait locator.login.createSession(\"map-free@tutanota.de\", \"map\", \"Linux node\", SessionType.Temporary, null)\n\t\tconst folders = await loadMailboxSystemFolders()\n\t\tconst mails = await locator.cachingEntityClient.loadAll(MailTypeRef, folders[0].mails)\n\t\to(mails.length).equals(8)\n\t\tconst contactList = await loadContactList()\n\t\t// create new contact\n\t\tlet address = createTestEntity(ContactAddressTypeRef)\n\t\taddress.type = \"0\"\n\t\taddress.address = \"Entenhausen\"\n\t\taddress.customTypeName = \"0\"\n\t\tlet contact = createTestEntity(ContactTypeRef)\n\t\tcontact._ownerGroup = locator.user.getGroupId(GroupType.Contact)\n\t\tcontact.title = \"Dr.\"\n\t\tcontact.firstName = \"Max\"\n\t\tcontact.lastName = \"Meier\"\n\t\tcontact.comment = \"what?\"\n\t\tcontact.company = \"WIW\"\n\t\tcontact.addresses = [address]\n\t\tawait locator.cachingEntityClient.setup(contactList.contacts, contact)\n\t\tconst contacts = await locator.cachingEntityClient.loadAll(ContactTypeRef, contactList.contacts)\n\t\tconst firstNames = contacts.map((contact) => contact.firstName)\n\t\to(firstNames.indexOf(\"Max\")).notEquals(-1)\n\t})\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAAS,YAAYA,cAAyC;AAC7D,QAAO,QAAQ,oBAAoB,QAAQ,mBAAmB,aAAa;AAC3E;AAED,SAAS,2BAAkD;AAC1D,QAAO,QAAQ,oBAAoB,SAAS,gBAAgB,QAAQ,KAAK,gBAAgB,CAAC,CAAC,KAAK,CAAC,YAAY;AAC5G,SAAO,YAAY,UAAU,QAAQ,QAAQ,CAAC,QAAQ;CACtD,EAAC;AACF;AAED,SAAS,kBAAkB;AAC1B,QAAO,QAAQ,oBAAoB,SAAS,oBAAoB,QAAQ,KAAK,gBAAgB,CAAC;AAC9F;AAED,aAAE,KAAK,oBAAoB,WAAY;CACtC,IAAI,UAAU;AACd,cAAE,qCAAqC,iBAAkB;AACxD,MAAI,YAAY;AAChB,cAAY,MAAa,gBAAgB;AACzC,eAAE,QAAQ,IAAM;AAChB,QAAM,QAAQ,MAAM,cAAc,wBAAwB,OAAO,cAAc,YAAY,WAAW,KAAK;EAC3G,MAAM,UAAU,MAAM,0BAA0B;EAChD,MAAM,QAAQ,MAAM,QAAQ,oBAAoB,QAAQ,aAAa,QAAQ,GAAG,MAAM;AACtF,eAAE,MAAM,OAAO,CAAC,OAAO,EAAE;EACzB,MAAM,cAAc,MAAM,iBAAiB;EAE3C,IAAI,UAAU,iBAAiB,sBAAsB;AACrD,UAAQ,OAAO;AACf,UAAQ,UAAU;AAClB,UAAQ,iBAAiB;EACzB,IAAI,UAAU,iBAAiB,eAAe;AAC9C,UAAQ,cAAc,QAAQ,KAAK,WAAW,UAAU,QAAQ;AAChE,UAAQ,QAAQ;AAChB,UAAQ,YAAY;AACpB,UAAQ,WAAW;AACnB,UAAQ,UAAU;AAClB,UAAQ,UAAU;AAClB,UAAQ,YAAY,CAAC,OAAQ;AAC7B,QAAM,QAAQ,oBAAoB,MAAM,YAAY,UAAU,QAAQ;EACtE,MAAM,WAAW,MAAM,QAAQ,oBAAoB,QAAQ,gBAAgB,YAAY,SAAS;EAChG,MAAM,aAAa,SAAS,IAAI,CAACC,cAAYA,UAAQ,UAAU;AAC/D,eAAE,WAAW,QAAQ,MAAM,CAAC,CAAC,UAAU,GAAG;CAC1C,EAAC;AACF,EAAC"}