{"version":3,"file":"CalendarImporter-DjgWaF1e.js","names":["skippedEvents: CalendarEvent[]","confirmationText: TranslationKeyType","total: number","calendarGroupRoot: CalendarGroupRoot","importedParsedEvents: ParsedEvent[] | null","calendarType: CalendarType","parsedEvents: ParsedEvent[]","eventsForCreation: Array<EventWrapper>","groupRoot: CalendarGroupRoot","file: DataFile","events: CalendarEvent[]","okAction: (dialog: Dialog) => unknown","title: MaybeTranslation","renderConfig: RenderConfig<CalendarEvent, KindaCalendarRow>","item: CalendarEvent","calendarModel: CalendarModel","userController: UserController","events: ParsedEvent[]","groupColors: Map<Id, string>","calendars: CalendarInfo[]","groupColors: GroupColors","okAction: (dialog: Dialog, selectedCalendar: CalendarInfo) => unknown"],"sources":["../../src/common/calendar/import/CalendarImporterDialog.ts","../../src/common/calendar/import/CalendarImporter.ts"],"sourcesContent":["import type { CalendarEvent, CalendarGroupRoot } from \"../../api/entities/tutanota/TypeRefs.js\"\nimport { CalendarEventTypeRef, createFile } from \"../../api/entities/tutanota/TypeRefs.js\"\nimport { CALENDAR_MIME_TYPE, showFileChooser, showNativeFilePicker } from \"../../file/FileController.js\"\nimport { showProgressDialog } from \"../../gui/dialogs/ProgressDialog.js\"\nimport { ParserError } from \"../../misc/parsing/ParserCombinator.js\"\nimport { Dialog } from \"../../gui/base/Dialog.js\"\nimport { lang } from \"../../misc/LanguageViewModel.js\"\nimport { serializeCalendar } from \"../../../calendar-app/calendar/export/CalendarExporter.js\"\nimport { parseCalendarFile, ParsedEvent, showEventsImportDialog } from \"./CalendarImporter.js\"\nimport { elementIdPart, isSameId, listIdPart } from \"../../api/common/utils/EntityUtils.js\"\nimport type { UserAlarmInfo } from \"../../api/entities/sys/TypeRefs.js\"\nimport { UserAlarmInfoTypeRef } from \"../../api/entities/sys/TypeRefs.js\"\nimport { convertToDataFile } from \"../../api/common/DataFile.js\"\nimport { locator } from \"../../api/main/CommonLocator.js\"\nimport { ofClass, promiseMap, stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\nimport { CalendarType, getTimeZone, isExternalCalendarType } from \"../date/CalendarUtils.js\"\nimport { ImportError } from \"../../api/common/error/ImportError.js\"\nimport { TranslationKeyType } from \"../../misc/TranslationKey.js\"\nimport { isApp } from \"../../api/common/Env.js\"\n\nimport { EventImportRejectionReason, EventWrapper, sortOutParsedEvents } from \"./ImportExportUtils.js\"\n\n/**\n * show an error dialog detailing the reason and amount for events that failed to import\n */\nasync function partialImportConfirmation(skippedEvents: CalendarEvent[], confirmationText: TranslationKeyType, total: number): Promise<boolean> {\n\treturn (\n\t\tskippedEvents.length === 0 ||\n\t\t(await Dialog.confirm(\n\t\t\tlang.makeTranslation(\n\t\t\t\t\"confirm_msg\",\n\t\t\t\tlang.get(confirmationText, {\n\t\t\t\t\t\"{amount}\": skippedEvents.length + \"\",\n\t\t\t\t\t\"{total}\": total + \"\",\n\t\t\t\t}),\n\t\t\t),\n\t\t))\n\t)\n}\n\nexport async function handleCalendarImport(\n\tcalendarGroupRoot: CalendarGroupRoot,\n\timportedParsedEvents: ParsedEvent[] | null = null,\n\tcalendarType: CalendarType = CalendarType.NORMAL,\n): Promise<void> {\n\tconst parsedEvents: ParsedEvent[] = importedParsedEvents ?? (await showProgressDialog(\"loading_msg\", selectAndParseIcalFile()))\n\tif (parsedEvents.length === 0) return\n\tconst zone = getTimeZone()\n\tconst existingEvents = await showProgressDialog(\"loading_msg\", loadAllEvents(calendarGroupRoot))\n\tconst { rejectedEvents, eventsForCreation } = sortOutParsedEvents(parsedEvents, existingEvents, calendarGroupRoot, zone)\n\n\tconst total = parsedEvents.length\n\tif (!(await partialImportConfirmation(rejectedEvents.get(EventImportRejectionReason.Duplicate) ?? [], \"importEventExistingUid_msg\", total))) return\n\tif (!(await partialImportConfirmation(rejectedEvents.get(EventImportRejectionReason.InvalidDate) ?? [], \"importInvalidDatesInEvent_msg\", total))) return\n\tif (!(await partialImportConfirmation(rejectedEvents.get(EventImportRejectionReason.Inversed) ?? [], \"importEndNotAfterStartInEvent_msg\", total))) return\n\tif (!(await partialImportConfirmation(rejectedEvents.get(EventImportRejectionReason.Pre1970) ?? [], \"importPre1970StartInEvent_msg\", total))) return\n\n\tif (eventsForCreation.length > 0) {\n\t\tif (isExternalCalendarType(calendarType)) await importEvents(eventsForCreation)\n\t\telse\n\t\t\tshowEventsImportDialog(\n\t\t\t\teventsForCreation.map((ev) => ev.event),\n\t\t\t\tasync (dialog) => {\n\t\t\t\t\tdialog.close()\n\t\t\t\t\tawait importEvents(eventsForCreation)\n\t\t\t\t},\n\t\t\t\t\"importEvents_label\",\n\t\t\t)\n\t}\n}\n\nasync function selectAndParseIcalFile(): Promise<ParsedEvent[]> {\n\ttry {\n\t\tconst allowedExtensions = [\"ical\", \"ics\", \"ifb\", \"icalendar\"]\n\t\tconst dataFiles = isApp() ? await showNativeFilePicker(allowedExtensions, true) : await showFileChooser(true, allowedExtensions)\n\t\tconst contents = dataFiles.map((file) => parseCalendarFile(file).contents)\n\t\treturn contents.flat()\n\t} catch (e) {\n\t\tif (e instanceof ParserError) {\n\t\t\tconsole.log(\"Failed to parse file\", e)\n\t\t\tDialog.message(\n\t\t\t\tlang.makeTranslation(\n\t\t\t\t\t\"confirm_msg\",\n\t\t\t\t\tlang.get(\"importReadFileError_msg\", {\n\t\t\t\t\t\t\"{filename}\": e.filename ?? \"\",\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t)\n\t\t\treturn []\n\t\t} else {\n\t\t\tthrow e\n\t\t}\n\t}\n}\n\nasync function importEvents(eventsForCreation: Array<EventWrapper>): Promise<void> {\n\tconst operation = locator.operationProgressTracker.startNewOperation()\n\treturn showProgressDialog(\"importCalendar_label\", locator.calendarFacade.saveImportedCalendarEvents(eventsForCreation, operation.id), operation.progress)\n\t\t.catch(\n\t\t\tofClass(ImportError, (e) =>\n\t\t\t\tDialog.message(\n\t\t\t\t\tlang.makeTranslation(\n\t\t\t\t\t\t\"confirm_msg\",\n\t\t\t\t\t\tlang.get(\"importEventsError_msg\", {\n\t\t\t\t\t\t\t\"{amount}\": e.numFailed + \"\",\n\t\t\t\t\t\t\t\"{total}\": eventsForCreation.length.toString(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t)\n\t\t.finally(() => operation.done())\n}\n\n/** export all events from a calendar, using the alarmInfos the current user has access to and ignoring the other ones that may be set on the event. */\nexport async function exportCalendar(calendarName: string, groupRoot: CalendarGroupRoot, userAlarmInfos: Id, now: Date, zone: string): Promise<void> {\n\treturn await showProgressDialog(\n\t\t\"pleaseWait_msg\",\n\t\t(async () => {\n\t\t\tconst allEvents = await loadAllEvents(groupRoot)\n\t\t\tconst eventsWithAlarms = await promiseMap(allEvents, async (event: CalendarEvent) => {\n\t\t\t\tconst thisUserAlarms = event.alarmInfos.filter((alarmInfoId) => isSameId(userAlarmInfos, listIdPart(alarmInfoId)))\n\t\t\t\tif (thisUserAlarms.length === 0) return { event, alarms: [] }\n\t\t\t\tconst alarms = await locator.entityClient.loadMultiple(UserAlarmInfoTypeRef, userAlarmInfos, thisUserAlarms.map(elementIdPart))\n\t\t\t\treturn { event, alarms }\n\t\t\t})\n\t\t\treturn await exportCalendarEvents(calendarName, eventsWithAlarms, now, zone)\n\t\t})(),\n\t)\n}\n\nfunction exportCalendarEvents(\n\tcalendarName: string,\n\tevents: Array<{\n\t\tevent: CalendarEvent\n\t\talarms: Array<UserAlarmInfo>\n\t}>,\n\tnow: Date,\n\tzone: string,\n) {\n\tconst stringValue = serializeCalendar(env.versionNumber, events, now, zone)\n\tconst data = stringToUtf8Uint8Array(stringValue)\n\tconst tmpFile = createFile({\n\t\tname: calendarName === \"\" ? \"export.ics\" : calendarName + \"-export.ics\",\n\t\tmimeType: CALENDAR_MIME_TYPE,\n\t\tsize: String(data.byteLength),\n\t\tsubFiles: null,\n\t\tparent: null,\n\t\tcid: null,\n\t\tblobs: [],\n\t})\n\treturn locator.fileController.saveDataFile(convertToDataFile(tmpFile, data))\n}\n\nfunction loadAllEvents(groupRoot: CalendarGroupRoot): Promise<Array<CalendarEvent>> {\n\treturn locator.entityClient.loadAll(CalendarEventTypeRef, groupRoot.longEvents).then((longEvents) =>\n\t\tlocator.entityClient.loadAll(CalendarEventTypeRef, groupRoot.shortEvents).then((shortEvents) => {\n\t\t\treturn shortEvents.concat(longEvents)\n\t\t}),\n\t)\n}\n","import { DataFile } from \"../../api/common/DataFile.js\"\nimport { Require, utf8Uint8ArrayToString } from \"@tutao/tutanota-utils\"\nimport { getTimeZone } from \"../date/CalendarUtils.js\"\nimport { ParserError } from \"../../misc/parsing/ParserCombinator.js\"\nimport { CalendarEvent } from \"../../api/entities/tutanota/TypeRefs.js\"\nimport { AlarmInfoTemplate } from \"../../api/worker/facades/lazy/CalendarFacade.js\"\nimport { Dialog, DialogType } from \"../../gui/base/Dialog.js\"\nimport { lang, MaybeTranslation } from \"../../misc/LanguageViewModel.js\"\nimport { List, ListAttrs, ListLoadingState, MultiselectMode, RenderConfig } from \"../../gui/base/List.js\"\nimport { KindaCalendarRow } from \"../../../calendar-app/calendar/gui/CalendarRow.js\"\nimport { size } from \"../../gui/size.js\"\nimport { DialogHeaderBar } from \"../../gui/base/DialogHeaderBar.js\"\nimport { ButtonType } from \"../../gui/base/Button.js\"\nimport m from \"mithril\"\nimport { DropDownSelector, DropDownSelectorAttrs } from \"../../gui/base/DropDownSelector.js\"\nimport { getSharedGroupName, hasCapabilityOnGroup } from \"../../sharing/GroupUtils.js\"\nimport { BootIcons } from \"../../gui/base/icons/BootIcons.js\"\nimport { CalendarInfo, CalendarModel } from \"../../../calendar-app/calendar/model/CalendarModel.js\"\nimport { UserController } from \"../../api/main/UserController.js\"\nimport { ShareCapability } from \"../../api/common/TutanotaConstants.js\"\nimport { renderCalendarColor } from \"../../../calendar-app/calendar/gui/CalendarGuiUtils.js\"\nimport { GroupColors } from \"../../../calendar-app/calendar/view/CalendarView.js\"\nimport { handleCalendarImport } from \"./CalendarImporterDialog.js\"\nimport { parseCalendarStringData } from \"./ImportExportUtils.js\"\n\nexport type ParsedEvent = {\n\tevent: Require<\"uid\", CalendarEvent>\n\talarms: Array<AlarmInfoTemplate>\n}\nexport type ParsedCalendarData = {\n\tmethod: string\n\tcontents: Array<ParsedEvent>\n}\n\n/** given an ical datafile, get the parsed calendar events with their alarms as well as the ical method */\nexport function parseCalendarFile(file: DataFile): ParsedCalendarData {\n\ttry {\n\t\tconst stringData = utf8Uint8ArrayToString(file.data)\n\t\treturn parseCalendarStringData(stringData, getTimeZone())\n\t} catch (e) {\n\t\tif (e instanceof ParserError) {\n\t\t\tthrow new ParserError(e.message, file.name)\n\t\t} else {\n\t\t\tthrow e\n\t\t}\n\t}\n}\n\n/**\n * Shows a dialog with a preview of a given list of events\n * @param events The event list to be previewed\n * @param okAction The action to be executed when the user press the ok or continue button\n * @param title\n */\nexport function showEventsImportDialog(events: CalendarEvent[], okAction: (dialog: Dialog) => unknown, title: MaybeTranslation) {\n\tconst renderConfig: RenderConfig<CalendarEvent, KindaCalendarRow> = {\n\t\titemHeight: size.list_row_height,\n\t\tmultiselectionAllowed: MultiselectMode.Disabled,\n\t\tswipe: null,\n\t\tcreateElement: (dom) => {\n\t\t\treturn new KindaCalendarRow(dom)\n\t\t},\n\t}\n\n\tconst dialog = new Dialog(DialogType.EditSmall, {\n\t\tview: () => [\n\t\t\tm(DialogHeaderBar, {\n\t\t\t\tleft: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tmiddle: title,\n\t\t\t\tright: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t\t\tlabel: \"import_action\",\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\tokAction(dialog)\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t/** variable-size child container that may be scrollable. */\n\t\t\tm(\".dialog-max-height.plr-s.pb.text-break.nav-bg\", [\n\t\t\t\tm(\n\t\t\t\t\t\".flex.col.rel.mt-s\",\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\theight: \"80vh\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tm(List, {\n\t\t\t\t\t\trenderConfig,\n\t\t\t\t\t\tstate: {\n\t\t\t\t\t\t\titems: events,\n\t\t\t\t\t\t\tloadingStatus: ListLoadingState.Done,\n\t\t\t\t\t\t\tloadingAll: false,\n\t\t\t\t\t\t\tinMultiselect: true,\n\t\t\t\t\t\t\tactiveIndex: null,\n\t\t\t\t\t\t\tselectedItems: new Set(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonLoadMore() {},\n\t\t\t\t\t\tonRangeSelectionTowards(item: CalendarEvent) {},\n\t\t\t\t\t\tonRetryLoading() {},\n\t\t\t\t\t\tonSingleSelection(item: CalendarEvent) {},\n\t\t\t\t\t\tonSingleTogglingMultiselection(item: CalendarEvent) {},\n\t\t\t\t\t\tonStopLoading() {},\n\t\t\t\t\t} satisfies ListAttrs<CalendarEvent, KindaCalendarRow>),\n\t\t\t\t),\n\t\t\t]),\n\t\t],\n\t}).show()\n}\n\n/**\n * Handle the import of calendar events with preview of events to be imported\n * @param calendarModel\n * @param userController\n * @param events The event list to be previewed and imported\n */\nexport async function importCalendarFile(calendarModel: CalendarModel, userController: UserController, events: ParsedEvent[]) {\n\tconst groupSettings = userController.userSettingsGroupRoot.groupSettings\n\tconst calendarInfos = await calendarModel.getCalendarInfos()\n\tconst groupColors: Map<Id, string> = groupSettings.reduce((acc, gc) => {\n\t\tacc.set(gc.group, gc.color)\n\t\treturn acc\n\t}, new Map())\n\n\tcalendarSelectionDialog(Array.from(calendarInfos.values()), userController, groupColors, (dialog, selectedCalendar) => {\n\t\tdialog.close()\n\t\thandleCalendarImport(selectedCalendar.groupRoot, events)\n\t})\n}\n\n/**\n * Shows a dialog with user's calendars that are able to receive new events\n * @param calendars List of user's calendars\n * @param userController\n * @param groupColors List of calendar's colors\n * @param okAction\n */\nexport function calendarSelectionDialog(\n\tcalendars: CalendarInfo[],\n\tuserController: UserController,\n\tgroupColors: GroupColors,\n\tokAction: (dialog: Dialog, selectedCalendar: CalendarInfo) => unknown,\n) {\n\tconst availableCalendars = calendars.filter((calendarInfo) => hasCapabilityOnGroup(userController.user, calendarInfo.group, ShareCapability.Write))\n\tlet selectedCalendar = availableCalendars[0]\n\n\tconst dialog = new Dialog(DialogType.EditSmall, {\n\t\tview: () => [\n\t\t\tm(DialogHeaderBar, {\n\t\t\t\tleft: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tmiddle: \"calendar_label\",\n\t\t\t\tright: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t\t\tlabel: \"pricing.select_action\",\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\tokAction(dialog, selectedCalendar)\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\n\t\t\tm(\".dialog-max-height.plr-l.pt.pb.text-break.scroll\", [\n\t\t\t\tm(\".text-break.selectable\", lang.get(\"calendarImportSelection_label\")),\n\t\t\t\tm(DropDownSelector, {\n\t\t\t\t\tlabel: \"calendar_label\",\n\t\t\t\t\titems: availableCalendars.map((calendarInfo) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: getSharedGroupName(calendarInfo.groupInfo, userController, calendarInfo.shared),\n\t\t\t\t\t\t\tvalue: calendarInfo,\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t\tselectedValue: selectedCalendar,\n\t\t\t\t\tselectionChangedHandler: (v) => (selectedCalendar = v),\n\t\t\t\t\ticon: BootIcons.Expand,\n\t\t\t\t\tdisabled: availableCalendars.length < 2,\n\t\t\t\t\thelpLabel: () => renderCalendarColor(selectedCalendar, groupColors),\n\t\t\t\t} satisfies DropDownSelectorAttrs<CalendarInfo>),\n\t\t\t]),\n\t\t],\n\t}).show()\n}\n"],"mappings":"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"}