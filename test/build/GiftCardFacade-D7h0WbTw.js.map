{"version":3,"file":"GiftCardFacade-D7h0WbTw.js","names":["user: UserFacade","customer: CustomerFacade","serviceExecutor: IServiceExecutor","cryptoFacade: CryptoFacade","keyLoaderFacade: KeyLoaderFacade","message: string","value: NumberString","id: Id","key: string","giftCardInfoId: Id","countryCode: string","giftCard: GiftCard","token: string","key: Uint8Array"],"sources":["../../src/common/api/worker/facades/lazy/GiftCardFacade.ts"],"sourcesContent":["import { GroupType } from \"../../../common/TutanotaConstants.js\"\nimport {\n\tassertNotNull,\n\tBase64,\n\tbase64ExtToBase64,\n\tbase64ToBase64Ext,\n\tbase64ToBase64Url,\n\tbase64UrlToBase64,\n\tgetFirstOrThrow,\n\tisEmpty,\n\tuint8ArrayToBase64,\n} from \"@tutao/tutanota-utils\"\nimport type { GiftCardRedeemGetReturn } from \"../../../entities/sys/TypeRefs.js\"\nimport { createGiftCardCreateData, createGiftCardRedeemData, GiftCard } from \"../../../entities/sys/TypeRefs.js\"\nimport { aes256RandomKey, base64ToKey, bitArrayToUint8Array, sha256Hash } from \"@tutao/tutanota-crypto\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { GiftCardRedeemService, GiftCardService } from \"../../../entities/sys/Services.js\"\nimport { elementIdPart, GENERATED_MAX_ID } from \"../../../common/utils/EntityUtils.js\"\nimport { CryptoFacade } from \"../../crypto/CryptoFacade.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { ProgrammingError } from \"../../../common/error/ProgrammingError.js\"\nimport { CustomerFacade } from \"./CustomerFacade.js\"\nimport { KeyLoaderFacade } from \"../KeyLoaderFacade.js\"\nimport { encryptKeyWithVersionedKey } from \"../../crypto/CryptoWrapper.js\"\n\nconst ID_LENGTH = GENERATED_MAX_ID.length\nconst KEY_LENGTH_128_BIT_B64 = 24\nconst KEY_LENGTH_256_BIT_B64 = 44\n\nexport class GiftCardFacade {\n\tconstructor(\n\t\tprivate readonly user: UserFacade,\n\t\tprivate customer: CustomerFacade,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly cryptoFacade: CryptoFacade,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t) {}\n\n\tasync generateGiftCard(message: string, value: NumberString): Promise<IdTuple> {\n\t\tconst adminGroupIds = this.user.getGroupIds(GroupType.Admin)\n\n\t\tif (isEmpty(adminGroupIds)) {\n\t\t\tthrow new Error(\"missing admin membership\")\n\t\t}\n\n\t\tconst adminGroupId = getFirstOrThrow(adminGroupIds)\n\t\tconst ownerKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId)\n\n\t\tconst sessionKey = aes256RandomKey()\n\t\tconst ownerEncSessionKey = encryptKeyWithVersionedKey(ownerKey, sessionKey)\n\t\tconst { giftCard } = await this.serviceExecutor.post(\n\t\t\tGiftCardService,\n\t\t\tcreateGiftCardCreateData({\n\t\t\t\tmessage: message,\n\t\t\t\tkeyHash: sha256Hash(bitArrayToUint8Array(sessionKey)),\n\t\t\t\tvalue,\n\t\t\t\townerEncSessionKey: ownerEncSessionKey.key,\n\t\t\t\townerKeyVersion: ownerEncSessionKey.encryptingKeyVersion.toString(),\n\t\t\t}),\n\t\t\t{ sessionKey },\n\t\t)\n\n\t\treturn giftCard\n\t}\n\n\tgetGiftCardInfo(id: Id, key: string): Promise<GiftCardRedeemGetReturn> {\n\t\treturn this.serviceExecutor.get(\n\t\t\tGiftCardRedeemService,\n\t\t\tcreateGiftCardRedeemData({\n\t\t\t\tgiftCardInfo: id,\n\t\t\t\tkeyHash: sha256Hash(bitArrayToUint8Array(base64ToKey(key))),\n\t\t\t\tcountryCode: \"\",\n\t\t\t}),\n\t\t\t{\n\t\t\t\tsessionKey: base64ToKey(key),\n\t\t\t},\n\t\t)\n\t}\n\n\tasync redeemGiftCard(\n\t\tgiftCardInfoId: Id,\n\t\tkey: string,\n\t\t/** Country code to use if a free user is being upgraded to premium (required if accountType is free) */\n\t\tcountryCode: string,\n\t): Promise<void> {\n\t\tif ((await this.customer.loadAccountingInfo()).invoiceCountry == null && countryCode == null) {\n\t\t\tthrow new ProgrammingError(\"User must provide a country\")\n\t\t}\n\n\t\tawait this.serviceExecutor.post(\n\t\t\tGiftCardRedeemService,\n\t\t\tcreateGiftCardRedeemData({\n\t\t\t\tgiftCardInfo: giftCardInfoId,\n\t\t\t\tkeyHash: sha256Hash(bitArrayToUint8Array(base64ToKey(key))),\n\t\t\t\tcountryCode,\n\t\t\t}),\n\t\t)\n\t}\n\n\tasync encodeGiftCardToken(giftCard: GiftCard): Promise<string> {\n\t\tconst key = assertNotNull(await this.cryptoFacade.resolveSessionKeyForInstance(giftCard))\n\t\treturn this.encodeToken(elementIdPart(giftCard._id), bitArrayToUint8Array(key))\n\t}\n\n\tasync decodeGiftCardToken(token: string): Promise<{ id: Id; key: Base64 }> {\n\t\tconst id = base64ToBase64Ext(base64UrlToBase64(token.slice(0, ID_LENGTH)))\n\t\tconst key = base64UrlToBase64(token.slice(ID_LENGTH, token.length))\n\n\t\tif (id.length !== ID_LENGTH || (key.length !== KEY_LENGTH_128_BIT_B64 && key.length !== KEY_LENGTH_256_BIT_B64)) {\n\t\t\tthrow new Error(\"invalid token\")\n\t\t}\n\n\t\treturn { id, key }\n\t}\n\n\tprivate encodeToken(id: Id, key: Uint8Array): Base64 {\n\t\tif (id.length !== ID_LENGTH) {\n\t\t\tthrow new Error(\"Invalid gift card params\")\n\t\t}\n\t\tconst keyBase64 = uint8ArrayToBase64(key)\n\t\tif (keyBase64.length !== KEY_LENGTH_128_BIT_B64 && keyBase64.length !== KEY_LENGTH_256_BIT_B64) {\n\t\t\tthrow new Error(\"Invalid gift card key\")\n\t\t}\n\n\t\tconst idPart = base64ToBase64Url(base64ExtToBase64(id))\n\t\tconst keyPart = base64ToBase64Url(keyBase64)\n\t\treturn idPart + keyPart\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAM,YAAY,iBAAiB;AACnC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;IAElB,iBAAN,MAAqB;CAC3B,YACkBA,MACTC,UACSC,iBACAC,cACAC,iBAChB;EA6FF,KAlGkB;EAkGjB,KAjGQ;EAiGP,KAhGgB;EAgGf,KA/Fe;EA+Fd,KA9Fc;CACd;CAEJ,MAAM,iBAAiBC,SAAiBC,OAAuC;EAC9E,MAAM,gBAAgB,KAAK,KAAK,YAAY,UAAU,MAAM;AAE5D,MAAI,QAAQ,cAAc,CACzB,OAAM,IAAI,MAAM;EAGjB,MAAM,eAAe,gBAAgB,cAAc;EACnD,MAAM,WAAW,MAAM,KAAK,gBAAgB,sBAAsB,aAAa;EAE/E,MAAM,aAAa,iBAAiB;EACpC,MAAM,qBAAqB,2BAA2B,UAAU,WAAW;EAC3E,MAAM,EAAE,UAAU,GAAG,MAAM,KAAK,gBAAgB,KAC/C,iBACA,yBAAyB;GACf;GACT,SAAS,WAAW,qBAAqB,WAAW,CAAC;GACrD;GACA,oBAAoB,mBAAmB;GACvC,iBAAiB,mBAAmB,qBAAqB,UAAU;EACnE,EAAC,EACF,EAAE,WAAY,EACd;AAED,SAAO;CACP;CAED,gBAAgBC,IAAQC,KAA+C;AACtE,SAAO,KAAK,gBAAgB,IAC3B,uBACA,yBAAyB;GACxB,cAAc;GACd,SAAS,WAAW,qBAAqB,YAAY,IAAI,CAAC,CAAC;GAC3D,aAAa;EACb,EAAC,EACF,EACC,YAAY,YAAY,IAAI,CAC5B,EACD;CACD;CAED,MAAM,eACLC,gBACAD,KAEAE,aACgB;AAChB,OAAK,MAAM,KAAK,SAAS,oBAAoB,EAAE,kBAAkB,QAAQ,eAAe,KACvF,OAAM,IAAI,iBAAiB;AAG5B,QAAM,KAAK,gBAAgB,KAC1B,uBACA,yBAAyB;GACxB,cAAc;GACd,SAAS,WAAW,qBAAqB,YAAY,IAAI,CAAC,CAAC;GAC3D;EACA,EAAC,CACF;CACD;CAED,MAAM,oBAAoBC,UAAqC;EAC9D,MAAM,MAAM,cAAc,MAAM,KAAK,aAAa,6BAA6B,SAAS,CAAC;AACzF,SAAO,KAAK,YAAY,cAAc,SAAS,IAAI,EAAE,qBAAqB,IAAI,CAAC;CAC/E;CAED,MAAM,oBAAoBC,OAAiD;EAC1E,MAAM,KAAK,kBAAkB,kBAAkB,MAAM,MAAM,GAAG,UAAU,CAAC,CAAC;EAC1E,MAAM,MAAM,kBAAkB,MAAM,MAAM,WAAW,MAAM,OAAO,CAAC;AAEnE,MAAI,GAAG,WAAW,aAAc,IAAI,WAAW,0BAA0B,IAAI,WAAW,uBACvF,OAAM,IAAI,MAAM;AAGjB,SAAO;GAAE;GAAI;EAAK;CAClB;CAED,AAAQ,YAAYL,IAAQM,KAAyB;AACpD,MAAI,GAAG,WAAW,UACjB,OAAM,IAAI,MAAM;EAEjB,MAAM,YAAY,mBAAmB,IAAI;AACzC,MAAI,UAAU,WAAW,0BAA0B,UAAU,WAAW,uBACvE,OAAM,IAAI,MAAM;EAGjB,MAAM,SAAS,kBAAkB,kBAAkB,GAAG,CAAC;EACvD,MAAM,UAAU,kBAAkB,UAAU;AAC5C,SAAO,SAAS;CAChB;AACD"}