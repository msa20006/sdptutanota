{"version":3,"file":"GroupUtils-CpT2lvVS.js","names":["user: User","group: Group","requiredCapability: ShareCapability","gm: GroupMembership","sharedGroup: Group","user: Id | User","capability: ShareCapability","memberInfo: GroupMemberInfo","entityClient: EntityClient","groupMember: GroupMember","groupType: GroupType","userController: UserController","type: GroupType","invitation: ReceivedGroupInvitation","groupInfo: GroupInfo","allowGroupNameOverride: boolean"],"sources":["../../src/common/sharing/GroupUtils.ts"],"sourcesContent":["import {\n\tGroup,\n\tGroupInfo,\n\tGroupInfoTypeRef,\n\tGroupMember,\n\tGroupMembership,\n\tGroupMemberTypeRef,\n\tReceivedGroupInvitation,\n\tReceivedGroupInvitationTypeRef,\n\tUser,\n\tUserGroupRootTypeRef,\n} from \"../api/entities/sys/TypeRefs.js\"\nimport { GroupType, GroupTypeNameByCode, ShareCapability } from \"../api/common/TutanotaConstants\"\nimport { getEtId, isSameId } from \"../api/common/utils/EntityUtils\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport { downcast, ofClass, promiseMap } from \"@tutao/tutanota-utils\"\nimport type { EntityClient } from \"../api/common/EntityClient\"\nimport { NotFoundError } from \"../api/common/error/RestError\"\nimport { UserController } from \"../api/main/UserController\"\n\n/**\n * Whether or not a user has a given capability for a shared group. If the group type is not shareable, this will always return false\n * @param user\n * @param group\n * @param requiredCapability\n * @returns {boolean}\n */\nexport function hasCapabilityOnGroup(user: User, group: Group, requiredCapability: ShareCapability): boolean {\n\tif (!isShareableGroupType(downcast(group.type))) {\n\t\treturn false\n\t}\n\n\tif (isSharedGroupOwner(group, user._id)) {\n\t\treturn true\n\t}\n\n\tconst membership = user.memberships.find((gm: GroupMembership) => isSameId(gm.group, group._id))\n\n\tif (membership) {\n\t\treturn membership.capability != null && Number(requiredCapability) <= Number(membership.capability)\n\t}\n\n\treturn false\n}\n\nexport function isSharedGroupOwner(sharedGroup: Group, user: Id | User): boolean {\n\treturn !!(sharedGroup.user && isSameId(sharedGroup.user, typeof user === \"string\" ? user : getEtId(user)))\n}\n\nexport function getCapabilityText(capability: ShareCapability): string {\n\tswitch (capability) {\n\t\tcase ShareCapability.Invite:\n\t\t\treturn lang.get(\"groupCapabilityInvite_label\")\n\n\t\tcase ShareCapability.Write:\n\t\t\treturn lang.get(\"groupCapabilityWrite_label\")\n\n\t\tcase ShareCapability.Read:\n\t\t\treturn lang.get(\"groupCapabilityRead_label\")\n\n\t\tdefault:\n\t\t\treturn lang.get(\"comboBoxSelectionNone_msg\")\n\t}\n}\n\nexport type GroupMemberInfo = {\n\tmember: GroupMember\n\tinfo: GroupInfo\n}\n\nexport function getMemberCapability(memberInfo: GroupMemberInfo, group: Group): ShareCapability {\n\tif (isSharedGroupOwner(group, memberInfo.member.user)) {\n\t\treturn ShareCapability.Invite\n\t}\n\n\treturn downcast(memberInfo.member.capability)\n}\n\nexport function loadGroupMembers(group: Group, entityClient: EntityClient): Promise<Array<GroupMemberInfo>> {\n\treturn entityClient\n\t\t.loadAll(GroupMemberTypeRef, group.members)\n\t\t.then((members) => promiseMap(members, (member) => loadGroupInfoForMember(member, entityClient)))\n}\n\nexport function loadGroupInfoForMember(groupMember: GroupMember, entityClient: EntityClient): Promise<GroupMemberInfo> {\n\treturn entityClient.load(GroupInfoTypeRef, groupMember.userGroupInfo).then((userGroupInfo) => {\n\t\treturn {\n\t\t\tmember: groupMember,\n\t\t\tinfo: userGroupInfo,\n\t\t}\n\t})\n}\n\nexport function getDefaultGroupName(groupType: GroupType): string {\n\tswitch (groupType) {\n\t\tcase GroupType.Calendar:\n\t\t\treturn lang.get(\"privateCalendar_label\")\n\t\tcase GroupType.Template:\n\t\t\treturn lang.get(\"templateGroupDefaultName_label\")\n\t\tdefault:\n\t\t\treturn GroupTypeNameByCode[groupType]\n\t}\n}\n\nexport function loadReceivedGroupInvitations(\n\tuserController: UserController,\n\tentityClient: EntityClient,\n\ttype: GroupType,\n): Promise<Array<ReceivedGroupInvitation>> {\n\treturn entityClient\n\t\t.load(UserGroupRootTypeRef, userController.userGroupInfo.group)\n\t\t.then((userGroupRoot) => entityClient.loadAll(ReceivedGroupInvitationTypeRef, userGroupRoot.invitations))\n\t\t.then((invitations) => invitations.filter((invitation) => getInvitationGroupType(invitation) === type))\n\t\t.catch(ofClass(NotFoundError, () => []))\n}\n\n// Group invitations without a type set were sent when Calendars were the only shareable kind of user group\nconst DEFAULT_GROUP_TYPE = GroupType.Calendar\n\nexport function getInvitationGroupType(invitation: ReceivedGroupInvitation): ShareableGroupType {\n\treturn invitation.groupType === null ? DEFAULT_GROUP_TYPE : (invitation.groupType as ShareableGroupType)\n}\n\nexport function isTemplateGroup(groupType: GroupType): boolean {\n\treturn groupType === GroupType.Template\n}\n\nexport type ShareableGroupType = GroupType.Calendar | GroupType.Template | GroupType.ContactList\n\nexport function isShareableGroupType(groupType: GroupType): groupType is ShareableGroupType {\n\t// Should be synchronised with GroupType::isShareableGroup in tutadb\n\treturn groupType === GroupType.Calendar || groupType === GroupType.Template || groupType === GroupType.ContactList\n}\n\nexport const TemplateGroupPreconditionFailedReason = Object.freeze({\n\tBUSINESS_FEATURE_REQUIRED: \"templategroup.business_feature_required\",\n\tUNLIMITED_REQUIRED: \"templategroup.unlimited_required\",\n})\n\nexport function getSharedGroupName(groupInfo: GroupInfo, { userSettingsGroupRoot }: UserController, allowGroupNameOverride: boolean): string {\n\tconst groupSettings = userSettingsGroupRoot.groupSettings.find((gc) => gc.group === groupInfo.group)\n\treturn (allowGroupNameOverride && groupSettings && groupSettings.name) || groupInfo.name || getDefaultGroupName(downcast(groupInfo.groupType))\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BO,SAAS,qBAAqBA,MAAYC,OAAcC,oBAA8C;AAC5G,MAAK,qBAAqB,SAAS,MAAM,KAAK,CAAC,CAC9C,QAAO;AAGR,KAAI,mBAAmB,OAAO,KAAK,IAAI,CACtC,QAAO;CAGR,MAAM,aAAa,KAAK,YAAY,KAAK,CAACC,OAAwB,SAAS,GAAG,OAAO,MAAM,IAAI,CAAC;AAEhG,KAAI,WACH,QAAO,WAAW,cAAc,QAAQ,OAAO,mBAAmB,IAAI,OAAO,WAAW,WAAW;AAGpG,QAAO;AACP;AAEM,SAAS,mBAAmBC,aAAoBC,MAA0B;AAChF,WAAU,YAAY,QAAQ,SAAS,YAAY,aAAa,SAAS,WAAW,OAAO,QAAQ,KAAK,CAAC;AACzG;AAEM,SAAS,kBAAkBC,YAAqC;AACtE,SAAQ,YAAR;AACC,OAAK,gBAAgB,OACpB,QAAO,KAAK,IAAI,8BAA8B;AAE/C,OAAK,gBAAgB,MACpB,QAAO,KAAK,IAAI,6BAA6B;AAE9C,OAAK,gBAAgB,KACpB,QAAO,KAAK,IAAI,4BAA4B;AAE7C,UACC,QAAO,KAAK,IAAI,4BAA4B;CAC7C;AACD;AAOM,SAAS,oBAAoBC,YAA6BN,OAA+B;AAC/F,KAAI,mBAAmB,OAAO,WAAW,OAAO,KAAK,CACpD,QAAO,gBAAgB;AAGxB,QAAO,SAAS,WAAW,OAAO,WAAW;AAC7C;AAEM,SAAS,iBAAiBA,OAAcO,cAA6D;AAC3G,QAAO,aACL,QAAQ,oBAAoB,MAAM,QAAQ,CAC1C,KAAK,CAAC,YAAY,KAAW,SAAS,CAAC,WAAW,uBAAuB,QAAQ,aAAa,CAAC,CAAC;AAClG;AAEM,SAAS,uBAAuBC,aAA0BD,cAAsD;AACtH,QAAO,aAAa,KAAK,kBAAkB,YAAY,cAAc,CAAC,KAAK,CAAC,kBAAkB;AAC7F,SAAO;GACN,QAAQ;GACR,MAAM;EACN;CACD,EAAC;AACF;AAEM,SAAS,oBAAoBE,WAA8B;AACjE,SAAQ,WAAR;AACC,OAAK,UAAU,SACd,QAAO,KAAK,IAAI,wBAAwB;AACzC,OAAK,UAAU,SACd,QAAO,KAAK,IAAI,iCAAiC;AAClD,UACC,QAAO,oBAAoB;CAC5B;AACD;AAEM,SAAS,6BACfC,gBACAH,cACAI,MAC0C;AAC1C,QAAO,aACL,KAAK,sBAAsB,eAAe,cAAc,MAAM,CAC9D,KAAK,CAAC,kBAAkB,aAAa,QAAQ,gCAAgC,cAAc,YAAY,CAAC,CACxG,KAAK,CAAC,gBAAgB,YAAY,OAAO,CAAC,eAAe,uBAAuB,WAAW,KAAK,KAAK,CAAC,CACtG,MAAM,QAAQ,eAAe,MAAM,CAAE,EAAC,CAAC;AACzC;AAGD,MAAM,qBAAqB,UAAU;AAE9B,SAAS,uBAAuBC,YAAyD;AAC/F,QAAO,WAAW,cAAc,OAAO,qBAAsB,WAAW;AACxE;AAEM,SAAS,gBAAgBH,WAA+B;AAC9D,QAAO,cAAc,UAAU;AAC/B;AAIM,SAAS,qBAAqBA,WAAuD;AAE3F,QAAO,cAAc,UAAU,YAAY,cAAc,UAAU,YAAY,cAAc,UAAU;AACvG;MAEY,wCAAwC,OAAO,OAAO;CAClE,2BAA2B;CAC3B,oBAAoB;AACpB,EAAC;AAEK,SAAS,mBAAmBI,WAAsB,EAAE,uBAAuC,EAAEC,wBAAyC;CAC5I,MAAM,gBAAgB,sBAAsB,cAAc,KAAK,CAAC,OAAO,GAAG,UAAU,UAAU,MAAM;AACpG,QAAQ,0BAA0B,iBAAiB,cAAc,QAAS,UAAU,QAAQ,oBAAoB,SAAS,UAAU,UAAU,CAAC;AAC9I"}