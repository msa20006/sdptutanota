{"version":3,"file":"DesktopCredentialsStorageTest-C8qZJYdF.js","names":["sqliteNativePath: string","dbPath: string","app: Electron.App","retry: boolean","Sqlite","errors: []","credentials: PersistedCredentials","userId: string","row: Record<string, string | number | Uint8Array | null>","encryptionMode: CredentialEncryptionMode | null","encryptionKey: Uint8Array | null","encryptedCredentials1: PersistedCredentials","encryptedCredentials2: PersistedCredentials","storage: DesktopCredentialsStorage"],"sources":["../../src/common/desktop/db/DesktopCredentialsStorage.ts","../tests/desktop/credentials/DesktopCredentialsStorageTest.ts"],"sourcesContent":["import { log } from \"../DesktopLog.js\"\nimport { Database, default as Sqlite } from \"better-sqlite3\"\nimport fs from \"node:fs\"\nimport { OfflineDbClosedError } from \"../../api/common/error/OfflineDbClosedError.js\"\nimport { CryptoError } from \"@tutao/tutanota-crypto/error.js\"\nimport { SqlValue } from \"../../api/worker/offline/SqlValue.js\"\nimport { PersistedCredentials } from \"../../native/common/generatedipc/PersistedCredentials.js\"\nimport { UntaggedQuery, usql } from \"../../api/worker/offline/Sql.js\"\nimport { CredentialType } from \"../../misc/credentials/CredentialType.js\"\nimport { CredentialEncryptionMode } from \"../../misc/credentials/CredentialEncryptionMode.js\"\n\nconst TableDefinitions = Object.freeze({\n\tmeta: \"key TEXT NOT NULL, value\",\n\t// v1: add encryptedPassphraseKey BLOB\n\tcredentials:\n\t\t\"login TEXT NOT NULL, userId TEXT NOT NULL, type TEXT NOT NULL, accessToken BLOB NOT NULL, databaseKey BLOB,\" +\n\t\t\" encryptedPassword TEXT NOT NULL, PRIMARY KEY (userId), UNIQUE(login)\",\n\tcredentialEncryptionMode:\n\t\t\"id INTEGER NOT NULL, credentialEncryptionMode TEXT NOT NULL, FOREIGN KEY(credentialEncryptionMode) REFERENCES credentialEncryptionModeEnum(mode), PRIMARY KEY (id), CHECK (id=0)\",\n\tcredentialEncryptionKey: \"id INTEGER NOT NULL, credentialEncryptionKey BLOB NOT NULL, PRIMARY KEY (id), CHECK (id=0)\",\n} as const)\n\n/**\n * Sql database for storing already encrypted user credentials\n */\nexport class DesktopCredentialsStorage {\n\tprivate _db: Database | null = null\n\tprivate get db(): Database {\n\t\tif (this._db == null) {\n\t\t\tthrow new OfflineDbClosedError()\n\t\t}\n\t\treturn this._db\n\t}\n\n\tprivate readonly _sqliteNativePath: string | null = null\n\n\tconstructor(sqliteNativePath: string, private readonly dbPath: string, app: Electron.App) {\n\t\tthis._sqliteNativePath = sqliteNativePath\n\t\tif (this._db == null) {\n\t\t\tthis.create().then(() => {\n\t\t\t\tapp.on(\"will-quit\", () => this.closeDb())\n\t\t\t})\n\t\t}\n\t}\n\n\tasync create(retry: boolean = true): Promise<void> {\n\t\ttry {\n\t\t\tthis.openDb()\n\t\t\tthis.createTables()\n\t\t} catch (e) {\n\t\t\tif (!retry) throw e\n\t\t\tlog.debug(\"retrying to create credentials db\")\n\t\t\tawait this.deleteDb()\n\t\t\treturn this.create(false)\n\t\t}\n\t}\n\n\tprivate openDb(): void {\n\t\tthis._db = new Sqlite(this.dbPath, {\n\t\t\t// Remove ts-ignore once proper definition of Options exists, see https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/59049#\n\t\t\t// @ts-ignore missing type\n\t\t\tnativeBinding: this._sqliteNativePath,\n\t\t\t// verbose: (message, args) => console.log(\"DB\", message, args),\n\t\t})\n\t\ttry {\n\t\t\tthis.initSql()\n\t\t} catch (e) {\n\t\t\t// If we can't initialize the database we don't want to be stuck in a state where we hold the file lock, we need to retry the whole process again\n\t\t\tthis.db.close()\n\t\t\tthis._db = null\n\t\t\tthrow e\n\t\t}\n\t}\n\n\tprivate initSql() {\n\t\tthis.db.pragma(\"cipher_memory_security = ON\")\n\n\t\tconst errors: [] = this.db.pragma(\"cipher_integrity_check\")\n\t\tif (errors.length > 0) {\n\t\t\tthrow new CryptoError(`Integrity check failed with result : ${JSON.stringify(errors)}`)\n\t\t}\n\t}\n\n\tasync closeDb(): Promise<void> {\n\t\tthis.db.close()\n\t\tthis._db = null\n\t}\n\n\tasync deleteDb(): Promise<void> {\n\t\tlog.debug(\"deleting credentials db\")\n\t\tawait fs.promises.rm(this.dbPath, { maxRetries: 3, force: true })\n\t}\n\n\tprivate createTables() {\n\t\tlog.debug(`Creating tables...`)\n\t\tthis.createEnumTable()\n\t\tfor (let [name, definition] of Object.entries(TableDefinitions)) {\n\t\t\tthis.run({ query: `CREATE TABLE IF NOT EXISTS ${name} (${definition})`, params: [] })\n\t\t}\n\n\t\tconst version = this.get(usql`SELECT value FROM meta WHERE key = 'version'`)?.value\n\t\tlog.debug(`Current credentials version: ${version}`)\n\t\tif (version == null) {\n\t\t\tlog.debug(`Migrating to v1`)\n\t\t\tthis.db.transaction(() => {\n\t\t\t\tthis.run({ query: `ALTER TABLE credentials ADD COLUMN encryptedPassphraseKey BLOB`, params: [] })\n\t\t\t\tthis.run({ query: `INSERT INTO meta VALUES ('version', 1)`, params: [] })\n\t\t\t})()\n\t\t}\n\n\t\tlog.debug(`Tables created successfully!`)\n\t}\n\n\tstore(credentials: PersistedCredentials) {\n\t\tconst formattedQuery = usql`INSERT OR REPLACE INTO credentials (login, userId, type, accessToken, databaseKey, encryptedPassword, encryptedPassphraseKey) VALUES (\n${credentials.credentialInfo.login}, ${credentials.credentialInfo.userId}, ${credentials.credentialInfo.type},\n${credentials.accessToken}, ${credentials.databaseKey}, ${credentials.encryptedPassword}, ${credentials.encryptedPassphraseKey})`\n\t\treturn this.run(formattedQuery)\n\t}\n\n\tgetAllCredentials(): PersistedCredentials[] {\n\t\tconst records = this.all(usql`SELECT * FROM credentials`)\n\t\treturn records.map((row) => this.unmapCredentials(row))\n\t}\n\n\tgetCredentialsByUserId(userId: string) {\n\t\tconst row = this.get(usql`SELECT * FROM credentials WHERE userId = ${userId}`)\n\t\tif (!row) return null\n\t\treturn this.unmapCredentials(row)\n\t}\n\n\tdeleteByUserId(userId: string) {\n\t\treturn this.run(usql`DELETE FROM credentials WHERE userId = ${userId}`)\n\t}\n\n\tdeleteAllCredentials() {\n\t\tthis.run(usql`DELETE FROM credentials`)\n\t}\n\n\tprivate createEnumTable() {\n\t\tthis.run({ query: `CREATE TABLE IF NOT EXISTS credentialEncryptionModeEnum (mode TEXT UNIQUE)`, params: [] })\n\t\tfor (let i in CredentialEncryptionMode) {\n\t\t\tconst insertQuery = usql`INSERT OR REPLACE INTO credentialEncryptionModeEnum (mode) VALUES (${i})`\n\t\t\tthis.run(insertQuery)\n\t\t}\n\t}\n\n\tprivate unmapCredentials(row: Record<string, string | number | Uint8Array | null>): PersistedCredentials {\n\t\tconst credentialType = row.type as CredentialType\n\t\treturn {\n\t\t\tcredentialInfo: {\n\t\t\t\tlogin: row.login as string,\n\t\t\t\tuserId: row.userId as string,\n\t\t\t\ttype: credentialType,\n\t\t\t},\n\t\t\tencryptedPassword: row.encryptedPassword as string,\n\t\t\tencryptedPassphraseKey: row.encryptedPassphraseKey as Uint8Array | null,\n\t\t\taccessToken: row.accessToken as Uint8Array,\n\t\t\tdatabaseKey: row.databaseKey as Uint8Array,\n\t\t}\n\t}\n\n\tprivate run({ query, params }: UntaggedQuery): void {\n\t\tthis.db.prepare(query).run(params)\n\t}\n\n\t/**\n\t * Execute a query\n\t * @returns a single object or undefined if the query returns nothing\n\t */\n\tprivate get({ query, params }: UntaggedQuery): Record<string, SqlValue> | null {\n\t\treturn this.db.prepare(query).get(params) ?? null\n\t}\n\n\t/**\n\t * Execute a query\n\t * @returns a list of objects or an empty list if the query returns nothing\n\t */\n\tprivate all({ query, params }: UntaggedQuery): Array<Record<string, SqlValue>> {\n\t\treturn this.db.prepare(query).all(params)\n\t}\n\n\tgetCredentialEncryptionMode(): CredentialEncryptionMode | null {\n\t\tconst row = this.get(usql`SELECT credentialEncryptionMode FROM credentialEncryptionMode LIMIT 1`)\n\t\tif (!row) return null\n\t\treturn row.credentialEncryptionMode as CredentialEncryptionMode\n\t}\n\n\tgetCredentialEncryptionKey(): Uint8Array | null {\n\t\tconst row = this.get(usql`SELECT credentialEncryptionKey FROM credentialEncryptionKey LIMIT 1`)\n\t\tif (!row) return null\n\t\treturn row.credentialEncryptionKey as Uint8Array\n\t}\n\n\tsetCredentialEncryptionMode(encryptionMode: CredentialEncryptionMode | null) {\n\t\tif (encryptionMode != null) {\n\t\t\tthis.run(usql`INSERT OR REPLACE INTO credentialEncryptionMode (id, credentialEncryptionMode) VALUES (0, ${encryptionMode})`)\n\t\t} else {\n\t\t\tthis.run(usql`DELETE FROM credentialEncryptionMode`)\n\t\t}\n\t}\n\n\tsetCredentialEncryptionKey(encryptionKey: Uint8Array | null) {\n\t\tif (encryptionKey != null) {\n\t\t\tthis.run(usql`INSERT OR REPLACE INTO credentialEncryptionKey (id, credentialEncryptionKey) VALUES (0, ${encryptionKey})`)\n\t\t} else {\n\t\t\tthis.run(usql`DELETE FROM credentialEncryptionKey`)\n\t\t}\n\t}\n}\n","import o from \"@tutao/otest\"\nimport { DesktopCredentialsStorage } from \"../../../../src/common/desktop/db/DesktopCredentialsStorage.js\"\nimport { object } from \"testdouble\"\nimport { CredentialEncryptionMode } from \"../../../../src/common/misc/credentials/CredentialEncryptionMode.js\"\nimport { CredentialType } from \"../../../../src/common/misc/credentials/CredentialType.js\"\nimport { PersistedCredentials } from \"../../../../src/common/native/common/generatedipc/PersistedCredentials.js\"\n\nconst encryptedCredentials1: PersistedCredentials = {\n\tcredentialInfo: {\n\t\tlogin: \"login1@test.com\",\n\t\ttype: CredentialType.Internal,\n\t\tuserId: \"user1\",\n\t},\n\tencryptedPassword: \"pw1\",\n\tencryptedPassphraseKey: null,\n\tdatabaseKey: new Uint8Array([0x01, 0x0d, 0x0e]),\n\taccessToken: new Uint8Array([0x01, 0x0a, 0x0e]),\n}\n\nconst encryptedCredentials2: PersistedCredentials = {\n\tcredentialInfo: {\n\t\tlogin: \"login2@test.com\",\n\t\ttype: CredentialType.Internal,\n\t\tuserId: \"user2\",\n\t},\n\tencryptedPassword: \"pw2\",\n\tencryptedPassphraseKey: new Uint8Array([0x02, 0x0b, 0x0e]),\n\tdatabaseKey: new Uint8Array([0x02, 0x0d, 0x0e]),\n\taccessToken: new Uint8Array([0x02, 0x0a, 0x0e]),\n}\n\no.spec(\"DesktopCredentialsStorage\", () => {\n\tlet storage: DesktopCredentialsStorage\n\n\to.beforeEach(() => {\n\t\tstorage = new DesktopCredentialsStorage(__NODE_GYP_better_sqlite3, \":memory:\", object())\n\t})\n\to.afterEach(async () => {\n\t\tawait storage.closeDb()\n\t})\n\to.spec(\"credentialEncryptionKey\", () => {\n\t\to.test(\"when there is none it returns null\", () => {\n\t\t\to(storage.getCredentialEncryptionKey()).equals(null)\n\t\t})\n\n\t\to.test(\"it returns one after writing\", () => {\n\t\t\tconst key = new Uint8Array([0x04, 0x0e, 0x04])\n\t\t\tstorage.setCredentialEncryptionKey(key)\n\t\t\to(storage.getCredentialEncryptionKey()).deepEquals(key)\n\t\t})\n\n\t\to.test(\"it returns one after overwriting\", () => {\n\t\t\tconst key1 = new Uint8Array([0x04, 0x0e, 0x04, 0x01])\n\t\t\tconst key2 = new Uint8Array([0x04, 0x0e, 0x04, 0x02])\n\t\t\tstorage.setCredentialEncryptionKey(key1)\n\t\t\tstorage.setCredentialEncryptionKey(key2)\n\t\t\to(storage.getCredentialEncryptionKey()).deepEquals(key2)\n\t\t})\n\n\t\to.test(\"it returns null after writing null\", () => {\n\t\t\tconst key = new Uint8Array([0x04, 0x0e, 0x04])\n\t\t\tstorage.setCredentialEncryptionKey(key)\n\t\t\tstorage.setCredentialEncryptionKey(null)\n\t\t\to(storage.getCredentialEncryptionKey()).deepEquals(null)\n\t\t})\n\t})\n\n\to.spec(\"credentialEncryptionMode\", () => {\n\t\to.test(\"when there is none it returns null\", () => {\n\t\t\to(storage.getCredentialEncryptionMode()).equals(null)\n\t\t})\n\n\t\to.test(\"it returns one after writing\", () => {\n\t\t\tstorage.setCredentialEncryptionMode(CredentialEncryptionMode.APP_PASSWORD)\n\t\t\to(storage.getCredentialEncryptionMode()).deepEquals(CredentialEncryptionMode.APP_PASSWORD)\n\t\t})\n\n\t\to.test(\"it returns one after overwriting\", () => {\n\t\t\tstorage.setCredentialEncryptionMode(CredentialEncryptionMode.APP_PASSWORD)\n\t\t\tstorage.setCredentialEncryptionMode(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t\to(storage.getCredentialEncryptionMode()).deepEquals(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t})\n\n\t\to.test(\"it returns null after writing null\", () => {\n\t\t\tstorage.setCredentialEncryptionMode(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t\tstorage.setCredentialEncryptionMode(null)\n\t\t\to(storage.getCredentialEncryptionMode()).deepEquals(null)\n\t\t})\n\t})\n\n\to.spec(\"credentials\", () => {\n\t\to.beforeEach(() => {\n\t\t\tstorage.store(encryptedCredentials1)\n\t\t\tstorage.store(encryptedCredentials2)\n\t\t})\n\t\to.test(\"getCredentialsByUserId() returns credentials after storing\", () => {\n\t\t\to(storage.getCredentialsByUserId(encryptedCredentials1.credentialInfo.userId)).deepEquals(encryptedCredentials1)\n\t\t})\n\n\t\to.test(\"getAllCredentials() returns all after storing\", () => {\n\t\t\to(storage.getAllCredentials()).deepEquals([encryptedCredentials1, encryptedCredentials2])\n\t\t})\n\n\t\to.test(\"doesn't return after deleteByUserId\", () => {\n\t\t\tstorage.deleteByUserId(encryptedCredentials1.credentialInfo.userId)\n\t\t\to(storage.getAllCredentials()).deepEquals([encryptedCredentials2])\n\t\t})\n\n\t\to.test(\"doesn't return after deleteAll()\", () => {\n\t\t\tstorage.deleteAllCredentials()\n\t\t\to(storage.getAllCredentials()).deepEquals([])\n\t\t})\n\t})\n})\n"],"mappings":"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"}