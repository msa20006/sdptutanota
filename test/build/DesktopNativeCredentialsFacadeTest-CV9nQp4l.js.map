{"version":3,"file":"DesktopNativeCredentialsFacadeTest-CV9nQp4l.js","names":["crypto: DesktopNativeCryptoFacade","credentialDb: DesktopCredentialsStorage","keychainEncryption: KeychainEncryption","id: string","persistedCredentials: PersistedCredentials","credentialsKey: BitArray","unencryptedCredentials: UnencryptedCredentials","credentialsEncryptionKey: BitArray","encryptionMode: CredentialEncryptionMode","credentials: UnencryptedCredentials","encryptedCredentials: PersistedCredentials","credentials: ReadonlyArray<PersistedCredentials>","credentialsKey: Uint8Array","credentials: PersistedCredentials","crypto: DesktopNativeCryptoFacade","credentialsDb: DesktopCredentialsStorage","keychainEncryption: KeychainEncryption","facade: DesktopNativeCredentialsFacade","encryptedCredentials1: PersistedCredentials","decryptedCredentials1: UnencryptedCredentials","encryptedCredentials2: PersistedCredentials","decryptedCredentials2: UnencryptedCredentials","credentials: PersistedCredentials[]"],"sources":["../../src/common/desktop/credentials/DesktopNativeCredentialsFacade.ts","../tests/desktop/credentials/DesktopNativeCredentialsFacadeTest.ts"],"sourcesContent":["import { CredentialEncryptionMode } from \"../../misc/credentials/CredentialEncryptionMode.js\"\nimport { DesktopNativeCryptoFacade } from \"../DesktopNativeCryptoFacade\"\nimport { stringToUtf8Uint8Array, utf8Uint8ArrayToString } from \"@tutao/tutanota-utils\"\nimport { NativeCredentialsFacade } from \"../../native/common/generatedipc/NativeCredentialsFacade.js\"\nimport { BitArray, bitArrayToUint8Array, uint8ArrayToBitArray } from \"@tutao/tutanota-crypto\"\nimport { KeyPermanentlyInvalidatedError } from \"../../api/common/error/KeyPermanentlyInvalidatedError.js\"\nimport { PersistedCredentials } from \"../../native/common/generatedipc/PersistedCredentials.js\"\nimport { DesktopCredentialsStorage } from \"../db/DesktopCredentialsStorage.js\"\nimport { UnencryptedCredentials } from \"../../native/common/generatedipc/UnencryptedCredentials.js\"\nimport { assertDesktopEncryptionMode, assertSupportedEncryptionMode, DesktopCredentialsMode, SUPPORTED_MODES } from \"./CredentialCommons.js\"\nimport { KeychainEncryption } from \"./KeychainEncryption.js\"\n\n/**\n * Native storage will transparently encrypt and decrypt database key and access token during load and store calls.\n */\nexport class DesktopNativeCredentialsFacade implements NativeCredentialsFacade {\n\tconstructor(\n\t\tprivate readonly crypto: DesktopNativeCryptoFacade,\n\t\tprivate readonly credentialDb: DesktopCredentialsStorage,\n\t\tprivate readonly keychainEncryption: KeychainEncryption,\n\t) {}\n\n\tasync getSupportedEncryptionModes(): Promise<ReadonlyArray<DesktopCredentialsMode>> {\n\t\treturn SUPPORTED_MODES\n\t}\n\n\tasync deleteByUserId(id: string): Promise<void> {\n\t\tthis.credentialDb.deleteByUserId(id)\n\t}\n\n\tasync getCredentialEncryptionMode(): Promise<CredentialEncryptionMode | null> {\n\t\treturn this.credentialDb.getCredentialEncryptionMode()\n\t}\n\n\tprivate getDesktopCredentialEncryptionMode(): DesktopCredentialsMode | null {\n\t\tconst retVal = this.credentialDb.getCredentialEncryptionMode()\n\t\treturn retVal ? CredentialEncryptionMode[retVal as DesktopCredentialsMode] : null\n\t}\n\n\tasync loadAll(): Promise<ReadonlyArray<PersistedCredentials>> {\n\t\treturn this.credentialDb.getAllCredentials()\n\t}\n\n\tasync loadByUserId(id: string): Promise<UnencryptedCredentials | null> {\n\t\tconst credentialsKey = await this.getCredentialsEncryptionKey()\n\t\tif (credentialsKey == null) {\n\t\t\tthrow new KeyPermanentlyInvalidatedError(\"Credentials key is missing, cannot decrypt credentials\")\n\t\t}\n\t\tconst encryptedCredentials = this.credentialDb.getCredentialsByUserId(id)\n\t\treturn encryptedCredentials ? this.decryptCredentials(encryptedCredentials, credentialsKey) : null\n\t}\n\n\tprivate decryptCredentials(persistedCredentials: PersistedCredentials, credentialsKey: BitArray): UnencryptedCredentials {\n\t\ttry {\n\t\t\treturn {\n\t\t\t\tcredentialInfo: persistedCredentials.credentialInfo,\n\t\t\t\tencryptedPassword: persistedCredentials.encryptedPassword,\n\t\t\t\taccessToken: utf8Uint8ArrayToString(this.crypto.aesDecryptBytes(credentialsKey, persistedCredentials.accessToken)),\n\t\t\t\tdatabaseKey: persistedCredentials.databaseKey ? this.crypto.aesDecryptBytes(credentialsKey, persistedCredentials.databaseKey) : null,\n\t\t\t\tencryptedPassphraseKey: persistedCredentials.encryptedPassphraseKey,\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthrow new KeyPermanentlyInvalidatedError(\"Failed AES decrypt: \" + e)\n\t\t}\n\t}\n\n\tprivate encryptCredentials(unencryptedCredentials: UnencryptedCredentials, credentialsEncryptionKey: BitArray): PersistedCredentials {\n\t\treturn {\n\t\t\tcredentialInfo: unencryptedCredentials.credentialInfo,\n\t\t\taccessToken: this.crypto.aesEncryptBytes(credentialsEncryptionKey, stringToUtf8Uint8Array(unencryptedCredentials.accessToken)),\n\t\t\tdatabaseKey: unencryptedCredentials.databaseKey ? this.crypto.aesEncryptBytes(credentialsEncryptionKey, unencryptedCredentials.databaseKey) : null,\n\t\t\tencryptedPassphraseKey: unencryptedCredentials.encryptedPassphraseKey,\n\t\t\tencryptedPassword: unencryptedCredentials.encryptedPassword,\n\t\t}\n\t}\n\n\tasync setCredentialEncryptionMode(encryptionMode: CredentialEncryptionMode): Promise<void> {\n\t\tassertDesktopEncryptionMode(encryptionMode)\n\t\tconst decryptedKey = await this.getOrCreateCredentialEncryptionKey()\n\t\tconst encryptedKey = await this.keychainEncryption.encryptUsingKeychain(bitArrayToUint8Array(decryptedKey), encryptionMode)\n\t\tthis.credentialDb.setCredentialEncryptionMode(encryptionMode)\n\t\tthis.credentialDb.setCredentialEncryptionKey(encryptedKey)\n\t}\n\n\tasync store(credentials: UnencryptedCredentials): Promise<void> {\n\t\tconst credentialsEncryptionKey = await this.getOrCreateCredentialEncryptionKey()\n\t\tconst encryptedCredentials: PersistedCredentials = this.encryptCredentials(credentials, credentialsEncryptionKey)\n\t\treturn this.storeEncrypted(encryptedCredentials)\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tthis.credentialDb.deleteAllCredentials()\n\t\tthis.credentialDb.setCredentialEncryptionKey(null)\n\t\tthis.credentialDb.setCredentialEncryptionMode(null)\n\t}\n\n\tasync migrateToNativeCredentials(credentials: ReadonlyArray<PersistedCredentials>, encryptionMode: CredentialEncryptionMode, credentialsKey: Uint8Array) {\n\t\t// store persistedCredentials, key & mode\n\t\tassertSupportedEncryptionMode(encryptionMode as DesktopCredentialsMode)\n\t\tthis.credentialDb.setCredentialEncryptionMode(encryptionMode)\n\t\tthis.credentialDb.setCredentialEncryptionKey(credentialsKey)\n\t\tfor (const credential of credentials) {\n\t\t\tawait this.storeEncrypted(credential)\n\t\t}\n\t}\n\n\tasync storeEncrypted(credentials: PersistedCredentials): Promise<void> {\n\t\tthis.credentialDb.store(credentials)\n\t}\n\n\tprivate async getOrCreateCredentialEncryptionKey(): Promise<BitArray> {\n\t\tconst existingKey = await this.getCredentialsEncryptionKey()\n\t\tif (existingKey != null) {\n\t\t\treturn existingKey\n\t\t} else {\n\t\t\tconst encryptionMode = this.getDesktopCredentialEncryptionMode() ?? CredentialEncryptionMode.DEVICE_LOCK\n\t\t\tconst newKey = bitArrayToUint8Array(this.crypto.generateDeviceKey())\n\t\t\tconst encryptedKey = await this.keychainEncryption.encryptUsingKeychain(newKey, encryptionMode)\n\t\t\tthis.credentialDb.setCredentialEncryptionKey(encryptedKey)\n\t\t\treturn uint8ArrayToBitArray(newKey)\n\t\t}\n\t}\n\n\tprivate async getCredentialsEncryptionKey(): Promise<BitArray | null> {\n\t\tconst encryptionMode = this.getDesktopCredentialEncryptionMode() ?? CredentialEncryptionMode.DEVICE_LOCK\n\t\tconst keyChainEncCredentialsKey = this.credentialDb.getCredentialEncryptionKey()\n\t\tif (keyChainEncCredentialsKey != null) {\n\t\t\tconst credentialsKey = await this.keychainEncryption.decryptUsingKeychain(keyChainEncCredentialsKey, encryptionMode)\n\t\t\treturn uint8ArrayToBitArray(credentialsKey)\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n}\n","import o from \"@tutao/otest\"\nimport { DesktopNativeCredentialsFacade } from \"../../../../src/common/desktop/credentials/DesktopNativeCredentialsFacade.js\"\nimport { DesktopNativeCryptoFacade } from \"../../../../src/common/desktop/DesktopNativeCryptoFacade.js\"\nimport { object, verify, when } from \"testdouble\"\nimport { DesktopCredentialsStorage } from \"../../../../src/common/desktop/db/DesktopCredentialsStorage.js\"\nimport { KeychainEncryption } from \"../../../../src/common/desktop/credentials/KeychainEncryption.js\"\nimport { CredentialEncryptionMode } from \"../../../../src/common/misc/credentials/CredentialEncryptionMode.js\"\nimport { PersistedCredentials } from \"../../../../src/common/native/common/generatedipc/PersistedCredentials.js\"\nimport { CredentialType } from \"../../../../src/common/misc/credentials/CredentialType.js\"\nimport { uint8ArrayToBitArray } from \"@tutao/tutanota-crypto\"\nimport { stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\nimport { UnencryptedCredentials } from \"../../../../src/common/native/common/generatedipc/UnencryptedCredentials.js\"\n\no.spec(\"DesktopNativeCredentialsFacade\", () => {\n\tconst crypto: DesktopNativeCryptoFacade = object()\n\tconst credentialsDb: DesktopCredentialsStorage = object()\n\tconst keychainEncryption: KeychainEncryption = object()\n\tlet facade: DesktopNativeCredentialsFacade\n\n\tconst encryptedCredentials1: PersistedCredentials = {\n\t\tcredentialInfo: {\n\t\t\tlogin: \"login1@test.com\",\n\t\t\ttype: CredentialType.Internal,\n\t\t\tuserId: \"user1\",\n\t\t},\n\t\tencryptedPassword: \"pw1\",\n\t\tencryptedPassphraseKey: null,\n\t\tdatabaseKey: new Uint8Array([0x01, 0x0d, 0x0e]),\n\t\taccessToken: new Uint8Array([0x01, 0x0a, 0x0e]),\n\t}\n\n\tconst decryptedCredentials1: UnencryptedCredentials = {\n\t\tcredentialInfo: {\n\t\t\tlogin: \"login1@test.com\",\n\t\t\ttype: CredentialType.Internal,\n\t\t\tuserId: \"user1\",\n\t\t},\n\t\tencryptedPassword: \"pw1\",\n\t\tencryptedPassphraseKey: null,\n\t\tdatabaseKey: new Uint8Array([0x01, 0x0d, 0x0d]),\n\t\taccessToken: \"decAccessToken1\",\n\t}\n\n\tconst encryptedCredentials2: PersistedCredentials = {\n\t\tcredentialInfo: {\n\t\t\tlogin: \"login2@test.com\",\n\t\t\ttype: CredentialType.Internal,\n\t\t\tuserId: \"user2\",\n\t\t},\n\t\tencryptedPassword: \"pw2\",\n\t\tencryptedPassphraseKey: new Uint8Array([0x02, 0x0b, 0x0e]),\n\t\tdatabaseKey: new Uint8Array([0x02, 0x0d, 0x0e]),\n\t\taccessToken: new Uint8Array([0x02, 0x0a, 0x0e]),\n\t}\n\n\tconst decryptedCredentials2: UnencryptedCredentials = {\n\t\tcredentialInfo: {\n\t\t\tlogin: \"login2@test.com\",\n\t\t\ttype: CredentialType.Internal,\n\t\t\tuserId: \"user2\",\n\t\t},\n\t\tencryptedPassword: \"pw2\",\n\t\tencryptedPassphraseKey: new Uint8Array([0x02, 0x0b, 0x0e]),\n\t\tdatabaseKey: new Uint8Array([0x02, 0x0d, 0x0d]),\n\t\taccessToken: \"decAccessToken2\",\n\t}\n\n\tconst encCredentialsKey = new Uint8Array([0x0e])\n\tconst decCredentialsKey = new Uint8Array([0x0d])\n\n\to.beforeEach(() => {\n\t\tfacade = new DesktopNativeCredentialsFacade(crypto, credentialsDb, keychainEncryption)\n\t})\n\n\to.test(\"deleteByUserId deletes it from the db\", async () => {\n\t\tconst userId = \"user1\"\n\t\tawait facade.deleteByUserId(userId)\n\t\tverify(credentialsDb.deleteByUserId(userId))\n\t})\n\n\to.test(\"getCredentialEncryptionMode returns null from the db\", async () => {\n\t\twhen(credentialsDb.getCredentialEncryptionMode()).thenReturn(null)\n\t\to(await facade.getCredentialEncryptionMode()).equals(null)\n\t})\n\n\to.test(\"getCredentialEncryptionMode returns mode from the db\", async () => {\n\t\twhen(credentialsDb.getCredentialEncryptionMode()).thenReturn(CredentialEncryptionMode.APP_PASSWORD)\n\t\to(await facade.getCredentialEncryptionMode()).equals(CredentialEncryptionMode.APP_PASSWORD)\n\t})\n\n\to.test(\"loadAll returns credentials from the db\", async () => {\n\t\tconst credentials: PersistedCredentials[] = [encryptedCredentials1, encryptedCredentials2]\n\t\twhen(credentialsDb.getAllCredentials()).thenReturn(credentials)\n\t\to(await facade.loadAll()).deepEquals(credentials)\n\t})\n\n\to.spec(\"loadByUserId\", () => {\n\t\to.test(\"when there is a key it is used to decrypt credentials w/o passphrase key\", async () => {\n\t\t\twhen(credentialsDb.getCredentialEncryptionKey()).thenReturn(encCredentialsKey)\n\t\t\twhen(credentialsDb.getCredentialEncryptionMode()).thenReturn(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t\twhen(credentialsDb.getCredentialsByUserId(\"user1\")).thenReturn(encryptedCredentials1)\n\t\t\twhen(keychainEncryption.decryptUsingKeychain(encCredentialsKey, CredentialEncryptionMode.DEVICE_LOCK)).thenResolve(decCredentialsKey)\n\t\t\twhen(crypto.aesDecryptBytes(uint8ArrayToBitArray(decCredentialsKey), encryptedCredentials1.databaseKey!)).thenReturn(\n\t\t\t\tdecryptedCredentials1.databaseKey!,\n\t\t\t)\n\t\t\twhen(crypto.aesDecryptBytes(uint8ArrayToBitArray(decCredentialsKey), encryptedCredentials1.accessToken)).thenReturn(\n\t\t\t\tstringToUtf8Uint8Array(decryptedCredentials1.accessToken),\n\t\t\t)\n\n\t\t\tconst decryptedCredentials = await facade.loadByUserId(\"user1\")\n\t\t\to(decryptedCredentials).deepEquals(decryptedCredentials1)\n\t\t})\n\n\t\to.test(\"when there is a key it is used to decrypt credentials w/ passphrase key\", async () => {\n\t\t\twhen(credentialsDb.getCredentialEncryptionKey()).thenReturn(encCredentialsKey)\n\t\t\twhen(credentialsDb.getCredentialEncryptionMode()).thenReturn(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t\twhen(credentialsDb.getCredentialsByUserId(\"user2\")).thenReturn(encryptedCredentials2)\n\t\t\twhen(keychainEncryption.decryptUsingKeychain(encCredentialsKey, CredentialEncryptionMode.DEVICE_LOCK)).thenResolve(decCredentialsKey)\n\t\t\twhen(crypto.aesDecryptBytes(uint8ArrayToBitArray(decCredentialsKey), encryptedCredentials2.databaseKey!)).thenReturn(\n\t\t\t\tdecryptedCredentials2.databaseKey!,\n\t\t\t)\n\t\t\twhen(crypto.aesDecryptBytes(uint8ArrayToBitArray(decCredentialsKey), encryptedCredentials2.accessToken)).thenReturn(\n\t\t\t\tstringToUtf8Uint8Array(decryptedCredentials2.accessToken),\n\t\t\t)\n\n\t\t\tconst decryptedCredentials = await facade.loadByUserId(\"user2\")\n\t\t\to(decryptedCredentials).deepEquals(decryptedCredentials2)\n\t\t})\n\n\t\to.test(\"when another mode is selected it is used\", async () => {\n\t\t\twhen(credentialsDb.getCredentialEncryptionKey()).thenReturn(encCredentialsKey)\n\t\t\twhen(credentialsDb.getCredentialEncryptionMode()).thenReturn(CredentialEncryptionMode.APP_PASSWORD)\n\t\t\twhen(credentialsDb.getCredentialsByUserId(\"user1\")).thenReturn(encryptedCredentials1)\n\t\t\twhen(keychainEncryption.decryptUsingKeychain(encCredentialsKey, CredentialEncryptionMode.APP_PASSWORD)).thenResolve(decCredentialsKey)\n\t\t\twhen(crypto.aesDecryptBytes(uint8ArrayToBitArray(decCredentialsKey), encryptedCredentials1.databaseKey!)).thenReturn(\n\t\t\t\tdecryptedCredentials1.databaseKey!,\n\t\t\t)\n\t\t\twhen(crypto.aesDecryptBytes(uint8ArrayToBitArray(decCredentialsKey), encryptedCredentials1.accessToken)).thenReturn(\n\t\t\t\tstringToUtf8Uint8Array(decryptedCredentials1.accessToken),\n\t\t\t)\n\n\t\t\tconst decryptedCredentials = await facade.loadByUserId(\"user1\")\n\t\t\to(decryptedCredentials).deepEquals(decryptedCredentials1)\n\t\t})\n\n\t\to.spec(\"store\", () => {\n\t\t\to.test(\"when there is a key, it is used\", async () => {\n\t\t\t\twhen(credentialsDb.getCredentialEncryptionKey()).thenReturn(encCredentialsKey)\n\t\t\t\twhen(credentialsDb.getCredentialEncryptionMode()).thenReturn(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t\t\twhen(credentialsDb.getCredentialsByUserId(\"user1\")).thenReturn(encryptedCredentials1)\n\t\t\t\twhen(keychainEncryption.decryptUsingKeychain(encCredentialsKey, CredentialEncryptionMode.DEVICE_LOCK)).thenResolve(decCredentialsKey)\n\t\t\t\twhen(crypto.aesEncryptBytes(uint8ArrayToBitArray(decCredentialsKey), decryptedCredentials1.databaseKey!)).thenReturn(\n\t\t\t\t\tencryptedCredentials1.databaseKey!,\n\t\t\t\t)\n\t\t\t\twhen(crypto.aesEncryptBytes(uint8ArrayToBitArray(decCredentialsKey), stringToUtf8Uint8Array(decryptedCredentials1.accessToken))).thenReturn(\n\t\t\t\t\tencryptedCredentials1.accessToken,\n\t\t\t\t)\n\n\t\t\t\tawait facade.store(decryptedCredentials1)\n\t\t\t\tverify(credentialsDb.store(encryptedCredentials1))\n\t\t\t})\n\n\t\t\to.test(\"when there is no key, it generates and stores one\", async () => {\n\t\t\t\twhen(credentialsDb.getCredentialEncryptionKey()).thenReturn(null)\n\t\t\t\twhen(crypto.generateDeviceKey()).thenReturn(uint8ArrayToBitArray(decCredentialsKey))\n\t\t\t\twhen(credentialsDb.getCredentialEncryptionMode()).thenReturn(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t\t\twhen(credentialsDb.getCredentialsByUserId(\"user1\")).thenReturn(encryptedCredentials1)\n\t\t\t\twhen(crypto.aesEncryptBytes(uint8ArrayToBitArray(decCredentialsKey), decryptedCredentials1.databaseKey!)).thenReturn(\n\t\t\t\t\tencryptedCredentials1.databaseKey!,\n\t\t\t\t)\n\t\t\t\twhen(crypto.aesEncryptBytes(uint8ArrayToBitArray(decCredentialsKey), stringToUtf8Uint8Array(decryptedCredentials1.accessToken))).thenReturn(\n\t\t\t\t\tencryptedCredentials1.accessToken,\n\t\t\t\t)\n\t\t\t\twhen(keychainEncryption.encryptUsingKeychain(decCredentialsKey, CredentialEncryptionMode.DEVICE_LOCK)).thenResolve(encCredentialsKey)\n\n\t\t\t\tawait facade.store(decryptedCredentials1)\n\t\t\t\tverify(credentialsDb.store(encryptedCredentials1))\n\t\t\t\tverify(credentialsDb.setCredentialEncryptionKey(encCredentialsKey))\n\t\t\t})\n\t\t})\n\n\t\to.test(\"migrate stores everything\", async () => {\n\t\t\tawait facade.migrateToNativeCredentials([encryptedCredentials1, encryptedCredentials2], CredentialEncryptionMode.APP_PASSWORD, encCredentialsKey)\n\t\t\tverify(credentialsDb.setCredentialEncryptionMode(CredentialEncryptionMode.APP_PASSWORD))\n\t\t\tverify(credentialsDb.setCredentialEncryptionKey(encCredentialsKey))\n\t\t\tverify(credentialsDb.store(encryptedCredentials1))\n\t\t\tverify(credentialsDb.store(encryptedCredentials2))\n\t\t})\n\t})\n})\n"],"mappings":"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"}