{"version":3,"file":"WebCredentialsFacade-DDi71uel.js","names":["deviceConfig: DeviceConfig","id: string","_: CredentialEncryptionMode","credentials: UnencryptedCredentials","deviceConfigCredentials: DeviceConfigCredentials","credentials: PersistedCredentials","credentials: ReadonlyArray<PersistedCredentials>","encryptionMode: CredentialEncryptionMode | null","credentialsKey: Uint8Array | null","persistentCredentials: PersistedCredentials"],"sources":["../../src/common/misc/credentials/WebCredentialsFacade.ts"],"sourcesContent":["import { PersistedCredentials } from \"../../native/common/generatedipc/PersistedCredentials.js\"\nimport { NativeCredentialsFacade } from \"../../native/common/generatedipc/NativeCredentialsFacade.js\"\nimport { DeviceConfig, DeviceConfigCredentials } from \"../DeviceConfig.js\"\nimport { CredentialEncryptionMode } from \"./CredentialEncryptionMode.js\"\nimport { UnencryptedCredentials } from \"../../native/common/generatedipc/UnencryptedCredentials.js\"\nimport { base64ToUint8Array, mapNullable, stringToUtf8Uint8Array, uint8ArrayToBase64, utf8Uint8ArrayToString } from \"@tutao/tutanota-utils\"\n\n/**\n * This is a temporary stub that we will replace soon by some mechanism that will be able to utilize fingerprint/pin on mobile devices\n * for encryption of login data. Using this implementation does not mean we do not encrypt credentials currently since there is an\n * additional mechanism for credentials encryption using an access key stored server side. This is done in LoginFacade.\n */\n\nexport class WebCredentialsFacade implements NativeCredentialsFacade {\n\tconstructor(private readonly deviceConfig: DeviceConfig) {}\n\n\tasync clear(): Promise<void> {\n\t\tconst allCredentials = this.deviceConfig.getCredentials()\n\t\tfor (const credentials of allCredentials) {\n\t\t\tawait this.deviceConfig.deleteByUserId(credentials.credentialInfo.userId)\n\t\t}\n\t}\n\n\tdeleteByUserId(id: string): Promise<void> {\n\t\treturn this.deviceConfig.deleteByUserId(id)\n\t}\n\n\tasync getCredentialEncryptionMode(): Promise<CredentialEncryptionMode | null> {\n\t\treturn null\n\t}\n\n\tasync loadAll(): Promise<ReadonlyArray<PersistedCredentials>> {\n\t\treturn this.deviceConfig.getCredentials().map(deviceConfigCredentialsToPersisted)\n\t}\n\n\tasync loadByUserId(id: string): Promise<UnencryptedCredentials | null> {\n\t\tconst deviceConfigCredentials = this.deviceConfig.getCredentialsByUserId(id)\n\t\tif (deviceConfigCredentials == null) return null\n\t\treturn {\n\t\t\tcredentialInfo: deviceConfigCredentials.credentialInfo,\n\t\t\tencryptedPassword: deviceConfigCredentials.encryptedPassword,\n\t\t\tencryptedPassphraseKey: mapNullable(deviceConfigCredentials.encryptedPassphraseKey, base64ToUint8Array),\n\t\t\taccessToken: deviceConfigCredentials.accessToken,\n\t\t\tdatabaseKey: null,\n\t\t}\n\t}\n\n\tasync setCredentialEncryptionMode(_: CredentialEncryptionMode): Promise<void> {}\n\n\tasync store(credentials: UnencryptedCredentials): Promise<void> {\n\t\tconst deviceConfigCredentials: DeviceConfigCredentials = {\n\t\t\tcredentialInfo: credentials.credentialInfo,\n\t\t\tencryptedPassphraseKey: mapNullable(credentials.encryptedPassphraseKey, uint8ArrayToBase64),\n\t\t\taccessToken: credentials.accessToken,\n\t\t\tdatabaseKey: null,\n\t\t\tencryptedPassword: credentials.encryptedPassword,\n\t\t}\n\t\tthis.deviceConfig.storeCredentials(deviceConfigCredentials)\n\t}\n\n\tasync storeEncrypted(credentials: PersistedCredentials): Promise<void> {\n\t\tthis.deviceConfig.storeCredentials(persistedCredentialsToDeviceConfig(credentials))\n\t}\n\n\tasync getSupportedEncryptionModes() {\n\t\treturn []\n\t}\n\n\tmigrateToNativeCredentials(\n\t\tcredentials: ReadonlyArray<PersistedCredentials>,\n\t\tencryptionMode: CredentialEncryptionMode | null,\n\t\tcredentialsKey: Uint8Array | null,\n\t): Promise<void> {\n\t\tthrow new Error(\"Method not implemented.\")\n\t}\n}\n\nfunction persistedCredentialsToDeviceConfig(persistentCredentials: PersistedCredentials): DeviceConfigCredentials {\n\treturn {\n\t\tcredentialInfo: persistentCredentials.credentialInfo,\n\t\tencryptedPassword: persistentCredentials.encryptedPassword,\n\t\tencryptedPassphraseKey: mapNullable(persistentCredentials.encryptedPassphraseKey, uint8ArrayToBase64),\n\t\taccessToken: utf8Uint8ArrayToString(persistentCredentials.accessToken),\n\t\tdatabaseKey: mapNullable(persistentCredentials.databaseKey, uint8ArrayToBase64),\n\t}\n}\n\nfunction deviceConfigCredentialsToPersisted(deviceConfigCredentials: DeviceConfigCredentials): PersistedCredentials {\n\treturn {\n\t\tcredentialInfo: deviceConfigCredentials.credentialInfo,\n\t\tencryptedPassword: deviceConfigCredentials.encryptedPassword,\n\t\tencryptedPassphraseKey: mapNullable(deviceConfigCredentials.encryptedPassphraseKey, base64ToUint8Array),\n\t\taccessToken: stringToUtf8Uint8Array(deviceConfigCredentials.accessToken),\n\t\tdatabaseKey: mapNullable(deviceConfigCredentials.databaseKey, base64ToUint8Array),\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaa,uBAAN,MAA8D;CACpE,YAA6BA,cAA4B;EAkFzD,KAlF6B;CAA8B;CAE3D,MAAM,QAAuB;EAC5B,MAAM,iBAAiB,KAAK,aAAa,gBAAgB;AACzD,OAAK,MAAM,eAAe,eACzB,OAAM,KAAK,aAAa,eAAe,YAAY,eAAe,OAAO;CAE1E;CAED,eAAeC,IAA2B;AACzC,SAAO,KAAK,aAAa,eAAe,GAAG;CAC3C;CAED,MAAM,8BAAwE;AAC7E,SAAO;CACP;CAED,MAAM,UAAwD;AAC7D,SAAO,KAAK,aAAa,gBAAgB,CAAC,IAAI,mCAAmC;CACjF;CAED,MAAM,aAAaA,IAAoD;EACtE,MAAM,0BAA0B,KAAK,aAAa,uBAAuB,GAAG;AAC5E,MAAI,2BAA2B,KAAM,QAAO;AAC5C,SAAO;GACN,gBAAgB,wBAAwB;GACxC,mBAAmB,wBAAwB;GAC3C,wBAAwB,YAAY,wBAAwB,wBAAwB,mBAAmB;GACvG,aAAa,wBAAwB;GACrC,aAAa;EACb;CACD;CAED,MAAM,4BAA4BC,GAA4C,CAAE;CAEhF,MAAM,MAAMC,aAAoD;EAC/D,MAAMC,0BAAmD;GACxD,gBAAgB,YAAY;GAC5B,wBAAwB,YAAY,YAAY,wBAAwB,mBAAmB;GAC3F,aAAa,YAAY;GACzB,aAAa;GACb,mBAAmB,YAAY;EAC/B;AACD,OAAK,aAAa,iBAAiB,wBAAwB;CAC3D;CAED,MAAM,eAAeC,aAAkD;AACtE,OAAK,aAAa,iBAAiB,mCAAmC,YAAY,CAAC;CACnF;CAED,MAAM,8BAA8B;AACnC,SAAO,CAAE;CACT;CAED,2BACCC,aACAC,gBACAC,gBACgB;AAChB,QAAM,IAAI,MAAM;CAChB;AACD;AAED,SAAS,mCAAmCC,uBAAsE;AACjH,QAAO;EACN,gBAAgB,sBAAsB;EACtC,mBAAmB,sBAAsB;EACzC,wBAAwB,YAAY,sBAAsB,wBAAwB,mBAAmB;EACrG,aAAa,uBAAuB,sBAAsB,YAAY;EACtE,aAAa,YAAY,sBAAsB,aAAa,mBAAmB;CAC/E;AACD;AAED,SAAS,mCAAmCL,yBAAwE;AACnH,QAAO;EACN,gBAAgB,wBAAwB;EACxC,mBAAmB,wBAAwB;EAC3C,wBAAwB,YAAY,wBAAwB,wBAAwB,mBAAmB;EACvG,aAAa,uBAAuB,wBAAwB,YAAY;EACxE,aAAa,YAAY,wBAAwB,aAAa,mBAAmB;CACjF;AACD"}