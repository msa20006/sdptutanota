{"version":3,"file":"ContactListEditor-5LX_1ENd.js","names":["inputContacts: Contact[]","mergableContacts: Contact[][]","duplicateContacts: Contact[]","currentMergableContacts: Contact[]","keptContact: Contact","eliminatedContact: Contact","contact1: Contact","contact2: Contact","name1: string","name2: string","contact1MailAddresses: ContactMailAddress[]","contact2MailAddresses: ContactMailAddress[]","mailAddresses1: ContactMailAddress[]","mailAddresses2: ContactMailAddress[]","contact1PhoneNumbers: ContactPhoneNumber[]","contact2PhoneNumbers: ContactPhoneNumber[]","phoneNumbers1: ContactPhoneNumber[]","phoneNumbers2: ContactPhoneNumber[]","contact1SocialIds: ContactSocialId[]","contact2SocialIds: ContactSocialId[]","socialIds1: ContactSocialId[]","socialIds2: ContactSocialId[]","contact1Addresses: ContactAddress[]","contact2Addresses: ContactAddress[]","addresses1: ContactAddress[]","addresses2: ContactAddress[]","isoBirthday: string | null","values1: string[]","values2: string[]","otherAttribute1: string | null","otherAttribute2: string | null","separator: string","birthday1: string | null","birthday2: string | null","contacts: Contact[]","contact: Contact","addresses: ContactMailAddress[] | ContactAddress[]","numbers: ContactPhoneNumber[]","socialIds: ContactSocialId[]","typeAndContentArray: {\n\t\tKIND: string\n\t\tCONTENT: string\n\t}[]","tagContent: string","text: string","separateLinesArray: string[]","content: string","vnode: Vnode<MainCreateButtonAttrs>","contact: Contact","attrs: ContactViewerAttrs","actions: { label: TranslationKey; icon: AllIcons; click: () => void }[]","onWriteMail: ContactViewerAttrs[\"onWriteMail\"]","contactSocialId: ContactSocialId","website: ContactWebsite","messengerHandle: ContactMessengerHandle","address: ContactAddress","phone: ContactPhoneNumber","prepAddress: string","array: Children[]","spacer: () => Children","ret: Children","contactListGroupRoot: ContactListGroupRoot | null","headerText: TranslationKey","save: (name: string, addresses: Array<string>) => void","addressesOnList?: Array<string>","headerBarAttrs: DialogHeaderBarAttrs","name: string","save: (name: string) => void","dialog: Dialog","addresses: Array<string>","address: string","vnode: Vnode<ContactListEditorAttrs>","helpLabel: lazy<string> | null"],"sources":["../../src/mail-app/contacts/ContactMergeUtils.ts","../../src/mail-app/contacts/VCardExporter.ts","../../src/common/gui/MainCreateButton.ts","../../src/mail-app/contacts/view/ContactViewer.ts","../../src/common/gui/cards.ts","../../src/mail-app/contacts/view/ContactCardViewer.ts","../../src/mail-app/contacts/ContactListEditor.ts"],"sourcesContent":["import { ContactComparisonResult, IndifferentContactComparisonResult } from \"../../common/api/common/TutanotaConstants\"\nimport { neverNull } from \"@tutao/tutanota-utils\"\nimport { isoDateToBirthday } from \"../../common/api/common/utils/BirthdayUtils\"\nimport type { Contact } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport type { ContactMailAddress } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport type { Birthday } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport type { ContactAddress } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport type { ContactPhoneNumber } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport type { ContactSocialId } from \"../../common/api/entities/tutanota/TypeRefs.js\"\n\n/**\n * returns all contacts that are deletable because another contact exists that is exactly the same, and all contacts that look similar and therfore may be merged.\n * contacts are never returned in both \"mergable\" and \"deletable\"\n * contact similarity is checked transitively, i.e. if a similar to b and b similar to c, then a similar to c\n */\nexport function getMergeableContacts(inputContacts: Contact[]): {\n\tmergeable: Contact[][]\n\tdeletable: Contact[]\n} {\n\tlet mergableContacts: Contact[][] = []\n\tlet duplicateContacts: Contact[] = []\n\tlet contacts = inputContacts.slice()\n\tlet firstContactIndex = 0\n\n\twhile (firstContactIndex < contacts.length - 1) {\n\t\tlet currentMergableContacts: Contact[] = []\n\t\tlet firstContact = contacts[firstContactIndex]\n\t\tcurrentMergableContacts.push(firstContact)\n\t\tlet secondContactIndex = firstContactIndex + 1\n\n\t\t// run through all contacts after the first and compare them with the first (+ all others already in the currentMergableArray)\n\t\twhile (secondContactIndex < contacts.length) {\n\t\t\tlet secondContact = contacts[secondContactIndex]\n\n\t\t\tif (firstContact._id[1] !== secondContact._id[1]) {\n\t\t\t\t// should not happen, just to be safe\n\t\t\t\tlet overallResult = ContactComparisonResult.Unique\n\n\t\t\t\t// compare the current second contact with all in the currentMergableArray to find out if the overall comparison result is equal, similar or unique\n\t\t\t\tfor (let i = 0; i < currentMergableContacts.length; i++) {\n\t\t\t\t\tlet result = _compareContactsForMerge(currentMergableContacts[i], secondContact)\n\n\t\t\t\t\tif (result === ContactComparisonResult.Equal) {\n\t\t\t\t\t\toverallResult = ContactComparisonResult.Equal\n\t\t\t\t\t\tbreak // equal is always the final result\n\t\t\t\t\t} else if (result === ContactComparisonResult.Similar) {\n\t\t\t\t\t\toverallResult = ContactComparisonResult.Similar // continue checking the other contacts in currentMergableContacts to see if there is an equal one\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the contacts are unique, so we do not have to check the others\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (overallResult === ContactComparisonResult.Equal) {\n\t\t\t\t\tduplicateContacts.push(secondContact)\n\t\t\t\t\tcontacts.splice(secondContactIndex, 1)\n\t\t\t\t} else if (overallResult === ContactComparisonResult.Similar) {\n\t\t\t\t\tcurrentMergableContacts.push(secondContact)\n\t\t\t\t\tcontacts.splice(secondContactIndex, 1)\n\t\t\t\t} else {\n\t\t\t\t\tsecondContactIndex++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentMergableContacts.length > 1) {\n\t\t\tmergableContacts.push(currentMergableContacts)\n\t\t}\n\n\t\tfirstContactIndex++\n\t}\n\n\treturn {\n\t\tmergeable: mergableContacts,\n\t\tdeletable: duplicateContacts,\n\t}\n}\n\n/**\n * merges two contacts (eliminatedContact is merged into keptContact). outside this function keptContact must be updated on the server and eliminatedContact must be deleted\n */\nexport function mergeContacts(keptContact: Contact, eliminatedContact: Contact): void {\n\tkeptContact.firstName = _getMergedNameField(keptContact.firstName, eliminatedContact.firstName)\n\tkeptContact.lastName = _getMergedNameField(keptContact.lastName, eliminatedContact.lastName)\n\tkeptContact.title = neverNull(_getMergedOtherField(keptContact.title, eliminatedContact.title, \", \"))\n\tkeptContact.comment = neverNull(_getMergedOtherField(keptContact.comment, eliminatedContact.comment, \"\\n\\n\"))\n\tkeptContact.company = neverNull(_getMergedOtherField(keptContact.company, eliminatedContact.company, \", \"))\n\tkeptContact.nickname = _getMergedOtherField(keptContact.nickname, eliminatedContact.nickname, \", \")\n\tkeptContact.role = neverNull(_getMergedOtherField(keptContact.role, eliminatedContact.role, \", \"))\n\tkeptContact.birthdayIso = _getMergedBirthdays(keptContact.birthdayIso, eliminatedContact.birthdayIso)\n\tkeptContact.mailAddresses = _getMergedEmailAddresses(keptContact.mailAddresses, eliminatedContact.mailAddresses)\n\tkeptContact.phoneNumbers = _getMergedPhoneNumbers(keptContact.phoneNumbers, eliminatedContact.phoneNumbers)\n\tkeptContact.socialIds = _getMergedSocialIds(keptContact.socialIds, eliminatedContact.socialIds)\n\tkeptContact.addresses = _getMergedAddresses(keptContact.addresses, eliminatedContact.addresses)\n\tkeptContact.presharedPassword = neverNull(_getMergedOtherField(keptContact.presharedPassword, eliminatedContact.presharedPassword, \"\")) // the passwords are never different and not null\n}\n\n/**\n * Result is unique if preshared passwords are not equal and are not empty.\n * Result is equal if all fields are equal or empty (types are ignored).\n * Result is similar if one of:\n * 1. name result is equal or similar and birthday result is similar or oneEmpty or equal or bothEmpty\n * 2. name result (bothEmpty or oneEmpty) and mail or phone result is similar or equal and birthday result is similar or oneEmpty or equal or bothEmpty\n * Otherwise the result is unique\n * Export for testing\n */\nexport function _compareContactsForMerge(contact1: Contact, contact2: Contact): ContactComparisonResult {\n\tlet nameResult = _compareFullName(contact1, contact2)\n\n\tlet mailResult = _compareMailAddresses(contact1.mailAddresses, contact2.mailAddresses)\n\n\tlet phoneResult = _comparePhoneNumbers(contact1.phoneNumbers, contact2.phoneNumbers)\n\n\tlet birthdayResult = _compareBirthdays(contact1, contact2)\n\n\tlet residualContactFieldsEqual = _areResidualContactFieldsEqual(contact1, contact2)\n\n\tif (\n\t\tbirthdayResult !== ContactComparisonResult.Unique &&\n\t\t(!contact1.presharedPassword || !contact2.presharedPassword || contact1.presharedPassword === contact2.presharedPassword)\n\t) {\n\t\tif (\n\t\t\t(nameResult === ContactComparisonResult.Equal || nameResult === IndifferentContactComparisonResult.BothEmpty) &&\n\t\t\t(mailResult === ContactComparisonResult.Equal || mailResult === IndifferentContactComparisonResult.BothEmpty) &&\n\t\t\t(phoneResult === ContactComparisonResult.Equal || phoneResult === IndifferentContactComparisonResult.BothEmpty) &&\n\t\t\tresidualContactFieldsEqual\n\t\t) {\n\t\t\tif (birthdayResult === IndifferentContactComparisonResult.BothEmpty || birthdayResult === ContactComparisonResult.Equal) {\n\t\t\t\treturn ContactComparisonResult.Equal\n\t\t\t} else {\n\t\t\t\treturn ContactComparisonResult.Similar\n\t\t\t}\n\t\t} else if (nameResult === ContactComparisonResult.Equal || nameResult === ContactComparisonResult.Similar) {\n\t\t\treturn ContactComparisonResult.Similar\n\t\t} else if (\n\t\t\t(nameResult === IndifferentContactComparisonResult.BothEmpty || nameResult === IndifferentContactComparisonResult.OneEmpty) &&\n\t\t\t(mailResult === ContactComparisonResult.Similar ||\n\t\t\t\tphoneResult === ContactComparisonResult.Similar ||\n\t\t\t\tmailResult === ContactComparisonResult.Equal ||\n\t\t\t\tphoneResult === ContactComparisonResult.Equal)\n\t\t) {\n\t\t\treturn ContactComparisonResult.Similar\n\t\t} else {\n\t\t\treturn ContactComparisonResult.Unique\n\t\t}\n\t} else {\n\t\treturn ContactComparisonResult.Unique\n\t}\n}\n\n/**\n * Names are equal if the last names are available and equal and first names are equal or first names are available and equal and last names are equal.\n * Names are similar if the last names are available and equal and at least one first name is empty or like equal but case insensitive.\n * Returns null if the contacts names are not comparable, i.e. one of the contacts first and last names are empty.\n * Export for testing\n */\nexport function _compareFullName(contact1: Contact, contact2: Contact): ContactComparisonResult | IndifferentContactComparisonResult {\n\tif (contact1.firstName === contact2.firstName && contact1.lastName === contact2.lastName && (contact1.lastName || contact1.firstName)) {\n\t\treturn ContactComparisonResult.Equal\n\t} else if (!contact1.firstName && !contact1.lastName && !contact2.firstName && !contact2.lastName) {\n\t\treturn IndifferentContactComparisonResult.BothEmpty\n\t} else if ((!contact1.firstName && !contact1.lastName) || (!contact2.firstName && !contact2.lastName)) {\n\t\treturn IndifferentContactComparisonResult.OneEmpty\n\t} else if (\n\t\tcontact1.firstName.toLowerCase() === contact2.firstName.toLowerCase() &&\n\t\tcontact1.lastName.toLowerCase() === contact2.lastName.toLowerCase() &&\n\t\tcontact1.lastName\n\t) {\n\t\treturn ContactComparisonResult.Similar\n\t} else if ((!contact1.firstName || !contact2.firstName) && contact1.lastName.toLowerCase() === contact2.lastName.toLowerCase() && contact1.lastName) {\n\t\treturn ContactComparisonResult.Similar\n\t} else {\n\t\treturn ContactComparisonResult.Unique\n\t}\n}\n\n/**\n * Provides name1 if it is not empty, otherwise name2\n * Export for testing\n */\nexport function _getMergedNameField(name1: string, name2: string): string {\n\tif (name1) {\n\t\treturn name1\n\t} else {\n\t\treturn name2\n\t}\n}\n\n/**\n * If the mail addresses (type is ignored) are all equal (order in array is ignored), the addresses are equal.\n * If at least one mail address is equal and all others are unique, the result is similar. If the mail addresses are equal (only case insensitive), then the result is also similar.\n * If one mail address list is empty, the result is oneEmpty because the mail addresses are not comparable.\n * If both are empty the result is both empty because the mail addresses are not comparable.\n * Otherwise the result is unique.\n * Export for testing\n */\nexport function _compareMailAddresses(\n\tcontact1MailAddresses: ContactMailAddress[],\n\tcontact2MailAddresses: ContactMailAddress[],\n): ContactComparisonResult | IndifferentContactComparisonResult {\n\treturn _compareValues(\n\t\tcontact1MailAddresses.map((m) => m.address),\n\t\tcontact2MailAddresses.map((m) => m.address),\n\t)\n}\n\n/**\n * Export for testing\n */\nexport function _getMergedEmailAddresses(mailAddresses1: ContactMailAddress[], mailAddresses2: ContactMailAddress[]): ContactMailAddress[] {\n\tlet filteredMailAddresses2 = mailAddresses2.filter((ma2) => {\n\t\treturn !mailAddresses1.some((ma1) => ma1.address.toLowerCase() === ma2.address.toLowerCase())\n\t})\n\treturn mailAddresses1.concat(filteredMailAddresses2)\n}\n\n/**\n * Export for testing\n */\nexport function _comparePhoneNumbers(\n\tcontact1PhoneNumbers: ContactPhoneNumber[],\n\tcontact2PhoneNumbers: ContactPhoneNumber[],\n): ContactComparisonResult | IndifferentContactComparisonResult {\n\treturn _compareValues(\n\t\tcontact1PhoneNumbers.map((m) => m.number),\n\t\tcontact2PhoneNumbers.map((m) => m.number),\n\t)\n}\n\n/**\n * Export for testing\n */\nexport function _getMergedPhoneNumbers(phoneNumbers1: ContactPhoneNumber[], phoneNumbers2: ContactPhoneNumber[]): ContactPhoneNumber[] {\n\tlet filteredNumbers2 = phoneNumbers2.filter((ma2) => {\n\t\tconst isIncludedInPhoneNumbers1 = phoneNumbers1.find((ma1) => ma1.number.replace(/\\s/g, \"\") === ma2.number.replace(/\\s/g, \"\"))\n\t\treturn !isIncludedInPhoneNumbers1\n\t})\n\treturn phoneNumbers1.concat(filteredNumbers2)\n}\n\n/**\n * used for clarifying of the unique and equal cases in compareContacts\n * Export for testing\n * returns similar only if socialids ore addresses are similar. Return of similar is basicaly not needed\n */\nexport function _areResidualContactFieldsEqual(contact1: Contact, contact2: Contact): boolean {\n\treturn (\n\t\t_isEqualOtherField(contact1.comment, contact2.comment) &&\n\t\t_isEqualOtherField(contact1.company, contact2.company) &&\n\t\t_isEqualOtherField(contact1.nickname, contact2.nickname) &&\n\t\t_isEqualOtherField(contact1.role, contact2.role) &&\n\t\t_isEqualOtherField(contact1.title, contact2.title) &&\n\t\t_isEqualOtherField(contact1.presharedPassword, contact2.presharedPassword) &&\n\t\t_areSocialIdsEqual(contact1.socialIds, contact2.socialIds) &&\n\t\t_areAddressesEqual(contact1.addresses, contact2.addresses)\n\t)\n}\n\nfunction _areSocialIdsEqual(contact1SocialIds: ContactSocialId[], contact2SocialIds: ContactSocialId[]): boolean {\n\tlet result = _compareValues(\n\t\tcontact1SocialIds.map((m) => m.socialId),\n\t\tcontact2SocialIds.map((m) => m.socialId),\n\t)\n\n\treturn result === IndifferentContactComparisonResult.BothEmpty || result === ContactComparisonResult.Equal\n}\n\n/**\n * Export for testing\n */\nexport function _getMergedSocialIds(socialIds1: ContactSocialId[], socialIds2: ContactSocialId[]): ContactSocialId[] {\n\tlet filteredSocialIds2 = socialIds2.filter((ma2) => {\n\t\treturn !socialIds1.some((ma1) => ma1.socialId === ma2.socialId)\n\t})\n\treturn socialIds1.concat(filteredSocialIds2)\n}\n\nfunction _areAddressesEqual(contact1Addresses: ContactAddress[], contact2Addresses: ContactAddress[]): boolean {\n\tlet result = _compareValues(\n\t\tcontact1Addresses.map((m) => m.address),\n\t\tcontact2Addresses.map((m) => m.address),\n\t)\n\n\treturn result === IndifferentContactComparisonResult.BothEmpty || result === ContactComparisonResult.Equal\n}\n\n/**\n * Export for testing\n */\nexport function _getMergedAddresses(addresses1: ContactAddress[], addresses2: ContactAddress[]): ContactAddress[] {\n\tlet filteredAddresses2 = addresses2.filter((ma2) => {\n\t\treturn !addresses1.some((ma1) => ma1.address === ma2.address)\n\t})\n\treturn addresses1.concat(filteredAddresses2)\n}\n\n/**\n * Export for testing\n */\nexport function _compareBirthdays(contact1: Contact, contact2: Contact): ContactComparisonResult | IndifferentContactComparisonResult {\n\tconst b1 = _convertIsoBirthday(contact1.birthdayIso)\n\n\tconst b2 = _convertIsoBirthday(contact2.birthdayIso)\n\n\tif (b1 && b2) {\n\t\tif (b1.day === b2.day && b1.month === b2.month) {\n\t\t\tif (b1.year === b2.year) {\n\t\t\t\treturn ContactComparisonResult.Equal\n\t\t\t} else if (b1.year && b2.year && b1.year !== b2.year) {\n\t\t\t\t// if we detect that one birthday has more information (year) we use that date\n\t\t\t\treturn ContactComparisonResult.Unique\n\t\t\t} else {\n\t\t\t\treturn ContactComparisonResult.Similar\n\t\t\t}\n\t\t} else {\n\t\t\treturn ContactComparisonResult.Unique\n\t\t}\n\t} else if ((contact1.birthdayIso && !contact2.birthdayIso) || (!contact1.birthdayIso && contact2.birthdayIso)) {\n\t\treturn IndifferentContactComparisonResult.OneEmpty\n\t} else {\n\t\treturn IndifferentContactComparisonResult.BothEmpty\n\t}\n}\n\nfunction _convertIsoBirthday(isoBirthday: string | null): Birthday | null {\n\tif (isoBirthday) {\n\t\ttry {\n\t\t\treturn isoDateToBirthday(isoBirthday)\n\t\t} catch (e) {\n\t\t\tconsole.log(\"failed to parse birthday\", e)\n\t\t\treturn null\n\t\t}\n\t} else {\n\t\treturn null\n\t}\n}\n\nfunction _compareValues(values1: string[], values2: string[]): ContactComparisonResult | IndifferentContactComparisonResult {\n\tif (values1.length === 0 && values2.length === 0) {\n\t\treturn IndifferentContactComparisonResult.BothEmpty\n\t} else if (values1.length === 0 || values2.length === 0) {\n\t\treturn IndifferentContactComparisonResult.OneEmpty\n\t}\n\n\tlet equalAddresses = values2.filter((c2) => values1.find((c1) => c1.trim() === c2.trim()))\n\n\tif (values1.length === values2.length && values1.length === equalAddresses.length) {\n\t\treturn ContactComparisonResult.Equal\n\t}\n\n\tlet equalAddressesInsensitive = values2.filter((c2) => values1.find((c1) => c1.trim().toLowerCase() === c2.trim().toLowerCase()))\n\n\tif (equalAddressesInsensitive.length > 0) {\n\t\treturn ContactComparisonResult.Similar\n\t}\n\n\treturn ContactComparisonResult.Unique\n}\n\n/**\n * Returns equal if both values are equal and unique otherwise\n */\nfunction _isEqualOtherField(otherAttribute1: string | null, otherAttribute2: string | null): boolean {\n\t// regard null as \"\"\n\tif (otherAttribute1 == null) {\n\t\totherAttribute1 = \"\"\n\t}\n\n\tif (otherAttribute2 == null) {\n\t\totherAttribute2 = \"\"\n\t}\n\n\treturn otherAttribute1 === otherAttribute2\n}\n\n/**\n * Provides the value that exists or both separated by the given separator if both have some content\n * Export for testing\n */\nexport function _getMergedOtherField(otherAttribute1: string | null, otherAttribute2: string | null, separator: string): string | null {\n\tif (otherAttribute1 === otherAttribute2) {\n\t\treturn otherAttribute2\n\t} else if (otherAttribute1 && otherAttribute2) {\n\t\treturn otherAttribute1 + separator + otherAttribute2\n\t} else if (!otherAttribute1 && otherAttribute2) {\n\t\treturn otherAttribute2\n\t} else {\n\t\treturn otherAttribute1\n\t}\n}\n\n/**\n * Export for testing\n */\nexport function _getMergedBirthdays(birthday1: string | null, birthday2: string | null): string | null {\n\tconst b1 = _convertIsoBirthday(birthday1)\n\n\tconst b2 = _convertIsoBirthday(birthday2)\n\n\tif (b1 && b2) {\n\t\tif (b1.year) {\n\t\t\treturn birthday1\n\t\t} else if (b2.year) {\n\t\t\treturn birthday2\n\t\t} else {\n\t\t\treturn birthday1\n\t\t}\n\t} else if (birthday1) {\n\t\treturn birthday1\n\t} else if (birthday2) {\n\t\treturn birthday2\n\t} else {\n\t\treturn null\n\t}\n}\n","import { convertToDataFile } from \"../../common/api/common/DataFile\"\nimport type { Contact, ContactAddress, ContactMailAddress, ContactPhoneNumber, ContactSocialId } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { createFile } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\nimport { ContactAddressType, ContactPhoneNumberType } from \"../../common/api/common/TutanotaConstants\"\nimport { assertMainOrNode } from \"../../common/api/common/Env\"\nimport { locator } from \"../../common/api/main/CommonLocator\"\nimport { getSocialUrl, getWebsiteUrl } from \"../../common/contactsFunctionality/ContactUtils.js\"\n\nassertMainOrNode()\n\nexport function exportContacts(contacts: Contact[]): Promise<void> {\n\tlet vCardFile = contactsToVCard(contacts)\n\tlet data = stringToUtf8Uint8Array(vCardFile)\n\tlet tmpFile = createFile({\n\t\tname: \"vCard3.0.vcf\",\n\t\tmimeType: \"vCard/rfc2426\",\n\t\tsize: String(data.byteLength),\n\t\tblobs: [],\n\t\tcid: null,\n\t\tparent: null,\n\t\tsubFiles: null,\n\t})\n\treturn locator.fileController.saveDataFile(convertToDataFile(tmpFile, data))\n}\n\n/**\n * Converts an array of contacts to a vCard 3.0 compatible string.\n *\n * @param contacts\n * @returns vCard 3.0 compatible string which is the vCard of each all contacts concatanted.\n */\nexport function contactsToVCard(contacts: Contact[]): string {\n\tlet vCardFile = \"\"\n\tfor (const contact of contacts) {\n\t\tvCardFile += _contactToVCard(contact)\n\t}\n\treturn vCardFile\n}\n\n/**\n * Export for testing\n */\nexport function _contactToVCard(contact: Contact): string {\n\tlet contactToVCardString = \"BEGIN:VCARD\\nVERSION:3.0\\n\" //must be invcluded in vCard3.0\n\n\t//FN tag must be included in vCard3.0\n\tlet fnString = \"FN:\"\n\tfnString += contact.title ? _getVCardEscaped(contact.title) + \" \" : \"\"\n\tfnString += contact.firstName ? _getVCardEscaped(contact.firstName) + \" \" : \"\"\n\tfnString += contact.middleName ? _getVCardEscaped(contact.middleName) + \" \" : \"\"\n\tfnString += contact.lastName ? _getVCardEscaped(contact.lastName) : \"\"\n\tfnString += contact.nameSuffix ? \", \" + _getVCardEscaped(contact.nameSuffix) : \"\"\n\tcontactToVCardString += _getFoldedString(fnString.trim()) + \"\\n\"\n\t//N tag must be included in vCard3.0\n\tlet nString = \"N:\"\n\tnString += contact.lastName ? _getVCardEscaped(contact.lastName) + \";\" : \";\"\n\tnString += contact.firstName ? _getVCardEscaped(contact.firstName) + \";\" : \";\"\n\tnString += contact.middleName ? _getVCardEscaped(contact.middleName) + \";\" : \";\"\n\tnString += contact.title ? _getVCardEscaped(contact.title) + \";\" : \";\"\n\tnString += contact.nameSuffix ? _getVCardEscaped(contact.nameSuffix) + \"\" : \"\"\n\tcontactToVCardString += _getFoldedString(nString) + \"\\n\"\n\tcontactToVCardString += contact.nickname ? _getFoldedString(\"NICKNAME:\" + _getVCardEscaped(contact.nickname)) + \"\\n\" : \"\"\n\n\t//adds oldBirthday converted into a string if present else if available new birthday format is added to contactToVCardString\n\tif (contact.birthdayIso) {\n\t\tconst bday = contact.birthdayIso\n\t\t// we use 1111 as marker if no year has been defined as vcard 3.0 does not support dates without year\n\t\t// vcard 4.0 supports iso date without year\n\t\tconst bdayExported = bday.startsWith(\"--\") ? bday.replace(\"--\", \"1111-\") : bday\n\t\tcontactToVCardString += \"BDAY:\" + bdayExported + \"\\n\"\n\t}\n\n\tcontactToVCardString += _vCardFormatArrayToString(_addressesToVCardAddresses(contact.addresses), \"ADR\")\n\tcontactToVCardString += _vCardFormatArrayToString(_addressesToVCardAddresses(contact.mailAddresses), \"EMAIL\")\n\tcontactToVCardString += _vCardFormatArrayToString(_phoneNumbersToVCardPhoneNumbers(contact.phoneNumbers), \"TEL\")\n\tcontactToVCardString += _vCardFormatArrayToString(_socialIdsToVCardSocialUrls(contact.socialIds), \"URL\")\n\tcontactToVCardString += contact.role != \"\" ? _getFoldedString(\"TITLE:\" + _getVCardEscaped(contact.role)) + \"\\n\" : \"\"\n\n\tcontact.websites.map((website) => {\n\t\tcontactToVCardString += _getFoldedString(\"URL:\" + getWebsiteUrl(website.url) + \"\\n\")\n\t})\n\n\tconst company = contact.company ? _getFoldedString(\"ORG:\" + _getVCardEscaped(contact.company)) : \"\"\n\tif (contact.department) {\n\t\tcontactToVCardString += company + \";\" + _getVCardEscaped(contact.department) + \"\\n\"\n\t} else {\n\t\tcontactToVCardString += contact.company ? _getFoldedString(\"ORG:\" + _getVCardEscaped(contact.company)) + \"\\n\" : \"\"\n\t}\n\n\tcontactToVCardString += contact.comment ? _getFoldedString(\"NOTE:\" + _getVCardEscaped(contact.comment)) + \"\\n\" : \"\"\n\tcontactToVCardString += \"END:VCARD\\n\\n\" //must be included in vCard3.0\n\n\treturn contactToVCardString\n}\n\n/**\n * export for testing\n * Works for mail addresses the same as for addresses\n * Returns all mail-addresses/addresses and their types in an object array\n */\nexport function _addressesToVCardAddresses(addresses: ContactMailAddress[] | ContactAddress[]): {\n\tKIND: string\n\tCONTENT: string\n}[] {\n\treturn addresses.map((ad) => {\n\t\tlet kind = \"\"\n\n\t\tswitch (ad.type) {\n\t\t\tcase ContactAddressType.PRIVATE:\n\t\t\t\tkind = \"home\"\n\t\t\t\tbreak\n\n\t\t\tcase ContactAddressType.WORK:\n\t\t\t\tkind = \"work\"\n\t\t\t\tbreak\n\n\t\t\tdefault:\n\t\t}\n\n\t\treturn {\n\t\t\tKIND: kind,\n\t\t\tCONTENT: ad.address,\n\t\t}\n\t})\n}\n\n/**\n * export for testing\n * Returns all phone numbers and their types in an object array\n */\nexport function _phoneNumbersToVCardPhoneNumbers(numbers: ContactPhoneNumber[]): {\n\tKIND: string\n\tCONTENT: string\n}[] {\n\treturn numbers.map((num) => {\n\t\tlet kind = \"\"\n\n\t\tswitch (num.type) {\n\t\t\tcase ContactPhoneNumberType.PRIVATE:\n\t\t\t\tkind = \"home\"\n\t\t\t\tbreak\n\n\t\t\tcase ContactPhoneNumberType.WORK:\n\t\t\t\tkind = \"work\"\n\t\t\t\tbreak\n\n\t\t\tcase ContactPhoneNumberType.MOBILE:\n\t\t\t\tkind = \"cell\"\n\t\t\t\tbreak\n\n\t\t\tcase ContactPhoneNumberType.FAX:\n\t\t\t\tkind = \"fax\"\n\t\t\t\tbreak\n\n\t\t\tdefault:\n\t\t}\n\n\t\treturn {\n\t\t\tKIND: kind,\n\t\t\tCONTENT: num.number,\n\t\t}\n\t})\n}\n\n/**\n *  export for testing\n *  Returns all socialIds as a vCard Url in an object array\n *  Type is not defined here. URL tag has no fitting type implementation\n */\nexport function _socialIdsToVCardSocialUrls(socialIds: ContactSocialId[]): {\n\tKIND: string\n\tCONTENT: string\n}[] {\n\treturn socialIds.map((sId) => {\n\t\t//IN VCARD 3.0 is no type for URLS\n\t\treturn {\n\t\t\tKIND: \"\",\n\t\t\tCONTENT: getSocialUrl(sId),\n\t\t}\n\t})\n}\n\n/**\n * export for testing\n * Returns a multiple line string from the before created object arrays of addresses, mail addresses and socialIds\n */\nexport function _vCardFormatArrayToString(\n\ttypeAndContentArray: {\n\t\tKIND: string\n\t\tCONTENT: string\n\t}[],\n\ttagContent: string,\n): string {\n\treturn typeAndContentArray.reduce((result, elem) => {\n\t\tif (elem.KIND) {\n\t\t\treturn result + _getFoldedString(tagContent + \";TYPE=\" + elem.KIND + \":\" + _getVCardEscaped(elem.CONTENT)) + \"\\n\"\n\t\t} else {\n\t\t\treturn result + _getFoldedString(tagContent + \":\" + _getVCardEscaped(elem.CONTENT)) + \"\\n\"\n\t\t}\n\t}, \"\")\n}\n\n/**\n * Adds line breaks and padding in a CONTENT line to adhere to the vCard\n * specifications.\n *\n * @param text The text to fold.\n * @returns The same text but folded every 75 characters.\n * @see https://datatracker.ietf.org/doc/html/rfc6350#section-3.2\n */\nfunction _getFoldedString(text: string): string {\n\tlet separateLinesArray: string[] = []\n\n\twhile (text.length > 75) {\n\t\tseparateLinesArray.push(text.substring(0, 75))\n\t\ttext = text.substring(75, text.length)\n\t}\n\n\tseparateLinesArray.push(text)\n\ttext = separateLinesArray.join(\"\\n \")\n\treturn text\n}\n\nfunction _getVCardEscaped(content: string): string {\n\tcontent = content.replace(/\\n/g, \"\\\\n\")\n\tcontent = content.replace(/;/g, \"\\\\;\")\n\tcontent = content.replace(/,/g, \"\\\\,\")\n\treturn content\n}\n","import { lang, TranslationKey } from \"../misc/LanguageViewModel.js\"\nimport { ClickHandler } from \"./base/GuiUtils.js\"\nimport m, { Children, Component, Vnode } from \"mithril\"\nimport { theme } from \"./theme.js\"\nimport { px, size } from \"./size.js\"\nimport { BaseButton, BaseButtonAttrs } from \"./base/buttons/BaseButton.js\"\n\nexport interface MainCreateButtonAttrs {\n\tlabel: TranslationKey\n\tclick: ClickHandler\n\tclass?: string\n}\n\n/**\n * Main button used to open the creation dialog for emails,contacts and events.\n */\nexport class MainCreateButton implements Component<MainCreateButtonAttrs> {\n\tview(vnode: Vnode<MainCreateButtonAttrs>): Children {\n\t\treturn m(BaseButton, {\n\t\t\tlabel: vnode.attrs.label,\n\t\t\ttext: lang.get(vnode.attrs.label),\n\t\t\tonclick: vnode.attrs.click,\n\t\t\tclass: `full-width border-radius-big center b flash ${vnode.attrs.class}`,\n\t\t\tstyle: {\n\t\t\t\tborder: `2px solid ${theme.content_accent}`,\n\t\t\t\t// matching toolbar\n\t\t\t\theight: px(size.button_height + size.vpad_xs * 2),\n\t\t\t\tcolor: theme.content_accent,\n\t\t\t},\n\t\t} satisfies BaseButtonAttrs)\n\t}\n}\n","import m, { Children, ClassComponent, Vnode } from \"mithril\"\nimport { lang, TranslationKey } from \"../../../common/misc/LanguageViewModel\"\nimport { TextField, TextFieldType } from \"../../../common/gui/base/TextField.js\"\nimport { Icons } from \"../../../common/gui/base/icons/Icons\"\nimport {\n\tContactAddressType,\n\tContactPhoneNumberType,\n\tgetContactSocialType,\n\tgetCustomDateType,\n\tgetRelationshipType,\n} from \"../../../common/api/common/TutanotaConstants\"\nimport type {\n\tContact,\n\tContactAddress,\n\tContactMessengerHandle,\n\tContactPhoneNumber,\n\tContactSocialId,\n\tContactWebsite,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { assertNotNull, downcast, memoized, NBSP, noOp } from \"@tutao/tutanota-utils\"\nimport {\n\tgetContactAddressTypeLabel,\n\tgetContactCustomDateTypeToLabel,\n\tgetContactCustomWebsiteTypeToLabel,\n\tgetContactMessengerHandleTypeToLabel,\n\tgetContactPhoneNumberTypeLabel,\n\tgetContactRelationshipTypeToLabel,\n\tgetContactSocialTypeLabel,\n} from \"./ContactGuiUtils\"\nimport { formatContactDate, getMessengerHandleUrl, getSocialUrl, getWebsiteUrl } from \"../../../common/contactsFunctionality/ContactUtils.js\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { IconButton } from \"../../../common/gui/base/IconButton.js\"\nimport { ButtonSize } from \"../../../common/gui/base/ButtonSize.js\"\nimport { PartialRecipient } from \"../../../common/api/common/recipients/Recipient.js\"\nimport { attachDropdown } from \"../../../common/gui/base/Dropdown.js\"\nimport type { AllIcons } from \"../../../common/gui/base/Icon.js\"\n\nimport { getContactTitle } from \"../../../common/gui/base/GuiUtils.js\"\n\nassertMainOrNode()\n\nexport interface ContactViewerAttrs {\n\tcontact: Contact\n\tonWriteMail: (to: PartialRecipient) => unknown\n\teditAction?: (contact: Contact) => unknown\n\tdeleteAction?: (contacts: Contact[]) => unknown\n\textendedActions?: boolean\n}\n\n/**\n *  Displays information about a single contact\n */\nexport class ContactViewer implements ClassComponent<ContactViewerAttrs> {\n\tprivate readonly contactAppellation = memoized(getContactTitle)\n\n\tprivate readonly contactPhoneticName = memoized((contact: Contact): string | null => {\n\t\tconst firstName = contact.phoneticFirst ?? \"\"\n\t\tconst middleName = contact.phoneticMiddle ? ` ${contact.phoneticMiddle}` : \"\"\n\t\tconst lastName = contact.phoneticLast ? ` ${contact.phoneticLast}` : \"\"\n\n\t\tconst phoneticName = (firstName + middleName + lastName).trim()\n\n\t\treturn phoneticName.length > 0 ? phoneticName : null\n\t})\n\n\tprivate readonly formattedBirthday = memoized((contact: Contact) => {\n\t\treturn this.hasBirthday(contact) ? formatContactDate(contact.birthdayIso) : null\n\t})\n\n\tprivate hasBirthday(contact: Contact): boolean {\n\t\treturn contact.birthdayIso != null\n\t}\n\n\tview({ attrs }: Vnode<ContactViewerAttrs>): Children {\n\t\tconst { contact, onWriteMail } = attrs\n\n\t\tconst phoneticName = this.contactPhoneticName(attrs.contact)\n\n\t\treturn m(\".plr-l.pb-floating.mlr-safe-inset\", [\n\t\t\tm(\"\", [\n\t\t\t\tm(\n\t\t\t\t\t\".flex-space-between.flex-wrap.mt-m\",\n\t\t\t\t\tm(\".left.flex-grow-shrink-150\", [\n\t\t\t\t\t\tm(\".h2.selectable.text-break\", [\n\t\t\t\t\t\t\tthis.contactAppellation(contact),\n\t\t\t\t\t\t\tNBSP, // alignment in case nothing is present here\n\t\t\t\t\t\t]),\n\t\t\t\t\t\tphoneticName ? m(\"\", phoneticName) : null,\n\t\t\t\t\t\tcontact.pronouns.length > 0 ? this.renderPronounsInfo(contact) : null,\n\t\t\t\t\t\tcontact.nickname ? m(\"\", `\"${contact.nickname}\"`) : null,\n\t\t\t\t\t\tm(\"\", this.renderJobInformation(contact)),\n\t\t\t\t\t\tthis.hasBirthday(contact) ? m(\"\", this.formattedBirthday(contact)) : null,\n\t\t\t\t\t]),\n\t\t\t\t\tthis.renderActions(contact, attrs),\n\t\t\t\t),\n\t\t\t\tm(\"hr.hr.mt.mb\"),\n\t\t\t]),\n\t\t\tthis.renderCustomDatesAndRelationships(contact),\n\t\t\tthis.renderMailAddressesAndPhones(contact, onWriteMail),\n\t\t\tthis.renderAddressesAndSocialIds(contact),\n\t\t\tthis.renderWebsitesAndInstantMessengers(contact),\n\t\t\tthis.renderComment(contact),\n\t\t])\n\t}\n\n\tprivate renderExtendedActions(contact: Contact, attrs: ContactViewerAttrs) {\n\t\treturn m.fragment({}, [this.renderEditButton(contact, attrs), this.renderDeleteButton(contact, attrs)])\n\t}\n\n\tprivate renderEditButton(contact: Contact, attrs: ContactViewerAttrs) {\n\t\tif (!attrs.editAction) {\n\t\t\treturn null\n\t\t}\n\n\t\treturn m(IconButton, {\n\t\t\ttitle: \"edit_action\",\n\t\t\ticon: Icons.Edit,\n\t\t\tclick: () => assertNotNull(attrs.editAction, \"Invalid Edit action in Contact Viewer\")(contact),\n\t\t})\n\t}\n\n\tprivate renderDeleteButton(contact: Contact, attrs: ContactViewerAttrs) {\n\t\tif (!attrs.deleteAction) {\n\t\t\treturn null\n\t\t}\n\n\t\treturn m(IconButton, {\n\t\t\ttitle: \"delete_action\",\n\t\t\ticon: Icons.Trash,\n\t\t\tclick: () => assertNotNull(attrs.deleteAction, \"Invalid Delete action in Contact Viewer\")([contact]),\n\t\t})\n\t}\n\n\tprivate renderActionsDropdown(contact: Contact, attrs: ContactViewerAttrs) {\n\t\tconst actions: { label: TranslationKey; icon: AllIcons; click: () => void }[] = []\n\n\t\tif (attrs.editAction) {\n\t\t\tactions.push({\n\t\t\t\tlabel: \"edit_action\",\n\t\t\t\ticon: Icons.Edit,\n\t\t\t\tclick: () => {\n\t\t\t\t\tassertNotNull(attrs.editAction, \"Edit action in Contact Viewer has disappeared\")(contact)\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\n\t\tif (attrs.deleteAction) {\n\t\t\tactions.push({\n\t\t\t\tlabel: \"delete_action\",\n\t\t\t\ticon: Icons.Trash,\n\t\t\t\tclick: () => {\n\t\t\t\t\tassertNotNull(attrs.deleteAction, \"Delete action in Contact Viewer has disappeared\")([contact])\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\n\t\tif (actions.length === 0) {\n\t\t\treturn null\n\t\t}\n\n\t\treturn m(\n\t\t\t\".flex-end\",\n\t\t\tm(\n\t\t\t\tIconButton,\n\t\t\t\tattachDropdown({\n\t\t\t\t\tmainButtonAttrs: {\n\t\t\t\t\t\ttitle: \"more_label\",\n\t\t\t\t\t\ticon: Icons.More,\n\t\t\t\t\t},\n\t\t\t\t\tchildAttrs: () => actions,\n\t\t\t\t}),\n\t\t\t),\n\t\t)\n\t}\n\n\tprivate renderActions(contact: Contact, attrs: ContactViewerAttrs) {\n\t\tif (!contact || !(attrs.editAction || attrs.deleteAction)) {\n\t\t\treturn null\n\t\t}\n\n\t\tif (attrs.extendedActions) {\n\t\t\treturn this.renderExtendedActions(contact, attrs)\n\t\t}\n\n\t\treturn this.renderActionsDropdown(contact, attrs)\n\t}\n\n\tprivate renderJobInformation(contact: Contact): Children {\n\t\tconst spacerFunction = () =>\n\t\t\tm(\n\t\t\t\t\"span.plr-s\",\n\t\t\t\t{\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tfontWeight: \"900\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\" · \",\n\t\t\t)\n\n\t\treturn insertBetween(\n\t\t\t[\n\t\t\t\tcontact.role ? m(\"span\", contact.role) : null,\n\t\t\t\tcontact.department ? m(\"span\", contact.department) : null,\n\t\t\t\tcontact.company ? m(\"span\", contact.company) : null,\n\t\t\t],\n\t\t\tspacerFunction,\n\t\t)\n\t}\n\n\tprivate renderPronounsInfo(contact: Contact): Children {\n\t\tconst spacerFunction = () =>\n\t\t\tm(\n\t\t\t\t\"span.plr-s\",\n\t\t\t\t{\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tfontWeight: \"900\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\" · \",\n\t\t\t)\n\n\t\treturn insertBetween(\n\t\t\tcontact.pronouns.map((pronouns) => {\n\t\t\t\tlet language = \"\"\n\t\t\t\tif (pronouns.language != \"\") {\n\t\t\t\t\tlanguage = `${pronouns.language}: `\n\t\t\t\t}\n\n\t\t\t\treturn m(\"span\", `${language}${pronouns.pronouns}`)\n\t\t\t}),\n\t\t\tspacerFunction,\n\t\t)\n\t}\n\n\tprivate renderAddressesAndSocialIds(contact: Contact): Children {\n\t\tconst addresses = contact.addresses.map((element) => this.renderAddress(element))\n\t\tconst socials = contact.socialIds.map((element) => this.renderSocialId(element))\n\t\treturn addresses.length > 0 || socials.length > 0\n\t\t\t? m(\".wrapping-row\", [\n\t\t\t\t\tm(\".address.mt-l\", addresses.length > 0 ? [m(\".h4\", lang.get(\"address_label\")), m(\".aggregateEditors\", addresses)] : null),\n\t\t\t\t\tm(\".social.mt-l\", socials.length > 0 ? [m(\".h4\", lang.get(\"social_label\")), m(\".aggregateEditors\", socials)] : null),\n\t\t\t  ])\n\t\t\t: null\n\t}\n\n\tprivate renderWebsitesAndInstantMessengers(contact: Contact): Children {\n\t\tconst websites = contact.websites.map((element) => this.renderWebsite(element))\n\t\tconst instantMessengers = contact.messengerHandles.map((element) => this.renderMessengerHandle(element))\n\t\treturn websites.length > 0 || instantMessengers.length > 0\n\t\t\t? m(\".wrapping-row\", [\n\t\t\t\t\tm(\".website.mt-l\", websites.length > 0 ? [m(\".h4\", lang.get(\"websites_label\")), m(\".aggregateEditors\", websites)] : null),\n\t\t\t\t\tm(\n\t\t\t\t\t\t\".messenger-handles.mt-l\",\n\t\t\t\t\t\tinstantMessengers.length > 0 ? [m(\".h4\", lang.get(\"messenger_handles_label\")), m(\".aggregateEditors\", instantMessengers)] : null,\n\t\t\t\t\t),\n\t\t\t  ])\n\t\t\t: null\n\t}\n\n\tprivate renderCustomDatesAndRelationships(contact: Contact): Children {\n\t\tconst dates = contact.customDate.map((element) =>\n\t\t\tm(TextField, {\n\t\t\t\tlabel: getContactCustomDateTypeToLabel(getCustomDateType(element), element.customTypeName),\n\t\t\t\tvalue: formatContactDate(element.dateIso),\n\t\t\t\tisReadOnly: true,\n\t\t\t}),\n\t\t)\n\t\tconst relationships = contact.relationships.map((element) =>\n\t\t\tm(TextField, {\n\t\t\t\tlabel: getContactRelationshipTypeToLabel(getRelationshipType(element), element.customTypeName),\n\t\t\t\tvalue: element.person,\n\t\t\t\tisReadOnly: true,\n\t\t\t}),\n\t\t)\n\n\t\treturn dates.length > 0 || relationships.length > 0\n\t\t\t? m(\".wrapping-row\", [\n\t\t\t\t\tm(\".dates.mt-l\", dates.length > 0 ? [m(\".h4\", lang.get(\"dates_label\")), m(\".aggregateEditors\", dates)] : null),\n\t\t\t\t\tm(\n\t\t\t\t\t\t\".relationships.mt-l\",\n\t\t\t\t\t\trelationships.length > 0 ? [m(\".h4\", lang.get(\"relationships_label\")), m(\".aggregateEditors\", relationships)] : null,\n\t\t\t\t\t),\n\t\t\t  ])\n\t\t\t: null\n\t}\n\n\tprivate renderMailAddressesAndPhones(contact: Contact, onWriteMail: ContactViewerAttrs[\"onWriteMail\"]): Children {\n\t\tconst mailAddresses = contact.mailAddresses.map((element) => this.renderMailAddress(contact, element, onWriteMail))\n\t\tconst phones = contact.phoneNumbers.map((element) => this.renderPhoneNumber(element))\n\t\treturn mailAddresses.length > 0 || phones.length > 0\n\t\t\t? m(\".wrapping-row\", [\n\t\t\t\t\tm(\".mail.mt-l\", mailAddresses.length > 0 ? [m(\".h4\", lang.get(\"email_label\")), m(\".aggregateEditors\", [mailAddresses])] : null),\n\t\t\t\t\tm(\".phone.mt-l\", phones.length > 0 ? [m(\".h4\", lang.get(\"phone_label\")), m(\".aggregateEditors\", [phones])] : null),\n\t\t\t  ])\n\t\t\t: null\n\t}\n\n\tprivate renderComment(contact: Contact): Children {\n\t\treturn contact.comment && contact.comment.trim().length > 0\n\t\t\t? [m(\".h4.mt-l\", lang.get(\"comment_label\")), m(\"p.mt-l.text-prewrap.text-break.selectable\", contact.comment)]\n\t\t\t: null\n\t}\n\n\tprivate renderSocialId(contactSocialId: ContactSocialId): Children {\n\t\tconst showButton = m(IconButton, {\n\t\t\ttitle: \"showURL_alt\",\n\t\t\tclick: noOp,\n\t\t\ticon: Icons.ArrowForward,\n\t\t\tsize: ButtonSize.Compact,\n\t\t})\n\t\treturn m(TextField, {\n\t\t\tlabel: getContactSocialTypeLabel(getContactSocialType(contactSocialId), contactSocialId.customTypeName),\n\t\t\tvalue: contactSocialId.socialId,\n\t\t\tisReadOnly: true,\n\t\t\tinjectionsRight: () => m(`a[href=${getSocialUrl(contactSocialId)}][target=_blank]`, showButton),\n\t\t})\n\t}\n\n\tprivate renderWebsite(website: ContactWebsite): Children {\n\t\tconst showButton = m(IconButton, {\n\t\t\ttitle: \"showURL_alt\",\n\t\t\tclick: noOp,\n\t\t\ticon: Icons.ArrowForward,\n\t\t\tsize: ButtonSize.Compact,\n\t\t})\n\t\treturn m(TextField, {\n\t\t\tlabel: getContactCustomWebsiteTypeToLabel(downcast(website.type), website.customTypeName),\n\t\t\tvalue: website.url,\n\t\t\tisReadOnly: true,\n\t\t\tinjectionsRight: () => m(`a[href=${getWebsiteUrl(website.url)}][target=_blank]`, showButton),\n\t\t})\n\t}\n\n\tprivate renderMessengerHandle(messengerHandle: ContactMessengerHandle): Children {\n\t\tconst showButton = m(IconButton, {\n\t\t\ttitle: \"showURL_alt\",\n\t\t\tclick: noOp,\n\t\t\ticon: Icons.ArrowForward,\n\t\t\tsize: ButtonSize.Compact,\n\t\t})\n\t\treturn m(TextField, {\n\t\t\tlabel: getContactMessengerHandleTypeToLabel(downcast(messengerHandle.type), messengerHandle.customTypeName),\n\t\t\tvalue: messengerHandle.handle,\n\t\t\tisReadOnly: true,\n\t\t\tinjectionsRight: () => m(`a[href=${getMessengerHandleUrl(messengerHandle)}][target=_blank]`, showButton),\n\t\t})\n\t}\n\n\tprivate renderMailAddress(contact: Contact, address: ContactAddress, onWriteMail: ContactViewerAttrs[\"onWriteMail\"]): Children {\n\t\tconst newMailButton = m(IconButton, {\n\t\t\ttitle: \"sendMail_alt\",\n\t\t\tclick: () => onWriteMail({ name: `${contact.firstName} ${contact.lastName}`.trim(), address: address.address, contact: contact }),\n\t\t\ticon: Icons.PencilSquare,\n\t\t\tsize: ButtonSize.Compact,\n\t\t})\n\t\treturn m(TextField, {\n\t\t\tlabel: getContactAddressTypeLabel(address.type as any, address.customTypeName),\n\t\t\tvalue: address.address,\n\t\t\tisReadOnly: true,\n\t\t\tinjectionsRight: () => [newMailButton],\n\t\t})\n\t}\n\n\tprivate renderPhoneNumber(phone: ContactPhoneNumber): Children {\n\t\tconst callButton = m(IconButton, {\n\t\t\ttitle: \"callNumber_alt\",\n\t\t\tclick: () => null,\n\t\t\ticon: Icons.Call,\n\t\t\tsize: ButtonSize.Compact,\n\t\t})\n\t\treturn m(TextField, {\n\t\t\tlabel: getContactPhoneNumberTypeLabel(phone.type as ContactPhoneNumberType, phone.customTypeName),\n\t\t\tvalue: phone.number,\n\t\t\tisReadOnly: true,\n\t\t\tinjectionsRight: () => m(`a[href=\"tel:${phone.number}\"][target=_blank]`, callButton),\n\t\t})\n\t}\n\n\tprivate renderAddress(address: ContactAddress): Children {\n\t\tlet prepAddress: string\n\n\t\tif (address.address.indexOf(\"\\n\") !== -1) {\n\t\t\tprepAddress = encodeURIComponent(address.address.split(\"\\n\").join(\" \"))\n\t\t} else {\n\t\t\tprepAddress = encodeURIComponent(address.address)\n\t\t}\n\n\t\tconst showButton = m(IconButton, {\n\t\t\ttitle: \"showAddress_alt\",\n\t\t\tclick: () => null,\n\t\t\ticon: Icons.Pin,\n\t\t\tsize: ButtonSize.Compact,\n\t\t})\n\t\treturn m(TextField, {\n\t\t\tlabel: getContactAddressTypeLabel(downcast<ContactAddressType>(address.type), address.customTypeName),\n\t\t\tvalue: address.address,\n\t\t\tisReadOnly: true,\n\t\t\ttype: TextFieldType.Area,\n\t\t\tinjectionsRight: () => m(`a[href=\"https://www.openstreetmap.org/search?query=${prepAddress}\"][target=_blank]`, showButton),\n\t\t})\n\t}\n}\n\nfunction insertBetween(array: Children[], spacer: () => Children) {\n\tlet ret: Children = []\n\n\tfor (let e of array) {\n\t\tif (e != null) {\n\t\t\tif (ret.length > 0) {\n\t\t\t\tret.push(spacer())\n\t\t\t}\n\n\t\t\tret.push(e)\n\t\t}\n\t}\n\n\treturn ret\n}\n","import { styles } from \"./styles.js\"\n\nexport function responsiveCardHMargin() {\n\treturn styles.isSingleColumnLayout() ? \"mlr\" : \"mlr-l\"\n}\n\nexport function responsiveCardHPadding() {\n\treturn styles.isSingleColumnLayout() ? \"plr\" : \"plr-l\"\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport { theme } from \"../../../common/gui/theme.js\"\nimport { Contact } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { ContactViewer } from \"./ContactViewer.js\"\nimport { PartialRecipient } from \"../../../common/api/common/recipients/Recipient.js\"\nimport { responsiveCardHMargin } from \"../../../common/gui/cards.js\"\n\nexport interface ContactCardAttrs {\n\tcontact: Contact\n\tonWriteMail: (to: PartialRecipient) => unknown\n\teditAction?: (contact: Contact) => unknown\n\tdeleteAction?: (contacts: Contact[]) => unknown\n\textendedActions?: boolean\n\tstyle?: Record<string, any>\n}\n\n/** Wraps contact viewer in a nice card. */\nexport class ContactCardViewer implements Component<ContactCardAttrs> {\n\tview({ attrs }: Vnode<ContactCardAttrs>): Children {\n\t\tconst { contact, onWriteMail, editAction, deleteAction, extendedActions } = attrs\n\t\treturn [\n\t\t\tm(\n\t\t\t\t\".border-radius-big.rel\",\n\t\t\t\t{\n\t\t\t\t\tclass: responsiveCardHMargin(),\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tbackgroundColor: theme.content_bg,\n\t\t\t\t\t\t...attrs.style,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tm(ContactViewer, {\n\t\t\t\t\tcontact,\n\t\t\t\t\tonWriteMail,\n\t\t\t\t\teditAction,\n\t\t\t\t\tdeleteAction,\n\t\t\t\t\textendedActions,\n\t\t\t\t}),\n\t\t\t),\n\t\t\tm(\".mt-l\"),\n\t\t]\n\t}\n}\n","import { ContactListGroupRoot } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { locator } from \"../../common/api/main/CommonLocator.js\"\nimport { DialogHeaderBarAttrs } from \"../../common/gui/base/DialogHeaderBar.js\"\nimport { ButtonType } from \"../../common/gui/base/Button.js\"\nimport { Dialog } from \"../../common/gui/base/Dialog.js\"\nimport m, { Children, Component, Vnode } from \"mithril\"\nimport { TextField } from \"../../common/gui/base/TextField.js\"\nimport { px, size } from \"../../common/gui/size.js\"\nimport { IconButton } from \"../../common/gui/base/IconButton.js\"\nimport { Icons } from \"../../common/gui/base/icons/Icons.js\"\nimport { MailRecipientsTextField } from \"../../common/gui/MailRecipientsTextField.js\"\nimport { RecipientsSearchModel } from \"../../common/misc/RecipientsSearchModel.js\"\nimport { lazy, noOp } from \"@tutao/tutanota-utils\"\nimport { lang, TranslationKey } from \"../../common/misc/LanguageViewModel.js\"\nimport { isSameId } from \"../../common/api/common/utils/EntityUtils.js\"\nimport { Keys } from \"../../common/api/common/TutanotaConstants.js\"\nimport { isMailAddress } from \"../../common/misc/FormatValidator.js\"\nimport { cleanMailAddress } from \"../../common/api/common/utils/CommonCalendarUtils.js\"\n\nexport async function showContactListEditor(\n\tcontactListGroupRoot: ContactListGroupRoot | null,\n\theaderText: TranslationKey,\n\tsave: (name: string, addresses: Array<string>) => void,\n\taddressesOnList?: Array<string>,\n): Promise<void> {\n\tlet showNameInput = true\n\tconst recipientsSearch = await locator.recipientsSearchModel()\n\n\tif (contactListGroupRoot) {\n\t\tshowNameInput = false\n\t\trecipientsSearch.setFilter((item) => {\n\t\t\t// Exclude the list that we are editing to not show up in suggestions.\n\t\t\t// It is valid to include other lists to copy them into the current one.\n\t\t\treturn !(item.type === \"contactlist\" && isSameId(item.value.groupRoot._id, contactListGroupRoot._id))\n\t\t})\n\t}\n\n\tconst editorModel = new ContactListEditorModel(addressesOnList ?? [])\n\n\tconst dialogCloseAction = () => {\n\t\tdialog.close()\n\t}\n\n\tlet headerBarAttrs: DialogHeaderBarAttrs = {\n\t\tleft: [\n\t\t\t{\n\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\tclick: dialogCloseAction,\n\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t},\n\t\t],\n\t\tright: [\n\t\t\t{\n\t\t\t\tlabel: \"save_action\",\n\t\t\t\tclick: () => {\n\t\t\t\t\tsave(editorModel.name, editorModel.newAddresses)\n\t\t\t\t\tdialog.close()\n\t\t\t\t},\n\t\t\t\ttype: ButtonType.Primary,\n\t\t\t},\n\t\t],\n\t\tmiddle: headerText,\n\t}\n\n\tconst dialog = Dialog.editDialog(headerBarAttrs, ContactListEditor, {\n\t\tmodel: editorModel,\n\t\tcontactSearch: recipientsSearch,\n\t\tshowNameInput,\n\t}).addShortcut({\n\t\tkey: Keys.ESC,\n\t\texec: () => dialog.close(),\n\t\thelp: \"close_alt\",\n\t})\n\tdialog.show()\n}\n\nexport async function showContactListNameEditor(name: string, save: (name: string) => void): Promise<void> {\n\tlet nameInput = name\n\tlet form = () => [\n\t\tm(TextField, {\n\t\t\tlabel: \"name_label\",\n\t\t\tvalue: nameInput,\n\t\t\toninput: (newInput) => {\n\t\t\t\tnameInput = newInput\n\t\t\t},\n\t\t}),\n\t]\n\tconst okAction = async (dialog: Dialog) => {\n\t\tdialog.close()\n\t\tsave(nameInput)\n\t}\n\n\tDialog.showActionDialog({\n\t\ttitle: \"editContactList_action\",\n\t\tchild: form,\n\t\tallowOkWithReturn: true,\n\t\tokAction: okAction,\n\t})\n}\n\nexport class ContactListEditorModel {\n\tname: string\n\tnewAddresses: Array<string>\n\tcurrentAddresses: Array<string>\n\n\tconstructor(addresses: Array<string>) {\n\t\tthis.name = \"\"\n\t\tthis.newAddresses = []\n\t\tthis.currentAddresses = addresses\n\t}\n\n\taddRecipient(address: string) {\n\t\tthis.newAddresses = [address, ...this.newAddresses]\n\t}\n\n\tremoveRecipient(address: string) {\n\t\tthis.newAddresses = this.newAddresses.filter((a) => address !== a)\n\t}\n}\n\ntype ContactListEditorAttrs = {\n\tmodel: ContactListEditorModel\n\tcontactSearch: RecipientsSearchModel\n\tshowNameInput?: boolean\n}\n\nclass ContactListEditor implements Component<ContactListEditorAttrs> {\n\tprivate model: ContactListEditorModel\n\tprivate search: RecipientsSearchModel\n\tprivate newAddress: string = \"\"\n\tprivate showNameInput: boolean = true\n\n\tconstructor(vnode: Vnode<ContactListEditorAttrs>) {\n\t\tthis.model = vnode.attrs.model\n\t\tthis.search = vnode.attrs.contactSearch\n\t\tthis.showNameInput = vnode.attrs.showNameInput ?? true\n\t}\n\n\tview(): Children {\n\t\tlet helpLabel: lazy<string> | null = null\n\n\t\tif (this.newAddress.trim().length > 0 && !isMailAddress(this.newAddress.trim(), false)) {\n\t\t\thelpLabel = () => lang.get(\"invalidInputFormat_msg\")\n\t\t} else if (\n\t\t\tthis.model.currentAddresses.includes(cleanMailAddress(this.newAddress)) ||\n\t\t\tthis.model.newAddresses.includes(cleanMailAddress(this.newAddress))\n\t\t) {\n\t\t\thelpLabel = () => lang.get(\"addressAlreadyExistsOnList_msg\")\n\t\t}\n\n\t\treturn m(\"\", [\n\t\t\tthis.showNameInput\n\t\t\t\t? m(TextField, {\n\t\t\t\t\t\tlabel: \"name_label\",\n\t\t\t\t\t\tclass: \"big-input pt flex-grow\",\n\t\t\t\t\t\tvalue: this.model.name,\n\t\t\t\t\t\toninput: (name) => (this.model.name = name),\n\t\t\t\t  })\n\t\t\t\t: null,\n\t\t\tm(MailRecipientsTextField, {\n\t\t\t\tlabel: \"addEntries_action\",\n\t\t\t\ttext: this.newAddress,\n\t\t\t\tonTextChanged: (v) => (this.newAddress = v),\n\t\t\t\t// we don't show bubbles, we just want the search dropdown\n\t\t\t\trecipients: [],\n\t\t\t\tdisabled: false,\n\t\t\t\tonRecipientAdded: (address) => {\n\t\t\t\t\tif (!this.model.newAddresses.includes(address) && !this.model.currentAddresses.includes(address)) {\n\t\t\t\t\t\tthis.model.addRecipient(address)\n\t\t\t\t\t}\n\t\t\t\t\tm.redraw()\n\t\t\t\t},\n\t\t\t\t// do nothing because we don't have any bubbles here\n\t\t\t\tonRecipientRemoved: noOp,\n\t\t\t\tsearch: this.search,\n\t\t\t\thelpLabel,\n\t\t\t}),\n\t\t\tthis.model.newAddresses.map((address) => this.renderAddress(address)),\n\t\t])\n\t}\n\n\trenderAddress(address: string) {\n\t\treturn m(\n\t\t\t\".flex\",\n\t\t\t{\n\t\t\t\tstyle: {\n\t\t\t\t\theight: px(size.button_height),\n\t\t\t\t\tborderBottom: \"1px transparent\",\n\t\t\t\t\tmarginTop: px(size.vpad),\n\t\t\t\t},\n\t\t\t},\n\t\t\t[\n\t\t\t\tm(\".flex.col.flex-grow.overflow-hidden.flex-no-grow-shrink-auto\", [address]),\n\t\t\t\tm(\".flex-grow\"),\n\t\t\t\tm(IconButton, {\n\t\t\t\t\ttitle: \"remove_action\",\n\t\t\t\t\ticon: Icons.Cancel,\n\t\t\t\t\tclick: () => this.model.removeRecipient(address),\n\t\t\t\t}),\n\t\t\t],\n\t\t)\n\t}\n}\n"],"mappings":"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"}