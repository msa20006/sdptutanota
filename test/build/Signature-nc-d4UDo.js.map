{"version":3,"file":"Signature-nc-d4UDo.js","names":["tutanotaProperties: TutanotaProperties","TutanotaConstants","body: string","properties: TutanotaProperties","logins: LoginController"],"sources":["../../src/mail-app/mail/signature/Signature.ts"],"sourcesContent":["import { InfoLink, lang } from \"../../../common/misc/LanguageViewModel\"\nimport type { TutanotaProperties } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { EmailSignatureType as TutanotaConstants } from \"../../../common/api/common/TutanotaConstants\"\nimport { htmlSanitizer } from \"../../../common/misc/HtmlSanitizer\"\nimport type { LoginController } from \"../../../common/api/main/LoginController\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { LINE_BREAK } from \"../../../common/mailFunctionality/SharedMailUtils.js\"\n\nassertMainOrNode()\n\nexport function getDefaultSignature(): string {\n\t// add one line break to the default signature to add one empty line between signature and body\n\treturn (\n\t\tLINE_BREAK +\n\t\thtmlSanitizer.sanitizeHTML(\n\t\t\tlang.get(\"defaultEmailSignature_msg\", {\n\t\t\t\t\"{1}\": `<a href=${InfoLink.HomePageFreeSignup}>${InfoLink.HomePageFreeSignup}</a>`,\n\t\t\t}),\n\t\t).html\n\t)\n}\n\nexport function getEmailSignature(tutanotaProperties: TutanotaProperties): string {\n\t// provide the user signature, even for shared mail groups\n\tconst type = tutanotaProperties.emailSignatureType\n\n\tif (type === TutanotaConstants.EMAIL_SIGNATURE_TYPE_DEFAULT) {\n\t\treturn getDefaultSignature()\n\t} else if (TutanotaConstants.EMAIL_SIGNATURE_TYPE_CUSTOM === type) {\n\t\treturn tutanotaProperties.customEmailSignature\n\t} else {\n\t\treturn \"\"\n\t}\n}\n\nexport function appendEmailSignature(body: string, properties: TutanotaProperties): string {\n\tconst signature = getEmailSignature(properties)\n\n\tif (signature) {\n\t\t// ensure that signature is on the next line\n\t\treturn body + LINE_BREAK + signature\n\t} else {\n\t\treturn body\n\t}\n}\n\nexport function prependEmailSignature(body: string, logins: LoginController): string {\n\t// add space between signature and existing body\n\tlet bodyWithSignature = \"\"\n\tlet signature = getEmailSignature(logins.getUserController().props)\n\n\tif (body) {\n\t\tbodyWithSignature = LINE_BREAK + LINE_BREAK + LINE_BREAK + body\n\t}\n\n\tif (logins.getUserController().isInternalUser() && signature) {\n\t\t// ensure that signature is on the next line\n\t\tbodyWithSignature = LINE_BREAK + signature + bodyWithSignature\n\t}\n\n\treturn bodyWithSignature\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,kBAAkB;AAEX,SAAS,sBAA8B;AAE7C,QACC,aACA,cAAc,aACb,KAAK,IAAI,6BAA6B,EACrC,QAAQ,UAAU,SAAS,mBAAmB,GAAG,SAAS,mBAAmB,MAC7E,EAAC,CACF,CAAC;AAEH;AAEM,SAAS,kBAAkBA,oBAAgD;CAEjF,MAAM,OAAO,mBAAmB;AAEhC,KAAI,SAASC,mBAAkB,6BAC9B,QAAO,qBAAqB;SAClBA,mBAAkB,gCAAgC,KAC5D,QAAO,mBAAmB;IAE1B,QAAO;AAER;AAEM,SAAS,qBAAqBC,MAAcC,YAAwC;CAC1F,MAAM,YAAY,kBAAkB,WAAW;AAE/C,KAAI,UAEH,QAAO,OAAO,aAAa;IAE3B,QAAO;AAER;AAEM,SAAS,sBAAsBD,MAAcE,QAAiC;CAEpF,IAAI,oBAAoB;CACxB,IAAI,YAAY,kBAAkB,OAAO,mBAAmB,CAAC,MAAM;AAEnE,KAAI,KACH,qBAAoB,aAAa,aAAa,aAAa;AAG5D,KAAI,OAAO,mBAAmB,CAAC,gBAAgB,IAAI,UAElD,qBAAoB,aAAa,YAAY;AAG9C,QAAO;AACP"}