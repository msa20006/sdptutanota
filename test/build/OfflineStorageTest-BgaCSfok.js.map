{"version":3,"file":"OfflineStorageTest-BgaCSfok.js","names":["id: Id","ms: number","currentId: Id","incrementByMs: number","encode","dbFacade: DesktopSqlCipher","dateProviderMock: DateProvider","storage: OfflineStorage","migratorMock: OfflineStorageMigrator","offlineStorageCleanerMock: OfflineStorageCleaner","interWindowEventSenderMock: InterWindowEventFacadeSendDispatcher","entity: SomeEntity","type: TypeRef<unknown>","listId: string","lower: string","upper: string","typeRef: TypeRef<unknown>","userId","mailId: IdTuple","mailSetEntryId: IdTuple","mailDetailsBlobId: IdTuple","spamDetailsId: IdTuple","trashDetailsId: IdTuple","trashSubfolderDetailsId: IdTuple","beforeMailDetailsId: IdTuple","afterMailDetailsId: IdTuple","mailDetailsId1: IdTuple","mailDetailsId2: IdTuple","mails: Array<Mail>","mailDetailsBlobs: Array<MailDetailsBlob>"],"sources":["../tests/api/worker/offline/OfflineStorageTest.ts"],"sourcesContent":["import o from \"@tutao/otest\"\nimport { verify } from \"@tutao/tutanota-test-utils\"\nimport { customTypeEncoders, ensureBase64Ext, OfflineStorage, OfflineStorageCleaner } from \"../../../../../src/common/api/worker/offline/OfflineStorage.js\"\nimport { instance, object, when } from \"testdouble\"\nimport * as cborg from \"cborg\"\nimport {\n\tconstructMailSetEntryId,\n\telementIdPart,\n\tGENERATED_MAX_ID,\n\tGENERATED_MIN_ID,\n\tgeneratedIdToTimestamp,\n\tgetElementId,\n\tlistIdPart,\n\ttimestampToGeneratedId,\n} from \"../../../../../src/common/api/common/utils/EntityUtils.js\"\nimport { getDayShifted, getFirstOrThrow, getTypeId, lastThrow, mapNullable, promiseMap, TypeRef } from \"@tutao/tutanota-utils\"\nimport { DateProvider } from \"../../../../../src/common/api/common/DateProvider.js\"\nimport {\n\tBodyTypeRef,\n\tcreateMailFolderRef,\n\tFileTypeRef,\n\tMail,\n\tMailBagTypeRef,\n\tMailBoxTypeRef,\n\tMailDetailsBlob,\n\tMailDetailsBlobTypeRef,\n\tMailDetailsTypeRef,\n\tMailFolderTypeRef,\n\tMailSetEntryTypeRef,\n\tMailTypeRef,\n} from \"../../../../../src/common/api/entities/tutanota/TypeRefs.js\"\nimport { OfflineStorageMigrator } from \"../../../../../src/common/api/worker/offline/OfflineStorageMigrator.js\"\nimport { InterWindowEventFacadeSendDispatcher } from \"../../../../../src/common/native/common/generatedipc/InterWindowEventFacadeSendDispatcher.js\"\nimport * as fs from \"node:fs\"\nimport { untagSqlObject } from \"../../../../../src/common/api/worker/offline/SqlValue.js\"\nimport { MailSetKind } from \"../../../../../src/common/api/common/TutanotaConstants.js\"\nimport { BlobElementEntity, ElementEntity, ListElementEntity, SomeEntity } from \"../../../../../src/common/api/common/EntityTypes.js\"\nimport { resolveTypeReference } from \"../../../../../src/common/api/common/EntityFunctions.js\"\nimport { Type as TypeId } from \"../../../../../src/common/api/common/EntityConstants.js\"\nimport { expandId } from \"../../../../../src/common/api/worker/rest/DefaultEntityRestCache.js\"\nimport { UserTypeRef } from \"../../../../../src/common/api/entities/sys/TypeRefs.js\"\nimport { DesktopSqlCipher } from \"../../../../../src/common/desktop/db/DesktopSqlCipher.js\"\nimport { createTestEntity } from \"../../../TestUtils.js\"\nimport { sql } from \"../../../../../src/common/api/worker/offline/Sql.js\"\nimport { MailOfflineCleaner } from \"../../../../../src/mail-app/workerUtils/offline/MailOfflineCleaner.js\"\n\nfunction incrementId(id: Id, ms: number) {\n\tconst timestamp = generatedIdToTimestamp(id)\n\treturn timestampToGeneratedId(timestamp + ms)\n}\n\nclass IdGenerator {\n\tconstructor(private currentId: Id) {}\n\n\tgetNext(incrementByMs: number = 60000): Id {\n\t\tthis.currentId = incrementId(this.currentId, incrementByMs)\n\t\treturn this.currentId\n\t}\n}\n\nfunction encode(thing) {\n\treturn cborg.encode(thing, { typeEncoders: customTypeEncoders })\n}\n\nconst nativePath = __NODE_GYP_better_sqlite3\nconst database = \"./testdatabase.sqlite\"\nexport const offlineDatabaseTestKey = Uint8Array.from([3957386659, 354339016, 3786337319, 3366334248])\n\no.spec(\"OfflineStorageDb\", function () {\n\tconst now = new Date(\"2022-01-01 00:00:00 UTC\")\n\tconst timeRangeDays = 10\n\tconst userId = \"userId\"\n\tconst databaseKey = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7])\n\n\t/** get an id based on a timestamp that is {@param days} days away from the time range cutoff */\n\tconst offsetId = (days) => timestampToGeneratedId(getDayShifted(now, 0 - timeRangeDays + days).getTime())\n\tconst cutoffId = offsetId(0)\n\n\tlet dbFacade: DesktopSqlCipher\n\tlet dateProviderMock: DateProvider\n\tlet storage: OfflineStorage\n\tlet migratorMock: OfflineStorageMigrator\n\tlet offlineStorageCleanerMock: OfflineStorageCleaner\n\tlet interWindowEventSenderMock: InterWindowEventFacadeSendDispatcher\n\n\to.beforeEach(async function () {\n\t\tdbFacade = new DesktopSqlCipher(nativePath, database, false)\n\n\t\tdateProviderMock = object<DateProvider>()\n\t\tmigratorMock = instance(OfflineStorageMigrator)\n\t\tinterWindowEventSenderMock = instance(InterWindowEventFacadeSendDispatcher)\n\t\tofflineStorageCleanerMock = new MailOfflineCleaner()\n\t\twhen(dateProviderMock.now()).thenReturn(now.getTime())\n\t\tstorage = new OfflineStorage(dbFacade, interWindowEventSenderMock, dateProviderMock, migratorMock, offlineStorageCleanerMock)\n\t})\n\n\to.afterEach(async function () {\n\t\tawait dbFacade.closeDb()\n\t\tawait fs.promises.unlink(database)\n\t})\n\n\to.spec(\"Unit test\", function () {\n\t\tasync function insertEntity(entity: SomeEntity) {\n\t\t\tconst typeModel = await resolveTypeReference(entity._type)\n\t\t\tconst type = getTypeId(entity._type)\n\t\t\tlet preparedQuery\n\t\t\tswitch (typeModel.type) {\n\t\t\t\tcase TypeId.Element.valueOf():\n\t\t\t\t\tpreparedQuery = sql`insert into element_entities\n\t\t\t\t\t\t\t\t\t\tvalues (${type}, ${(entity as ElementEntity)._id}, ${entity._ownerGroup}, ${encode(entity)})`\n\t\t\t\t\tbreak\n\t\t\t\tcase TypeId.ListElement.valueOf(): {\n\t\t\t\t\tconst [listId, elementId] = (entity as ListElementEntity)._id\n\t\t\t\t\tpreparedQuery = sql`INSERT INTO list_entities\n\t\t\t\t\t\t\t\t\t\tVALUES (${type}, ${listId}, ${elementId}, ${entity._ownerGroup}, ${encode(entity)})`\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase TypeId.BlobElement.valueOf(): {\n\t\t\t\t\tconst [archiveId, blobElementId] = (entity as BlobElementEntity)._id\n\t\t\t\t\tpreparedQuery = sql`INSERT INTO blob_element_entities\n\t\t\t\t\t\t\t\t\t\tVALUES (${type}, ${archiveId}, ${blobElementId}, ${entity._ownerGroup}, ${encode(entity)})`\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"must be a persistent type\")\n\t\t\t}\n\t\t\tawait dbFacade.run(preparedQuery.query, preparedQuery.params)\n\t\t}\n\n\t\tasync function insertRange(type: TypeRef<unknown>, listId: string, lower: string, upper: string) {\n\t\t\tconst { query, params } = sql`INSERT INTO ranges\n\t\t\t\t\t\t\t\t\t\t  VALUES (${getTypeId(type)}, ${listId}, ${lower}, ${upper})`\n\t\t\tawait dbFacade.run(query, params)\n\t\t}\n\n\t\tasync function getAllIdsForType(typeRef: TypeRef<unknown>): Promise<Id[]> {\n\t\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\t\tlet preparedQuery\n\t\t\tswitch (typeModel.type) {\n\t\t\t\tcase TypeId.Element.valueOf():\n\t\t\t\t\tpreparedQuery = sql`select *\n\t\t\t\t\t\t\t\t\t\tfrom element_entities\n\t\t\t\t\t\t\t\t\t\twhere type = ${getTypeId(typeRef)}`\n\t\t\t\t\tbreak\n\t\t\t\tcase TypeId.ListElement.valueOf():\n\t\t\t\t\tpreparedQuery = sql`select *\n\t\t\t\t\t\t\t\t\t\tfrom list_entities\n\t\t\t\t\t\t\t\t\t\twhere type = ${getTypeId(typeRef)}`\n\t\t\t\t\tbreak\n\t\t\t\tcase TypeId.BlobElement.valueOf():\n\t\t\t\t\tpreparedQuery = sql`select *\n\t\t\t\t\t\t\t\t\t\tfrom blob_element_entities\n\t\t\t\t\t\t\t\t\t\twhere type = ${getTypeId(typeRef)}`\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"must be a persistent type\")\n\t\t\t}\n\t\t\treturn (await dbFacade.all(preparedQuery.query, preparedQuery.params)).map((r) => r.elementId.value as Id)\n\t\t}\n\n\t\to(\"migrations are run\", async function () {\n\t\t\tawait storage.init({ userId, databaseKey, timeRangeDays, forceNewDatabase: false })\n\t\t\tverify(migratorMock.migrate(storage, dbFacade))\n\t\t})\n\n\t\to.spec(\"Offline storage round trip\", function () {\n\t\t\to.spec(\"ElementType\", function () {\n\t\t\t\to(\"deleteAllOfType\", async function () {\n\t\t\t\t\tconst userId = \"id1\"\n\t\t\t\t\tconst storableUser = createTestEntity(UserTypeRef, { _id: userId })\n\n\t\t\t\t\tawait storage.init({ userId, databaseKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\t\t\tlet user = await storage.get(UserTypeRef, null, userId)\n\t\t\t\t\to(user).equals(null)\n\n\t\t\t\t\tawait storage.put(storableUser)\n\n\t\t\t\t\tuser = await storage.get(UserTypeRef, null, userId)\n\t\t\t\t\to(user!._id).equals(storableUser._id)\n\n\t\t\t\t\tawait storage.deleteAllOfType(UserTypeRef)\n\n\t\t\t\t\tuser = await storage.get(UserTypeRef, null, userId)\n\t\t\t\t\to(user).equals(null)\n\t\t\t\t})\n\t\t\t})\n\n\t\t\to.spec(\"ListElementType generatedId\", function () {\n\t\t\t\to(\"deleteAllOfType\", async function () {\n\t\t\t\t\tconst listId = \"listId1\"\n\t\t\t\t\tconst elementId = \"id1\"\n\t\t\t\t\tconst storableMail = createTestEntity(MailTypeRef, { _id: [listId, elementId] })\n\n\t\t\t\t\tawait storage.init({ userId: elementId, databaseKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\t\t\tlet mail = await storage.get(MailTypeRef, listId, elementId)\n\t\t\t\t\to(mail).equals(null)\n\n\t\t\t\t\tawait storage.put(storableMail)\n\t\t\t\t\tawait storage.setNewRangeForList(MailTypeRef, listId, elementId, elementId)\n\n\t\t\t\t\tmail = await storage.get(MailTypeRef, listId, elementId)\n\t\t\t\t\to(mail!._id).deepEquals(storableMail._id)\n\t\t\t\t\tconst rangeBefore = await storage.getRangeForList(MailTypeRef, listId)\n\t\t\t\t\to(rangeBefore).deepEquals({ upper: elementId, lower: elementId })\n\t\t\t\t\tawait storage.deleteAllOfType(MailTypeRef)\n\n\t\t\t\t\tmail = await storage.get(MailTypeRef, listId, elementId)\n\t\t\t\t\to(mail).equals(null)\n\t\t\t\t\tconst rangeAfter = await storage.getRangeForList(MailTypeRef, listId)\n\t\t\t\t\to(rangeAfter).equals(null)\n\t\t\t\t})\n\n\t\t\t\to(\"deleteWholeList\", async function () {\n\t\t\t\t\tconst listOne = \"listId1\"\n\t\t\t\t\tconst listTwo = \"listId2\"\n\t\t\t\t\tawait storage.init({ userId: \"user\", databaseKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\t\t\tconst listOneMailOne = createTestEntity(MailTypeRef, { _id: [listOne, \"id1\"] })\n\t\t\t\t\tconst listOneMailTwo = createTestEntity(MailTypeRef, { _id: [listOne, \"id2\"] })\n\t\t\t\t\tconst listTwoMail = createTestEntity(MailTypeRef, { _id: [listTwo, \"id3\"] })\n\t\t\t\t\tawait storage.put(listOneMailOne)\n\t\t\t\t\tawait storage.put(listOneMailTwo)\n\t\t\t\t\tawait storage.put(listTwoMail)\n\t\t\t\t\tawait storage.setNewRangeForList(MailTypeRef, listOne, \"id1\", \"id2\")\n\t\t\t\t\tawait storage.setNewRangeForList(MailTypeRef, listTwo, \"id3\", \"id3\")\n\n\t\t\t\t\tawait storage.deleteWholeList(MailTypeRef, listOne)\n\n\t\t\t\t\tconst mailsInListOne = await storage.getWholeList(MailTypeRef, listOne)\n\t\t\t\t\tconst mailsInListTwo = await storage.getWholeList(MailTypeRef, listTwo)\n\t\t\t\t\tconst rangeListOne = await storage.getRangeForList(MailTypeRef, listOne)\n\t\t\t\t\tconst rangeListTwo = await storage.getRangeForList(MailTypeRef, listTwo)\n\n\t\t\t\t\to(mailsInListOne).deepEquals([])\n\t\t\t\t\to(mailsInListTwo).deepEquals([listTwoMail])\n\t\t\t\t\to(rangeListOne).equals(null)\n\t\t\t\t\to(rangeListTwo).deepEquals({ lower: \"id3\", upper: \"id3\" })\n\t\t\t\t})\n\n\t\t\t\to(\"provideMultiple\", async function () {\n\t\t\t\t\tconst listId = \"listId1\"\n\t\t\t\t\tconst elementId1 = \"id1\"\n\t\t\t\t\tconst elementId2 = \"id2\"\n\t\t\t\t\tconst storableMail1 = createTestEntity(MailTypeRef, { _id: [listId, elementId1] })\n\t\t\t\t\tconst storableMail2 = createTestEntity(MailTypeRef, { _id: [listId, elementId2] })\n\n\t\t\t\t\tawait storage.init({ userId: elementId1, databaseKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\t\t\tlet mails = await storage.provideMultiple(MailTypeRef, listId, [elementId1])\n\t\t\t\t\to(mails).deepEquals([])\n\n\t\t\t\t\tawait storage.put(storableMail1)\n\n\t\t\t\t\tmails = await storage.provideMultiple(MailTypeRef, listId, [elementId1, elementId2])\n\t\t\t\t\to(mails).deepEquals([storableMail1])\n\n\t\t\t\t\tawait storage.put(storableMail2)\n\n\t\t\t\t\tmails = await storage.provideMultiple(MailTypeRef, listId, [elementId1, elementId2])\n\t\t\t\t\to(mails).deepEquals([storableMail1, storableMail2])\n\t\t\t\t})\n\t\t\t})\n\n\t\t\to.spec(\"ListElementType customId\", function () {\n\t\t\t\to(\"deleteAllOfType\", async function () {\n\t\t\t\t\tconst listId = \"listId1\"\n\t\t\t\t\tconst elementId = constructMailSetEntryId(new Date(), \"mailId\")\n\t\t\t\t\tconst storableMailSetEntry = createTestEntity(MailSetEntryTypeRef, { _id: [listId, elementId] })\n\n\t\t\t\t\tawait storage.init({ userId: elementId, databaseKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\t\t\tlet mailSetEntry = await storage.get(MailSetEntryTypeRef, listId, elementId)\n\t\t\t\t\to(mailSetEntry).equals(null)\n\n\t\t\t\t\tawait storage.put(storableMailSetEntry)\n\t\t\t\t\tawait storage.setNewRangeForList(MailSetEntryTypeRef, listId, elementId, elementId)\n\n\t\t\t\t\tmailSetEntry = await storage.get(MailSetEntryTypeRef, listId, elementId)\n\t\t\t\t\to(mailSetEntry!._id).deepEquals(storableMailSetEntry._id)\n\t\t\t\t\tconst rangeBefore = await storage.getRangeForList(MailSetEntryTypeRef, listId)\n\t\t\t\t\to(rangeBefore).deepEquals({ upper: elementId, lower: elementId })\n\t\t\t\t\tawait storage.deleteAllOfType(MailSetEntryTypeRef)\n\n\t\t\t\t\tmailSetEntry = await storage.get(MailSetEntryTypeRef, listId, elementId)\n\t\t\t\t\to(mailSetEntry).equals(null)\n\t\t\t\t\tconst rangeAfter = await storage.getRangeForList(MailSetEntryTypeRef, listId)\n\t\t\t\t\to(rangeAfter).equals(null)\n\t\t\t\t})\n\n\t\t\t\to(\"provideMultiple\", async function () {\n\t\t\t\t\tconst listId = \"listId1\"\n\t\t\t\t\tconst elementId1 = constructMailSetEntryId(new Date(1724675875113), \"mailId1\")\n\t\t\t\t\tconst elementId2 = constructMailSetEntryId(new Date(1724675899978), \"mailId2\")\n\t\t\t\t\tconst storableMailSetEntry1 = createTestEntity(MailSetEntryTypeRef, { _id: [listId, elementId1] })\n\t\t\t\t\tconst storableMailSetEntry2 = createTestEntity(MailSetEntryTypeRef, { _id: [listId, elementId2] })\n\n\t\t\t\t\tawait storage.init({ userId: elementId1, databaseKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\t\t\tlet mails = await storage.provideMultiple(MailSetEntryTypeRef, listId, [elementId1])\n\t\t\t\t\to(mails).deepEquals([])\n\n\t\t\t\t\tawait storage.put(storableMailSetEntry1)\n\n\t\t\t\t\tmails = await storage.provideMultiple(MailSetEntryTypeRef, listId, [elementId1, elementId2])\n\t\t\t\t\to(mails).deepEquals([storableMailSetEntry1])\n\n\t\t\t\t\tawait storage.put(storableMailSetEntry2)\n\n\t\t\t\t\tmails = await storage.provideMultiple(MailSetEntryTypeRef, listId, [elementId1, elementId2])\n\t\t\t\t\to(mails).deepEquals([storableMailSetEntry1, storableMailSetEntry2])\n\t\t\t\t})\n\t\t\t})\n\n\t\t\to.spec(\"BlobElementType\", function () {\n\t\t\t\to(\"put, get and delete\", async function () {\n\t\t\t\t\tconst archiveId = \"archiveId\"\n\t\t\t\t\tconst blobElementId = \"id1\"\n\t\t\t\t\tconst storableMailDetails = createTestEntity(MailDetailsBlobTypeRef, {\n\t\t\t\t\t\t_id: [archiveId, blobElementId],\n\t\t\t\t\t\tdetails: createTestEntity(MailDetailsTypeRef),\n\t\t\t\t\t})\n\n\t\t\t\t\tawait storage.init({ userId, databaseKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\t\t\tlet mailDetailsBlob = await storage.get(MailDetailsBlobTypeRef, archiveId, blobElementId)\n\t\t\t\t\to(mailDetailsBlob).equals(null)\n\n\t\t\t\t\tawait storage.put(storableMailDetails)\n\n\t\t\t\t\tmailDetailsBlob = await storage.get(MailDetailsBlobTypeRef, archiveId, blobElementId)\n\t\t\t\t\tmailDetailsBlob!.details._type = MailDetailsTypeRef // we do not set the proper typeRef class on nested aggregates, so we overwrite it here\n\t\t\t\t\to(mailDetailsBlob).deepEquals(storableMailDetails)\n\n\t\t\t\t\tawait storage.deleteIfExists(MailDetailsBlobTypeRef, archiveId, blobElementId)\n\n\t\t\t\t\tmailDetailsBlob = await storage.get(MailDetailsBlobTypeRef, archiveId, blobElementId)\n\t\t\t\t\to(mailDetailsBlob).equals(null)\n\t\t\t\t})\n\n\t\t\t\to(\"put, get and deleteAllOwnedBy\", async function () {\n\t\t\t\t\tconst archiveId = \"archiveId\"\n\t\t\t\t\tconst blobElementId = \"id1\"\n\t\t\t\t\tconst _ownerGroup = \"ownerGroup\"\n\t\t\t\t\tconst storableMailDetails = createTestEntity(MailDetailsBlobTypeRef, {\n\t\t\t\t\t\t_id: [archiveId, blobElementId],\n\t\t\t\t\t\t_ownerGroup,\n\t\t\t\t\t\tdetails: createTestEntity(MailDetailsTypeRef),\n\t\t\t\t\t})\n\n\t\t\t\t\tawait storage.init({ userId, databaseKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\t\t\tawait storage.put(storableMailDetails)\n\n\t\t\t\t\tawait storage.deleteAllOwnedBy(_ownerGroup)\n\n\t\t\t\t\tconst mailDetailsBlob = await storage.get(MailDetailsBlobTypeRef, archiveId, blobElementId)\n\t\t\t\t\to(mailDetailsBlob).equals(null)\n\t\t\t\t})\n\t\t\t})\n\t\t})\n\n\t\to.spec(\"Clearing excluded data for MailSet mailbox\", function () {\n\t\t\tconst spamFolderId = \"spamFolder\"\n\t\t\tconst trashFolderId = \"trashFolder\"\n\t\t\tconst spamListId = \"spamList\"\n\t\t\tconst trashListId = \"trashList\"\n\t\t\tconst spamMailSetEntriesId = \"spamMailSetEntriesId\"\n\t\t\tconst trashMailSetEntriesId = \"trashMailSetEntriesId\"\n\t\t\tconst mailListId = \"listId\"\n\n\t\t\to.beforeEach(async function () {\n\t\t\t\tawait storage.init({ userId, databaseKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailBoxTypeRef, {\n\t\t\t\t\t\t_id: \"mailboxId\",\n\t\t\t\t\t\tcurrentMailBag: createTestEntity(MailBagTypeRef, { _id: \"mailBagId\", mails: mailListId }),\n\t\t\t\t\t\tfolders: createMailFolderRef({ folders: \"mailFolderList\" }),\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailFolderTypeRef, {\n\t\t\t\t\t\t_id: [\"mailFolderList\", spamFolderId],\n\t\t\t\t\t\tmails: spamListId,\n\t\t\t\t\t\tentries: spamMailSetEntriesId,\n\t\t\t\t\t\tfolderType: MailSetKind.SPAM,\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailFolderTypeRef, {\n\t\t\t\t\t\t_id: [\"mailFolderList\", trashFolderId],\n\t\t\t\t\t\tmails: trashListId,\n\t\t\t\t\t\tentries: trashMailSetEntriesId,\n\t\t\t\t\t\tfolderType: MailSetKind.TRASH,\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t})\n\n\t\t\to(\"ranges before timeRangeDays will be deleted\", async function () {\n\t\t\t\tconst upperBeforeTimeRangeDays = offsetId(-1)\n\t\t\t\tconst lowerBeforeTimeRangeDays = offsetId(-2)\n\t\t\t\tconst upperDate = getDayShifted(now, 0 - timeRangeDays - 1)\n\t\t\t\tconst lowerDate = getDayShifted(now, 0 - timeRangeDays - 2)\n\t\t\t\tconst mailSetEntryTypeModel = await resolveTypeReference(MailSetEntryTypeRef)\n\t\t\t\tconst lowerMailSetEntryIdBeforeTimeRangeDays = ensureBase64Ext(mailSetEntryTypeModel, constructMailSetEntryId(lowerDate, GENERATED_MIN_ID))\n\t\t\t\tconst upperMailSetEntryIdBeforeTimeRangeDays = ensureBase64Ext(mailSetEntryTypeModel, constructMailSetEntryId(upperDate, GENERATED_MAX_ID))\n\t\t\t\tconst mailId: IdTuple = [mailListId, \"anything\"]\n\t\t\t\tconst mailSetEntryId: IdTuple = [\"mailSetEntriesListId\", constructMailSetEntryId(upperDate, elementIdPart(mailId))]\n\t\t\t\tconst mailDetailsBlobId: IdTuple = [\"mailDetailsList\", \"mailDetailsBlobId\"]\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailFolderTypeRef, {\n\t\t\t\t\t\t_id: [\"mailFolderList\", \"mailFolderId\"],\n\t\t\t\t\t\tmails: mailListId,\n\t\t\t\t\t\tentries: listIdPart(mailSetEntryId),\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\tawait insertEntity(createTestEntity(MailSetEntryTypeRef, { _id: mailSetEntryId, mail: mailId }))\n\t\t\t\tawait insertEntity(createTestEntity(MailTypeRef, { _id: mailId, mailDetails: mailDetailsBlobId, sets: [mailSetEntryId] }))\n\t\t\t\tawait insertEntity(createTestEntity(MailDetailsBlobTypeRef, { _id: mailDetailsBlobId, details: createTestEntity(MailDetailsTypeRef) }))\n\t\t\t\tawait insertRange(\n\t\t\t\t\tMailSetEntryTypeRef,\n\t\t\t\t\tlistIdPart(mailSetEntryId),\n\t\t\t\t\tlowerMailSetEntryIdBeforeTimeRangeDays,\n\t\t\t\t\tupperMailSetEntryIdBeforeTimeRangeDays,\n\t\t\t\t)\n\t\t\t\tawait insertRange(MailTypeRef, mailListId, lowerBeforeTimeRangeDays, upperBeforeTimeRangeDays)\n\n\t\t\t\t// Here we clear the excluded data\n\t\t\t\tawait storage.clearExcludedData(timeRangeDays, userId)\n\n\t\t\t\tconst allRanges = await dbFacade.all(\"SELECT * FROM ranges\", [])\n\t\t\t\to(allRanges).deepEquals([])\n\t\t\t\tconst allMails = await getAllIdsForType(MailTypeRef)\n\t\t\t\to(allMails).deepEquals([])\n\t\t\t\tconst allMailSetEntries = await getAllIdsForType(MailSetEntryTypeRef)\n\t\t\t\to(allMailSetEntries).deepEquals([])\n\t\t\t\tconst allBlobDetails = await getAllIdsForType(MailDetailsBlobTypeRef)\n\t\t\t\to(allBlobDetails).deepEquals([])\n\t\t\t})\n\t\t})\n\n\t\t// we should refactor these tests once all mailboxes are migrated to the new MailSet architecture\n\t\to.spec(\"Clearing excluded data for Non-MailSet mailbox\", function () {\n\t\t\tconst spamFolderId = \"spamFolder\"\n\t\t\tconst trashFolderId = \"trashFolder\"\n\t\t\tconst spamListId = \"spamList\"\n\t\t\tconst trashListId = \"trashList\"\n\t\t\tconst listId = \"listId\"\n\t\t\tconst mailType = getTypeId(MailTypeRef)\n\n\t\t\to.beforeEach(async function () {\n\t\t\t\tawait storage.init({ userId, databaseKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailBoxTypeRef, { _id: \"mailboxId\", currentMailBag: null, folders: createMailFolderRef({ folders: \"mailFolderList\" }) }),\n\t\t\t\t)\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailFolderTypeRef, { _id: [\"mailFolderList\", spamFolderId], mails: spamListId, folderType: MailSetKind.SPAM }),\n\t\t\t\t)\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailFolderTypeRef, { _id: [\"mailFolderList\", trashFolderId], mails: trashListId, folderType: MailSetKind.TRASH }),\n\t\t\t\t)\n\t\t\t})\n\n\t\t\to(\"ranges before timeRangeDays will be deleted\", async function () {\n\t\t\t\tconst upperBeforeTimeRangeDays = offsetId(-1)\n\t\t\t\tconst lowerBeforeTimeRangeDays = offsetId(-2)\n\t\t\t\tconst mailDetailsBlobId: IdTuple = [\"mailDetailsList\", \"mailDetailsBlobId\"]\n\t\t\t\tawait insertEntity(createTestEntity(MailFolderTypeRef, { _id: [\"mailFolderList\", \"mailFolderId\"], mails: listId }))\n\t\t\t\tawait insertEntity(createTestEntity(MailDetailsBlobTypeRef, { _id: mailDetailsBlobId, details: createTestEntity(MailDetailsTypeRef) }))\n\t\t\t\tawait insertEntity(createTestEntity(MailTypeRef, { _id: [listId, \"anything\"], mailDetails: mailDetailsBlobId }))\n\t\t\t\tawait insertRange(MailTypeRef, listId, lowerBeforeTimeRangeDays, upperBeforeTimeRangeDays)\n\n\t\t\t\t// Here we clear the excluded data\n\t\t\t\tawait storage.clearExcludedData(timeRangeDays, userId)\n\n\t\t\t\tconst allRanges = await dbFacade.all(\"SELECT * FROM ranges\", [])\n\t\t\t\to(allRanges).deepEquals([])\n\t\t\t\tconst allMails = await getAllIdsForType(MailTypeRef)\n\t\t\t\to(allMails).deepEquals([])\n\t\t\t\tconst allBlobDetails = await getAllIdsForType(MailDetailsBlobTypeRef)\n\t\t\t\to(allBlobDetails).deepEquals([])\n\t\t\t})\n\n\t\t\to(\"modified ranges will be shrunk\", async function () {\n\t\t\t\tconst upper = offsetId(2)\n\t\t\t\tconst lower = offsetId(-2)\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailFolderTypeRef, {\n\t\t\t\t\t\t_id: [\"mailFolderList\", \"mailFolderId\"],\n\t\t\t\t\t\tfolderType: MailSetKind.INBOX,\n\t\t\t\t\t\tmails: listId,\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\tawait insertRange(MailTypeRef, listId, lower, upper)\n\n\t\t\t\t// Here we clear the excluded data\n\t\t\t\tawait storage.clearExcludedData(timeRangeDays, userId)\n\n\t\t\t\tconst newRange = await dbFacade.get(\"select * from ranges\", [])\n\t\t\t\to(mapNullable(newRange, untagSqlObject)).deepEquals({ type: mailType, listId, lower: cutoffId, upper })\n\t\t\t})\n\n\t\t\to(\"unmodified ranges will not be deleted or shrunk\", async function () {\n\t\t\t\tconst upper = offsetId(2)\n\t\t\t\tconst lower = offsetId(1)\n\n\t\t\t\tawait insertEntity(createTestEntity(MailFolderTypeRef, { _id: [\"mailFolderList\", \"mailFolderId\"], mails: listId }))\n\t\t\t\tawait insertRange(MailTypeRef, listId, lower, upper)\n\n\t\t\t\t// Here we clear the excluded data\n\t\t\t\tawait storage.clearExcludedData(timeRangeDays, userId)\n\n\t\t\t\tconst newRange = await dbFacade.get(\"select * from ranges\", [])\n\t\t\t\to(mapNullable(newRange, untagSqlObject)).deepEquals({ type: mailType, listId, lower, upper })\n\t\t\t})\n\n\t\t\to(\"complete ranges won't be lost if entities are all newer than cutoff\", async function () {\n\t\t\t\tconst upper = offsetId(2)\n\t\t\t\tconst lower = GENERATED_MIN_ID\n\t\t\t\tconst mail = createTestEntity(MailTypeRef, { _id: [listId, offsetId(1)] })\n\t\t\t\tconst mailFolder = createTestEntity(MailFolderTypeRef, { _id: [\"mailFolderList\", \"folderId\"], mails: listId })\n\t\t\t\tawait insertEntity(mailFolder)\n\t\t\t\tawait insertEntity(mail)\n\t\t\t\tawait insertRange(MailTypeRef, listId, lower, upper)\n\n\t\t\t\t// Here we clear the excluded data\n\t\t\t\tawait storage.clearExcludedData(timeRangeDays, userId)\n\n\t\t\t\tconst newRange = await dbFacade.get(\"select * from ranges\", [])\n\t\t\t\to(mapNullable(newRange, untagSqlObject)).deepEquals({ type: mailType, listId, lower, upper })\n\n\t\t\t\tconst allFolderIds = await getAllIdsForType(MailFolderTypeRef)\n\t\t\t\to(allFolderIds).deepEquals([\"folderId\", spamFolderId, trashFolderId])\n\t\t\t\tconst allMailIds = await getAllIdsForType(MailTypeRef)\n\t\t\t\to(allMailIds).deepEquals([getElementId(mail)])\n\t\t\t})\n\n\t\t\to(\"trash and spam descendants are cleared\", async function () {\n\t\t\t\tconst spamDetailsId: IdTuple = [\"detailsListId\", \"spamDetailsId\"]\n\t\t\t\tconst trashDetailsId: IdTuple = [\"detailsListId\", \"trashDetailsId\"]\n\t\t\t\tconst trashSubfolderDetailsId: IdTuple = [\"detailsListId\", \"trashSubFolderDetailsId\"]\n\n\t\t\t\tconst trashSubfolderId = \"trashSubfolderId\"\n\t\t\t\tconst trashSubfolderListId = \"trashSubfolderListId\"\n\n\t\t\t\tconst spamMailId = offsetId(2)\n\t\t\t\tconst spamMail = createTestEntity(MailTypeRef, { _id: [spamListId, spamMailId], mailDetails: spamDetailsId })\n\t\t\t\tconst trashMailId = offsetId(2)\n\t\t\t\tconst trashMail = createTestEntity(MailTypeRef, { _id: [trashListId, trashMailId], mailDetails: trashDetailsId })\n\t\t\t\tconst trashSubfolderMailId = offsetId(2)\n\t\t\t\tconst trashSubfolderMail = createTestEntity(MailTypeRef, {\n\t\t\t\t\t_id: [trashSubfolderListId, trashSubfolderMailId],\n\t\t\t\t\tmailDetails: trashSubfolderDetailsId,\n\t\t\t\t})\n\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailFolderTypeRef, {\n\t\t\t\t\t\t_id: [\"mailFolderList\", trashSubfolderId],\n\t\t\t\t\t\tparentFolder: [\"mailFolderList\", trashFolderId],\n\t\t\t\t\t\tmails: trashSubfolderListId,\n\t\t\t\t\t\tfolderType: MailSetKind.CUSTOM,\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\tawait insertEntity(spamMail)\n\t\t\t\tawait insertEntity(trashMail)\n\t\t\t\tawait insertEntity(trashSubfolderMail)\n\t\t\t\tawait insertEntity(createTestEntity(MailDetailsBlobTypeRef, { _id: spamDetailsId, details: createTestEntity(MailDetailsTypeRef) }))\n\t\t\t\tawait insertEntity(createTestEntity(MailDetailsBlobTypeRef, { _id: trashDetailsId, details: createTestEntity(MailDetailsTypeRef) }))\n\t\t\t\tawait insertEntity(createTestEntity(MailDetailsBlobTypeRef, { _id: trashSubfolderDetailsId, details: createTestEntity(MailDetailsTypeRef) }))\n\n\t\t\t\t// Here we clear the excluded data\n\t\t\t\tawait storage.clearExcludedData(timeRangeDays, userId)\n\n\t\t\t\tconst allEntities = await dbFacade.all(\"select * from list_entities\", [])\n\t\t\t\to(allEntities.map((r) => r.elementId.value)).deepEquals([spamFolderId, trashFolderId, trashSubfolderId])\n\n\t\t\t\to(await getAllIdsForType(MailFolderTypeRef)).deepEquals([spamFolderId, trashFolderId, trashSubfolderId])\n\t\t\t\to(await getAllIdsForType(MailTypeRef)).deepEquals([])\n\t\t\t\to(await getAllIdsForType(MailDetailsBlobTypeRef)).deepEquals([])\n\t\t\t})\n\n\t\t\to(\"trash and spam are cleared\", async function () {\n\t\t\t\tconst spamDetailsId: IdTuple = [\"detailsListId\", \"spamDetailsId\"]\n\t\t\t\tconst trashDetailsId: IdTuple = [\"detailsListId\", \"trashDetailsId\"]\n\n\t\t\t\tconst spamMailId = offsetId(2)\n\t\t\t\tconst trashMailId = offsetId(2)\n\t\t\t\tconst spamMail = createTestEntity(MailTypeRef, { _id: [spamListId, spamMailId], mailDetails: spamDetailsId })\n\t\t\t\tconst trashMail = createTestEntity(MailTypeRef, { _id: [trashListId, trashMailId], mailDetails: trashDetailsId })\n\n\t\t\t\tawait storage.init({ userId, databaseKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\t\tawait insertEntity(spamMail)\n\t\t\t\tawait insertEntity(trashMail)\n\t\t\t\tawait insertEntity(createTestEntity(MailDetailsBlobTypeRef, { _id: spamDetailsId, details: createTestEntity(MailDetailsTypeRef) }))\n\t\t\t\tawait insertEntity(createTestEntity(MailDetailsBlobTypeRef, { _id: trashDetailsId, details: createTestEntity(MailDetailsTypeRef) }))\n\n\t\t\t\t// Here we clear the excluded data\n\t\t\t\tawait storage.clearExcludedData(timeRangeDays, userId)\n\n\t\t\t\tconst allEntities = await dbFacade.all(\"select * from list_entities\", [])\n\t\t\t\to(allEntities.map((r) => r.elementId.value)).deepEquals([spamFolderId, trashFolderId])\n\n\t\t\t\to(await getAllIdsForType(MailFolderTypeRef)).deepEquals([spamFolderId, trashFolderId])\n\t\t\t\to(await getAllIdsForType(MailTypeRef)).deepEquals([])\n\t\t\t\to(await getAllIdsForType(MailDetailsBlobTypeRef)).deepEquals([])\n\t\t\t})\n\n\t\t\to(\"normal folder is partially cleared\", async function () {\n\t\t\t\tconst beforeMailDetailsId: IdTuple = [\"detailsListId\", \"beforeDetailsId\"]\n\t\t\t\tconst afterMailDetailsId: IdTuple = [\"detailsListId\", \"afterDetailsId\"]\n\n\t\t\t\tconst inboxMailList = \"inboxMailList\"\n\n\t\t\t\tconst mailBefore = createTestEntity(MailTypeRef, { _id: [inboxMailList, offsetId(-2)], mailDetails: beforeMailDetailsId })\n\t\t\t\tconst mailAfter = createTestEntity(MailTypeRef, { _id: [inboxMailList, offsetId(2)], mailDetails: afterMailDetailsId })\n\t\t\t\tconst beforeMailDetails = createTestEntity(MailDetailsBlobTypeRef, { _id: beforeMailDetailsId, details: createTestEntity(MailDetailsTypeRef) })\n\t\t\t\tconst afterMailDetails = createTestEntity(MailDetailsBlobTypeRef, { _id: afterMailDetailsId, details: createTestEntity(MailDetailsTypeRef) })\n\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailFolderTypeRef, { _id: [\"mailFolderList\", \"folderId\"], mails: inboxMailList, folderType: MailSetKind.INBOX }),\n\t\t\t\t)\n\t\t\t\tawait insertEntity(mailBefore)\n\t\t\t\tawait insertEntity(mailAfter)\n\t\t\t\tawait insertEntity(beforeMailDetails)\n\t\t\t\tawait insertEntity(afterMailDetails)\n\n\t\t\t\t// Here we clear the excluded data\n\t\t\t\tawait storage.clearExcludedData(timeRangeDays, userId)\n\n\t\t\t\tconst allMailIds = await getAllIdsForType(MailTypeRef)\n\t\t\t\to(allMailIds).deepEquals([getElementId(mailAfter)])\n\t\t\t\tconst allMailDetailsIds = await getAllIdsForType(MailDetailsBlobTypeRef)\n\t\t\t\to(allMailDetailsIds).deepEquals([getElementId(afterMailDetails)])\n\t\t\t})\n\n\t\t\to(\"normal folder is completely cleared\", async function () {\n\t\t\t\tconst mailDetailsId1: IdTuple = [\"detailsListId\", \"mailDetailsId1\"]\n\t\t\t\tconst mailDetailsId2: IdTuple = [\"detailsListId\", \"mailDetailsId2\"]\n\n\t\t\t\tconst inboxMailList = \"inboxMailList\"\n\n\t\t\t\tconst mail1 = createTestEntity(MailTypeRef, { _id: [inboxMailList, offsetId(-2)], mailDetails: mailDetailsId1 })\n\t\t\t\tconst mail2 = createTestEntity(MailTypeRef, { _id: [inboxMailList, offsetId(-3)], mailDetails: mailDetailsId2 })\n\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailFolderTypeRef, { _id: [\"mailFolderList\", \"folderId\"], mails: inboxMailList, folderType: MailSetKind.INBOX }),\n\t\t\t\t)\n\t\t\t\tawait insertEntity(mail1)\n\t\t\t\tawait insertEntity(mail2)\n\t\t\t\tawait insertEntity(createTestEntity(MailDetailsBlobTypeRef, { _id: mailDetailsId1, details: createTestEntity(MailDetailsTypeRef) }))\n\t\t\t\tawait insertEntity(createTestEntity(MailDetailsBlobTypeRef, { _id: mailDetailsId2, details: createTestEntity(MailDetailsTypeRef) }))\n\n\t\t\t\t// Here we clear the excluded data\n\t\t\t\tawait storage.clearExcludedData(timeRangeDays, userId)\n\n\t\t\t\to(await getAllIdsForType(MailTypeRef)).deepEquals([])\n\t\t\t\to(await getAllIdsForType(MailDetailsBlobTypeRef)).deepEquals([])\n\t\t\t})\n\n\t\t\to(\"when mail is deleted, attachment is also deleted\", async function () {\n\t\t\t\tconst inboxMailList = \"inboxMailList\"\n\t\t\t\tconst beforeMailDetailsId: IdTuple = [\"detailsListId\", \"beforeDetailsId\"]\n\t\t\t\tconst afterMailDetailsId: IdTuple = [\"detailsListId\", \"afterDetailsId\"]\n\t\t\t\tconst fileListId = \"fileListId\"\n\n\t\t\t\tconst fileBefore = createTestEntity(FileTypeRef, { _id: [fileListId, \"fileBefore\"] })\n\t\t\t\tconst fileAfter = createTestEntity(FileTypeRef, { _id: [fileListId, \"fileAfter\"] })\n\t\t\t\tconst mailBefore = createTestEntity(MailTypeRef, {\n\t\t\t\t\t_id: [inboxMailList, offsetId(-2)],\n\t\t\t\t\tmailDetails: beforeMailDetailsId,\n\t\t\t\t\tattachments: [fileBefore._id],\n\t\t\t\t})\n\t\t\t\tconst mailAfter = createTestEntity(MailTypeRef, {\n\t\t\t\t\t_id: [inboxMailList, offsetId(2)],\n\t\t\t\t\tmailDetails: afterMailDetailsId,\n\t\t\t\t\tattachments: [fileAfter._id],\n\t\t\t\t})\n\n\t\t\t\tawait insertEntity(\n\t\t\t\t\tcreateTestEntity(MailFolderTypeRef, { _id: [\"mailFolderList\", \"folderId\"], mails: inboxMailList, folderType: MailSetKind.INBOX }),\n\t\t\t\t)\n\t\t\t\tawait insertEntity(mailBefore)\n\t\t\t\tawait insertEntity(mailAfter)\n\t\t\t\tawait insertEntity(fileBefore)\n\t\t\t\tawait insertEntity(fileAfter)\n\t\t\t\tawait insertEntity(createTestEntity(MailDetailsBlobTypeRef, { _id: beforeMailDetailsId }))\n\t\t\t\tawait insertEntity(createTestEntity(MailDetailsBlobTypeRef, { _id: afterMailDetailsId }))\n\n\t\t\t\t// Here we clear the excluded data\n\t\t\t\tawait storage.clearExcludedData(timeRangeDays, userId)\n\n\t\t\t\to(await getAllIdsForType(MailTypeRef)).deepEquals([getElementId(mailAfter)])\n\t\t\t\to(await getAllIdsForType(FileTypeRef)).deepEquals([getElementId(fileAfter)])\n\t\t\t})\n\t\t})\n\t})\n\n\to.spec(\"Integration test\", function () {\n\t\tfunction createMailList(numMails, listId, idGenerator, getSubject, getBody): { mails: Array<Mail>; mailDetailsBlobs: Array<MailDetailsBlob> } {\n\t\t\tconst mails: Array<Mail> = []\n\t\t\tconst mailDetailsBlobs: Array<MailDetailsBlob> = []\n\t\t\tfor (let i = 0; i < numMails; ++i) {\n\t\t\t\tconst mailId = idGenerator.getNext()\n\t\t\t\tconst mailDetailsId = idGenerator.getNext()\n\t\t\t\tmails.push(\n\t\t\t\t\tcreateTestEntity(MailTypeRef, {\n\t\t\t\t\t\t_id: [listId, mailId],\n\t\t\t\t\t\tsubject: getSubject(i),\n\t\t\t\t\t\tmailDetails: [\"detailsListId\", mailDetailsId],\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\tmailDetailsBlobs.push(\n\t\t\t\t\tcreateTestEntity(MailDetailsBlobTypeRef, {\n\t\t\t\t\t\t_id: [\"detailsListId\", mailDetailsId],\n\t\t\t\t\t\tdetails: createTestEntity(MailDetailsTypeRef, {\n\t\t\t\t\t\t\t_id: mailDetailsId,\n\t\t\t\t\t\t\tbody: createTestEntity(BodyTypeRef, { text: getBody(i) }),\n\t\t\t\t\t\t}),\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn { mails, mailDetailsBlobs: mailDetailsBlobs }\n\t\t}\n\n\t\to(\"cleanup works as expected\", async function () {\n\t\t\t// Time range is five days\n\t\t\tconst oldIds = new IdGenerator(offsetId(-5))\n\t\t\tconst newIds = new IdGenerator(offsetId(5))\n\n\t\t\tconst userMailbox = createTestEntity(MailBoxTypeRef, {\n\t\t\t\t_id: \"mailboxId\",\n\t\t\t\tcurrentMailBag: null,\n\t\t\t\tfolders: createMailFolderRef({ folders: \"mailFolderList\" }),\n\t\t\t})\n\n\t\t\tconst inboxListId = oldIds.getNext()\n\t\t\tconst inboxFolder = createTestEntity(MailFolderTypeRef, {\n\t\t\t\t_id: [\"mailFolderList\", oldIds.getNext()],\n\t\t\t\tmails: inboxListId,\n\t\t\t\tfolderType: MailSetKind.INBOX,\n\t\t\t})\n\t\t\tconst { mails: oldInboxMails, mailDetailsBlobs: oldInboxMailDetailsBlobs } = createMailList(\n\t\t\t\t3,\n\t\t\t\tinboxListId,\n\t\t\t\toldIds,\n\t\t\t\t(i) => `old subject ${i}`,\n\t\t\t\t(i) => `old body ${i}`,\n\t\t\t)\n\n\t\t\tconst { mails: newInboxMails, mailDetailsBlobs: newInboxMailDetailsBlobs } = createMailList(\n\t\t\t\t3,\n\t\t\t\tinboxListId,\n\t\t\t\tnewIds,\n\t\t\t\t(i) => `new subject ${i}`,\n\t\t\t\t(i) => `new body ${i}`,\n\t\t\t)\n\n\t\t\tconst trashListId = oldIds.getNext()\n\t\t\tconst trashFolder = createTestEntity(MailFolderTypeRef, {\n\t\t\t\t_id: [\"mailFolderList\", oldIds.getNext()],\n\t\t\t\tmails: trashListId,\n\t\t\t\tfolderType: MailSetKind.TRASH,\n\t\t\t})\n\t\t\tconst { mails: trashMails, mailDetailsBlobs: trashMailDetailsBlobs } = createMailList(\n\t\t\t\t3,\n\t\t\t\ttrashListId,\n\t\t\t\tnewIds,\n\t\t\t\t(i) => `trash subject ${i}`,\n\t\t\t\t(i) => `trash body ${i}`,\n\t\t\t)\n\n\t\t\tconst spamListId = oldIds.getNext()\n\t\t\tconst spamFolder = createTestEntity(MailFolderTypeRef, {\n\t\t\t\t_id: [\"mailFolderList\", oldIds.getNext()],\n\t\t\t\tmails: spamListId,\n\t\t\t\tfolderType: MailSetKind.SPAM,\n\t\t\t})\n\n\t\t\tconst everyEntity = [\n\t\t\t\tuserMailbox,\n\t\t\t\tinboxFolder,\n\t\t\t\ttrashFolder,\n\t\t\t\tspamFolder,\n\t\t\t\t...oldInboxMails,\n\t\t\t\t...oldInboxMailDetailsBlobs,\n\t\t\t\t...newInboxMails,\n\t\t\t\t...newInboxMailDetailsBlobs,\n\t\t\t\t...trashMails,\n\t\t\t\t...trashMailDetailsBlobs,\n\t\t\t]\n\n\t\t\tawait storage.init({ userId, databaseKey: offlineDatabaseTestKey, timeRangeDays, forceNewDatabase: false })\n\n\t\t\tfor (let entity of everyEntity) {\n\t\t\t\tawait storage.put(entity)\n\t\t\t}\n\n\t\t\tawait storage.setNewRangeForList(MailTypeRef, inboxListId, getFirstOrThrow(oldInboxMails)._id[1], lastThrow(newInboxMails)._id[1])\n\t\t\tawait storage.setNewRangeForList(MailTypeRef, trashListId, getFirstOrThrow(trashMails)._id[1], lastThrow(trashMails)._id[1])\n\n\t\t\t// Here we clear the excluded data\n\t\t\tawait storage.clearExcludedData(timeRangeDays, userId)\n\n\t\t\tconst assertContents = async ({ _id, _type }, expected, msg) => {\n\t\t\t\tconst { listId, elementId } = expandId(_id)\n\t\t\t\treturn o(await storage.get(_type, listId, elementId)).deepEquals(expected)(msg)\n\t\t\t}\n\n\t\t\tawait promiseMap(oldInboxMails, (mail) => assertContents(mail, null, `old mail ${mail._id} was deleted`))\n\t\t\tawait promiseMap(oldInboxMailDetailsBlobs, (body) => assertContents(body, null, `old mailBody ${body._id} was deleted`))\n\n\t\t\tawait promiseMap(newInboxMails, (mail) => assertContents(mail, mail, `new mail ${mail._id} was not deleted`))\n\t\t\tawait promiseMap(newInboxMailDetailsBlobs, (body) => assertContents(body, body, `new mailBody ${body._id} was not deleted`))\n\n\t\t\t// All of trash should be cleared, even though the ids are old\n\t\t\tawait promiseMap(trashMails, (mail) => assertContents(mail, null, `trash mail ${mail._id} was deleted`))\n\t\t\tawait promiseMap(trashMailDetailsBlobs, (body) => assertContents(body, null, `trash mailBody ${body._id} was deleted`))\n\n\t\t\tawait assertContents(inboxFolder, inboxFolder, `inbox folder was not deleted`)\n\t\t\tawait assertContents(trashFolder, trashFolder, `trash folder was not deleted`)\n\n\t\t\to(await storage.getRangeForList(MailTypeRef, inboxListId)).deepEquals({\n\t\t\t\tlower: cutoffId,\n\t\t\t\tupper: lastThrow(newInboxMails)._id[1],\n\t\t\t})(\"lower range for inbox was set to cutoff\")\n\t\t\to(await storage.getRangeForList(MailTypeRef, trashListId)).equals(null)(\"range for trash was deleted\")\n\t\t})\n\t})\n})\n"],"mappings":"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"}