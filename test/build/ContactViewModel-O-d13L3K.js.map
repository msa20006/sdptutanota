{"version":3,"file":"ContactViewModel-O-d13L3K.js","names":["contactModel: ContactModel","entityClient: EntityClient","eventController: EventController","router: Router","updateUi: () => unknown","_listId: Id","elementId: Id","contactListId?: Id","contactId: Id","sorting: boolean"],"sources":["../../src/mail-app/contacts/view/ContactViewModel.ts"],"sourcesContent":["import { ContactModel } from \"../../../common/contactsFunctionality/ContactModel.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { EntityEventsListener, EventController } from \"../../../common/api/main/EventController.js\"\nimport { ListElementListModel } from \"../../../common/misc/ListElementListModel.js\"\nimport { Contact, ContactTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { compareContacts } from \"./ContactGuiUtils.js\"\nimport { ListState } from \"../../../common/gui/base/List.js\"\nimport { assertNotNull, lazyMemoized } from \"@tutao/tutanota-utils\"\nimport { getElementId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport Stream from \"mithril/stream\"\nimport { Router } from \"../../../common/gui/ScopedRouter.js\"\nimport { isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { ListAutoSelectBehavior } from \"../../../common/misc/DeviceConfig.js\"\n\n/** ViewModel for the overall contact view. */\nexport class ContactViewModel {\n\tcontactListId!: Id\n\t/** id of the contact we are trying to load based on the url */\n\tprivate targetContactId: Id | null = null\n\tsortByFirstName: boolean = true\n\tprivate listModelStateStream: Stream<unknown> | null = null\n\n\tconstructor(\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly router: Router,\n\t\tprivate readonly updateUi: () => unknown,\n\t) {}\n\n\treadonly listModel: ListElementListModel<Contact> = new ListElementListModel<Contact>({\n\t\tfetch: async () => {\n\t\t\tconst items = await this.entityClient.loadAll(ContactTypeRef, this.contactListId)\n\t\t\treturn { items, complete: true }\n\t\t},\n\t\tloadSingle: async (_listId: Id, elementId: Id) => {\n\t\t\tconst listId = await this.contactModel.getContactListId()\n\t\t\tif (listId == null) return null\n\t\t\treturn this.entityClient.load(ContactTypeRef, [listId, elementId])\n\t\t},\n\t\tsortCompare: (c1, c2) => compareContacts(c1, c2, this.sortByFirstName),\n\t\tautoSelectBehavior: () => ListAutoSelectBehavior.NONE,\n\t})\n\n\tasync init(contactListId?: Id) {\n\t\t// update url if the view was just opened\n\t\tif (contactListId == null) this.updateUrl()\n\t\tif (this.contactListId) return\n\n\t\tthis.contactListId = assertNotNull(await this.contactModel.getContactListId(), \"not available for external users\")\n\n\t\tthis.initOnce()\n\t\tawait this.listModel.loadInitial()\n\t}\n\n\tasync selectContact(contactId: Id) {\n\t\t// We are loading all contacts at once anyway so we are not worried about starting parallel loads for target\n\t\tawait this.loadAndSelect(contactId)\n\t}\n\n\tprivate readonly initOnce = lazyMemoized(() => {\n\t\tthis.eventController.addEntityListener(this.entityListener)\n\t\tthis.listModelStateStream = this.listModel.stateStream.map(() => {\n\t\t\tthis.updateUi()\n\t\t\tthis.updateUrl()\n\t\t})\n\t})\n\n\tprivate updateUrl() {\n\t\tconst contactId =\n\t\t\tthis.targetContactId ??\n\t\t\t(!this.listModel.state.inMultiselect && this.listModel.getSelectedAsArray().length === 1\n\t\t\t\t? getElementId(this.listModel.getSelectedAsArray()[0])\n\t\t\t\t: null)\n\t\tif (contactId) {\n\t\t\tthis.router.routeTo(`/contact/:listId/:contactId`, { listId: this.contactListId, contactId: contactId })\n\t\t} else {\n\t\t\tthis.router.routeTo(`/contact/:listId`, { listId: this.contactListId })\n\t\t}\n\t}\n\n\tprivate readonly entityListener: EntityEventsListener = async (updates) => {\n\t\tfor (const update of updates) {\n\t\t\tconst { instanceListId, instanceId, operation } = update\n\t\t\tif (isUpdateForTypeRef(ContactTypeRef, update) && instanceListId === this.contactListId) {\n\t\t\t\tawait this.listModel.entityEventReceived(instanceListId, instanceId, operation)\n\t\t\t}\n\t\t}\n\t}\n\n\tasync loadAndSelect(contactId: Id) {\n\t\tconst listId = this.contactListId\n\t\tthis.targetContactId = contactId\n\n\t\tawait this.listModel.loadAndSelect(contactId, () => this.contactListId !== listId && this.targetContactId === contactId)\n\t\t// if we reached the goal and the target wasn't swapped in between\n\t\tif (this.targetContactId === contactId) {\n\t\t\tthis.targetContactId = null\n\t\t}\n\t}\n\n\tsetSortByFirstName(sorting: boolean) {\n\t\tthis.sortByFirstName = sorting\n\t\tthis.listModel.sort()\n\t}\n\n\tlistState(): ListState<Contact> {\n\t\treturn this.listModel.state\n\t}\n\n\tdispose() {\n\t\tthis.eventController.removeEntityListener(this.entityListener)\n\t\tthis.listModelStateStream?.end(true)\n\t\tthis.listModelStateStream = null\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAea,mBAAN,MAAuB;CAC7B;;CAEA,AAAQ,kBAA6B;CACrC,kBAA2B;CAC3B,AAAQ,uBAA+C;CAEvD,YACkBA,cACAC,cACAC,iBACAC,QACAC,UAChB;EAwFF,KA7FkB;EA6FjB,KA5FiB;EA4FhB,KA3FgB;EA2Ff,KA1Fe;EA0Fd,KAzFc;CACd;CAEJ,AAAS,YAA2C,IAAI,qBAA8B;EACrF,OAAO,YAAY;GAClB,MAAM,QAAQ,MAAM,KAAK,aAAa,QAAQ,gBAAgB,KAAK,cAAc;AACjF,UAAO;IAAE;IAAO,UAAU;GAAM;EAChC;EACD,YAAY,OAAOC,SAAaC,cAAkB;GACjD,MAAM,SAAS,MAAM,KAAK,aAAa,kBAAkB;AACzD,OAAI,UAAU,KAAM,QAAO;AAC3B,UAAO,KAAK,aAAa,KAAK,gBAAgB,CAAC,QAAQ,SAAU,EAAC;EAClE;EACD,aAAa,CAAC,IAAI,OAAO,gBAAgB,IAAI,IAAI,KAAK,gBAAgB;EACtE,oBAAoB,MAAM,uBAAuB;CACjD;CAED,MAAM,KAAKC,eAAoB;AAE9B,MAAI,iBAAiB,KAAM,MAAK,WAAW;AAC3C,MAAI,KAAK,cAAe;AAExB,OAAK,gBAAgB,cAAc,MAAM,KAAK,aAAa,kBAAkB,EAAE,mCAAmC;AAElH,OAAK,UAAU;AACf,QAAM,KAAK,UAAU,aAAa;CAClC;CAED,MAAM,cAAcC,WAAe;AAElC,QAAM,KAAK,cAAc,UAAU;CACnC;CAED,AAAiB,WAAW,aAAa,MAAM;AAC9C,OAAK,gBAAgB,kBAAkB,KAAK,eAAe;AAC3D,OAAK,uBAAuB,KAAK,UAAU,YAAY,IAAI,MAAM;AAChE,QAAK,UAAU;AACf,QAAK,WAAW;EAChB,EAAC;CACF,EAAC;CAEF,AAAQ,YAAY;EACnB,MAAM,YACL,KAAK,qBACH,KAAK,UAAU,MAAM,iBAAiB,KAAK,UAAU,oBAAoB,CAAC,WAAW,IACpF,aAAa,KAAK,UAAU,oBAAoB,CAAC,GAAG,GACpD;AACJ,MAAI,UACH,MAAK,OAAO,SAAS,8BAA8B;GAAE,QAAQ,KAAK;GAA0B;EAAW,EAAC;IAExG,MAAK,OAAO,SAAS,mBAAmB,EAAE,QAAQ,KAAK,cAAe,EAAC;CAExE;CAED,AAAiB,iBAAuC,OAAO,YAAY;AAC1E,OAAK,MAAM,UAAU,SAAS;GAC7B,MAAM,EAAE,gBAAgB,YAAY,WAAW,GAAG;AAClD,OAAI,mBAAmB,gBAAgB,OAAO,IAAI,mBAAmB,KAAK,cACzE,OAAM,KAAK,UAAU,oBAAoB,gBAAgB,YAAY,UAAU;EAEhF;CACD;CAED,MAAM,cAAcA,WAAe;EAClC,MAAM,SAAS,KAAK;AACpB,OAAK,kBAAkB;AAEvB,QAAM,KAAK,UAAU,cAAc,WAAW,MAAM,KAAK,kBAAkB,UAAU,KAAK,oBAAoB,UAAU;AAExH,MAAI,KAAK,oBAAoB,UAC5B,MAAK,kBAAkB;CAExB;CAED,mBAAmBC,SAAkB;AACpC,OAAK,kBAAkB;AACvB,OAAK,UAAU,MAAM;CACrB;CAED,YAAgC;AAC/B,SAAO,KAAK,UAAU;CACtB;CAED,UAAU;AACT,OAAK,gBAAgB,qBAAqB,KAAK,eAAe;AAC9D,OAAK,sBAAsB,IAAI,KAAK;AACpC,OAAK,uBAAuB;CAC5B;AACD"}