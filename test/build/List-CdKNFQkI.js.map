{"version":3,"file":"List-CdKNFQkI.js","names":["touchArea: HTMLElement","e: TouchEvent","xDelta: number","yDelta: number","delta: { x: number; y: number }","e: any","multiselectMode: MultiselectMode","callbacks: () => ListSelectionCallbacks | null","touchArea: HTMLElement","config: {\n\t\t\tdomSwipeSpacerLeft: () => HTMLElement\n\t\t\tdomSwipeSpacerRight: () => HTMLElement\n\t\t\twidth: () => number\n\t\t\tgetRowForPosition: (clientCoordinates: Coordinate2D) => ListRow<ElementType, VH> | null\n\t\t\tonSwipeLeft: (entity: ElementType) => Promise<ListSwipeDecision>\n\t\t\tonSwipeRight: (entity: ElementType) => Promise<ListSwipeDecision>\n\t\t}","xDelta: number","yDelta: number","delta: { x: number; y: number }","virtualElement: ListRow<ElementType, VH>","entity: ElementType","delta: {\n\t\t\tx: number\n\t\t\ty: number\n\t\t}","swipeDecision: ListSwipeDecision","clientCoordiante: Coordinate2D","dom: HTMLElement","attrs: ListAttrs<T, VH>","rows: ListRow<T, VH>[]","vnode: VnodeDOM","domElement: HTMLElement","row: ListRow<T, VH>","touchStartTime: number | null","focusType: \"focus\" | \"blur\"","e: FocusEvent","e: DragEvent","timeoutId: TimeoutID | null","touchStartCoords: { x: number; y: number } | null","e: TouchEvent","clickedEntity: T","event: TouchEvent | MouseEvent | KeyboardEvent","changeType: Parameters<typeof this.changeSelection>[1]","changeType: \"single\" | \"togglingIncludingSingle\" | \"range\"","status: ListLoadingState","visibleElementsHeight: number","containerDom: HTMLElement"],"sources":["../../src/common/gui/base/SwipeHandler.ts","../../src/common/gui/base/ListUtils.ts","../../src/common/gui/base/ListSwipeHandler.ts","../../src/common/gui/base/List.ts"],"sourcesContent":["import { size } from \"../size\"\n\nexport const enum DirectionLock {\n\tHorizontal,\n\tVertical,\n}\n\nexport interface Coordinate2D {\n\tx: number\n\ty: number\n}\n\n/* Tool to detect swipe gestures on certain elements. */\nexport class SwipeHandler {\n\t/** uses clientX/clientY thus relative to view port */\n\tstartPos: Coordinate2D\n\ttouchArea: HTMLElement\n\tanimating: Promise<unknown>\n\tisAnimating: boolean = false\n\tdirectionLock: DirectionLock | null\n\n\tconstructor(touchArea: HTMLElement) {\n\t\tthis.startPos = {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t}\n\t\tthis.touchArea = touchArea\n\t\tthis.animating = Promise.resolve()\n\t\tthis.directionLock = null\n\t}\n\n\tattach() {\n\t\tthis.touchArea.addEventListener(\"touchstart\", this.onTouchStart, { passive: true })\n\t\t// does invoke prevent default\n\t\tthis.touchArea.addEventListener(\"touchmove\", this.onTouchMove, { passive: false })\n\t\tthis.touchArea.addEventListener(\"touchend\", this.onTouchEnd, { passive: true })\n\t}\n\n\tdetach() {\n\t\tthis.touchArea.removeEventListener(\"touchstart\", this.onTouchStart)\n\t\tthis.touchArea.removeEventListener(\"touchmove\", this.onTouchMove)\n\t\tthis.touchArea.removeEventListener(\"touchend\", this.onTouchEnd)\n\t}\n\n\tprivate readonly onTouchStart = (e: TouchEvent) => {\n\t\tthis.startPos = {\n\t\t\tx: e.touches[0].clientX,\n\t\t\ty: e.touches[0].clientY,\n\t\t}\n\t}\n\n\tprivate readonly onTouchMove = (e: TouchEvent) => {\n\t\tlet { x, y } = this.getDelta(e)\n\n\t\t// If we're either locked horizontally OR if we're not locked vertically but would like to lock horizontally, then lock horizontally\n\t\tif (\n\t\t\tthis.directionLock === DirectionLock.Horizontal ||\n\t\t\t(this.directionLock !== DirectionLock.Vertical && Math.abs(x) > Math.abs(y) && Math.abs(x) > 14)\n\t\t) {\n\t\t\tthis.directionLock = DirectionLock.Horizontal\n\t\t\t// Do not scroll the list\n\t\t\te.preventDefault()\n\n\t\t\tif (!this.isAnimating) {\n\t\t\t\tthis.onHorizontalDrag(x, y)\n\t\t\t} // If we don't have a vertical lock yet but we would like to have it, lock vertically\n\t\t} else if (this.directionLock !== DirectionLock.Vertical && Math.abs(y) > Math.abs(x) && Math.abs(y) > size.list_row_height) {\n\t\t\tthis.directionLock = DirectionLock.Vertical\n\n\t\t\tif (!this.isAnimating) {\n\t\t\t\t// Reset the row\n\t\t\t\twindow.requestAnimationFrame(() => {\n\t\t\t\t\tif (!this.isAnimating) {\n\t\t\t\t\t\tthis.reset({\n\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate readonly onTouchEnd = (e: TouchEvent) => {\n\t\tthis.gestureEnd(e)\n\t}\n\n\tprivate gestureEnd(e: TouchEvent) {\n\t\tconst delta = this.getDelta(e)\n\n\t\tif (!this.isAnimating && this.directionLock === DirectionLock.Horizontal) {\n\t\t\t// Gesture is completed\n\t\t\tthis.animating = this.onHorizontalGestureCompleted(delta)\n\t\t\tthis.isAnimating = true\n\t\t} else if (!this.isAnimating) {\n\t\t\t// Gesture is not completed, reset row\n\t\t\tthis.animating = this.reset(delta)\n\t\t\tthis.isAnimating = true\n\t\t}\n\n\t\tthis.animating.then(() => (this.isAnimating = false))\n\t\tthis.directionLock = null\n\t}\n\n\tonHorizontalDrag(xDelta: number, yDelta: number) {\n\t\t// noOp\n\t}\n\n\tonHorizontalGestureCompleted(delta: { x: number; y: number }): Promise<unknown> {\n\t\t// noOp\n\t\treturn Promise.resolve()\n\t}\n\n\treset(delta: { x: number; y: number }): Promise<unknown> {\n\t\treturn Promise.resolve()\n\t}\n\n\tgetDelta(e: any): {\n\t\tx: number\n\t\ty: number\n\t} {\n\t\treturn {\n\t\t\tx: e.changedTouches[0].clientX - this.startPos.x,\n\t\t\ty: e.changedTouches[0].clientY - this.startPos.y,\n\t\t}\n\t}\n}\n","import { ListElement } from \"../../api/common/utils/EntityUtils.js\"\nimport { Shortcut } from \"../../misc/KeyManager.js\"\nimport { Keys } from \"../../api/common/TutanotaConstants.js\"\nimport { mapLazily } from \"@tutao/tutanota-utils\"\nimport { ListState, MultiselectMode } from \"./List.js\"\nimport { Children } from \"mithril\"\nimport { isBrowser } from \"../../api/common/Env.js\"\nimport { ListElementListModel } from \"../../misc/ListElementListModel\"\n\nexport const ACTION_DISTANCE = 150\nexport const PageSize = 100\n\n/**\n * 1:1 mapping to DOM elements. Displays a single list entry.\n */\nexport interface VirtualRow<ElementType> {\n\trender(): Children\n\n\tupdate(listEntry: ElementType, selected: boolean, isInMultiSelect: boolean): void\n\n\tentity: ElementType | null\n\ttop: number\n\tdomElement: HTMLElement | null\n}\n\nexport interface ListFetchResult<ElementType> {\n\titems: Array<ElementType>\n\t/** Complete means that we loaded the whole list and additional requests will not yield any results. */\n\tcomplete: boolean\n}\n\nexport type ListSelectionCallbacks = Pick<ListElementListModel<ListElement>, \"selectPrevious\" | \"selectNext\" | \"areAllSelected\" | \"selectAll\" | \"selectNone\">\n\nexport function listSelectionKeyboardShortcuts(multiselectMode: MultiselectMode, callbacks: () => ListSelectionCallbacks | null): Array<Shortcut> {\n\tconst multiselectionEnabled = multiselectMode == MultiselectMode.Enabled ? () => true : () => false\n\treturn [\n\t\t{\n\t\t\tkey: Keys.UP,\n\t\t\texec: mapLazily(callbacks, (list) => list?.selectPrevious(false)),\n\t\t\thelp: \"selectPrevious_action\",\n\t\t},\n\t\t{\n\t\t\tkey: Keys.K,\n\t\t\texec: mapLazily(callbacks, (list) => list?.selectPrevious(false)),\n\t\t\thelp: \"selectPrevious_action\",\n\t\t},\n\t\t{\n\t\t\tkey: Keys.UP,\n\t\t\tshift: true,\n\t\t\texec: mapLazily(callbacks, (list) => list?.selectPrevious(true)),\n\t\t\thelp: \"addPrevious_action\",\n\t\t\tenabled: multiselectionEnabled,\n\t\t},\n\t\t{\n\t\t\tkey: Keys.K,\n\t\t\tshift: true,\n\t\t\texec: mapLazily(callbacks, (list) => list?.selectPrevious(true)),\n\t\t\thelp: \"addPrevious_action\",\n\t\t\tenabled: multiselectionEnabled,\n\t\t},\n\t\t{\n\t\t\tkey: Keys.DOWN,\n\t\t\texec: mapLazily(callbacks, (list) => list?.selectNext(false)),\n\t\t\thelp: \"selectNext_action\",\n\t\t},\n\t\t{\n\t\t\tkey: Keys.J,\n\t\t\texec: mapLazily(callbacks, (list) => list?.selectNext(false)),\n\t\t\thelp: \"selectNext_action\",\n\t\t},\n\t\t{\n\t\t\tkey: Keys.DOWN,\n\t\t\tshift: true,\n\t\t\texec: mapLazily(callbacks, (list) => list?.selectNext(true)),\n\t\t\thelp: \"addNext_action\",\n\t\t\tenabled: multiselectionEnabled,\n\t\t},\n\t\t{\n\t\t\tkey: Keys.J,\n\t\t\tshift: true,\n\t\t\texec: mapLazily(callbacks, (list) => list?.selectNext(true)),\n\t\t\thelp: \"addNext_action\",\n\t\t\tenabled: multiselectionEnabled,\n\t\t},\n\t\t{\n\t\t\tkey: Keys.A,\n\t\t\tctrlOrCmd: true,\n\t\t\tshift: true,\n\t\t\texec: mapLazily(callbacks, (list) => (list?.areAllSelected() ? list.selectNone() : list?.selectAll())),\n\t\t\thelp: \"selectAllLoaded_action\",\n\t\t\t// this specific shortcut conflicts with a chrome shortcut. it was chosen because it's adjacent to ctrl + A\n\t\t\t// for select all.\n\t\t\tenabled: () => multiselectionEnabled() && !isBrowser(),\n\t\t},\n\t]\n}\n\nexport function onlySingleSelection<T>(state: ListState<T>): T | null {\n\tif (state.selectedItems.size === 1) {\n\t\treturn state.selectedItems.values().next().value\n\t} else {\n\t\treturn null\n\t}\n}\n","import { Coordinate2D, SwipeHandler } from \"./SwipeHandler.js\"\nimport { assertNotNull } from \"@tutao/tutanota-utils\"\nimport { animations, DefaultAnimationTime, opacity, transform, TransformEnum } from \"../animation/Animations.js\"\nimport { ease } from \"../animation/Easing.js\"\nimport { ListRow, ListSwipeDecision, ViewHolder } from \"./List.js\"\nimport { ACTION_DISTANCE } from \"./ListUtils.js\"\n\n/** Detects swipe gestures for list elements. On mobile some lists have actions on swiping, e.g. deleting an email. */\nexport class ListSwipeHandler<ElementType, VH extends ViewHolder<ElementType>> extends SwipeHandler {\n\tprivate virtualElement: ListRow<ElementType, VH> | null = null\n\tprivate xoffset!: number\n\n\tconstructor(\n\t\ttouchArea: HTMLElement,\n\t\tprivate readonly config: {\n\t\t\tdomSwipeSpacerLeft: () => HTMLElement\n\t\t\tdomSwipeSpacerRight: () => HTMLElement\n\t\t\twidth: () => number\n\t\t\tgetRowForPosition: (clientCoordinates: Coordinate2D) => ListRow<ElementType, VH> | null\n\t\t\tonSwipeLeft: (entity: ElementType) => Promise<ListSwipeDecision>\n\t\t\tonSwipeRight: (entity: ElementType) => Promise<ListSwipeDecision>\n\t\t},\n\t) {\n\t\tsuper(touchArea)\n\t}\n\n\tonHorizontalDrag(xDelta: number, yDelta: number) {\n\t\tsuper.onHorizontalDrag(xDelta, yDelta)\n\t\t// get it *before* raf so that we don't pick an element after reset() again\n\t\tconst ve = this.getVirtualElement()\n\t\t// Animate the row with following touch\n\t\twindow.requestAnimationFrame(() => {\n\t\t\t// Do not animate the swipe gesture more than necessary\n\t\t\tthis.xoffset = xDelta < 0 ? Math.max(xDelta, -ACTION_DISTANCE) : Math.min(xDelta, ACTION_DISTANCE)\n\n\t\t\tif (!this.isAnimating && ve && ve.domElement && ve.entity) {\n\t\t\t\tve.domElement.style.transform = `translateX(${this.xoffset}px) translateY(${ve.top}px)`\n\t\t\t\tthis.config.domSwipeSpacerLeft().style.transform = `translateX(${this.xoffset - this.width()}px) translateY(${ve.top}px)`\n\t\t\t\tthis.config.domSwipeSpacerRight().style.transform = `\n\t\t\t\ttranslateX(${this.xoffset + this.width()}px) translateY(${ve.top}px)`\n\t\t\t}\n\t\t})\n\t}\n\n\tonHorizontalGestureCompleted(delta: { x: number; y: number }): Promise<unknown> {\n\t\tif (this.virtualElement && this.virtualElement.entity && Math.abs(delta.x) > ACTION_DISTANCE) {\n\t\t\t// the gesture is completed\n\t\t\treturn this.finish(this.virtualElement, this.virtualElement.entity, delta)\n\t\t} else {\n\t\t\treturn this.reset(delta)\n\t\t}\n\t}\n\n\tprivate async finish(\n\t\tvirtualElement: ListRow<ElementType, VH>,\n\t\tentity: ElementType,\n\t\tdelta: {\n\t\t\tx: number\n\t\t\ty: number\n\t\t},\n\t): Promise<unknown> {\n\t\tif (this.xoffset === 0) {\n\t\t\treturn\n\t\t}\n\t\ttry {\n\t\t\tconst listTargetPosition = this.xoffset < 0 ? -this.width() : this.width()\n\n\t\t\tawait Promise.all([\n\t\t\t\t// animate swipe action to full width\n\t\t\t\tvirtualElement.domElement &&\n\t\t\t\t\tanimations.add(\n\t\t\t\t\t\tvirtualElement.domElement,\n\t\t\t\t\t\ttransform(TransformEnum.TranslateX, this.xoffset, listTargetPosition).chain(\n\t\t\t\t\t\t\tTransformEnum.TranslateY,\n\t\t\t\t\t\t\tvirtualElement.top,\n\t\t\t\t\t\t\tvirtualElement.top,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\teasing: ease.inOut,\n\t\t\t\t\t\t\tduration: DefaultAnimationTime * 2,\n\t\t\t\t\t\t},\n\t\t\t\t\t),\n\t\t\t\tanimations.add(\n\t\t\t\t\tthis.config.domSwipeSpacerLeft(),\n\t\t\t\t\ttransform(TransformEnum.TranslateX, this.xoffset - this.width(), listTargetPosition - this.width()).chain(\n\t\t\t\t\t\tTransformEnum.TranslateY,\n\t\t\t\t\t\tvirtualElement.top,\n\t\t\t\t\t\tvirtualElement.top,\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\teasing: ease.inOut,\n\t\t\t\t\t\tduration: DefaultAnimationTime * 2,\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t\tanimations.add(\n\t\t\t\t\tthis.config.domSwipeSpacerRight(),\n\t\t\t\t\ttransform(TransformEnum.TranslateX, this.xoffset + this.width(), listTargetPosition + this.width()).chain(\n\t\t\t\t\t\tTransformEnum.TranslateY,\n\t\t\t\t\t\tvirtualElement.top,\n\t\t\t\t\t\tvirtualElement.top,\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\teasing: ease.inOut,\n\t\t\t\t\t\tduration: DefaultAnimationTime * 2,\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t])\n\n\t\t\tthis.xoffset = listTargetPosition\n\n\t\t\tlet swipeDecision: ListSwipeDecision\n\t\t\ttry {\n\t\t\t\tif (delta.x < 0) {\n\t\t\t\t\tswipeDecision = await this.config.onSwipeLeft(entity)\n\t\t\t\t} else {\n\t\t\t\t\tswipeDecision = await this.config.onSwipeRight(entity)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(\"rejection in swipe action\", e)\n\t\t\t\tswipeDecision = ListSwipeDecision.Cancel\n\t\t\t}\n\n\t\t\tif (swipeDecision === ListSwipeDecision.Cancel) {\n\t\t\t\tawait this.reset(delta)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// fade out element\n\t\t\tthis.xoffset = 0\n\n\t\t\tif (virtualElement.domElement) {\n\t\t\t\tvirtualElement.domElement.style.transform = `translateX(${this.xoffset}px) translateY(${virtualElement.top}px)`\n\t\t\t}\n\n\t\t\tawait Promise.all([\n\t\t\t\tanimations.add(this.config.domSwipeSpacerLeft(), opacity(1, 0, true)),\n\t\t\t\tanimations.add(this.config.domSwipeSpacerRight(), opacity(1, 0, true)),\n\t\t\t])\n\n\t\t\t// set swipe element to initial configuration\n\t\t\t// with different zoom levels Blink does weird things and shows parts of elements that it shouldn't so we shift them around by a pixel\n\t\t\tthis.config.domSwipeSpacerLeft().style.transform = `translateX(${this.xoffset - this.width() - 1}px) translateY(${virtualElement.top}px)`\n\t\t\tthis.config.domSwipeSpacerRight().style.transform = `translateX(${this.xoffset + this.width() + 1}px) translateY(${virtualElement.top}px)`\n\t\t\tthis.config.domSwipeSpacerRight().style.opacity = \"\"\n\t\t\tthis.config.domSwipeSpacerLeft().style.opacity = \"\"\n\t\t} finally {\n\t\t\tthis.virtualElement = null\n\t\t}\n\t}\n\n\tprivate width() {\n\t\treturn this.config.width()\n\t}\n\n\tprivate getVirtualElement(): ListRow<ElementType, VH> | null {\n\t\tif (!this.virtualElement) {\n\t\t\t// touch coordinates are based on clientX so they are relative to the viewport and we need to adjust them by the position of the list\n\t\t\tthis.virtualElement = this.config.getRowForPosition(this.startPos)\n\t\t}\n\n\t\treturn this.virtualElement\n\t}\n\n\treset(delta: { x: number; y: number }): Promise<unknown> {\n\t\ttry {\n\t\t\tif (this.xoffset !== 0) {\n\t\t\t\tconst ve = this.virtualElement\n\n\t\t\t\tif (ve && ve.domElement && ve.entity) {\n\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\tanimations.add(ve.domElement, transform(TransformEnum.TranslateX, this.xoffset, 0).chain(TransformEnum.TranslateY, ve.top, ve.top), {\n\t\t\t\t\t\t\teasing: ease.inOut,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tanimations.add(\n\t\t\t\t\t\t\tthis.config.domSwipeSpacerLeft(),\n\t\t\t\t\t\t\ttransform(TransformEnum.TranslateX, this.xoffset - this.width(), -this.width()).chain(TransformEnum.TranslateY, ve.top, ve.top),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\teasing: ease.inOut,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t\tanimations.add(\n\t\t\t\t\t\t\tthis.config.domSwipeSpacerRight(),\n\t\t\t\t\t\t\ttransform(TransformEnum.TranslateX, this.xoffset + this.width(), this.width()).chain(TransformEnum.TranslateY, ve.top, ve.top),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\teasing: ease.inOut,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t])\n\t\t\t\t}\n\n\t\t\t\tthis.xoffset = 0\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.virtualElement = null\n\t\t}\n\n\t\treturn Promise.resolve()\n\t}\n}\n","import m, { Children, ClassComponent, Vnode, VnodeDOM } from \"mithril\"\nimport { debounce, memoized, numberRange } from \"@tutao/tutanota-utils\"\nimport { px, size } from \"../size.js\"\nimport { isKeyPressed } from \"../../misc/KeyManager.js\"\nimport { Keys, TabIndex } from \"../../api/common/TutanotaConstants.js\"\nimport { client } from \"../../misc/ClientDetector.js\"\nimport { progressIcon } from \"./Icon.js\"\nimport { Button, ButtonType } from \"./Button.js\"\nimport { ListSwipeHandler } from \"./ListSwipeHandler.js\"\nimport { applySafeAreaInsetMarginLR } from \"../HtmlUtils.js\"\nimport { theme, ThemeId } from \"../theme.js\"\nimport { ProgrammingError } from \"../../api/common/error/ProgrammingError.js\"\nimport { Coordinate2D } from \"./SwipeHandler.js\"\nimport { styles } from \"../styles.js\"\n\nexport type ListState<T> = Readonly<{\n\titems: ReadonlyArray<T>\n\tloadingStatus: ListLoadingState\n\tloadingAll: boolean\n\tselectedItems: ReadonlySet<T>\n\tinMultiselect: boolean\n\tactiveIndex: number | null\n}>\n\nexport enum ListLoadingState {\n\t/** not loading anything */\n\tIdle,\n\tLoading,\n\t/** loading was cancelled, e.g. because of the network error or explicit user request */\n\tConnectionLost,\n\t/** finished loading */\n\tDone,\n}\n\nexport type SwipeConfiguration<T> = {\n\trenderLeftSpacer(): Children\n\trenderRightSpacer(): Children\n\tswipeLeft(element: T): Promise<ListSwipeDecision>\n\tswipeRight(element: T): Promise<ListSwipeDecision>\n}\n\nexport interface ViewHolder<T> {\n\tupdate(item: T, selected: boolean, multiselect: boolean): void\n}\n\nexport interface RenderConfig<T, R extends ViewHolder<T>> {\n\t/** Create a ViewHolder item. This function is responsible for attaching it to the {@param dom}. */\n\tcreateElement: (dom: HTMLElement) => R\n\titemHeight: number\n\tmultiselectionAllowed: MultiselectMode\n\tswipe: SwipeConfiguration<T> | null\n\n\t/**\n\t * add custom drag behaviour to the list.\n\t * @param ev dragstart event\n\t * @param entity: the row the event was started on\n\t * @param selectedElements the currently selected elements\n\t */\n\tdragStart?: (ev: DragEvent, entity: T, selectedElements: ReadonlySet<T>) => void\n}\n\nexport const enum MultiselectMode {\n\tDisabled,\n\tEnabled,\n}\n\nexport const enum ListSwipeDecision {\n\tCancel,\n\tCommit,\n}\n\nexport interface ListAttrs<T, R extends ViewHolder<T>> {\n\t/** will be compared referentially, will update the DOM on change  */\n\tstate: ListState<T>\n\t/** will be compared referentially, will completely reset DOM and state on change */\n\trenderConfig: RenderConfig<T, R>\n\n\t/** called when the end of the list is getting close to the viewport or when \"load more\" button is pressed. */\n\tonLoadMore(): void\n\n\t/** called after the loading failed/cancelled and retry button on progress item was pressed */\n\tonRetryLoading(): void\n\n\t/** A normal selection for single item. */\n\tonSingleSelection(item: T): unknown\n\n\t/** Selection that enters multiselect when triggered. Toggling the selection for the selected item in multiselect deselects it. */\n\tonSingleTogglingMultiselection(item: T): unknown\n\n\t/** called when range selection is extended */\n\tonRangeSelectionTowards(item: T): unknown\n\n\t/** called when stop button was pressed in progress item */\n\tonStopLoading(): unknown\n}\n\nexport interface ListRow<T, R extends ViewHolder<T>> {\n\tentity: T | null\n\trow: R\n\ttop: number\n\tdomElement: HTMLElement\n}\n\nconst ScrollBuffer = 15\n\n/** Displays the items in the virtual list. Can also display progress/cancelled loading state. */\nexport class List<T, VH extends ViewHolder<T>> implements ClassComponent<ListAttrs<T, VH>> {\n\tprivate innerDom: HTMLElement | null = null\n\tprivate containerDom: HTMLElement | null = null\n\tprivate rows: ListRow<T, VH>[] = []\n\tprivate state: ListState<T> | null = null\n\tprivate currentPosition: number = 0\n\tprivate lastAttrs!: ListAttrs<T, VH>\n\tprivate domSwipeSpacerLeft!: HTMLElement\n\tprivate domSwipeSpacerRight!: HTMLElement\n\tprivate loadingIndicatorChildDom!: HTMLElement\n\tprivate swipeHandler!: ListSwipeHandler<T, VH>\n\tprivate width = 0\n\tprivate height = 0\n\t// remember the last time we needed to scroll somewhere\n\tprivate activeIndex: number | null = null\n\tprivate lastThemeId: ThemeId = theme.themeId\n\n\tview({ attrs }: Vnode<ListAttrs<T, VH>>) {\n\t\tconst oldAttrs = this.lastAttrs\n\t\tthis.lastAttrs = attrs\n\t\treturn m(\n\t\t\t\".list-container.overflow-y-scroll.nofocus.overflow-x-hidden.fill-absolute\",\n\t\t\t{\n\t\t\t\t\"data-testid\": \"unordered_list\",\n\t\t\t\toncreate: ({ dom }: VnodeDOM) => {\n\t\t\t\t\tthis.containerDom = dom as HTMLElement\n\n\t\t\t\t\t// Some of the tech-savvy users like to disable *all* \"experimental features\" in their Safari devices and there's also a toggle to disable\n\t\t\t\t\t// ResizeObserver. Since the app works without it anyway we just fall back to not handling the resize events.\n\t\t\t\t\tif (typeof ResizeObserver !== \"undefined\") {\n\t\t\t\t\t\tnew ResizeObserver(() => {\n\t\t\t\t\t\t\tthis.updateSize()\n\t\t\t\t\t\t}).observe(this.containerDom)\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequestAnimationFrame(() => this.updateSize())\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.swipeHandler = this.createSwipeHandler()\n\t\t\t\t},\n\t\t\t\tonscroll: () => {\n\t\t\t\t\tthis.onScroll(attrs)\n\t\t\t\t},\n\t\t\t},\n\t\t\tthis.renderSwipeItems(attrs),\n\t\t\t// we need rel for the status indicator\n\t\t\tm(\"ul.list.rel.click\", {\n\t\t\t\toncreate: ({ dom }) => {\n\t\t\t\t\tthis.innerDom = dom as HTMLElement\n\t\t\t\t\tthis.initializeDom(dom as HTMLElement, attrs)\n\t\t\t\t\tthis.updateDomElements(attrs)\n\t\t\t\t\tthis.state = attrs.state\n\t\t\t\t\tthis.lastThemeId = theme.themeId\n\t\t\t\t\tif (styles.isSingleColumnLayout()) this.innerDom.focus()\n\t\t\t\t},\n\t\t\t\tonupdate: ({ dom }) => {\n\t\t\t\t\tif (oldAttrs.renderConfig !== attrs.renderConfig) {\n\t\t\t\t\t\t// reset everything\n\t\t\t\t\t\tconsole.log(\"list renderConfig has changed, reset\")\n\t\t\t\t\t\t// m.render actually does diffing if you call it on the same dom element again which is not something that we want, we want completely\n\t\t\t\t\t\t// new dom elements (at least that's the simplest and most reliable way to reset).\n\t\t\t\t\t\t// so we trick mithril into thinking that nothing was rendered before. mithril will reset the DOM for us too.\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tdom.vnodes = null\n\t\t\t\t\t\tthis.initializeDom(dom as HTMLElement, attrs)\n\t\t\t\t\t}\n\t\t\t\t\t// if the state has changed or the theme has changed we need to update the DOM\n\t\t\t\t\tif (this.state !== attrs.state || this.lastThemeId !== theme.themeId) {\n\t\t\t\t\t\tthis.updateDomElements(attrs)\n\t\t\t\t\t\tthis.state = attrs.state\n\t\t\t\t\t}\n\t\t\t\t\tthis.lastThemeId = theme.themeId\n\t\t\t\t},\n\t\t\t\tonscroll: () => {\n\t\t\t\t\tattrs.onLoadMore()\n\t\t\t\t},\n\t\t\t}),\n\t\t)\n\t}\n\n\tprivate createSwipeHandler() {\n\t\treturn new ListSwipeHandler<T, VH>(this.containerDom!, {\n\t\t\twidth: () => this.width,\n\t\t\tdomSwipeSpacerLeft: () => this.domSwipeSpacerLeft,\n\t\t\tdomSwipeSpacerRight: () => this.domSwipeSpacerRight,\n\t\t\tgetRowForPosition: (coord) => this.getRowForPosition(coord),\n\t\t\tonSwipeLeft: async (el) => this.lastAttrs.renderConfig.swipe?.swipeLeft(el) ?? ListSwipeDecision.Cancel,\n\t\t\tonSwipeRight: async (el) => this.lastAttrs.renderConfig.swipe?.swipeRight(el) ?? ListSwipeDecision.Cancel,\n\t\t})\n\t}\n\n\tprivate getRowForPosition(clientCoordiante: Coordinate2D) {\n\t\tconst touchAreaOffset = this.containerDom!.getBoundingClientRect().top\n\t\tconst relativeYPosition = this.currentPosition + clientCoordiante.y - touchAreaOffset\n\n\t\tconst itemIndex = Math.floor(relativeYPosition / this.lastAttrs.renderConfig.itemHeight)\n\t\tconst targetElementPosition = itemIndex * this.lastAttrs.renderConfig.itemHeight\n\n\t\t// We could find the entity just by indexing into it but we would need to scan the rows to find the right one anyway\n\t\t// Assuming that the rows are used in the order of their position we could use binary search\n\t\treturn this.rows.find((ve) => ve.top === targetElementPosition) ?? null\n\t}\n\n\tprivate readonly VIRTUAL_LIST_LENGTH = 100\n\n\tprivate initializeDom(dom: HTMLElement, attrs: ListAttrs<T, VH>) {\n\t\tconst rows: ListRow<T, VH>[] = []\n\t\tm.render(\n\t\t\tdom,\n\t\t\t// hardcoded number of elements for now\n\t\t\t[numberRange(0, this.VIRTUAL_LIST_LENGTH - 1).map(() => this.createRow(attrs, rows)), this.renderStatusRow()],\n\t\t)\n\n\t\tthis.rows = rows\n\t\tif (rows.length !== this.VIRTUAL_LIST_LENGTH) {\n\t\t\tthrow new ProgrammingError(`invalid rows length, expected ${this.VIRTUAL_LIST_LENGTH} rows, got ${this.rows.length}`)\n\t\t}\n\n\t\tif (attrs.renderConfig.swipe) {\n\t\t\tthis.swipeHandler?.attach()\n\t\t} else {\n\t\t\tthis.swipeHandler.detach()\n\t\t}\n\t}\n\n\tprivate onScroll(attrs: ListAttrs<T, VH>) {\n\t\tconst visibleElementHeight = this.updateDomElements(attrs)\n\t\tthis.loadMoreIfNecessary(attrs, visibleElementHeight)\n\t}\n\n\tprivate createRow(attrs: ListAttrs<T, VH>, rows: ListRow<T, VH>[]) {\n\t\treturn m(\"li.list-row.nofocus\", {\n\t\t\tdraggable: attrs.renderConfig.dragStart ? \"true\" : undefined,\n\t\t\ttabindex: TabIndex.Default,\n\t\t\toncreate: (vnode: VnodeDOM) => {\n\t\t\t\tconst dom = vnode.dom as HTMLElement\n\t\t\t\tconst row = {\n\t\t\t\t\trow: attrs.renderConfig.createElement(dom),\n\t\t\t\t\tdomElement: dom,\n\t\t\t\t\ttop: -1,\n\t\t\t\t\tentity: null,\n\t\t\t\t}\n\t\t\t\trows.push(row)\n\t\t\t\tthis.setRowEventListeners(attrs, dom, row)\n\t\t\t},\n\t\t})\n\t}\n\n\tprivate setRowEventListeners(attrs: ListAttrs<T, VH>, domElement: HTMLElement, row: ListRow<T, VH>) {\n\t\tconst LONG_PRESS_DURATION_MS = 400\n\t\tlet touchStartTime: number | null = null\n\n\t\tdomElement.onclick = (e) => {\n\t\t\tif (!touchStartTime || Date.now() - touchStartTime < LONG_PRESS_DURATION_MS) {\n\t\t\t\tif (row.entity) this.handleEvent(row.entity, e)\n\t\t\t}\n\t\t}\n\n\t\tdomElement.onkeyup = (e) => {\n\t\t\tif (isKeyPressed(e.key, Keys.SPACE, Keys.RETURN)) {\n\t\t\t\tif (row.entity) this.handleEvent(row.entity, e)\n\t\t\t}\n\t\t}\n\n\t\t// Handle highlighting the row when tabbed onto or out of\n\t\tconst onFocus = (focusType: \"focus\" | \"blur\") => {\n\t\t\treturn (e: FocusEvent) => {\n\t\t\t\tconst dom = e.target as HTMLElement | null\n\t\t\t\t// Activate the background colour in `SelectableRowContainer`\n\t\t\t\t// TODO: Transition to `state-bg`\n\t\t\t\tif (dom && dom.firstElementChild) {\n\t\t\t\t\tdom.firstElementChild?.dispatchEvent(new FocusEvent(focusType))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdomElement.onfocus = onFocus(\"focus\")\n\t\tdomElement.onblur = onFocus(\"blur\")\n\n\t\tdomElement.ondragstart = (e: DragEvent) => {\n\t\t\t// The quick change of the background color is to prevent a white background appearing in dark mode\n\t\t\tif (row.domElement) row.domElement!.style.background = theme.navigation_bg\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tif (row.domElement) row.domElement!.style.background = \"\"\n\t\t\t})\n\t\t\tif (attrs.renderConfig.dragStart) {\n\t\t\t\tif (row.entity && this.state) attrs.renderConfig.dragStart(e, row.entity, this.state.selectedItems)\n\t\t\t}\n\t\t}\n\n\t\tif (attrs.renderConfig.multiselectionAllowed === MultiselectMode.Enabled) {\n\t\t\tlet timeoutId: TimeoutID | null\n\t\t\tlet touchStartCoords: { x: number; y: number } | null = null\n\t\t\tdomElement.addEventListener(\"touchstart\", (e: TouchEvent) => {\n\t\t\t\ttouchStartTime = Date.now()\n\n\t\t\t\t// Activate multi selection after pause\n\t\t\t\ttimeoutId = setTimeout(() => {\n\t\t\t\t\t// check that virtualRow.entity exists because we had error feedbacks about it\n\t\t\t\t\tif (row.entity) {\n\t\t\t\t\t\tattrs.onSingleTogglingMultiselection(row.entity)\n\t\t\t\t\t}\n\t\t\t\t\tm.redraw()\n\t\t\t\t}, LONG_PRESS_DURATION_MS)\n\t\t\t\ttouchStartCoords = {\n\t\t\t\t\tx: e.touches[0].pageX,\n\t\t\t\t\ty: e.touches[0].pageY,\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tconst touchEnd = () => {\n\t\t\t\tif (timeoutId) clearTimeout(timeoutId)\n\t\t\t}\n\t\t\tdomElement.addEventListener(\"touchend\", touchEnd)\n\t\t\tdomElement.addEventListener(\"touchcancel\", touchEnd)\n\n\t\t\tdomElement.addEventListener(\"touchmove\", (e: TouchEvent) => {\n\t\t\t\t// If the user moved the finger too much by any axis, don't count it as a long press\n\t\t\t\tconst maxDistance = 30\n\t\t\t\tconst touch = e.touches[0]\n\n\t\t\t\tif (\n\t\t\t\t\ttouchStartCoords &&\n\t\t\t\t\ttimeoutId &&\n\t\t\t\t\t(Math.abs(touch.pageX - touchStartCoords.x) > maxDistance || Math.abs(touch.pageY - touchStartCoords.y) > maxDistance)\n\t\t\t\t) {\n\t\t\t\t\tclearTimeout(timeoutId)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Updates the given list of selected items with a click on the given clicked item. Takes ctrl and shift key events into consideration for multi selection.\n\t * If ctrl is pressed the selection status of the clickedItem is toggled.\n\t * If shift is pressed, all items beginning from the nearest selected item to the clicked item are additionally selected.\n\t * If neither ctrl nor shift are pressed only the clicked item is selected.\n\t */\n\tprivate handleEvent(clickedEntity: T, event: TouchEvent | MouseEvent | KeyboardEvent) {\n\t\t// normal click changes the selection to a single\n\t\t// ctrl click toggles the selection for an item and enables multiselect\n\t\t// shift click selects a lot of things and enabled multiselect\n\t\t// (there are also key press handlers but they are invoked from another place)\n\t\tlet changeType: Parameters<typeof this.changeSelection>[1]\n\t\tif ((client.isMobileDevice() && this.lastAttrs.state.inMultiselect) || event.ctrlKey || (client.isMacOS && event.metaKey)) {\n\t\t\tchangeType = \"togglingIncludingSingle\"\n\t\t} else if (event.shiftKey) {\n\t\t\tchangeType = \"range\"\n\t\t} else {\n\t\t\tchangeType = \"single\"\n\t\t}\n\t\tthis.changeSelection(clickedEntity, changeType)\n\t}\n\n\t/**\n\t * changeType:\n\t *  * single: one item selection (not multiselect)\n\t *  * togglingIncludingSingle: if not in multiselect, start multiselect. Turns multiselect on or off for the item. Includes the item from single selection\n\t *    when turning multiselect on.\n\t *  * togglingNewMultiselect: if not in multiselect, start multiselect. Turns multiselect on or off for the item. Only selected item will be in multiselect\n\t *    when turning multiselect on.\n\t *  * range: range selection, extends the range until the selected item\n\t */\n\tprivate changeSelection(clickedEntity: T, changeType: \"single\" | \"togglingIncludingSingle\" | \"range\") {\n\t\tswitch (changeType) {\n\t\t\tcase \"single\":\n\t\t\t\tthis.lastAttrs.onSingleSelection(clickedEntity)\n\t\t\t\tbreak\n\t\t\tcase \"togglingIncludingSingle\":\n\t\t\t\tif (this.lastAttrs.renderConfig.multiselectionAllowed === MultiselectMode.Enabled) {\n\t\t\t\t\tthis.lastAttrs.onSingleTogglingMultiselection(clickedEntity)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase \"range\":\n\t\t\t\tif (this.lastAttrs.renderConfig.multiselectionAllowed === MultiselectMode.Enabled) {\n\t\t\t\t\tthis.lastAttrs.onRangeSelectionTowards(clickedEntity)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\tprivate updateDomElements(attrs: ListAttrs<T, VH>): number {\n\t\t// if resize didn't kick in yet, measure it right away once\n\t\tif (this.height === 0) this.height = this.containerDom!.clientHeight\n\t\tconst rowHeight = attrs.renderConfig.itemHeight\n\t\t// plus loading indicator\n\t\t// should depend on whether we are completely loaded maybe?\n\t\tconst statusHeight = attrs.state.loadingStatus === ListLoadingState.Done ? 0 : size.list_row_height\n\t\tthis.innerDom!.style.height = px(attrs.state.items.length * rowHeight + statusHeight)\n\t\tif (attrs.state.activeIndex != null && attrs.state.activeIndex !== this.activeIndex) {\n\t\t\tconst index = attrs.state.activeIndex\n\t\t\tconst desiredPosition = attrs.state.activeIndex * rowHeight\n\t\t\tif (desiredPosition > this.containerDom!.scrollTop + this.height || desiredPosition < this.containerDom!.scrollTop) {\n\t\t\t\tconsole.log(\"active item out of screen, scrolling to\", index, desiredPosition)\n\t\t\t\tthis.currentPosition = this.containerDom!.scrollTop = desiredPosition\n\t\t\t} else {\n\t\t\t\tthis.currentPosition = this.containerDom!.scrollTop\n\t\t\t}\n\t\t} else {\n\t\t\tthis.currentPosition = this.containerDom!.scrollTop\n\t\t}\n\t\tthis.activeIndex = attrs.state.activeIndex\n\n\t\tconst visibleElements = 2 * Math.ceil(this.height / rowHeight / 2) // divide and multiply by two to get an even number\n\t\tconst visibleElementsHeight = visibleElements * rowHeight\n\t\tconst bufferHeight = ScrollBuffer * rowHeight\n\t\tconst maxStartPosition = rowHeight * attrs.state.items.length - bufferHeight * 2 - visibleElementsHeight\n\n\t\tlet nextPosition = this.currentPosition - (this.currentPosition % rowHeight) - bufferHeight\n\n\t\tif (nextPosition < 0) {\n\t\t\tnextPosition = 0\n\t\t} else if (nextPosition > maxStartPosition) {\n\t\t\tnextPosition = maxStartPosition\n\t\t}\n\n\t\tfor (const row of this.rows) {\n\t\t\trow.top = nextPosition\n\t\t\tnextPosition += rowHeight\n\t\t\tconst pos = row.top / rowHeight\n\t\t\tconst item = attrs.state.items[pos]\n\t\t\trow.entity = item\n\n\t\t\tif (!item) {\n\t\t\t\trow.domElement.style.display = \"none\"\n\t\t\t} else {\n\t\t\t\trow.domElement.style.display = \"\"\n\t\t\t\trow.domElement.style.transform = `translateY(${row.top}px)`\n\t\t\t\trow.row.update(item, attrs.state.selectedItems.has(item), attrs.state.inMultiselect)\n\t\t\t}\n\t\t\t// Focus the selected row so it can receive keyboard events if the user has just changed it\n\t\t\tif (attrs.state.selectedItems.has(item) && (!this.state?.selectedItems.has(item) || this.state == null)) {\n\t\t\t\trow.domElement.focus()\n\t\t\t}\n\t\t}\n\t\tthis.updateStatus(attrs.state.loadingStatus)\n\n\t\tthis.loadMoreIfNecessary(attrs, visibleElementsHeight)\n\n\t\treturn visibleElementsHeight\n\t}\n\n\tprivate readonly updateStatus = memoized((status: ListLoadingState) => {\n\t\tswitch (status) {\n\t\t\tcase ListLoadingState.Idle:\n\t\t\tcase ListLoadingState.Done:\n\t\t\t\tm.render(this.loadingIndicatorChildDom, null)\n\t\t\t\tthis.loadingIndicatorChildDom.style.display = \"none\"\n\t\t\t\tbreak\n\t\t\tcase ListLoadingState.Loading:\n\t\t\t\tm.render(this.loadingIndicatorChildDom, this.renderLoadingIndicator())\n\t\t\t\tthis.loadingIndicatorChildDom.style.display = \"\"\n\t\t\t\tbreak\n\t\t\tcase ListLoadingState.ConnectionLost:\n\t\t\t\tm.render(this.loadingIndicatorChildDom, this.renderConnectionLostIndicator())\n\t\t\t\tthis.loadingIndicatorChildDom.style.display = \"\"\n\t\t\t\tbreak\n\t\t}\n\t})\n\n\tprivate renderLoadingIndicator(): Children {\n\t\treturn m(\n\t\t\t\".flex-center.items-center\",\n\t\t\t{\n\t\t\t\tstyle: {\n\t\t\t\t\theight: px(size.list_row_height),\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\tgap: px(size.hpad_small),\n\t\t\t\t},\n\t\t\t},\n\t\t\tprogressIcon(),\n\t\t\tm(Button, {\n\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\tclick: () => this.lastAttrs.onStopLoading(),\n\t\t\t}),\n\t\t)\n\t}\n\n\tprivate renderConnectionLostIndicator(): Children {\n\t\treturn m(\n\t\t\t\".plr-l.flex-center.items-center\",\n\t\t\t{\n\t\t\t\tstyle: {\n\t\t\t\t\theight: px(size.list_row_height),\n\t\t\t\t},\n\t\t\t},\n\t\t\tm(Button, {\n\t\t\t\tlabel: \"loadMore_action\",\n\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\tclick: () => this.retryLoading(),\n\t\t\t}),\n\t\t)\n\t}\n\n\tprivate retryLoading() {\n\t\tthis.lastAttrs.onRetryLoading()\n\t}\n\n\tprivate async loadMoreIfNecessary(attrs: ListAttrs<T, VH>, visibleElementsHeight: number) {\n\t\t// WARNING this is hacky:\n\t\t// lastBunchVisible depends on visibleElementsHeight which is set inside _createVirtualRows which might not have completed by the time we\n\t\t// reach here, so waiting for domDeferred guarantees that oncreate has finished running, and in turn that _createVirtualRows has completed\n\t\tconst lastBunchVisible = this.currentPosition > attrs.state.items.length * attrs.renderConfig.itemHeight - visibleElementsHeight * 2\n\n\t\tif (lastBunchVisible && attrs.state.loadingStatus == ListLoadingState.Idle) {\n\t\t\tawait attrs.onLoadMore()\n\t\t}\n\t}\n\n\tprivate renderStatusRow(): Children {\n\t\treturn m(\"li.list-row\", {\n\t\t\tstyle: {\n\t\t\t\tbottom: 0,\n\t\t\t\theight: px(size.list_row_height),\n\t\t\t\tdisplay: this.shouldDisplayStatusRow() ? \"none\" : null,\n\t\t\t},\n\t\t\toncreate: (vnode) => {\n\t\t\t\tthis.loadingIndicatorChildDom = vnode.dom as HTMLElement\n\t\t\t},\n\t\t})\n\t}\n\n\tprivate shouldDisplayStatusRow() {\n\t\treturn this.state?.loadingStatus === ListLoadingState.Done || this.state?.loadingStatus === ListLoadingState.Idle\n\t}\n\n\tprivate renderSwipeItems(attrs: ListAttrs<T, VH>): Children {\n\t\tif (attrs.renderConfig.swipe == null) {\n\t\t\treturn null\n\t\t}\n\t\treturn [\n\t\t\tm(\n\t\t\t\t\".swipe-spacer.flex.items-center.justify-end.pr-l.blue\",\n\t\t\t\t{\n\t\t\t\t\toncreate: (vnode) => (this.domSwipeSpacerLeft = vnode.dom as HTMLElement),\n\t\t\t\t\ttabindex: TabIndex.Programmatic,\n\t\t\t\t\t\"aria-hidden\": \"true\",\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\theight: px(attrs.renderConfig.itemHeight),\n\t\t\t\t\t\ttransform: `translateY(-${attrs.renderConfig.itemHeight}px)`,\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\t\"z-index\": 1,\n\t\t\t\t\t\t// width: px(this.width),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tattrs.renderConfig.swipe.renderLeftSpacer(),\n\t\t\t),\n\t\t\tm(\n\t\t\t\t\".swipe-spacer.flex.items-center.pl-l.red\",\n\t\t\t\t{\n\t\t\t\t\toncreate: (vnode) => (this.domSwipeSpacerRight = vnode.dom as HTMLElement),\n\t\t\t\t\ttabindex: TabIndex.Programmatic,\n\t\t\t\t\t\"aria-hidden\": \"true\",\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\theight: px(attrs.renderConfig.itemHeight),\n\t\t\t\t\t\ttransform: `translateY(-${attrs.renderConfig.itemHeight}px)`,\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\t\"z-index\": 1,\n\t\t\t\t\t\t// width: px(this.width),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tattrs.renderConfig.swipe.renderRightSpacer(),\n\t\t\t),\n\t\t]\n\t}\n\n\tprivate updateSize() {\n\t\tconst containerDom = this.containerDom\n\t\tif (containerDom && this.domSwipeSpacerLeft && this.domSwipeSpacerRight) {\n\t\t\tthis.domSwipeSpacerLeft.style.opacity = \"0\"\n\t\t\tthis.domSwipeSpacerRight.style.opacity = \"0\"\n\t\t\tthis.doUpdateWidth(containerDom)\n\t\t}\n\t}\n\n\tprivate readonly doUpdateWidth = debounce(60, (containerDom: HTMLElement) => {\n\t\tthis.width = containerDom.clientWidth\n\t\tthis.height = containerDom.clientHeight\n\n\t\tif (this.swipeHandler) {\n\t\t\t// with different zoom levels Blink does weird things and shows parts of elements that it shouldn't so we shift them around by a pixel\n\t\t\tconst translateX = this.width + 1\n\t\t\tthis.domSwipeSpacerLeft.style.width = px(this.width)\n\t\t\tthis.domSwipeSpacerRight.style.width = px(this.width)\n\t\t\tthis.domSwipeSpacerLeft.style.transform = `translateX(${-translateX}px) translateY(0px)`\n\t\t\tthis.domSwipeSpacerRight.style.transform = `translateX(${translateX}px) translateY(0px)`\n\n\t\t\tfor (const row of this.rows) {\n\t\t\t\tif (row.domElement) applySafeAreaInsetMarginLR(row.domElement)\n\t\t\t}\n\n\t\t\tthis.domSwipeSpacerLeft.style.opacity = \"1\"\n\t\t\tthis.domSwipeSpacerRight.style.opacity = \"1\"\n\t\t}\n\t})\n}\n"],"mappings":"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"}