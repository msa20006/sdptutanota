{"version":3,"file":"mailLocator-CrvEYt1k.js","names":["logins: LoginController","listener: EntityEventsListener","entityUpdates: ReadonlyArray<EntityUpdate>","eventOwnerGroupId: Id","entityUpdatesData: Array<EntityUpdateData>","update: WebsocketCounterData","searchFacade: SearchFacade","calendarModel: lazyAsync<CalendarEventsRepository>","searchQuery: SearchQuery","progressTracker: ProgressTracker","result: SearchResult","result","daysInMonths: Array<Date>","calendarResult: SearchResult","monitor: IProgressMonitor","alreadyAdded: Set<string>","key: string","event: CalendarEvent","endDate","query: string","restriction: SearchRestriction","id: IdTuple","a: SearchQuery","b: SearchQuery","a: SearchRestriction","b: SearchRestriction","a: SearchResult","b: SearchResult","searchResult: SearchResult","eventController: EventController","entityClient: EntityClient","logins: LoginController","membership: GroupMembership","mailboxId: Id","mailGroupId: Id","updates: ReadonlyArray<EntityUpdateData>","eventOwnerGroupId: Id","mailboxGroupRoot: MailboxGroupRoot","promise: Promise<MailboxProperties>","mailboxProperties: MailboxProperties","dialog: Dialog","sendMailModel: SendMailModel","dispose: () => void","saveStatus: Stream<SaveStatus>","closeOverlayFunction: () => void","editor: MinimizedEditor","mail: Mail","work: number","id: ProgressMonitorId","amount: number","percentage: number","vnode: Vnode<SecondFactorViewAttrs>","attrs: SecondFactorViewAttrs","webauthn: WebauthnLoginParams","e: MouseEvent","appId: string","domainConfigProvider: DomainConfigProvider","webauthnUrl: string","webauthnClient: WebauthnClient","loginFacade: LoginFacade","domainConfigProvider: DomainConfigProvider","authData: AuthData","onClose: Thunk","canLoginWithU2f: boolean","otherDomainLoginUrl: string | null","u2fChallenge: Challenge","mailAddress: string","eventController: EventController","entityClient: EntityClient","webauthnClient: WebauthnClient","loginFacade: LoginFacade","domainConfigProvider: DomainConfigProvider","updates: ReadonlyArray<EntityUpdateData>","sessionId: IdTuple","session: Session","text: string","challenges: ReadonlyArray<Challenge>","mailAddress: string | null","webauthn: WebAuthnFacade","domainConfigProvider: DomainConfigProvider","isApp: boolean","challenge: U2fChallenge","userId: Id","displayName: string","allowedKeys: WebauthnKeyDescriptor[]","domainConfig: DomainConfig","type: \"legacy\" | \"new\"","key: U2fKey","raw: ArrayBuffer","authData: Uint8Array","publicKey: Map<number, number | Uint8Array>","loginFacade: LoginFacade","loginListener: lazyAsync<PageContextLoginListener>","resetAppState: () => Promise<unknown>","username: string","password: string","sessionType: SessionType","databaseKey: Uint8Array | null","handler: lazy<Promise<PostLoginAction>>","initData: UserControllerInitData","userId: Id","salt: Uint8Array","kdfType: KdfType","clientIdentifier: string","unencryptedCredentials: UnencryptedCredentials","externalUserKeyDeriver?: ExternalUserKeyDeriver | null","offlineTimeRangeDays?: number | null","feature: FeatureType","cacheMode: CacheMode","sync: boolean","credentials: UnencryptedCredentials","pushIdentifier: string | null","serviceExecutor: IServiceExecutor","storage: NewsItemStorage","newsListItemFactory: (name: string) => Promise<NewsListItem | null>","response: NewsOut","newsItemId: Id","eventBus: ExposedEventBus","wsConnectionState: WsConnectionState","leaderStatus: WebsocketLeaderStatus","closeIfOpen: boolean","enableAutomaticState: boolean","delay: number | null","option: CloseEventBusOption","operation: OperationId","progressValue: number","handleIndexStateUpdate: (state: SearchIndexStateInfo) => void","message: InfoMessage","state: SearchIndexStateInfo","vnode: Vnode<ProgressBarAttrs>","attr: OfflineIndicatorAttrs","a: OfflineIndicatorAttrs","percentage: number","date: Date","vnode: Vnode<OfflineIndicatorAttrs>","cacheStorage: ExposedCacheStorage","loginListener: PageContextLoginListener","connectivityModel: WebsocketConnectivityModel","logins: LoginController","progressTracker: ProgressTracker","cb: () => void","progressStream: Stream<number>","wsStream: Stream<WsConnectionState>","progress: number","newState: WsConnectionState","path: string","params: Record<string, any>","router: Router","scope: Scope","prefixWithoutLeadingSlash: string","route: string","moveMailDataPerFolder: MoveMailData[]","mailFacade: MailFacade","logins: LoginController","mailboxDetail: MailboxDetail","mail: Mail","applyRulesOnServer: boolean","rules: InboxRule[]","inboxRule: InboxRule","value: string","mailAddresses: string[]","mailAddress","entropyFacade: EntropyFacade","scheduler: Scheduler","window: Window","e: MouseEvent","e: KeyboardEvent","e: TouchEvent","e: any","data: number | undefined","entropy: number","source: EntropySource","added: number[]","nbrOf32BitValues: number","api: CredentialsContainer","domainConfig: DomainConfig","rpId: string","appId: string","publicKeyCredentialCreationOptions: PublicKeyCredentialCreationOptions","allowCredentials: PublicKeyCredentialDescriptor[]","publicKeyCredentialRequestOptions: PublicKeyCredentialRequestOptions","blobFacade: BlobFacade","guiDownload: ProgressObserver","guiDownload","file: DataFile","file: TutanotaFile","downloadedFiles: Array<FileReference | DataFile>","downloadedFiles: DataFile[]","blobFacade: BlobFacade","guiDownload: ProgressObserver","fileApp: NativeFileApp","guiDownload","files: Array<FileReference | DataFile>","file: DataFile","tutanotaFile: TutanotaFile","downloadedFiles: FileReference[]","e: any","loginController: LoginController","mobileContactsFacade: MobileContactsFacade","entityClient: EntityClient","eventController: EventController","contactModel: ContactModel","deviceConfig: DeviceConfig","events: ReadonlyArray<EntityUpdateData>","contactsIdToCreateOrUpdate: Map<Id, Array<Id>>","contactsToInsertOrUpdate: StructuredContact[]","structuredContacts: ReadonlyArray<StructuredContact>","contactsToDedupe: readonly StructuredContact[]","contact: Contact","userId?: string","login?: string","userId: string","error: PermissionError","contacts: ReadonlyArray<Contact>","syncResult: ContactSyncResult","listId: string","contact: StructuredContact","partialContact: Contact","defaultThemeId: ThemeId","themeSingleton: object","themeFacade: ThemeFacade","htmlSanitizer: () => Promise<HtmlSanitizer>","app: AppType","parsedTheme: ThemeCustomizations","stringTheme: string","theme","themeId: ThemeId","newThemePreference: ThemePreference","permanent: boolean","newTheme: Theme","newThemeId: ThemeId","customizations: ThemeCustomizations","theme: Theme","updatedTheme: Theme","baseId: BaseThemeId","themeFacade: LazyLoaded<ThemeFacade>","theme: ThemeId","themes: ReadonlyArray<Theme>","themes","deviceConfig: DeviceConfig","listener: () => unknown","notifications: Notifications","mailboxModel: MailboxModel","eventController: EventController","entityClient: EntityClient","logins: LoginController","mailFacade: MailFacade","connectivityModel: WebsocketConnectivityModel | null","inboxRuleHandler: InboxRuleHandler | null","listId: Id","updates: ReadonlyArray<EntityUpdateData>","mailId: IdTuple","mail: Mail","mailFolder: MailFolder","foldersId: Id","groupId: Id","mails: readonly Mail[]","state: LabelState","mails: Mail[]","targetMailFolder: MailFolder","mails: ReadonlyArray<Mail>","folder: MailFolder","reportType: MailReportType","unread: boolean","addedLabels: readonly MailFolder[]","removedLabels: readonly MailFolder[]","counters: WebsocketCounterData","links: Array<{\n\t\t\thref: string\n\t\t\tinnerHTML: string\n\t\t}>","folderSystem: FolderSystem","descendant: MailFolder","unreadMails: number","recipient: string","headers: string[]","mailboxGroupRoot: MailboxGroupRoot","reportMovedMails: ReportMovedMailsType","mailGroupId: Id","labelData: { name: string; color: string }","label: MailFolder","newData: { name: string; color: string }","folderElementId: Id","DEFAULT_PROGRESS_ESTIMATION_REFRESH_MS: number","RATE_PER_SECOND_MAXIMUM_SCALING_RATIO: number","totalWork: number","updater: ProgressListener","value: number","ratePerSecondScalingRatio: number","newWorkAmount: number","newRateEntry: Readonly<[number, number]>","estimate: number","amount: number","totalAmount: number","DEFAULT_TOTAL_WORK: number","domainConfigProvider: DomainConfigProvider","loginController: LoginController","mailboxModel: MailboxModel","entityClient: EntityClient","eventController: EventController","credentialsProvider: CredentialsProvider","nativeMailImportFacade: NativeMailImportFacade","openSettingsHandler: OpenSettingsHandler","activeImportId: IdTuple | null","updates: ReadonlyArray<EntityUpdateData>","serverState: ImportMailState","totalWork: number","importMailState: ImportMailState","mailGroupId: Id","importFacade: NativeMailImportFacade","mailboxId: string","err: MailImportError","navigateToImportSettings: SnackBarButtonAttrs","filePaths: Array<string>","importMailStateElementId: Id","importStatus: ImportStatus","remoteImportStatus: ImportStatus","mailboxDetails: MailboxDetail","mailboxProperties: MailboxProperties","groupType: TypeOfGroup","mode: CalendarOperation","event: CalendarEvent","mail: Mail","editMode: CalendarOperation","event: Partial<CalendarEvent>","mailboxDetail: MailboxDetail","responseTo: Mail | null","p: Promise<T>","_query: string","options: CreateMailViewerOptions","options","mailGroupId: Id","userId: Id","userGroupInfo: GroupInfo","name: T","state: SearchIndexStateInfo","name: string","query: string","field: string","minSuggestionCount: number","maxResults?: number","sanitizerStub: Partial<HtmlSanitizer>","filesUris: ReadonlyArray<string>","groupColors: Map<Id, string>","parsedEvents: ParsedEvent[]","selectedEvent: CalendarEvent","calendars: ReadonlyMap<string, CalendarInfo>","ownAttendee: CalendarEventAttendee | null","contact: Contact","canEdit: boolean","mailLocator: IMailLocator"],"sources":["../../src/common/api/main/EventController.ts","../../src/mail-app/search/model/SearchModel.ts","../../src/common/mailFunctionality/MailboxModel.ts","../../src/mail-app/mail/model/MinimizedMailEditorViewModel.ts","../../src/common/api/main/ProgressTracker.ts","../../src/common/misc/2fa/SecondFactorAuthView.ts","../../src/common/misc/2fa/SecondFactorUtils.ts","../../src/common/misc/2fa/SecondFactorAuthDialog.ts","../../src/common/misc/2fa/SecondFactorHandler.ts","../../src/common/misc/2fa/webauthn/WebauthnClient.ts","../../src/common/api/main/LoginController.ts","../../src/common/misc/news/NewsModel.ts","../../src/common/misc/WebsocketConnectivityModel.ts","../../src/common/api/main/OperationProgressTracker.ts","../../src/common/gui/InfoMessageHandler.ts","../../src/common/gui/base/ProgressBar.ts","../../src/common/gui/base/OfflineIndicator.ts","../../src/common/gui/base/OfflineIndicatorViewModel.ts","../../src/common/gui/ScopedRouter.ts","../../src/mail-app/mail/model/InboxRuleHandler.ts","../../src/common/api/main/EntropyCollector.ts","../../src/common/misc/2fa/webauthn/WebauthnTypes.ts","../../src/common/misc/2fa/webauthn/BrowserWebauthn.ts","../../src/common/file/FileControllerBrowser.ts","../../src/common/file/FileControllerNative.ts","../../src/mail-app/contacts/model/NativeContactsSyncManager.ts","../../src/common/gui/ThemeController.ts","../../src/mail-app/mail/model/MailModel.ts","../../src/common/api/common/utils/EstimatingProgressMonitor.ts","../../src/mail-app/mail/import/MailImporter.ts","../../src/mail-app/mailLocator.ts"],"sourcesContent":["import { downcast, identity, noOp } from \"@tutao/tutanota-utils\"\nimport type { LoginController } from \"./LoginController\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { assertMainOrNode } from \"../common/Env\"\nimport { EntityUpdate, WebsocketCounterData } from \"../entities/sys/TypeRefs\"\nimport { EntityUpdateData } from \"../common/utils/EntityUpdateUtils.js\"\n\nassertMainOrNode()\n\nexport type ExposedEventController = Pick<EventController, \"onEntityUpdateReceived\" | \"onCountersUpdateReceived\">\n\nconst TAG = \"[EventController]\"\n\nexport type EntityEventsListener = (updates: ReadonlyArray<EntityUpdateData>, eventOwnerGroupId: Id) => Promise<unknown>\n\nexport class EventController {\n\tprivate countersStream: Stream<WebsocketCounterData> = stream()\n\tprivate entityListeners: Set<EntityEventsListener> = new Set()\n\n\tconstructor(private readonly logins: LoginController) {}\n\n\taddEntityListener(listener: EntityEventsListener) {\n\t\tif (this.entityListeners.has(listener)) {\n\t\t\tconsole.warn(TAG, \"Adding the same listener twice!\")\n\t\t} else {\n\t\t\tthis.entityListeners.add(listener)\n\t\t}\n\t}\n\n\tremoveEntityListener(listener: EntityEventsListener) {\n\t\tconst wasRemoved = this.entityListeners.delete(listener)\n\t\tif (!wasRemoved) {\n\t\t\tconsole.warn(TAG, \"Could not remove listener, possible leak?\", listener)\n\t\t}\n\t}\n\n\tgetCountersStream(): Stream<WebsocketCounterData> {\n\t\t// Create copy so it's never ended\n\t\treturn this.countersStream.map(identity)\n\t}\n\n\tasync onEntityUpdateReceived(entityUpdates: ReadonlyArray<EntityUpdate>, eventOwnerGroupId: Id): Promise<void> {\n\t\tlet loginsUpdates = Promise.resolve()\n\n\t\tif (this.logins.isUserLoggedIn()) {\n\t\t\t// the UserController must be notified first as other event receivers depend on it to be up-to-date\n\t\t\tloginsUpdates = this.logins.getUserController().entityEventsReceived(entityUpdates as ReadonlyArray<EntityUpdateData>, eventOwnerGroupId)\n\t\t}\n\n\t\treturn loginsUpdates\n\t\t\t.then(async () => {\n\t\t\t\t// sequentially to prevent parallel loading of instances\n\t\t\t\tfor (const listener of this.entityListeners) {\n\t\t\t\t\tlet entityUpdatesData: Array<EntityUpdateData> = downcast(entityUpdates)\n\t\t\t\t\tawait listener(entityUpdatesData, eventOwnerGroupId)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(noOp)\n\t}\n\n\tasync onCountersUpdateReceived(update: WebsocketCounterData): Promise<void> {\n\t\tthis.countersStream(update)\n\t}\n}\n","import stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { CalendarEvent, CalendarEventTypeRef, MailTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { NOTHING_INDEXED_TIMESTAMP } from \"../../../common/api/common/TutanotaConstants\"\nimport { DbError } from \"../../../common/api/common/error/DbError\"\nimport type { SearchIndexStateInfo, SearchRestriction, SearchResult } from \"../../../common/api/worker/search/SearchTypes\"\nimport { arrayEquals, assertNonNull, assertNotNull, incrementMonth, isSameTypeRef, lazyAsync, ofClass, tokenize } from \"@tutao/tutanota-utils\"\nimport type { SearchFacade } from \"../../workerUtils/index/SearchFacade.js\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { listIdPart } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { IProgressMonitor } from \"../../../common/api/common/utils/ProgressMonitor.js\"\nimport { ProgressTracker } from \"../../../common/api/main/ProgressTracker.js\"\nimport { CalendarEventsRepository } from \"../../../common/calendar/date/CalendarEventsRepository.js\"\n\nassertMainOrNode()\nexport type SearchQuery = {\n\tquery: string\n\trestriction: SearchRestriction\n\tminSuggestionCount: number\n\tmaxResults: number | null\n}\n\nexport class SearchModel {\n\tresult: Stream<SearchResult | null>\n\tindexState: Stream<SearchIndexStateInfo>\n\t// we store this as a reference to the currently running search. if we don't, we only have the last result's query info\n\t// to compare against incoming new queries\n\tlastQueryString: Stream<string | null>\n\tindexingSupported: boolean\n\t_searchFacade: SearchFacade\n\tprivate lastQuery: SearchQuery | null\n\tprivate lastSearchPromise: Promise<SearchResult | void>\n\tcancelSignal: Stream<boolean>\n\n\tconstructor(searchFacade: SearchFacade, private readonly calendarModel: lazyAsync<CalendarEventsRepository>) {\n\t\tthis._searchFacade = searchFacade\n\t\tthis.result = stream()\n\t\tthis.lastQueryString = stream<string | null>(\"\")\n\t\tthis.indexingSupported = true\n\t\tthis.indexState = stream<SearchIndexStateInfo>({\n\t\t\tinitializing: true,\n\t\t\tmailIndexEnabled: false,\n\t\t\tprogress: 0,\n\t\t\tcurrentMailIndexTimestamp: NOTHING_INDEXED_TIMESTAMP,\n\t\t\taimedMailIndexTimestamp: NOTHING_INDEXED_TIMESTAMP,\n\t\t\tindexedMailCount: 0,\n\t\t\tfailedIndexingUpTo: null,\n\t\t})\n\t\tthis.lastQuery = null\n\t\tthis.lastSearchPromise = Promise.resolve()\n\t\tthis.cancelSignal = stream(false)\n\t}\n\n\tasync search(searchQuery: SearchQuery, progressTracker: ProgressTracker): Promise<SearchResult | void> {\n\t\tif (this.lastQuery && searchQueryEquals(searchQuery, this.lastQuery)) {\n\t\t\treturn this.lastSearchPromise\n\t\t}\n\n\t\tthis.lastQuery = searchQuery\n\t\tconst { query, restriction, minSuggestionCount, maxResults } = searchQuery\n\t\tthis.lastQueryString(query)\n\t\tlet result = this.result()\n\n\t\tif (result && !isSameTypeRef(restriction.type, result.restriction.type)) {\n\t\t\t// reset the result in case only the search type has changed\n\t\t\tthis.result(null)\n\t\t} else if (this.indexState().progress > 0 && result && isSameTypeRef(MailTypeRef, result.restriction.type)) {\n\t\t\t// reset the result if indexing is in progress and the current search result is of type mail\n\t\t\tthis.result(null)\n\t\t}\n\n\t\tif (query.trim() === \"\") {\n\t\t\t// if there was an empty query, just send empty result\n\t\t\tconst result: SearchResult = {\n\t\t\t\tquery: query,\n\t\t\t\trestriction: restriction,\n\t\t\t\tresults: [],\n\t\t\t\tcurrentIndexTimestamp: this.indexState().currentMailIndexTimestamp,\n\t\t\t\tlastReadSearchIndexRow: [],\n\t\t\t\tmaxResults: 0,\n\t\t\t\tmatchWordOrder: false,\n\t\t\t\tmoreResults: [],\n\t\t\t\tmoreResultsEntries: [],\n\t\t\t}\n\t\t\tthis.result(result)\n\t\t\tthis.lastSearchPromise = Promise.resolve(result)\n\t\t} else if (isSameTypeRef(CalendarEventTypeRef, restriction.type)) {\n\t\t\t// we interpret restriction.start as the start of the first day of the first month we want to search\n\t\t\t// restriction.end is the end of the last day of the last month we want to search\n\t\t\tlet currentDate = new Date(assertNotNull(restriction.start))\n\t\t\tconst endDate = new Date(assertNotNull(restriction.end))\n\t\t\tconst calendarModel = await this.calendarModel()\n\t\t\tconst daysInMonths: Array<Date> = []\n\t\t\twhile (currentDate.getTime() <= endDate.getTime()) {\n\t\t\t\tdaysInMonths.push(currentDate)\n\t\t\t\tcurrentDate = incrementMonth(currentDate, 1)\n\t\t\t}\n\n\t\t\tconst calendarResult: SearchResult = {\n\t\t\t\t// index related, keep empty\n\t\t\t\tcurrentIndexTimestamp: 0,\n\t\t\t\tmoreResults: [],\n\t\t\t\tmoreResultsEntries: [],\n\t\t\t\tlastReadSearchIndexRow: [],\n\t\t\t\t// data that is relevant to calendar search\n\t\t\t\tmatchWordOrder: false,\n\t\t\t\trestriction,\n\t\t\t\tresults: [],\n\t\t\t\tquery,\n\t\t\t}\n\n\t\t\tconst monitorHandle = progressTracker.registerMonitorSync(daysInMonths.length)\n\t\t\tconst monitor: IProgressMonitor = assertNotNull(progressTracker.getMonitor(monitorHandle))\n\n\t\t\tif (this.cancelSignal()) {\n\t\t\t\tthis.result(calendarResult)\n\t\t\t\tthis.lastSearchPromise = Promise.resolve(calendarResult)\n\t\t\t\treturn this.lastSearchPromise\n\t\t\t}\n\n\t\t\tconst hasNewPaidPlan = await calendarModel.canLoadBirthdaysCalendar()\n\t\t\tif (hasNewPaidPlan) {\n\t\t\t\tawait calendarModel.loadContactsBirthdays()\n\t\t\t}\n\n\t\t\tawait calendarModel.loadMonthsIfNeeded(daysInMonths, monitor, this.cancelSignal)\n\t\t\tmonitor.completed()\n\n\t\t\tconst eventsForDays = calendarModel.getEventsForMonths()()\n\n\t\t\tassertNonNull(restriction.start)\n\t\t\tassertNonNull(restriction.end)\n\n\t\t\tconst tokens = tokenize(query.trim())\n\t\t\t// we want event instances that occur on multiple days to only appear once, but want\n\t\t\t// separate instances of event series to occur on their own.\n\t\t\tconst alreadyAdded: Set<string> = new Set()\n\n\t\t\tif (this.cancelSignal()) {\n\t\t\t\tthis.result(calendarResult)\n\t\t\t\tthis.lastSearchPromise = Promise.resolve(calendarResult)\n\t\t\t\treturn this.lastSearchPromise\n\t\t\t}\n\n\t\t\tconst followCommonRestrictions = (key: string, event: CalendarEvent) => {\n\t\t\t\tif (alreadyAdded.has(key)) {\n\t\t\t\t\t// we only need the first event in the series, the view will load & then generate\n\t\t\t\t\t// the series for the searched time range.\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\tif (restriction.folderIds.length > 0 && !restriction.folderIds.includes(listIdPart(event._id))) {\n\t\t\t\t\t// check that the event is in the searched calendar.\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\tif (restriction.eventSeries === false && event.repeatRule != null) {\n\t\t\t\t\t// applied \"repeating\" search filter\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\tfor (const token of tokens) {\n\t\t\t\t\tif (event.summary.toLowerCase().includes(token)) {\n\t\t\t\t\t\talreadyAdded.add(key)\n\t\t\t\t\t\tcalendarResult.results.push(event._id)\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tif (tokens.length > 0) {\n\t\t\t\t// we're iterating by event first to only have to sanitize the description once.\n\t\t\t\t// that's a smaller savings than one might think because for the vast majority of\n\t\t\t\t// events we're probably not matching and looking into the description anyway.\n\t\t\t\tfor (const [startOfDay, eventsOnDay] of eventsForDays) {\n\t\t\t\t\teventLoop: for (const event of eventsOnDay) {\n\t\t\t\t\t\tif (!(startOfDay >= restriction.start && startOfDay <= restriction.end)) {\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst key = idToKey(event._id)\n\n\t\t\t\t\t\tif (!followCommonRestrictions(key, event)) {\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const token of tokens) {\n\t\t\t\t\t\t\tif (event.summary.toLowerCase().includes(token)) {\n\t\t\t\t\t\t\t\talreadyAdded.add(key)\n\t\t\t\t\t\t\t\tcalendarResult.results.push(event._id)\n\t\t\t\t\t\t\t\tcontinue eventLoop\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// checking the summary was cheap, now we store the sanitized description to check it against\n\t\t\t\t\t\t// all tokens.\n\t\t\t\t\t\tconst descriptionToSearch = event.description.replaceAll(/(<[^>]+>)/gi, \" \").toLowerCase()\n\t\t\t\t\t\tfor (const token of tokens) {\n\t\t\t\t\t\t\tif (descriptionToSearch.includes(token)) {\n\t\t\t\t\t\t\t\talreadyAdded.add(key)\n\t\t\t\t\t\t\t\tcalendarResult.results.push(event._id)\n\t\t\t\t\t\t\t\tcontinue eventLoop\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.cancelSignal()) {\n\t\t\t\t\t\t\tthis.result(calendarResult)\n\t\t\t\t\t\t\tthis.lastSearchPromise = Promise.resolve(calendarResult)\n\t\t\t\t\t\t\treturn this.lastSearchPromise\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst startDate = new Date(restriction.start)\n\t\t\t\tconst endDate = new Date(restriction.end)\n\n\t\t\t\tif (hasNewPaidPlan) {\n\t\t\t\t\tconst birthdayEvents = Array.from(calendarModel.getBirthdayEvents().values()).flat()\n\n\t\t\t\t\teventLoop: for (const eventRegistry of birthdayEvents) {\n\t\t\t\t\t\t// Birthdays should still appear on search even if the date itself doesn't comply to the whole restriction\n\t\t\t\t\t\t// we only care about months\n\t\t\t\t\t\tconst month = eventRegistry.event.startTime.getMonth()\n\t\t\t\t\t\tif (!(month >= startDate.getMonth() && month <= endDate.getMonth())) {\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst key = idToKey(eventRegistry.event._id)\n\n\t\t\t\t\t\tif (!followCommonRestrictions(key, eventRegistry.event)) {\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const token of tokens) {\n\t\t\t\t\t\t\tif (eventRegistry.event.summary.toLowerCase().includes(token)) {\n\t\t\t\t\t\t\t\talreadyAdded.add(key)\n\t\t\t\t\t\t\t\tcalendarResult.results.push(eventRegistry.event._id)\n\t\t\t\t\t\t\t\tcontinue eventLoop\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.cancelSignal()) {\n\t\t\t\t\t\t\tthis.result(calendarResult)\n\t\t\t\t\t\t\tthis.lastSearchPromise = Promise.resolve(calendarResult)\n\t\t\t\t\t\t\treturn this.lastSearchPromise\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.result(calendarResult)\n\t\t\tthis.lastSearchPromise = Promise.resolve(calendarResult)\n\t\t} else {\n\t\t\tthis.lastSearchPromise = this._searchFacade\n\t\t\t\t.search(query, restriction, minSuggestionCount, maxResults ?? undefined)\n\t\t\t\t.then((result) => {\n\t\t\t\t\tthis.result(result)\n\t\t\t\t\treturn result\n\t\t\t\t})\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(DbError, (e) => {\n\t\t\t\t\t\tconsole.log(\"DBError while search\", e)\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t}\n\n\t\treturn this.lastSearchPromise\n\t}\n\n\tisNewSearch(query: string, restriction: SearchRestriction): boolean {\n\t\tlet isNew = false\n\t\tlet lastQuery = this.lastQuery\n\t\tif (lastQuery == null) {\n\t\t\tisNew = true\n\t\t} else if (lastQuery.query !== query) {\n\t\t\tisNew = true\n\t\t} else if (lastQuery.restriction !== restriction) {\n\t\t\t// both are the same instance\n\t\t\tisNew = !isSameSearchRestriction(restriction, lastQuery.restriction)\n\t\t}\n\n\t\tif (isNew) this.sendCancelSignal()\n\t\treturn isNew\n\t}\n\n\tsendCancelSignal() {\n\t\tthis.cancelSignal(true)\n\t\tthis.cancelSignal.end(true)\n\t\tthis.cancelSignal = stream(false)\n\t}\n}\n\nfunction idToKey(id: IdTuple): string {\n\treturn id.join(\"/\")\n}\n\nfunction searchQueryEquals(a: SearchQuery, b: SearchQuery) {\n\treturn (\n\t\ta.query === b.query &&\n\t\tisSameSearchRestriction(a.restriction, b.restriction) &&\n\t\ta.minSuggestionCount === b.minSuggestionCount &&\n\t\ta.maxResults === b.maxResults\n\t)\n}\n\nexport function isSameSearchRestriction(a: SearchRestriction, b: SearchRestriction): boolean {\n\tconst isSameAttributeIds = a.attributeIds === b.attributeIds || (!!a.attributeIds && !!b.attributeIds && arrayEquals(a.attributeIds, b.attributeIds))\n\treturn (\n\t\tisSameTypeRef(a.type, b.type) &&\n\t\ta.start === b.start &&\n\t\ta.end === b.end &&\n\t\ta.field === b.field &&\n\t\tisSameAttributeIds &&\n\t\t(a.eventSeries === b.eventSeries || (a.eventSeries === null && b.eventSeries === true) || (a.eventSeries === true && b.eventSeries === null)) &&\n\t\tarrayEquals(a.folderIds, b.folderIds)\n\t)\n}\n\nexport function areResultsForTheSameQuery(a: SearchResult, b: SearchResult) {\n\treturn a.query === b.query && isSameSearchRestriction(a.restriction, b.restriction)\n}\n\nexport function hasMoreResults(searchResult: SearchResult): boolean {\n\treturn (\n\t\tsearchResult.moreResults.length > 0 ||\n\t\t(searchResult.lastReadSearchIndexRow.length > 0 && searchResult.lastReadSearchIndexRow.every(([word, id]) => id !== 0))\n\t)\n}\n","import {\n\tcreateMailAddressProperties,\n\tcreateMailboxProperties,\n\tMailBox,\n\tMailboxGroupRoot,\n\tMailboxGroupRootTypeRef,\n\tMailboxProperties,\n\tMailboxPropertiesTypeRef,\n\tMailBoxTypeRef,\n} from \"../api/entities/tutanota/TypeRefs.js\"\nimport { Group, GroupInfo, GroupInfoTypeRef, GroupMembership, GroupTypeRef } from \"../api/entities/sys/TypeRefs.js\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport { EventController } from \"../api/main/EventController.js\"\nimport { EntityClient } from \"../api/common/EntityClient.js\"\nimport { LoginController } from \"../api/main/LoginController.js\"\nimport { assertNotNull, lazyMemoized, ofClass } from \"@tutao/tutanota-utils\"\nimport { OperationType } from \"../api/common/TutanotaConstants.js\"\nimport { getEnabledMailAddressesWithUser } from \"./SharedMailUtils.js\"\nimport { PreconditionFailedError } from \"../api/common/error/RestError.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../api/common/utils/EntityUpdateUtils.js\"\nimport m from \"mithril\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\nimport { isSameId } from \"../api/common/utils/EntityUtils.js\"\n\nexport type MailboxDetail = {\n\tmailbox: MailBox\n\tmailGroupInfo: GroupInfo\n\tmailGroup: Group\n\tmailboxGroupRoot: MailboxGroupRoot\n}\n\nexport type MailboxCounters = Record<Id, Record<string, number>>\n\nexport class MailboxModel {\n\t/** Empty stream until init() is finished, exposed mostly for map()-ing, use getMailboxDetails to get a promise */\n\treadonly mailboxDetails: Stream<MailboxDetail[]> = stream()\n\tprivate initialization: Promise<void> | null = null\n\t/**\n\t * Map from MailboxGroupRoot id to MailboxProperties\n\t * A way to avoid race conditions in case we try to create mailbox properties from multiple places.\n\t *\n\t */\n\tprivate mailboxPropertiesPromises: Map<Id, Promise<MailboxProperties>> = new Map()\n\n\tconstructor(private readonly eventController: EventController, private readonly entityClient: EntityClient, private readonly logins: LoginController) {}\n\n\t// only init listeners once\n\tprivate readonly initListeners = lazyMemoized(() => {\n\t\tthis.eventController.addEntityListener((updates, eventOwnerGroupId) => this.entityEventsReceived(updates, eventOwnerGroupId))\n\t})\n\n\tinit(): Promise<void> {\n\t\t// if we are in the process of loading do not start another one in parallel\n\t\tif (this.initialization) {\n\t\t\treturn this.initialization\n\t\t}\n\t\tthis.initListeners()\n\n\t\treturn this._init()\n\t}\n\n\tprivate _init(): Promise<void> {\n\t\tconst mailGroupMemberships = this.logins.getUserController().getMailGroupMemberships()\n\t\tconst mailBoxDetailsPromises = mailGroupMemberships.map((m) => this.mailboxDetailsFromMembership(m))\n\t\tthis.initialization = Promise.all(mailBoxDetailsPromises).then((details) => {\n\t\t\tthis.mailboxDetails(details)\n\t\t})\n\t\treturn this.initialization.catch((e) => {\n\t\t\tconsole.warn(\"mailbox model initialization failed!\", e)\n\t\t\tthis.initialization = null\n\t\t\tthrow e\n\t\t})\n\t}\n\n\t/**\n\t * load mailbox details from a mailgroup membership\n\t */\n\tprivate async mailboxDetailsFromMembership(membership: GroupMembership): Promise<MailboxDetail> {\n\t\tconst [mailboxGroupRoot, mailGroupInfo, mailGroup] = await Promise.all([\n\t\t\tthis.entityClient.load(MailboxGroupRootTypeRef, membership.group),\n\t\t\tthis.entityClient.load(GroupInfoTypeRef, membership.groupInfo),\n\t\t\tthis.entityClient.load(GroupTypeRef, membership.group),\n\t\t])\n\t\tconst mailbox = await this.entityClient.load(MailBoxTypeRef, mailboxGroupRoot.mailbox)\n\t\treturn {\n\t\t\tmailbox,\n\t\t\tmailGroupInfo,\n\t\t\tmailGroup,\n\t\t\tmailboxGroupRoot,\n\t\t}\n\t}\n\n\t/**\n\t * Get the list of MailboxDetails that this user has access to from their memberships.\n\t *\n\t * Will wait for successful initialization.\n\t */\n\tasync getMailboxDetails(): Promise<Array<MailboxDetail>> {\n\t\t// If details are there, use them\n\t\tif (this.mailboxDetails()) {\n\t\t\treturn this.mailboxDetails()\n\t\t} else {\n\t\t\t// If they are not there, trigger loading again (just in case) but do not fail and wait until we actually have the details.\n\t\t\t// This is so that the rest of the app is not in the broken state if details fail to load but is just waiting until the success.\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tthis.init()\n\t\t\t\tconst end = this.mailboxDetails.map((details) => {\n\t\t\t\t\tresolve(details)\n\t\t\t\t\tend.end(true)\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}\n\n\tasync getMailboxDetailByMailboxId(mailboxId: Id): Promise<MailboxDetail | null> {\n\t\tconst allDetails = await this.getMailboxDetails()\n\t\treturn allDetails.find((detail) => isSameId(detail.mailbox._id, mailboxId)) ?? null\n\t}\n\n\tasync getMailboxDetailsForMailGroup(mailGroupId: Id): Promise<MailboxDetail> {\n\t\tconst mailboxDetails = await this.getMailboxDetails()\n\t\treturn assertNotNull(\n\t\t\tmailboxDetails.find((md) => mailGroupId === md.mailGroup._id),\n\t\t\t\"Mailbox detail for mail group does not exist\",\n\t\t)\n\t}\n\n\tasync getUserMailboxDetails(): Promise<MailboxDetail> {\n\t\tconst userMailGroupMembership = this.logins.getUserController().getUserMailGroupMembership()\n\t\tconst mailboxDetails = await this.getMailboxDetails()\n\t\treturn assertNotNull(\n\t\t\tmailboxDetails.find((md) => md.mailGroup._id === userMailGroupMembership.group),\n\t\t\t\"Mailbox detail for user does not exist\",\n\t\t)\n\t}\n\n\tasync entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>, eventOwnerGroupId: Id): Promise<void> {\n\t\tfor (const update of updates) {\n\t\t\tif (isUpdateForTypeRef(GroupInfoTypeRef, update)) {\n\t\t\t\tif (update.operation === OperationType.UPDATE) {\n\t\t\t\t\tawait this._init()\n\t\t\t\t\tm.redraw()\n\t\t\t\t}\n\t\t\t} else if (this.logins.getUserController().isUpdateForLoggedInUserInstance(update, eventOwnerGroupId)) {\n\t\t\t\tlet newMemberships = this.logins.getUserController().getMailGroupMemberships()\n\t\t\t\tconst mailboxDetails = await this.getMailboxDetails()\n\n\t\t\t\tif (newMemberships.length !== mailboxDetails.length) {\n\t\t\t\t\tawait this._init()\n\t\t\t\t\tm.redraw()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getMailboxProperties(mailboxGroupRoot: MailboxGroupRoot): Promise<MailboxProperties> {\n\t\t// MailboxProperties is an encrypted instance that is created lazily. When we create it the reference is automatically written to the MailboxGroupRoot.\n\t\t// Unfortunately we will only get updated new MailboxGroupRoot with the next EntityUpdate.\n\t\t// To prevent parallel creation attempts we do two things:\n\t\t//  - we save the loading promise to avoid calling setup() twice in parallel\n\t\t//  - we set mailboxProperties reference manually (we could save the id elsewhere but it's easier this way)\n\n\t\t// If we are already loading/creating, just return it to avoid races\n\t\tconst existingPromise = this.mailboxPropertiesPromises.get(mailboxGroupRoot._id)\n\t\tif (existingPromise) {\n\t\t\treturn existingPromise\n\t\t}\n\n\t\tconst promise: Promise<MailboxProperties> = this.loadOrCreateMailboxProperties(mailboxGroupRoot)\n\t\tthis.mailboxPropertiesPromises.set(mailboxGroupRoot._id, promise)\n\t\treturn promise.finally(() => this.mailboxPropertiesPromises.delete(mailboxGroupRoot._id))\n\t}\n\n\tasync loadOrCreateMailboxProperties(mailboxGroupRoot: MailboxGroupRoot): Promise<MailboxProperties> {\n\t\tif (!mailboxGroupRoot.mailboxProperties) {\n\t\t\tmailboxGroupRoot.mailboxProperties = await this.entityClient\n\t\t\t\t.setup(\n\t\t\t\t\tnull,\n\t\t\t\t\tcreateMailboxProperties({\n\t\t\t\t\t\t_ownerGroup: mailboxGroupRoot._ownerGroup ?? \"\",\n\t\t\t\t\t\treportMovedMails: \"0\",\n\t\t\t\t\t\tmailAddressProperties: [],\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(PreconditionFailedError, (e) => {\n\t\t\t\t\t\t// We try to prevent race conditions but they can still happen with multiple clients trying ot create mailboxProperties at the same time.\n\t\t\t\t\t\t// We send special precondition from the server with an existing id.\n\t\t\t\t\t\tif (e.data && e.data.startsWith(\"exists:\")) {\n\t\t\t\t\t\t\tconst existingId = e.data.substring(\"exists:\".length)\n\t\t\t\t\t\t\tconsole.log(\"mailboxProperties already exists\", existingId)\n\t\t\t\t\t\t\treturn existingId\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new ProgrammingError(`Could not create mailboxProperties, precondition: ${e.data}`)\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t}\n\t\tconst mailboxProperties = await this.entityClient.load(MailboxPropertiesTypeRef, mailboxGroupRoot.mailboxProperties)\n\t\tif (mailboxProperties.mailAddressProperties.length === 0) {\n\t\t\tawait this.migrateFromOldSenderName(mailboxGroupRoot, mailboxProperties)\n\t\t}\n\t\treturn mailboxProperties\n\t}\n\n\t/** If there was no sender name configured before take the user's name and assign it to all email addresses. */\n\tprivate async migrateFromOldSenderName(mailboxGroupRoot: MailboxGroupRoot, mailboxProperties: MailboxProperties) {\n\t\tconst userGroupInfo = this.logins.getUserController().userGroupInfo\n\t\tconst legacySenderName = userGroupInfo.name\n\t\tconst mailboxDetails = await this.getMailboxDetailsForMailGroup(mailboxGroupRoot._id)\n\t\tconst mailAddresses = getEnabledMailAddressesWithUser(mailboxDetails, userGroupInfo)\n\t\tfor (const mailAddress of mailAddresses) {\n\t\t\tmailboxProperties.mailAddressProperties.push(\n\t\t\t\tcreateMailAddressProperties({\n\t\t\t\t\tmailAddress,\n\t\t\t\t\tsenderName: legacySenderName,\n\t\t\t\t}),\n\t\t\t)\n\t\t}\n\t\tawait this.entityClient.update(mailboxProperties)\n\t}\n}\n","import type { Dialog } from \"../../../common/gui/base/Dialog\"\nimport type { SendMailModel } from \"../../../common/mailFunctionality/SendMailModel.js\"\nimport { lastThrow, remove } from \"@tutao/tutanota-utils\"\nimport type { Mail } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { isSameId } from \"../../../common/api/common/utils/EntityUtils\"\nimport Stream from \"mithril/stream\"\n\nexport const enum SaveStatusEnum {\n\tSaving = 0,\n\tSaved = 1,\n\tNotSaved = 2,\n}\n\nexport const enum SaveErrorReason {\n\tUnknown,\n\tConnectionLost,\n}\n\nexport type SaveStatus =\n\t| {\n\t\t\tstatus: SaveStatusEnum.Saving\n\t  }\n\t| {\n\t\t\tstatus: SaveStatusEnum.Saved\n\t  }\n\t| {\n\t\t\tstatus: SaveStatusEnum.NotSaved\n\t\t\treason: SaveErrorReason\n\t  }\n\nexport type MinimizedEditor = {\n\tdialog: Dialog\n\tsendMailModel: SendMailModel\n\t// we pass sendMailModel for easier access to contents of mail,\n\tdispose: () => void\n\t// disposes dialog and templatePopup eventListeners when minimized mail is removed\n\tsaveStatus: Stream<SaveStatus>\n\tcloseOverlayFunction: () => void\n}\n\n/**\n * handles minimized Editors\n */\nexport class MinimizedMailEditorViewModel {\n\t_minimizedEditors: Array<MinimizedEditor>\n\n\tconstructor() {\n\t\tthis._minimizedEditors = []\n\t}\n\n\tminimizeMailEditor(\n\t\tdialog: Dialog,\n\t\tsendMailModel: SendMailModel,\n\t\tdispose: () => void,\n\t\tsaveStatus: Stream<SaveStatus>,\n\t\tcloseOverlayFunction: () => void,\n\t): MinimizedEditor {\n\t\tdialog.close()\n\n\t\t// disallow creation of duplicate minimized mails\n\t\tif (!this._minimizedEditors.some((editor) => editor.dialog === dialog)) {\n\t\t\tthis._minimizedEditors.push({\n\t\t\t\tsendMailModel: sendMailModel,\n\t\t\t\tdialog: dialog,\n\t\t\t\tdispose: dispose,\n\t\t\t\tsaveStatus,\n\t\t\t\tcloseOverlayFunction,\n\t\t\t})\n\t\t}\n\n\t\treturn lastThrow(this._minimizedEditors)\n\t}\n\n\t// fully removes and reopens clicked mail\n\treopenMinimizedEditor(editor: MinimizedEditor): void {\n\t\teditor.closeOverlayFunction()\n\t\teditor.dialog.show()\n\t\tremove(this._minimizedEditors, editor)\n\t}\n\n\t// fully removes clicked mail\n\tremoveMinimizedEditor(editor: MinimizedEditor): void {\n\t\teditor.closeOverlayFunction()\n\t\teditor.dispose()\n\t\tremove(this._minimizedEditors, editor)\n\t}\n\n\tgetMinimizedEditors(): Array<MinimizedEditor> {\n\t\treturn this._minimizedEditors\n\t}\n\n\tgetEditorForDraft(mail: Mail): MinimizedEditor | null {\n\t\treturn (\n\t\t\tthis.getMinimizedEditors().find((e) => {\n\t\t\t\tconst draft = e.sendMailModel.getDraft()\n\t\t\t\treturn draft ? isSameId(draft._id, mail._id) : null\n\t\t\t}) ?? null\n\t\t)\n\t}\n}\n","import stream from \"mithril/stream\"\nimport type { ProgressMonitorId } from \"../common/utils/ProgressMonitor\"\nimport { ProgressMonitor } from \"../common/utils/ProgressMonitor\"\n\nexport type ExposedProgressTracker = Pick<ProgressTracker, \"registerMonitor\" | \"workDoneForMonitor\">\n\n/**\n * The progress tracker controls the progress bar located in Header.js\n * You can register progress monitors with it and then make workDone calls on them\n * and then the total progress will be shown at the top of the window\n */\nexport class ProgressTracker {\n\t// Will stream a number between 0 and 1\n\tonProgressUpdate: stream<number>\n\tprivate readonly monitors: Map<ProgressMonitorId, ProgressMonitor>\n\tprivate idCounter: ProgressMonitorId\n\n\tconstructor() {\n\t\t// initially, there is no work, so we are done by default.\n\t\tthis.onProgressUpdate = stream(1)\n\t\tthis.monitors = new Map()\n\t\tthis.idCounter = 0\n\t}\n\n\t/**\n\t * Register a monitor with the tracker, so that it's progress can be displayed\n\t * Returns an ID as a handle, useful for making calls from the worker\n\t *\n\t * Make sure that monitor completes, so it can be unregistered.\n\t * @param work - total work to do\n\t */\n\tregisterMonitorSync(work: number): ProgressMonitorId {\n\t\tconst id = this.idCounter++\n\t\tconst monitor = new ProgressMonitor(work, (percentage) => this.onProgress(id, percentage))\n\n\t\tthis.monitors.set(id, monitor)\n\n\t\treturn id\n\t}\n\n\t/** async wrapper for remote */\n\tasync registerMonitor(work: number): Promise<ProgressMonitorId> {\n\t\treturn this.registerMonitorSync(work)\n\t}\n\n\tasync workDoneForMonitor(id: ProgressMonitorId, amount: number): Promise<void> {\n\t\tthis.getMonitor(id)?.workDone(amount)\n\t}\n\n\tgetMonitor(id: ProgressMonitorId): ProgressMonitor | null {\n\t\treturn this.monitors.get(id) ?? null\n\t}\n\n\tprivate onProgress(id: ProgressMonitorId, percentage: number) {\n\t\t// notify\n\t\tthis.onProgressUpdate(this.completedAmount())\n\t\t// we might be done with this one\n\t\tif (percentage >= 100) this.monitors.delete(id)\n\t}\n\n\t/**\n\t * Total work that will be done from all monitors\n\t */\n\ttotalWork(): number {\n\t\tlet total = 0\n\n\t\tfor (const monitor of this.monitors.values()) {\n\t\t\ttotal += monitor.totalWork\n\t\t}\n\n\t\treturn total\n\t}\n\n\t/**\n\t * Current absolute amount of completed work from all monitors\n\t */\n\tcompletedWork(): number {\n\t\tlet total = 0\n\n\t\tfor (const monitor of this.monitors.values()) {\n\t\t\ttotal += monitor.workCompleted\n\t\t}\n\n\t\treturn total\n\t}\n\n\t/**\n\t * Completed percentage of completed work as a number between 0 and 1\n\t */\n\tcompletedAmount(): number {\n\t\tconst totalWork = this.totalWork()\n\t\tconst completedWork = this.completedWork()\n\t\t// no work to do means you have done all the work\n\t\treturn totalWork !== 0 ? Math.min(1, completedWork / totalWork) : 1\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport type { TranslationKey } from \"../LanguageViewModel\"\nimport { lang } from \"../LanguageViewModel\"\nimport { Icon, IconSize, progressIcon } from \"../../gui/base/Icon\"\nimport { Icons, SecondFactorImage } from \"../../gui/base/icons/Icons\"\nimport { theme } from \"../../gui/theme\"\nimport type { Thunk } from \"@tutao/tutanota-utils\"\nimport { Autocomplete, TextField } from \"../../gui/base/TextField.js\"\nimport { LoginButton } from \"../../gui/base/buttons/LoginButton.js\"\nimport { ExternalLink } from \"../../gui/base/ExternalLink.js\"\n\ntype WebauthnState = { state: \"init\" } | { state: \"progress\" } | { state: \"error\"; error: TranslationKey }\n\ntype WebauthnAnotherDomainParams = {\n\tcanLogin: false\n\totherDomainLoginUrl: string\n}\ntype WebauthnLoginParams = {\n\tcanLogin: true\n\tstate: WebauthnState\n\tdoWebauthn: Thunk\n}\ntype WebauthnParams = WebauthnLoginParams | WebauthnAnotherDomainParams\ntype OtpParams = {\n\tcodeFieldValue: string\n\tinProgress: boolean\n\tonValueChanged: (arg0: string) => unknown\n}\nexport type SecondFactorViewAttrs = {\n\totp: OtpParams | null\n\twebauthn: WebauthnParams | null\n\tonRecover: Thunk | null\n}\n\n/** Displays options for second factor authentication. */\nexport class SecondFactorAuthView implements Component<SecondFactorViewAttrs> {\n\tview(vnode: Vnode<SecondFactorViewAttrs>): Children {\n\t\tconst { attrs } = vnode\n\t\treturn m(\".flex.col\", [\n\t\t\tm(\"p.center\", [lang.get(attrs.webauthn?.canLogin || attrs.otp ? \"secondFactorPending_msg\" : \"secondFactorPendingOtherClientOnly_msg\")]),\n\t\t\tthis.renderWebauthn(vnode.attrs),\n\t\t\tthis._renderOtp(vnode.attrs),\n\t\t\tthis._renderRecover(vnode.attrs),\n\t\t])\n\t}\n\n\t_renderOtp(attrs: SecondFactorViewAttrs): Children {\n\t\tconst { otp } = attrs\n\n\t\tif (!otp) {\n\t\t\treturn null\n\t\t}\n\n\t\treturn m(\n\t\t\t\".left.mb\",\n\t\t\tm(TextField, {\n\t\t\t\tlabel: \"totpCode_label\",\n\t\t\t\tvalue: otp.codeFieldValue,\n\t\t\t\tautocompleteAs: Autocomplete.oneTimeCode,\n\t\t\t\toninput: (value) => otp.onValueChanged(value.trim()),\n\t\t\t\tinjectionsRight: () => (otp.inProgress ? m(\".mr-s\", progressIcon()) : null),\n\t\t\t}),\n\t\t)\n\t}\n\n\trenderWebauthn(attrs: SecondFactorViewAttrs): Children {\n\t\tconst { webauthn } = attrs\n\n\t\tif (!webauthn) {\n\t\t\treturn null\n\t\t}\n\n\t\tif (webauthn.canLogin) {\n\t\t\treturn this.renderWebauthnLogin(webauthn)\n\t\t} else {\n\t\t\treturn this._renderOtherDomainLogin(webauthn)\n\t\t}\n\t}\n\n\trenderWebauthnLogin(webauthn: WebauthnLoginParams): Children {\n\t\tlet items\n\t\tconst { state } = webauthn\n\n\t\tconst doWebAuthnButton = m(LoginButton, {\n\t\t\tlabel: \"useSecurityKey_action\",\n\t\t\tonclick: () => webauthn.doWebauthn(),\n\t\t})\n\n\t\tswitch (state.state) {\n\t\t\tcase \"init\":\n\t\t\t\titems = [m(\".align-self-center\", doWebAuthnButton)]\n\t\t\t\tbreak\n\n\t\t\tcase \"progress\":\n\t\t\t\titems = [m(\".flex.justify-center\", [m(\".mr-s\", progressIcon()), m(\"\", lang.get(\"waitingForU2f_msg\"))])]\n\t\t\t\tbreak\n\n\t\t\tcase \"error\":\n\t\t\t\titems = [\n\t\t\t\t\tm(\".flex.col.items-center\", [\n\t\t\t\t\t\tm(\".flex.items-center\", [\n\t\t\t\t\t\t\tm(\n\t\t\t\t\t\t\t\t\".mr-s\",\n\t\t\t\t\t\t\t\tm(Icon, {\n\t\t\t\t\t\t\t\t\ticon: Icons.Cancel,\n\t\t\t\t\t\t\t\t\tsize: IconSize.Medium,\n\t\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\t\tfill: theme.content_accent,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tm(\"\", lang.get(state.error)),\n\t\t\t\t\t\t]),\n\t\t\t\t\t\tdoWebAuthnButton,\n\t\t\t\t\t]),\n\t\t\t\t]\n\t\t\t\tbreak\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error()\n\t\t}\n\n\t\treturn [m(\".flex-center\", m(\"img\", { src: SecondFactorImage })), m(\".mt.flex.col\", items)]\n\t}\n\n\t_renderOtherDomainLogin({ otherDomainLoginUrl }: WebauthnAnotherDomainParams): Children {\n\t\tconst hostname = new URL(otherDomainLoginUrl).hostname\n\t\treturn [\n\t\t\tlang.get(\"differentSecurityKeyDomain_msg\", {\n\t\t\t\t\"{domain}\": hostname,\n\t\t\t}),\n\t\t\tm(\"br\"),\n\t\t\tm(ExternalLink, {\n\t\t\t\thref: otherDomainLoginUrl,\n\t\t\t\ttext: hostname,\n\t\t\t\tclass: \"text-center\",\n\t\t\t\tisCompanySite: false,\n\t\t\t}),\n\t\t]\n\t}\n\n\t_renderRecover(attrs: SecondFactorViewAttrs): Children {\n\t\tconst { onRecover } = attrs\n\n\t\tif (onRecover == null) {\n\t\t\treturn null\n\t\t}\n\n\t\treturn m(\".small.text-center.pt\", [\n\t\t\tm(\n\t\t\t\t`a[href=#]`,\n\t\t\t\t{\n\t\t\t\t\tonclick: (e: MouseEvent) => {\n\t\t\t\t\t\tonRecover()\n\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlang.get(\"recoverAccountAccess_action\"),\n\t\t\t),\n\t\t])\n\t}\n}\n","import { DomainConfigProvider } from \"../../api/common/DomainConfigProvider.js\"\nimport { Const } from \"../../api/common/TutanotaConstants.js\"\n\n/**\n * Given appId (from the U2fKey), figure out which url should the user use for the login with that appId.\n */\nexport function appIdToLoginUrl(appId: string, domainConfigProvider: DomainConfigProvider): string {\n\t// Webauthn keys for our domains are special case because local, test and prod keys are registered for the same superdomain.\n\tif (appId === Const.WEBAUTHN_RP_ID) {\n\t\treturn webauthnUrlToLoginUrl(domainConfigProvider.getCurrentDomainConfig().webauthnUrl)\n\t} else if (appId === Const.LEGACY_WEBAUTHN_RP_ID) {\n\t\treturn webauthnUrlToLoginUrl(domainConfigProvider.getCurrentDomainConfig().legacyWebauthnUrl)\n\t}\n\n\t// If we get here, there are two options:\n\t//  * legacy (pre-Webauthn) U2F keys use the URL of a json file as appId. in that case, we use the hostname of that URL to figure out where to authenticate.\n\t//  * newer ones use some domain (no protocol, no port) for a whitelabel domain. we use the whitelabel domain if the key is registered through a whitelabel\n\t//       login. it might have a port on local builds.\n\tconst parts = (appId.endsWith(\".json\") ? new URL(appId).hostname : appId).split(\":\")\n\tconst domain = parts[0]\n\t// This might be undefined, but that's okay.\n\tconst port = parts[1]\n\t// If we use webauthn, we can assume https because no browser allows webauthn over http.\n\tconst domainConfig = domainConfigProvider.getDomainConfigForHostname(domain, \"https:\", port)\n\treturn webauthnUrlToLoginUrl(domainConfig.webauthnUrl)\n}\n\nfunction webauthnUrlToLoginUrl(webauthnUrl: string): string {\n\tconst url = new URL(webauthnUrl)\n\turl.pathname = \"\"\n\treturn url.toString()\n}\n","import { SecondFactorType } from \"../../api/common/TutanotaConstants.js\"\nimport type { Thunk } from \"@tutao/tutanota-utils\"\nimport { assertNotNull, getFirstOrThrow } from \"@tutao/tutanota-utils\"\nimport type { TranslationKey } from \"../LanguageViewModel.js\"\nimport type { Challenge } from \"../../api/entities/sys/TypeRefs.js\"\nimport { createSecondFactorAuthData } from \"../../api/entities/sys/TypeRefs.js\"\nimport { AccessBlockedError, BadRequestError, LockedError, NotAuthenticatedError } from \"../../api/common/error/RestError.js\"\nimport { Dialog } from \"../../gui/base/Dialog.js\"\nimport m from \"mithril\"\nimport { SecondFactorAuthView } from \"./SecondFactorAuthView.js\"\nimport { WebauthnClient } from \"./webauthn/WebauthnClient.js\"\nimport type { LoginFacade } from \"../../api/worker/facades/LoginFacade.js\"\nimport { CancelledError } from \"../../api/common/error/CancelledError.js\"\nimport { WebauthnError } from \"../../api/common/error/WebauthnError.js\"\nimport { appIdToLoginUrl } from \"./SecondFactorUtils.js\"\n\nimport { DomainConfigProvider } from \"../../api/common/DomainConfigProvider.js\"\n\ntype AuthData = {\n\treadonly sessionId: IdTuple\n\treadonly challenges: ReadonlyArray<Challenge>\n\treadonly mailAddress: string | null\n}\ntype WebauthnState = { state: \"init\" } | { state: \"progress\" } | { state: \"error\"; error: TranslationKey }\n\ntype OtpState = {\n\tcode: string\n\tinProgress: boolean\n}\n\n/**\n * Dialog which allows user to use second factor authentication and allows to reset second factor.\n * It will show that the login can be approved form another session and depending on what is supported it\n * might display one or more of:\n *  - WebAuthentication\n *  - TOTP\n *  - login from another domain message\n *  - lost access button\n * */\nexport class SecondFactorAuthDialog {\n\tprivate waitingForSecondFactorDialog: Dialog | null = null\n\tprivate webauthnState: WebauthnState = { state: \"init\" }\n\tprivate otpState: OtpState = { code: \"\", inProgress: false }\n\n\t/** @private */\n\tprivate constructor(\n\t\tprivate readonly webauthnClient: WebauthnClient,\n\t\tprivate readonly loginFacade: LoginFacade,\n\t\tprivate readonly domainConfigProvider: DomainConfigProvider,\n\t\tprivate readonly authData: AuthData,\n\t\tprivate readonly onClose: Thunk,\n\t) {}\n\n\t/**\n\t * @param onClose will be called when the dialog is closed (one way or another).\n\t */\n\tstatic show(\n\t\twebauthnClient: WebauthnClient,\n\t\tloginFacade: LoginFacade,\n\t\tdomainConfigProvider: DomainConfigProvider,\n\t\tauthData: AuthData,\n\t\tonClose: Thunk,\n\t): SecondFactorAuthDialog {\n\t\tconst dialog = new SecondFactorAuthDialog(webauthnClient, loginFacade, domainConfigProvider, authData, onClose)\n\n\t\tdialog.show()\n\n\t\treturn dialog\n\t}\n\n\tclose() {\n\t\tif (this.waitingForSecondFactorDialog?.visible) {\n\t\t\tthis.waitingForSecondFactorDialog?.close()\n\t\t}\n\n\t\tthis.webauthnClient.abortCurrentOperation()\n\t\tthis.waitingForSecondFactorDialog = null\n\n\t\tthis.onClose()\n\t}\n\n\tprivate async show() {\n\t\tconst u2fChallenge = this.authData.challenges.find(\n\t\t\t(challenge) => challenge.type === SecondFactorType.u2f || challenge.type === SecondFactorType.webauthn,\n\t\t)\n\n\t\tconst otpChallenge = this.authData.challenges.find((challenge) => challenge.type === SecondFactorType.totp)\n\t\tconst u2fSupported = await this.webauthnClient.isSupported()\n\n\t\tconsole.log(\"webauthn supported: \", u2fSupported)\n\n\t\tlet canLoginWithU2f: boolean\n\t\tlet otherDomainLoginUrl: string | null\n\t\tif (u2fChallenge?.u2f != null && u2fSupported) {\n\t\t\tconst { canAttempt, cannotAttempt } = await this.webauthnClient.canAttemptChallenge(u2fChallenge.u2f)\n\t\t\tcanLoginWithU2f = canAttempt.length !== 0\n\t\t\t// If we don't have any key we can use to log in we need to show a message to attempt the login on another domain.\n\n\t\t\tif (cannotAttempt.length > 0) {\n\t\t\t\tconst loginUrlString = appIdToLoginUrl(getFirstOrThrow(cannotAttempt).appId, this.domainConfigProvider)\n\t\t\t\tconst loginUrl = new URL(loginUrlString)\n\t\t\t\tloginUrl.searchParams.set(\"noAutoLogin\", \"true\")\n\t\t\t\totherDomainLoginUrl = loginUrl.toString()\n\t\t\t} else {\n\t\t\t\totherDomainLoginUrl = null\n\t\t\t}\n\t\t} else {\n\t\t\tcanLoginWithU2f = false\n\t\t\totherDomainLoginUrl = null\n\t\t}\n\n\t\tconst { mailAddress } = this.authData\n\t\tthis.waitingForSecondFactorDialog = Dialog.showActionDialog({\n\t\t\ttitle: \"emptyString_msg\",\n\t\t\tallowOkWithReturn: true,\n\t\t\tchild: {\n\t\t\t\tview: () => {\n\t\t\t\t\treturn m(SecondFactorAuthView, {\n\t\t\t\t\t\twebauthn: canLoginWithU2f\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tcanLogin: true,\n\t\t\t\t\t\t\t\t\tstate: this.webauthnState,\n\t\t\t\t\t\t\t\t\tdoWebauthn: () => this.doWebauthn(assertNotNull(u2fChallenge)),\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: otherDomainLoginUrl\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tcanLogin: false,\n\t\t\t\t\t\t\t\t\totherDomainLoginUrl: otherDomainLoginUrl,\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\totp: otpChallenge\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tcodeFieldValue: this.otpState.code,\n\t\t\t\t\t\t\t\t\tinProgress: this.otpState.inProgress,\n\t\t\t\t\t\t\t\t\tonValueChanged: (newValue) => (this.otpState.code = newValue),\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\tonRecover: mailAddress ? () => this.recoverLogin(mailAddress) : null,\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t},\n\t\t\tokAction: otpChallenge ? () => this.onConfirmOtp() : null,\n\t\t\tcancelAction: () => this.cancel(),\n\t\t})\n\t}\n\n\tasync onConfirmOtp() {\n\t\tthis.otpState.inProgress = true\n\t\tconst authData = createSecondFactorAuthData({\n\t\t\ttype: SecondFactorType.totp,\n\t\t\tsession: this.authData.sessionId,\n\t\t\totpCode: this.otpState.code.replace(/ /g, \"\"),\n\t\t\tu2f: null,\n\t\t\twebauthn: null,\n\t\t})\n\n\t\ttry {\n\t\t\tawait this.loginFacade.authenticateWithSecondFactor(authData)\n\t\t\tthis.waitingForSecondFactorDialog?.close()\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotAuthenticatedError) {\n\t\t\t\tDialog.message(\"loginFailed_msg\")\n\t\t\t} else if (e instanceof BadRequestError) {\n\t\t\t\tDialog.message(\"loginFailed_msg\")\n\t\t\t} else if (e in AccessBlockedError) {\n\t\t\t\tDialog.message(\"loginFailedOften_msg\")\n\t\t\t\tthis.close()\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.otpState.inProgress = false\n\t\t}\n\t}\n\n\tprivate async cancel(): Promise<void> {\n\t\tthis.webauthnClient.abortCurrentOperation()\n\t\tawait this.loginFacade.cancelCreateSession(this.authData.sessionId)\n\t\tthis.close()\n\t}\n\n\tprivate async doWebauthn(u2fChallenge: Challenge) {\n\t\tthis.webauthnState = {\n\t\t\tstate: \"progress\",\n\t\t}\n\t\tconst sessionId = this.authData.sessionId\n\t\tconst challenge = assertNotNull(u2fChallenge.u2f)\n\n\t\ttry {\n\t\t\tconst { responseData, apiBaseUrl } = await this.webauthnClient.authenticate(challenge)\n\t\t\tconst authData = createSecondFactorAuthData({\n\t\t\t\ttype: SecondFactorType.webauthn,\n\t\t\t\tsession: sessionId,\n\t\t\t\twebauthn: responseData,\n\t\t\t\tu2f: null,\n\t\t\t\totpCode: null,\n\t\t\t})\n\t\t\tawait this.loginFacade.authenticateWithSecondFactor(authData, apiBaseUrl)\n\t\t} catch (e) {\n\t\t\tif (e instanceof CancelledError) {\n\t\t\t\tthis.webauthnState = {\n\t\t\t\t\tstate: \"init\",\n\t\t\t\t}\n\t\t\t} else if (e instanceof AccessBlockedError && this.waitingForSecondFactorDialog?.visible) {\n\t\t\t\tDialog.message(\"loginFailedOften_msg\")\n\t\t\t\tthis.close()\n\t\t\t} else if (e instanceof WebauthnError) {\n\t\t\t\tconsole.log(\"Error during webAuthn: \", e)\n\t\t\t\tthis.webauthnState = {\n\t\t\t\t\tstate: \"error\",\n\t\t\t\t\terror: \"couldNotAuthU2f_msg\",\n\t\t\t\t}\n\t\t\t} else if (e instanceof LockedError) {\n\t\t\t\tthis.webauthnState = {\n\t\t\t\t\tstate: \"init\",\n\t\t\t\t}\n\t\t\t\tDialog.message(\"serviceUnavailable_msg\")\n\t\t\t} else if (e instanceof NotAuthenticatedError) {\n\t\t\t\tthis.webauthnState = {\n\t\t\t\t\tstate: \"init\",\n\t\t\t\t}\n\t\t\t\tDialog.message(\"loginFailed_msg\")\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t} finally {\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\tprivate async recoverLogin(mailAddress: string) {\n\t\tthis.cancel()\n\t\tconst dialog = await import(\"../../login/recover/RecoverLoginDialog\")\n\t\tdialog.show(mailAddress, \"secondFactor\")\n\t}\n}\n","import m from \"mithril\"\nimport type { Challenge, Session } from \"../../api/entities/sys/TypeRefs.js\"\nimport { createSecondFactorAuthData, SessionTypeRef } from \"../../api/entities/sys/TypeRefs.js\"\nimport { Dialog } from \"../../gui/base/Dialog\"\nimport { OperationType, SessionState } from \"../../api/common/TutanotaConstants\"\nimport { lang } from \"../LanguageViewModel\"\nimport { neverNull } from \"@tutao/tutanota-utils\"\nimport { NotFoundError } from \"../../api/common/error/RestError\"\nimport type { EventController } from \"../../api/main/EventController\"\nimport { isSameId } from \"../../api/common/utils/EntityUtils\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport type { EntityClient } from \"../../api/common/EntityClient\"\nimport { WebauthnClient } from \"./webauthn/WebauthnClient\"\nimport { SecondFactorAuthDialog } from \"./SecondFactorAuthDialog\"\nimport type { LoginFacade } from \"../../api/worker/facades/LoginFacade\"\nimport { DomainConfigProvider } from \"../../api/common/DomainConfigProvider.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../api/common/utils/EntityUpdateUtils.js\"\n\nassertMainOrNode()\n\n/**\n * Handles showing and hiding of the following dialogs:\n * 1. Waiting for second factor approval (either token or by other client) during login\n * 2. Ask for approving the login on another client (setupAcceptOtherClientLoginListener() must have been called initially).\n *      If the dialog is visible and another client tries to login at the same time, that second login is ignored.\n */\nexport class SecondFactorHandler {\n\tprivate otherLoginSessionId: IdTuple | null = null\n\tprivate otherLoginDialog: Dialog | null = null\n\tprivate otherLoginListenerInitialized: boolean = false\n\tprivate waitingForSecondFactorDialog: SecondFactorAuthDialog | null = null\n\n\tconstructor(\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly webauthnClient: WebauthnClient,\n\t\tprivate readonly loginFacade: LoginFacade,\n\t\tprivate readonly domainConfigProvider: DomainConfigProvider,\n\t) {}\n\n\tsetupAcceptOtherClientLoginListener() {\n\t\tif (this.otherLoginListenerInitialized) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.otherLoginListenerInitialized = true\n\t\tthis.eventController.addEntityListener((updates) => this.entityEventsReceived(updates))\n\t}\n\n\tprivate async entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>) {\n\t\tfor (const update of updates) {\n\t\t\tconst sessionId: IdTuple = [neverNull(update.instanceListId), update.instanceId]\n\n\t\t\tif (isUpdateForTypeRef(SessionTypeRef, update)) {\n\t\t\t\tif (update.operation === OperationType.CREATE) {\n\t\t\t\t\tlet session\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsession = await this.entityClient.load(SessionTypeRef, sessionId)\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t\t\tconsole.log(\"Failed to load session\", e)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tif (session.state === SessionState.SESSION_STATE_PENDING) {\n\t\t\t\t\t\tif (this.otherLoginDialog != null) {\n\t\t\t\t\t\t\tthis.otherLoginDialog.close()\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.otherLoginSessionId = session._id\n\n\t\t\t\t\t\tthis.showConfirmLoginDialog(session)\n\t\t\t\t\t}\n\t\t\t\t} else if (update.operation === OperationType.UPDATE && this.otherLoginSessionId && isSameId(this.otherLoginSessionId, sessionId)) {\n\t\t\t\t\tlet session\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsession = await this.entityClient.load(SessionTypeRef, sessionId)\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t\t\tconsole.log(\"Failed to load session\", e)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tsession.state !== SessionState.SESSION_STATE_PENDING &&\n\t\t\t\t\t\tthis.otherLoginDialog &&\n\t\t\t\t\t\tisSameId(neverNull(this.otherLoginSessionId), sessionId)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.otherLoginDialog.close()\n\n\t\t\t\t\t\tthis.otherLoginSessionId = null\n\t\t\t\t\t\tthis.otherLoginDialog = null\n\t\t\t\t\t}\n\t\t\t\t} else if (update.operation === OperationType.DELETE && this.otherLoginSessionId && isSameId(this.otherLoginSessionId, sessionId)) {\n\t\t\t\t\tif (this.otherLoginDialog) {\n\t\t\t\t\t\tthis.otherLoginDialog.close()\n\n\t\t\t\t\t\tthis.otherLoginSessionId = null\n\t\t\t\t\t\tthis.otherLoginDialog = null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate showConfirmLoginDialog(session: Session) {\n\t\tlet text: string\n\n\t\tif (session.loginIpAddress) {\n\t\t\ttext = lang.get(\"secondFactorConfirmLogin_msg\", {\n\t\t\t\t\"{clientIdentifier}\": session.clientIdentifier,\n\t\t\t\t\"{ipAddress}\": session.loginIpAddress,\n\t\t\t})\n\t\t} else {\n\t\t\ttext = lang.get(\"secondFactorConfirmLoginNoIp_msg\", {\n\t\t\t\t\"{clientIdentifier}\": session.clientIdentifier,\n\t\t\t})\n\t\t}\n\n\t\tthis.otherLoginDialog = Dialog.showActionDialog({\n\t\t\ttitle: \"secondFactorConfirmLogin_label\",\n\t\t\tchild: {\n\t\t\t\tview: () => m(\".text-break.pt\", text),\n\t\t\t},\n\t\t\tokAction: async () => {\n\t\t\t\tawait this.loginFacade.authenticateWithSecondFactor(\n\t\t\t\t\tcreateSecondFactorAuthData({\n\t\t\t\t\t\tsession: session._id,\n\t\t\t\t\t\ttype: null, // Marker for confirming another session\n\t\t\t\t\t\totpCode: null,\n\t\t\t\t\t\tu2f: null,\n\t\t\t\t\t\twebauthn: null,\n\t\t\t\t\t}),\n\t\t\t\t)\n\n\t\t\t\tif (this.otherLoginDialog) {\n\t\t\t\t\tthis.otherLoginDialog.close()\n\n\t\t\t\t\tthis.otherLoginSessionId = null\n\t\t\t\t\tthis.otherLoginDialog = null\n\t\t\t\t}\n\t\t\t},\n\t\t})\n\t\t// close the dialog manually after 1 min because the session is not updated if the other client is closed\n\t\tlet sessionId = session._id\n\t\tsetTimeout(() => {\n\t\t\tif (this.otherLoginDialog && isSameId(neverNull(this.otherLoginSessionId), sessionId)) {\n\t\t\t\tthis.otherLoginDialog.close()\n\n\t\t\t\tthis.otherLoginSessionId = null\n\t\t\t\tthis.otherLoginDialog = null\n\t\t\t}\n\t\t}, 60 * 1000)\n\t}\n\n\tcloseWaitingForSecondFactorDialog() {\n\t\tthis.waitingForSecondFactorDialog?.close()\n\t\tthis.waitingForSecondFactorDialog = null\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tasync showSecondFactorAuthenticationDialog(sessionId: IdTuple, challenges: ReadonlyArray<Challenge>, mailAddress: string | null) {\n\t\tif (this.waitingForSecondFactorDialog) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.waitingForSecondFactorDialog = SecondFactorAuthDialog.show(\n\t\t\tthis.webauthnClient,\n\t\t\tthis.loginFacade,\n\t\t\tthis.domainConfigProvider,\n\t\t\t{\n\t\t\t\tsessionId,\n\t\t\t\tchallenges,\n\t\t\t\tmailAddress,\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tthis.waitingForSecondFactorDialog = null\n\t\t\t},\n\t\t)\n\t}\n}\n","import { decode } from \"cborg\"\nimport { assert, downcast, getFirstOrThrow, partitionAsync, stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\nimport type { U2fChallenge, U2fRegisteredDevice, WebauthnResponseData } from \"../../../api/entities/sys/TypeRefs.js\"\nimport { createU2fRegisteredDevice, createWebauthnResponseData, U2fKey } from \"../../../api/entities/sys/TypeRefs.js\"\nimport { WebAuthnFacade } from \"../../../native/common/generatedipc/WebAuthnFacade.js\"\nimport { WebauthnKeyDescriptor } from \"../../../native/common/generatedipc/WebauthnKeyDescriptor.js\"\nimport { getApiBaseUrl } from \"../../../api/common/Env.js\"\nimport { Const } from \"../../../api/common/TutanotaConstants.js\"\nimport { DomainConfigProvider } from \"../../../api/common/DomainConfigProvider.js\"\n\n/** Web authentication entry point for the rest of the app. */\nexport class WebauthnClient {\n\tconstructor(private readonly webauthn: WebAuthnFacade, private readonly domainConfigProvider: DomainConfigProvider, private readonly isApp: boolean) {}\n\n\tisSupported(): Promise<boolean> {\n\t\treturn this.webauthn.isSupported()\n\t}\n\n\t/** Whether it's possible to attempt a challenge. It might not be possible if there are not keys for this domain. */\n\tasync canAttemptChallenge(challenge: U2fChallenge): Promise<{ canAttempt: Array<U2fKey>; cannotAttempt: Array<U2fKey> }> {\n\t\t// Whitelabel keys can ge registered other (whitelabel) domains.\n\t\t// If it's a new Webauthn key it will match rpId, otherwise it will match legacy appId.\n\n\t\t// Partition in keys that might work and which certainly cannot work.\n\t\tconst [canAttempt, cannotAttempt] = await partitionAsync(\n\t\t\tchallenge.keys,\n\t\t\tasync (k) => (await this.webauthn.canAttemptChallengeForRpId(k.appId)) || (await this.webauthn.canAttemptChallengeForU2FAppId(k.appId)),\n\t\t)\n\t\treturn { canAttempt, cannotAttempt }\n\t}\n\n\tasync register(userId: Id, displayName: string): Promise<U2fRegisteredDevice> {\n\t\tconst challenge = this.getChallenge()\n\t\t// this must be at most 64 bytes because the authenticators are allowed to truncate it\n\t\t// https://www.w3.org/TR/webauthn-2/#user-handle\n\t\tconst name = `userId=\"${userId}\"`\n\t\tconst registrationResult = await this.webauthn.register({ challenge, userId, name, displayName, domain: this.selectRegistrationUrl() })\n\t\tconst attestationObject = this.parseAttestationObject(registrationResult.attestationObject)\n\t\tconst publicKey = this.parsePublicKey(downcast(attestationObject).authData)\n\n\t\treturn createU2fRegisteredDevice({\n\t\t\tkeyHandle: new Uint8Array(registrationResult.rawId),\n\t\t\t// For Webauthn keys we save rpId into appId. They do not conflict: one of them is json URL, another is domain.\n\t\t\tappId: registrationResult.rpId,\n\t\t\tpublicKey: this.serializePublicKey(publicKey),\n\t\t\tcompromised: false,\n\t\t\tcounter: \"-1\",\n\t\t})\n\t}\n\n\tprivate selectRegistrationUrl() {\n\t\tconst domainConfig = this.domainConfigProvider.getCurrentDomainConfig()\n\t\treturn this.getWebauthnUrl(domainConfig, \"new\")\n\t}\n\n\t/**\n\t * Attempt to complete Webauthn challenge (the local part, signing of the data).\n\t * U2fChallenge might have multiple keys for different domains and this method takes care of picking the one we can attempt to solve.\n\t * @return responseData to send to the server and base api url which should be contacted in order to finish the challenge\n\t * @throws CancelledError\n\t * @throws WebauthnError\n\t */\n\tasync authenticate(challenge: U2fChallenge): Promise<{ responseData: WebauthnResponseData; apiBaseUrl: string }> {\n\t\tconst allowedKeys: WebauthnKeyDescriptor[] = challenge.keys.map((key) => {\n\t\t\treturn {\n\t\t\t\tid: key.keyHandle,\n\t\t\t}\n\t\t})\n\n\t\tconst authenticationUrl = this.selectAuthenticationUrl(challenge)\n\t\tconst signResult = await this.webauthn.sign({\n\t\t\tchallenge: challenge.challenge,\n\t\t\tkeys: allowedKeys,\n\t\t\tdomain: authenticationUrl,\n\t\t})\n\n\t\tconst responseData = createWebauthnResponseData({\n\t\t\tkeyHandle: new Uint8Array(signResult.rawId),\n\t\t\tclientData: new Uint8Array(signResult.clientDataJSON),\n\t\t\tsignature: new Uint8Array(signResult.signature),\n\t\t\tauthenticatorData: new Uint8Array(signResult.authenticatorData),\n\t\t})\n\t\t// take https://app.tuta.com/webauthn and convert it to apis://app.tuta.com\n\t\tconst authUrlObject = new URL(authenticationUrl)\n\t\tconst domainConfig = this.domainConfigProvider.getDomainConfigForHostname(authUrlObject.hostname, authUrlObject.protocol, authUrlObject.port)\n\t\tconst apiUrl = getApiBaseUrl(domainConfig)\n\n\t\treturn { responseData, apiBaseUrl: apiUrl }\n\t}\n\n\tabortCurrentOperation(): Promise<void> {\n\t\treturn this.webauthn.abortCurrentOperation()\n\t}\n\n\tprivate selectAuthenticationUrl(challenge: U2fChallenge): string {\n\t\t// We need to figure our for which page we need to open authentication based on the keys that user has added because users can register keys for our\n\t\t// domains as well as for whitelabel domains.\n\n\t\tconst domainConfig = this.domainConfigProvider.getCurrentDomainConfig()\n\t\tif (challenge.keys.some((k) => k.appId === Const.WEBAUTHN_RP_ID)) {\n\t\t\t// This function is not needed for the webapp! We can safely assume that our clientWebRoot is a new domain.\n\t\t\treturn this.getWebauthnUrl(domainConfig, \"new\")\n\t\t} else if (challenge.keys.some((k) => k.appId === Const.LEGACY_WEBAUTHN_RP_ID)) {\n\t\t\t// If there's a Webauthn key for our old domain we need to open the webapp on the old domain.\n\t\t\treturn this.getWebauthnUrl(domainConfig, \"legacy\")\n\t\t} else {\n\t\t\t// If it isn't there, look for any Webauthn key. Legacy U2F key ids ends with json subpath.\n\t\t\tconst webauthnKey = challenge.keys.find((k) => !this.isLegacyU2fKey(k))\n\t\t\tif (webauthnKey) {\n\t\t\t\tconst domainConfigForHostname = this.domainConfigProvider.getDomainConfigForHostname(webauthnKey.appId, \"https:\")\n\t\t\t\treturn this.getWebauthnUrl(domainConfigForHostname, \"new\")\n\t\t\t} else if (challenge.keys.some((k) => k.appId === Const.U2F_LEGACY_APPID)) {\n\t\t\t\t// There are only legacy U2F keys but there is one for our domain, take it\n\t\t\t\treturn this.getWebauthnUrl(domainConfig, \"legacy\")\n\t\t\t} else {\n\t\t\t\t// Nothing else worked, select legacy U2F key for whitelabel domain\n\t\t\t\tconst keyToUse = getFirstOrThrow(challenge.keys)\n\t\t\t\tconst keyUrl = new URL(keyToUse.appId)\n\t\t\t\tconst domainConfigForHostname = this.domainConfigProvider.getDomainConfigForHostname(keyUrl.hostname, keyUrl.protocol, keyUrl.port)\n\t\t\t\treturn this.getWebauthnUrl(domainConfigForHostname, \"new\")\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getWebauthnUrl(domainConfig: DomainConfig, type: \"legacy\" | \"new\") {\n\t\tif (type === \"legacy\") {\n\t\t\treturn this.isApp ? domainConfig.legacyWebauthnMobileUrl : domainConfig.legacyWebauthnUrl\n\t\t} else {\n\t\t\treturn this.isApp ? domainConfig.webauthnMobileUrl : domainConfig.webauthnUrl\n\t\t}\n\t}\n\n\tprivate isLegacyU2fKey(key: U2fKey): boolean {\n\t\treturn key.appId.endsWith(Const.U2f_APPID_SUFFIX)\n\t}\n\n\tprivate getChallenge(): Uint8Array {\n\t\t// Should be replaced with our own entropy generator in the future.\n\t\tconst random = new Uint8Array(32)\n\t\tcrypto.getRandomValues(random)\n\t\treturn random\n\t}\n\n\tprivate parseAttestationObject(raw: ArrayBuffer): unknown {\n\t\treturn decode(new Uint8Array(raw))\n\t}\n\n\tprivate parsePublicKey(authData: Uint8Array): Map<number, number | Uint8Array> {\n\t\t// get the length of the credential ID\n\t\tconst dataView = new DataView(new ArrayBuffer(2))\n\t\tconst idLenBytes = authData.slice(53, 55)\n\t\tfor (const [index, value] of idLenBytes.entries()) {\n\t\t\tdataView.setUint8(index, value)\n\t\t}\n\t\tconst credentialIdLength = dataView.getUint16(0)\n\t\t// get the public key object\n\t\tconst publicKeyBytes = authData.slice(55 + credentialIdLength)\n\t\t// the publicKeyBytes are encoded again as CBOR\n\t\t// We have to use maps here because keys are numeric and cborg only allows them in maps\n\t\treturn decode(new Uint8Array(publicKeyBytes.buffer), {\n\t\t\tuseMaps: true,\n\t\t})\n\t}\n\n\tprivate serializePublicKey(publicKey: Map<number, number | Uint8Array>): Uint8Array {\n\t\tconst encoded = new Uint8Array(65)\n\t\tencoded[0] = 0x04\n\t\tconst x = publicKey.get(-2)\n\t\tconst y = publicKey.get(-3)\n\n\t\tif (!(x instanceof Uint8Array) || !(y instanceof Uint8Array)) {\n\t\t\tthrow new Error(\"Public key is in unknown format\")\n\t\t}\n\n\t\tencoded.set(x, 1)\n\t\tencoded.set(y, 33)\n\t\treturn encoded\n\t}\n}\n\n/** authenticators are allowed to truncate strings to this length */\nconst WEBAUTHN_STRING_MAX_BYTE_LENGTH = 64\n\n/**\n * some authenticators truncate this and others refuse to be registered\n * at all if this validation does not pass.\n *\n * Note: technically, we'd also be supposed to encode text direction and a language\n * code into the display name.\n */\nexport function validateWebauthnDisplayName(displayName: string): boolean {\n\treturn WEBAUTHN_STRING_MAX_BYTE_LENGTH - stringToUtf8Uint8Array(displayName).byteLength >= 0\n}\n","import type { DeferredObject, lazy, lazyAsync } from \"@tutao/tutanota-utils\"\nimport { assertNotNull, defer } from \"@tutao/tutanota-utils\"\nimport { assertMainOrNodeBoot } from \"../common/Env\"\nimport type { UserController, UserControllerInitData } from \"./UserController\"\nimport { getWhitelabelCustomizations } from \"../../misc/WhitelabelCustomizations.js\"\nimport { NotFoundError } from \"../common/error/RestError\"\nimport { client } from \"../../misc/ClientDetector\"\nimport type { LoginFacade, NewSessionData } from \"../worker/facades/LoginFacade\"\nimport { ResumeSessionErrorReason } from \"../worker/facades/LoginFacade\"\nimport type { Credentials } from \"../../misc/credentials/Credentials\"\nimport { FeatureType, KdfType } from \"../common/TutanotaConstants\"\nimport { SessionType } from \"../common/SessionType\"\nimport { ExternalUserKeyDeriver } from \"../../misc/LoginUtils.js\"\nimport { UnencryptedCredentials } from \"../../native/common/generatedipc/UnencryptedCredentials.js\"\nimport { PageContextLoginListener } from \"./PageContextLoginListener.js\"\nimport { CacheMode } from \"../worker/rest/EntityRestClient.js\"\n\nassertMainOrNodeBoot()\n\nexport interface PostLoginAction {\n\t/** Partial login is achieved with getting the user, can happen offline. The login will wait for the returned promise. */\n\tonPartialLoginSuccess(loggedInEvent: LoggedInEvent): Promise<void>\n\n\t/** Full login is achieved with getting group keys. Can do service calls from this point on. */\n\tonFullLoginSuccess(loggedInEvent: LoggedInEvent): Promise<void>\n}\n\nexport type LoggedInEvent = {\n\treadonly sessionType: SessionType\n\treadonly userId: Id\n}\n\nexport type ResumeSessionResult = { type: \"success\" } | { type: \"error\"; reason: ResumeSessionErrorReason }\n\nexport class LoginController {\n\tprivate userController: UserController | null = null\n\t// they are FeatureType but we might not be aware of newer values for it, so it is not just FeatureType\n\tprivate customizations: NumberString[] | null = null\n\tprivate partialLogin: DeferredObject<void> = defer()\n\tprivate _isWhitelabel: boolean = !!getWhitelabelCustomizations(window)\n\tprivate postLoginActions: Array<lazy<Promise<PostLoginAction>>> = []\n\tprivate fullyLoggedIn: boolean = false\n\tprivate atLeastPartiallyLoggedIn: boolean = false\n\n\tconstructor(\n\t\tprivate readonly loginFacade: LoginFacade,\n\t\tprivate readonly loginListener: lazyAsync<PageContextLoginListener>,\n\t\tprivate readonly resetAppState: () => Promise<unknown>,\n\t) {}\n\n\tinit() {\n\t\tthis.waitForFullLogin().then(async () => {\n\t\t\tthis.fullyLoggedIn = true\n\t\t\tawait this.waitForPartialLogin()\n\t\t\tfor (const lazyAction of this.postLoginActions) {\n\t\t\t\tconst action = await lazyAction()\n\t\t\t\tawait action.onFullLoginSuccess({\n\t\t\t\t\tsessionType: this.getUserController().sessionType,\n\t\t\t\t\tuserId: this.getUserController().userId,\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * create a new session and set up stored credentials and offline database, if applicable.\n\t * @param username the mail address being used to log in\n\t * @param password the password given to log in\n\t * @param sessionType whether to store the credentials in local storage\n\t * @param databaseKey if given, will use this key for the offline database. if not, will force a new database to be created and generate a key.\n\t */\n\tasync createSession(username: string, password: string, sessionType: SessionType, databaseKey: Uint8Array | null = null): Promise<NewSessionData> {\n\t\tconst newSessionData = await this.loginFacade.createSession(username, password, client.getIdentifier(), sessionType, databaseKey)\n\t\tconst { user, credentials, sessionId, userGroupInfo } = newSessionData\n\t\tawait this.onPartialLoginSuccess(\n\t\t\t{\n\t\t\t\tuser,\n\t\t\t\tuserGroupInfo,\n\t\t\t\tsessionId,\n\t\t\t\taccessToken: credentials.accessToken,\n\t\t\t\tsessionType,\n\t\t\t\tloginUsername: username,\n\t\t\t},\n\t\t\tsessionType,\n\t\t)\n\t\treturn newSessionData\n\t}\n\n\taddPostLoginAction(handler: lazy<Promise<PostLoginAction>>) {\n\t\tthis.postLoginActions.push(handler)\n\t}\n\n\tasync onPartialLoginSuccess(initData: UserControllerInitData, sessionType: SessionType): Promise<void> {\n\t\tconst { initUserController } = await import(\"./UserController\")\n\t\tthis.userController = await initUserController(initData)\n\n\t\tawait this.loadCustomizations()\n\t\tawait this._determineIfWhitelabel()\n\n\t\tfor (const lazyHandler of this.postLoginActions) {\n\t\t\tconst handler = await lazyHandler()\n\t\t\tawait handler.onPartialLoginSuccess({\n\t\t\t\tsessionType,\n\t\t\t\tuserId: initData.user._id,\n\t\t\t})\n\t\t}\n\t\tthis.atLeastPartiallyLoggedIn = true\n\t\tthis.partialLogin.resolve()\n\t}\n\n\tasync createExternalSession(\n\t\tuserId: Id,\n\t\tpassword: string,\n\t\tsalt: Uint8Array,\n\t\tkdfType: KdfType,\n\t\tclientIdentifier: string,\n\t\tsessionType: SessionType,\n\t): Promise<Credentials> {\n\t\tconst persistentSession = sessionType === SessionType.Persistent\n\t\tconst { user, credentials, sessionId, userGroupInfo } = await this.loginFacade.createExternalSession(\n\t\t\tuserId,\n\t\t\tpassword,\n\t\t\tsalt,\n\t\t\tkdfType,\n\t\t\tclientIdentifier,\n\t\t\tpersistentSession,\n\t\t)\n\t\tawait this.onPartialLoginSuccess(\n\t\t\t{\n\t\t\t\tuser,\n\t\t\t\taccessToken: credentials.accessToken,\n\t\t\t\tsessionType,\n\t\t\t\tsessionId,\n\t\t\t\tuserGroupInfo,\n\t\t\t\tloginUsername: userId,\n\t\t\t},\n\t\t\tSessionType.Login,\n\t\t)\n\t\treturn credentials\n\t}\n\n\t/**\n\t * Resume an existing session using stored credentials, may or may not unlock a persistent local database\n\t * @param unencryptedCredentials The stored credentials and optional database key for the offline db\n\t * @param externalUserKeyDeriver The KDF type and salt to resume a session\n\t * @param offlineTimeRangeDays the user configured time range for their offline storage, used to initialize the offline db\n\t */\n\tasync resumeSession(\n\t\tunencryptedCredentials: UnencryptedCredentials,\n\t\texternalUserKeyDeriver?: ExternalUserKeyDeriver | null,\n\t\tofflineTimeRangeDays?: number | null,\n\t): Promise<ResumeSessionResult> {\n\t\tconst { unencryptedToCredentials } = await import(\"../../misc/credentials/Credentials.js\")\n\t\tconst credentials = unencryptedToCredentials(unencryptedCredentials)\n\t\tconst resumeResult = await this.loginFacade.resumeSession(\n\t\t\tcredentials,\n\t\t\texternalUserKeyDeriver ?? null,\n\t\t\tunencryptedCredentials.databaseKey ?? null,\n\t\t\tofflineTimeRangeDays ?? null,\n\t\t)\n\t\tif (resumeResult.type === \"error\") {\n\t\t\treturn resumeResult\n\t\t} else {\n\t\t\tconst { user, userGroupInfo, sessionId } = resumeResult.data\n\t\t\ttry {\n\t\t\t\tawait this.onPartialLoginSuccess(\n\t\t\t\t\t{\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\taccessToken: credentials.accessToken,\n\t\t\t\t\t\tuserGroupInfo,\n\t\t\t\t\t\tsessionId,\n\t\t\t\t\t\tsessionType: SessionType.Persistent,\n\t\t\t\t\t\tloginUsername: credentials.login,\n\t\t\t\t\t},\n\t\t\t\t\tSessionType.Persistent,\n\t\t\t\t)\n\t\t\t} catch (e) {\n\t\t\t\t// Some parts of initialization can fail and we should reset the state, both on this side and the worker\n\t\t\t\t// side, otherwise login cannot be attempted again\n\t\t\t\tconsole.log(\"Error finishing login, logging out now!\", e)\n\t\t\t\tawait this.logout(false)\n\t\t\t\tthrow e\n\t\t\t}\n\n\t\t\treturn { type: \"success\" }\n\t\t}\n\t}\n\n\tisUserLoggedIn(): boolean {\n\t\treturn this.userController != null\n\t}\n\n\tisFullyLoggedIn(): boolean {\n\t\treturn this.fullyLoggedIn\n\t}\n\n\tisAtLeastPartiallyLoggedIn(): boolean {\n\t\treturn this.atLeastPartiallyLoggedIn\n\t}\n\n\twaitForPartialLogin(): Promise<void> {\n\t\treturn this.partialLogin.promise\n\t}\n\n\tasync waitForFullLogin(): Promise<void> {\n\t\t// Full login event might be received before we finish userLogin on the client side because they are done in parallel.\n\t\t// So we make sure to wait for userLogin first.\n\t\tawait this.waitForPartialLogin()\n\t\tconst loginListener = await this.loginListener()\n\t\treturn loginListener.waitForFullLogin()\n\t}\n\n\tisInternalUserLoggedIn(): boolean {\n\t\treturn this.isUserLoggedIn() && this.getUserController().isInternalUser()\n\t}\n\n\tisGlobalAdminUserLoggedIn(): boolean {\n\t\treturn this.isUserLoggedIn() && this.getUserController().isGlobalAdmin()\n\t}\n\n\tgetUserController(): UserController {\n\t\treturn assertNotNull(this.userController) // only to be used after login (when user is defined)\n\t}\n\n\tisEnabled(feature: FeatureType): boolean {\n\t\treturn this.customizations != null ? this.customizations.indexOf(feature) !== -1 : false\n\t}\n\n\tasync loadCustomizations(cacheMode: CacheMode = CacheMode.ReadAndWrite): Promise<void> {\n\t\tif (this.getUserController().isInternalUser()) {\n\t\t\tconst customer = await this.getUserController().loadCustomer(cacheMode)\n\t\t\tthis.customizations = customer.customizations.map((f) => f.feature)\n\t\t}\n\t}\n\n\t/**\n\t * Reset login state, delete session, if not {@link SessionType.Persistent}.\n\t * @param sync whether to try and close the session before the window is closed\n\t */\n\tasync logout(sync: boolean): Promise<void> {\n\t\t// make all parts of LoginController usable for another login\n\t\tif (this.userController) {\n\t\t\tawait this.userController.deleteSession(sync)\n\t\t} else {\n\t\t\tconsole.log(\"No session to delete\")\n\t\t}\n\t\t// Using this over LoginFacade.resetSession() to reset all app state that might have been already bound to\n\t\t// a user on the worker side.\n\t\tawait this.resetAppState()\n\t\tthis.userController = null\n\t\tthis.partialLogin = defer()\n\t\tthis.fullyLoggedIn = false\n\t\tconst loginListener = await this.loginListener()\n\t\tloginListener.reset()\n\t\tthis.init()\n\t}\n\n\tasync _determineIfWhitelabel(): Promise<void> {\n\t\tthis._isWhitelabel = await this.getUserController().isWhitelabelAccount()\n\t}\n\n\tisWhitelabel(): boolean {\n\t\treturn this._isWhitelabel\n\t}\n\n\t/**\n\t * Deletes the session on the server.\n\t * @param credentials\n\t * @param pushIdentifier identifier associated with this device, if any, to delete PushIdentifier on the server\n\t */\n\tasync deleteOldSession(credentials: UnencryptedCredentials, pushIdentifier: string | null = null): Promise<void> {\n\t\ttry {\n\t\t\tawait this.loginFacade.deleteSession(credentials.accessToken, pushIdentifier)\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\tconsole.log(\"session already deleted\")\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\tasync retryAsyncLogin() {\n\t\tconst loginListener = await this.loginListener()\n\t\tloginListener.onRetryLogin()\n\t\tawait this.loginFacade.retryAsyncLogin()\n\t}\n}\n","import { createNewsIn, NewsId, NewsOut } from \"../../api/entities/tutanota/TypeRefs.js\"\nimport { IServiceExecutor } from \"../../api/common/ServiceRequest.js\"\nimport { NewsService } from \"../../api/entities/tutanota/Services.js\"\nimport { NotFoundError } from \"../../api/common/error/RestError.js\"\nimport { NewsListItem } from \"./NewsListItem.js\"\nimport { isIOSApp } from \"../../api/common/Env.js\"\n\n/**\n * Interface for storing information about displayed news items on the device.\n */\nexport interface NewsItemStorage {\n\tacknowledgeNewsItemForDevice(newsId: Id): void\n\n\thasAcknowledgedNewsItemForDevice(newsId: Id): boolean\n}\n\n/**\n * Makes calls to the NewsService in order to load the user's unacknowledged NewsItems and stores them.\n */\nexport class NewsModel {\n\tliveNewsIds: NewsId[] = []\n\tliveNewsListItems: Record<string, NewsListItem> = {}\n\n\tconstructor(\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly storage: NewsItemStorage,\n\t\tprivate readonly newsListItemFactory: (name: string) => Promise<NewsListItem | null>,\n\t) {}\n\n\t/**\n\t * Loads the user's unacknowledged NewsItems.\n\t */\n\tasync loadNewsIds(): Promise<NewsId[]> {\n\t\tconst response: NewsOut = await this.serviceExecutor.get(NewsService, null)\n\n\t\tthis.liveNewsIds = []\n\t\tthis.liveNewsListItems = {}\n\n\t\tfor (const newsItemId of response.newsItemIds) {\n\t\t\tconst newsItemName = newsItemId.newsItemName\n\t\t\tconst newsListItem = await this.newsListItemFactory(newsItemName)\n\n\t\t\tif (!!newsListItem && (await newsListItem.isShown(newsItemId))) {\n\t\t\t\t// we can't display those news items unless we allow apple payments\n\t\t\t\tconst unsupportedIosNewsItem = isIOSApp() && [\"newPlans\", \"newPlansOfferEnding\"].includes(newsItemId.newsItemName)\n\t\t\t\tif (!unsupportedIosNewsItem) {\n\t\t\t\t\tthis.liveNewsIds.push(newsItemId)\n\t\t\t\t\tthis.liveNewsListItems[newsItemName] = newsListItem\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.liveNewsIds\n\t}\n\n\t/**\n\t * Acknowledges the NewsItem with the given ID.\n\t */\n\tasync acknowledgeNews(newsItemId: Id): Promise<boolean> {\n\t\tconst data = createNewsIn({ newsItemId })\n\n\t\ttry {\n\t\t\tawait this.serviceExecutor.post(NewsService, data)\n\t\t\treturn true\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t// NewsItem not found, likely deleted on the server\n\t\t\t\tconsole.log(`Could not acknowledge newsItem with ID '${newsItemId}'`)\n\t\t\t\treturn false\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t} finally {\n\t\t\tawait this.loadNewsIds()\n\t\t}\n\t}\n\n\tacknowledgeNewsForDevice(newsItemId: Id) {\n\t\treturn this.storage.acknowledgeNewsItemForDevice(newsItemId)\n\t}\n\n\thasAcknowledgedNewsForDevice(newsItemId: Id): boolean {\n\t\treturn this.storage.hasAcknowledgedNewsItemForDevice(newsItemId)\n\t}\n}\n","import { WsConnectionState } from \"../api/main/WorkerClient.js\"\nimport stream from \"mithril/stream\"\nimport { identity } from \"@tutao/tutanota-utils\"\nimport { CloseEventBusOption } from \"../api/common/TutanotaConstants.js\"\nimport { WebsocketLeaderStatus } from \"../api/entities/sys/TypeRefs.js\"\nimport { ExposedEventBus } from \"../api/worker/workerInterfaces.js\"\n\nexport interface WebsocketConnectivityListener {\n\tupdateWebSocketState(wsConnectionState: WsConnectionState): Promise<void>\n\tonLeaderStatusChanged(leaderStatus: WebsocketLeaderStatus): Promise<void>\n}\n\n/** A web page thread view on websocket/event bus. */\nexport class WebsocketConnectivityModel implements WebsocketConnectivityListener {\n\tprivate readonly wsState = stream<WsConnectionState>(WsConnectionState.terminated)\n\tprivate leaderStatus: boolean = false\n\n\tconstructor(private readonly eventBus: ExposedEventBus) {}\n\n\tasync updateWebSocketState(wsConnectionState: WsConnectionState): Promise<void> {\n\t\tthis.wsState(wsConnectionState)\n\t}\n\n\tasync onLeaderStatusChanged(leaderStatus: WebsocketLeaderStatus): Promise<void> {\n\t\tthis.leaderStatus = leaderStatus.leaderStatus\n\t}\n\n\tisLeader(): boolean {\n\t\treturn this.leaderStatus\n\t}\n\n\twsConnection(): stream<WsConnectionState> {\n\t\t// .map() to make a defensive copy\n\t\treturn this.wsState.map(identity)\n\t}\n\n\ttryReconnect(closeIfOpen: boolean, enableAutomaticState: boolean, delay: number | null = null): Promise<void> {\n\t\treturn this.eventBus.tryReconnect(closeIfOpen, enableAutomaticState, delay)\n\t}\n\n\tclose(option: CloseEventBusOption) {\n\t\treturn this.eventBus.close(option)\n\t}\n}\n","import stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\n\nexport type OperationId = number\n\nexport type ExposedOperationProgressTracker = Pick<OperationProgressTracker, \"onProgress\">\n\n/**\n * This is a multiplexer for tracking individual remote async operations.\n * Unlike {@link ProgressTracker} does not accumulate the progress and doesn't compute the percentage from units of work.\n *\n * progress is tracked with numbers between 0 and 100\n */\nexport class OperationProgressTracker {\n\tprivate readonly progressPerOp: Map<OperationId, Stream<number>> = new Map()\n\tprivate operationId = 0\n\n\t/**\n\t * Prepares a new operation and gives a handle for it which contains:\n\t *   - id for sending updates\n\t *   - progress, a stream to observe\n\t *   - done, a handle to stop tracking the operation progress\n\t */\n\tstartNewOperation(): { id: OperationId; progress: Stream<number>; done: () => unknown } {\n\t\tconst id = this.operationId++\n\t\tconst progress = stream<number>(0)\n\t\tthis.progressPerOp.set(id, progress)\n\t\treturn { id, progress, done: () => this.progressPerOp.delete(id) }\n\t}\n\n\t/** Updates the progress for {@param operation} with {@param progressValue}. */\n\tasync onProgress(operation: OperationId, progressValue: number): Promise<void> {\n\t\tthis.progressPerOp.get(operation)?.(progressValue)\n\t}\n}\n","import m from \"mithril\"\nimport { show as showNotificationOverlay } from \"./base/NotificationOverlay\"\nimport { lang, TranslationKey } from \"../misc/LanguageViewModel\"\nimport { assertMainOrNode } from \"../api/common/Env\"\nimport { SearchIndexStateInfo } from \"../api/worker/search/SearchTypes.js\"\n\nassertMainOrNode()\n\nexport interface InfoMessage {\n\ttranslationKey: TranslationKey\n\targs: Record<string, any>\n}\n\nexport class InfoMessageHandler {\n\tconstructor(private readonly handleIndexStateUpdate: (state: SearchIndexStateInfo) => void) {}\n\n\tasync onInfoMessage(message: InfoMessage): Promise<void> {\n\t\tshowNotificationOverlay(\n\t\t\t{\n\t\t\t\tview: () => m(\"\", lang.get(message.translationKey, message.args)),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"close_alt\",\n\t\t\t},\n\t\t\t[],\n\t\t)\n\t}\n\n\tasync onSearchIndexStateUpdate(state: SearchIndexStateInfo): Promise<void> {\n\t\tthis.handleIndexStateUpdate(state)\n\t}\n}\n","import m, { Component, Vnode } from \"mithril\"\n\nexport type ProgressBarAttrs = {\n\tprogress: number\n\ttype?: ProgressBarType\n}\n\nexport enum ProgressBarType {\n\tSmall,\n\tLarge,\n}\n\nexport const PROGRESS_DONE = 1\n\n/**\n * a progress bar that takes a progress value and displays it as\n * a portion of its containers width\n */\nexport class ProgressBar implements Component<ProgressBarAttrs> {\n\tprivate lastProgress: number | null = null\n\n\tview(vnode: Vnode<ProgressBarAttrs>) {\n\t\tconst a = vnode.attrs\n\t\tif (this.lastProgress === null && a.progress >= PROGRESS_DONE) {\n\t\t\t// no need to draw anything if we went from 0 to 100 real quick\n\t\t\treturn null\n\t\t}\n\n\t\tif (this.lastProgress !== null && this.lastProgress >= PROGRESS_DONE) {\n\t\t\t// on the last redraw, we were done\n\t\t\t// so we can start to remove now\n\t\t\treturn null\n\t\t}\n\t\tif (a.progress >= PROGRESS_DONE) {\n\t\t\t// schedule the removal redraw now because\n\t\t\t// we might not get another redraw for a while\n\t\t\t// otherwise (since progress is done)\n\t\t\tm.redraw()\n\t\t}\n\n\t\tthis.lastProgress = a.progress\n\t\tlet progressBarSelector = a.type == ProgressBarType.Large ? \".abs.accent-bg.border-radius-big\" : \".abs.accent-bg\"\n\t\treturn m(progressBarSelector, {\n\t\t\tonbeforeremove: (vn) =>\n\t\t\t\tnew Promise<void>((resolve) => {\n\t\t\t\t\tvn.dom.addEventListener(\"transitionend\", () => {\n\t\t\t\t\t\tthis.lastProgress = null\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t})\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.lastProgress = null\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t}, 500)\n\t\t\t\t}),\n\t\t\tstyle: {\n\t\t\t\ttop: 0,\n\t\t\t\tleft: 0,\n\t\t\t\ttransition: \"width 500ms\",\n\t\t\t\twidth: a.progress * 100 + \"%\",\n\t\t\t\theight: a.type == ProgressBarType.Large ? \"100%\" : \"2px\",\n\t\t\t},\n\t\t})\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport { isSameDayOfDate, noOp } from \"@tutao/tutanota-utils\"\nimport { lang } from \"../../misc/LanguageViewModel\"\n\nexport const enum OfflineIndicatorState {\n\tOffline = 0,\n\tConnecting = 1,\n\tSynchronizing = 2,\n\tOnline = 3,\n}\n\nexport type OfflineIndicatorAttrs =\n\t| { state: OfflineIndicatorState.Online; isSingleColumn: boolean }\n\t| { state: OfflineIndicatorState.Connecting; isSingleColumn: boolean }\n\t| { state: OfflineIndicatorState.Synchronizing; progress: number; isSingleColumn: boolean }\n\t| { state: OfflineIndicatorState.Offline; lastUpdate: Date | null; reconnectAction: () => void; isSingleColumn: boolean }\n\n/**\n * the first line of the offline indicator shows if we're offline or online and\n * adds action prompts (if any)\n * it's returned as a span so the consumer can decide how to layout it.\n */\nfunction attrToFirstLine(attr: OfflineIndicatorAttrs): Children {\n\tconst { state } = attr\n\tswitch (state) {\n\t\tcase OfflineIndicatorState.Online:\n\t\tcase OfflineIndicatorState.Synchronizing:\n\t\t\treturn m(\"span\", lang.get(\"online_label\"))\n\t\tcase OfflineIndicatorState.Offline:\n\t\t\treturn m(\"span\", [lang.get(\"offline_label\"), m(\"span.b.content-accent-fg.mlr-s\", lang.get(\"reconnect_action\"))])\n\t\tcase OfflineIndicatorState.Connecting:\n\t\t\treturn m(\"span\", lang.get(\"offline_label\"))\n\t}\n}\n\n/**\n * the second line provides additional information about the current state.\n * it's returned as a span so the consumer can decide how to layout it.\n */\nfunction attrToSecondLine(a: OfflineIndicatorAttrs): Children {\n\tswitch (a.state) {\n\t\tcase OfflineIndicatorState.Online:\n\t\t\treturn m(\"span\", lang.get(\"upToDate_label\"))\n\t\tcase OfflineIndicatorState.Offline:\n\t\t\tif (a.lastUpdate) {\n\t\t\t\treturn m(\"span\", lang.get(\"lastSync_label\", { \"{date}\": formatDate(a.lastUpdate) }))\n\t\t\t} else {\n\t\t\t\t// never synced, don't show last sync label\n\t\t\t\treturn null\n\t\t\t}\n\t\tcase OfflineIndicatorState.Synchronizing:\n\t\t\treturn m(\"span\", lang.get(\"synchronizing_label\", { \"{progress}\": formatPercentage(a.progress) }))\n\t\tcase OfflineIndicatorState.Connecting:\n\t\t\treturn m(\"span\", lang.get(\"reconnecting_label\"))\n\t}\n}\n\n/**\n * format a number as a percentage string with 0 = 0% and 1 = 100%\n */\nfunction formatPercentage(percentage: number): string {\n\treturn `${Math.round(percentage * 100)}%`\n}\n\n/*\n * format a date either as a time without date (if it's today) or\n * as a date without time\n */\nfunction formatDate(date: Date): string {\n\treturn isSameDayOfDate(new Date(), date) ? lang.formats.time.format(date) : lang.formats.simpleDate.format(date)\n}\n\nexport class OfflineIndicator implements Component<OfflineIndicatorAttrs> {\n\tview(vnode: Vnode<OfflineIndicatorAttrs>): Children {\n\t\tconst a = vnode.attrs\n\t\tconst isOffline = a.state === OfflineIndicatorState.Offline\n\t\treturn m(\n\t\t\t\"button.small\",\n\t\t\t{\n\t\t\t\tclass: a.isSingleColumn ? \"center mb-xs\" : \"mlr-l flex col\",\n\t\t\t\ttype: \"button\",\n\t\t\t\thref: \"#\",\n\t\t\t\ttabindex: \"0\",\n\t\t\t\trole: \"button\",\n\t\t\t\t\"aria-disabled\": !isOffline,\n\t\t\t\tonclick: isOffline ? a.reconnectAction : noOp,\n\t\t\t},\n\t\t\ta.isSingleColumn ? attrToFirstLine(a) : [attrToFirstLine(a), attrToSecondLine(a)],\n\t\t)\n\t}\n}\n","import { PROGRESS_DONE } from \"./ProgressBar.js\"\nimport Stream from \"mithril/stream\"\nimport { WsConnectionState } from \"../../api/main/WorkerClient.js\"\nimport { ExposedCacheStorage } from \"../../api/worker/rest/DefaultEntityRestCache.js\"\nimport { PageContextLoginListener } from \"../../api/main/PageContextLoginListener.js\"\nimport { LoginController } from \"../../api/main/LoginController.js\"\nimport { OfflineIndicatorAttrs, OfflineIndicatorState } from \"./OfflineIndicator.js\"\nimport { WebsocketConnectivityModel } from \"../../misc/WebsocketConnectivityModel.js\"\nimport { ProgressTracker } from \"../../api/main/ProgressTracker.js\"\nimport { styles } from \"../styles.js\"\n\n/**\n * the offline indicator must take into account information\n * from multiple different sources:\n * * ws connection state (connected, not connected) from the worker\n * * login state (logged out, partial login, full login)\n * * sync progress\n * * last sync time\n *\n * the state necessary to determine the right indicator state from\n * previous updates from these information sources\n * is maintained in this class\n */\nexport class OfflineIndicatorViewModel {\n\tprivate lastProgress: number = PROGRESS_DONE\n\tprivate lastWsState: WsConnectionState = WsConnectionState.connecting\n\tprivate lastUpdate: Date | null = null\n\t/**\n\t * keeping this prevents flashing misleading states during login when\n\t * the full login succeeded but the ws connection attempt didn't\n\t * succeed or fail yet.\n\t * wsState is \"connecting\" both during first connect attempt and after we\n\t * disconnected.\n\t **/\n\tprivate wsWasConnectedBefore: boolean = false\n\n\tconstructor(\n\t\tprivate readonly cacheStorage: ExposedCacheStorage,\n\t\tprivate readonly loginListener: PageContextLoginListener,\n\t\tprivate readonly connectivityModel: WebsocketConnectivityModel,\n\t\tprivate readonly logins: LoginController,\n\t\tprogressTracker: ProgressTracker,\n\t\tprivate readonly cb: () => void,\n\t) {\n\t\tlogins.waitForFullLogin().then(() => this.cb())\n\t\tthis.setProgressUpdateStream(progressTracker.onProgressUpdate)\n\t\tthis.setWsStateStream(this.connectivityModel.wsConnection())\n\t}\n\n\tprivate setProgressUpdateStream(progressStream: Stream<number>): void {\n\t\tprogressStream.map((progress) => this.onProgressUpdate(progress))\n\t\tthis.onProgressUpdate(progressStream())\n\t}\n\n\tprivate setWsStateStream(wsStream: Stream<WsConnectionState>): void {\n\t\twsStream.map((state) => {\n\t\t\tthis.onWsStateChange(state)\n\t\t})\n\t\tthis.onWsStateChange(wsStream()).then()\n\t}\n\n\tprivate onProgressUpdate(progress: number): void {\n\t\tthis.lastProgress = progress\n\t\tthis.cb()\n\t}\n\n\tprivate async onWsStateChange(newState: WsConnectionState): Promise<void> {\n\t\tthis.lastWsState = newState\n\t\tif (newState !== WsConnectionState.connected) {\n\t\t\tconst lastUpdate = await this.cacheStorage!.getLastUpdateTime()\n\t\t\tswitch (lastUpdate.type) {\n\t\t\t\tcase \"recorded\":\n\t\t\t\t\tthis.lastUpdate = new Date(lastUpdate.time)\n\t\t\t\t\tbreak\n\t\t\t\tcase \"never\":\n\t\t\t\t// We can get into uninitialized state after temporary login e.g. during signup\n\t\t\t\t// falls through\n\t\t\t\tcase \"uninitialized\":\n\t\t\t\t\tthis.lastUpdate = null\n\t\t\t\t\tthis.wsWasConnectedBefore = false\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tthis.wsWasConnectedBefore = true\n\t\t}\n\t\tthis.cb()\n\t}\n\n\tgetCurrentAttrs(): OfflineIndicatorAttrs {\n\t\tconst isSingleColumn = styles.isUsingBottomNavigation()\n\t\tif (this.logins.isFullyLoggedIn() && this.wsWasConnectedBefore) {\n\t\t\tif (this.lastWsState === WsConnectionState.connected) {\n\t\t\t\t// normal, full login with a connected websocket\n\t\t\t\tif (this.lastProgress < PROGRESS_DONE) {\n\t\t\t\t\treturn { state: OfflineIndicatorState.Synchronizing, progress: this.lastProgress, isSingleColumn }\n\t\t\t\t} else {\n\t\t\t\t\treturn { state: OfflineIndicatorState.Online, isSingleColumn }\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// normal, full login with a disconnected websocket\n\t\t\t\treturn {\n\t\t\t\t\tstate: OfflineIndicatorState.Offline,\n\t\t\t\t\tlastUpdate: this.lastUpdate,\n\t\t\t\t\treconnectAction: () => {\n\t\t\t\t\t\tconsole.log(\"try reconnect ws\")\n\t\t\t\t\t\tthis.connectivityModel!.tryReconnect(true, true, 2000)\n\t\t\t\t\t},\n\t\t\t\t\tisSingleColumn,\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// either not fully logged in or the websocket was not connected before\n\t\t\t// in cases where the indicator is visible, this is just offline login.\n\t\t\tif (this.loginListener.getFullLoginFailed()) {\n\t\t\t\treturn {\n\t\t\t\t\tstate: OfflineIndicatorState.Offline,\n\t\t\t\t\tlastUpdate: this.lastUpdate,\n\t\t\t\t\treconnectAction: () => {\n\t\t\t\t\t\tconsole.log(\"try full login\")\n\t\t\t\t\t\tthis.logins!.retryAsyncLogin().finally(() => this.cb())\n\t\t\t\t\t},\n\t\t\t\t\tisSingleColumn,\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// partially logged in, but the last login attempt didn't fail yet\n\t\t\t\treturn { state: OfflineIndicatorState.Connecting, isSingleColumn }\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * get the current progress for sync operations\n\t */\n\tgetProgress(): number {\n\t\t//getting the progress like this ensures that\n\t\t// the progress bar and sync percentage are consistent\n\t\tconst a = this.getCurrentAttrs()\n\t\treturn a.state === OfflineIndicatorState.Synchronizing && this.logins?.isUserLoggedIn() ? a.progress : 1\n\t}\n}\n","import { throttleRoute } from \"../misc/RouteChange.js\"\nimport m from \"mithril\"\nimport { debounceStart } from \"@tutao/tutanota-utils\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\n\n/** URL-related functions */\nexport interface Router {\n\tgetFullPath(): string\n\n\t/** will do parameter substitution like mithril route */\n\trouteTo(path: string, params: Record<string, any>): void\n}\n\nexport class ThrottledRouter implements Router {\n\tprivate readonly throttledRoute = debounceStart(32, throttleRoute())\n\n\tgetFullPath(): string {\n\t\treturn m.route.get()\n\t}\n\n\trouteTo(path: string, params: Record<string, any>) {\n\t\tthis.throttledRoute(path, params)\n\t}\n}\n\n/** router that is scoped to a specific prefix and will ignore the path changes outside of it */\nexport class ScopedRouter<Scope extends string> implements Router {\n\tprivate readonly scope: string\n\n\tconstructor(private readonly router: Router, scope: Scope) {\n\t\tif (!scope.startsWith(\"/\")) {\n\t\t\tthrow new ProgrammingError(`Scope must start with a forward slash! got: ${scope}`)\n\t\t}\n\t\tif (scope.split(\"/\").length > 2) {\n\t\t\tthrow new ProgrammingError(`Does not support nested scopes yet. Easter egg! got: ${scope}`)\n\t\t}\n\t\tthis.scope = scope.substring(1)\n\t}\n\n\tgetFullPath(): string {\n\t\treturn this.router.getFullPath()\n\t}\n\n\trouteTo(path: string, params: Record<string, any>) {\n\t\tif (routeMatchesPrefix(this.scope, this.router.getFullPath())) {\n\t\t\tthis.router.routeTo(path, params)\n\t\t}\n\t}\n}\n\nexport function routeMatchesPrefix(prefixWithoutLeadingSlash: string, route: string): boolean {\n\tconst { path } = m.parsePathname(route)\n\treturn path.split(\"/\")[1] === prefixWithoutLeadingSlash\n}\n","import type { InboxRule, Mail, MailFolder, MoveMailData } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { createMoveMailData } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { InboxRuleType, MailSetKind, MAX_NBR_MOVE_DELETE_MAIL_SERVICE } from \"../../../common/api/common/TutanotaConstants\"\nimport { isDomainName, isRegularExpression } from \"../../../common/misc/FormatValidator\"\nimport { assertNotNull, asyncFind, debounce, ofClass, promiseMap, splitInChunks } from \"@tutao/tutanota-utils\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport type { MailboxDetail } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { LockedError, PreconditionFailedError } from \"../../../common/api/common/error/RestError\"\nimport type { SelectorItemList } from \"../../../common/gui/base/DropDownSelector.js\"\nimport { elementIdPart, isSameId } from \"../../../common/api/common/utils/EntityUtils\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { MailFacade } from \"../../../common/api/worker/facades/lazy/MailFacade.js\"\nimport { LoginController } from \"../../../common/api/main/LoginController.js\"\nimport { throttle } from \"@tutao/tutanota-utils/dist/Utils.js\"\nimport { mailLocator } from \"../../mailLocator.js\"\nimport { getMailHeaders } from \"./MailUtils.js\"\n\nassertMainOrNode()\nconst moveMailDataPerFolder: MoveMailData[] = []\nconst DEBOUNCE_FIRST_MOVE_MAIL_REQUEST_MS = 200\nlet applyingRules = false // used to avoid concurrent application of rules (-> requests to locked service)\n\nasync function sendMoveMailRequest(mailFacade: MailFacade): Promise<void> {\n\tif (moveMailDataPerFolder.length) {\n\t\tconst moveToTargetFolder = assertNotNull(moveMailDataPerFolder.shift())\n\t\tconst mailChunks = splitInChunks(MAX_NBR_MOVE_DELETE_MAIL_SERVICE, moveToTargetFolder.mails)\n\t\tawait promiseMap(mailChunks, (mailChunk) => {\n\t\t\tmoveToTargetFolder.mails = mailChunk\n\t\t\tconst sourceFolder = assertNotNull(moveToTargetFolder.sourceFolder) // old clients don't send sourceFolder. assertNotNull can be removed once sourceFolder cardinality is ONE\n\t\t\treturn mailFacade.moveMails(mailChunk, sourceFolder, moveToTargetFolder.targetFolder)\n\t\t})\n\t\t\t.catch(\n\t\t\t\tofClass(LockedError, (e) => {\n\t\t\t\t\t//LockedError should no longer be thrown!?!\n\t\t\t\t\tconsole.log(\"moving mail failed\", e, moveToTargetFolder)\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(PreconditionFailedError, (e) => {\n\t\t\t\t\t// move mail operation may have been locked by other process\n\t\t\t\t\tconsole.log(\"moving mail failed\", e, moveToTargetFolder)\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.finally(() => {\n\t\t\t\treturn sendMoveMailRequest(mailFacade)\n\t\t\t})\n\t} //We are done and unlock for future requests\n}\n\n// We throttle the moveMail requests to a rate of 200ms\n// Each target folder requires one request\nconst applyMatchingRules = throttle(DEBOUNCE_FIRST_MOVE_MAIL_REQUEST_MS, (mailFacade: MailFacade) => {\n\tif (applyingRules) return\n\t// We lock to avoid concurrent requests\n\tapplyingRules = true\n\tsendMoveMailRequest(mailFacade).finally(() => {\n\t\tapplyingRules = false\n\t})\n})\n\nexport function getInboxRuleTypeNameMapping(): SelectorItemList<string> {\n\treturn [\n\t\t{\n\t\t\tvalue: InboxRuleType.FROM_EQUALS,\n\t\t\tname: lang.get(\"inboxRuleSenderEquals_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: InboxRuleType.RECIPIENT_TO_EQUALS,\n\t\t\tname: lang.get(\"inboxRuleToRecipientEquals_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: InboxRuleType.RECIPIENT_CC_EQUALS,\n\t\t\tname: lang.get(\"inboxRuleCCRecipientEquals_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: InboxRuleType.RECIPIENT_BCC_EQUALS,\n\t\t\tname: lang.get(\"inboxRuleBCCRecipientEquals_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: InboxRuleType.SUBJECT_CONTAINS,\n\t\t\tname: lang.get(\"inboxRuleSubjectContains_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: InboxRuleType.MAIL_HEADER_CONTAINS,\n\t\t\tname: lang.get(\"inboxRuleMailHeaderContains_action\"),\n\t\t},\n\t]\n}\n\nexport function getInboxRuleTypeName(type: string): string {\n\tlet typeNameMapping = getInboxRuleTypeNameMapping().find((t) => t.value === type)\n\treturn typeNameMapping != null ? typeNameMapping.name : \"\"\n}\n\nexport class InboxRuleHandler {\n\tconstructor(private readonly mailFacade: MailFacade, private readonly logins: LoginController) {}\n\n\t/**\n\t * Checks the mail for an existing inbox rule and moves the mail to the target folder of the rule.\n\t * @returns true if a rule matches otherwise false\n\t */\n\tasync findAndApplyMatchingRule(mailboxDetail: MailboxDetail, mail: Mail, applyRulesOnServer: boolean): Promise<{ folder: MailFolder; mail: Mail } | null> {\n\t\tif (\n\t\t\tmail._errors ||\n\t\t\t!mail.unread ||\n\t\t\t!(await isInboxFolder(mailboxDetail, mail)) ||\n\t\t\t!this.logins.getUserController().isPremiumAccount() ||\n\t\t\tmailboxDetail.mailbox.folders == null\n\t\t) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst inboxRule = await _findMatchingRule(this.mailFacade, mail, this.logins.getUserController().props.inboxRules)\n\t\tif (inboxRule) {\n\t\t\tconst folders = await mailLocator.mailModel.getMailboxFoldersForId(mailboxDetail.mailbox.folders._id)\n\t\t\tconst inboxFolder = assertNotNull(folders.getSystemFolderByType(MailSetKind.INBOX))\n\t\t\tconst targetFolder = folders.getFolderById(elementIdPart(inboxRule.targetFolder))\n\n\t\t\tif (targetFolder && targetFolder.folderType !== MailSetKind.INBOX) {\n\t\t\t\tif (applyRulesOnServer) {\n\t\t\t\t\tlet moveMailData = moveMailDataPerFolder.find((folderMoveMailData) => isSameId(folderMoveMailData.targetFolder, inboxRule.targetFolder))\n\n\t\t\t\t\tif (moveMailData) {\n\t\t\t\t\t\tmoveMailData.mails.push(mail._id)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmoveMailData = createMoveMailData({\n\t\t\t\t\t\t\tsourceFolder: inboxFolder._id,\n\t\t\t\t\t\t\ttargetFolder: inboxRule.targetFolder,\n\t\t\t\t\t\t\tmails: [mail._id],\n\t\t\t\t\t\t})\n\t\t\t\t\t\tmoveMailDataPerFolder.push(moveMailData)\n\t\t\t\t\t}\n\n\t\t\t\t\tapplyMatchingRules(this.mailFacade)\n\t\t\t\t}\n\n\t\t\t\treturn { folder: targetFolder, mail }\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n}\n\n/**\n * Finds the first matching inbox rule for the mail and returns it.\n * export only for testing\n */\nexport async function _findMatchingRule(mailFacade: MailFacade, mail: Mail, rules: InboxRule[]): Promise<InboxRule | null> {\n\treturn asyncFind(rules, (rule) => checkInboxRule(mailFacade, mail, rule)).then((v) => v ?? null)\n}\n\nasync function checkInboxRule(mailFacade: MailFacade, mail: Mail, inboxRule: InboxRule): Promise<boolean> {\n\tconst ruleType = inboxRule.type\n\ttry {\n\t\tif (ruleType === InboxRuleType.FROM_EQUALS) {\n\t\t\tlet mailAddresses = [mail.sender.address]\n\n\t\t\tif (mail.differentEnvelopeSender) {\n\t\t\t\tmailAddresses.push(mail.differentEnvelopeSender)\n\t\t\t}\n\n\t\t\treturn _checkEmailAddresses(mailAddresses, inboxRule)\n\t\t} else if (ruleType === InboxRuleType.RECIPIENT_TO_EQUALS) {\n\t\t\tconst toRecipients = (await mailFacade.loadMailDetailsBlob(mail)).recipients.toRecipients\n\t\t\treturn _checkEmailAddresses(\n\t\t\t\ttoRecipients.map((m) => m.address),\n\t\t\t\tinboxRule,\n\t\t\t)\n\t\t} else if (ruleType === InboxRuleType.RECIPIENT_CC_EQUALS) {\n\t\t\tconst ccRecipients = (await mailFacade.loadMailDetailsBlob(mail)).recipients.ccRecipients\n\t\t\treturn _checkEmailAddresses(\n\t\t\t\tccRecipients.map((m) => m.address),\n\t\t\t\tinboxRule,\n\t\t\t)\n\t\t} else if (ruleType === InboxRuleType.RECIPIENT_BCC_EQUALS) {\n\t\t\tconst bccRecipients = (await mailFacade.loadMailDetailsBlob(mail)).recipients.bccRecipients\n\t\t\treturn _checkEmailAddresses(\n\t\t\t\tbccRecipients.map((m) => m.address),\n\t\t\t\tinboxRule,\n\t\t\t)\n\t\t} else if (ruleType === InboxRuleType.SUBJECT_CONTAINS) {\n\t\t\treturn _checkContainsRule(mail.subject, inboxRule)\n\t\t} else if (ruleType === InboxRuleType.MAIL_HEADER_CONTAINS) {\n\t\t\tconst details = await mailFacade.loadMailDetailsBlob(mail)\n\t\t\tif (details.headers != null) {\n\t\t\t\treturn _checkContainsRule(getMailHeaders(details.headers), inboxRule)\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\"Unknown rule type: \", inboxRule.type)\n\t\t\treturn false\n\t\t}\n\t} catch (e) {\n\t\tconsole.error(\"Error processing inbox rule:\", e.message)\n\t\treturn false\n\t}\n}\n\nfunction _checkContainsRule(value: string, inboxRule: InboxRule): boolean {\n\treturn (isRegularExpression(inboxRule.value) && _matchesRegularExpression(value, inboxRule)) || value.includes(inboxRule.value)\n}\n\n/** export for test. */\nexport function _matchesRegularExpression(value: string, inboxRule: InboxRule): boolean {\n\tif (isRegularExpression(inboxRule.value)) {\n\t\tlet flags = inboxRule.value.replace(/.*\\/([gimsuy]*)$/, \"$1\")\n\t\tlet pattern = inboxRule.value.replace(new RegExp(\"^/(.*?)/\" + flags + \"$\"), \"$1\")\n\t\tlet regExp = new RegExp(pattern, flags)\n\t\treturn regExp.test(value)\n\t}\n\n\treturn false\n}\n\nfunction _checkEmailAddresses(mailAddresses: string[], inboxRule: InboxRule): boolean {\n\tconst mailAddress = mailAddresses.find((mailAddress) => {\n\t\tlet cleanMailAddress = mailAddress.toLowerCase().trim()\n\n\t\tif (isRegularExpression(inboxRule.value)) {\n\t\t\treturn _matchesRegularExpression(cleanMailAddress, inboxRule)\n\t\t} else if (isDomainName(inboxRule.value)) {\n\t\t\tlet domain = cleanMailAddress.split(\"@\")[1]\n\t\t\treturn domain === inboxRule.value\n\t\t} else {\n\t\t\treturn cleanMailAddress === inboxRule.value\n\t\t}\n\t})\n\treturn mailAddress != null\n}\n\nexport async function isInboxFolder(mailboxDetail: MailboxDetail, mail: Mail): Promise<boolean> {\n\tconst folders = await mailLocator.mailModel.getMailboxFoldersForId(assertNotNull(mailboxDetail.mailbox.folders)._id)\n\tconst mailFolder = folders.getFolderByMail(mail)\n\treturn mailFolder?.folderType === MailSetKind.INBOX\n}\n","/// <reference lib=\"dom\" /> // fixes MouseEvent conflict with react\nimport { assertMainOrNode } from \"../common/Env\"\nimport type { EntropySource } from \"@tutao/tutanota-crypto\"\nimport type { EntropyDataChunk, EntropyFacade } from \"../worker/facades/EntropyFacade.js\"\nimport { Scheduler } from \"../common/utils/Scheduler.js\"\n\nassertMainOrNode()\n\nexport type EntropyCallback = (data: number, entropy: number, source: EntropySource) => unknown\n\n/**\n * Automatically collects entropy from various events and sends it to the randomizer in the worker regularly.\n */\nexport class EntropyCollector {\n\t// accessible from test case\n\tstatic readonly SEND_INTERVAL: number = 5000\n\n\tprivate stopped: boolean = true\n\t// the entropy is cached and transmitted to the worker in defined intervals\n\tprivate entropyCache: EntropyDataChunk[] = []\n\n\tconstructor(private readonly entropyFacade: EntropyFacade, private readonly scheduler: Scheduler, private readonly window: Window) {}\n\n\tprivate mouse = (e: MouseEvent) => {\n\t\tconst value = e.clientX ^ e.clientY\n\n\t\tthis.addEntropy(value, 2, \"mouse\")\n\t}\n\n\tprivate keyDown = (e: KeyboardEvent) => {\n\t\tconst value = e.key ? e.key.charCodeAt(0) : undefined\n\t\tthis.addEntropy(value, 2, \"key\")\n\t}\n\n\tprivate touch = (e: TouchEvent) => {\n\t\tconst value = e.touches[0].clientX ^ e.touches[0].clientY\n\n\t\tthis.addEntropy(value, 2, \"touch\")\n\t}\n\n\t/** e is a DeviceMotionEvent but it's typed in a very annoying way */\n\tprivate accelerometer = (e: any) => {\n\t\tif (e.accelerationIncludingGravity) {\n\t\t\tthis.addEntropy(e.accelerationIncludingGravity.x ^ e.accelerationIncludingGravity.y ^ e.accelerationIncludingGravity.z, 2, \"accel\")\n\t\t}\n\n\t\tthis.addEntropy(this.window.screen.orientation.angle, 0, \"accel\")\n\t}\n\n\t/**\n\t * Adds entropy to the random number generator algorithm\n\t * @param data Any number value, or undefined\n\t * @param entropy The amount of entropy in the number in bit.\n\t * @param source The source of the number. One of RandomizerInterface.ENTROPY_SRC_*.\n\t */\n\tprivate addEntropy(data: number | undefined, entropy: number, source: EntropySource) {\n\t\tif (data) {\n\t\t\tthis.entropyCache.push({\n\t\t\t\tsource: source,\n\t\t\t\tentropy: entropy,\n\t\t\t\tdata: data,\n\t\t\t})\n\t\t}\n\n\t\tif (this.window.performance && typeof window.performance.now === \"function\") {\n\t\t\tthis.entropyCache.push({\n\t\t\t\tsource: \"time\",\n\t\t\t\tentropy: 2,\n\t\t\t\tdata: this.window.performance.now(),\n\t\t\t})\n\t\t} else {\n\t\t\tthis.entropyCache.push({\n\t\t\t\tsource: \"time\",\n\t\t\t\tentropy: 2,\n\t\t\t\tdata: new Date().valueOf(),\n\t\t\t})\n\t\t}\n\t}\n\n\tstart() {\n\t\tthis.addPerformanceTimingValues()\n\n\t\tthis.window.addEventListener(\"mousemove\", this.mouse)\n\t\tthis.window.addEventListener(\"click\", this.mouse)\n\t\tthis.window.addEventListener(\"touchstart\", this.touch)\n\t\tthis.window.addEventListener(\"touchmove\", this.touch)\n\t\tthis.window.addEventListener(\"keydown\", this.keyDown)\n\t\tthis.window.addEventListener(\"devicemotion\", this.accelerometer)\n\n\t\tthis.scheduler.schedulePeriodic(() => this.sendEntropyToWorker(), EntropyCollector.SEND_INTERVAL)\n\t\tthis.stopped = false\n\t}\n\n\tprivate addPerformanceTimingValues() {\n\t\tif (!this.window.performance) return\n\t\tconst entries = this.window.performance.getEntries()\n\t\tlet added: number[] = []\n\t\tfor (const entry of entries.map((e) => e.toJSON())) {\n\t\t\tfor (let key in entry) {\n\t\t\t\tconst value = entry[key]\n\t\t\t\tif (typeof value === \"number\" && value !== 0) {\n\t\t\t\t\tif (added.indexOf(value) === -1) {\n\t\t\t\t\t\tthis.addEntropy(value, 1, \"static\")\n\t\t\t\t\t\tadded.push(value)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Add data from secure random source as entropy.\n\t */\n\tprivate addNativeRandomValues(nbrOf32BitValues: number) {\n\t\tlet valueList = new Uint32Array(nbrOf32BitValues)\n\t\tthis.window.crypto.getRandomValues(valueList)\n\n\t\tfor (let i = 0; i < valueList.length; i++) {\n\t\t\t// 32 because we have 32-bit values Uint32Array\n\t\t\tthis.addEntropy(valueList[i], 32, \"random\")\n\t\t}\n\t}\n\n\tprivate sendEntropyToWorker() {\n\t\tif (this.entropyCache.length > 0) {\n\t\t\tthis.addNativeRandomValues(1)\n\n\t\t\tthis.entropyFacade.addEntropy(this.entropyCache)\n\n\t\t\tthis.entropyCache = []\n\t\t}\n\t}\n\n\tstop() {\n\t\tthis.stopped = true\n\t\tthis.window.removeEventListener(\"mousemove\", this.mouse)\n\t\tthis.window.removeEventListener(\"mouseclick\", this.mouse)\n\t\tthis.window.removeEventListener(\"touchstart\", this.touch)\n\t\tthis.window.removeEventListener(\"touchmove\", this.touch)\n\t\tthis.window.removeEventListener(\"keydown\", this.keyDown)\n\t\tthis.window.removeEventListener(\"devicemotion\", this.accelerometer)\n\t}\n}\n","/** @file Types from Credential Management API. */\n\n/** see https://www.iana.org/assignments/cose/cose.xhtml#algorithms */\nexport enum COSEAlgorithmIdentifier {\n\tES256 = -7,\n\tES384 = -35,\n\tES512 = -36,\n\tEdDSA = -8,\n}\n","import { COSEAlgorithmIdentifier } from \"./WebauthnTypes.js\"\nimport { ProgrammingError } from \"../../../api/common/error/ProgrammingError.js\"\nimport { isApp } from \"../../../api/common/Env.js\"\nimport { WebAuthnFacade } from \"../../../native/common/generatedipc/WebAuthnFacade.js\"\nimport { stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\nimport { CancelledError } from \"../../../api/common/error/CancelledError.js\"\nimport { WebauthnError } from \"../../../api/common/error/WebauthnError.js\"\nimport { WebAuthnRegistrationChallenge } from \"../../../native/common/generatedipc/WebAuthnRegistrationChallenge.js\"\nimport { WebAuthnRegistrationResult } from \"../../../native/common/generatedipc/WebAuthnRegistrationResult.js\"\nimport { WebAuthnSignChallenge } from \"../../../native/common/generatedipc/WebAuthnSignChallenge.js\"\nimport { WebAuthnSignResult } from \"../../../native/common/generatedipc/WebAuthnSignResult.js\"\n\nconst WEBAUTHN_TIMEOUT_MS = 60000\n\n/** An actual webauthn implementation in browser. */\nexport class BrowserWebauthn implements WebAuthnFacade {\n\t/**\n\t * Relying Party Identifier\n\t * see https://www.w3.org/TR/webauthn-2/#public-key-credential-source-rpid\n\t */\n\tprivate readonly rpId: string\n\t/** Backward-compatible identifier for the legacy U2F API */\n\tprivate readonly appId: string\n\tprivate currentOperationSignal: AbortController | null = null\n\n\tconstructor(private readonly api: CredentialsContainer, domainConfig: DomainConfig) {\n\t\tthis.rpId = domainConfig.webauthnRpId\n\t\tthis.appId = domainConfig.u2fAppId\n\t}\n\n\tasync canAttemptChallengeForRpId(rpId: string): Promise<boolean> {\n\t\treturn rpId === this.rpId\n\t}\n\n\tasync canAttemptChallengeForU2FAppId(appId: string): Promise<boolean> {\n\t\treturn this.appId === appId\n\t}\n\n\t/**\n\t * test whether hardware key second factors are supported for this client\n\t */\n\tasync isSupported(): Promise<boolean> {\n\t\treturn (\n\t\t\t!isApp() &&\n\t\t\tthis.api != null &&\n\t\t\t// @ts-ignore see polyfill.js\n\t\t\t// We just stub BigInt in order to import cborg without issues but we can't actually use it\n\t\t\t!BigInt.polyfilled\n\t\t)\n\t}\n\n\tasync register({ challenge, userId, name, displayName }: WebAuthnRegistrationChallenge): Promise<WebAuthnRegistrationResult> {\n\t\tconst publicKeyCredentialCreationOptions: PublicKeyCredentialCreationOptions = {\n\t\t\tchallenge,\n\t\t\trp: {\n\t\t\t\tname: \"Tutanota\",\n\t\t\t\tid: this.rpId,\n\t\t\t},\n\t\t\tuser: {\n\t\t\t\tid: stringToUtf8Uint8Array(userId),\n\t\t\t\tname,\n\t\t\t\tdisplayName,\n\t\t\t},\n\t\t\tpubKeyCredParams: [\n\t\t\t\t{\n\t\t\t\t\talg: COSEAlgorithmIdentifier.ES256,\n\t\t\t\t\ttype: \"public-key\",\n\t\t\t\t},\n\t\t\t],\n\t\t\tauthenticatorSelection: {\n\t\t\t\tauthenticatorAttachment: \"cross-platform\",\n\t\t\t\tuserVerification: \"discouraged\",\n\t\t\t},\n\t\t\ttimeout: WEBAUTHN_TIMEOUT_MS,\n\t\t\tattestation: \"none\",\n\t\t}\n\t\tthis.currentOperationSignal = new AbortController()\n\t\tconst credential = (await this.api.create({\n\t\t\tpublicKey: publicKeyCredentialCreationOptions,\n\t\t\tsignal: this.currentOperationSignal.signal,\n\t\t})) as PublicKeyCredential\n\n\t\treturn {\n\t\t\trpId: this.rpId,\n\t\t\trawId: new Uint8Array(credential.rawId),\n\t\t\tattestationObject: new Uint8Array((credential.response as AuthenticatorAttestationResponse).attestationObject),\n\t\t}\n\t}\n\n\tasync sign({ challenge, keys }: WebAuthnSignChallenge): Promise<WebAuthnSignResult> {\n\t\tconst allowCredentials: PublicKeyCredentialDescriptor[] = keys.map((key) => {\n\t\t\treturn {\n\t\t\t\tid: key.id,\n\t\t\t\ttype: \"public-key\",\n\t\t\t}\n\t\t})\n\t\tconst publicKeyCredentialRequestOptions: PublicKeyCredentialRequestOptions = {\n\t\t\tchallenge: challenge,\n\t\t\trpId: this.rpId,\n\t\t\tallowCredentials,\n\t\t\textensions: {\n\t\t\t\tappid: this.appId,\n\t\t\t},\n\t\t\tuserVerification: \"discouraged\",\n\t\t\ttimeout: WEBAUTHN_TIMEOUT_MS,\n\t\t}\n\t\tlet assertion\n\n\t\tthis.currentOperationSignal = new AbortController()\n\t\ttry {\n\t\t\tassertion = await this.api.get({\n\t\t\t\tpublicKey: publicKeyCredentialRequestOptions,\n\t\t\t\tsignal: this.currentOperationSignal.signal,\n\t\t\t})\n\t\t} catch (e) {\n\t\t\tif (e.name === \"AbortError\") {\n\t\t\t\tthrow new CancelledError(e)\n\t\t\t} else {\n\t\t\t\tthrow new WebauthnError(e)\n\t\t\t}\n\t\t}\n\n\t\tconst publicKeyCredential = assertion as PublicKeyCredential | null\n\n\t\tif (publicKeyCredential == null) {\n\t\t\tthrow new ProgrammingError(\"Webauthn credential could not be unambiguously resolved\")\n\t\t}\n\t\tconst assertionResponse = publicKeyCredential.response as AuthenticatorAssertionResponse\n\t\treturn {\n\t\t\trawId: new Uint8Array(publicKeyCredential.rawId),\n\t\t\tauthenticatorData: new Uint8Array(assertionResponse.authenticatorData),\n\t\t\tsignature: new Uint8Array(assertionResponse.signature),\n\t\t\tclientDataJSON: new Uint8Array(assertionResponse.clientDataJSON),\n\t\t}\n\t}\n\n\tasync abortCurrentOperation(): Promise<void> {\n\t\tthis.currentOperationSignal?.abort()\n\t\tthis.currentOperationSignal = null\n\t}\n}\n","import { DataFile } from \"../api/common/DataFile\"\nimport { assertMainOrNode } from \"../api/common/Env\"\nimport { File as TutanotaFile } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { FileController, openDataFileInBrowser, ProgressObserver, zipDataFiles } from \"./FileController.js\"\nimport { sortableTimestamp } from \"@tutao/tutanota-utils\"\nimport { BlobFacade } from \"../api/worker/facades/lazy/BlobFacade.js\"\nimport { assertOnlyDataFiles, FileReference } from \"../api/common/utils/FileUtils.js\"\n\nassertMainOrNode()\n\nexport class FileControllerBrowser extends FileController {\n\tconstructor(blobFacade: BlobFacade, guiDownload: ProgressObserver) {\n\t\tsuper(blobFacade, guiDownload)\n\t}\n\n\tasync saveDataFile(file: DataFile): Promise<void> {\n\t\treturn openDataFileInBrowser(file)\n\t}\n\n\tasync downloadAndDecrypt(file: TutanotaFile): Promise<DataFile | FileReference> {\n\t\treturn this.getAsDataFile(file)\n\t}\n\n\tasync writeDownloadedFiles(downloadedFiles: Array<FileReference | DataFile>): Promise<void> {\n\t\tif (downloadedFiles.length < 1) {\n\t\t\treturn\n\t\t}\n\t\tassertOnlyDataFiles(downloadedFiles)\n\t\tconst fileToSave = downloadedFiles.length > 1 ? await zipDataFiles(downloadedFiles, `${sortableTimestamp()}-attachments.zip`) : downloadedFiles[0]\n\t\treturn await openDataFileInBrowser(fileToSave)\n\t}\n\n\tasync cleanUp(downloadedFiles: DataFile[]): Promise<void> {\n\t\t// there is nothing to do since nothing gets saved until the browser puts it into the final location\n\t}\n\n\tprotected async openDownloadedFiles(downloadedFiles: Array<FileReference | DataFile>): Promise<void> {\n\t\t// opening and downloading a file is the same thing in browser environment\n\t\treturn await this.writeDownloadedFiles(downloadedFiles)\n\t}\n}\n","import { Dialog } from \"../gui/base/Dialog.js\"\nimport { DataFile } from \"../api/common/DataFile\"\nimport { assertMainOrNode, isAndroidApp, isApp, isDesktop, isElectronClient, isIOSApp, isTest } from \"../api/common/Env\"\nimport { assert, assertNotNull, promiseMap, sortableTimestamp } from \"@tutao/tutanota-utils\"\nimport { File as TutanotaFile } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { assertOnlyFileReferences, FileReference } from \"../api/common/utils/FileUtils\"\nimport { CancelledError } from \"../api/common/error/CancelledError\"\nimport type { NativeFileApp } from \"../native/common/FileApp.js\"\nimport { ArchiveDataType } from \"../api/common/TutanotaConstants\"\nimport { BlobFacade } from \"../api/worker/facades/lazy/BlobFacade.js\"\nimport { FileController, ProgressObserver, zipDataFiles } from \"./FileController.js\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\nimport { createReferencingInstance } from \"../api/common/utils/BlobUtils.js\"\n\nassertMainOrNode()\n\n/**\n * coordinates downloads when we have access to native functionality\n */\nexport class FileControllerNative extends FileController {\n\tconstructor(blobFacade: BlobFacade, guiDownload: ProgressObserver, private readonly fileApp: NativeFileApp) {\n\t\tassert(isElectronClient() || isApp() || isTest(), \"Don't make native file controller when not in native\")\n\t\tsuper(blobFacade, guiDownload)\n\t}\n\n\tprotected async cleanUp(files: Array<FileReference | DataFile>) {\n\t\tassertOnlyFileReferences(files)\n\t\tif (files.length > 0) {\n\t\t\tfor (const file of files) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileApp.deleteFile(file.location)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(\"failed to delete file\", file.location, e)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Does not delete temporary file in app.\n\t */\n\tasync saveDataFile(file: DataFile): Promise<void> {\n\t\t// For apps \"opening\" DataFile currently means saving and opening it.\n\t\ttry {\n\t\t\tconst fileReference = await this.fileApp.writeDataFile(file)\n\t\t\tif (isAndroidApp() || isDesktop()) {\n\t\t\t\tawait this.fileApp.putFileIntoDownloadsFolder(fileReference.location, fileReference.name)\n\t\t\t\treturn\n\t\t\t} else if (isIOSApp()) {\n\t\t\t\treturn this.fileApp.open(fileReference)\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (e instanceof CancelledError) {\n\t\t\t\t// no-op. User cancelled file dialog\n\t\t\t\tconsole.log(\"saveDataFile cancelled\")\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"openDataFile failed\", e)\n\t\t\t\tawait Dialog.message(\"canNotOpenFileOnDevice_msg\")\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Public for testing */\n\tasync downloadAndDecrypt(tutanotaFile: TutanotaFile): Promise<FileReference> {\n\t\treturn await this.blobFacade.downloadAndDecryptNative(\n\t\t\tArchiveDataType.Attachments,\n\t\t\tcreateReferencingInstance(tutanotaFile),\n\t\t\ttutanotaFile.name,\n\t\t\tassertNotNull(tutanotaFile.mimeType, \"tried to call blobfacade.downloadAndDecryptNative with null mimeType\"),\n\t\t)\n\t}\n\n\tasync writeDownloadedFiles(downloadedFiles: FileReference[]): Promise<void> {\n\t\tif (isIOSApp()) {\n\t\t\tawait this.processDownloadedFilesIOS(downloadedFiles)\n\t\t} else if (isDesktop()) {\n\t\t\tawait this.processDownloadedFilesDesktop(downloadedFiles)\n\t\t} else if (isAndroidApp()) {\n\t\t\tawait promiseMap(downloadedFiles, (file) => this.fileApp.putFileIntoDownloadsFolder(file.location, file.name))\n\t\t} else {\n\t\t\tthrow new ProgrammingError(\"in filecontroller native but not in ios, android or desktop? - tried to write\")\n\t\t}\n\t}\n\n\tasync openDownloadedFiles(downloadedFiles: FileReference[]): Promise<void> {\n\t\tif (isIOSApp()) {\n\t\t\tawait this.processDownloadedFilesIOS(downloadedFiles)\n\t\t} else if (isDesktop() || isAndroidApp()) {\n\t\t\tawait this.openFiles(downloadedFiles)\n\t\t} else {\n\t\t\tthrow new ProgrammingError(\"in filecontroller native but not in ios, android or desktop? - tried to open\")\n\t\t}\n\t}\n\n\t/**\n\t * for downloading multiple files on desktop. multiple files are bundled in a zip file, single files\n\t *\n\t * we could use the same strategy as on android, but\n\t * if the user doesn't have a default dl path selected on desktop,\n\t * the client will ask for a location for each file separately, so we zip them for now.\n\t */\n\tprivate async processDownloadedFilesDesktop(downloadedFiles: FileReference[]): Promise<void> {\n\t\tif (downloadedFiles.length < 1) {\n\t\t\treturn\n\t\t}\n\t\tconsole.log(\"downloaded files in processing\", downloadedFiles)\n\t\tconst dataFiles = (await promiseMap(downloadedFiles, (f) => this.fileApp.readDataFile(f.location))).filter(Boolean)\n\t\tconst fileInTemp =\n\t\t\tdataFiles.length === 1\n\t\t\t\t? downloadedFiles[0]\n\t\t\t\t: await this.fileApp.writeDataFile(await zipDataFiles(dataFiles as Array<DataFile>, `${sortableTimestamp()}-attachments.zip`))\n\t\tawait this.fileApp.putFileIntoDownloadsFolder(fileInTemp.location, fileInTemp.name)\n\t}\n\n\t// on iOS, we don't actually show downloadAll and open the attachment immediately\n\t// the user is presented with an option to save the file to their file system by the OS\n\tprivate async processDownloadedFilesIOS(downloadedFiles: FileReference[]): Promise<void> {\n\t\tawait promiseMap(downloadedFiles, async (file) => {\n\t\t\ttry {\n\t\t\t\tawait this.fileApp.open(file)\n\t\t\t} finally {\n\t\t\t\tawait this.fileApp.deleteFile(file.location).catch((e: any) => console.log(\"failed to delete file\", file.location, e))\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate async openFiles(downloadedFiles: FileReference[]): Promise<void[]> {\n\t\treturn promiseMap(downloadedFiles, async (file) => {\n\t\t\ttry {\n\t\t\t\tawait this.fileApp.open(file)\n\t\t\t} finally {\n\t\t\t\t// on desktop, we don't get to know when the other app is done with the file, so we leave cleanup to the OS\n\t\t\t\tif (isApp()) await this.fileApp.deleteFile(file.location).catch((e: any) => console.log(\"failed to delete file\", file.location, e))\n\t\t\t}\n\t\t})\n\t}\n}\n","import { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport {\n\tContact,\n\tContactTypeRef,\n\tcreateContact,\n\tcreateContactAddress,\n\tcreateContactCustomDate,\n\tcreateContactMailAddress,\n\tcreateContactMessengerHandle,\n\tcreateContactPhoneNumber,\n\tcreateContactRelationship,\n\tcreateContactWebsite,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { GroupType, OperationType } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { assert, defer, getFirstOrThrow, getFromMap, ofClass } from \"@tutao/tutanota-utils\"\nimport { StructuredContact } from \"../../../common/native/common/generatedipc/StructuredContact.js\"\nimport { elementIdPart, getElementId, StrippedEntity } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport {\n\textractStructuredAddresses,\n\textractStructuredCustomDates,\n\textractStructuredMailAddresses,\n\textractStructuredMessengerHandle,\n\textractStructuredPhoneNumbers,\n\textractStructuredRelationships,\n\textractStructuredWebsites,\n} from \"../../../common/contactsFunctionality/ContactUtils.js\"\nimport { LoginController } from \"../../../common/api/main/LoginController.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { EventController } from \"../../../common/api/main/EventController.js\"\nimport { ContactModel } from \"../../../common/contactsFunctionality/ContactModel.js\"\nimport { DeviceConfig } from \"../../../common/misc/DeviceConfig.js\"\nimport { PermissionError } from \"../../../common/api/common/error/PermissionError.js\"\nimport { MobileContactsFacade } from \"../../../common/native/common/generatedipc/MobileContactsFacade.js\"\nimport { ContactSyncResult } from \"../../../common/native/common/generatedipc/ContactSyncResult.js\"\nimport { assertMainOrNode, isApp, isIOSApp } from \"../../../common/api/common/Env.js\"\nimport { ContactStoreError } from \"../../../common/api/common/error/ContactStoreError.js\"\nimport { NotFoundError } from \"../../../common/api/common/error/RestError.js\"\nimport { Dialog } from \"../../../common/gui/base/Dialog.js\"\nimport { showProgressDialog } from \"../../../common/gui/dialogs/ProgressDialog.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport { locator } from \"../../../common/api/main/CommonLocator\"\nimport { PermissionType } from \"../../../common/native/common/generatedipc/PermissionType\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError\"\n\nassertMainOrNode()\n\nexport class NativeContactsSyncManager {\n\tprivate entityUpdateLock: Promise<void> = Promise.resolve()\n\n\tconstructor(\n\t\tprivate readonly loginController: LoginController,\n\t\tprivate readonly mobileContactsFacade: MobileContactsFacade,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly deviceConfig: DeviceConfig,\n\t) {\n\t\tthis.eventController.addEntityListener((updates) => this.nativeContactEntityEventsListener(updates))\n\t}\n\n\tprivate async nativeContactEntityEventsListener(events: ReadonlyArray<EntityUpdateData>) {\n\t\tawait this.entityUpdateLock\n\n\t\tawait this.processContactEventUpdate(events)\n\t}\n\n\tprivate async processContactEventUpdate(events: ReadonlyArray<EntityUpdateData>) {\n\t\tconst loginUsername = this.loginController.getUserController().loginUsername\n\t\tconst userId = this.loginController.getUserController().userId\n\t\tconst allowSync = this.deviceConfig.getUserSyncContactsWithPhonePreference(userId) ?? false\n\t\tif (!allowSync) {\n\t\t\treturn\n\t\t}\n\n\t\tconst contactsIdToCreateOrUpdate: Map<Id, Array<Id>> = new Map()\n\n\t\tfor (const event of events) {\n\t\t\tif (!isUpdateForTypeRef(ContactTypeRef, event)) continue\n\t\t\tif (event.operation === OperationType.CREATE) {\n\t\t\t\tgetFromMap(contactsIdToCreateOrUpdate, event.instanceListId, () => []).push(event.instanceId)\n\t\t\t} else if (event.operation === OperationType.UPDATE) {\n\t\t\t\tgetFromMap(contactsIdToCreateOrUpdate, event.instanceListId, () => []).push(event.instanceId)\n\t\t\t} else if (event.operation === OperationType.DELETE) {\n\t\t\t\tawait this.mobileContactsFacade\n\t\t\t\t\t.deleteContacts(loginUsername, event.instanceId)\n\t\t\t\t\t.catch(ofClass(PermissionError, (e) => this.handleNoPermissionError(userId, e)))\n\t\t\t\t\t.catch(ofClass(ContactStoreError, (e) => console.warn(\"Could not delete contact during sync: \", e)))\n\t\t\t}\n\t\t}\n\n\t\tconst contactsToInsertOrUpdate: StructuredContact[] = []\n\n\t\tfor (const [listId, elementIds] of contactsIdToCreateOrUpdate.entries()) {\n\t\t\tconst contactList = await this.entityClient.loadMultiple(ContactTypeRef, listId, elementIds)\n\t\t\tcontactList.map((contact) => {\n\t\t\t\tcontactsToInsertOrUpdate.push({\n\t\t\t\t\tid: getElementId(contact),\n\t\t\t\t\tfirstName: contact.firstName,\n\t\t\t\t\tlastName: contact.lastName,\n\t\t\t\t\tnickname: contact.nickname ?? \"\",\n\t\t\t\t\tbirthday: contact.birthdayIso,\n\t\t\t\t\tcompany: contact.company,\n\t\t\t\t\tmailAddresses: extractStructuredMailAddresses(contact.mailAddresses),\n\t\t\t\t\tphoneNumbers: extractStructuredPhoneNumbers(contact.phoneNumbers),\n\t\t\t\t\taddresses: extractStructuredAddresses(contact.addresses),\n\t\t\t\t\trawId: null,\n\t\t\t\t\tcustomDate: extractStructuredCustomDates(contact.customDate),\n\t\t\t\t\tdepartment: contact.department,\n\t\t\t\t\tmessengerHandles: extractStructuredMessengerHandle(contact.messengerHandles),\n\t\t\t\t\tmiddleName: contact.middleName,\n\t\t\t\t\tnameSuffix: contact.nameSuffix,\n\t\t\t\t\tphoneticFirst: contact.phoneticFirst,\n\t\t\t\t\tphoneticLast: contact.phoneticLast,\n\t\t\t\t\tphoneticMiddle: contact.phoneticMiddle,\n\t\t\t\t\trelationships: extractStructuredRelationships(contact.relationships),\n\t\t\t\t\twebsites: extractStructuredWebsites(contact.websites),\n\t\t\t\t\tnotes: contact.comment,\n\t\t\t\t\ttitle: contact.title ?? \"\",\n\t\t\t\t\trole: contact.role,\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\tif (contactsToInsertOrUpdate.length > 0) {\n\t\t\tawait this.mobileContactsFacade\n\t\t\t\t.saveContacts(loginUsername, contactsToInsertOrUpdate)\n\t\t\t\t.catch(ofClass(PermissionError, (e) => this.handleNoPermissionError(userId, e)))\n\t\t\t\t.catch(ofClass(ContactStoreError, (e) => console.warn(\"Could not save contacts:\", e)))\n\t\t}\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.deviceConfig.getUserSyncContactsWithPhonePreference(this.loginController.getUserController().userId) ?? false\n\t}\n\n\t/**\n\t * @return is sync succeeded. It might fail if we don't have a permission.\n\t */\n\tasync enableSync(): Promise<boolean> {\n\t\tconst loginUsername = this.loginController.getUserController().loginUsername\n\t\tconst contactListId = await this.contactModel.getContactListId()\n\t\tif (contactListId == null) return false\n\t\tconst contacts = await this.entityClient.loadAll(ContactTypeRef, contactListId)\n\t\tconst structuredContacts = contacts.map((c) => this.toStructuredContact(c))\n\t\ttry {\n\t\t\tawait this.mobileContactsFacade.syncContacts(loginUsername, structuredContacts)\n\t\t} catch (e) {\n\t\t\tconsole.warn(\"Could not sync contacts:\", e)\n\t\t\tif (e instanceof PermissionError) {\n\t\t\t\treturn false\n\t\t\t} else if (e instanceof ContactStoreError) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tthrow e\n\t\t}\n\n\t\tthis.deviceConfig.setUserSyncContactsWithPhonePreference(this.loginController.getUserController().userId, true)\n\t\tawait this.askToDedupeContacts(structuredContacts)\n\t\treturn true\n\t}\n\n\t/**\n\t * Check if syncing contacts is possible/allowed right now.\n\t *\n\t * On Android, this method simply requests permission to access contacts. On iOS, this also checks iCloud sync, as\n\t * it can interfere with\n\t */\n\tasync canSync(): Promise<boolean> {\n\t\tif (!isApp()) {\n\t\t\tthrow new ProgrammingError(\"Can only check Contact permissions on app\")\n\t\t}\n\n\t\tconst isContactPermissionGranted = await locator.systemPermissionHandler.requestPermission(PermissionType.Contacts, \"allowContactReadWrite_msg\")\n\t\tif (!isContactPermissionGranted) {\n\t\t\treturn false\n\t\t}\n\n\t\treturn !isIOSApp() || this.checkIfExternalCloudSyncOnIos()\n\t}\n\n\t/**\n\t * Check that we are allowed to sync contacts on an iOS device\n\t * @returns false if no permission or iCloud sync is enabled and the user cancelled, or true if permission is granted and iCloud sync is disabled (or the user bypassed the warning dialog)\n\t */\n\tprivate async checkIfExternalCloudSyncOnIos(): Promise<boolean> {\n\t\tassert(isIOSApp(), \"Can only check cloud syncing on iOS\")\n\n\t\tlet localContactStorage = await this.mobileContactsFacade.isLocalStorageAvailable()\n\t\tif (!localContactStorage) {\n\t\t\tconst choice = await Dialog.choiceVertical(\"externalContactSyncDetectedWarning_msg\", [\n\t\t\t\t{ text: \"settings_label\", value: \"settings\", type: \"primary\" },\n\t\t\t\t{ text: \"enableAnyway_action\", value: \"enable\" },\n\t\t\t\t{ text: \"cancel_action\", value: \"cancel\" },\n\t\t\t])\n\t\t\tswitch (choice) {\n\t\t\t\tcase \"enable\":\n\t\t\t\t\tbreak\n\t\t\t\tcase \"settings\":\n\t\t\t\t\tlocator.systemFacade.openLink(\"App-prefs:CONTACTS&path=ACCOUNTS\")\n\t\t\t\t\treturn false\n\t\t\t\tcase \"cancel\":\n\t\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\treturn true\n\t}\n\n\t/**\n\t * @return is sync succeeded. It might fail if we don't have a permission.\n\t */\n\tasync syncContacts(): Promise<boolean> {\n\t\tif (!this.isEnabled()) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst contactListId = await this.contactModel.getContactListId()\n\t\tif (contactListId == null) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst userId = this.loginController.getUserController().userId\n\t\tconst loginUsername = this.loginController.getUserController().loginUsername\n\t\tconst contacts = await this.entityClient.loadAll(ContactTypeRef, contactListId)\n\t\tconst structuredContacts: ReadonlyArray<StructuredContact> = contacts.map((contact) => this.toStructuredContact(contact))\n\n\t\ttry {\n\t\t\tconst syncResult = await this.mobileContactsFacade.syncContacts(loginUsername, structuredContacts)\n\t\t\tawait this.applyDeviceChangesToServerContacts(contacts, syncResult, contactListId)\n\t\t} catch (e) {\n\t\t\tif (e instanceof PermissionError) {\n\t\t\t\tthis.handleNoPermissionError(userId, e)\n\t\t\t\treturn false\n\t\t\t} else if (e instanceof ContactStoreError) {\n\t\t\t\tconsole.warn(\"Could not sync contacts:\", e)\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tthrow e\n\t\t}\n\t\treturn true\n\t}\n\n\tprivate async askToDedupeContacts(contactsToDedupe: readonly StructuredContact[]) {\n\t\tconst duplicateContacts = await this.mobileContactsFacade.findLocalMatches(contactsToDedupe)\n\t\tif (duplicateContacts.length === 0) {\n\t\t\t// no duplicate contacts; no need to ask\n\t\t\treturn\n\t\t}\n\n\t\tconst shouldDedupe = await Dialog.confirm(lang.getTranslation(\"importContactRemoveDuplicatesConfirm_msg\", { \"{count}\": duplicateContacts.length }))\n\t\tif (shouldDedupe) {\n\t\t\tawait showProgressDialog(\"progressDeleting_msg\", this.mobileContactsFacade.deleteLocalContacts(duplicateContacts))\n\t\t}\n\t}\n\n\tprivate toStructuredContact(contact: Contact): StructuredContact {\n\t\treturn {\n\t\t\tid: getElementId(contact),\n\t\t\tfirstName: contact.firstName,\n\t\t\tlastName: contact.lastName,\n\t\t\tmailAddresses: extractStructuredMailAddresses(contact.mailAddresses),\n\t\t\tphoneNumbers: extractStructuredPhoneNumbers(contact.phoneNumbers),\n\t\t\tnickname: contact.nickname ?? \"\",\n\t\t\tcompany: contact.company,\n\t\t\tbirthday: contact.birthdayIso,\n\t\t\taddresses: extractStructuredAddresses(contact.addresses),\n\t\t\trawId: null,\n\t\t\tcustomDate: extractStructuredCustomDates(contact.customDate),\n\t\t\tdepartment: contact.department,\n\t\t\tmessengerHandles: extractStructuredMessengerHandle(contact.messengerHandles),\n\t\t\tmiddleName: contact.middleName,\n\t\t\tnameSuffix: contact.nameSuffix,\n\t\t\tphoneticFirst: contact.phoneticFirst,\n\t\t\tphoneticLast: contact.phoneticLast,\n\t\t\tphoneticMiddle: contact.phoneticMiddle,\n\t\t\trelationships: extractStructuredRelationships(contact.relationships),\n\t\t\twebsites: extractStructuredWebsites(contact.websites),\n\t\t\tnotes: contact.comment,\n\t\t\ttitle: contact.title ?? \"\",\n\t\t\trole: contact.role,\n\t\t}\n\t}\n\n\tasync disableSync(userId?: string, login?: string) {\n\t\tconst userIdToRemove = userId ?? this.loginController.getUserController().userId\n\n\t\tif (this.deviceConfig.getUserSyncContactsWithPhonePreference(userIdToRemove)) {\n\t\t\tthis.deviceConfig.setUserSyncContactsWithPhonePreference(userIdToRemove, false)\n\t\t\tawait this.mobileContactsFacade\n\t\t\t\t.deleteContacts(login ?? this.loginController.getUserController().loginUsername, null)\n\t\t\t\t.catch(ofClass(PermissionError, (e) => console.log(\"No permission to clear contacts\", e)))\n\t\t}\n\t}\n\n\tprivate handleNoPermissionError(userId: string, error: PermissionError) {\n\t\tconsole.log(\"No permission to sync contacts, disabling sync\", error)\n\t\tthis.deviceConfig.setUserSyncContactsWithPhonePreference(userId, false)\n\t}\n\n\tprivate async applyDeviceChangesToServerContacts(contacts: ReadonlyArray<Contact>, syncResult: ContactSyncResult, listId: string) {\n\t\t// Update lock state so the entity listener doesn't process any\n\t\t// new event. They'll be handled by the end of this function\n\t\tconst entityUpdateDefer = defer<void>()\n\t\tthis.entityUpdateLock = entityUpdateDefer.promise\n\n\t\t// We need to wait until the user is fully logged in to handle encrypted entities\n\t\tawait this.loginController.waitForFullLogin()\n\t\tfor (const contact of syncResult.createdOnDevice) {\n\t\t\tconst newContact = createContact(this.createContactFromNative(contact))\n\t\t\tconst entityId = await this.entityClient.setup(listId, newContact)\n\t\t\tconst loginUsername = this.loginController.getUserController().loginUsername\n\t\t\t// save the contact right away so that we don't lose the server id to native contact mapping if we don't process entity update quickly enough\n\t\t\tawait this.mobileContactsFacade.saveContacts(loginUsername, [\n\t\t\t\t{\n\t\t\t\t\t...contact,\n\t\t\t\t\tid: entityId,\n\t\t\t\t},\n\t\t\t])\n\t\t}\n\t\tfor (const contact of syncResult.editedOnDevice) {\n\t\t\tconst cleanContact = contacts.find((c) => elementIdPart(c._id) === contact.id)\n\t\t\tif (cleanContact == null) {\n\t\t\t\tconsole.warn(\"Could not find a server contact for the contact edited on device: \", contact.id)\n\t\t\t} else {\n\t\t\t\tconst updatedContact = this.mergeNativeContactWithTutaContact(contact, cleanContact)\n\t\t\t\ttry {\n\t\t\t\t\tawait this.entityClient.update(updatedContact)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t\tconsole.warn(\"Not found contact to update during sync: \", cleanContact._id, e)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const deletedContactId of syncResult.deletedOnDevice) {\n\t\t\tconst cleanContact = contacts.find((c) => elementIdPart(c._id) === deletedContactId)\n\t\t\tif (cleanContact == null) {\n\t\t\t\tconsole.warn(\"Could not find a server contact for the contact deleted on device: \", deletedContactId)\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.entityClient.erase(cleanContact)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t\tconsole.warn(\"Not found contact to delete during sync: \", cleanContact._id, e)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Release the lock state and process the entities. We don't\n\t\t// have anything more to include inside events to apply\n\t\tentityUpdateDefer.resolve()\n\t}\n\n\tprivate createContactFromNative(contact: StructuredContact): StrippedEntity<Contact> {\n\t\treturn {\n\t\t\t_ownerGroup: getFirstOrThrow(\n\t\t\t\tthis.loginController.getUserController().user.memberships.filter((membership) => membership.groupType === GroupType.Contact),\n\t\t\t).group,\n\t\t\toldBirthdayDate: null,\n\t\t\tpresharedPassword: null,\n\t\t\toldBirthdayAggregate: null,\n\t\t\tphoto: null,\n\t\t\tsocialIds: [],\n\t\t\tfirstName: contact.firstName,\n\t\t\tlastName: contact.lastName,\n\t\t\tmailAddresses: contact.mailAddresses.map((mail) => createContactMailAddress(mail)),\n\t\t\tphoneNumbers: contact.phoneNumbers.map((phone) => createContactPhoneNumber(phone)),\n\t\t\tnickname: contact.nickname,\n\t\t\tcompany: contact.company,\n\t\t\tbirthdayIso: contact.birthday,\n\t\t\taddresses: contact.addresses.map((address) => createContactAddress(address)),\n\t\t\tcustomDate: contact.customDate.map((date) => createContactCustomDate(date)),\n\t\t\tdepartment: contact.department,\n\t\t\tmessengerHandles: contact.messengerHandles.map((handle) => createContactMessengerHandle(handle)),\n\t\t\tmiddleName: contact.middleName,\n\t\t\tnameSuffix: contact.nameSuffix,\n\t\t\tphoneticFirst: contact.phoneticFirst,\n\t\t\tphoneticLast: contact.phoneticLast,\n\t\t\tphoneticMiddle: contact.phoneticMiddle,\n\t\t\tpronouns: [],\n\t\t\trelationships: contact.relationships.map((relation) => createContactRelationship(relation)),\n\t\t\twebsites: contact.websites.map((website) => createContactWebsite(website)),\n\t\t\tcomment: contact.notes,\n\t\t\ttitle: contact.title ?? \"\",\n\t\t\trole: contact.role,\n\t\t}\n\t}\n\n\tprivate mergeNativeContactWithTutaContact(contact: StructuredContact, partialContact: Contact): Contact {\n\t\t// TODO: iOS requires a special entitlement from Apple to access these fields\n\t\tconst canMergeCommentField = !isIOSApp()\n\n\t\treturn {\n\t\t\t...partialContact,\n\t\t\tfirstName: contact.firstName,\n\t\t\tlastName: contact.lastName,\n\t\t\tmailAddresses: contact.mailAddresses.map((mail) => createContactMailAddress(mail)),\n\t\t\tphoneNumbers: contact.phoneNumbers.map((phone) => createContactPhoneNumber(phone)),\n\t\t\tnickname: contact.nickname,\n\t\t\tcompany: contact.company,\n\t\t\tbirthdayIso: contact.birthday,\n\t\t\taddresses: contact.addresses.map((address) => createContactAddress(address)),\n\t\t\tcustomDate: contact.customDate.map((date) => createContactCustomDate(date)),\n\t\t\tdepartment: contact.department,\n\t\t\tmessengerHandles: contact.messengerHandles.map((handle) => createContactMessengerHandle(handle)),\n\t\t\tmiddleName: contact.middleName,\n\t\t\tnameSuffix: contact.nameSuffix,\n\t\t\tphoneticFirst: contact.phoneticFirst,\n\t\t\tphoneticLast: contact.phoneticLast,\n\t\t\tphoneticMiddle: contact.phoneticMiddle,\n\t\t\trelationships: contact.relationships.map((relation) => createContactRelationship(relation)),\n\t\t\twebsites: contact.websites.map((website) => createContactWebsite(website)),\n\t\t\tcomment: canMergeCommentField ? contact.notes : partialContact.comment,\n\t\t\ttitle: contact.title ?? \"\",\n\t\t\trole: contact.role,\n\t\t}\n\t}\n}\n","import { DeviceConfig } from \"../misc/DeviceConfig\"\nimport type { HtmlSanitizer } from \"../misc/HtmlSanitizer\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { assertMainOrNodeBoot, isApp, isDesktop } from \"../api/common/Env\"\nimport { downcast, findAndRemove, LazyLoaded, mapAndFilterNull, typedValues } from \"@tutao/tutanota-utils\"\nimport m from \"mithril\"\nimport type { BaseThemeId, Theme, ThemeId, ThemePreference } from \"./theme\"\nimport { logoDefaultGrey, themes } from \"./builtinThemes\"\nimport type { ThemeCustomizations } from \"../misc/WhitelabelCustomizations\"\nimport { getWhitelabelCustomizations } from \"../misc/WhitelabelCustomizations\"\nimport { getCalendarLogoSvg, getMailLogoSvg } from \"./base/Logo\"\nimport { ThemeFacade } from \"../native/common/generatedipc/ThemeFacade\"\nimport { AppType } from \"../misc/ClientConstants.js\"\n\nassertMainOrNodeBoot()\n\nexport const defaultThemeId: ThemeId = \"light\"\n\nexport class ThemeController {\n\tprivate readonly theme: Theme\n\t_themeId: ThemeId\n\tprivate _themePreference: ThemePreference\n\t// Subscribe to this to get theme change events. Cannot be used to update the theme\n\treadonly observableThemeId: Stream<ThemeId>\n\treadonly initialized: Promise<any>\n\n\tconstructor(\n\t\tthemeSingleton: object,\n\t\tprivate readonly themeFacade: ThemeFacade,\n\t\tprivate readonly htmlSanitizer: () => Promise<HtmlSanitizer>,\n\t\tprivate readonly app: AppType,\n\t) {\n\t\t// this will be overwritten quickly\n\t\tthis._themeId = defaultThemeId\n\t\tthis._themePreference = \"auto:light|dark\"\n\t\tthis.theme = Object.assign(themeSingleton, this.getDefaultTheme())\n\t\tthis.observableThemeId = stream(this.themeId)\n\t\t// We run them in parallel to initialize as soon as possible\n\t\tthis.initialized = Promise.all([this._initializeTheme(), this.updateSavedBuiltinThemes()])\n\t}\n\n\tasync _initializeTheme() {\n\t\t// If being accessed from a custom domain, the definition of whitelabelCustomizations is added to index.js serverside upon request\n\t\t// see RootHandler::applyWhitelabelFileModifications.\n\t\tconst whitelabelCustomizations = getWhitelabelCustomizations(window)\n\n\t\tif (whitelabelCustomizations && whitelabelCustomizations.theme) {\n\t\t\t// no need to persist anything if we are on whitelabel domain\n\t\t\tconst assembledTheme = await this.applyCustomizations(whitelabelCustomizations.theme, false)\n\t\t\tthis._themePreference = assembledTheme.themeId\n\t\t} else {\n\t\t\t// It is theme info passed from native to be applied as early as possible.\n\t\t\t// Important! Do not blindly apply location.search, someone could try to do prototype pollution.\n\t\t\t// We check environment and also filter out __proto__\n\t\t\t// mithril's parseQueryString does not follow standard exactly so we try to use the same thing we use on the native side\n\t\t\tconst themeJson = window.location.href ? new URL(window.location.href).searchParams.get(\"theme\") : null\n\n\t\t\tif ((isApp() || isDesktop()) && themeJson) {\n\t\t\t\tconst parsedTheme: ThemeCustomizations = this.parseCustomizations(themeJson)\n\n\t\t\t\t// We also don't need to save anything in this case\n\t\t\t\tawait this.applyCustomizations(parsedTheme, false)\n\t\t\t}\n\n\t\t\t// If it's a first start we might get a fallback theme from native. We can apply it for a short time but we should switch to the full, resolved\n\t\t\t// theme after that.\n\t\t\tawait this.setThemePreference((await this.themeFacade.getThemePreference()) ?? this._themePreference)\n\t\t}\n\t}\n\n\tprivate parseCustomizations(stringTheme: string): ThemeCustomizations {\n\t\t// Filter out __proto__ to avoid prototype pollution. We use Object.assign() which is not susceptible to it but it doesn't hurt.\n\t\treturn JSON.parse(stringTheme, (k, v) => (k === \"__proto__\" ? undefined : v))\n\t}\n\n\tprivate async updateSavedBuiltinThemes() {\n\t\t// In case we change built-in themes we want to save new copy on the device.\n\t\tfor (const theme of typedValues(themes())) {\n\t\t\tawait this.updateSavedThemeDefinition(theme)\n\t\t}\n\n\t\t// Remove blue theme because we don't have it anymore\n\t\tconst oldThemes = (await this.themeFacade.getThemes()) as Array<Theme>\n\t\tfindAndRemove(oldThemes, (t) => t.themeId === \"blue\")\n\t\tawait this.themeFacade.setThemes(oldThemes)\n\n\t\t// Check if the blue theme was selected and fallback for auto\n\t\tconst themePreference = await this.themeFacade.getThemePreference()\n\t\tif (!themePreference || themePreference !== \"blue\") return\n\t\tawait this.setThemePreference(\"auto:light|dark\", true)\n\t}\n\n\tasync reloadTheme() {\n\t\tconst themePreference = await this.themeFacade.getThemePreference()\n\t\tif (!themePreference) return\n\t\tawait this.setThemePreference(themePreference, false)\n\t}\n\n\tget themeId(): ThemeId {\n\t\treturn this._themeId\n\t}\n\n\tget themePreference(): ThemePreference {\n\t\treturn this._themePreference\n\t}\n\n\tprivate async getTheme(themeId: ThemeId): Promise<Theme> {\n\t\tif (themes()[themeId]) {\n\t\t\t// Make a defensive copy so that original theme definition is not modified.\n\t\t\treturn Object.assign({}, themes()[themeId])\n\t\t} else {\n\t\t\tconst loadedThemes = (await this.themeFacade.getThemes()) as ReadonlyArray<Theme>\n\t\t\tconst customTheme = loadedThemes.find((t) => t.themeId === themeId)\n\n\t\t\tif (customTheme) {\n\t\t\t\tawait this.sanitizeTheme(customTheme)\n\t\t\t\treturn customTheme\n\t\t\t} else {\n\t\t\t\treturn this.getDefaultTheme()\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCurrentTheme(): Theme {\n\t\treturn Object.assign({}, this.theme)\n\t}\n\n\t/**\n\t * Set the theme, if permanent is true then the locally saved theme will be updated\n\t */\n\tasync setThemePreference(newThemePreference: ThemePreference, permanent: boolean = true) {\n\t\tconst themeId = await this.resolveThemePreference(newThemePreference)\n\t\tconst newTheme = await this.getTheme(themeId)\n\n\t\tthis.applyTrustedTheme(newTheme, themeId)\n\t\tthis._themePreference = newThemePreference\n\n\t\tif (permanent) {\n\t\t\tawait this.themeFacade.setThemePreference(newThemePreference)\n\t\t}\n\t}\n\n\tprivate async resolveThemePreference(newThemePreference: ThemePreference): Promise<ThemeId> {\n\t\tif (newThemePreference === \"auto:light|dark\") {\n\t\t\treturn (await this.themeFacade.prefersDark()) ? \"dark\" : \"light\"\n\t\t} else {\n\t\t\treturn newThemePreference\n\t\t}\n\t}\n\n\tprivate applyTrustedTheme(newTheme: Theme, newThemeId: ThemeId) {\n\t\t// Theme object is effectively a singleton and is imported everywhere. It must be updated in place.\n\t\t// see theme.js\n\n\t\t// Clear all the keys first.\n\t\tfor (const key of Object.keys(this.theme)) {\n\t\t\tdelete downcast(this.theme)[key]\n\t\t}\n\t\t// Write new keys on it later. First default theme as base (so that optional values are correctly filled in) and then the new theme.\n\t\tObject.assign(this.theme, this.getDefaultTheme(), newTheme)\n\t\tthis._themeId = newThemeId\n\t\tthis.observableThemeId(newThemeId)\n\t\tm.redraw()\n\t}\n\n\t/**\n\t * Apply the custom theme, if permanent === true, then the new theme will be saved\n\t */\n\tasync applyCustomizations(customizations: ThemeCustomizations, permanent: boolean = true): Promise<Theme> {\n\t\tconst updatedTheme = this.assembleTheme(customizations)\n\t\t// Set no logo until we sanitize it.\n\t\tconst filledWithoutLogo = Object.assign({}, updatedTheme, {\n\t\t\tlogo: \"\",\n\t\t})\n\n\t\tthis.applyTrustedTheme(filledWithoutLogo, filledWithoutLogo.themeId)\n\n\t\tawait this.sanitizeTheme(updatedTheme)\n\n\t\t// Now apply with the logo\n\t\tthis.applyTrustedTheme(updatedTheme, filledWithoutLogo.themeId)\n\n\t\tif (permanent) {\n\t\t\tthis._themePreference = updatedTheme.themeId\n\t\t\tawait this.updateSavedThemeDefinition(updatedTheme)\n\t\t\tawait this.themeFacade.setThemePreference(updatedTheme.themeId)\n\t\t}\n\n\t\treturn updatedTheme\n\t}\n\n\tasync storeCustomThemeForCustomizations(customizations: ThemeCustomizations) {\n\t\tconst newTheme = this.assembleTheme(customizations)\n\t\tawait this.updateSavedThemeDefinition(newTheme)\n\t}\n\n\tprivate async sanitizeTheme(theme: Theme) {\n\t\tif (theme.logo) {\n\t\t\tconst logo = theme.logo\n\t\t\tconst htmlSanitizer = await this.htmlSanitizer()\n\t\t\ttheme.logo = htmlSanitizer.sanitizeHTML(logo).html\n\t\t}\n\t}\n\n\t/**\n\t * Save theme to the storage.\n\t */\n\tprivate async updateSavedThemeDefinition(updatedTheme: Theme): Promise<Theme> {\n\t\tconst nonNullTheme = Object.assign({}, this.getDefaultTheme(), updatedTheme)\n\t\tawait this.sanitizeTheme(nonNullTheme)\n\t\tconst oldThemes = (await this.themeFacade.getThemes()) as Array<Theme>\n\t\tfindAndRemove(oldThemes, (t) => t.themeId === updatedTheme.themeId)\n\t\toldThemes.push(nonNullTheme)\n\t\tawait this.themeFacade.setThemes(oldThemes)\n\t\treturn nonNullTheme\n\t}\n\n\tgetDefaultTheme(): Theme {\n\t\treturn Object.assign({}, themes()[defaultThemeId])\n\t}\n\n\tgetBaseTheme(baseId: BaseThemeId): Theme {\n\t\t// Make a defensive copy so that original theme definition is not modified.\n\t\treturn Object.assign({}, themes()[baseId])\n\t}\n\n\tshouldAllowChangingTheme(): boolean {\n\t\treturn window.whitelabelCustomizations == null\n\t}\n\n\t/**\n\t * Assembles a new theme object from customizations.\n\t */\n\tprivate assembleTheme(customizations: ThemeCustomizations): Theme {\n\t\tif (!customizations.base) {\n\t\t\treturn Object.assign({}, customizations as Theme)\n\t\t} else if (customizations.base && customizations.logo) {\n\t\t\treturn Object.assign({}, this.getBaseTheme(customizations.base), customizations)\n\t\t} else {\n\t\t\tconst themeWithoutLogo = Object.assign({}, this.getBaseTheme(customizations.base), customizations)\n\t\t\t// This is a whitelabel theme where logo has not been overwritten.\n\t\t\t// Generate a logo with muted colors. We do not want to color our logo in\n\t\t\t// some random color.\n\t\t\tconst grayedLogo =\n\t\t\t\tthis.app === AppType.Calendar\n\t\t\t\t\t? getCalendarLogoSvg(logoDefaultGrey, logoDefaultGrey, logoDefaultGrey)\n\t\t\t\t\t: getMailLogoSvg(logoDefaultGrey, logoDefaultGrey, logoDefaultGrey)\n\t\t\treturn { ...themeWithoutLogo, ...{ logo: grayedLogo } }\n\t\t}\n\t}\n\n\tasync getCustomThemes(): Promise<Array<ThemeId>> {\n\t\treturn mapAndFilterNull(await this.themeFacade.getThemes(), (theme) => {\n\t\t\treturn !(theme.themeId in themes()) ? theme.themeId : null\n\t\t})\n\t}\n}\n\nexport class NativeThemeFacade implements ThemeFacade {\n\tconstructor(private readonly themeFacade: LazyLoaded<ThemeFacade>) {}\n\n\tasync getThemePreference(): Promise<ThemeId | null> {\n\t\tconst dispatcher = await this.themeFacade.getAsync()\n\t\treturn dispatcher.getThemePreference()\n\t}\n\n\tasync setThemePreference(theme: ThemeId): Promise<void> {\n\t\tconst dispatcher = await this.themeFacade.getAsync()\n\t\treturn dispatcher.setThemePreference(theme)\n\t}\n\n\tasync getThemes(): Promise<Array<Theme>> {\n\t\tconst dispatcher = await this.themeFacade.getAsync()\n\t\treturn (await dispatcher.getThemes()) as Theme[]\n\t}\n\n\tasync setThemes(themes: ReadonlyArray<Theme>): Promise<void> {\n\t\tconst dispatcher = await this.themeFacade.getAsync()\n\t\treturn dispatcher.setThemes(themes)\n\t}\n\n\tasync prefersDark(): Promise<boolean> {\n\t\tconst dispatcher = await this.themeFacade.getAsync()\n\t\treturn dispatcher.prefersDark()\n\t}\n}\n\nexport class WebThemeFacade implements ThemeFacade {\n\tprivate readonly mediaQuery: MediaQueryList | undefined = window.matchMedia?.(\"(prefers-color-scheme: dark)\")\n\n\tconstructor(private readonly deviceConfig: DeviceConfig) {}\n\n\tasync getThemePreference(): Promise<ThemeId | null> {\n\t\treturn this.deviceConfig.getTheme()\n\t}\n\n\tasync setThemePreference(theme: ThemeId): Promise<void> {\n\t\treturn this.deviceConfig.setTheme(theme)\n\t}\n\n\tasync getThemes(): Promise<Array<Theme>> {\n\t\t// no-op\n\t\treturn []\n\t}\n\n\tasync setThemes(themes: ReadonlyArray<Theme>) {\n\t\t// no-op\n\t}\n\n\tasync prefersDark(): Promise<boolean> {\n\t\treturn this.mediaQuery?.matches ?? false\n\t}\n\n\taddDarkListener(listener: () => unknown) {\n\t\tthis.mediaQuery?.addEventListener(\"change\", listener)\n\t}\n}\n","import Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport { MailboxCounters, MailboxDetail, MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { FolderSystem } from \"../../../common/api/common/mail/FolderSystem.js\"\nimport {\n\tassertNotNull,\n\tcollectToMap,\n\tgetFirstOrThrow,\n\tgroupBy,\n\tisNotNull,\n\tlazyMemoized,\n\tneverNull,\n\tnoOp,\n\tofClass,\n\tpartition,\n\tpromiseMap,\n\tsplitInChunks,\n} from \"@tutao/tutanota-utils\"\nimport {\n\tMail,\n\tMailboxGroupRoot,\n\tMailboxProperties,\n\tMailFolder,\n\tMailFolderTypeRef,\n\tMailSetEntryTypeRef,\n\tMailTypeRef,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport {\n\tFeatureType,\n\tisLabel,\n\tMailReportType,\n\tMailSetKind,\n\tMAX_NBR_MOVE_DELETE_MAIL_SERVICE,\n\tOperationType,\n\tReportMovedMailsType,\n} from \"../../../common/api/common/TutanotaConstants.js\"\nimport { CUSTOM_MIN_ID, elementIdPart, GENERATED_MAX_ID, getElementId, getListId, isSameId, listIdPart } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { containsEventOfType, EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport m from \"mithril\"\nimport { WebsocketCounterData } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { Notifications, NotificationType } from \"../../../common/gui/Notifications.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel.js\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError.js\"\nimport { LockedError, NotFoundError, PreconditionFailedError } from \"../../../common/api/common/error/RestError.js\"\nimport { UserError } from \"../../../common/api/main/UserError.js\"\nimport { EventController } from \"../../../common/api/main/EventController.js\"\nimport { InboxRuleHandler } from \"./InboxRuleHandler.js\"\nimport { WebsocketConnectivityModel } from \"../../../common/misc/WebsocketConnectivityModel.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { LoginController } from \"../../../common/api/main/LoginController.js\"\nimport { MailFacade } from \"../../../common/api/worker/facades/lazy/MailFacade.js\"\nimport { assertSystemFolderOfType } from \"./MailUtils.js\"\nimport { isSpamOrTrashFolder } from \"./MailChecks.js\"\n\ninterface MailboxSets {\n\tfolders: FolderSystem\n\t/** a map from element id to the mail set */\n\tlabels: ReadonlyMap<Id, MailFolder>\n}\n\nexport const enum LabelState {\n\t/** Label was applied to all emails*/\n\tApplied,\n\t/** Label was applied to some of the emails but not to others*/\n\tAppliedToSome,\n\t/** Label was applied to none of the emails */\n\tNotApplied,\n}\n\nexport class MailModel {\n\treadonly mailboxCounters: Stream<MailboxCounters> = stream({})\n\t/**\n\t * map from mailbox folders list to folder system\n\t */\n\tprivate mailSets: Map<Id, MailboxSets> = new Map()\n\n\tconstructor(\n\t\tprivate readonly notifications: Notifications,\n\t\tprivate readonly mailboxModel: MailboxModel,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly logins: LoginController,\n\t\tprivate readonly mailFacade: MailFacade,\n\t\tprivate readonly connectivityModel: WebsocketConnectivityModel | null,\n\t\tprivate readonly inboxRuleHandler: InboxRuleHandler | null,\n\t) {}\n\n\t// only init listeners once\n\tprivate readonly initListeners = lazyMemoized(() => {\n\t\tthis.eventController.addEntityListener((updates) => this.entityEventsReceived(updates))\n\n\t\tthis.eventController.getCountersStream().map((update) => {\n\t\t\tthis._mailboxCountersUpdates(update)\n\t\t})\n\n\t\tthis.mailboxModel.mailboxDetails.map(() => {\n\t\t\t// this can cause little race between loading the folders but it should be fine\n\t\t\tthis.loadMailSets().then((newFolders) => (this.mailSets = newFolders))\n\t\t})\n\t})\n\n\tasync init(): Promise<void> {\n\t\tthis.initListeners()\n\t\tthis.mailSets = await this.loadMailSets()\n\t}\n\n\tprivate async loadMailSets(): Promise<Map<Id, MailboxSets>> {\n\t\tconst mailboxDetails = await this.mailboxModel.getMailboxDetails()\n\n\t\tconst tempFolders = new Map<Id, MailboxSets>()\n\n\t\tfor (let detail of mailboxDetails) {\n\t\t\tif (detail.mailbox.folders) {\n\t\t\t\tconst mailSets = await this.loadMailSetsForListId(neverNull(detail.mailbox.folders).folders)\n\t\t\t\tconst [labels, folders] = partition(mailSets, isLabel)\n\t\t\t\tconst labelsMap = collectToMap(labels, getElementId)\n\t\t\t\tconst folderSystem = new FolderSystem(folders)\n\t\t\t\ttempFolders.set(detail.mailbox.folders._id, { folders: folderSystem, labels: labelsMap })\n\t\t\t}\n\t\t}\n\t\treturn tempFolders\n\t}\n\n\tprivate loadMailSetsForListId(listId: Id): Promise<MailFolder[]> {\n\t\treturn this.entityClient.loadAll(MailFolderTypeRef, listId).then((folders) => {\n\t\t\treturn folders.filter((f) => {\n\t\t\t\t// We do not show spam or archive for external users\n\t\t\t\tif (!this.logins.isInternalUserLoggedIn() && (f.folderType === MailSetKind.SPAM || f.folderType === MailSetKind.ARCHIVE)) {\n\t\t\t\t\treturn false\n\t\t\t\t} else {\n\t\t\t\t\treturn !(this.logins.isEnabled(FeatureType.InternalCommunication) && f.folderType === MailSetKind.SPAM)\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\tprivate async getFolders(): Promise<Map<Id, MailboxSets>> {\n\t\tif (this.mailSets.size === 0) {\n\t\t\treturn await this.loadMailSets()\n\t\t} else {\n\t\t\treturn this.mailSets\n\t\t}\n\t}\n\n\t// visibleForTesting\n\tasync entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\tfor (const update of updates) {\n\t\t\tif (isUpdateForTypeRef(MailFolderTypeRef, update)) {\n\t\t\t\tawait this.init()\n\t\t\t\tm.redraw()\n\t\t\t} else if (\n\t\t\t\tisUpdateForTypeRef(MailTypeRef, update) &&\n\t\t\t\tupdate.operation === OperationType.CREATE &&\n\t\t\t\t!containsEventOfType(updates, OperationType.DELETE, update.instanceId)\n\t\t\t) {\n\t\t\t\tif (this.inboxRuleHandler && this.connectivityModel) {\n\t\t\t\t\tconst mailId: IdTuple = [update.instanceListId, update.instanceId]\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst mail = await this.entityClient.load(MailTypeRef, mailId)\n\t\t\t\t\t\tconst folder = this.getMailFolderForMail(mail)\n\n\t\t\t\t\t\tif (folder && folder.folderType === MailSetKind.INBOX) {\n\t\t\t\t\t\t\t// If we don't find another delete operation on this email in the batch, then it should be a create operation,\n\t\t\t\t\t\t\t// otherwise it's a move\n\t\t\t\t\t\t\tawait this.getMailboxDetailsForMail(mail)\n\t\t\t\t\t\t\t\t.then((mailboxDetail) => {\n\t\t\t\t\t\t\t\t\t// We only apply rules on server if we are the leader in case of incoming messages\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\tmailboxDetail &&\n\t\t\t\t\t\t\t\t\t\tthis.inboxRuleHandler?.findAndApplyMatchingRule(\n\t\t\t\t\t\t\t\t\t\t\tmailboxDetail,\n\t\t\t\t\t\t\t\t\t\t\tmail,\n\t\t\t\t\t\t\t\t\t\t\tthis.connectivityModel ? this.connectivityModel.isLeader() : false,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then((newFolderAndMail) => {\n\t\t\t\t\t\t\t\t\tif (newFolderAndMail) {\n\t\t\t\t\t\t\t\t\t\tthis._showNotification(newFolderAndMail.folder, newFolderAndMail.mail)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis._showNotification(folder, mail)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch(noOp)\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t\t\tconsole.log(`Could not find updated mail ${JSON.stringify(mailId)}`)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getMailboxDetailsForMail(mail: Mail): Promise<MailboxDetail | null> {\n\t\tconst detail = await this.mailboxModel.getMailboxDetailsForMailGroup(assertNotNull(mail._ownerGroup))\n\t\tif (detail == null) {\n\t\t\tconsole.warn(\"Mailbox detail for mail does not exist\", mail)\n\t\t}\n\t\treturn detail\n\t}\n\n\tasync getMailboxDetailsForMailFolder(mailFolder: MailFolder): Promise<MailboxDetail | null> {\n\t\tconst detail = await this.mailboxModel.getMailboxDetailsForMailGroup(assertNotNull(mailFolder._ownerGroup))\n\t\tif (detail == null) {\n\t\t\tconsole.warn(\"Mailbox detail for mail folder does not exist\", mailFolder)\n\t\t}\n\t\treturn detail\n\t}\n\n\tasync getMailboxFoldersForMail(mail: Mail): Promise<FolderSystem | null> {\n\t\tconst mailboxDetail = await this.getMailboxDetailsForMail(mail)\n\t\tif (mailboxDetail && mailboxDetail.mailbox.folders) {\n\t\t\tconst folders = await this.getFolders()\n\t\t\treturn folders.get(mailboxDetail.mailbox.folders._id)?.folders ?? null\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\tasync getMailboxFoldersForId(foldersId: Id): Promise<FolderSystem> {\n\t\tconst folderStructures = await this.loadMailSets()\n\t\tconst folderSystem = folderStructures.get(foldersId)?.folders\n\t\tif (folderSystem == null) {\n\t\t\tthrow new ProgrammingError(`no folder system for folder id ${foldersId}`)\n\t\t}\n\t\treturn folderSystem\n\t}\n\n\tgetMailFolderForMail(mail: Mail): MailFolder | null {\n\t\tconst folderSystem = this.getFolderSystemByGroupId(assertNotNull(mail._ownerGroup))\n\t\tif (folderSystem == null) return null\n\n\t\treturn folderSystem.getFolderByMail(mail)\n\t}\n\n\tgetFolderSystemByGroupId(groupId: Id): FolderSystem | null {\n\t\treturn this.getMailSetsForGroup(groupId)?.folders ?? null\n\t}\n\n\tgetLabelsByGroupId(groupId: Id): ReadonlyMap<Id, MailFolder> {\n\t\treturn this.getMailSetsForGroup(groupId)?.labels ?? new Map()\n\t}\n\n\t/**\n\t * @return all labels that could be applied to the {@param mails} with the state relative to {@param mails}.\n\t */\n\tgetLabelStatesForMails(mails: readonly Mail[]): { label: MailFolder; state: LabelState }[] {\n\t\tif (mails.length === 0) {\n\t\t\treturn []\n\t\t}\n\t\tconst labels = this.getLabelsByGroupId(assertNotNull(getFirstOrThrow(mails)._ownerGroup))\n\t\tconst allUsedSets = new Map<Id, number>()\n\t\tfor (const mail of mails) {\n\t\t\tfor (const set of mail.sets) {\n\t\t\t\tconst currentValue = allUsedSets.get(elementIdPart(set)) ?? 0\n\t\t\t\tallUsedSets.set(elementIdPart(set), currentValue + 1)\n\t\t\t}\n\t\t}\n\n\t\treturn Array.from(labels.values()).map((label) => {\n\t\t\tconst count = allUsedSets.get(getElementId(label)) ?? 0\n\t\t\tconst state: LabelState = count === 0 ? LabelState.NotApplied : count === mails.length ? LabelState.Applied : LabelState.AppliedToSome\n\t\t\treturn { label, state }\n\t\t})\n\t}\n\n\tgetLabelsForMails(mails: readonly Mail[]): ReadonlyMap<Id, ReadonlyArray<MailFolder>> {\n\t\tconst labelsForMails = new Map<Id, MailFolder[]>()\n\t\tfor (const mail of mails) {\n\t\t\tlabelsForMails.set(getElementId(mail), this.getLabelsForMail(mail))\n\t\t}\n\n\t\treturn labelsForMails\n\t}\n\n\t/**\n\t * @return labels that are currently applied to {@param mail}.\n\t */\n\tgetLabelsForMail(mail: Mail): MailFolder[] {\n\t\tconst groupLabels = this.getLabelsByGroupId(assertNotNull(mail._ownerGroup))\n\t\treturn mail.sets.map((labelId) => groupLabels.get(elementIdPart(labelId))).filter(isNotNull)\n\t}\n\n\tprivate getMailSetsForGroup(groupId: Id): MailboxSets | null {\n\t\tconst mailboxDetails = this.mailboxModel.mailboxDetails() || []\n\t\tconst detail = mailboxDetails.find((md) => groupId === md.mailGroup._id)\n\t\tconst sets = detail?.mailbox?.folders?._id\n\t\tif (sets == null) {\n\t\t\treturn null\n\t\t}\n\t\treturn this.mailSets.get(sets) ?? null\n\t}\n\n\t/**\n\t * Finally move all given mails. Caller must ensure that mails are only from\n\t * * one folder (because we send one source folder)\n\t * * from one list (for locking it on the server)\n\t */\n\tasync _moveMails(mails: Mail[], targetMailFolder: MailFolder): Promise<void> {\n\t\t// Do not move if target is the same as the current mailFolder\n\t\tconst sourceMailFolder = this.getMailFolderForMail(mails[0])\n\t\tlet moveMails = mails.filter((m) => sourceMailFolder !== targetMailFolder && targetMailFolder._ownerGroup === m._ownerGroup) // prevent moving mails between mail boxes.\n\n\t\tif (moveMails.length > 0 && sourceMailFolder && !isSameId(targetMailFolder._id, sourceMailFolder._id)) {\n\t\t\tconst mailChunks = splitInChunks(\n\t\t\t\tMAX_NBR_MOVE_DELETE_MAIL_SERVICE,\n\t\t\t\tmails.map((m) => m._id),\n\t\t\t)\n\n\t\t\tfor (const mailChunk of mailChunks) {\n\t\t\t\tawait this.mailFacade.moveMails(mailChunk, sourceMailFolder._id, targetMailFolder._id)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Preferably use moveMails() in MailGuiUtils.js which has built-in error handling\n\t * @throws PreconditionFailedError or LockedError if operation is locked on the server\n\t */\n\tasync moveMails(mails: ReadonlyArray<Mail>, targetMailFolder: MailFolder): Promise<void> {\n\t\tconst mailsPerFolder = groupBy(mails, (mail) => {\n\t\t\treturn this.getMailFolderForMail(mail)?._id?.[1]\n\t\t})\n\n\t\tfor (const [folderId, mailsInFolder] of mailsPerFolder) {\n\t\t\tconst sourceMailFolder = this.getMailFolderForMail(mailsInFolder[0])\n\n\t\t\tif (sourceMailFolder) {\n\t\t\t\t// group another time because mails in the same Set can be from different mail bags.\n\t\t\t\tconst mailsPerList = groupBy(mailsInFolder, (mail) => getListId(mail))\n\t\t\t\tfor (const [listId, mailsInList] of mailsPerList) {\n\t\t\t\t\tawait this._moveMails(mailsInList, targetMailFolder)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Move mail: no mail folder for folder id\", folderId)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Finally deletes the given mails if they are already in the trash or spam folders,\n\t * otherwise moves them to the trash folder.\n\t * A deletion confirmation must have been show before.\n\t */\n\tasync deleteMails(mails: ReadonlyArray<Mail>): Promise<void> {\n\t\tif (mails.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tconst mailsPerFolder = groupBy(mails, (mail) => {\n\t\t\treturn this.getMailFolderForMail(mail)?._id?.[1]\n\t\t})\n\n\t\tconst folders = await this.getMailboxFoldersForMail(mails[0])\n\t\tif (folders == null) {\n\t\t\treturn\n\t\t}\n\t\tconst trashFolder = assertNotNull(folders.getSystemFolderByType(MailSetKind.TRASH))\n\n\t\tfor (const [folder, mailsInFolder] of mailsPerFolder) {\n\t\t\tconst sourceMailFolder = this.getMailFolderForMail(mailsInFolder[0])\n\n\t\t\tconst mailsPerList = groupBy(mailsInFolder, (mail) => getListId(mail))\n\t\t\tfor (const [listId, mailsInList] of mailsPerList) {\n\t\t\t\tif (sourceMailFolder) {\n\t\t\t\t\tif (isSpamOrTrashFolder(folders, sourceMailFolder)) {\n\t\t\t\t\t\tawait this.finallyDeleteMails(mailsInList)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait this._moveMails(mailsInList, trashFolder)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"Delete mail: no mail folder for list id\", folder)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Finally deletes all given mails. Caller must ensure that mails are only from one folder and the folder must allow final delete operation.\n\t */\n\tprivate async finallyDeleteMails(mails: Mail[]): Promise<void> {\n\t\tif (!mails.length) return Promise.resolve()\n\t\tconst mailFolder = neverNull(this.getMailFolderForMail(mails[0]))\n\t\tconst mailIds = mails.map((m) => m._id)\n\t\tconst mailChunks = splitInChunks(MAX_NBR_MOVE_DELETE_MAIL_SERVICE, mailIds)\n\n\t\tfor (const mailChunk of mailChunks) {\n\t\t\tawait this.mailFacade.deleteMails(mailChunk, mailFolder._id)\n\t\t}\n\t}\n\n\t/**\n\t * Sends the given folder and all its descendants to the spam folder, reporting mails (if applicable) and removes any empty folders\n\t */\n\tasync sendFolderToSpam(folder: MailFolder): Promise<void> {\n\t\tconst mailboxDetail = await this.getMailboxDetailsForMailFolder(folder)\n\t\tif (mailboxDetail == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst folderSystem = this.getFolderSystemByGroupId(assertNotNull(folder._ownerGroup))\n\t\tif (folderSystem == null) return\n\t\tconst deletedFolder = await this.removeAllEmpty(folderSystem, folder)\n\t\tif (!deletedFolder) {\n\t\t\treturn this.mailFacade.updateMailFolderParent(folder, assertSystemFolderOfType(folderSystem, MailSetKind.SPAM)._id)\n\t\t}\n\t}\n\n\tasync reportMails(reportType: MailReportType, mails: ReadonlyArray<Mail>): Promise<void> {\n\t\tfor (const mail of mails) {\n\t\t\tawait this.mailFacade.reportMail(mail, reportType).catch(ofClass(NotFoundError, (e) => console.log(\"mail to be reported not found\", e)))\n\t\t}\n\t}\n\n\tisMovingMailsAllowed(): boolean {\n\t\treturn this.logins.getUserController().isInternalUser()\n\t}\n\n\tcanManageLabels(): boolean {\n\t\treturn this.logins.getUserController().isInternalUser()\n\t}\n\n\tcanAssignLabels(): boolean {\n\t\treturn this.logins.getUserController().isInternalUser()\n\t}\n\n\tisExportingMailsAllowed(): boolean {\n\t\treturn !this.logins.isEnabled(FeatureType.DisableMailExport)\n\t}\n\n\tasync markMails(mails: readonly Mail[], unread: boolean): Promise<void> {\n\t\tawait promiseMap(\n\t\t\tmails,\n\t\t\tasync (mail) => {\n\t\t\t\tif (mail.unread !== unread) {\n\t\t\t\t\tmail.unread = unread\n\t\t\t\t\treturn this.entityClient.update(mail).catch(ofClass(NotFoundError, noOp)).catch(ofClass(LockedError, noOp))\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ concurrency: 5 },\n\t\t)\n\t}\n\n\tasync applyLabels(mails: readonly Mail[], addedLabels: readonly MailFolder[], removedLabels: readonly MailFolder[]): Promise<void> {\n\t\tconst groupedByListIds = groupBy(mails, (mail) => listIdPart(mail._id))\n\t\tfor (const [_, groupedMails] of groupedByListIds) {\n\t\t\tconst mailChunks = splitInChunks(MAX_NBR_MOVE_DELETE_MAIL_SERVICE, groupedMails)\n\t\t\tfor (const mailChunk of mailChunks) {\n\t\t\t\tawait this.mailFacade.applyLabels(mailChunk, addedLabels, removedLabels)\n\t\t\t}\n\t\t}\n\t}\n\n\t_mailboxCountersUpdates(counters: WebsocketCounterData) {\n\t\tconst normalized = this.mailboxCounters() || {}\n\t\tconst group = normalized[counters.mailGroup] || {}\n\t\tfor (const value of counters.counterValues) {\n\t\t\tgroup[value.counterId] = Number(value.count) || 0\n\t\t}\n\t\tnormalized[counters.mailGroup] = group\n\t\tthis.mailboxCounters(normalized)\n\t}\n\n\t_showNotification(folder: MailFolder, mail: Mail) {\n\t\tthis.notifications.showNotification(\n\t\t\tNotificationType.Mail,\n\t\t\tlang.get(\"newMails_msg\"),\n\t\t\t{\n\t\t\t\tactions: [],\n\t\t\t},\n\t\t\t(_) => {\n\t\t\t\tm.route.set(`/mail/${getElementId(folder)}/${getElementId(mail)}`)\n\t\t\t\twindow.focus()\n\t\t\t},\n\t\t)\n\t}\n\n\tgetCounterValue(folder: MailFolder): Promise<number | null> {\n\t\treturn this.getMailboxDetailsForMailFolder(folder)\n\t\t\t.then((mailboxDetails) => {\n\t\t\t\tif (mailboxDetails == null) {\n\t\t\t\t\treturn null\n\t\t\t\t} else {\n\t\t\t\t\tconst mailGroupCounter = this.mailboxCounters()[mailboxDetails.mailGroup._id]\n\t\t\t\t\tif (mailGroupCounter) {\n\t\t\t\t\t\tconst counterId = folder.isMailSet ? getElementId(folder) : folder.mails\n\t\t\t\t\t\treturn mailGroupCounter[counterId]\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(() => null)\n\t}\n\n\tcheckMailForPhishing(\n\t\tmail: Mail,\n\t\tlinks: Array<{\n\t\t\thref: string\n\t\t\tinnerHTML: string\n\t\t}>,\n\t): Promise<boolean> {\n\t\treturn this.mailFacade.checkMailForPhishing(mail, links)\n\t}\n\n\t/**\n\t * Sends the given folder and all its descendants to the trash folder, removes any empty folders\n\t */\n\tasync trashFolderAndSubfolders(folder: MailFolder): Promise<void> {\n\t\tconst mailboxDetail = await this.getMailboxDetailsForMailFolder(folder)\n\t\tif (mailboxDetail == null) {\n\t\t\treturn\n\t\t}\n\t\tconst folderSystem = this.getFolderSystemByGroupId(assertNotNull(folder._ownerGroup))\n\t\tif (folderSystem == null) return\n\n\t\tconst deletedFolder = await this.removeAllEmpty(folderSystem, folder)\n\t\tif (!deletedFolder) {\n\t\t\tconst trash = assertSystemFolderOfType(folderSystem, MailSetKind.TRASH)\n\t\t\treturn this.mailFacade.updateMailFolderParent(folder, trash._id)\n\t\t}\n\t}\n\n\t/**\n\t * This is called when moving a folder to SPAM or TRASH, which do not allow empty folders (since only folders that contain mail are allowed)\n\t */\n\tprivate async removeAllEmpty(folderSystem: FolderSystem, folder: MailFolder): Promise<boolean> {\n\t\t// sort descendants deepest first so that we can clean them up before checking their ancestors\n\t\tconst descendants = folderSystem.getDescendantFoldersOfParent(folder._id).sort((l, r) => r.level - l.level)\n\n\t\t// we completely delete empty folders\n\t\tlet someNonEmpty = false\n\t\t// we don't update folder system quickly enough so we keep track of deleted folders here and consider them \"empty\" when all their children are here\n\t\tconst deleted = new Set<Id>()\n\t\tfor (const descendant of descendants) {\n\t\t\tif (\n\t\t\t\t(await this.isEmptyFolder(descendant.folder)) &&\n\t\t\t\tfolderSystem.getCustomFoldersOfParent(descendant.folder._id).every((f) => deleted.has(getElementId(f)))\n\t\t\t) {\n\t\t\t\tdeleted.add(getElementId(descendant.folder))\n\t\t\t\tawait this.finallyDeleteCustomMailFolder(descendant.folder)\n\t\t\t} else {\n\t\t\t\tsomeNonEmpty = true\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\t(await this.isEmptyFolder(folder)) &&\n\t\t\tfolderSystem.getCustomFoldersOfParent(folder._id).every((f) => deleted.has(getElementId(f))) &&\n\t\t\t!someNonEmpty\n\t\t) {\n\t\t\tawait this.finallyDeleteCustomMailFolder(folder)\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\t// Only load one mail, if there is even one we won't remove\n\tprivate async isEmptyFolder(descendant: MailFolder) {\n\t\tif (descendant.isMailSet) {\n\t\t\treturn (await this.entityClient.loadRange(MailSetEntryTypeRef, descendant.entries, CUSTOM_MIN_ID, 1, false)).length === 0\n\t\t} else {\n\t\t\treturn (await this.entityClient.loadRange(MailTypeRef, descendant.mails, GENERATED_MAX_ID, 1, true)).length === 0\n\t\t}\n\t}\n\n\tpublic async finallyDeleteCustomMailFolder(folder: MailFolder): Promise<void> {\n\t\tif (folder.folderType !== MailSetKind.CUSTOM && folder.folderType !== MailSetKind.Imported) {\n\t\t\tthrow new ProgrammingError(\"Cannot delete non-custom folder: \" + String(folder._id))\n\t\t}\n\n\t\treturn await this.mailFacade\n\t\t\t.deleteFolder(folder._id)\n\t\t\t.catch(ofClass(NotFoundError, () => console.log(\"mail folder already deleted\")))\n\t\t\t.catch(\n\t\t\t\tofClass(PreconditionFailedError, () => {\n\t\t\t\t\tthrow new UserError(\"operationStillActive_msg\")\n\t\t\t\t}),\n\t\t\t)\n\t}\n\n\tasync fixupCounterForFolder(folder: MailFolder, unreadMails: number) {\n\t\tconst mailboxDetails = await this.getMailboxDetailsForMailFolder(folder)\n\t\tif (mailboxDetails) {\n\t\t\tawait this.mailFacade.fixupCounterForFolder(mailboxDetails.mailGroup._id, folder, unreadMails)\n\t\t}\n\t}\n\n\tasync clearFolder(folder: MailFolder): Promise<void> {\n\t\tawait this.mailFacade.clearFolder(folder._id)\n\t}\n\n\tasync unsubscribe(mail: Mail, recipient: string, headers: string[]) {\n\t\tawait this.mailFacade.unsubscribe(mail._id, recipient, headers)\n\t}\n\n\tasync saveReportMovedMails(mailboxGroupRoot: MailboxGroupRoot, reportMovedMails: ReportMovedMailsType): Promise<MailboxProperties> {\n\t\tconst mailboxProperties = await this.mailboxModel.loadOrCreateMailboxProperties(mailboxGroupRoot)\n\t\tmailboxProperties.reportMovedMails = reportMovedMails\n\t\tawait this.entityClient.update(mailboxProperties)\n\t\treturn mailboxProperties\n\t}\n\n\t/**\n\t * Create a label (aka MailSet aka {@link MailFolder} of kind {@link MailSetKind.LABEL}) for the group {@param mailGroupId}.\n\t */\n\tasync createLabel(mailGroupId: Id, labelData: { name: string; color: string }) {\n\t\tawait this.mailFacade.createLabel(mailGroupId, labelData)\n\t}\n\n\tasync updateLabel(label: MailFolder, newData: { name: string; color: string }) {\n\t\tawait this.mailFacade.updateLabel(label, newData.name, newData.color)\n\t}\n\n\tasync deleteLabel(label: MailFolder) {\n\t\tawait this.mailFacade.deleteLabel(label)\n\t}\n\n\tasync getMailSetById(folderElementId: Id): Promise<MailFolder | null> {\n\t\tconst folderStructures = await this.loadMailSets()\n\t\tfor (const folders of folderStructures.values()) {\n\t\t\tconst folder = folders.folders.getFolderById(folderElementId)\n\t\t\tif (folder) {\n\t\t\t\treturn folder\n\t\t\t}\n\n\t\t\tconst label = folders.labels.get(folderElementId)\n\t\t\tif (label) {\n\t\t\t\treturn label\n\t\t\t}\n\t\t}\n\t\treturn null\n\t}\n\n\tgetImportedMailSets(): Array<MailFolder> {\n\t\treturn [...this.mailSets.values()].filter((f) => f.folders.importedMailSet).map((f) => f.folders.importedMailSet!)\n\t}\n}\n","import { IProgressMonitor, ProgressListener } from \"./ProgressMonitor\"\nimport { first, last } from \"@tutao/tutanota-utils\"\n\nconst DEFAULT_RATE_PER_SECOND = 0.5\nconst DEFAULT_PROGRESS_ESTIMATION_REFRESH_MS: number = 1000\nconst MINIMUM_HISTORY_LENGTH_FOR_ESTIMATION = 3\nconst RATE_PER_SECOND_MAXIMUM_SCALING_RATIO: number = 0.75\n\nconst WORK_MAX_PERCENTAGE = 100\nconst WORK_COMPLETED_MIN = 0\n\n/**\n * Class to calculate percentage of total work and report it back.\n * Call {@code workDone() or @code totalWorkDone} for each work step and\n * {@code completed()} when you are done.\n * EstimatingProgressMonitor works the same as the {@link ProgressMonitor}, but\n * additionally **estimates** progress internally on the go.\n */\nexport class EstimatingProgressMonitor implements IProgressMonitor {\n\tworkCompleted: number\n\tratePerSecondHistory: Array<Readonly<[number, number]>> = Array.of([Date.now(), DEFAULT_RATE_PER_SECOND]) // entries: timestamp, rate per second\n\ttotalWork: number\n\tprogressEstimation: TimeoutID\n\n\tconstructor(totalWork: number, private readonly updater: ProgressListener) {\n\t\tthis.workCompleted = WORK_COMPLETED_MIN\n\t\tthis.totalWork = totalWork\n\t}\n\n\tpublic updateTotalWork(value: number) {\n\t\tthis.totalWork = value\n\t}\n\n\tpublic continueEstimation() {\n\t\tclearInterval(this.progressEstimation)\n\t\tthis.progressEstimation = setInterval(() => {\n\t\t\tif (this.ratePerSecondHistory.length < MINIMUM_HISTORY_LENGTH_FOR_ESTIMATION) {\n\t\t\t\tthis.workEstimate(DEFAULT_RATE_PER_SECOND)\n\t\t\t} else {\n\t\t\t\tconst previousRateEntry = this.ratePerSecondHistory[this.ratePerSecondHistory.length - 2]\n\t\t\t\tconst previousRateEntryTimestamp = first(previousRateEntry)!\n\n\t\t\t\tconst lastRateEntry = last(this.ratePerSecondHistory)!\n\t\t\t\tconst lastRateEntryTimestamp = first(lastRateEntry)!\n\t\t\t\tconst lastRatePerSecond = last(lastRateEntry)!\n\n\t\t\t\tlet lastDurationBetweenRatePerSecondUpdatesMs = lastRateEntryTimestamp - previousRateEntryTimestamp\n\t\t\t\tlet currentDurationMs = Date.now() - lastRateEntryTimestamp\n\t\t\t\tlet ratePerSecondScalingRatio: number = Math.min(\n\t\t\t\t\tRATE_PER_SECOND_MAXIMUM_SCALING_RATIO,\n\t\t\t\t\tlastDurationBetweenRatePerSecondUpdatesMs / currentDurationMs,\n\t\t\t\t)\n\n\t\t\t\tlet newRatePerSecondEstimate = lastRatePerSecond * ratePerSecondScalingRatio\n\t\t\t\tlet workDoneEstimation = Math.max(DEFAULT_RATE_PER_SECOND, newRatePerSecondEstimate)\n\n\t\t\t\t// only update estimation if we did not exceed the actual totalWork yet\n\t\t\t\tif (this.workCompleted + workDoneEstimation < this.totalWork) {\n\t\t\t\t\tthis.workEstimate(workDoneEstimation)\n\t\t\t\t}\n\t\t\t}\n\t\t}, DEFAULT_PROGRESS_ESTIMATION_REFRESH_MS)\n\t}\n\n\tpublic pauseEstimation() {\n\t\tclearInterval(this.progressEstimation)\n\t\tthis.ratePerSecondHistory = Array.of([Date.now(), DEFAULT_RATE_PER_SECOND])\n\t}\n\n\tprivate updateRatePerSecond(newWorkAmount: number) {\n\t\tlet lastRateEntry = last(this.ratePerSecondHistory)!\n\t\tlet lastTimestamp = first(lastRateEntry)!\n\t\tlet now = Date.now()\n\t\tlet durationSinceLastRateEntrySeconds = (now - lastTimestamp) / 1000\n\t\tlet ratePerSecond = newWorkAmount / durationSinceLastRateEntrySeconds\n\t\tlet newRateEntry: Readonly<[number, number]> = [now, ratePerSecond]\n\t\tthis.ratePerSecondHistory.push(newRateEntry)\n\t}\n\n\tprivate workEstimate(estimate: number) {\n\t\tthis.workCompleted += estimate\n\t\tthis.updater(this.percentage())\n\t}\n\n\tpublic workDone(amount: number) {\n\t\tthis.updateRatePerSecond(amount)\n\t\tthis.workCompleted += amount\n\t\tthis.updater(this.percentage())\n\t}\n\n\tpublic totalWorkDone(totalAmount: number) {\n\t\tlet workDifference = totalAmount - this.workCompleted\n\t\tthis.updateRatePerSecond(workDifference)\n\t\tthis.workCompleted = totalAmount\n\t\tthis.updater(this.percentage())\n\t}\n\n\tpublic percentage(): number {\n\t\tconst result = (WORK_MAX_PERCENTAGE * this.workCompleted) / this.totalWork\n\t\treturn Math.min(WORK_MAX_PERCENTAGE, result)\n\t}\n\n\tpublic completed() {\n\t\tthis.workCompleted = this.totalWork\n\t\tthis.updater(WORK_MAX_PERCENTAGE)\n\t}\n}\n","import { getApiBaseUrl } from \"../../../common/api/common/Env\"\nimport { ImportMailState, ImportMailStateTypeRef, MailBox, MailFolder, MailFolderTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs\"\nimport { assertNotNull, first, isEmpty } from \"@tutao/tutanota-utils\"\nimport { NativeMailImportFacade } from \"../../../common/native/common/generatedipc/NativeMailImportFacade\"\nimport { CredentialsProvider } from \"../../../common/misc/credentials/CredentialsProvider\"\nimport { DomainConfigProvider } from \"../../../common/api/common/DomainConfigProvider\"\nimport { LoginController } from \"../../../common/api/main/LoginController\"\nimport m from \"mithril\"\nimport { elementIdPart, GENERATED_MIN_ID, isSameId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { EstimatingProgressMonitor } from \"../../../common/api/common/utils/EstimatingProgressMonitor.js\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils\"\nimport { EventController } from \"../../../common/api/main/EventController\"\nimport { ImportErrorCategories, MailImportError } from \"../../../common/api/common/error/MailImportError.js\"\nimport { showSnackBar, SnackBarButtonAttrs } from \"../../../common/gui/base/SnackBar.js\"\nimport { OpenSettingsHandler } from \"../../../common/native/main/OpenSettingsHandler.js\"\nimport { Dialog } from \"../../../common/gui/base/Dialog\"\nimport { ImportStatus, MailSetKind } from \"../../../common/api/common/TutanotaConstants\"\nimport { FolderSystem } from \"../../../common/api/common/mail/FolderSystem\"\nimport { mailLocator } from \"../../mailLocator\"\n\n// keep in sync with napi binding.d.cts\nexport const enum ImportProgressAction {\n\tContinue = 0,\n\tPause = 1,\n\tStop = 2,\n}\n\nconst DEFAULT_TOTAL_WORK: number = 10000\ntype ActiveImport = {\n\tremoteStateId: IdTuple\n\tuiStatus: UiImportStatus\n\tprogressMonitor: EstimatingProgressMonitor\n}\n\nexport class MailImporter {\n\tprivate finalisedImportStates: Map<Id, ImportMailState> = new Map()\n\tprivate activeImport: ActiveImport | null = null\n\tpublic foldersForMailbox: FolderSystem | undefined\n\tpublic selectedTargetFolder: MailFolder | null = null\n\n\tconstructor(\n\t\tprivate readonly domainConfigProvider: DomainConfigProvider,\n\t\tprivate readonly loginController: LoginController,\n\t\tprivate readonly mailboxModel: MailboxModel,\n\t\tprivate readonly entityClient: EntityClient,\n\t\teventController: EventController,\n\t\tprivate readonly credentialsProvider: CredentialsProvider,\n\t\tprivate readonly nativeMailImportFacade: NativeMailImportFacade,\n\t\tprivate readonly openSettingsHandler: OpenSettingsHandler,\n\t) {\n\t\teventController.addEntityListener((updates) => this.entityEventsReceived(updates))\n\t}\n\n\tasync getMailbox(): Promise<MailBox> {\n\t\treturn assertNotNull(first(await this.mailboxModel.getMailboxDetails())).mailbox\n\t}\n\n\tasync initImportMailStates(): Promise<void> {\n\t\tawait this.checkForResumableImport()\n\n\t\tconst importMailStatesCollection = await this.entityClient.loadAll(ImportMailStateTypeRef, (await this.getMailbox()).mailImportStates)\n\t\tfor (const importMailState of importMailStatesCollection) {\n\t\t\tif (this.isFinalisedImport(importMailState)) {\n\t\t\t\tthis.updateFinalisedImport(elementIdPart(importMailState._id), importMailState)\n\t\t\t}\n\t\t}\n\t\tm.redraw()\n\t}\n\n\tprivate async checkForResumableImport(): Promise<void> {\n\t\tconst importFacade = assertNotNull(this.nativeMailImportFacade)\n\t\tconst mailbox = await this.getMailbox()\n\t\tthis.foldersForMailbox = this.getFoldersForMailGroup(assertNotNull(mailbox._ownerGroup))\n\t\tthis.selectedTargetFolder = this.foldersForMailbox.getSystemFolderByType(MailSetKind.INBOX)\n\n\t\tlet activeImportId: IdTuple | null = null\n\t\tif (this.activeImport === null) {\n\t\t\tconst mailOwnerGroupId = assertNotNull(mailbox._ownerGroup)\n\t\t\tconst userId = this.loginController.getUserController().userId\n\t\t\tconst unencryptedCredentials = assertNotNull(await this.credentialsProvider?.getDecryptedCredentialsByUserId(userId))\n\t\t\tconst apiUrl = getApiBaseUrl(this.domainConfigProvider.getCurrentDomainConfig())\n\n\t\t\ttry {\n\t\t\t\tactiveImportId = await importFacade.getResumableImport(mailbox._id, mailOwnerGroupId, unencryptedCredentials, apiUrl)\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof MailImportError) this.handleError(e).catch()\n\t\t\t\telse throw e\n\t\t\t}\n\n\t\t\tthis.listenForError(importFacade, mailbox._id).then()\n\t\t}\n\n\t\tif (activeImportId) {\n\t\t\t// we can't use the result of loadAll (see below) as that might only read from offline cache and\n\t\t\t// not include a new ImportMailState that was created without sending an entity event\n\t\t\tconst importMailState = await this.entityClient.load(ImportMailStateTypeRef, activeImportId)\n\t\t\tconst remoteStatus = parseInt(importMailState.status) as ImportStatus\n\n\t\t\tswitch (remoteStatus) {\n\t\t\t\tcase ImportStatus.Canceled:\n\t\t\t\tcase ImportStatus.Finished:\n\t\t\t\t\tactiveImportId = null\n\t\t\t\t\tthis.activeImport = null\n\t\t\t\t\tthis.selectedTargetFolder = this.foldersForMailbox.getSystemFolderByType(MailSetKind.INBOX)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase ImportStatus.Paused:\n\t\t\t\tcase ImportStatus.Running: {\n\t\t\t\t\tlet progressMonitor = this.activeImport?.progressMonitor ?? null\n\t\t\t\t\tif (!progressMonitor) {\n\t\t\t\t\t\tconst totalCount = parseInt(importMailState.totalMails)\n\t\t\t\t\t\tconst doneCount = parseInt(importMailState.failedMails) + parseInt(importMailState.successfulMails)\n\t\t\t\t\t\tprogressMonitor = this.createEstimatingProgressMonitor(totalCount)\n\t\t\t\t\t\tprogressMonitor.totalWorkDone(doneCount)\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.activeImport = {\n\t\t\t\t\t\tremoteStateId: activeImportId,\n\t\t\t\t\t\tuiStatus: UiImportStatus.Paused,\n\t\t\t\t\t\tprogressMonitor,\n\t\t\t\t\t}\n\t\t\t\t\tthis.selectedTargetFolder = await this.entityClient.load(MailFolderTypeRef, importMailState.targetFolder)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\tfor (const update of updates) {\n\t\t\tif (isUpdateForTypeRef(ImportMailStateTypeRef, update)) {\n\t\t\t\tconst updatedState = await this.entityClient.load(ImportMailStateTypeRef, [update.instanceListId, update.instanceId])\n\t\t\t\tawait this.newImportStateFromServer(updatedState)\n\t\t\t}\n\t\t}\n\t}\n\n\tasync newImportStateFromServer(serverState: ImportMailState) {\n\t\tconst remoteStatus = parseInt(serverState.status) as ImportStatus\n\n\t\tconst wasUpdatedForThisImport = this.activeImport !== null && isSameId(this.activeImport.remoteStateId, serverState._id)\n\t\tif (wasUpdatedForThisImport) {\n\t\t\tif (isFinalisedImport(remoteStatus)) {\n\t\t\t\tthis.resetStatus()\n\t\t\t\tthis.updateFinalisedImport(elementIdPart(serverState._id), serverState)\n\t\t\t} else {\n\t\t\t\tconst activeImport = assertNotNull(this.activeImport)\n\t\t\t\tactiveImport.uiStatus = importStatusToUiImportStatus(remoteStatus)\n\t\t\t\tconst newTotalWork = parseInt(serverState.totalMails)\n\t\t\t\tconst newDoneWork = parseInt(serverState.successfulMails) + parseInt(serverState.failedMails)\n\t\t\t\tactiveImport.progressMonitor.updateTotalWork(newTotalWork)\n\t\t\t\tactiveImport.progressMonitor.totalWorkDone(newDoneWork)\n\t\t\t\tif (remoteStatus === ImportStatus.Paused) {\n\t\t\t\t\tactiveImport.progressMonitor.pauseEstimation()\n\t\t\t\t} else {\n\t\t\t\t\tactiveImport.progressMonitor.continueEstimation()\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.updateFinalisedImport(elementIdPart(serverState._id), serverState)\n\t\t}\n\n\t\tm.redraw()\n\t}\n\n\tprivate createEstimatingProgressMonitor(totalWork: number = DEFAULT_TOTAL_WORK) {\n\t\treturn new EstimatingProgressMonitor(totalWork, (_) => {\n\t\t\tm.redraw()\n\t\t})\n\t}\n\n\tprivate isFinalisedImport(importMailState: ImportMailState) {\n\t\treturn parseInt(importMailState.status) == ImportStatus.Finished || parseInt(importMailState.status) == ImportStatus.Canceled\n\t}\n\n\tprivate getFoldersForMailGroup(mailGroupId: Id): FolderSystem {\n\t\tif (mailGroupId) {\n\t\t\tconst folderSystem = mailLocator.mailModel.getFolderSystemByGroupId(mailGroupId)\n\t\t\tif (folderSystem) {\n\t\t\t\treturn folderSystem\n\t\t\t}\n\t\t}\n\t\tthrow new Error(\"could not load folder list\")\n\t}\n\n\t/// start a loop that listens to an arbitrary amount of errors that can happen during the import process.\n\tprivate async listenForError(importFacade: NativeMailImportFacade, mailboxId: string) {\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tawait importFacade.setAsyncErrorHook(mailboxId)\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof MailImportError) {\n\t\t\t\t\tthis.handleError(e).catch()\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tthrow e\n\t\t\t}\n\t\t\tthrow new ProgrammingError(\"setAsyncErrorHook should never complete normally!\")\n\t\t}\n\t}\n\n\tprivate async handleError(err: MailImportError) {\n\t\tif (err.data.category == ImportErrorCategories.ImportFeatureDisabled) {\n\t\t\tif (this.activeImport) {\n\t\t\t\tthis.activeImport.uiStatus = UiImportStatus.Paused\n\t\t\t}\n\t\t\tawait Dialog.message(\"mailImportErrorServiceUnavailable_msg\")\n\t\t} else if (err.data.category == ImportErrorCategories.ConcurrentImport) {\n\t\t\tconsole.log(\"Tried to start concurrent import\")\n\t\t\tshowSnackBar({\n\t\t\t\tmessage: \"pleaseWait_msg\",\n\t\t\t\tbutton: {\n\t\t\t\t\tlabel: \"ok_action\",\n\t\t\t\t\tclick: () => {},\n\t\t\t\t},\n\t\t\t})\n\t\t} else {\n\t\t\tconsole.log(`Error while importing mails, category: ${err.data.category}, source: ${err.data.source}`)\n\t\t\tconst navigateToImportSettings: SnackBarButtonAttrs = {\n\t\t\t\tlabel: \"show_action\",\n\t\t\t\tclick: () => this.openSettingsHandler.openSettings(\"mailImport\"),\n\t\t\t}\n\t\t\tshowSnackBar({ message: \"someMailFailedImport_msg\", button: navigateToImportSettings })\n\t\t}\n\t}\n\n\t/**\n\t * Call to the nativeMailImportFacade in worker to start a mail import from .eml or .mbox files.\n\t * @param filePaths to the .eml/.mbox files to import mails from\n\t */\n\tasync onStartBtnClick(filePaths: Array<string>) {\n\t\tif (isEmpty(filePaths)) return\n\t\tif (!this.shouldRenderStartButton()) throw new ProgrammingError(\"can't change state to starting\")\n\n\t\tconst apiUrl = getApiBaseUrl(this.domainConfigProvider.getCurrentDomainConfig())\n\t\tconst mailbox = await this.getMailbox()\n\t\tconst mailboxId = mailbox._id\n\t\tconst mailOwnerGroupId = assertNotNull(mailbox._ownerGroup)\n\t\tconst userId = this.loginController.getUserController().userId\n\t\tconst importFacade = assertNotNull(this.nativeMailImportFacade)\n\t\tconst selectedTargetFolder = assertNotNull(this.selectedTargetFolder)\n\t\tconst unencryptedCredentials = assertNotNull(await this.credentialsProvider?.getDecryptedCredentialsByUserId(userId))\n\n\t\tthis.resetStatus()\n\t\tlet progressMonitor = this.createEstimatingProgressMonitor()\n\t\tthis.activeImport = {\n\t\t\tremoteStateId: [GENERATED_MIN_ID, GENERATED_MIN_ID],\n\t\t\tuiStatus: UiImportStatus.Starting,\n\t\t\tprogressMonitor,\n\t\t}\n\t\tthis.activeImport?.progressMonitor?.continueEstimation()\n\t\tm.redraw()\n\n\t\ttry {\n\t\t\tthis.activeImport.remoteStateId = await importFacade.prepareNewImport(\n\t\t\t\tmailboxId,\n\t\t\t\tmailOwnerGroupId,\n\t\t\t\tselectedTargetFolder._id,\n\t\t\t\tfilePaths,\n\t\t\t\tunencryptedCredentials,\n\t\t\t\tapiUrl,\n\t\t\t)\n\t\t} catch (e) {\n\t\t\tif (e instanceof MailImportError) {\n\t\t\t\tthis.handleError(e).catch()\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t\tawait importFacade.setProgressAction(mailboxId, ImportProgressAction.Continue)\n\t}\n\n\tasync onPauseBtnClick() {\n\t\tlet activeImport = assertNotNull(this.activeImport)\n\n\t\tif (activeImport.uiStatus !== UiImportStatus.Running) throw new ProgrammingError(\"can't change state to pausing\")\n\n\t\tactiveImport.uiStatus = UiImportStatus.Pausing\n\t\tactiveImport.progressMonitor.pauseEstimation()\n\t\tm.redraw()\n\n\t\tconst mailboxId = (await this.getMailbox())._id\n\t\tconst nativeImportFacade = assertNotNull(this.nativeMailImportFacade)\n\t\tawait nativeImportFacade.setProgressAction(mailboxId, ImportProgressAction.Pause)\n\t}\n\n\tasync onResumeBtnClick() {\n\t\tif (!this.shouldRenderResumeButton()) throw new ProgrammingError(\"can't change state to resuming\")\n\n\t\tlet activeImport = assertNotNull(this.activeImport)\n\t\tactiveImport.uiStatus = UiImportStatus.Resuming\n\n\t\tactiveImport.progressMonitor.continueEstimation()\n\t\tm.redraw()\n\n\t\tconst mailboxId = (await this.getMailbox())._id\n\t\tconst nativeImportFacade = assertNotNull(this.nativeMailImportFacade)\n\t\tawait nativeImportFacade.setProgressAction(mailboxId, ImportProgressAction.Continue)\n\t}\n\n\tasync onCancelBtnClick() {\n\t\tif (!this.shouldRenderCancelButton()) throw new ProgrammingError(\"can't change state to cancelling\")\n\n\t\tlet activeImport = assertNotNull(this.activeImport)\n\t\tactiveImport.uiStatus = UiImportStatus.Cancelling\n\n\t\tactiveImport.progressMonitor.pauseEstimation()\n\t\tm.redraw()\n\n\t\tconst mailboxId = (await this.getMailbox())._id\n\t\tconst nativeImportFacade = assertNotNull(this.nativeMailImportFacade)\n\t\tawait nativeImportFacade.setProgressAction(mailboxId, ImportProgressAction.Stop)\n\t}\n\n\tshouldRenderStartButton() {\n\t\treturn this.activeImport === null\n\t}\n\n\tshouldRenderImportStatus(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn (\n\t\t\tactiveImportStatus === UiImportStatus.Starting ||\n\t\t\tactiveImportStatus === UiImportStatus.Running ||\n\t\t\tactiveImportStatus === UiImportStatus.Pausing ||\n\t\t\tactiveImportStatus === UiImportStatus.Paused ||\n\t\t\tactiveImportStatus === UiImportStatus.Cancelling ||\n\t\t\tactiveImportStatus === UiImportStatus.Resuming\n\t\t)\n\t}\n\n\tshouldRenderPauseButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn activeImportStatus === UiImportStatus.Running || activeImportStatus === UiImportStatus.Starting || activeImportStatus === UiImportStatus.Pausing\n\t}\n\n\tshouldDisablePauseButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn activeImportStatus === UiImportStatus.Pausing || activeImportStatus === UiImportStatus.Starting\n\t}\n\n\tshouldRenderResumeButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn activeImportStatus === UiImportStatus.Paused || activeImportStatus === UiImportStatus.Resuming\n\t}\n\n\tshouldDisableResumeButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn activeImportStatus === UiImportStatus.Resuming || activeImportStatus === UiImportStatus.Starting\n\t}\n\n\tshouldRenderCancelButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn (\n\t\t\tactiveImportStatus === UiImportStatus.Paused ||\n\t\t\tactiveImportStatus === UiImportStatus.Running ||\n\t\t\tactiveImportStatus === UiImportStatus.Pausing ||\n\t\t\tactiveImportStatus === UiImportStatus.Cancelling\n\t\t)\n\t}\n\n\tshouldDisableCancelButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\treturn (\n\t\t\tactiveImportStatus === UiImportStatus.Cancelling || activeImportStatus === UiImportStatus.Pausing || activeImportStatus === UiImportStatus.Starting\n\t\t)\n\t}\n\n\tshouldRenderProcessedMails(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\treturn (\n\t\t\tthis.activeImport?.progressMonitor?.totalWork != DEFAULT_TOTAL_WORK &&\n\t\t\t(activeImportStatus === UiImportStatus.Running ||\n\t\t\t\tactiveImportStatus === UiImportStatus.Resuming ||\n\t\t\t\tactiveImportStatus === UiImportStatus.Pausing ||\n\t\t\t\tactiveImportStatus === UiImportStatus.Paused)\n\t\t)\n\t}\n\n\tgetTotalMailsCount() {\n\t\treturn assertNotNull(this.activeImport).progressMonitor.totalWork\n\t}\n\n\tgetProcessedMailsCount() {\n\t\tconst progressMonitor = assertNotNull(this.activeImport).progressMonitor\n\t\treturn Math.min(Math.round(progressMonitor.workCompleted), progressMonitor.totalWork)\n\t}\n\n\tgetProgress() {\n\t\tconst progressMonitor = assertNotNull(this.activeImport).progressMonitor\n\t\treturn Math.ceil(progressMonitor.percentage())\n\t}\n\n\tgetFinalisedImports(): Array<ImportMailState> {\n\t\treturn Array.from(this.finalisedImportStates.values())\n\t}\n\n\tupdateFinalisedImport(importMailStateElementId: Id, importMailState: ImportMailState) {\n\t\tthis.finalisedImportStates.set(importMailStateElementId, importMailState)\n\t}\n\n\tprivate resetStatus() {\n\t\tthis.activeImport = null\n\t}\n\n\tgetUiStatus() {\n\t\treturn this.activeImport?.uiStatus ?? null\n\t}\n}\n\nexport const enum UiImportStatus {\n\tStarting,\n\tResuming,\n\tRunning,\n\tPausing,\n\tPaused,\n\tCancelling,\n}\n\nfunction importStatusToUiImportStatus(importStatus: ImportStatus) {\n\t// We do not render ImportStatus.Finished and ImportStatus.Canceled\n\t// in the UI, and therefore return the corresponding previous states.\n\tswitch (importStatus) {\n\t\tcase ImportStatus.Finished:\n\t\t\treturn UiImportStatus.Running\n\t\tcase ImportStatus.Canceled:\n\t\t\treturn UiImportStatus.Cancelling\n\t\tcase ImportStatus.Paused:\n\t\t\treturn UiImportStatus.Paused\n\t\tcase ImportStatus.Running:\n\t\t\treturn UiImportStatus.Running\n\t}\n}\n\nexport function isFinalisedImport(remoteImportStatus: ImportStatus): boolean {\n\treturn remoteImportStatus == ImportStatus.Canceled || remoteImportStatus == ImportStatus.Finished\n}\n","import { assertMainOrNode, isAndroidApp, isApp, isBrowser, isDesktop, isElectronClient, isIOSApp, isTest } from \"../common/api/common/Env.js\"\nimport { EventController } from \"../common/api/main/EventController.js\"\nimport { SearchModel } from \"./search/model/SearchModel.js\"\nimport { type MailboxDetail, MailboxModel } from \"../common/mailFunctionality/MailboxModel.js\"\nimport { MinimizedMailEditorViewModel } from \"./mail/model/MinimizedMailEditorViewModel.js\"\nimport { ContactModel } from \"../common/contactsFunctionality/ContactModel.js\"\nimport { EntityClient } from \"../common/api/common/EntityClient.js\"\nimport { ProgressTracker } from \"../common/api/main/ProgressTracker.js\"\nimport { CredentialsProvider } from \"../common/misc/credentials/CredentialsProvider.js\"\nimport { bootstrapWorker, WorkerClient } from \"../common/api/main/WorkerClient.js\"\nimport { CALENDAR_MIME_TYPE, FileController, guiDownload, MAIL_MIME_TYPES, VCARD_MIME_TYPES } from \"../common/file/FileController.js\"\nimport { SecondFactorHandler } from \"../common/misc/2fa/SecondFactorHandler.js\"\nimport { WebauthnClient } from \"../common/misc/2fa/webauthn/WebauthnClient.js\"\nimport { LoginFacade } from \"../common/api/worker/facades/LoginFacade.js\"\nimport { LoginController } from \"../common/api/main/LoginController.js\"\nimport { AppHeaderAttrs, Header } from \"../common/gui/Header.js\"\nimport { CustomerFacade } from \"../common/api/worker/facades/lazy/CustomerFacade.js\"\nimport { GiftCardFacade } from \"../common/api/worker/facades/lazy/GiftCardFacade.js\"\nimport { GroupManagementFacade } from \"../common/api/worker/facades/lazy/GroupManagementFacade.js\"\nimport { ConfigurationDatabase } from \"../common/api/worker/facades/lazy/ConfigurationDatabase.js\"\nimport { CalendarFacade } from \"../common/api/worker/facades/lazy/CalendarFacade.js\"\nimport { MailFacade } from \"../common/api/worker/facades/lazy/MailFacade.js\"\nimport { ShareFacade } from \"../common/api/worker/facades/lazy/ShareFacade.js\"\nimport { CounterFacade } from \"../common/api/worker/facades/lazy/CounterFacade.js\"\nimport { Indexer } from \"./workerUtils/index/Indexer.js\"\nimport { SearchFacade } from \"./workerUtils/index/SearchFacade.js\"\nimport { BookingFacade } from \"../common/api/worker/facades/lazy/BookingFacade.js\"\nimport { MailAddressFacade } from \"../common/api/worker/facades/lazy/MailAddressFacade.js\"\nimport { BlobFacade } from \"../common/api/worker/facades/lazy/BlobFacade.js\"\nimport { UserManagementFacade } from \"../common/api/worker/facades/lazy/UserManagementFacade.js\"\nimport { RecoverCodeFacade } from \"../common/api/worker/facades/lazy/RecoverCodeFacade.js\"\nimport { ContactFacade } from \"../common/api/worker/facades/lazy/ContactFacade.js\"\nimport { UsageTestController } from \"@tutao/tutanota-usagetests\"\nimport { EphemeralUsageTestStorage, StorageBehavior, UsageTestModel } from \"../common/misc/UsageTestModel.js\"\nimport { NewsModel } from \"../common/misc/news/NewsModel.js\"\nimport { IServiceExecutor } from \"../common/api/common/ServiceRequest.js\"\nimport { CryptoFacade } from \"../common/api/worker/crypto/CryptoFacade.js\"\nimport { SearchTextInAppFacade } from \"../common/native/common/generatedipc/SearchTextInAppFacade.js\"\nimport { SettingsFacade } from \"../common/native/common/generatedipc/SettingsFacade.js\"\nimport { DesktopSystemFacade } from \"../common/native/common/generatedipc/DesktopSystemFacade.js\"\nimport { WebMobileFacade } from \"../common/native/main/WebMobileFacade.js\"\nimport { SystemPermissionHandler } from \"../common/native/main/SystemPermissionHandler.js\"\nimport { InterWindowEventFacadeSendDispatcher } from \"../common/native/common/generatedipc/InterWindowEventFacadeSendDispatcher.js\"\nimport { ExposedCacheStorage } from \"../common/api/worker/rest/DefaultEntityRestCache.js\"\nimport { WorkerFacade } from \"../common/api/worker/facades/WorkerFacade.js\"\nimport { PageContextLoginListener } from \"../common/api/main/PageContextLoginListener.js\"\nimport { WebsocketConnectivityModel } from \"../common/misc/WebsocketConnectivityModel.js\"\nimport { OperationProgressTracker } from \"../common/api/main/OperationProgressTracker.js\"\nimport { InfoMessageHandler } from \"../common/gui/InfoMessageHandler.js\"\nimport { NativeInterfaces } from \"../common/native/main/NativeInterfaceFactory.js\"\nimport { EntropyFacade } from \"../common/api/worker/facades/EntropyFacade.js\"\nimport { SqlCipherFacade } from \"../common/native/common/generatedipc/SqlCipherFacade.js\"\nimport { assert, assertNotNull, defer, DeferredObject, lazy, lazyAsync, LazyLoaded, lazyMemoized, noOp } from \"@tutao/tutanota-utils\"\nimport { RecipientsModel } from \"../common/api/main/RecipientsModel.js\"\nimport { NoZoneDateProvider } from \"../common/api/common/utils/NoZoneDateProvider.js\"\nimport { CalendarEvent, CalendarEventAttendee, Contact, Mail, MailboxProperties } from \"../common/api/entities/tutanota/TypeRefs.js\"\nimport { SendMailModel } from \"../common/mailFunctionality/SendMailModel.js\"\nimport { OfflineIndicatorViewModel } from \"../common/gui/base/OfflineIndicatorViewModel.js\"\nimport { Router, ScopedRouter, ThrottledRouter } from \"../common/gui/ScopedRouter.js\"\nimport { DeviceConfig, deviceConfig } from \"../common/misc/DeviceConfig.js\"\nimport { InboxRuleHandler } from \"./mail/model/InboxRuleHandler.js\"\nimport { SearchViewModel } from \"./search/view/SearchViewModel.js\"\nimport { SearchRouter } from \"../common/search/view/SearchRouter.js\"\nimport { MailOpenedListener } from \"./mail/view/MailViewModel.js\"\nimport { getEnabledMailAddressesWithUser } from \"../common/mailFunctionality/SharedMailUtils.js\"\nimport { CLIENT_ONLY_CALENDARS, Const, DEFAULT_CLIENT_ONLY_CALENDAR_COLORS, FeatureType, GroupType } from \"../common/api/common/TutanotaConstants.js\"\nimport { ShareableGroupType } from \"../common/sharing/GroupUtils.js\"\nimport { ReceivedGroupInvitationsModel } from \"../common/sharing/model/ReceivedGroupInvitationsModel.js\"\nimport { CalendarViewModel } from \"../calendar-app/calendar/view/CalendarViewModel.js\"\nimport { CalendarEventModel, CalendarOperation } from \"../calendar-app/calendar/gui/eventeditor-model/CalendarEventModel.js\"\nimport { CalendarEventsRepository } from \"../common/calendar/date/CalendarEventsRepository.js\"\nimport { showProgressDialog } from \"../common/gui/dialogs/ProgressDialog.js\"\nimport { ContactSuggestionProvider, RecipientsSearchModel } from \"../common/misc/RecipientsSearchModel.js\"\nimport { ConversationViewModel, ConversationViewModelFactory } from \"./mail/view/ConversationViewModel.js\"\nimport { CreateMailViewerOptions } from \"./mail/view/MailViewer.js\"\nimport { MailViewerViewModel } from \"./mail/view/MailViewerViewModel.js\"\nimport { ExternalLoginViewModel } from \"./mail/view/ExternalLoginView.js\"\nimport { NativeInterfaceMain } from \"../common/native/main/NativeInterfaceMain.js\"\nimport { NativeFileApp } from \"../common/native/common/FileApp.js\"\nimport type { NativePushServiceApp } from \"../common/native/main/NativePushServiceApp.js\"\nimport { CommonSystemFacade } from \"../common/native/common/generatedipc/CommonSystemFacade.js\"\nimport { ThemeFacade } from \"../common/native/common/generatedipc/ThemeFacade.js\"\nimport { MobileSystemFacade } from \"../common/native/common/generatedipc/MobileSystemFacade.js\"\nimport { MobileContactsFacade } from \"../common/native/common/generatedipc/MobileContactsFacade.js\"\nimport { NativeCredentialsFacade } from \"../common/native/common/generatedipc/NativeCredentialsFacade.js\"\nimport { MailAddressNameChanger, MailAddressTableModel } from \"../common/settings/mailaddress/MailAddressTableModel.js\"\nimport { GroupInfo } from \"../common/api/entities/sys/TypeRefs.js\"\nimport { DrawerMenuAttrs } from \"../common/gui/nav/DrawerMenu.js\"\nimport { DomainConfigProvider } from \"../common/api/common/DomainConfigProvider.js\"\nimport { CredentialRemovalHandler } from \"../common/login/CredentialRemovalHandler.js\"\nimport { LoginViewModel } from \"../common/login/LoginViewModel.js\"\nimport { ProgrammingError } from \"../common/api/common/error/ProgrammingError.js\"\nimport { EntropyCollector } from \"../common/api/main/EntropyCollector.js\"\nimport { notifications } from \"../common/gui/Notifications.js\"\nimport { windowFacade } from \"../common/misc/WindowFacade.js\"\nimport { BrowserWebauthn } from \"../common/misc/2fa/webauthn/BrowserWebauthn.js\"\nimport { FileControllerBrowser } from \"../common/file/FileControllerBrowser.js\"\nimport { FileControllerNative } from \"../common/file/FileControllerNative.js\"\nimport { CalendarInfo, CalendarModel } from \"../calendar-app/calendar/model/CalendarModel.js\"\nimport { CalendarInviteHandler } from \"../calendar-app/calendar/view/CalendarInvites.js\"\nimport { AlarmScheduler } from \"../common/calendar/date/AlarmScheduler.js\"\nimport { SchedulerImpl } from \"../common/api/common/utils/Scheduler.js\"\nimport type { CalendarEventPreviewViewModel } from \"../calendar-app/calendar/gui/eventpopup/CalendarEventPreviewViewModel.js\"\nimport { isCustomizationEnabledForCustomer } from \"../common/api/common/utils/CustomerUtils.js\"\nimport { NativeContactsSyncManager } from \"./contacts/model/NativeContactsSyncManager.js\"\nimport { PostLoginActions } from \"../common/login/PostLoginActions.js\"\nimport { CredentialFormatMigrator } from \"../common/misc/credentials/CredentialFormatMigrator.js\"\nimport { AddNotificationEmailDialog } from \"./settings/AddNotificationEmailDialog.js\"\nimport { NativeThemeFacade, ThemeController, WebThemeFacade } from \"../common/gui/ThemeController.js\"\nimport { HtmlSanitizer } from \"../common/misc/HtmlSanitizer.js\"\nimport { theme } from \"../common/gui/theme.js\"\nimport { SearchIndexStateInfo } from \"../common/api/worker/search/SearchTypes.js\"\nimport { MobilePaymentsFacade } from \"../common/native/common/generatedipc/MobilePaymentsFacade.js\"\nimport { MAIL_PREFIX } from \"../common/misc/RouteChange.js\"\nimport { getDisplayedSender } from \"../common/api/common/CommonMailUtils.js\"\nimport { MailModel } from \"./mail/model/MailModel.js\"\nimport { locator } from \"../common/api/main/CommonLocator.js\"\nimport { showSnackBar } from \"../common/gui/base/SnackBar.js\"\nimport { WorkerRandomizer } from \"../common/api/worker/workerInterfaces.js\"\nimport { SearchCategoryTypes } from \"./search/model/SearchUtils.js\"\nimport { WorkerInterface } from \"./workerUtils/worker/WorkerImpl.js\"\nimport { isMailInSpamOrTrash } from \"./mail/model/MailChecks.js\"\nimport type { ContactImporter } from \"./contacts/ContactImporter.js\"\nimport { ExternalCalendarFacade } from \"../common/native/common/generatedipc/ExternalCalendarFacade.js\"\nimport { AppType } from \"../common/misc/ClientConstants.js\"\nimport { ParsedEvent } from \"../common/calendar/import/CalendarImporter.js\"\nimport { lang } from \"../common/misc/LanguageViewModel.js\"\nimport type { CalendarContactPreviewViewModel } from \"../calendar-app/calendar/gui/eventpopup/CalendarContactPreviewViewModel.js\"\nimport { KeyLoaderFacade } from \"../common/api/worker/facades/KeyLoaderFacade.js\"\nimport { ContactSuggestion } from \"../common/native/common/generatedipc/ContactSuggestion\"\nimport { MailImporter } from \"./mail/import/MailImporter.js\"\nimport type { MailExportController } from \"./native/main/MailExportController.js\"\nimport { ExportFacade } from \"../common/native/common/generatedipc/ExportFacade.js\"\nimport { BulkMailLoader } from \"./workerUtils/index/BulkMailLoader.js\"\nimport { MailExportFacade } from \"../common/api/worker/facades/lazy/MailExportFacade.js\"\n\nassertMainOrNode()\n\nclass MailLocator {\n\teventController!: EventController\n\tsearch!: SearchModel\n\tmailboxModel!: MailboxModel\n\tmailModel!: MailModel\n\tminimizedMailModel!: MinimizedMailEditorViewModel\n\tcontactModel!: ContactModel\n\tentityClient!: EntityClient\n\tprogressTracker!: ProgressTracker\n\tcredentialsProvider!: CredentialsProvider\n\tworker!: WorkerClient\n\tfileController!: FileController\n\tsecondFactorHandler!: SecondFactorHandler\n\twebAuthn!: WebauthnClient\n\tloginFacade!: LoginFacade\n\tlogins!: LoginController\n\theader!: Header\n\tcustomerFacade!: CustomerFacade\n\tkeyLoaderFacade!: KeyLoaderFacade\n\tgiftCardFacade!: GiftCardFacade\n\tgroupManagementFacade!: GroupManagementFacade\n\tconfigFacade!: ConfigurationDatabase\n\tcalendarFacade!: CalendarFacade\n\tmailFacade!: MailFacade\n\tshareFacade!: ShareFacade\n\tcounterFacade!: CounterFacade\n\tindexerFacade!: Indexer\n\tsearchFacade!: SearchFacade\n\tbookingFacade!: BookingFacade\n\tmailAddressFacade!: MailAddressFacade\n\tblobFacade!: BlobFacade\n\tuserManagementFacade!: UserManagementFacade\n\trecoverCodeFacade!: RecoverCodeFacade\n\tcontactFacade!: ContactFacade\n\tusageTestController!: UsageTestController\n\tusageTestModel!: UsageTestModel\n\tnewsModel!: NewsModel\n\tserviceExecutor!: IServiceExecutor\n\tcryptoFacade!: CryptoFacade\n\tsearchTextFacade!: SearchTextInAppFacade\n\tdesktopSettingsFacade!: SettingsFacade\n\tdesktopSystemFacade!: DesktopSystemFacade\n\texportFacade!: ExportFacade\n\twebMobileFacade!: WebMobileFacade\n\tsystemPermissionHandler!: SystemPermissionHandler\n\tinterWindowEventSender!: InterWindowEventFacadeSendDispatcher\n\tcacheStorage!: ExposedCacheStorage\n\tworkerFacade!: WorkerFacade\n\tloginListener!: PageContextLoginListener\n\trandom!: WorkerRandomizer\n\tconnectivityModel!: WebsocketConnectivityModel\n\toperationProgressTracker!: OperationProgressTracker\n\tinfoMessageHandler!: InfoMessageHandler\n\tthemeController!: ThemeController\n\tConst!: Record<string, any>\n\tbulkMailLoader!: BulkMailLoader\n\tmailExportFacade!: MailExportFacade\n\n\tprivate nativeInterfaces: NativeInterfaces | null = null\n\tprivate mailImporter: MailImporter | null = null\n\tprivate entropyFacade!: EntropyFacade\n\tprivate sqlCipherFacade!: SqlCipherFacade\n\n\treadonly recipientsModel: lazyAsync<RecipientsModel> = lazyMemoized(async () => {\n\t\tconst { RecipientsModel } = await import(\"../common/api/main/RecipientsModel.js\")\n\t\treturn new RecipientsModel(this.contactModel, this.logins, this.mailFacade, this.entityClient)\n\t})\n\n\tasync noZoneDateProvider(): Promise<NoZoneDateProvider> {\n\t\treturn new NoZoneDateProvider()\n\t}\n\n\tasync sendMailModel(mailboxDetails: MailboxDetail, mailboxProperties: MailboxProperties): Promise<SendMailModel> {\n\t\tconst factory = await this.sendMailModelSyncFactory(mailboxDetails, mailboxProperties)\n\t\treturn factory()\n\t}\n\n\tprivate readonly redraw: lazyAsync<() => unknown> = lazyMemoized(async () => {\n\t\tconst m = await import(\"mithril\")\n\t\treturn m.redraw\n\t})\n\n\treadonly offlineIndicatorViewModel = lazyMemoized(async () => {\n\t\treturn new OfflineIndicatorViewModel(\n\t\t\tthis.cacheStorage,\n\t\t\tthis.loginListener,\n\t\t\tthis.connectivityModel,\n\t\t\tthis.logins,\n\t\t\tthis.progressTracker,\n\t\t\tawait this.redraw(),\n\t\t)\n\t})\n\n\tasync appHeaderAttrs(): Promise<AppHeaderAttrs> {\n\t\treturn {\n\t\t\tofflineIndicatorModel: await this.offlineIndicatorViewModel(),\n\t\t\tnewsModel: this.newsModel,\n\t\t}\n\t}\n\n\treadonly mailViewModel = lazyMemoized(async () => {\n\t\tconst { MailViewModel } = await import(\"../mail-app/mail/view/MailViewModel.js\")\n\t\tconst conversationViewModelFactory = await this.conversationViewModelFactory()\n\t\tconst router = new ScopedRouter(this.throttledRouter(), \"/mail\")\n\t\treturn new MailViewModel(\n\t\t\tthis.mailboxModel,\n\t\t\tthis.mailModel,\n\t\t\tthis.entityClient,\n\t\t\tthis.eventController,\n\t\t\tthis.connectivityModel,\n\t\t\tthis.cacheStorage,\n\t\t\tconversationViewModelFactory,\n\t\t\tthis.mailOpenedListener,\n\t\t\tdeviceConfig,\n\t\t\tthis.inboxRuleHanlder(),\n\t\t\trouter,\n\t\t\tawait this.redraw(),\n\t\t)\n\t})\n\n\treadonly affiliateViewModel = lazyMemoized(async () => {\n\t\tconst { AffiliateViewModel } = await import(\"../common/settings/AffiliateViewModel.js\")\n\t\treturn new AffiliateViewModel()\n\t})\n\n\tinboxRuleHanlder(): InboxRuleHandler {\n\t\treturn new InboxRuleHandler(this.mailFacade, this.logins)\n\t}\n\n\tasync searchViewModelFactory(): Promise<() => SearchViewModel> {\n\t\tconst { SearchViewModel } = await import(\"../mail-app/search/view/SearchViewModel.js\")\n\t\tconst conversationViewModelFactory = await this.conversationViewModelFactory()\n\t\tconst redraw = await this.redraw()\n\t\tconst searchRouter = await this.scopedSearchRouter()\n\t\tconst calendarEventsRepository = await this.calendarEventsRepository()\n\t\treturn () => {\n\t\t\treturn new SearchViewModel(\n\t\t\t\tsearchRouter,\n\t\t\t\tthis.search,\n\t\t\t\tthis.searchFacade,\n\t\t\t\tthis.mailboxModel,\n\t\t\t\tthis.logins,\n\t\t\t\tthis.indexerFacade,\n\t\t\t\tthis.entityClient,\n\t\t\t\tthis.eventController,\n\t\t\t\tthis.mailOpenedListener,\n\t\t\t\tthis.calendarFacade,\n\t\t\t\tthis.progressTracker,\n\t\t\t\tconversationViewModelFactory,\n\t\t\t\tcalendarEventsRepository,\n\t\t\t\tredraw,\n\t\t\t\tdeviceConfig.getMailAutoSelectBehavior(),\n\t\t\t\tdeviceConfig.getClientOnlyCalendars(),\n\t\t\t)\n\t\t}\n\t}\n\n\treadonly throttledRouter: lazy<Router> = lazyMemoized(() => new ThrottledRouter())\n\n\treadonly scopedSearchRouter: lazyAsync<SearchRouter> = lazyMemoized(async () => {\n\t\tconst { SearchRouter } = await import(\"../common/search/view/SearchRouter.js\")\n\t\treturn new SearchRouter(new ScopedRouter(this.throttledRouter(), \"/search\"))\n\t})\n\n\treadonly unscopedSearchRouter: lazyAsync<SearchRouter> = lazyMemoized(async () => {\n\t\tconst { SearchRouter } = await import(\"../common/search/view/SearchRouter.js\")\n\t\treturn new SearchRouter(this.throttledRouter())\n\t})\n\n\treadonly mailOpenedListener: MailOpenedListener = {\n\t\tonEmailOpened: isDesktop()\n\t\t\t? (mail) => {\n\t\t\t\t\tthis.desktopSystemFacade.sendSocketMessage(getDisplayedSender(mail).address)\n\t\t\t  }\n\t\t\t: noOp,\n\t}\n\n\treadonly contactViewModel = lazyMemoized(async () => {\n\t\tconst { ContactViewModel } = await import(\"../mail-app/contacts/view/ContactViewModel.js\")\n\t\tconst router = new ScopedRouter(this.throttledRouter(), \"/contact\")\n\t\treturn new ContactViewModel(this.contactModel, this.entityClient, this.eventController, router, await this.redraw())\n\t})\n\n\treadonly contactListViewModel = lazyMemoized(async () => {\n\t\tconst { ContactListViewModel } = await import(\"../mail-app/contacts/view/ContactListViewModel.js\")\n\t\tconst router = new ScopedRouter(this.throttledRouter(), \"/contactlist\")\n\t\treturn new ContactListViewModel(\n\t\t\tthis.entityClient,\n\t\t\tthis.groupManagementFacade,\n\t\t\tthis.logins,\n\t\t\tthis.eventController,\n\t\t\tthis.contactModel,\n\t\t\tawait this.receivedGroupInvitationsModel(GroupType.ContactList),\n\t\t\trouter,\n\t\t\tawait this.redraw(),\n\t\t)\n\t})\n\n\tasync receivedGroupInvitationsModel<TypeOfGroup extends ShareableGroupType>(groupType: TypeOfGroup): Promise<ReceivedGroupInvitationsModel<TypeOfGroup>> {\n\t\tconst { ReceivedGroupInvitationsModel } = await import(\"../common/sharing/model/ReceivedGroupInvitationsModel.js\")\n\t\treturn new ReceivedGroupInvitationsModel<TypeOfGroup>(groupType, this.eventController, this.entityClient, this.logins)\n\t}\n\n\treadonly calendarViewModel = lazyMemoized<Promise<CalendarViewModel>>(async () => {\n\t\tconst { CalendarViewModel } = await import(\"../calendar-app/calendar/view/CalendarViewModel.js\")\n\t\tconst { DefaultDateProvider } = await import(\"../common/calendar/date/CalendarUtils\")\n\t\tconst timeZone = new DefaultDateProvider().timeZone()\n\t\treturn new CalendarViewModel(\n\t\t\tthis.logins,\n\t\t\tasync (mode: CalendarOperation, event: CalendarEvent) => {\n\t\t\t\tconst mailboxDetail = await this.mailboxModel.getUserMailboxDetails()\n\t\t\t\tconst mailboxProperties = await this.mailboxModel.getMailboxProperties(mailboxDetail.mailboxGroupRoot)\n\t\t\t\treturn await this.calendarEventModel(mode, event, mailboxDetail, mailboxProperties, null)\n\t\t\t},\n\t\t\t(...args) => this.calendarEventPreviewModel(...args),\n\t\t\t(...args) => this.calendarContactPreviewModel(...args),\n\t\t\tawait this.calendarModel(),\n\t\t\tawait this.calendarEventsRepository(),\n\t\t\tthis.entityClient,\n\t\t\tthis.eventController,\n\t\t\tthis.progressTracker,\n\t\t\tdeviceConfig,\n\t\t\tawait this.receivedGroupInvitationsModel(GroupType.Calendar),\n\t\t\ttimeZone,\n\t\t\tthis.mailboxModel,\n\t\t\tthis.contactModel,\n\t\t)\n\t})\n\n\treadonly calendarEventsRepository: lazyAsync<CalendarEventsRepository> = lazyMemoized(async () => {\n\t\tconst { CalendarEventsRepository } = await import(\"../common/calendar/date/CalendarEventsRepository.js\")\n\t\tconst { DefaultDateProvider } = await import(\"../common/calendar/date/CalendarUtils\")\n\t\tconst timeZone = new DefaultDateProvider().timeZone()\n\t\treturn new CalendarEventsRepository(\n\t\t\tawait this.calendarModel(),\n\t\t\tthis.calendarFacade,\n\t\t\ttimeZone,\n\t\t\tthis.entityClient,\n\t\t\tthis.eventController,\n\t\t\tthis.contactModel,\n\t\t\tthis.logins,\n\t\t)\n\t})\n\n\t/** This ugly bit exists because CalendarEventWhoModel wants a sync factory. */\n\tprivate async sendMailModelSyncFactory(mailboxDetails: MailboxDetail, mailboxProperties: MailboxProperties): Promise<() => SendMailModel> {\n\t\tconst { SendMailModel } = await import(\"../common/mailFunctionality/SendMailModel.js\")\n\t\tconst recipientsModel = await this.recipientsModel()\n\t\tconst dateProvider = await this.noZoneDateProvider()\n\t\treturn () =>\n\t\t\tnew SendMailModel(\n\t\t\t\tthis.mailFacade,\n\t\t\t\tthis.entityClient,\n\t\t\t\tthis.logins,\n\t\t\t\tthis.mailboxModel,\n\t\t\t\tthis.contactModel,\n\t\t\t\tthis.eventController,\n\t\t\t\tmailboxDetails,\n\t\t\t\trecipientsModel,\n\t\t\t\tdateProvider,\n\t\t\t\tmailboxProperties,\n\t\t\t\tasync (mail: Mail) => {\n\t\t\t\t\treturn await isMailInSpamOrTrash(mail, mailLocator.mailModel)\n\t\t\t\t},\n\t\t\t)\n\t}\n\n\tasync calendarEventModel(\n\t\teditMode: CalendarOperation,\n\t\tevent: Partial<CalendarEvent>,\n\t\tmailboxDetail: MailboxDetail,\n\t\tmailboxProperties: MailboxProperties,\n\t\tresponseTo: Mail | null,\n\t): Promise<CalendarEventModel | null> {\n\t\tconst [{ makeCalendarEventModel }, { getTimeZone }, { calendarNotificationSender }] = await Promise.all([\n\t\t\timport(\"../calendar-app/calendar/gui/eventeditor-model/CalendarEventModel.js\"),\n\t\t\timport(\"../common/calendar/date/CalendarUtils.js\"),\n\t\t\timport(\"../calendar-app/calendar/view/CalendarNotificationSender.js\"),\n\t\t])\n\t\tconst sendMailModelFactory = await this.sendMailModelSyncFactory(mailboxDetail, mailboxProperties)\n\t\tconst showProgress = <T>(p: Promise<T>) => showProgressDialog(\"pleaseWait_msg\", p)\n\n\t\treturn await makeCalendarEventModel(\n\t\t\teditMode,\n\t\t\tevent,\n\t\t\tawait this.recipientsModel(),\n\t\t\tawait this.calendarModel(),\n\t\t\tthis.logins,\n\t\t\tmailboxDetail,\n\t\t\tmailboxProperties,\n\t\t\tsendMailModelFactory,\n\t\t\tcalendarNotificationSender,\n\t\t\tthis.entityClient,\n\t\t\tresponseTo,\n\t\t\tgetTimeZone(),\n\t\t\tshowProgress,\n\t\t)\n\t}\n\n\tasync recipientsSearchModel(): Promise<RecipientsSearchModel> {\n\t\tconst { RecipientsSearchModel } = await import(\"../common/misc/RecipientsSearchModel.js\")\n\t\tconst suggestionsProvider = await this.contactSuggestionProvider()\n\t\treturn new RecipientsSearchModel(await this.recipientsModel(), this.contactModel, suggestionsProvider, this.entityClient)\n\t}\n\n\tprivate async contactSuggestionProvider(): Promise<ContactSuggestionProvider> {\n\t\tif (isApp()) {\n\t\t\tconst { MobileContactSuggestionProvider } = await import(\"../common/native/main/MobileContactSuggestionProvider.js\")\n\t\t\treturn new MobileContactSuggestionProvider(this.mobileContactsFacade)\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tasync getContactSuggestions(_query: string): Promise<readonly ContactSuggestion[]> {\n\t\t\t\t\treturn []\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n\n\treadonly conversationViewModelFactory: lazyAsync<ConversationViewModelFactory> = async () => {\n\t\tconst { ConversationViewModel } = await import(\"../mail-app/mail/view/ConversationViewModel.js\")\n\t\tconst factory = await this.mailViewerViewModelFactory()\n\t\tconst m = await import(\"mithril\")\n\t\treturn (options: CreateMailViewerOptions) => {\n\t\t\treturn new ConversationViewModel(\n\t\t\t\toptions,\n\t\t\t\t(options) => factory(options),\n\t\t\t\tthis.entityClient,\n\t\t\t\tthis.eventController,\n\t\t\t\tdeviceConfig,\n\t\t\t\tthis.mailModel,\n\t\t\t\tm.redraw,\n\t\t\t)\n\t\t}\n\t}\n\n\tasync conversationViewModel(options: CreateMailViewerOptions): Promise<ConversationViewModel> {\n\t\tconst factory = await this.conversationViewModelFactory()\n\t\treturn factory(options)\n\t}\n\n\tcontactImporter = async (): Promise<ContactImporter> => {\n\t\tconst { ContactImporter } = await import(\"../mail-app/contacts/ContactImporter.js\")\n\t\treturn new ContactImporter(\n\t\t\tthis.contactFacade,\n\t\t\tthis.systemPermissionHandler,\n\t\t\tisApp() ? this.mobileContactsFacade : null,\n\t\t\tisApp() ? this.nativeContactsSyncManager() : null,\n\t\t)\n\t}\n\n\tasync mailViewerViewModelFactory(): Promise<(options: CreateMailViewerOptions) => MailViewerViewModel> {\n\t\tconst { MailViewerViewModel } = await import(\"../mail-app/mail/view/MailViewerViewModel.js\")\n\t\treturn ({ mail, showFolder }) =>\n\t\t\tnew MailViewerViewModel(\n\t\t\t\tmail,\n\t\t\t\tshowFolder,\n\t\t\t\tthis.entityClient,\n\t\t\t\tthis.mailboxModel,\n\t\t\t\tthis.mailModel,\n\t\t\t\tthis.contactModel,\n\t\t\t\tthis.configFacade,\n\t\t\t\tthis.fileController,\n\t\t\t\tthis.logins,\n\t\t\t\tasync (mailboxDetails) => {\n\t\t\t\t\tconst mailboxProperties = await this.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot)\n\t\t\t\t\treturn this.sendMailModel(mailboxDetails, mailboxProperties)\n\t\t\t\t},\n\t\t\t\tthis.eventController,\n\t\t\t\tthis.workerFacade,\n\t\t\t\tthis.search,\n\t\t\t\tthis.mailFacade,\n\t\t\t\tthis.cryptoFacade,\n\t\t\t\t() => this.contactImporter(),\n\t\t\t)\n\t}\n\n\tasync externalLoginViewModelFactory(): Promise<() => ExternalLoginViewModel> {\n\t\tconst { ExternalLoginViewModel } = await import(\"./mail/view/ExternalLoginView.js\")\n\t\treturn () => new ExternalLoginViewModel(this.credentialsProvider)\n\t}\n\n\tget deviceConfig(): DeviceConfig {\n\t\treturn deviceConfig\n\t}\n\n\tget native(): NativeInterfaceMain {\n\t\treturn this.getNativeInterface(\"native\")\n\t}\n\n\tget fileApp(): NativeFileApp {\n\t\treturn this.getNativeInterface(\"fileApp\")\n\t}\n\n\tget pushService(): NativePushServiceApp {\n\t\treturn this.getNativeInterface(\"pushService\")\n\t}\n\n\tget commonSystemFacade(): CommonSystemFacade {\n\t\treturn this.getNativeInterface(\"commonSystemFacade\")\n\t}\n\n\tget themeFacade(): ThemeFacade {\n\t\treturn this.getNativeInterface(\"themeFacade\")\n\t}\n\n\tget externalCalendarFacade(): ExternalCalendarFacade {\n\t\treturn this.getNativeInterface(\"externalCalendarFacade\")\n\t}\n\n\tget systemFacade(): MobileSystemFacade {\n\t\treturn this.getNativeInterface(\"mobileSystemFacade\")\n\t}\n\n\tget mobileContactsFacade(): MobileContactsFacade {\n\t\treturn this.getNativeInterface(\"mobileContactsFacade\")\n\t}\n\n\tget nativeCredentialsFacade(): NativeCredentialsFacade {\n\t\treturn this.getNativeInterface(\"nativeCredentialsFacade\")\n\t}\n\n\tget mobilePaymentsFacade(): MobilePaymentsFacade {\n\t\treturn this.getNativeInterface(\"mobilePaymentsFacade\")\n\t}\n\n\tasync mailAddressTableModelForOwnMailbox(): Promise<MailAddressTableModel> {\n\t\tconst { MailAddressTableModel } = await import(\"../common/settings/mailaddress/MailAddressTableModel.js\")\n\t\tconst nameChanger = await this.ownMailAddressNameChanger()\n\t\treturn new MailAddressTableModel(\n\t\t\tthis.entityClient,\n\t\t\tthis.serviceExecutor,\n\t\t\tthis.mailAddressFacade,\n\t\t\tthis.logins,\n\t\t\tthis.eventController,\n\t\t\tthis.logins.getUserController().userGroupInfo,\n\t\t\tnameChanger,\n\t\t\tawait this.redraw(),\n\t\t)\n\t}\n\n\tasync mailAddressTableModelForAdmin(mailGroupId: Id, userId: Id, userGroupInfo: GroupInfo): Promise<MailAddressTableModel> {\n\t\tconst { MailAddressTableModel } = await import(\"../common/settings/mailaddress/MailAddressTableModel.js\")\n\t\tconst nameChanger = await this.adminNameChanger(mailGroupId, userId)\n\t\treturn new MailAddressTableModel(\n\t\t\tthis.entityClient,\n\t\t\tthis.serviceExecutor,\n\t\t\tthis.mailAddressFacade,\n\t\t\tthis.logins,\n\t\t\tthis.eventController,\n\t\t\tuserGroupInfo,\n\t\t\tnameChanger,\n\t\t\tawait this.redraw(),\n\t\t)\n\t}\n\n\tasync ownMailAddressNameChanger(): Promise<MailAddressNameChanger> {\n\t\tconst { OwnMailAddressNameChanger } = await import(\"../common/settings/mailaddress/OwnMailAddressNameChanger.js\")\n\t\treturn new OwnMailAddressNameChanger(this.mailboxModel, this.entityClient)\n\t}\n\n\tasync adminNameChanger(mailGroupId: Id, userId: Id): Promise<MailAddressNameChanger> {\n\t\tconst { AnotherUserMailAddressNameChanger } = await import(\"../common/settings/mailaddress/AnotherUserMailAddressNameChanger.js\")\n\t\treturn new AnotherUserMailAddressNameChanger(this.mailAddressFacade, mailGroupId, userId)\n\t}\n\n\tasync drawerAttrsFactory(): Promise<() => DrawerMenuAttrs> {\n\t\treturn () => ({\n\t\t\tlogins: this.logins,\n\t\t\tnewsModel: this.newsModel,\n\t\t\tdesktopSystemFacade: this.desktopSystemFacade,\n\t\t})\n\t}\n\n\tdomainConfigProvider(): DomainConfigProvider {\n\t\treturn new DomainConfigProvider()\n\t}\n\n\tasync credentialsRemovalHandler(): Promise<CredentialRemovalHandler> {\n\t\tconst { NoopCredentialRemovalHandler, AppsCredentialRemovalHandler } = await import(\"../common/login/CredentialRemovalHandler.js\")\n\t\treturn isBrowser()\n\t\t\t? new NoopCredentialRemovalHandler()\n\t\t\t: new AppsCredentialRemovalHandler(this.pushService, this.configFacade, async (login, userId) => {\n\t\t\t\t\tif (isApp()) {\n\t\t\t\t\t\tawait mailLocator.nativeContactsSyncManager().disableSync(userId, login)\n\t\t\t\t\t}\n\t\t\t\t\tawait mailLocator.indexerFacade.deleteIndex(userId)\n\t\t\t\t\tif (isDesktop()) {\n\t\t\t\t\t\tawait mailLocator.exportFacade.clearExportState(userId)\n\t\t\t\t\t}\n\t\t\t  })\n\t}\n\n\tasync loginViewModelFactory(): Promise<lazy<LoginViewModel>> {\n\t\tconst { LoginViewModel } = await import(\"../common/login/LoginViewModel.js\")\n\t\tconst credentialsRemovalHandler = await mailLocator.credentialsRemovalHandler()\n\t\tconst { MobileAppLock, NoOpAppLock } = await import(\"../common/login/AppLock.js\")\n\t\tconst appLock = isApp()\n\t\t\t? new MobileAppLock(assertNotNull(this.nativeInterfaces).mobileSystemFacade, assertNotNull(this.nativeInterfaces).nativeCredentialsFacade)\n\t\t\t: new NoOpAppLock()\n\t\treturn () => {\n\t\t\tconst domainConfig = isBrowser()\n\t\t\t\t? mailLocator.domainConfigProvider().getDomainConfigForHostname(location.hostname, location.protocol, location.port)\n\t\t\t\t: // in this case, we know that we have a staticUrl set that we need to use\n\t\t\t\t  mailLocator.domainConfigProvider().getCurrentDomainConfig()\n\n\t\t\treturn new LoginViewModel(\n\t\t\t\tmailLocator.logins,\n\t\t\t\tmailLocator.credentialsProvider,\n\t\t\t\tmailLocator.secondFactorHandler,\n\t\t\t\tdeviceConfig,\n\t\t\t\tdomainConfig,\n\t\t\t\tcredentialsRemovalHandler,\n\t\t\t\tisBrowser() ? null : this.pushService,\n\t\t\t\tappLock,\n\t\t\t)\n\t\t}\n\t}\n\n\tprivate getNativeInterface<T extends keyof NativeInterfaces>(name: T): NativeInterfaces[T] {\n\t\tif (!this.nativeInterfaces) {\n\t\t\tthrow new ProgrammingError(`Tried to use ${name} in web`)\n\t\t}\n\n\t\treturn this.nativeInterfaces[name]\n\t}\n\n\tpublic getMailImporter(): MailImporter {\n\t\tif (this.mailImporter == null) {\n\t\t\tthrow new ProgrammingError(`Tried to use mail importer in web or mobile`)\n\t\t}\n\n\t\treturn this.mailImporter\n\t}\n\n\tprivate readonly _workerDeferred: DeferredObject<WorkerClient>\n\tprivate _entropyCollector!: EntropyCollector\n\tprivate _deferredInitialized: DeferredObject<void> = defer()\n\n\tget initialized(): Promise<void> {\n\t\treturn this._deferredInitialized.promise\n\t}\n\n\tconstructor() {\n\t\tthis._workerDeferred = defer()\n\t}\n\n\tasync init(): Promise<void> {\n\t\t// Split init in two separate parts: creating modules and causing side effects.\n\t\t// We would like to do both on normal init but on HMR we just want to replace modules without a new worker. If we create a new\n\t\t// worker we end up losing state on the worker side (including our session).\n\t\tthis.worker = bootstrapWorker(this)\n\t\tawait this._createInstances()\n\t\tthis._entropyCollector = new EntropyCollector(this.entropyFacade, await this.scheduler(), window)\n\n\t\tthis._entropyCollector.start()\n\n\t\tthis._deferredInitialized.resolve()\n\t}\n\n\tasync _createInstances() {\n\t\tconst {\n\t\t\tloginFacade,\n\t\t\tcustomerFacade,\n\t\t\tgiftCardFacade,\n\t\t\tgroupManagementFacade,\n\t\t\tconfigFacade,\n\t\t\tcalendarFacade,\n\t\t\tmailFacade,\n\t\t\tshareFacade,\n\t\t\tcounterFacade,\n\t\t\tindexerFacade,\n\t\t\tsearchFacade,\n\t\t\tbookingFacade,\n\t\t\tmailAddressFacade,\n\t\t\tblobFacade,\n\t\t\tuserManagementFacade,\n\t\t\trecoverCodeFacade,\n\t\t\trestInterface,\n\t\t\tserviceExecutor,\n\t\t\tcryptoFacade,\n\t\t\tcacheStorage,\n\t\t\trandom,\n\t\t\teventBus,\n\t\t\tentropyFacade,\n\t\t\tworkerFacade,\n\t\t\tsqlCipherFacade,\n\t\t\tcontactFacade,\n\t\t\tbulkMailLoader,\n\t\t\tmailExportFacade,\n\t\t} = this.worker.getWorkerInterface() as WorkerInterface\n\t\tthis.loginFacade = loginFacade\n\t\tthis.customerFacade = customerFacade\n\t\tthis.giftCardFacade = giftCardFacade\n\t\tthis.groupManagementFacade = groupManagementFacade\n\t\tthis.configFacade = configFacade\n\t\tthis.calendarFacade = calendarFacade\n\t\tthis.mailFacade = mailFacade\n\t\tthis.shareFacade = shareFacade\n\t\tthis.counterFacade = counterFacade\n\t\tthis.indexerFacade = indexerFacade\n\t\tthis.searchFacade = searchFacade\n\t\tthis.bookingFacade = bookingFacade\n\t\tthis.mailAddressFacade = mailAddressFacade\n\t\tthis.blobFacade = blobFacade\n\t\tthis.userManagementFacade = userManagementFacade\n\t\tthis.recoverCodeFacade = recoverCodeFacade\n\t\tthis.contactFacade = contactFacade\n\t\tthis.serviceExecutor = serviceExecutor\n\t\tthis.sqlCipherFacade = sqlCipherFacade\n\t\tthis.logins = new LoginController(\n\t\t\tthis.loginFacade,\n\t\t\tasync () => this.loginListener,\n\t\t\t() => this.worker.reset(),\n\t\t)\n\t\t// Should be called elsewhere later e.g. in CommonLocator\n\t\tthis.logins.init()\n\t\tthis.eventController = new EventController(mailLocator.logins)\n\t\tthis.progressTracker = new ProgressTracker()\n\t\tthis.search = new SearchModel(this.searchFacade, () => this.calendarEventsRepository())\n\t\tthis.entityClient = new EntityClient(restInterface)\n\t\tthis.cryptoFacade = cryptoFacade\n\t\tthis.cacheStorage = cacheStorage\n\t\tthis.entropyFacade = entropyFacade\n\t\tthis.workerFacade = workerFacade\n\t\tthis.bulkMailLoader = bulkMailLoader\n\t\tthis.mailExportFacade = mailExportFacade\n\t\tthis.connectivityModel = new WebsocketConnectivityModel(eventBus)\n\t\tthis.mailboxModel = new MailboxModel(this.eventController, this.entityClient, this.logins)\n\t\tthis.mailModel = new MailModel(\n\t\t\tnotifications,\n\t\t\tthis.mailboxModel,\n\t\t\tthis.eventController,\n\t\t\tthis.entityClient,\n\t\t\tthis.logins,\n\t\t\tthis.mailFacade,\n\t\t\tthis.connectivityModel,\n\t\t\tthis.inboxRuleHanlder(),\n\t\t)\n\t\tthis.operationProgressTracker = new OperationProgressTracker()\n\t\tthis.infoMessageHandler = new InfoMessageHandler((state: SearchIndexStateInfo) => {\n\t\t\tmailLocator.search.indexState(state)\n\t\t})\n\n\t\tthis.usageTestModel = new UsageTestModel(\n\t\t\t{\n\t\t\t\t[StorageBehavior.Persist]: deviceConfig,\n\t\t\t\t[StorageBehavior.Ephemeral]: new EphemeralUsageTestStorage(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tnow(): number {\n\t\t\t\t\treturn Date.now()\n\t\t\t\t},\n\t\t\t\ttimeZone(): string {\n\t\t\t\t\tthrow new Error(\"Not implemented by this provider\")\n\t\t\t\t},\n\t\t\t},\n\t\t\tthis.serviceExecutor,\n\t\t\tthis.entityClient,\n\t\t\tthis.logins,\n\t\t\tthis.eventController,\n\t\t\t() => this.usageTestController,\n\t\t)\n\t\tthis.usageTestController = new UsageTestController(this.usageTestModel)\n\n\t\tthis.Const = Const\n\t\tif (!isBrowser()) {\n\t\t\tconst { WebDesktopFacade } = await import(\"../common/native/main/WebDesktopFacade\")\n\t\t\tconst { WebMobileFacade } = await import(\"../common/native/main/WebMobileFacade.js\")\n\t\t\tconst { WebCommonNativeFacade } = await import(\"../common/native/main/WebCommonNativeFacade.js\")\n\t\t\tconst { WebInterWindowEventFacade } = await import(\"../common/native/main/WebInterWindowEventFacade.js\")\n\t\t\tconst { WebAuthnFacadeSendDispatcher } = await import(\"../common/native/common/generatedipc/WebAuthnFacadeSendDispatcher.js\")\n\t\t\tconst { OpenMailboxHandler } = await import(\"./native/main/OpenMailboxHandler.js\")\n\t\t\tconst { createNativeInterfaces, createDesktopInterfaces } = await import(\"../common/native/main/NativeInterfaceFactory.js\")\n\t\t\tconst openMailboxHandler = new OpenMailboxHandler(this.logins, this.mailModel, this.mailboxModel)\n\t\t\tconst { OpenCalendarHandler } = await import(\"../common/native/main/OpenCalendarHandler.js\")\n\t\t\tconst openCalendarHandler = new OpenCalendarHandler(this.logins)\n\t\t\tconst { OpenSettingsHandler } = await import(\"../common/native/main/OpenSettingsHandler.js\")\n\t\t\tconst openSettingsHandler = new OpenSettingsHandler(this.logins)\n\n\t\t\tthis.webMobileFacade = new WebMobileFacade(this.connectivityModel, MAIL_PREFIX)\n\n\t\t\tthis.nativeInterfaces = createNativeInterfaces(\n\t\t\t\tthis.webMobileFacade,\n\t\t\t\tnew WebDesktopFacade(this.logins, async () => this.native),\n\t\t\t\tnew WebInterWindowEventFacade(this.logins, windowFacade, deviceConfig),\n\t\t\t\tnew WebCommonNativeFacade(\n\t\t\t\t\tthis.logins,\n\t\t\t\t\tthis.mailboxModel,\n\t\t\t\t\tthis.usageTestController,\n\t\t\t\t\tasync () => this.fileApp,\n\t\t\t\t\tasync () => this.pushService,\n\t\t\t\t\tthis.handleFileImport.bind(this),\n\t\t\t\t\t(userId, address, requestedPath) => openMailboxHandler.openMailbox(userId, address, requestedPath),\n\t\t\t\t\t(userId) => openCalendarHandler.openCalendar(userId),\n\t\t\t\t\tAppType.Integrated,\n\t\t\t\t\t(path) => openSettingsHandler.openSettings(path),\n\t\t\t\t),\n\t\t\t\tcryptoFacade,\n\t\t\t\tcalendarFacade,\n\t\t\t\tthis.entityClient,\n\t\t\t\tthis.logins,\n\t\t\t\tAppType.Integrated,\n\t\t\t)\n\n\t\t\tthis.credentialsProvider = await this.createCredentialsProvider()\n\t\t\tif (isElectronClient()) {\n\t\t\t\tconst desktopInterfaces = createDesktopInterfaces(this.native)\n\t\t\t\tthis.searchTextFacade = desktopInterfaces.searchTextFacade\n\t\t\t\tthis.interWindowEventSender = desktopInterfaces.interWindowEventSender\n\t\t\t\tthis.webAuthn = new WebauthnClient(new WebAuthnFacadeSendDispatcher(this.native), this.domainConfigProvider(), isApp())\n\t\t\t\tif (isDesktop()) {\n\t\t\t\t\tthis.desktopSettingsFacade = desktopInterfaces.desktopSettingsFacade\n\t\t\t\t\tthis.desktopSystemFacade = desktopInterfaces.desktopSystemFacade\n\t\t\t\t\tthis.mailImporter = new MailImporter(\n\t\t\t\t\t\tthis.domainConfigProvider(),\n\t\t\t\t\t\tthis.logins,\n\t\t\t\t\t\tthis.mailboxModel,\n\t\t\t\t\t\tthis.entityClient,\n\t\t\t\t\t\tthis.eventController,\n\t\t\t\t\t\tthis.credentialsProvider,\n\t\t\t\t\t\tdesktopInterfaces.nativeMailImportFacade,\n\t\t\t\t\t\topenSettingsHandler,\n\t\t\t\t\t)\n\t\t\t\t\tthis.exportFacade = desktopInterfaces.exportFacade\n\t\t\t\t}\n\t\t\t} else if (isAndroidApp() || isIOSApp()) {\n\t\t\t\tconst { SystemPermissionHandler } = await import(\"../common/native/main/SystemPermissionHandler.js\")\n\t\t\t\tthis.systemPermissionHandler = new SystemPermissionHandler(this.systemFacade)\n\t\t\t\tthis.webAuthn = new WebauthnClient(new WebAuthnFacadeSendDispatcher(this.native), this.domainConfigProvider(), isApp())\n\t\t\t}\n\t\t} else {\n\t\t\tthis.credentialsProvider = await this.createCredentialsProvider()\n\t\t}\n\n\t\tif (this.webAuthn == null) {\n\t\t\tthis.webAuthn = new WebauthnClient(\n\t\t\t\tnew BrowserWebauthn(navigator.credentials, this.domainConfigProvider().getCurrentDomainConfig()),\n\t\t\t\tthis.domainConfigProvider(),\n\t\t\t\tisApp(),\n\t\t\t)\n\t\t}\n\t\tthis.secondFactorHandler = new SecondFactorHandler(\n\t\t\tthis.eventController,\n\t\t\tthis.entityClient,\n\t\t\tthis.webAuthn,\n\t\t\tthis.loginFacade,\n\t\t\tthis.domainConfigProvider(),\n\t\t)\n\n\t\tthis.loginListener = new PageContextLoginListener(this.secondFactorHandler, this.credentialsProvider)\n\t\tthis.random = random\n\n\t\tthis.newsModel = new NewsModel(this.serviceExecutor, deviceConfig, async (name: string) => {\n\t\t\tswitch (name) {\n\t\t\t\tcase \"usageOptIn\": {\n\t\t\t\t\tconst { UsageOptInNews } = await import(\"../common/misc/news/items/UsageOptInNews.js\")\n\t\t\t\t\treturn new UsageOptInNews(this.newsModel, this.usageTestModel)\n\t\t\t\t}\n\t\t\t\tcase \"recoveryCode\": {\n\t\t\t\t\tconst { RecoveryCodeNews } = await import(\"../common/misc/news/items/RecoveryCodeNews.js\")\n\t\t\t\t\treturn new RecoveryCodeNews(this.newsModel, this.logins.getUserController(), this.recoverCodeFacade)\n\t\t\t\t}\n\t\t\t\tcase \"pinBiometrics\": {\n\t\t\t\t\tconst { PinBiometricsNews } = await import(\"../common/misc/news/items/PinBiometricsNews.js\")\n\t\t\t\t\treturn new PinBiometricsNews(this.newsModel, this.credentialsProvider, this.logins.getUserController().userId)\n\t\t\t\t}\n\t\t\t\tcase \"referralLink\": {\n\t\t\t\t\tconst { ReferralLinkNews } = await import(\"../common/misc/news/items/ReferralLinkNews.js\")\n\t\t\t\t\tconst dateProvider = await this.noZoneDateProvider()\n\t\t\t\t\treturn new ReferralLinkNews(this.newsModel, dateProvider, this.logins.getUserController())\n\t\t\t\t}\n\t\t\t\tcase \"richNotifications\": {\n\t\t\t\t\tconst { RichNotificationsNews } = await import(\"../common/misc/news/items/RichNotificationsNews.js\")\n\t\t\t\t\treturn new RichNotificationsNews(this.newsModel, isApp() || isDesktop() ? this.pushService : null)\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log(`No implementation for news named '${name}'`)\n\t\t\t\t\treturn null\n\t\t\t}\n\t\t})\n\n\t\tthis.fileController =\n\t\t\tthis.nativeInterfaces == null\n\t\t\t\t? new FileControllerBrowser(blobFacade, guiDownload)\n\t\t\t\t: new FileControllerNative(blobFacade, guiDownload, this.nativeInterfaces.fileApp)\n\n\t\tconst { ContactModel } = await import(\"../common/contactsFunctionality/ContactModel.js\")\n\t\tthis.contactModel = new ContactModel(\n\t\t\tthis.entityClient,\n\t\t\tthis.logins,\n\t\t\tthis.eventController,\n\t\t\tasync (query: string, field: string, minSuggestionCount: number, maxResults?: number) => {\n\t\t\t\tconst { createRestriction } = await import(\"./search/model/SearchUtils.js\")\n\t\t\t\treturn mailLocator.searchFacade.search(\n\t\t\t\t\tquery,\n\t\t\t\t\tcreateRestriction(SearchCategoryTypes.contact, null, null, field, [], null),\n\t\t\t\t\tminSuggestionCount,\n\t\t\t\t\tmaxResults,\n\t\t\t\t)\n\t\t\t},\n\t\t)\n\t\tthis.minimizedMailModel = new MinimizedMailEditorViewModel()\n\n\t\t// THEME\n\t\t// We need it because we want to run tests in node and real HTMLSanitizer does not work there.\n\t\tconst sanitizerStub: Partial<HtmlSanitizer> = {\n\t\t\tsanitizeHTML: () => {\n\t\t\t\treturn {\n\t\t\t\t\thtml: \"\",\n\t\t\t\t\tblockedExternalContent: 0,\n\t\t\t\t\tinlineImageCids: [],\n\t\t\t\t\tlinks: [],\n\t\t\t\t}\n\t\t\t},\n\t\t\tsanitizeSVG(svg, configExtra?) {\n\t\t\t\tthrow new Error(\"stub!\")\n\t\t\t},\n\t\t\tsanitizeFragment(html, configExtra?) {\n\t\t\t\tthrow new Error(\"stub!\")\n\t\t\t},\n\t\t}\n\t\tconst selectedThemeFacade =\n\t\t\tisApp() || isDesktop() ? new NativeThemeFacade(new LazyLoaded<ThemeFacade>(async () => mailLocator.themeFacade)) : new WebThemeFacade(deviceConfig)\n\t\tconst lazySanitizer = isTest()\n\t\t\t? () => Promise.resolve(sanitizerStub as HtmlSanitizer)\n\t\t\t: () => import(\"../common/misc/HtmlSanitizer\").then(({ htmlSanitizer }) => htmlSanitizer)\n\n\t\tthis.themeController = new ThemeController(theme, selectedThemeFacade, lazySanitizer, AppType.Mail)\n\n\t\t// For native targets WebCommonNativeFacade notifies themeController because Android and Desktop do not seem to work reliably via media queries\n\t\tif (selectedThemeFacade instanceof WebThemeFacade) {\n\t\t\tselectedThemeFacade.addDarkListener(() => mailLocator.themeController.reloadTheme())\n\t\t}\n\t}\n\n\treadonly calendarModel: () => Promise<CalendarModel> = lazyMemoized(async () => {\n\t\tconst { DefaultDateProvider } = await import(\"../common/calendar/date/CalendarUtils\")\n\t\tconst { CalendarModel } = await import(\"../calendar-app/calendar/model/CalendarModel\")\n\t\tconst timeZone = new DefaultDateProvider().timeZone()\n\t\treturn new CalendarModel(\n\t\t\tnotifications,\n\t\t\tthis.alarmScheduler,\n\t\t\tthis.eventController,\n\t\t\tthis.serviceExecutor,\n\t\t\tthis.logins,\n\t\t\tthis.progressTracker,\n\t\t\tthis.entityClient,\n\t\t\tthis.mailboxModel,\n\t\t\tthis.calendarFacade,\n\t\t\tthis.fileController,\n\t\t\ttimeZone,\n\t\t\t!isBrowser() ? this.externalCalendarFacade : null,\n\t\t\tdeviceConfig,\n\t\t\t!isBrowser() ? this.pushService : null,\n\t\t)\n\t})\n\n\treadonly calendarInviteHandler: () => Promise<CalendarInviteHandler> = lazyMemoized(async () => {\n\t\tconst { CalendarInviteHandler } = await import(\"../calendar-app/calendar/view/CalendarInvites.js\")\n\t\tconst { calendarNotificationSender } = await import(\"../calendar-app/calendar/view/CalendarNotificationSender.js\")\n\t\treturn new CalendarInviteHandler(this.mailboxModel, await this.calendarModel(), this.logins, calendarNotificationSender, (...arg) =>\n\t\t\tthis.sendMailModel(...arg),\n\t\t)\n\t})\n\n\tprivate async handleFileImport(filesUris: ReadonlyArray<string>) {\n\t\tconst files = await this.fileApp.getFilesMetaData(filesUris)\n\t\tconst areAllFilesVCard = files.every((file) => file.mimeType === VCARD_MIME_TYPES.X_VCARD || file.mimeType === VCARD_MIME_TYPES.VCARD)\n\t\tconst areAllFilesICS = files.every((file) => file.mimeType === CALENDAR_MIME_TYPE)\n\t\tconst areAllFilesMail = files.every((file) => file.mimeType === MAIL_MIME_TYPES.EML || file.mimeType === MAIL_MIME_TYPES.MBOX)\n\n\t\tif (areAllFilesVCard) {\n\t\t\tconst importer = await this.contactImporter()\n\t\t\tconst { parseContacts } = await import(\"../mail-app/contacts/ContactImporter.js\")\n\t\t\t// For now, we just handle .vcf files, so we don't need to care about the file type\n\t\t\tconst contacts = await parseContacts(files, this.fileApp)\n\t\t\tconst vCardData = contacts.join(\"\\n\")\n\t\t\tconst contactListId = assertNotNull(await this.contactModel.getContactListId())\n\n\t\t\tawait importer.importContactsFromFile(vCardData, contactListId)\n\t\t} else if (areAllFilesICS) {\n\t\t\tconst calendarModel = await this.calendarModel()\n\t\t\tconst groupSettings = this.logins.getUserController().userSettingsGroupRoot.groupSettings\n\t\t\tconst calendarInfos = await calendarModel.getCalendarInfos()\n\t\t\tconst groupColors: Map<Id, string> = groupSettings.reduce((acc, gc) => {\n\t\t\t\tacc.set(gc.group, gc.color)\n\t\t\t\treturn acc\n\t\t\t}, new Map())\n\n\t\t\tconst { calendarSelectionDialog, parseCalendarFile } = await import(\"../common/calendar/import/CalendarImporter.js\")\n\t\t\tconst { handleCalendarImport } = await import(\"../common/calendar/import/CalendarImporterDialog.js\")\n\n\t\t\tlet parsedEvents: ParsedEvent[] = []\n\n\t\t\tfor (const fileRef of files) {\n\t\t\t\tconst dataFile = await this.fileApp.readDataFile(fileRef.location)\n\t\t\t\tif (dataFile == null) continue\n\n\t\t\t\tconst data = parseCalendarFile(dataFile)\n\t\t\t\tparsedEvents.push(...data.contents)\n\t\t\t}\n\n\t\t\tcalendarSelectionDialog(Array.from(calendarInfos.values()), this.logins.getUserController(), groupColors, (dialog, selectedCalendar) => {\n\t\t\t\tdialog.close()\n\t\t\t\thandleCalendarImport(selectedCalendar.groupRoot, parsedEvents)\n\t\t\t})\n\t\t}\n\t}\n\n\tprivate alarmScheduler: () => Promise<AlarmScheduler> = lazyMemoized(async () => {\n\t\tconst { AlarmScheduler } = await import(\"../common/calendar/date/AlarmScheduler\")\n\t\tconst { DefaultDateProvider } = await import(\"../common/calendar/date/CalendarUtils\")\n\t\tconst dateProvider = new DefaultDateProvider()\n\t\treturn new AlarmScheduler(dateProvider, await this.scheduler())\n\t})\n\n\tprivate async scheduler(): Promise<SchedulerImpl> {\n\t\tconst dateProvider = await this.noZoneDateProvider()\n\t\treturn new SchedulerImpl(dateProvider, window, window)\n\t}\n\n\tasync calendarEventPreviewModel(selectedEvent: CalendarEvent, calendars: ReadonlyMap<string, CalendarInfo>): Promise<CalendarEventPreviewViewModel> {\n\t\tconst { findAttendeeInAddresses } = await import(\"../common/api/common/utils/CommonCalendarUtils.js\")\n\t\tconst { getEventType } = await import(\"../calendar-app/calendar/gui/CalendarGuiUtils.js\")\n\t\tconst { CalendarEventPreviewViewModel } = await import(\"../calendar-app/calendar/gui/eventpopup/CalendarEventPreviewViewModel.js\")\n\n\t\tconst mailboxDetails = await this.mailboxModel.getUserMailboxDetails()\n\n\t\tconst mailboxProperties = await this.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot)\n\n\t\tconst userController = this.logins.getUserController()\n\t\tconst customer = await userController.loadCustomer()\n\t\tconst ownMailAddresses = getEnabledMailAddressesWithUser(mailboxDetails, userController.userGroupInfo)\n\t\tconst ownAttendee: CalendarEventAttendee | null = findAttendeeInAddresses(selectedEvent.attendees, ownMailAddresses)\n\t\tconst eventType = getEventType(selectedEvent, calendars, ownMailAddresses, userController)\n\t\tconst hasBusinessFeature = isCustomizationEnabledForCustomer(customer, FeatureType.BusinessFeatureEnabled) || (await userController.isNewPaidPlan())\n\t\tconst lazyIndexEntry = async () => (selectedEvent.uid != null ? this.calendarFacade.getEventsByUid(selectedEvent.uid) : null)\n\t\tconst popupModel = new CalendarEventPreviewViewModel(\n\t\t\tselectedEvent,\n\t\t\tawait this.calendarModel(),\n\t\t\teventType,\n\t\t\thasBusinessFeature,\n\t\t\townAttendee,\n\t\t\tlazyIndexEntry,\n\t\t\tasync (mode: CalendarOperation) => this.calendarEventModel(mode, selectedEvent, mailboxDetails, mailboxProperties, null),\n\t\t)\n\n\t\t// If we have a preview model we want to display the description\n\t\t// so makes sense to already sanitize it after building the event\n\t\tawait popupModel.sanitizeDescription()\n\n\t\treturn popupModel\n\t}\n\n\tasync calendarContactPreviewModel(event: CalendarEvent, contact: Contact, canEdit: boolean): Promise<CalendarContactPreviewViewModel> {\n\t\tconst { CalendarContactPreviewViewModel } = await import(\"../calendar-app/calendar/gui/eventpopup/CalendarContactPreviewViewModel.js\")\n\t\treturn new CalendarContactPreviewViewModel(event, contact, canEdit)\n\t}\n\n\treadonly nativeContactsSyncManager: () => NativeContactsSyncManager = lazyMemoized(() => {\n\t\tassert(isApp(), \"isApp\")\n\t\treturn new NativeContactsSyncManager(this.logins, this.mobileContactsFacade, this.entityClient, this.eventController, this.contactModel, deviceConfig)\n\t})\n\n\tpostLoginActions: () => Promise<PostLoginActions> = lazyMemoized(async () => {\n\t\tconst { PostLoginActions } = await import(\"../common/login/PostLoginActions\")\n\t\treturn new PostLoginActions(\n\t\t\tthis.credentialsProvider,\n\t\t\tthis.secondFactorHandler,\n\t\t\tthis.connectivityModel,\n\t\t\tthis.logins,\n\t\t\tawait this.noZoneDateProvider(),\n\t\t\tthis.entityClient,\n\t\t\tthis.userManagementFacade,\n\t\t\tthis.customerFacade,\n\t\t\tthis.themeController,\n\t\t\t() => this.showSetupWizard(),\n\t\t\t() => this.handleExternalSync(),\n\t\t\t() => this.setUpClientOnlyCalendars(),\n\t\t)\n\t})\n\n\tshowSetupWizard = async () => {\n\t\tif (isApp()) {\n\t\t\tconst { showSetupWizard } = await import(\"../common/native/main/wizard/SetupWizard.js\")\n\t\t\treturn showSetupWizard(\n\t\t\t\tthis.systemPermissionHandler,\n\t\t\t\tthis.webMobileFacade,\n\t\t\t\tawait this.contactImporter(),\n\t\t\t\tthis.systemFacade,\n\t\t\t\tthis.credentialsProvider,\n\t\t\t\tawait this.nativeContactsSyncManager(),\n\t\t\t\tdeviceConfig,\n\t\t\t\ttrue,\n\t\t\t)\n\t\t}\n\t}\n\n\tasync handleExternalSync() {\n\t\tconst calendarModel = await locator.calendarModel()\n\n\t\tif (isApp() || isDesktop()) {\n\t\t\tcalendarModel.syncExternalCalendars().catch(async (e) => {\n\t\t\t\tshowSnackBar({\n\t\t\t\t\tmessage: lang.makeTranslation(\"exception_msg\", e.message),\n\t\t\t\t\tbutton: {\n\t\t\t\t\t\tlabel: \"ok_action\",\n\t\t\t\t\t\tclick: noOp,\n\t\t\t\t\t},\n\t\t\t\t\twaitingTime: 1000,\n\t\t\t\t})\n\t\t\t})\n\t\t\tcalendarModel.scheduleExternalCalendarSync()\n\t\t}\n\t}\n\n\tsetUpClientOnlyCalendars() {\n\t\tlet configs = deviceConfig.getClientOnlyCalendars()\n\n\t\tfor (const [id, name] of CLIENT_ONLY_CALENDARS.entries()) {\n\t\t\tconst calendarId = `${this.logins.getUserController().userId}#${id}`\n\t\t\tconst config = configs.get(calendarId)\n\t\t\tif (!config)\n\t\t\t\tdeviceConfig.updateClientOnlyCalendars(calendarId, {\n\t\t\t\t\tname: lang.get(name),\n\t\t\t\t\tcolor: DEFAULT_CLIENT_ONLY_CALENDAR_COLORS.get(id)!,\n\t\t\t\t})\n\t\t}\n\t}\n\n\treadonly credentialFormatMigrator: () => Promise<CredentialFormatMigrator> = lazyMemoized(async () => {\n\t\tconst { CredentialFormatMigrator } = await import(\"../common/misc/credentials/CredentialFormatMigrator.js\")\n\t\tif (isDesktop()) {\n\t\t\treturn new CredentialFormatMigrator(deviceConfig, this.nativeCredentialsFacade, null)\n\t\t} else if (isApp()) {\n\t\t\treturn new CredentialFormatMigrator(deviceConfig, this.nativeCredentialsFacade, this.systemFacade)\n\t\t} else {\n\t\t\treturn new CredentialFormatMigrator(deviceConfig, null, null)\n\t\t}\n\t})\n\n\tasync addNotificationEmailDialog(): Promise<AddNotificationEmailDialog> {\n\t\tconst { AddNotificationEmailDialog } = await import(\"../mail-app/settings/AddNotificationEmailDialog.js\")\n\t\treturn new AddNotificationEmailDialog(this.logins, this.entityClient)\n\t}\n\n\treadonly mailExportController: () => Promise<MailExportController> = lazyMemoized(async () => {\n\t\tconst { htmlSanitizer } = await import(\"../common/misc/HtmlSanitizer\")\n\t\tconst { MailExportController } = await import(\"./native/main/MailExportController.js\")\n\t\treturn new MailExportController(this.mailExportFacade, htmlSanitizer, this.exportFacade, this.logins, this.mailboxModel, await this.scheduler())\n\t})\n\n\t/**\n\t * Factory method for credentials provider that will return an instance injected with the implementations appropriate for the platform.\n\t */\n\tprivate async createCredentialsProvider(): Promise<CredentialsProvider> {\n\t\tconst { CredentialsProvider } = await import(\"../common/misc/credentials/CredentialsProvider.js\")\n\t\tif (isDesktop() || isApp()) {\n\t\t\treturn new CredentialsProvider(this.nativeCredentialsFacade, this.sqlCipherFacade, isDesktop() ? this.interWindowEventSender : null)\n\t\t} else {\n\t\t\tconst { WebCredentialsFacade } = await import(\"../common/misc/credentials/WebCredentialsFacade.js\")\n\t\t\treturn new CredentialsProvider(new WebCredentialsFacade(deviceConfig), null, null)\n\t\t}\n\t}\n}\n\nexport type IMailLocator = Readonly<MailLocator>\n\nexport const mailLocator: IMailLocator = new MailLocator()\n\nif (typeof window !== \"undefined\") {\n\twindow.tutao.locator = mailLocator\n}\n"],"mappings":"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"}