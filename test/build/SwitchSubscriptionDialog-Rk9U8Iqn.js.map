{"version":3,"file":"SwitchSubscriptionDialog-Rk9U8Iqn.js","names":["BusinessUseItems: SegmentControlItem<boolean>[]","actionButtons: SubscriptionActionButtons","subscription: AvailablePlanType","vnode: Vnode<SubscriptionSelectorAttr>","msg: MaybeTranslation | null","currentPlanType: PlanType | null","priceInfoTextId: TranslationKey | null","isBusiness: boolean","isCyberMonday: boolean","text: string","style?: Record<string, any>","inMobileView: boolean","additionalInfo: Children","plans: AvailablePlanType[]","signup","vnode","attrs: SubscriptionSelectorAttr","planType: AvailablePlanType","renderCategoryTitle: boolean","featureExpander: Record<ExpanderTargets, Children>","selectorAttrs: SubscriptionSelectorAttr","targetSubscription: AvailablePlanType","mobile: boolean","priceStr: string","referencePriceStr: string | undefined","inMobileView: boolean | null","featureListProvider: FeatureListProvider","subType: ExpanderTargets","item: FeatureListItem","targetSubscription: PlanType","category: FeatureCategory","key: TranslationKey","replacements?: Record<string, string | number>","key: ReplacementKey | undefined","subscription: PlanType","planType: PlanType","businessUse: boolean","subscriptionPrice: number","paymentInterval: PaymentInterval","multiuser: boolean","customer: Customer","accountingInfo: AccountingInfo","planType: PlanType","lastBooking: Booking","paymentInterval: PaymentInterval","businessUse: boolean","invoiceData: InvoiceData","location: LocationServiceGetReturn","domInput: HTMLInputElement","vnode: Vnode<SimplifiedCreditCardAttrs>","model: SimplifiedCreditCardViewModel","subscriptionOptions: SelectedSubscriptionOptions","selectedCountry: Stream<Country | null>","accountingInfo: AccountingInfo","payPalRequestUrl: LazyLoaded<string>","defaultPaymentMethod: PaymentMethodType","accountingInfo","value: PaymentMethodType","paymentData?: PaymentData","vnode: Vnode<PaypalAttrs>","vnode: Vnode<WizardPageAttrs<UpgradeSubscriptionData>>","vnode: VnodeDOM<WizardPageAttrs<UpgradeSubscriptionData>>","login: Promise<Credentials | null>","defaultPaymentMethod: PaymentMethodType","upgradeData: UpgradeSubscriptionData","showErrorDialog: boolean","enabled: () => boolean","paymentInterval: PaymentInterval","invoiceData: InvoiceData","paymentData: PaymentData | null","confirmedCountry: Country | null","isSignup: boolean","price: string | null","accountingInfo: AccountingInfo","braintree3ds: Braintree3ds2Request","price: string","resolve: (arg0: boolean) => void","progressDialogPromise: Promise<boolean>","progressDialog: Dialog","entityEventListener: EntityEventsListener","updates: ReadonlyArray<EntityUpdateData>","eventOwnerGroupId: Id","invoiceInfo","customer: Customer","invoiceData: InvoiceData","accountingInfo: AccountingInfo","vnode: Vnode<SetupLeavingUserSurveyPageAttrs>","vnode: VnodeDOM<WizardPageAttrs<LeavingUserSurveyData>>","vnode: Vnode<WizardPageAttrs<LeavingUserSurveyData>>","showPriceCategory: boolean","leavingUserSurveyData: LeavingUserSurveyData","showErrorDialog: boolean","SURVEY_VERSION_NUMBER: string","category: NumberString","CATEGORY_TO_IMAGE: Map<CategoryType, CategoryImageInfo>","CATEGORY_TO_REASON: Map<CategoryType, Reason[]>","vnode: VnodeDOM<WizardPageAttrs<LeavingUserSurveyData>>","vnode: Vnode<WizardPageAttrs<LeavingUserSurveyData>>","category: NumberString","unselected: SelectorItem<string | null>[]","showPriceCategory: boolean","showDowngradeMessage: boolean","category: NumberString | null","reason: string | null","details: string | null","submitted: boolean","leavingUserSurveyData: LeavingUserSurveyData","CustomerAccountPostingTypeRef: TypeRef<CustomerAccountPosting>","CustomerAccountReturnTypeRef: TypeRef<CustomerAccountReturn>","vnode: VnodeDOM<WizardPageAttrs<UpgradeSubscriptionData>>","paymentInterval: PaymentInterval","vnode: Vnode<WizardPageAttrs<UpgradeSubscriptionData>>","subscriptionActionButtons: SubscriptionActionButtons","data: UpgradeSubscriptionData","subscriptionParameters: SubscriptionParameters","subscriptionType: SubscriptionType | null","planType: PlanType","dialog: Dialog","confirmed: boolean","upgradeData: UpgradeSubscriptionData","showErrorDialog: boolean","vnode: VnodeDOM<WizardPageAttrs<UpgradeSubscriptionData>>","data: UpgradeSubscriptionData","dom: HTMLElement","upgradeData: UpgradeSubscriptionData","showDialogs: boolean","vnode: Vnode<SelectMailAddressFormAttrs>","attrs: SelectMailAddressFormAttrs","domainData: EmailDomainData","isBusy: boolean","onBusyStateChanged: (arg0: boolean) => unknown","email: string","validationResult: ValidationResult","onValidationResult: SelectMailAddressFormAttrs[\"onValidationResult\"]","result: ValidationResult","vnode: Vnode<SignupFormAttrs>","mailAddressFormAttrs: SelectMailAddressFormAttrs","confirmTermsCheckBoxAttrs: CheckboxAttrs","confirmAgeCheckBoxAttrs: CheckboxAttrs","mailAddress: string","pw: string","registrationCode: string","isBusinessUse: boolean","isPaidSubscription: boolean","campaign: string | null","vnode: VnodeDOM<WizardPageAttrs<UpgradeSubscriptionData>>","vnode: Vnode<WizardPageAttrs<UpgradeSubscriptionData>>","mailAddress: undefined | string","newAccountData","signupData: UpgradeSubscriptionData","showErrorDialog: boolean","vnode: VnodeDOM<WizardPageAttrs<UpgradeSubscriptionData>>","data: UpgradeSubscriptionData","attrs: WizardPageAttrs<UpgradeSubscriptionData>","dom: HTMLElement","price: string","options: SelectedSubscriptionOptions","logins: LoginController","acceptedPlans: AvailablePlanType[]","msg?: MaybeTranslation","upgradeData: UpgradeSubscriptionData","subscriptionParameters: SubscriptionParameters | null","registrationDataId: string | null","referralCode: string | null","message: MaybeTranslation | null","signupData: UpgradeSubscriptionData","customer: Customer","customerInfo: CustomerInfo","accountingInfo: AccountingInfo","lastBooking: Booking","acceptedPlans: AvailablePlanType[]","reason: MaybeTranslation | null","headerBarAttrs: DialogHeaderBarAttrs","dialog: Dialog","subscriptionActionButtons: SubscriptionActionButtons","currentPlanInfo: CurrentPlanInfo","newPaymentInterval: PaymentInterval","targetSubscription: PlanType","newPaymentInterval: stream<PaymentInterval>","e: PreconditionFailedError","detailMsg: string","surveyData: SurveyData | null","invoiceData: InvoiceData"],"sources":["../../src/common/subscription/SubscriptionSelector.ts","../../src/common/subscription/SwitchSubscriptionDialogModel.ts","../../src/common/subscription/InvoiceDataInput.ts","../../src/common/subscription/SimplifiedCreditCardInput.ts","../../src/common/subscription/PaymentMethodInput.ts","../../src/common/subscription/InvoiceAndPaymentDataPage.ts","../../src/common/subscription/SwitchToBusinessInvoiceDataDialog.ts","../../src/common/subscription/SetupLeavingUserSurveyPage.ts","../../src/common/subscription/LeavingUserSurveyCategoryPage.ts","../../src/common/subscription/LeavingUserSurveyConstants.ts","../../src/common/subscription/LeavingUserSurveyReasonPage.ts","../../src/common/subscription/LeavingUserSurveyWizard.ts","../../src/common/native/common/generatedipc/MobilePaymentSubscriptionOwnership.ts","../../src/common/subscription/PaymentDataDialog.ts","../../src/common/api/entities/accounting/TypeRefs.ts","../../src/common/api/entities/accounting/Services.ts","../../src/common/subscription/PaymentViewer.ts","../../src/common/subscription/UpgradeSubscriptionPage.ts","../../src/common/subscription/UpgradeCongratulationsPage.ts","../../src/common/settings/SelectMailAddressForm.ts","../../src/common/subscription/SignupForm.ts","../../src/common/subscription/SignupPage.ts","../../src/common/native/common/generatedipc/MobilePaymentResultType.ts","../../src/common/subscription/UpgradeConfirmSubscriptionPage.ts","../../src/common/subscription/UpgradeSubscriptionWizard.ts","../../src/common/subscription/SignOrderProcessingAgreementDialog.ts","../../src/common/subscription/SubscriptionViewer.ts","../../src/common/subscription/SwitchSubscriptionDialog.ts"],"sourcesContent":["import m, { Children, Component, Vnode } from \"mithril\"\nimport type { MaybeTranslation, TranslationKey } from \"../misc/LanguageViewModel\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport type { BuyOptionBoxAttr, BuyOptionDetailsAttr } from \"./BuyOptionBox\"\nimport { BOX_MARGIN, BuyOptionBox, BuyOptionDetails, getActiveSubscriptionActionButtonReplacement } from \"./BuyOptionBox\"\nimport type { SegmentControlItem } from \"../gui/base/SegmentControl\"\nimport { SegmentControl } from \"../gui/base/SegmentControl\"\nimport { formatMonthlyPrice, PaymentInterval, PriceAndConfigProvider } from \"./PriceUtils\"\nimport {\n\tFeatureCategory,\n\tFeatureListItem,\n\tFeatureListProvider,\n\tgetDisplayNameOfPlanType,\n\tReplacementKey,\n\tSelectedSubscriptionOptions,\n\tUpgradePriceType,\n} from \"./FeatureListProvider\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError\"\nimport { Button, ButtonType } from \"../gui/base/Button.js\"\nimport { downcast, lazy, NBSP } from \"@tutao/tutanota-utils\"\nimport {\n\tAvailablePlanType,\n\tConst,\n\tHighlightedPlans,\n\tLegacyPlans,\n\tNewBusinessPlans,\n\tNewPersonalPlans,\n\tPlanType,\n\tPlanTypeToName,\n} from \"../api/common/TutanotaConstants.js\"\nimport { px } from \"../gui/size.js\"\nimport { LoginButton, LoginButtonAttrs } from \"../gui/base/buttons/LoginButton.js\"\nimport { isIOSApp } from \"../api/common/Env\"\nimport { isReferenceDateWithinCyberMondayCampaign } from \"../misc/CyberMondayUtils.js\"\nimport { theme } from \"../gui/theme.js\"\n\nconst BusinessUseItems: SegmentControlItem<boolean>[] = [\n\t{\n\t\tname: lang.get(\"pricing.privateUse_label\"),\n\t\tvalue: false,\n\t},\n\t{\n\t\tname: lang.get(\"pricing.businessUse_label\"),\n\t\tvalue: true,\n\t},\n]\n\nexport type SubscriptionActionButtons = Record<AvailablePlanType, lazy<LoginButtonAttrs>>\n\nexport type SubscriptionSelectorAttr = {\n\toptions: SelectedSubscriptionOptions\n\tpriceInfoTextId: TranslationKey | null\n\tactionButtons: SubscriptionActionButtons\n\tboxWidth: number\n\tboxHeight: number\n\tcurrentPlanType: PlanType | null\n\tallowSwitchingPaymentInterval: boolean\n\tfeatureListProvider: FeatureListProvider\n\tpriceAndConfigProvider: PriceAndConfigProvider\n\tacceptedPlans: AvailablePlanType[]\n\tmultipleUsersAllowed: boolean\n\tmsg: MaybeTranslation | null\n}\n\nexport function getActionButtonBySubscription(actionButtons: SubscriptionActionButtons, subscription: AvailablePlanType): lazy<Children> {\n\tconst ret = actionButtons[subscription]\n\tif (ret == null) {\n\t\tthrow new ProgrammingError(\"Plan is not valid\")\n\t}\n\treturn () => m(LoginButton, ret())\n}\n\ntype ExpanderTargets = AvailablePlanType | \"All\"\n\nexport class SubscriptionSelector implements Component<SubscriptionSelectorAttr> {\n\tprivate containerDOM: Element | null = null\n\tprivate featuresExpanded: { [K in ExpanderTargets]: boolean } = {\n\t\t[PlanType.Free]: false,\n\t\t[PlanType.Revolutionary]: false,\n\t\t[PlanType.Legend]: false,\n\t\t[PlanType.Essential]: false,\n\t\t[PlanType.Advanced]: false,\n\t\t[PlanType.Unlimited]: false,\n\t\tAll: false,\n\t}\n\n\toninit(vnode: Vnode<SubscriptionSelectorAttr>): any {\n\t\tconst acceptedPlans = vnode.attrs.acceptedPlans\n\t\tconst onlyBusinessPlansAccepted = acceptedPlans.every((plan) => NewBusinessPlans.includes(plan))\n\n\t\tif (onlyBusinessPlansAccepted) {\n\t\t\t// if only business plans are accepted, we show them first even if the current plan is a personal plan\n\t\t\tvnode.attrs.options.businessUse(true)\n\t\t}\n\t}\n\n\tprivate renderHeadline(\n\t\tmsg: MaybeTranslation | null,\n\t\tcurrentPlanType: PlanType | null,\n\t\tpriceInfoTextId: TranslationKey | null,\n\t\tisBusiness: boolean,\n\t\tisCyberMonday: boolean,\n\t): Children {\n\t\tconst wrapInDiv = (text: string, style?: Record<string, any>) => {\n\t\t\treturn m(\".b.center\", { style }, text)\n\t\t}\n\n\t\tif (msg) {\n\t\t\treturn wrapInDiv(lang.getTranslationText(msg))\n\t\t} else if (currentPlanType != null && LegacyPlans.includes(currentPlanType)) {\n\t\t\treturn wrapInDiv(lang.get(\"currentPlanDiscontinued_msg\"))\n\t\t}\n\n\t\tif (priceInfoTextId && lang.exists(priceInfoTextId)) {\n\t\t\treturn wrapInDiv(lang.get(priceInfoTextId))\n\t\t}\n\n\t\tif (isCyberMonday && !isBusiness) {\n\t\t\treturn wrapInDiv(lang.get(\"pricing.cyber_monday_msg\"), { width: \"230px\", margin: \"1em auto 0 auto\" })\n\t\t}\n\t}\n\n\tview(vnode: Vnode<SubscriptionSelectorAttr>): Children {\n\t\t// Add BuyOptionBox margin twice to the boxWidth received\n\t\tconst { acceptedPlans, priceInfoTextId, msg, featureListProvider, currentPlanType, options, boxWidth } = vnode.attrs\n\n\t\tconst columnWidth = boxWidth + BOX_MARGIN * 2\n\t\tconst inMobileView: boolean = (this.containerDOM && this.containerDOM.clientWidth < columnWidth * 2) == true\n\t\tconst featureExpander = this.renderFeatureExpanders(inMobileView, featureListProvider) // renders all feature expanders, both for every single subscription option but also for the whole list\n\t\tlet additionalInfo: Children\n\n\t\tlet plans: AvailablePlanType[]\n\t\tconst currentPlan = currentPlanType\n\t\tconst signup = currentPlan == null\n\n\t\tconst onlyBusinessPlansAccepted = acceptedPlans.every((plan) => NewBusinessPlans.includes(plan))\n\t\tconst onlyPersonalPlansAccepted = acceptedPlans.every((plan) => NewPersonalPlans.includes(plan))\n\t\t// Show the business segmentControl for signup, if both personal & business plans are allowed\n\t\tconst showBusinessSelector = !onlyBusinessPlansAccepted && !onlyPersonalPlansAccepted && !isIOSApp()\n\n\t\tconst isCyberMonday = isReferenceDateWithinCyberMondayCampaign(Const.CURRENT_DATE ?? new Date())\n\n\t\tlet subscriptionPeriodInfoMsg = !signup && currentPlan !== PlanType.Free ? lang.get(\"switchSubscriptionInfo_msg\") + \" \" : \"\"\n\t\tif (options.businessUse()) {\n\t\t\tplans = [PlanType.Essential, PlanType.Advanced, PlanType.Unlimited]\n\t\t\tsubscriptionPeriodInfoMsg += lang.get(\"pricing.subscriptionPeriodInfoBusiness_msg\")\n\t\t} else {\n\t\t\tif (inMobileView) {\n\t\t\t\tif (isCyberMonday) {\n\t\t\t\t\tplans = [PlanType.Legend, PlanType.Revolutionary, PlanType.Free]\n\t\t\t\t} else {\n\t\t\t\t\tplans = [PlanType.Revolutionary, PlanType.Legend, PlanType.Free]\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (isCyberMonday) {\n\t\t\t\t\tplans = [PlanType.Free, PlanType.Legend, PlanType.Revolutionary]\n\t\t\t\t} else {\n\t\t\t\t\tplans = [PlanType.Free, PlanType.Revolutionary, PlanType.Legend]\n\t\t\t\t}\n\t\t\t}\n\t\t\tsubscriptionPeriodInfoMsg += lang.get(\"pricing.subscriptionPeriodInfoPrivate_msg\")\n\t\t}\n\n\t\tconst shouldShowFirstYearDiscountNotice = !isIOSApp() && isCyberMonday && !options.businessUse() && options.paymentInterval() === PaymentInterval.Yearly\n\n\t\tadditionalInfo = m(\".flex.flex-column.items-center\", [\n\t\t\tfeatureExpander.All, // global feature expander\n\t\t\tm(\".smaller.mb.center\", subscriptionPeriodInfoMsg),\n\t\t\tshouldShowFirstYearDiscountNotice && m(\".smaller.mb.center\", `* ${lang.get(\"pricing.legendAsterisk_msg\")}`),\n\t\t])\n\n\t\tconst buyBoxesViewPlacement = plans\n\t\t\t.filter((plan) => acceptedPlans.includes(plan) || currentPlanType === plan)\n\t\t\t.map((personalPlan, i) => {\n\t\t\t\t// only show category title for the leftmost item\n\t\t\t\treturn [\n\t\t\t\t\tthis.renderBuyOptionBox(vnode.attrs, inMobileView, personalPlan, isCyberMonday),\n\t\t\t\t\tthis.renderBuyOptionDetails(vnode.attrs, i === 0, personalPlan, featureExpander, isCyberMonday),\n\t\t\t\t]\n\t\t\t})\n\n\t\treturn m(\"\", { lang: lang.code }, [\n\t\t\tshowBusinessSelector\n\t\t\t\t? m(SegmentControl, {\n\t\t\t\t\t\tselectedValue: options.businessUse(),\n\t\t\t\t\t\tonValueSelected: options.businessUse,\n\t\t\t\t\t\titems: BusinessUseItems,\n\t\t\t\t  })\n\t\t\t\t: null,\n\t\t\tthis.renderHeadline(msg, currentPlanType, priceInfoTextId, options.businessUse(), isCyberMonday),\n\t\t\tm(\n\t\t\t\t\".flex.center-horizontally.wrap\",\n\t\t\t\t{\n\t\t\t\t\t\"data-testid\": \"dialog:select-subscription\",\n\t\t\t\t\toncreate: (vnode) => {\n\t\t\t\t\t\tthis.containerDOM = vnode.dom as HTMLElement\n\t\t\t\t\t\tm.redraw()\n\t\t\t\t\t},\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\"column-gap\": px(BOX_MARGIN),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tm(\".plans-grid\", buyBoxesViewPlacement.flat()),\n\t\t\t\tadditionalInfo,\n\t\t\t),\n\t\t])\n\t}\n\n\tprivate renderBuyOptionBox(attrs: SubscriptionSelectorAttr, inMobileView: boolean, planType: AvailablePlanType, isCyberMonday: boolean): Children {\n\t\treturn m(\n\t\t\t\"\",\n\t\t\t{\n\t\t\t\tstyle: {\n\t\t\t\t\twidth: attrs.boxWidth ? px(attrs.boxWidth) : px(230),\n\t\t\t\t},\n\t\t\t},\n\t\t\tm(BuyOptionBox, this.createBuyOptionBoxAttr(attrs, planType, inMobileView, isCyberMonday)),\n\t\t)\n\t}\n\n\tprivate renderBuyOptionDetails(\n\t\tattrs: SubscriptionSelectorAttr,\n\t\trenderCategoryTitle: boolean,\n\t\tplanType: AvailablePlanType,\n\t\tfeatureExpander: Record<ExpanderTargets, Children>,\n\t\tisCyberMonday: boolean, // change to isDiscountForAnyPlanAvailable when removing the cyber monday implementation\n\t): Children {\n\t\treturn m(\n\t\t\t\"\",\n\t\t\t{\n\t\t\t\tstyle: { width: attrs.boxWidth ? px(attrs.boxWidth) : px(230) },\n\t\t\t},\n\t\t\tm(BuyOptionDetails, this.createBuyOptionBoxDetailsAttr(attrs, planType, renderCategoryTitle, isCyberMonday)),\n\t\t\tfeatureExpander[planType],\n\t\t)\n\t}\n\n\tprivate createBuyOptionBoxAttr(\n\t\tselectorAttrs: SubscriptionSelectorAttr,\n\t\ttargetSubscription: AvailablePlanType,\n\t\tmobile: boolean,\n\t\tisCyberMonday: boolean,\n\t): BuyOptionBoxAttr {\n\t\tconst { priceAndConfigProvider } = selectorAttrs\n\n\t\t// we highlight the center box if this is a signup or the current subscription type is Free\n\t\tconst interval = selectorAttrs.options.paymentInterval()\n\t\tconst upgradingToPaidAccount = !selectorAttrs.currentPlanType || selectorAttrs.currentPlanType === PlanType.Free\n\t\tconst isHighlighted = (() => {\n\t\t\tif (isCyberMonday) {\n\t\t\t\treturn targetSubscription === PlanType.Legend\n\t\t\t}\n\n\t\t\treturn upgradingToPaidAccount && HighlightedPlans.includes(targetSubscription)\n\t\t})()\n\t\tconst multiuser = NewBusinessPlans.includes(targetSubscription) || LegacyPlans.includes(targetSubscription) || selectorAttrs.multipleUsersAllowed\n\n\t\tconst subscriptionPrice = priceAndConfigProvider.getSubscriptionPrice(interval, targetSubscription, UpgradePriceType.PlanActualPrice)\n\n\t\tlet priceStr: string\n\t\tlet referencePriceStr: string | undefined = undefined\n\t\tif (isIOSApp()) {\n\t\t\tconst prices = priceAndConfigProvider.getMobilePrices().get(PlanTypeToName[targetSubscription].toLowerCase())\n\t\t\tif (prices != null) {\n\t\t\t\tif (isCyberMonday && targetSubscription === PlanType.Legend && interval == PaymentInterval.Yearly) {\n\t\t\t\t\tconst revolutionaryPrice = priceAndConfigProvider.getMobilePrices().get(PlanTypeToName[PlanType.Revolutionary].toLowerCase())\n\t\t\t\t\tpriceStr = revolutionaryPrice?.displayYearlyPerMonth ?? NBSP\n\t\t\t\t\t// if there is a discount for this plan we show the original price as reference\n\t\t\t\t\treferencePriceStr = prices?.displayYearlyPerMonth\n\t\t\t\t} else {\n\t\t\t\t\tswitch (interval) {\n\t\t\t\t\t\tcase PaymentInterval.Monthly:\n\t\t\t\t\t\t\tpriceStr = prices.displayMonthlyPerMonth\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase PaymentInterval.Yearly:\n\t\t\t\t\t\t\tpriceStr = prices.displayYearlyPerYear\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpriceStr = NBSP\n\t\t\t\treferencePriceStr = NBSP\n\t\t\t}\n\t\t} else {\n\t\t\tconst referencePrice = priceAndConfigProvider.getSubscriptionPrice(interval, targetSubscription, UpgradePriceType.PlanReferencePrice)\n\t\t\tpriceStr = formatMonthlyPrice(subscriptionPrice, interval)\n\t\t\tif (referencePrice > subscriptionPrice) {\n\t\t\t\t// if there is a discount for this plan we show the original price as reference\n\t\t\t\treferencePriceStr = formatMonthlyPrice(referencePrice, interval)\n\t\t\t} else if (interval == PaymentInterval.Yearly && subscriptionPrice !== 0 && !isCyberMonday) {\n\t\t\t\t// if there is no discount for any plan then we show the monthly price as reference\n\t\t\t\tconst monthlyReferencePrice = priceAndConfigProvider.getSubscriptionPrice(\n\t\t\t\t\tPaymentInterval.Monthly,\n\t\t\t\t\ttargetSubscription,\n\t\t\t\t\tUpgradePriceType.PlanActualPrice,\n\t\t\t\t)\n\t\t\t\treferencePriceStr = formatMonthlyPrice(monthlyReferencePrice, PaymentInterval.Monthly)\n\t\t\t}\n\t\t}\n\n\t\t// If we are on the cyber monday campaign, we want to let the user know the discount is just for the first year.\n\t\tconst asteriskOrEmptyString = !isIOSApp() && isCyberMonday && targetSubscription === PlanType.Legend && interval === PaymentInterval.Yearly ? \"*\" : \"\"\n\n\t\treturn {\n\t\t\theading: getDisplayNameOfPlanType(targetSubscription),\n\t\t\tactionButton:\n\t\t\t\tselectorAttrs.currentPlanType === targetSubscription\n\t\t\t\t\t? getActiveSubscriptionActionButtonReplacement()\n\t\t\t\t\t: getActionButtonBySubscription(selectorAttrs.actionButtons, targetSubscription),\n\t\t\tprice: priceStr,\n\t\t\treferencePrice: referencePriceStr,\n\t\t\tpriceHint: lang.makeTranslation(\"price_hint\", `${getPriceHint(subscriptionPrice, interval, multiuser)}${asteriskOrEmptyString}`),\n\t\t\thelpLabel: getHelpLabel(targetSubscription, selectorAttrs.options.businessUse()),\n\t\t\twidth: selectorAttrs.boxWidth,\n\t\t\theight: selectorAttrs.boxHeight,\n\t\t\tselectedPaymentInterval:\n\t\t\t\tselectorAttrs.allowSwitchingPaymentInterval && targetSubscription !== PlanType.Free ? selectorAttrs.options.paymentInterval : null,\n\t\t\taccountPaymentInterval: interval,\n\t\t\thighlighted: isHighlighted,\n\t\t\tmobile,\n\t\t\tbonusMonths:\n\t\t\t\ttargetSubscription !== PlanType.Free && interval === PaymentInterval.Yearly\n\t\t\t\t\t? Number(selectorAttrs.priceAndConfigProvider.getRawPricingData().bonusMonthsForYearlyPlan)\n\t\t\t\t\t: 0,\n\t\t\ttargetSubscription,\n\t\t}\n\t}\n\n\tprivate createBuyOptionBoxDetailsAttr(\n\t\tselectorAttrs: SubscriptionSelectorAttr,\n\t\ttargetSubscription: AvailablePlanType,\n\t\trenderCategoryTitle: boolean,\n\t\tisCyberMonday: boolean,\n\t): BuyOptionDetailsAttr {\n\t\tconst { featureListProvider } = selectorAttrs\n\t\tconst subscriptionFeatures = featureListProvider.getFeatureList(targetSubscription)\n\t\tconst categoriesToShow = subscriptionFeatures.categories\n\t\t\t.map((fc) => {\n\t\t\t\treturn localizeFeatureCategory(fc, targetSubscription, selectorAttrs)\n\t\t\t})\n\t\t\t.filter((fc): fc is BuyOptionDetailsAttr[\"categories\"][0] => fc != null)\n\n\t\tconst isLegend = targetSubscription === PlanType.Legend\n\t\tconst isYearly = selectorAttrs.options.paymentInterval() === PaymentInterval.Yearly\n\n\t\treturn {\n\t\t\tcategories: categoriesToShow,\n\t\t\tfeaturesExpanded: this.featuresExpanded[targetSubscription] || this.featuresExpanded.All,\n\t\t\trenderCategoryTitle,\n\t\t\ticonStyle: isCyberMonday && isYearly && isLegend ? { fill: theme.content_accent_cyber_monday } : undefined,\n\t\t}\n\t}\n\n\t/**\n\t * Renders the feature expanders depending on whether currently displaying the feature list in single-column layout or in multi-column layout.\n\t * If a specific expander is not needed and thus should not be renderer, null | undefined is returned\n\t */\n\tprivate renderFeatureExpanders(inMobileView: boolean | null, featureListProvider: FeatureListProvider): Record<ExpanderTargets, Children> {\n\t\tif (!featureListProvider.featureLoadingDone()) {\n\t\t\t// the feature list is not available\n\t\t\treturn {\n\t\t\t\t[PlanType.Free]: null,\n\t\t\t\t[PlanType.Revolutionary]: null,\n\t\t\t\t[PlanType.Legend]: null,\n\t\t\t\t[PlanType.Essential]: null,\n\t\t\t\t[PlanType.Advanced]: null,\n\t\t\t\t[PlanType.Unlimited]: null,\n\t\t\t\tAll: null,\n\t\t\t}\n\t\t}\n\t\tif (inMobileView) {\n\t\t\t// In single-column layout every subscription type has its own feature expander.\n\t\t\tif (this.featuresExpanded.All) {\n\t\t\t\tfor (const k in this.featuresExpanded) {\n\t\t\t\t\tthis.featuresExpanded[k as ExpanderTargets] = true\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t[PlanType.Free]: this.renderExpander(PlanType.Free),\n\t\t\t\t[PlanType.Revolutionary]: this.renderExpander(PlanType.Revolutionary),\n\t\t\t\t[PlanType.Legend]: this.renderExpander(PlanType.Legend),\n\t\t\t\t[PlanType.Advanced]: this.renderExpander(PlanType.Advanced),\n\t\t\t\t[PlanType.Essential]: this.renderExpander(PlanType.Essential),\n\t\t\t\t[PlanType.Unlimited]: this.renderExpander(PlanType.Unlimited),\n\t\t\t\tAll: null,\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const k in this.featuresExpanded) {\n\t\t\t\tthis.featuresExpanded[k as ExpanderTargets] = this.featuresExpanded.All // in multi-column layout the specific feature expanders should follow the global one\n\t\t\t}\n\t\t\treturn Object.assign({} as Record<ExpanderTargets, Children>, { All: this.renderExpander(\"All\") })\n\t\t}\n\t}\n\n\t/**\n\t * Renders a single feature expander.\n\t * @param subType The current expander that should be rendered\n\t * @private\n\t */\n\tprivate renderExpander(subType: ExpanderTargets): Children {\n\t\treturn this.featuresExpanded[subType]\n\t\t\t? null\n\t\t\t: m(Button, {\n\t\t\t\t\tlabel: \"pricing.showAllFeatures\",\n\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\tclick: (event) => {\n\t\t\t\t\t\tthis.featuresExpanded[subType] = !this.featuresExpanded[subType]\n\t\t\t\t\t\tevent.stopPropagation()\n\t\t\t\t\t},\n\t\t\t  })\n\t}\n}\n\nfunction localizeFeatureListItem(\n\titem: FeatureListItem,\n\ttargetSubscription: PlanType,\n\tattrs: SubscriptionSelectorAttr,\n): BuyOptionDetailsAttr[\"categories\"][0][\"features\"][0] | null {\n\tconst text = tryGetTranslation(item.text, getReplacement(item.replacements, targetSubscription, attrs))\n\tif (text == null) {\n\t\treturn null\n\t}\n\tif (!item.toolTip) {\n\t\treturn { text, key: item.text, antiFeature: item.antiFeature, omit: item.omit, heart: !!item.heart }\n\t} else {\n\t\tconst toolTipText = tryGetTranslation(item.toolTip)\n\t\tif (toolTipText === null) {\n\t\t\treturn null\n\t\t}\n\t\tconst toolTip = item.toolTip.endsWith(\"_markdown\") ? m.trust(toolTipText) : toolTipText\n\t\treturn { text, toolTip, key: item.text, antiFeature: item.antiFeature, omit: item.omit, heart: !!item.heart }\n\t}\n}\n\nfunction localizeFeatureCategory(\n\tcategory: FeatureCategory,\n\ttargetSubscription: PlanType,\n\tattrs: SubscriptionSelectorAttr,\n): BuyOptionDetailsAttr[\"categories\"][0] | null {\n\tconst title = tryGetTranslation(category.title)\n\tconst features = downcast<{ text: string; toolTip?: m.Child; key: string; antiFeature?: boolean | undefined; omit: boolean; heart: boolean }[]>(\n\t\tcategory.features.map((f) => localizeFeatureListItem(f, targetSubscription, attrs)).filter((it) => it != null),\n\t)\n\treturn { title, key: category.title, features, featureCount: category.featureCount }\n}\n\nfunction tryGetTranslation(key: TranslationKey, replacements?: Record<string, string | number>): string | null {\n\ttry {\n\t\treturn lang.get(key, replacements)\n\t} catch (e) {\n\t\tconsole.log(\"could not translate feature text for key\", key, \"hiding feature item\")\n\t\treturn null\n\t}\n}\n\n/**\n * get a string to insert into a translation with a slot.\n * if no key is found, undefined is returned and nothing is replaced.\n */\nexport function getReplacement(\n\tkey: ReplacementKey | undefined,\n\tsubscription: PlanType,\n\tattrs: SubscriptionSelectorAttr,\n): Record<string, string | number> | undefined {\n\tconst { priceAndConfigProvider } = attrs\n\tswitch (key) {\n\t\tcase \"customDomains\":\n\t\t\treturn { \"{amount}\": priceAndConfigProvider.getPlanPricesForPlan(subscription).customDomains }\n\t\tcase \"mailAddressAliases\":\n\t\t\treturn { \"{amount}\": priceAndConfigProvider.getPlanPricesForPlan(subscription).includedAliases }\n\t\tcase \"storage\":\n\t\t\treturn { \"{amount}\": priceAndConfigProvider.getPlanPricesForPlan(subscription).includedStorage }\n\t}\n}\n\nfunction getHelpLabel(planType: PlanType, businessUse: boolean): TranslationKey {\n\tif (planType === PlanType.Free) return \"pricing.upgradeLater_msg\"\n\treturn businessUse ? \"pricing.excludesTaxes_msg\" : \"pricing.includesTaxes_msg\"\n}\n\nfunction getPriceHint(subscriptionPrice: number, paymentInterval: PaymentInterval, multiuser: boolean): string {\n\tif (subscriptionPrice > 0) {\n\t\tif (multiuser) {\n\t\t\treturn lang.get(paymentInterval === PaymentInterval.Yearly ? \"pricing.perUserMonthPaidYearly_label\" : \"pricing.perUserMonth_label\")\n\t\t} else {\n\t\t\treturn lang.get(paymentInterval === PaymentInterval.Yearly ? \"pricing.perMonthPaidYearly_label\" : \"pricing.perMonth_label\")\n\t\t}\n\t}\n\treturn \"\"\n}\n","import { BookingItemFeatureType, FeatureType, LegacyPlans, PlanType } from \"../api/common/TutanotaConstants\"\nimport type { AccountingInfo, Booking, Customer } from \"../api/entities/sys/TypeRefs.js\"\nimport { asPaymentInterval, PaymentInterval } from \"./PriceUtils\"\nimport { isCustomizationEnabledForCustomer } from \"../api/common/utils/CustomerUtils.js\"\n\nexport type CurrentPlanInfo = {\n\tbusinessUse: boolean\n\tplanType: PlanType\n\tpaymentInterval: PaymentInterval\n}\n\nexport class SwitchSubscriptionDialogModel {\n\tcurrentPlanInfo: CurrentPlanInfo\n\n\tconstructor(\n\t\tprivate readonly customer: Customer,\n\t\tprivate readonly accountingInfo: AccountingInfo,\n\t\tprivate readonly planType: PlanType,\n\t\tprivate readonly lastBooking: Booking,\n\t) {\n\t\tthis.currentPlanInfo = this._initCurrentPlanInfo()\n\t}\n\n\t_initCurrentPlanInfo(): CurrentPlanInfo {\n\t\tconst paymentInterval: PaymentInterval = asPaymentInterval(this.accountingInfo.paymentInterval)\n\t\treturn {\n\t\t\tbusinessUse: this.customer.businessUse,\n\t\t\tplanType: this.planType,\n\t\t\tpaymentInterval,\n\t\t}\n\t}\n\n\t/**\n\t * Check if the user's current plan has multiple users due to a legacy agreement and will continue to do so if the user switches plans.\n\t *\n\t * @return true if multiple users are supported due to legacy, false if not; note that returning false does not mean that the current plan does not actually support multiple users\n\t */\n\tmultipleUsersStillSupportedLegacy(): boolean {\n\t\tif (isCustomizationEnabledForCustomer(this.customer, FeatureType.MultipleUsers)) {\n\t\t\treturn true\n\t\t}\n\n\t\tif (LegacyPlans.includes(this.planType)) {\n\t\t\tconst userItem = this.lastBooking.items.find((item) => item.featureType === BookingItemFeatureType.LegacyUsers)\n\t\t\tconst sharedMailItem = this.lastBooking.items.find((item) => item.featureType === BookingItemFeatureType.SharedMailGroup)\n\t\t\tconst localAdminItem = this.lastBooking.items.find((item) => item.featureType === BookingItemFeatureType.LocalAdminGroup)\n\n\t\t\t// A user that has PlanType.Premium will always have LegacyUsers booked.\n\t\t\tconst userCount = Number(userItem?.currentCount)\n\n\t\t\t// These may be booked but not always.\n\t\t\tconst sharedMailCount = sharedMailItem ? Number(sharedMailItem.currentCount) : 0\n\t\t\tconst localAdminCount = localAdminItem ? Number(localAdminItem.currentCount) : 0\n\n\t\t\treturn userCount + sharedMailCount + localAdminCount > 1\n\t\t}\n\n\t\treturn false\n\t}\n}\n","import m, { Children, Component } from \"mithril\"\nimport type { TranslationKey } from \"../misc/LanguageViewModel\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport type { Country } from \"../api/common/CountryList\"\nimport { Countries, CountryType } from \"../api/common/CountryList\"\nimport { HtmlEditor, HtmlEditorMode } from \"../gui/editor/HtmlEditor\"\nimport type { LocationServiceGetReturn } from \"../api/entities/sys/TypeRefs.js\"\nimport { renderCountryDropdown } from \"../gui/base/GuiUtils\"\nimport { TextField } from \"../gui/base/TextField.js\"\nimport type { InvoiceData } from \"../api/common/TutanotaConstants\"\nimport { LocationService } from \"../api/entities/sys/Services\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport { UsageTest } from \"@tutao/tutanota-usagetests\"\n\nexport enum InvoiceDataInputLocation {\n\tInWizard = 0,\n\tOther = 1,\n}\n\nexport class InvoiceDataInput implements Component {\n\tprivate readonly invoiceAddressComponent: HtmlEditor\n\tpublic readonly selectedCountry: Stream<Country | null>\n\tprivate vatNumber: string = \"\"\n\tprivate __paymentPaypalTest?: UsageTest\n\n\tconstructor(private businessUse: boolean, invoiceData: InvoiceData, private readonly location = InvoiceDataInputLocation.Other) {\n\t\tthis.__paymentPaypalTest = locator.usageTestController.getTest(\"payment.paypal\")\n\n\t\tthis.invoiceAddressComponent = new HtmlEditor()\n\t\t\t.setStaticNumberOfLines(5)\n\t\t\t.showBorders()\n\t\t\t.setPlaceholderId(\"invoiceAddress_label\")\n\t\t\t.setMode(HtmlEditorMode.HTML)\n\t\t\t.setHtmlMonospace(false)\n\t\t\t.setValue(invoiceData.invoiceAddress)\n\n\t\tthis.selectedCountry = stream(invoiceData.country)\n\n\t\tthis.view = this.view.bind(this)\n\t\tthis.oncreate = this.oncreate.bind(this)\n\t}\n\n\tview(): Children {\n\t\treturn [\n\t\t\tthis.businessUse || this.location !== InvoiceDataInputLocation.InWizard\n\t\t\t\t? m(\"\", [\n\t\t\t\t\t\tm(\".pt\", m(this.invoiceAddressComponent)),\n\t\t\t\t\t\tm(\".small\", lang.get(this.businessUse ? \"invoiceAddressInfoBusiness_msg\" : \"invoiceAddressInfoPrivate_msg\")),\n\t\t\t\t  ])\n\t\t\t\t: null,\n\t\t\trenderCountryDropdown({\n\t\t\t\tselectedCountry: this.selectedCountry(),\n\t\t\t\tonSelectionChanged: this.selectedCountry,\n\t\t\t\thelpLabel: () => lang.get(\"invoiceCountryInfoConsumer_msg\"),\n\t\t\t}),\n\t\t\tthis.isVatIdFieldVisible()\n\t\t\t\t? m(TextField, {\n\t\t\t\t\t\tlabel: \"invoiceVatIdNo_label\",\n\t\t\t\t\t\tvalue: this.vatNumber,\n\t\t\t\t\t\toninput: (value) => (this.vatNumber = value),\n\t\t\t\t\t\thelpLabel: () => lang.get(\"invoiceVatIdNoInfoBusiness_msg\"),\n\t\t\t\t  })\n\t\t\t\t: null,\n\t\t]\n\t}\n\n\toncreate() {\n\t\tlocator.serviceExecutor.get(LocationService, null).then((location: LocationServiceGetReturn) => {\n\t\t\tif (!this.selectedCountry()) {\n\t\t\t\tconst country = Countries.find((c) => c.a === location.country)\n\n\t\t\t\tif (country) {\n\t\t\t\t\tthis.selectedCountry(country)\n\t\t\t\t\tm.redraw()\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tvalidateInvoiceData(): TranslationKey | null {\n\t\tconst address = this.getAddress()\n\t\tconst countrySelected = this.selectedCountry() != null\n\n\t\tif (this.businessUse) {\n\t\t\tif (address.trim() === \"\" || address.split(\"\\n\").length > 5) {\n\t\t\t\treturn \"invoiceAddressInfoBusiness_msg\"\n\t\t\t} else if (!countrySelected) {\n\t\t\t\treturn \"invoiceCountryInfoBusiness_msg\"\n\t\t\t}\n\t\t} else {\n\t\t\tif (!countrySelected) {\n\t\t\t\treturn \"invoiceCountryInfoBusiness_msg\" // use business text here because it fits better\n\t\t\t} else if (address.split(\"\\n\").length > 4) {\n\t\t\t\treturn \"invoiceAddressInfoBusiness_msg\"\n\t\t\t}\n\t\t}\n\t\tthis.__paymentPaypalTest?.getStage(3).complete()\n\t\t// no error\n\t\treturn null\n\t}\n\n\tgetInvoiceData(): InvoiceData {\n\t\tconst address = this.getAddress()\n\t\tconst selectedCountry = this.selectedCountry()\n\t\treturn {\n\t\t\tinvoiceAddress: address,\n\t\t\tcountry: selectedCountry,\n\t\t\tvatNumber: selectedCountry?.t === CountryType.EU && this.businessUse ? this.vatNumber : \"\",\n\t\t}\n\t}\n\n\tprivate isVatIdFieldVisible(): boolean {\n\t\tconst selectedCountry = this.selectedCountry()\n\t\treturn this.businessUse && selectedCountry != null && selectedCountry.t === CountryType.EU\n\t}\n\n\tprivate getAddress(): string {\n\t\treturn this.invoiceAddressComponent\n\t\t\t.getValue()\n\t\t\t.split(\"\\n\")\n\t\t\t.filter((line) => line.trim().length > 0)\n\t\t\t.join(\"\\n\")\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport { Autocomplete, TextField } from \"../gui/base/TextField.js\"\nimport { SimplifiedCreditCardViewModel } from \"./SimplifiedCreditCardInputModel.js\"\nimport { lang, TranslationKey } from \"../misc/LanguageViewModel.js\"\nimport { Stage } from \"@tutao/tutanota-usagetests\"\nimport { CreditCard } from \"../api/entities/sys/TypeRefs.js\"\n\nexport type SimplifiedCreditCardAttrs = {\n\tviewModel: SimplifiedCreditCardViewModel\n}\n\nexport interface CCViewModel {\n\tvalidateCreditCardPaymentData(): TranslationKey | null\n\n\tsetCreditCardData(data: CreditCard | null): void\n\n\tgetCreditCardData(): CreditCard\n}\n\n// changing the content (ie grouping) sets selection to the end, this restores it after the next redraw.\nfunction restoreSelection(domInput: HTMLInputElement) {\n\tconst { selectionStart, selectionEnd, selectionDirection } = domInput\n\tconst isAtEnd = domInput.value.length === selectionStart\n\tsetTimeout(() => {\n\t\tconst currentLength = domInput.value.length\n\t\t// we're adding characters, so just re-using the index fails because at the time we set the selection, the string is longer than it was.\n\t\t// this mostly works, but fails in cases where we're adding stuff in the middle of the string.\n\t\tdomInput.setSelectionRange(isAtEnd ? currentLength : selectionStart, isAtEnd ? currentLength : selectionEnd, selectionDirection ?? undefined)\n\t}, 0)\n}\n\nexport class SimplifiedCreditCardInput implements Component<SimplifiedCreditCardAttrs> {\n\tdateFieldLeft: boolean = false\n\tnumberFieldLeft: boolean = false\n\tcvvFieldLeft: boolean = false\n\tccNumberDom: HTMLInputElement | null = null\n\texpDateDom: HTMLInputElement | null = null\n\n\tview(vnode: Vnode<SimplifiedCreditCardAttrs>): Children {\n\t\tlet { viewModel } = vnode.attrs\n\n\t\treturn [\n\t\t\tm(TextField, {\n\t\t\t\tlabel: \"creditCardNumber_label\",\n\t\t\t\thelpLabel: () => this.renderCcNumberHelpLabel(viewModel),\n\t\t\t\tvalue: viewModel.creditCardNumber,\n\t\t\t\toninput: (newValue) => {\n\t\t\t\t\tviewModel.creditCardNumber = newValue\n\t\t\t\t\trestoreSelection(this.ccNumberDom!)\n\t\t\t\t},\n\t\t\t\tonblur: () => (this.numberFieldLeft = true),\n\t\t\t\tautocompleteAs: Autocomplete.ccNumber,\n\t\t\t\tonDomInputCreated: (dom) => (this.ccNumberDom = dom),\n\t\t\t}),\n\t\t\tm(TextField, {\n\t\t\t\tlabel: \"creditCardExpirationDateWithFormat_label\",\n\t\t\t\tvalue: viewModel.expirationDate,\n\t\t\t\t// we only show the hint if the field is not empty and not selected to avoid showing errors while the user is typing.\n\t\t\t\thelpLabel: () => (this.dateFieldLeft ? lang.get(viewModel.getExpirationDateErrorHint() ?? \"emptyString_msg\") : lang.get(\"emptyString_msg\")),\n\t\t\t\tonblur: () => (this.dateFieldLeft = true),\n\t\t\t\toninput: (newValue) => {\n\t\t\t\t\tviewModel.expirationDate = newValue\n\t\t\t\t\trestoreSelection(this.expDateDom!)\n\t\t\t\t},\n\t\t\t\tonDomInputCreated: (dom) => (this.expDateDom = dom),\n\t\t\t\tautocompleteAs: Autocomplete.ccExp,\n\t\t\t}),\n\t\t\tm(TextField, {\n\t\t\t\tlabel: lang.makeTranslation(\"cvv\", viewModel.getCvvLabel()),\n\t\t\t\tvalue: viewModel.cvv,\n\t\t\t\thelpLabel: () => this.renderCvvNumberHelpLabel(viewModel),\n\t\t\t\toninput: (newValue) => (viewModel.cvv = newValue),\n\t\t\t\tonblur: () => (this.cvvFieldLeft = true),\n\t\t\t\tautocompleteAs: Autocomplete.ccCsc,\n\t\t\t}),\n\t\t]\n\t}\n\n\tprivate renderCcNumberHelpLabel(model: SimplifiedCreditCardViewModel): Children {\n\t\tconst hint = model.getCreditCardNumberHint()\n\t\tconst error = model.getCreditCardNumberErrorHint()\n\t\t// we only draw the hint if the number field was entered & exited before\n\t\tif (this.numberFieldLeft) {\n\t\t\tif (hint) {\n\t\t\t\treturn error ? lang.get(\"creditCardHintWithError_msg\", { \"{hint}\": hint, \"{errorText}\": error }) : hint\n\t\t\t} else {\n\t\t\t\treturn error ? error : lang.get(\"emptyString_msg\")\n\t\t\t}\n\t\t} else {\n\t\t\treturn hint ?? lang.get(\"emptyString_msg\")\n\t\t}\n\t}\n\n\tprivate renderCvvNumberHelpLabel(model: SimplifiedCreditCardViewModel): Children {\n\t\tconst cvvHint = model.getCvvHint()\n\t\tconst cvvError = model.getCvvErrorHint()\n\t\tif (this.cvvFieldLeft) {\n\t\t\tif (cvvHint) {\n\t\t\t\treturn cvvError ? lang.get(\"creditCardHintWithError_msg\", { \"{hint}\": cvvHint, \"{errorText}\": cvvError }) : cvvHint\n\t\t\t} else {\n\t\t\t\treturn cvvError ? cvvError : lang.get(\"emptyString_msg\")\n\t\t\t}\n\t\t} else {\n\t\t\treturn cvvHint ?? lang.get(\"emptyString_msg\")\n\t\t}\n\t}\n}\n","import m, { Children, Vnode } from \"mithril\"\nimport type { TranslationKey } from \"../misc/LanguageViewModel\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport type { Country } from \"../api/common/CountryList\"\nimport { CountryType } from \"../api/common/CountryList\"\nimport { PaymentData, PaymentMethodType } from \"../api/common/TutanotaConstants\"\nimport { PayPalLogo } from \"../gui/base/icons/Icons\"\nimport { LazyLoaded, noOp, promiseMap } from \"@tutao/tutanota-utils\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport type { AccountingInfo } from \"../api/entities/sys/TypeRefs.js\"\nimport { AccountingInfoTypeRef } from \"../api/entities/sys/TypeRefs.js\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { MessageBox } from \"../gui/base/MessageBox.js\"\nimport { px } from \"../gui/size\"\nimport Stream from \"mithril/stream\"\nimport { UsageTest } from \"@tutao/tutanota-usagetests\"\nimport { SelectedSubscriptionOptions } from \"./FeatureListProvider\"\nimport { CCViewModel, SimplifiedCreditCardInput } from \"./SimplifiedCreditCardInput.js\"\nimport { SimplifiedCreditCardViewModel } from \"./SimplifiedCreditCardInputModel.js\"\nimport { isUpdateForTypeRef } from \"../api/common/utils/EntityUpdateUtils.js\"\nimport { EntityEventsListener } from \"../api/main/EventController.js\"\nimport { BaseButton } from \"../gui/base/buttons/BaseButton.js\"\n\n/**\n * Component to display the input fields for a payment method. The selector to switch between payment methods is not included.\n */\nexport class PaymentMethodInput {\n\tprivate readonly ccViewModel: CCViewModel\n\t_payPalAttrs: PaypalAttrs\n\t_selectedCountry: Stream<Country | null>\n\t_selectedPaymentMethod: PaymentMethodType\n\t_subscriptionOptions: SelectedSubscriptionOptions\n\t_accountingInfo: AccountingInfo\n\t_entityEventListener: EntityEventsListener\n\tprivate __paymentPaypalTest?: UsageTest\n\n\tconstructor(\n\t\tsubscriptionOptions: SelectedSubscriptionOptions,\n\t\tselectedCountry: Stream<Country | null>,\n\t\taccountingInfo: AccountingInfo,\n\t\tpayPalRequestUrl: LazyLoaded<string>,\n\t\tdefaultPaymentMethod: PaymentMethodType,\n\t) {\n\t\tthis._selectedCountry = selectedCountry\n\t\tthis._subscriptionOptions = subscriptionOptions\n\t\tthis.ccViewModel = new SimplifiedCreditCardViewModel(lang)\n\t\tthis._accountingInfo = accountingInfo\n\t\tthis._payPalAttrs = {\n\t\t\tpayPalRequestUrl,\n\t\t\taccountingInfo: this._accountingInfo,\n\t\t}\n\t\tthis.__paymentPaypalTest = locator.usageTestController.getTest(\"payment.paypal\")\n\n\t\tthis._entityEventListener = (updates) => {\n\t\t\treturn promiseMap(updates, (update) => {\n\t\t\t\tif (isUpdateForTypeRef(AccountingInfoTypeRef, update)) {\n\t\t\t\t\treturn locator.entityClient.load(AccountingInfoTypeRef, update.instanceId).then((accountingInfo) => {\n\t\t\t\t\t\tthis.__paymentPaypalTest?.getStage(2).complete()\n\t\t\t\t\t\tthis._accountingInfo = accountingInfo\n\t\t\t\t\t\tthis._payPalAttrs.accountingInfo = accountingInfo\n\t\t\t\t\t\tm.redraw()\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}).then(noOp)\n\t\t}\n\n\t\tthis._selectedPaymentMethod = defaultPaymentMethod\n\t}\n\n\toncreate() {\n\t\tlocator.eventController.addEntityListener(this._entityEventListener)\n\t}\n\n\tonremove() {\n\t\tlocator.eventController.removeEntityListener(this._entityEventListener)\n\t}\n\n\tview(): Children {\n\t\tswitch (this._selectedPaymentMethod) {\n\t\t\tcase PaymentMethodType.Invoice:\n\t\t\t\treturn m(\n\t\t\t\t\t\".flex-center\",\n\t\t\t\t\tm(\n\t\t\t\t\t\tMessageBox,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tmarginTop: px(16),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.isOnAccountAllowed()\n\t\t\t\t\t\t\t? lang.get(\"paymentMethodOnAccount_msg\") + \" \" + lang.get(\"paymentProcessingTime_msg\")\n\t\t\t\t\t\t\t: lang.get(\"paymentMethodNotAvailable_msg\"),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\tcase PaymentMethodType.AccountBalance:\n\t\t\t\treturn m(\n\t\t\t\t\t\".flex-center\",\n\t\t\t\t\tm(\n\t\t\t\t\t\tMessageBox,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tmarginTop: px(16),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlang.get(\"paymentMethodAccountBalance_msg\"),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\tcase PaymentMethodType.Paypal:\n\t\t\t\treturn m(PaypalInput, this._payPalAttrs)\n\t\t\tdefault:\n\t\t\t\treturn m(SimplifiedCreditCardInput, { viewModel: this.ccViewModel as SimplifiedCreditCardViewModel })\n\t\t}\n\t}\n\n\tisOnAccountAllowed(): boolean {\n\t\tconst country = this._selectedCountry()\n\n\t\tif (!country) {\n\t\t\treturn false\n\t\t} else if (this._accountingInfo.paymentMethod === PaymentMethodType.Invoice) {\n\t\t\treturn true\n\t\t} else if (this._subscriptionOptions.businessUse() && country.t !== CountryType.OTHER) {\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tisPaypalAssigned(): boolean {\n\t\treturn isPaypalAssigned(this._accountingInfo)\n\t}\n\n\tvalidatePaymentData(): TranslationKey | null {\n\t\tif (!this._selectedPaymentMethod) {\n\t\t\treturn \"invoicePaymentMethodInfo_msg\"\n\t\t} else if (this._selectedPaymentMethod === PaymentMethodType.Invoice) {\n\t\t\tif (!this.isOnAccountAllowed()) {\n\t\t\t\treturn \"paymentMethodNotAvailable_msg\"\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t} else if (this._selectedPaymentMethod === PaymentMethodType.Paypal) {\n\t\t\treturn isPaypalAssigned(this._accountingInfo) ? null : \"paymentDataPayPalLogin_msg\"\n\t\t} else if (this._selectedPaymentMethod === PaymentMethodType.CreditCard) {\n\t\t\treturn this.ccViewModel.validateCreditCardPaymentData()\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\tupdatePaymentMethod(value: PaymentMethodType, paymentData?: PaymentData) {\n\t\tthis._selectedPaymentMethod = value\n\n\t\tif (value === PaymentMethodType.CreditCard) {\n\t\t\tif (paymentData) {\n\t\t\t\tthis.ccViewModel.setCreditCardData(paymentData.creditCardData)\n\t\t\t}\n\n\t\t\tif (this.__paymentPaypalTest) {\n\t\t\t\tthis.__paymentPaypalTest.active = false\n\t\t\t}\n\t\t} else if (value === PaymentMethodType.Paypal) {\n\t\t\tthis._payPalAttrs.payPalRequestUrl.getAsync().then(() => m.redraw())\n\n\t\t\tif (this.__paymentPaypalTest) {\n\t\t\t\tthis.__paymentPaypalTest.active = true\n\t\t\t}\n\n\t\t\tthis.__paymentPaypalTest?.getStage(0).complete()\n\t\t}\n\n\t\tm.redraw()\n\t}\n\n\tgetPaymentData(): PaymentData {\n\t\treturn {\n\t\t\tpaymentMethod: this._selectedPaymentMethod,\n\t\t\tcreditCardData: this._selectedPaymentMethod === PaymentMethodType.CreditCard ? this.ccViewModel.getCreditCardData() : null,\n\t\t}\n\t}\n\n\tgetVisiblePaymentMethods(): Array<{\n\t\tname: string\n\t\tvalue: PaymentMethodType\n\t}> {\n\t\tconst availablePaymentMethods = [\n\t\t\t{\n\t\t\t\tname: lang.get(\"paymentMethodCreditCard_label\"),\n\t\t\t\tvalue: PaymentMethodType.CreditCard,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"PayPal\",\n\t\t\t\tvalue: PaymentMethodType.Paypal,\n\t\t\t},\n\t\t]\n\n\t\t// show bank transfer in case of business use, even if it is not available for the selected country\n\t\tif (this._subscriptionOptions.businessUse() || this._accountingInfo.paymentMethod === PaymentMethodType.Invoice) {\n\t\t\tavailablePaymentMethods.push({\n\t\t\t\tname: lang.get(\"paymentMethodOnAccount_label\"),\n\t\t\t\tvalue: PaymentMethodType.Invoice,\n\t\t\t})\n\t\t}\n\n\t\t// show account balance only if this is the current payment method\n\t\tif (this._accountingInfo.paymentMethod === PaymentMethodType.AccountBalance) {\n\t\t\tavailablePaymentMethods.push({\n\t\t\t\tname: lang.get(\"paymentMethodAccountBalance_label\"),\n\t\t\t\tvalue: PaymentMethodType.AccountBalance,\n\t\t\t})\n\t\t}\n\n\t\treturn availablePaymentMethods\n\t}\n}\n\ntype PaypalAttrs = {\n\tpayPalRequestUrl: LazyLoaded<string>\n\taccountingInfo: AccountingInfo\n}\n\nclass PaypalInput {\n\tprivate __paymentPaypalTest?: UsageTest\n\n\tconstructor() {\n\t\tthis.__paymentPaypalTest = locator.usageTestController.getTest(\"payment.paypal\")\n\t}\n\n\tview(vnode: Vnode<PaypalAttrs>): Children {\n\t\tlet attrs = vnode.attrs\n\t\treturn [\n\t\t\tm(\n\t\t\t\t\".flex-center\",\n\t\t\t\t{\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\"margin-top\": \"50px\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tm(BaseButton, {\n\t\t\t\t\tlabel: lang.makeTranslation(\"PayPal\", \"PayPal\"),\n\t\t\t\t\ticon: m(\".payment-logo.flex\", m.trust(PayPalLogo)),\n\t\t\t\t\tclass: \"border border-radius bg-white button-height plr\",\n\t\t\t\t\tonclick: () => {\n\t\t\t\t\t\tthis.__paymentPaypalTest?.getStage(1).complete()\n\t\t\t\t\t\tif (attrs.payPalRequestUrl.isLoaded()) {\n\t\t\t\t\t\t\twindow.open(attrs.payPalRequestUrl.getLoaded())\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshowProgressDialog(\"payPalRedirect_msg\", attrs.payPalRequestUrl.getAsync()).then((url) => window.open(url))\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t),\n\t\t\tm(\n\t\t\t\t\".small.pt.center\",\n\t\t\t\tisPaypalAssigned(attrs.accountingInfo)\n\t\t\t\t\t? lang.get(\"paymentDataPayPalFinished_msg\", {\n\t\t\t\t\t\t\t\"{accountAddress}\": attrs.accountingInfo.paymentMethodInfo ?? \"\",\n\t\t\t\t\t  })\n\t\t\t\t\t: lang.get(\"paymentDataPayPalLogin_msg\"),\n\t\t\t),\n\t\t]\n\t}\n}\n\nfunction isPaypalAssigned(accountingInfo: AccountingInfo): boolean {\n\treturn accountingInfo.paypalBillingAgreement != null\n}\n","import m, { Children, Vnode, VnodeDOM } from \"mithril\"\nimport { Dialog, DialogType } from \"../gui/base/Dialog\"\nimport { lang, type TranslationKey } from \"../misc/LanguageViewModel\"\nimport type { UpgradeSubscriptionData } from \"./UpgradeSubscriptionWizard\"\nimport { InvoiceDataInput, InvoiceDataInputLocation } from \"./InvoiceDataInput\"\nimport { PaymentMethodInput } from \"./PaymentMethodInput\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport {\n\tgetClientType,\n\tgetDefaultPaymentMethod,\n\tInvoiceData,\n\tKeys,\n\tPaymentData,\n\tPaymentDataResultType,\n\tPaymentMethodType,\n\tPaymentMethodTypeToName,\n} from \"../api/common/TutanotaConstants\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport type { AccountingInfo, Braintree3ds2Request } from \"../api/entities/sys/TypeRefs.js\"\nimport { AccountingInfoTypeRef, InvoiceInfoTypeRef } from \"../api/entities/sys/TypeRefs.js\"\nimport { assertNotNull, neverNull, noOp, promiseMap } from \"@tutao/tutanota-utils\"\nimport { getLazyLoadedPayPalUrl, getPreconditionFailedPaymentMsg, PaymentErrorCode, UpgradeType } from \"./SubscriptionUtils\"\nimport { Button, ButtonType } from \"../gui/base/Button.js\"\nimport type { SegmentControlItem } from \"../gui/base/SegmentControl\"\nimport { SegmentControl } from \"../gui/base/SegmentControl\"\nimport type { WizardPageAttrs, WizardPageN } from \"../gui/base/WizardDialog.js\"\nimport { emitWizardEvent, WizardEventType } from \"../gui/base/WizardDialog.js\"\nimport type { Country } from \"../api/common/CountryList\"\nimport { DefaultAnimationTime } from \"../gui/animation/Animations\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { Credentials } from \"../misc/credentials/Credentials\"\nimport { SessionType } from \"../api/common/SessionType.js\"\nimport { UsageTest } from \"@tutao/tutanota-usagetests\"\nimport { PaymentInterval } from \"./PriceUtils.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../api/common/utils/EntityUpdateUtils.js\"\nimport { EntityEventsListener } from \"../api/main/EventController.js\"\nimport { LoginButton } from \"../gui/base/buttons/LoginButton.js\"\nimport { client } from \"../misc/ClientDetector.js\"\n\n/**\n * Wizard page for editing invoice and payment data.\n */\nexport class InvoiceAndPaymentDataPage implements WizardPageN<UpgradeSubscriptionData> {\n\tprivate _paymentMethodInput: PaymentMethodInput | null = null\n\tprivate _invoiceDataInput: InvoiceDataInput | null = null\n\tprivate _availablePaymentMethods: Array<SegmentControlItem<PaymentMethodType>> | null = null\n\tprivate _selectedPaymentMethod: Stream<PaymentMethodType>\n\tprivate dom!: HTMLElement\n\tprivate __signupPaidTest?: UsageTest\n\tprivate __paymentPaypalTest?: UsageTest\n\n\tconstructor() {\n\t\tthis.__signupPaidTest = locator.usageTestController.getTest(\"signup.paid\")\n\t\tthis.__paymentPaypalTest = locator.usageTestController.getTest(\"payment.paypal\")\n\n\t\tthis._selectedPaymentMethod = stream()\n\n\t\tthis._selectedPaymentMethod.map((method) => neverNull(this._paymentMethodInput).updatePaymentMethod(method))\n\t}\n\n\tonremove(vnode: Vnode<WizardPageAttrs<UpgradeSubscriptionData>>) {\n\t\tconst data = vnode.attrs.data\n\n\t\t// TODO check if correct place to update these\n\t\tif (this._invoiceDataInput && this._paymentMethodInput) {\n\t\t\tdata.invoiceData = this._invoiceDataInput.getInvoiceData()\n\t\t\tdata.paymentData = this._paymentMethodInput.getPaymentData()\n\t\t}\n\t}\n\n\toncreate(vnode: VnodeDOM<WizardPageAttrs<UpgradeSubscriptionData>>) {\n\t\tthis.dom = vnode.dom as HTMLElement\n\t\tconst data = vnode.attrs.data\n\n\t\t// TODO check if correct place to update these\n\t\tif (this._invoiceDataInput && this._paymentMethodInput) {\n\t\t\tdata.invoiceData = this._invoiceDataInput.getInvoiceData()\n\t\t\tdata.paymentData = this._paymentMethodInput.getPaymentData()\n\t\t}\n\n\t\tlet login: Promise<Credentials | null> = Promise.resolve(null)\n\n\t\tif (!locator.logins.isUserLoggedIn()) {\n\t\t\tlogin = locator.logins\n\t\t\t\t.createSession(neverNull(data.newAccountData).mailAddress, neverNull(data.newAccountData).password, SessionType.Temporary)\n\t\t\t\t.then((newSessionData) => newSessionData.credentials)\n\t\t}\n\n\t\tlogin\n\t\t\t.then(() => {\n\t\t\t\tif (!data.accountingInfo || !data.customer) {\n\t\t\t\t\treturn locator.logins\n\t\t\t\t\t\t.getUserController()\n\t\t\t\t\t\t.loadCustomer()\n\t\t\t\t\t\t.then((customer) => {\n\t\t\t\t\t\t\tdata.customer = customer\n\t\t\t\t\t\t\treturn locator.logins.getUserController().loadCustomerInfo()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((customerInfo) =>\n\t\t\t\t\t\t\tlocator.entityClient.load(AccountingInfoTypeRef, customerInfo.accountingInfo).then((accountingInfo) => {\n\t\t\t\t\t\t\t\tdata.accountingInfo = accountingInfo\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => getDefaultPaymentMethod())\n\t\t\t.then((defaultPaymentMethod: PaymentMethodType) => {\n\t\t\t\tthis._invoiceDataInput = new InvoiceDataInput(data.options.businessUse(), data.invoiceData, InvoiceDataInputLocation.InWizard)\n\t\t\t\tlet payPalRequestUrl = getLazyLoadedPayPalUrl()\n\n\t\t\t\tif (locator.logins.isUserLoggedIn()) {\n\t\t\t\t\tlocator.logins.waitForFullLogin().then(() => payPalRequestUrl.getAsync())\n\t\t\t\t}\n\n\t\t\t\tthis._paymentMethodInput = new PaymentMethodInput(\n\t\t\t\t\tdata.options,\n\t\t\t\t\tthis._invoiceDataInput.selectedCountry,\n\t\t\t\t\tneverNull(data.accountingInfo),\n\t\t\t\t\tpayPalRequestUrl,\n\t\t\t\t\tdefaultPaymentMethod,\n\t\t\t\t)\n\t\t\t\tthis._availablePaymentMethods = this._paymentMethodInput.getVisiblePaymentMethods()\n\n\t\t\t\tthis._selectedPaymentMethod(data.paymentData.paymentMethod)\n\n\t\t\t\tthis._paymentMethodInput.updatePaymentMethod(data.paymentData.paymentMethod, data.paymentData)\n\t\t\t})\n\t}\n\n\tview(vnode: Vnode<WizardPageAttrs<UpgradeSubscriptionData>>): Children {\n\t\tconst a = vnode.attrs\n\n\t\tconst onNextClick = () => {\n\t\t\tconst invoiceDataInput = assertNotNull(this._invoiceDataInput)\n\t\t\tconst paymentMethodInput = assertNotNull(this._paymentMethodInput)\n\t\t\tlet error = invoiceDataInput.validateInvoiceData() || paymentMethodInput.validatePaymentData()\n\n\t\t\tif (error) {\n\t\t\t\treturn Dialog.message(error).then(() => null)\n\t\t\t} else {\n\t\t\t\ta.data.invoiceData = invoiceDataInput.getInvoiceData()\n\t\t\t\ta.data.paymentData = paymentMethodInput.getPaymentData()\n\t\t\t\treturn showProgressDialog(\n\t\t\t\t\t\"updatePaymentDataBusy_msg\",\n\t\t\t\t\tPromise.resolve()\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tlet customer = neverNull(a.data.customer)\n\n\t\t\t\t\t\t\tif (customer.businessUse !== a.data.options.businessUse()) {\n\t\t\t\t\t\t\t\tcustomer.businessUse = a.data.options.businessUse()\n\t\t\t\t\t\t\t\treturn locator.entityClient.update(customer)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(() =>\n\t\t\t\t\t\t\tupdatePaymentData(\n\t\t\t\t\t\t\t\ta.data.options.paymentInterval(),\n\t\t\t\t\t\t\t\ta.data.invoiceData,\n\t\t\t\t\t\t\t\ta.data.paymentData,\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\ta.data.upgradeType === UpgradeType.Signup,\n\t\t\t\t\t\t\t\tneverNull(a.data.price?.rawPrice),\n\t\t\t\t\t\t\t\tneverNull(a.data.accountingInfo),\n\t\t\t\t\t\t\t).then((success) => {\n\t\t\t\t\t\t\t\tif (success) {\n\t\t\t\t\t\t\t\t\t// Payment method confirmation (click on next), send selected payment method as an enum\n\t\t\t\t\t\t\t\t\tconst paymentMethodConfirmationStage = this.__signupPaidTest?.getStage(4)\n\t\t\t\t\t\t\t\t\tpaymentMethodConfirmationStage?.setMetric({\n\t\t\t\t\t\t\t\t\t\tname: \"paymentMethod\",\n\t\t\t\t\t\t\t\t\t\tvalue: PaymentMethodTypeToName[a.data.paymentData.paymentMethod],\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tpaymentMethodConfirmationStage?.complete()\n\t\t\t\t\t\t\t\t\temitWizardEvent(this.dom, WizardEventType.SHOW_NEXT_PAGE)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\treturn m(\n\t\t\t\".pt\",\n\t\t\tthis._availablePaymentMethods\n\t\t\t\t? [\n\t\t\t\t\t\tm(SegmentControl, {\n\t\t\t\t\t\t\titems: this._availablePaymentMethods,\n\t\t\t\t\t\t\tselectedValue: this._selectedPaymentMethod(),\n\t\t\t\t\t\t\tonValueSelected: this._selectedPaymentMethod,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tm(\".flex-space-around.flex-wrap.pt\", [\n\t\t\t\t\t\t\tm(\n\t\t\t\t\t\t\t\t\".flex-grow-shrink-half.plr-l\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\t\tminWidth: \"260px\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tm(neverNull(this._invoiceDataInput)),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tm(\n\t\t\t\t\t\t\t\t\".flex-grow-shrink-half.plr-l\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\t\tminWidth: \"260px\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tm(neverNull(this._paymentMethodInput)),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t]),\n\t\t\t\t\t\tm(\n\t\t\t\t\t\t\t\".flex-center.full-width.pt-l\",\n\t\t\t\t\t\t\tm(LoginButton, {\n\t\t\t\t\t\t\t\tlabel: \"next_action\",\n\t\t\t\t\t\t\t\tclass: \"small-login-button\",\n\t\t\t\t\t\t\t\tonclick: onNextClick,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t),\n\t\t\t\t  ]\n\t\t\t\t: null,\n\t\t)\n\t}\n}\n\nexport class InvoiceAndPaymentDataPageAttrs implements WizardPageAttrs<UpgradeSubscriptionData> {\n\tdata: UpgradeSubscriptionData\n\t_enabled: () => boolean = () => true\n\n\tconstructor(upgradeData: UpgradeSubscriptionData) {\n\t\tthis.data = upgradeData\n\t}\n\n\tnextAction(showErrorDialog: boolean): Promise<boolean> {\n\t\treturn Promise.resolve(true)\n\t}\n\n\theaderTitle(): TranslationKey {\n\t\treturn \"adminPayment_action\"\n\t}\n\n\tisSkipAvailable(): boolean {\n\t\treturn false\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this._enabled()\n\t}\n\n\t/**\n\t * Set the enabled function for isEnabled\n\t * @param enabled\n\t */\n\tsetEnabledFunction<T>(enabled: () => boolean) {\n\t\tthis._enabled = enabled\n\t}\n}\n\nexport async function updatePaymentData(\n\tpaymentInterval: PaymentInterval,\n\tinvoiceData: InvoiceData,\n\tpaymentData: PaymentData | null,\n\tconfirmedCountry: Country | null,\n\tisSignup: boolean,\n\tprice: string | null,\n\taccountingInfo: AccountingInfo,\n): Promise<boolean> {\n\tconst paymentResult = await locator.customerFacade.updatePaymentData(paymentInterval, invoiceData, paymentData, confirmedCountry)\n\tconst statusCode = paymentResult.result\n\n\tif (statusCode === PaymentDataResultType.OK) {\n\t\t// show dialog\n\t\tlet braintree3ds = paymentResult.braintree3dsRequest\n\t\tif (braintree3ds) {\n\t\t\treturn verifyCreditCard(accountingInfo, braintree3ds, price!)\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t} else if (statusCode === PaymentDataResultType.COUNTRY_MISMATCH) {\n\t\tconst countryName = invoiceData.country ? invoiceData.country.n : \"\"\n\t\tconst confirmMessage = lang.getTranslation(\"confirmCountry_msg\", {\n\t\t\t\"{1}\": countryName,\n\t\t})\n\t\tconst confirmed = await Dialog.confirm(confirmMessage)\n\t\tif (confirmed) {\n\t\t\treturn updatePaymentData(paymentInterval, invoiceData, paymentData, invoiceData.country, isSignup, price, accountingInfo) // add confirmed invoice country\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t} else if (statusCode === PaymentDataResultType.INVALID_VATID_NUMBER) {\n\t\tawait Dialog.message(\n\t\t\tlang.makeTranslation(\"invalidVatIdNumber_msg\", lang.get(\"invalidVatIdNumber_msg\") + (isSignup ? \" \" + lang.get(\"accountWasStillCreated_msg\") : \"\")),\n\t\t)\n\t} else if (statusCode === PaymentDataResultType.CREDIT_CARD_DECLINED) {\n\t\tawait Dialog.message(\n\t\t\tlang.makeTranslation(\"creditCardDeclined_msg\", lang.get(\"creditCardDeclined_msg\") + (isSignup ? \" \" + lang.get(\"accountWasStillCreated_msg\") : \"\")),\n\t\t)\n\t} else if (statusCode === PaymentDataResultType.CREDIT_CARD_CVV_INVALID) {\n\t\tawait Dialog.message(\"creditCardCVVInvalid_msg\")\n\t} else if (statusCode === PaymentDataResultType.PAYMENT_PROVIDER_NOT_AVAILABLE) {\n\t\tawait Dialog.message(\n\t\t\tlang.makeTranslation(\n\t\t\t\t\"paymentProviderNotAvailableError_msg\",\n\t\t\t\tlang.get(\"paymentProviderNotAvailableError_msg\") + (isSignup ? \" \" + lang.get(\"accountWasStillCreated_msg\") : \"\"),\n\t\t\t),\n\t\t)\n\t} else if (statusCode === PaymentDataResultType.OTHER_PAYMENT_ACCOUNT_REJECTED) {\n\t\tawait Dialog.message(\n\t\t\tlang.makeTranslation(\n\t\t\t\t\"paymentAccountRejected_msg\",\n\t\t\t\tlang.get(\"paymentAccountRejected_msg\") + (isSignup ? \" \" + lang.get(\"accountWasStillCreated_msg\") : \"\"),\n\t\t\t),\n\t\t)\n\t} else if (statusCode === PaymentDataResultType.CREDIT_CARD_DATE_INVALID) {\n\t\tawait Dialog.message(\"creditCardExprationDateInvalid_msg\")\n\t} else if (statusCode === PaymentDataResultType.CREDIT_CARD_NUMBER_INVALID) {\n\t\tawait Dialog.message(\n\t\t\tlang.makeTranslation(\n\t\t\t\t\"creditCardNumberInvalid_msg\",\n\t\t\t\tlang.get(\"creditCardNumberInvalid_msg\") + (isSignup ? \" \" + lang.get(\"accountWasStillCreated_msg\") : \"\"),\n\t\t\t),\n\t\t)\n\t} else if (statusCode === PaymentDataResultType.COULD_NOT_VERIFY_VATID) {\n\t\tawait Dialog.message(\n\t\t\tlang.makeTranslation(\n\t\t\t\t\"invalidVatIdValidationFailed_msg\",\n\t\t\t\tlang.get(\"invalidVatIdValidationFailed_msg\") + (isSignup ? \" \" + lang.get(\"accountWasStillCreated_msg\") : \"\"),\n\t\t\t),\n\t\t)\n\t} else if (statusCode === PaymentDataResultType.CREDIT_CARD_VERIFICATION_LIMIT_REACHED) {\n\t\tawait Dialog.message(\n\t\t\tlang.makeTranslation(\n\t\t\t\t\"creditCardVerificationLimitReached_msg\",\n\t\t\t\tlang.get(\"creditCardVerificationLimitReached_msg\") + (isSignup ? \" \" + lang.get(\"accountWasStillCreated_msg\") : \"\"),\n\t\t\t),\n\t\t)\n\t} else {\n\t\tawait Dialog.message(\n\t\t\tlang.makeTranslation(\n\t\t\t\t\"otherPaymentProviderError_msg\",\n\t\t\t\tlang.get(\"otherPaymentProviderError_msg\") + (isSignup ? \" \" + lang.get(\"accountWasStillCreated_msg\") : \"\"),\n\t\t\t),\n\t\t)\n\t}\n\n\treturn false\n}\n\n/**\n * Displays a progress dialog that allows to cancel the verification and opens a new window to do the actual verification with the bank.\n */\nfunction verifyCreditCard(accountingInfo: AccountingInfo, braintree3ds: Braintree3ds2Request, price: string): Promise<boolean> {\n\treturn locator.entityClient.load(InvoiceInfoTypeRef, neverNull(accountingInfo.invoiceInfo)).then((invoiceInfo) => {\n\t\tlet invoiceInfoWrapper = {\n\t\t\tinvoiceInfo,\n\t\t}\n\t\tlet resolve: (arg0: boolean) => void\n\t\tlet progressDialogPromise: Promise<boolean> = new Promise((res) => (resolve = res))\n\t\tlet progressDialog: Dialog\n\n\t\tconst closeAction = () => {\n\t\t\t// user did not complete the 3ds dialog and PaymentDataService.POST was not invoked\n\t\t\tprogressDialog.close()\n\t\t\tsetTimeout(() => resolve(false), DefaultAnimationTime)\n\t\t}\n\n\t\tprogressDialog = new Dialog(DialogType.Alert, {\n\t\t\tview: () => [\n\t\t\t\tm(\".dialog-contentButtonsBottom.text-break.selectable\", lang.get(\"creditCardPendingVerification_msg\")),\n\t\t\t\tm(\n\t\t\t\t\t\".flex-center.dialog-buttons\",\n\t\t\t\t\tm(Button, {\n\t\t\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\t\t\tclick: closeAction,\n\t\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t],\n\t\t})\n\t\t\t.setCloseHandler(closeAction)\n\t\t\t.addShortcut({\n\t\t\t\tkey: Keys.RETURN,\n\t\t\t\tshift: false,\n\t\t\t\texec: closeAction,\n\t\t\t\thelp: \"close_alt\",\n\t\t\t})\n\t\t\t.addShortcut({\n\t\t\t\tkey: Keys.ESC,\n\t\t\t\tshift: false,\n\t\t\t\texec: closeAction,\n\t\t\t\thelp: \"close_alt\",\n\t\t\t})\n\t\tlet entityEventListener: EntityEventsListener = (updates: ReadonlyArray<EntityUpdateData>, eventOwnerGroupId: Id) => {\n\t\t\treturn promiseMap(updates, (update) => {\n\t\t\t\tif (isUpdateForTypeRef(InvoiceInfoTypeRef, update)) {\n\t\t\t\t\treturn locator.entityClient.load(InvoiceInfoTypeRef, update.instanceId).then((invoiceInfo) => {\n\t\t\t\t\t\tinvoiceInfoWrapper.invoiceInfo = invoiceInfo\n\t\t\t\t\t\tif (!invoiceInfo.paymentErrorInfo) {\n\t\t\t\t\t\t\t// user successfully verified the card\n\t\t\t\t\t\t\tprogressDialog.close()\n\t\t\t\t\t\t\tresolve(true)\n\t\t\t\t\t\t} else if (invoiceInfo.paymentErrorInfo && invoiceInfo.paymentErrorInfo.errorCode === \"card.3ds2_pending\") {\n\t\t\t\t\t\t\t// keep waiting. this error code is set before starting the 3DS2 verification and we just received the event very late\n\t\t\t\t\t\t} else if (invoiceInfo.paymentErrorInfo && invoiceInfo.paymentErrorInfo.errorCode !== null) {\n\t\t\t\t\t\t\t// verification error during 3ds verification\n\t\t\t\t\t\t\tlet error = \"3dsFailedOther\"\n\n\t\t\t\t\t\t\tswitch (invoiceInfo.paymentErrorInfo.errorCode as PaymentErrorCode) {\n\t\t\t\t\t\t\t\tcase \"card.cvv_invalid\":\n\t\t\t\t\t\t\t\t\terror = \"cvvInvalid\"\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\tcase \"card.number_invalid\":\n\t\t\t\t\t\t\t\t\terror = \"ccNumberInvalid\"\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase \"card.date_invalid\":\n\t\t\t\t\t\t\t\t\terror = \"expirationDate\"\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\tcase \"card.insufficient_funds\":\n\t\t\t\t\t\t\t\t\terror = \"insufficientFunds\"\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\tcase \"card.expired_card\":\n\t\t\t\t\t\t\t\t\terror = \"cardExpired\"\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\tcase \"card.3ds2_failed\":\n\t\t\t\t\t\t\t\t\terror = \"3dsFailed\"\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tDialog.message(getPreconditionFailedPaymentMsg(invoiceInfo.paymentErrorInfo.errorCode))\n\t\t\t\t\t\t\tresolve(false)\n\t\t\t\t\t\t\tprogressDialog.close()\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tm.redraw()\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}).then(noOp)\n\t\t}\n\n\t\tlocator.eventController.addEntityListener(entityEventListener)\n\t\tconst app = client.isCalendarApp() ? \"calendar\" : \"mail\"\n\t\tlet params = `clientToken=${encodeURIComponent(braintree3ds.clientToken)}&nonce=${encodeURIComponent(braintree3ds.nonce)}&bin=${encodeURIComponent(\n\t\t\tbraintree3ds.bin,\n\t\t)}&price=${encodeURIComponent(price)}&message=${encodeURIComponent(lang.get(\"creditCardVerification_msg\"))}&clientType=${getClientType()}&app=${app}`\n\t\tDialog.message(\"creditCardVerificationNeededPopup_msg\").then(() => {\n\t\t\tconst paymentUrlString = locator.domainConfigProvider().getCurrentDomainConfig().paymentUrl\n\t\t\tconst paymentUrl = new URL(paymentUrlString)\n\t\t\tpaymentUrl.hash += params\n\t\t\twindow.open(paymentUrl)\n\t\t\tprogressDialog.show()\n\t\t})\n\t\treturn progressDialogPromise.finally(() => locator.eventController.removeEntityListener(entityEventListener))\n\t})\n}\n","import m from \"mithril\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport { InvoiceDataInput, InvoiceDataInputLocation } from \"./InvoiceDataInput\"\nimport { updatePaymentData } from \"./InvoiceAndPaymentDataPage\"\nimport { BadRequestError } from \"../api/common/error/RestError\"\nimport type { AccountingInfo, Customer } from \"../api/entities/sys/TypeRefs.js\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport type { InvoiceData } from \"../api/common/TutanotaConstants\"\nimport { asPaymentInterval } from \"./PriceUtils.js\"\nimport { defer, ofClass } from \"@tutao/tutanota-utils\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\n\n/**\n * Shows a dialog to update the invoice data for business use. Switches the account to business use before actually saving the new invoice data\n * because only when the account is set to business use some payment data like vat id number may be saved.\n * @return true, if the business invoiceData was written successfully\n */\nexport function showSwitchToBusinessInvoiceDataDialog(customer: Customer, invoiceData: InvoiceData, accountingInfo: AccountingInfo): Promise<boolean> {\n\tif (customer.businessUse) {\n\t\tthrow new ProgrammingError(\"cannot show invoice data dialog if the customer is already a business customer\")\n\t}\n\tconst invoiceDataInput = new InvoiceDataInput(true, invoiceData, InvoiceDataInputLocation.InWizard)\n\n\tconst result = defer<boolean>()\n\tconst confirmAction = async () => {\n\t\tlet error = invoiceDataInput.validateInvoiceData()\n\n\t\tif (error) {\n\t\t\tDialog.message(error)\n\t\t} else {\n\t\t\tshowProgressDialog(\"pleaseWait_msg\", result.promise)\n\n\t\t\tconst success = await updatePaymentData(\n\t\t\t\tasPaymentInterval(accountingInfo.paymentInterval),\n\t\t\t\tinvoiceDataInput.getInvoiceData(),\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tfalse,\n\t\t\t\t\"0\",\n\t\t\t\taccountingInfo,\n\t\t\t)\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(BadRequestError, () => {\n\t\t\t\t\t\tDialog.message(\"paymentMethodNotAvailable_msg\")\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tresult.reject(e)\n\t\t\t\t})\n\t\t\tif (success) {\n\t\t\t\tdialog.close()\n\t\t\t\tresult.resolve(true)\n\t\t\t} else {\n\t\t\t\tresult.resolve(false)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst cancelAction = () => result.resolve(false)\n\n\tconst dialog = Dialog.showActionDialog({\n\t\ttitle: \"invoiceData_msg\",\n\t\tchild: {\n\t\t\tview: () =>\n\t\t\t\tm(\"#changeInvoiceDataDialog\", [\n\t\t\t\t\t// infoMessageId ? m(\".pt\", lang.get(infoMessageId)) : null,\n\t\t\t\t\tm(invoiceDataInput),\n\t\t\t\t]),\n\t\t},\n\t\tokAction: confirmAction,\n\t\tcancelAction: cancelAction,\n\t\tallowCancel: true,\n\t\tokActionTextId: \"save_action\",\n\t})\n\n\treturn result.promise\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport { styles } from \"../gui/styles.js\"\nimport { LoginButton } from \"../gui/base/buttons/LoginButton.js\"\nimport { lang, TranslationKey } from \"../misc/LanguageViewModel.js\"\n\nexport interface SetupLeavingUserSurveyPageAttrs {\n\tcloseAction: () => void\n\tnextButtonLabel: TranslationKey\n\tnextButtonEnabled: boolean\n\timage: string\n\timageStyle?: Record<string, any>\n\tmainMessage: TranslationKey\n\tsecondaryMessage: TranslationKey\n}\n\nexport class SetupLeavingUserSurveyPage implements Component<SetupLeavingUserSurveyPageAttrs> {\n\tview(vnode: Vnode<SetupLeavingUserSurveyPageAttrs>): Children {\n\t\treturn m(\"#leaving-user-survey-dialog.pt.flex-center\", [\n\t\t\tm(\n\t\t\t\t\".flex.flex-column.max-width-m.pt.pb.plr-l\",\n\t\t\t\t{\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tminHeight: styles.isDesktopLayout() ? \"850px\" : \"\",\n\t\t\t\t\t\tminWidth: styles.isDesktopLayout() ? \"450px\" : \"360px\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t[\n\t\t\t\t\tm(\n\t\t\t\t\t\t\".mb\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\theight: styles.isDesktopLayout() ? \"360px\" : \"\",\n\t\t\t\t\t\t\t\t...vnode.attrs.imageStyle,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tm(\"img.pb.block.full-width.height-100p\", {\n\t\t\t\t\t\t\tsrc: `${window.tutao.appState.prefixWithoutFile}/images/leaving-wizard/${vnode.attrs.image}.png`,\n\t\t\t\t\t\t\talt: \"\",\n\t\t\t\t\t\t\trel: \"noreferrer\",\n\t\t\t\t\t\t\tloading: \"lazy\",\n\t\t\t\t\t\t\tdecoding: \"async\",\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t\tm(\"h3.center.b\", lang.get(vnode.attrs.mainMessage)),\n\t\t\t\t\tm(\n\t\t\t\t\t\t\"p.center\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\theight: styles.isDesktopLayout() ? \"45px\" : \"77.5px\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlang.get(vnode.attrs.secondaryMessage),\n\t\t\t\t\t),\n\t\t\t\t\tvnode.children,\n\t\t\t\t\tm(\n\t\t\t\t\t\t\".full-width\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tmargin: styles.isDesktopLayout() ? \"auto 0 0 0\" : \"16px 0 0 0\", // positions the button at the very bottom of the flex wrapper box for consistency\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tm(LoginButton, {\n\t\t\t\t\t\t\tlabel: vnode.attrs.nextButtonLabel,\n\t\t\t\t\t\t\tonclick: () => vnode.attrs.closeAction(),\n\t\t\t\t\t\t\tclass: vnode.attrs.nextButtonEnabled ? \"no-hover button-bg\" : \"\",\n\t\t\t\t\t\t\tdisabled: vnode.attrs.nextButtonEnabled,\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t),\n\t\t])\n\t}\n}\n","import { emitWizardEvent, WizardEventType, WizardPageAttrs, WizardPageN } from \"../gui/base/WizardDialog.js\"\nimport { LeavingUserSurveyData } from \"./LeavingUserSurveyWizard.js\"\nimport m, { Vnode, VnodeDOM } from \"mithril\"\nimport { DropDownSelector, type DropDownSelectorAttrs } from \"../gui/base/DropDownSelector.js\"\nimport { lang, type TranslationKey } from \"../misc/LanguageViewModel.js\"\nimport { theme } from \"../gui/theme.js\"\nimport { SetupLeavingUserSurveyPage } from \"./SetupLeavingUserSurveyPage.js\"\n\nexport class LeavingUserSurveyCategoryPage implements WizardPageN<LeavingUserSurveyData> {\n\tprivate _dom: HTMLElement | null = null\n\n\toncreate(vnode: VnodeDOM<WizardPageAttrs<LeavingUserSurveyData>>) {\n\t\tthis._dom = vnode.dom as HTMLElement\n\t}\n\n\tview(vnode: Vnode<WizardPageAttrs<LeavingUserSurveyData>>) {\n\t\treturn m(\n\t\t\tSetupLeavingUserSurveyPage,\n\t\t\t{\n\t\t\t\tcloseAction: () => this.showNextPage(),\n\t\t\t\tnextButtonLabel: \"next_action\",\n\t\t\t\tnextButtonEnabled: !vnode.attrs.data.category,\n\t\t\t\timage: \"main\",\n\t\t\t\tmainMessage: \"surveyMainMessageDelete_label\",\n\t\t\t\tsecondaryMessage: vnode.attrs.data.showDowngradeMessage ? \"surveySecondaryMessageDowngrade_label\" : \"surveySecondaryMessageDelete_label\",\n\t\t\t},\n\t\t\t[\n\t\t\t\tm(DropDownSelector, {\n\t\t\t\t\tstyle: { border: `2px solid ${theme.content_border}`, borderRadius: \"6px\", padding: \"4px 8px\" },\n\t\t\t\t\tdoShowBorder: false,\n\t\t\t\t\tlabel: \"surveyUnhappy_label\",\n\t\t\t\t\titems: this.getCategoryDropdownItems(vnode.attrs.data.showPriceCategory),\n\t\t\t\t\tselectedValue: vnode.attrs.data.category,\n\t\t\t\t\tselectionChangedHandler: (category) => {\n\t\t\t\t\t\tvnode.attrs.data.category = category\n\t\t\t\t\t},\n\t\t\t\t\tdropdownWidth: 350,\n\t\t\t\t} satisfies DropDownSelectorAttrs<NumberString | null>),\n\t\t\t\t// this currently \"mocks\" the helplabel of the dropdown. We have to take another look once we decide on applying the dropdown styling to the entire app.\n\t\t\t\tm(\".mlr-s.mt-xs\", m(\"small\", lang.get(\"cancellationConfirmation_msg\"))),\n\t\t\t],\n\t\t)\n\t}\n\n\tprivate getCategoryDropdownItems(showPriceCategory: boolean) {\n\t\tconst items = [\n\t\t\t{\n\t\t\t\tname: lang.get(\"experienceSamplingAnswer_label\"),\n\t\t\t\tvalue: null,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: lang.get(\"surveyPrice_label\"),\n\t\t\t\tvalue: \"0\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: lang.get(\"surveyAccountProblems_label\"),\n\t\t\t\tvalue: \"1\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: lang.get(\"surveyMissingFeature_label\"),\n\t\t\t\tvalue: \"2\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: lang.get(\"surveyFeatureDesignProblems_label\"),\n\t\t\t\tvalue: \"3\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: lang.get(\"surveyOtherReason_label\"),\n\t\t\t\tvalue: \"4\",\n\t\t\t},\n\t\t]\n\t\tif (!showPriceCategory) items.splice(1, 1) // remove price category\n\t\treturn items\n\t}\n\n\tshowNextPage(): void {\n\t\tif (this._dom) {\n\t\t\temitWizardEvent(this._dom, WizardEventType.SHOW_NEXT_PAGE)\n\t\t}\n\t}\n}\n\nexport class LeavingUserSurveyPageAttrs implements WizardPageAttrs<LeavingUserSurveyData> {\n\tdata: LeavingUserSurveyData\n\n\tconstructor(leavingUserSurveyData: LeavingUserSurveyData) {\n\t\tthis.data = leavingUserSurveyData\n\t}\n\n\theaderTitle(): TranslationKey {\n\t\treturn \"survey_label\"\n\t}\n\n\tnextAction(showErrorDialog: boolean): Promise<boolean> {\n\t\treturn Promise.resolve(this.data.category != null)\n\t}\n\n\tisSkipAvailable(): boolean {\n\t\treturn false\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn true\n\t}\n}\n","import { TranslationKey } from \"../misc/LanguageViewModel.js\"\n\n/**\n * File containing all types, enums, maps and helper functions for the 'leaving user survey' wizard.\n */\n\n// Version number for the correct questions/options. Increment this when changing the dropdown options below!\nexport const SURVEY_VERSION_NUMBER: string = \"0\"\n\nexport enum CategoryType {\n\tPrice = \"0\",\n\tAccount = \"1\",\n\tFeature = \"2\",\n\tProblem = \"3\",\n\tOther = \"4\",\n}\n\n/**\n * Casts a NumberString to the CategoryType Enum.\n */\nexport function getCategoryType(category: NumberString) {\n\treturn <CategoryType>category\n}\n\nexport type CategoryImageInfo = {\n\timage: string\n\ttranslationKey: TranslationKey\n}\n\n/**\n * Map from CategoryType to an object containing the image and info text that will be displayed on the second page of the wizard.\n */\nexport const CATEGORY_TO_IMAGE: Map<CategoryType, CategoryImageInfo> = new Map([\n\t[CategoryType.Price, { image: \"price\", translationKey: \"surveyPrice_label\" }],\n\t[CategoryType.Account, { image: \"account\", translationKey: \"surveyAccountProblems_label\" }],\n\t[CategoryType.Feature, { image: \"feature\", translationKey: \"surveyMissingFeature_label\" }],\n\t[CategoryType.Problem, { image: \"problem\", translationKey: \"surveyFeatureDesignProblems_label\" }],\n\t[CategoryType.Other, { image: \"other\", translationKey: \"surveyOtherReason_label\" }],\n])\n\nexport type Reason = {\n\tvalue: NumberString\n\ttranslationKey: TranslationKey\n}\n\n/**\n * Map from CategoryType to an object containing DropdownItems for the dropdown on the second page of the wizard.\n */\nexport const CATEGORY_TO_REASON: Map<CategoryType, Reason[]> = new Map([\n\t[\n\t\tCategoryType.Price,\n\t\t[\n\t\t\t{ value: \"0\", translationKey: \"surveyPriceReasonPaidFeatures_label\" },\n\t\t\t{ value: \"1\", translationKey: \"surveyPriceReasonTooExpensive_label\" },\n\t\t\t{ value: \"2\", translationKey: \"surveyPriceReasonPricesTooHigh_label\" },\n\t\t\t{ value: \"3\", translationKey: \"surveyPriceReasonStudentDiscount_label\" },\n\t\t\t{ value: \"4\", translationKey: \"surveyPriceReasonFamilyDiscount_label\" },\n\t\t\t{ value: \"5\", translationKey: \"surveyPriceReasonAutoRenewal_label\" },\n\t\t\t{ value: \"6\", translationKey: \"surveyPriceReasonPaymentNotWorking_label\" },\n\t\t\t{ value: \"7\", translationKey: \"surveyOtherReasonProvideDetails_label\" },\n\t\t],\n\t],\n\t[\n\t\tCategoryType.Account,\n\t\t[\n\t\t\t{ value: \"8\", translationKey: \"surveyAccountReasonAccountApproval_label\" },\n\t\t\t{ value: \"9\", translationKey: \"surveyAccountReasonSupportNoHelp_label\" },\n\t\t\t{ value: \"10\", translationKey: \"surveyAccountReasonForgotPassword_label\" },\n\t\t\t{ value: \"11\", translationKey: \"surveyAccountReasonForgotRecoveryCode_label\" },\n\t\t\t{ value: \"12\", translationKey: \"surveyAccountReasonCantAddUsers_label\" },\n\t\t\t{ value: \"13\", translationKey: \"surveyAccountReasonServicesBlocked_label\" },\n\t\t\t{ value: \"14\", translationKey: \"surveyAccountReasonAccountBlocked_label\" },\n\t\t\t{ value: \"15\", translationKey: \"surveyOtherReasonProvideDetails_label\" },\n\t\t],\n\t],\n\t[\n\t\tCategoryType.Feature,\n\t\t[\n\t\t\t{ value: \"16\", translationKey: \"surveyFeatureReasonNoIMAP_label\" },\n\t\t\t{ value: \"17\", translationKey: \"surveyFeatureReasonNoEmailImport_label\" },\n\t\t\t{ value: \"18\", translationKey: \"surveyFeatureReasonNoAdjustableColumns_label\" },\n\t\t\t{ value: \"19\", translationKey: \"surveyFeatureReasonNoEmailLabels_label\" },\n\t\t\t{ value: \"20\", translationKey: \"surveyFeatureReasonMoreFormattingOptions_label\" },\n\t\t\t{ value: \"21\", translationKey: \"surveyFeatureReasonAutoForward_label\" },\n\t\t\t{ value: \"22\", translationKey: \"surveyFeatureReasonCloudStorage_label\" },\n\t\t\t{ value: \"23\", translationKey: \"surveyFeatureReasonEmailTranslations_label\" },\n\t\t\t{ value: \"24\", translationKey: \"surveyFeatureReasonOther_label\" },\n\t\t],\n\t],\n\t[\n\t\tCategoryType.Problem,\n\t\t[\n\t\t\t{ value: \"25\", translationKey: \"surveyProblemReasonSearch_label\" },\n\t\t\t{ value: \"26\", translationKey: \"surveyProblemReasonCalendar_label\" },\n\t\t\t{ value: \"27\", translationKey: \"surveyProblemReasonThemeCustomization_label\" },\n\t\t\t{ value: \"28\", translationKey: \"surveyProblemReasonSpamProtection_label\" },\n\t\t\t{ value: \"29\", translationKey: \"surveyProblemReasonAppAppearance_label\" },\n\t\t\t{ value: \"30\", translationKey: \"surveyProblemReasonTooHardToUse_label\" },\n\t\t],\n\t],\n\t[\n\t\tCategoryType.Other,\n\t\t[\n\t\t\t{ value: \"31\", translationKey: \"surveyOtherReasonWrongEmailAddress_label\" },\n\t\t\t{ value: \"32\", translationKey: \"surveyOtherReasonMergeAccounts_label\" },\n\t\t\t{ value: \"33\", translationKey: \"surveyOtherReasonProvideDetails_label\" },\n\t\t],\n\t],\n])\n","import { emitWizardEvent, WizardEventType, WizardPageAttrs, WizardPageN } from \"../gui/base/WizardDialog.js\"\nimport { LeavingUserSurveyData } from \"./LeavingUserSurveyWizard.js\"\nimport m, { Vnode, VnodeDOM } from \"mithril\"\nimport { DropDownSelector, type DropDownSelectorAttrs, SelectorItem, SelectorItemList } from \"../gui/base/DropDownSelector.js\"\nimport { HtmlEditor, HtmlEditorMode } from \"../gui/editor/HtmlEditor.js\"\nimport { theme } from \"../gui/theme.js\"\nimport { CATEGORY_TO_IMAGE, CATEGORY_TO_REASON, getCategoryType } from \"./LeavingUserSurveyConstants.js\"\nimport { lang } from \"../misc/LanguageViewModel.js\"\nimport { styles } from \"../gui/styles.js\"\nimport { SetupLeavingUserSurveyPage } from \"./SetupLeavingUserSurveyPage.js\"\n\nexport class LeavingUserSurveyReasonPage implements WizardPageN<LeavingUserSurveyData> {\n\tprivate _dom: HTMLElement | null = null\n\tprivate dropdownItemsFromCategory: SelectorItemList<NumberString | null> = []\n\tprivate readonly customReasonEditor: HtmlEditor\n\n\tconstructor() {\n\t\tlet NUMBER_OF_EDITOR_LINES = styles.isDesktopLayout() ? 5 : 1\n\t\tthis.customReasonEditor = new HtmlEditor()\n\t\t\t.setStaticNumberOfLines(NUMBER_OF_EDITOR_LINES)\n\t\t\t.showBorders()\n\t\t\t.setPlaceholderId(\"enterDetails_msg\")\n\t\t\t.setMode(HtmlEditorMode.HTML)\n\t\t\t.setHtmlMonospace(false)\n\t\t\t.setValue(\"\")\n\t}\n\n\toncreate(vnode: VnodeDOM<WizardPageAttrs<LeavingUserSurveyData>>) {\n\t\tthis._dom = vnode.dom as HTMLElement\n\t}\n\n\toninit(vnode: Vnode<WizardPageAttrs<LeavingUserSurveyData>>) {\n\t\tthis.dropdownItemsFromCategory = this.getDropdownItemsFromCategory(vnode.attrs.data.category!)\n\t\tvnode.attrs.data.reason = null\n\t}\n\n\tview(vnode: Vnode<WizardPageAttrs<LeavingUserSurveyData>>) {\n\t\treturn m(\n\t\t\tSetupLeavingUserSurveyPage,\n\t\t\t{\n\t\t\t\tcloseAction: () => {\n\t\t\t\t\tvnode.attrs.data.details = this.customReasonEditor.getValue()\n\t\t\t\t\tvnode.attrs.data.submitted = true\n\t\t\t\t\tthis.closeDialog()\n\t\t\t\t},\n\t\t\t\tnextButtonLabel: \"submit_action\",\n\t\t\t\tnextButtonEnabled: !vnode.attrs.data.reason,\n\t\t\t\timage: CATEGORY_TO_IMAGE.get(getCategoryType(vnode.attrs.data.category!))?.image!,\n\t\t\t\timageStyle: {\n\t\t\t\t\tpaddingBottom: \"60px\",\n\t\t\t\t},\n\t\t\t\tmainMessage: CATEGORY_TO_IMAGE.get(getCategoryType(vnode.attrs.data.category!))?.translationKey!,\n\t\t\t\tsecondaryMessage: \"surveyReasonSecondaryMessage_label\",\n\t\t\t},\n\t\t\t[\n\t\t\t\tm(DropDownSelector, {\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tborder: `2px solid ${theme.content_border}`,\n\t\t\t\t\t\tborderRadius: \"6px\",\n\t\t\t\t\t\tpadding: \"4px 8px\",\n\t\t\t\t\t},\n\t\t\t\t\tdoShowBorder: false,\n\t\t\t\t\tlabel: \"surveyChooseReason_label\",\n\t\t\t\t\titems: this.dropdownItemsFromCategory, // will never be null, as it has to be set to access this page\n\t\t\t\t\tselectedValue: vnode.attrs.data.reason,\n\t\t\t\t\tselectionChangedHandler: (reason) => {\n\t\t\t\t\t\tvnode.attrs.data.reason = reason\n\t\t\t\t\t},\n\t\t\t\t\tdropdownWidth: 350,\n\t\t\t\t} satisfies DropDownSelectorAttrs<NumberString | null>),\n\t\t\t\tm(\".pt\", m(this.customReasonEditor)),\n\t\t\t],\n\t\t)\n\t}\n\n\tcloseDialog(): void {\n\t\tif (this._dom) {\n\t\t\temitWizardEvent(this._dom, WizardEventType.CLOSE_DIALOG)\n\t\t}\n\t}\n\n\tgetDropdownItemsFromCategory(category: NumberString): SelectorItemList<NumberString | null> {\n\t\tconst categoryType = getCategoryType(category)\n\t\tconst reasonList = CATEGORY_TO_REASON.get(categoryType)\n\t\tconst unselected: SelectorItem<string | null>[] = [{ name: lang.get(\"experienceSamplingAnswer_label\"), value: null }]\n\n\t\tif (!reasonList) return []\n\t\treturn unselected.concat(reasonList.map((r) => ({ name: lang.get(r.translationKey), value: r.value })))\n\t}\n}\n","import { createWizardDialog, wizardPageWrapper } from \"../gui/base/WizardDialog.js\"\nimport { LeavingUserSurveyCategoryPage, LeavingUserSurveyPageAttrs } from \"./LeavingUserSurveyCategoryPage.js\"\nimport { defer } from \"@tutao/tutanota-utils\"\nimport { LeavingUserSurveyReasonPage } from \"./LeavingUserSurveyReasonPage.js\"\nimport { DialogType } from \"../gui/base/Dialog.js\"\n\nexport type LeavingUserSurveyData = {\n\tcategory: NumberString | null\n\treason: NumberString | null\n\tdetails: string | null\n\tsubmitted: boolean // we need a separate submit flag, because the user might go back from page 2 and cancel the dialog, in which case the values will be set\n\tshowPriceCategory: boolean // whether the dropdown should include the 'price' category\n\tshowDowngradeMessage: boolean // whether the message displayed below the image should address a downgrading or deleting user\n}\n\nexport async function showLeavingUserSurveyWizard(showPriceCategory: boolean, showDowngradeMessage: boolean): Promise<LeavingUserSurveyData> {\n\tlet category: NumberString | null = null\n\tlet reason: string | null = null\n\tlet details: string | null = null\n\tlet submitted: boolean = false\n\n\tconst leavingUserSurveyData: LeavingUserSurveyData = {\n\t\tcategory,\n\t\treason,\n\t\tdetails,\n\t\tsubmitted,\n\t\tshowPriceCategory,\n\t\tshowDowngradeMessage,\n\t}\n\n\tconst wizardPages = [\n\t\twizardPageWrapper(LeavingUserSurveyCategoryPage, new LeavingUserSurveyPageAttrs(leavingUserSurveyData)),\n\t\twizardPageWrapper(LeavingUserSurveyReasonPage, new LeavingUserSurveyPageAttrs(leavingUserSurveyData)),\n\t]\n\tconst deferred = defer<LeavingUserSurveyData>()\n\n\tconst wizardBuilder = createWizardDialog(\n\t\tleavingUserSurveyData,\n\t\twizardPages,\n\t\tasync () => {\n\t\t\tdeferred.resolve(leavingUserSurveyData)\n\t\t},\n\t\tDialogType.EditLarge,\n\t\t\"surveySkip_action\",\n\t)\n\n\twizardBuilder.dialog.show()\n\treturn deferred.promise\n}\n","/* generated file, don't edit. */\n\nexport const enum MobilePaymentSubscriptionOwnership {\n\tOwner = \"0\",\n\tNotOwner = \"1\",\n\tNoSubscription = \"2\",\n}\n","import m from \"mithril\"\nimport stream from \"mithril/stream\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport { getByAbbreviation } from \"../api/common/CountryList\"\nimport { PaymentMethodInput } from \"./PaymentMethodInput\"\nimport { updatePaymentData } from \"./InvoiceAndPaymentDataPage\"\nimport { px } from \"../gui/size\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport { getDefaultPaymentMethod, PaymentMethodType } from \"../api/common/TutanotaConstants\"\nimport { assertNotNull, neverNull } from \"@tutao/tutanota-utils\"\nimport type { AccountingInfo, Customer } from \"../api/entities/sys/TypeRefs.js\"\nimport { DropDownSelector } from \"../gui/base/DropDownSelector.js\"\nimport { asPaymentInterval } from \"./PriceUtils.js\"\nimport { getLazyLoadedPayPalUrl } from \"./SubscriptionUtils.js\"\nimport { locator } from \"../api/main/CommonLocator.js\"\nimport { formatNameAndAddress } from \"../api/common/utils/CommonFormatter.js\"\n\n/**\n * @returns {boolean} true if the payment data update was successful\n */\nexport async function show(customer: Customer, accountingInfo: AccountingInfo, price: number, defaultPaymentMethod: PaymentMethodType): Promise<boolean> {\n\tconst payPalRequestUrl = getLazyLoadedPayPalUrl()\n\tconst invoiceData = {\n\t\tinvoiceAddress: formatNameAndAddress(accountingInfo.invoiceName, accountingInfo.invoiceAddress),\n\t\tcountry: accountingInfo.invoiceCountry ? getByAbbreviation(accountingInfo.invoiceCountry) : null,\n\t\tvatNumber: accountingInfo.invoiceVatIdNo,\n\t}\n\tconst subscriptionOptions = {\n\t\tbusinessUse: stream(assertNotNull(customer.businessUse)),\n\t\tpaymentInterval: stream(asPaymentInterval(accountingInfo.paymentInterval)),\n\t}\n\tconst paymentMethodInput = new PaymentMethodInput(\n\t\tsubscriptionOptions,\n\t\tstream(invoiceData.country),\n\t\tneverNull(accountingInfo),\n\t\tpayPalRequestUrl,\n\t\tdefaultPaymentMethod,\n\t)\n\tconst availablePaymentMethods = paymentMethodInput.getVisiblePaymentMethods()\n\n\tlet selectedPaymentMethod = accountingInfo.paymentMethod as PaymentMethodType\n\tpaymentMethodInput.updatePaymentMethod(selectedPaymentMethod)\n\tconst selectedPaymentMethodChangedHandler = async (value: PaymentMethodType) => {\n\t\tif (value === PaymentMethodType.Paypal && !payPalRequestUrl.isLoaded()) {\n\t\t\tawait showProgressDialog(\"pleaseWait_msg\", payPalRequestUrl.getAsync())\n\t\t}\n\t\tselectedPaymentMethod = value\n\t\tpaymentMethodInput.updatePaymentMethod(value)\n\t}\n\n\tconst didLinkPaypal = () => selectedPaymentMethod === PaymentMethodType.Paypal && paymentMethodInput.isPaypalAssigned()\n\n\treturn new Promise((resolve) => {\n\t\tconst confirmAction = () => {\n\t\t\tlet error = paymentMethodInput.validatePaymentData()\n\n\t\t\tif (error) {\n\t\t\t\tDialog.message(error)\n\t\t\t} else {\n\t\t\t\tconst finish = (success: boolean) => {\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t\tresolve(true)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// updatePaymentData gets done when the big paypal button is clicked\n\t\t\t\tif (didLinkPaypal()) {\n\t\t\t\t\tfinish(true)\n\t\t\t\t} else {\n\t\t\t\t\tshowProgressDialog(\n\t\t\t\t\t\t\"updatePaymentDataBusy_msg\",\n\t\t\t\t\t\tupdatePaymentData(\n\t\t\t\t\t\t\tsubscriptionOptions.paymentInterval(),\n\t\t\t\t\t\t\tinvoiceData,\n\t\t\t\t\t\t\tpaymentMethodInput.getPaymentData(),\n\t\t\t\t\t\t\tinvoiceData.country,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tprice + \"\",\n\t\t\t\t\t\t\taccountingInfo,\n\t\t\t\t\t\t),\n\t\t\t\t\t).then(finish)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst dialog = Dialog.showActionDialog({\n\t\t\ttitle: \"adminPayment_action\",\n\t\t\tchild: {\n\t\t\t\tview: () =>\n\t\t\t\t\tm(\n\t\t\t\t\t\t\"#changePaymentDataDialog\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tminHeight: px(310),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tm(DropDownSelector, {\n\t\t\t\t\t\t\t\tlabel: \"paymentMethod_label\",\n\t\t\t\t\t\t\t\titems: availablePaymentMethods,\n\t\t\t\t\t\t\t\tselectedValue: selectedPaymentMethod,\n\t\t\t\t\t\t\t\tselectionChangedHandler: selectedPaymentMethodChangedHandler,\n\t\t\t\t\t\t\t\tdropdownWidth: 250,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tm(paymentMethodInput),\n\t\t\t\t\t\t],\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tokAction: confirmAction,\n\t\t\t// if they've just gone through the process of linking a paypal account, don't offer a cancel button\n\t\t\tallowCancel: () => !didLinkPaypal(),\n\t\t\tokActionTextId: didLinkPaypal() ? \"close_alt\" : \"save_action\",\n\t\t\tcancelAction: () => resolve(false),\n\t\t})\n\t})\n}\n","import { create, Stripped, StrippedEntity } from \"../../common/utils/EntityUtils.js\"\nimport { TypeRef } from \"@tutao/tutanota-utils\"\nimport { typeModels } from \"./TypeModels.js\"\n\n\nexport const CustomerAccountPostingTypeRef: TypeRef<CustomerAccountPosting> = new TypeRef(\"accounting\", \"CustomerAccountPosting\")\n\nexport function createCustomerAccountPosting(values: StrippedEntity<CustomerAccountPosting>): CustomerAccountPosting {\n\treturn Object.assign(create(typeModels.CustomerAccountPosting, CustomerAccountPostingTypeRef), values)\n}\n\nexport type CustomerAccountPosting = {\n\t_type: TypeRef<CustomerAccountPosting>;\n\n\t_id: Id;\n\tamount: NumberString;\n\tinvoiceNumber: null | string;\n\ttype: NumberString;\n\tvalueDate: Date;\n}\nexport const CustomerAccountReturnTypeRef: TypeRef<CustomerAccountReturn> = new TypeRef(\"accounting\", \"CustomerAccountReturn\")\n\nexport function createCustomerAccountReturn(values: StrippedEntity<CustomerAccountReturn>): CustomerAccountReturn {\n\treturn Object.assign(create(typeModels.CustomerAccountReturn, CustomerAccountReturnTypeRef), values)\n}\n\nexport type CustomerAccountReturn = {\n\t_type: TypeRef<CustomerAccountReturn>;\n\t_errors: Object;\n\n\t_format: NumberString;\n\t_ownerGroup: null | Id;\n\t_ownerPublicEncSessionKey: null | Uint8Array;\n\t_publicCryptoProtocolVersion: null | NumberString;\n\tbalance: NumberString;\n\toutstandingBookingsPrice: NumberString;\n\n\tpostings: CustomerAccountPosting[];\n}\n","import { CustomerAccountReturnTypeRef } from \"./TypeRefs.js\"\n\nexport const CustomerAccountService = Object.freeze({\n\tapp: \"accounting\",\n\tname: \"CustomerAccountService\",\n\tget: { data: null, return: CustomerAccountReturnTypeRef },\n\tpost: null,\n\tput: null,\n\tdelete: null,\n} as const)","import m, { Children } from \"mithril\"\nimport { assertMainOrNode, isIOSApp } from \"../api/common/Env\"\nimport { assertNotNull, last, neverNull, ofClass } from \"@tutao/tutanota-utils\"\nimport { InfoLink, lang, TranslationKey } from \"../misc/LanguageViewModel\"\nimport {\n\tAccountingInfo,\n\tAccountingInfoTypeRef,\n\tBookingTypeRef,\n\tcreateDebitServicePutData,\n\tCustomer,\n\tCustomerTypeRef,\n\tInvoiceInfo,\n\tInvoiceInfoTypeRef,\n} from \"../api/entities/sys/TypeRefs.js\"\nimport { HtmlEditor, HtmlEditorMode } from \"../gui/editor/HtmlEditor\"\nimport { formatPrice, getPaymentMethodInfoText, getPaymentMethodName } from \"./PriceUtils\"\nimport * as InvoiceDataDialog from \"./InvoiceDataDialog\"\nimport { Icons } from \"../gui/base/icons/Icons\"\nimport { ColumnWidth, Table, TableLineAttrs } from \"../gui/base/Table.js\"\nimport { ButtonType } from \"../gui/base/Button.js\"\nimport { formatDate } from \"../misc/Formatter\"\nimport {\n\tAccountType,\n\tAvailablePlans,\n\tgetDefaultPaymentMethod,\n\tgetPaymentMethodType,\n\tNewPaidPlans,\n\tPaymentMethodType,\n\tPostingType,\n} from \"../api/common/TutanotaConstants\"\nimport { BadGatewayError, LockedError, PreconditionFailedError, TooManyRequestsError } from \"../api/common/error/RestError\"\nimport { Dialog, DialogType } from \"../gui/base/Dialog\"\nimport { getByAbbreviation } from \"../api/common/CountryList\"\nimport * as PaymentDataDialog from \"./PaymentDataDialog\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport { getPreconditionFailedPaymentMsg, hasRunningAppStoreSubscription } from \"./SubscriptionUtils\"\nimport type { DialogHeaderBarAttrs } from \"../gui/base/DialogHeaderBar\"\nimport { DialogHeaderBar } from \"../gui/base/DialogHeaderBar\"\nimport { TextField } from \"../gui/base/TextField.js\"\nimport type { CustomerAccountPosting } from \"../api/entities/accounting/TypeRefs\"\nimport { ExpanderButton, ExpanderPanel } from \"../gui/base/Expander\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { createNotAvailableForFreeClickHandler } from \"../misc/SubscriptionDialogs\"\nimport { TranslationKeyType } from \"../misc/TranslationKey\"\nimport { CustomerAccountService } from \"../api/entities/accounting/Services\"\nimport { DebitService } from \"../api/entities/sys/Services\"\nimport { IconButton } from \"../gui/base/IconButton.js\"\nimport { ButtonSize } from \"../gui/base/ButtonSize.js\"\nimport { formatNameAndAddress } from \"../api/common/utils/CommonFormatter.js\"\nimport { client } from \"../misc/ClientDetector.js\"\nimport { DeviceType } from \"../misc/ClientConstants.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../api/common/utils/EntityUpdateUtils.js\"\nimport { LoginButton } from \"../gui/base/buttons/LoginButton.js\"\nimport type { UpdatableSettingsViewer } from \"../settings/Interfaces.js\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\nimport { showSwitchDialog } from \"./SwitchSubscriptionDialog.js\"\nimport { GENERATED_MAX_ID } from \"../api/common/utils/EntityUtils.js\"\nimport { createDropdown } from \"../gui/base/Dropdown.js\"\n\nassertMainOrNode()\n\n/**\n * Displays payment method/invoice data and allows changing them.\n */\nexport class PaymentViewer implements UpdatableSettingsViewer {\n\tprivate readonly invoiceAddressField: HtmlEditor\n\tprivate customer: Customer | null = null\n\tprivate accountingInfo: AccountingInfo | null = null\n\tprivate postings: readonly CustomerAccountPosting[] = []\n\tprivate outstandingBookingsPrice: number | null = null\n\tprivate balance: number = 0\n\tprivate invoiceInfo: InvoiceInfo | null = null\n\tprivate postingsExpanded: boolean = false\n\n\tconstructor() {\n\t\tthis.invoiceAddressField = new HtmlEditor()\n\t\t\t.setMinHeight(140)\n\t\t\t.showBorders()\n\t\t\t.setMode(HtmlEditorMode.HTML)\n\t\t\t.setHtmlMonospace(false)\n\t\t\t.setReadOnly(true)\n\t\t\t.setPlaceholderId(\"invoiceAddress_label\")\n\t\tthis.loadData()\n\t\tthis.view = this.view.bind(this)\n\t}\n\n\tview(): Children {\n\t\treturn m(\n\t\t\t\"#invoicing-settings.fill-absolute.scroll.plr-l\",\n\t\t\t{\n\t\t\t\trole: \"group\",\n\t\t\t},\n\t\t\t[this.renderInvoiceData(), this.renderPaymentMethod(), this.renderPostings()],\n\t\t)\n\t}\n\n\tprivate async loadData() {\n\t\tthis.customer = await locator.logins.getUserController().loadCustomer()\n\t\tconst customerInfo = await locator.logins.getUserController().loadCustomerInfo()\n\n\t\tconst accountingInfo = await locator.entityClient.load(AccountingInfoTypeRef, customerInfo.accountingInfo)\n\t\tthis.updateAccountingInfoData(accountingInfo)\n\t\tthis.invoiceInfo = await locator.entityClient.load(InvoiceInfoTypeRef, neverNull(accountingInfo.invoiceInfo))\n\t\tm.redraw()\n\t\tawait this.loadPostings()\n\t}\n\n\tprivate renderPaymentMethod(): Children {\n\t\tconst paymentMethodHelpLabel = () => {\n\t\t\tif (this.accountingInfo && getPaymentMethodType(this.accountingInfo) === PaymentMethodType.Invoice) {\n\t\t\t\treturn lang.get(\"paymentProcessingTime_msg\")\n\t\t\t}\n\n\t\t\treturn \"\"\n\t\t}\n\n\t\tconst paymentMethod = this.accountingInfo\n\t\t\t? getPaymentMethodName(getPaymentMethodType(neverNull(this.accountingInfo))) + \" \" + getPaymentMethodInfoText(neverNull(this.accountingInfo))\n\t\t\t: lang.get(\"loading_msg\")\n\n\t\treturn m(TextField, {\n\t\t\tlabel: \"paymentMethod_label\",\n\t\t\tvalue: paymentMethod,\n\t\t\thelpLabel: paymentMethodHelpLabel,\n\t\t\tisReadOnly: true,\n\t\t\tinjectionsRight: () =>\n\t\t\t\tm(IconButton, {\n\t\t\t\t\ttitle: \"paymentMethod_label\",\n\t\t\t\t\tclick: (e, dom) => this.handlePaymentMethodClick(e, dom),\n\t\t\t\t\ticon: Icons.Edit,\n\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t}),\n\t\t})\n\t}\n\n\tprivate async handlePaymentMethodClick(e: MouseEvent, dom: HTMLElement) {\n\t\tif (this.accountingInfo == null) {\n\t\t\treturn\n\t\t}\n\t\tconst currentPaymentMethod: PaymentMethodType | null = getPaymentMethodType(this.accountingInfo)\n\t\tif (isIOSApp()) {\n\t\t\t// Paid users trying to change payment method on iOS with an active subscription\n\t\t\tif (currentPaymentMethod !== PaymentMethodType.AppStore && this.customer?.type === AccountType.PAID) {\n\t\t\t\treturn Dialog.message(lang.getTranslation(\"storePaymentMethodChange_msg\", { \"{AppStorePaymentChange}\": InfoLink.AppStorePaymentChange }))\n\t\t\t}\n\n\t\t\treturn locator.mobilePaymentsFacade.showSubscriptionConfigView()\n\t\t} else if (hasRunningAppStoreSubscription(this.accountingInfo)) {\n\t\t\treturn showManageThroughAppStoreDialog()\n\t\t} else if (currentPaymentMethod == PaymentMethodType.AppStore && this.customer?.type === AccountType.PAID) {\n\t\t\t// For now we do not allow changing payment method for Paid accounts that use AppStore,\n\t\t\t// they must downgrade to Free first.\n\n\t\t\tconst isResubscribe = await Dialog.choice(\n\t\t\t\tlang.getTranslation(\"storeDowngradeOrResubscribe_msg\", { \"{AppStoreDowngrade}\": InfoLink.AppStoreDowngrade }),\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: \"changePlan_action\",\n\t\t\t\t\t\tvalue: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: \"resubscribe_action\",\n\t\t\t\t\t\tvalue: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t)\n\t\t\tif (isResubscribe) {\n\t\t\t\treturn showManageThroughAppStoreDialog()\n\t\t\t} else {\n\t\t\t\tconst customerInfo = await locator.logins.getUserController().loadCustomerInfo()\n\t\t\t\tconst bookings = await locator.entityClient.loadRange(BookingTypeRef, assertNotNull(customerInfo.bookings).items, GENERATED_MAX_ID, 1, true)\n\t\t\t\tconst lastBooking = last(bookings)\n\t\t\t\tif (lastBooking == null) {\n\t\t\t\t\tconsole.warn(\"No booking but payment method is AppStore?\")\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn showSwitchDialog(this.customer, customerInfo, this.accountingInfo, lastBooking, AvailablePlans, null)\n\t\t\t}\n\t\t} else {\n\t\t\tconst showPaymentMethodDialog = createNotAvailableForFreeClickHandler(\n\t\t\t\tNewPaidPlans,\n\t\t\t\t() => this.accountingInfo && this.changePaymentMethod(),\n\t\t\t\t// iOS app is checked above\n\t\t\t\t() => locator.logins.getUserController().isPremiumAccount(),\n\t\t\t)\n\n\t\t\tshowPaymentMethodDialog(e, dom)\n\t\t}\n\t}\n\n\tprivate changeInvoiceData() {\n\t\tif (this.accountingInfo) {\n\t\t\tconst accountingInfo = neverNull(this.accountingInfo)\n\t\t\tconst invoiceCountry = accountingInfo.invoiceCountry ? getByAbbreviation(accountingInfo.invoiceCountry) : null\n\t\t\tInvoiceDataDialog.show(\n\t\t\t\tneverNull(neverNull(this.customer).businessUse),\n\t\t\t\t{\n\t\t\t\t\tinvoiceAddress: formatNameAndAddress(accountingInfo.invoiceName, accountingInfo.invoiceAddress),\n\t\t\t\t\tcountry: invoiceCountry,\n\t\t\t\t\tvatNumber: accountingInfo.invoiceVatIdNo,\n\t\t\t\t},\n\t\t\t\taccountingInfo,\n\t\t\t)\n\t\t}\n\t}\n\n\tprivate changePaymentMethod() {\n\t\tif (this.accountingInfo && hasRunningAppStoreSubscription(this.accountingInfo)) {\n\t\t\tthrow new ProgrammingError(\"Active AppStore subscription\")\n\t\t}\n\n\t\tlet nextPayment = this.amountOwed() * -1\n\t\tshowProgressDialog(\n\t\t\t\"pleaseWait_msg\",\n\t\t\tlocator.bookingFacade.getCurrentPrice().then((priceServiceReturn) => {\n\t\t\t\treturn Math.max(\n\t\t\t\t\tnextPayment,\n\t\t\t\t\tNumber(neverNull(priceServiceReturn.currentPriceThisPeriod).price),\n\t\t\t\t\tNumber(neverNull(priceServiceReturn.currentPriceNextPeriod).price),\n\t\t\t\t)\n\t\t\t}),\n\t\t)\n\t\t\t.then((price) =>\n\t\t\t\tgetDefaultPaymentMethod().then((paymentMethod) => {\n\t\t\t\t\treturn { price, paymentMethod }\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.then(({ price, paymentMethod }) => {\n\t\t\t\treturn PaymentDataDialog.show(neverNull(this.customer), neverNull(this.accountingInfo), price, paymentMethod).then((success) => {\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tif (this.isPayButtonVisible()) {\n\t\t\t\t\t\t\treturn this.showPayDialog(this.amountOwed())\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\tprivate renderPostings(): Children {\n\t\tif (!this.postings || this.postings.length === 0) {\n\t\t\treturn null\n\t\t} else {\n\t\t\tconst balance = this.balance\n\t\t\treturn [\n\t\t\t\tm(\".h4.mt-l\", lang.get(\"currentBalance_label\")),\n\t\t\t\tm(\".flex.center-horizontally.center-vertically.col\", [\n\t\t\t\t\tm(\n\t\t\t\t\t\t\"div.h4.pt.pb\" + (this.isAmountOwed() ? \".content-accent-fg\" : \"\"),\n\t\t\t\t\t\tformatPrice(balance, true) + (this.accountBalance() !== balance ? ` (${formatPrice(this.accountBalance(), true)})` : \"\"),\n\t\t\t\t\t),\n\t\t\t\t\tthis.accountBalance() !== balance\n\t\t\t\t\t\t? m(\n\t\t\t\t\t\t\t\t\".small\" + (this.accountBalance() < 0 ? \".content-accent-fg\" : \"\"),\n\t\t\t\t\t\t\t\tlang.get(\"unprocessedBookings_msg\", {\n\t\t\t\t\t\t\t\t\t\"{amount}\": formatPrice(assertNotNull(this.outstandingBookingsPrice), true),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: null,\n\t\t\t\t\tthis.isPayButtonVisible()\n\t\t\t\t\t\t? m(\n\t\t\t\t\t\t\t\t\".pb\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\t\twidth: \"200px\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tm(LoginButton, {\n\t\t\t\t\t\t\t\t\tlabel: \"invoicePay_action\",\n\t\t\t\t\t\t\t\t\tonclick: () => this.showPayDialog(this.amountOwed()),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: null,\n\t\t\t\t]),\n\t\t\t\tthis.accountingInfo &&\n\t\t\t\tthis.accountingInfo.paymentMethod !== PaymentMethodType.Invoice &&\n\t\t\t\t(this.isAmountOwed() || (this.invoiceInfo && this.invoiceInfo.paymentErrorInfo))\n\t\t\t\t\t? this.invoiceInfo && this.invoiceInfo.paymentErrorInfo\n\t\t\t\t\t\t? m(\".small.underline.b\", lang.get(getPreconditionFailedPaymentMsg(this.invoiceInfo.paymentErrorInfo.errorCode)))\n\t\t\t\t\t\t: m(\".small.underline.b\", lang.get(\"failedDebitAttempt_msg\"))\n\t\t\t\t\t: null,\n\t\t\t\tm(\".flex-space-between.items-center.mt-l.mb-s\", [\n\t\t\t\t\tm(\".h4\", lang.get(\"postings_label\")),\n\t\t\t\t\tm(ExpanderButton, {\n\t\t\t\t\t\tlabel: \"show_action\",\n\t\t\t\t\t\texpanded: this.postingsExpanded,\n\t\t\t\t\t\tonExpandedChange: (expanded) => (this.postingsExpanded = expanded),\n\t\t\t\t\t}),\n\t\t\t\t]),\n\t\t\t\tm(\n\t\t\t\t\tExpanderPanel,\n\t\t\t\t\t{\n\t\t\t\t\t\texpanded: this.postingsExpanded,\n\t\t\t\t\t},\n\t\t\t\t\tm(Table, {\n\t\t\t\t\t\tcolumnHeading: [\"type_label\", \"amount_label\"],\n\t\t\t\t\t\tcolumnWidths: [ColumnWidth.Largest, ColumnWidth.Small, ColumnWidth.Small],\n\t\t\t\t\t\tcolumnAlignments: [false, true, false],\n\t\t\t\t\t\tshowActionButtonColumn: true,\n\t\t\t\t\t\tlines: this.postings.map((posting: CustomerAccountPosting) => this.postingLineAttrs(posting)),\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t\tm(\".small\", lang.get(\"invoiceSettingDescription_msg\") + \" \" + lang.get(\"laterInvoicingInfo_msg\")),\n\t\t\t]\n\t\t}\n\t}\n\n\tprivate postingLineAttrs(posting: CustomerAccountPosting): TableLineAttrs {\n\t\treturn {\n\t\t\tcells: () => [\n\t\t\t\t{\n\t\t\t\t\tmain: getPostingTypeText(posting),\n\t\t\t\t\tinfo: [formatDate(posting.valueDate)],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tmain: formatPrice(Number(posting.amount), true),\n\t\t\t\t},\n\t\t\t],\n\t\t\tactionButtonAttrs:\n\t\t\t\tposting.type === PostingType.UsageFee || posting.type === PostingType.Credit || posting.type === PostingType.SalesCommission\n\t\t\t\t\t? {\n\t\t\t\t\t\t\ttitle: \"download_action\",\n\t\t\t\t\t\t\ticon: Icons.Download,\n\t\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t\t\tclick: (e, dom) => {\n\t\t\t\t\t\t\t\tif (this.customer?.businessUse) {\n\t\t\t\t\t\t\t\t\tcreateDropdown({\n\t\t\t\t\t\t\t\t\t\twidth: 300,\n\t\t\t\t\t\t\t\t\t\tlazyButtons: () => [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tlabel: \"downloadInvoicePdf_action\",\n\t\t\t\t\t\t\t\t\t\t\t\tclick: () => this.doPdfInvoiceDownload(posting),\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tlabel: \"downloadInvoiceXml_action\",\n\t\t\t\t\t\t\t\t\t\t\t\tclick: () => this.doXrechnungInvoiceDownload(posting),\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t})(e, dom)\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.doPdfInvoiceDownload(posting)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  }\n\t\t\t\t\t: null,\n\t\t}\n\t}\n\n\tprivate async doPdfInvoiceDownload(posting: CustomerAccountPosting): Promise<unknown> {\n\t\tif (client.compressionStreamSupported()) {\n\t\t\treturn showProgressDialog(\"pleaseWait_msg\", locator.customerFacade.generatePdfInvoice(neverNull(posting.invoiceNumber))).then((pdfInvoice) =>\n\t\t\t\tlocator.fileController.saveDataFile(pdfInvoice),\n\t\t\t)\n\t\t} else {\n\t\t\tif (client.device == DeviceType.ANDROID) {\n\t\t\t\treturn Dialog.message(\"invoiceFailedWebview_msg\", () => m(\"div\", m(\"a\", { href: InfoLink.Webview, target: \"_blank\" }, InfoLink.Webview)))\n\t\t\t} else if (client.isIos()) {\n\t\t\t\treturn Dialog.message(\"invoiceFailedIOS_msg\")\n\t\t\t} else {\n\t\t\t\treturn Dialog.message(\"invoiceFailedBrowser_msg\")\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async doXrechnungInvoiceDownload(posting: CustomerAccountPosting) {\n\t\treturn showProgressDialog(\n\t\t\t\"pleaseWait_msg\",\n\t\t\tlocator.customerFacade.generateXRechnungInvoice(neverNull(posting.invoiceNumber)).then((xInvoice) => locator.fileController.saveDataFile(xInvoice)),\n\t\t)\n\t}\n\n\tprivate updateAccountingInfoData(accountingInfo: AccountingInfo) {\n\t\tthis.accountingInfo = accountingInfo\n\n\t\tthis.invoiceAddressField.setValue(\n\t\t\tformatNameAndAddress(accountingInfo.invoiceName, accountingInfo.invoiceAddress, accountingInfo.invoiceCountry ?? undefined),\n\t\t)\n\n\t\tm.redraw()\n\t}\n\n\tprivate accountBalance(): number {\n\t\treturn this.balance - assertNotNull(this.outstandingBookingsPrice)\n\t}\n\n\tprivate amountOwed(): number {\n\t\tif (this.balance != null) {\n\t\t\tlet balance = this.balance\n\n\t\t\tif (balance < 0) {\n\t\t\t\treturn balance\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n\n\tprivate isAmountOwed(): boolean {\n\t\treturn this.amountOwed() < 0\n\t}\n\n\tprivate loadPostings(): Promise<void> {\n\t\treturn locator.serviceExecutor.get(CustomerAccountService, null).then((result) => {\n\t\t\tthis.postings = result.postings\n\t\t\tthis.outstandingBookingsPrice = Number(result.outstandingBookingsPrice)\n\t\t\tthis.balance = Number(result.balance)\n\t\t\tm.redraw()\n\t\t})\n\t}\n\n\tasync entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\tfor (const update of updates) {\n\t\t\tawait this.processEntityUpdate(update)\n\t\t}\n\t}\n\n\tprivate async processEntityUpdate(update: EntityUpdateData): Promise<void> {\n\t\tconst { instanceId } = update\n\n\t\tif (isUpdateForTypeRef(AccountingInfoTypeRef, update)) {\n\t\t\tconst accountingInfo = await locator.entityClient.load(AccountingInfoTypeRef, instanceId)\n\t\t\tthis.updateAccountingInfoData(accountingInfo)\n\t\t} else if (isUpdateForTypeRef(CustomerTypeRef, update)) {\n\t\t\tthis.customer = await locator.logins.getUserController().loadCustomer()\n\t\t\tm.redraw()\n\t\t} else if (isUpdateForTypeRef(InvoiceInfoTypeRef, update)) {\n\t\t\tthis.invoiceInfo = await locator.entityClient.load(InvoiceInfoTypeRef, instanceId)\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\tprivate isPayButtonVisible(): boolean {\n\t\treturn (\n\t\t\tthis.accountingInfo != null &&\n\t\t\t(this.accountingInfo.paymentMethod === PaymentMethodType.CreditCard || this.accountingInfo.paymentMethod === PaymentMethodType.Paypal) &&\n\t\t\tthis.isAmountOwed()\n\t\t)\n\t}\n\n\tprivate showPayDialog(openBalance: number): Promise<void> {\n\t\treturn showPayConfirmDialog(openBalance)\n\t\t\t.then((confirmed) => {\n\t\t\t\tif (confirmed) {\n\t\t\t\t\treturn showProgressDialog(\n\t\t\t\t\t\t\"pleaseWait_msg\",\n\t\t\t\t\t\tlocator.serviceExecutor\n\t\t\t\t\t\t\t.put(DebitService, createDebitServicePutData({ invoice: null }))\n\t\t\t\t\t\t\t.catch(ofClass(LockedError, () => \"operationStillActive_msg\" as TranslationKey))\n\t\t\t\t\t\t\t.catch(ofClass(PreconditionFailedError, (error) => getPreconditionFailedPaymentMsg(error.data)))\n\t\t\t\t\t\t\t.catch(ofClass(BadGatewayError, () => \"paymentProviderNotAvailableError_msg\" as TranslationKey))\n\t\t\t\t\t\t\t.catch(ofClass(TooManyRequestsError, () => \"tooManyAttempts_msg\" as TranslationKey)),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((errorId: TranslationKeyType | void) => {\n\t\t\t\tif (errorId) {\n\t\t\t\t\treturn Dialog.message(errorId)\n\t\t\t\t} else {\n\t\t\t\t\treturn this.loadPostings()\n\t\t\t\t}\n\t\t\t})\n\t}\n\n\tprivate renderInvoiceData(): Children {\n\t\treturn [\n\t\t\tm(\".flex-space-between.items-center.mt-l.mb-s\", [\n\t\t\t\tm(\".h4\", lang.get(\"invoiceData_msg\")),\n\t\t\t\tm(IconButton, {\n\t\t\t\t\ttitle: \"invoiceData_msg\",\n\t\t\t\t\tclick: createNotAvailableForFreeClickHandler(\n\t\t\t\t\t\tNewPaidPlans,\n\t\t\t\t\t\t() => this.changeInvoiceData(),\n\t\t\t\t\t\t() => locator.logins.getUserController().isPremiumAccount(),\n\t\t\t\t\t),\n\t\t\t\t\ticon: Icons.Edit,\n\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t}),\n\t\t\t]),\n\t\t\tm(this.invoiceAddressField),\n\t\t\tthis.accountingInfo && this.accountingInfo.invoiceVatIdNo.trim().length > 0\n\t\t\t\t? m(TextField, {\n\t\t\t\t\t\tlabel: \"invoiceVatIdNo_label\",\n\t\t\t\t\t\tvalue: this.accountingInfo ? this.accountingInfo.invoiceVatIdNo : lang.get(\"loading_msg\"),\n\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t  })\n\t\t\t\t: null,\n\t\t]\n\t}\n}\n\nfunction showPayConfirmDialog(price: number): Promise<boolean> {\n\treturn new Promise((resolve) => {\n\t\tlet dialog: Dialog\n\n\t\tconst doAction = (res: boolean) => {\n\t\t\tdialog.close()\n\t\t\tresolve(res)\n\t\t}\n\n\t\tconst actionBarAttrs: DialogHeaderBarAttrs = {\n\t\t\tleft: [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\t\tclick: () => doAction(false),\n\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t},\n\t\t\t],\n\t\t\tright: [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"invoicePay_action\",\n\t\t\t\t\tclick: () => doAction(true),\n\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t},\n\t\t\t],\n\t\t\tmiddle: \"adminPayment_action\",\n\t\t}\n\t\tdialog = new Dialog(DialogType.EditSmall, {\n\t\t\tview: (): Children => [\n\t\t\t\tm(DialogHeaderBar, actionBarAttrs),\n\t\t\t\tm(\n\t\t\t\t\t\".plr-l.pb\",\n\t\t\t\t\tm(\"\", [\n\t\t\t\t\t\tm(\".pt\", lang.get(\"invoicePayConfirm_msg\")),\n\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\tlabel: \"price_label\",\n\t\t\t\t\t\t\tvalue: formatPrice(-price, true),\n\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t\t}),\n\t\t\t\t\t]),\n\t\t\t\t),\n\t\t\t],\n\t\t})\n\t\t\t.setCloseHandler(() => doAction(false))\n\t\t\t.show()\n\t})\n}\n\nfunction getPostingTypeText(posting: CustomerAccountPosting): string {\n\tswitch (posting.type) {\n\t\tcase PostingType.UsageFee:\n\t\t\treturn lang.get(\"invoice_label\")\n\n\t\tcase PostingType.Credit:\n\t\t\treturn lang.get(\"credit_label\")\n\n\t\tcase PostingType.Payment:\n\t\t\treturn lang.get(\"adminPayment_action\")\n\n\t\tcase PostingType.Refund:\n\t\t\treturn lang.get(\"refund_label\")\n\n\t\tcase PostingType.GiftCard:\n\t\t\treturn Number(posting.amount) < 0 ? lang.get(\"boughtGiftCardPosting_label\") : lang.get(\"redeemedGiftCardPosting_label\")\n\n\t\tcase PostingType.SalesCommission:\n\t\t\treturn Number(posting.amount) < 0 ? lang.get(\"cancelledReferralCreditPosting_label\") : lang.get(\"referralCreditPosting_label\")\n\n\t\tdefault:\n\t\t\treturn \"\"\n\t\t// Generic, Dispute, Suspension, SuspensionCancel\n\t}\n}\n\nexport async function showManageThroughAppStoreDialog(): Promise<void> {\n\tconst confirmed = await Dialog.confirm(\n\t\tlang.getTranslation(\"storeSubscription_msg\", {\n\t\t\t\"{AppStorePayment}\": InfoLink.AppStorePayment,\n\t\t}),\n\t)\n\tif (confirmed) {\n\t\twindow.open(\"https://apps.apple.com/account/subscriptions\", \"_blank\", \"noopener,noreferrer\")\n\t}\n}\n","import m, { Children, Vnode, VnodeDOM } from \"mithril\"\nimport stream from \"mithril/stream\"\nimport { lang, type TranslationKey } from \"../misc/LanguageViewModel\"\nimport type { SubscriptionParameters, UpgradeSubscriptionData } from \"./UpgradeSubscriptionWizard\"\nimport { SubscriptionActionButtons, SubscriptionSelector } from \"./SubscriptionSelector\"\nimport { Button, ButtonType } from \"../gui/base/Button.js\"\nimport { UpgradeType } from \"./SubscriptionUtils\"\nimport { Dialog, DialogType } from \"../gui/base/Dialog\"\nimport type { WizardPageAttrs, WizardPageN } from \"../gui/base/WizardDialog.js\"\nimport { emitWizardEvent, WizardEventType } from \"../gui/base/WizardDialog.js\"\nimport { DefaultAnimationTime } from \"../gui/animation/Animations\"\nimport { Const, Keys, PlanType, SubscriptionType } from \"../api/common/TutanotaConstants\"\nimport { Checkbox } from \"../gui/base/Checkbox.js\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { UsageTest } from \"@tutao/tutanota-usagetests\"\nimport { UpgradePriceType } from \"./FeatureListProvider\"\nimport { asPaymentInterval, PaymentInterval } from \"./PriceUtils.js\"\nimport { lazy } from \"@tutao/tutanota-utils\"\nimport { LoginButtonAttrs } from \"../gui/base/buttons/LoginButton.js\"\nimport { stringToSubscriptionType } from \"../misc/LoginUtils.js\"\nimport { isReferenceDateWithinCyberMondayCampaign } from \"../misc/CyberMondayUtils.js\"\n\n/** Subscription type passed from the website */\nexport const PlanTypeParameter = Object.freeze({\n\tFREE: \"free\",\n\tREVOLUTIONARY: \"revolutionary\",\n\tLEGEND: \"legend\",\n\tESSENTIAL: \"essential\",\n\tADVANCED: \"advanced\",\n\tUNLIMITED: \"unlimited\",\n})\n\nexport class UpgradeSubscriptionPage implements WizardPageN<UpgradeSubscriptionData> {\n\tprivate _dom: HTMLElement | null = null\n\tprivate __signupFreeTest?: UsageTest\n\tprivate __signupPaidTest?: UsageTest\n\tprivate upgradeType: UpgradeType | null = null\n\n\toncreate(vnode: VnodeDOM<WizardPageAttrs<UpgradeSubscriptionData>>): void {\n\t\tthis._dom = vnode.dom as HTMLElement\n\t\tconst subscriptionParameters = vnode.attrs.data.subscriptionParameters\n\t\tthis.upgradeType = vnode.attrs.data.upgradeType\n\n\t\tthis.__signupFreeTest = locator.usageTestController.getTest(\"signup.free\")\n\t\tthis.__signupFreeTest.active = false\n\n\t\tthis.__signupPaidTest = locator.usageTestController.getTest(\"signup.paid\")\n\t\tthis.__signupPaidTest.active = false\n\n\t\tif (subscriptionParameters) {\n\t\t\tconst paymentInterval: PaymentInterval = subscriptionParameters.interval\n\t\t\t\t? asPaymentInterval(subscriptionParameters.interval)\n\t\t\t\t: PaymentInterval.Yearly\n\t\t\t// We automatically route to the next page; when we want to go back from the second page, we do not want to keep calling nextPage\n\t\t\tvnode.attrs.data.subscriptionParameters = null\n\t\t\tvnode.attrs.data.options.paymentInterval = stream(paymentInterval)\n\t\t\tthis.goToNextPageWithPreselectedSubscription(subscriptionParameters, vnode.attrs.data)\n\t\t}\n\t}\n\n\tview(vnode: Vnode<WizardPageAttrs<UpgradeSubscriptionData>>): Children {\n\t\tconst data = vnode.attrs.data\n\t\tlet availablePlans = vnode.attrs.data.acceptedPlans\n\t\t// newAccountData is filled in when signing up and then going back in the signup process\n\t\t// If the user has selected a tuta.com address we want to prevent them from selecting a free plan at this point\n\t\tif (!!data.newAccountData && data.newAccountData.mailAddress.includes(\"tuta.com\") && availablePlans.includes(PlanType.Free)) {\n\t\t\tavailablePlans = availablePlans.filter((plan) => plan != PlanType.Free)\n\t\t}\n\n\t\tconst isYearly = data.options.paymentInterval() === PaymentInterval.Yearly\n\t\tconst isCyberMonday = isReferenceDateWithinCyberMondayCampaign(Const.CURRENT_DATE ?? new Date())\n\t\tconst shouldApplyCyberMonday = isYearly && isCyberMonday\n\n\t\tconst subscriptionActionButtons: SubscriptionActionButtons = {\n\t\t\t[PlanType.Free]: () => {\n\t\t\t\treturn {\n\t\t\t\t\tlabel: \"pricing.select_action\",\n\t\t\t\t\tonclick: () => this.selectFree(data),\n\t\t\t\t} as LoginButtonAttrs\n\t\t\t},\n\t\t\t[PlanType.Revolutionary]: this.createUpgradeButton(data, PlanType.Revolutionary),\n\t\t\t[PlanType.Legend]: () => ({\n\t\t\t\tlabel: shouldApplyCyberMonday ? \"pricing.cyber_monday_select_action\" : \"pricing.select_action\",\n\t\t\t\tclass: shouldApplyCyberMonday ? \"accent-bg-cyber-monday\" : undefined,\n\t\t\t\tonclick: () => this.setNonFreeDataAndGoToNextPage(data, PlanType.Legend),\n\t\t\t}),\n\t\t\t[PlanType.Essential]: this.createUpgradeButton(data, PlanType.Essential),\n\t\t\t[PlanType.Advanced]: this.createUpgradeButton(data, PlanType.Advanced),\n\t\t\t[PlanType.Unlimited]: this.createUpgradeButton(data, PlanType.Unlimited),\n\t\t}\n\t\treturn m(\".pt\", [\n\t\t\tm(SubscriptionSelector, {\n\t\t\t\toptions: data.options,\n\t\t\t\tpriceInfoTextId: data.priceInfoTextId,\n\t\t\t\tboxWidth: 230,\n\t\t\t\tboxHeight: 270,\n\t\t\t\tacceptedPlans: availablePlans,\n\t\t\t\tallowSwitchingPaymentInterval: data.upgradeType !== UpgradeType.Switch,\n\t\t\t\tcurrentPlanType: data.currentPlan,\n\t\t\t\tactionButtons: subscriptionActionButtons,\n\t\t\t\tfeatureListProvider: vnode.attrs.data.featureListProvider,\n\t\t\t\tpriceAndConfigProvider: vnode.attrs.data.planPrices,\n\t\t\t\tmultipleUsersAllowed: vnode.attrs.data.multipleUsersAllowed,\n\t\t\t\tmsg: data.msg,\n\t\t\t}),\n\t\t])\n\t}\n\n\tselectFree(data: UpgradeSubscriptionData) {\n\t\t// Confirmation of free subscription selection (click on subscription selector)\n\t\tif (this.__signupPaidTest) {\n\t\t\tthis.__signupPaidTest.active = false\n\t\t}\n\n\t\tif (this.__signupFreeTest && this.upgradeType == UpgradeType.Signup) {\n\t\t\tthis.__signupFreeTest.active = true\n\t\t\tthis.__signupFreeTest.getStage(0).complete()\n\t\t}\n\t\tconfirmFreeSubscription().then((confirmed) => {\n\t\t\tif (confirmed) {\n\t\t\t\t// Confirmation of free/business dialog (click on ok)\n\t\t\t\tthis.__signupFreeTest?.getStage(1).complete()\n\t\t\t\tdata.type = PlanType.Free\n\t\t\t\tdata.price = null\n\t\t\t\tdata.nextYearPrice = null\n\t\t\t\tthis.showNextPage()\n\t\t\t}\n\t\t})\n\t}\n\n\tshowNextPage(): void {\n\t\tif (this._dom) {\n\t\t\temitWizardEvent(this._dom, WizardEventType.SHOW_NEXT_PAGE)\n\t\t}\n\t}\n\n\tgoToNextPageWithPreselectedSubscription(subscriptionParameters: SubscriptionParameters, data: UpgradeSubscriptionData): void {\n\t\tlet subscriptionType: SubscriptionType | null\n\t\ttry {\n\t\t\tsubscriptionType = subscriptionParameters.type == null ? null : stringToSubscriptionType(subscriptionParameters.type)\n\t\t} catch (e) {\n\t\t\tsubscriptionType = null\n\t\t}\n\n\t\tif (subscriptionType === SubscriptionType.Personal || subscriptionType === SubscriptionType.PaidPersonal) {\n\t\t\t// we have to individually change the data so that when returning we show the chose subscription type (private/business) | false = private, true = business\n\t\t\tdata.options.businessUse(false)\n\n\t\t\tswitch (subscriptionParameters.subscription) {\n\t\t\t\tcase PlanTypeParameter.FREE:\n\t\t\t\t\tthis.selectFree(data)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase PlanTypeParameter.REVOLUTIONARY:\n\t\t\t\t\tthis.setNonFreeDataAndGoToNextPage(data, PlanType.Revolutionary)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase PlanTypeParameter.LEGEND:\n\t\t\t\t\tthis.setNonFreeDataAndGoToNextPage(data, PlanType.Legend)\n\t\t\t\t\tbreak\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log(\"Unknown subscription passed: \", subscriptionParameters)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (subscriptionType === SubscriptionType.Business) {\n\t\t\tdata.options.businessUse(true)\n\n\t\t\tswitch (subscriptionParameters.subscription) {\n\t\t\t\tcase PlanTypeParameter.ESSENTIAL:\n\t\t\t\t\tthis.setNonFreeDataAndGoToNextPage(data, PlanType.Essential)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase PlanTypeParameter.ADVANCED:\n\t\t\t\t\tthis.setNonFreeDataAndGoToNextPage(data, PlanType.Advanced)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase PlanTypeParameter.UNLIMITED:\n\t\t\t\t\tthis.setNonFreeDataAndGoToNextPage(data, PlanType.Unlimited)\n\t\t\t\t\tbreak\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log(\"Unknown subscription passed: \", subscriptionParameters)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log(\"Unknown subscription type passed: \", subscriptionParameters)\n\t\t}\n\t}\n\n\tsetNonFreeDataAndGoToNextPage(data: UpgradeSubscriptionData, planType: PlanType): void {\n\t\t// Confirmation of paid subscription selection (click on subscription selector)\n\t\tif (this.__signupFreeTest) {\n\t\t\tthis.__signupFreeTest.active = false\n\t\t}\n\n\t\tif (this.__signupPaidTest && this.upgradeType == UpgradeType.Signup) {\n\t\t\tthis.__signupPaidTest.active = true\n\t\t\tthis.__signupPaidTest.getStage(0).complete()\n\t\t}\n\t\tdata.type = planType\n\t\tconst { planPrices, options } = data\n\t\ttry {\n\t\t\t// `data.price.rawPrice` is used for the amount parameter in the Braintree credit card verification call, so we do not include currency locale outside iOS.\n\t\t\tdata.price = planPrices.getSubscriptionPriceWithCurrency(options.paymentInterval(), data.type, UpgradePriceType.PlanActualPrice)\n\t\t\tconst nextYear = planPrices.getSubscriptionPriceWithCurrency(options.paymentInterval(), data.type, UpgradePriceType.PlanNextYearsPrice)\n\t\t\tdata.nextYearPrice = data.price.rawPrice !== nextYear.rawPrice ? nextYear : null\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t\tDialog.message(\"appStoreNotAvailable_msg\")\n\t\t\treturn\n\t\t}\n\t\tthis.showNextPage()\n\t}\n\n\tcreateUpgradeButton(data: UpgradeSubscriptionData, planType: PlanType): lazy<LoginButtonAttrs> {\n\t\treturn () => ({\n\t\t\tlabel: \"pricing.select_action\",\n\t\t\tonclick: () => this.setNonFreeDataAndGoToNextPage(data, planType),\n\t\t})\n\t}\n}\n\nfunction confirmFreeSubscription(): Promise<boolean> {\n\treturn new Promise((resolve) => {\n\t\tlet oneAccountValue = stream(false)\n\t\tlet privateUseValue = stream(false)\n\t\tlet dialog: Dialog\n\n\t\tconst closeAction = (confirmed: boolean) => {\n\t\t\tdialog.close()\n\t\t\tsetTimeout(() => resolve(confirmed), DefaultAnimationTime)\n\t\t}\n\t\tconst isFormValid = () => oneAccountValue() && privateUseValue()\n\t\tdialog = new Dialog(DialogType.Alert, {\n\t\t\tview: () => [\n\t\t\t\t// m(\".h2.pb\", lang.get(\"confirmFreeAccount_label\")),\n\t\t\t\tm(\"#dialog-message.dialog-contentButtonsBottom.text-break.text-prewrap.selectable\", lang.getTranslationText(\"freeAccountInfo_msg\")),\n\t\t\t\tm(\".dialog-contentButtonsBottom\", [\n\t\t\t\t\tm(Checkbox, {\n\t\t\t\t\t\tlabel: () => lang.get(\"confirmNoOtherFreeAccount_msg\"),\n\t\t\t\t\t\tchecked: oneAccountValue(),\n\t\t\t\t\t\tonChecked: oneAccountValue,\n\t\t\t\t\t}),\n\t\t\t\t\tm(Checkbox, {\n\t\t\t\t\t\tlabel: () => lang.get(\"confirmPrivateUse_msg\"),\n\t\t\t\t\t\tchecked: privateUseValue(),\n\t\t\t\t\t\tonChecked: privateUseValue,\n\t\t\t\t\t}),\n\t\t\t\t]),\n\t\t\t\tm(\".flex-center.dialog-buttons\", [\n\t\t\t\t\tm(Button, {\n\t\t\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\t\t\tclick: () => closeAction(false),\n\t\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\t}),\n\t\t\t\t\tm(Button, {\n\t\t\t\t\t\tlabel: \"ok_action\",\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\tif (isFormValid()) closeAction(true)\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t\t}),\n\t\t\t\t]),\n\t\t\t],\n\t\t})\n\t\t\t.setCloseHandler(() => closeAction(false))\n\t\t\t.addShortcut({\n\t\t\t\tkey: Keys.ESC,\n\t\t\t\tshift: false,\n\t\t\t\texec: () => closeAction(false),\n\t\t\t\thelp: \"cancel_action\",\n\t\t\t})\n\t\t\t.addShortcut({\n\t\t\t\tkey: Keys.RETURN,\n\t\t\t\tshift: false,\n\t\t\t\texec: () => {\n\t\t\t\t\tif (isFormValid()) closeAction(true)\n\t\t\t\t},\n\t\t\t\thelp: \"ok_action\",\n\t\t\t})\n\t\t\t.show()\n\t})\n}\n\nexport class UpgradeSubscriptionPageAttrs implements WizardPageAttrs<UpgradeSubscriptionData> {\n\tdata: UpgradeSubscriptionData\n\n\tconstructor(upgradeData: UpgradeSubscriptionData) {\n\t\tthis.data = upgradeData\n\t}\n\n\theaderTitle(): TranslationKey {\n\t\treturn \"subscription_label\"\n\t}\n\n\tnextAction(showErrorDialog: boolean): Promise<boolean> {\n\t\t// next action not available for this page\n\t\treturn Promise.resolve(true)\n\t}\n\n\tisSkipAvailable(): boolean {\n\t\treturn false\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn true\n\t}\n}\n","import m, { Children, Vnode, VnodeDOM } from \"mithril\"\nimport { lang, type TranslationKey } from \"../misc/LanguageViewModel\"\nimport type { UpgradeSubscriptionData } from \"./UpgradeSubscriptionWizard\"\nimport type { WizardPageAttrs, WizardPageN } from \"../gui/base/WizardDialog.js\"\nimport { emitWizardEvent, WizardEventType } from \"../gui/base/WizardDialog.js\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { UsageTest } from \"@tutao/tutanota-usagetests\"\nimport { RecoverCodeField } from \"../settings/login/RecoverCodeDialog.js\"\nimport { VisSignupImage } from \"../gui/base/icons/Icons.js\"\nimport { PlanType } from \"../api/common/TutanotaConstants.js\"\nimport { LoginButton } from \"../gui/base/buttons/LoginButton.js\"\n\nexport class UpgradeCongratulationsPage implements WizardPageN<UpgradeSubscriptionData> {\n\tprivate dom!: HTMLElement\n\tprivate __signupPaidTest?: UsageTest\n\tprivate __signupFreeTest?: UsageTest\n\n\toncreate(vnode: VnodeDOM<WizardPageAttrs<UpgradeSubscriptionData>>) {\n\t\tthis.__signupPaidTest = locator.usageTestController.getTest(\"signup.paid\")\n\t\tthis.__signupFreeTest = locator.usageTestController.getTest(\"signup.free\")\n\n\t\tthis.dom = vnode.dom as HTMLElement\n\t}\n\n\tview({ attrs }: Vnode<WizardPageAttrs<UpgradeSubscriptionData>>): Children {\n\t\tconst { newAccountData } = attrs.data\n\n\t\treturn [\n\t\t\tm(\".center.h4.pt\", lang.get(\"accountCreationCongratulation_msg\")),\n\t\t\tnewAccountData\n\t\t\t\t? m(\".plr-l\", [\n\t\t\t\t\t\tm(RecoverCodeField, {\n\t\t\t\t\t\t\tshowMessage: true,\n\t\t\t\t\t\t\trecoverCode: newAccountData.recoverCode,\n\t\t\t\t\t\t\timage: {\n\t\t\t\t\t\t\t\tsrc: VisSignupImage,\n\t\t\t\t\t\t\t\talt: \"vitor_alt\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t  ])\n\t\t\t\t: null,\n\t\t\tm(\n\t\t\t\t\".flex-center.full-width.pt-l\",\n\t\t\t\tm(LoginButton, {\n\t\t\t\t\tlabel: \"ok_action\",\n\t\t\t\t\tclass: \"small-login-button\",\n\t\t\t\t\tonclick: () => {\n\t\t\t\t\t\tif (attrs.data.type === PlanType.Free) {\n\t\t\t\t\t\t\tconst recoveryConfirmationStageFree = this.__signupFreeTest?.getStage(5)\n\n\t\t\t\t\t\t\trecoveryConfirmationStageFree?.setMetric({\n\t\t\t\t\t\t\t\tname: \"switchedFromPaid\",\n\t\t\t\t\t\t\t\tvalue: (this.__signupPaidTest?.isStarted() ?? false).toString(),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\trecoveryConfirmationStageFree?.complete()\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.close(attrs.data, this.dom)\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t),\n\t\t]\n\t}\n\n\tprivate close(data: UpgradeSubscriptionData, dom: HTMLElement) {\n\t\tlet promise = Promise.resolve()\n\n\t\tif (data.newAccountData && locator.logins.isUserLoggedIn()) {\n\t\t\tpromise = locator.logins.logout(false)\n\t\t}\n\n\t\tpromise.then(() => {\n\t\t\temitWizardEvent(dom, WizardEventType.SHOW_NEXT_PAGE)\n\t\t})\n\t}\n}\n\nexport class UpgradeCongratulationsPageAttrs implements WizardPageAttrs<UpgradeSubscriptionData> {\n\tdata: UpgradeSubscriptionData\n\tpreventGoBack = true\n\thidePagingButtonForPage = true\n\n\tconstructor(upgradeData: UpgradeSubscriptionData) {\n\t\tthis.data = upgradeData\n\t}\n\n\theaderTitle(): TranslationKey {\n\t\treturn \"accountCongratulations_msg\"\n\t}\n\n\tnextAction(showDialogs: boolean): Promise<boolean> {\n\t\t// next action not available for this page\n\t\treturn Promise.resolve(true)\n\t}\n\n\tisSkipAvailable(): boolean {\n\t\treturn false\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn true\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport type { TranslationKey } from \"../misc/LanguageViewModel.js\"\nimport { lang } from \"../misc/LanguageViewModel.js\"\nimport { isMailAddress } from \"../misc/FormatValidator.js\"\nimport { AccessDeactivatedError } from \"../api/common/error/RestError.js\"\nimport { formatMailAddressFromParts } from \"../misc/Formatter.js\"\nimport { Icon } from \"../gui/base/Icon.js\"\nimport { locator } from \"../api/main/CommonLocator.js\"\nimport { assertMainOrNode } from \"../api/common/Env.js\"\nimport { px, size } from \"../gui/size.js\"\nimport { Autocapitalize, Autocomplete, inputLineHeight, TextField } from \"../gui/base/TextField.js\"\nimport { attachDropdown, DropdownButtonAttrs } from \"../gui/base/Dropdown.js\"\nimport { IconButton, IconButtonAttrs } from \"../gui/base/IconButton.js\"\nimport { ButtonSize } from \"../gui/base/ButtonSize.js\"\nimport { EmailDomainData } from \"./mailaddress/MailAddressesUtils.js\"\nimport { BootIcons } from \"../gui/base/icons/BootIcons.js\"\nimport { isTutaMailAddress } from \"../mailFunctionality/SharedMailUtils.js\"\n\nassertMainOrNode()\n\nconst VALID_MESSAGE_ID = \"mailAddressAvailable_msg\"\n\nexport interface SelectMailAddressFormAttrs {\n\tselectedDomain: EmailDomainData\n\tavailableDomains: readonly EmailDomainData[]\n\tonValidationResult: (emailAddress: string, validationResult: ValidationResult) => unknown\n\tonBusyStateChanged: (isBusy: boolean) => unknown\n\tinjectionsRightButtonAttrs?: IconButtonAttrs | null\n\tonDomainChanged: (domain: EmailDomainData) => unknown\n\tmailAddressNAError?: TranslationKey\n}\n\nexport interface ValidationResult {\n\tisValid: boolean\n\terrorId: TranslationKey | null\n}\n\nexport class SelectMailAddressForm implements Component<SelectMailAddressFormAttrs> {\n\tprivate username: string\n\tprivate messageId: TranslationKey | null\n\tprivate checkAddressTimeout: TimeoutID | null\n\tprivate isVerificationBusy: boolean\n\tprivate lastAttrs: SelectMailAddressFormAttrs\n\n\tconstructor({ attrs }: Vnode<SelectMailAddressFormAttrs>) {\n\t\tthis.lastAttrs = attrs\n\t\tthis.isVerificationBusy = false\n\t\tthis.checkAddressTimeout = null\n\t\tthis.username = \"\"\n\t\tthis.messageId = \"mailAddressNeutral_msg\"\n\t}\n\n\tonupdate(vnode: Vnode<SelectMailAddressFormAttrs>) {\n\t\tif (this.lastAttrs.selectedDomain.domain !== vnode.attrs.selectedDomain.domain) {\n\t\t\tthis.verifyMailAddress(vnode.attrs)\n\t\t}\n\t\tthis.lastAttrs = vnode.attrs\n\t}\n\n\tview({ attrs }: Vnode<SelectMailAddressFormAttrs>): Children {\n\t\t// this is a semi-good hack to reset the username after the user pressed \"ok\"\n\t\t// this behavior is not necessarily expected, e.g. if the user enters an invalid email address and presses \"ok\" we might not want to clear the\n\t\t// username field. we would need to find a way to clear the field from the outside to solve this.\n\t\tif (attrs.injectionsRightButtonAttrs?.click) {\n\t\t\tconst originalCallback = attrs.injectionsRightButtonAttrs.click\n\n\t\t\tattrs.injectionsRightButtonAttrs.click = (event, dom) => {\n\t\t\t\toriginalCallback(event, dom)\n\t\t\t\tthis.username = \"\"\n\t\t\t\tthis.messageId = \"mailAddressNeutral_msg\"\n\t\t\t}\n\t\t}\n\n\t\treturn m(TextField, {\n\t\t\tlabel: \"mailAddress_label\",\n\t\t\tvalue: this.username,\n\t\t\talignRight: true,\n\t\t\tautocompleteAs: Autocomplete.newPassword,\n\t\t\tautocapitalize: Autocapitalize.none,\n\t\t\thelpLabel: () => this.addressHelpLabel(),\n\t\t\tfontSize: px(size.font_size_smaller),\n\t\t\toninput: (value) => {\n\t\t\t\tthis.username = value\n\t\t\t\tthis.verifyMailAddress(attrs)\n\t\t\t},\n\t\t\tinjectionsRight: () => [\n\t\t\t\tm(\n\t\t\t\t\t\".flex.items-end.align-self-end\",\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\"padding-bottom\": \"1px\",\n\t\t\t\t\t\t\tflex: \"1 1 auto\",\n\t\t\t\t\t\t\tfontSize: px(size.font_size_smaller),\n\t\t\t\t\t\t\tlineHeight: px(inputLineHeight),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t`@${attrs.selectedDomain.domain}`,\n\t\t\t\t),\n\t\t\t\tattrs.availableDomains.length > 1\n\t\t\t\t\t? m(\n\t\t\t\t\t\t\tIconButton,\n\t\t\t\t\t\t\tattachDropdown({\n\t\t\t\t\t\t\t\tmainButtonAttrs: {\n\t\t\t\t\t\t\t\t\ttitle: \"domain_label\",\n\t\t\t\t\t\t\t\t\ticon: BootIcons.Expand,\n\t\t\t\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tchildAttrs: () => attrs.availableDomains.map((domain) => this.createDropdownItemAttrs(domain, attrs)),\n\t\t\t\t\t\t\t\tshowDropdown: () => true,\n\t\t\t\t\t\t\t\twidth: 250,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t  )\n\t\t\t\t\t: attrs.injectionsRightButtonAttrs\n\t\t\t\t\t? m(IconButton, attrs.injectionsRightButtonAttrs)\n\t\t\t\t\t: null,\n\t\t\t],\n\t\t})\n\t}\n\n\tprivate getCleanMailAddress(attrs: SelectMailAddressFormAttrs) {\n\t\treturn formatMailAddressFromParts(this.username, attrs.selectedDomain.domain)\n\t}\n\n\tprivate addressHelpLabel(): Children {\n\t\treturn this.isVerificationBusy\n\t\t\t? m(\".flex.items-center.mt-s\", [this.progressIcon(), lang.get(\"mailAddressBusy_msg\")])\n\t\t\t: m(\".mt-s\", lang.get(this.messageId ?? VALID_MESSAGE_ID))\n\t}\n\n\tprivate progressIcon(): Children {\n\t\treturn m(Icon, {\n\t\t\ticon: BootIcons.Progress,\n\t\t\tclass: \"icon-progress mr-s\",\n\t\t})\n\t}\n\n\tprivate createDropdownItemAttrs(domainData: EmailDomainData, attrs: SelectMailAddressFormAttrs): DropdownButtonAttrs {\n\t\treturn {\n\t\t\tlabel: lang.makeTranslation(\"domain\", domainData.domain),\n\t\t\tclick: () => {\n\t\t\t\tattrs.onDomainChanged(domainData)\n\t\t\t},\n\t\t\ticon: domainData.isPaid ? BootIcons.Premium : undefined,\n\t\t}\n\t}\n\n\tprivate onBusyStateChanged(isBusy: boolean, onBusyStateChanged: (arg0: boolean) => unknown): void {\n\t\tthis.isVerificationBusy = isBusy\n\t\tonBusyStateChanged(isBusy)\n\t\tm.redraw()\n\t}\n\n\tprivate onValidationFinished(\n\t\temail: string,\n\t\tvalidationResult: ValidationResult,\n\t\tonValidationResult: SelectMailAddressFormAttrs[\"onValidationResult\"],\n\t): void {\n\t\tthis.messageId = validationResult.errorId\n\t\tonValidationResult(email, validationResult)\n\t}\n\n\tprivate verifyMailAddress(attrs: SelectMailAddressFormAttrs) {\n\t\tconst { onValidationResult, onBusyStateChanged } = attrs\n\t\tif (this.checkAddressTimeout) clearTimeout(this.checkAddressTimeout)\n\n\t\tconst cleanMailAddress = this.getCleanMailAddress(attrs)\n\t\tconst cleanUsername = this.username.trim().toLowerCase()\n\n\t\tif (cleanUsername === \"\") {\n\t\t\tthis.onValidationFinished(\n\t\t\t\tcleanMailAddress,\n\t\t\t\t{\n\t\t\t\t\tisValid: false,\n\t\t\t\t\terrorId: \"mailAddressNeutral_msg\",\n\t\t\t\t},\n\t\t\t\tonValidationResult,\n\t\t\t)\n\t\t\tthis.onBusyStateChanged(false, onBusyStateChanged)\n\n\t\t\treturn\n\t\t} else if (!isMailAddress(cleanMailAddress, true) || (isTutaMailAddress(cleanMailAddress) && cleanUsername.length < 3)) {\n\t\t\tthis.onValidationFinished(\n\t\t\t\tcleanMailAddress,\n\t\t\t\t{\n\t\t\t\t\tisValid: false,\n\t\t\t\t\terrorId: \"mailAddressInvalid_msg\",\n\t\t\t\t},\n\t\t\t\tonValidationResult,\n\t\t\t)\n\t\t\tthis.onBusyStateChanged(false, onBusyStateChanged)\n\n\t\t\treturn\n\t\t}\n\n\t\tthis.onBusyStateChanged(true, onBusyStateChanged)\n\n\t\tthis.checkAddressTimeout = setTimeout(async () => {\n\t\t\tif (this.getCleanMailAddress(attrs) !== cleanMailAddress) return\n\n\t\t\tlet result: ValidationResult\n\t\t\ttry {\n\t\t\t\tconst available = await locator.mailAddressFacade.isMailAddressAvailable(cleanMailAddress)\n\t\t\t\tresult = available\n\t\t\t\t\t? { isValid: true, errorId: null }\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tisValid: false,\n\t\t\t\t\t\t\terrorId: attrs.mailAddressNAError ?? \"mailAddressNA_msg\",\n\t\t\t\t\t  }\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof AccessDeactivatedError) {\n\t\t\t\t\tresult = { isValid: false, errorId: \"mailAddressDelay_msg\" }\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (this.getCleanMailAddress(attrs) === cleanMailAddress) {\n\t\t\t\t\tthis.onBusyStateChanged(false, onBusyStateChanged)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.getCleanMailAddress(attrs) === cleanMailAddress) {\n\t\t\t\tthis.onValidationFinished(cleanMailAddress, result, onValidationResult)\n\t\t\t}\n\t\t}, 500)\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport { Autocomplete, TextField } from \"../gui/base/TextField.js\"\nimport { getWhitelabelRegistrationDomains } from \"../login/LoginView.js\"\nimport type { NewAccountData } from \"./UpgradeSubscriptionWizard\"\nimport { SelectMailAddressForm, SelectMailAddressFormAttrs } from \"../../common/settings/SelectMailAddressForm.js\"\nimport {\n\tAccountType,\n\tDEFAULT_FREE_MAIL_ADDRESS_SIGNUP_DOMAIN,\n\tDEFAULT_PAID_MAIL_ADDRESS_SIGNUP_DOMAIN,\n\tTUTA_MAIL_ADDRESS_SIGNUP_DOMAINS,\n} from \"../api/common/TutanotaConstants\"\n\nimport type { CheckboxAttrs } from \"../gui/base/Checkbox.js\"\nimport { Checkbox } from \"../gui/base/Checkbox.js\"\nimport type { lazy } from \"@tutao/tutanota-utils\"\nimport { getFirstOrThrow, ofClass } from \"@tutao/tutanota-utils\"\nimport type { TranslationKey } from \"../misc/LanguageViewModel\"\nimport { InfoLink, lang } from \"../misc/LanguageViewModel\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport { InvalidDataError } from \"../api/common/error/RestError\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { CURRENT_PRIVACY_VERSION, CURRENT_TERMS_VERSION, renderTermsAndConditionsButton, TermsSection } from \"./TermsAndConditions\"\nimport { UsageTest } from \"@tutao/tutanota-usagetests\"\nimport { runCaptchaFlow } from \"./Captcha.js\"\nimport { EmailDomainData, isPaidPlanDomain } from \"../settings/mailaddress/MailAddressesUtils.js\"\nimport { LoginButton } from \"../gui/base/buttons/LoginButton.js\"\nimport { ExternalLink } from \"../gui/base/ExternalLink.js\"\nimport { PasswordForm, PasswordModel } from \"../settings/PasswordForm.js\"\nimport { client } from \"../misc/ClientDetector\"\nimport { SubscriptionApp } from \"./SubscriptionViewer\"\n\nexport type SignupFormAttrs = {\n\t/** Handle a new account signup. if readonly then the argument will always be null */\n\tonComplete: (arg0: NewAccountData | null) => void\n\tonChangePlan: () => void\n\tisBusinessUse: lazy<boolean>\n\tisPaidSubscription: lazy<boolean>\n\tcampaign: lazy<string | null>\n\t// only used if readonly is true\n\tprefilledMailAddress?: string | undefined\n\treadonly: boolean\n}\n\nexport class SignupForm implements Component<SignupFormAttrs> {\n\tprivate readonly passwordModel: PasswordModel\n\tprivate readonly _confirmTerms: Stream<boolean>\n\tprivate readonly _confirmAge: Stream<boolean>\n\tprivate readonly _code: Stream<string>\n\tprivate selectedDomain: EmailDomainData\n\tprivate _mailAddressFormErrorId: TranslationKey | null = null\n\tprivate _mailAddress!: string\n\tprivate _isMailVerificationBusy: boolean\n\tprivate readonly __mailValid: Stream<boolean>\n\tprivate readonly __lastMailValidationError: Stream<TranslationKey | null>\n\tprivate __signupFreeTest?: UsageTest\n\tprivate __signupPaidTest?: UsageTest\n\n\tprivate readonly availableDomains: readonly EmailDomainData[] = (locator.domainConfigProvider().getCurrentDomainConfig().firstPartyDomain\n\t\t? TUTA_MAIL_ADDRESS_SIGNUP_DOMAINS\n\t\t: getWhitelabelRegistrationDomains()\n\t).map((domain) => ({ domain, isPaid: isPaidPlanDomain(domain) }))\n\n\tconstructor(vnode: Vnode<SignupFormAttrs>) {\n\t\tthis.selectedDomain = getFirstOrThrow(this.availableDomains)\n\t\t// tuta.com gets preference user is signing up for a paid account and it is available\n\t\tif (vnode.attrs.isPaidSubscription()) {\n\t\t\tthis.selectedDomain = this.availableDomains.find((domain) => domain.domain === DEFAULT_PAID_MAIL_ADDRESS_SIGNUP_DOMAIN) ?? this.selectedDomain\n\t\t} else {\n\t\t\tthis.selectedDomain = this.availableDomains.find((domain) => domain.domain === DEFAULT_FREE_MAIL_ADDRESS_SIGNUP_DOMAIN) ?? this.selectedDomain\n\t\t}\n\n\t\tthis.__mailValid = stream(false)\n\t\tthis.__lastMailValidationError = stream(null)\n\t\tthis.passwordModel = new PasswordModel(\n\t\t\tlocator.usageTestController,\n\t\t\tlocator.logins,\n\t\t\t{\n\t\t\t\tcheckOldPassword: false,\n\t\t\t\tenforceStrength: true,\n\t\t\t\treservedStrings: () => (this._mailAddress ? [this._mailAddress.split(\"@\")[0]] : []),\n\t\t\t},\n\t\t\tthis.__mailValid,\n\t\t)\n\n\t\tthis.__signupFreeTest = locator.usageTestController.getTest(\"signup.free\")\n\t\tthis.__signupPaidTest = locator.usageTestController.getTest(\"signup.paid\")\n\n\t\tthis._confirmTerms = stream<boolean>(false)\n\t\tthis._confirmAge = stream<boolean>(false)\n\t\tthis._code = stream(\"\")\n\t\tthis._isMailVerificationBusy = false\n\t\tthis._mailAddressFormErrorId = \"mailAddressNeutral_msg\"\n\t}\n\n\tview(vnode: Vnode<SignupFormAttrs>): Children {\n\t\tconst a = vnode.attrs\n\n\t\tconst mailAddressFormAttrs: SelectMailAddressFormAttrs = {\n\t\t\tselectedDomain: this.selectedDomain,\n\t\t\tonDomainChanged: (domain) => {\n\t\t\t\tif (!domain.isPaid || a.isPaidSubscription()) {\n\t\t\t\t\tthis.selectedDomain = domain\n\t\t\t\t} else {\n\t\t\t\t\tDialog.confirm(lang.makeTranslation(\"confirm_msg\", `${lang.get(\"paidEmailDomainSignup_msg\")}\\n${lang.get(\"changePaidPlan_msg\")}`)).then(\n\t\t\t\t\t\t(confirmed) => {\n\t\t\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\t\t\tvnode.attrs.onChangePlan()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t},\n\t\t\tavailableDomains: this.availableDomains,\n\t\t\tonValidationResult: (email, validationResult) => {\n\t\t\t\tthis.__mailValid(validationResult.isValid)\n\n\t\t\t\tif (validationResult.isValid) {\n\t\t\t\t\tthis._mailAddress = email\n\t\t\t\t\tthis.passwordModel.recalculatePasswordStrength()\n\t\t\t\t\tthis._mailAddressFormErrorId = null\n\t\t\t\t} else {\n\t\t\t\t\tthis._mailAddressFormErrorId = validationResult.errorId\n\t\t\t\t}\n\t\t\t},\n\t\t\tonBusyStateChanged: (isBusy) => {\n\t\t\t\tthis._isMailVerificationBusy = isBusy\n\t\t\t},\n\t\t}\n\t\tconst confirmTermsCheckBoxAttrs: CheckboxAttrs = {\n\t\t\tlabel: renderTermsLabel,\n\t\t\tchecked: this._confirmTerms(),\n\t\t\tonChecked: this._confirmTerms,\n\t\t}\n\t\tconst confirmAgeCheckBoxAttrs: CheckboxAttrs = {\n\t\t\tlabel: () => lang.get(\"ageConfirmation_msg\"),\n\t\t\tchecked: this._confirmAge(),\n\t\t\tonChecked: this._confirmAge,\n\t\t}\n\n\t\tconst submit = () => {\n\t\t\tif (this._isMailVerificationBusy) return\n\n\t\t\tif (a.readonly) {\n\t\t\t\t// Email field is read-only, account has already been created but user switched from different subscription.\n\t\t\t\tthis.__completePreviousStages()\n\n\t\t\t\treturn a.onComplete(null)\n\t\t\t}\n\n\t\t\tconst errorMessage =\n\t\t\t\tthis._mailAddressFormErrorId || this.passwordModel.getErrorMessageId() || (!this._confirmTerms() ? \"termsAcceptedNeutral_msg\" : null)\n\n\t\t\tif (errorMessage) {\n\t\t\t\tDialog.message(errorMessage)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst ageConfirmPromise = this._confirmAge() ? Promise.resolve(true) : Dialog.confirm(\"parentConfirmation_msg\", \"paymentDataValidation_action\")\n\t\t\tageConfirmPromise.then((confirmed) => {\n\t\t\t\tif (confirmed) {\n\t\t\t\t\tthis.__completePreviousStages()\n\n\t\t\t\t\treturn signup(\n\t\t\t\t\t\tthis._mailAddress,\n\t\t\t\t\t\tthis.passwordModel.getNewPassword(),\n\t\t\t\t\t\tthis._code(),\n\t\t\t\t\t\ta.isBusinessUse(),\n\t\t\t\t\t\ta.isPaidSubscription(),\n\t\t\t\t\t\ta.campaign(),\n\t\t\t\t\t).then((newAccountData) => {\n\t\t\t\t\t\ta.onComplete(newAccountData ? newAccountData : null)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\treturn m(\n\t\t\t\"#signup-account-dialog.flex-center\",\n\t\t\tm(\".flex-grow-shrink-auto.max-width-m.pt.pb.plr-l\", [\n\t\t\t\ta.readonly\n\t\t\t\t\t? m(TextField, {\n\t\t\t\t\t\t\tlabel: \"mailAddress_label\",\n\t\t\t\t\t\t\tvalue: a.prefilledMailAddress ?? \"\",\n\t\t\t\t\t\t\tautocompleteAs: Autocomplete.newPassword,\n\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t  })\n\t\t\t\t\t: [\n\t\t\t\t\t\t\tm(SelectMailAddressForm, mailAddressFormAttrs), // Leave as is\n\t\t\t\t\t\t\ta.isPaidSubscription()\n\t\t\t\t\t\t\t\t? m(\".small.mt-s\", lang.get(\"configureCustomDomainAfterSignup_msg\"), [\n\t\t\t\t\t\t\t\t\t\tm(ExternalLink, { href: InfoLink.DomainInfo, isCompanySite: true }),\n\t\t\t\t\t\t\t\t  ])\n\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\tm(PasswordForm, {\n\t\t\t\t\t\t\t\tmodel: this.passwordModel,\n\t\t\t\t\t\t\t\tpasswordInfoKey: \"passwordImportance_msg\",\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tgetWhitelabelRegistrationDomains().length > 0\n\t\t\t\t\t\t\t\t? m(TextField, {\n\t\t\t\t\t\t\t\t\t\tvalue: this._code(),\n\t\t\t\t\t\t\t\t\t\toninput: this._code,\n\t\t\t\t\t\t\t\t\t\tlabel: \"whitelabelRegistrationCode_label\",\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\tm(Checkbox, confirmTermsCheckBoxAttrs),\n\t\t\t\t\t\t\tm(\"div\", renderTermsAndConditionsButton(TermsSection.Terms, CURRENT_TERMS_VERSION)),\n\t\t\t\t\t\t\tm(\"div\", renderTermsAndConditionsButton(TermsSection.Privacy, CURRENT_PRIVACY_VERSION)),\n\t\t\t\t\t\t\tm(Checkbox, confirmAgeCheckBoxAttrs),\n\t\t\t\t\t  ],\n\t\t\t\tm(\n\t\t\t\t\t\".mt-l.mb-l\",\n\t\t\t\t\tm(LoginButton, {\n\t\t\t\t\t\tlabel: \"next_action\",\n\t\t\t\t\t\tonclick: submit,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t]),\n\t\t)\n\t}\n\n\tprivate async __completePreviousStages() {\n\t\t// Only the started test's (either free or paid clicked) stages are completed here\n\t\tif (this.__signupFreeTest) {\n\t\t\t// Make sure that the previous two pings (valid email + valid passwords) have been sent in the correct order\n\t\t\tawait this.__signupFreeTest.getStage(2).complete()\n\t\t\tawait this.__signupFreeTest.getStage(3).complete()\n\n\t\t\t// Credentials confirmation (click on next)\n\t\t\tawait this.__signupFreeTest.getStage(4).complete()\n\t\t}\n\n\t\tif (this.__signupPaidTest) {\n\t\t\t// Make sure that the previous two pings (valid email + valid passwords) have been sent in the correct order\n\t\t\tawait this.__signupPaidTest.getStage(1).complete()\n\t\t\tawait this.__signupPaidTest.getStage(2).complete()\n\n\t\t\t// Credentials confirmation (click on next)\n\t\t\tawait this.__signupPaidTest.getStage(3).complete()\n\t\t}\n\t}\n}\n\nfunction renderTermsLabel(): Children {\n\treturn lang.get(\"termsAndConditions_label\")\n}\n\n/**\n * @return Signs the user up, if no captcha is needed or it has been solved correctly\n */\nfunction signup(\n\tmailAddress: string,\n\tpw: string,\n\tregistrationCode: string,\n\tisBusinessUse: boolean,\n\tisPaidSubscription: boolean,\n\tcampaign: string | null,\n): Promise<NewAccountData | void> {\n\tconst { customerFacade } = locator\n\tconst operation = locator.operationProgressTracker.startNewOperation()\n\treturn showProgressDialog(\n\t\t\"createAccountRunning_msg\",\n\t\tcustomerFacade.generateSignupKeys(operation.id).then((keyPairs) => {\n\t\t\treturn runCaptchaFlow(mailAddress, isBusinessUse, isPaidSubscription, campaign).then(async (regDataId) => {\n\t\t\t\tif (regDataId) {\n\t\t\t\t\tconst app = client.isCalendarApp() ? SubscriptionApp.Calendar : SubscriptionApp.Mail\n\t\t\t\t\treturn customerFacade\n\t\t\t\t\t\t.signup(keyPairs, AccountType.FREE, regDataId, mailAddress, pw, registrationCode, lang.code, app)\n\t\t\t\t\t\t.then((recoverCode) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tmailAddress,\n\t\t\t\t\t\t\t\tpassword: pw,\n\t\t\t\t\t\t\t\trecoverCode,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t}),\n\t\toperation.progress,\n\t)\n\t\t.catch(\n\t\t\tofClass(InvalidDataError, () => {\n\t\t\t\tDialog.message(\"invalidRegistrationCode_msg\")\n\t\t\t}),\n\t\t)\n\t\t.finally(() => operation.done())\n}\n","import m, { Children, Vnode, VnodeDOM } from \"mithril\"\nimport type { UpgradeSubscriptionData } from \"./UpgradeSubscriptionWizard\"\nimport type { WizardPageAttrs, WizardPageN } from \"../gui/base/WizardDialog.js\"\nimport { emitWizardEvent, WizardEventType } from \"../gui/base/WizardDialog.js\"\nimport { SignupForm } from \"./SignupForm\"\nimport { getDisplayNameOfPlanType } from \"./FeatureListProvider\"\nimport { PlanType } from \"../api/common/TutanotaConstants.js\"\nimport { lang, Translation, TranslationKey } from \"../misc/LanguageViewModel.js\"\n\nexport class SignupPage implements WizardPageN<UpgradeSubscriptionData> {\n\tprivate dom!: HTMLElement\n\n\toncreate(vnode: VnodeDOM<WizardPageAttrs<UpgradeSubscriptionData>>) {\n\t\tthis.dom = vnode.dom as HTMLElement\n\t}\n\n\tview(vnode: Vnode<WizardPageAttrs<UpgradeSubscriptionData>>): Children {\n\t\tconst data = vnode.attrs.data\n\t\tconst newAccountData = data.newAccountData\n\t\tlet mailAddress: undefined | string = undefined\n\t\tif (newAccountData) mailAddress = newAccountData.mailAddress\n\t\treturn m(SignupForm, {\n\t\t\tonComplete: (newAccountData) => {\n\t\t\t\tif (newAccountData) data.newAccountData = newAccountData\n\t\t\t\temitWizardEvent(this.dom, WizardEventType.SHOW_NEXT_PAGE)\n\t\t\t},\n\t\t\tonChangePlan: () => {\n\t\t\t\temitWizardEvent(this.dom, WizardEventType.SHOW_PREVIOUS_PAGE)\n\t\t\t},\n\t\t\tisBusinessUse: data.options.businessUse,\n\t\t\tisPaidSubscription: () => data.type !== PlanType.Free,\n\t\t\tcampaign: () => data.registrationDataId,\n\t\t\tprefilledMailAddress: mailAddress,\n\t\t\treadonly: !!newAccountData,\n\t\t})\n\t}\n}\n\nexport class SignupPageAttrs implements WizardPageAttrs<UpgradeSubscriptionData> {\n\tdata: UpgradeSubscriptionData\n\n\tconstructor(signupData: UpgradeSubscriptionData) {\n\t\tthis.data = signupData\n\t}\n\n\theaderTitle(): Translation {\n\t\tconst title = getDisplayNameOfPlanType(this.data.type)\n\n\t\tif (this.data.type === PlanType.Essential || this.data.type === PlanType.Advanced) {\n\t\t\treturn lang.makeTranslation(\"signup_business\", title + \" Business\")\n\t\t} else {\n\t\t\treturn lang.makeTranslation(\"signup_title\", title)\n\t\t}\n\t}\n\n\tnextAction(showErrorDialog: boolean): Promise<boolean> {\n\t\t// next action not available for this page\n\t\treturn Promise.resolve(true)\n\t}\n\n\tisSkipAvailable(): boolean {\n\t\treturn false\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn true\n\t}\n}\n","/* generated file, don't edit. */\n\nexport const enum MobilePaymentResultType {\n\tSuccess = \"0\",\n\tCancelled = \"1\",\n\tPending = \"2\",\n}\n","import m, { Children, Vnode, VnodeDOM } from \"mithril\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport { formatPriceWithInfo, getPaymentMethodName, PaymentInterval } from \"./PriceUtils\"\nimport { createSwitchAccountTypePostIn } from \"../api/entities/sys/TypeRefs.js\"\nimport { AccountType, Const, PaymentMethodType, PaymentMethodTypeToName } from \"../api/common/TutanotaConstants\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport type { UpgradeSubscriptionData } from \"./UpgradeSubscriptionWizard\"\nimport { BadGatewayError, PreconditionFailedError } from \"../api/common/error/RestError\"\nimport { appStorePlanName, getPreconditionFailedPaymentMsg, UpgradeType } from \"./SubscriptionUtils\"\nimport type { WizardPageAttrs, WizardPageN } from \"../gui/base/WizardDialog.js\"\nimport { emitWizardEvent, WizardEventType } from \"../gui/base/WizardDialog.js\"\nimport { TextField } from \"../gui/base/TextField.js\"\nimport { base64ExtToBase64, base64ToUint8Array, neverNull, ofClass } from \"@tutao/tutanota-utils\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { SwitchAccountTypeService } from \"../api/entities/sys/Services\"\nimport { UsageTest } from \"@tutao/tutanota-usagetests\"\nimport { getDisplayNameOfPlanType, SelectedSubscriptionOptions } from \"./FeatureListProvider\"\nimport { LoginButton } from \"../gui/base/buttons/LoginButton.js\"\nimport { MobilePaymentResultType } from \"../native/common/generatedipc/MobilePaymentResultType\"\nimport { updatePaymentData } from \"./InvoiceAndPaymentDataPage\"\nimport { SessionType } from \"../api/common/SessionType\"\nimport { MobilePaymentError } from \"../api/common/error/MobilePaymentError.js\"\nimport { getRatingAllowed, RatingCheckResult } from \"../ratings/InAppRatingUtils.js\"\nimport { showAppRatingDialog } from \"../ratings/InAppRatingDialog.js\"\nimport { deviceConfig } from \"../misc/DeviceConfig.js\"\nimport { isIOSApp } from \"../api/common/Env.js\"\nimport { client } from \"../misc/ClientDetector.js\"\nimport { SubscriptionApp } from \"./SubscriptionViewer.js\"\n\nexport class UpgradeConfirmSubscriptionPage implements WizardPageN<UpgradeSubscriptionData> {\n\tprivate dom!: HTMLElement\n\tprivate __signupPaidTest?: UsageTest\n\tprivate __signupFreeTest?: UsageTest\n\n\toncreate(vnode: VnodeDOM<WizardPageAttrs<UpgradeSubscriptionData>>) {\n\t\tthis.__signupPaidTest = locator.usageTestController.getTest(\"signup.paid\")\n\t\tthis.__signupFreeTest = locator.usageTestController.getTest(\"signup.free\")\n\n\t\tthis.dom = vnode.dom as HTMLElement\n\t}\n\n\tview({ attrs }: Vnode<WizardPageAttrs<UpgradeSubscriptionData>>): Children {\n\t\treturn this.renderConfirmSubscription(attrs)\n\t}\n\n\tprivate async upgrade(data: UpgradeSubscriptionData) {\n\t\t// We return early because we do the upgrade after the user has submitted payment which is on the confirmation page\n\t\tif (data.paymentData.paymentMethod === PaymentMethodType.AppStore) {\n\t\t\tconst success = await this.handleAppStorePayment(data)\n\t\t\tif (!success) {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tconst serviceData = createSwitchAccountTypePostIn({\n\t\t\taccountType: AccountType.PAID,\n\t\t\tcustomer: null,\n\t\t\tplan: data.type,\n\t\t\tdate: Const.CURRENT_DATE,\n\t\t\treferralCode: data.referralCode,\n\t\t\tspecialPriceUserSingle: null,\n\t\t\tsurveyData: null,\n\t\t\tapp: client.isCalendarApp() ? SubscriptionApp.Calendar : SubscriptionApp.Mail,\n\t\t})\n\t\tshowProgressDialog(\n\t\t\t\"pleaseWait_msg\",\n\t\t\tlocator.serviceExecutor.post(SwitchAccountTypeService, serviceData).then(() => {\n\t\t\t\treturn locator.customerFacade.switchFreeToPremiumGroup()\n\t\t\t}),\n\t\t)\n\t\t\t.then(() => {\n\t\t\t\t// Order confirmation (click on Buy), send selected payment method as an enum\n\t\t\t\tconst orderConfirmationStage = this.__signupPaidTest?.getStage(5)\n\t\t\t\torderConfirmationStage?.setMetric({\n\t\t\t\t\tname: \"paymentMethod\",\n\t\t\t\t\tvalue: PaymentMethodTypeToName[data.paymentData.paymentMethod],\n\t\t\t\t})\n\t\t\t\torderConfirmationStage?.setMetric({\n\t\t\t\t\tname: \"switchedFromFree\",\n\t\t\t\t\tvalue: (this.__signupFreeTest?.isStarted() ?? false).toString(),\n\t\t\t\t})\n\t\t\t\torderConfirmationStage?.complete()\n\n\t\t\t\treturn this.close(data, this.dom)\n\t\t\t})\n\t\t\t.then(async () => {\n\t\t\t\tconst ratingCheckResult = await getRatingAllowed(new Date(), deviceConfig, isIOSApp())\n\t\t\t\tif (ratingCheckResult === RatingCheckResult.RATING_ALLOWED) {\n\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\tvoid showAppRatingDialog()\n\t\t\t\t\t}, 2000)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(\n\t\t\t\tofClass(PreconditionFailedError, (e) => {\n\t\t\t\t\tDialog.message(\n\t\t\t\t\t\tlang.makeTranslation(\n\t\t\t\t\t\t\t\"precondition_failed\",\n\t\t\t\t\t\t\tlang.get(getPreconditionFailedPaymentMsg(e.data)) +\n\t\t\t\t\t\t\t\t(data.upgradeType === UpgradeType.Signup ? \" \" + lang.get(\"accountWasStillCreated_msg\") : \"\"),\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(BadGatewayError, (e) => {\n\t\t\t\t\tDialog.message(\n\t\t\t\t\t\tlang.makeTranslation(\n\t\t\t\t\t\t\t\"payment_failed\",\n\t\t\t\t\t\t\tlang.get(\"paymentProviderNotAvailableError_msg\") +\n\t\t\t\t\t\t\t\t(data.upgradeType === UpgradeType.Signup ? \" \" + lang.get(\"accountWasStillCreated_msg\") : \"\"),\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t}),\n\t\t\t)\n\t}\n\n\t/** @return whether subscribed successfully */\n\tprivate async handleAppStorePayment(data: UpgradeSubscriptionData): Promise<boolean> {\n\t\tif (!locator.logins.isUserLoggedIn()) {\n\t\t\tawait locator.logins.createSession(neverNull(data.newAccountData).mailAddress, neverNull(data.newAccountData).password, SessionType.Temporary)\n\t\t}\n\n\t\tconst customerId = locator.logins.getUserController().user.customer!\n\t\tconst customerIdBytes = base64ToUint8Array(base64ExtToBase64(customerId))\n\n\t\ttry {\n\t\t\tconst result = await showProgressDialog(\n\t\t\t\t\"pleaseWait_msg\",\n\t\t\t\tlocator.mobilePaymentsFacade.requestSubscriptionToPlan(appStorePlanName(data.type), data.options.paymentInterval(), customerIdBytes),\n\t\t\t)\n\t\t\tif (result.result !== MobilePaymentResultType.Success) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (e instanceof MobilePaymentError) {\n\t\t\t\tconsole.error(\"AppStore subscription failed\", e)\n\t\t\t\tDialog.message(\"appStoreSubscriptionError_msg\", e.message)\n\t\t\t\treturn false\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\n\t\treturn await updatePaymentData(\n\t\t\tdata.options.paymentInterval(),\n\t\t\tdata.invoiceData,\n\t\t\tdata.paymentData,\n\t\t\tnull,\n\t\t\tdata.newAccountData != null,\n\t\t\tnull,\n\t\t\tdata.accountingInfo!,\n\t\t)\n\t}\n\n\tprivate renderConfirmSubscription(attrs: WizardPageAttrs<UpgradeSubscriptionData>) {\n\t\tconst isYearly = attrs.data.options.paymentInterval() === PaymentInterval.Yearly\n\t\tconst subscription = isYearly ? lang.get(\"pricing.yearly_label\") : lang.get(\"pricing.monthly_label\")\n\n\t\treturn [\n\t\t\tm(\".center.h4.pt\", lang.get(\"upgradeConfirm_msg\")),\n\t\t\tm(\".pt.pb.plr-l\", [\n\t\t\t\tm(TextField, {\n\t\t\t\t\tlabel: \"subscription_label\",\n\t\t\t\t\tvalue: getDisplayNameOfPlanType(attrs.data.type),\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t}),\n\t\t\t\tm(TextField, {\n\t\t\t\t\tlabel: \"paymentInterval_label\",\n\t\t\t\t\tvalue: subscription,\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t}),\n\t\t\t\tm(TextField, {\n\t\t\t\t\tlabel: isYearly && attrs.data.nextYearPrice ? \"priceFirstYear_label\" : \"price_label\",\n\t\t\t\t\tvalue: buildPriceString(attrs.data.price?.displayPrice ?? \"0\", attrs.data.options),\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t}),\n\t\t\t\tthis.renderPriceNextYear(attrs),\n\t\t\t\tm(TextField, {\n\t\t\t\t\tlabel: \"paymentMethod_label\",\n\t\t\t\t\tvalue: getPaymentMethodName(attrs.data.paymentData.paymentMethod),\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t}),\n\t\t\t]),\n\t\t\tm(\n\t\t\t\t\".smaller.center.pt-l\",\n\t\t\t\tattrs.data.options.businessUse()\n\t\t\t\t\t? lang.get(\"pricing.subscriptionPeriodInfoBusiness_msg\")\n\t\t\t\t\t: lang.get(\"pricing.subscriptionPeriodInfoPrivate_msg\"),\n\t\t\t),\n\t\t\tm(\n\t\t\t\t\".flex-center.full-width.pt-l\",\n\t\t\t\tm(LoginButton, {\n\t\t\t\t\tlabel: \"buy_action\",\n\t\t\t\t\tclass: \"small-login-button\",\n\t\t\t\t\tonclick: () => this.upgrade(attrs.data),\n\t\t\t\t}),\n\t\t\t),\n\t\t]\n\t}\n\n\tprivate renderPriceNextYear(attrs: WizardPageAttrs<UpgradeSubscriptionData>) {\n\t\treturn attrs.data.nextYearPrice\n\t\t\t? m(TextField, {\n\t\t\t\t\tlabel: \"priceForNextYear_label\",\n\t\t\t\t\tvalue: buildPriceString(attrs.data.nextYearPrice.displayPrice, attrs.data.options),\n\t\t\t\t\tisReadOnly: true,\n\t\t\t  })\n\t\t\t: null\n\t}\n\n\tprivate close(data: UpgradeSubscriptionData, dom: HTMLElement) {\n\t\temitWizardEvent(dom, WizardEventType.SHOW_NEXT_PAGE)\n\t}\n}\n\nfunction buildPriceString(price: string, options: SelectedSubscriptionOptions): string {\n\treturn formatPriceWithInfo(price, options.paymentInterval(), !options.businessUse())\n}\n","import type { Hex } from \"@tutao/tutanota-utils\"\nimport { defer } from \"@tutao/tutanota-utils\"\nimport { AccountingInfo, Customer } from \"../api/entities/sys/TypeRefs.js\"\nimport {\n\tAvailablePlans,\n\tAvailablePlanType,\n\tgetDefaultPaymentMethod,\n\tgetPaymentMethodType,\n\tInvoiceData,\n\tNewPaidPlans,\n\tPaymentData,\n\tPlanType,\n} from \"../api/common/TutanotaConstants\"\nimport { getByAbbreviation } from \"../api/common/CountryList\"\nimport { UpgradeSubscriptionPage, UpgradeSubscriptionPageAttrs } from \"./UpgradeSubscriptionPage\"\nimport m from \"mithril\"\nimport stream from \"mithril/stream\"\nimport { InfoLink, lang, TranslationKey, MaybeTranslation } from \"../misc/LanguageViewModel\"\nimport { createWizardDialog, wizardPageWrapper } from \"../gui/base/WizardDialog.js\"\nimport { InvoiceAndPaymentDataPage, InvoiceAndPaymentDataPageAttrs } from \"./InvoiceAndPaymentDataPage\"\nimport { UpgradeCongratulationsPage, UpgradeCongratulationsPageAttrs } from \"./UpgradeCongratulationsPage.js\"\nimport { SignupPage, SignupPageAttrs } from \"./SignupPage\"\nimport { assertMainOrNode, isIOSApp } from \"../api/common/Env\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { StorageBehavior } from \"../misc/UsageTestModel\"\nimport { FeatureListProvider, SelectedSubscriptionOptions } from \"./FeatureListProvider\"\nimport { queryAppStoreSubscriptionOwnership, UpgradeType } from \"./SubscriptionUtils\"\nimport { UpgradeConfirmSubscriptionPage } from \"./UpgradeConfirmSubscriptionPage.js\"\nimport { asPaymentInterval, PaymentInterval, PriceAndConfigProvider, SubscriptionPrice } from \"./PriceUtils\"\nimport { formatNameAndAddress } from \"../api/common/utils/CommonFormatter.js\"\nimport { LoginController } from \"../api/main/LoginController.js\"\nimport { MobilePaymentSubscriptionOwnership } from \"../native/common/generatedipc/MobilePaymentSubscriptionOwnership.js\"\nimport { DialogType } from \"../gui/base/Dialog.js\"\n\nassertMainOrNode()\nexport type SubscriptionParameters = {\n\tsubscription: string | null\n\ttype: string | null\n\tinterval: string | null // typed as string because m.parseQueryString returns an object with strings\n}\n\nexport type NewAccountData = {\n\tmailAddress: string\n\trecoverCode: Hex\n\tpassword: string\n}\nexport type UpgradeSubscriptionData = {\n\toptions: SelectedSubscriptionOptions\n\tinvoiceData: InvoiceData\n\tpaymentData: PaymentData\n\ttype: PlanType\n\tprice: SubscriptionPrice | null\n\tnextYearPrice: SubscriptionPrice | null\n\taccountingInfo: AccountingInfo | null\n\t// not initially set for signup but loaded in InvoiceAndPaymentDataPage\n\tcustomer: Customer | null\n\t// not initially set for signup but loaded in InvoiceAndPaymentDataPage\n\tnewAccountData: NewAccountData | null\n\tregistrationDataId: string | null\n\tpriceInfoTextId: TranslationKey | null\n\tupgradeType: UpgradeType\n\tplanPrices: PriceAndConfigProvider\n\tcurrentPlan: PlanType | null\n\tsubscriptionParameters: SubscriptionParameters | null\n\tfeatureListProvider: FeatureListProvider\n\treferralCode: string | null\n\tmultipleUsersAllowed: boolean\n\tacceptedPlans: AvailablePlanType[]\n\tmsg: MaybeTranslation | null\n}\n\nexport async function showUpgradeWizard(logins: LoginController, acceptedPlans: AvailablePlanType[] = NewPaidPlans, msg?: MaybeTranslation): Promise<void> {\n\tconst [customer, accountingInfo] = await Promise.all([logins.getUserController().loadCustomer(), logins.getUserController().loadAccountingInfo()])\n\n\tconst priceDataProvider = await PriceAndConfigProvider.getInitializedInstance(null, locator.serviceExecutor, null)\n\n\tconst prices = priceDataProvider.getRawPricingData()\n\tconst domainConfig = locator.domainConfigProvider().getCurrentDomainConfig()\n\tconst featureListProvider = await FeatureListProvider.getInitializedInstance(domainConfig)\n\tconst upgradeData: UpgradeSubscriptionData = {\n\t\toptions: {\n\t\t\tbusinessUse: stream(prices.business),\n\t\t\tpaymentInterval: stream(asPaymentInterval(accountingInfo.paymentInterval)),\n\t\t},\n\t\tinvoiceData: {\n\t\t\tinvoiceAddress: formatNameAndAddress(accountingInfo.invoiceName, accountingInfo.invoiceAddress),\n\t\t\tcountry: accountingInfo.invoiceCountry ? getByAbbreviation(accountingInfo.invoiceCountry) : null,\n\t\t\tvatNumber: accountingInfo.invoiceVatIdNo, // only for EU countries otherwise empty\n\t\t},\n\t\tpaymentData: {\n\t\t\tpaymentMethod: getPaymentMethodType(accountingInfo) || (await getDefaultPaymentMethod()),\n\t\t\tcreditCardData: null,\n\t\t},\n\t\tprice: null,\n\t\ttype: PlanType.Revolutionary,\n\t\tnextYearPrice: null,\n\t\taccountingInfo: accountingInfo,\n\t\tcustomer: customer,\n\t\tnewAccountData: null,\n\t\tregistrationDataId: null,\n\t\tpriceInfoTextId: priceDataProvider.getPriceInfoMessage(),\n\t\tupgradeType: UpgradeType.Initial,\n\t\t// Free used to be always selected here for current plan, but resulted in it displaying \"free\" as current plan for legacy users\n\t\tcurrentPlan: logins.getUserController().isFreeAccount() ? PlanType.Free : null,\n\t\tsubscriptionParameters: null,\n\t\tplanPrices: priceDataProvider,\n\t\tfeatureListProvider: featureListProvider,\n\t\treferralCode: null,\n\t\tmultipleUsersAllowed: false,\n\t\tacceptedPlans,\n\t\tmsg: msg != null ? msg : null,\n\t}\n\n\tconst wizardPages = [\n\t\twizardPageWrapper(UpgradeSubscriptionPage, new UpgradeSubscriptionPageAttrs(upgradeData)),\n\t\twizardPageWrapper(InvoiceAndPaymentDataPage, new InvoiceAndPaymentDataPageAttrs(upgradeData)),\n\t\twizardPageWrapper(UpgradeConfirmSubscriptionPage, new InvoiceAndPaymentDataPageAttrs(upgradeData)),\n\t]\n\tif (isIOSApp()) {\n\t\twizardPages.splice(1, 1) // do not show this page on AppStore payment since we are only able to show this single payment method on iOS\n\t}\n\n\tconst deferred = defer<void>()\n\tconst wizardBuilder = createWizardDialog(\n\t\tupgradeData,\n\t\twizardPages,\n\t\tasync () => {\n\t\t\tdeferred.resolve()\n\t\t},\n\t\tDialogType.EditLarge,\n\t)\n\twizardBuilder.dialog.show()\n\treturn deferred.promise\n}\n\nexport async function loadSignupWizard(\n\tsubscriptionParameters: SubscriptionParameters | null,\n\tregistrationDataId: string | null,\n\treferralCode: string | null,\n\tacceptedPlans: AvailablePlanType[] = AvailablePlans,\n): Promise<void> {\n\tconst usageTestModel = locator.usageTestModel\n\n\tusageTestModel.setStorageBehavior(StorageBehavior.Ephemeral)\n\tlocator.usageTestController.setTests(await usageTestModel.loadActiveUsageTests())\n\n\tconst priceDataProvider = await PriceAndConfigProvider.getInitializedInstance(registrationDataId, locator.serviceExecutor, referralCode)\n\tconst prices = priceDataProvider.getRawPricingData()\n\tconst domainConfig = locator.domainConfigProvider().getCurrentDomainConfig()\n\tconst featureListProvider = await FeatureListProvider.getInitializedInstance(domainConfig)\n\n\tlet message: MaybeTranslation | null\n\tif (isIOSApp()) {\n\t\tconst appstoreSubscriptionOwnership = await queryAppStoreSubscriptionOwnership(null)\n\t\t// if we are on iOS app we only show other plans if AppStore payments are enabled and there's no subscription for this Apple ID.\n\t\tif (appstoreSubscriptionOwnership !== MobilePaymentSubscriptionOwnership.NoSubscription) {\n\t\t\tacceptedPlans = acceptedPlans.filter((plan) => plan === PlanType.Free)\n\t\t}\n\t\tmessage =\n\t\t\tappstoreSubscriptionOwnership != MobilePaymentSubscriptionOwnership.NoSubscription\n\t\t\t\t? lang.getTranslation(\"storeMultiSubscriptionError_msg\", { \"{AppStorePayment}\": InfoLink.AppStorePayment })\n\t\t\t\t: null\n\t} else {\n\t\tmessage = null\n\t}\n\n\tconst signupData: UpgradeSubscriptionData = {\n\t\toptions: {\n\t\t\tbusinessUse: stream(prices.business),\n\t\t\tpaymentInterval: stream(PaymentInterval.Yearly),\n\t\t},\n\t\tinvoiceData: {\n\t\t\tinvoiceAddress: \"\",\n\t\t\tcountry: null,\n\t\t\tvatNumber: \"\", // only for EU countries otherwise empty\n\t\t},\n\t\tpaymentData: {\n\t\t\tpaymentMethod: await getDefaultPaymentMethod(),\n\t\t\tcreditCardData: null,\n\t\t},\n\t\tprice: null,\n\t\tnextYearPrice: null,\n\t\ttype: PlanType.Free,\n\t\taccountingInfo: null,\n\t\tcustomer: null,\n\t\tnewAccountData: null,\n\t\tregistrationDataId,\n\t\tpriceInfoTextId: priceDataProvider.getPriceInfoMessage(),\n\t\tupgradeType: UpgradeType.Signup,\n\t\tplanPrices: priceDataProvider,\n\t\tcurrentPlan: null,\n\t\tsubscriptionParameters: subscriptionParameters,\n\t\tfeatureListProvider: featureListProvider,\n\t\treferralCode,\n\t\tmultipleUsersAllowed: false,\n\t\tacceptedPlans,\n\t\tmsg: message,\n\t}\n\n\tconst invoiceAttrs = new InvoiceAndPaymentDataPageAttrs(signupData)\n\n\tconst wizardPages = [\n\t\twizardPageWrapper(UpgradeSubscriptionPage, new UpgradeSubscriptionPageAttrs(signupData)),\n\t\twizardPageWrapper(SignupPage, new SignupPageAttrs(signupData)),\n\t\twizardPageWrapper(InvoiceAndPaymentDataPage, invoiceAttrs), // this page will login the user after signing up with newaccount data\n\t\twizardPageWrapper(UpgradeConfirmSubscriptionPage, invoiceAttrs), // this page will login the user if they are not login for iOS payment through AppStore\n\t\twizardPageWrapper(UpgradeCongratulationsPage, new UpgradeCongratulationsPageAttrs(signupData)),\n\t]\n\n\tif (isIOSApp()) {\n\t\twizardPages.splice(2, 1) // do not show this page on AppStore payment since we are only able to show this single payment method on iOS\n\t}\n\n\tconst wizardBuilder = createWizardDialog(\n\t\tsignupData,\n\t\twizardPages,\n\t\tasync () => {\n\t\t\tif (locator.logins.isUserLoggedIn()) {\n\t\t\t\t// this ensures that all created sessions during signup process are closed\n\t\t\t\t// either by clicking on `cancel`, closing the window, or confirm on the UpgradeCongratulationsPage\n\t\t\t\tawait locator.logins.logout(false)\n\t\t\t}\n\n\t\t\tif (signupData.newAccountData) {\n\t\t\t\tm.route.set(\"/login\", {\n\t\t\t\t\tnoAutoLogin: true,\n\t\t\t\t\tloginWith: signupData.newAccountData.mailAddress,\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tm.route.set(\"/login\", {\n\t\t\t\t\tnoAutoLogin: true,\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tDialogType.EditLarge,\n\t)\n\n\t// for signup specifically, we only want the invoice and payment page as well as the confirmation page to show up if signing up for a paid account (and the user did not go back to the first page!)\n\tinvoiceAttrs.setEnabledFunction(() => signupData.type !== PlanType.Free && wizardBuilder.attrs.currentPage !== wizardPages[0])\n\n\twizardBuilder.dialog.show()\n}\n","import m from \"mithril\"\nimport { Dialog, DialogType } from \"../gui/base/Dialog\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport { assertMainOrNode, isApp } from \"../api/common/Env\"\nimport { formatDate } from \"../misc/Formatter\"\nimport { HtmlEditor, HtmlEditorMode } from \"../gui/editor/HtmlEditor\"\nimport type { AccountingInfo, Customer, GroupInfo, OrderProcessingAgreement } from \"../api/entities/sys/TypeRefs.js\"\nimport { createSignOrderProcessingAgreementData } from \"../api/entities/sys/TypeRefs.js\"\nimport { neverNull } from \"@tutao/tutanota-utils\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { SignOrderProcessingAgreementService } from \"../api/entities/sys/Services\"\nimport { formatNameAndAddress } from \"../api/common/utils/CommonFormatter.js\"\nimport { getMailAddressDisplayText } from \"../mailFunctionality/SharedMailUtils.js\"\n\nassertMainOrNode()\nconst PRINT_DIV_ID = \"print-div\"\nconst agreementTexts = {\n\t\"1_en\": {\n\t\theading:\n\t\t\t'<div class=\"papertext\"><h3 style=\"text-align: center;\" id=\"Orderprocessingagreement-Orderprocessingagreement\">Order processing agreement</h3><p style=\"text-align: center;\">between</p>',\n\t\tcontent:\n\t\t\t'<p style=\"text-align: center;\">-&nbsp;controller -<br>hereinafter referred to as the Client</p><p style=\"text-align: center;\">and</p><p style=\"text-align: center;\">Tutao GmbH, Deisterstr. 17a, 30449 Hannover, Germany</p><p style=\"text-align: center;\">-&nbsp;processor -<br>hereinafter referred to as the Supplier</p><p style=\"text-align: center;\">&nbsp;</p><h4 id=\"Orderprocessingagreement-1.Subjectmatteranddurationoftheagreement\">1.&nbsp;Subject matter and duration of the agreement</h4><p>The Subject matter of the agreement results from the Terms and Conditions of Tutao GmbH in its current version, see <span class=\"nolink\">https://tuta.com/terms</span>, which is referred to here (hereinafter referred to as Service Agreement). The Supplier processes personal data for the Client according to Art. 4 no. 2 and Art. 28 GDPR based on this agreement.</p><p>The duration of this Agreement corresponds to the selected term of policy in the selected tariff.</p><h4 id=\"Orderprocessingagreement-2.Purpose,TypeofDataandCategoriesofDataSubjects\">2. Purpose, Type of Data and Categories of Data Subjects</h4><p>For the initiation of a contractual relationship and for service provision</p><ul><li>the newly registered email address</li></ul><p>is collected as inventory data.</p><p>For invoicing and determining the VAT</p><ul><li>the domicile of the customer (country)</li><li>the invoicing address</li><li>the VAT identification number (only for business customers of some countries)</li></ul><p>is collected as inventory data.</p><p>For the transaction of payments the following payment data (inventory data) is collected depending on the chosen payment method:</p><ul><li>Banking details (account number and sort code and IBAN/BIC, if necessary bank name, account holder),</li><li>credit card data,</li><li>PayPal user name.</li></ul><p>For the execution of direct debiting, the banking details are shared with the authorized credit institution. For the execution of PayPal payments, the PayPal data is shared with PayPal (Europe). For the execution of credit card payments, the credit card data is shared with the payment service provider&nbsp;Braintree&nbsp;for subprocessing. This includes the transfer of personal data into a third country (USA). An agreement entered into with Braintree defines appropriate safeguards and demands that the data is only processed in compliance with the GDPR and only for the purpose of execution of payments. This agreement can be examined here:&nbsp;<span class=\"nolink\">https://www.braintreepayments.com/assets/Braintree-PSA-Model-Clauses-March2018.pdf</span></p><p>Tutanota provides services for saving, editing, presentation and electronic transmission of data, such as email service, contact management and data storage. Within the context of this content data, personal data of the Client may be processed. All textual content is encrypted for the user and its communication partners in a way that even Tutao GmbH has no access to the data.&nbsp;</p><p>In order to maintain email server operations, for error diagnosis and for prevention of abuse, mail server logs are stored max. 30 days. These logs contain sender and recipient email addresses and time of connection, but no customer IP addresses.&nbsp;</p><p>In order to maintain operations, for prevention of abuse and and for visitors analysis, IP addresses of users are processed. Storage only takes place for IP addresses made anonymous which are therefore not personal data any more.</p><p>With the exception of payment data, the personal data including the email address is not disclosed to third parties. However, Tutao GmbH can be legally bound to provide content data (in case of a valid German court order) and inventory data to prosecution services. There will be no sale of data.</p><p>The undertaking of the contractually agreed Processing of Data shall be carried out exclusively within a Member State of the European Union (EU) or within a Member State of the European Economic Area (EEA). Each and every Transfer of Data to a State which is not a Member State of either the EU or the EEA requires the prior agreement of the Client and shall only occur if the specific Conditions of Article 44 et seq. GDPR have been fulfilled.</p><p>The Categories of Data Subjects comprise the users set up in Tutanota by the Client and these users\\' communication partners.</p><h4 id=\"Orderprocessingagreement-3.TechnicalandOrganizationalMeasures\">3. Technical and Organizational Measures</h4><p>(1) Before the commencement of processing, the Supplier shall document the execution of the necessary Technical and Organizational Measures, set out in advance of the awarding of the Agreement, specifically with regard to the detailed execution of the Agreement, and shall present these documented measures to the Client for inspection. Upon acceptance by the Client, the documented measures become the foundation of the Agreement. Insofar as the inspection/audit by the Client shows the need for amendments, such amendments shall be implemented by mutual agreement.</p><p>(2) The Supplier shall establish the security in accordance with Article 28 Paragraph 3 Point c, and Article 32 GDPR in particular in conjunction with Article 5 Paragraph 1, and Paragraph 2 GDPR. The measures to be taken are measures of data security and measures that guarantee a protection level appropriate to the risk concerning confidentiality, integrity, availability and resilience of the systems. The state of the art, implementation costs, the nature, scope and purposes of processing as well as the probability of occurrence and the severity of the risk to the rights and freedoms of natural persons within the meaning of Article 32 Paragraph 1 GDPR must be taken into account. [Details in Appendix 1]</p><p>(3) The Technical and Organizational Measures are subject to technical progress and further development. In this respect, it is permissible for the Supplier to implement alternative adequate measures. In so doing, the security level of the defined measures must not be reduced. Substantial changes must be documented.</p><h4 id=\"Orderprocessingagreement-4.Rectification,restrictionanderasureofdata\"><span>4. Rectification, restriction and erasure of data</span></h4><p>(1) The Supplier may not on its own authority rectify, erase or restrict the processing of data that is being processed on behalf of the Client, but only on documented instructions from the Client. <br>Insofar as a Data Subject contacts the Supplier directly concerning a rectification, erasure, or restriction of processing, the Supplier will immediately forward the Data Subject’s request to the Client.</p><p>(2) Insofar as it is included in the scope of services, the erasure policy, ‘right to be forgotten’, rectification, data portability and access shall be ensured by the Supplier in accordance with documented instructions from the Client without undue delay.</p><h4 id=\"Orderprocessingagreement-5.QualityassuranceandotherdutiesoftheSupplier\">5. Quality assurance and other duties of the Supplier&nbsp;</h4><p align=\"justify\">In addition to complying with the rules set out in this Agreement, the Supplier shall comply with the statutory requirements referred to in Articles 28 to 33 GDPR; accordingly, the Supplier ensures, in particular, compliance with the following requirements:</p><ol><li><p align=\"justify\">The Supplier is not obliged to appoint a Data Protection Officer. Mr. Arne Moehle, phone: +49 511 202801-11, arne.moehle@tutao.de, is designated as the Contact Person on behalf of the Supplier.</p></li><li><p align=\"justify\">Confidentiality in accordance with Article 28 Paragraph 3 Sentence 2 Point b, Articles 29 and 32 Paragraph 4 GDPR. The Supplier entrusts only such employees with the data processing outlined in this Agreement who have been bound to confidentiality and have previously been familiarized with the data protection provisions relevant to their work. The Supplier and any person acting under its authority who has access to personal data, shall not process that data unless on instructions from the Client, which includes the powers granted in this Agreement, unless required to do so by law.</p></li><li><p align=\"justify\">Implementation of and compliance with all Technical and Organizational Measures necessary for this Agreement in accordance with Article 28 Paragraph 3 Sentence 2 Point c, Article 32 GDPR [details in Appendix 1].</p></li><li><p align=\"justify\">The Client and the Supplier shall cooperate, on request, with the supervisory authority in performance of its tasks.</p></li><li><p align=\"justify\">The Client shall be informed immediately of any inspections and measures conducted by the supervisory authority, insofar as they relate to this Agreement. This also applies insofar as the Supplier is under investigation or is party to an investigation by a competent authority in connection with infringements to any Civil or Criminal Law, or Administrative Rule or Regulation regarding the processing of personal data in connection with the processing of this Agreement.</p></li><li><p align=\"justify\">Insofar as the Client is subject to an inspection by the supervisory authority, an administrative or summary offense or criminal procedure, a liability claim by a Data Subject or by a third party or any other claim in connection with the Agreement data processing by the Supplier, the Supplier shall make every effort to support the Client.</p></li><li><p align=\"justify\">The Supplier shall periodically monitor the internal processes and the Technical and Organizational Measures to ensure that processing within his area of responsibility is in accordance with the requirements of applicable data protection law and the protection of the rights of the data subject.</p></li><li><p align=\"justify\">Verifiability of the Technical and Organizational Measures conducted by the Client as part of the Client’s supervisory powers referred to in item 7 of this Agreement.</p></li></ol><h4 id=\"Orderprocessingagreement-6.Subcontracting\">6. Subcontracting</h4><p align=\"justify\">(1) Subcontracting for the purpose of this Agreement is to be understood as meaning services which relate directly to the provision of the principal service. This does not include ancillary services, such as telecommunication services, postal / transport services, maintenance and user support services or the disposal of data carriers, as well as other measures to ensure the confidentiality, availability, integrity and resilience of the hardware and software of data processing equipment. The Supplier shall, however, be obliged to make appropriate and legally binding contractual arrangements and take appropriate inspection measures to ensure the data protection and the data security of the Client\\'s data, even in the case of outsourced ancillary services.</p><p align=\"justify\">(2) The Supplier may commission subcontractors (additional contract processors) only after prior explicit written or documented consent from the Client.&nbsp;</p><p align=\"justify\">(3) Outsourcing to subcontractors or changing the existing subcontractor are permissible when:</p><ul><li>The Supplier submits such an outsourcing to a subcontractor to the Client in writing or in text form with appropriate advance notice; and</li><li>The Client has not objected to the planned outsourcing in writing or in text form by the date of handing over the data to the Supplier; and</li><li>The subcontracting is based on a contractual agreement in accordance with Article 28 paragraphs 2-4 GDPR.</li></ul><p align=\"justify\">(4) The transfer of personal data from the Client to the subcontractor and the subcontractors commencement of the data processing shall only be undertaken after compliance with all requirements has been achieved.</p><p align=\"justify\">(5) If the subcontractor provides the agreed service outside the EU/EEA, the Supplier shall ensure compliance with EU Data Protection Regulations by appropriate measures. The same applies if service providers are to be used within the meaning of Paragraph 1 Sentence 2.</p><p align=\"justify\">(6) Further outsourcing by the subcontractor requires the express consent of the main Client (at the minimum in text form);</p><p align=\"justify\">(7) All contractual provisions in the contract chain shall be communicated to and agreed with each and every additional subcontractor.</p><h4 class=\"western\" id=\"Orderprocessingagreement-7.SupervisorypowersoftheClient\">7. Supervisory powers of the Client</h4><p align=\"justify\">(1) The Client has the right, after consultation with the Supplier, to carry out inspections or to have them carried out by an auditor to be designated in each individual case. It has the right to convince itself of the compliance with this agreement by the Supplier in his business operations by means of random checks, which are ordinarily to be announced in good time.</p><p align=\"justify\">(2) The Supplier shall ensure that the Client is able to verify compliance with the obligations of the Supplier in accordance with Article 28 GDPR. The Supplier undertakes to give the Client the necessary information on request and, in particular, to demonstrate the execution of the Technical and Organizational Measures.</p><p align=\"justify\">(3) Evidence of such measures, which concern not only the specific Agreement, may be provided by</p><ul><li>Compliance with approved Codes of Conduct pursuant to Article 40 GDPR;</li><li>Certification according to an approved certification procedure in accordance with Article 42 GDPR;</li><li>Current auditor’s certificates, reports or excerpts from reports provided by independent bodies (e.g. auditor, Data Protection Officer, IT security department, data privacy auditor, quality auditor)</li><li>A suitable certification by IT security or data protection auditing (e.g. according to BSI-Grundschutz (IT Baseline Protection certification developed by the German&nbsp; Federal Office for Security in Information Technology (BSI)) or ISO/IEC 27001).</li></ul><p align=\"justify\">(4) The Supplier may claim remuneration for enabling Client inspections.&nbsp;</p><h4 class=\"western\" id=\"Orderprocessingagreement-8.CommunicationinthecaseofinfringementsbytheSupplier\">8. Communication in the case of infringements by the Supplier</h4><p align=\"justify\">(1) The Supplier shall assist the Client in complying with the obligations concerning the security of personal data, reporting requirements for data breaches, data protection impact assessments and prior consultations, referred to in Articles 32 to 36 of the GDPR. These include:</p><ol><li>Ensuring an appropriate level of protection through Technical and Organizational Measures that take into account the circumstances and purposes of the processing as well as the projected probability and severity of a possible infringement of the law as a result of security vulnerabilities and that enable an immediate detection of relevant infringement events.</li><li>The obligation to report a personal data breach immediately to the Client</li><li>The duty to assist the Client with regard to the Client’s obligation to provide information to the Data Subject concerned and to immediately provide the Client with all relevant information in this regard.</li><li>Supporting the Client with its data protection impact assessment</li><li>Supporting the Client with regard to prior consultation of the supervisory authority</li></ol><p align=\"justify\">(2) The Supplier may claim compensation for support services which are not included in the description of the services and which are not attributable to failures on the part of the Supplier.</p><h4 class=\"western\" id=\"Orderprocessingagreement-9.AuthorityoftheClienttoissueinstructions\">9. Authority of the Client to issue instructions</h4><p>(1) The Client shall immediately confirm oral instructions (at the minimum in text form).</p><p>(2) The Supplier shall inform the Client immediately if he considers that an instruction violates Data Protection Regulations. The Supplier shall then be entitled to suspend the execution of the relevant instructions until the Client confirms or changes them.</p><h4 class=\"western\" id=\"Orderprocessingagreement-10.Deletionandreturnofpersonaldata\">10. Deletion and return of personal data</h4><p>(1) Copies or duplicates of the data shall never be created without the knowledge of the Client, with the exception of back-up copies as far as they are necessary to ensure orderly data processing, as well as data required to meet regulatory requirements to retain data.</p><p>(2) After conclusion of the contracted work, or earlier upon request by the Client, at the latest upon termination of the Service Agreement, the Supplier shall hand over to the Client or – subject to prior consent – destroy all documents, processing and utilization results, and data sets related to the Agreement that have come into its possession, in a data-protection compliant manner. The same applies to any and all connected test, waste, redundant and discarded material. The log of the destruction or deletion shall be provided on request.</p><p>(3) Documentation which is used to demonstrate orderly data processing in accordance with the Agreement shall be stored beyond the contract duration by the Supplier in accordance with the respective retention periods. It may hand such documentation over to the Client at the end of the contract duration to relieve the Supplier of this contractual obligation.</p><h4 id=\"Orderprocessingagreement-11.Finalprovisions\">11. Final provisions</h4><p align=\"justify\">(1) This agreement shall be governed by and construed in accordance with German law. Place of jurisdiction shall be Hanover, Germany.</p><p align=\"justify\">(2) Any changes of or amendments to this Agreement must be in writing to become effective. This includes any alteration of this written form clause.</p><p align=\"justify\" class=\"western\">(3) Should any provision of this Agreement be or become legally invalid or if there is any void that needs to be filled, the validity of the remainder of the agreement shall not be affected thereby. Invalid provisions shall be replaced by common consent with such provisions which come as close as possible to the intended result of the invalid provision. In the event of gaps such provision shall come into force by common consent which comes as close as possible to the intended result of the agreement, should the matter have been considered in advance.</p><p align=\"justify\">&nbsp;</p>',\n\t\tappendix:\n\t\t\t'<div class=\"pagebreak\" style=\"break-before:always;\"><p></p><h4 id=\"Orderprocessingagreement-Appendix1-TechnicalandOrganizationalMeasures\">Appendix 1 - Technical and Organizational Measures&nbsp;</h4><p>System administrators are hereinafter referred to as \"DevOps\". The following Technical and Organizational Measures have been implemented:</p><ol><li>Entrance control: All systems are located in ISO 27001 certified&nbsp;data centers in Germany. Only DevOps are granted access to the physical systems.</li><li>Authentication access control: User access is secured with strong password protection according to the internal Password Policy or public key access control as well as second factor authentication (e.g. YubiKey).&nbsp;User access is managed by DevOps.</li><li>Authorization access control: Data records are secured with role based permissions. Permissions are managed by DevOps.</li><li>Data medium control: All hard discs containing personal data are encrypted. File permissions are allocated to DevOps users/roles as well as application users/roles to make sure no unauthorized access to files is allowed from logged in users and processes.</li><li>Transfer control: Transfer of personal data to other parties is being logged.&nbsp;Logs include the user/process that initiated the input, the type of personal data and the timestamp. The logs are kept for 6 months.</li><li>Input control: Input of new and updated as well as deletion of personal data is logged. Logs include the user/process that initiated the input, the type of personal data and the timestamp. The logs are kept for 6 months.</li><li>Transport control: Transport of personal data from and to the system are secured with strong SSL and/or end-to-end encryption.</li><li>Confidentiality: Personal data is stored end-to-end encrypted wherever possible.</li><li>Restoration control: All systems have a second network interface with access for DevOps only. This interface allows access even if the main interface is blocked. Components of the system can be restarted in case of error conditions. A DDOS mitigation service is automatically activated if a DDOS attack occurs that makes the system inaccessible.</li><li>Reliability:&nbsp;&nbsp;DevOps monitor all systems and are notified if any component of the system fails to be able to bring it up again immediately.</li><li>Data integrity: Automatic error correction on data mediums and also on database level make sure that data integrity is guaranteed. Additionally the integrity of end-to-end encrypted personal data is guaranteed through MACs during encryption and decryption.</li><li>Instruction control: All employees are aware of the purposes of processing and regularly complete&nbsp;an internal security awareness program. (Sub)processors are instructed by written contracts.</li><li>Availability control: All systems are located in ISO 27001 certified&nbsp;data centers in Germany which guarantee the physical availability and connection of the systems. All long-term data is stored as three replicas on different servers or in a RAID system. Backups are created prior to updating critical parts of the system.</li><li>Separability: Separate processing for personal data is set up as required.</li><li>Resilience: All systems use highly scalable components that are designed for much higher load than actually needed. All systems are expandable very quickly to continuously allow processing higher loads.</li></ol></div>\\n' +\n\t\t\t\"</div>\",\n\t},\n\t\"1_de\": {\n\t\theading:\n\t\t\t'<div class=\"papertext\"><h2 style=\"text-align: center;\" id=\"VertragzurAuftragsverarbeitung-VertragzurAuftragsverarbeitung\">Vertrag zur Auftragsverarbeitung</h2><p style=\"text-align: center;\">zwischen</p>',\n\t\tcontent:\n\t\t\t'<p style=\"text-align: center;\">-&nbsp;Verantwortlicher -<br>nachstehend Auftraggeber genannt&nbsp;</p><p style=\"text-align: center;\">und</p><p style=\"text-align: center;\">Tutao GmbH, Deisterstr. 17a, 30449 Hannover</p><p style=\"text-align: center;\">-&nbsp;Auftragsverarbeiter -<br>nachstehend&nbsp;Auftragnehmer genannt</p><p style=\"text-align: center;\">&nbsp;</p><h2 id=\"VertragzurAuftragsverarbeitung-1.GegenstandundDauer\">1.&nbsp;Gegenstand und Dauer</h2><p>Der Gegenstand des Auftrags ergibt sich aus den AGB der Tutao GmbH in der jeweils gültigen Version, siehe <span class=\"nolink\">https://tuta.com/terms</span>, auf die hier verwiesen wird (im Folgenden Leistungsvereinbarung). Der&nbsp;Auftragnehmer verarbeitet dabei personenbezogene Daten für den Auftraggeber&nbsp;im Sinne von Art. 4 Nr. 2 und Art. 28 DS-GVO auf Grundlage dieses Vertrages.</p><p>Die Dauer dieses Auftrags entspricht der im jeweiligen Tarif gewählten Vertragslaufzeit.</p><h2 id=\"VertragzurAuftragsverarbeitung-2.Zweck,DatenkategorienundbetroffenePersonen\">2. Zweck, Datenkategorien und betroffene Personen</h2><p>Zur Begründung eines Vertragsverhältnisses, und zur Leistungserbringung wird</p><ul><li>die neu registrierte E-Mail-Adresse</li></ul><p>als Bestandsdatum erfasst.</p><p>Für die Rechnungsstellung und Bestimmung der Umsatzsteuer&nbsp;werden</p><ul><li>der Sitz des Kunden (Land)</li><li>die Rechnungsadresse</li><li>die&nbsp;USt-IdNr. (nur für Geschäftskunden bestimmter Länder)</li></ul><p>als Bestandsdaten erfasst.</p><p>Zur Abwicklung von Zahlungen werden, je nach gewählter Zahlungsart, die folgenden Zahlungsdaten (Bestandsdaten) erfasst:</p><ul><li>Bankverbindung (Kontonummer und BLZ bzw. IBAN/BIC, ggf. Bankname, Kontoinhaber),</li><li>Kreditkartendaten,</li><li>der PayPal-Nutzername.</li></ul><p>Zur Abwicklung von Lastschriften wird die Bankverbindung an das beauftragte Kreditinstitut weitergegeben. <span>Zur Abwicklung von PayPal-Zahlungen werden die PayPal-Zahlungsdaten an PayPal (Europe) weitergegeben. </span>Zur Abwicklung von&nbsp;Kreditkartenzahlungen werden die Kreditkartendaten zur Auftragsverarbeitung an den Zahlungsdienstleister&nbsp;Braintree&nbsp;weitergegeben. Hierbei handelt es sich um eine Übermittlung von personenbezogenen Daten an ein Drittland. Ein mit Braintree geschlossener Vertrag sieht geeignete Garantien vor und stellt sicher, dass die weitergegebenen Daten nur im Einklang mit der DSGVO und lediglich zur Abwicklung von Zahlungen verwendet werden. Dieser Vertrag kann&nbsp;hier eingesehen werden:&nbsp;<span class=\"nolink\">https://www.braintreepayments.com/assets/Braintree-PSA-Model-Clauses-March2018.pdf</span></p><p>Tutanota stellt Dienste zur Speicherung, Bearbeitung, Darstellung und elektronischem Versand von Daten bereit, wie z.B. E-Mail-Service, Kontaktverwaltung und Datenablage. Im Rahmen dieser Inhaltsdaten können personenbezogene Daten des Auftraggebers verarbeitet werden. Alle textuellen Inhalte werden verschlüsselt für den Nutzer und dessen Kommunikationspartner gespeichert, so dass die Tutao GmbH selbst keinen Zugriff auf diese Daten hat.</p><p>Zur Aufrechterhaltung des&nbsp;Mailserver-Betriebs, zur Fehlerdiagnose und zur Verhinderung von Missbrauch werden Mail-Server-Logs maximal 30 Tage gespeichert. Diese enthalten Sender- und Empfänger-E-Mail-Adressen sowie den Zeitpunkt der Verbindung, jedoch keine IP-Adressen der Benutzer.</p><p>Zur Sicherstellung des Betriebs, zur&nbsp;Verhinderung von Missbrauch und zur&nbsp;Besucherauswertung werden IP-Adressen der Benutzer verarbeitet. <span>Eine Speicherung erfolgt nur für anonymisierte und damit nicht mehr </span><span>personenbezogene </span><span>IP-Adressen.</span></p><p>Mit Ausnahme der Zahlungsdaten werden die personenbezogenen Daten inklusive der E-Mail-Adresse nicht an Dritte weitergegeben. Jedoch kann Tutao GmbH rechtlich verpflichtet werden Inhaltsdaten (bei Vorlage eines gültigen deutschen Gerichtsbeschlusses) sowie&nbsp;Bestandsdaten an Strafverfolgungsbehörden auszuliefern. Es erfolgt kein Verkauf von Daten.</p><p>Die Erbringung der vertraglich vereinbarten Datenverarbeitung findet ausschließlich in einem Mitgliedsstaat der Europäischen Union oder in einem anderen Vertragsstaat des Abkommens über den Europäischen Wirtschaftsraum statt.&nbsp;Jede Verlagerung in ein Drittland bedarf der vorherigen Zustimmung des Auftraggebers und darf nur erfolgen, wenn die besonderen Voraussetzungen der Art. 44 ff. DS-GVO erfüllt sind.&nbsp;</p><p>Die Kategorien der durch die Verarbeitung betroffenen Personen umfassen die durch den Auftraggeber in Tutanota eingerichtete Nutzer und deren Kommunikationspartner.</p><h2 id=\"VertragzurAuftragsverarbeitung-3.Technisch-organisatorischeMaßnahmen\">3. Technisch-organisatorische Maßnahmen</h2><p>(1) Der&nbsp;Auftragnehmer hat die Umsetzung der im Vorfeld der Auftragsvergabe dargelegten und erforderlichen technischen und organisatorischen Maßnahmen vor Beginn der Verarbeitung, insbesondere hinsichtlich der konkreten Auftragsdurchführung zu dokumentieren und dem&nbsp;Auftraggeber zur Prüfung zu übergeben. Bei Akzeptanz durch den&nbsp;Auftraggeber&nbsp;werden die dokumentierten Maßnahmen Grundlage des Auftrags. Soweit die Prüfung des&nbsp;Auftraggebers einen Anpassungsbedarf ergibt, ist dieser einvernehmlich umzusetzen</p><p align=\"justify\">(2) Der Auftragnehmer hat die Sicherheit gem. Art. 28 Abs. 3 lit. c, 32 DS-GVO insbesondere in Verbindung mit Art. 5 Abs. 1, Abs. 2 DS-GVO herzustellen. Insgesamt handelt es sich bei den zu treffenden Maßnahmen um Maßnahmen der Datensicherheit und zur Gewährleistung eines dem Risiko angemessenen Schutzniveaus hinsichtlich der Vertraulichkeit, der Integrität, der Verfügbarkeit sowie der Belastbarkeit der Systeme. Dabei sind der Stand der Technik, die Implementierungskosten und die Art, der Umfang und die Zwecke der Verarbeitung sowie die unterschiedliche Eintrittswahrscheinlichkeit und Schwere des Risikos für die Rechte und Freiheiten natürlicher Personen im Sinne von Art. 32 Abs. 1 DS-GVO zu berücksichtigen [Einzelheiten in Anlage 1].</p><p align=\"justify\">(3) Die technischen und organisatorischen Maßnahmen unterliegen dem technischen Fortschritt und der Weiterentwicklung. Insoweit ist es dem Auftragnehmer gestattet, alternative adäquate Maßnahmen umzusetzen. Dabei darf das Sicherheitsniveau der festgelegten Maßnahmen nicht unterschritten werden. Wesentliche Änderungen sind zu dokumentieren.</p><h2 id=\"VertragzurAuftragsverarbeitung-4.Berichtigung,EinschränkungundLöschungvonDaten\">4. Berichtigung, Einschränkung und Löschung von Daten</h2><p align=\"justify\">(1) Der Auftragnehmer darf die Daten, die im Auftrag verarbeitet werden, nicht eigenmächtig sondern nur nach dokumentierter Weisung des Auftraggebers berichtigen, löschen oder deren Verarbeitung einschränken. Soweit eine betroffene Person sich diesbezüglich unmittelbar an den Auftragnehmer wendet, wird der Auftragnehmer dieses Ersuchen unverzüglich an den Auftraggeber weiterleiten.</p><p align=\"justify\">(2) Soweit vom Leistungsumfang umfasst, sind Löschkonzept, Recht auf Vergessenwerden, Berichtigung, Datenportabilität und Auskunft nach dokumentierter Weisung des Auftraggebers unmittelbar durch den Auftragnehmer sicherzustellen.</p><h2 id=\"VertragzurAuftragsverarbeitung-5.QualitätssicherungundsonstigePflichtendesAuftragnehmers\">5. Qualitätssicherung und sonstige Pflichten des Auftragnehmers</h2><p align=\"justify\">Der Auftragnehmer hat zusätzlich zu der Einhaltung der Regelungen dieses Auftrags gesetzliche Pflichten gemäß Art. 28 bis 33 DS-GVO; insofern gewährleistet er insbesondere die Einhaltung folgender Vorgaben:</p><ol><li><p align=\"justify\">Der Auftragnehmer ist nicht zur Bestellung eines Datenschutzbeauftragten verpflichtet. Als Ansprechpartner beim Auftragnehmer wird Herr Arne Möhle, Telefon: 0511 202801-11, arne.moehle@tutao.de, benannt.</p></li><li><p align=\"justify\">Die Wahrung der Vertraulichkeit gemäß Art. 28 Abs. 3 S. 2 lit. b, 29, 32 Abs. 4 DS-GVO. Der Auftragnehmer setzt bei der Durchführung der Arbeiten nur Beschäftigte ein, die auf die Vertraulichkeit verpflichtet und zuvor mit den für sie relevanten Bestimmungen zum Datenschutz vertraut gemacht wurden. Der Auftragnehmer und jede dem Auftragnehmer unterstellte Person, die Zugang zu personenbezogenen Daten hat, dürfen diese Daten ausschließlich entsprechend der Weisung des Auftraggebers verarbeiten einschließlich der in diesem Vertrag eingeräumten Befugnisse, es sei denn, dass sie gesetzlich zur Verarbeitung verpflichtet sind.</p></li><li><p align=\"justify\">Die Umsetzung und Einhaltung aller für diesen Auftrag erforderlichen technischen und organisatorischen Maßnahmen gemäß Art. 28 Abs. 3 S. 2 lit. c, 32 DS-GVO [Einzelheiten in Anlage 1].</p></li><li><p align=\"justify\">Der Auftraggeber und der Auftragnehmer arbeiten auf Anfrage mit der Aufsichtsbehörde bei der Erfüllung ihrer Aufgaben zusammen.</p></li><li><p align=\"justify\">Die unverzügliche Information des Auftragnehmers über Kontrollhandlungen und Maßnahmen der Aufsichtsbehörde, soweit sie sich auf diesen Auftrag beziehen. Dies gilt auch, soweit eine zuständige Behörde im Rahmen eines Ordnungswidrigkeits- oder Strafverfahrens in Bezug auf die Verarbeitung personenbezogener Daten bei der Auftragsverarbeitung beim Auftragnehmer ermittelt.</p></li><li><p align=\"justify\">Soweit der Auftraggeber seinerseits einer Kontrolle der Aufsichtsbehörde, einem Ordnungswidrigkeits- oder Strafverfahren, dem Haftungsanspruch einer betroffenen Person oder eines Dritten oder einem anderen Anspruch im Zusammenhang mit der Auftragsverarbeitung beim Auftragnehmer ausgesetzt ist, hat ihn der Auftragnehmer nach besten Kräften zu unterstützen.</p></li><li><p align=\"justify\">Der Auftragnehmer kontrolliert regelmäßig die internen Prozesse sowie die technischen und organisatorischen Maßnahmen, um zu gewährleisten, dass die Verarbeitung in seinem Verantwortungsbereich im Einklang mit den Anforderungen des geltenden Datenschutzrechts erfolgt und der Schutz der Rechte der betroffenen Person gewährleistet wird.</p></li><li><p align=\"justify\">Nachweisbarkeit der getroffenen technischen und organisatorischen Maßnahmen gegenüber dem Auftraggeber im Rahmen seiner Kontrollbefugnisse nach Ziffer 7 dieses Vertrages.</p></li></ol><h2 id=\"VertragzurAuftragsverarbeitung-6.Unterauftragsverhältnisse\">6. Unterauftragsverhältnisse</h2><p align=\"justify\">(1) Als Unterauftragsverhältnisse im Sinne dieser Regelung sind solche Dienstleistungen zu verstehen, die sich unmittelbar auf die Erbringung der Hauptleistung beziehen. Nicht hierzu gehören Nebenleistungen, die der Auftragnehmer wie z.B. Telekommunikationsleistungen, Post-/Transportdienstleistungen, Wartung und Benutzerservice oder die Entsorgung von Datenträgern sowie sonstige Maßnahmen zur Sicherstellung der Vertraulichkeit, Verfügbarkeit, Integrität und Belastbarkeit der Hard- und Software von Datenverarbeitungsanlagen in Anspruch nimmt. Der Auftragnehmer ist jedoch verpflichtet, zur Gewährleistung des Datenschutzes und der Datensicherheit der Daten des Auftraggebers auch bei ausgelagerten Nebenleistungen angemessene und gesetzeskonforme vertragliche Vereinbarungen sowie Kontrollmaßnahmen zu ergreifen.</p><p align=\"justify\">(2) Der Auftragnehmer darf Unterauftragnehmer (weitere Auftragsverarbeiter) nur nach vorheriger ausdrücklicher schriftlicher bzw. dokumentierter Zustimmung des Auftraggebers beauftragen.</p><p align=\"justify\">(3) Die Auslagerung auf Unterauftragnehmer sowie der&nbsp;Wechsel der bestehenden Unterauftragnehmer sind zulässig, soweit:</p><ul><li>der Auftragnehmer eine solche Auslagerung auf Unterauftragnehmer dem Auftraggeber eine angemessene Zeit vorab schriftlich oder in Textform anzeigt und</li><li>der Auftraggeber nicht bis zum Zeitpunkt der Übergabe der Daten gegenüber dem Auftragnehmer schriftlich oder in Textform Einspruch gegen die geplante Auslagerung erhebt und</li><li>eine vertragliche Vereinbarung nach Maßgabe des Art. 28 Abs. 2-4 DS-GVO zugrunde gelegt wird.</li></ul><p align=\"justify\">(4) Die Weitergabe von personenbezogenen Daten des Auftraggebers an den Unterauftragnehmer und dessen erstmaliges Tätigwerden sind erst mit Vorliegen aller Voraussetzungen für eine Unterbeauftragung gestattet.</p><p align=\"justify\">(5) Erbringt der Unterauftragnehmer die vereinbarte Leistung außerhalb der EU/des EWR stellt der Auftragnehmer die datenschutzrechtliche Zulässigkeit durch entsprechende Maßnahmen sicher. Gleiches gilt, wenn Dienstleister im Sinne von Abs. 1 Satz 2 eingesetzt werden sollen.</p><p align=\"justify\">(6) Eine weitere Auslagerung durch den Unterauftragnehmer bedarf der ausdrücklichen Zustimmung des Hauptauftraggebers (mind. Textform).</p><p align=\"justify\">(7) Sämtliche vertraglichen Regelungen in der Vertragskette sind auch dem weiteren Unterauftragnehmer aufzuerlegen.</p><h2 class=\"western\" id=\"VertragzurAuftragsverarbeitung-7.KontrollrechtedesAuftraggebers\">7. Kontrollrechte des Auftraggebers</h2><p align=\"justify\">(1) Der Auftraggeber hat das Recht, im Benehmen mit dem Auftragnehmer Überprüfungen durchzuführen oder durch im Einzelfall zu benennende Prüfer durchführen zu lassen. Er hat das Recht, sich durch Stichprobenkontrollen, die in der Regel rechtzeitig anzumelden sind, von der Einhaltung dieser Vereinbarung durch den Auftragnehmer in dessen Geschäftsbetrieb zu überzeugen.</p><p align=\"justify\">(2) Der Auftragnehmer stellt sicher, dass sich der Auftraggeber von der Einhaltung der Pflichten des Auftragnehmers nach Art. 28 DS-GVO überzeugen kann. Der Auftragnehmer verpflichtet sich, dem Auftraggeber auf Anforderung die erforderlichen Auskünfte zu erteilen und insbesondere die Umsetzung der technischen und organisatorischen Maßnahmen nachzuweisen.</p><p align=\"justify\">(3) Der Nachweis solcher Maßnahmen, die nicht nur den konkreten Auftrag betreffen, kann erfolgen durch</p><ul><li>die Einhaltung genehmigter Verhaltensregeln gemäß Art. 40 DS-GVO;</li><li>die Zertifizierung nach einem genehmigten Zertifizierungsverfahren gemäß Art. 42 DS-GVO;</li><li>aktuelle Testate, Berichte oder Berichtsauszüge unabhängiger Instanzen (z.B. Wirtschaftsprüfer, Revision, Datenschutzbeauftragter, IT-Sicherheitsabteilung, Datenschutzauditoren, Qualitätsauditoren);</li><li>eine geeignete Zertifizierung durch IT-Sicherheits- oder Datenschutzaudit (z.B. nach BSI-Grundschutz).</li></ul><p align=\"justify\">(4) Für die Ermöglichung von Kontrollen durch den Auftraggeber kann der Auftragnehmer einen Vergütungsanspruch geltend machen.</p><h2 class=\"western\" id=\"VertragzurAuftragsverarbeitung-8.MitteilungbeiVerstößendesAuftragnehmers\">8. Mitteilung bei Verstößen des Auftragnehmers</h2><p align=\"justify\">(1) Der Auftragnehmer unterstützt den Auftraggeber bei der Einhaltung der in den Artikeln 32 bis 36 der DS-GVO genannten Pflichten zur Sicherheit personenbezogener Daten, Meldepflichten bei Datenpannen, Datenschutz-Folgeabschätzungen und vorherige Konsultationen. Hierzu gehören u.a.</p><ol><li><p align=\"justify\">die Sicherstellung eines angemessenen Schutzniveaus durch technische und organisatorische Maßnahmen, die die Umstände und Zwecke der Verarbeitung sowie die prognostizierte Wahrscheinlichkeit und Schwere einer möglichen Rechtsverletzung durch Sicherheitslücken berücksichtigen und eine sofortige Feststellung von relevanten Verletzungsereignissen ermöglichen</p></li><li><p align=\"justify\">die Verpflichtung, Verletzungen personenbezogener Daten unverzüglich an den Auftraggeber zu melden</p></li><li><p align=\"justify\">die Verpflichtung, dem Auftraggeber im Rahmen seiner Informationspflicht gegenüber dem Betroffenen zu unterstützen und ihm in diesem Zusammenhang sämtliche relevante Informationen unverzüglich zur Verfügung zu stellen</p></li><li><p align=\"justify\">die Unterstützung des Auftraggebers für dessen Datenschutz-Folgenabschätzung</p></li><li><p align=\"justify\">die Unterstützung des Auftraggebers im Rahmen vorheriger Konsultationen mit der Aufsichtsbehörde</p></li></ol><p align=\"justify\">(2) Für Unterstützungsleistungen, die nicht in der Leistungsbeschreibung enthalten oder nicht auf ein Fehlverhalten des Auftragnehmers zurückzuführen sind, kann der Auftragnehmer eine Vergütung beanspruchen.</p><h2 class=\"western\" id=\"VertragzurAuftragsverarbeitung-9.WeisungsbefugnisdesAuftraggebers\">9. Weisungsbefugnis des Auftraggebers</h2><p align=\"justify\">(1) Mündliche Weisungen bestätigt der Auftraggeber unverzüglich (mind. Textform).</p><p align=\"justify\">(2) Der Auftragnehmer hat den Auftraggeber unverzüglich zu informieren, wenn er der Meinung ist, eine Weisung verstoße gegen Datenschutzvorschriften. Der Auftragnehmer ist berechtigt, die Durchführung der entsprechenden Weisung solange auszusetzen, bis sie durch den Auftraggeber bestätigt oder geändert wird.</p><h2 class=\"western\" id=\"VertragzurAuftragsverarbeitung-10.LöschungundRückgabevonpersonenbezogenenDaten\">10. Löschung und Rückgabe von personenbezogenen Daten</h2><p align=\"justify\">(1) Kopien oder Duplikate der Daten werden ohne Wissen des Auftraggebers nicht erstellt. Hiervon ausgenommen sind Sicherheitskopien, soweit sie zur Gewährleistung einer ordnungsgemäßen Datenverarbeitung erforderlich sind, sowie Daten, die im Hinblick auf die Einhaltung gesetzlicher Aufbewahrungspflichten erforderlich sind.</p><p align=\"justify\">(2) Nach Abschluss der vertraglich vereinbarten Arbeiten oder früher nach Aufforderung durch den Auftraggeber – spätestens mit Beendigung der Leistungsvereinbarung – hat der Auftragnehmer sämtliche in seinen Besitz gelangten Unterlagen, erstellte Verarbeitungs- und Nutzungsergebnisse sowie Datenbestände, die im Zusammenhang mit dem Auftragsverhältnis stehen, dem Auftraggeber auszuhändigen oder nach vorheriger Zustimmung datenschutzgerecht zu vernichten. Gleiches gilt für Test- und Ausschussmaterial. Das Protokoll der Löschung ist auf Anforderung vorzulegen.</p><p align=\"justify\">(3) Dokumentationen, die dem Nachweis der auftrags- und ordnungsgemäßen Datenverarbeitung dienen, sind durch den Auftragnehmer entsprechend der jeweiligen Aufbewahrungsfristen über das Vertragsende hinaus aufzubewahren. Er kann sie zu seiner Entlastung bei Vertragsende dem Auftraggeber übergeben.</p><h2 id=\"VertragzurAuftragsverarbeitung-11.Schlussbestimmungen\">11. Schlussbestimmungen</h2><p align=\"justify\">(1) <span>Dieser Vertrag unterliegt dem Recht der Bundesrepublik Deutschland. Gerichtsstand ist Hannover.</span></p><p align=\"justify\"><span>(2) Änderungen und Ergänzungen dieses Vertrags bedürfen der Schriftform. Dies gilt auch für den Verzicht auf das Schriftformerfordernis.</span></p><p align=\"justify\" class=\"western\">(3) <span>Sollten einzelne Bestimmungen dieses Vertrags unwirksam sein oder werden, so wird dadurch die Gültigkeit der übrigen Bestimmungen nicht berührt. Die Vertragsparteien verpflichten sich in diesen Fällen, anstelle der etwa unwirksamen Bestimmung(en) – mit Wirkung von Beginn der Unwirksamkeit an – eine Ersatzregelung oder ggf. einen neuen wirksamen Vertrag zu vereinbaren, die bzw. der dem wirtschaftlichen gewollten Zweck der unwirksamen Bestimmung(en) weitgehend entspricht oder am nächsten kommt. Dies gilt auch für den Fall, dass der Vertrag eine Regelungslücke enthalten sollte.</span></p><p align=\"justify\">&nbsp;</p>',\n\t\tappendix:\n\t\t\t'<div class=\"pagebreak\" style=\"break-before:always;\"><p></p><h2 id=\"VertragzurAuftragsverarbeitung-Anlage1(TechnischeundorganisatorischeMaßnahmen)\">Anlage 1 (Technische und organisatorische Maßnahmen)</h2><p>Die Systemadministratoren werden im Folgenden \"DevOps\" genannt. Folgende Maßnahmen wurden getroffen:</p><ol><li>Zutrittskontrolle: Alle Systeme sind in ISO 27001 zertifizierten Rechenzentren in Deutschland gehostet. Nur DevOps haben Zutritt zu den physischen Systemen.</li><li>Zugangskontrolle/Benutzerkontrolle: Der Zugriff durch Benutzer ist mit starken Passwörtern entsprechend den internen Passwortregeln oder Public-Key-Zugriff und Zwei-Faktor-Authentifizierung (e.g. YubiKey) gesichert.&nbsp;Benutzerzugriff wird von DevOps verwaltet.</li><li>Zugriffskontrolle/Speicherkontrolle: Datensätze sind mit rollenbasierten Berechtigungen geschützt. Berechtigungen werden von DevOps verwaltet.</li><li>Datenträgerkontrolle: <span>Alle Festplatten mit personenbezogenen Daten sind verschüsselt. Dateiberechtigungen sind für DevOps sowie Anwendungen so vergeben, dass unberechtigter Zugriff auf Dateien von eingeloggten Benutzern und Prozessen verhindert wird.</span></li><li>Übertragungskontrolle/Weitergabekontrolle: Weitergabe von personenbezogenen Daten an andere Empfänger wird protokolliert.&nbsp;Die Protokolle enthalten den Benutzer/Prozess, der die Eingabe initiiert hat, die Kategorie personenbezogener Daten und den Zeitstempel. Die Protokolle werden für sechs Monate aufgehoben.</li><li>Eingabekontrolle: Eingabe von neuen und aktualisierten sowie die Löschung von personenbezogenen Daten wird protokolliert. <span>Die Protokolle enthalten den Benutzer/Prozess, der die Eingabe initiiert hat, die Kategorie personenbezogener Daten und den Zeitstempel. Die Protokolle werden für sechs Monate aufgehoben.</span></li><li>Transportkontrolle: Übertragung von personenbezogenen Daten von und zu den Systemen ist durch starke SSL-Verschlüsselung und/oder Ende-zu-Ende-Verschlüsselung gesichert.</li><li>Vertraulichkeit: Personenbezogene Daten werden soweit möglich Ende-zu-Ende verschlüsselte gespeichert.</li><li>Wiederherstellbarkeit: Alle Systeme haben eine zweite Netzwerkschnittstelle, die nur den Zugriff von DevOps erlaubt. Diese Schnittstelle erlaubt den Zugriff selbst wenn die Hauptschnittstelle blockiert ist. Komponenten des Systems können im Fehlerfall neu gestartet werden. Ein Dienst zum Schutz vor DDOS-Angriffen wird automatisch gestartet, wenn solch ein Angriff erkannt wird.</li><li>Zuverlässigkeit:&nbsp;&nbsp;DevOps überwachen alle Systeme und werden automatisch benachrichtigt, wenn eine Komponente des Systems ausfällt, um diese sofort wieder aktivieren zu können.</li><li>Datenintegrität: Automatische Fehlerkorrektur auf Datenträgern und auf Datenbankebene stellt sicher, dass die Datenintegrität gewahrt bleibt. Zusätzlich wird die Integrität der Ende-zu-Ende verschlüsselten personenbezogenen Daten durch MACs bei der Ver- und Entschlüsselung sichergestellt.</li><li>Auftragskontrolle: Alle Mitarbeiter kennen die Zwecke der Verarbeitung und absolvieren regelmäßig ein internes Sicherheitstraining. Unterauftragnehmer werden nur schriftlich beauftragt.</li><li>Verfügbarkeitskontrolle: <span>Alle Systeme sind in ISO 27001 zertifizierten Rechenzentren in Deutschland gehostet, die die physische Verfügbarkeit und Verbindung der Systeme sicherstellen</span>. Alle langfristig gespeicherten Daten werden dreifach repliziert auf unterschiedlichen Servern oder in einem RAID-System abgelegt. Vor der Aktualisierung kritischer Teile des Systems werden Backups angelegt.</li><li>Trennbarkeit: Getrennte Verarbeitung von personenbezogenen Daten ist bedarfsabhängig eingerichtet.</li><li>Belastbarkeit: Alle Systeme bestehen aus hochskalierbaren Komponenten, die für viel höhere Lasten als tatsächlich benötigt ausgelegt sind. Alle Systeme sind kurzfristig erweiterbar, um kontinuierlich steigende Lasten verarbeiten zu können.</li></ol></div>\\n' +\n\t\t\t\"</div>\",\n\t},\n}\n\nexport function showForSigning(customer: Customer, accountingInfo: AccountingInfo) {\n\tconst signAction = (dialog: Dialog) => {\n\t\tlet data = createSignOrderProcessingAgreementData({\n\t\t\tversion: version,\n\t\t\tcustomerAddress: addressEditor.getValue(),\n\t\t})\n\n\t\tif (addressEditor.getValue().trim().split(\"\\n\").length < 3) {\n\t\t\tDialog.message(\"contractorInfo_msg\")\n\t\t} else {\n\t\t\tlocator.serviceExecutor.post(SignOrderProcessingAgreementService, data).then(() => dialog.close())\n\t\t}\n\t}\n\n\tconst version = \"1_\" + (lang.code === \"de\" ? \"de\" : \"en\")\n\tconst addressEditor = new HtmlEditor()\n\t\t.setMinHeight(120)\n\t\t.showBorders()\n\t\t.setPlaceholderId(\"contractor_label\")\n\t\t.setMode(HtmlEditorMode.HTML)\n\t\t.setHtmlMonospace(false)\n\t\t.setValue(formatNameAndAddress(accountingInfo.invoiceName, accountingInfo.invoiceAddress))\n\tDialog.showActionDialog({\n\t\ttitle: \"orderProcessingAgreement_label\",\n\t\tokAction: signAction,\n\t\tokActionTextId: \"sign_action\",\n\t\ttype: DialogType.EditLarge,\n\t\tchild: () => {\n\t\t\t// @ts-ignore\n\t\t\tconst text = agreementTexts[version]\n\t\t\treturn m(\".pt\", [\n\t\t\t\tm.trust(text.heading),\n\t\t\t\tm(\".flex-center\", m(\".dialog-width-s\", [m(addressEditor), m(\".small\", lang.get(\"contractorInfo_msg\"))])),\n\t\t\t\tm.trust(text.content),\n\t\t\t\tm.trust(text.appendix),\n\t\t\t])\n\t\t},\n\t})\n}\n\n// this is necessary because some style combinations\n// cause several browsers not to print\n// the content below the fold\nfunction printElementContent(elem: HTMLElement | null) {\n\tconst root = document.getElementById(\"root\")\n\tconst body = document.body\n\tif (!elem || !root || !body) return\n\tlet printDiv = document.getElementById(PRINT_DIV_ID)\n\n\tif (!printDiv) {\n\t\tprintDiv = document.createElement(\"DIV\")\n\t\tprintDiv.id = PRINT_DIV_ID\n\t\tbody.appendChild(printDiv)\n\t\tconst classes = root.className.split(\" \")\n\t\tclasses.push(\"noprint\")\n\t\troot.className = classes.join(\" \")\n\t}\n\n\tprintDiv.innerHTML = elem.innerHTML\n\tprintDiv.classList.add(\"noscreen\")\n\twindow.print()\n}\n\nfunction cleanupPrintElement() {\n\tconst root = document.getElementById(\"root\")\n\tconst body = document.body\n\tconst printDiv = document.getElementById(PRINT_DIV_ID)\n\tif (!printDiv || !root || !body) return\n\tbody.removeChild(printDiv)\n\troot.className = root.className\n\t\t.split(\" \")\n\t\t.filter((c) => c !== \"noprint\")\n\t\t.join(\" \")\n}\n\nexport function showForViewing(agreement: OrderProcessingAgreement, signerUserGroupInfo: GroupInfo) {\n\tDialog.showActionDialog({\n\t\ttitle: \"orderProcessingAgreement_label\",\n\t\tokAction: !isApp() && \"function\" === typeof window.print ? () => printElementContent(document.getElementById(\"agreement-content\")) : null,\n\t\tokActionTextId: \"print_action\",\n\t\tcancelActionTextId: \"close_alt\",\n\t\ttype: DialogType.EditLarge,\n\t\tchild: () => {\n\t\t\t// @ts-ignore\n\t\t\tconst text = agreementTexts[agreement.version]\n\t\t\treturn m(\n\t\t\t\t\"#agreement-content.pt\",\n\t\t\t\t{\n\t\t\t\t\tonremove: cleanupPrintElement,\n\t\t\t\t},\n\t\t\t\t[\n\t\t\t\t\tm.trust(text.heading),\n\t\t\t\t\tm(\"p.text-center.text-prewrap\", agreement.customerAddress),\n\t\t\t\t\tm.trust(text.content),\n\t\t\t\t\tm(\n\t\t\t\t\t\t\"i\",\n\t\t\t\t\t\tlang.get(\"signedOn_msg\", {\n\t\t\t\t\t\t\t\"{date}\": formatDate(agreement.signatureDate),\n\t\t\t\t\t\t}) +\n\t\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\t\tlang.get(\"by_label\") +\n\t\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\t\tgetMailAddressDisplayText(signerUserGroupInfo.name, neverNull(signerUserGroupInfo.mailAddress), false),\n\t\t\t\t\t),\n\t\t\t\t\tm(\"hr\"),\n\t\t\t\t\tm.trust(text.appendix),\n\t\t\t\t],\n\t\t\t)\n\t\t},\n\t})\n}\n","import m, { Children } from \"mithril\"\nimport { assertMainOrNode, isIOSApp } from \"../api/common/Env\"\nimport {\n\tAccountType,\n\tAccountTypeNames,\n\tApprovalStatus,\n\tAvailablePlans,\n\tBookingItemFeatureType,\n\tConst,\n\tgetPaymentMethodType,\n\tLegacyPlans,\n\tNewPaidPlans,\n\tOperationType,\n\tPaymentMethodType,\n\tPlanType,\n} from \"../api/common/TutanotaConstants\"\nimport {\n\tAccountingInfo,\n\tAccountingInfoTypeRef,\n\tBooking,\n\tBookingTypeRef,\n\tcreateAppStoreSubscriptionGetIn,\n\tCustomer,\n\tCustomerInfo,\n\tCustomerInfoTypeRef,\n\tCustomerTypeRef,\n\tGiftCard,\n\tGiftCardTypeRef,\n\tGroupInfoTypeRef,\n\tOrderProcessingAgreement,\n\tOrderProcessingAgreementTypeRef,\n\tPlanConfiguration,\n\tUserTypeRef,\n} from \"../api/entities/sys/TypeRefs.js\"\nimport { assertNotNull, base64ExtToBase64, base64ToUint8Array, downcast, incrementDate, neverNull, promiseMap, stringToBase64 } from \"@tutao/tutanota-utils\"\nimport { InfoLink, lang, TranslationKey } from \"../misc/LanguageViewModel\"\nimport { Icons } from \"../gui/base/icons/Icons\"\nimport { asPaymentInterval, formatPrice, formatPriceDataWithInfo, PaymentInterval } from \"./PriceUtils\"\nimport { formatDate, formatStorageSize } from \"../misc/Formatter\"\nimport { showUpgradeWizard } from \"./UpgradeSubscriptionWizard\"\nimport { showSwitchDialog } from \"./SwitchSubscriptionDialog\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport * as SignOrderAgreementDialog from \"./SignOrderProcessingAgreementDialog\"\nimport { NotFoundError } from \"../api/common/error/RestError\"\nimport {\n\tappStorePlanName,\n\tgetCurrentCount,\n\tgetTotalStorageCapacityPerCustomer,\n\tisAutoResponderActive,\n\tisEventInvitesActive,\n\tisSharingActive,\n\tisWhitelabelActive,\n\tqueryAppStoreSubscriptionOwnership,\n} from \"./SubscriptionUtils\"\nimport { TextField } from \"../gui/base/TextField.js\"\nimport { Dialog, DialogType } from \"../gui/base/Dialog\"\nimport { ColumnWidth, Table } from \"../gui/base/Table.js\"\nimport { showPurchaseGiftCardDialog } from \"./giftcards/PurchaseGiftCardDialog\"\nimport { GiftCardStatus, loadGiftCards, showGiftCardToShare } from \"./giftcards/GiftCardUtils\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { GiftCardMessageEditorField } from \"./giftcards/GiftCardMessageEditorField\"\nimport { attachDropdown } from \"../gui/base/Dropdown.js\"\nimport { createNotAvailableForFreeClickHandler } from \"../misc/SubscriptionDialogs\"\nimport { SettingsExpander } from \"../settings/SettingsExpander.js\"\nimport { elementIdPart, GENERATED_MAX_ID, getEtId } from \"../api/common/utils/EntityUtils\"\nimport {\n\tCURRENT_GIFT_CARD_TERMS_VERSION,\n\tCURRENT_PRIVACY_VERSION,\n\tCURRENT_TERMS_VERSION,\n\trenderTermsAndConditionsButton,\n\tTermsSection,\n} from \"./TermsAndConditions\"\nimport { DropDownSelector, SelectorItemList } from \"../gui/base/DropDownSelector.js\"\nimport { IconButton, IconButtonAttrs } from \"../gui/base/IconButton.js\"\nimport { ButtonSize } from \"../gui/base/ButtonSize.js\"\nimport { getDisplayNameOfPlanType } from \"./FeatureListProvider\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../api/common/utils/EntityUpdateUtils.js\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport { MobilePaymentsFacade } from \"../native/common/generatedipc/MobilePaymentsFacade\"\nimport { MobilePaymentSubscriptionOwnership } from \"../native/common/generatedipc/MobilePaymentSubscriptionOwnership\"\nimport { MobilePaymentError } from \"../api/common/error/MobilePaymentError\"\nimport { showManageThroughAppStoreDialog } from \"./PaymentViewer.js\"\nimport type { UpdatableSettingsViewer } from \"../settings/Interfaces.js\"\nimport { client } from \"../misc/ClientDetector.js\"\nimport { AppStoreSubscriptionService } from \"../api/entities/sys/Services.js\"\nimport { AppType } from \"../misc/ClientConstants.js\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\n\nassertMainOrNode()\nconst DAY = 1000 * 60 * 60 * 24\n\n/*\n * Identifies from which app the user subscribed from\n */\nexport enum SubscriptionApp {\n\tMail = \"0\",\n\tCalendar = \"1\",\n}\n\nexport class SubscriptionViewer implements UpdatableSettingsViewer {\n\treadonly view: UpdatableSettingsViewer[\"view\"]\n\tprivate _subscriptionFieldValue: Stream<string>\n\tprivate _orderAgreementFieldValue: Stream<string>\n\tprivate _selectedSubscriptionInterval: Stream<PaymentInterval | null>\n\tprivate _currentPriceFieldValue: Stream<string>\n\tprivate _nextPriceFieldValue: Stream<string>\n\tprivate _usersFieldValue: Stream<string>\n\tprivate _storageFieldValue: Stream<string>\n\tprivate _emailAliasFieldValue: Stream<string>\n\tprivate _groupsFieldValue: Stream<string>\n\tprivate _whitelabelFieldValue: Stream<string>\n\tprivate _sharingFieldValue: Stream<string>\n\tprivate _eventInvitesFieldValue: Stream<string>\n\tprivate _autoResponderFieldValue: Stream<string>\n\tprivate _periodEndDate: Date | null = null\n\tprivate _nextPeriodPriceVisible: boolean | null = null\n\tprivate _customer: Customer | null = null\n\tprivate _customerInfo: CustomerInfo | null = null\n\tprivate _accountingInfo: AccountingInfo | null = null\n\tprivate _lastBooking: Booking | null = null\n\tprivate _orderAgreement: OrderProcessingAgreement | null = null\n\tprivate currentPlanType: PlanType\n\tprivate _isCancelled: boolean | null = null\n\tprivate _giftCards: Map<Id, GiftCard>\n\tprivate _giftCardsExpanded: Stream<boolean>\n\n\tconstructor(currentPlanType: PlanType, private readonly mobilePaymentsFacade: MobilePaymentsFacade | null) {\n\t\tthis.currentPlanType = currentPlanType\n\t\tconst isPremiumPredicate = () => locator.logins.getUserController().isPremiumAccount()\n\n\t\tthis._giftCards = new Map()\n\t\tloadGiftCards(assertNotNull(locator.logins.getUserController().user.customer)).then((giftCards) => {\n\t\t\tfor (const giftCard of giftCards) {\n\t\t\t\tthis._giftCards.set(elementIdPart(giftCard._id), giftCard)\n\t\t\t}\n\t\t})\n\t\tthis._giftCardsExpanded = stream<boolean>(false)\n\n\t\tthis.view = (): Children => {\n\t\t\treturn m(\"#subscription-settings.fill-absolute.scroll.plr-l\", [\n\t\t\t\tm(\".h4.mt-l\", lang.get(\"currentlyBooked_label\")),\n\t\t\t\tm(TextField, {\n\t\t\t\t\tlabel: \"subscription_label\",\n\t\t\t\t\tvalue: this._subscriptionFieldValue(),\n\t\t\t\t\toninput: this._subscriptionFieldValue,\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tinjectionsRight: () =>\n\t\t\t\t\t\tlocator.logins.getUserController().isFreeAccount()\n\t\t\t\t\t\t\t? m(IconButton, {\n\t\t\t\t\t\t\t\t\ttitle: \"upgrade_action\",\n\t\t\t\t\t\t\t\t\tclick: () => showProgressDialog(\"pleaseWait_msg\", this.handleUpgradeSubscription()),\n\t\t\t\t\t\t\t\t\ticon: Icons.Edit,\n\t\t\t\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t: !this._isCancelled\n\t\t\t\t\t\t\t? m(IconButton, {\n\t\t\t\t\t\t\t\t\ttitle: \"subscription_label\",\n\t\t\t\t\t\t\t\t\tclick: () => this.onSubscriptionClick(),\n\t\t\t\t\t\t\t\t\ticon: Icons.Edit,\n\t\t\t\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t: null,\n\t\t\t\t}),\n\t\t\t\tthis.showOrderAgreement() ? this.renderAgreement() : null,\n\t\t\t\tthis.showPriceData() ? this.renderIntervals() : null,\n\t\t\t\tthis.showPriceData() && this._nextPeriodPriceVisible && this._periodEndDate\n\t\t\t\t\t? m(TextField, {\n\t\t\t\t\t\t\tlabel: lang.getTranslation(\"priceFrom_label\", {\n\t\t\t\t\t\t\t\t\"{date}\": formatDate(new Date(neverNull(this._periodEndDate).getTime() + DAY)),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\thelpLabel: () => lang.get(\"nextSubscriptionPrice_msg\"),\n\t\t\t\t\t\t\tvalue: this._nextPriceFieldValue(),\n\t\t\t\t\t\t\toninput: this._nextPriceFieldValue,\n\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t  })\n\t\t\t\t\t: null,\n\t\t\t\tm(\".small.mt-s\", renderTermsAndConditionsButton(TermsSection.Terms, CURRENT_TERMS_VERSION)),\n\t\t\t\tm(\".small.mt-s\", renderTermsAndConditionsButton(TermsSection.Privacy, CURRENT_PRIVACY_VERSION)),\n\t\t\t\tm(\n\t\t\t\t\tSettingsExpander,\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: \"giftCards_label\",\n\t\t\t\t\t\tinfoMsg: \"giftCardSection_label\",\n\t\t\t\t\t\texpanded: this._giftCardsExpanded,\n\t\t\t\t\t},\n\t\t\t\t\trenderGiftCardTable(Array.from(this._giftCards.values()), isPremiumPredicate),\n\t\t\t\t),\n\t\t\t\tLegacyPlans.includes(this.currentPlanType)\n\t\t\t\t\t? [\n\t\t\t\t\t\t\tm(\".h4.mt-l\", lang.get(\"adminPremiumFeatures_action\")),\n\t\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\t\tlabel: \"storageCapacity_label\",\n\t\t\t\t\t\t\t\tvalue: this._storageFieldValue(),\n\t\t\t\t\t\t\t\toninput: this._storageFieldValue,\n\t\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\t\tlabel: \"mailAddressAliases_label\",\n\t\t\t\t\t\t\t\tvalue: this._emailAliasFieldValue(),\n\t\t\t\t\t\t\t\toninput: this._emailAliasFieldValue,\n\t\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\t\tlabel: \"pricing.comparisonSharingCalendar_msg\",\n\t\t\t\t\t\t\t\tvalue: this._sharingFieldValue(),\n\t\t\t\t\t\t\t\toninput: this._sharingFieldValue,\n\t\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\t\tlabel: \"pricing.comparisonEventInvites_msg\",\n\t\t\t\t\t\t\t\tvalue: this._eventInvitesFieldValue(),\n\t\t\t\t\t\t\t\toninput: this._eventInvitesFieldValue,\n\t\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\t\tlabel: \"pricing.comparisonOutOfOffice_msg\",\n\t\t\t\t\t\t\t\tvalue: this._autoResponderFieldValue(),\n\t\t\t\t\t\t\t\toninput: this._autoResponderFieldValue,\n\t\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\t\tlabel: \"whitelabel.login_title\",\n\t\t\t\t\t\t\t\tvalue: this._whitelabelFieldValue(),\n\t\t\t\t\t\t\t\toninput: this._whitelabelFieldValue,\n\t\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\t\tlabel: \"whitelabel.custom_title\",\n\t\t\t\t\t\t\t\tvalue: this._whitelabelFieldValue(),\n\t\t\t\t\t\t\t\toninput: this._whitelabelFieldValue,\n\t\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t  ]\n\t\t\t\t\t: [],\n\t\t\t])\n\t\t}\n\n\t\tlocator.entityClient\n\t\t\t.load(CustomerTypeRef, neverNull(locator.logins.getUserController().user.customer))\n\t\t\t.then((customer) => {\n\t\t\t\tthis.updateCustomerData(customer)\n\t\t\t\treturn locator.logins.getUserController().loadCustomerInfo()\n\t\t\t})\n\t\t\t.then((customerInfo) => {\n\t\t\t\tthis._customerInfo = customerInfo\n\t\t\t\treturn locator.entityClient.load(AccountingInfoTypeRef, customerInfo.accountingInfo)\n\t\t\t})\n\t\t\t.then((accountingInfo) => {\n\t\t\t\tthis.updateAccountInfoData(accountingInfo)\n\t\t\t\tthis.updatePriceInfo()\n\t\t\t})\n\t\tconst loadingString = lang.get(\"loading_msg\")\n\t\tthis._currentPriceFieldValue = stream(loadingString)\n\t\tthis._subscriptionFieldValue = stream(loadingString)\n\t\tthis._orderAgreementFieldValue = stream(loadingString)\n\t\tthis._nextPriceFieldValue = stream(loadingString)\n\t\tthis._usersFieldValue = stream(loadingString)\n\t\tthis._storageFieldValue = stream(loadingString)\n\t\tthis._emailAliasFieldValue = stream(loadingString)\n\t\tthis._groupsFieldValue = stream(loadingString)\n\t\tthis._whitelabelFieldValue = stream(loadingString)\n\t\tthis._sharingFieldValue = stream(loadingString)\n\t\tthis._eventInvitesFieldValue = stream(loadingString)\n\t\tthis._autoResponderFieldValue = stream(loadingString)\n\t\tthis._selectedSubscriptionInterval = stream<PaymentInterval | null>(null)\n\n\t\tthis.updateBookings()\n\t}\n\n\tprivate onSubscriptionClick() {\n\t\tconst paymentMethod = this._accountingInfo ? getPaymentMethodType(this._accountingInfo) : null\n\n\t\tif (isIOSApp() && (paymentMethod == null || paymentMethod == PaymentMethodType.AppStore)) {\n\t\t\t// case 1: we are in iOS app and we either are not paying or are already on AppStore\n\t\t\tthis.handleAppStoreSubscriptionChange()\n\t\t} else if (paymentMethod == PaymentMethodType.AppStore && this._accountingInfo?.appStoreSubscription) {\n\t\t\t// case 2: we have a running AppStore subscription but this is not an iOS app\n\n\t\t\t// If there's a running App Store subscription it must be managed through Apple.\n\t\t\t// This includes the case where renewal is already disabled, but it's not expired yet.\n\t\t\t// Running subscription cannot be changed from other client, but it can still be managed through iOS app or when subscription expires.\n\t\t\treturn showManageThroughAppStoreDialog()\n\t\t} else {\n\t\t\t// other cases (not iOS app, not app store payment method, no running AppStore subscription, iOS but another payment method)\n\t\t\tif (this._accountingInfo && this._customer && this._customerInfo && this._lastBooking) {\n\t\t\t\tshowSwitchDialog(this._customer, this._customerInfo, this._accountingInfo, this._lastBooking, AvailablePlans, null)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async handleUpgradeSubscription() {\n\t\tif (isIOSApp()) {\n\t\t\t// We pass `null` because we expect no subscription when upgrading\n\t\t\tconst appStoreSubscriptionOwnership = await queryAppStoreSubscriptionOwnership(null)\n\n\t\t\tif (appStoreSubscriptionOwnership !== MobilePaymentSubscriptionOwnership.NoSubscription) {\n\t\t\t\treturn Dialog.message(\n\t\t\t\t\tlang.getTranslation(\"storeMultiSubscriptionError_msg\", {\n\t\t\t\t\t\t\"{AppStorePayment}\": InfoLink.AppStorePayment,\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\treturn showUpgradeWizard(locator.logins)\n\t}\n\n\tprivate async handleAppStoreSubscriptionChange() {\n\t\tif (!this.mobilePaymentsFacade) {\n\t\t\tthrow Error(\"Not allowed to change AppStore subscription from web client\")\n\t\t}\n\n\t\tlet customer\n\t\tlet accountingInfo\n\t\tif (this._customer && this._accountingInfo) {\n\t\t\tcustomer = this._customer\n\t\t\taccountingInfo = this._accountingInfo\n\t\t} else {\n\t\t\treturn\n\t\t}\n\n\t\tconst appStoreSubscriptionOwnership = await queryAppStoreSubscriptionOwnership(base64ToUint8Array(base64ExtToBase64(customer._id)))\n\t\tconst isAppStorePayment = getPaymentMethodType(accountingInfo) === PaymentMethodType.AppStore\n\t\tconst userStatus = customer.approvalStatus\n\t\tconst hasAnActiveSubscription = isAppStorePayment && accountingInfo.appStoreSubscription != null\n\n\t\tif (hasAnActiveSubscription && !(await this.canManageAppStoreSubscriptionInApp(accountingInfo, appStoreSubscriptionOwnership))) {\n\t\t\treturn\n\t\t}\n\n\t\t// Show a dialog only if the user's Apple account's last transaction was with this customer ID\n\t\t//\n\t\t// This prevents the user from accidentally changing a subscription that they don't own\n\t\tif (appStoreSubscriptionOwnership === MobilePaymentSubscriptionOwnership.NotOwner) {\n\t\t\t// There's a subscription with this apple account that doesn't belong to this user\n\t\t\treturn Dialog.message(\n\t\t\t\tlang.getTranslation(\"storeMultiSubscriptionError_msg\", {\n\t\t\t\t\t\"{AppStorePayment}\": InfoLink.AppStorePayment,\n\t\t\t\t}),\n\t\t\t)\n\t\t} else if (\n\t\t\tisAppStorePayment &&\n\t\t\tappStoreSubscriptionOwnership === MobilePaymentSubscriptionOwnership.NoSubscription &&\n\t\t\tuserStatus === ApprovalStatus.REGISTRATION_APPROVED\n\t\t) {\n\t\t\t// User has an ongoing subscriptions but not on the current Apple Account, so we shouldn't allow them to change their plan with this account\n\t\t\t// instead of the account owner of the subscriptions\n\t\t\treturn Dialog.message(lang.getTranslation(\"storeNoSubscription_msg\", { \"{AppStorePayment}\": InfoLink.AppStorePayment }))\n\t\t} else if (appStoreSubscriptionOwnership === MobilePaymentSubscriptionOwnership.NoSubscription) {\n\t\t\t// User has no ongoing subscription and isn't approved. We should allow them to downgrade their accounts or resubscribe and\n\t\t\t// restart an Apple Subscription flow\n\t\t\tconst isResubscribe = await Dialog.choice(\n\t\t\t\tlang.getTranslation(\"storeDowngradeOrResubscribe_msg\", { \"{AppStoreDowngrade}\": InfoLink.AppStoreDowngrade }),\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: \"changePlan_action\",\n\t\t\t\t\t\tvalue: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: \"resubscribe_action\",\n\t\t\t\t\t\tvalue: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t)\n\n\t\t\tif (isResubscribe) {\n\t\t\t\tconst planType = await locator.logins.getUserController().getPlanType()\n\t\t\t\tconst customerId = locator.logins.getUserController().user.customer!\n\t\t\t\tconst customerIdBytes = base64ToUint8Array(base64ExtToBase64(customerId))\n\t\t\t\ttry {\n\t\t\t\t\tawait this.mobilePaymentsFacade.requestSubscriptionToPlan(\n\t\t\t\t\t\tappStorePlanName(planType),\n\t\t\t\t\t\tasPaymentInterval(accountingInfo.paymentInterval),\n\t\t\t\t\t\tcustomerIdBytes,\n\t\t\t\t\t)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof MobilePaymentError) {\n\t\t\t\t\t\tconsole.error(\"AppStore subscription failed\", e)\n\t\t\t\t\t\tDialog.message(\"appStoreSubscriptionError_msg\", e.message)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._customerInfo && this._lastBooking) {\n\t\t\t\t\treturn showSwitchDialog(customer, this._customerInfo, accountingInfo, this._lastBooking, AvailablePlans, null)\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._customerInfo && this._lastBooking) {\n\t\t\t\treturn showSwitchDialog(customer, this._customerInfo, accountingInfo, this._lastBooking, AvailablePlans, null)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async canManageAppStoreSubscriptionInApp(accountingInfo: AccountingInfo, ownership: MobilePaymentSubscriptionOwnership): Promise<boolean> {\n\t\tif (ownership === MobilePaymentSubscriptionOwnership.NotOwner) {\n\t\t\treturn true\n\t\t}\n\n\t\tconst appStoreSubscriptionData = await locator.serviceExecutor.get(\n\t\t\tAppStoreSubscriptionService,\n\t\t\tcreateAppStoreSubscriptionGetIn({ subscriptionId: elementIdPart(assertNotNull(accountingInfo.appStoreSubscription)) }),\n\t\t)\n\n\t\tif (!appStoreSubscriptionData || appStoreSubscriptionData.app == null) {\n\t\t\tthrow new ProgrammingError(\"Failed to determine subscription origin\")\n\t\t}\n\n\t\tconst isMailSubscription = appStoreSubscriptionData.app === SubscriptionApp.Mail\n\n\t\tif (client.isCalendarApp() && isMailSubscription) {\n\t\t\treturn await this.handleAppOpen(SubscriptionApp.Mail)\n\t\t} else if (!client.isCalendarApp() && !isMailSubscription) {\n\t\t\treturn await this.handleAppOpen(SubscriptionApp.Calendar)\n\t\t}\n\n\t\treturn true\n\t}\n\n\tprivate async handleAppOpen(app: SubscriptionApp) {\n\t\tconst appName = app === SubscriptionApp.Calendar ? \"Tuta Calendar\" : \"Tuta Mail\"\n\t\tconst dialogResult = await Dialog.confirm(lang.getTranslation(\"handleSubscriptionOnApp_msg\", { \"{1}\": appName }), \"yes_label\")\n\t\tconst query = stringToBase64(`settings=subscription`)\n\n\t\tif (!dialogResult) {\n\t\t\treturn false\n\t\t}\n\n\t\tif (app === SubscriptionApp.Calendar) {\n\t\t\tlocator.systemFacade.openCalendarApp(query)\n\t\t} else {\n\t\t\tlocator.systemFacade.openMailApp(query)\n\t\t}\n\n\t\treturn false\n\t}\n\n\tprivate openAppDialogCallback(open: boolean, app: AppType.Mail | AppType.Calendar) {\n\t\tif (!open) {\n\t\t\treturn\n\t\t}\n\n\t\tconst appName = app === AppType.Mail ? \"Tuta Mail\" : \"Tuta Calendar\"\n\t}\n\n\tprivate showOrderAgreement(): boolean {\n\t\treturn (\n\t\t\tlocator.logins.getUserController().isPremiumAccount() &&\n\t\t\t((this._customer != null && this._customer.businessUse) ||\n\t\t\t\t(this._customer != null && (this._customer.orderProcessingAgreement != null || this._customer.orderProcessingAgreementNeeded)))\n\t\t)\n\t}\n\n\tprivate async updateCustomerData(customer: Customer): Promise<void> {\n\t\tthis._customer = customer\n\n\t\tif (customer.orderProcessingAgreement) {\n\t\t\tthis._orderAgreement = await locator.entityClient.load(OrderProcessingAgreementTypeRef, customer.orderProcessingAgreement)\n\t\t} else {\n\t\t\tthis._orderAgreement = null\n\t\t}\n\n\t\tif (customer.orderProcessingAgreementNeeded) {\n\t\t\tthis._orderAgreementFieldValue(lang.get(\"signingNeeded_msg\"))\n\t\t} else if (this._orderAgreement) {\n\t\t\tthis._orderAgreementFieldValue(\n\t\t\t\tlang.get(\"signedOn_msg\", {\n\t\t\t\t\t\"{date}\": formatDate(this._orderAgreement.signatureDate),\n\t\t\t\t}),\n\t\t\t)\n\t\t} else {\n\t\t\tthis._orderAgreementFieldValue(lang.get(\"notSigned_msg\"))\n\t\t}\n\n\t\tm.redraw()\n\t}\n\n\tprivate showPriceData(): boolean {\n\t\tconst isAppStorePayment = this._accountingInfo && getPaymentMethodType(this._accountingInfo) === PaymentMethodType.AppStore\n\t\treturn locator.logins.getUserController().isPremiumAccount() && !isIOSApp() && !isAppStorePayment\n\t}\n\n\tprivate async updatePriceInfo(): Promise<void> {\n\t\tif (!this.showPriceData()) {\n\t\t\treturn\n\t\t}\n\n\t\tconst priceServiceReturn = await locator.bookingFacade.getCurrentPrice()\n\t\tif (priceServiceReturn.currentPriceThisPeriod != null && priceServiceReturn.currentPriceNextPeriod != null) {\n\t\t\tif (priceServiceReturn.currentPriceThisPeriod.price !== priceServiceReturn.currentPriceNextPeriod.price) {\n\t\t\t\tthis._currentPriceFieldValue(formatPriceDataWithInfo(priceServiceReturn.currentPriceThisPeriod))\n\n\t\t\t\tthis._nextPriceFieldValue(formatPriceDataWithInfo(neverNull(priceServiceReturn.currentPriceNextPeriod)))\n\n\t\t\t\tthis._nextPeriodPriceVisible = true\n\t\t\t} else {\n\t\t\t\tthis._currentPriceFieldValue(formatPriceDataWithInfo(priceServiceReturn.currentPriceThisPeriod))\n\n\t\t\t\tthis._nextPeriodPriceVisible = false\n\t\t\t}\n\n\t\t\tthis._periodEndDate = priceServiceReturn.periodEndDate\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\tprivate updateAccountInfoData(accountingInfo: AccountingInfo) {\n\t\tthis._accountingInfo = accountingInfo\n\n\t\tthis._selectedSubscriptionInterval(asPaymentInterval(accountingInfo.paymentInterval))\n\n\t\tm.redraw()\n\t}\n\n\tprivate async updateSubscriptionField() {\n\t\tconst userController = locator.logins.getUserController()\n\t\tconst accountType: AccountType = downcast(userController.user.accountType)\n\t\tconst planType = await userController.getPlanType()\n\n\t\tthis._subscriptionFieldValue(_getAccountTypeName(accountType, planType))\n\t}\n\n\tprivate async updateBookings(): Promise<void> {\n\t\tconst userController = locator.logins.getUserController()\n\n\t\tconst customer = await userController.loadCustomer()\n\t\tlet customerInfo: CustomerInfo\n\t\ttry {\n\t\t\tcustomerInfo = await userController.loadCustomerInfo()\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\tconsole.log(\"could not update bookings as customer info does not exist (moved between free/premium lists)\")\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\n\t\tthis._customerInfo = customerInfo\n\t\tconst bookings = await locator.entityClient.loadRange(BookingTypeRef, neverNull(customerInfo.bookings).items, GENERATED_MAX_ID, 1, true)\n\t\tthis._lastBooking = bookings.length > 0 ? bookings[bookings.length - 1] : null\n\t\tthis._customer = customer\n\t\tthis.currentPlanType = await userController.getPlanType()\n\n\t\tconst planConfig = await userController.getPlanConfig()\n\t\tawait this.updateSubscriptionField()\n\n\t\tawait Promise.all([\n\t\t\tthis.updateUserField(),\n\t\t\tthis.updateStorageField(customer, customerInfo),\n\t\t\tthis.updateAliasField(),\n\t\t\tthis.updateGroupsField(),\n\t\t\tthis.updateWhitelabelField(planConfig),\n\t\t\tthis.updateSharingField(planConfig),\n\t\t\tthis.updateEventInvitesField(planConfig),\n\t\t\tthis.updateAutoResponderField(planConfig),\n\t\t])\n\t\tm.redraw()\n\t}\n\n\tprivate async updateUserField(): Promise<void> {\n\t\tthis._usersFieldValue(\"\" + Math.max(1, getCurrentCount(BookingItemFeatureType.LegacyUsers, this._lastBooking)))\n\t}\n\n\tprivate async updateStorageField(customer: Customer, customerInfo: CustomerInfo): Promise<void> {\n\t\tconst usedStorage = await locator.customerFacade.readUsedCustomerStorage(getEtId(customer))\n\t\tconst usedStorageFormatted = formatStorageSize(Number(usedStorage))\n\t\tconst totalStorageFormatted = formatStorageSize(getTotalStorageCapacityPerCustomer(customer, customerInfo, this._lastBooking) * Const.MEMORY_GB_FACTOR)\n\n\t\tthis._storageFieldValue(\n\t\t\tlang.get(\"amountUsedOf_label\", {\n\t\t\t\t\"{amount}\": usedStorageFormatted,\n\t\t\t\t\"{totalAmount}\": totalStorageFormatted,\n\t\t\t}),\n\t\t)\n\t}\n\n\tprivate async updateAliasField(): Promise<void> {\n\t\t// we pass in the user group id here even though for legacy plans the id is ignored\n\t\tconst counters = await locator.mailAddressFacade.getAliasCounters(locator.logins.getUserController().user.userGroup.group)\n\t\tthis._emailAliasFieldValue(\n\t\t\tlang.get(\"amountUsedAndActivatedOf_label\", {\n\t\t\t\t\"{used}\": counters.usedAliases,\n\t\t\t\t\"{active}\": counters.enabledAliases,\n\t\t\t\t\"{totalAmount}\": counters.totalAliases,\n\t\t\t}),\n\t\t)\n\t}\n\n\tprivate async updateGroupsField(): Promise<void> {\n\t\tlet localAdminCount = getCurrentCount(BookingItemFeatureType.LocalAdminGroup, this._lastBooking)\n\t\tconst localAdminText = localAdminCount + \" \" + lang.get(localAdminCount === 1 ? \"localAdminGroup_label\" : \"localAdminGroups_label\")\n\t\tlet sharedMailCount = getCurrentCount(BookingItemFeatureType.SharedMailGroup, this._lastBooking)\n\t\tconst sharedMailText = sharedMailCount + \" \" + lang.get(sharedMailCount === 1 ? \"sharedMailbox_label\" : \"sharedMailboxes_label\")\n\n\t\tif (localAdminCount === 0) {\n\t\t\t// also show the shared mailboxes text if no groups exists at all\n\t\t\tthis._groupsFieldValue(sharedMailText)\n\t\t} else if (localAdminCount > 0 && sharedMailCount > 0) {\n\t\t\tthis._groupsFieldValue(sharedMailText + \", \" + localAdminText)\n\t\t} else {\n\t\t\tthis._groupsFieldValue(localAdminText)\n\t\t}\n\t}\n\n\tprivate async updateWhitelabelField(planConfig: PlanConfiguration): Promise<void> {\n\t\tif (isWhitelabelActive(this._lastBooking, planConfig)) {\n\t\t\tthis._whitelabelFieldValue(lang.get(\"active_label\"))\n\t\t} else {\n\t\t\tthis._whitelabelFieldValue(lang.get(\"deactivated_label\"))\n\t\t}\n\t}\n\n\tprivate async updateSharingField(planConfig: PlanConfiguration): Promise<void> {\n\t\tif (isSharingActive(this._lastBooking, planConfig)) {\n\t\t\tthis._sharingFieldValue(lang.get(\"active_label\"))\n\t\t} else {\n\t\t\tthis._sharingFieldValue(lang.get(\"deactivated_label\"))\n\t\t}\n\t}\n\n\tprivate async updateEventInvitesField(planConfig: PlanConfiguration): Promise<void> {\n\t\tif (!this._customer) {\n\t\t\tthis._eventInvitesFieldValue(\"\")\n\t\t} else if (isEventInvitesActive(this._lastBooking, planConfig)) {\n\t\t\tthis._eventInvitesFieldValue(lang.get(\"active_label\"))\n\t\t} else {\n\t\t\tthis._eventInvitesFieldValue(lang.get(\"deactivated_label\"))\n\t\t}\n\t}\n\n\tprivate async updateAutoResponderField(planConfig: PlanConfiguration): Promise<void> {\n\t\tif (!this._customer) {\n\t\t\tthis._autoResponderFieldValue(\"\")\n\t\t} else if (isAutoResponderActive(this._lastBooking, planConfig)) {\n\t\t\tthis._autoResponderFieldValue(lang.get(\"active_label\"))\n\t\t} else {\n\t\t\tthis._autoResponderFieldValue(lang.get(\"deactivated_label\"))\n\t\t}\n\t}\n\n\tasync entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\tawait promiseMap(updates, (update) => this.processUpdate(update))\n\t}\n\n\tasync processUpdate(update: EntityUpdateData): Promise<void> {\n\t\tconst { instanceListId, instanceId } = update\n\n\t\tif (isUpdateForTypeRef(AccountingInfoTypeRef, update)) {\n\t\t\tconst accountingInfo = await locator.entityClient.load(AccountingInfoTypeRef, instanceId)\n\t\t\tthis.updateAccountInfoData(accountingInfo)\n\t\t\treturn await this.updatePriceInfo()\n\t\t} else if (isUpdateForTypeRef(UserTypeRef, update)) {\n\t\t\tawait this.updateBookings()\n\t\t\treturn await this.updatePriceInfo()\n\t\t} else if (isUpdateForTypeRef(BookingTypeRef, update)) {\n\t\t\tawait this.updateBookings()\n\t\t\treturn await this.updatePriceInfo()\n\t\t} else if (isUpdateForTypeRef(CustomerTypeRef, update)) {\n\t\t\tconst customer = await locator.entityClient.load(CustomerTypeRef, instanceId)\n\t\t\treturn await this.updateCustomerData(customer)\n\t\t} else if (isUpdateForTypeRef(CustomerInfoTypeRef, update)) {\n\t\t\t// needed to update the displayed plan\n\t\t\tawait this.updateBookings()\n\t\t\treturn await this.updatePriceInfo()\n\t\t} else if (isUpdateForTypeRef(GiftCardTypeRef, update)) {\n\t\t\tconst giftCard = await locator.entityClient.load(GiftCardTypeRef, [instanceListId, instanceId])\n\t\t\tthis._giftCards.set(elementIdPart(giftCard._id), giftCard)\n\t\t\tif (update.operation === OperationType.CREATE) this._giftCardsExpanded(true)\n\t\t}\n\t}\n\n\tprivate renderIntervals() {\n\t\tconst isAppStorePayment = this._accountingInfo && getPaymentMethodType(this._accountingInfo) === PaymentMethodType.AppStore\n\t\tif (isIOSApp() || isAppStorePayment) {\n\t\t\treturn\n\t\t}\n\n\t\tconst subscriptionPeriods: SelectorItemList<PaymentInterval | null> = [\n\t\t\t{\n\t\t\t\tname: lang.get(\"pricing.yearly_label\"),\n\t\t\t\tvalue: PaymentInterval.Yearly,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: lang.get(\"pricing.monthly_label\"),\n\t\t\t\tvalue: PaymentInterval.Monthly,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: lang.get(\"loading_msg\"),\n\t\t\t\tvalue: null,\n\t\t\t\tselectable: false,\n\t\t\t},\n\t\t]\n\n\t\tconst bonusMonths = this._lastBooking ? Number(this._lastBooking.bonusMonth) : 0\n\t\treturn [\n\t\t\tm(DropDownSelector, {\n\t\t\t\tlabel: \"paymentInterval_label\",\n\t\t\t\thelpLabel: () => this.getChargeDateText(),\n\t\t\t\titems: subscriptionPeriods,\n\t\t\t\tselectedValue: this._selectedSubscriptionInterval(),\n\t\t\t\tdropdownWidth: 300,\n\t\t\t\tselectionChangedHandler: (value: number) => {\n\t\t\t\t\tif (this._accountingInfo) {\n\t\t\t\t\t\tshowChangeSubscriptionIntervalDialog(this._accountingInfo, value, this._periodEndDate)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}),\n\t\t\tbonusMonths === 0\n\t\t\t\t? null\n\t\t\t\t: m(TextField, {\n\t\t\t\t\t\tlabel: \"bonus_label\",\n\t\t\t\t\t\tvalue: lang.get(\"bonusMonth_msg\", { \"{months}\": bonusMonths }),\n\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t  }),\n\t\t\tm(TextField, {\n\t\t\t\tlabel:\n\t\t\t\t\tthis._nextPeriodPriceVisible && this._periodEndDate\n\t\t\t\t\t\t? lang.getTranslation(\"priceTill_label\", {\n\t\t\t\t\t\t\t\t\"{date}\": formatDate(this._periodEndDate),\n\t\t\t\t\t\t  })\n\t\t\t\t\t\t: \"price_label\",\n\t\t\t\tvalue: this._currentPriceFieldValue(),\n\t\t\t\toninput: this._currentPriceFieldValue,\n\t\t\t\tisReadOnly: true,\n\t\t\t\thelpLabel: () => (this._customer && this._customer.businessUse === true ? lang.get(\"pricing.subscriptionPeriodInfoBusiness_msg\") : null),\n\t\t\t}),\n\t\t]\n\t}\n\n\tprivate renderAgreement() {\n\t\treturn m(TextField, {\n\t\t\tlabel: \"orderProcessingAgreement_label\",\n\t\t\thelpLabel: () => lang.get(\"orderProcessingAgreementInfo_msg\"),\n\t\t\tvalue: this._orderAgreementFieldValue(),\n\t\t\toninput: this._orderAgreementFieldValue,\n\t\t\tisReadOnly: true,\n\t\t\tinjectionsRight: () => {\n\t\t\t\tif (this._orderAgreement && this._customer && this._customer.orderProcessingAgreementNeeded) {\n\t\t\t\t\treturn [this.renderSignProcessingAgreementAction(), this.renderShowProcessingAgreementAction()]\n\t\t\t\t} else if (this._orderAgreement) {\n\t\t\t\t\treturn [this.renderShowProcessingAgreementAction()]\n\t\t\t\t} else if (this._customer && this._customer.orderProcessingAgreementNeeded) {\n\t\t\t\t\treturn [this.renderSignProcessingAgreementAction()]\n\t\t\t\t} else {\n\t\t\t\t\treturn []\n\t\t\t\t}\n\t\t\t},\n\t\t})\n\t}\n\n\tprivate renderShowProcessingAgreementAction() {\n\t\treturn m(IconButton, {\n\t\t\ttitle: \"show_action\",\n\t\t\tclick: () =>\n\t\t\t\tlocator.entityClient\n\t\t\t\t\t.load(GroupInfoTypeRef, neverNull(this._orderAgreement).signerUserGroupInfo)\n\t\t\t\t\t.then((signerUserGroupInfo) => SignOrderAgreementDialog.showForViewing(neverNull(this._orderAgreement), signerUserGroupInfo)),\n\t\t\ticon: Icons.Download,\n\t\t\tsize: ButtonSize.Compact,\n\t\t})\n\t}\n\n\tprivate renderSignProcessingAgreementAction() {\n\t\treturn m(IconButton, {\n\t\t\ttitle: \"sign_action\",\n\t\t\tclick: () => SignOrderAgreementDialog.showForSigning(neverNull(this._customer), neverNull(this._accountingInfo)),\n\t\t\ticon: Icons.Edit,\n\t\t\tsize: ButtonSize.Compact,\n\t\t})\n\t}\n\n\tprivate getChargeDateText(): string {\n\t\tif (this._periodEndDate) {\n\t\t\tconst chargeDate = formatDate(incrementDate(new Date(this._periodEndDate), 1))\n\t\t\treturn lang.get(\"nextChargeOn_label\", { \"{chargeDate}\": chargeDate })\n\t\t} else {\n\t\t\treturn \"\"\n\t\t}\n\t}\n}\n\nfunction _getAccountTypeName(type: AccountType, subscription: PlanType): string {\n\tif (type === AccountType.PAID) {\n\t\treturn getDisplayNameOfPlanType(subscription)\n\t} else {\n\t\treturn AccountTypeNames[type]\n\t}\n}\n\nfunction showChangeSubscriptionIntervalDialog(accountingInfo: AccountingInfo, paymentInterval: PaymentInterval, periodEndDate: Date | null): void {\n\tif (accountingInfo && accountingInfo.invoiceCountry && asPaymentInterval(accountingInfo.paymentInterval) !== paymentInterval) {\n\t\tconst confirmationMessage = periodEndDate\n\t\t\t? lang.getTranslation(\"subscriptionChangePeriod_msg\", {\n\t\t\t\t\t\"{1}\": formatDate(periodEndDate),\n\t\t\t  })\n\t\t\t: \"subscriptionChange_msg\"\n\n\t\tDialog.confirm(confirmationMessage).then(async (confirmed) => {\n\t\t\tif (confirmed) {\n\t\t\t\tawait locator.customerFacade.changePaymentInterval(accountingInfo, paymentInterval)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction renderGiftCardTable(giftCards: GiftCard[], isPremiumPredicate: () => boolean): Children {\n\tconst addButtonAttrs: IconButtonAttrs = {\n\t\ttitle: \"buyGiftCard_label\",\n\t\tclick: createNotAvailableForFreeClickHandler(NewPaidPlans, () => showPurchaseGiftCardDialog(), isPremiumPredicate),\n\t\ticon: Icons.Add,\n\t\tsize: ButtonSize.Compact,\n\t}\n\tconst columnHeading: [TranslationKey, TranslationKey] = [\"purchaseDate_label\", \"value_label\"]\n\tconst columnWidths = [ColumnWidth.Largest, ColumnWidth.Small, ColumnWidth.Small]\n\tconst lines = giftCards\n\t\t.filter((giftCard) => giftCard.status === GiftCardStatus.Usable)\n\t\t.map((giftCard) => {\n\t\t\treturn {\n\t\t\t\tcells: [formatDate(giftCard.orderDate), formatPrice(parseFloat(giftCard.value), true)],\n\t\t\t\tactionButtonAttrs: attachDropdown({\n\t\t\t\t\tmainButtonAttrs: {\n\t\t\t\t\t\ttitle: \"options_action\",\n\t\t\t\t\t\ticon: Icons.More,\n\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t},\n\t\t\t\t\tchildAttrs: () => [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: \"view_label\",\n\t\t\t\t\t\t\tclick: () => showGiftCardToShare(giftCard),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: \"edit_action\",\n\t\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\t\tlet message = stream(giftCard.message)\n\t\t\t\t\t\t\t\tDialog.showActionDialog({\n\t\t\t\t\t\t\t\t\ttitle: \"editMessage_label\",\n\t\t\t\t\t\t\t\t\tchild: () =>\n\t\t\t\t\t\t\t\t\t\tm(\n\t\t\t\t\t\t\t\t\t\t\t\".flex-center\",\n\t\t\t\t\t\t\t\t\t\t\tm(GiftCardMessageEditorField, {\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: message(),\n\t\t\t\t\t\t\t\t\t\t\t\tonMessageChanged: message,\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tokAction: (dialog: Dialog) => {\n\t\t\t\t\t\t\t\t\t\tgiftCard.message = message()\n\t\t\t\t\t\t\t\t\t\tlocator.entityClient\n\t\t\t\t\t\t\t\t\t\t\t.update(giftCard)\n\t\t\t\t\t\t\t\t\t\t\t.then(() => dialog.close())\n\t\t\t\t\t\t\t\t\t\t\t.catch(() => Dialog.message(\"giftCardUpdateError_msg\"))\n\t\t\t\t\t\t\t\t\t\tshowGiftCardToShare(giftCard)\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tokActionTextId: \"save_action\",\n\t\t\t\t\t\t\t\t\ttype: DialogType.EditSmall,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t}),\n\t\t\t}\n\t\t})\n\treturn [\n\t\tm(Table, {\n\t\t\taddButtonAttrs,\n\t\t\tcolumnHeading,\n\t\t\tcolumnWidths,\n\t\t\tlines,\n\t\t\tshowActionButtonColumn: true,\n\t\t}),\n\t\tm(\".small\", renderTermsAndConditionsButton(TermsSection.GiftCards, CURRENT_GIFT_CARD_TERMS_VERSION)),\n\t]\n}\n","import m from \"mithril\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport { lang, MaybeTranslation } from \"../misc/LanguageViewModel\"\nimport { ButtonType } from \"../gui/base/Button.js\"\nimport { AccountingInfo, Booking, createSurveyData, createSwitchAccountTypePostIn, Customer, CustomerInfo, SurveyData } from \"../api/entities/sys/TypeRefs.js\"\nimport {\n\tAccountType,\n\tAvailablePlanType,\n\tBookingFailureReason,\n\tConst,\n\tgetPaymentMethodType,\n\tInvoiceData,\n\tKeys,\n\tLegacyPlans,\n\tNewBusinessPlans,\n\tPaymentMethodType,\n\tPlanType,\n\tPlanTypeToName,\n\tUnsubscribeFailureReason,\n} from \"../api/common/TutanotaConstants\"\nimport { SubscriptionActionButtons, SubscriptionSelector } from \"./SubscriptionSelector\"\nimport stream from \"mithril/stream\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport { DialogHeaderBarAttrs } from \"../gui/base/DialogHeaderBar\"\nimport type { CurrentPlanInfo } from \"./SwitchSubscriptionDialogModel\"\nimport { SwitchSubscriptionDialogModel } from \"./SwitchSubscriptionDialogModel\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { SwitchAccountTypeService } from \"../api/entities/sys/Services.js\"\nimport { BadRequestError, InvalidDataError, PreconditionFailedError } from \"../api/common/error/RestError.js\"\nimport { FeatureListProvider } from \"./FeatureListProvider\"\nimport { PaymentInterval, PriceAndConfigProvider } from \"./PriceUtils\"\nimport { assertNotNull, base64ExtToBase64, base64ToUint8Array, delay, downcast, lazy } from \"@tutao/tutanota-utils\"\nimport { showSwitchToBusinessInvoiceDataDialog } from \"./SwitchToBusinessInvoiceDataDialog.js\"\nimport { getByAbbreviation } from \"../api/common/CountryList.js\"\nimport { formatNameAndAddress } from \"../api/common/utils/CommonFormatter.js\"\nimport { LoginButtonAttrs } from \"../gui/base/buttons/LoginButton.js\"\nimport { showLeavingUserSurveyWizard } from \"./LeavingUserSurveyWizard.js\"\nimport { SURVEY_VERSION_NUMBER } from \"./LeavingUserSurveyConstants.js\"\nimport { isIOSApp } from \"../api/common/Env.js\"\nimport { MobilePaymentSubscriptionOwnership } from \"../native/common/generatedipc/MobilePaymentSubscriptionOwnership.js\"\nimport { showManageThroughAppStoreDialog } from \"./PaymentViewer.js\"\nimport { appStorePlanName, hasRunningAppStoreSubscription } from \"./SubscriptionUtils.js\"\nimport { MobilePaymentError } from \"../api/common/error/MobilePaymentError.js\"\nimport { mailLocator } from \"../../mail-app/mailLocator\"\nimport { client } from \"../misc/ClientDetector.js\"\nimport { SubscriptionApp } from \"./SubscriptionViewer.js\"\n\n/**\n * Allows cancelling the subscription (only private use) and switching the subscription to a different paid subscription.\n * Note: Only shown if the user is already a Premium user.\n */\nexport async function showSwitchDialog(\n\tcustomer: Customer,\n\tcustomerInfo: CustomerInfo,\n\taccountingInfo: AccountingInfo,\n\tlastBooking: Booking,\n\tacceptedPlans: AvailablePlanType[],\n\treason: MaybeTranslation | null,\n): Promise<void> {\n\tif (hasRunningAppStoreSubscription(accountingInfo) && !isIOSApp()) {\n\t\tawait showManageThroughAppStoreDialog()\n\t\treturn\n\t}\n\n\tconst [featureListProvider, priceAndConfigProvider] = await showProgressDialog(\n\t\t\"pleaseWait_msg\",\n\t\tPromise.all([\n\t\t\tFeatureListProvider.getInitializedInstance(locator.domainConfigProvider().getCurrentDomainConfig()),\n\t\t\tPriceAndConfigProvider.getInitializedInstance(null, locator.serviceExecutor, null),\n\t\t]),\n\t)\n\tconst model = new SwitchSubscriptionDialogModel(customer, accountingInfo, await locator.logins.getUserController().getPlanType(), lastBooking)\n\tconst cancelAction = () => {\n\t\tdialog.close()\n\t}\n\n\tconst headerBarAttrs: DialogHeaderBarAttrs = {\n\t\tleft: [\n\t\t\t{\n\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\tclick: cancelAction,\n\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t},\n\t\t],\n\t\tright: [],\n\t\tmiddle: \"subscription_label\",\n\t}\n\tconst currentPlanInfo = model.currentPlanInfo\n\tconst businessUse = stream(currentPlanInfo.businessUse)\n\tconst paymentInterval = stream(PaymentInterval.Yearly) // always default to yearly\n\tconst multipleUsersAllowed = model.multipleUsersStillSupportedLegacy()\n\n\tconst dialog: Dialog = Dialog.largeDialog(headerBarAttrs, {\n\t\tview: () =>\n\t\t\tm(\n\t\t\t\t\".pt\",\n\t\t\t\tm(SubscriptionSelector, {\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tbusinessUse,\n\t\t\t\t\t\tpaymentInterval: paymentInterval,\n\t\t\t\t\t},\n\t\t\t\t\tpriceInfoTextId: priceAndConfigProvider.getPriceInfoMessage(),\n\t\t\t\t\tmsg: reason,\n\t\t\t\t\tboxWidth: 230,\n\t\t\t\t\tboxHeight: 270,\n\t\t\t\t\tacceptedPlans: acceptedPlans,\n\t\t\t\t\tcurrentPlanType: currentPlanInfo.planType,\n\t\t\t\t\tallowSwitchingPaymentInterval: currentPlanInfo.paymentInterval !== PaymentInterval.Yearly,\n\t\t\t\t\tactionButtons: subscriptionActionButtons,\n\t\t\t\t\tfeatureListProvider: featureListProvider,\n\t\t\t\t\tpriceAndConfigProvider,\n\t\t\t\t\tmultipleUsersAllowed,\n\t\t\t\t}),\n\t\t\t),\n\t})\n\t\t.addShortcut({\n\t\t\tkey: Keys.ESC,\n\t\t\texec: cancelAction,\n\t\t\thelp: \"close_alt\",\n\t\t})\n\t\t.setCloseHandler(cancelAction)\n\tconst subscriptionActionButtons: SubscriptionActionButtons = {\n\t\t[PlanType.Free]: () =>\n\t\t\t({\n\t\t\t\tlabel: \"pricing.select_action\",\n\t\t\t\tonclick: () => onSwitchToFree(customer, dialog, currentPlanInfo),\n\t\t\t} satisfies LoginButtonAttrs),\n\t\t[PlanType.Revolutionary]: createPlanButton(dialog, PlanType.Revolutionary, currentPlanInfo, paymentInterval, accountingInfo),\n\t\t[PlanType.Legend]: createPlanButton(dialog, PlanType.Legend, currentPlanInfo, paymentInterval, accountingInfo),\n\t\t[PlanType.Essential]: createPlanButton(dialog, PlanType.Essential, currentPlanInfo, paymentInterval, accountingInfo),\n\t\t[PlanType.Advanced]: createPlanButton(dialog, PlanType.Advanced, currentPlanInfo, paymentInterval, accountingInfo),\n\t\t[PlanType.Unlimited]: createPlanButton(dialog, PlanType.Unlimited, currentPlanInfo, paymentInterval, accountingInfo),\n\t}\n\tdialog.show()\n\treturn\n}\n\nasync function onSwitchToFree(customer: Customer, dialog: Dialog, currentPlanInfo: CurrentPlanInfo) {\n\tif (isIOSApp()) {\n\t\t// We want the user to disable renewal in AppStore before they try to downgrade on our side\n\t\tconst ownership = await locator.mobilePaymentsFacade.queryAppStoreSubscriptionOwnership(base64ToUint8Array(base64ExtToBase64(customer._id)))\n\t\tif (ownership === MobilePaymentSubscriptionOwnership.Owner && (await locator.mobilePaymentsFacade.isAppStoreRenewalEnabled())) {\n\t\t\tawait locator.mobilePaymentsFacade.showSubscriptionConfigView()\n\n\t\t\tawait showProgressDialog(\"pleaseWait_msg\", waitUntilRenewalDisabled())\n\n\t\t\tif (await locator.mobilePaymentsFacade.isAppStoreRenewalEnabled()) {\n\t\t\t\tconsole.log(\"AppStore renewal is still enabled, canceling downgrade\")\n\t\t\t\t// User probably did not disable the renewal still, cancel\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\n\tconst reason = await showLeavingUserSurveyWizard(true, true)\n\tconst data =\n\t\treason.submitted && reason.category && reason.reason\n\t\t\t? createSurveyData({\n\t\t\t\t\tcategory: reason.category,\n\t\t\t\t\treason: reason.reason,\n\t\t\t\t\tdetails: reason.details,\n\t\t\t\t\tversion: SURVEY_VERSION_NUMBER,\n\t\t\t  })\n\t\t\t: null\n\tconst newPlanType = await cancelSubscription(dialog, currentPlanInfo, customer, data)\n\n\tif (newPlanType === PlanType.Free) {\n\t\tfor (const importedMailSet of mailLocator.mailModel.getImportedMailSets()) mailLocator.mailModel.finallyDeleteCustomMailFolder(importedMailSet)\n\t}\n}\n\nasync function waitUntilRenewalDisabled() {\n\tfor (let i = 0; i < 3; i++) {\n\t\t// Wait a bit before checking, it takes a bit to propagate\n\t\tawait delay(2000)\n\t\tif (!(await locator.mobilePaymentsFacade.isAppStoreRenewalEnabled())) {\n\t\t\treturn\n\t\t}\n\t}\n}\n\nasync function doSwitchToPaidPlan(\n\taccountingInfo: AccountingInfo,\n\tnewPaymentInterval: PaymentInterval,\n\ttargetSubscription: PlanType,\n\tdialog: Dialog,\n\tcurrentPlanInfo: CurrentPlanInfo,\n) {\n\tif (isIOSApp() && getPaymentMethodType(accountingInfo) === PaymentMethodType.AppStore) {\n\t\tconst customerIdBytes = base64ToUint8Array(base64ExtToBase64(assertNotNull(locator.logins.getUserController().user.customer)))\n\t\tdialog.close()\n\t\ttry {\n\t\t\tawait locator.mobilePaymentsFacade.requestSubscriptionToPlan(appStorePlanName(targetSubscription), newPaymentInterval, customerIdBytes)\n\t\t} catch (e) {\n\t\t\tif (e instanceof MobilePaymentError) {\n\t\t\t\tconsole.error(\"AppStore subscription failed\", e)\n\t\t\t\tDialog.message(\"appStoreSubscriptionError_msg\", e.message)\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (currentPlanInfo.paymentInterval !== newPaymentInterval) {\n\t\t\tawait locator.customerFacade.changePaymentInterval(accountingInfo, newPaymentInterval)\n\t\t}\n\t\tawait switchSubscription(targetSubscription, dialog, currentPlanInfo)\n\t}\n}\n\nfunction createPlanButton(\n\tdialog: Dialog,\n\ttargetSubscription: PlanType,\n\tcurrentPlanInfo: CurrentPlanInfo,\n\tnewPaymentInterval: stream<PaymentInterval>,\n\taccountingInfo: AccountingInfo,\n): lazy<LoginButtonAttrs> {\n\treturn () => ({\n\t\tlabel: \"buy_action\",\n\t\tonclick: async () => {\n\t\t\t// Show an extra dialog in the case that someone is upgrading from a legacy plan to a new plan because they can't revert.\n\t\t\tif (\n\t\t\t\tLegacyPlans.includes(currentPlanInfo.planType) &&\n\t\t\t\t!(await Dialog.confirm(lang.getTranslation(\"upgradePlan_msg\", { \"{plan}\": PlanTypeToName[targetSubscription] })))\n\t\t\t) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tawait showProgressDialog(\"pleaseWait_msg\", doSwitchToPaidPlan(accountingInfo, newPaymentInterval(), targetSubscription, dialog, currentPlanInfo))\n\t\t},\n\t})\n}\n\nfunction handleSwitchAccountPreconditionFailed(e: PreconditionFailedError): Promise<void> {\n\tconst reason = e.data\n\n\tif (reason == null) {\n\t\treturn Dialog.message(\"unknownError_msg\")\n\t} else {\n\t\tlet detailMsg: string\n\n\t\tswitch (reason) {\n\t\t\tcase UnsubscribeFailureReason.TOO_MANY_ENABLED_USERS:\n\t\t\t\tdetailMsg = lang.get(\"accountSwitchTooManyActiveUsers_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.CUSTOM_MAIL_ADDRESS:\n\t\t\t\tdetailMsg = lang.get(\"accountSwitchCustomMailAddress_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.TOO_MANY_CALENDARS:\n\t\t\t\tdetailMsg = lang.get(\"accountSwitchMultipleCalendars_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.CALENDAR_TYPE:\n\t\t\t\tdetailMsg = lang.get(\"accountSwitchSharedCalendar_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.TOO_MANY_ALIASES:\n\t\t\tcase BookingFailureReason.TOO_MANY_ALIASES:\n\t\t\t\tdetailMsg = lang.get(\"accountSwitchAliases_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.TOO_MUCH_STORAGE_USED:\n\t\t\tcase BookingFailureReason.TOO_MUCH_STORAGE_USED:\n\t\t\t\tdetailMsg = lang.get(\"storageCapacityTooManyUsedForBooking_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.TOO_MANY_DOMAINS:\n\t\t\tcase BookingFailureReason.TOO_MANY_DOMAINS:\n\t\t\t\tdetailMsg = lang.get(\"tooManyCustomDomains_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.HAS_TEMPLATE_GROUP:\n\t\t\tcase BookingFailureReason.HAS_TEMPLATE_GROUP:\n\t\t\t\tdetailMsg = lang.get(\"deleteTemplateGroups_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.WHITELABEL_DOMAIN_ACTIVE:\n\t\t\tcase BookingFailureReason.WHITELABEL_DOMAIN_ACTIVE:\n\t\t\t\tdetailMsg = lang.get(\"whitelabelDomainExisting_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.HAS_CONTACT_LIST_GROUP:\n\t\t\t\tdetailMsg = lang.get(\"contactListExisting_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.NOT_ENOUGH_CREDIT:\n\t\t\t\treturn Dialog.message(\"insufficientBalanceError_msg\")\n\n\t\t\tcase UnsubscribeFailureReason.INVOICE_NOT_PAID:\n\t\t\t\treturn Dialog.message(\"invoiceNotPaidSwitch_msg\")\n\n\t\t\tcase UnsubscribeFailureReason.ACTIVE_APPSTORE_SUBSCRIPTION:\n\t\t\t\tif (isIOSApp()) {\n\t\t\t\t\treturn locator.mobilePaymentsFacade.showSubscriptionConfigView()\n\t\t\t\t} else {\n\t\t\t\t\treturn showManageThroughAppStoreDialog()\n\t\t\t\t}\n\n\t\t\tcase UnsubscribeFailureReason.LABEL_LIMIT_EXCEEDED:\n\t\t\t\treturn Dialog.message(\"labelLimitExceeded_msg\")\n\t\t\tdefault:\n\t\t\t\tthrow e\n\t\t}\n\n\t\treturn Dialog.message(\n\t\t\tlang.getTranslation(\"accountSwitchNotPossible_msg\", {\n\t\t\t\t\"{detailMsg}\": detailMsg,\n\t\t\t}),\n\t\t)\n\t}\n}\n\n/**\n * @param customer\n * @param currentPlanInfo\n * @param surveyData\n * @returns the new plan type after the attempt.\n */\nasync function tryDowngradePremiumToFree(customer: Customer, currentPlanInfo: CurrentPlanInfo, surveyData: SurveyData | null): Promise<PlanType> {\n\tconst switchAccountTypeData = createSwitchAccountTypePostIn({\n\t\taccountType: AccountType.FREE,\n\t\tdate: Const.CURRENT_DATE,\n\t\tcustomer: customer._id,\n\t\tspecialPriceUserSingle: null,\n\t\treferralCode: null,\n\t\tplan: PlanType.Free,\n\t\tsurveyData: surveyData,\n\t\tapp: client.isCalendarApp() ? SubscriptionApp.Calendar : SubscriptionApp.Mail,\n\t})\n\ttry {\n\t\tawait locator.serviceExecutor.post(SwitchAccountTypeService, switchAccountTypeData)\n\t\tawait locator.customerFacade.switchPremiumToFreeGroup()\n\t\treturn PlanType.Free\n\t} catch (e) {\n\t\tif (e instanceof PreconditionFailedError) {\n\t\t\tawait handleSwitchAccountPreconditionFailed(e)\n\t\t} else if (e instanceof InvalidDataError) {\n\t\t\tawait Dialog.message(\"accountSwitchTooManyActiveUsers_msg\")\n\t\t} else if (e instanceof BadRequestError) {\n\t\t\tawait Dialog.message(\"deactivatePremiumWithCustomDomainError_msg\")\n\t\t} else {\n\t\t\tthrow e\n\t\t}\n\t\treturn currentPlanInfo.planType\n\t}\n}\n\nasync function cancelSubscription(\n\tdialog: Dialog,\n\tcurrentPlanInfo: CurrentPlanInfo,\n\tcustomer: Customer,\n\tsurveyData: SurveyData | null = null,\n): Promise<PlanType> {\n\tconst confirmCancelSubscription = Dialog.confirm(\"unsubscribeConfirm_msg\", \"ok_action\", () => {\n\t\treturn m(\n\t\t\t\".pt\",\n\t\t\tm(\"ul.usage-test-opt-in-bullets\", [\n\t\t\t\tm(\"li\", lang.get(\"importedMailsWillBeDeleted_label\")),\n\t\t\t\tm(\"li\", lang.get(\"accountWillBeDeactivatedIn6Month_label\")),\n\t\t\t\tm(\"li\", lang.get(\"accountWillHaveLessStorage_label\")),\n\t\t\t]),\n\t\t)\n\t})\n\n\tif (!(await confirmCancelSubscription)) {\n\t\treturn currentPlanInfo.planType\n\t}\n\n\ttry {\n\t\treturn await showProgressDialog(\"pleaseWait_msg\", tryDowngradePremiumToFree(customer, currentPlanInfo, surveyData))\n\t} finally {\n\t\tdialog.close()\n\t}\n}\n\nasync function switchSubscription(targetSubscription: PlanType, dialog: Dialog, currentPlanInfo: CurrentPlanInfo): Promise<PlanType> {\n\tif (targetSubscription === currentPlanInfo.planType) {\n\t\treturn currentPlanInfo.planType\n\t}\n\n\tconst userController = locator.logins.getUserController()\n\tconst customer = await userController.loadCustomer()\n\tif (!customer.businessUse && NewBusinessPlans.includes(downcast(targetSubscription))) {\n\t\tconst accountingInfo = await userController.loadAccountingInfo()\n\t\tconst invoiceData: InvoiceData = {\n\t\t\tinvoiceAddress: formatNameAndAddress(accountingInfo.invoiceName, accountingInfo.invoiceAddress),\n\t\t\tcountry: accountingInfo.invoiceCountry ? getByAbbreviation(accountingInfo.invoiceCountry) : null,\n\t\t\tvatNumber: accountingInfo.invoiceVatIdNo, // only for EU countries otherwise empty\n\t\t}\n\t\tconst updatedInvoiceData = await showSwitchToBusinessInvoiceDataDialog(customer, invoiceData, accountingInfo)\n\t\tif (!updatedInvoiceData) {\n\t\t\treturn currentPlanInfo.planType\n\t\t}\n\t}\n\n\ttry {\n\t\tconst postIn = createSwitchAccountTypePostIn({\n\t\t\taccountType: AccountType.PAID,\n\t\t\tplan: targetSubscription,\n\t\t\tdate: Const.CURRENT_DATE,\n\t\t\treferralCode: null,\n\t\t\tcustomer: customer._id,\n\t\t\tspecialPriceUserSingle: null,\n\t\t\tsurveyData: null,\n\t\t\tapp: client.isCalendarApp() ? SubscriptionApp.Calendar : SubscriptionApp.Mail,\n\t\t})\n\n\t\ttry {\n\t\t\tawait showProgressDialog(\"pleaseWait_msg\", locator.serviceExecutor.post(SwitchAccountTypeService, postIn))\n\t\t\treturn targetSubscription\n\t\t} catch (e) {\n\t\t\tif (e instanceof PreconditionFailedError) {\n\t\t\t\tawait handleSwitchAccountPreconditionFailed(e)\n\n\t\t\t\treturn currentPlanInfo.planType\n\t\t\t}\n\t\t\tthrow e\n\t\t}\n\t} finally {\n\t\tdialog.close()\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,MAAMA,mBAAkD,CACvD;CACC,MAAM,KAAK,IAAI,2BAA2B;CAC1C,OAAO;AACP,GACD;CACC,MAAM,KAAK,IAAI,4BAA4B;CAC3C,OAAO;AACP,CACD;AAmBM,SAAS,8BAA8BC,eAA0CC,cAAiD;CACxI,MAAM,MAAM,cAAc;AAC1B,KAAI,OAAO,KACV,OAAM,IAAI,iBAAiB;AAE5B,QAAO,MAAM,gBAAE,aAAa,KAAK,CAAC;AAClC;IAIY,uBAAN,MAA0E;CAChF,AAAQ,eAA+B;CACvC,AAAQ,mBAAwD;GAC9D,SAAS,OAAO;GAChB,SAAS,gBAAgB;GACzB,SAAS,SAAS;GAClB,SAAS,YAAY;GACrB,SAAS,WAAW;GACpB,SAAS,YAAY;EACtB,KAAK;CACL;CAED,OAAOC,OAA6C;EACnD,MAAM,gBAAgB,MAAM,MAAM;EAClC,MAAM,4BAA4B,cAAc,MAAM,CAAC,SAAS,iBAAiB,SAAS,KAAK,CAAC;AAEhG,MAAI,0BAEH,OAAM,MAAM,QAAQ,YAAY,KAAK;CAEtC;CAED,AAAQ,eACPC,KACAC,iBACAC,iBACAC,YACAC,eACW;EACX,MAAM,YAAY,CAACC,MAAcC,UAAgC;AAChE,UAAO,gBAAE,aAAa,EAAE,MAAO,GAAE,KAAK;EACtC;AAED,MAAI,IACH,QAAO,UAAU,KAAK,mBAAmB,IAAI,CAAC;SACpC,mBAAmB,QAAQ,YAAY,SAAS,gBAAgB,CAC1E,QAAO,UAAU,KAAK,IAAI,8BAA8B,CAAC;AAG1D,MAAI,mBAAmB,KAAK,OAAO,gBAAgB,CAClD,QAAO,UAAU,KAAK,IAAI,gBAAgB,CAAC;AAG5C,MAAI,kBAAkB,WACrB,QAAO,UAAU,KAAK,IAAI,2BAA2B,EAAE;GAAE,OAAO;GAAS,QAAQ;EAAmB,EAAC;CAEtG;CAED,KAAKP,OAAkD;EAEtD,MAAM,EAAE,eAAe,iBAAiB,KAAK,qBAAqB,iBAAiB,SAAS,UAAU,GAAG,MAAM;EAE/G,MAAM,cAAc,WAAW,aAAa;EAC5C,MAAMQ,gBAAyB,KAAK,gBAAgB,KAAK,aAAa,cAAc,cAAc,MAAM;EACxG,MAAM,kBAAkB,KAAK,uBAAuB,cAAc,oBAAoB;EACtF,IAAIC;EAEJ,IAAIC;EACJ,MAAM,cAAc;EACpB,MAAMC,WAAS,eAAe;EAE9B,MAAM,4BAA4B,cAAc,MAAM,CAAC,SAAS,iBAAiB,SAAS,KAAK,CAAC;EAChG,MAAM,4BAA4B,cAAc,MAAM,CAAC,SAAS,iBAAiB,SAAS,KAAK,CAAC;EAEhG,MAAM,wBAAwB,8BAA8B,8BAA8B,UAAU;EAEpG,MAAM,gBAAgB,yCAAyC,MAAM,gBAAgB,IAAI,OAAO;EAEhG,IAAI,6BAA6BA,YAAU,gBAAgB,SAAS,OAAO,KAAK,IAAI,6BAA6B,GAAG,MAAM;AAC1H,MAAI,QAAQ,aAAa,EAAE;AAC1B,WAAQ;IAAC,SAAS;IAAW,SAAS;IAAU,SAAS;GAAU;AACnE,gCAA6B,KAAK,IAAI,6CAA6C;EACnF,OAAM;AACN,OAAI,aACH,KAAI,cACH,SAAQ;IAAC,SAAS;IAAQ,SAAS;IAAe,SAAS;GAAK;IAEhE,SAAQ;IAAC,SAAS;IAAe,SAAS;IAAQ,SAAS;GAAK;SAG7D,cACH,SAAQ;IAAC,SAAS;IAAM,SAAS;IAAQ,SAAS;GAAc;IAEhE,SAAQ;IAAC,SAAS;IAAM,SAAS;IAAe,SAAS;GAAO;AAGlE,gCAA6B,KAAK,IAAI,4CAA4C;EAClF;EAED,MAAM,qCAAqC,UAAU,IAAI,kBAAkB,QAAQ,aAAa,IAAI,QAAQ,iBAAiB,KAAK,gBAAgB;AAElJ,mBAAiB,gBAAE,kCAAkC;GACpD,gBAAgB;GAChB,gBAAE,sBAAsB,0BAA0B;GAClD,qCAAqC,gBAAE,uBAAuB,IAAI,KAAK,IAAI,6BAA6B,CAAC,EAAE;EAC3G,EAAC;EAEF,MAAM,wBAAwB,MAC5B,OAAO,CAAC,SAAS,cAAc,SAAS,KAAK,IAAI,oBAAoB,KAAK,CAC1E,IAAI,CAAC,cAAc,MAAM;AAEzB,UAAO,CACN,KAAK,mBAAmB,MAAM,OAAO,cAAc,cAAc,cAAc,EAC/E,KAAK,uBAAuB,MAAM,OAAO,MAAM,GAAG,cAAc,iBAAiB,cAAc,AAC/F;EACD,EAAC;AAEH,SAAO,gBAAE,IAAI,EAAE,MAAM,KAAK,KAAM,GAAE;GACjC,uBACG,gBAAE,gBAAgB;IAClB,eAAe,QAAQ,aAAa;IACpC,iBAAiB,QAAQ;IACzB,OAAO;GACN,EAAC,GACF;GACH,KAAK,eAAe,KAAK,iBAAiB,iBAAiB,QAAQ,aAAa,EAAE,cAAc;GAChG,gBACC,kCACA;IACC,eAAe;IACf,UAAU,CAACC,YAAU;AACpB,UAAK,eAAeA,QAAM;AAC1B,qBAAE,QAAQ;IACV;IACD,OAAO,EACN,cAAc,GAAG,WAAW,CAC5B;GACD,GACD,gBAAE,eAAe,sBAAsB,MAAM,CAAC,EAC9C,eACA;EACD,EAAC;CACF;CAED,AAAQ,mBAAmBC,OAAiCL,cAAuBM,UAA6BT,eAAkC;AACjJ,SAAO,gBACN,IACA,EACC,OAAO,EACN,OAAO,MAAM,WAAW,GAAG,MAAM,SAAS,GAAG,GAAG,IAAI,CACpD,EACD,GACD,gBAAE,cAAc,KAAK,uBAAuB,OAAO,UAAU,cAAc,cAAc,CAAC,CAC1F;CACD;CAED,AAAQ,uBACPQ,OACAE,qBACAD,UACAE,iBACAX,eACW;AACX,SAAO,gBACN,IACA,EACC,OAAO,EAAE,OAAO,MAAM,WAAW,GAAG,MAAM,SAAS,GAAG,GAAG,IAAI,CAAE,EAC/D,GACD,gBAAE,kBAAkB,KAAK,8BAA8B,OAAO,UAAU,qBAAqB,cAAc,CAAC,EAC5G,gBAAgB,UAChB;CACD;CAED,AAAQ,uBACPY,eACAC,oBACAC,QACAd,eACmB;EACnB,MAAM,EAAE,wBAAwB,GAAG;EAGnC,MAAM,WAAW,cAAc,QAAQ,iBAAiB;EACxD,MAAM,0BAA0B,cAAc,mBAAmB,cAAc,oBAAoB,SAAS;EAC5G,MAAM,gBAAgB,CAAC,MAAM;AAC5B,OAAI,cACH,QAAO,uBAAuB,SAAS;AAGxC,UAAO,0BAA0B,iBAAiB,SAAS,mBAAmB;EAC9E,IAAG;EACJ,MAAM,YAAY,iBAAiB,SAAS,mBAAmB,IAAI,YAAY,SAAS,mBAAmB,IAAI,cAAc;EAE7H,MAAM,oBAAoB,uBAAuB,qBAAqB,UAAU,oBAAoB,iBAAiB,gBAAgB;EAErI,IAAIe;EACJ,IAAIC,oBAAwC;AAC5C,MAAI,UAAU,EAAE;GACf,MAAM,SAAS,uBAAuB,iBAAiB,CAAC,IAAI,eAAe,oBAAoB,aAAa,CAAC;AAC7G,OAAI,UAAU,KACb,KAAI,iBAAiB,uBAAuB,SAAS,UAAU,YAAY,gBAAgB,QAAQ;IAClG,MAAM,qBAAqB,uBAAuB,iBAAiB,CAAC,IAAI,eAAe,SAAS,eAAe,aAAa,CAAC;AAC7H,eAAW,oBAAoB,yBAAyB;AAExD,wBAAoB,QAAQ;GAC5B,MACA,SAAQ,UAAR;AACC,SAAK,gBAAgB;AACpB,gBAAW,OAAO;AAClB;AACD,SAAK,gBAAgB;AACpB,gBAAW,OAAO;AAClB;GACD;KAEI;AACN,eAAW;AACX,wBAAoB;GACpB;EACD,OAAM;GACN,MAAM,iBAAiB,uBAAuB,qBAAqB,UAAU,oBAAoB,iBAAiB,mBAAmB;AACrI,cAAW,mBAAmB,mBAAmB,SAAS;AAC1D,OAAI,iBAAiB,kBAEpB,qBAAoB,mBAAmB,gBAAgB,SAAS;SACtD,YAAY,gBAAgB,UAAU,sBAAsB,MAAM,eAAe;IAE3F,MAAM,wBAAwB,uBAAuB,qBACpD,gBAAgB,SAChB,oBACA,iBAAiB,gBACjB;AACD,wBAAoB,mBAAmB,uBAAuB,gBAAgB,QAAQ;GACtF;EACD;EAGD,MAAM,yBAAyB,UAAU,IAAI,iBAAiB,uBAAuB,SAAS,UAAU,aAAa,gBAAgB,SAAS,MAAM;AAEpJ,SAAO;GACN,SAAS,yBAAyB,mBAAmB;GACrD,cACC,cAAc,oBAAoB,qBAC/B,8CAA8C,GAC9C,8BAA8B,cAAc,eAAe,mBAAmB;GAClF,OAAO;GACP,gBAAgB;GAChB,WAAW,KAAK,gBAAgB,eAAe,EAAE,aAAa,mBAAmB,UAAU,UAAU,CAAC,EAAE,sBAAsB,EAAE;GAChI,WAAW,aAAa,oBAAoB,cAAc,QAAQ,aAAa,CAAC;GAChF,OAAO,cAAc;GACrB,QAAQ,cAAc;GACtB,yBACC,cAAc,iCAAiC,uBAAuB,SAAS,OAAO,cAAc,QAAQ,kBAAkB;GAC/H,wBAAwB;GACxB,aAAa;GACb;GACA,aACC,uBAAuB,SAAS,QAAQ,aAAa,gBAAgB,SAClE,OAAO,cAAc,uBAAuB,mBAAmB,CAAC,yBAAyB,GACzF;GACJ;EACA;CACD;CAED,AAAQ,8BACPJ,eACAC,oBACAH,qBACAV,eACuB;EACvB,MAAM,EAAE,qBAAqB,GAAG;EAChC,MAAM,uBAAuB,oBAAoB,eAAe,mBAAmB;EACnF,MAAM,mBAAmB,qBAAqB,WAC5C,IAAI,CAAC,OAAO;AACZ,UAAO,wBAAwB,IAAI,oBAAoB,cAAc;EACrE,EAAC,CACD,OAAO,CAAC,OAAoD,MAAM,KAAK;EAEzE,MAAM,WAAW,uBAAuB,SAAS;EACjD,MAAM,WAAW,cAAc,QAAQ,iBAAiB,KAAK,gBAAgB;AAE7E,SAAO;GACN,YAAY;GACZ,kBAAkB,KAAK,iBAAiB,uBAAuB,KAAK,iBAAiB;GACrF;GACA,WAAW,iBAAiB,YAAY,WAAW,EAAE,MAAM,MAAM,4BAA6B,IAAG;EACjG;CACD;;;;;CAMD,AAAQ,uBAAuBiB,cAA8BC,qBAA6E;AACzI,OAAK,oBAAoB,oBAAoB,CAE5C,QAAO;IACL,SAAS,OAAO;IAChB,SAAS,gBAAgB;IACzB,SAAS,SAAS;IAClB,SAAS,YAAY;IACrB,SAAS,WAAW;IACpB,SAAS,YAAY;GACtB,KAAK;EACL;AAEF,MAAI,cAAc;AAEjB,OAAI,KAAK,iBAAiB,IACzB,MAAK,MAAM,KAAK,KAAK,iBACpB,MAAK,iBAAiB,KAAwB;AAGhD,UAAO;KACL,SAAS,OAAO,KAAK,eAAe,SAAS,KAAK;KAClD,SAAS,gBAAgB,KAAK,eAAe,SAAS,cAAc;KACpE,SAAS,SAAS,KAAK,eAAe,SAAS,OAAO;KACtD,SAAS,WAAW,KAAK,eAAe,SAAS,SAAS;KAC1D,SAAS,YAAY,KAAK,eAAe,SAAS,UAAU;KAC5D,SAAS,YAAY,KAAK,eAAe,SAAS,UAAU;IAC7D,KAAK;GACL;EACD,OAAM;AACN,QAAK,MAAM,KAAK,KAAK,iBACpB,MAAK,iBAAiB,KAAwB,KAAK,iBAAiB;AAErE,UAAO,OAAO,OAAO,CAAE,GAAuC,EAAE,KAAK,KAAK,eAAe,MAAM,CAAE,EAAC;EAClG;CACD;;;;;;CAOD,AAAQ,eAAeC,SAAoC;AAC1D,SAAO,KAAK,iBAAiB,WAC1B,OACA,gBAAE,QAAQ;GACV,OAAO;GACP,MAAM,WAAW;GACjB,OAAO,CAAC,UAAU;AACjB,SAAK,iBAAiB,YAAY,KAAK,iBAAiB;AACxD,UAAM,iBAAiB;GACvB;EACA,EAAC;CACL;AACD;AAED,SAAS,wBACRC,MACAC,oBACAb,OAC8D;CAC9D,MAAM,OAAO,kBAAkB,KAAK,MAAM,eAAe,KAAK,cAAc,oBAAoB,MAAM,CAAC;AACvG,KAAI,QAAQ,KACX,QAAO;AAER,MAAK,KAAK,QACT,QAAO;EAAE;EAAM,KAAK,KAAK;EAAM,aAAa,KAAK;EAAa,MAAM,KAAK;EAAM,SAAS,KAAK;CAAO;KAC9F;EACN,MAAM,cAAc,kBAAkB,KAAK,QAAQ;AACnD,MAAI,gBAAgB,KACnB,QAAO;EAER,MAAM,UAAU,KAAK,QAAQ,SAAS,YAAY,GAAG,gBAAE,MAAM,YAAY,GAAG;AAC5E,SAAO;GAAE;GAAM;GAAS,KAAK,KAAK;GAAM,aAAa,KAAK;GAAa,MAAM,KAAK;GAAM,SAAS,KAAK;EAAO;CAC7G;AACD;AAED,SAAS,wBACRc,UACAD,oBACAb,OAC+C;CAC/C,MAAM,QAAQ,kBAAkB,SAAS,MAAM;CAC/C,MAAM,WAAW,SAChB,SAAS,SAAS,IAAI,CAAC,MAAM,wBAAwB,GAAG,oBAAoB,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,MAAM,KAAK,CAC9G;AACD,QAAO;EAAE;EAAO,KAAK,SAAS;EAAO;EAAU,cAAc,SAAS;CAAc;AACpF;AAED,SAAS,kBAAkBe,KAAqBC,cAA+D;AAC9G,KAAI;AACH,SAAO,KAAK,IAAI,KAAK,aAAa;CAClC,SAAQ,GAAG;AACX,UAAQ,IAAI,4CAA4C,KAAK,sBAAsB;AACnF,SAAO;CACP;AACD;AAMM,SAAS,eACfC,KACAC,cACAlB,OAC8C;CAC9C,MAAM,EAAE,wBAAwB,GAAG;AACnC,SAAQ,KAAR;AACC,OAAK,gBACJ,QAAO,EAAE,YAAY,uBAAuB,qBAAqB,aAAa,CAAC,cAAe;AAC/F,OAAK,qBACJ,QAAO,EAAE,YAAY,uBAAuB,qBAAqB,aAAa,CAAC,gBAAiB;AACjG,OAAK,UACJ,QAAO,EAAE,YAAY,uBAAuB,qBAAqB,aAAa,CAAC,gBAAiB;CACjG;AACD;AAED,SAAS,aAAamB,UAAoBC,aAAsC;AAC/E,KAAI,aAAa,SAAS,KAAM,QAAO;AACvC,QAAO,cAAc,8BAA8B;AACnD;AAED,SAAS,aAAaC,mBAA2BC,iBAAkCC,WAA4B;AAC9G,KAAI,oBAAoB,EACvB,KAAI,UACH,QAAO,KAAK,IAAI,oBAAoB,gBAAgB,SAAS,yCAAyC,6BAA6B;IAEnI,QAAO,KAAK,IAAI,oBAAoB,gBAAgB,SAAS,qCAAqC,yBAAyB;AAG7H,QAAO;AACP;;;;IC9dY,gCAAN,MAAoC;CAC1C;CAEA,YACkBC,UACAC,gBACAC,UACAC,aAChB;EAyCF,KA7CkB;EA6CjB,KA5CiB;EA4ChB,KA3CgB;EA2Cf,KA1Ce;AAEjB,OAAK,kBAAkB,KAAK,sBAAsB;CAClD;CAED,uBAAwC;EACvC,MAAMC,kBAAmC,kBAAkB,KAAK,eAAe,gBAAgB;AAC/F,SAAO;GACN,aAAa,KAAK,SAAS;GAC3B,UAAU,KAAK;GACf;EACA;CACD;;;;;;CAOD,oCAA6C;AAC5C,MAAI,kCAAkC,KAAK,UAAU,YAAY,cAAc,CAC9E,QAAO;AAGR,MAAI,YAAY,SAAS,KAAK,SAAS,EAAE;GACxC,MAAM,WAAW,KAAK,YAAY,MAAM,KAAK,CAAC,SAAS,KAAK,gBAAgB,uBAAuB,YAAY;GAC/G,MAAM,iBAAiB,KAAK,YAAY,MAAM,KAAK,CAAC,SAAS,KAAK,gBAAgB,uBAAuB,gBAAgB;GACzH,MAAM,iBAAiB,KAAK,YAAY,MAAM,KAAK,CAAC,SAAS,KAAK,gBAAgB,uBAAuB,gBAAgB;GAGzH,MAAM,YAAY,OAAO,UAAU,aAAa;GAGhD,MAAM,kBAAkB,iBAAiB,OAAO,eAAe,aAAa,GAAG;GAC/E,MAAM,kBAAkB,iBAAiB,OAAO,eAAe,aAAa,GAAG;AAE/E,UAAO,YAAY,kBAAkB,kBAAkB;EACvD;AAED,SAAO;CACP;AACD;;;;;IC3CW,gEAAL;AACN;AACA;;AACA;IAEY,mBAAN,MAA4C;CAClD,AAAiB;CACjB,AAAgB;CAChB,AAAQ,YAAoB;CAC5B,AAAQ;CAER,YAAoBC,aAAsBC,aAA2C,WAAW,yBAAyB,OAAO;EAmGhI,KAnGoB;EAmGnB,KAnGoF;AACpF,OAAK,sBAAsB,QAAQ,oBAAoB,QAAQ,iBAAiB;AAEhF,OAAK,0BAA0B,IAAI,aACjC,uBAAuB,EAAE,CACzB,aAAa,CACb,iBAAiB,uBAAuB,CACxC,QAAQ,eAAe,KAAK,CAC5B,iBAAiB,MAAM,CACvB,SAAS,YAAY,eAAe;AAEtC,OAAK,kBAAkB,6BAAO,YAAY,QAAQ;AAElD,OAAK,OAAO,KAAK,KAAK,KAAK,KAAK;AAChC,OAAK,WAAW,KAAK,SAAS,KAAK,KAAK;CACxC;CAED,OAAiB;AAChB,SAAO;GACN,KAAK,eAAe,KAAK,aAAa,yBAAyB,WAC5D,gBAAE,IAAI,CACN,gBAAE,OAAO,gBAAE,KAAK,wBAAwB,CAAC,EACzC,gBAAE,UAAU,KAAK,IAAI,KAAK,cAAc,mCAAmC,gCAAgC,CAAC,AAC3G,EAAC,GACF;GACH,sBAAsB;IACrB,iBAAiB,KAAK,iBAAiB;IACvC,oBAAoB,KAAK;IACzB,WAAW,MAAM,KAAK,IAAI,iCAAiC;GAC3D,EAAC;GACF,KAAK,qBAAqB,GACvB,gBAAE,WAAW;IACb,OAAO;IACP,OAAO,KAAK;IACZ,SAAS,CAAC,UAAW,KAAK,YAAY;IACtC,WAAW,MAAM,KAAK,IAAI,iCAAiC;GAC1D,EAAC,GACF;EACH;CACD;CAED,WAAW;AACV,UAAQ,gBAAgB,IAAI,iBAAiB,KAAK,CAAC,KAAK,CAACC,aAAuC;AAC/F,QAAK,KAAK,iBAAiB,EAAE;IAC5B,MAAM,UAAU,UAAU,KAAK,CAAC,MAAM,EAAE,MAAM,SAAS,QAAQ;AAE/D,QAAI,SAAS;AACZ,UAAK,gBAAgB,QAAQ;AAC7B,qBAAE,QAAQ;IACV;GACD;EACD,EAAC;CACF;CAED,sBAA6C;EAC5C,MAAM,UAAU,KAAK,YAAY;EACjC,MAAM,kBAAkB,KAAK,iBAAiB,IAAI;AAElD,MAAI,KAAK,aACR;OAAI,QAAQ,MAAM,KAAK,MAAM,QAAQ,MAAM,KAAK,CAAC,SAAS,EACzD,QAAO;UACI,gBACX,QAAO;EACP,YAEI,gBACJ,QAAO;SACG,QAAQ,MAAM,KAAK,CAAC,SAAS,EACvC,QAAO;AAGT,OAAK,qBAAqB,SAAS,EAAE,CAAC,UAAU;AAEhD,SAAO;CACP;CAED,iBAA8B;EAC7B,MAAM,UAAU,KAAK,YAAY;EACjC,MAAM,kBAAkB,KAAK,iBAAiB;AAC9C,SAAO;GACN,gBAAgB;GAChB,SAAS;GACT,WAAW,iBAAiB,MAAM,YAAY,MAAM,KAAK,cAAc,KAAK,YAAY;EACxF;CACD;CAED,AAAQ,sBAA+B;EACtC,MAAM,kBAAkB,KAAK,iBAAiB;AAC9C,SAAO,KAAK,eAAe,mBAAmB,QAAQ,gBAAgB,MAAM,YAAY;CACxF;CAED,AAAQ,aAAqB;AAC5B,SAAO,KAAK,wBACV,UAAU,CACV,MAAM,KAAK,CACX,OAAO,CAAC,SAAS,KAAK,MAAM,CAAC,SAAS,EAAE,CACxC,KAAK,KAAK;CACZ;AACD;;;;ACzGD,SAAS,iBAAiBC,UAA4B;CACrD,MAAM,EAAE,gBAAgB,cAAc,oBAAoB,GAAG;CAC7D,MAAM,UAAU,SAAS,MAAM,WAAW;AAC1C,YAAW,MAAM;EAChB,MAAM,gBAAgB,SAAS,MAAM;AAGrC,WAAS,kBAAkB,UAAU,gBAAgB,gBAAgB,UAAU,gBAAgB,cAAc,sBAAsB,UAAU;CAC7I,GAAE,EAAE;AACL;IAEY,4BAAN,MAAgF;CACtF,gBAAyB;CACzB,kBAA2B;CAC3B,eAAwB;CACxB,cAAuC;CACvC,aAAsC;CAEtC,KAAKC,OAAmD;EACvD,IAAI,EAAE,WAAW,GAAG,MAAM;AAE1B,SAAO;GACN,gBAAE,WAAW;IACZ,OAAO;IACP,WAAW,MAAM,KAAK,wBAAwB,UAAU;IACxD,OAAO,UAAU;IACjB,SAAS,CAAC,aAAa;AACtB,eAAU,mBAAmB;AAC7B,sBAAiB,KAAK,YAAa;IACnC;IACD,QAAQ,MAAO,KAAK,kBAAkB;IACtC,gBAAgB,aAAa;IAC7B,mBAAmB,CAAC,QAAS,KAAK,cAAc;GAChD,EAAC;GACF,gBAAE,WAAW;IACZ,OAAO;IACP,OAAO,UAAU;IAEjB,WAAW,MAAO,KAAK,gBAAgB,KAAK,IAAI,UAAU,4BAA4B,IAAI,kBAAkB,GAAG,KAAK,IAAI,kBAAkB;IAC1I,QAAQ,MAAO,KAAK,gBAAgB;IACpC,SAAS,CAAC,aAAa;AACtB,eAAU,iBAAiB;AAC3B,sBAAiB,KAAK,WAAY;IAClC;IACD,mBAAmB,CAAC,QAAS,KAAK,aAAa;IAC/C,gBAAgB,aAAa;GAC7B,EAAC;GACF,gBAAE,WAAW;IACZ,OAAO,KAAK,gBAAgB,OAAO,UAAU,aAAa,CAAC;IAC3D,OAAO,UAAU;IACjB,WAAW,MAAM,KAAK,yBAAyB,UAAU;IACzD,SAAS,CAAC,aAAc,UAAU,MAAM;IACxC,QAAQ,MAAO,KAAK,eAAe;IACnC,gBAAgB,aAAa;GAC7B,EAAC;EACF;CACD;CAED,AAAQ,wBAAwBC,OAAgD;EAC/E,MAAM,OAAO,MAAM,yBAAyB;EAC5C,MAAM,QAAQ,MAAM,8BAA8B;AAElD,MAAI,KAAK,gBACR,KAAI,KACH,QAAO,QAAQ,KAAK,IAAI,+BAA+B;GAAE,UAAU;GAAM,eAAe;EAAO,EAAC,GAAG;IAEnG,QAAO,QAAQ,QAAQ,KAAK,IAAI,kBAAkB;IAGnD,QAAO,QAAQ,KAAK,IAAI,kBAAkB;CAE3C;CAED,AAAQ,yBAAyBA,OAAgD;EAChF,MAAM,UAAU,MAAM,YAAY;EAClC,MAAM,WAAW,MAAM,iBAAiB;AACxC,MAAI,KAAK,aACR,KAAI,QACH,QAAO,WAAW,KAAK,IAAI,+BAA+B;GAAE,UAAU;GAAS,eAAe;EAAU,EAAC,GAAG;IAE5G,QAAO,WAAW,WAAW,KAAK,IAAI,kBAAkB;IAGzD,QAAO,WAAW,KAAK,IAAI,kBAAkB;CAE9C;AACD;;;;IChFY,qBAAN,MAAyB;CAC/B,AAAiB;CACjB;CACA;CACA;CACA;CACA;CACA;CACA,AAAQ;CAER,YACCC,qBACAC,iBACAC,gBACAC,kBACAC,sBACC;AACD,OAAK,mBAAmB;AACxB,OAAK,uBAAuB;AAC5B,OAAK,cAAc,IAAI,8BAA8B;AACrD,OAAK,kBAAkB;AACvB,OAAK,eAAe;GACnB;GACA,gBAAgB,KAAK;EACrB;AACD,OAAK,sBAAsB,QAAQ,oBAAoB,QAAQ,iBAAiB;AAEhF,OAAK,uBAAuB,CAAC,YAAY;AACxC,UAAO,KAAW,SAAS,CAAC,WAAW;AACtC,QAAI,mBAAmB,uBAAuB,OAAO,CACpD,QAAO,QAAQ,aAAa,KAAK,uBAAuB,OAAO,WAAW,CAAC,KAAK,CAACC,qBAAmB;AACnG,UAAK,qBAAqB,SAAS,EAAE,CAAC,UAAU;AAChD,UAAK,kBAAkBA;AACvB,UAAK,aAAa,iBAAiBA;AACnC,qBAAE,QAAQ;IACV,EAAC;GAEH,EAAC,CAAC,KAAK,KAAK;EACb;AAED,OAAK,yBAAyB;CAC9B;CAED,WAAW;AACV,UAAQ,gBAAgB,kBAAkB,KAAK,qBAAqB;CACpE;CAED,WAAW;AACV,UAAQ,gBAAgB,qBAAqB,KAAK,qBAAqB;CACvE;CAED,OAAiB;AAChB,UAAQ,KAAK,wBAAb;AACC,QAAK,kBAAkB,QACtB,QAAO,gBACN,gBACA,gBACC,YACA,EACC,OAAO,EACN,WAAW,GAAG,GAAG,CACjB,EACD,GACD,KAAK,oBAAoB,GACtB,KAAK,IAAI,6BAA6B,GAAG,MAAM,KAAK,IAAI,4BAA4B,GACpF,KAAK,IAAI,gCAAgC,CAC5C,CACD;AACF,QAAK,kBAAkB,eACtB,QAAO,gBACN,gBACA,gBACC,YACA,EACC,OAAO,EACN,WAAW,GAAG,GAAG,CACjB,EACD,GACD,KAAK,IAAI,kCAAkC,CAC3C,CACD;AACF,QAAK,kBAAkB,OACtB,QAAO,gBAAE,aAAa,KAAK,aAAa;AACzC,WACC,QAAO,gBAAE,2BAA2B,EAAE,WAAW,KAAK,YAA8C,EAAC;EACtG;CACD;CAED,qBAA8B;EAC7B,MAAM,UAAU,KAAK,kBAAkB;AAEvC,OAAK,QACJ,QAAO;SACG,KAAK,gBAAgB,kBAAkB,kBAAkB,QACnE,QAAO;SACG,KAAK,qBAAqB,aAAa,IAAI,QAAQ,MAAM,YAAY,MAC/E,QAAO;IAEP,QAAO;CAER;CAED,mBAA4B;AAC3B,SAAO,iBAAiB,KAAK,gBAAgB;CAC7C;CAED,sBAA6C;AAC5C,OAAK,KAAK,uBACT,QAAO;SACG,KAAK,2BAA2B,kBAAkB,QAC5D,MAAK,KAAK,oBAAoB,CAC7B,QAAO;IAEP,QAAO;SAEE,KAAK,2BAA2B,kBAAkB,OAC5D,QAAO,iBAAiB,KAAK,gBAAgB,GAAG,OAAO;SAC7C,KAAK,2BAA2B,kBAAkB,WAC5D,QAAO,KAAK,YAAY,+BAA+B;IAEvD,QAAO;CAER;CAED,oBAAoBC,OAA0BC,aAA2B;AACxE,OAAK,yBAAyB;AAE9B,MAAI,UAAU,kBAAkB,YAAY;AAC3C,OAAI,YACH,MAAK,YAAY,kBAAkB,YAAY,eAAe;AAG/D,OAAI,KAAK,oBACR,MAAK,oBAAoB,SAAS;EAEnC,WAAU,UAAU,kBAAkB,QAAQ;AAC9C,QAAK,aAAa,iBAAiB,UAAU,CAAC,KAAK,MAAM,gBAAE,QAAQ,CAAC;AAEpE,OAAI,KAAK,oBACR,MAAK,oBAAoB,SAAS;AAGnC,QAAK,qBAAqB,SAAS,EAAE,CAAC,UAAU;EAChD;AAED,kBAAE,QAAQ;CACV;CAED,iBAA8B;AAC7B,SAAO;GACN,eAAe,KAAK;GACpB,gBAAgB,KAAK,2BAA2B,kBAAkB,aAAa,KAAK,YAAY,mBAAmB,GAAG;EACtH;CACD;CAED,2BAGG;EACF,MAAM,0BAA0B,CAC/B;GACC,MAAM,KAAK,IAAI,gCAAgC;GAC/C,OAAO,kBAAkB;EACzB,GACD;GACC,MAAM;GACN,OAAO,kBAAkB;EACzB,CACD;AAGD,MAAI,KAAK,qBAAqB,aAAa,IAAI,KAAK,gBAAgB,kBAAkB,kBAAkB,QACvG,yBAAwB,KAAK;GAC5B,MAAM,KAAK,IAAI,+BAA+B;GAC9C,OAAO,kBAAkB;EACzB,EAAC;AAIH,MAAI,KAAK,gBAAgB,kBAAkB,kBAAkB,eAC5D,yBAAwB,KAAK;GAC5B,MAAM,KAAK,IAAI,oCAAoC;GACnD,OAAO,kBAAkB;EACzB,EAAC;AAGH,SAAO;CACP;AACD;IAOK,cAAN,MAAkB;CACjB,AAAQ;CAER,cAAc;AACb,OAAK,sBAAsB,QAAQ,oBAAoB,QAAQ,iBAAiB;CAChF;CAED,KAAKC,OAAqC;EACzC,IAAI,QAAQ,MAAM;AAClB,SAAO,CACN,gBACC,gBACA,EACC,OAAO,EACN,cAAc,OACd,EACD,GACD,gBAAE,YAAY;GACb,OAAO,KAAK,gBAAgB,UAAU,SAAS;GAC/C,MAAM,gBAAE,sBAAsB,gBAAE,MAAM,WAAW,CAAC;GAClD,OAAO;GACP,SAAS,MAAM;AACd,SAAK,qBAAqB,SAAS,EAAE,CAAC,UAAU;AAChD,QAAI,MAAM,iBAAiB,UAAU,CACpC,QAAO,KAAK,MAAM,iBAAiB,WAAW,CAAC;IAE/C,oBAAmB,sBAAsB,MAAM,iBAAiB,UAAU,CAAC,CAAC,KAAK,CAAC,QAAQ,OAAO,KAAK,IAAI,CAAC;GAE5G;EACD,EAAC,CACF,EACD,gBACC,oBACA,iBAAiB,MAAM,eAAe,GACnC,KAAK,IAAI,iCAAiC,EAC1C,oBAAoB,MAAM,eAAe,qBAAqB,GAC7D,EAAC,GACF,KAAK,IAAI,6BAA6B,CACzC,AACD;CACD;AACD;AAED,SAAS,iBAAiBN,gBAAyC;AAClE,QAAO,eAAe,0BAA0B;AAChD;;;;;IC/NY,4BAAN,MAAgF;CACtF,AAAQ,sBAAiD;CACzD,AAAQ,oBAA6C;CACrD,AAAQ,2BAAgF;CACxF,AAAQ;CACR,AAAQ;CACR,AAAQ;CACR,AAAQ;CAER,cAAc;AACb,OAAK,mBAAmB,QAAQ,oBAAoB,QAAQ,cAAc;AAC1E,OAAK,sBAAsB,QAAQ,oBAAoB,QAAQ,iBAAiB;AAEhF,OAAK,yBAAyB,8BAAQ;AAEtC,OAAK,uBAAuB,IAAI,CAAC,WAAW,UAAU,KAAK,oBAAoB,CAAC,oBAAoB,OAAO,CAAC;CAC5G;CAED,SAASO,OAAwD;EAChE,MAAM,OAAO,MAAM,MAAM;AAGzB,MAAI,KAAK,qBAAqB,KAAK,qBAAqB;AACvD,QAAK,cAAc,KAAK,kBAAkB,gBAAgB;AAC1D,QAAK,cAAc,KAAK,oBAAoB,gBAAgB;EAC5D;CACD;CAED,SAASC,OAA2D;AACnE,OAAK,MAAM,MAAM;EACjB,MAAM,OAAO,MAAM,MAAM;AAGzB,MAAI,KAAK,qBAAqB,KAAK,qBAAqB;AACvD,QAAK,cAAc,KAAK,kBAAkB,gBAAgB;AAC1D,QAAK,cAAc,KAAK,oBAAoB,gBAAgB;EAC5D;EAED,IAAIC,QAAqC,QAAQ,QAAQ,KAAK;AAE9D,OAAK,QAAQ,OAAO,gBAAgB,CACnC,SAAQ,QAAQ,OACd,cAAc,UAAU,KAAK,eAAe,CAAC,aAAa,UAAU,KAAK,eAAe,CAAC,UAAU,YAAY,UAAU,CACzH,KAAK,CAAC,mBAAmB,eAAe,YAAY;AAGvD,QACE,KAAK,MAAM;AACX,QAAK,KAAK,mBAAmB,KAAK,SACjC,QAAO,QAAQ,OACb,mBAAmB,CACnB,cAAc,CACd,KAAK,CAAC,aAAa;AACnB,SAAK,WAAW;AAChB,WAAO,QAAQ,OAAO,mBAAmB,CAAC,kBAAkB;GAC5D,EAAC,CACD,KAAK,CAAC,iBACN,QAAQ,aAAa,KAAK,uBAAuB,aAAa,eAAe,CAAC,KAAK,CAAC,mBAAmB;AACtG,SAAK,iBAAiB;GACtB,EAAC,CACF;EAEH,EAAC,CACD,KAAK,MAAM,yBAAyB,CAAC,CACrC,KAAK,CAACC,yBAA4C;AAClD,QAAK,oBAAoB,IAAI,iBAAiB,KAAK,QAAQ,aAAa,EAAE,KAAK,aAAa,yBAAyB;GACrH,IAAI,mBAAmB,wBAAwB;AAE/C,OAAI,QAAQ,OAAO,gBAAgB,CAClC,SAAQ,OAAO,kBAAkB,CAAC,KAAK,MAAM,iBAAiB,UAAU,CAAC;AAG1E,QAAK,sBAAsB,IAAI,mBAC9B,KAAK,SACL,KAAK,kBAAkB,iBACvB,UAAU,KAAK,eAAe,EAC9B,kBACA;AAED,QAAK,2BAA2B,KAAK,oBAAoB,0BAA0B;AAEnF,QAAK,uBAAuB,KAAK,YAAY,cAAc;AAE3D,QAAK,oBAAoB,oBAAoB,KAAK,YAAY,eAAe,KAAK,YAAY;EAC9F,EAAC;CACH;CAED,KAAKH,OAAkE;EACtE,MAAM,IAAI,MAAM;EAEhB,MAAM,cAAc,MAAM;GACzB,MAAM,mBAAmB,cAAc,KAAK,kBAAkB;GAC9D,MAAM,qBAAqB,cAAc,KAAK,oBAAoB;GAClE,IAAI,QAAQ,iBAAiB,qBAAqB,IAAI,mBAAmB,qBAAqB;AAE9F,OAAI,MACH,QAAO,OAAO,QAAQ,MAAM,CAAC,KAAK,MAAM,KAAK;KACvC;AACN,MAAE,KAAK,cAAc,iBAAiB,gBAAgB;AACtD,MAAE,KAAK,cAAc,mBAAmB,gBAAgB;AACxD,WAAO,mBACN,6BACA,QAAQ,SAAS,CACf,KAAK,MAAM;KACX,IAAI,WAAW,UAAU,EAAE,KAAK,SAAS;AAEzC,SAAI,SAAS,gBAAgB,EAAE,KAAK,QAAQ,aAAa,EAAE;AAC1D,eAAS,cAAc,EAAE,KAAK,QAAQ,aAAa;AACnD,aAAO,QAAQ,aAAa,OAAO,SAAS;KAC5C;IACD,EAAC,CACD,KAAK,MACL,kBACC,EAAE,KAAK,QAAQ,iBAAiB,EAChC,EAAE,KAAK,aACP,EAAE,KAAK,aACP,MACA,EAAE,KAAK,gBAAgB,YAAY,QACnC,UAAU,EAAE,KAAK,OAAO,SAAS,EACjC,UAAU,EAAE,KAAK,eAAe,CAChC,CAAC,KAAK,CAAC,YAAY;AACnB,SAAI,SAAS;MAEZ,MAAM,iCAAiC,KAAK,kBAAkB,SAAS,EAAE;AACzE,sCAAgC,UAAU;OACzC,MAAM;OACN,OAAO,wBAAwB,EAAE,KAAK,YAAY;MAClD,EAAC;AACF,sCAAgC,UAAU;AAC1C,sBAAgB,KAAK,KAAK,gBAAgB,eAAe;KACzD;IACD,EAAC,CACF,CACF;GACD;EACD;AAED,SAAO,gBACN,OACA,KAAK,2BACF;GACA,gBAAE,gBAAgB;IACjB,OAAO,KAAK;IACZ,eAAe,KAAK,wBAAwB;IAC5C,iBAAiB,KAAK;GACtB,EAAC;GACF,gBAAE,mCAAmC,CACpC,gBACC,gCACA,EACC,OAAO,EACN,UAAU,QACV,EACD,GACD,gBAAE,UAAU,KAAK,kBAAkB,CAAC,CACpC,EACD,gBACC,gCACA,EACC,OAAO,EACN,UAAU,QACV,EACD,GACD,gBAAE,UAAU,KAAK,oBAAoB,CAAC,CACtC,AACD,EAAC;GACF,gBACC,gCACA,gBAAE,aAAa;IACd,OAAO;IACP,OAAO;IACP,SAAS;GACT,EAAC,CACF;EACA,IACD,KACH;CACD;AACD;IAEY,iCAAN,MAAyF;CAC/F;CACA,WAA0B,MAAM;CAEhC,YAAYI,aAAsC;AACjD,OAAK,OAAO;CACZ;CAED,WAAWC,iBAA4C;AACtD,SAAO,QAAQ,QAAQ,KAAK;CAC5B;CAED,cAA8B;AAC7B,SAAO;CACP;CAED,kBAA2B;AAC1B,SAAO;CACP;CAED,YAAqB;AACpB,SAAO,KAAK,UAAU;CACtB;;;;;CAMD,mBAAsBC,SAAwB;AAC7C,OAAK,WAAW;CAChB;AACD;AAEM,eAAe,kBACrBC,iBACAC,aACAC,aACAC,kBACAC,UACAC,OACAC,gBACmB;CACnB,MAAM,gBAAgB,MAAM,QAAQ,eAAe,kBAAkB,iBAAiB,aAAa,aAAa,iBAAiB;CACjI,MAAM,aAAa,cAAc;AAEjC,KAAI,eAAe,sBAAsB,IAAI;EAE5C,IAAI,eAAe,cAAc;AACjC,MAAI,aACH,QAAO,iBAAiB,gBAAgB,cAAc,MAAO;IAE7D,QAAO;CAER,WAAU,eAAe,sBAAsB,kBAAkB;EACjE,MAAM,cAAc,YAAY,UAAU,YAAY,QAAQ,IAAI;EAClE,MAAM,iBAAiB,KAAK,eAAe,sBAAsB,EAChE,OAAO,YACP,EAAC;EACF,MAAM,YAAY,MAAM,OAAO,QAAQ,eAAe;AACtD,MAAI,UACH,QAAO,kBAAkB,iBAAiB,aAAa,aAAa,YAAY,SAAS,UAAU,OAAO,eAAe;IAEzH,QAAO;CAER,WAAU,eAAe,sBAAsB,qBAC/C,OAAM,OAAO,QACZ,KAAK,gBAAgB,0BAA0B,KAAK,IAAI,yBAAyB,IAAI,WAAW,MAAM,KAAK,IAAI,6BAA6B,GAAG,IAAI,CACnJ;SACS,eAAe,sBAAsB,qBAC/C,OAAM,OAAO,QACZ,KAAK,gBAAgB,0BAA0B,KAAK,IAAI,yBAAyB,IAAI,WAAW,MAAM,KAAK,IAAI,6BAA6B,GAAG,IAAI,CACnJ;SACS,eAAe,sBAAsB,wBAC/C,OAAM,OAAO,QAAQ,2BAA2B;SACtC,eAAe,sBAAsB,+BAC/C,OAAM,OAAO,QACZ,KAAK,gBACJ,wCACA,KAAK,IAAI,uCAAuC,IAAI,WAAW,MAAM,KAAK,IAAI,6BAA6B,GAAG,IAC9G,CACD;SACS,eAAe,sBAAsB,+BAC/C,OAAM,OAAO,QACZ,KAAK,gBACJ,8BACA,KAAK,IAAI,6BAA6B,IAAI,WAAW,MAAM,KAAK,IAAI,6BAA6B,GAAG,IACpG,CACD;SACS,eAAe,sBAAsB,yBAC/C,OAAM,OAAO,QAAQ,qCAAqC;SAChD,eAAe,sBAAsB,2BAC/C,OAAM,OAAO,QACZ,KAAK,gBACJ,+BACA,KAAK,IAAI,8BAA8B,IAAI,WAAW,MAAM,KAAK,IAAI,6BAA6B,GAAG,IACrG,CACD;SACS,eAAe,sBAAsB,uBAC/C,OAAM,OAAO,QACZ,KAAK,gBACJ,oCACA,KAAK,IAAI,mCAAmC,IAAI,WAAW,MAAM,KAAK,IAAI,6BAA6B,GAAG,IAC1G,CACD;SACS,eAAe,sBAAsB,uCAC/C,OAAM,OAAO,QACZ,KAAK,gBACJ,0CACA,KAAK,IAAI,yCAAyC,IAAI,WAAW,MAAM,KAAK,IAAI,6BAA6B,GAAG,IAChH,CACD;IAED,OAAM,OAAO,QACZ,KAAK,gBACJ,iCACA,KAAK,IAAI,gCAAgC,IAAI,WAAW,MAAM,KAAK,IAAI,6BAA6B,GAAG,IACvG,CACD;AAGF,QAAO;AACP;;;;AAKD,SAAS,iBAAiBA,gBAAgCC,cAAoCC,OAAiC;AAC9H,QAAO,QAAQ,aAAa,KAAK,oBAAoB,UAAU,eAAe,YAAY,CAAC,CAAC,KAAK,CAAC,gBAAgB;EACjH,IAAI,qBAAqB,EACxB,YACA;EACD,IAAIC;EACJ,IAAIC,wBAA0C,IAAI,QAAQ,CAAC,QAAS,UAAU;EAC9E,IAAIC;EAEJ,MAAM,cAAc,MAAM;AAEzB,kBAAe,OAAO;AACtB,cAAW,MAAM,QAAQ,MAAM,EAAE,qBAAqB;EACtD;AAED,mBAAiB,IAAI,OAAO,WAAW,OAAO,EAC7C,MAAM,MAAM,CACX,gBAAE,sDAAsD,KAAK,IAAI,oCAAoC,CAAC,EACtG,gBACC,+BACA,gBAAE,QAAQ;GACT,OAAO;GACP,OAAO;GACP,MAAM,WAAW;EACjB,EAAC,CACF,AACD,EACD,GACC,gBAAgB,YAAY,CAC5B,YAAY;GACZ,KAAK,KAAK;GACV,OAAO;GACP,MAAM;GACN,MAAM;EACN,EAAC,CACD,YAAY;GACZ,KAAK,KAAK;GACV,OAAO;GACP,MAAM;GACN,MAAM;EACN,EAAC;EACH,IAAIC,sBAA4C,CAACC,SAA0CC,sBAA0B;AACpH,UAAO,KAAW,SAAS,CAAC,WAAW;AACtC,QAAI,mBAAmB,oBAAoB,OAAO,CACjD,QAAO,QAAQ,aAAa,KAAK,oBAAoB,OAAO,WAAW,CAAC,KAAK,CAACC,kBAAgB;AAC7F,wBAAmB,cAAcA;AACjC,UAAKA,cAAY,kBAAkB;AAElC,qBAAe,OAAO;AACtB,cAAQ,KAAK;KACb,WAAUA,cAAY,oBAAoBA,cAAY,iBAAiB,cAAc,qBAAqB,CAE1G,WAAUA,cAAY,oBAAoBA,cAAY,iBAAiB,cAAc,MAAM;MAE3F,IAAI,QAAQ;AAEZ,cAAQA,cAAY,iBAAiB,WAArC;AACC,YAAK;AACJ,gBAAQ;AACR;AACD,YAAK;AACJ,gBAAQ;AACR;AAED,YAAK;AACJ,gBAAQ;AACR;AACD,YAAK;AACJ,gBAAQ;AACR;AACD,YAAK;AACJ,gBAAQ;AACR;AACD,YAAK;AACJ,gBAAQ;AACR;MACD;AAED,aAAO,QAAQ,gCAAgCA,cAAY,iBAAiB,UAAU,CAAC;AACvF,cAAQ,MAAM;AACd,qBAAe,OAAO;KACtB;AAED,qBAAE,QAAQ;IACV,EAAC;GAEH,EAAC,CAAC,KAAK,KAAK;EACb;AAED,UAAQ,gBAAgB,kBAAkB,oBAAoB;EAC9D,MAAM,MAAM,OAAO,eAAe,GAAG,aAAa;EAClD,IAAI,UAAU,cAAc,mBAAmB,aAAa,YAAY,CAAC,SAAS,mBAAmB,aAAa,MAAM,CAAC,OAAO,mBAC/H,aAAa,IACb,CAAC,SAAS,mBAAmB,MAAM,CAAC,WAAW,mBAAmB,KAAK,IAAI,6BAA6B,CAAC,CAAC,cAAc,eAAe,CAAC,OAAO,IAAI;AACpJ,SAAO,QAAQ,wCAAwC,CAAC,KAAK,MAAM;GAClE,MAAM,mBAAmB,QAAQ,sBAAsB,CAAC,wBAAwB,CAAC;GACjF,MAAM,aAAa,IAAI,IAAI;AAC3B,cAAW,QAAQ;AACnB,UAAO,KAAK,WAAW;AACvB,kBAAe,MAAM;EACrB,EAAC;AACF,SAAO,sBAAsB,QAAQ,MAAM,QAAQ,gBAAgB,qBAAqB,oBAAoB,CAAC;CAC7G,EAAC;AACF;;;;ACnbM,SAAS,sCAAsCC,UAAoBC,aAA0BC,gBAAkD;AACrJ,KAAI,SAAS,YACZ,OAAM,IAAI,iBAAiB;CAE5B,MAAM,mBAAmB,IAAI,iBAAiB,MAAM,aAAa,yBAAyB;CAE1F,MAAM,SAAS,OAAgB;CAC/B,MAAM,gBAAgB,YAAY;EACjC,IAAI,QAAQ,iBAAiB,qBAAqB;AAElD,MAAI,MACH,QAAO,QAAQ,MAAM;KACf;AACN,sBAAmB,kBAAkB,OAAO,QAAQ;GAEpD,MAAM,UAAU,MAAM,kBACrB,kBAAkB,eAAe,gBAAgB,EACjD,iBAAiB,gBAAgB,EACjC,MACA,MACA,OACA,KACA,eACA,CACC,MACA,QAAQ,iBAAiB,MAAM;AAC9B,WAAO,QAAQ,gCAAgC;AAC/C,WAAO;GACP,EAAC,CACF,CACA,MAAM,CAAC,MAAM;AACb,WAAO,OAAO,EAAE;GAChB,EAAC;AACH,OAAI,SAAS;AACZ,WAAO,OAAO;AACd,WAAO,QAAQ,KAAK;GACpB,MACA,QAAO,QAAQ,MAAM;EAEtB;CACD;CAED,MAAM,eAAe,MAAM,OAAO,QAAQ,MAAM;CAEhD,MAAM,SAAS,OAAO,iBAAiB;EACtC,OAAO;EACP,OAAO,EACN,MAAM,MACL,gBAAE,4BAA4B,CAE7B,gBAAE,iBAAiB,AACnB,EAAC,CACH;EACD,UAAU;EACI;EACd,aAAa;EACb,gBAAgB;CAChB,EAAC;AAEF,QAAO,OAAO;AACd;;;;IC9DY,6BAAN,MAAuF;CAC7F,KAAKC,OAAyD;AAC7D,SAAO,gBAAE,8CAA8C,CACtD,gBACC,6CACA,EACC,OAAO;GACN,WAAW,OAAO,iBAAiB,GAAG,UAAU;GAChD,UAAU,OAAO,iBAAiB,GAAG,UAAU;EAC/C,EACD,GACD;GACC,gBACC,OACA,EACC,OAAO;IACN,QAAQ,OAAO,iBAAiB,GAAG,UAAU;IAC7C,GAAG,MAAM,MAAM;GACf,EACD,GACD,gBAAE,uCAAuC;IACxC,MAAM,EAAE,OAAO,MAAM,SAAS,kBAAkB,yBAAyB,MAAM,MAAM,MAAM;IAC3F,KAAK;IACL,KAAK;IACL,SAAS;IACT,UAAU;GACV,EAAC,CACF;GACD,gBAAE,eAAe,KAAK,IAAI,MAAM,MAAM,YAAY,CAAC;GACnD,gBACC,YACA,EACC,OAAO,EACN,QAAQ,OAAO,iBAAiB,GAAG,SAAS,SAC5C,EACD,GACD,KAAK,IAAI,MAAM,MAAM,iBAAiB,CACtC;GACD,MAAM;GACN,gBACC,eACA,EACC,OAAO,EACN,QAAQ,OAAO,iBAAiB,GAAG,eAAe,aAClD,EACD,GACD,gBAAE,aAAa;IACd,OAAO,MAAM,MAAM;IACnB,SAAS,MAAM,MAAM,MAAM,aAAa;IACxC,OAAO,MAAM,MAAM,oBAAoB,uBAAuB;IAC9D,UAAU,MAAM,MAAM;GACtB,EAAC,CACF;EACD,EACD,AACD,EAAC;CACF;AACD;;;;IChEY,gCAAN,MAAkF;CACxF,AAAQ,OAA2B;CAEnC,SAASC,OAAyD;AACjE,OAAK,OAAO,MAAM;CAClB;CAED,KAAKC,OAAsD;AAC1D,SAAO,gBACN,4BACA;GACC,aAAa,MAAM,KAAK,cAAc;GACtC,iBAAiB;GACjB,oBAAoB,MAAM,MAAM,KAAK;GACrC,OAAO;GACP,aAAa;GACb,kBAAkB,MAAM,MAAM,KAAK,uBAAuB,0CAA0C;EACpG,GACD,CACC,gBAAE,kBAAkB;GACnB,OAAO;IAAE,SAAS,YAAY,MAAM,eAAe;IAAG,cAAc;IAAO,SAAS;GAAW;GAC/F,cAAc;GACd,OAAO;GACP,OAAO,KAAK,yBAAyB,MAAM,MAAM,KAAK,kBAAkB;GACxE,eAAe,MAAM,MAAM,KAAK;GAChC,yBAAyB,CAAC,aAAa;AACtC,UAAM,MAAM,KAAK,WAAW;GAC5B;GACD,eAAe;EACf,EAAsD,EAEvD,gBAAE,gBAAgB,gBAAE,SAAS,KAAK,IAAI,+BAA+B,CAAC,CAAC,AACvE,EACD;CACD;CAED,AAAQ,yBAAyBC,mBAA4B;EAC5D,MAAM,QAAQ;GACb;IACC,MAAM,KAAK,IAAI,iCAAiC;IAChD,OAAO;GACP;GACD;IACC,MAAM,KAAK,IAAI,oBAAoB;IACnC,OAAO;GACP;GACD;IACC,MAAM,KAAK,IAAI,8BAA8B;IAC7C,OAAO;GACP;GACD;IACC,MAAM,KAAK,IAAI,6BAA6B;IAC5C,OAAO;GACP;GACD;IACC,MAAM,KAAK,IAAI,oCAAoC;IACnD,OAAO;GACP;GACD;IACC,MAAM,KAAK,IAAI,0BAA0B;IACzC,OAAO;GACP;EACD;AACD,OAAK,kBAAmB,OAAM,OAAO,GAAG,EAAE;AAC1C,SAAO;CACP;CAED,eAAqB;AACpB,MAAI,KAAK,KACR,iBAAgB,KAAK,MAAM,gBAAgB,eAAe;CAE3D;AACD;IAEY,6BAAN,MAAmF;CACzF;CAEA,YAAYC,uBAA8C;AACzD,OAAK,OAAO;CACZ;CAED,cAA8B;AAC7B,SAAO;CACP;CAED,WAAWC,iBAA4C;AACtD,SAAO,QAAQ,QAAQ,KAAK,KAAK,YAAY,KAAK;CAClD;CAED,kBAA2B;AAC1B,SAAO;CACP;CAED,YAAqB;AACpB,SAAO;CACP;AACD;;;;MCjGYC,wBAAgC;IAEjC,wCAAL;AACN;AACA;AACA;AACA;AACA;;AACA;AAKM,SAAS,gBAAgBC,UAAwB;AACvD,QAAqB;AACrB;MAUYC,oBAA0D,IAAI,IAAI;CAC9E,CAAC,aAAa,OAAO;EAAE,OAAO;EAAS,gBAAgB;CAAqB,CAAC;CAC7E,CAAC,aAAa,SAAS;EAAE,OAAO;EAAW,gBAAgB;CAA+B,CAAC;CAC3F,CAAC,aAAa,SAAS;EAAE,OAAO;EAAW,gBAAgB;CAA8B,CAAC;CAC1F,CAAC,aAAa,SAAS;EAAE,OAAO;EAAW,gBAAgB;CAAqC,CAAC;CACjG,CAAC,aAAa,OAAO;EAAE,OAAO;EAAS,gBAAgB;CAA2B,CAAC;AACnF;MAUYC,qBAAkD,IAAI,IAAI;CACtE,CACC,aAAa,OACb;EACC;GAAE,OAAO;GAAK,gBAAgB;EAAuC;EACrE;GAAE,OAAO;GAAK,gBAAgB;EAAuC;EACrE;GAAE,OAAO;GAAK,gBAAgB;EAAwC;EACtE;GAAE,OAAO;GAAK,gBAAgB;EAA0C;EACxE;GAAE,OAAO;GAAK,gBAAgB;EAAyC;EACvE;GAAE,OAAO;GAAK,gBAAgB;EAAsC;EACpE;GAAE,OAAO;GAAK,gBAAgB;EAA4C;EAC1E;GAAE,OAAO;GAAK,gBAAgB;EAAyC;CACvE,CACD;CACD,CACC,aAAa,SACb;EACC;GAAE,OAAO;GAAK,gBAAgB;EAA4C;EAC1E;GAAE,OAAO;GAAK,gBAAgB;EAA0C;EACxE;GAAE,OAAO;GAAM,gBAAgB;EAA2C;EAC1E;GAAE,OAAO;GAAM,gBAAgB;EAA+C;EAC9E;GAAE,OAAO;GAAM,gBAAgB;EAAyC;EACxE;GAAE,OAAO;GAAM,gBAAgB;EAA4C;EAC3E;GAAE,OAAO;GAAM,gBAAgB;EAA2C;EAC1E;GAAE,OAAO;GAAM,gBAAgB;EAAyC;CACxE,CACD;CACD,CACC,aAAa,SACb;EACC;GAAE,OAAO;GAAM,gBAAgB;EAAmC;EAClE;GAAE,OAAO;GAAM,gBAAgB;EAA0C;EACzE;GAAE,OAAO;GAAM,gBAAgB;EAAgD;EAC/E;GAAE,OAAO;GAAM,gBAAgB;EAA0C;EACzE;GAAE,OAAO;GAAM,gBAAgB;EAAkD;EACjF;GAAE,OAAO;GAAM,gBAAgB;EAAwC;EACvE;GAAE,OAAO;GAAM,gBAAgB;EAAyC;EACxE;GAAE,OAAO;GAAM,gBAAgB;EAA8C;EAC7E;GAAE,OAAO;GAAM,gBAAgB;EAAkC;CACjE,CACD;CACD,CACC,aAAa,SACb;EACC;GAAE,OAAO;GAAM,gBAAgB;EAAmC;EAClE;GAAE,OAAO;GAAM,gBAAgB;EAAqC;EACpE;GAAE,OAAO;GAAM,gBAAgB;EAA+C;EAC9E;GAAE,OAAO;GAAM,gBAAgB;EAA2C;EAC1E;GAAE,OAAO;GAAM,gBAAgB;EAA0C;EACzE;GAAE,OAAO;GAAM,gBAAgB;EAAyC;CACxE,CACD;CACD,CACC,aAAa,OACb;EACC;GAAE,OAAO;GAAM,gBAAgB;EAA4C;EAC3E;GAAE,OAAO;GAAM,gBAAgB;EAAwC;EACvE;GAAE,OAAO;GAAM,gBAAgB;EAAyC;CACxE,CACD;AACD;;;;ICjGY,8BAAN,MAAgF;CACtF,AAAQ,OAA2B;CACnC,AAAQ,4BAAmE,CAAE;CAC7E,AAAiB;CAEjB,cAAc;EACb,IAAI,yBAAyB,OAAO,iBAAiB,GAAG,IAAI;AAC5D,OAAK,qBAAqB,IAAI,aAC5B,uBAAuB,uBAAuB,CAC9C,aAAa,CACb,iBAAiB,mBAAmB,CACpC,QAAQ,eAAe,KAAK,CAC5B,iBAAiB,MAAM,CACvB,SAAS,GAAG;CACd;CAED,SAASC,OAAyD;AACjE,OAAK,OAAO,MAAM;CAClB;CAED,OAAOC,OAAsD;AAC5D,OAAK,4BAA4B,KAAK,6BAA6B,MAAM,MAAM,KAAK,SAAU;AAC9F,QAAM,MAAM,KAAK,SAAS;CAC1B;CAED,KAAKA,OAAsD;AAC1D,SAAO,gBACN,4BACA;GACC,aAAa,MAAM;AAClB,UAAM,MAAM,KAAK,UAAU,KAAK,mBAAmB,UAAU;AAC7D,UAAM,MAAM,KAAK,YAAY;AAC7B,SAAK,aAAa;GAClB;GACD,iBAAiB;GACjB,oBAAoB,MAAM,MAAM,KAAK;GACrC,OAAO,kBAAkB,IAAI,gBAAgB,MAAM,MAAM,KAAK,SAAU,CAAC,EAAE;GAC3E,YAAY,EACX,eAAe,OACf;GACD,aAAa,kBAAkB,IAAI,gBAAgB,MAAM,MAAM,KAAK,SAAU,CAAC,EAAE;GACjF,kBAAkB;EAClB,GACD,CACC,gBAAE,kBAAkB;GACnB,OAAO;IACN,SAAS,YAAY,MAAM,eAAe;IAC1C,cAAc;IACd,SAAS;GACT;GACD,cAAc;GACd,OAAO;GACP,OAAO,KAAK;GACZ,eAAe,MAAM,MAAM,KAAK;GAChC,yBAAyB,CAAC,WAAW;AACpC,UAAM,MAAM,KAAK,SAAS;GAC1B;GACD,eAAe;EACf,EAAsD,EACvD,gBAAE,OAAO,gBAAE,KAAK,mBAAmB,CAAC,AACpC,EACD;CACD;CAED,cAAoB;AACnB,MAAI,KAAK,KACR,iBAAgB,KAAK,MAAM,gBAAgB,aAAa;CAEzD;CAED,6BAA6BC,UAA+D;EAC3F,MAAM,eAAe,gBAAgB,SAAS;EAC9C,MAAM,aAAa,mBAAmB,IAAI,aAAa;EACvD,MAAMC,aAA4C,CAAC;GAAE,MAAM,KAAK,IAAI,iCAAiC;GAAE,OAAO;EAAM,CAAC;AAErH,OAAK,WAAY,QAAO,CAAE;AAC1B,SAAO,WAAW,OAAO,WAAW,IAAI,CAAC,OAAO;GAAE,MAAM,KAAK,IAAI,EAAE,eAAe;GAAE,OAAO,EAAE;EAAO,GAAE,CAAC;CACvG;AACD;;;;AC1EM,eAAe,4BAA4BC,mBAA4BC,sBAA+D;CAC5I,IAAIC,WAAgC;CACpC,IAAIC,SAAwB;CAC5B,IAAIC,UAAyB;CAC7B,IAAIC,YAAqB;CAEzB,MAAMC,wBAA+C;EACpD;EACA;EACA;EACA;EACA;EACA;CACA;CAED,MAAM,cAAc,CACnB,kBAAkB,+BAA+B,IAAI,2BAA2B,uBAAuB,EACvG,kBAAkB,6BAA6B,IAAI,2BAA2B,uBAAuB,AACrG;CACD,MAAM,WAAW,OAA8B;CAE/C,MAAM,gBAAgB,mBACrB,uBACA,aACA,YAAY;AACX,WAAS,QAAQ,sBAAsB;CACvC,GACD,WAAW,WACX,oBACA;AAED,eAAc,OAAO,MAAM;AAC3B,QAAO,SAAS;AAChB;;;;IC9CiB,oFAAX;AACN;AACA;AACA;;AACA;;;;;;;;MEDYC,gCAAiE,IAAI,QAAQ,cAAc;MAe3FC,+BAA+D,IAAI,QAAQ,cAAc;;;;MClBzF,yBAAyB,OAAO,OAAO;CACnD,KAAK;CACL,MAAM;CACN,KAAK;EAAE,MAAM;EAAM,QAAQ;CAA8B;CACzD,MAAM;CACN,KAAK;CACL,QAAQ;AACR,EAAU;;;;ACkDX,kBAAkB;AAufX,eAAe,kCAAiD;CACtE,MAAM,YAAY,MAAM,OAAO,QAC9B,KAAK,eAAe,yBAAyB,EAC5C,qBAAqB,SAAS,gBAC9B,EAAC,CACF;AACD,KAAI,UACH,QAAO,KAAK,gDAAgD,UAAU,sBAAsB;AAE7F;;;;;MCpiBY,oBAAoB,OAAO,OAAO;CAC9C,MAAM;CACN,eAAe;CACf,QAAQ;CACR,WAAW;CACX,UAAU;CACV,WAAW;AACX,EAAC;IAEW,0BAAN,MAA8E;CACpF,AAAQ,OAA2B;CACnC,AAAQ;CACR,AAAQ;CACR,AAAQ,cAAkC;CAE1C,SAASC,OAAiE;AACzE,OAAK,OAAO,MAAM;EAClB,MAAM,yBAAyB,MAAM,MAAM,KAAK;AAChD,OAAK,cAAc,MAAM,MAAM,KAAK;AAEpC,OAAK,mBAAmB,QAAQ,oBAAoB,QAAQ,cAAc;AAC1E,OAAK,iBAAiB,SAAS;AAE/B,OAAK,mBAAmB,QAAQ,oBAAoB,QAAQ,cAAc;AAC1E,OAAK,iBAAiB,SAAS;AAE/B,MAAI,wBAAwB;GAC3B,MAAMC,kBAAmC,uBAAuB,WAC7D,kBAAkB,uBAAuB,SAAS,GAClD,gBAAgB;AAEnB,SAAM,MAAM,KAAK,yBAAyB;AAC1C,SAAM,MAAM,KAAK,QAAQ,kBAAkB,6BAAO,gBAAgB;AAClE,QAAK,wCAAwC,wBAAwB,MAAM,MAAM,KAAK;EACtF;CACD;CAED,KAAKC,OAAkE;EACtE,MAAM,OAAO,MAAM,MAAM;EACzB,IAAI,iBAAiB,MAAM,MAAM,KAAK;AAGtC,QAAM,KAAK,kBAAkB,KAAK,eAAe,YAAY,SAAS,WAAW,IAAI,eAAe,SAAS,SAAS,KAAK,CAC1H,kBAAiB,eAAe,OAAO,CAAC,SAAS,QAAQ,SAAS,KAAK;EAGxE,MAAM,WAAW,KAAK,QAAQ,iBAAiB,KAAK,gBAAgB;EACpE,MAAM,gBAAgB,yCAAyC,MAAM,gBAAgB,IAAI,OAAO;EAChG,MAAM,yBAAyB,YAAY;EAE3C,MAAMC,4BAAuD;IAC3D,SAAS,OAAO,MAAM;AACtB,WAAO;KACN,OAAO;KACP,SAAS,MAAM,KAAK,WAAW,KAAK;IACpC;GACD;IACA,SAAS,gBAAgB,KAAK,oBAAoB,MAAM,SAAS,cAAc;IAC/E,SAAS,SAAS,OAAO;IACzB,OAAO,yBAAyB,uCAAuC;IACvE,OAAO,yBAAyB,2BAA2B;IAC3D,SAAS,MAAM,KAAK,8BAA8B,MAAM,SAAS,OAAO;GACxE;IACA,SAAS,YAAY,KAAK,oBAAoB,MAAM,SAAS,UAAU;IACvE,SAAS,WAAW,KAAK,oBAAoB,MAAM,SAAS,SAAS;IACrE,SAAS,YAAY,KAAK,oBAAoB,MAAM,SAAS,UAAU;EACxE;AACD,SAAO,gBAAE,OAAO,CACf,gBAAE,sBAAsB;GACvB,SAAS,KAAK;GACd,iBAAiB,KAAK;GACtB,UAAU;GACV,WAAW;GACX,eAAe;GACf,+BAA+B,KAAK,gBAAgB,YAAY;GAChE,iBAAiB,KAAK;GACtB,eAAe;GACf,qBAAqB,MAAM,MAAM,KAAK;GACtC,wBAAwB,MAAM,MAAM,KAAK;GACzC,sBAAsB,MAAM,MAAM,KAAK;GACvC,KAAK,KAAK;EACV,EAAC,AACF,EAAC;CACF;CAED,WAAWC,MAA+B;AAEzC,MAAI,KAAK,iBACR,MAAK,iBAAiB,SAAS;AAGhC,MAAI,KAAK,oBAAoB,KAAK,eAAe,YAAY,QAAQ;AACpE,QAAK,iBAAiB,SAAS;AAC/B,QAAK,iBAAiB,SAAS,EAAE,CAAC,UAAU;EAC5C;AACD,2BAAyB,CAAC,KAAK,CAAC,cAAc;AAC7C,OAAI,WAAW;AAEd,SAAK,kBAAkB,SAAS,EAAE,CAAC,UAAU;AAC7C,SAAK,OAAO,SAAS;AACrB,SAAK,QAAQ;AACb,SAAK,gBAAgB;AACrB,SAAK,cAAc;GACnB;EACD,EAAC;CACF;CAED,eAAqB;AACpB,MAAI,KAAK,KACR,iBAAgB,KAAK,MAAM,gBAAgB,eAAe;CAE3D;CAED,wCAAwCC,wBAAgDD,MAAqC;EAC5H,IAAIE;AACJ,MAAI;AACH,sBAAmB,uBAAuB,QAAQ,OAAO,OAAO,yBAAyB,uBAAuB,KAAK;EACrH,SAAQ,GAAG;AACX,sBAAmB;EACnB;AAED,MAAI,qBAAqB,iBAAiB,YAAY,qBAAqB,iBAAiB,cAAc;AAEzG,QAAK,QAAQ,YAAY,MAAM;AAE/B,WAAQ,uBAAuB,cAA/B;AACC,SAAK,kBAAkB;AACtB,UAAK,WAAW,KAAK;AACrB;AAED,SAAK,kBAAkB;AACtB,UAAK,8BAA8B,MAAM,SAAS,cAAc;AAChE;AAED,SAAK,kBAAkB;AACtB,UAAK,8BAA8B,MAAM,SAAS,OAAO;AACzD;AAED;AACC,aAAQ,IAAI,iCAAiC,uBAAuB;AACpE;GACD;EACD,WAAU,qBAAqB,iBAAiB,UAAU;AAC1D,QAAK,QAAQ,YAAY,KAAK;AAE9B,WAAQ,uBAAuB,cAA/B;AACC,SAAK,kBAAkB;AACtB,UAAK,8BAA8B,MAAM,SAAS,UAAU;AAC5D;AAED,SAAK,kBAAkB;AACtB,UAAK,8BAA8B,MAAM,SAAS,SAAS;AAC3D;AAED,SAAK,kBAAkB;AACtB,UAAK,8BAA8B,MAAM,SAAS,UAAU;AAC5D;AAED;AACC,aAAQ,IAAI,iCAAiC,uBAAuB;AACpE;GACD;EACD,MACA,SAAQ,IAAI,sCAAsC,uBAAuB;CAE1E;CAED,8BAA8BF,MAA+BG,UAA0B;AAEtF,MAAI,KAAK,iBACR,MAAK,iBAAiB,SAAS;AAGhC,MAAI,KAAK,oBAAoB,KAAK,eAAe,YAAY,QAAQ;AACpE,QAAK,iBAAiB,SAAS;AAC/B,QAAK,iBAAiB,SAAS,EAAE,CAAC,UAAU;EAC5C;AACD,OAAK,OAAO;EACZ,MAAM,EAAE,YAAY,SAAS,GAAG;AAChC,MAAI;AAEH,QAAK,QAAQ,WAAW,iCAAiC,QAAQ,iBAAiB,EAAE,KAAK,MAAM,iBAAiB,gBAAgB;GAChI,MAAM,WAAW,WAAW,iCAAiC,QAAQ,iBAAiB,EAAE,KAAK,MAAM,iBAAiB,mBAAmB;AACvI,QAAK,gBAAgB,KAAK,MAAM,aAAa,SAAS,WAAW,WAAW;EAC5E,SAAQ,GAAG;AACX,WAAQ,MAAM,EAAE;AAChB,UAAO,QAAQ,2BAA2B;AAC1C;EACA;AACD,OAAK,cAAc;CACnB;CAED,oBAAoBH,MAA+BG,UAA4C;AAC9F,SAAO,OAAO;GACb,OAAO;GACP,SAAS,MAAM,KAAK,8BAA8B,MAAM,SAAS;EACjE;CACD;AACD;AAED,SAAS,0BAA4C;AACpD,QAAO,IAAI,QAAQ,CAAC,YAAY;EAC/B,IAAI,kBAAkB,6BAAO,MAAM;EACnC,IAAI,kBAAkB,6BAAO,MAAM;EACnC,IAAIC;EAEJ,MAAM,cAAc,CAACC,cAAuB;AAC3C,UAAO,OAAO;AACd,cAAW,MAAM,QAAQ,UAAU,EAAE,qBAAqB;EAC1D;EACD,MAAM,cAAc,MAAM,iBAAiB,IAAI,iBAAiB;AAChE,WAAS,IAAI,OAAO,WAAW,OAAO,EACrC,MAAM,MAAM;GAEX,gBAAE,kFAAkF,KAAK,mBAAmB,sBAAsB,CAAC;GACnI,gBAAE,gCAAgC,CACjC,gBAAE,UAAU;IACX,OAAO,MAAM,KAAK,IAAI,gCAAgC;IACtD,SAAS,iBAAiB;IAC1B,WAAW;GACX,EAAC,EACF,gBAAE,UAAU;IACX,OAAO,MAAM,KAAK,IAAI,wBAAwB;IAC9C,SAAS,iBAAiB;IAC1B,WAAW;GACX,EAAC,AACF,EAAC;GACF,gBAAE,+BAA+B,CAChC,gBAAE,QAAQ;IACT,OAAO;IACP,OAAO,MAAM,YAAY,MAAM;IAC/B,MAAM,WAAW;GACjB,EAAC,EACF,gBAAE,QAAQ;IACT,OAAO;IACP,OAAO,MAAM;AACZ,SAAI,aAAa,CAAE,aAAY,KAAK;IACpC;IACD,MAAM,WAAW;GACjB,EAAC,AACF,EAAC;EACF,EACD,GACC,gBAAgB,MAAM,YAAY,MAAM,CAAC,CACzC,YAAY;GACZ,KAAK,KAAK;GACV,OAAO;GACP,MAAM,MAAM,YAAY,MAAM;GAC9B,MAAM;EACN,EAAC,CACD,YAAY;GACZ,KAAK,KAAK;GACV,OAAO;GACP,MAAM,MAAM;AACX,QAAI,aAAa,CAAE,aAAY,KAAK;GACpC;GACD,MAAM;EACN,EAAC,CACD,MAAM;CACR;AACD;IAEY,+BAAN,MAAuF;CAC7F;CAEA,YAAYC,aAAsC;AACjD,OAAK,OAAO;CACZ;CAED,cAA8B;AAC7B,SAAO;CACP;CAED,WAAWC,iBAA4C;AAEtD,SAAO,QAAQ,QAAQ,KAAK;CAC5B;CAED,kBAA2B;AAC1B,SAAO;CACP;CAED,YAAqB;AACpB,SAAO;CACP;AACD;;;;ICxSY,6BAAN,MAAiF;CACvF,AAAQ;CACR,AAAQ;CACR,AAAQ;CAER,SAASC,OAA2D;AACnE,OAAK,mBAAmB,QAAQ,oBAAoB,QAAQ,cAAc;AAC1E,OAAK,mBAAmB,QAAQ,oBAAoB,QAAQ,cAAc;AAE1E,OAAK,MAAM,MAAM;CACjB;CAED,KAAK,EAAE,OAAwD,EAAY;EAC1E,MAAM,EAAE,gBAAgB,GAAG,MAAM;AAEjC,SAAO;GACN,gBAAE,iBAAiB,KAAK,IAAI,oCAAoC,CAAC;GACjE,iBACG,gBAAE,UAAU,CACZ,gBAAE,kBAAkB;IACnB,aAAa;IACb,aAAa,eAAe;IAC5B,OAAO;KACN,KAAK;KACL,KAAK;IACL;GACD,EAAC,AACD,EAAC,GACF;GACH,gBACC,gCACA,gBAAE,aAAa;IACd,OAAO;IACP,OAAO;IACP,SAAS,MAAM;AACd,SAAI,MAAM,KAAK,SAAS,SAAS,MAAM;MACtC,MAAM,gCAAgC,KAAK,kBAAkB,SAAS,EAAE;AAExE,qCAA+B,UAAU;OACxC,MAAM;OACN,OAAO,CAAC,KAAK,kBAAkB,WAAW,IAAI,OAAO,UAAU;MAC/D,EAAC;AACF,qCAA+B,UAAU;KACzC;AAED,UAAK,MAAM,MAAM,MAAM,KAAK,IAAI;IAChC;GACD,EAAC,CACF;EACD;CACD;CAED,AAAQ,MAAMC,MAA+BC,KAAkB;EAC9D,IAAI,UAAU,QAAQ,SAAS;AAE/B,MAAI,KAAK,kBAAkB,QAAQ,OAAO,gBAAgB,CACzD,WAAU,QAAQ,OAAO,OAAO,MAAM;AAGvC,UAAQ,KAAK,MAAM;AAClB,mBAAgB,KAAK,gBAAgB,eAAe;EACpD,EAAC;CACF;AACD;IAEY,kCAAN,MAA0F;CAChG;CACA,gBAAgB;CAChB,0BAA0B;CAE1B,YAAYC,aAAsC;AACjD,OAAK,OAAO;CACZ;CAED,cAA8B;AAC7B,SAAO;CACP;CAED,WAAWC,aAAwC;AAElD,SAAO,QAAQ,QAAQ,KAAK;CAC5B;CAED,kBAA2B;AAC1B,SAAO;CACP;CAED,YAAqB;AACpB,SAAO;CACP;AACD;;;;ACpFD,kBAAkB;AAElB,MAAM,mBAAmB;IAiBZ,wBAAN,MAA6E;CACnF,AAAQ;CACR,AAAQ;CACR,AAAQ;CACR,AAAQ;CACR,AAAQ;CAER,YAAY,EAAE,OAA0C,EAAE;AACzD,OAAK,YAAY;AACjB,OAAK,qBAAqB;AAC1B,OAAK,sBAAsB;AAC3B,OAAK,WAAW;AAChB,OAAK,YAAY;CACjB;CAED,SAASC,OAA0C;AAClD,MAAI,KAAK,UAAU,eAAe,WAAW,MAAM,MAAM,eAAe,OACvE,MAAK,kBAAkB,MAAM,MAAM;AAEpC,OAAK,YAAY,MAAM;CACvB;CAED,KAAK,EAAE,OAA0C,EAAY;AAI5D,MAAI,MAAM,4BAA4B,OAAO;GAC5C,MAAM,mBAAmB,MAAM,2BAA2B;AAE1D,SAAM,2BAA2B,QAAQ,CAAC,OAAO,QAAQ;AACxD,qBAAiB,OAAO,IAAI;AAC5B,SAAK,WAAW;AAChB,SAAK,YAAY;GACjB;EACD;AAED,SAAO,gBAAE,WAAW;GACnB,OAAO;GACP,OAAO,KAAK;GACZ,YAAY;GACZ,gBAAgB,aAAa;GAC7B,gBAAgB,eAAe;GAC/B,WAAW,MAAM,KAAK,kBAAkB;GACxC,UAAU,GAAG,KAAK,kBAAkB;GACpC,SAAS,CAAC,UAAU;AACnB,SAAK,WAAW;AAChB,SAAK,kBAAkB,MAAM;GAC7B;GACD,iBAAiB,MAAM,CACtB,gBACC,kCACA,EACC,OAAO;IACN,kBAAkB;IAClB,MAAM;IACN,UAAU,GAAG,KAAK,kBAAkB;IACpC,YAAY,GAAG,gBAAgB;GAC/B,EACD,IACA,GAAG,MAAM,eAAe,OAAO,EAChC,EACD,MAAM,iBAAiB,SAAS,IAC7B,gBACA,YACA,eAAe;IACd,iBAAiB;KAChB,OAAO;KACP,MAAM,UAAU;KAChB,MAAM,WAAW;IACjB;IACD,YAAY,MAAM,MAAM,iBAAiB,IAAI,CAAC,WAAW,KAAK,wBAAwB,QAAQ,MAAM,CAAC;IACrG,cAAc,MAAM;IACpB,OAAO;GACP,EAAC,CACD,GACD,MAAM,6BACN,gBAAE,YAAY,MAAM,2BAA2B,GAC/C,IACH;EACD,EAAC;CACF;CAED,AAAQ,oBAAoBC,OAAmC;AAC9D,SAAO,2BAA2B,KAAK,UAAU,MAAM,eAAe,OAAO;CAC7E;CAED,AAAQ,mBAA6B;AACpC,SAAO,KAAK,qBACT,gBAAE,2BAA2B,CAAC,KAAK,cAAc,EAAE,KAAK,IAAI,sBAAsB,AAAC,EAAC,GACpF,gBAAE,SAAS,KAAK,IAAI,KAAK,aAAa,iBAAiB,CAAC;CAC3D;CAED,AAAQ,eAAyB;AAChC,SAAO,gBAAE,MAAM;GACd,MAAM,UAAU;GAChB,OAAO;EACP,EAAC;CACF;CAED,AAAQ,wBAAwBC,YAA6BD,OAAwD;AACpH,SAAO;GACN,OAAO,KAAK,gBAAgB,UAAU,WAAW,OAAO;GACxD,OAAO,MAAM;AACZ,UAAM,gBAAgB,WAAW;GACjC;GACD,MAAM,WAAW,SAAS,UAAU,UAAU;EAC9C;CACD;CAED,AAAQ,mBAAmBE,QAAiBC,oBAAsD;AACjG,OAAK,qBAAqB;AAC1B,qBAAmB,OAAO;AAC1B,kBAAE,QAAQ;CACV;CAED,AAAQ,qBACPC,OACAC,kBACAC,oBACO;AACP,OAAK,YAAY,iBAAiB;AAClC,qBAAmB,OAAO,iBAAiB;CAC3C;CAED,AAAQ,kBAAkBN,OAAmC;EAC5D,MAAM,EAAE,oBAAoB,oBAAoB,GAAG;AACnD,MAAI,KAAK,oBAAqB,cAAa,KAAK,oBAAoB;EAEpE,MAAM,mBAAmB,KAAK,oBAAoB,MAAM;EACxD,MAAM,gBAAgB,KAAK,SAAS,MAAM,CAAC,aAAa;AAExD,MAAI,kBAAkB,IAAI;AACzB,QAAK,qBACJ,kBACA;IACC,SAAS;IACT,SAAS;GACT,GACD,mBACA;AACD,QAAK,mBAAmB,OAAO,mBAAmB;AAElD;EACA,YAAW,cAAc,kBAAkB,KAAK,IAAK,kBAAkB,iBAAiB,IAAI,cAAc,SAAS,GAAI;AACvH,QAAK,qBACJ,kBACA;IACC,SAAS;IACT,SAAS;GACT,GACD,mBACA;AACD,QAAK,mBAAmB,OAAO,mBAAmB;AAElD;EACA;AAED,OAAK,mBAAmB,MAAM,mBAAmB;AAEjD,OAAK,sBAAsB,WAAW,YAAY;AACjD,OAAI,KAAK,oBAAoB,MAAM,KAAK,iBAAkB;GAE1D,IAAIO;AACJ,OAAI;IACH,MAAM,YAAY,MAAM,QAAQ,kBAAkB,uBAAuB,iBAAiB;AAC1F,aAAS,YACN;KAAE,SAAS;KAAM,SAAS;IAAM,IAChC;KACA,SAAS;KACT,SAAS,MAAM,sBAAsB;IACpC;GACJ,SAAQ,GAAG;AACX,QAAI,aAAa,uBAChB,UAAS;KAAE,SAAS;KAAO,SAAS;IAAwB;IAE5D,OAAM;GAEP,UAAS;AACT,QAAI,KAAK,oBAAoB,MAAM,KAAK,iBACvC,MAAK,mBAAmB,OAAO,mBAAmB;GAEnD;AAED,OAAI,KAAK,oBAAoB,MAAM,KAAK,iBACvC,MAAK,qBAAqB,kBAAkB,QAAQ,mBAAmB;EAExE,GAAE,IAAI;CACP;AACD;;;;;ICnLY,aAAN,MAAuD;CAC7D,AAAiB;CACjB,AAAiB;CACjB,AAAiB;CACjB,AAAiB;CACjB,AAAQ;CACR,AAAQ,0BAAiD;CACzD,AAAQ;CACR,AAAQ;CACR,AAAiB;CACjB,AAAiB;CACjB,AAAQ;CACR,AAAQ;CAER,AAAiB,mBAA+C,CAAC,QAAQ,sBAAsB,CAAC,wBAAwB,CAAC,mBACtH,mCACA,kCAAkC,EACnC,IAAI,CAAC,YAAY;EAAE;EAAQ,QAAQ,iBAAiB,OAAO;CAAE,GAAE;CAEjE,YAAYC,OAA+B;AAC1C,OAAK,iBAAiB,gBAAgB,KAAK,iBAAiB;AAE5D,MAAI,MAAM,MAAM,oBAAoB,CACnC,MAAK,iBAAiB,KAAK,iBAAiB,KAAK,CAAC,WAAW,OAAO,WAAW,wCAAwC,IAAI,KAAK;IAEhI,MAAK,iBAAiB,KAAK,iBAAiB,KAAK,CAAC,WAAW,OAAO,WAAW,wCAAwC,IAAI,KAAK;AAGjI,OAAK,cAAc,6BAAO,MAAM;AAChC,OAAK,4BAA4B,6BAAO,KAAK;AAC7C,OAAK,gBAAgB,IAAI,cACxB,QAAQ,qBACR,QAAQ,QACR;GACC,kBAAkB;GAClB,iBAAiB;GACjB,iBAAiB,MAAO,KAAK,eAAe,CAAC,KAAK,aAAa,MAAM,IAAI,CAAC,EAAG,IAAG,CAAE;EAClF,GACD,KAAK;AAGN,OAAK,mBAAmB,QAAQ,oBAAoB,QAAQ,cAAc;AAC1E,OAAK,mBAAmB,QAAQ,oBAAoB,QAAQ,cAAc;AAE1E,OAAK,gBAAgB,6BAAgB,MAAM;AAC3C,OAAK,cAAc,6BAAgB,MAAM;AACzC,OAAK,QAAQ,6BAAO,GAAG;AACvB,OAAK,0BAA0B;AAC/B,OAAK,0BAA0B;CAC/B;CAED,KAAKA,OAAyC;EAC7C,MAAM,IAAI,MAAM;EAEhB,MAAMC,uBAAmD;GACxD,gBAAgB,KAAK;GACrB,iBAAiB,CAAC,WAAW;AAC5B,SAAK,OAAO,UAAU,EAAE,oBAAoB,CAC3C,MAAK,iBAAiB;IAEtB,QAAO,QAAQ,KAAK,gBAAgB,gBAAgB,EAAE,KAAK,IAAI,4BAA4B,CAAC,IAAI,KAAK,IAAI,qBAAqB,CAAC,EAAE,CAAC,CAAC,KAClI,CAAC,cAAc;AACd,SAAI,UACH,OAAM,MAAM,cAAc;IAE3B,EACD;GAEF;GACD,kBAAkB,KAAK;GACvB,oBAAoB,CAAC,OAAO,qBAAqB;AAChD,SAAK,YAAY,iBAAiB,QAAQ;AAE1C,QAAI,iBAAiB,SAAS;AAC7B,UAAK,eAAe;AACpB,UAAK,cAAc,6BAA6B;AAChD,UAAK,0BAA0B;IAC/B,MACA,MAAK,0BAA0B,iBAAiB;GAEjD;GACD,oBAAoB,CAAC,WAAW;AAC/B,SAAK,0BAA0B;GAC/B;EACD;EACD,MAAMC,4BAA2C;GAChD,OAAO;GACP,SAAS,KAAK,eAAe;GAC7B,WAAW,KAAK;EAChB;EACD,MAAMC,0BAAyC;GAC9C,OAAO,MAAM,KAAK,IAAI,sBAAsB;GAC5C,SAAS,KAAK,aAAa;GAC3B,WAAW,KAAK;EAChB;EAED,MAAM,SAAS,MAAM;AACpB,OAAI,KAAK,wBAAyB;AAElC,OAAI,EAAE,UAAU;AAEf,SAAK,0BAA0B;AAE/B,WAAO,EAAE,WAAW,KAAK;GACzB;GAED,MAAM,eACL,KAAK,2BAA2B,KAAK,cAAc,mBAAmB,MAAM,KAAK,eAAe,GAAG,6BAA6B;AAEjI,OAAI,cAAc;AACjB,WAAO,QAAQ,aAAa;AAC5B;GACA;GAED,MAAM,oBAAoB,KAAK,aAAa,GAAG,QAAQ,QAAQ,KAAK,GAAG,OAAO,QAAQ,0BAA0B,+BAA+B;AAC/I,qBAAkB,KAAK,CAAC,cAAc;AACrC,QAAI,WAAW;AACd,UAAK,0BAA0B;AAE/B,YAAO,OACN,KAAK,cACL,KAAK,cAAc,gBAAgB,EACnC,KAAK,OAAO,EACZ,EAAE,eAAe,EACjB,EAAE,oBAAoB,EACtB,EAAE,UAAU,CACZ,CAAC,KAAK,CAAC,mBAAmB;AAC1B,QAAE,WAAW,iBAAiB,iBAAiB,KAAK;KACpD,EAAC;IACF;GACD,EAAC;EACF;AAED,SAAO,gBACN,sCACA,gBAAE,kDAAkD,CACnD,EAAE,WACC,gBAAE,WAAW;GACb,OAAO;GACP,OAAO,EAAE,wBAAwB;GACjC,gBAAgB,aAAa;GAC7B,YAAY;EACX,EAAC,GACF;GACA,gBAAE,uBAAuB,qBAAqB;GAC9C,EAAE,oBAAoB,GACnB,gBAAE,eAAe,KAAK,IAAI,uCAAuC,EAAE,CACnE,gBAAE,cAAc;IAAE,MAAM,SAAS;IAAY,eAAe;GAAM,EAAC,AAClE,EAAC,GACF;GACH,gBAAE,cAAc;IACf,OAAO,KAAK;IACZ,iBAAiB;GACjB,EAAC;GACF,kCAAkC,CAAC,SAAS,IACzC,gBAAE,WAAW;IACb,OAAO,KAAK,OAAO;IACnB,SAAS,KAAK;IACd,OAAO;GACN,EAAC,GACF;GACH,gBAAE,UAAU,0BAA0B;GACtC,gBAAE,OAAO,+BAA+B,aAAa,OAAO,sBAAsB,CAAC;GACnF,gBAAE,OAAO,+BAA+B,aAAa,SAAS,wBAAwB,CAAC;GACvF,gBAAE,UAAU,wBAAwB;EACnC,GACJ,gBACC,cACA,gBAAE,aAAa;GACd,OAAO;GACP,SAAS;EACT,EAAC,CACF,AACD,EAAC,CACF;CACD;CAED,MAAc,2BAA2B;AAExC,MAAI,KAAK,kBAAkB;AAE1B,SAAM,KAAK,iBAAiB,SAAS,EAAE,CAAC,UAAU;AAClD,SAAM,KAAK,iBAAiB,SAAS,EAAE,CAAC,UAAU;AAGlD,SAAM,KAAK,iBAAiB,SAAS,EAAE,CAAC,UAAU;EAClD;AAED,MAAI,KAAK,kBAAkB;AAE1B,SAAM,KAAK,iBAAiB,SAAS,EAAE,CAAC,UAAU;AAClD,SAAM,KAAK,iBAAiB,SAAS,EAAE,CAAC,UAAU;AAGlD,SAAM,KAAK,iBAAiB,SAAS,EAAE,CAAC,UAAU;EAClD;CACD;AACD;AAED,SAAS,mBAA6B;AACrC,QAAO,KAAK,IAAI,2BAA2B;AAC3C;;;;AAKD,SAAS,OACRC,aACAC,IACAC,kBACAC,eACAC,oBACAC,UACiC;CACjC,MAAM,EAAE,gBAAgB,GAAG;CAC3B,MAAM,YAAY,QAAQ,yBAAyB,mBAAmB;AACtE,QAAO,mBACN,4BACA,eAAe,mBAAmB,UAAU,GAAG,CAAC,KAAK,CAAC,aAAa;AAClE,SAAO,eAAe,aAAa,eAAe,oBAAoB,SAAS,CAAC,KAAK,OAAO,cAAc;AACzG,OAAI,WAAW;IACd,MAAM,MAAM,OAAO,eAAe,GAAG,gBAAgB,WAAW,gBAAgB;AAChF,WAAO,eACL,OAAO,UAAU,YAAY,MAAM,WAAW,aAAa,IAAI,kBAAkB,KAAK,MAAM,IAAI,CAChG,KAAK,CAAC,gBAAgB;AACtB,YAAO;MACN;MACA,UAAU;MACV;KACA;IACD,EAAC;GACH;EACD,EAAC;CACF,EAAC,EACF,UAAU,SACV,CACC,MACA,QAAQ,kBAAkB,MAAM;AAC/B,SAAO,QAAQ,8BAA8B;CAC7C,EAAC,CACF,CACA,QAAQ,MAAM,UAAU,MAAM,CAAC;AACjC;;;;ICvRY,aAAN,MAAiE;CACvE,AAAQ;CAER,SAASC,OAA2D;AACnE,OAAK,MAAM,MAAM;CACjB;CAED,KAAKC,OAAkE;EACtE,MAAM,OAAO,MAAM,MAAM;EACzB,MAAM,iBAAiB,KAAK;EAC5B,IAAIC,cAAkC;AACtC,MAAI,eAAgB,eAAc,eAAe;AACjD,SAAO,gBAAE,YAAY;GACpB,YAAY,CAACC,qBAAmB;AAC/B,QAAIA,iBAAgB,MAAK,iBAAiBA;AAC1C,oBAAgB,KAAK,KAAK,gBAAgB,eAAe;GACzD;GACD,cAAc,MAAM;AACnB,oBAAgB,KAAK,KAAK,gBAAgB,mBAAmB;GAC7D;GACD,eAAe,KAAK,QAAQ;GAC5B,oBAAoB,MAAM,KAAK,SAAS,SAAS;GACjD,UAAU,MAAM,KAAK;GACrB,sBAAsB;GACtB,YAAY;EACZ,EAAC;CACF;AACD;IAEY,kBAAN,MAA0E;CAChF;CAEA,YAAYC,YAAqC;AAChD,OAAK,OAAO;CACZ;CAED,cAA2B;EAC1B,MAAM,QAAQ,yBAAyB,KAAK,KAAK,KAAK;AAEtD,MAAI,KAAK,KAAK,SAAS,SAAS,aAAa,KAAK,KAAK,SAAS,SAAS,SACxE,QAAO,KAAK,gBAAgB,mBAAmB,QAAQ,YAAY;IAEnE,QAAO,KAAK,gBAAgB,gBAAgB,MAAM;CAEnD;CAED,WAAWC,iBAA4C;AAEtD,SAAO,QAAQ,QAAQ,KAAK;CAC5B;CAED,kBAA2B;AAC1B,SAAO;CACP;CAED,YAAqB;AACpB,SAAO;CACP;AACD;;;;ICjEiB,8DAAX;AACN;AACA;AACA;;AACA;;;;ICwBY,iCAAN,MAAqF;CAC3F,AAAQ;CACR,AAAQ;CACR,AAAQ;CAER,SAASC,OAA2D;AACnE,OAAK,mBAAmB,QAAQ,oBAAoB,QAAQ,cAAc;AAC1E,OAAK,mBAAmB,QAAQ,oBAAoB,QAAQ,cAAc;AAE1E,OAAK,MAAM,MAAM;CACjB;CAED,KAAK,EAAE,OAAwD,EAAY;AAC1E,SAAO,KAAK,0BAA0B,MAAM;CAC5C;CAED,MAAc,QAAQC,MAA+B;AAEpD,MAAI,KAAK,YAAY,kBAAkB,kBAAkB,UAAU;GAClE,MAAM,UAAU,MAAM,KAAK,sBAAsB,KAAK;AACtD,QAAK,QACJ;EAED;EAED,MAAM,cAAc,8BAA8B;GACjD,aAAa,YAAY;GACzB,UAAU;GACV,MAAM,KAAK;GACX,MAAM,MAAM;GACZ,cAAc,KAAK;GACnB,wBAAwB;GACxB,YAAY;GACZ,KAAK,OAAO,eAAe,GAAG,gBAAgB,WAAW,gBAAgB;EACzE,EAAC;AACF,qBACC,kBACA,QAAQ,gBAAgB,KAAK,0BAA0B,YAAY,CAAC,KAAK,MAAM;AAC9E,UAAO,QAAQ,eAAe,0BAA0B;EACxD,EAAC,CACF,CACC,KAAK,MAAM;GAEX,MAAM,yBAAyB,KAAK,kBAAkB,SAAS,EAAE;AACjE,2BAAwB,UAAU;IACjC,MAAM;IACN,OAAO,wBAAwB,KAAK,YAAY;GAChD,EAAC;AACF,2BAAwB,UAAU;IACjC,MAAM;IACN,OAAO,CAAC,KAAK,kBAAkB,WAAW,IAAI,OAAO,UAAU;GAC/D,EAAC;AACF,2BAAwB,UAAU;AAElC,UAAO,KAAK,MAAM,MAAM,KAAK,IAAI;EACjC,EAAC,CACD,KAAK,YAAY;GACjB,MAAM,oBAAoB,MAAM,iBAAiB,IAAI,QAAQ,cAAc,UAAU,CAAC;AACtF,OAAI,sBAAsB,kBAAkB,eAC3C,YAAW,YAAY;AACtB,SAAK,qBAAqB;GAC1B,GAAE,IAAK;EAET,EAAC,CACD,MACA,QAAQ,yBAAyB,CAAC,MAAM;AACvC,UAAO,QACN,KAAK,gBACJ,uBACA,KAAK,IAAI,gCAAgC,EAAE,KAAK,CAAC,IAC/C,KAAK,gBAAgB,YAAY,SAAS,MAAM,KAAK,IAAI,6BAA6B,GAAG,IAC3F,CACD;EACD,EAAC,CACF,CACA,MACA,QAAQ,iBAAiB,CAAC,MAAM;AAC/B,UAAO,QACN,KAAK,gBACJ,kBACA,KAAK,IAAI,uCAAuC,IAC9C,KAAK,gBAAgB,YAAY,SAAS,MAAM,KAAK,IAAI,6BAA6B,GAAG,IAC3F,CACD;EACD,EAAC,CACF;CACF;;CAGD,MAAc,sBAAsBA,MAAiD;AACpF,OAAK,QAAQ,OAAO,gBAAgB,CACnC,OAAM,QAAQ,OAAO,cAAc,UAAU,KAAK,eAAe,CAAC,aAAa,UAAU,KAAK,eAAe,CAAC,UAAU,YAAY,UAAU;EAG/I,MAAM,aAAa,QAAQ,OAAO,mBAAmB,CAAC,KAAK;EAC3D,MAAM,kBAAkB,mBAAmB,kBAAkB,WAAW,CAAC;AAEzE,MAAI;GACH,MAAM,SAAS,MAAM,mBACpB,kBACA,QAAQ,qBAAqB,0BAA0B,iBAAiB,KAAK,KAAK,EAAE,KAAK,QAAQ,iBAAiB,EAAE,gBAAgB,CACpI;AACD,OAAI,OAAO,WAAW,wBAAwB,QAC7C,QAAO;EAER,SAAQ,GAAG;AACX,OAAI,aAAa,oBAAoB;AACpC,YAAQ,MAAM,gCAAgC,EAAE;AAChD,WAAO,QAAQ,iCAAiC,EAAE,QAAQ;AAC1D,WAAO;GACP,MACA,OAAM;EAEP;AAED,SAAO,MAAM,kBACZ,KAAK,QAAQ,iBAAiB,EAC9B,KAAK,aACL,KAAK,aACL,MACA,KAAK,kBAAkB,MACvB,MACA,KAAK,eACL;CACD;CAED,AAAQ,0BAA0BC,OAAiD;EAClF,MAAM,WAAW,MAAM,KAAK,QAAQ,iBAAiB,KAAK,gBAAgB;EAC1E,MAAM,eAAe,WAAW,KAAK,IAAI,uBAAuB,GAAG,KAAK,IAAI,wBAAwB;AAEpG,SAAO;GACN,gBAAE,iBAAiB,KAAK,IAAI,qBAAqB,CAAC;GAClD,gBAAE,gBAAgB;IACjB,gBAAE,WAAW;KACZ,OAAO;KACP,OAAO,yBAAyB,MAAM,KAAK,KAAK;KAChD,YAAY;IACZ,EAAC;IACF,gBAAE,WAAW;KACZ,OAAO;KACP,OAAO;KACP,YAAY;IACZ,EAAC;IACF,gBAAE,WAAW;KACZ,OAAO,YAAY,MAAM,KAAK,gBAAgB,yBAAyB;KACvE,OAAO,iBAAiB,MAAM,KAAK,OAAO,gBAAgB,KAAK,MAAM,KAAK,QAAQ;KAClF,YAAY;IACZ,EAAC;IACF,KAAK,oBAAoB,MAAM;IAC/B,gBAAE,WAAW;KACZ,OAAO;KACP,OAAO,qBAAqB,MAAM,KAAK,YAAY,cAAc;KACjE,YAAY;IACZ,EAAC;GACF,EAAC;GACF,gBACC,wBACA,MAAM,KAAK,QAAQ,aAAa,GAC7B,KAAK,IAAI,6CAA6C,GACtD,KAAK,IAAI,4CAA4C,CACxD;GACD,gBACC,gCACA,gBAAE,aAAa;IACd,OAAO;IACP,OAAO;IACP,SAAS,MAAM,KAAK,QAAQ,MAAM,KAAK;GACvC,EAAC,CACF;EACD;CACD;CAED,AAAQ,oBAAoBA,OAAiD;AAC5E,SAAO,MAAM,KAAK,gBACf,gBAAE,WAAW;GACb,OAAO;GACP,OAAO,iBAAiB,MAAM,KAAK,cAAc,cAAc,MAAM,KAAK,QAAQ;GAClF,YAAY;EACX,EAAC,GACF;CACH;CAED,AAAQ,MAAMD,MAA+BE,KAAkB;AAC9D,kBAAgB,KAAK,gBAAgB,eAAe;CACpD;AACD;AAED,SAAS,iBAAiBC,OAAeC,SAA8C;AACtF,QAAO,oBAAoB,OAAO,QAAQ,iBAAiB,GAAG,QAAQ,aAAa,CAAC;AACpF;;;;;ACzLD,kBAAkB;AAqCX,eAAe,kBAAkBC,QAAyBC,gBAAqC,cAAcC,KAAuC;CAC1J,MAAM,CAAC,UAAU,eAAe,GAAG,MAAM,QAAQ,IAAI,CAAC,OAAO,mBAAmB,CAAC,cAAc,EAAE,OAAO,mBAAmB,CAAC,oBAAoB,AAAC,EAAC;CAElJ,MAAM,oBAAoB,MAAM,uBAAuB,uBAAuB,MAAM,QAAQ,iBAAiB,KAAK;CAElH,MAAM,SAAS,kBAAkB,mBAAmB;CACpD,MAAM,eAAe,QAAQ,sBAAsB,CAAC,wBAAwB;CAC5E,MAAM,sBAAsB,MAAM,oBAAoB,uBAAuB,aAAa;CAC1F,MAAMC,cAAuC;EAC5C,SAAS;GACR,aAAa,6BAAO,OAAO,SAAS;GACpC,iBAAiB,6BAAO,kBAAkB,eAAe,gBAAgB,CAAC;EAC1E;EACD,aAAa;GACZ,gBAAgB,qBAAqB,eAAe,aAAa,eAAe,eAAe;GAC/F,SAAS,eAAe,iBAAiB,kBAAkB,eAAe,eAAe,GAAG;GAC5F,WAAW,eAAe;EAC1B;EACD,aAAa;GACZ,eAAe,qBAAqB,eAAe,IAAK,MAAM,yBAAyB;GACvF,gBAAgB;EAChB;EACD,OAAO;EACP,MAAM,SAAS;EACf,eAAe;EACC;EACN;EACV,gBAAgB;EAChB,oBAAoB;EACpB,iBAAiB,kBAAkB,qBAAqB;EACxD,aAAa,YAAY;EAEzB,aAAa,OAAO,mBAAmB,CAAC,eAAe,GAAG,SAAS,OAAO;EAC1E,wBAAwB;EACxB,YAAY;EACS;EACrB,cAAc;EACd,sBAAsB;EACtB;EACA,KAAK,OAAO,OAAO,MAAM;CACzB;CAED,MAAM,cAAc;EACnB,kBAAkB,yBAAyB,IAAI,6BAA6B,aAAa;EACzF,kBAAkB,2BAA2B,IAAI,+BAA+B,aAAa;EAC7F,kBAAkB,gCAAgC,IAAI,+BAA+B,aAAa;CAClG;AACD,KAAI,UAAU,CACb,aAAY,OAAO,GAAG,EAAE;CAGzB,MAAM,WAAW,OAAa;CAC9B,MAAM,gBAAgB,mBACrB,aACA,aACA,YAAY;AACX,WAAS,SAAS;CAClB,GACD,WAAW,UACX;AACD,eAAc,OAAO,MAAM;AAC3B,QAAO,SAAS;AAChB;AAEM,eAAe,iBACrBC,wBACAC,oBACAC,cACAL,gBAAqC,gBACrB;CAChB,MAAM,iBAAiB,QAAQ;AAE/B,gBAAe,mBAAmB,gBAAgB,UAAU;AAC5D,SAAQ,oBAAoB,SAAS,MAAM,eAAe,sBAAsB,CAAC;CAEjF,MAAM,oBAAoB,MAAM,uBAAuB,uBAAuB,oBAAoB,QAAQ,iBAAiB,aAAa;CACxI,MAAM,SAAS,kBAAkB,mBAAmB;CACpD,MAAM,eAAe,QAAQ,sBAAsB,CAAC,wBAAwB;CAC5E,MAAM,sBAAsB,MAAM,oBAAoB,uBAAuB,aAAa;CAE1F,IAAIM;AACJ,KAAI,UAAU,EAAE;EACf,MAAM,gCAAgC,MAAM,mCAAmC,KAAK;AAEpF,MAAI,kCAAkC,mCAAmC,eACxE,iBAAgB,cAAc,OAAO,CAAC,SAAS,SAAS,SAAS,KAAK;AAEvE,YACC,iCAAiC,mCAAmC,iBACjE,KAAK,eAAe,mCAAmC,EAAE,qBAAqB,SAAS,gBAAiB,EAAC,GACzG;CACJ,MACA,WAAU;CAGX,MAAMC,aAAsC;EAC3C,SAAS;GACR,aAAa,6BAAO,OAAO,SAAS;GACpC,iBAAiB,6BAAO,gBAAgB,OAAO;EAC/C;EACD,aAAa;GACZ,gBAAgB;GAChB,SAAS;GACT,WAAW;EACX;EACD,aAAa;GACZ,eAAe,MAAM,yBAAyB;GAC9C,gBAAgB;EAChB;EACD,OAAO;EACP,eAAe;EACf,MAAM,SAAS;EACf,gBAAgB;EAChB,UAAU;EACV,gBAAgB;EAChB;EACA,iBAAiB,kBAAkB,qBAAqB;EACxD,aAAa,YAAY;EACzB,YAAY;EACZ,aAAa;EACW;EACH;EACrB;EACA,sBAAsB;EACtB;EACA,KAAK;CACL;CAED,MAAM,eAAe,IAAI,+BAA+B;CAExD,MAAM,cAAc;EACnB,kBAAkB,yBAAyB,IAAI,6BAA6B,YAAY;EACxF,kBAAkB,YAAY,IAAI,gBAAgB,YAAY;EAC9D,kBAAkB,2BAA2B,aAAa;EAC1D,kBAAkB,gCAAgC,aAAa;EAC/D,kBAAkB,4BAA4B,IAAI,gCAAgC,YAAY;CAC9F;AAED,KAAI,UAAU,CACb,aAAY,OAAO,GAAG,EAAE;CAGzB,MAAM,gBAAgB,mBACrB,YACA,aACA,YAAY;AACX,MAAI,QAAQ,OAAO,gBAAgB,CAGlC,OAAM,QAAQ,OAAO,OAAO,MAAM;AAGnC,MAAI,WAAW,eACd,iBAAE,MAAM,IAAI,UAAU;GACrB,aAAa;GACb,WAAW,WAAW,eAAe;EACrC,EAAC;IAEF,iBAAE,MAAM,IAAI,UAAU,EACrB,aAAa,KACb,EAAC;CAEH,GACD,WAAW,UACX;AAGD,cAAa,mBAAmB,MAAM,WAAW,SAAS,SAAS,QAAQ,cAAc,MAAM,gBAAgB,YAAY,GAAG;AAE9H,eAAc,OAAO,MAAM;AAC3B;;;;ACnOD,kBAAkB;;;;;AC2ElB,kBAAkB;IAMN,8CAAL;AACN;AACA;;AACA;;;;;AC/CM,eAAe,iBACrBC,UACAC,cACAC,gBACAC,aACAC,eACAC,QACgB;AAChB,KAAI,+BAA+B,eAAe,KAAK,UAAU,EAAE;AAClE,QAAM,iCAAiC;AACvC;CACA;CAED,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,MAAM,mBAC3D,kBACA,QAAQ,IAAI,CACX,oBAAoB,uBAAuB,QAAQ,sBAAsB,CAAC,wBAAwB,CAAC,EACnG,uBAAuB,uBAAuB,MAAM,QAAQ,iBAAiB,KAAK,AAClF,EAAC,CACF;CACD,MAAM,QAAQ,IAAI,8BAA8B,UAAU,gBAAgB,MAAM,QAAQ,OAAO,mBAAmB,CAAC,aAAa,EAAE;CAClI,MAAM,eAAe,MAAM;AAC1B,SAAO,OAAO;CACd;CAED,MAAMC,iBAAuC;EAC5C,MAAM,CACL;GACC,OAAO;GACP,OAAO;GACP,MAAM,WAAW;EACjB,CACD;EACD,OAAO,CAAE;EACT,QAAQ;CACR;CACD,MAAM,kBAAkB,MAAM;CAC9B,MAAM,cAAc,2BAAO,gBAAgB,YAAY;CACvD,MAAM,kBAAkB,2BAAO,gBAAgB,OAAO;CACtD,MAAM,uBAAuB,MAAM,mCAAmC;CAEtE,MAAMC,SAAiB,OAAO,YAAY,gBAAgB,EACzD,MAAM,MACL,gBACC,OACA,gBAAE,sBAAsB;EACvB,SAAS;GACR;GACiB;EACjB;EACD,iBAAiB,uBAAuB,qBAAqB;EAC7D,KAAK;EACL,UAAU;EACV,WAAW;EACI;EACf,iBAAiB,gBAAgB;EACjC,+BAA+B,gBAAgB,oBAAoB,gBAAgB;EACnF,eAAe;EACM;EACrB;EACA;CACA,EAAC,CACF,CACF,EAAC,CACA,YAAY;EACZ,KAAK,KAAK;EACV,MAAM;EACN,MAAM;CACN,EAAC,CACD,gBAAgB,aAAa;CAC/B,MAAMC,4BAAuD;GAC3D,SAAS,OAAO,OACf;GACA,OAAO;GACP,SAAS,MAAM,eAAe,UAAU,QAAQ,gBAAgB;EAChE;GACD,SAAS,gBAAgB,iBAAiB,QAAQ,SAAS,eAAe,iBAAiB,iBAAiB,eAAe;GAC3H,SAAS,SAAS,iBAAiB,QAAQ,SAAS,QAAQ,iBAAiB,iBAAiB,eAAe;GAC7G,SAAS,YAAY,iBAAiB,QAAQ,SAAS,WAAW,iBAAiB,iBAAiB,eAAe;GACnH,SAAS,WAAW,iBAAiB,QAAQ,SAAS,UAAU,iBAAiB,iBAAiB,eAAe;GACjH,SAAS,YAAY,iBAAiB,QAAQ,SAAS,WAAW,iBAAiB,iBAAiB,eAAe;CACpH;AACD,QAAO,MAAM;AACb;AACA;AAED,eAAe,eAAeR,UAAoBO,QAAgBE,iBAAkC;AACnG,KAAI,UAAU,EAAE;EAEf,MAAM,YAAY,MAAM,QAAQ,qBAAqB,mCAAmC,mBAAmB,kBAAkB,SAAS,IAAI,CAAC,CAAC;AAC5I,MAAI,cAAc,mCAAmC,SAAU,MAAM,QAAQ,qBAAqB,0BAA0B,EAAG;AAC9H,SAAM,QAAQ,qBAAqB,4BAA4B;AAE/D,SAAM,mBAAmB,kBAAkB,0BAA0B,CAAC;AAEtE,OAAI,MAAM,QAAQ,qBAAqB,0BAA0B,EAAE;AAClE,YAAQ,IAAI,yDAAyD;AAErE;GACA;EACD;CACD;CAED,MAAM,SAAS,MAAM,4BAA4B,MAAM,KAAK;CAC5D,MAAM,OACL,OAAO,aAAa,OAAO,YAAY,OAAO,SAC3C,iBAAiB;EACjB,UAAU,OAAO;EACjB,QAAQ,OAAO;EACf,SAAS,OAAO;EAChB,SAAS;CACR,EAAC,GACF;CACJ,MAAM,cAAc,MAAM,mBAAmB,QAAQ,iBAAiB,UAAU,KAAK;AAErF,KAAI,gBAAgB,SAAS,KAC5B,MAAK,MAAM,mBAAmB,YAAY,UAAU,qBAAqB,CAAE,aAAY,UAAU,8BAA8B,gBAAgB;AAEhJ;AAED,eAAe,2BAA2B;AACzC,MAAK,IAAI,IAAI,GAAG,IAAI,GAAG,KAAK;AAE3B,QAAM,MAAM,IAAK;AACjB,OAAM,MAAM,QAAQ,qBAAqB,0BAA0B,CAClE;CAED;AACD;AAED,eAAe,mBACdP,gBACAQ,oBACAC,oBACAJ,QACAE,iBACC;AACD,KAAI,UAAU,IAAI,qBAAqB,eAAe,KAAK,kBAAkB,UAAU;EACtF,MAAM,kBAAkB,mBAAmB,kBAAkB,cAAc,QAAQ,OAAO,mBAAmB,CAAC,KAAK,SAAS,CAAC,CAAC;AAC9H,SAAO,OAAO;AACd,MAAI;AACH,SAAM,QAAQ,qBAAqB,0BAA0B,iBAAiB,mBAAmB,EAAE,oBAAoB,gBAAgB;EACvI,SAAQ,GAAG;AACX,OAAI,aAAa,oBAAoB;AACpC,YAAQ,MAAM,gCAAgC,EAAE;AAChD,WAAO,QAAQ,iCAAiC,EAAE,QAAQ;GAC1D,MACA,OAAM;EAEP;CACD,OAAM;AACN,MAAI,gBAAgB,oBAAoB,mBACvC,OAAM,QAAQ,eAAe,sBAAsB,gBAAgB,mBAAmB;AAEvF,QAAM,mBAAmB,oBAAoB,QAAQ,gBAAgB;CACrE;AACD;AAED,SAAS,iBACRF,QACAI,oBACAF,iBACAG,oBACAV,gBACyB;AACzB,QAAO,OAAO;EACb,OAAO;EACP,SAAS,YAAY;AAEpB,OACC,YAAY,SAAS,gBAAgB,SAAS,KAC5C,MAAM,OAAO,QAAQ,KAAK,eAAe,mBAAmB,EAAE,UAAU,eAAe,oBAAqB,EAAC,CAAC,CAEhH;AAED,SAAM,mBAAmB,kBAAkB,mBAAmB,gBAAgB,oBAAoB,EAAE,oBAAoB,QAAQ,gBAAgB,CAAC;EACjJ;CACD;AACD;AAED,SAAS,sCAAsCW,GAA2C;CACzF,MAAM,SAAS,EAAE;AAEjB,KAAI,UAAU,KACb,QAAO,OAAO,QAAQ,mBAAmB;KACnC;EACN,IAAIC;AAEJ,UAAQ,QAAR;AACC,QAAK,yBAAyB;AAC7B,gBAAY,KAAK,IAAI,sCAAsC;AAC3D;AAED,QAAK,yBAAyB;AAC7B,gBAAY,KAAK,IAAI,qCAAqC;AAC1D;AAED,QAAK,yBAAyB;AAC7B,gBAAY,KAAK,IAAI,qCAAqC;AAC1D;AAED,QAAK,yBAAyB;AAC7B,gBAAY,KAAK,IAAI,kCAAkC;AACvD;AAED,QAAK,yBAAyB;AAC9B,QAAK,qBAAqB;AACzB,gBAAY,KAAK,IAAI,2BAA2B;AAChD;AAED,QAAK,yBAAyB;AAC9B,QAAK,qBAAqB;AACzB,gBAAY,KAAK,IAAI,2CAA2C;AAChE;AAED,QAAK,yBAAyB;AAC9B,QAAK,qBAAqB;AACzB,gBAAY,KAAK,IAAI,2BAA2B;AAChD;AAED,QAAK,yBAAyB;AAC9B,QAAK,qBAAqB;AACzB,gBAAY,KAAK,IAAI,2BAA2B;AAChD;AAED,QAAK,yBAAyB;AAC9B,QAAK,qBAAqB;AACzB,gBAAY,KAAK,IAAI,+BAA+B;AACpD;AAED,QAAK,yBAAyB;AAC7B,gBAAY,KAAK,IAAI,0BAA0B;AAC/C;AAED,QAAK,yBAAyB,kBAC7B,QAAO,OAAO,QAAQ,+BAA+B;AAEtD,QAAK,yBAAyB,iBAC7B,QAAO,OAAO,QAAQ,2BAA2B;AAElD,QAAK,yBAAyB,6BAC7B,KAAI,UAAU,CACb,QAAO,QAAQ,qBAAqB,4BAA4B;IAEhE,QAAO,iCAAiC;AAG1C,QAAK,yBAAyB,qBAC7B,QAAO,OAAO,QAAQ,yBAAyB;AAChD,WACC,OAAM;EACP;AAED,SAAO,OAAO,QACb,KAAK,eAAe,gCAAgC,EACnD,eAAe,UACf,EAAC,CACF;CACD;AACD;;;;;;;AAQD,eAAe,0BAA0Bd,UAAoBS,iBAAkCM,YAAkD;CAChJ,MAAM,wBAAwB,8BAA8B;EAC3D,aAAa,YAAY;EACzB,MAAM,MAAM;EACZ,UAAU,SAAS;EACnB,wBAAwB;EACxB,cAAc;EACd,MAAM,SAAS;EACH;EACZ,KAAK,OAAO,eAAe,GAAG,gBAAgB,WAAW,gBAAgB;CACzE,EAAC;AACF,KAAI;AACH,QAAM,QAAQ,gBAAgB,KAAK,0BAA0B,sBAAsB;AACnF,QAAM,QAAQ,eAAe,0BAA0B;AACvD,SAAO,SAAS;CAChB,SAAQ,GAAG;AACX,MAAI,aAAa,wBAChB,OAAM,sCAAsC,EAAE;SACpC,aAAa,iBACvB,OAAM,OAAO,QAAQ,sCAAsC;SACjD,aAAa,gBACvB,OAAM,OAAO,QAAQ,6CAA6C;IAElE,OAAM;AAEP,SAAO,gBAAgB;CACvB;AACD;AAED,eAAe,mBACdR,QACAE,iBACAT,UACAe,aAAgC,MACZ;CACpB,MAAM,4BAA4B,OAAO,QAAQ,0BAA0B,aAAa,MAAM;AAC7F,SAAO,gBACN,OACA,gBAAE,gCAAgC;GACjC,gBAAE,MAAM,KAAK,IAAI,mCAAmC,CAAC;GACrD,gBAAE,MAAM,KAAK,IAAI,yCAAyC,CAAC;GAC3D,gBAAE,MAAM,KAAK,IAAI,mCAAmC,CAAC;EACrD,EAAC,CACF;CACD,EAAC;AAEF,MAAM,MAAM,0BACX,QAAO,gBAAgB;AAGxB,KAAI;AACH,SAAO,MAAM,mBAAmB,kBAAkB,0BAA0B,UAAU,iBAAiB,WAAW,CAAC;CACnH,UAAS;AACT,SAAO,OAAO;CACd;AACD;AAED,eAAe,mBAAmBJ,oBAA8BJ,QAAgBE,iBAAqD;AACpI,KAAI,uBAAuB,gBAAgB,SAC1C,QAAO,gBAAgB;CAGxB,MAAM,iBAAiB,QAAQ,OAAO,mBAAmB;CACzD,MAAM,WAAW,MAAM,eAAe,cAAc;AACpD,MAAK,SAAS,eAAe,iBAAiB,SAAS,SAAS,mBAAmB,CAAC,EAAE;EACrF,MAAM,iBAAiB,MAAM,eAAe,oBAAoB;EAChE,MAAMO,cAA2B;GAChC,gBAAgB,qBAAqB,eAAe,aAAa,eAAe,eAAe;GAC/F,SAAS,eAAe,iBAAiB,kBAAkB,eAAe,eAAe,GAAG;GAC5F,WAAW,eAAe;EAC1B;EACD,MAAM,qBAAqB,MAAM,sCAAsC,UAAU,aAAa,eAAe;AAC7G,OAAK,mBACJ,QAAO,gBAAgB;CAExB;AAED,KAAI;EACH,MAAM,SAAS,8BAA8B;GAC5C,aAAa,YAAY;GACzB,MAAM;GACN,MAAM,MAAM;GACZ,cAAc;GACd,UAAU,SAAS;GACnB,wBAAwB;GACxB,YAAY;GACZ,KAAK,OAAO,eAAe,GAAG,gBAAgB,WAAW,gBAAgB;EACzE,EAAC;AAEF,MAAI;AACH,SAAM,mBAAmB,kBAAkB,QAAQ,gBAAgB,KAAK,0BAA0B,OAAO,CAAC;AAC1G,UAAO;EACP,SAAQ,GAAG;AACX,OAAI,aAAa,yBAAyB;AACzC,UAAM,sCAAsC,EAAE;AAE9C,WAAO,gBAAgB;GACvB;AACD,SAAM;EACN;CACD,UAAS;AACT,SAAO,OAAO;CACd;AACD"}