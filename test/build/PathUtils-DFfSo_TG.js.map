{"version":3,"file":"PathUtils-DFfSo_TG.js","names":["files: Array<string>","filename: string","clashNumbers: Array<number>","clashNumbersSet: Set<number>","file: string","filePath: string","urlString: string","p: string","pathModule: PathExports"],"sources":["../../src/common/desktop/PathUtils.ts"],"sourcesContent":["import path from \"node:path\"\nimport { sanitizeFilename } from \"../api/common/utils/FileUtils\"\nimport { neverNull } from \"@tutao/tutanota-utils\"\nimport { promises as fs } from \"node:fs\"\nimport { PathExports } from \"./ElectronExportTypes\"\n\n/**\n * Can be used when you want to ensure only valid file extensions are being provided. feel free to add some\n */\nexport type ValidExtension = \"msg\"\n\n// taken from https://www.lifewire.com/list-of-executable-file-extensions-2626061\n// we take the full list, which may be overkill\n// we should update this semi-regularly\nexport const EXECUTABLE_EXTENSIONS = [\n\t\"0xe\",\n\t\"73k\",\n\t\"89k\",\n\t\"a6p\",\n\t\"ac\",\n\t\"acc\",\n\t\"acr\",\n\t\"action\",\n\t\"actm\",\n\t\"ahk\",\n\t\"air\",\n\t\"apk\",\n\t\"app\",\n\t\"arscript\",\n\t\"as\",\n\t\"asb\",\n\t\"awk\",\n\t\"azw2\",\n\t\"bat\",\n\t\"beam\",\n\t\"bin\",\n\t\"btm\",\n\t\"cel\",\n\t\"celx\",\n\t\"chm\",\n\t\"cmd\",\n\t\"cof\",\n\t\"com\",\n\t\"command\",\n\t\"cpl\",\n\t\"crt\",\n\t\"csh\",\n\t\"dek\",\n\t\"dld\",\n\t\"dmc\",\n\t\"docm\",\n\t\"dotm\",\n\t\"dxl\",\n\t\"ear\",\n\t\"ebm\",\n\t\"ebs\",\n\t\"ebs2\",\n\t\"ecf\",\n\t\"eham\",\n\t\"elf\",\n\t\"es\",\n\t\"ex_\",\n\t\"ex4\",\n\t\"exe\",\n\t\"exopc\",\n\t\"ezs\",\n\t\"fas\",\n\t\"fky\",\n\t\"fpi\",\n\t\"frs\",\n\t\"fxp\",\n\t\"gadget\",\n\t\"gs\",\n\t\"ham\",\n\t\"hms\",\n\t\"hpf\",\n\t\"hta\",\n\t\"iim\",\n\t\"inf\",\n\t\"inf1\",\n\t\"ins\",\n\t\"inx\",\n\t\"ipa\",\n\t\"ipf\",\n\t\"isp\",\n\t\"isu\",\n\t\"jar\",\n\t\"job\",\n\t\"js\",\n\t\"jse\",\n\t\"jsx\",\n\t\"kix\",\n\t\"ksh\",\n\t\"lnk\",\n\t\"lo\",\n\t\"ls\",\n\t\"mam\",\n\t\"mcr\",\n\t\"mel\",\n\t\"mpx\",\n\t\"mrc\",\n\t\"ms\",\n\t\"msc\",\n\t\"msi\",\n\t\"msp\",\n\t\"mst\",\n\t\"mxe\",\n\t\"nexe\",\n\t\"obs\",\n\t\"ore\",\n\t\"osx\",\n\t\"otm\",\n\t\"out\",\n\t\"paf\",\n\t\"pex\",\n\t\"pif\",\n\t\"plx\",\n\t\"potm\",\n\t\"ppam\",\n\t\"ppsm\",\n\t\"pptm\",\n\t\"prc\",\n\t\"prg\",\n\t\"ps1\",\n\t\"pvd\",\n\t\"pwc\",\n\t\"pyc\",\n\t\"pyo\",\n\t\"qpx\",\n\t\"rbx\",\n\t\"reg\",\n\t\"rgs\",\n\t\"rox\",\n\t\"rpj\",\n\t\"run\",\n\t\"s2a\",\n\t\"sbs\",\n\t\"sca\",\n\t\"scar\",\n\t\"scb\",\n\t\"scr\",\n\t\"script\",\n\t\"sct\",\n\t\"shb\",\n\t\"shs\",\n\t\"smm\",\n\t\"spr\",\n\t\"tcp\",\n\t\"thm\",\n\t\"tlb\",\n\t\"tms\",\n\t\"u3p\",\n\t\"udf\",\n\t\"upx\",\n\t\"url\",\n\t\"vb\",\n\t\"vbe\",\n\t\"vbs\",\n\t\"vbscript\",\n\t\"vlx\",\n\t\"vpm\",\n\t\"wcm\",\n\t\"widget\",\n\t\"wiz\",\n\t\"workflow\",\n\t\"wpk\",\n\t\"wpm\",\n\t\"ws\",\n\t\"wsf\",\n\t\"wsh\",\n\t\"xap\",\n\t\"xbap\",\n\t\"xlam\",\n\t\"xlm\",\n\t\"xlsm\",\n\t\"xltm\",\n\t\"xqt\",\n\t\"xys\",\n\t\"zl9\",\n]\n\n/**\n * compares a filename to a list of filenames and finds the first number-suffixed\n * filename not already contained in the list.\n * @returns {string} the basename appended with '-<first non-clashing positive number>.<ext>\n */\nexport function nonClobberingFilename(files: Array<string>, filename: string): string {\n\tfilename = sanitizeFilename(filename)\n\tconst clashingFile = files.find((f) => f === filename)\n\n\tif (typeof clashingFile !== \"string\") {\n\t\t// all is well\n\t\treturn filename\n\t} else {\n\t\t// there are clashing file names\n\t\tconst ext = path.extname(filename)\n\t\tconst basename = path.basename(filename, ext)\n\t\tconst clashNumbers: Array<number> = files\n\t\t\t.filter((f) => f.startsWith(`${basename}-`))\n\t\t\t.map((f) => f.slice(0, f.length - ext.length))\n\t\t\t.map((f) => f.slice(basename.length + 1, f.length))\n\t\t\t.map((f) => (!f.startsWith(\"0\") ? parseInt(f, 10) : 0))\n\t\t\t.filter((n) => !isNaN(n) && n > 0)\n\t\tconst clashNumbersSet: Set<number> = new Set(clashNumbers)\n\t\tclashNumbersSet.add(0)\n\t\t// if a number is bigger than its index, there is room somewhere before that number\n\t\tconst firstGapMinusOne = Array.from(clashNumbersSet)\n\t\t\t.sort((a, b) => a - b)\n\t\t\t.find((n, i, a) => a[i + 1] > i + 1)\n\t\treturn firstGapMinusOne != null && !isNaN(firstGapMinusOne)\n\t\t\t? `${basename}-${neverNull(firstGapMinusOne) + 1}${ext}`\n\t\t\t: `${basename}-${clashNumbersSet.size}${ext}`\n\t}\n}\n\nexport function looksExecutable(file: string): boolean {\n\tconst basename = path.basename(file)\n\t// if the file has an empty filename with just an extension (e.g. just \".exe\" or \".bat\")\n\t// then path.extname will return an empty string resulting in this function returning false\n\t// this is a problem because windows would still try to execute a file named \".exe\", so it should return true\n\tconst ext = basename.match(/^\\.[^.]+$/) ? basename : path.extname(basename)\n\n\treturn EXECUTABLE_EXTENSIONS.includes(ext.toLowerCase().slice(1))\n}\n\n/**\n * Determine if a file exists with a given path and it is a regular file\n * @param filePath\n * @returns Promise<boolean>\n */\nexport async function fileExists(filePath: string): Promise<boolean> {\n\treturn fs\n\t\t.stat(filePath)\n\t\t.then((stats) => stats.isFile())\n\t\t.catch(() => false)\n}\n\nexport function parseUrlOrNull(urlString: string): URL | null {\n\ttry {\n\t\treturn new URL(urlString)\n\t} catch (e) {\n\t\treturn null\n\t}\n}\n\nexport function urlIsPrefix(prefix: URL, url: URL): boolean {\n\treturn (\n\t\turl.protocol === prefix.protocol &&\n\t\turl.hostname === prefix.hostname &&\n\t\turl.port === prefix.port &&\n\t\turl.username === prefix.username &&\n\t\turl.pathname.startsWith(prefix.pathname)\n\t)\n}\n\n/**\n * replace the last component in a file path with another\n * @param p path to a file/folder\n * @param file the file name to put in the last path component\n * @param pathModule path module to use for cross platform testing\n */\nexport function swapFilename(p: string, file: string, pathModule: PathExports = path): string {\n\tconst dir = pathModule.dirname(p)\n\treturn pathModule.join(dir, file)\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAca,wBAAwB;CACpsBAAsBA,OAAsBC,UAA0B;AACrF,YAAW,iBAAiB,SAAS;CACrC,MAAM,eAAe,MAAM,KAAK,CAAC,MAAM,MAAM,SAAS;AAEtD,YAAW,iBAAiB,SAE3B,QAAO;KACD;EAEN,MAAM,MAAM,KAAK,QAAQ,SAAS;EAClC,MAAM,WAAW,KAAK,SAAS,UAAU,IAAI;EAC7C,MAAMC,eAA8B,MAClC,OAAO,CAAC,MAAM,EAAE,YAAY,EAAE,SAAS,GAAG,CAAC,CAC3C,IAAI,CAAC,MAAM,EAAE,MAAM,GAAG,EAAE,SAAS,IAAI,OAAO,CAAC,CAC7C,IAAI,CAAC,MAAM,EAAE,MAAM,SAAS,SAAS,GAAG,EAAE,OAAO,CAAC,CAClD,IAAI,CAAC,OAAQ,EAAE,WAAW,IAAI,GAAG,SAAS,GAAG,GAAG,GAAG,EAAG,CACtD,OAAO,CAAC,OAAO,MAAM,EAAE,IAAI,IAAI,EAAE;EACnC,MAAMC,kBAA+B,IAAI,IAAI;AAC7C,kBAAgB,IAAI,EAAE;EAEtB,MAAM,mBAAmB,MAAM,KAAK,gBAAgB,CAClD,KAAK,CAAC,GAAG,MAAM,IAAI,EAAE,CACrB,KAAK,CAAC,GAAG,GAAG,MAAM,EAAE,IAAI,KAAK,IAAI,EAAE;AACrC,SAAO,oBAAoB,SAAS,MAAM,iBAAiB,IACvD,EAAE,SAAS,GAAG,UAAU,iBAAiB,GAAG,EAAE,EAAE,IAAI,KACpD,EAAE,SAAS,GAAG,gBAAgB,KAAK,EAAE,IAAI;CAC7C;AACD;AAEM,SAAS,gBAAgBC,MAAuB;CACtD,MAAM,WAAW,KAAK,SAAS,KAAK;CAIpC,MAAM,MAAM,SAAS,MAAM,YAAY,GAAG,WAAW,KAAK,QAAQ,SAAS;AAE3E,QAAO,sBAAsB,SAAS,IAAI,aAAa,CAAC,MAAM,EAAE,CAAC;AACjE;AAOM,eAAe,WAAWC,UAAoC;AACpE,QAAO,SACL,KAAK,SAAS,CACd,KAAK,CAAC,UAAU,MAAM,QAAQ,CAAC,CAC/B,MAAM,MAAM,MAAM;AACpB;AAEM,SAAS,eAAeC,WAA+B;AAC7D,KAAI;AACH,SAAO,IAAI,IAAI;CACf,SAAQ,GAAG;AACX,SAAO;CACP;AACD;AAkBM,SAAS,aAAaC,GAAWH,MAAcI,aAA0B,MAAc;CAC7F,MAAM,MAAM,WAAW,QAAQ,EAAE;AACjC,QAAO,WAAW,KAAK,KAAK,KAAK;AACjC"}