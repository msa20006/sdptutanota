{"version":3,"file":"dist-DcZ1Y4qd.js","names":["t","sjcl","sjcl","sjcl","sjcl","x25519","sha512","mask","t","KeyLength","logRounds","bCrypt","t","generateKeyFromPassphrase","t","KeyPairType","sjcl","sjcl","sjcl"],"sources":["../../packages/tutanota-crypto/dist/internal/sjcl.js","../../packages/tutanota-crypto/dist/random/Randomizer.js","../../packages/tutanota-crypto/dist/hashes/Sha256.js","../../packages/tutanota-crypto/dist/misc/Utils.js","../../packages/tutanota-crypto/dist/hashes/Sha512.js","../../packages/tutanota-crypto/dist/encryption/Aes.js","../../packages/tutanota-crypto/dist/internal/noble-curves-1.3.0.js","../../packages/tutanota-crypto/dist/encryption/Ecc.js","../../packages/tutanota-crypto/dist/internal/bCrypt.js","../../packages/tutanota-crypto/dist/misc/Constants.js","../../packages/tutanota-crypto/dist/hashes/Bcrypt.js","../../packages/tutanota-crypto/dist/encryption/Liboqs/Kyber.js","../../packages/tutanota-crypto/dist/encryption/Liboqs/KyberKeyPair.js","../../packages/tutanota-crypto/dist/hashes/Argon2id/Argon2id.js","../../packages/tutanota-crypto/dist/random/SecureRandom.js","../../packages/tutanota-crypto/dist/internal/crypto-jsbn-2012-08-09_1.js","../../packages/tutanota-crypto/dist/encryption/AsymmetricKeyPair.js","../../packages/tutanota-crypto/dist/encryption/Rsa.js","../../packages/tutanota-crypto/dist/encryption/KeyEncryption.js","../../packages/tutanota-crypto/dist/encryption/PQKeyPairs.js","../../packages/tutanota-crypto/dist/hashes/Sha1.js","../../packages/tutanota-crypto/dist/misc/TotpVerifier.js","../../packages/tutanota-crypto/dist/hashes/MurmurHash.js","../../packages/tutanota-crypto/dist/hashes/HKDF.js"],"sourcesContent":["/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n// FORKED from SJCL 1.0.7\n// CHANGED (tutao.arm)\n// - added option to not use padding in encrypt/decrypt in cbc mode\n// CHANGED (tutao.ivk)\n// - added byteOffset and byteLength to codec.arrayBuffer.toBits\n// Configured with: ./configure --with-codecArrayBuffer --with-cbc --with-sha1 --with-sha512 --with-codecBytes --without-ccm --without-ocb2 --without-pbkdf2 --without-convenience --compress=none\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n/*global document, window, escape, unescape, module, require, Uint32Array */\n/**\n * The Stanford Javascript Crypto Library, top-level namespace.\n * @namespace\n * @type any\n */\nvar sjcl = {\n    /**\n     * Symmetric ciphers.\n     * @namespace\n     */\n    cipher: {},\n    /**\n     * Hash functions.  Right now only SHA256 is implemented.\n     * @namespace\n     */\n    hash: {},\n    /**\n     * Key exchange functions.  Right now only SRP is implemented.\n     * @namespace\n     */\n    keyexchange: {},\n    /**\n     * Cipher modes of operation.\n     * @namespace\n     */\n    mode: {},\n    /**\n     * Miscellaneous.  HMAC and PBKDF2.\n     * @namespace\n     */\n    misc: {},\n    /**\n     * Bit array encoders and decoders.\n     * @namespace\n     *\n     * @description\n     * The members of this namespace are functions which translate between\n     * SJCL's bitArrays and other objects (usually strings).  Because it\n     * isn't always clear which direction is encoding and which is decoding,\n     * the method names are \"fromBits\" and \"toBits\".\n     */\n    codec: {},\n    /**\n     * Exceptions.\n     * @namespace\n     */\n    exception: {\n        /**\n         * Ciphertext is corrupt.\n         * @constructor\n         */\n        corrupt: function (message) {\n            this.toString = function () {\n                return \"CORRUPT: \" + this.message;\n            };\n            this.message = message;\n        },\n        /**\n         * Invalid parameter.\n         * @constructor\n         */\n        invalid: function (message) {\n            this.toString = function () {\n                return \"INVALID: \" + this.message;\n            };\n            this.message = message;\n        },\n        /**\n         * Bug or missing feature in SJCL.\n         * @constructor\n         */\n        bug: function (message) {\n            this.toString = function () {\n                return \"BUG: \" + this.message;\n            };\n            this.message = message;\n        },\n        /**\n         * Something isn't ready.\n         * @constructor\n         */\n        notReady: function (message) {\n            this.toString = function () {\n                return \"NOT READY: \" + this.message;\n            };\n            this.message = message;\n        },\n    },\n};\n/** @fileOverview Low-level AES implementation.\n *\n * This file contains a low-level implementation of AES, optimized for\n * size and for efficiency on several browsers.  It is based on\n * OpenSSL's aes_core.c, a public-domain implementation by Vincent\n * Rijmen, Antoon Bosselaers and Paulo Barreto.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n/**\n * Schedule out an AES key for both encryption and decryption.  This\n * is a low-level class.  Use a cipher mode to do bulk encryption.\n *\n * @constructor\n * @param {Array} key The key as an array of 4, 6 or 8 words.\n */\nsjcl.cipher.aes = function (key) {\n    if (!this._tables[0][0][0]) {\n        this._precompute();\n    }\n    var i, j, tmp, encKey, decKey, sbox = this._tables[0][4], decTable = this._tables[1], keyLen = key.length, rcon = 1;\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n        throw new sjcl.exception.invalid(\"invalid aes key size\");\n    }\n    this._key = [(encKey = key.slice(0)), (decKey = [])];\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n        tmp = encKey[i - 1];\n        // apply sbox\n        if (i % keyLen === 0 || (keyLen === 8 && i % keyLen === 4)) {\n            tmp = (sbox[tmp >>> 24] << 24) ^ (sbox[(tmp >> 16) & 255] << 16) ^ (sbox[(tmp >> 8) & 255] << 8) ^ sbox[tmp & 255];\n            // shift rows and add rcon\n            if (i % keyLen === 0) {\n                tmp = (tmp << 8) ^ (tmp >>> 24) ^ (rcon << 24);\n                rcon = (rcon << 1) ^ ((rcon >> 7) * 283);\n            }\n        }\n        encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n    // schedule decryption keys\n    for (j = 0; i; j++, i--) {\n        tmp = encKey[j & 3 ? i : i - 4];\n        if (i <= 4 || j < 4) {\n            decKey[j] = tmp;\n        }\n        else {\n            decKey[j] =\n                decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[(tmp >> 16) & 255]] ^ decTable[2][sbox[(tmp >> 8) & 255]] ^ decTable[3][sbox[tmp & 255]];\n        }\n    }\n};\nsjcl.cipher.aes.prototype = {\n    // public\n    /* Something like this might appear here eventually\n     name: \"AES\",\n     blockSize: 4,\n     keySizes: [4,6,8],\n     */\n    /**\n     * Encrypt an array of 4 big-endian words.\n     * @param {Array} data The plaintext.\n     * @return {Array} The ciphertext.\n     */\n    encrypt: function (data) {\n        return this._crypt(data, 0);\n    },\n    /**\n     * Decrypt an array of 4 big-endian words.\n     * @param {Array} data The ciphertext.\n     * @return {Array} The plaintext.\n     */\n    decrypt: function (data) {\n        return this._crypt(data, 1);\n    },\n    /**\n     * The expanded S-box and inverse S-box tables.  These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns.  The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    _tables: [\n        [[], [], [], [], []],\n        [[], [], [], [], []],\n    ],\n    /**\n     * Expand the S-box tables.\n     *\n     * @private\n     */\n    _precompute: function () {\n        var encTable = this._tables[0], decTable = this._tables[1], sbox = encTable[4], sboxInv = decTable[4], i, x, xInv, d = [], th = [], x2, x4, x8, s, tEnc, tDec;\n        // Compute double and third tables\n        for (i = 0; i < 256; i++) {\n            th[(d[i] = (i << 1) ^ ((i >> 7) * 283)) ^ i] = i;\n        }\n        for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n            // Compute sbox\n            s = xInv ^ (xInv << 1) ^ (xInv << 2) ^ (xInv << 3) ^ (xInv << 4);\n            s = (s >> 8) ^ (s & 255) ^ 99;\n            sbox[x] = s;\n            sboxInv[s] = x;\n            // Compute MixColumns\n            x8 = d[(x4 = d[(x2 = d[x])])];\n            tDec = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n            tEnc = (d[s] * 0x101) ^ (s * 0x1010100);\n            for (i = 0; i < 4; i++) {\n                encTable[i][x] = tEnc = (tEnc << 24) ^ (tEnc >>> 8);\n                decTable[i][s] = tDec = (tDec << 24) ^ (tDec >>> 8);\n            }\n        }\n        // Compactify.  Considerable speedup on Firefox.\n        for (i = 0; i < 5; i++) {\n            encTable[i] = encTable[i].slice(0);\n            decTable[i] = decTable[i].slice(0);\n        }\n    },\n    /**\n     * Encryption and decryption core.\n     * @param {Array} input Four words to be encrypted or decrypted.\n     * @param dir The direction, 0 for encrypt and 1 for decrypt.\n     * @return {Array} The four encrypted or decrypted words.\n     * @private\n     */\n    _crypt: function (input, dir) {\n        if (input.length !== 4) {\n            throw new sjcl.exception.invalid(\"invalid aes block size\");\n        }\n        var key = this._key[dir], \n        // state variables a,b,c,d are loaded with pre-whitened data\n        a = input[0] ^ key[0], b = input[dir ? 3 : 1] ^ key[1], c = input[2] ^ key[2], d = input[dir ? 1 : 3] ^ key[3], a2, b2, c2, nInnerRounds = key.length / 4 - 2, i, kIndex = 4, out = [0, 0, 0, 0], table = this._tables[dir], \n        // load up the tables\n        t0 = table[0], t1 = table[1], t2 = table[2], t3 = table[3], sbox = table[4];\n        // Inner rounds.  Cribbed from OpenSSL.\n        for (i = 0; i < nInnerRounds; i++) {\n            a2 = t0[a >>> 24] ^ t1[(b >> 16) & 255] ^ t2[(c >> 8) & 255] ^ t3[d & 255] ^ key[kIndex];\n            b2 = t0[b >>> 24] ^ t1[(c >> 16) & 255] ^ t2[(d >> 8) & 255] ^ t3[a & 255] ^ key[kIndex + 1];\n            c2 = t0[c >>> 24] ^ t1[(d >> 16) & 255] ^ t2[(a >> 8) & 255] ^ t3[b & 255] ^ key[kIndex + 2];\n            d = t0[d >>> 24] ^ t1[(a >> 16) & 255] ^ t2[(b >> 8) & 255] ^ t3[c & 255] ^ key[kIndex + 3];\n            kIndex += 4;\n            a = a2;\n            b = b2;\n            c = c2;\n        }\n        // Last round.\n        for (i = 0; i < 4; i++) {\n            out[dir ? 3 & -i : i] = (sbox[a >>> 24] << 24) ^ (sbox[(b >> 16) & 255] << 16) ^ (sbox[(c >> 8) & 255] << 8) ^ sbox[d & 255] ^ key[kIndex++];\n            a2 = a;\n            a = b;\n            b = c;\n            c = d;\n            d = a2;\n        }\n        return out;\n    },\n};\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nsjcl.bitArray = {\n    /**\n     * Array slices in units of bits.\n     * @param {bitArray} a The array to slice.\n     * @param {Number} bstart The offset to the start of the slice, in bits.\n     * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n     * slice until the end of the array.\n     * @return {bitArray} The requested slice.\n     */\n    bitSlice: function (a, bstart, bend) {\n        a = sjcl.bitArray._shiftRight(a.slice(bstart / 32), 32 - (bstart & 31)).slice(1);\n        return bend === undefined ? a : sjcl.bitArray.clamp(a, bend - bstart);\n    },\n    /**\n     * Extract a number packed into a bit array.\n     * @param {bitArray} a The array to slice.\n     * @param {Number} bstart The offset to the start of the slice, in bits.\n     * @param {Number} blength The length of the number to extract.\n     * @return {Number} The requested slice.\n     */\n    extract: function (a, bstart, blength) {\n        // TODO: this Math.floor is not necessary at all, but for some reason\n        //   seems to suppress a bug in the Chromium JIT.\n        var x, sh = Math.floor((-bstart - blength) & 31);\n        if (((bstart + blength - 1) ^ bstart) & -32) {\n            // it crosses a boundary\n            x = (a[(bstart / 32) | 0] << (32 - sh)) ^ (a[(bstart / 32 + 1) | 0] >>> sh);\n        }\n        else {\n            // within a single word\n            x = a[(bstart / 32) | 0] >>> sh;\n        }\n        return x & ((1 << blength) - 1);\n    },\n    /**\n     * Concatenate two bit arrays.\n     * @param {bitArray} a1 The first array.\n     * @param {bitArray} a2 The second array.\n     * @return {bitArray} The concatenation of a1 and a2.\n     */\n    concat: function (a1, a2) {\n        if (a1.length === 0 || a2.length === 0) {\n            return a1.concat(a2);\n        }\n        var last = a1[a1.length - 1], shift = sjcl.bitArray.getPartial(last);\n        if (shift === 32) {\n            return a1.concat(a2);\n        }\n        else {\n            return sjcl.bitArray._shiftRight(a2, shift, last | 0, a1.slice(0, a1.length - 1));\n        }\n    },\n    /**\n     * Find the length of an array of bits.\n     * @param {bitArray} a The array.\n     * @return {Number} The length of a, in bits.\n     */\n    bitLength: function (a) {\n        var l = a.length, x;\n        if (l === 0) {\n            return 0;\n        }\n        x = a[l - 1];\n        return (l - 1) * 32 + sjcl.bitArray.getPartial(x);\n    },\n    /**\n     * Truncate an array.\n     * @param {bitArray} a The array.\n     * @param {Number} len The length to truncate to, in bits.\n     * @return {bitArray} A new array, truncated to len bits.\n     */\n    clamp: function (a, len) {\n        if (a.length * 32 < len) {\n            return a;\n        }\n        a = a.slice(0, Math.ceil(len / 32));\n        var l = a.length;\n        len = len & 31;\n        if (l > 0 && len) {\n            a[l - 1] = sjcl.bitArray.partial(len, a[l - 1] & (0x80000000 >> (len - 1)), 1);\n        }\n        return a;\n    },\n    /**\n     * Make a partial word for a bit array.\n     * @param {Number} len The number of bits in the word.\n     * @param {Number} x The bits.\n     * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n     * @return {Number} The partial word.\n     */\n    partial: function (len, x, _end) {\n        if (len === 32) {\n            return x;\n        }\n        return (_end ? x | 0 : x << (32 - len)) + len * 0x10000000000;\n    },\n    /**\n     * Get the number of bits used by a partial word.\n     * @param {Number} x The partial word.\n     * @return {Number} The number of bits used by the partial word.\n     */\n    getPartial: function (x) {\n        return Math.round(x / 0x10000000000) || 32;\n    },\n    /**\n     * Compare two arrays for equality in a predictable amount of time.\n     * @param {bitArray} a The first array.\n     * @param {bitArray} b The second array.\n     * @return {boolean} true if a == b; false otherwise.\n     */\n    equal: function (a, b) {\n        if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n            return false;\n        }\n        var x = 0, i;\n        for (i = 0; i < a.length; i++) {\n            x |= a[i] ^ b[i];\n        }\n        return x === 0;\n    },\n    /** Shift an array right.\n     * @param {bitArray} a The array to shift.\n     * @param {Number} shift The number of bits to shift.\n     * @param {Number} [carry=0] A byte to carry in\n     * @param {bitArray} [out=[]] An array to prepend to the output.\n     * @private\n     */\n    _shiftRight: function (a, shift, carry, out) {\n        var i, last2 = 0, shift2;\n        if (out === undefined) {\n            out = [];\n        }\n        for (; shift >= 32; shift -= 32) {\n            out.push(carry);\n            carry = 0;\n        }\n        if (shift === 0) {\n            return out.concat(a);\n        }\n        for (i = 0; i < a.length; i++) {\n            out.push(carry | (a[i] >>> shift));\n            carry = a[i] << (32 - shift);\n        }\n        last2 = a.length ? a[a.length - 1] : 0;\n        shift2 = sjcl.bitArray.getPartial(last2);\n        out.push(sjcl.bitArray.partial((shift + shift2) & 31, shift + shift2 > 32 ? carry : out.pop(), 1));\n        return out;\n    },\n    /** xor a block of 4 words together.\n     * @private\n     */\n    _xor4: function (x, y) {\n        return [x[0] ^ y[0], x[1] ^ y[1], x[2] ^ y[2], x[3] ^ y[3]];\n    },\n    /** byteswap a word array inplace.\n     * (does not handle partial words)\n     * @param {sjcl.bitArray} a word array\n     * @return {sjcl.bitArray} byteswapped array\n     */\n    byteswapM: function (a) {\n        var i, v, m = 0xff00;\n        for (i = 0; i < a.length; ++i) {\n            v = a[i];\n            a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);\n        }\n        return a;\n    },\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n/**\n * UTF-8 strings\n * @namespace\n */\nsjcl.codec.utf8String = {\n    /** Convert from a bitArray to a UTF-8 string. */\n    fromBits: function (arr) {\n        var out = \"\", bl = sjcl.bitArray.bitLength(arr), i, tmp;\n        for (i = 0; i < bl / 8; i++) {\n            if ((i & 3) === 0) {\n                tmp = arr[i / 4];\n            }\n            out += String.fromCharCode(((tmp >>> 8) >>> 8) >>> 8);\n            tmp <<= 8;\n        }\n        return decodeURIComponent(escape(out));\n    },\n    /** Convert from a UTF-8 string to a bitArray. */\n    toBits: function (str) {\n        str = unescape(encodeURIComponent(str));\n        var out = [], i, tmp = 0;\n        for (i = 0; i < str.length; i++) {\n            tmp = (tmp << 8) | str.charCodeAt(i);\n            if ((i & 3) === 3) {\n                out.push(tmp);\n                tmp = 0;\n            }\n        }\n        if (i & 3) {\n            out.push(sjcl.bitArray.partial(8 * (i & 3), tmp));\n        }\n        return out;\n    },\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n/** @fileOverview Bit array codec implementations.\n *\n * @author Nils Kenneweg\n */\n/**\n * Base32 encoding/decoding\n * @namespace\n */\nsjcl.codec.base32 = {\n    /** The base32 alphabet.\n     * @private\n     */\n    _chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    _hexChars: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    /* bits in an array */\n    BITS: 32,\n    /* base to encode at (2^x) */\n    BASE: 5,\n    /* bits - base */\n    REMAINING: 27,\n    /** Convert from a bitArray to a base32 string. */\n    fromBits: function (arr, _noEquals, _hex) {\n        var BITS = sjcl.codec.base32.BITS, BASE = sjcl.codec.base32.BASE, REMAINING = sjcl.codec.base32.REMAINING;\n        var out = \"\", i, bits = 0, c = sjcl.codec.base32._chars, ta = 0, bl = sjcl.bitArray.bitLength(arr);\n        if (_hex) {\n            c = sjcl.codec.base32._hexChars;\n        }\n        for (i = 0; out.length * BASE < bl;) {\n            out += c.charAt((ta ^ (arr[i] >>> bits)) >>> REMAINING);\n            if (bits < BASE) {\n                ta = arr[i] << (BASE - bits);\n                bits += REMAINING;\n                i++;\n            }\n            else {\n                ta <<= BASE;\n                bits -= BASE;\n            }\n        }\n        while (out.length & 7 && !_noEquals) {\n            out += \"=\";\n        }\n        return out;\n    },\n    /** Convert from a base32 string to a bitArray */\n    toBits: function (str, _hex) {\n        str = str.replace(/\\s|=/g, \"\").toUpperCase();\n        var BITS = sjcl.codec.base32.BITS, BASE = sjcl.codec.base32.BASE, REMAINING = sjcl.codec.base32.REMAINING;\n        var out = [], i, bits = 0, c = sjcl.codec.base32._chars, ta = 0, x, format = \"base32\";\n        if (_hex) {\n            c = sjcl.codec.base32._hexChars;\n            format = \"base32hex\";\n        }\n        for (i = 0; i < str.length; i++) {\n            x = c.indexOf(str.charAt(i));\n            if (x < 0) {\n                // Invalid character, try hex format\n                if (!_hex) {\n                    try {\n                        return sjcl.codec.base32hex.toBits(str);\n                    }\n                    catch (e) { }\n                }\n                throw new sjcl.exception.invalid(\"this isn't \" + format + \"!\");\n            }\n            if (bits > REMAINING) {\n                bits -= REMAINING;\n                out.push(ta ^ (x >>> bits));\n                ta = x << (BITS - bits);\n            }\n            else {\n                bits += BASE;\n                ta ^= x << (BITS - bits);\n            }\n        }\n        if (bits & 56) {\n            out.push(sjcl.bitArray.partial(bits & 56, ta, 1));\n        }\n        return out;\n    },\n};\nsjcl.codec.base32hex = {\n    fromBits: function (arr, _noEquals) {\n        return sjcl.codec.base32.fromBits(arr, _noEquals, 1);\n    },\n    toBits: function (str) {\n        return sjcl.codec.base32.toBits(str, 1);\n    },\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n/**\n * Base64 encoding/decoding\n * @namespace\n */\nsjcl.codec.base64 = {\n    /** The base64 alphabet.\n     * @private\n     */\n    _chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    /** Convert from a bitArray to a base64 string. */\n    fromBits: function (arr, _noEquals, _url) {\n        var out = \"\", i, bits = 0, c = sjcl.codec.base64._chars, ta = 0, bl = sjcl.bitArray.bitLength(arr);\n        if (_url) {\n            c = c.substring(0, 62) + \"-_\";\n        }\n        for (i = 0; out.length * 6 < bl;) {\n            out += c.charAt((ta ^ (arr[i] >>> bits)) >>> 26);\n            if (bits < 6) {\n                ta = arr[i] << (6 - bits);\n                bits += 26;\n                i++;\n            }\n            else {\n                ta <<= 6;\n                bits -= 6;\n            }\n        }\n        while (out.length & 3 && !_noEquals) {\n            out += \"=\";\n        }\n        return out;\n    },\n    /** Convert from a base64 string to a bitArray */\n    toBits: function (str, _url) {\n        str = str.replace(/\\s|=/g, \"\");\n        var out = [], i, bits = 0, c = sjcl.codec.base64._chars, ta = 0, x;\n        if (_url) {\n            c = c.substring(0, 62) + \"-_\";\n        }\n        for (i = 0; i < str.length; i++) {\n            x = c.indexOf(str.charAt(i));\n            if (x < 0) {\n                throw new sjcl.exception.invalid(\"this isn't base64!\");\n            }\n            if (bits > 26) {\n                bits -= 26;\n                out.push(ta ^ (x >>> bits));\n                ta = x << (32 - bits);\n            }\n            else {\n                bits += 6;\n                ta ^= x << (32 - bits);\n            }\n        }\n        if (bits & 56) {\n            out.push(sjcl.bitArray.partial(bits & 56, ta, 1));\n        }\n        return out;\n    },\n};\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n */\nsjcl.hash.sha256 = function (hash) {\n    if (!this._key[0]) {\n        this._precompute();\n    }\n    if (hash) {\n        this._h = hash._h.slice(0);\n        this._buffer = hash._buffer.slice(0);\n        this._length = hash._length;\n    }\n    else {\n        this.reset();\n    }\n};\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n    return new sjcl.hash.sha256().update(data).finalize();\n};\nsjcl.hash.sha256.prototype = {\n    /**\n     * The hash's block size, in bits.\n     * @constant\n     */\n    blockSize: 512,\n    /**\n     * Reset the hash state.\n     * @return this\n     */\n    reset: function () {\n        this._h = this._init.slice(0);\n        this._buffer = [];\n        this._length = 0;\n        return this;\n    },\n    /**\n     * Input several words to the hash.\n     * @param {bitArray|String} data the data to hash.\n     * @return this\n     */\n    update: function (data) {\n        if (typeof data === \"string\") {\n            data = sjcl.codec.utf8String.toBits(data);\n        }\n        var i, b = (this._buffer = sjcl.bitArray.concat(this._buffer, data)), ol = this._length, nl = (this._length = ol + sjcl.bitArray.bitLength(data));\n        if (nl > 9007199254740991) {\n            throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n        }\n        if (typeof Uint32Array !== \"undefined\") {\n            var c = new Uint32Array(b);\n            var j = 0;\n            for (i = 512 + ol - ((512 + ol) & 511); i <= nl; i += 512) {\n                this._block(c.subarray(16 * j, 16 * (j + 1)));\n                j += 1;\n            }\n            b.splice(0, 16 * j);\n        }\n        else {\n            for (i = 512 + ol - ((512 + ol) & 511); i <= nl; i += 512) {\n                this._block(b.splice(0, 16));\n            }\n        }\n        return this;\n    },\n    /**\n     * Complete hashing and output the hash value.\n     * @return {bitArray} The hash value, an array of 8 big-endian words.\n     */\n    finalize: function () {\n        var i, b = this._buffer, h = this._h;\n        // Round out and push the buffer\n        b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1, 1)]);\n        // Round out the buffer to a multiple of 16 words, less the 2 length words.\n        for (i = b.length + 2; i & 15; i++) {\n            b.push(0);\n        }\n        // append the length\n        b.push(Math.floor(this._length / 0x100000000));\n        b.push(this._length | 0);\n        while (b.length) {\n            this._block(b.splice(0, 16));\n        }\n        this.reset();\n        return h;\n    },\n    /**\n     * The SHA-256 initialization vector, to be precomputed.\n     * @private\n     */\n    _init: [],\n    /*\n     _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n     */\n    /**\n     * The SHA-256 hash key, to be precomputed.\n     * @private\n     */\n    _key: [],\n    /*\n     _key:\n     [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n     */\n    /**\n     * Function to precompute _init and _key.\n     * @private\n     */\n    _precompute: function () {\n        var i = 0, prime = 2, factor, isPrime;\n        function frac(x) {\n            return ((x - Math.floor(x)) * 0x100000000) | 0;\n        }\n        for (; i < 64; prime++) {\n            isPrime = true;\n            for (factor = 2; factor * factor <= prime; factor++) {\n                if (prime % factor === 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                if (i < 8) {\n                    this._init[i] = frac(Math.pow(prime, 1 / 2));\n                }\n                this._key[i] = frac(Math.pow(prime, 1 / 3));\n                i++;\n            }\n        }\n    },\n    /**\n     * Perform one cycle of SHA-256.\n     * @param {Uint32Array|bitArray} w one block of words.\n     * @private\n     */\n    _block: function (w) {\n        var i, tmp, a, b, h = this._h, k = this._key, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n        /* Rationale for placement of |0 :\n         * If a value can overflow is original 32 bits by a factor of more than a few\n         * million (2^23 ish), there is a possibility that it might overflow the\n         * 53-bit mantissa and lose precision.\n         *\n         * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n         * propagates around the loop, and on the hash state h[].  I don't believe\n         * that the clamps on h4 and on h0 are strictly necessary, but it's close\n         * (for h4 anyway), and better safe than sorry.\n         *\n         * The clamps on h[] are necessary for the output to be correct even in the\n         * common case and for short inputs.\n         */\n        for (i = 0; i < 64; i++) {\n            // load up the input word for this round\n            if (i < 16) {\n                tmp = w[i];\n            }\n            else {\n                a = w[(i + 1) & 15];\n                b = w[(i + 14) & 15];\n                tmp = w[i & 15] =\n                    (((a >>> 7) ^ (a >>> 18) ^ (a >>> 3) ^ (a << 25) ^ (a << 14)) +\n                        ((b >>> 17) ^ (b >>> 19) ^ (b >>> 10) ^ (b << 15) ^ (b << 13)) +\n                        w[i & 15] +\n                        w[(i + 9) & 15]) |\n                        0;\n            }\n            tmp = tmp + h7 + ((h4 >>> 6) ^ (h4 >>> 11) ^ (h4 >>> 25) ^ (h4 << 26) ^ (h4 << 21) ^ (h4 << 7)) + (h6 ^ (h4 & (h5 ^ h6))) + k[i]; // | 0;\n            // shift register\n            h7 = h6;\n            h6 = h5;\n            h5 = h4;\n            h4 = (h3 + tmp) | 0;\n            h3 = h2;\n            h2 = h1;\n            h1 = h0;\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + ((h1 >>> 2) ^ (h1 >>> 13) ^ (h1 >>> 22) ^ (h1 << 30) ^ (h1 << 19) ^ (h1 << 10))) | 0;\n        }\n        h[0] = (h[0] + h0) | 0;\n        h[1] = (h[1] + h1) | 0;\n        h[2] = (h[2] + h2) | 0;\n        h[3] = (h[3] + h3) | 0;\n        h[4] = (h[4] + h4) | 0;\n        h[5] = (h[5] + h5) | 0;\n        h[6] = (h[6] + h6) | 0;\n        h[7] = (h[7] + h7) | 0;\n    },\n};\n/** @fileOverview Javascript SHA-512 implementation.\n *\n * This implementation was written for CryptoJS by Jeff Mott and adapted for\n * SJCL by Stefan Thomas.\n *\n * CryptoJS (c) 2009–2012 by Jeff Mott. All rights reserved.\n * Released with New BSD License\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n * @author Jeff Mott\n * @author Stefan Thomas\n */\n/**\n * Context for a SHA-512 operation in progress.\n * @constructor\n */\nsjcl.hash.sha512 = function (hash) {\n    if (!this._key[0]) {\n        this._precompute();\n    }\n    if (hash) {\n        this._h = hash._h.slice(0);\n        this._buffer = hash._buffer.slice(0);\n        this._length = hash._length;\n    }\n    else {\n        this.reset();\n    }\n};\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha512.hash = function (data) {\n    return new sjcl.hash.sha512().update(data).finalize();\n};\nsjcl.hash.sha512.prototype = {\n    /**\n     * The hash's block size, in bits.\n     * @constant\n     */\n    blockSize: 1024,\n    /**\n     * Reset the hash state.\n     * @return this\n     */\n    reset: function () {\n        this._h = this._init.slice(0);\n        this._buffer = [];\n        this._length = 0;\n        return this;\n    },\n    /**\n     * Input several words to the hash.\n     * @param {bitArray|String} data the data to hash.\n     * @return this\n     */\n    update: function (data) {\n        if (typeof data === \"string\") {\n            data = sjcl.codec.utf8String.toBits(data);\n        }\n        var i, b = (this._buffer = sjcl.bitArray.concat(this._buffer, data)), ol = this._length, nl = (this._length = ol + sjcl.bitArray.bitLength(data));\n        if (nl > 9007199254740991) {\n            throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n        }\n        if (typeof Uint32Array !== \"undefined\") {\n            var c = new Uint32Array(b);\n            var j = 0;\n            for (i = 1024 + ol - ((1024 + ol) & 1023); i <= nl; i += 1024) {\n                this._block(c.subarray(32 * j, 32 * (j + 1)));\n                j += 1;\n            }\n            b.splice(0, 32 * j);\n        }\n        else {\n            for (i = 1024 + ol - ((1024 + ol) & 1023); i <= nl; i += 1024) {\n                this._block(b.splice(0, 32));\n            }\n        }\n        return this;\n    },\n    /**\n     * Complete hashing and output the hash value.\n     * @return {bitArray} The hash value, an array of 16 big-endian words.\n     */\n    finalize: function () {\n        var i, b = this._buffer, h = this._h;\n        // Round out and push the buffer\n        b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1, 1)]);\n        // Round out the buffer to a multiple of 32 words, less the 4 length words.\n        for (i = b.length + 4; i & 31; i++) {\n            b.push(0);\n        }\n        // append the length\n        b.push(0);\n        b.push(0);\n        b.push(Math.floor(this._length / 0x100000000));\n        b.push(this._length | 0);\n        while (b.length) {\n            this._block(b.splice(0, 32));\n        }\n        this.reset();\n        return h;\n    },\n    /**\n     * The SHA-512 initialization vector, to be precomputed.\n     * @private\n     */\n    _init: [],\n    /**\n     * Least significant 24 bits of SHA512 initialization values.\n     *\n     * Javascript only has 53 bits of precision, so we compute the 40 most\n     * significant bits and add the remaining 24 bits as constants.\n     *\n     * @private\n     */\n    _initr: [0xbcc908, 0xcaa73b, 0x94f82b, 0x1d36f1, 0xe682d1, 0x3e6c1f, 0x41bd6b, 0x7e2179],\n    /*\n  _init:\n  [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n   0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179],\n  */\n    /**\n     * The SHA-512 hash key, to be precomputed.\n     * @private\n     */\n    _key: [],\n    /**\n     * Least significant 24 bits of SHA512 key values.\n     * @private\n     */\n    _keyr: [\n        0x28ae22, 0xef65cd, 0x4d3b2f, 0x89dbbc, 0x48b538, 0x05d019, 0x194f9b, 0x6d8118, 0x030242, 0x706fbe, 0xe4b28c, 0xffb4e2, 0x7b896f, 0x1696b1, 0xc71235,\n        0x692694, 0xf14ad2, 0x4f25e3, 0x8cd5b5, 0xac9c65, 0x2b0275, 0xa6e483, 0x41fbd4, 0x1153b5, 0x66dfab, 0xb43210, 0xfb213f, 0xef0ee4, 0xa88fc2, 0x0aa725,\n        0x03826f, 0x0e6e70, 0xd22ffc, 0x26c926, 0xc42aed, 0x95b3df, 0xaf63de, 0x77b2a8, 0xedaee6, 0x82353b, 0xf10364, 0x423001, 0xf89791, 0x54be30, 0xef5218,\n        0x65a910, 0x71202a, 0xbbd1b8, 0xd2d0c8, 0x41ab53, 0x8eeb99, 0x9b48a8, 0xc95a63, 0x418acb, 0x63e373, 0xb2b8a3, 0xefb2fc, 0x172f60, 0xf0ab72, 0x6439ec,\n        0x631e28, 0x82bde9, 0xc67915, 0x72532b, 0x26619c, 0xc0c207, 0xe0eb1e, 0x6ed178, 0x176fba, 0xc898a6, 0xf90dae, 0x1c471b, 0x047d84, 0xc72493, 0xc9bebc,\n        0x100d4c, 0x3e42b6, 0x657e2a, 0xd6faec, 0x475817,\n    ],\n    /*\n  _key:\n  [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n   0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n   0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n   0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n   0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n   0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n   0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n   0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n   0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n   0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n   0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n   0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n   0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n   0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n   0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n   0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n   0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n   0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n   0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n   0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817],\n  */\n    /**\n     * Function to precompute _init and _key.\n     * @private\n     */\n    _precompute: function () {\n        // XXX: This code is for precomputing the SHA256 constants, change for\n        //      SHA512 and re-enable.\n        var i = 0, prime = 2, factor, isPrime;\n        function frac(x) {\n            return ((x - Math.floor(x)) * 0x100000000) | 0;\n        }\n        function frac2(x) {\n            return ((x - Math.floor(x)) * 0x10000000000) & 0xff;\n        }\n        for (; i < 80; prime++) {\n            isPrime = true;\n            for (factor = 2; factor * factor <= prime; factor++) {\n                if (prime % factor === 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                if (i < 8) {\n                    this._init[i * 2] = frac(Math.pow(prime, 1 / 2));\n                    this._init[i * 2 + 1] = (frac2(Math.pow(prime, 1 / 2)) << 24) | this._initr[i];\n                }\n                this._key[i * 2] = frac(Math.pow(prime, 1 / 3));\n                this._key[i * 2 + 1] = (frac2(Math.pow(prime, 1 / 3)) << 24) | this._keyr[i];\n                i++;\n            }\n        }\n    },\n    /**\n     * Perform one cycle of SHA-512.\n     * @param {Uint32Array|bitArray} words one block of words.\n     * @private\n     */\n    _block: function (words) {\n        var i, wrh, wrl, h = this._h, k = this._key, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\n        var w;\n        if (typeof Uint32Array !== \"undefined\") {\n            // When words is passed to _block, it has 32 elements. SHA512 _block\n            // function extends words with new elements (at the end there are 160 elements).\n            // The problem is that if we use Uint32Array instead of Array,\n            // the length of Uint32Array cannot be changed. Thus, we replace words with a\n            // normal Array here.\n            w = Array(160); // do not use Uint32Array here as the instantiation is slower\n            for (var j = 0; j < 32; j++) {\n                w[j] = words[j];\n            }\n        }\n        else {\n            w = words;\n        }\n        // Working variables\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\n        for (i = 0; i < 80; i++) {\n            // load up the input word for this round\n            if (i < 16) {\n                wrh = w[i * 2];\n                wrl = w[i * 2 + 1];\n            }\n            else {\n                // Gamma0\n                var gamma0xh = w[(i - 15) * 2];\n                var gamma0xl = w[(i - 15) * 2 + 1];\n                var gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^ ((gamma0xl << 24) | (gamma0xh >>> 8)) ^ (gamma0xh >>> 7);\n                var gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^ ((gamma0xh << 24) | (gamma0xl >>> 8)) ^ ((gamma0xh << 25) | (gamma0xl >>> 7));\n                // Gamma1\n                var gamma1xh = w[(i - 2) * 2];\n                var gamma1xl = w[(i - 2) * 2 + 1];\n                var gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n                var gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xh << 26) | (gamma1xl >>> 6));\n                // Shortcuts\n                var wr7h = w[(i - 7) * 2];\n                var wr7l = w[(i - 7) * 2 + 1];\n                var wr16h = w[(i - 16) * 2];\n                var wr16l = w[(i - 16) * 2 + 1];\n                // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\n                wrl = gamma0l + wr7l;\n                wrh = gamma0h + wr7h + (wrl >>> 0 < gamma0l >>> 0 ? 1 : 0);\n                wrl += gamma1l;\n                wrh += gamma1h + (wrl >>> 0 < gamma1l >>> 0 ? 1 : 0);\n                wrl += wr16l;\n                wrh += wr16h + (wrl >>> 0 < wr16l >>> 0 ? 1 : 0);\n            }\n            w[i * 2] = wrh |= 0;\n            w[i * 2 + 1] = wrl |= 0;\n            // Ch\n            var chh = (eh & fh) ^ (~eh & gh);\n            var chl = (el & fl) ^ (~el & gl);\n            // Maj\n            var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n            var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n            // Sigma0\n            var sigma0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n            var sigma0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n            // Sigma1\n            var sigma1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\n            var sigma1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\n            // K(round)\n            var krh = k[i * 2];\n            var krl = k[i * 2 + 1];\n            // t1 = h + sigma1 + ch + K(round) + W(round)\n            var t1l = hl + sigma1l;\n            var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);\n            t1l += chl;\n            t1h += chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);\n            t1l += krl;\n            t1h += krh + (t1l >>> 0 < krl >>> 0 ? 1 : 0);\n            t1l = (t1l + wrl) | 0; // FF32..FF34 perf issue https://bugzilla.mozilla.org/show_bug.cgi?id=1054972\n            t1h += wrh + (t1l >>> 0 < wrl >>> 0 ? 1 : 0);\n            // t2 = sigma0 + maj\n            var t2l = sigma0l + majl;\n            var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);\n            // Update working variables\n            hh = gh;\n            hl = gl;\n            gh = fh;\n            gl = fl;\n            fh = eh;\n            fl = el;\n            el = (dl + t1l) | 0;\n            eh = (dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0)) | 0;\n            dh = ch;\n            dl = cl;\n            ch = bh;\n            cl = bl;\n            bh = ah;\n            bl = al;\n            al = (t1l + t2l) | 0;\n            ah = (t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0)) | 0;\n        }\n        // Intermediate hash\n        h0l = h[1] = (h0l + al) | 0;\n        h[0] = (h0h + ah + (h0l >>> 0 < al >>> 0 ? 1 : 0)) | 0;\n        h1l = h[3] = (h1l + bl) | 0;\n        h[2] = (h1h + bh + (h1l >>> 0 < bl >>> 0 ? 1 : 0)) | 0;\n        h2l = h[5] = (h2l + cl) | 0;\n        h[4] = (h2h + ch + (h2l >>> 0 < cl >>> 0 ? 1 : 0)) | 0;\n        h3l = h[7] = (h3l + dl) | 0;\n        h[6] = (h3h + dh + (h3l >>> 0 < dl >>> 0 ? 1 : 0)) | 0;\n        h4l = h[9] = (h4l + el) | 0;\n        h[8] = (h4h + eh + (h4l >>> 0 < el >>> 0 ? 1 : 0)) | 0;\n        h5l = h[11] = (h5l + fl) | 0;\n        h[10] = (h5h + fh + (h5l >>> 0 < fl >>> 0 ? 1 : 0)) | 0;\n        h6l = h[13] = (h6l + gl) | 0;\n        h[12] = (h6h + gh + (h6l >>> 0 < gl >>> 0 ? 1 : 0)) | 0;\n        h7l = h[15] = (h7l + hl) | 0;\n        h[14] = (h7h + hh + (h7l >>> 0 < hl >>> 0 ? 1 : 0)) | 0;\n    },\n};\n/** @fileOverview Javascript SHA-1 implementation.\n *\n * Based on the implementation in RFC 3174, method 1, and on the SJCL\n * SHA-256 implementation.\n *\n * @author Quinn Slack\n */\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n */\nsjcl.hash.sha1 = function (hash) {\n    if (hash) {\n        this._h = hash._h.slice(0);\n        this._buffer = hash._buffer.slice(0);\n        this._length = hash._length;\n    }\n    else {\n        this.reset();\n    }\n};\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.sha1.hash = function (data) {\n    return new sjcl.hash.sha1().update(data).finalize();\n};\nsjcl.hash.sha1.prototype = {\n    /**\n     * The hash's block size, in bits.\n     * @constant\n     */\n    blockSize: 512,\n    /**\n     * Reset the hash state.\n     * @return this\n     */\n    reset: function () {\n        this._h = this._init.slice(0);\n        this._buffer = [];\n        this._length = 0;\n        return this;\n    },\n    /**\n     * Input several words to the hash.\n     * @param {bitArray|String} data the data to hash.\n     * @return this\n     */\n    update: function (data) {\n        if (typeof data === \"string\") {\n            data = sjcl.codec.utf8String.toBits(data);\n        }\n        var i, b = (this._buffer = sjcl.bitArray.concat(this._buffer, data)), ol = this._length, nl = (this._length = ol + sjcl.bitArray.bitLength(data));\n        if (nl > 9007199254740991) {\n            throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n        }\n        if (typeof Uint32Array !== \"undefined\") {\n            var c = new Uint32Array(b);\n            var j = 0;\n            for (i = this.blockSize + ol - ((this.blockSize + ol) & (this.blockSize - 1)); i <= nl; i += this.blockSize) {\n                this._block(c.subarray(16 * j, 16 * (j + 1)));\n                j += 1;\n            }\n            b.splice(0, 16 * j);\n        }\n        else {\n            for (i = this.blockSize + ol - ((this.blockSize + ol) & (this.blockSize - 1)); i <= nl; i += this.blockSize) {\n                this._block(b.splice(0, 16));\n            }\n        }\n        return this;\n    },\n    /**\n     * Complete hashing and output the hash value.\n     * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n     */\n    finalize: function () {\n        var i, b = this._buffer, h = this._h;\n        // Round out and push the buffer\n        b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1, 1)]);\n        // Round out the buffer to a multiple of 16 words, less the 2 length words.\n        for (i = b.length + 2; i & 15; i++) {\n            b.push(0);\n        }\n        // append the length\n        b.push(Math.floor(this._length / 0x100000000));\n        b.push(this._length | 0);\n        while (b.length) {\n            this._block(b.splice(0, 16));\n        }\n        this.reset();\n        return h;\n    },\n    /**\n     * The SHA-1 initialization vector.\n     * @private\n     */\n    _init: [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0],\n    /**\n     * The SHA-1 hash key.\n     * @private\n     */\n    _key: [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6],\n    /**\n     * The SHA-1 logical functions f(0), f(1), ..., f(79).\n     * @private\n     */\n    _f: function (t, b, c, d) {\n        if (t <= 19) {\n            return (b & c) | (~b & d);\n        }\n        else if (t <= 39) {\n            return b ^ c ^ d;\n        }\n        else if (t <= 59) {\n            return (b & c) | (b & d) | (c & d);\n        }\n        else if (t <= 79) {\n            return b ^ c ^ d;\n        }\n    },\n    /**\n     * Circular left-shift operator.\n     * @private\n     */\n    _S: function (n, x) {\n        return (x << n) | (x >>> (32 - n));\n    },\n    /**\n     * Perform one cycle of SHA-1.\n     * @param {Uint32Array|bitArray} words one block of words.\n     * @private\n     */\n    _block: function (words) {\n        var t, tmp, a, b, c, d, e, h = this._h;\n        var w;\n        if (typeof Uint32Array !== \"undefined\") {\n            // When words is passed to _block, it has 16 elements. SHA1 _block\n            // function extends words with new elements (at the end there are 80 elements).\n            // The problem is that if we use Uint32Array instead of Array,\n            // the length of Uint32Array cannot be changed. Thus, we replace words with a\n            // normal Array here.\n            w = Array(80); // do not use Uint32Array here as the instantiation is slower\n            for (var j = 0; j < 16; j++) {\n                w[j] = words[j];\n            }\n        }\n        else {\n            w = words;\n        }\n        a = h[0];\n        b = h[1];\n        c = h[2];\n        d = h[3];\n        e = h[4];\n        for (t = 0; t <= 79; t++) {\n            if (t >= 16) {\n                w[t] = this._S(1, w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16]);\n            }\n            tmp = (this._S(5, a) + this._f(t, b, c, d) + e + w[t] + this._key[Math.floor(t / 20)]) | 0;\n            e = d;\n            d = c;\n            c = this._S(30, b);\n            b = a;\n            a = tmp;\n        }\n        h[0] = (h[0] + a) | 0;\n        h[1] = (h[1] + b) | 0;\n        h[2] = (h[2] + c) | 0;\n        h[3] = (h[3] + d) | 0;\n        h[4] = (h[4] + e) | 0;\n    },\n};\n/** @fileOverview CBC mode implementation\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n/**\n * Dangerous: CBC mode with PKCS#5 padding.\n * @namespace\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\nsjcl.mode.cbc = {\n    /** The name of the mode.\n     * @constant\n     */\n    name: \"cbc\",\n    /** Encrypt in CBC mode with PKCS#5 padding.\n     * @param {Object} prp The block cipher.  It must have a block size of 16 bytes.\n     * @param {bitArray} plaintext The plaintext data.\n     * @param {bitArray} iv The initialization value.\n     * @param {bitArray} [adata=[]] The authenticated data.  Must be empty.\n     * @param {boolean} usePadding True if padding shall be used, false otherwise.\n     * @return The encrypted data, an array of bytes.\n     * @throws {sjcl.exception.invalid} if the IV isn't exactly 128 bits, or if any adata is specified.\n     */\n    encrypt: function (prp, plaintext, iv, adata, usePadding) {\n        if (adata && adata.length) {\n            throw new sjcl.exception.invalid(\"cbc can't authenticate data\");\n        }\n        if (sjcl.bitArray.bitLength(iv) !== 128) {\n            throw new sjcl.exception.invalid(\"cbc iv must be 128 bits\");\n        }\n        var i, w = sjcl.bitArray, xor = w._xor4, bl = w.bitLength(plaintext), bp = 0, output = [];\n        if (bl & 7) {\n            throw new sjcl.exception.invalid(\"pkcs#5 padding only works for multiples of a byte\");\n        }\n        for (i = 0; bp + 128 <= bl; i += 4, bp += 128) {\n            /* Encrypt a non-final block */\n            iv = prp.encrypt(xor(iv, plaintext.slice(i, i + 4)));\n            // TUTAO: replaced splice with push because of performance bug in chromium\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=914395&can=1&q=splice&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified\n            //output.splice(i, 0, iv[0], iv[1], iv[2], iv[3]);\n            output.push(iv[0], iv[1], iv[2], iv[3]);\n        }\n        if (usePadding) {\n            /* Construct the pad. */\n            bl = (16 - ((bl >> 3) & 15)) * 0x1010101;\n            /* Pad and encrypt. */\n            iv = prp.encrypt(xor(iv, w.concat(plaintext, [bl, bl, bl, bl]).slice(i, i + 4)));\n            // TUTAO: replaced splice with push because of performance bug in chromium\n            // output.splice(i, 0, iv[0], iv[1], iv[2], iv[3]);\n            output.push(iv[0], iv[1], iv[2], iv[3]);\n        }\n        return output;\n    },\n    /** Decrypt in CBC mode.\n     * @param {Object} prp The block cipher.  It must have a block size of 16 bytes.\n     * @param {bitArray} ciphertext The ciphertext data.\n     * @param {bitArray} iv The initialization value.\n     * @param {bitArray} [adata=[]] The authenticated data.  It must be empty.\n     * @param {boolean} usePadding True if padding shall be used, false otherwise.\n     * @return The decrypted data, an array of bytes.\n     * @throws {sjcl.exception.invalid} if the IV isn't exactly 128 bits, or if any adata is specified.\n     * @throws {sjcl.exception.corrupt} if if the message is corrupt.\n     */\n    decrypt: function (prp, ciphertext, iv, adata, usePadding) {\n        if (adata && adata.length) {\n            throw new sjcl.exception.invalid(\"cbc can't authenticate data\");\n        }\n        if (sjcl.bitArray.bitLength(iv) !== 128) {\n            throw new sjcl.exception.invalid(\"cbc iv must be 128 bits\");\n        }\n        if (sjcl.bitArray.bitLength(ciphertext) & 127 || !ciphertext.length) {\n            throw new sjcl.exception.corrupt(\"cbc ciphertext must be a positive multiple of the block size\");\n        }\n        var i, w = sjcl.bitArray, xor = w._xor4, bi, bo, output = [];\n        adata = adata || [];\n        for (i = 0; i < ciphertext.length; i += 4) {\n            bi = ciphertext.slice(i, i + 4);\n            bo = xor(iv, prp.decrypt(bi));\n            // TUTAO: replaced splice with push because of performance bug in chromium\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=914395&can=1&q=splice&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified\n            //output.splice(i, 0, bo[0], bo[1], bo[2], bo[3]);\n            output.push(bo[0], bo[1], bo[2], bo[3]);\n            iv = bi;\n        }\n        if (usePadding) {\n            /* check and remove the pad */\n            bi = output[i - 1] & 255;\n            if (bi === 0 || bi > 16) {\n                throw new sjcl.exception.corrupt(\"pkcs#5 padding corrupt\");\n            }\n            bo = bi * 0x1010101;\n            if (!w.equal(w.bitSlice([bo, bo, bo, bo], 0, bi * 8), w.bitSlice(output, output.length * 32 - bi * 8, output.length * 32))) {\n                throw new sjcl.exception.corrupt(\"pkcs#5 padding corrupt\");\n            }\n            return w.bitSlice(output, 0, output.length * 32 - bi * 8);\n        }\n        else {\n            return output;\n        }\n    },\n};\n/** @fileOverview GCM mode implementation.\n *\n * @author Juho Vähä-Herttua\n */\n/**\n * Galois/Counter mode.\n * @namespace\n */\nsjcl.mode.gcm = {\n    /**\n     * The name of the mode.\n     * @constant\n     */\n    name: \"gcm\",\n    /** Encrypt in GCM mode.\n     * @static\n     * @param {Object} prf The pseudorandom function.  It must have a block size of 16 bytes.\n     * @param {bitArray} plaintext The plaintext data.\n     * @param {bitArray} iv The initialization value.\n     * @param {bitArray} [adata=[]] The authenticated data.\n     * @param {Number} [tlen=128] The desired tag length, in bits.\n     * @return {bitArray} The encrypted data, an array of bytes.\n     */\n    encrypt: function (prf, plaintext, iv, adata, tlen) {\n        var out, data = plaintext.slice(0), w = sjcl.bitArray;\n        tlen = tlen || 128;\n        adata = adata || [];\n        // encrypt and tag\n        out = sjcl.mode.gcm._ctrMode(true, prf, data, adata, iv, tlen);\n        return w.concat(out.data, out.tag);\n    },\n    /** Decrypt in GCM mode.\n     * @static\n     * @param {Object} prf The pseudorandom function.  It must have a block size of 16 bytes.\n     * @param {bitArray} ciphertext The ciphertext data.\n     * @param {bitArray} iv The initialization value.\n     * @param {bitArray} [adata=[]] The authenticated data.\n     * @param {Number} [tlen=128] The desired tag length, in bits.\n     * @return {bitArray} The decrypted data.\n     */\n    decrypt: function (prf, ciphertext, iv, adata, tlen) {\n        var out, data = ciphertext.slice(0), tag, w = sjcl.bitArray, l = w.bitLength(data);\n        tlen = tlen || 128;\n        adata = adata || [];\n        // Slice tag out of data\n        if (tlen <= l) {\n            tag = w.bitSlice(data, l - tlen);\n            data = w.bitSlice(data, 0, l - tlen);\n        }\n        else {\n            tag = data;\n            data = [];\n        }\n        // decrypt and tag\n        out = sjcl.mode.gcm._ctrMode(false, prf, data, adata, iv, tlen);\n        if (!w.equal(out.tag, tag)) {\n            throw new sjcl.exception.corrupt(\"gcm: tag doesn't match\");\n        }\n        return out.data;\n    },\n    /* Compute the galois multiplication of X and Y\n     * @private\n     */\n    _galoisMultiply: function (x, y) {\n        var i, j, xi, Zi, Vi, lsb_Vi, w = sjcl.bitArray, xor = w._xor4;\n        Zi = [0, 0, 0, 0];\n        Vi = y.slice(0);\n        // Block size is 128 bits, run 128 times to get Z_128\n        for (i = 0; i < 128; i++) {\n            xi = (x[Math.floor(i / 32)] & (1 << (31 - (i % 32)))) !== 0;\n            if (xi) {\n                // Z_i+1 = Z_i ^ V_i\n                Zi = xor(Zi, Vi);\n            }\n            // Store the value of LSB(V_i)\n            lsb_Vi = (Vi[3] & 1) !== 0;\n            // V_i+1 = V_i >> 1\n            for (j = 3; j > 0; j--) {\n                Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31);\n            }\n            Vi[0] = Vi[0] >>> 1;\n            // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R\n            if (lsb_Vi) {\n                Vi[0] = Vi[0] ^ (0xe1 << 24);\n            }\n        }\n        return Zi;\n    },\n    _ghash: function (H, Y0, data) {\n        var Yi, i, l = data.length;\n        Yi = Y0.slice(0);\n        for (i = 0; i < l; i += 4) {\n            Yi[0] ^= 0xffffffff & data[i];\n            Yi[1] ^= 0xffffffff & data[i + 1];\n            Yi[2] ^= 0xffffffff & data[i + 2];\n            Yi[3] ^= 0xffffffff & data[i + 3];\n            Yi = sjcl.mode.gcm._galoisMultiply(Yi, H);\n        }\n        return Yi;\n    },\n    /** GCM CTR mode.\n     * Encrypt or decrypt data and tag with the prf in GCM-style CTR mode.\n     * @param {Boolean} encrypt True if encrypt, false if decrypt.\n     * @param {Object} prf The PRF.\n     * @param {bitArray} data The data to be encrypted or decrypted.\n     * @param {bitArray} iv The initialization vector.\n     * @param {bitArray} adata The associated data to be tagged.\n     * @param {Number} tlen The length of the tag, in bits.\n     */\n    _ctrMode: function (encrypt, prf, data, adata, iv, tlen) {\n        var H, J0, S0, enc, i, ctr, tag, last, l, bl, abl, ivbl, w = sjcl.bitArray;\n        // Calculate data lengths\n        l = data.length;\n        bl = w.bitLength(data);\n        abl = w.bitLength(adata);\n        ivbl = w.bitLength(iv);\n        // Calculate the parameters\n        H = prf.encrypt([0, 0, 0, 0]);\n        if (ivbl === 96) {\n            J0 = iv.slice(0);\n            J0 = w.concat(J0, [1]);\n        }\n        else {\n            J0 = sjcl.mode.gcm._ghash(H, [0, 0, 0, 0], iv);\n            J0 = sjcl.mode.gcm._ghash(H, J0, [0, 0, Math.floor(ivbl / 0x100000000), ivbl & 0xffffffff]);\n        }\n        S0 = sjcl.mode.gcm._ghash(H, [0, 0, 0, 0], adata);\n        // Initialize ctr and tag\n        ctr = J0.slice(0);\n        tag = S0.slice(0);\n        // If decrypting, calculate hash\n        if (!encrypt) {\n            tag = sjcl.mode.gcm._ghash(H, S0, data);\n        }\n        // Encrypt all the data\n        for (i = 0; i < l; i += 4) {\n            ctr[3]++;\n            enc = prf.encrypt(ctr);\n            data[i] ^= enc[0];\n            data[i + 1] ^= enc[1];\n            data[i + 2] ^= enc[2];\n            data[i + 3] ^= enc[3];\n        }\n        data = w.clamp(data, bl);\n        // If encrypting, calculate hash\n        if (encrypt) {\n            tag = sjcl.mode.gcm._ghash(H, S0, data);\n        }\n        // Calculate last block from bit lengths, ugly because bitwise operations are 32-bit\n        last = [Math.floor(abl / 0x100000000), abl & 0xffffffff, Math.floor(bl / 0x100000000), bl & 0xffffffff];\n        // Calculate the final tag block\n        tag = sjcl.mode.gcm._ghash(H, tag, last);\n        enc = prf.encrypt(J0);\n        tag[0] ^= enc[0];\n        tag[1] ^= enc[1];\n        tag[2] ^= enc[2];\n        tag[3] ^= enc[3];\n        return { tag: w.bitSlice(tag, 0, tlen), data: data };\n    },\n};\n/** @fileOverview HMAC implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n/** HMAC with the specified hash function.\n * @constructor\n * @param {bitArray} key the key for HMAC.\n * @param {Object} [Hash=sjcl.hash.sha256] The hash function to use.\n */\nsjcl.misc.hmac = function (key, Hash) {\n    this._hash = Hash = Hash || sjcl.hash.sha256;\n    var exKey = [[], []], i, bs = Hash.prototype.blockSize / 32;\n    this._baseHash = [new Hash(), new Hash()];\n    if (key.length > bs) {\n        key = Hash.hash(key);\n    }\n    for (i = 0; i < bs; i++) {\n        exKey[0][i] = key[i] ^ 0x36363636;\n        exKey[1][i] = key[i] ^ 0x5c5c5c5c;\n    }\n    this._baseHash[0].update(exKey[0]);\n    this._baseHash[1].update(exKey[1]);\n    this._resultHash = new Hash(this._baseHash[0]);\n};\n/** HMAC with the specified hash function.  Also called encrypt since it's a prf.\n * @param {bitArray|String} data The data to mac.\n */\nsjcl.misc.hmac.prototype.encrypt = sjcl.misc.hmac.prototype.mac = function (data) {\n    if (!this._updated) {\n        this.update(data);\n        return this.digest(data);\n    }\n    else {\n        throw new sjcl.exception.invalid(\"encrypt on already updated hmac called!\");\n    }\n};\nsjcl.misc.hmac.prototype.reset = function () {\n    this._resultHash = new this._hash(this._baseHash[0]);\n    this._updated = false;\n};\nsjcl.misc.hmac.prototype.update = function (data) {\n    this._updated = true;\n    this._resultHash.update(data);\n};\nsjcl.misc.hmac.prototype.digest = function () {\n    var w = this._resultHash.finalize(), result = new this._hash(this._baseHash[1]).update(w).finalize();\n    this.reset();\n    return result;\n};\n/** @fileOverview Random number generator.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n * @author Michael Brooks\n * @author Steve Thomas\n */\n/**\n * @class Random number generator\n * @description\n * <b>Use sjcl.random as a singleton for this class!</b>\n * <p>\n * This random number generator is a derivative of Ferguson and Schneier's\n * generator Fortuna.  It collects entropy from various events into several\n * pools, implemented by streaming SHA-256 instances.  It differs from\n * ordinary Fortuna in a few ways, though.\n * </p>\n *\n * <p>\n * Most importantly, it has an entropy estimator.  This is present because\n * there is a strong conflict here between making the generator available\n * as soon as possible, and making sure that it doesn't \"run on empty\".\n * In Fortuna, there is a saved state file, and the system is likely to have\n * time to warm up.\n * </p>\n *\n * <p>\n * Second, because users are unlikely to stay on the page for very long,\n * and to speed startup time, the number of pools increases logarithmically:\n * a new pool is created when the previous one is actually used for a reseed.\n * This gives the same asymptotic guarantees as Fortuna, but gives more\n * entropy to early reseeds.\n * </p>\n *\n * <p>\n * The entire mechanism here feels pretty klunky.  Furthermore, there are\n * several improvements that should be made, including support for\n * dedicated cryptographic functions that may be present in some browsers;\n * state files in local storage; cookies containing randomness; etc.  So\n * look for improvements in future versions.\n * </p>\n * @constructor\n */\nsjcl.prng = function (defaultParanoia) {\n    /* private */\n    this._pools = [new sjcl.hash.sha256()];\n    this._poolEntropy = [0];\n    this._reseedCount = 0;\n    this._robins = {};\n    this._eventId = 0;\n    this._collectorIds = {};\n    this._collectorIdNext = 0;\n    this._strength = 0;\n    this._poolStrength = 0;\n    this._nextReseed = 0;\n    this._key = [0, 0, 0, 0, 0, 0, 0, 0];\n    this._counter = [0, 0, 0, 0];\n    // this._cipher = undefined;\n    this._defaultParanoia = defaultParanoia;\n    // /* event listener stuff */\n    // this._collectorsStarted = false;\n    // this._callbacks = {progress: {}, seeded: {}};\n    // this._callbackI = 0;\n    /* constants */\n    this._NOT_READY = 0;\n    this._READY = 1;\n    this._REQUIRES_RESEED = 2;\n    this._MAX_WORDS_PER_BURST = 65536;\n    this._PARANOIA_LEVELS = [0, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024];\n    this._MILLISECONDS_PER_RESEED = 30000;\n    this._BITS_PER_RESEED = 80;\n};\nsjcl.prng.prototype = {\n    /** Generate several random words, and return them in an array.\n     * A word consists of 32 bits (4 bytes)\n     * @param {Number} nwords The number of words to generate.\n     */\n    randomWords: function (nwords, paranoia) {\n        var out = [], i, readiness = this.isReady(paranoia), g;\n        if (readiness === this._NOT_READY) {\n            throw new sjcl.exception.notReady(\"generator isn't seeded\");\n        }\n        else if (readiness & this._REQUIRES_RESEED) {\n            this._reseedFromPools(!(readiness & this._READY));\n        }\n        for (i = 0; i < nwords; i += 4) {\n            if ((i + 1) % this._MAX_WORDS_PER_BURST === 0) {\n                this._gate();\n            }\n            g = this._gen4words();\n            out.push(g[0], g[1], g[2], g[3]);\n        }\n        this._gate();\n        return out.slice(0, nwords);\n    },\n    // setDefaultParanoia: function (paranoia, allowZeroParanoia) {\n    // \tif (paranoia === 0 && allowZeroParanoia\n    // \t\t!== \"Setting paranoia=0 will ruin your security; use it only for testing\") {\n    // \t\tthrow new sjcl.exception.invalid(\"Setting paranoia=0 will ruin your security; use it only for testing\");\n    // \t}\n    //\n    // \tthis._defaultParanoia = paranoia;\n    // },\n    /**\n     * Add entropy to the pools.\n     * @param data The entropic value.  Should be a 32-bit integer, array of 32-bit integers, or string\n     * @param {Number} estimatedEntropy The estimated entropy of data, in bits\n     * @param {String} source The source of the entropy, eg \"mouse\"\n     */\n    addEntropy: function (data, estimatedEntropy, source) {\n        source = source || \"user\";\n        var id, i, tmp, t = new Date().valueOf(), robin = this._robins[source], oldReady = this.isReady(), err = 0, objName;\n        id = this._collectorIds[source];\n        if (id === undefined) {\n            id = this._collectorIds[source] = this._collectorIdNext++;\n        }\n        if (robin === undefined) {\n            robin = this._robins[source] = 0;\n        }\n        this._robins[source] = (this._robins[source] + 1) % this._pools.length;\n        switch (typeof data) {\n            case \"number\":\n                if (estimatedEntropy === undefined) {\n                    estimatedEntropy = 1;\n                }\n                this._pools[robin].update([id, this._eventId++, 1, estimatedEntropy, t, 1, data | 0]);\n                break;\n            case \"object\":\n                objName = Object.prototype.toString.call(data);\n                if (objName === \"[object Uint32Array]\") {\n                    tmp = [];\n                    for (i = 0; i < data.length; i++) {\n                        tmp.push(data[i]);\n                    }\n                    data = tmp;\n                }\n                else {\n                    if (objName !== \"[object Array]\") {\n                        err = 1;\n                    }\n                    for (i = 0; i < data.length && !err; i++) {\n                        if (typeof data[i] !== \"number\") {\n                            err = 1;\n                        }\n                    }\n                }\n                if (!err) {\n                    if (estimatedEntropy === undefined) {\n                        /* horrible entropy estimator */\n                        estimatedEntropy = 0;\n                        for (i = 0; i < data.length; i++) {\n                            tmp = data[i];\n                            while (tmp > 0) {\n                                estimatedEntropy++;\n                                tmp = tmp >>> 1;\n                            }\n                        }\n                    }\n                    this._pools[robin].update([id, this._eventId++, 2, estimatedEntropy, t, data.length].concat(data));\n                }\n                break;\n            case \"string\":\n                if (estimatedEntropy === undefined) {\n                    /* English text has just over 1 bit per character of entropy.\n                     * But this might be HTML or something, and have far less\n                     * entropy than English...  Oh well, let's just say one bit.\n                     */\n                    estimatedEntropy = data.length;\n                }\n                this._pools[robin].update([id, this._eventId++, 3, estimatedEntropy, t, data.length]);\n                this._pools[robin].update(data);\n                break;\n            default:\n                err = 1;\n        }\n        if (err) {\n            throw new sjcl.exception.bug(\"random: addEntropy only supports number, array of numbers or string\");\n        }\n        /* record the new strength */\n        this._poolEntropy[robin] += estimatedEntropy;\n        this._poolStrength += estimatedEntropy;\n        /* fire off events */\n        /* TUTAO.arm: removed bad implementation: _fireEvent calls static randomizer instance\n         if (oldReady === this._NOT_READY) {\n         if (this.isReady() !== this._NOT_READY) {\n         this._fireEvent(\"seeded\", Math.max(this._strength, this._poolStrength));\n         }\n         this._fireEvent(\"progress\", this.getProgress());\n         }*/\n    },\n    /** Is the generator ready? */\n    isReady: function (paranoia) {\n        var entropyRequired = this._PARANOIA_LEVELS[paranoia !== undefined ? paranoia : this._defaultParanoia];\n        if (this._strength && this._strength >= entropyRequired) {\n            return this._poolEntropy[0] > this._BITS_PER_RESEED && new Date().valueOf() > this._nextReseed ? this._REQUIRES_RESEED | this._READY : this._READY;\n        }\n        else {\n            return this._poolStrength >= entropyRequired ? this._REQUIRES_RESEED | this._NOT_READY : this._NOT_READY;\n        }\n    },\n    /** Generate 4 random words, no reseed, no gate.\n     * @private\n     */\n    _gen4words: function () {\n        for (var i = 0; i < 4; i++) {\n            this._counter[i] = (this._counter[i] + 1) | 0;\n            if (this._counter[i]) {\n                break;\n            }\n        }\n        return this._cipher.encrypt(this._counter);\n    },\n    /* Rekey the AES instance with itself after a request, or every _MAX_WORDS_PER_BURST words.\n     * @private\n     */\n    _gate: function () {\n        this._key = this._gen4words().concat(this._gen4words());\n        this._cipher = new sjcl.cipher.aes(this._key);\n    },\n    /** Reseed the generator with the given words\n     * @private\n     */\n    _reseed: function (seedWords) {\n        this._key = sjcl.hash.sha256.hash(this._key.concat(seedWords));\n        this._cipher = new sjcl.cipher.aes(this._key);\n        for (var i = 0; i < 4; i++) {\n            this._counter[i] = (this._counter[i] + 1) | 0;\n            if (this._counter[i]) {\n                break;\n            }\n        }\n    },\n    /** reseed the data from the entropy pools\n     * @param full If set, use all the entropy pools in the reseed.\n     */\n    _reseedFromPools: function (full) {\n        var reseedData = [], strength = 0, i;\n        this._nextReseed = reseedData[0] = new Date().valueOf() + this._MILLISECONDS_PER_RESEED;\n        for (i = 0; i < 16; i++) {\n            /* On some browsers, this is cryptographically random.  So we might\n             * as well toss it in the pot and stir...\n             */\n            reseedData.push((Math.random() * 0x100000000) | 0);\n        }\n        for (i = 0; i < this._pools.length; i++) {\n            reseedData = reseedData.concat(this._pools[i].finalize());\n            strength += this._poolEntropy[i];\n            this._poolEntropy[i] = 0;\n            if (!full && this._reseedCount & (1 << i)) {\n                break;\n            }\n        }\n        /* if we used the last pool, push a new one onto the stack */\n        if (this._reseedCount >= 1 << this._pools.length) {\n            this._pools.push(new sjcl.hash.sha256());\n            this._poolEntropy.push(0);\n        }\n        /* how strong was this reseed? */\n        this._poolStrength -= strength;\n        if (strength > this._strength) {\n            this._strength = strength;\n        }\n        this._reseedCount++;\n        this._reseed(reseedData);\n    },\n};\n/** an instance for the prng.\n * @see sjcl.prng\n */\n/* TUTAO.arm: removed static randomizer instance because we have our own\nsjcl.random = new sjcl.prng(6);\n\n(function () {\n    // function for getting nodejs crypto module. catches and ignores errors.\n    function getCryptoModule() {\n        try {\n            return require('crypto');\n        }\n        catch (e) {\n            return null;\n        }\n    }\n\n    try {\n        var buf, crypt, ab;\n\n        // get cryptographically strong entropy depending on runtime environment\n        if (typeof module !== 'undefined' && module.exports && (crypt = getCryptoModule()) && crypt.randomBytes) {\n            buf = crypt.randomBytes(1024 / 8);\n            buf = new Uint32Array(new Uint8Array(buf).buffer);\n            sjcl.random.addEntropy(buf, 1024, \"crypto.randomBytes\");\n\n        } else if (typeof window !== 'undefined' && typeof Uint32Array !== 'undefined') {\n            ab = new Uint32Array(32);\n            if (window.crypto && window.crypto.getRandomValues) {\n                window.crypto.getRandomValues(ab);\n            } else if (window.msCrypto && window.msCrypto.getRandomValues) {\n                window.msCrypto.getRandomValues(ab);\n            } else {\n                return;\n            }\n\n            // get cryptographically strong entropy in Webkit\n            sjcl.random.addEntropy(ab, 1024, \"crypto.getRandomValues\");\n\n        } else {\n            // no getRandomValues :-(\n        }\n    } catch (e) {\n        if (typeof window !== 'undefined' && window.console) {\n            console.log(\"There was an error collecting entropy from the browser:\");\n            console.log(e);\n            //we do not want the library to fail due to randomness not being maintained.\n        }\n    }\n }());*/\n/**\n * ArrayBuffer\n * @namespace\n */\nsjcl.codec.arrayBuffer = {\n    /** Convert from a bitArray to an ArrayBuffer.\n     * Will default to 8byte padding if padding is undefined*/\n    fromBits: function (arr, padding, padding_count) {\n        var out, i, ol, tmp, smallest;\n        padding = padding == undefined ? true : padding;\n        padding_count = padding_count || 8;\n        if (arr.length === 0) {\n            return new ArrayBuffer(0);\n        }\n        ol = sjcl.bitArray.bitLength(arr) / 8;\n        //check to make sure the bitLength is divisible by 8, if it isn't\n        //we can't do anything since arraybuffers work with bytes, not bits\n        if (sjcl.bitArray.bitLength(arr) % 8 !== 0) {\n            throw new sjcl.exception.invalid(\"Invalid bit size, must be divisble by 8 to fit in an arraybuffer correctly\");\n        }\n        if (padding && ol % padding_count !== 0) {\n            ol += padding_count - (ol % padding_count);\n        }\n        //padded temp for easy copying\n        tmp = new DataView(new ArrayBuffer(arr.length * 4));\n        for (i = 0; i < arr.length; i++) {\n            tmp.setUint32(i * 4, arr[i] << 32); //get rid of the higher bits\n        }\n        //now copy the final message if we are not going to 0 pad\n        out = new DataView(new ArrayBuffer(ol));\n        //save a step when the tmp and out bytelength are ===\n        if (out.byteLength === tmp.byteLength) {\n            return tmp.buffer;\n        }\n        smallest = tmp.byteLength < out.byteLength ? tmp.byteLength : out.byteLength;\n        for (i = 0; i < smallest; i++) {\n            out.setUint8(i, tmp.getUint8(i));\n        }\n        return out.buffer;\n    },\n    toBits: function (buffer, byteOffset, byteLength) {\n        var i, out = [], len, inView, tmp;\n        if (buffer.byteLength === 0) {\n            return [];\n        }\n        inView = new DataView(buffer, byteOffset, byteLength);\n        len = inView.byteLength - (inView.byteLength % 4);\n        for (var i = 0; i < len; i += 4) {\n            out.push(inView.getUint32(i));\n        }\n        if (inView.byteLength % 4 != 0) {\n            tmp = new DataView(new ArrayBuffer(4));\n            for (var i = 0, l = inView.byteLength % 4; i < l; i++) {\n                //we want the data to the right, because partial slices off the starting bits\n                tmp.setUint8(i + 4 - l, inView.getUint8(len + i)); // big-endian,\n            }\n            out.push(sjcl.bitArray.partial((inView.byteLength % 4) * 8, tmp.getUint32(0)));\n        }\n        return out;\n    },\n};\nexport default sjcl;\n","// @ts-ignore[untyped-import]\nimport sjcl from \"../internal/sjcl.js\";\nimport { CryptoError } from \"../misc/CryptoError.js\";\n/**\n * This Interface provides an abstraction of the random number generator implementation.\n */\nexport class Randomizer {\n    random;\n    constructor() {\n        this.random = new sjcl.prng(6);\n    }\n    /**\n     * Adds entropy to the random number generator algorithm\n     * @param entropyCache with: number Any number value, entropy The amount of entropy in the number in bit,\n     * source The source of the number.\n     */\n    addEntropy(entropyCache) {\n        for (const entry of entropyCache) {\n            this.random.addEntropy(entry.data, entry.entropy, entry.source);\n        }\n        return Promise.resolve();\n    }\n    addStaticEntropy(bytes) {\n        for (const byte of bytes) {\n            this.random.addEntropy(byte, 8, \"static\");\n        }\n    }\n    /**\n     * Not used currently because we always have enough entropy using getRandomValues()\n     */\n    isReady() {\n        return this.random.isReady() !== 0;\n    }\n    /**\n     * Generates random data. The function initRandomDataGenerator must have been called prior to the first call to this function.\n     * @param nbrOfBytes The number of bytes the random data shall have.\n     * @return A hex coded string of random data.\n     * @throws {CryptoError} if the randomizer is not seeded (isReady == false)\n     */\n    generateRandomData(nbrOfBytes) {\n        try {\n            // read the minimal number of words to get nbrOfBytes\n            let nbrOfWords = Math.floor((nbrOfBytes + 3) / 4);\n            let words = this.random.randomWords(nbrOfWords);\n            let arrayBuffer = sjcl.codec.arrayBuffer.fromBits(words, false);\n            // simply cut off the exceeding bytes\n            return new Uint8Array(arrayBuffer, 0, nbrOfBytes); // truncate the arraybuffer as precaution\n        }\n        catch (e) {\n            throw new CryptoError(\"error during random number generation\", e);\n        }\n    }\n    /**\n     * Generate a number that fits in the range of an n-byte integer\n     */\n    generateRandomNumber(nbrOfBytes) {\n        const bytes = this.generateRandomData(nbrOfBytes);\n        let result = 0;\n        for (let i = 0; i < bytes.length; ++i) {\n            result += bytes[i] << (i * 8);\n        }\n        return result;\n    }\n}\n// TODO singleton should be created in the app?\n// the randomizer instance (singleton) that should be used throughout the app\nexport const random = new Randomizer();\n","// @ts-ignore[untyped-import]\nimport sjcl from \"../internal/sjcl.js\";\nconst sha256 = new sjcl.hash.sha256();\nexport const SHA256_HASH_LENGTH_BYTES = 32;\n/**\n * Create the hash of the given data.\n * @param uint8Array The bytes.\n * @return The hash.\n */\nexport function sha256Hash(uint8Array) {\n    try {\n        sha256.update(sjcl.codec.arrayBuffer.toBits(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength));\n        return new Uint8Array(sjcl.codec.arrayBuffer.fromBits(sha256.finalize(), false));\n    }\n    finally {\n        sha256.reset();\n    }\n}\n","// @ts-ignore[untyped-import]\nimport sjcl from \"../internal/sjcl.js\";\nimport { base64ToBase64Url, base64ToUint8Array, concat, hexToUint8Array, uint8ArrayToArrayBuffer, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\";\nimport { CryptoError } from \"./CryptoError.js\";\nimport { sha256Hash } from \"../hashes/Sha256.js\";\nconst PADDING_BLOCK_LENGTH = 16; // same for aes128 and aes256 as the block size is always 16 byte\nexport function padAes(bytes) {\n    let paddingLength = PADDING_BLOCK_LENGTH - (bytes.byteLength % PADDING_BLOCK_LENGTH);\n    let padding = new Uint8Array(paddingLength);\n    padding.fill(paddingLength);\n    return concat(bytes, padding);\n}\nexport function unpadAes(bytes) {\n    let paddingLength = bytes[bytes.byteLength - 1];\n    if (paddingLength === 0 || paddingLength > bytes.byteLength || paddingLength > PADDING_BLOCK_LENGTH) {\n        throw new CryptoError(\"invalid padding: \" + paddingLength);\n    }\n    let length = bytes.byteLength - paddingLength;\n    let result = new Uint8Array(length);\n    result.set(bytes.subarray(0, length));\n    return result;\n}\n/**\n * Creates the auth verifier from the password key.\n * @param passwordKey The key.\n * @returns The auth verifier\n */\nexport function createAuthVerifier(passwordKey) {\n    // TODO Compatibility Test\n    return sha256Hash(bitArrayToUint8Array(passwordKey));\n}\nexport function createAuthVerifierAsBase64Url(passwordKey) {\n    return base64ToBase64Url(uint8ArrayToBase64(createAuthVerifier(passwordKey)));\n}\n/**\n * Provides the information if a key is 128 or 256 bit length.\n * @param key The key.\n * @returns True if the key length is 128, false if the key length is 256 bit.\n * @throws If the key is not 128 bit and not 256 bit.\n */\nexport function checkIs128BitKey(key) {\n    let bitLength = sjcl.bitArray.bitLength(key);\n    if (bitLength === 128) {\n        return true;\n    }\n    else if (bitLength === 256) {\n        return false;\n    }\n    else {\n        throw new CryptoError(\"invalid key bit length: \" + bitLength);\n    }\n}\n/**\n * Converts the given BitArray (SJCL) to an Uint8Array.\n * @param bits The BitArray.\n * @return The uint8array.\n */\nexport function bitArrayToUint8Array(bits) {\n    return new Uint8Array(sjcl.codec.arrayBuffer.fromBits(bits, false));\n}\n/**\n * Converts the given uint8array to a BitArray (SJCL).\n * @param uint8Array The uint8Array key.\n * @return The key.\n */\nexport function uint8ArrayToBitArray(uint8Array) {\n    return sjcl.codec.arrayBuffer.toBits(uint8ArrayToArrayBuffer(uint8Array));\n}\n/**\n * Converts the given key to a base64 coded string.\n * @param key The key.\n * @return The base64 coded string representation of the key.\n */\nexport function keyToBase64(key) {\n    return sjcl.codec.base64.fromBits(key);\n}\n/**\n * Converts the given base64 coded string to a key.\n * @param base64 The base64 coded string representation of the key.\n * @return The key.\n * @throws {CryptoError} If the conversion fails.\n */\nexport function base64ToKey(base64) {\n    try {\n        return sjcl.codec.base64.toBits(base64);\n    }\n    catch (e) {\n        throw new CryptoError(\"hex to aes key failed\", e);\n    }\n}\nexport function uint8ArrayToKey(array) {\n    return base64ToKey(uint8ArrayToBase64(array));\n}\nexport function keyToUint8Array(key) {\n    return base64ToUint8Array(keyToBase64(key));\n}\nexport const fixedIv = hexToUint8Array(\"88888888888888888888888888888888\");\n","// @ts-ignore[untyped-import]\nimport sjcl from \"../internal/sjcl.js\";\nconst sha512 = new sjcl.hash.sha512();\nexport const SHA512_HASH_LENGTH_BYTES = 64;\n/**\n * Create the hash of the given data.\n * @param uint8Array The bytes.\n * @return The hash.\n */\nexport function sha512Hash(uint8Array) {\n    try {\n        sha512.update(sjcl.codec.arrayBuffer.toBits(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength));\n        return new Uint8Array(sjcl.codec.arrayBuffer.fromBits(sha512.finalize(), false));\n    }\n    finally {\n        sha512.reset();\n    }\n}\n","import sjcl from \"../internal/sjcl.js\";\nimport { random } from \"../random/Randomizer.js\";\nimport { bitArrayToUint8Array, uint8ArrayToBitArray } from \"../misc/Utils.js\";\nimport { arrayEquals, concat, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\";\nimport { sha256Hash } from \"../hashes/Sha256.js\";\nimport { CryptoError } from \"../misc/CryptoError.js\";\nimport { sha512Hash } from \"../hashes/Sha512.js\";\nexport const ENABLE_MAC = true;\nexport const IV_BYTE_LENGTH = 16;\nexport const KEY_LENGTH_BYTES_AES_256 = 32;\nexport const KEY_LENGTH_BITS_AES_256 = KEY_LENGTH_BYTES_AES_256 * 8;\nexport const KEY_LENGTH_BYTES_AES_128 = 16;\nconst KEY_LENGTH_BITS_AES_128 = KEY_LENGTH_BYTES_AES_128 * 8;\nexport const MAC_ENABLED_PREFIX = 1;\nconst MAC_LENGTH_BYTES = 32;\n/**\n * @return the key length in bytes\n */\nexport function getKeyLengthBytes(key) {\n    // stored as an array of 32-bit (4 byte) integers\n    return key.length * 4;\n}\nexport function aes256RandomKey() {\n    return uint8ArrayToBitArray(random.generateRandomData(KEY_LENGTH_BYTES_AES_256));\n}\nexport function generateIV() {\n    return random.generateRandomData(IV_BYTE_LENGTH);\n}\n/**\n * Encrypts bytes with AES128 or AES256 in CBC mode.\n * @param key The key to use for the encryption.\n * @param bytes The plain text.\n * @param iv The initialization vector.\n * @param usePadding If true, padding is used, otherwise no padding is used and the encrypted data must have the key size.\n * @param useMac If true, use HMAC (note that this is required for AES-256)\n * @return The encrypted bytes\n */\nexport function aesEncrypt(key, bytes, iv = generateIV(), usePadding = true, useMac = true) {\n    verifyKeySize(key, [KEY_LENGTH_BITS_AES_128, KEY_LENGTH_BITS_AES_256]);\n    if (iv.length !== IV_BYTE_LENGTH) {\n        throw new CryptoError(`Illegal IV length: ${iv.length} (expected: ${IV_BYTE_LENGTH}): ${uint8ArrayToBase64(iv)} `);\n    }\n    if (!useMac && getKeyLengthBytes(key) === KEY_LENGTH_BYTES_AES_256) {\n        throw new CryptoError(`Can't use AES-256 without MAC`);\n    }\n    let subKeys = getAesSubKeys(key, useMac);\n    let encryptedBits = sjcl.mode.cbc.encrypt(new sjcl.cipher.aes(subKeys.cKey), uint8ArrayToBitArray(bytes), uint8ArrayToBitArray(iv), [], usePadding);\n    let data = concat(iv, bitArrayToUint8Array(encryptedBits));\n    if (useMac) {\n        let hmac = new sjcl.misc.hmac(subKeys.mKey, sjcl.hash.sha256);\n        let macBytes = bitArrayToUint8Array(hmac.encrypt(uint8ArrayToBitArray(data)));\n        data = concat(new Uint8Array([MAC_ENABLED_PREFIX]), data, macBytes);\n    }\n    return data;\n}\n/**\n * Encrypts bytes with AES 256 in CBC mode without mac. This is legacy code and should be removed once the index has been migrated.\n * @param key The key to use for the encryption.\n * @param bytes The plain text.\n * @param iv The initialization vector (only to be passed for testing).\n * @param usePadding If true, padding is used, otherwise no padding is used and the encrypted data must have the key size.\n * @return The encrypted text as words (sjcl internal structure)..\n */\nexport function aes256EncryptSearchIndexEntry(key, bytes, iv = generateIV(), usePadding = true) {\n    verifyKeySize(key, [KEY_LENGTH_BITS_AES_256]);\n    if (iv.length !== IV_BYTE_LENGTH) {\n        throw new CryptoError(`Illegal IV length: ${iv.length} (expected: ${IV_BYTE_LENGTH}): ${uint8ArrayToBase64(iv)} `);\n    }\n    let subKeys = getAesSubKeys(key, false);\n    let encryptedBits = sjcl.mode.cbc.encrypt(new sjcl.cipher.aes(subKeys.cKey), uint8ArrayToBitArray(bytes), uint8ArrayToBitArray(iv), [], usePadding);\n    let data = concat(iv, bitArrayToUint8Array(encryptedBits));\n    return data;\n}\n/**\n * Decrypts the given words with AES-128/256 in CBC mode (with HMAC-SHA-256 as mac). The mac is enforced for AES-256 but optional for AES-128.\n * @param key The key to use for the decryption.\n * @param encryptedBytes The ciphertext encoded as bytes.\n * @param usePadding If true, padding is used, otherwise no padding is used and the encrypted data must have the key size.\n * @return The decrypted bytes.\n */\nexport function aesDecrypt(key, encryptedBytes, usePadding = true) {\n    const keyLength = getKeyLengthBytes(key);\n    if (keyLength === KEY_LENGTH_BYTES_AES_128) {\n        return aesDecryptImpl(key, encryptedBytes, usePadding, false);\n    }\n    else {\n        return aesDecryptImpl(key, encryptedBytes, usePadding, true);\n    }\n}\n/**\n * Decrypts the given words with AES-128/ AES-256 in CBC mode with HMAC-SHA-256 as mac. Enforces the mac.\n * @param key The key to use for the decryption.\n * @param encryptedBytes The ciphertext encoded as bytes.\n * @param usePadding If true, padding is used, otherwise no padding is used and the encrypted data must have the key size.\n * @return The decrypted bytes.\n */\nexport function authenticatedAesDecrypt(key, encryptedBytes, usePadding = true) {\n    return aesDecryptImpl(key, encryptedBytes, usePadding, true);\n}\n/**\n * Decrypts the given words with AES-128/256 in CBC mode. Does not enforce a mac.\n * We always must enforce macs. This only exists for backward compatibility in some exceptional cases like search index entry encryption.\n *\n * @param key The key to use for the decryption.\n * @param encryptedBytes The ciphertext encoded as bytes.\n * @param usePadding If true, padding is used, otherwise no padding is used and the encrypted data must have the key size.\n * @return The decrypted bytes.\n */\nexport function unauthenticatedAesDecrypt(key, encryptedBytes, usePadding = true) {\n    return aesDecryptImpl(key, encryptedBytes, usePadding, false);\n}\n/**\n * Decrypts the given words with AES-128/256 in CBC mode.\n * @param key The key to use for the decryption.\n * @param encryptedBytes The ciphertext encoded as bytes.\n * @param usePadding If true, padding is used, otherwise no padding is used and the encrypted data must have the key size.\n * @param enforceMac if true decryption will fail if there is no valid mac. we only support false for backward compatibility.\n * \t\t\t\t it must not be used with new cryto anymore.\n * @return The decrypted bytes.\n */\nfunction aesDecryptImpl(key, encryptedBytes, usePadding, enforceMac) {\n    verifyKeySize(key, [KEY_LENGTH_BITS_AES_128, KEY_LENGTH_BITS_AES_256]);\n    const hasMac = encryptedBytes.length % 2 === 1;\n    if (enforceMac && !hasMac) {\n        throw new CryptoError(\"mac expected but not present\");\n    }\n    const subKeys = getAesSubKeys(key, hasMac);\n    let cipherTextWithoutMac;\n    if (hasMac) {\n        cipherTextWithoutMac = encryptedBytes.subarray(1, encryptedBytes.length - MAC_LENGTH_BYTES);\n        const providedMacBytes = encryptedBytes.subarray(encryptedBytes.length - MAC_LENGTH_BYTES);\n        const hmac = new sjcl.misc.hmac(subKeys.mKey, sjcl.hash.sha256);\n        const computedMacBytes = bitArrayToUint8Array(hmac.encrypt(uint8ArrayToBitArray(cipherTextWithoutMac)));\n        if (!arrayEquals(providedMacBytes, computedMacBytes)) {\n            throw new CryptoError(\"invalid mac\");\n        }\n    }\n    else {\n        cipherTextWithoutMac = encryptedBytes;\n    }\n    // take the iv from the front of the encrypted data\n    const iv = cipherTextWithoutMac.slice(0, IV_BYTE_LENGTH);\n    if (iv.length !== IV_BYTE_LENGTH) {\n        throw new CryptoError(`Invalid IV length in aesDecrypt: ${iv.length} bytes, must be 16 bytes (128 bits)`);\n    }\n    const ciphertext = cipherTextWithoutMac.slice(IV_BYTE_LENGTH);\n    try {\n        const decrypted = sjcl.mode.cbc.decrypt(new sjcl.cipher.aes(subKeys.cKey), uint8ArrayToBitArray(ciphertext), uint8ArrayToBitArray(iv), [], usePadding);\n        return new Uint8Array(bitArrayToUint8Array(decrypted));\n    }\n    catch (e) {\n        throw new CryptoError(\"aes decryption failed\", e);\n    }\n}\n// visibleForTesting\nexport function verifyKeySize(key, bitLength) {\n    if (!bitLength.includes(sjcl.bitArray.bitLength(key))) {\n        throw new CryptoError(`Illegal key length: ${sjcl.bitArray.bitLength(key)} (expected: ${bitLength})`);\n    }\n}\n/************************ Legacy AES128 ************************/\n/**\n * @private visible for tests\n * @deprecated\n * */\nexport function _aes128RandomKey() {\n    return uint8ArrayToBitArray(random.generateRandomData(KEY_LENGTH_BYTES_AES_128));\n}\nexport function getAesSubKeys(key, mac) {\n    if (mac) {\n        let hashedKey;\n        switch (getKeyLengthBytes(key)) {\n            case KEY_LENGTH_BYTES_AES_128:\n                hashedKey = sha256Hash(bitArrayToUint8Array(key));\n                break;\n            case KEY_LENGTH_BYTES_AES_256:\n                hashedKey = sha512Hash(bitArrayToUint8Array(key));\n                break;\n            default:\n                throw new Error(`unexpected key length ${getKeyLengthBytes(key)}`);\n        }\n        return {\n            cKey: uint8ArrayToBitArray(hashedKey.subarray(0, hashedKey.length / 2)),\n            mKey: uint8ArrayToBitArray(hashedKey.subarray(hashedKey.length / 2, hashedKey.length)),\n        };\n    }\n    else {\n        return {\n            cKey: key,\n            mKey: null,\n        };\n    }\n}\n","// x25519 from noble-curves-1.3.0\n//\n// How to rebuild this file\n// 1. Clone noble-curves https://github.com/paulmillr/noble-curves and CD into it\n// 2. Run `npm i` and then `npm run build`\n// 3. CD into `build`\n// 4. Rewrite input.js into just this one line: export {x25519} from '@noble/curves/ed25519'\n// 5. Run `npm i` and `npm run build`\n// 6. Copy contents of noble-curves.js to below\n\"use strict\";\nvar nobleCurves = (() => {\n    var __defProp = Object.defineProperty;\n    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames = Object.getOwnPropertyNames;\n    var __hasOwnProp = Object.prototype.hasOwnProperty;\n    var __export = (target, all) => {\n        for (var name in all)\n            __defProp(target, name, { get: all[name], enumerable: true });\n    };\n    var __copyProps = (to, from, except, desc) => {\n        if (from && typeof from === \"object\" || typeof from === \"function\") {\n            for (let key of __getOwnPropNames(from))\n                if (!__hasOwnProp.call(to, key) && key !== except)\n                    __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n        }\n        return to;\n    };\n    var __toCommonJS = (mod2) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod2);\n    // input.js\n    var input_exports = {};\n    __export(input_exports, {\n        x25519: () => x25519\n    });\n    // ../node_modules/@noble/hashes/esm/_assert.js\n    function isBytes(a) {\n        return a instanceof Uint8Array || a != null && typeof a === \"object\" && a.constructor.name === \"Uint8Array\";\n    }\n    function bytes(b, ...lengths) {\n        if (!isBytes(b))\n            throw new Error(\"Expected Uint8Array\");\n        if (lengths.length > 0 && !lengths.includes(b.length))\n            throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n    }\n    function exists(instance, checkFinished = true) {\n        if (instance.destroyed)\n            throw new Error(\"Hash instance has been destroyed\");\n        if (checkFinished && instance.finished)\n            throw new Error(\"Hash#digest() has already been called\");\n    }\n    function output(out, instance) {\n        bytes(out);\n        const min = instance.outputLen;\n        if (out.length < min) {\n            throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n        }\n    }\n    // ../node_modules/@noble/hashes/esm/crypto.js\n    var crypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0;\n    // ../node_modules/@noble/hashes/esm/utils.js\n    function isBytes2(a) {\n        return a instanceof Uint8Array || a != null && typeof a === \"object\" && a.constructor.name === \"Uint8Array\";\n    }\n    var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;\n    if (!isLE)\n        throw new Error(\"Non little-endian hardware is not supported\");\n    function utf8ToBytes(str) {\n        if (typeof str !== \"string\")\n            throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n        return new Uint8Array(new TextEncoder().encode(str));\n    }\n    function toBytes(data) {\n        if (typeof data === \"string\")\n            data = utf8ToBytes(data);\n        if (!isBytes2(data))\n            throw new Error(`expected Uint8Array, got ${typeof data}`);\n        return data;\n    }\n    function concatBytes(...arrays) {\n        let sum = 0;\n        for (let i = 0; i < arrays.length; i++) {\n            const a = arrays[i];\n            if (!isBytes2(a))\n                throw new Error(\"Uint8Array expected\");\n            sum += a.length;\n        }\n        const res = new Uint8Array(sum);\n        for (let i = 0, pad = 0; i < arrays.length; i++) {\n            const a = arrays[i];\n            res.set(a, pad);\n            pad += a.length;\n        }\n        return res;\n    }\n    var Hash = class {\n        // Safe version that clones internal state\n        clone() {\n            return this._cloneInto();\n        }\n    };\n    var toStr = {}.toString;\n    function wrapConstructor(hashCons) {\n        const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n        const tmp = hashCons();\n        hashC.outputLen = tmp.outputLen;\n        hashC.blockLen = tmp.blockLen;\n        hashC.create = () => hashCons();\n        return hashC;\n    }\n    function randomBytes(bytesLength = 32) {\n        if (crypto && typeof crypto.getRandomValues === \"function\") {\n            return crypto.getRandomValues(new Uint8Array(bytesLength));\n        }\n        throw new Error(\"crypto.getRandomValues must be defined\");\n    }\n    // ../node_modules/@noble/hashes/esm/_sha2.js\n    function setBigUint64(view, byteOffset, value, isLE2) {\n        if (typeof view.setBigUint64 === \"function\")\n            return view.setBigUint64(byteOffset, value, isLE2);\n        const _32n2 = BigInt(32);\n        const _u32_max = BigInt(4294967295);\n        const wh = Number(value >> _32n2 & _u32_max);\n        const wl = Number(value & _u32_max);\n        const h = isLE2 ? 4 : 0;\n        const l = isLE2 ? 0 : 4;\n        view.setUint32(byteOffset + h, wh, isLE2);\n        view.setUint32(byteOffset + l, wl, isLE2);\n    }\n    var SHA2 = class extends Hash {\n        constructor(blockLen, outputLen, padOffset, isLE2) {\n            super();\n            this.blockLen = blockLen;\n            this.outputLen = outputLen;\n            this.padOffset = padOffset;\n            this.isLE = isLE2;\n            this.finished = false;\n            this.length = 0;\n            this.pos = 0;\n            this.destroyed = false;\n            this.buffer = new Uint8Array(blockLen);\n            this.view = createView(this.buffer);\n        }\n        update(data) {\n            exists(this);\n            const { view, buffer, blockLen } = this;\n            data = toBytes(data);\n            const len = data.length;\n            for (let pos = 0; pos < len;) {\n                const take = Math.min(blockLen - this.pos, len - pos);\n                if (take === blockLen) {\n                    const dataView = createView(data);\n                    for (; blockLen <= len - pos; pos += blockLen)\n                        this.process(dataView, pos);\n                    continue;\n                }\n                buffer.set(data.subarray(pos, pos + take), this.pos);\n                this.pos += take;\n                pos += take;\n                if (this.pos === blockLen) {\n                    this.process(view, 0);\n                    this.pos = 0;\n                }\n            }\n            this.length += data.length;\n            this.roundClean();\n            return this;\n        }\n        digestInto(out) {\n            exists(this);\n            output(out, this);\n            this.finished = true;\n            const { buffer, view, blockLen, isLE: isLE2 } = this;\n            let { pos } = this;\n            buffer[pos++] = 128;\n            this.buffer.subarray(pos).fill(0);\n            if (this.padOffset > blockLen - pos) {\n                this.process(view, 0);\n                pos = 0;\n            }\n            for (let i = pos; i < blockLen; i++)\n                buffer[i] = 0;\n            setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);\n            this.process(view, 0);\n            const oview = createView(out);\n            const len = this.outputLen;\n            if (len % 4)\n                throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n            const outLen = len / 4;\n            const state = this.get();\n            if (outLen > state.length)\n                throw new Error(\"_sha2: outputLen bigger than state\");\n            for (let i = 0; i < outLen; i++)\n                oview.setUint32(4 * i, state[i], isLE2);\n        }\n        digest() {\n            const { buffer, outputLen } = this;\n            this.digestInto(buffer);\n            const res = buffer.slice(0, outputLen);\n            this.destroy();\n            return res;\n        }\n        _cloneInto(to) {\n            to || (to = new this.constructor());\n            to.set(...this.get());\n            const { blockLen, buffer, length, finished, destroyed, pos } = this;\n            to.length = length;\n            to.pos = pos;\n            to.finished = finished;\n            to.destroyed = destroyed;\n            if (length % blockLen)\n                to.buffer.set(buffer);\n            return to;\n        }\n    };\n    // ../node_modules/@noble/hashes/esm/_u64.js\n    var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\n    var _32n = /* @__PURE__ */ BigInt(32);\n    function fromBig(n, le = false) {\n        if (le)\n            return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };\n        return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n    }\n    function split(lst, le = false) {\n        let Ah = new Uint32Array(lst.length);\n        let Al = new Uint32Array(lst.length);\n        for (let i = 0; i < lst.length; i++) {\n            const { h, l } = fromBig(lst[i], le);\n            [Ah[i], Al[i]] = [h, l];\n        }\n        return [Ah, Al];\n    }\n    var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n    var shrSH = (h, _l, s) => h >>> s;\n    var shrSL = (h, l, s) => h << 32 - s | l >>> s;\n    var rotrSH = (h, l, s) => h >>> s | l << 32 - s;\n    var rotrSL = (h, l, s) => h << 32 - s | l >>> s;\n    var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\n    var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;\n    var rotr32H = (_h, l) => l;\n    var rotr32L = (h, _l) => h;\n    var rotlSH = (h, l, s) => h << s | l >>> 32 - s;\n    var rotlSL = (h, l, s) => l << s | h >>> 32 - s;\n    var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\n    var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\n    function add(Ah, Al, Bh, Bl) {\n        const l = (Al >>> 0) + (Bl >>> 0);\n        return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };\n    }\n    var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\n    var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\n    var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\n    var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\n    var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\n    var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n    var u64 = {\n        fromBig,\n        split,\n        toBig,\n        shrSH,\n        shrSL,\n        rotrSH,\n        rotrSL,\n        rotrBH,\n        rotrBL,\n        rotr32H,\n        rotr32L,\n        rotlSH,\n        rotlSL,\n        rotlBH,\n        rotlBL,\n        add,\n        add3L,\n        add3H,\n        add4L,\n        add4H,\n        add5H,\n        add5L\n    };\n    var u64_default = u64;\n    // ../node_modules/@noble/hashes/esm/sha512.js\n    var [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64_default.split([\n        \"0x428a2f98d728ae22\",\n        \"0x7137449123ef65cd\",\n        \"0xb5c0fbcfec4d3b2f\",\n        \"0xe9b5dba58189dbbc\",\n        \"0x3956c25bf348b538\",\n        \"0x59f111f1b605d019\",\n        \"0x923f82a4af194f9b\",\n        \"0xab1c5ed5da6d8118\",\n        \"0xd807aa98a3030242\",\n        \"0x12835b0145706fbe\",\n        \"0x243185be4ee4b28c\",\n        \"0x550c7dc3d5ffb4e2\",\n        \"0x72be5d74f27b896f\",\n        \"0x80deb1fe3b1696b1\",\n        \"0x9bdc06a725c71235\",\n        \"0xc19bf174cf692694\",\n        \"0xe49b69c19ef14ad2\",\n        \"0xefbe4786384f25e3\",\n        \"0x0fc19dc68b8cd5b5\",\n        \"0x240ca1cc77ac9c65\",\n        \"0x2de92c6f592b0275\",\n        \"0x4a7484aa6ea6e483\",\n        \"0x5cb0a9dcbd41fbd4\",\n        \"0x76f988da831153b5\",\n        \"0x983e5152ee66dfab\",\n        \"0xa831c66d2db43210\",\n        \"0xb00327c898fb213f\",\n        \"0xbf597fc7beef0ee4\",\n        \"0xc6e00bf33da88fc2\",\n        \"0xd5a79147930aa725\",\n        \"0x06ca6351e003826f\",\n        \"0x142929670a0e6e70\",\n        \"0x27b70a8546d22ffc\",\n        \"0x2e1b21385c26c926\",\n        \"0x4d2c6dfc5ac42aed\",\n        \"0x53380d139d95b3df\",\n        \"0x650a73548baf63de\",\n        \"0x766a0abb3c77b2a8\",\n        \"0x81c2c92e47edaee6\",\n        \"0x92722c851482353b\",\n        \"0xa2bfe8a14cf10364\",\n        \"0xa81a664bbc423001\",\n        \"0xc24b8b70d0f89791\",\n        \"0xc76c51a30654be30\",\n        \"0xd192e819d6ef5218\",\n        \"0xd69906245565a910\",\n        \"0xf40e35855771202a\",\n        \"0x106aa07032bbd1b8\",\n        \"0x19a4c116b8d2d0c8\",\n        \"0x1e376c085141ab53\",\n        \"0x2748774cdf8eeb99\",\n        \"0x34b0bcb5e19b48a8\",\n        \"0x391c0cb3c5c95a63\",\n        \"0x4ed8aa4ae3418acb\",\n        \"0x5b9cca4f7763e373\",\n        \"0x682e6ff3d6b2b8a3\",\n        \"0x748f82ee5defb2fc\",\n        \"0x78a5636f43172f60\",\n        \"0x84c87814a1f0ab72\",\n        \"0x8cc702081a6439ec\",\n        \"0x90befffa23631e28\",\n        \"0xa4506cebde82bde9\",\n        \"0xbef9a3f7b2c67915\",\n        \"0xc67178f2e372532b\",\n        \"0xca273eceea26619c\",\n        \"0xd186b8c721c0c207\",\n        \"0xeada7dd6cde0eb1e\",\n        \"0xf57d4f7fee6ed178\",\n        \"0x06f067aa72176fba\",\n        \"0x0a637dc5a2c898a6\",\n        \"0x113f9804bef90dae\",\n        \"0x1b710b35131c471b\",\n        \"0x28db77f523047d84\",\n        \"0x32caab7b40c72493\",\n        \"0x3c9ebe0a15c9bebc\",\n        \"0x431d67c49c100d4c\",\n        \"0x4cc5d4becb3e42b6\",\n        \"0x597f299cfc657e2a\",\n        \"0x5fcb6fab3ad6faec\",\n        \"0x6c44198c4a475817\"\n    ].map((n) => BigInt(n))))();\n    var SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\n    var SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\n    var SHA512 = class extends SHA2 {\n        constructor() {\n            super(128, 64, 16, false);\n            this.Ah = 1779033703 | 0;\n            this.Al = 4089235720 | 0;\n            this.Bh = 3144134277 | 0;\n            this.Bl = 2227873595 | 0;\n            this.Ch = 1013904242 | 0;\n            this.Cl = 4271175723 | 0;\n            this.Dh = 2773480762 | 0;\n            this.Dl = 1595750129 | 0;\n            this.Eh = 1359893119 | 0;\n            this.El = 2917565137 | 0;\n            this.Fh = 2600822924 | 0;\n            this.Fl = 725511199 | 0;\n            this.Gh = 528734635 | 0;\n            this.Gl = 4215389547 | 0;\n            this.Hh = 1541459225 | 0;\n            this.Hl = 327033209 | 0;\n        }\n        // prettier-ignore\n        get() {\n            const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n            return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n        }\n        // prettier-ignore\n        set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n            this.Ah = Ah | 0;\n            this.Al = Al | 0;\n            this.Bh = Bh | 0;\n            this.Bl = Bl | 0;\n            this.Ch = Ch | 0;\n            this.Cl = Cl | 0;\n            this.Dh = Dh | 0;\n            this.Dl = Dl | 0;\n            this.Eh = Eh | 0;\n            this.El = El | 0;\n            this.Fh = Fh | 0;\n            this.Fl = Fl | 0;\n            this.Gh = Gh | 0;\n            this.Gl = Gl | 0;\n            this.Hh = Hh | 0;\n            this.Hl = Hl | 0;\n        }\n        process(view, offset) {\n            for (let i = 0; i < 16; i++, offset += 4) {\n                SHA512_W_H[i] = view.getUint32(offset);\n                SHA512_W_L[i] = view.getUint32(offset += 4);\n            }\n            for (let i = 16; i < 80; i++) {\n                const W15h = SHA512_W_H[i - 15] | 0;\n                const W15l = SHA512_W_L[i - 15] | 0;\n                const s0h = u64_default.rotrSH(W15h, W15l, 1) ^ u64_default.rotrSH(W15h, W15l, 8) ^ u64_default.shrSH(W15h, W15l, 7);\n                const s0l = u64_default.rotrSL(W15h, W15l, 1) ^ u64_default.rotrSL(W15h, W15l, 8) ^ u64_default.shrSL(W15h, W15l, 7);\n                const W2h = SHA512_W_H[i - 2] | 0;\n                const W2l = SHA512_W_L[i - 2] | 0;\n                const s1h = u64_default.rotrSH(W2h, W2l, 19) ^ u64_default.rotrBH(W2h, W2l, 61) ^ u64_default.shrSH(W2h, W2l, 6);\n                const s1l = u64_default.rotrSL(W2h, W2l, 19) ^ u64_default.rotrBL(W2h, W2l, 61) ^ u64_default.shrSL(W2h, W2l, 6);\n                const SUMl = u64_default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n                const SUMh = u64_default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n                SHA512_W_H[i] = SUMh | 0;\n                SHA512_W_L[i] = SUMl | 0;\n            }\n            let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n            for (let i = 0; i < 80; i++) {\n                const sigma1h = u64_default.rotrSH(Eh, El, 14) ^ u64_default.rotrSH(Eh, El, 18) ^ u64_default.rotrBH(Eh, El, 41);\n                const sigma1l = u64_default.rotrSL(Eh, El, 14) ^ u64_default.rotrSL(Eh, El, 18) ^ u64_default.rotrBL(Eh, El, 41);\n                const CHIh = Eh & Fh ^ ~Eh & Gh;\n                const CHIl = El & Fl ^ ~El & Gl;\n                const T1ll = u64_default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n                const T1h = u64_default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n                const T1l = T1ll | 0;\n                const sigma0h = u64_default.rotrSH(Ah, Al, 28) ^ u64_default.rotrBH(Ah, Al, 34) ^ u64_default.rotrBH(Ah, Al, 39);\n                const sigma0l = u64_default.rotrSL(Ah, Al, 28) ^ u64_default.rotrBL(Ah, Al, 34) ^ u64_default.rotrBL(Ah, Al, 39);\n                const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n                const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n                Hh = Gh | 0;\n                Hl = Gl | 0;\n                Gh = Fh | 0;\n                Gl = Fl | 0;\n                Fh = Eh | 0;\n                Fl = El | 0;\n                ({ h: Eh, l: El } = u64_default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n                Dh = Ch | 0;\n                Dl = Cl | 0;\n                Ch = Bh | 0;\n                Cl = Bl | 0;\n                Bh = Ah | 0;\n                Bl = Al | 0;\n                const All = u64_default.add3L(T1l, sigma0l, MAJl);\n                Ah = u64_default.add3H(All, T1h, sigma0h, MAJh);\n                Al = All | 0;\n            }\n            ({ h: Ah, l: Al } = u64_default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n            ({ h: Bh, l: Bl } = u64_default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n            ({ h: Ch, l: Cl } = u64_default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n            ({ h: Dh, l: Dl } = u64_default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n            ({ h: Eh, l: El } = u64_default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n            ({ h: Fh, l: Fl } = u64_default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n            ({ h: Gh, l: Gl } = u64_default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n            ({ h: Hh, l: Hl } = u64_default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n            this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n        }\n        roundClean() {\n            SHA512_W_H.fill(0);\n            SHA512_W_L.fill(0);\n        }\n        destroy() {\n            this.buffer.fill(0);\n            this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n        }\n    };\n    var sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\n    // ../esm/abstract/utils.js\n    var _0n = BigInt(0);\n    var _1n = BigInt(1);\n    var _2n = BigInt(2);\n    function isBytes3(a) {\n        return a instanceof Uint8Array || a != null && typeof a === \"object\" && a.constructor.name === \"Uint8Array\";\n    }\n    var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, \"0\"));\n    function bytesToHex(bytes2) {\n        if (!isBytes3(bytes2))\n            throw new Error(\"Uint8Array expected\");\n        let hex = \"\";\n        for (let i = 0; i < bytes2.length; i++) {\n            hex += hexes[bytes2[i]];\n        }\n        return hex;\n    }\n    function hexToNumber(hex) {\n        if (typeof hex !== \"string\")\n            throw new Error(\"hex string expected, got \" + typeof hex);\n        return BigInt(hex === \"\" ? \"0\" : `0x${hex}`);\n    }\n    var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\n    function asciiToBase16(char) {\n        if (char >= asciis._0 && char <= asciis._9)\n            return char - asciis._0;\n        if (char >= asciis._A && char <= asciis._F)\n            return char - (asciis._A - 10);\n        if (char >= asciis._a && char <= asciis._f)\n            return char - (asciis._a - 10);\n        return;\n    }\n    function hexToBytes(hex) {\n        if (typeof hex !== \"string\")\n            throw new Error(\"hex string expected, got \" + typeof hex);\n        const hl = hex.length;\n        const al = hl / 2;\n        if (hl % 2)\n            throw new Error(\"padded hex string expected, got unpadded hex of length \" + hl);\n        const array = new Uint8Array(al);\n        for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n            const n1 = asciiToBase16(hex.charCodeAt(hi));\n            const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n            if (n1 === void 0 || n2 === void 0) {\n                const char = hex[hi] + hex[hi + 1];\n                throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n            }\n            array[ai] = n1 * 16 + n2;\n        }\n        return array;\n    }\n    function bytesToNumberBE(bytes2) {\n        return hexToNumber(bytesToHex(bytes2));\n    }\n    function bytesToNumberLE(bytes2) {\n        if (!isBytes3(bytes2))\n            throw new Error(\"Uint8Array expected\");\n        return hexToNumber(bytesToHex(Uint8Array.from(bytes2).reverse()));\n    }\n    function numberToBytesBE(n, len) {\n        return hexToBytes(n.toString(16).padStart(len * 2, \"0\"));\n    }\n    function numberToBytesLE(n, len) {\n        return numberToBytesBE(n, len).reverse();\n    }\n    function ensureBytes(title, hex, expectedLength) {\n        let res;\n        if (typeof hex === \"string\") {\n            try {\n                res = hexToBytes(hex);\n            }\n            catch (e) {\n                throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n            }\n        }\n        else if (isBytes3(hex)) {\n            res = Uint8Array.from(hex);\n        }\n        else {\n            throw new Error(`${title} must be hex string or Uint8Array`);\n        }\n        const len = res.length;\n        if (typeof expectedLength === \"number\" && len !== expectedLength)\n            throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n        return res;\n    }\n    function concatBytes2(...arrays) {\n        let sum = 0;\n        for (let i = 0; i < arrays.length; i++) {\n            const a = arrays[i];\n            if (!isBytes3(a))\n                throw new Error(\"Uint8Array expected\");\n            sum += a.length;\n        }\n        let res = new Uint8Array(sum);\n        let pad = 0;\n        for (let i = 0; i < arrays.length; i++) {\n            const a = arrays[i];\n            res.set(a, pad);\n            pad += a.length;\n        }\n        return res;\n    }\n    var bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n    var validatorFns = {\n        bigint: (val) => typeof val === \"bigint\",\n        function: (val) => typeof val === \"function\",\n        boolean: (val) => typeof val === \"boolean\",\n        string: (val) => typeof val === \"string\",\n        stringOrUint8Array: (val) => typeof val === \"string\" || isBytes3(val),\n        isSafeInteger: (val) => Number.isSafeInteger(val),\n        array: (val) => Array.isArray(val),\n        field: (val, object) => object.Fp.isValid(val),\n        hash: (val) => typeof val === \"function\" && Number.isSafeInteger(val.outputLen)\n    };\n    function validateObject(object, validators, optValidators = {}) {\n        const checkField = (fieldName, type, isOptional) => {\n            const checkVal = validatorFns[type];\n            if (typeof checkVal !== \"function\")\n                throw new Error(`Invalid validator \"${type}\", expected function`);\n            const val = object[fieldName];\n            if (isOptional && val === void 0)\n                return;\n            if (!checkVal(val, object)) {\n                throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n            }\n        };\n        for (const [fieldName, type] of Object.entries(validators))\n            checkField(fieldName, type, false);\n        for (const [fieldName, type] of Object.entries(optValidators))\n            checkField(fieldName, type, true);\n        return object;\n    }\n    // ../esm/abstract/modular.js\n    var _0n2 = BigInt(0);\n    var _1n2 = BigInt(1);\n    var _2n2 = BigInt(2);\n    var _3n = BigInt(3);\n    var _4n = BigInt(4);\n    var _5n = BigInt(5);\n    var _8n = BigInt(8);\n    var _9n = BigInt(9);\n    var _16n = BigInt(16);\n    function mod(a, b) {\n        const result = a % b;\n        return result >= _0n2 ? result : b + result;\n    }\n    function pow(num, power, modulo) {\n        if (modulo <= _0n2 || power < _0n2)\n            throw new Error(\"Expected power/modulo > 0\");\n        if (modulo === _1n2)\n            return _0n2;\n        let res = _1n2;\n        while (power > _0n2) {\n            if (power & _1n2)\n                res = res * num % modulo;\n            num = num * num % modulo;\n            power >>= _1n2;\n        }\n        return res;\n    }\n    function pow2(x, power, modulo) {\n        let res = x;\n        while (power-- > _0n2) {\n            res *= res;\n            res %= modulo;\n        }\n        return res;\n    }\n    function invert(number, modulo) {\n        if (number === _0n2 || modulo <= _0n2) {\n            throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n        }\n        let a = mod(number, modulo);\n        let b = modulo;\n        let x = _0n2, y = _1n2, u = _1n2, v = _0n2;\n        while (a !== _0n2) {\n            const q = b / a;\n            const r = b % a;\n            const m = x - u * q;\n            const n = y - v * q;\n            b = a, a = r, x = u, y = v, u = m, v = n;\n        }\n        const gcd = b;\n        if (gcd !== _1n2)\n            throw new Error(\"invert: does not exist\");\n        return mod(x, modulo);\n    }\n    function tonelliShanks(P) {\n        const legendreC = (P - _1n2) / _2n2;\n        let Q, S, Z;\n        for (Q = P - _1n2, S = 0; Q % _2n2 === _0n2; Q /= _2n2, S++)\n            ;\n        for (Z = _2n2; Z < P && pow(Z, legendreC, P) !== P - _1n2; Z++)\n            ;\n        if (S === 1) {\n            const p1div4 = (P + _1n2) / _4n;\n            return function tonelliFast(Fp2, n) {\n                const root = Fp2.pow(n, p1div4);\n                if (!Fp2.eql(Fp2.sqr(root), n))\n                    throw new Error(\"Cannot find square root\");\n                return root;\n            };\n        }\n        const Q1div2 = (Q + _1n2) / _2n2;\n        return function tonelliSlow(Fp2, n) {\n            if (Fp2.pow(n, legendreC) === Fp2.neg(Fp2.ONE))\n                throw new Error(\"Cannot find square root\");\n            let r = S;\n            let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);\n            let x = Fp2.pow(n, Q1div2);\n            let b = Fp2.pow(n, Q);\n            while (!Fp2.eql(b, Fp2.ONE)) {\n                if (Fp2.eql(b, Fp2.ZERO))\n                    return Fp2.ZERO;\n                let m = 1;\n                for (let t2 = Fp2.sqr(b); m < r; m++) {\n                    if (Fp2.eql(t2, Fp2.ONE))\n                        break;\n                    t2 = Fp2.sqr(t2);\n                }\n                const ge = Fp2.pow(g, _1n2 << BigInt(r - m - 1));\n                g = Fp2.sqr(ge);\n                x = Fp2.mul(x, ge);\n                b = Fp2.mul(b, g);\n                r = m;\n            }\n            return x;\n        };\n    }\n    function FpSqrt(P) {\n        if (P % _4n === _3n) {\n            const p1div4 = (P + _1n2) / _4n;\n            return function sqrt3mod4(Fp2, n) {\n                const root = Fp2.pow(n, p1div4);\n                if (!Fp2.eql(Fp2.sqr(root), n))\n                    throw new Error(\"Cannot find square root\");\n                return root;\n            };\n        }\n        if (P % _8n === _5n) {\n            const c1 = (P - _5n) / _8n;\n            return function sqrt5mod8(Fp2, n) {\n                const n2 = Fp2.mul(n, _2n2);\n                const v = Fp2.pow(n2, c1);\n                const nv = Fp2.mul(n, v);\n                const i = Fp2.mul(Fp2.mul(nv, _2n2), v);\n                const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));\n                if (!Fp2.eql(Fp2.sqr(root), n))\n                    throw new Error(\"Cannot find square root\");\n                return root;\n            };\n        }\n        if (P % _16n === _9n) {\n        }\n        return tonelliShanks(P);\n    }\n    var isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n2) === _1n2;\n    var FIELD_FIELDS = [\n        \"create\",\n        \"isValid\",\n        \"is0\",\n        \"neg\",\n        \"inv\",\n        \"sqrt\",\n        \"sqr\",\n        \"eql\",\n        \"add\",\n        \"sub\",\n        \"mul\",\n        \"pow\",\n        \"div\",\n        \"addN\",\n        \"subN\",\n        \"mulN\",\n        \"sqrN\"\n    ];\n    function validateField(field) {\n        const initial = {\n            ORDER: \"bigint\",\n            MASK: \"bigint\",\n            BYTES: \"isSafeInteger\",\n            BITS: \"isSafeInteger\"\n        };\n        const opts = FIELD_FIELDS.reduce((map, val) => {\n            map[val] = \"function\";\n            return map;\n        }, initial);\n        return validateObject(field, opts);\n    }\n    function FpPow(f, num, power) {\n        if (power < _0n2)\n            throw new Error(\"Expected power > 0\");\n        if (power === _0n2)\n            return f.ONE;\n        if (power === _1n2)\n            return num;\n        let p = f.ONE;\n        let d = num;\n        while (power > _0n2) {\n            if (power & _1n2)\n                p = f.mul(p, d);\n            d = f.sqr(d);\n            power >>= _1n2;\n        }\n        return p;\n    }\n    function FpInvertBatch(f, nums) {\n        const tmp = new Array(nums.length);\n        const lastMultiplied = nums.reduce((acc, num, i) => {\n            if (f.is0(num))\n                return acc;\n            tmp[i] = acc;\n            return f.mul(acc, num);\n        }, f.ONE);\n        const inverted = f.inv(lastMultiplied);\n        nums.reduceRight((acc, num, i) => {\n            if (f.is0(num))\n                return acc;\n            tmp[i] = f.mul(acc, tmp[i]);\n            return f.mul(acc, num);\n        }, inverted);\n        return tmp;\n    }\n    function nLength(n, nBitLength) {\n        const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;\n        const nByteLength = Math.ceil(_nBitLength / 8);\n        return { nBitLength: _nBitLength, nByteLength };\n    }\n    function Field(ORDER, bitLen, isLE2 = false, redef = {}) {\n        if (ORDER <= _0n2)\n            throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n        const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n        if (BYTES > 2048)\n            throw new Error(\"Field lengths over 2048 bytes are not supported\");\n        const sqrtP = FpSqrt(ORDER);\n        const f = Object.freeze({\n            ORDER,\n            BITS,\n            BYTES,\n            MASK: bitMask(BITS),\n            ZERO: _0n2,\n            ONE: _1n2,\n            create: (num) => mod(num, ORDER),\n            isValid: (num) => {\n                if (typeof num !== \"bigint\")\n                    throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n                return _0n2 <= num && num < ORDER;\n            },\n            is0: (num) => num === _0n2,\n            isOdd: (num) => (num & _1n2) === _1n2,\n            neg: (num) => mod(-num, ORDER),\n            eql: (lhs, rhs) => lhs === rhs,\n            sqr: (num) => mod(num * num, ORDER),\n            add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n            sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n            mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n            pow: (num, power) => FpPow(f, num, power),\n            div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n            // Same as above, but doesn't normalize\n            sqrN: (num) => num * num,\n            addN: (lhs, rhs) => lhs + rhs,\n            subN: (lhs, rhs) => lhs - rhs,\n            mulN: (lhs, rhs) => lhs * rhs,\n            inv: (num) => invert(num, ORDER),\n            sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n            invertBatch: (lst) => FpInvertBatch(f, lst),\n            // TODO: do we really need constant cmov?\n            // We don't have const-time bigints anyway, so probably will be not very useful\n            cmov: (a, b, c) => c ? b : a,\n            toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),\n            fromBytes: (bytes2) => {\n                if (bytes2.length !== BYTES)\n                    throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);\n                return isLE2 ? bytesToNumberLE(bytes2) : bytesToNumberBE(bytes2);\n            }\n        });\n        return Object.freeze(f);\n    }\n    function FpSqrtEven(Fp2, elm) {\n        if (!Fp2.isOdd)\n            throw new Error(`Field doesn't have isOdd`);\n        const root = Fp2.sqrt(elm);\n        return Fp2.isOdd(root) ? Fp2.neg(root) : root;\n    }\n    // ../esm/abstract/curve.js\n    var _0n3 = BigInt(0);\n    var _1n3 = BigInt(1);\n    function wNAF(c, bits) {\n        const constTimeNegate = (condition, item) => {\n            const neg = item.negate();\n            return condition ? neg : item;\n        };\n        const opts = (W) => {\n            const windows = Math.ceil(bits / W) + 1;\n            const windowSize = 2 ** (W - 1);\n            return { windows, windowSize };\n        };\n        return {\n            constTimeNegate,\n            // non-const time multiplication ladder\n            unsafeLadder(elm, n) {\n                let p = c.ZERO;\n                let d = elm;\n                while (n > _0n3) {\n                    if (n & _1n3)\n                        p = p.add(d);\n                    d = d.double();\n                    n >>= _1n3;\n                }\n                return p;\n            },\n            /**\n             * Creates a wNAF precomputation window. Used for caching.\n             * Default window size is set by `utils.precompute()` and is equal to 8.\n             * Number of precomputed points depends on the curve size:\n             * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n             * - 𝑊 is the window size\n             * - 𝑛 is the bitlength of the curve order.\n             * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n             * @returns precomputed point tables flattened to a single array\n             */\n            precomputeWindow(elm, W) {\n                const { windows, windowSize } = opts(W);\n                const points = [];\n                let p = elm;\n                let base = p;\n                for (let window = 0; window < windows; window++) {\n                    base = p;\n                    points.push(base);\n                    for (let i = 1; i < windowSize; i++) {\n                        base = base.add(p);\n                        points.push(base);\n                    }\n                    p = base.double();\n                }\n                return points;\n            },\n            /**\n             * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n             * @param W window size\n             * @param precomputes precomputed tables\n             * @param n scalar (we don't check here, but should be less than curve order)\n             * @returns real and fake (for const-time) points\n             */\n            wNAF(W, precomputes, n) {\n                const { windows, windowSize } = opts(W);\n                let p = c.ZERO;\n                let f = c.BASE;\n                const mask = BigInt(2 ** W - 1);\n                const maxNumber = 2 ** W;\n                const shiftBy = BigInt(W);\n                for (let window = 0; window < windows; window++) {\n                    const offset = window * windowSize;\n                    let wbits = Number(n & mask);\n                    n >>= shiftBy;\n                    if (wbits > windowSize) {\n                        wbits -= maxNumber;\n                        n += _1n3;\n                    }\n                    const offset1 = offset;\n                    const offset2 = offset + Math.abs(wbits) - 1;\n                    const cond1 = window % 2 !== 0;\n                    const cond2 = wbits < 0;\n                    if (wbits === 0) {\n                        f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                    }\n                    else {\n                        p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                    }\n                }\n                return { p, f };\n            },\n            wNAFCached(P, precomputesMap, n, transform) {\n                const W = P._WINDOW_SIZE || 1;\n                let comp = precomputesMap.get(P);\n                if (!comp) {\n                    comp = this.precomputeWindow(P, W);\n                    if (W !== 1) {\n                        precomputesMap.set(P, transform(comp));\n                    }\n                }\n                return this.wNAF(W, comp, n);\n            }\n        };\n    }\n    function validateBasic(curve) {\n        validateField(curve.Fp);\n        validateObject(curve, {\n            n: \"bigint\",\n            h: \"bigint\",\n            Gx: \"field\",\n            Gy: \"field\"\n        }, {\n            nBitLength: \"isSafeInteger\",\n            nByteLength: \"isSafeInteger\"\n        });\n        return Object.freeze({\n            ...nLength(curve.n, curve.nBitLength),\n            ...curve,\n            ...{ p: curve.Fp.ORDER }\n        });\n    }\n    // ../esm/abstract/edwards.js\n    var _0n4 = BigInt(0);\n    var _1n4 = BigInt(1);\n    var _2n3 = BigInt(2);\n    var _8n2 = BigInt(8);\n    var VERIFY_DEFAULT = { zip215: true };\n    function validateOpts(curve) {\n        const opts = validateBasic(curve);\n        validateObject(curve, {\n            hash: \"function\",\n            a: \"bigint\",\n            d: \"bigint\",\n            randomBytes: \"function\"\n        }, {\n            adjustScalarBytes: \"function\",\n            domain: \"function\",\n            uvRatio: \"function\",\n            mapToCurve: \"function\"\n        });\n        return Object.freeze({ ...opts });\n    }\n    function twistedEdwards(curveDef) {\n        const CURVE = validateOpts(curveDef);\n        const { Fp: Fp2, n: CURVE_ORDER, prehash, hash: cHash, randomBytes: randomBytes2, nByteLength, h: cofactor } = CURVE;\n        const MASK = _2n3 << BigInt(nByteLength * 8) - _1n4;\n        const modP = Fp2.create;\n        const uvRatio2 = CURVE.uvRatio || ((u, v) => {\n            try {\n                return { isValid: true, value: Fp2.sqrt(u * Fp2.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n4 };\n            }\n        });\n        const adjustScalarBytes2 = CURVE.adjustScalarBytes || ((bytes2) => bytes2);\n        const domain = CURVE.domain || ((data, ctx, phflag) => {\n            if (ctx.length || phflag)\n                throw new Error(\"Contexts/pre-hash are not supported\");\n            return data;\n        });\n        const inBig = (n) => typeof n === \"bigint\" && _0n4 < n;\n        const inRange = (n, max) => inBig(n) && inBig(max) && n < max;\n        const in0MaskRange = (n) => n === _0n4 || inRange(n, MASK);\n        function assertInRange(n, max) {\n            if (inRange(n, max))\n                return n;\n            throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n        }\n        function assertGE0(n) {\n            return n === _0n4 ? n : assertInRange(n, CURVE_ORDER);\n        }\n        const pointPrecomputes = /* @__PURE__ */ new Map();\n        function isPoint(other) {\n            if (!(other instanceof Point))\n                throw new Error(\"ExtendedPoint expected\");\n        }\n        class Point {\n            constructor(ex, ey, ez, et) {\n                this.ex = ex;\n                this.ey = ey;\n                this.ez = ez;\n                this.et = et;\n                if (!in0MaskRange(ex))\n                    throw new Error(\"x required\");\n                if (!in0MaskRange(ey))\n                    throw new Error(\"y required\");\n                if (!in0MaskRange(ez))\n                    throw new Error(\"z required\");\n                if (!in0MaskRange(et))\n                    throw new Error(\"t required\");\n            }\n            get x() {\n                return this.toAffine().x;\n            }\n            get y() {\n                return this.toAffine().y;\n            }\n            static fromAffine(p) {\n                if (p instanceof Point)\n                    throw new Error(\"extended point not allowed\");\n                const { x, y } = p || {};\n                if (!in0MaskRange(x) || !in0MaskRange(y))\n                    throw new Error(\"invalid affine point\");\n                return new Point(x, y, _1n4, modP(x * y));\n            }\n            static normalizeZ(points) {\n                const toInv = Fp2.invertBatch(points.map((p) => p.ez));\n                return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            }\n            // \"Private method\", don't use it directly\n            _setWindowSize(windowSize) {\n                this._WINDOW_SIZE = windowSize;\n                pointPrecomputes.delete(this);\n            }\n            // Not required for fromHex(), which always creates valid points.\n            // Could be useful for fromAffine().\n            assertValidity() {\n                const { a, d } = CURVE;\n                if (this.is0())\n                    throw new Error(\"bad point: ZERO\");\n                const { ex: X, ey: Y, ez: Z, et: T } = this;\n                const X2 = modP(X * X);\n                const Y2 = modP(Y * Y);\n                const Z2 = modP(Z * Z);\n                const Z4 = modP(Z2 * Z2);\n                const aX2 = modP(X2 * a);\n                const left = modP(Z2 * modP(aX2 + Y2));\n                const right = modP(Z4 + modP(d * modP(X2 * Y2)));\n                if (left !== right)\n                    throw new Error(\"bad point: equation left != right (1)\");\n                const XY = modP(X * Y);\n                const ZT = modP(Z * T);\n                if (XY !== ZT)\n                    throw new Error(\"bad point: equation left != right (2)\");\n            }\n            // Compare one point to another.\n            equals(other) {\n                isPoint(other);\n                const { ex: X1, ey: Y1, ez: Z1 } = this;\n                const { ex: X2, ey: Y2, ez: Z2 } = other;\n                const X1Z2 = modP(X1 * Z2);\n                const X2Z1 = modP(X2 * Z1);\n                const Y1Z2 = modP(Y1 * Z2);\n                const Y2Z1 = modP(Y2 * Z1);\n                return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n            }\n            is0() {\n                return this.equals(Point.ZERO);\n            }\n            negate() {\n                return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n            }\n            // Fast algo for doubling Extended Point.\n            // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n            // Cost: 4M + 4S + 1*a + 6add + 1*2.\n            double() {\n                const { a } = CURVE;\n                const { ex: X1, ey: Y1, ez: Z1 } = this;\n                const A = modP(X1 * X1);\n                const B = modP(Y1 * Y1);\n                const C = modP(_2n3 * modP(Z1 * Z1));\n                const D = modP(a * A);\n                const x1y1 = X1 + Y1;\n                const E = modP(modP(x1y1 * x1y1) - A - B);\n                const G2 = D + B;\n                const F = G2 - C;\n                const H = D - B;\n                const X3 = modP(E * F);\n                const Y3 = modP(G2 * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G2);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            // Fast algo for adding 2 Extended Points.\n            // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n            // Cost: 9M + 1*a + 1*d + 7add.\n            add(other) {\n                isPoint(other);\n                const { a, d } = CURVE;\n                const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n                const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n                if (a === BigInt(-1)) {\n                    const A2 = modP((Y1 - X1) * (Y2 + X2));\n                    const B2 = modP((Y1 + X1) * (Y2 - X2));\n                    const F2 = modP(B2 - A2);\n                    if (F2 === _0n4)\n                        return this.double();\n                    const C2 = modP(Z1 * _2n3 * T2);\n                    const D2 = modP(T1 * _2n3 * Z2);\n                    const E2 = D2 + C2;\n                    const G3 = B2 + A2;\n                    const H2 = D2 - C2;\n                    const X32 = modP(E2 * F2);\n                    const Y32 = modP(G3 * H2);\n                    const T32 = modP(E2 * H2);\n                    const Z32 = modP(F2 * G3);\n                    return new Point(X32, Y32, Z32, T32);\n                }\n                const A = modP(X1 * X2);\n                const B = modP(Y1 * Y2);\n                const C = modP(T1 * d * T2);\n                const D = modP(Z1 * Z2);\n                const E = modP((X1 + Y1) * (X2 + Y2) - A - B);\n                const F = D - C;\n                const G2 = D + C;\n                const H = modP(B - a * A);\n                const X3 = modP(E * F);\n                const Y3 = modP(G2 * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G2);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            subtract(other) {\n                return this.add(other.negate());\n            }\n            wNAF(n) {\n                return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n            }\n            // Constant-time multiplication.\n            multiply(scalar) {\n                const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n                return Point.normalizeZ([p, f])[0];\n            }\n            // Non-constant-time multiplication. Uses double-and-add algorithm.\n            // It's faster, but should only be used when you don't care about\n            // an exposed private key e.g. sig verification.\n            // Does NOT allow scalars higher than CURVE.n.\n            multiplyUnsafe(scalar) {\n                let n = assertGE0(scalar);\n                if (n === _0n4)\n                    return I;\n                if (this.equals(I) || n === _1n4)\n                    return this;\n                if (this.equals(G))\n                    return this.wNAF(n).p;\n                return wnaf.unsafeLadder(this, n);\n            }\n            // Checks if point is of small order.\n            // If you add something to small order point, you will have \"dirty\"\n            // point with torsion component.\n            // Multiplies point by cofactor and checks if the result is 0.\n            isSmallOrder() {\n                return this.multiplyUnsafe(cofactor).is0();\n            }\n            // Multiplies point by curve order and checks if the result is 0.\n            // Returns `false` is the point is dirty.\n            isTorsionFree() {\n                return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n            }\n            // Converts Extended point to default (x, y) coordinates.\n            // Can accept precomputed Z^-1 - for example, from invertBatch.\n            toAffine(iz) {\n                const { ex: x, ey: y, ez: z } = this;\n                const is0 = this.is0();\n                if (iz == null)\n                    iz = is0 ? _8n2 : Fp2.inv(z);\n                const ax = modP(x * iz);\n                const ay = modP(y * iz);\n                const zz = modP(z * iz);\n                if (is0)\n                    return { x: _0n4, y: _1n4 };\n                if (zz !== _1n4)\n                    throw new Error(\"invZ was invalid\");\n                return { x: ax, y: ay };\n            }\n            clearCofactor() {\n                const { h: cofactor2 } = CURVE;\n                if (cofactor2 === _1n4)\n                    return this;\n                return this.multiplyUnsafe(cofactor2);\n            }\n            // Converts hash string or Uint8Array to Point.\n            // Uses algo from RFC8032 5.1.3.\n            static fromHex(hex, zip215 = false) {\n                const { d, a } = CURVE;\n                const len = Fp2.BYTES;\n                hex = ensureBytes(\"pointHex\", hex, len);\n                const normed = hex.slice();\n                const lastByte = hex[len - 1];\n                normed[len - 1] = lastByte & ~128;\n                const y = bytesToNumberLE(normed);\n                if (y === _0n4) {\n                }\n                else {\n                    if (zip215)\n                        assertInRange(y, MASK);\n                    else\n                        assertInRange(y, Fp2.ORDER);\n                }\n                const y2 = modP(y * y);\n                const u = modP(y2 - _1n4);\n                const v = modP(d * y2 - a);\n                let { isValid, value: x } = uvRatio2(u, v);\n                if (!isValid)\n                    throw new Error(\"Point.fromHex: invalid y coordinate\");\n                const isXOdd = (x & _1n4) === _1n4;\n                const isLastByteOdd = (lastByte & 128) !== 0;\n                if (!zip215 && x === _0n4 && isLastByteOdd)\n                    throw new Error(\"Point.fromHex: x=0 and x_0=1\");\n                if (isLastByteOdd !== isXOdd)\n                    x = modP(-x);\n                return Point.fromAffine({ x, y });\n            }\n            static fromPrivateKey(privKey) {\n                return getExtendedPublicKey(privKey).point;\n            }\n            toRawBytes() {\n                const { x, y } = this.toAffine();\n                const bytes2 = numberToBytesLE(y, Fp2.BYTES);\n                bytes2[bytes2.length - 1] |= x & _1n4 ? 128 : 0;\n                return bytes2;\n            }\n            toHex() {\n                return bytesToHex(this.toRawBytes());\n            }\n        }\n        Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n4, modP(CURVE.Gx * CURVE.Gy));\n        Point.ZERO = new Point(_0n4, _1n4, _1n4, _0n4);\n        const { BASE: G, ZERO: I } = Point;\n        const wnaf = wNAF(Point, nByteLength * 8);\n        function modN(a) {\n            return mod(a, CURVE_ORDER);\n        }\n        function modN_LE(hash) {\n            return modN(bytesToNumberLE(hash));\n        }\n        function getExtendedPublicKey(key) {\n            const len = nByteLength;\n            key = ensureBytes(\"private key\", key, len);\n            const hashed = ensureBytes(\"hashed private key\", cHash(key), 2 * len);\n            const head = adjustScalarBytes2(hashed.slice(0, len));\n            const prefix = hashed.slice(len, 2 * len);\n            const scalar = modN_LE(head);\n            const point = G.multiply(scalar);\n            const pointBytes = point.toRawBytes();\n            return { head, prefix, scalar, point, pointBytes };\n        }\n        function getPublicKey(privKey) {\n            return getExtendedPublicKey(privKey).pointBytes;\n        }\n        function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n            const msg = concatBytes2(...msgs);\n            return modN_LE(cHash(domain(msg, ensureBytes(\"context\", context), !!prehash)));\n        }\n        function sign(msg, privKey, options = {}) {\n            msg = ensureBytes(\"message\", msg);\n            if (prehash)\n                msg = prehash(msg);\n            const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n            const r = hashDomainToScalar(options.context, prefix, msg);\n            const R = G.multiply(r).toRawBytes();\n            const k = hashDomainToScalar(options.context, R, pointBytes, msg);\n            const s = modN(r + k * scalar);\n            assertGE0(s);\n            const res = concatBytes2(R, numberToBytesLE(s, Fp2.BYTES));\n            return ensureBytes(\"result\", res, nByteLength * 2);\n        }\n        const verifyOpts = VERIFY_DEFAULT;\n        function verify(sig, msg, publicKey, options = verifyOpts) {\n            const { context, zip215 } = options;\n            const len = Fp2.BYTES;\n            sig = ensureBytes(\"signature\", sig, 2 * len);\n            msg = ensureBytes(\"message\", msg);\n            if (prehash)\n                msg = prehash(msg);\n            const s = bytesToNumberLE(sig.slice(len, 2 * len));\n            let A, R, SB;\n            try {\n                A = Point.fromHex(publicKey, zip215);\n                R = Point.fromHex(sig.slice(0, len), zip215);\n                SB = G.multiplyUnsafe(s);\n            }\n            catch (error) {\n                return false;\n            }\n            if (!zip215 && A.isSmallOrder())\n                return false;\n            const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n            const RkA = R.add(A.multiplyUnsafe(k));\n            return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n        }\n        G._setWindowSize(8);\n        const utils = {\n            getExtendedPublicKey,\n            // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n            randomPrivateKey: () => randomBytes2(Fp2.BYTES),\n            /**\n             * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n             * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n             * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n             * @param windowSize 2, 4, 8, 16\n             */\n            precompute(windowSize = 8, point = Point.BASE) {\n                point._setWindowSize(windowSize);\n                point.multiply(BigInt(3));\n                return point;\n            }\n        };\n        return {\n            CURVE,\n            getPublicKey,\n            sign,\n            verify,\n            ExtendedPoint: Point,\n            utils\n        };\n    }\n    // ../esm/abstract/montgomery.js\n    var _0n5 = BigInt(0);\n    var _1n5 = BigInt(1);\n    function validateOpts2(curve) {\n        validateObject(curve, {\n            a: \"bigint\"\n        }, {\n            montgomeryBits: \"isSafeInteger\",\n            nByteLength: \"isSafeInteger\",\n            adjustScalarBytes: \"function\",\n            domain: \"function\",\n            powPminus2: \"function\",\n            Gu: \"bigint\"\n        });\n        return Object.freeze({ ...curve });\n    }\n    function montgomery(curveDef) {\n        const CURVE = validateOpts2(curveDef);\n        const { P } = CURVE;\n        const modP = (n) => mod(n, P);\n        const montgomeryBits = CURVE.montgomeryBits;\n        const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n        const fieldLen = CURVE.nByteLength;\n        const adjustScalarBytes2 = CURVE.adjustScalarBytes || ((bytes2) => bytes2);\n        const powPminus2 = CURVE.powPminus2 || ((x) => pow(x, P - BigInt(2), P));\n        function cswap(swap, x_2, x_3) {\n            const dummy = modP(swap * (x_2 - x_3));\n            x_2 = modP(x_2 - dummy);\n            x_3 = modP(x_3 + dummy);\n            return [x_2, x_3];\n        }\n        function assertFieldElement(n) {\n            if (typeof n === \"bigint\" && _0n5 <= n && n < P)\n                return n;\n            throw new Error(\"Expected valid scalar 0 < scalar < CURVE.P\");\n        }\n        const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n        function montgomeryLadder(pointU, scalar) {\n            const u = assertFieldElement(pointU);\n            const k = assertFieldElement(scalar);\n            const x_1 = u;\n            let x_2 = _1n5;\n            let z_2 = _0n5;\n            let x_3 = u;\n            let z_3 = _1n5;\n            let swap = _0n5;\n            let sw;\n            for (let t = BigInt(montgomeryBits - 1); t >= _0n5; t--) {\n                const k_t = k >> t & _1n5;\n                swap ^= k_t;\n                sw = cswap(swap, x_2, x_3);\n                x_2 = sw[0];\n                x_3 = sw[1];\n                sw = cswap(swap, z_2, z_3);\n                z_2 = sw[0];\n                z_3 = sw[1];\n                swap = k_t;\n                const A = x_2 + z_2;\n                const AA = modP(A * A);\n                const B = x_2 - z_2;\n                const BB = modP(B * B);\n                const E = AA - BB;\n                const C = x_3 + z_3;\n                const D = x_3 - z_3;\n                const DA = modP(D * A);\n                const CB = modP(C * B);\n                const dacb = DA + CB;\n                const da_cb = DA - CB;\n                x_3 = modP(dacb * dacb);\n                z_3 = modP(x_1 * modP(da_cb * da_cb));\n                x_2 = modP(AA * BB);\n                z_2 = modP(E * (AA + modP(a24 * E)));\n            }\n            sw = cswap(swap, x_2, x_3);\n            x_2 = sw[0];\n            x_3 = sw[1];\n            sw = cswap(swap, z_2, z_3);\n            z_2 = sw[0];\n            z_3 = sw[1];\n            const z2 = powPminus2(z_2);\n            return modP(x_2 * z2);\n        }\n        function encodeUCoordinate(u) {\n            return numberToBytesLE(modP(u), montgomeryBytes);\n        }\n        function decodeUCoordinate(uEnc) {\n            const u = ensureBytes(\"u coordinate\", uEnc, montgomeryBytes);\n            if (fieldLen === 32)\n                u[31] &= 127;\n            return bytesToNumberLE(u);\n        }\n        function decodeScalar(n) {\n            const bytes2 = ensureBytes(\"scalar\", n);\n            const len = bytes2.length;\n            if (len !== montgomeryBytes && len !== fieldLen)\n                throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${len}`);\n            return bytesToNumberLE(adjustScalarBytes2(bytes2));\n        }\n        function scalarMult(scalar, u) {\n            const pointU = decodeUCoordinate(u);\n            const _scalar = decodeScalar(scalar);\n            const pu = montgomeryLadder(pointU, _scalar);\n            if (pu === _0n5)\n                throw new Error(\"Invalid private or public key received\");\n            return encodeUCoordinate(pu);\n        }\n        const GuBytes = encodeUCoordinate(CURVE.Gu);\n        function scalarMultBase(scalar) {\n            return scalarMult(scalar, GuBytes);\n        }\n        return {\n            scalarMult,\n            scalarMultBase,\n            getSharedSecret: (privateKey, publicKey) => scalarMult(privateKey, publicKey),\n            getPublicKey: (privateKey) => scalarMultBase(privateKey),\n            utils: { randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength) },\n            GuBytes\n        };\n    }\n    // ../esm/ed25519.js\n    var ED25519_P = BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\");\n    var ED25519_SQRT_M1 = BigInt(\"19681161376707505956807079304988542015446066515923890162744021073123829784752\");\n    var _0n6 = BigInt(0);\n    var _1n6 = BigInt(1);\n    var _2n4 = BigInt(2);\n    var _5n2 = BigInt(5);\n    var _10n = BigInt(10);\n    var _20n = BigInt(20);\n    var _40n = BigInt(40);\n    var _80n = BigInt(80);\n    function ed25519_pow_2_252_3(x) {\n        const P = ED25519_P;\n        const x2 = x * x % P;\n        const b2 = x2 * x % P;\n        const b4 = pow2(b2, _2n4, P) * b2 % P;\n        const b5 = pow2(b4, _1n6, P) * x % P;\n        const b10 = pow2(b5, _5n2, P) * b5 % P;\n        const b20 = pow2(b10, _10n, P) * b10 % P;\n        const b40 = pow2(b20, _20n, P) * b20 % P;\n        const b80 = pow2(b40, _40n, P) * b40 % P;\n        const b160 = pow2(b80, _80n, P) * b80 % P;\n        const b240 = pow2(b160, _80n, P) * b80 % P;\n        const b250 = pow2(b240, _10n, P) * b10 % P;\n        const pow_p_5_8 = pow2(b250, _2n4, P) * x % P;\n        return { pow_p_5_8, b2 };\n    }\n    function adjustScalarBytes(bytes2) {\n        bytes2[0] &= 248;\n        bytes2[31] &= 127;\n        bytes2[31] |= 64;\n        return bytes2;\n    }\n    function uvRatio(u, v) {\n        const P = ED25519_P;\n        const v3 = mod(v * v * v, P);\n        const v7 = mod(v3 * v3 * v, P);\n        const pow3 = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n        let x = mod(u * v3 * pow3, P);\n        const vx2 = mod(v * x * x, P);\n        const root1 = x;\n        const root2 = mod(x * ED25519_SQRT_M1, P);\n        const useRoot1 = vx2 === u;\n        const useRoot2 = vx2 === mod(-u, P);\n        const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P);\n        if (useRoot1)\n            x = root1;\n        if (useRoot2 || noRoot)\n            x = root2;\n        if (isNegativeLE(x, P))\n            x = mod(-x, P);\n        return { isValid: useRoot1 || useRoot2, value: x };\n    }\n    var Fp = Field(ED25519_P, void 0, true);\n    var ed25519Defaults = {\n        // Param: a\n        a: BigInt(-1),\n        // Fp.create(-1) is proper; our way still works and is faster\n        // d is equal to -121665/121666 over finite field.\n        // Negative number is P - number, and division is invert(number, P)\n        d: BigInt(\"37095705934669439343138083508754565189542113879843219016388785533085940283555\"),\n        // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n        Fp,\n        // Subgroup order: how many points curve has\n        // 2n**252n + 27742317777372353535851937790883648493n;\n        n: BigInt(\"7237005577332262213973186563042994240857116359379907606001950938285454250989\"),\n        // Cofactor\n        h: BigInt(8),\n        // Base point (x, y) aka generator point\n        Gx: BigInt(\"15112221349535400772501151409588531511454012693041857206046113283949847762202\"),\n        Gy: BigInt(\"46316835694926478169428394003475163141307993866256225615783033603165251855960\"),\n        hash: sha512,\n        randomBytes,\n        adjustScalarBytes,\n        // dom2\n        // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n        // Constant-time, u/√v\n        uvRatio\n    };\n    function ed25519_domain(data, ctx, phflag) {\n        if (ctx.length > 255)\n            throw new Error(\"Context is too big\");\n        return concatBytes(utf8ToBytes(\"SigEd25519 no Ed25519 collisions\"), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n    }\n    var ed25519ctx = /* @__PURE__ */ twistedEdwards({\n        ...ed25519Defaults,\n        domain: ed25519_domain\n    });\n    var ed25519ph = /* @__PURE__ */ twistedEdwards({\n        ...ed25519Defaults,\n        domain: ed25519_domain,\n        prehash: sha512\n    });\n    var x25519 = /* @__PURE__ */ (() => montgomery({\n        P: ED25519_P,\n        a: BigInt(486662),\n        montgomeryBits: 255,\n        // n is 253 bits\n        nByteLength: 32,\n        Gu: BigInt(9),\n        powPminus2: (x) => {\n            const P = ED25519_P;\n            const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n            return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n        },\n        adjustScalarBytes,\n        randomBytes\n    }))();\n    var ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8);\n    var ELL2_C2 = Fp.pow(_2n4, ELL2_C1);\n    var ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE));\n    var ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8);\n    var ELL2_J = BigInt(486662);\n    var ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664)));\n    var SQRT_AD_MINUS_ONE = BigInt(\"25063068953384623474111414158702152701244531502492656460079210482610430750235\");\n    var INVSQRT_A_MINUS_D = BigInt(\"54469307008909316920995813868745141605393597292927456921205312896311721017578\");\n    var ONE_MINUS_D_SQ = BigInt(\"1159843021668779879193775521855586647937357759715417654439879720876111806838\");\n    var D_MINUS_ONE_SQ = BigInt(\"40440834346308536858101042469323190826248399146238708352240133220865137265952\");\n    var MAX_255B = BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n    return __toCommonJS(input_exports);\n})();\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n/*! Bundled license information:\n\n@noble/hashes/esm/utils.js:\n  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\n*/\nexport const x25519 = nobleCurves.x25519;\n","// @ts-ignore[untyped-import]\nimport { x25519 } from \"../internal/noble-curves-1.3.0.js\";\nimport { random } from \"../random/Randomizer.js\";\n// The number of bytes for a private key in the curve\n// the byte length of the modulus\nconst X25519_N_BYTE_LENGTH = 32;\n/**\n * @return randomly generated X25519 key pair\n */\nexport function generateEccKeyPair() {\n    // noble-curves appears to clamp the private key when using it, but not when generating it, so for safety,\n    // we do not want to store it un-clamped in case we use a different implementation later\n    const privateKey = clampPrivateKey(random.generateRandomData(X25519_N_BYTE_LENGTH));\n    const publicKey = derivePublicKey(privateKey);\n    return {\n        privateKey,\n        publicKey,\n    };\n}\n/**\n * Derive a shared secret from the sender's private key and the recipient's public key to encrypt a message\n * @param senderIdentityPrivateKey\tthe sender's private identity key\n * @param ephemeralPrivateKey  the ephemeral private key generated by the sender for just one message (to one or more recipients)\n * @param recipientIdentityPublicKey the recipient's public identity key\n * @return the shared secrets\n */\nexport function eccEncapsulate(senderIdentityPrivateKey, ephemeralPrivateKey, recipientIdentityPublicKey) {\n    const ephemeralSharedSecret = generateSharedSecret(ephemeralPrivateKey, recipientIdentityPublicKey);\n    const authSharedSecret = generateSharedSecret(senderIdentityPrivateKey, recipientIdentityPublicKey);\n    return { ephemeralSharedSecret, authSharedSecret };\n}\n/**\n * Derive a shared secret from the recipient's private key and the sender's public key to decrypt a message\n * @param senderIdentityPublicKey\tthe sender's public identity key\n * @param ephemeralPublicKey  the ephemeral public key generated by the sender for just one message (to one or more recipients)\n * @param recipientIdentityPrivateKey the recipient's private identity key\n * @return shared secret and the sender's public key\n */\nexport function eccDecapsulate(senderIdentityPublicKey, ephemeralPublicKey, recipientIdentityPrivateKey) {\n    const ephemeralSharedSecret = generateSharedSecret(recipientIdentityPrivateKey, ephemeralPublicKey);\n    const authSharedSecret = generateSharedSecret(recipientIdentityPrivateKey, senderIdentityPublicKey);\n    return { ephemeralSharedSecret, authSharedSecret };\n}\n/**\n * Diffie-Hellman key exchange; works by combining one party's private key and the other party's public key to form a shared secret between both parties\n */\nfunction generateSharedSecret(localPrivateKey, remotePublicKey) {\n    const sharedSecret = x25519.getSharedSecret(localPrivateKey, remotePublicKey);\n    // if every byte somehow happens to be 0, we can't use this as a secret; this is astronomically unlikely to happen by chance\n    if (sharedSecret.every((val) => val === 0)) {\n        throw new Error(\"can't get shared secret: bad key inputs\");\n    }\n    return sharedSecret;\n}\n// see https://www.jcraige.com/an-explainer-on-ed25519-clamping for an explanation on why we do this\nfunction clampPrivateKey(privateKey) {\n    // First, we want to unset the highest bit but set the second-highest bit to 1. This prevents potential timing and brute-force attacks, respectively.\n    privateKey[privateKey.length - 1] = (privateKey[privateKey.length - 1] & 0b01111111) | 0b01000000;\n    // Then, we want to guarantee our scalar is a multiple of 8, our cofactor, to protect against small-subgroup attacks per RFC 2785 which could leak key data!\n    privateKey[0] &= 0b11111000;\n    return privateKey;\n}\nfunction derivePublicKey(privateKey) {\n    return x25519.getPublicKey(privateKey);\n}\n","// v2.2\n// tutao(map): slightly modified => made synchronous, removed unused code\nfunction bCrypt() {\n    this.GENSALT_DEFAULT_LOG2_ROUNDS = 10;\n    this.BCRYPT_SALT_LEN = 16;\n    this.BLOWFISH_NUM_ROUNDS = 16;\n    // commented next line because it is not used\n    //\tthis.PRNG = Clipperz.Crypto.PRNG.defaultRandomGenerator();\n    this.MAX_EXECUTION_TIME = 100;\n    this.P_orig = [\n        0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822,\n        0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377,\n        0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5,\n        0xb5470917, 0x9216d5d9, 0x8979fb1b\n    ];\n    this.S_orig = [\n        0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed,\n        0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7,\n        0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3,\n        0xf4933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,\n        0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023,\n        0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,\n        0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda,\n        0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,\n        0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af,\n        0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6,\n        0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381,\n        0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n        0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d,\n        0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5,\n        0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a,\n        0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,\n        0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c,\n        0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,\n        0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3,\n        0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,\n        0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724,\n        0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b,\n        0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd,\n        0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n        0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f,\n        0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd,\n        0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39,\n        0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,\n        0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df,\n        0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,\n        0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e,\n        0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,\n        0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98,\n        0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565,\n        0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341,\n        0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n        0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0,\n        0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64,\n        0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191,\n        0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,\n        0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0,\n        0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,\n        0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5,\n        0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,\n        0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b,\n        0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f,\n        0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968,\n        0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n        0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5,\n        0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6,\n        0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799,\n        0x6e85076a, 0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,\n        0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71,\n        0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29,\n        0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6,\n        0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,\n        0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f,\n        0x3ebaefc9, 0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286,\n        0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec,\n        0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\n        0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9,\n        0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,\n        0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e,\n        0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,\n        0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290,\n        0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810,\n        0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6,\n        0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,\n        0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847,\n        0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451,\n        0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6,\n        0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\n        0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570,\n        0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,\n        0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978,\n        0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,\n        0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708,\n        0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883,\n        0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185,\n        0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,\n        0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830,\n        0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239,\n        0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab,\n        0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\n        0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19,\n        0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,\n        0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1,\n        0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,\n        0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef,\n        0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3,\n        0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15,\n        0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,\n        0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2,\n        0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492,\n        0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d, 0x1462b174,\n        0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\n        0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759,\n        0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,\n        0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc,\n        0x800bcadc, 0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,\n        0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465,\n        0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a,\n        0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c,\n        0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,\n        0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e,\n        0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af,\n        0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0,\n        0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\n        0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462,\n        0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c,\n        0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399,\n        0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,\n        0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74,\n        0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397,\n        0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7,\n        0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,\n        0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802,\n        0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22,\n        0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4,\n        0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\n        0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2,\n        0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1,\n        0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c,\n        0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,\n        0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341,\n        0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8,\n        0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b,\n        0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,\n        0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88,\n        0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979,\n        0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc,\n        0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\n        0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659,\n        0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f,\n        0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8,\n        0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,\n        0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be,\n        0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2,\n        0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255,\n        0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,\n        0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1,\n        0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09,\n        0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025,\n        0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\n        0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01,\n        0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641,\n        0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa,\n        0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,\n        0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409,\n        0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9,\n        0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3,\n        0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,\n        0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234,\n        0x92638212, 0x670efa8e, 0x406000e0, 0x3a39ce37, 0xd3faf5cf,\n        0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740,\n        0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n        0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f,\n        0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d,\n        0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8,\n        0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,\n        0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba,\n        0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,\n        0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69,\n        0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,\n        0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a,\n        0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b,\n        0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6, 0x47b0acfd,\n        0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n        0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4,\n        0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2,\n        0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb,\n        0x26dcf319, 0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,\n        0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751,\n        0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,\n        0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369,\n        0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,\n        0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd,\n        0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45,\n        0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae,\n        0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n        0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08,\n        0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d,\n        0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b,\n        0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,\n        0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e,\n        0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,\n        0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c,\n        0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,\n        0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361,\n        0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c,\n        0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be,\n        0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n        0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d,\n        0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891,\n        0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5,\n        0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,\n        0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc, 0xde966292,\n        0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,\n        0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2,\n        0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,\n        0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c,\n        0xf746ce76, 0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8,\n        0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4,\n        0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n        0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6\n    ];\n    this.bf_crypt_ciphertext = [\n        0x4f727068, 0x65616e42, 0x65686f6c,\n        0x64657253, 0x63727944, 0x6f756274\n    ];\n    this.base64_code = [\n        '.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\n        'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\n        'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\n        'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n        'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8',\n        '9'\n    ];\n    this.index_64 = [\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1,\n        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1,\n        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n        21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28, 29, 30, 31,\n        32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n        49, 50, 51, 52, 53, -1, -1, -1, -1, -1\n    ];\n    this.P;\n    this.S;\n    this.lr;\n    this.offp;\n}\nbCrypt.prototype.getByte = function (c) {\n    var ret = 0;\n    try {\n        var b = c.charCodeAt(0);\n    }\n    catch (err) {\n        b = c;\n    }\n    if (b > 127) {\n        return -128 + (b % 128);\n    }\n    else {\n        return b;\n    }\n};\nbCrypt.prototype.encode_base64 = function (d, len) {\n    var off = 0;\n    var rs = [];\n    var c1;\n    var c2;\n    if (len <= 0 || len > d.length) {\n        throw \"Invalid len\";\n    }\n    while (off < len) {\n        c1 = d[off++] & 0xff;\n        rs.push(this.base64_code[(c1 >> 2) & 0x3f]);\n        c1 = (c1 & 0x03) << 4;\n        if (off >= len) {\n            rs.push(this.base64_code[c1 & 0x3f]);\n            break;\n        }\n        c2 = d[off++] & 0xff;\n        c1 |= (c2 >> 4) & 0x0f;\n        rs.push(this.base64_code[c1 & 0x3f]);\n        c1 = (c2 & 0x0f) << 2;\n        if (off >= len) {\n            rs.push(this.base64_code[c1 & 0x3f]);\n            break;\n        }\n        c2 = d[off++] & 0xff;\n        c1 |= (c2 >> 6) & 0x03;\n        rs.push(this.base64_code[c1 & 0x3f]);\n        rs.push(this.base64_code[c2 & 0x3f]);\n    }\n    return rs.join('');\n};\nbCrypt.prototype.char64 = function (x) {\n    var code = x.charCodeAt(0);\n    if (code < 0 || code > this.index_64.length) {\n        return -1;\n    }\n    return this.index_64[code];\n};\nbCrypt.prototype.decode_base64 = function (s, maxolen) {\n    var off = 0;\n    var slen = s.length;\n    var olen = 0;\n    var rs = [];\n    var c1, c2, c3, c4, o;\n    if (maxolen <= 0) {\n        throw \"Invalid maxolen\";\n    }\n    while (off < slen - 1 && olen < maxolen) {\n        c1 = this.char64(s.charAt(off++));\n        c2 = this.char64(s.charAt(off++));\n        if (c1 == -1 || c2 == -1) {\n            break;\n        }\n        o = this.getByte(c1 << 2);\n        o |= (c2 & 0x30) >> 4;\n        rs.push(String.fromCharCode(o));\n        if (++olen >= maxolen || off >= slen) {\n            break;\n        }\n        c3 = this.char64(s.charAt(off++));\n        if (c3 == -1) {\n            break;\n        }\n        o = this.getByte((c2 & 0x0f) << 4);\n        o |= (c3 & 0x3c) >> 2;\n        rs.push(String.fromCharCode(o));\n        if (++olen >= maxolen || off >= slen) {\n            break;\n        }\n        c4 = this.char64(s.charAt(off++));\n        o = this.getByte((c3 & 0x03) << 6);\n        o |= c4;\n        rs.push(String.fromCharCode(o));\n        ++olen;\n    }\n    var ret = [];\n    for (off = 0; off < olen; off++) {\n        ret.push(this.getByte(rs[off]));\n    }\n    return ret;\n};\nbCrypt.prototype.encipher = function (lr, off) {\n    var i;\n    var n;\n    var l = lr[off];\n    var r = lr[off + 1];\n    l ^= this.P[0];\n    for (i = 0; i <= this.BLOWFISH_NUM_ROUNDS - 2;) {\n        // Feistel substitution on left word\n        n = this.S[(l >> 24) & 0xff];\n        n += this.S[0x100 | ((l >> 16) & 0xff)];\n        n ^= this.S[0x200 | ((l >> 8) & 0xff)];\n        n += this.S[0x300 | (l & 0xff)];\n        r ^= n ^ this.P[++i];\n        // Feistel substitution on right word\n        n = this.S[(r >> 24) & 0xff];\n        n += this.S[0x100 | ((r >> 16) & 0xff)];\n        n ^= this.S[0x200 | ((r >> 8) & 0xff)];\n        n += this.S[0x300 | (r & 0xff)];\n        l ^= n ^ this.P[++i];\n    }\n    lr[off] = r ^ this.P[this.BLOWFISH_NUM_ROUNDS + 1];\n    lr[off + 1] = l;\n};\nbCrypt.prototype.streamtoword = function (data, offp) {\n    var i;\n    var word = 0;\n    var off = offp;\n    for (i = 0; i < 4; i++) {\n        word = (word << 8) | (data[off] & 0xff);\n        off = (off + 1) % data.length;\n    }\n    this.offp = off;\n    return word;\n};\nbCrypt.prototype.init_key = function () {\n    this.P = this.P_orig.slice();\n    this.S = this.S_orig.slice();\n};\nbCrypt.prototype.key = function (key) {\n    var i;\n    this.offp = 0;\n    var lr = new Array(0x00000000, 0x00000000);\n    var plen = this.P.length;\n    var slen = this.S.length;\n    for (i = 0; i < plen; i++) {\n        this.P[i] = this.P[i] ^ this.streamtoword(key, this.offp);\n    }\n    for (i = 0; i < plen; i += 2) {\n        this.encipher(lr, 0);\n        this.P[i] = lr[0];\n        this.P[i + 1] = lr[1];\n    }\n    for (i = 0; i < slen; i += 2) {\n        this.encipher(lr, 0);\n        this.S[i] = lr[0];\n        this.S[i + 1] = lr[1];\n    }\n};\nbCrypt.prototype.ekskey = function (data, key) {\n    var i;\n    this.offp = 0;\n    var lr = new Array(0x00000000, 0x00000000);\n    var plen = this.P.length;\n    var slen = this.S.length;\n    for (i = 0; i < plen; i++)\n        this.P[i] = this.P[i] ^ this.streamtoword(key, this.offp);\n    this.offp = 0;\n    for (i = 0; i < plen; i += 2) {\n        lr[0] ^= this.streamtoword(data, this.offp);\n        lr[1] ^= this.streamtoword(data, this.offp);\n        this.encipher(lr, 0);\n        this.P[i] = lr[0];\n        this.P[i + 1] = lr[1];\n    }\n    for (i = 0; i < slen; i += 2) {\n        lr[0] ^= this.streamtoword(data, this.offp);\n        lr[1] ^= this.streamtoword(data, this.offp);\n        this.encipher(lr, 0);\n        this.S[i] = lr[0];\n        this.S[i + 1] = lr[1];\n    }\n};\n// removed arguments.callee from original version because it is not allowed in strict mode\nbCrypt.prototype.crypt_raw = function (password, salt, log_rounds) {\n    var rounds;\n    var j;\n    var cdata = this.bf_crypt_ciphertext.slice();\n    var clen = cdata.length;\n    var one_percent;\n    if (log_rounds < 4 || log_rounds > 31) {\n        throw \"Bad number of rounds\";\n    }\n    if (salt.length != this.BCRYPT_SALT_LEN) {\n        throw \"Bad _salt length\";\n    }\n    rounds = 1 << log_rounds;\n    one_percent = Math.floor(rounds / 100) + 1;\n    this.init_key();\n    this.ekskey(salt, password);\n    var obj = this;\n    var i = 0;\n    var roundFunction = null;\n    roundFunction = function () {\n        if (i < rounds) {\n            var start = new Date();\n            for (; i < rounds;) {\n                i = i + 1;\n                obj.key(password);\n                obj.key(salt);\n            }\n            return roundFunction();\n        }\n        else {\n            for (i = 0; i < 64; i++) {\n                for (j = 0; j < (clen >> 1); j++) {\n                    obj.encipher(cdata, j << 1);\n                }\n            }\n            var ret = [];\n            for (i = 0; i < clen; i++) {\n                ret.push(obj.getByte((cdata[i] >> 24) & 0xff));\n                ret.push(obj.getByte((cdata[i] >> 16) & 0xff));\n                ret.push(obj.getByte((cdata[i] >> 8) & 0xff));\n                ret.push(obj.getByte(cdata[i] & 0xff));\n            }\n            return ret;\n        }\n    };\n    return roundFunction();\n};\nexport default bCrypt;\n","export var KeyLength;\n(function (KeyLength) {\n    KeyLength[\"b128\"] = \"128\";\n    KeyLength[\"b256\"] = \"256\";\n})(KeyLength || (KeyLength = {}));\n","// @ts-ignore[untyped-import]\nimport bCrypt from \"../internal/bCrypt.js\";\nimport { random } from \"../random/Randomizer.js\";\nimport { stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\";\nimport { uint8ArrayToBitArray } from \"../misc/Utils.js\";\nimport { KeyLength } from \"../misc/Constants.js\";\nimport { CryptoError } from \"../misc/CryptoError.js\";\nimport { sha256Hash } from \"./Sha256.js\";\nconst logRounds = 8; // pbkdf2 number of iterations\n/**\n * Create a 128 bit random _salt value.\n * return _salt 128 bit of random data, encoded as a hex string.\n */\nexport function generateRandomSalt() {\n    return random.generateRandomData(128 / 8);\n}\n/**\n * Create a 128 bit symmetric key from the given passphrase.\n * @param passphrase The passphrase to use for key generation as utf8 string.\n * @param salt 16 bytes of random data\n * @param keyLengthType Defines the length of the key that shall be generated.\n * @return resolved with the key\n */\nexport function generateKeyFromPassphrase(passphrase, salt, keyLengthType) {\n    // hash the password first to avoid login with multiples of a password, i.e. \"hello\" and \"hellohello\" produce the same key if the same _salt is used\n    let passphraseBytes = sha256Hash(stringToUtf8Uint8Array(passphrase));\n    let bytes = crypt_raw(passphraseBytes, salt, logRounds);\n    if (keyLengthType === KeyLength.b128) {\n        return uint8ArrayToBitArray(bytes.slice(0, 16));\n    }\n    else {\n        return uint8ArrayToBitArray(sha256Hash(bytes));\n    }\n}\nfunction crypt_raw(passphraseBytes, saltBytes, logRounds) {\n    try {\n        return _signedBytesToUint8Array(new bCrypt().crypt_raw(_uint8ArrayToSignedBytes(passphraseBytes), _uint8ArrayToSignedBytes(saltBytes), logRounds));\n    }\n    catch (e) {\n        const error = e;\n        throw new CryptoError(error.message, error);\n    }\n}\n/**\n * Converts an array of signed byte values (-128 to 127) to an Uint8Array (values 0 to 255).\n * @param signedBytes The signed byte values.\n * @return The unsigned byte values.\n */\nfunction _signedBytesToUint8Array(signedBytes) {\n    return new Uint8Array(new Int8Array(signedBytes));\n}\n/**\n * Converts an uint8Array (value 0 to 255) to an Array with unsigned bytes (-128 to 127).\n * @param unsignedBytes The unsigned byte values.\n * @return The signed byte values.\n */\nfunction _uint8ArrayToSignedBytes(unsignedBytes) {\n    return Array.from(new Uint8Array(new Int8Array(unsignedBytes)));\n}\n","import { callWebAssemblyFunctionWithArguments, mutableSecureFree, secureFree } from \"@tutao/tutanota-utils\";\nimport { CryptoError } from \"../../misc/CryptoError.js\";\n/**\n * Number of random bytes required for a Kyber operation\n */\nexport const KYBER_RAND_AMOUNT_OF_ENTROPY = 64;\nconst KYBER_ALGORITHM = \"Kyber1024\";\nconst KYBER_K = 4;\nconst KYBER_POLYBYTES = 384;\nexport const KYBER_POLYVECBYTES = KYBER_K * KYBER_POLYBYTES;\nexport const KYBER_SYMBYTES = 32;\nconst OQS_KEM_kyber_1024_length_public_key = 1568;\nconst OQS_KEM_kyber_1024_length_secret_key = 3168;\nconst OQS_KEM_kyber_1024_length_ciphertext = 1568;\nconst OQS_KEM_kyber_1024_length_shared_secret = 32;\n/**\n * @returns a new random kyber key pair.\n */\nexport function generateKeyPair(kyberWasm, randomizer) {\n    const OQS_KEM = createKem(kyberWasm);\n    try {\n        fillEntropyPool(kyberWasm, randomizer);\n        const publicKey = new Uint8Array(OQS_KEM_kyber_1024_length_public_key);\n        const privateKey = new Uint8Array(OQS_KEM_kyber_1024_length_secret_key);\n        const result = callWebAssemblyFunctionWithArguments(kyberWasm.OQS_KEM_keypair, kyberWasm, OQS_KEM, mutableSecureFree(publicKey), mutableSecureFree(privateKey));\n        if (result != 0) {\n            throw new Error(`OQS_KEM_keypair returned ${result}`);\n        }\n        return {\n            publicKey: { raw: publicKey },\n            privateKey: { raw: privateKey },\n        };\n    }\n    finally {\n        freeKem(kyberWasm, OQS_KEM);\n    }\n}\n/**\n * @param kyberWasm the WebAssembly/JsFallback module that implements our kyber primitives (liboqs)\n * @param publicKey the public key to encapsulate with\n * @param randomizer our randomizer that is used to the native library with entropy\n * @return the plaintext secret key and the encapsulated key for use with AES or as input to a KDF\n */\nexport function encapsulate(kyberWasm, publicKey, randomizer) {\n    if (publicKey.raw.length != OQS_KEM_kyber_1024_length_public_key) {\n        throw new CryptoError(`Invalid public key length; expected ${OQS_KEM_kyber_1024_length_public_key}, got ${publicKey.raw.length}`);\n    }\n    const OQS_KEM = createKem(kyberWasm);\n    try {\n        fillEntropyPool(kyberWasm, randomizer);\n        const ciphertext = new Uint8Array(OQS_KEM_kyber_1024_length_ciphertext);\n        const sharedSecret = new Uint8Array(OQS_KEM_kyber_1024_length_shared_secret);\n        const result = callWebAssemblyFunctionWithArguments(kyberWasm.OQS_KEM_encaps, kyberWasm, OQS_KEM, mutableSecureFree(ciphertext), mutableSecureFree(sharedSecret), mutableSecureFree(publicKey.raw));\n        if (result != 0) {\n            throw new Error(`OQS_KEM_encaps returned ${result}`);\n        }\n        return { ciphertext, sharedSecret };\n    }\n    finally {\n        freeKem(kyberWasm, OQS_KEM);\n    }\n}\n/**\n * @param kyberWasm the WebAssembly/JsFallback module that implements our kyber primitives (liboqs)\n * @param privateKey      the corresponding private key of the public key with which the encapsulatedKey was encapsulated with\n * @param ciphertext the ciphertext output of encapsulate()\n * @return the plaintext secret key\n */\nexport function decapsulate(kyberWasm, privateKey, ciphertext) {\n    if (privateKey.raw.length != OQS_KEM_kyber_1024_length_secret_key) {\n        throw new CryptoError(`Invalid private key length; expected ${OQS_KEM_kyber_1024_length_secret_key}, got ${privateKey.raw.length}`);\n    }\n    if (ciphertext.length != OQS_KEM_kyber_1024_length_ciphertext) {\n        throw new CryptoError(`Invalid ciphertext length; expected ${OQS_KEM_kyber_1024_length_ciphertext}, got ${ciphertext.length}`);\n    }\n    const OQS_KEM = createKem(kyberWasm);\n    try {\n        const sharedSecret = new Uint8Array(OQS_KEM_kyber_1024_length_shared_secret);\n        const result = callWebAssemblyFunctionWithArguments(kyberWasm.OQS_KEM_decaps, kyberWasm, OQS_KEM, mutableSecureFree(sharedSecret), secureFree(ciphertext), secureFree(privateKey.raw));\n        if (result != 0) {\n            throw new Error(`OQS_KEM_decaps returned ${result}`);\n        }\n        return sharedSecret;\n    }\n    finally {\n        freeKem(kyberWasm, OQS_KEM);\n    }\n}\nfunction freeKem(kyberWasm, OQS_KEM) {\n    callWebAssemblyFunctionWithArguments(kyberWasm.OQS_KEM_free, kyberWasm, OQS_KEM);\n}\n// The returned pointer needs to be freed once not needed anymore by the caller\nfunction createKem(kyberWasm) {\n    return callWebAssemblyFunctionWithArguments(kyberWasm.OQS_KEM_new, kyberWasm, KYBER_ALGORITHM);\n}\n// Add bytes externally to the random number generator\nfunction fillEntropyPool(exports, randomizer) {\n    const entropyAmount = randomizer.generateRandomData(KYBER_RAND_AMOUNT_OF_ENTROPY);\n    const remaining = callWebAssemblyFunctionWithArguments(exports.TUTA_inject_entropy, exports, entropyAmount, entropyAmount.length);\n    if (remaining < 0) {\n        console.warn(`tried to copy too much entropy: overflowed with ${-remaining} bytes; fix RAND_AMOUNT_OF_ENTROPY/generateRandomData to silence this`);\n    }\n}\n","import { byteArraysToBytes, bytesToByteArrays, concat } from \"@tutao/tutanota-utils\";\nimport { KYBER_POLYVECBYTES, KYBER_SYMBYTES } from \"./Kyber.js\";\n/**\n * Encodes the kyber private key into a byte array in the following format.\n * | length (2 Byte) | privateKey.S (n Byte)   |\n * | length (2 Byte) | privateKey.HPK (n Byte) |\n * | length (2 Byte) | privateKey.Nonce (n Byte) |\n * | length (2 Byte) | privateKey.T (n Byte) |\n * | length (2 Byte) | privateKey.Rho (n Byte) |\n */\nexport function kyberPrivateKeyToBytes(key) {\n    const keyBytes = key.raw;\n    //liboqs: s, t, rho, hpk, nonce\n    //tuta encoded: s, hpk, nonce, t, rho\n    const s = keyBytes.slice(0, KYBER_POLYVECBYTES);\n    const t = keyBytes.slice(KYBER_POLYVECBYTES, 2 * KYBER_POLYVECBYTES);\n    const rho = keyBytes.slice(2 * KYBER_POLYVECBYTES, 2 * KYBER_POLYVECBYTES + KYBER_SYMBYTES);\n    const hpk = keyBytes.slice(2 * KYBER_POLYVECBYTES + KYBER_SYMBYTES, 2 * KYBER_POLYVECBYTES + 2 * KYBER_SYMBYTES);\n    const nonce = keyBytes.slice(2 * KYBER_POLYVECBYTES + 2 * KYBER_SYMBYTES, 2 * KYBER_POLYVECBYTES + 3 * KYBER_SYMBYTES);\n    return byteArraysToBytes([s, hpk, nonce, t, rho]);\n}\n/**\n * Encodes the kyber public key into a byte array in the following format.\n * | length (2 Byte) | publicKey.T (n Byte)  |\n * | length (2 Byte) | publicKey.Rho (n Byte) |\n */\nexport function kyberPublicKeyToBytes(key) {\n    const keyBytes = key.raw;\n    const t = keyBytes.slice(0, KYBER_POLYVECBYTES);\n    const rho = keyBytes.slice(KYBER_POLYVECBYTES, KYBER_POLYVECBYTES + KYBER_SYMBYTES);\n    return byteArraysToBytes([t, rho]);\n}\n/**\n * Inverse of publicKeyToBytes\n */\nexport function bytesToKyberPublicKey(encodedPublicKey) {\n    const keyComponents = bytesToByteArrays(encodedPublicKey, 2);\n    // key is expected by oqs in the same order t, rho\n    return { raw: concat(...keyComponents) };\n}\n/**\n * Inverse of privateKeyToBytes\n */\nexport function bytesToKyberPrivateKey(encodedPrivateKey) {\n    const keyComponents = bytesToByteArrays(encodedPrivateKey, 5);\n    const s = keyComponents[0];\n    const hpk = keyComponents[1];\n    const nonce = keyComponents[2];\n    const t = keyComponents[3];\n    const rho = keyComponents[4];\n    // key is expected by oqs in this order (vs how we encode it on the server): s, t, rho, hpk, nonce\n    return { raw: concat(s, t, rho, hpk, nonce) };\n}\n","import { callWebAssemblyFunctionWithArguments, mutableSecureFree, secureFree, stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\";\nimport { uint8ArrayToBitArray } from \"../../misc/Utils.js\";\n// Per OWASP's recommendations @ https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\nexport const ARGON2ID_ITERATIONS = 4;\nexport const ARGON2ID_MEMORY_IN_KiB = 32 * 1024;\nexport const ARGON2ID_PARALLELISM = 1;\nexport const ARGON2ID_KEY_LENGTH = 32;\n/**\n * Create a 256-bit symmetric key from the given passphrase.\n * @param argon2 argon2 module exports\n * @param pass The passphrase to use for key generation as utf8 string.\n * @param salt 16 bytes of random data\n * @return resolved with the key\n */\nexport async function generateKeyFromPassphrase(argon2, pass, salt) {\n    const hash = await argon2idHashRaw(argon2, ARGON2ID_ITERATIONS, ARGON2ID_MEMORY_IN_KiB, ARGON2ID_PARALLELISM, stringToUtf8Uint8Array(pass), salt, ARGON2ID_KEY_LENGTH);\n    return uint8ArrayToBitArray(hash);\n}\nasync function argon2idHashRaw(argon2, timeCost, memoryCost, parallelism, password, salt, hashLength) {\n    const hash = new Uint8Array(hashLength);\n    const result = callWebAssemblyFunctionWithArguments(argon2.argon2id_hash_raw, argon2, timeCost, memoryCost, parallelism, secureFree(password), password.length, salt, salt.length, mutableSecureFree(hash), hash.length);\n    if (result !== 0) {\n        // If you hit this, refer to argon.h (look for Argon2_ErrorCodes) for a description of what it means. It's likely an issue with one of your inputs.\n        //\n        // Note: If you got ARGON2_MEMORY_ALLOCATION_ERROR (-22), you probably gave too big of a memory cost. You need to recompile argon2.wasm to support more memory.\n        throw new Error(`argon2id_hash_raw returned ${result}`);\n    }\n    return hash;\n}\n","import { random } from \"./Randomizer.js\";\n/**\n * This is the adapter to the PRNG interface required by JSBN.\n * @constructor\n */\nexport class SecureRandom {\n    /**\n     * Only this function is used by jsbn for getting random bytes. Each byte is a value between 0 and 255.\n     * @param array An array to fill with random bytes. The length of the array defines the number of bytes to create.\n     */\n    nextBytes(array) {\n        let bytes = random.generateRandomData(array.length);\n        for (let i = 0; i < array.length; i++) {\n            array[i] = bytes[i];\n        }\n    }\n}\n","import { SecureRandom } from \"../random/SecureRandom.js\";\n// Copyright (c) 2005  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n// Basic JavaScript BN library - subset useful for RSA encryption.\n// Bits per digit\nvar dbits;\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = (canary & 0xffffff) == 0xefcafe;\n// (public) Constructor\n// tutao: a = bitlength (1024)\n//        b = number of miller rabin test * 2\n//        c = SecureRandom\nexport function BigInteger(a, b, c) {\n    if (a != null) {\n        if (\"number\" == typeof a) {\n            this.fromNumber(a, b, c);\n        }\n        else if (b == null && \"string\" != typeof a) {\n            this.fromString(a, 256);\n        }\n        else {\n            this.fromString(a, b);\n        }\n    }\n}\n// return new, unset BigInteger\nfunction nbi() {\n    return new BigInteger(null);\n}\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n    while (--n >= 0) {\n        var v = x * this[i++] + w[j] + c;\n        c = Math.floor(v / 0x4000000);\n        w[j++] = v & 0x3ffffff;\n    }\n    return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n    var xl = x & 0x7fff, xh = x >> 15;\n    while (--n >= 0) {\n        var l = this[i] & 0x7fff;\n        var h = this[i++] >> 15;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n        w[j++] = l & 0x3fffffff;\n    }\n    return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n    var xl = x & 0x3fff, xh = x >> 14;\n    while (--n >= 0) {\n        var l = this[i] & 0x3fff;\n        var h = this[i++] >> 14;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n        c = (l >> 28) + (m >> 14) + xh * h;\n        w[j++] = l & 0xfffffff;\n    }\n    return c;\n}\nif (j_lm && typeof navigator === \"object\" && navigator.appName == \"Microsoft Internet Explorer\") {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n}\nelse if (j_lm && typeof navigator === \"object\" && navigator.appName != \"Netscape\") {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n}\nelse {\n    // Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr, vv;\nrr = \"0\".charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv)\n    BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv)\n    BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv)\n    BI_RC[rr++] = vv;\nfunction int2char(n) {\n    return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return c == null ? -1 : c;\n}\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n    for (var i = this.t - 1; i >= 0; --i)\n        r[i] = this[i];\n    r.t = this.t;\n    r.s = this.s;\n}\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n    this.t = 1;\n    this.s = x < 0 ? -1 : 0;\n    if (x > 0) {\n        this[0] = x;\n    }\n    else if (x < -1) {\n        this[0] = x + DV;\n    }\n    else {\n        this.t = 0;\n    }\n}\n// return bigint initialized to value\nfunction nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n}\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n    var k;\n    if (b == 16) {\n        k = 4;\n    }\n    else if (b == 8) {\n        k = 3;\n    }\n    else if (b == 256) {\n        k = 8;\n    } // byte array\n    else if (b == 2) {\n        k = 1;\n    }\n    else if (b == 32) {\n        k = 5;\n    }\n    else if (b == 4) {\n        k = 2;\n    }\n    else {\n        this.fromRadix(s, b);\n        return;\n    }\n    this.t = 0;\n    this.s = 0;\n    var i = s.length, mi = false, sh = 0;\n    while (--i >= 0) {\n        var x = k == 8 ? s[i] & 0xff : intAt(s, i);\n        if (x < 0) {\n            if (s.charAt(i) == \"-\")\n                mi = true;\n            continue;\n        }\n        mi = false;\n        if (sh == 0) {\n            this[this.t++] = x;\n        }\n        else if (sh + k > this.DB) {\n            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n            this[this.t++] = x >> (this.DB - sh);\n        }\n        else {\n            this[this.t - 1] |= x << sh;\n        }\n        sh += k;\n        if (sh >= this.DB)\n            sh -= this.DB;\n    }\n    if (k == 8 && (s[0] & 0x80) != 0) {\n        this.s = -1;\n        if (sh > 0)\n            this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n    }\n    this.clamp();\n    if (mi)\n        BigInteger.ZERO.subTo(this, this);\n}\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n    var c = this.s & this.DM;\n    while (this.t > 0 && this[this.t - 1] == c)\n        --this.t;\n}\n// (public) return string representation in given radix\nfunction bnToString(b) {\n    if (this.s < 0)\n        return \"-\" + this.negate().toString(b);\n    var k;\n    if (b == 16) {\n        k = 4;\n    }\n    else if (b == 8) {\n        k = 3;\n    }\n    else if (b == 2) {\n        k = 1;\n    }\n    else if (b == 32) {\n        k = 5;\n    }\n    else if (b == 4) {\n        k = 2;\n    }\n    else {\n        return this.toRadix(b);\n    }\n    var km = (1 << k) - 1, d, m = false, r = \"\", i = this.t;\n    var p = this.DB - ((i * this.DB) % k);\n    if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) > 0) {\n            m = true;\n            r = int2char(d);\n        }\n        while (i >= 0) {\n            if (p < k) {\n                d = (this[i] & ((1 << p) - 1)) << (k - p);\n                d |= this[--i] >> (p += this.DB - k);\n            }\n            else {\n                d = (this[i] >> (p -= k)) & km;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if (d > 0)\n                m = true;\n            if (m)\n                r += int2char(d);\n        }\n    }\n    return m ? r : \"0\";\n}\n// (public) -this\nfunction bnNegate() {\n    var r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n}\n// (public) |this|\nfunction bnAbs() {\n    return this.s < 0 ? this.negate() : this;\n}\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n    var r = this.s - a.s;\n    if (r != 0)\n        return r;\n    var i = this.t;\n    r = i - a.t;\n    if (r != 0)\n        return this.s < 0 ? -r : r;\n    while (--i >= 0)\n        if ((r = this[i] - a[i]) != 0)\n            return r;\n    return 0;\n}\n// returns bit length of the integer x\nfunction nbits(x) {\n    var r = 1, t;\n    if ((t = x >>> 16) != 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) != 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) != 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) != 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) != 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n    if (this.t <= 0)\n        return 0;\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n}\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n    var i;\n    for (i = this.t - 1; i >= 0; --i)\n        r[i + n] = this[i];\n    for (i = n - 1; i >= 0; --i)\n        r[i] = 0;\n    r.t = this.t + n;\n    r.s = this.s;\n}\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n    for (var i = n; i < this.t; ++i)\n        r[i - n] = this[i];\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n}\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << cbs) - 1;\n    var ds = Math.floor(n / this.DB), c = (this.s << bs) & this.DM, i;\n    for (i = this.t - 1; i >= 0; --i) {\n        r[i + ds + 1] = (this[i] >> cbs) | c;\n        c = (this[i] & bm) << bs;\n    }\n    for (i = ds - 1; i >= 0; --i)\n        r[i] = 0;\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n}\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n    r.s = this.s;\n    var ds = Math.floor(n / this.DB);\n    if (ds >= this.t) {\n        r.t = 0;\n        return;\n    }\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n    for (var i = ds + 1; i < this.t; ++i) {\n        r[i - ds - 1] |= (this[i] & bm) << cbs;\n        r[i - ds] = this[i] >> bs;\n    }\n    if (bs > 0)\n        r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n}\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] - a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c -= a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c -= a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c -= a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c < -1) {\n        r[i++] = this.DV + c;\n    }\n    else if (c > 0)\n        r[i++] = c;\n    r.t = i;\n    r.clamp();\n}\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n    var x = this.abs(), y = a.abs();\n    var i = x.t;\n    r.t = i + y.t;\n    while (--i >= 0)\n        r[i] = 0;\n    for (i = 0; i < y.t; ++i)\n        r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    r.s = 0;\n    r.clamp();\n    if (this.s != a.s)\n        BigInteger.ZERO.subTo(r, r);\n}\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n    var x = this.abs();\n    var i = (r.t = 2 * x.t);\n    while (--i >= 0)\n        r[i] = 0;\n    for (i = 0; i < x.t - 1; ++i) {\n        var c = x.am(i, x[i], r, 2 * i, 0, 1);\n        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n            r[i + x.t] -= x.DV;\n            r[i + x.t + 1] = 1;\n        }\n    }\n    if (r.t > 0)\n        r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n}\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n    var pm = m.abs();\n    if (pm.t <= 0)\n        return;\n    var pt = this.abs();\n    if (pt.t < pm.t) {\n        if (q != null)\n            q.fromInt(0);\n        if (r != null)\n            this.copyTo(r);\n        return;\n    }\n    if (r == null)\n        r = nbi();\n    var y = nbi(), ts = this.s, ms = m.s;\n    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n    if (nsh > 0) {\n        pm.lShiftTo(nsh, y);\n        pt.lShiftTo(nsh, r);\n    }\n    else {\n        pm.copyTo(y);\n        pt.copyTo(r);\n    }\n    var ys = y.t;\n    var y0 = y[ys - 1];\n    if (y0 == 0)\n        return;\n    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;\n    var i = r.t, j = i - ys, t = q == null ? nbi() : q;\n    y.dlShiftTo(j, t);\n    if (r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t, r);\n    }\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n    while (y.t < ys)\n        y[y.t++] = 0;\n    while (--j >= 0) {\n        // Estimate quotient digit\n        var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n            // Try it out\n            y.dlShiftTo(j, t);\n            r.subTo(t, r);\n            while (r[i] < --qd)\n                r.subTo(t, r);\n        }\n    }\n    if (q != null) {\n        r.drShiftTo(ys, q);\n        if (ts != ms)\n            BigInteger.ZERO.subTo(q, q);\n    }\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0)\n        r.rShiftTo(nsh, r); // Denormalize remainder\n    if (ts < 0)\n        BigInteger.ZERO.subTo(r, r);\n}\n// (public) this mod a\nfunction bnMod(a) {\n    var r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n        a.subTo(r, r);\n    return r;\n}\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) {\n    this.m = m;\n}\nfunction cConvert(x) {\n    if (x.s < 0 || x.compareTo(this.m) >= 0) {\n        return x.mod(this.m);\n    }\n    else {\n        return x;\n    }\n}\nfunction cRevert(x) {\n    return x;\n}\nfunction cReduce(x) {\n    x.divRemTo(this.m, null, x);\n}\nfunction cMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nfunction cSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n    if (this.t < 1)\n        return 0;\n    var x = this[0];\n    if ((x & 1) == 0)\n        return 0;\n    var y = x & 3; // y == 1/x mod 2^2\n    y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n    y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = (y * (2 - ((x * y) % this.DV))) % this.DV; // y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return y > 0 ? this.DV - y : -y;\n}\n// Montgomery reduction\nfunction Montgomery(m) {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << (m.DB - 15)) - 1;\n    this.mt2 = 2 * m.t;\n}\n// xR mod m\nfunction montConvert(x) {\n    var r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n        this.m.subTo(r, r);\n    return r;\n}\n// x/R mod m\nfunction montRevert(x) {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n}\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n    while (x.t <= this.mt2)\n        // pad x so am has enough room later\n        x[x.t++] = 0;\n    for (var i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i] & 0x7fff;\n        var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i + this.m.t;\n        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n        // propagate carry\n        while (x[j] >= x.DV) {\n            x[j] -= x.DV;\n            x[++j]++;\n        }\n    }\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0)\n        x.subTo(this.m, x);\n}\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n// (protected) true iff this is even\nfunction bnpIsEven() {\n    return (this.t > 0 ? this[0] & 1 : this.s) == 0;\n}\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e, z) {\n    if (e > 0xffffffff || e < 1)\n        return BigInteger.ONE;\n    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;\n    g.copyTo(r);\n    while (--i >= 0) {\n        z.sqrTo(r, r2);\n        if ((e & (1 << i)) > 0) {\n            z.mulTo(r2, g, r);\n        }\n        else {\n            var t = r;\n            r = r2;\n            r2 = t;\n        }\n    }\n    return z.revert(r);\n}\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e, m) {\n    var z;\n    if (e < 256 || m.isEven())\n        z = new Classic(m);\n    else\n        z = new Montgomery(m);\n    return this.exp(e, z);\n}\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt;\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n// Copyright (c) 2005-2009  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n// Extended JavaScript BN functions, required for RSA private ops.\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n// Version 1.2: square() API, isProbablePrime fix\n// (public)\nfunction bnClone() {\n    var r = nbi();\n    this.copyTo(r);\n    return r;\n}\n// (public) return value as integer\nfunction bnIntValue() {\n    if (this.s < 0) {\n        if (this.t == 1) {\n            return this[0] - this.DV;\n        }\n        else if (this.t == 0)\n            return -1;\n    }\n    else if (this.t == 1) {\n        return this[0];\n    }\n    else if (this.t == 0)\n        return 0;\n    // assumes 16 < DB < 32\n    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n}\n// (public) return value as byte\nfunction bnByteValue() {\n    return this.t == 0 ? this.s : (this[0] << 24) >> 24;\n}\n// (public) return value as short (assumes DB>=16)\nfunction bnShortValue() {\n    return this.t == 0 ? this.s : (this[0] << 16) >> 16;\n}\n// (protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) {\n    return Math.floor((Math.LN2 * this.DB) / Math.log(r));\n}\n// (public) 0 if this == 0, 1 if this > 0\nfunction bnSigNum() {\n    if (this.s < 0) {\n        return -1;\n    }\n    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\n// (protected) convert to radix string\nfunction bnpToRadix(b) {\n    if (b == null)\n        b = 10;\n    if (this.signum() == 0 || b < 2 || b > 36)\n        return \"0\";\n    var cs = this.chunkSize(b);\n    var a = Math.pow(b, cs);\n    var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n    this.divRemTo(d, y, z);\n    while (y.signum() > 0) {\n        r = (a + z.intValue()).toString(b).substring(1) + r;\n        y.divRemTo(d, y, z);\n    }\n    return z.intValue().toString(b) + r;\n}\n// (protected) convert from radix string\nfunction bnpFromRadix(s, b) {\n    this.fromInt(0);\n    if (b == null)\n        b = 10;\n    var cs = this.chunkSize(b);\n    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;\n    for (var i = 0; i < s.length; ++i) {\n        var x = intAt(s, i);\n        if (x < 0) {\n            if (s.charAt(i) == \"-\" && this.signum() == 0)\n                mi = true;\n            continue;\n        }\n        w = b * w + x;\n        if (++j >= cs) {\n            this.dMultiply(d);\n            this.dAddOffset(w, 0);\n            j = 0;\n            w = 0;\n        }\n    }\n    if (j > 0) {\n        this.dMultiply(Math.pow(b, j));\n        this.dAddOffset(w, 0);\n    }\n    if (mi)\n        BigInteger.ZERO.subTo(this, this);\n}\n// (protected) alternate constructor\n// tutao: on first invocation:\n//        a = bitlength (1024)\n//        b = number of miller rabin test * 2\n//        c = SecureRandom\n//       on second invocation:\n//        a = bitlength (1024)\n//        b = SecureRandom\n//        c == undefined\nfunction bnpFromNumber(a, b, c) {\n    if (\"number\" == typeof b) {\n        // new BigInteger(int,int,RNG)\n        if (a < 2) {\n            this.fromInt(1);\n        }\n        else {\n            this.fromNumber(a, c);\n            if (!this.testBit(a - 1)) {\n                // force MSB set\n                this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n            }\n            if (this.isEven())\n                this.dAddOffset(1, 0); // force odd\n            while (!this.isProbablePrime(b)) {\n                this.dAddOffset(2, 0);\n                if (this.bitLength() > a)\n                    this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n            }\n        }\n    }\n    else {\n        // new BigInteger(int,RNG)\n        var x = new Array(), t = a & 7;\n        x.length = (a >> 3) + 1;\n        b.nextBytes(x);\n        if (t > 0)\n            x[0] &= (1 << t) - 1;\n        else\n            x[0] = 0;\n        this.fromString(x, 256);\n    }\n}\n// (public) convert to bigendian byte array\nfunction bnToByteArray() {\n    var i = this.t, r = new Array();\n    r[0] = this.s;\n    var p = this.DB - ((i * this.DB) % 8), d, k = 0;\n    if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) {\n            r[k++] = d | (this.s << (this.DB - p));\n        }\n        while (i >= 0) {\n            if (p < 8) {\n                d = (this[i] & ((1 << p) - 1)) << (8 - p);\n                d |= this[--i] >> (p += this.DB - 8);\n            }\n            else {\n                d = (this[i] >> (p -= 8)) & 0xff;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if ((d & 0x80) != 0)\n                d |= -256;\n            if (k == 0 && (this.s & 0x80) != (d & 0x80))\n                ++k;\n            if (k > 0 || d != this.s)\n                r[k++] = d;\n        }\n    }\n    return r;\n}\nfunction bnEquals(a) {\n    return this.compareTo(a) == 0;\n}\nfunction bnMin(a) {\n    return this.compareTo(a) < 0 ? this : a;\n}\nfunction bnMax(a) {\n    return this.compareTo(a) > 0 ? this : a;\n}\n// (protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a, op, r) {\n    var i, f, m = Math.min(a.t, this.t);\n    for (i = 0; i < m; ++i)\n        r[i] = op(this[i], a[i]);\n    if (a.t < this.t) {\n        f = a.s & this.DM;\n        for (i = m; i < this.t; ++i)\n            r[i] = op(this[i], f);\n        r.t = this.t;\n    }\n    else {\n        f = this.s & this.DM;\n        for (i = m; i < a.t; ++i)\n            r[i] = op(f, a[i]);\n        r.t = a.t;\n    }\n    r.s = op(this.s, a.s);\n    r.clamp();\n}\n// (public) this & a\nfunction op_and(x, y) {\n    return x & y;\n}\nfunction bnAnd(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_and, r);\n    return r;\n}\n// (public) this | a\nfunction op_or(x, y) {\n    return x | y;\n}\nfunction bnOr(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_or, r);\n    return r;\n}\n// (public) this ^ a\nfunction op_xor(x, y) {\n    return x ^ y;\n}\nfunction bnXor(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_xor, r);\n    return r;\n}\n// (public) this & ~a\nfunction op_andnot(x, y) {\n    return x & ~y;\n}\nfunction bnAndNot(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_andnot, r);\n    return r;\n}\n// (public) ~this\nfunction bnNot() {\n    var r = nbi();\n    for (var i = 0; i < this.t; ++i)\n        r[i] = this.DM & ~this[i];\n    r.t = this.t;\n    r.s = ~this.s;\n    return r;\n}\n// (public) this << n\nfunction bnShiftLeft(n) {\n    var r = nbi();\n    if (n < 0)\n        this.rShiftTo(-n, r);\n    else\n        this.lShiftTo(n, r);\n    return r;\n}\n// (public) this >> n\nfunction bnShiftRight(n) {\n    var r = nbi();\n    if (n < 0)\n        this.lShiftTo(-n, r);\n    else\n        this.rShiftTo(n, r);\n    return r;\n}\n// return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n    if (x == 0)\n        return -1;\n    var r = 0;\n    if ((x & 0xffff) == 0) {\n        x >>= 16;\n        r += 16;\n    }\n    if ((x & 0xff) == 0) {\n        x >>= 8;\n        r += 8;\n    }\n    if ((x & 0xf) == 0) {\n        x >>= 4;\n        r += 4;\n    }\n    if ((x & 3) == 0) {\n        x >>= 2;\n        r += 2;\n    }\n    if ((x & 1) == 0)\n        ++r;\n    return r;\n}\n// (public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n    for (var i = 0; i < this.t; ++i)\n        if (this[i] != 0)\n            return i * this.DB + lbit(this[i]);\n    if (this.s < 0)\n        return this.t * this.DB;\n    return -1;\n}\n// return number of 1 bits in x\nfunction cbit(x) {\n    var r = 0;\n    while (x != 0) {\n        x &= x - 1;\n        ++r;\n    }\n    return r;\n}\n// (public) return number of set bits\nfunction bnBitCount() {\n    var r = 0, x = this.s & this.DM;\n    for (var i = 0; i < this.t; ++i)\n        r += cbit(this[i] ^ x);\n    return r;\n}\n// (public) true iff nth bit is set\nfunction bnTestBit(n) {\n    var j = Math.floor(n / this.DB);\n    if (j >= this.t)\n        return this.s != 0;\n    return (this[j] & (1 << n % this.DB)) != 0;\n}\n// (protected) this op (1<<n)\nfunction bnpChangeBit(n, op) {\n    var r = BigInteger.ONE.shiftLeft(n);\n    this.bitwiseTo(r, op, r);\n    return r;\n}\n// (public) this | (1<<n)\nfunction bnSetBit(n) {\n    return this.changeBit(n, op_or);\n}\n// (public) this & ~(1<<n)\nfunction bnClearBit(n) {\n    return this.changeBit(n, op_andnot);\n}\n// (public) this ^ (1<<n)\nfunction bnFlipBit(n) {\n    return this.changeBit(n, op_xor);\n}\n// (protected) r = this + a\nfunction bnpAddTo(a, r) {\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] + a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c += a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c += a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c > 0) {\n        r[i++] = c;\n    }\n    else if (c < -1)\n        r[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n}\n// (public) this + a\nfunction bnAdd(a) {\n    var r = nbi();\n    this.addTo(a, r);\n    return r;\n}\n// (public) this - a\nfunction bnSubtract(a) {\n    var r = nbi();\n    this.subTo(a, r);\n    return r;\n}\n// (public) this * a\nfunction bnMultiply(a) {\n    var r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n}\n// (public) this^2\nfunction bnSquare() {\n    var r = nbi();\n    this.squareTo(r);\n    return r;\n}\n// (public) this / a\nfunction bnDivide(a) {\n    var r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n}\n// (public) this % a\nfunction bnRemainder(a) {\n    var r = nbi();\n    this.divRemTo(a, null, r);\n    return r;\n}\n// (public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\n    var q = nbi(), r = nbi();\n    this.divRemTo(a, q, r);\n    return new Array(q, r);\n}\n// (protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n    ++this.t;\n    this.clamp();\n}\n// (protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n, w) {\n    if (n == 0)\n        return;\n    while (this.t <= w)\n        this[this.t++] = 0;\n    this[w] += n;\n    while (this[w] >= this.DV) {\n        this[w] -= this.DV;\n        if (++w >= this.t)\n            this[this.t++] = 0;\n        ++this[w];\n    }\n}\n// A \"null\" reducer\nfunction NullExp() { }\nfunction nNop(x) {\n    return x;\n}\nfunction nMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n}\nfunction nSqrTo(x, r) {\n    x.squareTo(r);\n}\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n// (public) this^e\nfunction bnPow(e) {\n    return this.exp(e, new NullExp());\n}\n// (protected) r = lower n words of \"this * a\", a.t <= n\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a, n, r) {\n    var i = Math.min(this.t + a.t, n);\n    r.s = 0; // assumes a,this >= 0\n    r.t = i;\n    while (i > 0)\n        r[--i] = 0;\n    var j;\n    for (j = r.t - this.t; i < j; ++i)\n        r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n    for (j = Math.min(a.t, n); i < j; ++i)\n        this.am(0, a[i], r, i, 0, n - i);\n    r.clamp();\n}\n// (protected) r = \"this * a\" without lower n words, n > 0\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a, n, r) {\n    --n;\n    var i = (r.t = this.t + a.t - n);\n    r.s = 0; // assumes a,this >= 0\n    while (--i >= 0)\n        r[i] = 0;\n    for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n    r.clamp();\n    r.drShiftTo(1, r);\n}\n// Barrett modular reduction\nfunction Barrett(m) {\n    // setup Barrett\n    this.r2 = nbi();\n    this.q3 = nbi();\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n    this.mu = this.r2.divide(m);\n    this.m = m;\n}\nfunction barrettConvert(x) {\n    if (x.s < 0 || x.t > 2 * this.m.t) {\n        return x.mod(this.m);\n    }\n    else if (x.compareTo(this.m) < 0) {\n        return x;\n    }\n    else {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n    }\n}\nfunction barrettRevert(x) {\n    return x;\n}\n// x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n    x.drShiftTo(this.m.t - 1, this.r2);\n    if (x.t > this.m.t + 1) {\n        x.t = this.m.t + 1;\n        x.clamp();\n    }\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n    while (x.compareTo(this.r2) < 0)\n        x.dAddOffset(1, this.m.t + 1);\n    x.subTo(this.r2, x);\n    while (x.compareTo(this.m) >= 0)\n        x.subTo(this.m, x);\n}\n// r = x^2 mod m; x != r\nfunction barrettSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n// r = x*y mod m; x,y != r\nfunction barrettMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m) {\n    // we switched to leemons bigint lib for modpow, as this is faster on safari browsers (reduced the decryption times: 9s -> 3,4s)\n    // TODO introduce switch for other browsers, as they are slower (by factor 0.5) because of the conversion overhead\n    var xHex = this.toString(16);\n    var eHex = e.toString(16);\n    var mHex = m.toString(16);\n    var result = powMod(str2bigInt(xHex, 16), str2bigInt(eHex, 16), str2bigInt(mHex, 16));\n    return new BigInteger(bigInt2str(result, 16), 16);\n    //  var i = e.bitLength(), k, r = nbv(1), z;\n    //  if(i <= 0) return r;\n    //  else if(i < 18) k = 1;\n    //  else if(i < 48) k = 3;\n    //  else if(i < 144) k = 4;\n    //  else if(i < 768) k = 5;\n    //  else k = 6;\n    //  if(i < 8)\n    //    z = new Classic(m);\n    //  else if(m.isEven())\n    //    z = new Barrett(m);\n    //  else\n    //    z = new Montgomery(m);\n    //\n    //  // precomputation\n    //  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n    //  g[1] = z.convert(this);\n    //  if(k > 1) {\n    //    var g2 = nbi();\n    //    z.sqrTo(g[1],g2);\n    //    while(n <= km) {\n    //      g[n] = nbi();\n    //      z.mulTo(g2,g[n-2],g[n]);\n    //      n += 2;\n    //    }\n    //  }\n    //\n    //  var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n    //  i = nbits(e[j])-1;\n    //  while(j >= 0) {\n    //    if(i >= k1) w = (e[j]>>(i-k1))&km;\n    //    else {\n    //      w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n    //      if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n    //    }\n    //\n    //    n = k;\n    //    while((w&1) == 0) { w >>= 1; --n; }\n    //    if((i -= n) < 0) { i += this.DB; --j; }\n    //    if(is1) {\t// ret == 1, don't bother squaring or multiplying it\n    //      g[w].copyTo(r);\n    //      is1 = false;\n    //    }\n    //    else {\n    //      while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n    //      if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n    //      z.mulTo(r2,g[w],r);\n    //    }\n    //\n    //    while(j >= 0 && (e[j]&(1<<i)) == 0) {\n    //      z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n    //      if(--i < 0) { i = this.DB-1; --j; }\n    //    }\n    //  }\n    //  return z.revert(r);\n}\n// (public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n    var x = this.s < 0 ? this.negate() : this.clone();\n    var y = a.s < 0 ? a.negate() : a.clone();\n    if (x.compareTo(y) < 0) {\n        var t = x;\n        x = y;\n        y = t;\n    }\n    var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n    if (g < 0)\n        return x;\n    if (i < g)\n        g = i;\n    if (g > 0) {\n        x.rShiftTo(g, x);\n        y.rShiftTo(g, y);\n    }\n    while (x.signum() > 0) {\n        if ((i = x.getLowestSetBit()) > 0)\n            x.rShiftTo(i, x);\n        if ((i = y.getLowestSetBit()) > 0)\n            y.rShiftTo(i, y);\n        if (x.compareTo(y) >= 0) {\n            x.subTo(y, x);\n            x.rShiftTo(1, x);\n        }\n        else {\n            y.subTo(x, y);\n            y.rShiftTo(1, y);\n        }\n    }\n    if (g > 0)\n        y.lShiftTo(g, y);\n    return y;\n}\n// (protected) this % n, n < 2^26\nfunction bnpModInt(n) {\n    if (n <= 0)\n        return 0;\n    var d = this.DV % n, r = this.s < 0 ? n - 1 : 0;\n    if (this.t > 0) {\n        if (d == 0) {\n            r = this[0] % n;\n        }\n        else {\n            for (var i = this.t - 1; i >= 0; --i)\n                r = (d * r + this[i]) % n;\n        }\n    }\n    return r;\n}\n// (public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\n    var ac = m.isEven();\n    if ((this.isEven() && ac) || m.signum() == 0)\n        return BigInteger.ZERO;\n    var u = m.clone(), v = this.clone();\n    var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n    while (u.signum() != 0) {\n        while (u.isEven()) {\n            u.rShiftTo(1, u);\n            if (ac) {\n                if (!a.isEven() || !b.isEven()) {\n                    a.addTo(this, a);\n                    b.subTo(m, b);\n                }\n                a.rShiftTo(1, a);\n            }\n            else if (!b.isEven())\n                b.subTo(m, b);\n            b.rShiftTo(1, b);\n        }\n        while (v.isEven()) {\n            v.rShiftTo(1, v);\n            if (ac) {\n                if (!c.isEven() || !d.isEven()) {\n                    c.addTo(this, c);\n                    d.subTo(m, d);\n                }\n                c.rShiftTo(1, c);\n            }\n            else if (!d.isEven())\n                d.subTo(m, d);\n            d.rShiftTo(1, d);\n        }\n        if (u.compareTo(v) >= 0) {\n            u.subTo(v, u);\n            if (ac)\n                a.subTo(c, a);\n            b.subTo(d, b);\n        }\n        else {\n            v.subTo(u, v);\n            if (ac)\n                c.subTo(a, c);\n            d.subTo(b, d);\n        }\n    }\n    if (v.compareTo(BigInteger.ONE) != 0)\n        return BigInteger.ZERO;\n    if (d.compareTo(m) >= 0)\n        return d.subtract(m);\n    if (d.signum() < 0)\n        d.addTo(m, d);\n    else\n        return d;\n    if (d.signum() < 0)\n        return d.add(m);\n    else\n        return d;\n}\nvar lowprimes = [\n    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\n    163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337,\n    347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523,\n    541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,\n    739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\n    953, 967, 971, 977, 983, 991, 997,\n];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n// (public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\n    var i, x = this.abs();\n    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n        for (i = 0; i < lowprimes.length; ++i)\n            if (x[0] == lowprimes[i])\n                return true;\n        return false;\n    }\n    if (x.isEven())\n        return false;\n    i = 1;\n    while (i < lowprimes.length) {\n        var m = lowprimes[i], j = i + 1;\n        while (j < lowprimes.length && m < lplim)\n            m *= lowprimes[j++];\n        m = x.modInt(m);\n        while (i < j)\n            if (m % lowprimes[i++] == 0)\n                return false;\n    }\n    return x.millerRabin(t);\n}\n// (protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\n    var n1 = this.subtract(BigInteger.ONE);\n    var k = n1.getLowestSetBit();\n    if (k <= 0)\n        return false;\n    var r = n1.shiftRight(k);\n    t = (t + 1) >> 1;\n    if (t > lowprimes.length)\n        t = lowprimes.length;\n    var a = nbi();\n    for (var i = 0; i < t; ++i) {\n        //Pick bases at random, instead of starting at 2\n        // TUTAO: It is fine to use Math.random() instead secure random here because it is only used for checking if the number is a prime. The number itself is generated with the secure random number generator.\n        a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n        var y = a.modPow(r, this);\n        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n            var j = 1;\n            while (j++ < k && y.compareTo(n1) != 0) {\n                y = y.modPowInt(2, this);\n                if (y.compareTo(BigInteger.ONE) == 0)\n                    return false;\n            }\n            if (y.compareTo(n1) != 0)\n                return false;\n        }\n    }\n    return true;\n}\n// protected\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin;\n// public\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n// JSBN-specific extension\nBigInteger.prototype.square = bnSquare;\n// BigInteger interfaces not implemented in jsbn:\n// BigInteger(int signum, byte[] magnitude)\n// double doubleValue()\n// float floatValue()\n// int hashCode()\n// long longValue()\n// static BigInteger valueOf(long val)\n// Depends on jsbn.js and rng.js\n// Version 1.1: support utf-8 encoding in pkcs1pad2\n// convert a (hex) string to a bignum object\nexport function parseBigInt(str, r) {\n    return new BigInteger(str, r);\n}\nfunction linebrk(s, n) {\n    var ret = \"\";\n    var i = 0;\n    while (i + n < s.length) {\n        ret += s.substring(i, i + n) + \"\\n\";\n        i += n;\n    }\n    return ret + s.substring(i, s.length);\n}\nfunction byte2Hex(b) {\n    if (b < 0x10) {\n        return \"0\" + b.toString(16);\n    }\n    else {\n        return b.toString(16);\n    }\n}\n// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\nfunction pkcs1pad2(s, n) {\n    if (n < s.length + 11) {\n        // TODO: fix for utf-8\n        alert(\"Message too long for RSA\");\n        return null;\n    }\n    var ba = new Array();\n    var i = s.length - 1;\n    while (i >= 0 && n > 0) {\n        var c = s.charCodeAt(i--);\n        if (c < 128) {\n            // encode using utf-8\n            ba[--n] = c;\n        }\n        else if (c > 127 && c < 2048) {\n            ba[--n] = (c & 63) | 128;\n            ba[--n] = (c >> 6) | 192;\n        }\n        else {\n            ba[--n] = (c & 63) | 128;\n            ba[--n] = ((c >> 6) & 63) | 128;\n            ba[--n] = (c >> 12) | 224;\n        }\n    }\n    ba[--n] = 0;\n    var rng = new SecureRandom();\n    var x = new Array();\n    while (n > 2) {\n        // random non-zero pad\n        x[0] = 0;\n        while (x[0] == 0)\n            rng.nextBytes(x);\n        ba[--n] = x[0];\n    }\n    ba[--n] = 2;\n    ba[--n] = 0;\n    return new BigInteger(ba);\n}\n// \"empty\" RSA key constructor\nexport function RSAKey() {\n    this.n = null;\n    this.e = 0;\n    this.d = null;\n    this.p = null;\n    this.q = null;\n    this.dmp1 = null;\n    this.dmq1 = null;\n    this.coeff = null;\n}\n// Set the public key fields N and e from hex strings\nfunction RSASetPublic(N, E) {\n    if (N != null && E != null && N.length > 0 && E.length > 0) {\n        this.n = parseBigInt(N, 16);\n        this.e = parseInt(E, 16);\n    }\n    else {\n        alert(\"Invalid RSA public key\");\n    }\n}\n// Perform raw public operation on \"x\": return x^e (mod n)\nfunction RSADoPublic(x) {\n    return x.modPowInt(this.e, this.n);\n}\n// Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\nfunction RSAEncrypt(text) {\n    var m = pkcs1pad2(text, (this.n.bitLength() + 7) >> 3);\n    if (m == null)\n        return null;\n    var c = this.doPublic(m);\n    if (c == null)\n        return null;\n    var h = c.toString(16);\n    if ((h.length & 1) == 0)\n        return h;\n    else\n        return \"0\" + h;\n}\n// Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string\n//function RSAEncryptB64(text) {\n//  var h = this.encrypt(text);\n//  if(h) return hex2b64(h); else return null;\n//}\n// protected\nRSAKey.prototype.doPublic = RSADoPublic;\n// public\nRSAKey.prototype.setPublic = RSASetPublic;\nRSAKey.prototype.encrypt = RSAEncrypt;\n//RSAKey.prototype.encrypt_b64 = RSAEncryptB64;\n// Depends on rsa.js and jsbn2.js\n// Version 1.1: support utf-8 decoding in pkcs1unpad2\n// Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\nfunction pkcs1unpad2(d, n) {\n    var b = d.toByteArray();\n    var i = 0;\n    while (i < b.length && b[i] == 0)\n        ++i;\n    if (b.length - i != n - 1 || b[i] != 2) {\n        return null;\n    }\n    ++i;\n    while (b[i] != 0)\n        if (++i >= b.length)\n            return null;\n    var ret = \"\";\n    while (++i < b.length) {\n        var c = b[i] & 255;\n        if (c < 128) {\n            // utf-8 decode\n            ret += String.fromCharCode(c);\n        }\n        else if (c > 191 && c < 224) {\n            ret += String.fromCharCode(((c & 31) << 6) | (b[i + 1] & 63));\n            ++i;\n        }\n        else {\n            ret += String.fromCharCode(((c & 15) << 12) | ((b[i + 1] & 63) << 6) | (b[i + 2] & 63));\n            i += 2;\n        }\n    }\n    return ret;\n}\n// Set the private key fields N, e, and d from hex strings\nfunction RSASetPrivate(N, E, D) {\n    if (N != null && E != null && N.length > 0 && E.length > 0) {\n        this.n = parseBigInt(N, 16);\n        this.e = parseInt(E, 16);\n        this.d = parseBigInt(D, 16);\n    }\n    else {\n        alert(\"Invalid RSA private key\");\n    }\n}\n// Set the private key fields N, e, d and CRT params from hex strings\nfunction RSASetPrivateEx(N, E, D, P, Q, DP, DQ, C) {\n    if (N != null && E != null && N.length > 0 && E.length > 0) {\n        this.n = parseBigInt(N, 16);\n        this.e = parseInt(E, 16);\n        this.d = parseBigInt(D, 16);\n        this.p = parseBigInt(P, 16);\n        this.q = parseBigInt(Q, 16);\n        this.dmp1 = parseBigInt(DP, 16);\n        this.dmq1 = parseBigInt(DQ, 16);\n        this.coeff = parseBigInt(C, 16);\n    }\n    else {\n        alert(\"Invalid RSA private key\");\n    }\n}\n// Generate a new random private key B bits long, using public expt E\nfunction RSAGenerate(B, E) {\n    var rng = new SecureRandom();\n    var qs = B >> 1;\n    this.e = parseInt(E, 16);\n    var ee = new BigInteger(E, 16);\n    for (;;) {\n        for (;;) {\n            this.p = new BigInteger(B - qs, 10, rng); // tutao: changed parameter b from 1 to 10 (=> 5 rounds); according to HAC 4.49, we only need 2 rounds && discussion: https://github.com/digitalbazaar/forge/issues/28\n            // tutao: the prime probability is already guaranteed by the BigInteger constructor above; if(this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) break;\n            if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0)\n                break;\n        }\n        for (;;) {\n            // tutao: same changes as above\n            this.q = new BigInteger(qs, 10, rng);\n            if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0)\n                break;\n        }\n        if (this.p.compareTo(this.q) <= 0) {\n            var t = this.p;\n            this.p = this.q;\n            this.q = t;\n        }\n        var p1 = this.p.subtract(BigInteger.ONE);\n        var q1 = this.q.subtract(BigInteger.ONE);\n        var phi = p1.multiply(q1);\n        if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n            this.n = this.p.multiply(this.q);\n            this.d = ee.modInverse(phi);\n            this.dmp1 = this.d.mod(p1);\n            this.dmq1 = this.d.mod(q1);\n            this.coeff = this.q.modInverse(this.p);\n            break;\n        }\n    }\n}\n// Perform raw private operation on \"x\": return x^d (mod n)\nfunction RSADoPrivate(x) {\n    if (this.p == null || this.q == null) {\n        return x.modPow(this.d, this.n);\n    }\n    // TODO: re-calculate any missing CRT params\n    var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n    var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n    while (xp.compareTo(xq) < 0)\n        xp = xp.add(this.p);\n    return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n}\n// Return the PKCS#1 RSA decryption of \"ctext\".\n// \"ctext\" is an even-length hex string and the output is a plain string.\nfunction RSADecrypt(ctext) {\n    var c = parseBigInt(ctext, 16);\n    var m = this.doPrivate(c);\n    if (m == null)\n        return null;\n    return pkcs1unpad2(m, (this.n.bitLength() + 7) >> 3);\n}\n// Return the PKCS#1 RSA decryption of \"ctext\".\n// \"ctext\" is a Base64-encoded string and the output is a plain string.\n//function RSAB64Decrypt(ctext) {\n//  var h = b64tohex(ctext);\n//  if(h) return this.decrypt(h); else return null;\n//}\n// protected\nRSAKey.prototype.doPrivate = RSADoPrivate;\n// public\nRSAKey.prototype.setPrivate = RSASetPrivate;\nRSAKey.prototype.setPrivateEx = RSASetPrivateEx;\nRSAKey.prototype.generate = RSAGenerate;\nRSAKey.prototype.decrypt = RSADecrypt;\n//RSAKey.prototype.b64_decrypt = RSAB64Decrypt;\n////////////////////////////////////////////////////////////////////////////////////////\n// Big Integer Library v. 5.4\n// Created 2000, last modified 2009\n// Leemon Baird\n// www.leemon.com\n//\n// Version history:\n// v 5.4  3 Oct 2009\n//   - added \"var i\" to greaterShift() so i is not global. (Thanks to PŽter Szab— for finding that bug)\n//\n// v 5.3  21 Sep 2009\n//   - added randProbPrime(k) for probable primes\n//   - unrolled loop in mont_ (slightly faster)\n//   - millerRabin now takes a bigInt parameter rather than an int\n//\n// v 5.2  15 Sep 2009\n//   - fixed capitalization in call to int2bigInt in randBigInt\n//     (thanks to Emili Evripidou, Reinhold Behringer, and Samuel Macaleese for finding that bug)\n//\n// v 5.1  8 Oct 2007\n//   - renamed inverseModInt_ to inverseModInt since it doesn't change its parameters\n//   - added functions GCD and randBigInt, which call GCD_ and randBigInt_\n//   - fixed a bug found by Rob Visser (see comment with his name below)\n//   - improved comments\n//\n// This file is public domain.   You can use it for any purpose without restriction.\n// I do not guarantee that it is correct, so use it at your own risk.  If you use\n// it for something interesting, I'd appreciate hearing about it.  If you find\n// any bugs or make any improvements, I'd appreciate hearing about those too.\n// It would also be nice if my name and URL were left in the comments.  But none\n// of that is required.\n//\n// This code defines a bigInt library for arbitrary-precision integers.\n// A bigInt is an array of integers storing the value in chunks of bpe bits,\n// little endian (buff[0] is the least significant word).\n// Negative bigInts are stored two's complement.  Almost all the functions treat\n// bigInts as nonnegative.  The few that view them as two's complement say so\n// in their comments.  Some functions assume their parameters have at least one\n// leading zero element. Functions with an underscore at the end of the name put\n// their answer into one of the arrays passed in, and have unpredictable behavior\n// in case of overflow, so the caller must make sure the arrays are big enough to\n// hold the answer.  But the average user should never have to call any of the\n// underscored functions.  Each important underscored function has a wrapper function\n// of the same name without the underscore that takes care of the details for you.\n// For each underscored function where a parameter is modified, that same variable\n// must not be used as another argument too.  So, you cannot square x by doing\n// multMod_(x,x,n).  You must use squareMod_(x,n) instead, or do y=dup(x); multMod_(x,y,n).\n// Or simply use the multMod(x,x,n) function without the underscore, where\n// such issues never arise, because non-underscored functions never change\n// their parameters; they always allocate new memory for the answer that is returned.\n//\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\n// For most functions, if it needs a BigInt as a local variable it will actually use\n// a global, and will only allocate to it only when it's not the right size.  This ensures\n// that when a function is called repeatedly with same-sized parameters, it only allocates\n// memory on the first call.\n//\n// Note that for cryptographic purposes, the calls to Math.random() must\n// be replaced with calls to a better pseudorandom number generator.\n//\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer\n// can be negative.  Negative bigInts are 2s complement.\n//\n// The following functions do not modify their inputs.\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\n// Those returning boolean or int will not allocate memory except possibly on the first\n// time they're called with a given parameter size.\n//\n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.\n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\n// bigInt  dup(x)                 //return a copy of bigInt x\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\n// Array   findPrimes(n)          //return array of all primes less than integer n\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\n// boolean isZero(x)              //is the bigInt x equal to zero?\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\n// boolean negative(x)            //is bigInt x negative?\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\n//\n//\n// The following functions each have a non-underscored version, which most users should call instead.\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array\n// passed in is large enough to hold the result.\n//\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\n// void    add_(x,y)             //do x=x+y for bigInts x and y\n// void    copy_(x,y)            //do x=y on bigInts x and y\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\n//\n// The following functions do NOT have a non-underscored version.\n// They each write a bigInt result to one or more parameters.  The caller is responsible for\n// ensuring the arrays passed in are large enough to hold the results.\n//\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\n// int  eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\n//\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\n//    mont_()             = algorithm 14.36, Montgomery multiplication\n//    divide_()           = algorithm 14.20  Multiple-precision division\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\n//\n// Profiling shows:\n//     randTruePrime_() spends:\n//         10% of its time in calls to powMod_()\n//         85% of its time in calls to millerRabin()\n//     millerRabin() spends:\n//         99% of its time in calls to powMod_()   (always with a base of 2)\n//     powMod_() spends:\n//         94% of its time in calls to mont_()  (almost always with x==y)\n//\n// This suggests there are several ways to speed up this library slightly:\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\n//         -- this should especially focus on being fast when raising 2 to a power mod n\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\n//       within the loop when all the parameters are the same length.\n//\n// There are several ideas that look like they wouldn't help much at all:\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\n//       Montgomery reduction, but that's obviously wrong.\n////////////////////////////////////////////////////////////////////////////////////////\n//globals\nvar bpe = 0; //bits stored per array element\nvar mask = 0; //AND this with an array element to chop it down to bpe bits\nvar radix = mask + 1; //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\n//the digits for converting to different bases\nconst digitsStr = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\'\\\"+-\";\n//initialize the global variables\nfor (bpe = 0; 1 << (bpe + 1) > 1 << bpe; bpe++)\n    ; //bpe=number of bits in the mantissa on this platform\nbpe >>= 1; //bpe=number of bits in one element of the array representing the bigInt\nmask = (1 << bpe) - 1; //AND the mask with an integer to get its bpe least significant bits\nradix = mask + 1; //2^bpe.  a single 1 bit to the left of the first bit of mask\nconst one = int2bigInt(1, 1, 1); //constant used in powMod_()\n//the following global variables are scratchpad memory to\n//reduce dynamic memory allocation in the inner loop\nvar t = new Array(0);\nvar ss = t; //used in mult_()\nvar s0 = t; //used in multMod_(), squareMod_()\nvar s1 = t; //used in powMod_(), multMod_(), squareMod_()\nvar s2 = t; //used in powMod_(), multMod_()\nvar s3 = t; //used in powMod_()\nvar s4 = t;\nvar s5 = t; //used in mod_()\nvar s6 = t; //used in bigInt2str()\nvar s7 = t; //used in powMod_()\nvar T = t; //used in GCD_()\nvar sa = t; //used in mont_()\nvar mr_x1 = t;\nvar mr_r = t;\nvar mr_a = t; //used in millerRabin()\nvar eg_v = t;\nvar eg_u = t;\nvar eg_A = t;\nvar eg_B = t;\nvar eg_C = t;\nvar eg_D = t; //used in eGCD_(), inverseMod_()\nvar md_q1 = t;\nvar md_q2 = t;\nvar md_q3 = t;\nvar md_r = t;\nvar md_r1 = t;\nvar md_r2 = t;\nvar md_tt = t; //used in mod_()\nvar primes = t;\nvar pows = t;\nvar s_i = t;\nvar s_i2 = t;\nvar s_R = t;\nvar s_rm = t;\nvar s_q = t;\nvar s_n1 = t;\nvar s_a = t;\nvar s_r2 = t;\nvar s_n = t;\nvar s_b = t;\nvar s_d = t;\nvar s_x1 = t;\nvar s_x2 = t;\nvar s_aa = t; //used in randTruePrime_()\nvar rpprb = t; //used in randProbPrimeRounds() (which also uses \"primes\")\n////////////////////////////////////////////////////////////////////////////////////////\n//return array of all primes less than integer n\nfunction findPrimes(n) {\n    var i, s, p, ans;\n    s = new Array(n);\n    for (i = 0; i < n; i++)\n        s[i] = 0;\n    s[0] = 2;\n    p = 0; //first p elements of s are primes, the rest are a sieve\n    for (; s[p] < n;) {\n        //s[p] is the pth prime\n        for (i = s[p] * s[p]; i < n; i += s[p] //mark multiples of s[p]\n        )\n            s[i] = 1;\n        p++;\n        s[p] = s[p - 1] + 1;\n        for (; s[p] < n && s[s[p]]; s[p]++)\n            ; //find next prime (where s[p]==0)\n    }\n    ans = new Array(p);\n    for (i = 0; i < p; i++)\n        ans[i] = s[i];\n    return ans;\n}\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x is a bigInt, and b is an integer, with b<x\nfunction millerRabinInt(x, b) {\n    if (mr_x1.length != x.length) {\n        mr_x1 = dup(x);\n        mr_r = dup(x);\n        mr_a = dup(x);\n    }\n    copyInt_(mr_a, b);\n    return millerRabin(x, mr_a);\n}\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x and b are bigInts with b<x\nfunction millerRabin(x, b) {\n    var i, j, k, s;\n    if (mr_x1.length != x.length) {\n        mr_x1 = dup(x);\n        mr_r = dup(x);\n        mr_a = dup(x);\n    }\n    copy_(mr_a, b);\n    copy_(mr_r, x);\n    copy_(mr_x1, x);\n    addInt_(mr_r, -1);\n    addInt_(mr_x1, -1);\n    //s=the highest power of two that divides mr_r\n    k = 0;\n    for (i = 0; i < mr_r.length; i++)\n        for (j = 1; j < mask; j <<= 1)\n            if (x[i] & j) {\n                s = k < mr_r.length + bpe ? k : 0;\n                i = mr_r.length;\n                j = mask;\n            }\n            else {\n                k++;\n            }\n    if (s) {\n        rightShift_(mr_r, s);\n    }\n    powMod_(mr_a, mr_r, x);\n    if (!equalsInt(mr_a, 1) && !equals(mr_a, mr_x1)) {\n        j = 1;\n        while (j <= s - 1 && !equals(mr_a, mr_x1)) {\n            squareMod_(mr_a, x);\n            if (equalsInt(mr_a, 1)) {\n                return 0;\n            }\n            j++;\n        }\n        if (!equals(mr_a, mr_x1)) {\n            return 0;\n        }\n    }\n    return 1;\n}\n//returns how many bits long the bigInt is, not counting leading zeros.\nfunction bitSize(x) {\n    var j, z, w;\n    for (j = x.length - 1; x[j] == 0 && j > 0; j--)\n        ;\n    for (z = 0, w = x[j]; w; w >>= 1, z++)\n        ;\n    z += bpe * j;\n    return z;\n}\n//return a copy of x with at least n elements, adding leading zeros if needed\nfunction expand(x, n) {\n    var ans = int2bigInt(0, (x.length > n ? x.length : n) * bpe, 0);\n    copy_(ans, x);\n    return ans;\n}\n//return a k-bit true random prime using Maurer's algorithm.\nfunction randTruePrime(k) {\n    var ans = int2bigInt(0, k, 0);\n    randTruePrime_(ans, k);\n    return trim(ans, 1);\n}\n//return a k-bit random probable prime with probability of error < 2^-80\nfunction randProbPrime(k) {\n    if (k >= 600)\n        return randProbPrimeRounds(k, 2); //numbers from HAC table 4.3\n    if (k >= 550)\n        return randProbPrimeRounds(k, 4);\n    if (k >= 500)\n        return randProbPrimeRounds(k, 5);\n    if (k >= 400)\n        return randProbPrimeRounds(k, 6);\n    if (k >= 350)\n        return randProbPrimeRounds(k, 7);\n    if (k >= 300)\n        return randProbPrimeRounds(k, 9);\n    if (k >= 250)\n        return randProbPrimeRounds(k, 12); //numbers from HAC table 4.4\n    if (k >= 200)\n        return randProbPrimeRounds(k, 15);\n    if (k >= 150)\n        return randProbPrimeRounds(k, 18);\n    if (k >= 100)\n        return randProbPrimeRounds(k, 27);\n    return randProbPrimeRounds(k, 40); //number from HAC remark 4.26 (only an estimate)\n}\n//return a k-bit probable random prime using n rounds of Miller Rabin (after trial division with small primes)\nfunction randProbPrimeRounds(k, n) {\n    var ans, i, divisible, B;\n    B = 30000; //B is largest prime to use in trial division\n    ans = int2bigInt(0, k, 0);\n    //optimization: try larger and smaller B to find the best limit.\n    if (primes.length == 0) {\n        primes = findPrimes(30000);\n    } //check for divisibility by primes <=30000\n    if (rpprb.length != ans.length) {\n        rpprb = dup(ans);\n    }\n    for (;;) {\n        //keep trying random values for ans until one appears to be prime\n        //optimization: pick a random number times L=2*3*5*...*p, plus a\n        //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\n        //   This can reduce the amount of random number generation.\n        randBigInt_(ans, k, 0); //ans = a random odd number to check\n        ans[0] |= 1;\n        divisible = 0;\n        //check ans for divisibility by small primes up to B\n        for (i = 0; i < primes.length && primes[i] <= B; i++)\n            if (modInt(ans, primes[i]) == 0 && !equalsInt(ans, primes[i])) {\n                divisible = 1;\n                break;\n            }\n        //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\n        //do n rounds of Miller Rabin, with random bases less than ans\n        for (i = 0; i < n && !divisible; i++) {\n            randBigInt_(rpprb, k, 0);\n            while (!greater(ans, rpprb))\n                //pick a random rpprb that's < ans\n                randBigInt_(rpprb, k, 0);\n            if (!millerRabin(ans, rpprb)) {\n                divisible = 1;\n            }\n        }\n        if (!divisible) {\n            return ans;\n        }\n    }\n}\n//return a new bigInt equal to (x mod n) for bigInts x and n.\nfunction mod(x, n) {\n    var ans = dup(x);\n    mod_(ans, n);\n    return trim(ans, 1);\n}\n//return (x+n) where x is a bigInt and n is an integer.\nfunction addInt(x, n) {\n    var ans = expand(x, x.length + 1);\n    addInt_(ans, n);\n    return trim(ans, 1);\n}\n//return x*y for bigInts x and y. This is faster when y<x.\nfunction mult(x, y) {\n    var ans = expand(x, x.length + y.length);\n    mult_(ans, y);\n    return trim(ans, 1);\n}\n//return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\nfunction powMod(x, y, n) {\n    var ans = expand(x, n.length);\n    powMod_(ans, trim(y, 2), trim(n, 2), 0); //this should work without the trim, but doesn't\n    return trim(ans, 1);\n}\n//return (x-y) for bigInts x and y.  Negative answers will be 2s complement\nfunction sub(x, y) {\n    var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1);\n    sub_(ans, y);\n    return trim(ans, 1);\n}\n//return (x+y) for bigInts x and y.\nfunction add(x, y) {\n    var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1);\n    add_(ans, y);\n    return trim(ans, 1);\n}\n//return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\nfunction inverseMod(x, n) {\n    var ans = expand(x, n.length);\n    var s;\n    s = inverseMod_(ans, n);\n    return s ? trim(ans, 1) : null;\n}\n//return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\nfunction multMod(x, y, n) {\n    var ans = expand(x, n.length);\n    multMod_(ans, y, n);\n    return trim(ans, 1);\n}\n/* TUTAO: not used\n //generate a k-bit true random prime using Maurer's algorithm,\n //and put it into ans.  The bigInt ans must be large enough to hold it.\n function randTruePrime_(ans,k) {\n var c,m,pm,dd,j,r,B,divisible,z,zz,recSize;\n\n if (primes.length==0)\n primes=findPrimes(30000);  //check for divisibility by primes <=30000\n\n if (pows.length==0) {\n pows=new Array(512);\n for (j=0;j<512;j++) {\n pows[j]=Math.pow(2,j/511.-1.);\n }\n }\n\n //c and m should be tuned for a particular machine and value of k, to maximize speed\n c=0.1;  //c=0.1 in HAC\n m=20;   //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n recLimit=20; //stop recursion when k <=recLimit.  Must have recLimit >= 2\n\n if (s_i2.length!=ans.length) {\n s_i2=dup(ans);\n s_R =dup(ans);\n s_n1=dup(ans);\n s_r2=dup(ans);\n s_d =dup(ans);\n s_x1=dup(ans);\n s_x2=dup(ans);\n s_b =dup(ans);\n s_n =dup(ans);\n s_i =dup(ans);\n s_rm=dup(ans);\n s_q =dup(ans);\n s_a =dup(ans);\n s_aa=dup(ans);\n }\n\n if (k <= recLimit) {  //generate small random primes by trial division up to its square root\n pm=(1<<((k+2)>>1))-1; //pm is binary number with all ones, just over sqrt(2^k)\n copyInt_(ans,0);\n for (dd=1;dd;) {\n dd=0;\n ans[0]= 1 | (1<<(k-1)) | Math.floor(Math.random()*(1<<k));  //random, k-bit, odd integer, with msb 1\n for (j=1;(j<primes.length) && ((primes[j]&pm)==primes[j]);j++) { //trial division by all primes 3...sqrt(2^k)\n if (0==(ans[0]%primes[j])) {\n dd=1;\n break;\n }\n }\n }\n carry_(ans);\n return;\n }\n\n B=c*k*k;    //try small primes up to B (or all the primes[] array if the largest is less than B).\n if (k>2*m)  //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n for (r=1; k-k*r<=m; )\n r=pows[Math.floor(Math.random()*512)];   //r=Math.pow(2,Math.random()-1);\n else\n r=.5;\n\n //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\n\n recSize=Math.floor(r*k)+1;\n\n randTruePrime_(s_q,recSize);\n copyInt_(s_i2,0);\n s_i2[Math.floor((k-2)/bpe)] |= (1<<((k-2)%bpe));   //s_i2=2^(k-2)\n divide_(s_i2,s_q,s_i,s_rm);                        //s_i=floor((2^(k-1))/(2q))\n\n z=bitSize(s_i);\n\n for (;;) {\n for (;;) {  //generate z-bit numbers until one falls in the range [0,s_i-1]\n randBigInt_(s_R,z,0);\n if (greater(s_i,s_R))\n break;\n }                //now s_R is in the range [0,s_i-1]\n addInt_(s_R,1);  //now s_R is in the range [1,s_i]\n add_(s_R,s_i);   //now s_R is in the range [s_i+1,2*s_i]\n\n copy_(s_n,s_q);\n mult_(s_n,s_R);\n multInt_(s_n,2);\n addInt_(s_n,1);    //s_n=2*s_R*s_q+1\n\n copy_(s_r2,s_R);\n multInt_(s_r2,2);  //s_r2=2*s_R\n\n //check s_n for divisibility by small primes up to B\n for (divisible=0,j=0; (j<primes.length) && (primes[j]<B); j++)\n if (modInt(s_n,primes[j])==0 && !equalsInt(s_n,primes[j])) {\n divisible=1;\n break;\n }\n\n if (!divisible)    //if it passes small primes check, then try a single Miller-Rabin base 2\n if (!millerRabinInt(s_n,2)) //this line represents 75% of the total runtime for randTruePrime_\n divisible=1;\n\n if (!divisible) {  //if it passes that test, continue checking s_n\n addInt_(s_n,-3);\n for (j=s_n.length-1;(s_n[j]==0) && (j>0); j--);  //strip leading zeros\n for (zz=0,w=s_n[j]; w; (w>>=1),zz++);\n zz+=bpe*j;                             //zz=number of bits in s_n, ignoring leading zeros\n for (;;) {  //generate z-bit numbers until one falls in the range [0,s_n-1]\n randBigInt_(s_a,zz,0);\n if (greater(s_n,s_a))\n break;\n }                //now s_a is in the range [0,s_n-1]\n addInt_(s_n,3);  //now s_a is in the range [0,s_n-4]\n addInt_(s_a,2);  //now s_a is in the range [2,s_n-2]\n copy_(s_b,s_a);\n copy_(s_n1,s_n);\n addInt_(s_n1,-1);\n powMod_(s_b,s_n1,s_n);   //s_b=s_a^(s_n-1) modulo s_n\n addInt_(s_b,-1);\n if (isZero(s_b)) {\n copy_(s_b,s_a);\n powMod_(s_b,s_r2,s_n);\n addInt_(s_b,-1);\n copy_(s_aa,s_n);\n copy_(s_d,s_b);\n GCD_(s_d,s_n);  //if s_b and s_n are relatively prime, then s_n is a prime\n if (equalsInt(s_d,1)) {\n copy_(ans,s_aa);\n return;     //if we've made it this far, then s_n is absolutely guaranteed to be prime\n }\n }\n }\n }\n }\n */\n//Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\nfunction randBigInt(n, s) {\n    var a, b;\n    a = Math.floor((n - 1) / bpe) + 2; //# array elements to hold the BigInt with a leading 0 element\n    b = int2bigInt(0, 0, a);\n    randBigInt_(b, n, s);\n    return b;\n}\n/* TUTAO: not used\n //Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\n //Array b must be big enough to hold the result. Must have n>=1\n function randBigInt_(b,n,s) {\n var i,a;\n for (i=0;i<b.length;i++)\n b[i]=0;\n a=Math.floor((n-1)/bpe)+1; //# array elements to hold the BigInt\n for (i=0;i<a;i++) {\n b[i]=Math.floor(Math.random()*(1<<(bpe-1)));\n }\n b[a-1] &= (2<<((n-1)%bpe))-1;\n if (s==1)\n b[a-1] |= (1<<((n-1)%bpe));\n }\n */\n//Return the greatest common divisor of bigInts x and y (each with same number of elements).\nfunction GCD(x, y) {\n    var xc, yc;\n    xc = dup(x);\n    yc = dup(y);\n    GCD_(xc, yc);\n    return xc;\n}\n//set x to the greatest common divisor of bigInts x and y (each with same number of elements).\n//y is destroyed.\nfunction GCD_(x, y) {\n    var i, xp, yp, A, B, C, D, q, sing;\n    if (T.length != x.length) {\n        T = dup(x);\n    }\n    sing = 1;\n    while (sing) {\n        //while y has nonzero elements other than y[0]\n        sing = 0;\n        for (i = 1; i < y.length; i++ //check if y has nonzero elements other than 0\n        )\n            if (y[i]) {\n                sing = 1;\n                break;\n            }\n        if (!sing)\n            break; //quit when y all zero elements except possibly y[0]\n        for (i = x.length; !x[i] && i >= 0; i--)\n            ; //find most significant element of x\n        xp = x[i];\n        yp = y[i];\n        A = 1;\n        B = 0;\n        C = 0;\n        D = 1;\n        while (yp + C && yp + D) {\n            q = Math.floor((xp + A) / (yp + C));\n            let qp = Math.floor((xp + B) / (yp + D));\n            if (q != qp) {\n                break;\n            }\n            t = A - q * C;\n            A = C;\n            C = t; //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)\n            t = B - q * D;\n            B = D;\n            D = t;\n            t = xp - q * yp;\n            xp = yp;\n            yp = t;\n        }\n        if (B) {\n            copy_(T, x);\n            linComb_(x, y, A, B); //x=A*x+B*y\n            linComb_(y, T, D, C); //y=D*y+C*T\n        }\n        else {\n            mod_(x, y);\n            copy_(T, x);\n            copy_(x, y);\n            copy_(y, T);\n        }\n    }\n    if (y[0] == 0) {\n        return;\n    }\n    t = modInt(x, y[0]);\n    copyInt_(x, y[0]);\n    y[0] = t;\n    while (y[0]) {\n        x[0] %= y[0];\n        t = x[0];\n        x[0] = y[0];\n        y[0] = t;\n    }\n}\n//do x=x**(-1) mod n, for bigInts x and n.\n//If no inverse exists, it sets x to zero and returns 0, else it returns 1.\n//The x array must be at least as large as the n array.\nfunction inverseMod_(x, n) {\n    var k = 1 + 2 * Math.max(x.length, n.length);\n    if (!(x[0] & 1) && !(n[0] & 1)) {\n        //if both inputs are even, then inverse doesn't exist\n        copyInt_(x, 0);\n        return 0;\n    }\n    if (eg_u.length != k) {\n        eg_u = new Array(k);\n        eg_v = new Array(k);\n        eg_A = new Array(k);\n        eg_B = new Array(k);\n        eg_C = new Array(k);\n        eg_D = new Array(k);\n    }\n    copy_(eg_u, x);\n    copy_(eg_v, n);\n    copyInt_(eg_A, 1);\n    copyInt_(eg_B, 0);\n    copyInt_(eg_C, 0);\n    copyInt_(eg_D, 1);\n    for (;;) {\n        while (!(eg_u[0] & 1)) {\n            //while eg_u is even\n            halve_(eg_u);\n            if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\n                //if eg_A==eg_B==0 mod 2\n                halve_(eg_A);\n                halve_(eg_B);\n            }\n            else {\n                add_(eg_A, n);\n                halve_(eg_A);\n                sub_(eg_B, x);\n                halve_(eg_B);\n            }\n        }\n        while (!(eg_v[0] & 1)) {\n            //while eg_v is even\n            halve_(eg_v);\n            if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\n                //if eg_C==eg_D==0 mod 2\n                halve_(eg_C);\n                halve_(eg_D);\n            }\n            else {\n                add_(eg_C, n);\n                halve_(eg_C);\n                sub_(eg_D, x);\n                halve_(eg_D);\n            }\n        }\n        if (!greater(eg_v, eg_u)) {\n            //eg_v <= eg_u\n            sub_(eg_u, eg_v);\n            sub_(eg_A, eg_C);\n            sub_(eg_B, eg_D);\n        }\n        else {\n            //eg_v > eg_u\n            sub_(eg_v, eg_u);\n            sub_(eg_C, eg_A);\n            sub_(eg_D, eg_B);\n        }\n        if (equalsInt(eg_u, 0)) {\n            if (negative(eg_C)) {\n                //make sure answer is nonnegative\n                add_(eg_C, n);\n            }\n            copy_(x, eg_C);\n            if (!equalsInt(eg_v, 1)) {\n                //if GCD_(x,n)!=1, then there is no inverse\n                copyInt_(x, 0);\n                return 0;\n            }\n            return 1;\n        }\n    }\n}\n//return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\nfunction inverseModInt(x, n) {\n    var a = 1, b = 0, t;\n    for (;;) {\n        if (x == 1)\n            return a;\n        if (x == 0)\n            return 0;\n        b -= a * Math.floor(n / x);\n        n %= x;\n        if (n == 1)\n            return b; //to avoid negatives, change this b to n-b, and each -= to +=\n        if (n == 0)\n            return 0;\n        a -= b * Math.floor(x / n);\n        x %= n;\n    }\n}\n//this deprecated function is for backward compatibility only.\nfunction inverseModInt_(x, n) {\n    return inverseModInt(x, n);\n}\n//Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\n//     v = GCD_(x,y) = a*x-b*y\n//The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\nfunction eGCD_(x, y, v, a, b) {\n    var g = 0;\n    var k = Math.max(x.length, y.length);\n    if (eg_u.length != k) {\n        eg_u = new Array(k);\n        eg_A = new Array(k);\n        eg_B = new Array(k);\n        eg_C = new Array(k);\n        eg_D = new Array(k);\n    }\n    while (!(x[0] & 1) && !(y[0] & 1)) {\n        //while x and y both even\n        halve_(x);\n        halve_(y);\n        g++;\n    }\n    copy_(eg_u, x);\n    copy_(v, y);\n    copyInt_(eg_A, 1);\n    copyInt_(eg_B, 0);\n    copyInt_(eg_C, 0);\n    copyInt_(eg_D, 1);\n    for (;;) {\n        while (!(eg_u[0] & 1)) {\n            //while u is even\n            halve_(eg_u);\n            if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\n                //if A==B==0 mod 2\n                halve_(eg_A);\n                halve_(eg_B);\n            }\n            else {\n                add_(eg_A, y);\n                halve_(eg_A);\n                sub_(eg_B, x);\n                halve_(eg_B);\n            }\n        }\n        while (!(v[0] & 1)) {\n            //while v is even\n            halve_(v);\n            if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\n                //if C==D==0 mod 2\n                halve_(eg_C);\n                halve_(eg_D);\n            }\n            else {\n                add_(eg_C, y);\n                halve_(eg_C);\n                sub_(eg_D, x);\n                halve_(eg_D);\n            }\n        }\n        if (!greater(v, eg_u)) {\n            //v<=u\n            sub_(eg_u, v);\n            sub_(eg_A, eg_C);\n            sub_(eg_B, eg_D);\n        }\n        else {\n            //v>u\n            sub_(v, eg_u);\n            sub_(eg_C, eg_A);\n            sub_(eg_D, eg_B);\n        }\n        if (equalsInt(eg_u, 0)) {\n            if (negative(eg_C)) {\n                //make sure a (C)is nonnegative\n                add_(eg_C, y);\n                sub_(eg_D, x);\n            }\n            multInt_(eg_D, -1); ///make sure b (D) is nonnegative\n            copy_(a, eg_C);\n            copy_(b, eg_D);\n            leftShift_(v, g);\n            return;\n        }\n    }\n}\n//is bigInt x negative?\nfunction negative(x) {\n    return (x[x.length - 1] >> (bpe - 1)) & 1;\n}\n//is (x << (shift*bpe)) > y?\n//x and y are nonnegative bigInts\n//shift is a nonnegative integer\nfunction greaterShift(x, y, shift) {\n    var i, kx = x.length, ky = y.length, k = kx + shift < ky ? kx + shift : ky;\n    for (i = ky - 1 - shift; i < kx && i >= 0; i++)\n        if (x[i] > 0) {\n            return 1;\n        } //if there are nonzeros in x to the left of the first column of y, then x is bigger\n    for (i = kx - 1 + shift; i < ky; i++)\n        if (y[i] > 0) {\n            return 0;\n        } //if there are nonzeros in y to the left of the first column of x, then x is not bigger\n    for (i = k - 1; i >= shift; i--)\n        if (x[i - shift] > y[i]) {\n            return 1;\n        }\n        else if (x[i - shift] < y[i])\n            return 0;\n    return 0;\n}\n//is x > y? (x and y both nonnegative)\nfunction greater(x, y) {\n    var i;\n    var k = x.length < y.length ? x.length : y.length;\n    for (i = x.length; i < y.length; i++)\n        if (y[i]) {\n            return 0;\n        } //y has more digits\n    for (i = y.length; i < x.length; i++)\n        if (x[i]) {\n            return 1;\n        } //x has more digits\n    for (i = k - 1; i >= 0; i--)\n        if (x[i] > y[i]) {\n            return 1;\n        }\n        else if (x[i] < y[i]) {\n            return 0;\n        }\n    return 0;\n}\n//divide x by y giving quotient q and remainder r.  (q=floor(x/y),  r=x mod y).  All 4 are bigints.\n//x must have at least one leading zero element.\n//y must be nonzero.\n//q and r must be arrays that are exactly the same length as x. (Or q can have more).\n//Must have x.length >= y.length >= 2.\nfunction divide_(x, y, q, r) {\n    var kx, ky;\n    var i, j, y1, y2, c, a, b;\n    copy_(r, x);\n    for (ky = y.length; y[ky - 1] == 0; ky--)\n        ; //ky is number of elements in y, not including leading zeros\n    //normalize: ensure the most significant element of y has its highest bit set\n    b = y[ky - 1];\n    for (a = 0; b; a++)\n        b >>= 1;\n    a = bpe - a; //a is how many bits to shift so that the high order bit of y is leftmost in its array element\n    leftShift_(y, a); //multiply both by 1<<a now, then divide both by that at the end\n    leftShift_(r, a);\n    //Rob Visser discovered a bug: the following line was originally just before the normalization.\n    for (kx = r.length; r[kx - 1] == 0 && kx > ky; kx--)\n        ; //kx is number of elements in normalized x, not including leading zeros\n    copyInt_(q, 0); // q=0\n    while (!greaterShift(y, r, kx - ky)) {\n        // while (leftShift_(y,kx-ky) <= r) {\n        subShift_(r, y, kx - ky); //   r=r-leftShift_(y,kx-ky)\n        q[kx - ky]++; //   q[kx-ky]++;\n    } // }\n    for (i = kx - 1; i >= ky; i--) {\n        if (r[i] == y[ky - 1]) {\n            q[i - ky] = mask;\n        }\n        else {\n            q[i - ky] = Math.floor((r[i] * radix + r[i - 1]) / y[ky - 1]);\n        }\n        //The following for(;;) loop is equivalent to the commented while loop,\n        //except that the uncommented version avoids overflow.\n        //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\n        //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\n        //    q[i-ky]--;\n        for (;;) {\n            y2 = (ky > 1 ? y[ky - 2] : 0) * q[i - ky];\n            c = y2 >> bpe;\n            y2 = y2 & mask;\n            y1 = c + q[i - ky] * y[ky - 1];\n            c = y1 >> bpe;\n            y1 = y1 & mask;\n            if (c == r[i] ? (y1 == r[i - 1] ? y2 > (i > 1 ? r[i - 2] : 0) : y1 > r[i - 1]) : c > r[i]) {\n                q[i - ky]--;\n            }\n            else {\n                break;\n            }\n        }\n        linCombShift_(r, y, -q[i - ky], i - ky); //r=r-q[i-ky]*leftShift_(y,i-ky)\n        if (negative(r)) {\n            addShift_(r, y, i - ky); //r=r+leftShift_(y,i-ky)\n            q[i - ky]--;\n        }\n    }\n    rightShift_(y, a); //undo the normalization step\n    rightShift_(r, a); //undo the normalization step\n}\n//do carries and borrows so each element of the bigInt x fits in bpe bits.\nfunction carry_(x) {\n    var i, k, c, b;\n    k = x.length;\n    c = 0;\n    for (i = 0; i < k; i++) {\n        c += x[i];\n        b = 0;\n        if (c < 0) {\n            b = -(c >> bpe);\n            c += b * radix;\n        }\n        x[i] = c & mask;\n        c = (c >> bpe) - b;\n    }\n}\n//return x mod n for bigInt x and integer n.\nfunction modInt(x, n) {\n    var i, c = 0;\n    for (i = x.length - 1; i >= 0; i--)\n        c = (c * radix + x[i]) % n;\n    return c;\n}\n//convert the integer t into a bigInt with at least the given number of bits.\n//the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\n//Pad the array with leading zeros so that it has at least minSize elements.\n//There will always be at least one leading 0 element.\nfunction int2bigInt(t, bits, minSize) {\n    var i, k, buff;\n    k = Math.ceil(bits / bpe) + 1;\n    k = minSize > k ? minSize : k;\n    buff = new Array(k);\n    copyInt_(buff, t);\n    return buff;\n}\n//return the bigInt given a string representation in a given base.\n//Pad the array with leading zeros so that it has at least minSize elements.\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\n//The array will always have at least one leading zero, unless base=-1.\nfunction str2bigInt(s, base, minSize) {\n    var d, i, j, x, y, kk;\n    var k = s.length;\n    if (base == -1) {\n        //comma-separated list of array elements in decimal\n        x = new Array(0);\n        for (;;) {\n            y = new Array(x.length + 1);\n            for (i = 0; i < x.length; i++)\n                y[i + 1] = x[i];\n            y[0] = parseInt(s, 10);\n            x = y;\n            d = s.indexOf(\",\", 0);\n            if (d < 1) {\n                break;\n            }\n            s = s.substring(d + 1);\n            if (s.length == 0) {\n                break;\n            }\n        }\n        if (x.length < minSize) {\n            y = new Array(minSize);\n            copy_(y, x);\n            return y;\n        }\n        return x;\n    }\n    x = int2bigInt(0, base * k, 0);\n    for (i = 0; i < k; i++) {\n        d = digitsStr.indexOf(s.substring(i, i + 1), 0);\n        if (base <= 36 && d >= 36) {\n            //convert lowercase to uppercase if base<=36\n            d -= 26;\n        }\n        if (d >= base || d < 0) {\n            //stop at first illegal character\n            break;\n        }\n        multInt_(x, base);\n        addInt_(x, d);\n    }\n    for (k = x.length; k > 0 && !x[k - 1]; k--)\n        ; //strip off leading zeros\n    k = minSize > k + 1 ? minSize : k + 1;\n    y = new Array(k);\n    kk = k < x.length ? k : x.length;\n    for (i = 0; i < kk; i++)\n        y[i] = x[i];\n    for (; i < k; i++)\n        y[i] = 0;\n    return y;\n}\n//is bigint x equal to integer y?\n//y must have less than bpe bits\nfunction equalsInt(x, y) {\n    var i;\n    if (x[0] != y) {\n        return 0;\n    }\n    for (i = 1; i < x.length; i++)\n        if (x[i]) {\n            return 0;\n        }\n    return 1;\n}\n//are bigints x and y equal?\n//this works even if x and y are different lengths and have arbitrarily many leading zeros\nfunction equals(x, y) {\n    var i;\n    var k = x.length < y.length ? x.length : y.length;\n    for (i = 0; i < k; i++)\n        if (x[i] != y[i]) {\n            return 0;\n        }\n    if (x.length > y.length) {\n        for (; i < x.length; i++)\n            if (x[i]) {\n                return 0;\n            }\n    }\n    else {\n        for (; i < y.length; i++)\n            if (y[i]) {\n                return 0;\n            }\n    }\n    return 1;\n}\n//is the bigInt x equal to zero?\nfunction isZero(x) {\n    var i;\n    for (i = 0; i < x.length; i++)\n        if (x[i]) {\n            return 0;\n        }\n    return 1;\n}\n//convert a bigInt into a string in a given base, from base 2 up to base 95.\n//Base -1 prints the contents of the array representing the number.\nfunction bigInt2str(x, base) {\n    var i, t, s = \"\";\n    if (s6.length != x.length) {\n        s6 = dup(x);\n    }\n    else {\n        copy_(s6, x);\n    }\n    if (base == -1) {\n        //return the list of array contents\n        for (i = x.length - 1; i > 0; i--)\n            s += x[i] + \",\";\n        s += x[0];\n    }\n    else {\n        //return it in the given base\n        while (!isZero(s6)) {\n            t = divInt_(s6, base); //t=s6 % base; s6=floor(s6/base);\n            s = digitsStr.substring(t, t + 1) + s;\n        }\n    }\n    if (s.length == 0) {\n        s = \"0\";\n    }\n    return s;\n}\n//returns a duplicate of bigInt x\nfunction dup(x) {\n    var i, buff;\n    buff = new Array(x.length);\n    copy_(buff, x);\n    return buff;\n}\n//do x=y on bigInts x and y.  x must be an array at least as big as y (not counting the leading zeros in y).\nfunction copy_(x, y) {\n    var i;\n    var k = x.length < y.length ? x.length : y.length;\n    for (i = 0; i < k; i++)\n        x[i] = y[i];\n    for (i = k; i < x.length; i++)\n        x[i] = 0;\n}\n//do x=y on bigInt x and integer y.\nfunction copyInt_(x, n) {\n    var i, c;\n    for (c = n, i = 0; i < x.length; i++) {\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n//do x=x+n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nfunction addInt_(x, n) {\n    var i, k, c, b;\n    x[0] += n;\n    k = x.length;\n    c = 0;\n    for (i = 0; i < k; i++) {\n        c += x[i];\n        b = 0;\n        if (c < 0) {\n            b = -(c >> bpe);\n            c += b * radix;\n        }\n        x[i] = c & mask;\n        c = (c >> bpe) - b;\n        if (!c)\n            return; //stop carrying as soon as the carry is zero\n    }\n}\n//right shift bigInt x by n bits.  0 <= n < bpe.\nfunction rightShift_(x, n) {\n    var i;\n    var k = Math.floor(n / bpe);\n    if (k) {\n        for (i = 0; i < x.length - k; i++ //right shift x by k elements\n        )\n            x[i] = x[i + k];\n        for (; i < x.length; i++)\n            x[i] = 0;\n        n %= bpe;\n    }\n    for (i = 0; i < x.length - 1; i++) {\n        x[i] = mask & ((x[i + 1] << (bpe - n)) | (x[i] >> n));\n    }\n    x[i] >>= n;\n}\n//do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\nfunction halve_(x) {\n    var i;\n    for (i = 0; i < x.length - 1; i++) {\n        x[i] = mask & ((x[i + 1] << (bpe - 1)) | (x[i] >> 1));\n    }\n    x[i] = (x[i] >> 1) | (x[i] & (radix >> 1)); //most significant bit stays the same\n}\n//left shift bigInt x by n bits.\nfunction leftShift_(x, n) {\n    var i;\n    var k = Math.floor(n / bpe);\n    if (k) {\n        for (i = x.length; i >= k; i-- //left shift x by k elements\n        )\n            x[i] = x[i - k];\n        for (; i >= 0; i--)\n            x[i] = 0;\n        n %= bpe;\n    }\n    if (!n) {\n        return;\n    }\n    for (i = x.length - 1; i > 0; i--) {\n        x[i] = mask & ((x[i] << n) | (x[i - 1] >> (bpe - n)));\n    }\n    x[i] = mask & (x[i] << n);\n}\n//do x=x*n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nfunction multInt_(x, n) {\n    var i, k, c, b;\n    if (!n) {\n        return;\n    }\n    k = x.length;\n    c = 0;\n    for (i = 0; i < k; i++) {\n        c += x[i] * n;\n        b = 0;\n        if (c < 0) {\n            b = -(c >> bpe);\n            c += b * radix;\n        }\n        x[i] = c & mask;\n        c = (c >> bpe) - b;\n    }\n}\n//do x=floor(x/n) for bigInt x and integer n, and return the remainder\nfunction divInt_(x, n) {\n    var i, r = 0, s;\n    for (i = x.length - 1; i >= 0; i--) {\n        s = r * radix + x[i];\n        x[i] = Math.floor(s / n);\n        r = s % n;\n    }\n    return r;\n}\n//do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\n//x must be large enough to hold the answer.\nfunction linComb_(x, y, a, b) {\n    var i, c, k, kk;\n    k = x.length < y.length ? x.length : y.length;\n    kk = x.length;\n    for (c = 0, i = 0; i < k; i++) {\n        c += a * x[i] + b * y[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; i < kk; i++) {\n        c += a * x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n//do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\n//x must be large enough to hold the answer.\nfunction linCombShift_(x, y, b, ys) {\n    var i, c, k, kk;\n    k = x.length < ys + y.length ? x.length : ys + y.length;\n    kk = x.length;\n    for (c = 0, i = ys; i < k; i++) {\n        c += x[i] + b * y[i - ys];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; c && i < kk; i++) {\n        c += x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n//do x=x+(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction addShift_(x, y, ys) {\n    var i, c, k, kk;\n    k = x.length < ys + y.length ? x.length : ys + y.length;\n    kk = x.length;\n    for (c = 0, i = ys; i < k; i++) {\n        c += x[i] + y[i - ys];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; c && i < kk; i++) {\n        c += x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n//do x=x-(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction subShift_(x, y, ys) {\n    var i, c, k, kk;\n    k = x.length < ys + y.length ? x.length : ys + y.length;\n    kk = x.length;\n    for (c = 0, i = ys; i < k; i++) {\n        c += x[i] - y[i - ys];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; c && i < kk; i++) {\n        c += x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n//do x=x-y for bigInts x and y.\n//x must be large enough to hold the answer.\n//negative answers will be 2s complement\nfunction sub_(x, y) {\n    var i, c, k, kk;\n    k = x.length < y.length ? x.length : y.length;\n    for (c = 0, i = 0; i < k; i++) {\n        c += x[i] - y[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; c && i < x.length; i++) {\n        c += x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n//do x=x+y for bigInts x and y.\n//x must be large enough to hold the answer.\nfunction add_(x, y) {\n    var i, c, k, kk;\n    k = x.length < y.length ? x.length : y.length;\n    for (c = 0, i = 0; i < k; i++) {\n        c += x[i] + y[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n    for (i = k; c && i < x.length; i++) {\n        c += x[i];\n        x[i] = c & mask;\n        c >>= bpe;\n    }\n}\n//do x=x*y for bigInts x and y.  This is faster when y<x.\nfunction mult_(x, y) {\n    var i;\n    if (ss.length != 2 * x.length) {\n        ss = new Array(2 * x.length);\n    }\n    copyInt_(ss, 0);\n    for (i = 0; i < y.length; i++)\n        if (y[i]) {\n            linCombShift_(ss, x, y[i], i);\n        } //ss=1*ss+y[i]*(x<<(i*bpe))\n    copy_(x, ss);\n}\n//do x=x mod n for bigInts x and n.\nfunction mod_(x, n) {\n    if (s4.length != x.length) {\n        s4 = dup(x);\n    }\n    else {\n        copy_(s4, x);\n    }\n    if (s5.length != x.length) {\n        s5 = dup(x);\n    }\n    divide_(s4, n, s5, x); //x = remainder of s4 / n\n}\n//do x=x*y mod n for bigInts x,y,n.\n//for greater speed, let y<x.\nfunction multMod_(x, y, n) {\n    var i;\n    if (s0.length != 2 * x.length) {\n        s0 = new Array(2 * x.length);\n    }\n    copyInt_(s0, 0);\n    for (i = 0; i < y.length; i++)\n        if (y[i]) {\n            linCombShift_(s0, x, y[i], i);\n        } //s0=1*s0+y[i]*(x<<(i*bpe))\n    mod_(s0, n);\n    copy_(x, s0);\n}\n//do x=x*x mod n for bigInts x,n.\nfunction squareMod_(x, n) {\n    var i, j, d, c, kx, kn, k;\n    for (kx = x.length; kx > 0 && !x[kx - 1]; kx--)\n        ; //ignore leading zeros in x\n    k = kx > n.length ? 2 * kx : 2 * n.length; //k=# elements in the product, which is twice the elements in the larger of x and n\n    if (s0.length != k) {\n        s0 = new Array(k);\n    }\n    copyInt_(s0, 0);\n    for (i = 0; i < kx; i++) {\n        c = s0[2 * i] + x[i] * x[i];\n        s0[2 * i] = c & mask;\n        c >>= bpe;\n        for (j = i + 1; j < kx; j++) {\n            c = s0[i + j] + 2 * x[i] * x[j] + c;\n            s0[i + j] = c & mask;\n            c >>= bpe;\n        }\n        s0[i + kx] = c;\n    }\n    mod_(s0, n);\n    copy_(x, s0);\n}\n//return x with exactly k leading zero elements\nfunction trim(x, k) {\n    var i, y;\n    for (i = x.length; i > 0 && !x[i - 1]; i--)\n        ;\n    y = new Array(i + k);\n    copy_(y, x);\n    return y;\n}\n//do x=x**y mod n, where x,y,n are bigInts and ** is exponentiation.  0**0=1.\n//this is faster when n is odd.  x usually needs to have as many elements as n.\nfunction powMod_(x, y, n) {\n    var k1, k2, kn, np;\n    if (s7.length != n.length) {\n        s7 = dup(n);\n    }\n    //for even modulus, use a simple square-and-multiply algorithm,\n    //rather than using the more complex Montgomery algorithm.\n    if ((n[0] & 1) == 0) {\n        copy_(s7, x);\n        copyInt_(x, 1);\n        while (!equalsInt(y, 0)) {\n            if (y[0] & 1) {\n                multMod_(x, s7, n);\n            }\n            divInt_(y, 2);\n            squareMod_(s7, n);\n        }\n        return;\n    }\n    //calculate np from n for the Montgomery multiplications\n    copyInt_(s7, 0);\n    for (kn = n.length; kn > 0 && !n[kn - 1]; kn--)\n        ;\n    np = radix - inverseModInt(modInt(n, radix), radix);\n    s7[kn] = 1;\n    multMod_(x, s7, n); // x = x * 2**(kn*bp) mod n\n    if (s3.length != x.length) {\n        s3 = dup(x);\n    }\n    else {\n        copy_(s3, x);\n    }\n    for (k1 = y.length - 1; (k1 > 0) & !y[k1]; k1--)\n        ; //k1=first nonzero element of y\n    if (y[k1] == 0) {\n        //anything to the 0th power is 1\n        copyInt_(x, 1);\n        return;\n    }\n    for (k2 = 1 << (bpe - 1); k2 && !(y[k1] & k2); k2 >>= 1)\n        ; //k2=position of first 1 bit in y[k1]\n    for (;;) {\n        k2 >>= 1;\n        if (!k2) {\n            //look at next bit of y\n            k1--;\n            if (k1 < 0) {\n                mont_(x, one, n, np);\n                return;\n            }\n            k2 = 1 << (bpe - 1);\n        }\n        mont_(x, x, n, np);\n        if (k2 & y[k1]) {\n            //if next bit is a 1\n            mont_(x, s3, n, np);\n        }\n    }\n}\n//do x=x*y*Ri mod n for bigInts x,y,n,\n//  where Ri = 2**(-kn*bpe) mod n, and kn is the\n//  number of elements in the n array, not\n//  counting leading zeros.\n//x array must have at least as many elemnts as the n array\n//It's OK if x and y are the same variable.\n//must have:\n//  x,y < n\n//  n is odd\n//  np = -(n^(-1)) mod radix\nfunction mont_(x, y, n, np) {\n    var i, j, c, ui, t, ks;\n    var kn = n.length;\n    var ky = y.length;\n    if (sa.length != kn) {\n        sa = new Array(kn);\n    }\n    copyInt_(sa, 0);\n    for (; kn > 0 && n[kn - 1] == 0; kn--)\n        ; //ignore leading zeros of n\n    for (; ky > 0 && y[ky - 1] == 0; ky--)\n        ; //ignore leading zeros of y\n    ks = sa.length - 1; //sa will never have more than this many nonzero elements.\n    //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\n    for (i = 0; i < kn; i++) {\n        t = sa[0] + x[i] * y[0];\n        ui = ((t & mask) * np) & mask; //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\n        c = (t + ui * n[0]) >> bpe;\n        t = x[i];\n        //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\n        j = 1;\n        for (; j < ky - 4;) {\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n        }\n        for (; j < ky;) {\n            c += sa[j] + ui * n[j] + t * y[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n        }\n        for (; j < kn - 4;) {\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n        }\n        for (; j < kn;) {\n            c += sa[j] + ui * n[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n        }\n        for (; j < ks;) {\n            c += sa[j];\n            sa[j - 1] = c & mask;\n            c >>= bpe;\n            j++;\n        }\n        sa[j - 1] = c & mask;\n    }\n    if (!greater(n, sa)) {\n        sub_(sa, n);\n    }\n    copy_(x, sa);\n}\n","export var KeyPairType;\n(function (KeyPairType) {\n    KeyPairType[KeyPairType[\"RSA\"] = 0] = \"RSA\";\n    KeyPairType[KeyPairType[\"RSA_AND_ECC\"] = 1] = \"RSA_AND_ECC\";\n    KeyPairType[KeyPairType[\"TUTA_CRYPT\"] = 2] = \"TUTA_CRYPT\";\n})(KeyPairType || (KeyPairType = {}));\nexport function isPqKeyPairs(keyPair) {\n    return keyPair.keyPairType === KeyPairType.TUTA_CRYPT;\n}\nexport function isRsaOrRsaEccKeyPair(keyPair) {\n    return keyPair.keyPairType === KeyPairType.RSA || keyPair.keyPairType === KeyPairType.RSA_AND_ECC;\n}\nexport function isRsaEccKeyPair(keyPair) {\n    return keyPair.keyPairType === KeyPairType.RSA_AND_ECC;\n}\nexport function isPqPublicKey(publicKey) {\n    return publicKey.keyPairType === KeyPairType.TUTA_CRYPT;\n}\nexport function isRsaPublicKey(publicKey) {\n    return publicKey.keyPairType === KeyPairType.RSA;\n}\n","// @ts-ignore[untyped-import]\nimport { BigInteger, parseBigInt, RSAKey } from \"../internal/crypto-jsbn-2012-08-09_1.js\";\nimport { base64ToHex, base64ToUint8Array, concat, int8ArrayToBase64, uint8ArrayToHex } from \"@tutao/tutanota-utils\";\nimport { CryptoError } from \"../misc/CryptoError.js\";\nimport { sha256Hash } from \"../hashes/Sha256.js\";\nimport { KeyPairType } from \"./AsymmetricKeyPair.js\";\nconst RSA_KEY_LENGTH_BITS = 2048;\nconst RSA_PUBLIC_EXPONENT = 65537;\nexport function rsaEncrypt(publicKey, bytes, seed) {\n    const rsa = new RSAKey();\n    // we have double conversion from bytes to hex to big int because there is no direct conversion from bytes to big int\n    // BigInteger of JSBN uses a signed byte array and we convert to it by using Int8Array\n    rsa.n = new BigInteger(new Int8Array(base64ToUint8Array(publicKey.modulus)));\n    rsa.e = publicKey.publicExponent;\n    const paddedBytes = oaepPad(bytes, publicKey.keyLength, seed);\n    const paddedHex = uint8ArrayToHex(paddedBytes);\n    const bigInt = parseBigInt(paddedHex, 16);\n    let encrypted;\n    try {\n        // toByteArray() produces Array so we convert it to buffer.\n        encrypted = new Uint8Array(rsa.doPublic(bigInt).toByteArray());\n    }\n    catch (e) {\n        throw new CryptoError(\"failed RSA encryption\", e);\n    }\n    // the encrypted value might have leading zeros or needs to be padded with zeros\n    return _padAndUnpadLeadingZeros(publicKey.keyLength / 8, encrypted);\n}\nexport function rsaDecrypt(privateKey, bytes) {\n    try {\n        const rsa = new RSAKey();\n        // we have double conversion from bytes to hex to big int because there is no direct conversion from bytes to big int\n        // BigInteger of JSBN uses a signed byte array and we convert to it by using Int8Array\n        rsa.n = new BigInteger(new Int8Array(base64ToUint8Array(privateKey.modulus)));\n        rsa.d = new BigInteger(new Int8Array(base64ToUint8Array(privateKey.privateExponent)));\n        rsa.p = new BigInteger(new Int8Array(base64ToUint8Array(privateKey.primeP)));\n        rsa.q = new BigInteger(new Int8Array(base64ToUint8Array(privateKey.primeQ)));\n        rsa.dmp1 = new BigInteger(new Int8Array(base64ToUint8Array(privateKey.primeExponentP)));\n        rsa.dmq1 = new BigInteger(new Int8Array(base64ToUint8Array(privateKey.primeExponentQ)));\n        rsa.coeff = new BigInteger(new Int8Array(base64ToUint8Array(privateKey.crtCoefficient)));\n        const hex = uint8ArrayToHex(bytes);\n        const bigInt = parseBigInt(hex, 16);\n        const decrypted = new Uint8Array(rsa.doPrivate(bigInt).toByteArray());\n        // the decrypted value might have leading zeros or needs to be padded with zeros\n        const paddedDecrypted = _padAndUnpadLeadingZeros(privateKey.keyLength / 8 - 1, decrypted);\n        return oaepUnpad(paddedDecrypted, privateKey.keyLength);\n    }\n    catch (e) {\n        throw new CryptoError(\"failed RSA decryption\", e);\n    }\n}\n/**\n * Adds leading 0's to the given byte array until targeByteLength bytes are reached. Removes leading 0's if byteArray is longer than targetByteLength.\n */\nexport function _padAndUnpadLeadingZeros(targetByteLength, byteArray) {\n    const result = new Uint8Array(targetByteLength);\n    // JSBN produces results which are not always exact length.\n    // The byteArray might have leading 0 that make it larger than the actual result array length.\n    // Here we cut them off\n    // byteArray [0, 0, 1, 1, 1]\n    // target       [0, 0, 0, 0]\n    // result       [0, 1, 1, 1]\n    if (byteArray.length > result.length) {\n        const lastExtraByte = byteArray[byteArray.length - result.length - 1];\n        if (lastExtraByte !== 0) {\n            throw new CryptoError(`leading byte is not 0 but ${lastExtraByte}, encrypted length: ${byteArray.length}`);\n        }\n        byteArray = byteArray.slice(byteArray.length - result.length);\n    }\n    // If the byteArray is not as long as the result array we add leading 0's\n    // byteArray     [1, 1, 1]\n    // target     [0, 0, 0, 0]\n    // result     [0, 1, 1, 1]\n    result.set(byteArray, result.length - byteArray.length);\n    return result;\n}\n/********************************* OAEP *********************************/\n/**\n * Optimal Asymmetric Encryption Padding (OAEP) / RSA padding\n * @see https://tools.ietf.org/html/rfc3447#section-7.1\n *\n * @param value The byte array to encode.\n * @param keyLength The length of the RSA key in bit.\n * @param seed An array of 32 random bytes.\n * @return The padded byte array.\n */\nexport function oaepPad(value, keyLength, seed) {\n    let hashLength = 32; // bytes sha256\n    if (seed.length !== hashLength) {\n        throw new CryptoError(\"invalid seed length: \" + seed.length + \". expected: \" + hashLength + \" bytes!\");\n    }\n    if (value.length > keyLength / 8 - hashLength - 1) {\n        throw new CryptoError(\"invalid value length: \" + value.length + \". expected: max. \" + (keyLength / 8 - hashLength - 1));\n    }\n    let block = _getPSBlock(value, keyLength);\n    let dbMask = mgf1(seed, block.length - hashLength);\n    for (let i = hashLength; i < block.length; i++) {\n        block[i] ^= dbMask[i - hashLength];\n    }\n    // same as invoking sha256 directly because only one block is hashed\n    let seedMask = mgf1(block.slice(hashLength, block.length), hashLength);\n    for (let i = 0; i < seedMask.length; i++) {\n        block[i] = seed[i] ^ seedMask[i];\n    }\n    return block;\n}\n/**\n * @param value The byte array to unpad.\n * @param keyLength The length of the RSA key in bit.\n * @return The unpadded byte array.\n */\nexport function oaepUnpad(value, keyLength) {\n    let hashLength = 32; // bytes sha256\n    if (value.length !== keyLength / 8 - 1) {\n        throw new CryptoError(\"invalid value length: \" + value.length + \". expected: \" + (keyLength / 8 - 1) + \" bytes!\");\n    }\n    let seedMask = mgf1(value.slice(hashLength, value.length), hashLength);\n    let seed = new Uint8Array(hashLength);\n    for (let i = 0; i < seedMask.length; i++) {\n        seed[i] = value[i] ^ seedMask[i];\n    }\n    let dbMask = mgf1(seed, value.length - hashLength);\n    for (let i = hashLength; i < value.length; i++) {\n        value[i] ^= dbMask[i - hashLength];\n    }\n    // check that the zeros and the one is there\n    let index;\n    for (index = 2 * hashLength; index < value.length; index++) {\n        if (value[index] === 1) {\n            // found the 0x01\n            break;\n        }\n        else if (value[index] !== 0 || index === value.length) {\n            throw new CryptoError(\"invalid padding\");\n        }\n    }\n    return value.slice(index + 1, value.length);\n}\n/**\n * Provides a block of keyLength / 8 - 1 bytes with the following format:\n * [ zeros ] [ label hash ] [ zeros ] [ 1 ] [ value ]\n *    32           32    keyLen-2*32-2  1  value.length\n * The label is the hash of an empty string like defined in PKCS#1 v2.1\n */\nexport function _getPSBlock(value, keyLength) {\n    let hashLength = 32; // bytes sha256\n    let blockLength = keyLength / 8 - 1; // the leading byte shall be 0 to make the resulting value in any case smaller than the modulus, so we just leave the byte off\n    let block = new Uint8Array(blockLength);\n    let defHash = sha256Hash(new Uint8Array([])); // empty label\n    let nbrOfZeros = block.length - (1 + value.length);\n    for (let i = 0; i < block.length; i++) {\n        if (i >= hashLength && i < 2 * hashLength) {\n            block[i] = defHash[i - hashLength];\n        }\n        else if (i < nbrOfZeros) {\n            block[i] = 0;\n        }\n        else if (i === nbrOfZeros) {\n            block[i] = 1;\n        }\n        else {\n            block[i] = value[i - nbrOfZeros - 1];\n        }\n    }\n    return block;\n}\n/********************************* PSS *********************************/\n/**\n * @param message The byte array to encode.\n * @param keyLength The length of the RSA key in bit.\n * @param salt An array of random bytes.\n * @return The padded byte array.\n */\nexport function encode(message, keyLength, salt) {\n    let hashLength = 32; // bytes sha256\n    let emLen = Math.ceil(keyLength / 8);\n    if (salt.length !== hashLength) {\n        throw new Error(\"invalid _salt length: \" + salt.length + \". expected: \" + hashLength + \" bytes!\");\n    }\n    let length = hashLength + salt.length + 2;\n    if (emLen < length) {\n        throw new Error(\"invalid hash/_salt length: \" + length + \". expected: max. \" + emLen);\n    }\n    let emBits = keyLength - 1;\n    let minEmBitsLength = 8 * hashLength + 8 * salt.length + 9;\n    if (emBits < minEmBitsLength) {\n        throw new Error(\"invalid maximum emBits length. Was \" + emBits + \", expected: \" + minEmBitsLength);\n    }\n    let messageHash = sha256Hash(message);\n    //  M' = (0x)00 00 00 00 00 00 00 00 || mHash || _salt\n    let message2 = concat(new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), messageHash, salt);\n    let message2Hash = sha256Hash(message2);\n    let ps = new Uint8Array(emLen - salt.length - hashLength - 2);\n    for (let i = 0; i < ps.length; i++) {\n        ps[i] = 0;\n    }\n    let db = concat(ps, new Uint8Array([1]), salt);\n    _clear(ps);\n    let expectedDbLength = emLen - hashLength - 1;\n    if (db.length !== expectedDbLength) {\n        throw new Error(\"unexpected length of block: \" + db.length + \". Expected: \" + expectedDbLength);\n    }\n    let dbMask = mgf1(message2Hash, emLen - message2Hash.length - 1);\n    let maskedDb = new Uint8Array(dbMask.length);\n    for (let i = 0; i < dbMask.length; i++) {\n        maskedDb[i] = db[i] ^ dbMask[i];\n    }\n    _clear(db);\n    maskedDb[0] &= 0xff >> (8 * emLen - emBits);\n    let em = concat(maskedDb, message2Hash, new Uint8Array([188])); // 0xbc\n    _clear(maskedDb);\n    return em;\n}\n/**\n * clears an array to contain only zeros (0)\n */\nfunction _clear(array) {\n    if (!array) {\n        return;\n    }\n    array.fill(0);\n}\n/********************************* RSA utils *********************************/\n/**\n * @param seed An array of byte values.\n * @param length The length of the return value in bytes.\n */\nexport function mgf1(seed, length) {\n    let C = null;\n    let counter = 0;\n    let T = new Uint8Array(0);\n    do {\n        C = i2osp(counter);\n        T = concat(T, sha256Hash(concat(seed, C)));\n    } while (++counter < Math.ceil(length / (256 / 8)));\n    return T.slice(0, length);\n}\n/**\n * converts an integer to a 4 byte array\n */\nexport function i2osp(i) {\n    return new Uint8Array([(i >> 24) & 255, (i >> 16) & 255, (i >> 8) & 255, (i >> 0) & 255]);\n}\n/********************************* Key conversion *********************************/\n/**\n * @param publicKey\n * @returns The public key in a persistable array format\n * @private\n */\nfunction _publicKeyToArray(publicKey) {\n    return [_base64ToBigInt(publicKey.modulus)];\n}\n/**\n * @param privateKey\n * @returns The private key in a persistable array format\n * @private\n */\nfunction _privateKeyToArray(privateKey) {\n    return [\n        _base64ToBigInt(privateKey.modulus),\n        _base64ToBigInt(privateKey.privateExponent),\n        _base64ToBigInt(privateKey.primeP),\n        _base64ToBigInt(privateKey.primeQ),\n        _base64ToBigInt(privateKey.primeExponentP),\n        _base64ToBigInt(privateKey.primeExponentQ),\n        _base64ToBigInt(privateKey.crtCoefficient),\n    ];\n}\nfunction _arrayToPublicKey(publicKey) {\n    return {\n        keyPairType: KeyPairType.RSA,\n        version: 0,\n        keyLength: RSA_KEY_LENGTH_BITS,\n        modulus: int8ArrayToBase64(new Int8Array(publicKey[0].toByteArray())),\n        publicExponent: RSA_PUBLIC_EXPONENT,\n    };\n}\nfunction _arrayToPrivateKey(privateKey) {\n    return {\n        version: 0,\n        keyLength: RSA_KEY_LENGTH_BITS,\n        modulus: int8ArrayToBase64(new Int8Array(privateKey[0].toByteArray())),\n        privateExponent: int8ArrayToBase64(new Int8Array(privateKey[1].toByteArray())),\n        primeP: int8ArrayToBase64(new Int8Array(privateKey[2].toByteArray())),\n        primeQ: int8ArrayToBase64(new Int8Array(privateKey[3].toByteArray())),\n        primeExponentP: int8ArrayToBase64(new Int8Array(privateKey[4].toByteArray())),\n        primeExponentQ: int8ArrayToBase64(new Int8Array(privateKey[5].toByteArray())),\n        crtCoefficient: int8ArrayToBase64(new Int8Array(privateKey[6].toByteArray())),\n    };\n}\nfunction _base64ToBigInt(base64) {\n    return parseBigInt(base64ToHex(base64), 16);\n}\n/**\n * Provides the length of the given string as hex string of 4 characters length. Padding to 4 characters is done with '0'.\n * @param {string} string A string to get the length of.\n * @return {string} A hex string containing the length of string.\n */\nfunction _hexLen(string) {\n    let hexLen = string.length.toString(16);\n    while (hexLen.length < 4) {\n        hexLen = \"0\" + hexLen;\n    }\n    return hexLen;\n}\nexport function _keyArrayToHex(key) {\n    let hex = \"\";\n    for (let i = 0; i < key.length; i++) {\n        let param = key[i].toString(16);\n        if (param.length % 2 === 1) {\n            param = \"0\" + param;\n        }\n        hex += _hexLen(param) + param;\n    }\n    return hex;\n}\nfunction _hexToKeyArray(hex) {\n    try {\n        let key = [];\n        let pos = 0;\n        while (pos < hex.length) {\n            let nextParamLen = parseInt(hex.substring(pos, pos + 4), 16);\n            pos += 4;\n            key.push(parseBigInt(hex.substring(pos, pos + nextParamLen), 16));\n            pos += nextParamLen;\n        }\n        _validateKeyLength(key);\n        return key;\n    }\n    catch (e) {\n        throw new CryptoError(\"hex to rsa key failed\", e);\n    }\n}\nfunction _validateKeyLength(key) {\n    if (key.length !== 1 && key.length !== 7) {\n        throw new Error(\"invalid key params\");\n    }\n    if (key[0].bitLength() < RSA_KEY_LENGTH_BITS - 1 || key[0].bitLength() > RSA_KEY_LENGTH_BITS) {\n        throw new Error(\"invalid key length, expected: around \" + RSA_KEY_LENGTH_BITS + \", but was: \" + key[0].bitLength());\n    }\n}\nexport function rsaPrivateKeyToHex(privateKey) {\n    return _keyArrayToHex(_privateKeyToArray(privateKey));\n}\nexport function rsaPublicKeyToHex(publicKey) {\n    return _keyArrayToHex(_publicKeyToArray(publicKey));\n}\nexport function hexToRsaPrivateKey(privateKeyHex) {\n    return _arrayToPrivateKey(_hexToKeyArray(privateKeyHex));\n}\nexport function hexToRsaPublicKey(publicKeyHex) {\n    return _arrayToPublicKey(_hexToKeyArray(publicKeyHex));\n}\n","import { aesDecrypt, aesEncrypt, getKeyLengthBytes, KEY_LENGTH_BYTES_AES_128, KEY_LENGTH_BYTES_AES_256, unauthenticatedAesDecrypt } from \"./Aes.js\";\nimport { bitArrayToUint8Array, fixedIv, uint8ArrayToBitArray } from \"../misc/Utils.js\";\nimport { assertNotNull, concat, hexToUint8Array, uint8ArrayToHex } from \"@tutao/tutanota-utils\";\nimport { hexToRsaPrivateKey, hexToRsaPublicKey, rsaPrivateKeyToHex } from \"./Rsa.js\";\nimport { bytesToKyberPrivateKey, bytesToKyberPublicKey, kyberPrivateKeyToBytes } from \"./Liboqs/KyberKeyPair.js\";\nimport { KeyPairType } from \"./AsymmetricKeyPair.js\";\nexport function encryptKey(encryptionKey, keyToBeEncrypted) {\n    const keyLength = getKeyLengthBytes(encryptionKey);\n    if (keyLength === KEY_LENGTH_BYTES_AES_128) {\n        return aesEncrypt(encryptionKey, bitArrayToUint8Array(keyToBeEncrypted), fixedIv, false, false).slice(fixedIv.length);\n    }\n    else if (keyLength === KEY_LENGTH_BYTES_AES_256) {\n        return aesEncrypt(encryptionKey, bitArrayToUint8Array(keyToBeEncrypted), undefined, false, true);\n    }\n    else {\n        throw new Error(`invalid AES key length (must be 128-bit or 256-bit, got ${keyLength} bytes instead)`);\n    }\n}\nexport function decryptKey(encryptionKey, keyToBeDecrypted) {\n    const keyLength = getKeyLengthBytes(encryptionKey);\n    if (keyLength === KEY_LENGTH_BYTES_AES_128) {\n        return uint8ArrayToBitArray(aesDecrypt(encryptionKey, concat(fixedIv, keyToBeDecrypted), false));\n    }\n    else if (keyLength === KEY_LENGTH_BYTES_AES_256) {\n        return uint8ArrayToBitArray(aesDecrypt(encryptionKey, keyToBeDecrypted, false));\n    }\n    else {\n        throw new Error(`invalid AES key length (must be 128-bit or 256-bit, got ${keyLength} bytes instead)`);\n    }\n}\nexport function aes256DecryptWithRecoveryKey(encryptionKey, keyToBeDecrypted) {\n    // legacy case: recovery code without IV/mac\n    if (keyToBeDecrypted.length === KEY_LENGTH_BYTES_AES_128) {\n        return uint8ArrayToBitArray(unauthenticatedAesDecrypt(encryptionKey, concat(fixedIv, keyToBeDecrypted), false));\n    }\n    else {\n        return decryptKey(encryptionKey, keyToBeDecrypted);\n    }\n}\nexport function encryptRsaKey(encryptionKey, privateKey, iv) {\n    return aesEncrypt(encryptionKey, hexToUint8Array(rsaPrivateKeyToHex(privateKey)), iv, true, true);\n}\nexport function encryptEccKey(encryptionKey, privateKey) {\n    return aesEncrypt(encryptionKey, privateKey, undefined, true, true); // passing IV as undefined here is fine, as it will generate a new one for each encryption\n}\nexport function encryptKyberKey(encryptionKey, privateKey) {\n    return aesEncrypt(encryptionKey, kyberPrivateKeyToBytes(privateKey)); // passing IV as undefined here is fine, as it will generate a new one for each encryption\n}\nexport function decryptRsaKey(encryptionKey, encryptedPrivateKey) {\n    return hexToRsaPrivateKey(uint8ArrayToHex(aesDecrypt(encryptionKey, encryptedPrivateKey, true)));\n}\nexport function decryptKeyPair(encryptionKey, keyPair) {\n    if (keyPair.symEncPrivRsaKey) {\n        return decryptRsaOrRsaEccKeyPair(encryptionKey, keyPair);\n    }\n    else {\n        return decryptPQKeyPair(encryptionKey, keyPair);\n    }\n}\nfunction decryptRsaOrRsaEccKeyPair(encryptionKey, keyPair) {\n    const publicKey = hexToRsaPublicKey(uint8ArrayToHex(assertNotNull(keyPair.pubRsaKey)));\n    const privateKey = hexToRsaPrivateKey(uint8ArrayToHex(aesDecrypt(encryptionKey, keyPair.symEncPrivRsaKey, true)));\n    if (keyPair.symEncPrivEccKey) {\n        const publicEccKey = assertNotNull(keyPair.pubEccKey);\n        const privateEccKey = aesDecrypt(encryptionKey, assertNotNull(keyPair.symEncPrivEccKey));\n        return {\n            keyPairType: KeyPairType.RSA_AND_ECC,\n            publicKey,\n            privateKey,\n            publicEccKey,\n            privateEccKey,\n        };\n    }\n    else {\n        return { keyPairType: KeyPairType.RSA, publicKey, privateKey };\n    }\n}\nfunction decryptPQKeyPair(encryptionKey, keyPair) {\n    const eccPublicKey = assertNotNull(keyPair.pubEccKey, \"expected pub ecc key for PQ keypair\");\n    const eccPrivateKey = aesDecrypt(encryptionKey, assertNotNull(keyPair.symEncPrivEccKey, \"expected priv ecc key for PQ keypair\"));\n    const kyberPublicKey = bytesToKyberPublicKey(assertNotNull(keyPair.pubKyberKey, \"expected pub kyber key for PQ keypair\"));\n    const kyberPrivateKey = bytesToKyberPrivateKey(aesDecrypt(encryptionKey, assertNotNull(keyPair.symEncPrivKyberKey, \"expected enc priv kyber key for PQ keypair\")));\n    return {\n        keyPairType: KeyPairType.TUTA_CRYPT,\n        eccKeyPair: {\n            publicKey: eccPublicKey,\n            privateKey: eccPrivateKey,\n        },\n        kyberKeyPair: {\n            publicKey: kyberPublicKey,\n            privateKey: kyberPrivateKey,\n        },\n    };\n}\n","export function pqKeyPairsToPublicKeys(keyPairs) {\n    return {\n        keyPairType: keyPairs.keyPairType,\n        eccPublicKey: keyPairs.eccKeyPair.publicKey,\n        kyberPublicKey: keyPairs.kyberKeyPair.publicKey,\n    };\n}\n","// @ts-ignore[untyped-import]\nimport sjcl from \"../internal/sjcl.js\";\nconst sha1 = new sjcl.hash.sha1();\n/**\n * Create the hash of the given data.\n * @param uint8Array The bytes.\n * @return The hash.\n */\nexport function sha1Hash(uint8Array) {\n    try {\n        sha1.update(sjcl.codec.arrayBuffer.toBits(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength));\n        return new Uint8Array(sjcl.codec.arrayBuffer.fromBits(sha1.finalize(), false));\n    }\n    finally {\n        sha1.reset();\n    }\n}\n","// @ts-ignore[untyped-import]\nimport sjcl from \"../internal/sjcl.js\";\nimport { bitArrayToUint8Array, uint8ArrayToBitArray } from \"./Utils.js\";\nimport { hexToUint8Array } from \"@tutao/tutanota-utils\";\nimport { random } from \"../random/Randomizer.js\";\nexport let DIGITS = 6;\nconst DIGITS_POWER = \n// 0   1   2    3    4      5       6        7         8\n[1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];\nconst base32 = sjcl.codec.base32;\nexport class TotpVerifier {\n    _digits;\n    constructor(digits = DIGITS) {\n        this._digits = digits;\n    }\n    generateSecret() {\n        let key = random.generateRandomData(16);\n        let readableKey = TotpVerifier.readableKey(key);\n        return {\n            key,\n            readableKey,\n        };\n    }\n    /**\n     * This method generates a TOTP value for the given\n     * set of parameters.\n     *\n     * @param time : a value that reflects a time\n     * @param key  :  the shared secret. It is generated if it does not exist\n     * @return: the key and a numeric String in base 10 that includes truncationDigits digits\n     */\n    generateTotp(time, key) {\n        // Using the counter\n        // First 8 bytes are for the movingFactor\n        // Compliant with base RFC 4226 (HOTP)\n        let timeHex = time.toString(16);\n        while (timeHex.length < 16)\n            timeHex = \"0\" + timeHex;\n        let msg = hexToUint8Array(timeHex);\n        let hash = this.hmac_sha(key, msg);\n        let offset = hash[hash.length - 1] & 0xf;\n        let binary = ((hash[offset] & 0x7f) << 24) | ((hash[offset + 1] & 0xff) << 16) | ((hash[offset + 2] & 0xff) << 8) | (hash[offset + 3] & 0xff);\n        let code = binary % DIGITS_POWER[this._digits];\n        return code;\n    }\n    hmac_sha(key, text) {\n        let hmac = new sjcl.misc.hmac(uint8ArrayToBitArray(key), sjcl.hash.sha1);\n        return bitArrayToUint8Array(hmac.encrypt(uint8ArrayToBitArray(text)));\n    }\n    static readableKey(key) {\n        return base32\n            .fromBits(uint8ArrayToBitArray(key))\n            .toLowerCase()\n            .replace(/(.{4})/g, \"$1 \")\n            .replace(/=/g, \"\")\n            .trim();\n    }\n}\n","/*!\n * +----------------------------------------------------------------------------------+\n * | murmurHash3.js v3.0.0 (http://github.com/karanlyons/murmurHash3.js)              |\n * | A TypeScript/JavaScript implementation of MurmurHash3's hashing algorithms.      |\n * |----------------------------------------------------------------------------------|\n * | Copyright (c) 2012-2020 Karan Lyons. Freely distributable under the MIT license. |\n * +----------------------------------------------------------------------------------+\n *\n * tutao: heavily stripped down to only take x86hash32, removed types for now.\n * This implementation should handle non-ascii characters.\n */\nimport { stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\";\nfunction x86fmix32(h) {\n    h ^= h >>> 16;\n    h = mul32(h, 0x85ebca6b);\n    h ^= h >>> 13;\n    h = mul32(h, 0xc2b2ae35);\n    h ^= h >>> 16;\n    return h;\n}\nconst x86hash32c1 = 0xcc9e2d51;\nconst x86hash32c2 = 0x1b873593;\nfunction x86mix32(h, k) {\n    k = mul32(k, x86hash32c1);\n    k = rol32(k, 15);\n    k = mul32(k, x86hash32c2);\n    h ^= k;\n    h = rol32(h, 13);\n    h = mul32(h, 5) + 0xe6546b64;\n    return h;\n}\nfunction mul32(m, n) {\n    return (m & 0xffff) * n + ((((m >>> 16) * n) & 0xffff) << 16);\n}\nfunction rol32(n, r) {\n    return (n << r) | (n >>> (32 - r));\n}\nexport function murmurHash(value) {\n    let state = 0;\n    const buf = stringToUtf8Uint8Array(value);\n    let h1;\n    let i;\n    let len;\n    h1 = state;\n    i = 0;\n    len = 0;\n    const dtv = new DataView(buf.buffer, buf.byteOffset);\n    const remainder = (buf.byteLength - i) % 4;\n    const bytes = buf.byteLength - i - remainder;\n    len += bytes;\n    for (; i < bytes; i += 4) {\n        h1 = x86mix32(h1, dtv.getUint32(i, true));\n    }\n    len += remainder;\n    let k1 = 0x0;\n    switch (remainder) {\n        case 3:\n            k1 ^= buf[i + 2] << 16;\n        // falls through\n        case 2:\n            k1 ^= buf[i + 1] << 8;\n        // falls through\n        case 1:\n            k1 ^= buf[i];\n            k1 = mul32(k1, x86hash32c1);\n            k1 = rol32(k1, 15);\n            k1 = mul32(k1, x86hash32c2);\n            h1 ^= k1;\n    }\n    h1 ^= len & 0xffffffff;\n    h1 = x86fmix32(h1);\n    return h1 >>> 0;\n}\n","import sjcl from \"../internal/sjcl.js\";\nimport { bitArrayToUint8Array, uint8ArrayToBitArray } from \"../misc/Utils.js\";\n/**\n * Derives a key of a defined length from salt, inputKeyMaterial and info.\n * @return the derived salt\n */\nexport function hkdf(salt, inputKeyMaterial, info, lengthInBytes) {\n    const saltHmac = new sjcl.misc.hmac(uint8ArrayToBitArray(salt), sjcl.hash.sha256);\n    const key = saltHmac.mac(uint8ArrayToBitArray(inputKeyMaterial));\n    const hashLen = sjcl.bitArray.bitLength(key);\n    const loops = Math.ceil((lengthInBytes * 8) / hashLen);\n    if (loops > 255) {\n        throw new sjcl.exception.invalid(\"key bit length is too large for hkdf\");\n    }\n    const inputKeyMaterialHmac = new sjcl.misc.hmac(key, sjcl.hash.sha256);\n    let curOut = [];\n    let ret = [];\n    for (let i = 1; i <= loops; i++) {\n        inputKeyMaterialHmac.update(curOut);\n        inputKeyMaterialHmac.update(uint8ArrayToBitArray(info));\n        inputKeyMaterialHmac.update([sjcl.bitArray.partial(8, i)]);\n        curOut = inputKeyMaterialHmac.digest();\n        ret = sjcl.bitArray.concat(ret, curOut);\n    }\n    return bitArrayToUint8Array(sjcl.bitArray.clamp(ret, lengthInBytes * 8));\n}\n"],"mappings":"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;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;EAAY;EAAY;EAAY;EAChD;EAAY;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"}