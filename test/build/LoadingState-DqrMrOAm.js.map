{"version":3,"file":"LoadingState-DqrMrOAm.js","names":["initialState: LoadingState","state: LoadingState","promise: Promise<T>","listener: (newState: LoadingState) => void"],"sources":["../../src/common/offline/LoadingState.ts"],"sourcesContent":["import stream from \"mithril/stream\"\nimport { isOfflineError } from \"../api/common/utils/ErrorUtils.js\"\n\nexport enum LoadingState {\n\t/** We have not tried to load anything, or the loading is complete */\n\tIdle,\n\t/** We are waiting for a resource to load */\n\tLoading,\n\t/** We tried to load and got a `ConnectionError` */\n\tConnectionLost,\n}\n\n/**\n * A utility to track the loaded state of some resource\n * Provides listeners for handling state changes\n */\nexport class LoadingStateTracker {\n\tprivate readonly state: stream<LoadingState>\n\tprivate loadingStateListener: stream<void> | null = null\n\n\tconstructor(initialState: LoadingState = LoadingState.Idle) {\n\t\tthis.state = stream(initialState)\n\t}\n\n\tget(): LoadingState {\n\t\treturn this.state()\n\t}\n\n\tisIdle(): boolean {\n\t\treturn this.get() === LoadingState.Idle\n\t}\n\n\tisLoading(): boolean {\n\t\treturn this.get() === LoadingState.Loading\n\t}\n\n\tisConnectionLost(): boolean {\n\t\treturn this.get() === LoadingState.ConnectionLost\n\t}\n\n\tset(state: LoadingState) {\n\t\tthis.state(state)\n\t}\n\n\tsetIdle() {\n\t\tthis.set(LoadingState.Idle)\n\t}\n\n\tsetLoading() {\n\t\tthis.set(LoadingState.Loading)\n\t}\n\n\tsetConnectionLost() {\n\t\tthis.set(LoadingState.ConnectionLost)\n\t}\n\n\t/**\n\t * Follow the state of a promise.\n\t * While the promise is not resolved, this will be in `Loading` state\n\t * If the promise rejects with a `ConnectionError`, then it will finish in `ConnectionLost` state\n\t * Otherwise it will finish in `Idle` state\n\t */\n\tasync trackPromise<T>(promise: Promise<T>): Promise<T> {\n\t\tthis.set(LoadingState.Loading)\n\n\t\tlet connectionLost = false\n\t\ttry {\n\t\t\treturn await promise\n\t\t} catch (e) {\n\t\t\tif (isOfflineError(e)) {\n\t\t\t\tconnectionLost = true\n\t\t\t}\n\t\t\tthrow e\n\t\t} finally {\n\t\t\tthis.set(connectionLost ? LoadingState.ConnectionLost : LoadingState.Idle)\n\t\t}\n\t}\n\n\tsetStateChangedListener(listener: (newState: LoadingState) => void) {\n\t\tthis.clearStateChangedListener()\n\t\tthis.loadingStateListener = this.state.map(listener)\n\t}\n\n\tclearStateChangedListener() {\n\t\tif (this.loadingStateListener != null) {\n\t\t\tthis.loadingStateListener.end(true)\n\t\t\tthis.loadingStateListener = null\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGY,wCAAL;;AAEN;;AAEA;;AAEA;;AACA;IAMY,sBAAN,MAA0B;CAChC,AAAiB;CACjB,AAAQ,uBAA4C;CAEpD,YAAYA,eAA6B,aAAa,MAAM;AAC3D,OAAK,QAAQ,2BAAO,aAAa;CACjC;CAED,MAAoB;AACnB,SAAO,KAAK,OAAO;CACnB;CAED,SAAkB;AACjB,SAAO,KAAK,KAAK,KAAK,aAAa;CACnC;CAED,YAAqB;AACpB,SAAO,KAAK,KAAK,KAAK,aAAa;CACnC;CAED,mBAA4B;AAC3B,SAAO,KAAK,KAAK,KAAK,aAAa;CACnC;CAED,IAAIC,OAAqB;AACxB,OAAK,MAAM,MAAM;CACjB;CAED,UAAU;AACT,OAAK,IAAI,aAAa,KAAK;CAC3B;CAED,aAAa;AACZ,OAAK,IAAI,aAAa,QAAQ;CAC9B;CAED,oBAAoB;AACnB,OAAK,IAAI,aAAa,eAAe;CACrC;;;;;;;CAQD,MAAM,aAAgBC,SAAiC;AACtD,OAAK,IAAI,aAAa,QAAQ;EAE9B,IAAI,iBAAiB;AACrB,MAAI;AACH,UAAO,MAAM;EACb,SAAQ,GAAG;AACX,OAAI,eAAe,EAAE,CACpB,kBAAiB;AAElB,SAAM;EACN,UAAS;AACT,QAAK,IAAI,iBAAiB,aAAa,iBAAiB,aAAa,KAAK;EAC1E;CACD;CAED,wBAAwBC,UAA4C;AACnE,OAAK,2BAA2B;AAChC,OAAK,uBAAuB,KAAK,MAAM,IAAI,SAAS;CACpD;CAED,4BAA4B;AAC3B,MAAI,KAAK,wBAAwB,MAAM;AACtC,QAAK,qBAAqB,IAAI,KAAK;AACnC,QAAK,uBAAuB;EAC5B;CACD;AACD"}