{"version":3,"file":"MailAddressParser-BgYy6oyp.js","names":["mailtoUrl: string","address: string","result: any","string: string","mailAddress: string","fullName: string"],"sources":["../../src/common/misc/parsing/MailAddressParser.ts"],"sourcesContent":["import { isMailAddress } from \"../FormatValidator\"\nimport { PartialRecipient } from \"../../api/common/recipients/Recipient\"\nimport { convertTextToHtml } from \"../Formatter.js\"\n\nexport type ParsedMailto = {\n\trecipients: {\n\t\tto?: PartialRecipient[]\n\t\tcc?: PartialRecipient[]\n\t\tbcc?: PartialRecipient[]\n\t}\n\tsubject: string | null\n\tbody: string | null\n\tattach: Array<string> | null\n}\n\n/**\n * takes a URL of the form mailto:a@b.c?body=hello%20world&attach=file:///home/user/cute%20cat.jpg&attach=file:///home/user/ugly%20dog.jpg\n * and returns an object representing the structured information that should be passed to the mail editor for this URL\n *\n * if a param is not given, it is set to null. if it is given, but empty, it will be set to an empty string/array.\n *\n * @param mailtoUrl {string}\n * @returns {ParsedMailto}\n */\nexport function parseMailtoUrl(mailtoUrl: string): ParsedMailto {\n\tlet url = new URL(mailtoUrl)\n\n\tconst createMailAddressFromString = (address: string): PartialRecipient | null => {\n\t\tconst nameAndMailAddress = stringToNameAndMailAddress(address)\n\t\tif (!nameAndMailAddress) return null\n\t\treturn {\n\t\t\tname: nameAndMailAddress.name,\n\t\t\taddress: nameAndMailAddress.mailAddress,\n\t\t}\n\t}\n\n\tconst addresses = url.pathname\n\t\t.split(\",\")\n\t\t.map((address) => {\n\t\t\tif (!address) return null\n\t\t\tconst decodedAddress = decodeURIComponent(address)\n\t\t\tif (!decodedAddress) return null\n\t\t\treturn createMailAddressFromString(decodedAddress)\n\t\t})\n\t\t.filter(Boolean)\n\tconst result: any = {\n\t\trecipients: {\n\t\t\tto: addresses.length > 0 ? addresses : undefined,\n\t\t\tcc: undefined,\n\t\t\tbcc: undefined,\n\t\t},\n\t\tattach: null,\n\t\tsubject: null,\n\t\tbody: null,\n\t}\n\t// @ts-ignore Missing definition\n\tif (!url.searchParams || typeof url.searchParams.entries !== \"function\") return result\n\n\t// @ts-ignore\n\tfor (let pair of url.searchParams.entries()) {\n\t\tlet paramName = pair[0].toLowerCase()\n\t\tlet paramValue = pair[1]\n\n\t\tswitch (paramName) {\n\t\t\tcase \"subject\":\n\t\t\t\tresult.subject = paramValue\n\t\t\t\tbreak\n\n\t\t\tcase \"body\":\n\t\t\t\tresult.body = convertTextToHtml(paramValue)\n\t\t\t\tbreak\n\n\t\t\tcase \"to\":\n\t\t\tcase \"cc\":\n\t\t\tcase \"bcc\": {\n\t\t\t\tif (result.recipients[paramName] == null) result.recipients[paramName] = []\n\t\t\t\tconst nextAddresses = paramValue\n\t\t\t\t\t.split(\",\")\n\t\t\t\t\t.map((address: string) => createMailAddressFromString(address))\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\tresult.recipients[paramName].push(...nextAddresses)\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tcase \"attach\":\n\t\t\t\tif (result.attach == null) result.attach = []\n\t\t\t\tresult.attach.push(paramValue)\n\t\t\t\tbreak\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn(\"unexpected mailto param, ignoring\")\n\t\t}\n\t}\n\n\treturn result\n}\n\n/**\n * Parses the given string for a name and mail address. The following formats are recognized: [name][<]mailAddress[>]\n * Additionally, whitespaces at any positions outside name and mailAddress are ignored.\n * @param string The string to check.\n * @return an object with the attributes \"name\" and \"mailAddress\" or null if nothing was found.\n */\nexport function stringToNameAndMailAddress(string: string):\n\t| {\n\t\t\tname: string\n\t\t\tmailAddress: string\n\t  }\n\t| null\n\t| undefined {\n\tstring = string.trim()\n\n\tif (string === \"\") {\n\t\treturn null\n\t}\n\n\tlet startIndex = string.indexOf(\"<\")\n\n\tif (startIndex !== -1) {\n\t\tconst endIndex = string.indexOf(\">\", startIndex)\n\n\t\tif (endIndex === -1) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst cleanedMailAddress = getCleanedMailAddress(string.substring(startIndex + 1, endIndex))\n\n\t\tif (cleanedMailAddress == null || !isMailAddress(cleanedMailAddress, false)) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst name = string.substring(0, startIndex).trim()\n\t\treturn {\n\t\t\tname: name,\n\t\t\tmailAddress: cleanedMailAddress,\n\t\t}\n\t} else {\n\t\tstartIndex = string.lastIndexOf(\" \")\n\t\tstartIndex++\n\t\tconst cleanedMailAddress = getCleanedMailAddress(string.substring(startIndex))\n\n\t\tif (cleanedMailAddress == null || !isMailAddress(cleanedMailAddress, false)) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst name = string.substring(0, startIndex).trim()\n\t\treturn {\n\t\t\tname: name,\n\t\t\tmailAddress: cleanedMailAddress,\n\t\t}\n\t}\n}\n\n/**\n * Returns a cleaned mail address from the input mail address. Removes leading or trailing whitespaces and converters\n * the address to lower case.\n * @param mailAddress The input mail address.\n * @return The cleaned mail address.\n */\nexport function getCleanedMailAddress(mailAddress: string): string | null {\n\tconst cleanedMailAddress = mailAddress.toLowerCase().trim()\n\n\tif (isMailAddress(cleanedMailAddress, false)) {\n\t\treturn cleanedMailAddress\n\t}\n\n\treturn null\n}\n\nexport function getDomainPart(mailAddress: string): string | null {\n\tconst cleanedMailAddress = getCleanedMailAddress(mailAddress)\n\n\tif (cleanedMailAddress) {\n\t\tconst parts = mailAddress.split(\"@\")\n\n\t\tif (parts.length === 2) {\n\t\t\treturn parts[1]\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t} else {\n\t\treturn null\n\t}\n}\n\n/**\n * Parses the given string for a fist name and a last name separated by whitespace. If there is only one part it is regarded as first name. If there are more than two parts, only the first one is regarded as first name.\n * @param fullName The full name to check.\n * @return Returns an object with the attributes \"firstName\" and \"lastName\".\n */\nexport function fullNameToFirstAndLastName(fullName: string): {\n\tfirstName: string\n\tlastName: string\n} {\n\tfullName = fullName.trim()\n\n\tif (fullName === \"\") {\n\t\treturn {\n\t\t\tfirstName: \"\",\n\t\t\tlastName: \"\",\n\t\t}\n\t}\n\n\tconst separator = fullName.indexOf(\" \")\n\n\tif (separator !== -1) {\n\t\treturn {\n\t\t\tfirstName: fullName.substring(0, separator),\n\t\t\tlastName: fullName.substring(separator + 1),\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tfirstName: fullName,\n\t\t\tlastName: \"\",\n\t\t}\n\t}\n}\n\n/**\n * Parses the given email address for a fist name and a last name separated by whitespace, comma, dot or underscore.\n * @param mailAddress The email address to check.\n * @return Returns an object with the attributes \"firstName\" and \"lastName\".\n */\nexport function mailAddressToFirstAndLastName(mailAddress: string): {\n\tfirstName: string\n\tlastName: string\n} {\n\tconst addr = mailAddress.substring(0, mailAddress.indexOf(\"@\"))\n\tlet nameData\n\n\tif (addr.indexOf(\".\") !== -1) {\n\t\tnameData = addr.split(\".\")\n\t} else if (addr.indexOf(\"_\") !== -1) {\n\t\tnameData = addr.split(\"_\")\n\t} else if (addr.indexOf(\"-\") !== -1) {\n\t\tnameData = addr.split(\"-\")\n\t} else {\n\t\tnameData = [addr]\n\t}\n\n\t// first character upper case\n\tfor (let i = 0; i < nameData.length; i++) {\n\t\tif (nameData[i].length > 0) {\n\t\t\tnameData[i] = nameData[i].substring(0, 1).toUpperCase() + nameData[i].substring(1)\n\t\t}\n\t}\n\n\treturn {\n\t\tfirstName: nameData[0],\n\t\tlastName: nameData.slice(1).join(\" \"),\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBO,SAAS,eAAeA,WAAiC;CAC/D,IAAI,MAAM,IAAI,IAAI;CAElB,MAAM,8BAA8B,CAACC,YAA6C;EACjF,MAAM,qBAAqB,2BAA2B,QAAQ;AAC9D,OAAK,mBAAoB,QAAO;AAChC,SAAO;GACN,MAAM,mBAAmB;GACzB,SAAS,mBAAmB;EAC5B;CACD;CAED,MAAM,YAAY,IAAI,SACpB,MAAM,IAAI,CACV,IAAI,CAAC,YAAY;AACjB,OAAK,QAAS,QAAO;EACrB,MAAM,iBAAiB,mBAAmB,QAAQ;AAClD,OAAK,eAAgB,QAAO;AAC5B,SAAO,4BAA4B,eAAe;CAClD,EAAC,CACD,OAAO,QAAQ;CACjB,MAAMC,SAAc;EACnB,YAAY;GACX,IAAI,UAAU,SAAS,IAAI,YAAY;GACvC,IAAI;GACJ,KAAK;EACL;EACD,QAAQ;EACR,SAAS;EACT,MAAM;CACN;AAED,MAAK,IAAI,uBAAuB,IAAI,aAAa,YAAY,WAAY,QAAO;AAGhF,MAAK,IAAI,QAAQ,IAAI,aAAa,SAAS,EAAE;EAC5C,IAAI,YAAY,KAAK,GAAG,aAAa;EACrC,IAAI,aAAa,KAAK;AAEtB,UAAQ,WAAR;AACC,QAAK;AACJ,WAAO,UAAU;AACjB;AAED,QAAK;AACJ,WAAO,OAAO,kBAAkB,WAAW;AAC3C;AAED,QAAK;AACL,QAAK;AACL,QAAK,OAAO;AACX,QAAI,OAAO,WAAW,cAAc,KAAM,QAAO,WAAW,aAAa,CAAE;IAC3E,MAAM,gBAAgB,WACpB,MAAM,IAAI,CACV,IAAI,CAACD,YAAoB,4BAA4B,QAAQ,CAAC,CAC9D,OAAO,QAAQ;AACjB,WAAO,WAAW,WAAW,KAAK,GAAG,cAAc;AACnD;GACA;AAED,QAAK;AACJ,QAAI,OAAO,UAAU,KAAM,QAAO,SAAS,CAAE;AAC7C,WAAO,OAAO,KAAK,WAAW;AAC9B;AAED,WACC,SAAQ,KAAK,oCAAoC;EAClD;CACD;AAED,QAAO;AACP;AAQM,SAAS,2BAA2BE,QAM9B;AACZ,UAAS,OAAO,MAAM;AAEtB,KAAI,WAAW,GACd,QAAO;CAGR,IAAI,aAAa,OAAO,QAAQ,IAAI;AAEpC,KAAI,eAAe,IAAI;EACtB,MAAM,WAAW,OAAO,QAAQ,KAAK,WAAW;AAEhD,MAAI,aAAa,GAChB,QAAO;EAGR,MAAM,qBAAqB,sBAAsB,OAAO,UAAU,aAAa,GAAG,SAAS,CAAC;AAE5F,MAAI,sBAAsB,SAAS,cAAc,oBAAoB,MAAM,CAC1E,QAAO;EAGR,MAAM,OAAO,OAAO,UAAU,GAAG,WAAW,CAAC,MAAM;AACnD,SAAO;GACA;GACN,aAAa;EACb;CACD,OAAM;AACN,eAAa,OAAO,YAAY,IAAI;AACpC;EACA,MAAM,qBAAqB,sBAAsB,OAAO,UAAU,WAAW,CAAC;AAE9E,MAAI,sBAAsB,SAAS,cAAc,oBAAoB,MAAM,CAC1E,QAAO;EAGR,MAAM,OAAO,OAAO,UAAU,GAAG,WAAW,CAAC,MAAM;AACnD,SAAO;GACA;GACN,aAAa;EACb;CACD;AACD;AAQM,SAAS,sBAAsBC,aAAoC;CACzE,MAAM,qBAAqB,YAAY,aAAa,CAAC,MAAM;AAE3D,KAAI,cAAc,oBAAoB,MAAM,CAC3C,QAAO;AAGR,QAAO;AACP;AAuBM,SAAS,2BAA2BC,UAGzC;AACD,YAAW,SAAS,MAAM;AAE1B,KAAI,aAAa,GAChB,QAAO;EACN,WAAW;EACX,UAAU;CACV;CAGF,MAAM,YAAY,SAAS,QAAQ,IAAI;AAEvC,KAAI,cAAc,GACjB,QAAO;EACN,WAAW,SAAS,UAAU,GAAG,UAAU;EAC3C,UAAU,SAAS,UAAU,YAAY,EAAE;CAC3C;IAED,QAAO;EACN,WAAW;EACX,UAAU;CACV;AAEF;AAOM,SAAS,8BAA8BD,aAG5C;CACD,MAAM,OAAO,YAAY,UAAU,GAAG,YAAY,QAAQ,IAAI,CAAC;CAC/D,IAAI;AAEJ,KAAI,KAAK,QAAQ,IAAI,KAAK,GACzB,YAAW,KAAK,MAAM,IAAI;SAChB,KAAK,QAAQ,IAAI,KAAK,GAChC,YAAW,KAAK,MAAM,IAAI;SAChB,KAAK,QAAQ,IAAI,KAAK,GAChC,YAAW,KAAK,MAAM,IAAI;IAE1B,YAAW,CAAC,IAAK;AAIlB,MAAK,IAAI,IAAI,GAAG,IAAI,SAAS,QAAQ,IACpC,KAAI,SAAS,GAAG,SAAS,EACxB,UAAS,KAAK,SAAS,GAAG,UAAU,GAAG,EAAE,CAAC,aAAa,GAAG,SAAS,GAAG,UAAU,EAAE;AAIpF,QAAO;EACN,WAAW,SAAS;EACpB,UAAU,SAAS,MAAM,EAAE,CAAC,KAAK,IAAI;CACrC;AACD"}