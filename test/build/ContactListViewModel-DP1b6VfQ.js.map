{"version":3,"file":"ContactListViewModel-DP1b6VfQ.js","names":["entityClient: EntityClient","groupManagementFacade: GroupManagementFacade","loginController: LoginController","eventController: EventController","contactModel: ContactModel","contactListInvitations: ReceivedGroupInvitationsModel<GroupType.ContactList>","router: Router","updateUi: () => unknown","listId?: Id","entryId?: Id","listId: Id","_listId: Id","elementId: Id","contactListEntryId: Id","name: string","recipients: string[]","addresses: string[]","contactListGroupRoot: ContactListGroupRoot","recipientsId: Id","recipient: ContactListEntry","updates: ReadonlyArray<EntityUpdateData>","selected: Id","contactListInfo: ContactListInfo","contactList: ContactListInfo","recipients: ContactListEntry[]","listId: string"],"sources":["../../src/mail-app/contacts/view/ContactListViewModel.ts"],"sourcesContent":["import { ListElementListModel } from \"../../../common/misc/ListElementListModel.js\"\nimport {\n\tContact,\n\tContactListEntry,\n\tContactListEntryTypeRef,\n\tContactListGroupRoot,\n\tContactListGroupRootTypeRef,\n\tContactTypeRef,\n\tcreateContactListEntry,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { getEtId, isSameId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { GroupManagementFacade } from \"../../../common/api/worker/facades/lazy/GroupManagementFacade.js\"\nimport { LoginController } from \"../../../common/api/main/LoginController.js\"\nimport { arrayEquals, debounce, lazyMemoized, memoized } from \"@tutao/tutanota-utils\"\nimport { EntityEventsListener, EventController } from \"../../../common/api/main/EventController.js\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport { Router } from \"../../../common/gui/ScopedRouter.js\"\nimport { ContactListInfo, ContactModel } from \"../../../common/contactsFunctionality/ContactModel.js\"\nimport { ReceivedGroupInvitation } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { ReceivedGroupInvitationsModel } from \"../../../common/sharing/model/ReceivedGroupInvitationsModel.js\"\nimport { GroupType } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { locator } from \"../../../common/api/main/CommonLocator.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { ListAutoSelectBehavior } from \"../../../common/misc/DeviceConfig.js\"\n\nexport class ContactListViewModel {\n\tprivate selectedContactList: Id | null = null\n\n\tcontactsForSelectedEntry: Contact[] = []\n\tprivate listModelStateStream: Stream<unknown> | null = null\n\tprivate sortedContactListInfos: Stream<ReadonlyArray<ContactListInfo>> = stream([])\n\tprivate sortedSharedContactListInfos: Stream<ReadonlyArray<ContactListInfo>> = stream([])\n\n\tconstructor(\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly groupManagementFacade: GroupManagementFacade,\n\t\tprivate readonly loginController: LoginController,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly contactListInvitations: ReceivedGroupInvitationsModel<GroupType.ContactList>,\n\t\tprivate readonly router: Router,\n\t\tprivate readonly updateUi: () => unknown,\n\t) {}\n\n\tasync showListAndEntry(listId?: Id, entryId?: Id) {\n\t\tthis.selectedContactList = listId ?? null\n\n\t\t// make sure that we have the list infos before we check whether the passed one is in them\n\t\tawait this.init()\n\t\t// checking that no one changed the list in the meantime concurrently\n\t\tif (this.selectedContactList === listId && !this.getContactListInfoForEntryListId(listId)) {\n\t\t\tthis.selectedContactList = null\n\t\t}\n\t\tawait this.listModel?.loadInitial()\n\n\t\tif (listId && entryId) {\n\t\t\tthis.loadAndSelect(listId, entryId)\n\t\t}\n\t}\n\n\treadonly init = lazyMemoized(async () => {\n\t\tthis.eventController.addEntityListener(this.entityEventsReceived)\n\t\tthis.sortedContactListInfos = this.contactModel.getOwnContactListInfos().map((infos) => {\n\t\t\tthis.updateUi()\n\t\t\treturn infos.slice().sort((a, b) => a.name.localeCompare(b.name))\n\t\t})\n\t\tthis.sortedSharedContactListInfos = this.contactModel.getSharedContactListInfos().map((infos) => {\n\t\t\tthis.updateUi()\n\t\t\treturn infos.slice().sort((a, b) => a.name.localeCompare(b.name))\n\t\t})\n\n\t\tthis.contactListInvitations.init()\n\t\t// dispose() of the model will end this stream, no need to unsubscribe manually\n\t\tthis.contactListInvitations.invitations.map(this.updateUi)\n\t\tawait this.contactModel.getLoadedContactListInfos()\n\t})\n\n\tget listModel(): ListElementListModel<ContactListEntry> | null {\n\t\treturn this.selectedContactList ? this._listModel(this.selectedContactList) : null\n\t}\n\n\tprivate readonly _listModel = memoized((listId: Id) => {\n\t\tconst newListModel = new ListElementListModel<ContactListEntry>({\n\t\t\tfetch: async () => {\n\t\t\t\tconst items = await this.getRecipientsForList(listId)\n\t\t\t\treturn { items, complete: true }\n\t\t\t},\n\t\t\tloadSingle: async (_listId: Id, elementId: Id) => {\n\t\t\t\treturn this.entityClient.load(ContactListEntryTypeRef, [listId, elementId])\n\t\t\t},\n\t\t\tsortCompare: (rl1, rl2) => rl1.emailAddress.localeCompare(rl2.emailAddress),\n\t\t\tautoSelectBehavior: () => ListAutoSelectBehavior.OLDER,\n\t\t})\n\n\t\tthis.listModelStateStream?.end(true)\n\n\t\tthis.listModelStateStream = newListModel.stateStream.map(() => {\n\t\t\tthis.contactsForSelectedEntry = []\n\t\t\tthis.updateUi()\n\t\t\tthis.updateUrl()\n\t\t\tthis.getContactsForSelectedContactListEntry()\n\t\t})\n\n\t\treturn newListModel\n\t})\n\n\tprivate async loadAndSelect(listId: Id, contactListEntryId: Id) {\n\t\tawait this.listModel?.loadAndSelect(contactListEntryId, () => this.selectedContactList !== listId)\n\t}\n\n\tgetContactListId(): Promise<Id | null> {\n\t\treturn this.contactModel.getContactListId()\n\t}\n\n\tgetOwnContactListInfos(): ReadonlyArray<ContactListInfo> {\n\t\treturn this.sortedContactListInfos() ?? []\n\t}\n\n\tgetSharedContactListInfos(): ReadonlyArray<ContactListInfo> {\n\t\treturn this.sortedSharedContactListInfos() ?? []\n\t}\n\n\tgetContactListInvitations(): Array<ReceivedGroupInvitation> {\n\t\treturn this.contactListInvitations.invitations()\n\t}\n\n\tprivate readonly getContactsForSelectedContactListEntry = debounce(50, async () => {\n\t\tconst selected = this.getSelectedContactListEntries()\n\t\tif (selected?.length === 1) {\n\t\t\tconst searchedContacts = await this.contactModel.searchForContacts(selected[0].emailAddress, \"mailAddress\", 10)\n\t\t\t// need an exact match\n\t\t\tconst contacts = searchedContacts.filter((contact) =>\n\t\t\t\tcontact.mailAddresses.map((mailAddress) => mailAddress.address).includes(selected[0].emailAddress),\n\t\t\t)\n\t\t\tconst nowSelected = this.getSelectedContactListEntries() ?? []\n\t\t\tif (arrayEquals(selected, nowSelected)) {\n\t\t\t\tthis.contactsForSelectedEntry = contacts\n\t\t\t}\n\t\t} else {\n\t\t\treturn []\n\t\t}\n\t\tthis.updateUi()\n\t})\n\n\tprivate updateUrl() {\n\t\tif (!this.listModel?.state.inMultiselect) {\n\t\t\tconst recipient = this.getSelectedContactListEntries()\n\t\t\tif (recipient && recipient.length === 1) {\n\t\t\t\tthis.router.routeTo(`/contactlist/:listId/:itemId`, {\n\t\t\t\t\tlistId: this.selectedContactList,\n\t\t\t\t\titemId: recipient[0]._id[1],\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tif (this.selectedContactList) {\n\t\t\tthis.router.routeTo(`/contactlist/:listId`, { listId: this.selectedContactList })\n\t\t} else {\n\t\t\tthis.router.routeTo(`/contactlist`, {})\n\t\t}\n\t}\n\n\tasync canCreateContactList(): Promise<boolean> {\n\t\tconst planConfig = await this.loginController.getUserController().getPlanConfig()\n\t\treturn planConfig.contactList\n\t}\n\n\tasync addContactList(name: string, recipients: string[]) {\n\t\tconst newGroup = await this.groupManagementFacade.createContactListGroup(name)\n\t\tconst newContactList = await this.entityClient.load(ContactListGroupRootTypeRef, newGroup._id)\n\n\t\tthis.addRecipientstoContactList(recipients, newContactList)\n\t}\n\n\tasync addRecipientstoContactList(addresses: string[], contactListGroupRoot: ContactListGroupRoot) {\n\t\tconst currentRecipients = await this.getRecipientsForList(contactListGroupRoot.entries)\n\t\tconst listAddresses = currentRecipients.map((entry) => entry.emailAddress)\n\t\tfor (const address of addresses) {\n\t\t\tif (!listAddresses.includes(address)) {\n\t\t\t\tconst recipient = createContactListEntry({\n\t\t\t\t\t_ownerGroup: contactListGroupRoot._id,\n\t\t\t\t\temailAddress: address,\n\t\t\t\t})\n\n\t\t\t\tthis.addEntryOnList(contactListGroupRoot.entries, recipient)\n\t\t\t}\n\t\t}\n\t}\n\n\taddEntryOnList(recipientsId: Id, recipient: ContactListEntry) {\n\t\tthis.entityClient.setup(recipientsId, recipient)\n\t}\n\n\tprivate readonly entityEventsReceived: EntityEventsListener = async (updates: ReadonlyArray<EntityUpdateData>): Promise<void> => {\n\t\tfor (const update of updates) {\n\t\t\tif (this.selectedContactList) {\n\t\t\t\tconst { instanceListId, instanceId, operation } = update\n\t\t\t\tif (isUpdateForTypeRef(ContactListEntryTypeRef, update) && isSameId(this.selectedContactList, instanceListId)) {\n\t\t\t\t\tawait this.listModel?.entityEventReceived(instanceListId, instanceId, operation)\n\t\t\t\t} else if (isUpdateForTypeRef(ContactTypeRef, update)) {\n\t\t\t\t\tthis.getContactsForSelectedContactListEntry()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.updateUi()\n\t\t}\n\t}\n\n\tupdateSelectedContactList(selected: Id): void {\n\t\tthis.selectedContactList = selected\n\t\tthis.listModel?.loadInitial()\n\t}\n\n\tupdateContactList(contactListInfo: ContactListInfo, name: string, addresses: string[]): void {\n\t\t// the name is stored on both GroupInfo (own contact list) and UserSettingsGroupRoot (contact lists shared with us)\n\t\t// note: make sure to handle shared contact lists when implementing sharing\n\t\tcontactListInfo.name = name\n\t\tcontactListInfo.groupInfo.name = name\n\t\tthis.entityClient.update(contactListInfo.groupInfo)\n\t}\n\n\tgetSelectedContactListInfo(): ContactListInfo | null {\n\t\treturn this.selectedContactList ? this.getContactListInfoForEntryListId(this.selectedContactList) : null\n\t}\n\n\tgetSelectedContactListEntries(): ContactListEntry[] | undefined {\n\t\treturn this.listModel?.getSelectedAsArray()\n\t}\n\n\tasync getRecipientsForList(listId: Id): Promise<ContactListEntry[]> {\n\t\treturn await this.entityClient.loadAll(ContactListEntryTypeRef, listId)\n\t}\n\n\tdeleteContactList(contactList: ContactListInfo) {\n\t\tthis.groupManagementFacade.deleteContactListGroup(contactList.groupRoot)\n\t}\n\n\tasync deleteContactListEntries(recipients: ContactListEntry[]) {\n\t\tfor (const recipient of recipients) {\n\t\t\tawait this.entityClient.erase(recipient)\n\t\t}\n\t}\n\n\tremoveUserFromContactList(contactList: ContactListInfo) {\n\t\treturn locator.groupManagementFacade.removeUserFromGroup(getEtId(this.loginController.getUserController().user), contactList.groupInfo.group)\n\t}\n\n\tasync deleteSelectedEntries() {\n\t\tawait this.deleteContactListEntries(this.getSelectedContactListEntries() ?? [])\n\t}\n\n\tprivate getContactListInfoForEntryListId(listId: string): ContactListInfo | null {\n\t\treturn (\n\t\t\tthis.getOwnContactListInfos().find((contactList) => contactList.groupRoot.entries === listId) ??\n\t\t\tthis.getSharedContactListInfos().find((contactList) => contactList.groupRoot.entries === listId) ??\n\t\t\tnull\n\t\t)\n\t}\n\n\tdispose() {\n\t\tthis.eventController.removeEntityListener(this.entityEventsReceived)\n\t\tthis.sortedContactListInfos.end(true)\n\t\tthis.sortedSharedContactListInfos.end(true)\n\t\tthis.contactListInvitations.dispose()\n\t}\n}\n"],"mappings":"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"}