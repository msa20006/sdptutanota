{"version":3,"file":"Recipient-BFxhfecW.js","names":[],"sources":["../../src/common/api/common/recipients/Recipient.ts"],"sourcesContent":["import { Contact } from \"../../entities/tutanota/TypeRefs\"\n\nexport const enum RecipientType {\n\tUNKNOWN = \"unknown\",\n\tINTERNAL = \"internal\",\n\tEXTERNAL = \"external\",\n}\n\nexport interface Recipient {\n\treadonly address: string\n\treadonly name: string\n\treadonly type: RecipientType\n\treadonly contact: Contact | null\n}\n\n/**\n * A more convenient representation of a recipient,\n * For when you don't have all the recipient data yet\n * Generally should be used as an input, rather than as an output\n */\nexport interface PartialRecipient {\n\taddress: string\n\tname?: string | None\n\ttype?: RecipientType | None\n\tcontact?: Contact | IdTuple | None\n}\n\nexport type RecipientList = Array<PartialRecipient>\n/**\n * A collection of recipients\n * When it's a single list, will generally be interpreted as \"to\" recipients\n */\nexport type Recipients =\n\t| {\n\t\t\tto?: RecipientList\n\t\t\tcc?: RecipientList\n\t\t\tbcc?: RecipientList\n\t  }\n\t| RecipientList\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEkB,0CAAX;AACN;AACA;AACA;;AACA"}