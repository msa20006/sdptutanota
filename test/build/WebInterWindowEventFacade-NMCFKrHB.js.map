{"version":3,"file":"WebInterWindowEventFacade-NMCFKrHB.js","names":["logins: LoginController","windowFacade: WindowFacade","deviceConfig: DeviceConfig","userId: string"],"sources":["../../src/common/native/main/WebInterWindowEventFacade.ts"],"sourcesContent":["import { InterWindowEventFacade } from \"../common/generatedipc/InterWindowEventFacade.js\"\nimport { LoginController } from \"../../api/main/LoginController.js\"\nimport { WindowFacade } from \"../../misc/WindowFacade.js\"\nimport { DeviceConfig } from \"../../misc/DeviceConfig.js\"\n\n/**\n * receiving side of the InterWindowEventBus\n */\nexport class WebInterWindowEventFacade implements InterWindowEventFacade {\n\tconstructor(private readonly logins: LoginController, private readonly windowFacade: WindowFacade, private readonly deviceConfig: DeviceConfig) {}\n\n\tasync localUserDataInvalidated(userId: string): Promise<void> {\n\t\tif (this.logins.isUserLoggedIn() && userId === this.logins.getUserController().userId) {\n\t\t\tawait this.logins.logout(false)\n\t\t\t// we don't want to reload before returning because\n\t\t\t// someone is waiting for our response.\n\t\t\tPromise.resolve().then(() => this.windowFacade.reload({ noAutoLogin: true }))\n\t\t}\n\t}\n\n\tasync reloadDeviceConfig(): Promise<void> {\n\t\tthis.deviceConfig.init()\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQa,4BAAN,MAAkE;CACxE,YAA6BA,QAA0CC,cAA6CC,cAA4B;EAehJ,KAf6B;EAe5B,KAfsE;EAerE,KAfkH;CAA8B;CAElJ,MAAM,yBAAyBC,QAA+B;AAC7D,MAAI,KAAK,OAAO,gBAAgB,IAAI,WAAW,KAAK,OAAO,mBAAmB,CAAC,QAAQ;AACtF,SAAM,KAAK,OAAO,OAAO,MAAM;AAG/B,WAAQ,SAAS,CAAC,KAAK,MAAM,KAAK,aAAa,OAAO,EAAE,aAAa,KAAM,EAAC,CAAC;EAC7E;CACD;CAED,MAAM,qBAAoC;AACzC,OAAK,aAAa,MAAM;CACxB;AACD"}