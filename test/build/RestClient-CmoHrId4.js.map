{"version":3,"file":"RestClient-CmoHrId4.js","names":["suspensionHandler: SuspensionHandler","domainConfig: DomainConfig","path: string","method: HttpMethod","options: RestClientOptions","queryParams: Dict","pe: ProgressEvent","t","xhr: XMLHttpRequest","body: string | Uint8Array | null","url: URL","urlParams: Dict","statusCode: number","suspensionTimeNumberString: string | null","args: Array<unknown>"],"sources":["../../src/common/api/worker/rest/RestClient.ts"],"sourcesContent":["import { assertWorkerOrNode, getApiBaseUrl, isAdminClient, isAndroidApp, isWebClient, isWorker } from \"../../common/Env\"\nimport { ConnectionError, handleRestError, PayloadTooLargeError, ServiceUnavailableError, TooManyRequestsError } from \"../../common/error/RestError\"\nimport { HttpMethod, MediaType } from \"../../common/EntityFunctions\"\nimport { assertNotNull, typedEntries, uint8ArrayToArrayBuffer } from \"@tutao/tutanota-utils\"\nimport { SuspensionHandler } from \"../SuspensionHandler\"\nimport { REQUEST_SIZE_LIMIT_DEFAULT, REQUEST_SIZE_LIMIT_MAP } from \"../../common/TutanotaConstants\"\nimport { SuspensionError } from \"../../common/error/SuspensionError.js\"\n\nassertWorkerOrNode()\n\nconst TAG = \"[RestClient]\"\n\ninterface ProgressListener {\n\tupload(percent: number): void\n\n\tdownload(percent: number): void\n}\n\nexport const enum SuspensionBehavior {\n\tSuspend,\n\tThrow,\n}\n\nexport interface RestClientOptions {\n\tbody?: string | Uint8Array\n\tresponseType?: MediaType\n\tprogressListener?: ProgressListener\n\tbaseUrl?: string\n\theaders?: Dict\n\tqueryParams?: Dict\n\tnoCORS?: boolean\n\t/** Default is to suspend all requests on rate limit. */\n\tsuspensionBehavior?: SuspensionBehavior\n}\n\n/**\n * Allows REST communication with the server.\n * The RestClient observes upload/download progress and times\n * out in case no data is sent or received for a certain time.\n *\n * Uses XmlHttpRequest as there is still no support for tracking\n * upload progress with fetch (see https://stackoverflow.com/a/69400632)\n */\nexport class RestClient {\n\tprivate id: number\n\t// accurate to within a few seconds, depending on network speed\n\tprivate serverTimeOffsetMs: number | null = null\n\n\tconstructor(private readonly suspensionHandler: SuspensionHandler, private readonly domainConfig: DomainConfig) {\n\t\tthis.id = 0\n\t}\n\n\trequest(path: string, method: HttpMethod, options: RestClientOptions = {}): Promise<any | null> {\n\t\t// @ts-ignore\n\t\tconst debug = typeof self !== \"undefined\" && self.debug\n\t\tconst verbose = isWorker() && debug\n\n\t\tthis.checkRequestSizeLimit(path, method, options.body ?? null)\n\n\t\tif (this.suspensionHandler.isSuspended()) {\n\t\t\treturn this.suspensionHandler.deferRequest(() => this.request(path, method, options))\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.id++\n\n\t\t\t\tconst queryParams: Dict = options.queryParams ?? {}\n\n\t\t\t\tif (method === HttpMethod.GET && typeof options.body === \"string\") {\n\t\t\t\t\tqueryParams[\"_body\"] = options.body // get requests are not allowed to send a body. Therefore, we convert our body to a parameter\n\t\t\t\t}\n\n\t\t\t\tif (options.noCORS) {\n\t\t\t\t\tqueryParams[\"cv\"] = env.versionNumber\n\t\t\t\t}\n\n\t\t\t\tconst origin = options.baseUrl ?? getApiBaseUrl(this.domainConfig)\n\t\t\t\tconst resourceURL = new URL(origin)\n\t\t\t\tresourceURL.pathname = path\n\t\t\t\tconst url = addParamsToUrl(resourceURL, queryParams)\n\t\t\t\tconst xhr = new XMLHttpRequest()\n\t\t\t\txhr.open(method, url.toString())\n\n\t\t\t\tthis.setHeaders(xhr, options)\n\n\t\t\t\txhr.responseType = options.responseType === MediaType.Json || options.responseType === MediaType.Text ? \"text\" : \"arraybuffer\"\n\n\t\t\t\tconst abortAfterTimeout = () => {\n\t\t\t\t\tconst res = {\n\t\t\t\t\t\ttimeoutId: 0 as TimeoutID,\n\t\t\t\t\t\tabortFunction: () => {\n\t\t\t\t\t\t\tif (this.usingTimeoutAbort()) {\n\t\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} aborting ` + String(res.timeoutId))\n\t\t\t\t\t\t\t\txhr.abort()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t\treturn res\n\t\t\t\t}\n\n\t\t\t\tconst t = abortAfterTimeout()\n\t\t\t\tlet timeout = setTimeout(t.abortFunction, env.timeout)\n\t\t\t\tt.timeoutId = timeout\n\n\t\t\t\tif (verbose) {\n\t\t\t\t\tconsole.log(TAG, `${this.id}: set initial timeout ${String(timeout)} of ${env.timeout}`)\n\t\t\t\t}\n\n\t\t\t\txhr.onload = () => {\n\t\t\t\t\t// XMLHttpRequestProgressEvent, but not needed\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} finished request. Clearing Timeout ${String(timeout)}.`)\n\t\t\t\t\t}\n\n\t\t\t\t\tclearTimeout(timeout)\n\n\t\t\t\t\tthis.saveServerTimeOffsetFromRequest(xhr)\n\n\t\t\t\t\tif (xhr.status === 200 || (method === HttpMethod.POST && xhr.status === 201)) {\n\t\t\t\t\t\tif (options.responseType === MediaType.Json || options.responseType === MediaType.Text) {\n\t\t\t\t\t\t\tresolve(xhr.response)\n\t\t\t\t\t\t} else if (options.responseType === MediaType.Binary) {\n\t\t\t\t\t\t\tresolve(new Uint8Array(xhr.response))\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(null)\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst suspensionTime = xhr.getResponseHeader(\"Retry-After\") || xhr.getResponseHeader(\"Suspension-Time\")\n\n\t\t\t\t\t\tif (isSuspensionResponse(xhr.status, suspensionTime) && options.suspensionBehavior === SuspensionBehavior.Throw) {\n\t\t\t\t\t\t\treject(\n\t\t\t\t\t\t\t\tnew SuspensionError(\n\t\t\t\t\t\t\t\t\t`blocked for ${suspensionTime}, not suspending (${xhr.status})`,\n\t\t\t\t\t\t\t\t\tsuspensionTime && (parseInt(suspensionTime) * 1000).toString(),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t} else if (isSuspensionResponse(xhr.status, suspensionTime)) {\n\t\t\t\t\t\t\tthis.suspensionHandler.activateSuspensionIfInactive(Number(suspensionTime), resourceURL)\n\n\t\t\t\t\t\t\tresolve(this.suspensionHandler.deferRequest(() => this.request(path, method, options)))\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlogFailedRequest(method, url, xhr, options)\n\t\t\t\t\t\t\treject(handleRestError(xhr.status, `| ${method} ${path}`, xhr.getResponseHeader(\"Error-Id\"), xhr.getResponseHeader(\"Precondition\")))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\txhr.onerror = function () {\n\t\t\t\t\tclearTimeout(timeout)\n\t\t\t\t\tlogFailedRequest(method, url, xhr, options)\n\t\t\t\t\treject(handleRestError(xhr.status, ` | ${method} ${path}`, xhr.getResponseHeader(\"Error-Id\"), xhr.getResponseHeader(\"Precondition\")))\n\t\t\t\t}\n\n\t\t\t\t// don't add an EventListener for non-CORS requests, otherwise it would not meet the 'CORS-Preflight simple request' requirements\n\t\t\t\tif (!options.noCORS) {\n\t\t\t\t\txhr.upload.onprogress = (pe: ProgressEvent) => {\n\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} upload progress. Clearing Timeout ${String(timeout)}`, pe)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclearTimeout(timeout)\n\t\t\t\t\t\tconst t = abortAfterTimeout()\n\t\t\t\t\t\ttimeout = setTimeout(t.abortFunction, env.timeout)\n\t\t\t\t\t\tt.timeoutId = timeout\n\n\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: set new timeout ${String(timeout)} of ${env.timeout}`)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.progressListener != null && pe.lengthComputable) {\n\t\t\t\t\t\t\t// see https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent\n\t\t\t\t\t\t\toptions.progressListener.upload((1 / pe.total) * pe.loaded)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\txhr.upload.ontimeout = (e) => {\n\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} upload timeout. calling error handler.`, e)\n\t\t\t\t\t\t}\n\t\t\t\t\t\txhr.onerror?.(e)\n\t\t\t\t\t}\n\n\t\t\t\t\txhr.upload.onerror = (e) => {\n\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} upload error. calling error handler.`, e)\n\t\t\t\t\t\t}\n\t\t\t\t\t\txhr.onerror?.(e)\n\t\t\t\t\t}\n\n\t\t\t\t\txhr.upload.onabort = (e) => {\n\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} upload aborted. calling error handler.`, e)\n\t\t\t\t\t\t}\n\t\t\t\t\t\txhr.onerror?.(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\txhr.onprogress = (pe: ProgressEvent) => {\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} download progress. Clearing Timeout ${String(timeout)}`, pe)\n\t\t\t\t\t}\n\n\t\t\t\t\tclearTimeout(timeout)\n\t\t\t\t\tlet t = abortAfterTimeout()\n\t\t\t\t\ttimeout = setTimeout(t.abortFunction, env.timeout)\n\t\t\t\t\tt.timeoutId = timeout\n\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tconsole.log(TAG, `${this.id}: set new timeout ${String(timeout)} of ${env.timeout}`)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.progressListener != null && pe.lengthComputable) {\n\t\t\t\t\t\t// see https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent\n\t\t\t\t\t\toptions.progressListener.download((1 / pe.total) * pe.loaded)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\txhr.onabort = () => {\n\t\t\t\t\tclearTimeout(timeout)\n\t\t\t\t\treject(new ConnectionError(`Reached timeout of ${env.timeout}ms ${xhr.statusText} | ${method} ${path}`))\n\t\t\t\t}\n\n\t\t\t\tif (options.body instanceof Uint8Array) {\n\t\t\t\t\txhr.send(uint8ArrayToArrayBuffer(options.body))\n\t\t\t\t} else {\n\t\t\t\t\txhr.send(options.body)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t/** We only need to track timeout directly here on some platforms. Other platforms do it inside their network driver. */\n\tprivate usingTimeoutAbort() {\n\t\treturn isWebClient() || isAndroidApp()\n\t}\n\n\tprivate saveServerTimeOffsetFromRequest(xhr: XMLHttpRequest) {\n\t\t// Dates sent in the `Date` field of HTTP headers follow the format specified by rfc7231\n\t\t// JavaScript's Date expects dates in the format specified by rfc2822\n\t\t// rfc7231 provides three options of formats, the preferred one being IMF-fixdate. This one is definitely\n\t\t// parseable by any rfc2822 compatible parser, since it is a strict subset (with no folding white space) of the\n\t\t// format of rfc5322, which is the same as rfc2822 accepting more folding white spaces.\n\t\t// Furthermore, there is no reason to expect the server to return any of the other two accepted formats, which\n\t\t// are obsolete and accepted only for backwards compatibility.\n\t\tconst serverTimestamp = xhr.getResponseHeader(\"Date\")\n\n\t\tif (serverTimestamp != null) {\n\t\t\t// check that serverTimestamp has been returned\n\t\t\tconst serverTime = new Date(serverTimestamp).getTime()\n\n\t\t\tif (!isNaN(serverTime)) {\n\t\t\t\tconst now = Date.now()\n\t\t\t\tthis.serverTimeOffsetMs = serverTime - now\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the time on the server based on the client time + the server time offset\n\t * The server time offset is calculated based on the date field in the header returned from REST requests.\n\t * will throw an error if offline or no rest requests have been made yet\n\t */\n\tgetServerTimestampMs(): number {\n\t\tconst timeOffset = assertNotNull(this.serverTimeOffsetMs, \"You can't get server time if no rest requests were made\")\n\t\treturn Date.now() + timeOffset\n\t}\n\n\t/**\n\t * Checks if the request body is too large.\n\t * Ignores the method because GET requests etc. should not exceed the limits neither.\n\t * This is done to avoid making the request, because the server will return a PayloadTooLargeError anyway.\n\t * */\n\tprivate checkRequestSizeLimit(path: string, method: HttpMethod, body: string | Uint8Array | null) {\n\t\tif (isAdminClient()) {\n\t\t\treturn\n\t\t}\n\n\t\tconst limit = REQUEST_SIZE_LIMIT_MAP.get(path) ?? REQUEST_SIZE_LIMIT_DEFAULT\n\n\t\tif (body && body.length > limit) {\n\t\t\tthrow new PayloadTooLargeError(`request body is too large. Path: ${path}, Method: ${method}, Body length: ${body.length}`)\n\t\t}\n\t}\n\n\tprivate setHeaders(xhr: XMLHttpRequest, options: RestClientOptions) {\n\t\tif (options.headers == null) {\n\t\t\toptions.headers = {}\n\t\t}\n\t\tconst { headers, body, responseType } = options\n\n\t\t// don't add custom and content-type headers for non-CORS requests, otherwise it would not meet the 'CORS-Preflight simple request' requirements\n\t\tif (!options.noCORS) {\n\t\t\theaders[\"cv\"] = env.versionNumber\n\t\t\tif (body instanceof Uint8Array) {\n\t\t\t\theaders[\"Content-Type\"] = MediaType.Binary\n\t\t\t} else if (typeof body === \"string\") {\n\t\t\t\theaders[\"Content-Type\"] = MediaType.Json\n\t\t\t}\n\t\t}\n\n\t\tif (responseType) {\n\t\t\theaders[\"Accept\"] = responseType\n\t\t}\n\t\tfor (const i in headers) {\n\t\t\txhr.setRequestHeader(i, headers[i])\n\t\t}\n\t}\n}\n\nexport function addParamsToUrl(url: URL, urlParams: Dict): URL {\n\tif (urlParams) {\n\t\tfor (const [key, value] of typedEntries(urlParams)) {\n\t\t\tif (value !== undefined) {\n\t\t\t\turl.searchParams.set(key, value)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn url\n}\n\nexport function isSuspensionResponse(statusCode: number, suspensionTimeNumberString: string | null): boolean {\n\treturn Number(suspensionTimeNumberString) > 0 && (statusCode === TooManyRequestsError.CODE || statusCode === ServiceUnavailableError.CODE)\n}\n\nfunction logFailedRequest(method: HttpMethod, url: URL, xhr: XMLHttpRequest, options: RestClientOptions): void {\n\tconst args: Array<unknown> = [TAG, \"failed request\", method, url.toString(), xhr.status, xhr.statusText]\n\tif (options.headers != null) {\n\t\targs.push(Object.keys(options.headers))\n\t}\n\tif (options.body != null) {\n\t\tconst logBody = \"string\" === typeof options.body ? `[${options.body.length} characters]` : `[${options.body.length} bytes]`\n\t\targs.push(logBody)\n\t} else {\n\t\targs.push(\"no body\")\n\t}\n\tconsole.log(...args)\n}\n"],"mappings":"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"}