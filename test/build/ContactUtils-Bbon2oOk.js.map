{"version":3,"file":"ContactUtils-Bbon2oOk.js","names":["contact: ContactNames","contact: Contact","birthday: Birthday","isoDate: string | null","contactId: ContactSocialId","websiteUrl: string","handle: ContactMessengerHandle","addresses: ContactMailAddress[]","addresses: ContactAddress[]","numbers: ContactPhoneNumber[]","dates: ContactCustomDate[]","websites: ContactWebsite[]","relationships: ContactRelationship[]","handles: ContactMessengerHandle[]"],"sources":["../../src/common/contactsFunctionality/ContactUtils.ts"],"sourcesContent":["import { assertMainOrNode } from \"../api/common/Env.js\"\nimport {\n\tBirthday,\n\tContact,\n\tContactAddress,\n\tContactCustomDate,\n\tContactMailAddress,\n\tContactMessengerHandle,\n\tContactPhoneNumber,\n\tContactRelationship,\n\tContactSocialId,\n\tContactWebsite,\n} from \"../api/entities/tutanota/TypeRefs.js\"\nimport { formatDate } from \"../misc/Formatter.js\"\nimport { lang } from \"../misc/LanguageViewModel.js\"\nimport { isoDateToBirthday } from \"../api/common/utils/BirthdayUtils.js\"\nimport {\n\tContactAddressType,\n\tContactCustomDateType,\n\tContactMessengerHandleType,\n\tContactPhoneNumberType,\n\tContactRelationshipType,\n\tContactSocialType,\n\tContactWebsiteType,\n} from \"../api/common/TutanotaConstants.js\"\nimport { StructuredMailAddress } from \"../native/common/generatedipc/StructuredMailAddress.js\"\nimport { StructuredAddress } from \"../native/common/generatedipc/StructuredAddress.js\"\nimport { StructuredPhoneNumber } from \"../native/common/generatedipc/StructuredPhoneNumber.js\"\nimport { StructuredCustomDate } from \"../native/common/generatedipc/StructuredCustomDate.js\"\nimport { StructuredWebsite } from \"../native/common/generatedipc/StructuredWebsite.js\"\nimport { StructuredRelationship } from \"../native/common/generatedipc/StructuredRelationship.js\"\nimport { StructuredMessengerHandle } from \"../native/common/generatedipc/StructuredMessengerHandle.js\"\nimport { StructuredContact } from \"../native/common/generatedipc/StructuredContact.js\"\n\nassertMainOrNode()\n\nexport type ContactNames = Pick<Contact, \"nickname\" | \"firstName\" | \"lastName\">\n\nexport function getContactDisplayName(contact: ContactNames): string {\n\tif (contact.nickname != null && contact.nickname !== \"\") {\n\t\treturn contact.nickname\n\t} else {\n\t\treturn `${contact.firstName} ${contact.lastName}`.trim()\n\t}\n}\n\nexport function getContactListName(contact: Contact): string {\n\tlet name = `${contact.firstName} ${contact.lastName}`.trim()\n\n\tif (name.length === 0) {\n\t\tname = contact.company.trim()\n\t}\n\n\treturn name\n}\n\nexport function formatBirthdayNumeric(birthday: Birthday): string {\n\tif (birthday.year) {\n\t\treturn formatDate(new Date(Number(birthday.year), Number(birthday.month) - 1, Number(birthday.day)))\n\t} else {\n\t\t//if no year is specified a leap year is used to allow 2/29 as birthday\n\t\treturn lang.formats.simpleDateWithoutYear.format(new Date(Number(2016), Number(birthday.month) - 1, Number(birthday.day)))\n\t}\n}\n\n/**\n * Returns the given date of the contact as formatted string using default date formatter including date, month and year.\n * If date contains no year only month and day will be included.\n * If there is no date or an invalid birthday format an empty string returns.\n */\nexport function formatContactDate(isoDate: string | null): string {\n\tif (isoDate) {\n\t\ttry {\n\t\t\treturn formatBirthdayNumeric(isoDateToBirthday(isoDate))\n\t\t} catch (e) {\n\t\t\t// cant format, cant do anything\n\t\t}\n\t}\n\n\treturn \"\"\n}\n\nexport function getSocialUrl(contactId: ContactSocialId): string {\n\tlet socialUrlType = \"\"\n\tlet http = \"https://\"\n\tlet worldwidew = \"www.\"\n\n\tconst isSchemePrefixed = contactId.socialId.indexOf(\"http\") !== -1\n\tconst isWwwDotPrefixed = contactId.socialId.indexOf(worldwidew) !== -1\n\n\tif (!isSchemePrefixed && !isWwwDotPrefixed) {\n\t\tswitch (contactId.type) {\n\t\t\tcase ContactSocialType.TWITTER:\n\t\t\t\tsocialUrlType = \"twitter.com/\"\n\t\t\t\tbreak\n\n\t\t\tcase ContactSocialType.FACEBOOK:\n\t\t\t\tsocialUrlType = \"facebook.com/\"\n\t\t\t\tbreak\n\n\t\t\tcase ContactSocialType.XING:\n\t\t\t\tsocialUrlType = \"xing.com/profile/\"\n\t\t\t\tbreak\n\n\t\t\tcase ContactSocialType.LINKED_IN:\n\t\t\t\tsocialUrlType = \"linkedin.com/in/\"\n\t\t}\n\t}\n\n\tif (isSchemePrefixed) {\n\t\thttp = \"\"\n\t}\n\n\tif (isSchemePrefixed || isWwwDotPrefixed) {\n\t\tworldwidew = \"\"\n\t}\n\n\treturn `${http}${worldwidew}${socialUrlType}${contactId.socialId.trim()}`\n}\n\nexport function getWebsiteUrl(websiteUrl: string): string {\n\tlet http = \"https://\"\n\tlet worldwidew = \"www.\"\n\n\tconst isSchemePrefixed = websiteUrl.indexOf(\"http\") !== -1\n\tconst isWwwDotPrefixed = websiteUrl.indexOf(worldwidew) !== -1\n\n\tif (isSchemePrefixed) {\n\t\thttp = \"\"\n\t}\n\n\tif (isSchemePrefixed || isWwwDotPrefixed) {\n\t\tworldwidew = \"\"\n\t}\n\n\treturn `${http}${worldwidew}${websiteUrl}`.trim()\n}\n\nexport function getMessengerHandleUrl(handle: ContactMessengerHandle): string {\n\tconst replaceNumberExp = new RegExp(/[^0-9+]/g)\n\tswitch (handle.type) {\n\t\tcase ContactMessengerHandleType.SIGNAL:\n\t\t\treturn `sgnl://signal.me/#p/${handle.handle.replaceAll(replaceNumberExp, \"\")}`\n\t\tcase ContactMessengerHandleType.WHATSAPP:\n\t\t\treturn `whatsapp://send?phone=${handle.handle.replaceAll(replaceNumberExp, \"\")}`\n\t\tcase ContactMessengerHandleType.TELEGRAM:\n\t\t\treturn `tg://resolve?domain=${handle.handle}`\n\t\tcase ContactMessengerHandleType.DISCORD:\n\t\t\treturn `discord://-/users/${handle.handle}`\n\t\tdefault:\n\t\t\treturn \"\"\n\t}\n}\n\nexport function extractStructuredMailAddresses(addresses: ContactMailAddress[]): ReadonlyArray<StructuredMailAddress> {\n\treturn addresses.map((address) => ({\n\t\taddress: address.address,\n\t\ttype: address.type as ContactAddressType,\n\t\tcustomTypeName: address.customTypeName,\n\t}))\n}\n\nexport function extractStructuredAddresses(addresses: ContactAddress[]): ReadonlyArray<StructuredAddress> {\n\treturn addresses.map((address) => ({\n\t\taddress: address.address,\n\t\ttype: address.type as ContactAddressType,\n\t\tcustomTypeName: address.customTypeName,\n\t}))\n}\n\nexport function extractStructuredPhoneNumbers(numbers: ContactPhoneNumber[]): ReadonlyArray<StructuredPhoneNumber> {\n\treturn numbers.map((number) => ({\n\t\tnumber: number.number,\n\t\ttype: number.type as ContactPhoneNumberType,\n\t\tcustomTypeName: number.customTypeName,\n\t}))\n}\n\nexport function extractStructuredCustomDates(dates: ContactCustomDate[]): ReadonlyArray<StructuredCustomDate> {\n\treturn dates.map((date) => ({\n\t\tdateIso: date.dateIso,\n\t\ttype: date.type as ContactCustomDateType,\n\t\tcustomTypeName: date.customTypeName,\n\t}))\n}\n\nexport function extractStructuredWebsites(websites: ContactWebsite[]): ReadonlyArray<StructuredWebsite> {\n\treturn websites.map((website) => ({\n\t\turl: website.url,\n\t\ttype: website.type as ContactWebsiteType,\n\t\tcustomTypeName: website.customTypeName,\n\t}))\n}\n\nexport function extractStructuredRelationships(relationships: ContactRelationship[]): ReadonlyArray<StructuredRelationship> {\n\treturn relationships.map((relation) => ({\n\t\tperson: relation.person,\n\t\ttype: relation.type as ContactRelationshipType,\n\t\tcustomTypeName: relation.customTypeName,\n\t}))\n}\n\nexport function extractStructuredMessengerHandle(handles: ContactMessengerHandle[]): ReadonlyArray<StructuredMessengerHandle> {\n\treturn handles.map((handle) => ({\n\t\ttype: handle.type as ContactMessengerHandleType,\n\t\tcustomTypeName: handle.customTypeName,\n\t\thandle: handle.handle,\n\t}))\n}\n\nexport function validateBirthdayOfContact(contact: StructuredContact) {\n\tif (contact.birthday != null) {\n\t\ttry {\n\t\t\tisoDateToBirthday(contact.birthday)\n\t\t\treturn contact.birthday\n\t\t} catch (_) {\n\t\t\treturn null\n\t\t}\n\t} else {\n\t\treturn null\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,kBAAkB;AAIX,SAAS,sBAAsBA,SAA+B;AACpE,KAAI,QAAQ,YAAY,QAAQ,QAAQ,aAAa,GACpD,QAAO,QAAQ;IAEf,QAAO,CAAC,EAAE,QAAQ,UAAU,GAAG,QAAQ,SAAS,EAAE,MAAM;AAEzD;AAEM,SAAS,mBAAmBC,SAA0B;CAC5D,IAAI,OAAO,CAAC,EAAE,QAAQ,UAAU,GAAG,QAAQ,SAAS,EAAE,MAAM;AAE5D,KAAI,KAAK,WAAW,EACnB,QAAO,QAAQ,QAAQ,MAAM;AAG9B,QAAO;AACP;AAEM,SAAS,sBAAsBC,UAA4B;AACjE,KAAI,SAAS,KACZ,QAAO,WAAW,IAAI,KAAK,OAAO,SAAS,KAAK,EAAE,OAAO,SAAS,MAAM,GAAG,GAAG,OAAO,SAAS,IAAI,EAAE;IAGpG,QAAO,KAAK,QAAQ,sBAAsB,OAAO,IAAI,KAAK,OAAO,KAAK,EAAE,OAAO,SAAS,MAAM,GAAG,GAAG,OAAO,SAAS,IAAI,EAAE;AAE3H;AAOM,SAAS,kBAAkBC,SAAgC;AACjE,KAAI,QACH,KAAI;AACH,SAAO,sBAAsB,kBAAkB,QAAQ,CAAC;CACxD,SAAQ,GAAG,CAEX;AAGF,QAAO;AACP;AAEM,SAAS,aAAaC,WAAoC;CAChE,IAAI,gBAAgB;CACpB,IAAI,OAAO;CACX,IAAI,aAAa;CAEjB,MAAM,mBAAmB,UAAU,SAAS,QAAQ,OAAO,KAAK;CAChE,MAAM,mBAAmB,UAAU,SAAS,QAAQ,WAAW,KAAK;AAEpE,MAAK,qBAAqB,iBACzB,SAAQ,UAAU,MAAlB;AACC,OAAK,kBAAkB;AACtB,mBAAgB;AAChB;AAED,OAAK,kBAAkB;AACtB,mBAAgB;AAChB;AAED,OAAK,kBAAkB;AACtB,mBAAgB;AAChB;AAED,OAAK,kBAAkB,UACtB,iBAAgB;CACjB;AAGF,KAAI,iBACH,QAAO;AAGR,KAAI,oBAAoB,iBACvB,cAAa;AAGd,SAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,cAAc,EAAE,UAAU,SAAS,MAAM,CAAC;AACxE;AAEM,SAAS,cAAcC,YAA4B;CACzD,IAAI,OAAO;CACX,IAAI,aAAa;CAEjB,MAAM,mBAAmB,WAAW,QAAQ,OAAO,KAAK;CACxD,MAAM,mBAAmB,WAAW,QAAQ,WAAW,KAAK;AAE5D,KAAI,iBACH,QAAO;AAGR,KAAI,oBAAoB,iBACvB,cAAa;AAGd,QAAO,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM;AACjD;AAEM,SAAS,sBAAsBC,QAAwC;CAC7E,MAAM,mBAAmB,IAAI,OAAO;AACpC,SAAQ,OAAO,MAAf;AACC,OAAK,2BAA2B,OAC/B,SAAQ,sBAAsB,OAAO,OAAO,WAAW,kBAAkB,GAAG,CAAC;AAC9E,OAAK,2BAA2B,SAC/B,SAAQ,wBAAwB,OAAO,OAAO,WAAW,kBAAkB,GAAG,CAAC;AAChF,OAAK,2BAA2B,SAC/B,SAAQ,sBAAsB,OAAO,OAAO;AAC7C,OAAK,2BAA2B,QAC/B,SAAQ,oBAAoB,OAAO,OAAO;AAC3C,UACC,QAAO;CACR;AACD;AAEM,SAAS,+BAA+BC,WAAuE;AACrH,QAAO,UAAU,IAAI,CAAC,aAAa;EAClC,SAAS,QAAQ;EACjB,MAAM,QAAQ;EACd,gBAAgB,QAAQ;CACxB,GAAE;AACH;AAEM,SAAS,2BAA2BC,WAA+D;AACzG,QAAO,UAAU,IAAI,CAAC,aAAa;EAClC,SAAS,QAAQ;EACjB,MAAM,QAAQ;EACd,gBAAgB,QAAQ;CACxB,GAAE;AACH;AAEM,SAAS,8BAA8BC,SAAqE;AAClH,QAAO,QAAQ,IAAI,CAAC,YAAY;EAC/B,QAAQ,OAAO;EACf,MAAM,OAAO;EACb,gBAAgB,OAAO;CACvB,GAAE;AACH;AAEM,SAAS,6BAA6BC,OAAiE;AAC7G,QAAO,MAAM,IAAI,CAAC,UAAU;EAC3B,SAAS,KAAK;EACd,MAAM,KAAK;EACX,gBAAgB,KAAK;CACrB,GAAE;AACH;AAEM,SAAS,0BAA0BC,UAA8D;AACvG,QAAO,SAAS,IAAI,CAAC,aAAa;EACjC,KAAK,QAAQ;EACb,MAAM,QAAQ;EACd,gBAAgB,QAAQ;CACxB,GAAE;AACH;AAEM,SAAS,+BAA+BC,eAA6E;AAC3H,QAAO,cAAc,IAAI,CAAC,cAAc;EACvC,QAAQ,SAAS;EACjB,MAAM,SAAS;EACf,gBAAgB,SAAS;CACzB,GAAE;AACH;AAEM,SAAS,iCAAiCC,SAA6E;AAC7H,QAAO,QAAQ,IAAI,CAAC,YAAY;EAC/B,MAAM,OAAO;EACb,gBAAgB,OAAO;EACvB,QAAQ,OAAO;CACf,GAAE;AACH"}