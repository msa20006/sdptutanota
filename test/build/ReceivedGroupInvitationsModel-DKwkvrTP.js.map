{"version":3,"file":"ReceivedGroupInvitationsModel-DKwkvrTP.js","names":["groupType: TypeOfGroup","eventController: EventController","entityClient: EntityClient","logins: LoginController","updates: ReadonlyArray<EntityUpdateData>","invitation: ReceivedGroupInvitation"],"sources":["../../src/common/sharing/model/ReceivedGroupInvitationsModel.ts"],"sourcesContent":["import stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport type { ReceivedGroupInvitation } from \"../../api/entities/sys/TypeRefs.js\"\nimport { ReceivedGroupInvitationTypeRef } from \"../../api/entities/sys/TypeRefs.js\"\nimport { EntityClient } from \"../../api/common/EntityClient\"\nimport { EventController } from \"../../api/main/EventController\"\nimport { getInvitationGroupType, loadReceivedGroupInvitations, ShareableGroupType } from \"../GroupUtils\"\nimport { OperationType } from \"../../api/common/TutanotaConstants\"\nimport type { LoginController } from \"../../api/main/LoginController\"\nimport { getLetId, isSameId } from \"../../api/common/utils/EntityUtils\"\nimport { promiseMap } from \"@tutao/tutanota-utils\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../api/common/utils/EntityUpdateUtils.js\"\n\nexport class ReceivedGroupInvitationsModel<TypeOfGroup extends ShareableGroupType> {\n\treadonly invitations: Stream<Array<ReceivedGroupInvitation>>\n\n\tconstructor(\n\t\tprivate readonly groupType: TypeOfGroup,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly logins: LoginController,\n\t) {\n\t\tthis.invitations = stream<Array<ReceivedGroupInvitation>>([])\n\t}\n\n\tinit() {\n\t\tthis.eventController.addEntityListener(this.entityEventsReceived)\n\t\tloadReceivedGroupInvitations(this.logins.getUserController(), this.entityClient, this.groupType).then((invitations) =>\n\t\t\tthis.invitations(invitations.filter((invitation) => this.hasMatchingGroupType(invitation))),\n\t\t)\n\t}\n\n\tdispose() {\n\t\tthis.eventController.removeEntityListener(this.entityEventsReceived)\n\t\tthis.invitations.end(true)\n\t}\n\n\tprivate readonly entityEventsReceived = (updates: ReadonlyArray<EntityUpdateData>) => {\n\t\treturn promiseMap(updates, (update) => {\n\t\t\tif (isUpdateForTypeRef(ReceivedGroupInvitationTypeRef, update)) {\n\t\t\t\tconst updateId = [update.instanceListId, update.instanceId] as const\n\n\t\t\t\tif (update.operation === OperationType.CREATE) {\n\t\t\t\t\treturn this.entityClient.load(ReceivedGroupInvitationTypeRef, updateId).then((invitation) => {\n\t\t\t\t\t\tif (this.hasMatchingGroupType(invitation)) {\n\t\t\t\t\t\t\tthis.invitations(this.invitations().concat(invitation))\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t} else if (update.operation === OperationType.DELETE) {\n\t\t\t\t\tthis.invitations(this.invitations().filter((invitation) => !isSameId(getLetId(invitation), updateId)))\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate hasMatchingGroupType(invitation: ReceivedGroupInvitation): boolean {\n\t\treturn getInvitationGroupType(invitation) === this.groupType\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaa,gCAAN,MAA4E;CAClF,AAAS;CAET,YACkBA,WACAC,iBACAC,cACAC,QAChB;EAsCF,KA1CkB;EA0CjB,KAzCiB;EAyChB,KAxCgB;EAwCf,KAvCe;AAEjB,OAAK,cAAc,2BAAuC,CAAE,EAAC;CAC7D;CAED,OAAO;AACN,OAAK,gBAAgB,kBAAkB,KAAK,qBAAqB;AACjE,+BAA6B,KAAK,OAAO,mBAAmB,EAAE,KAAK,cAAc,KAAK,UAAU,CAAC,KAAK,CAAC,gBACtG,KAAK,YAAY,YAAY,OAAO,CAAC,eAAe,KAAK,qBAAqB,WAAW,CAAC,CAAC,CAC3F;CACD;CAED,UAAU;AACT,OAAK,gBAAgB,qBAAqB,KAAK,qBAAqB;AACpE,OAAK,YAAY,IAAI,KAAK;CAC1B;CAED,AAAiB,uBAAuB,CAACC,YAA6C;AACrF,SAAO,KAAW,SAAS,CAAC,WAAW;AACtC,OAAI,mBAAmB,gCAAgC,OAAO,EAAE;IAC/D,MAAM,WAAW,CAAC,OAAO,gBAAgB,OAAO,UAAW;AAE3D,QAAI,OAAO,cAAc,cAAc,OACtC,QAAO,KAAK,aAAa,KAAK,gCAAgC,SAAS,CAAC,KAAK,CAAC,eAAe;AAC5F,SAAI,KAAK,qBAAqB,WAAW,CACxC,MAAK,YAAY,KAAK,aAAa,CAAC,OAAO,WAAW,CAAC;IAExD,EAAC;SACQ,OAAO,cAAc,cAAc,OAC7C,MAAK,YAAY,KAAK,aAAa,CAAC,OAAO,CAAC,gBAAgB,SAAS,SAAS,WAAW,EAAE,SAAS,CAAC,CAAC;GAEvG;EACD,EAAC;CACF;CAED,AAAQ,qBAAqBC,YAA8C;AAC1E,SAAO,uBAAuB,WAAW,KAAK,KAAK;CACnD;AACD"}