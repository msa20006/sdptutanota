{"version":3,"file":"GroupSharingDialog-CpANc1Ap.js","names":["groupInfo: GroupInfo","group: Group","memberInfos: Array<GroupMemberInfo>","sentGroupInvitations: Array<SentGroupInvitation>","eventController: EventController","entityClient: EntityClient","logins: LoginController","mailFacade: MailFacade","shareFacade: ShareFacade","groupManagementFacade: GroupManagementFacade","recipientsModel: RecipientsModel","info: GroupInfo","member: GroupMember","sentGroupInvitation: SentGroupInvitation","invitation: SentGroupInvitation","sharedGroupInfo: GroupInfo","recipients: Array<Recipient>","capability: ShareCapability","externalRecipients: string[]","updates: ReadonlyArray<EntityUpdateData>","eventOwnerGroupId: Id","groupInfo: GroupInfo","allowGroupNameOverride: boolean","m","vnode: Vnode<GroupSharingDialogAttrs>","model: GroupSharingModel","texts: GroupSharingTexts","groupName: string","iconBtn: IconButtonAttrs","dialog: Dialog"],"sources":["../../src/common/sharing/model/GroupSharingModel.ts","../../src/common/sharing/view/GroupSharingDialog.ts"],"sourcesContent":["import stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { EntityEventsListener, EventController } from \"../../api/main/EventController\"\nimport { EntityClient } from \"../../api/common/EntityClient\"\nimport { getElementId, getEtId, isSameId } from \"../../api/common/utils/EntityUtils\"\nimport type { Group, GroupInfo, GroupMember, SentGroupInvitation } from \"../../api/entities/sys/TypeRefs.js\"\nimport { GroupMemberTypeRef, GroupTypeRef, SentGroupInvitationTypeRef } from \"../../api/entities/sys/TypeRefs.js\"\nimport { OperationType, ShareCapability } from \"../../api/common/TutanotaConstants\"\nimport { NotFoundError } from \"../../api/common/error/RestError\"\nimport { findAndRemove, noOp, ofClass, promiseMap } from \"@tutao/tutanota-utils\"\nimport type { GroupMemberInfo } from \"../GroupUtils\"\nimport { hasCapabilityOnGroup, isSharedGroupOwner, loadGroupInfoForMember, loadGroupMembers } from \"../GroupUtils\"\nimport type { LoginController } from \"../../api/main/LoginController\"\nimport { UserError } from \"../../api/main/UserError\"\nimport type { MailAddress } from \"../../api/entities/tutanota/TypeRefs.js\"\nimport { lang } from \"../../misc/LanguageViewModel\"\nimport { RecipientsNotFoundError } from \"../../api/common/error/RecipientsNotFoundError\"\nimport { ProgrammingError } from \"../../api/common/error/ProgrammingError\"\nimport type { MailFacade } from \"../../api/worker/facades/lazy/MailFacade.js\"\nimport type { ShareFacade } from \"../../api/worker/facades/lazy/ShareFacade.js\"\nimport type { GroupManagementFacade } from \"../../api/worker/facades/lazy/GroupManagementFacade.js\"\nimport { Recipient, RecipientType } from \"../../api/common/recipients/Recipient\"\nimport { RecipientsModel, ResolveMode } from \"../../api/main/RecipientsModel\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../api/common/utils/EntityUpdateUtils.js\"\n\nexport class GroupSharingModel {\n\treadonly info: GroupInfo\n\treadonly group: Group\n\treadonly memberInfos: Array<GroupMemberInfo>\n\treadonly sentGroupInvitations: Array<SentGroupInvitation>\n\teventController: EventController\n\tentityClient: EntityClient\n\tlogins: LoginController\n\t// notifier for outside to do a redraw\n\tonEntityUpdate: Stream<void>\n\t_mailFacade: MailFacade\n\t_shareFacade: ShareFacade\n\t_groupManagementFacade: GroupManagementFacade\n\n\tconstructor(\n\t\tgroupInfo: GroupInfo,\n\t\tgroup: Group,\n\t\tmemberInfos: Array<GroupMemberInfo>,\n\t\tsentGroupInvitations: Array<SentGroupInvitation>,\n\t\teventController: EventController,\n\t\tentityClient: EntityClient,\n\t\tlogins: LoginController,\n\t\tmailFacade: MailFacade,\n\t\tshareFacade: ShareFacade,\n\t\tgroupManagementFacade: GroupManagementFacade,\n\t\tprivate readonly recipientsModel: RecipientsModel,\n\t) {\n\t\tthis.info = groupInfo\n\t\tthis.group = group\n\t\tthis.memberInfos = memberInfos\n\t\tthis.sentGroupInvitations = sentGroupInvitations\n\t\tthis.eventController = eventController\n\t\tthis.entityClient = entityClient\n\t\tthis.logins = logins\n\t\tthis._mailFacade = mailFacade\n\t\tthis._shareFacade = shareFacade\n\t\tthis._groupManagementFacade = groupManagementFacade\n\t\tthis.onEntityUpdate = stream()\n\t\tthis.eventController.addEntityListener(this.onEntityEvents)\n\t}\n\n\tprivate readonly onEntityEvents: EntityEventsListener = (events, id) => this.entityEventsReceived(events, id)\n\n\tstatic newAsync(\n\t\tinfo: GroupInfo,\n\t\teventController: EventController,\n\t\tentityClient: EntityClient,\n\t\tlogins: LoginController,\n\t\tmailFacade: MailFacade,\n\t\tshareFacade: ShareFacade,\n\t\tgroupManagementFacade: GroupManagementFacade,\n\t\trecipientsModel: RecipientsModel,\n\t): Promise<GroupSharingModel> {\n\t\treturn entityClient\n\t\t\t.load(GroupTypeRef, info.group)\n\t\t\t.then((group) =>\n\t\t\t\tPromise.all([entityClient.loadAll(SentGroupInvitationTypeRef, group.invitations), loadGroupMembers(group, entityClient)]).then(\n\t\t\t\t\t([sentGroupInvitations, memberInfos]) =>\n\t\t\t\t\t\tnew GroupSharingModel(\n\t\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t\tgroup,\n\t\t\t\t\t\t\tmemberInfos,\n\t\t\t\t\t\t\tsentGroupInvitations,\n\t\t\t\t\t\t\teventController,\n\t\t\t\t\t\t\tentityClient,\n\t\t\t\t\t\t\tlogins,\n\t\t\t\t\t\t\tmailFacade,\n\t\t\t\t\t\t\tshareFacade,\n\t\t\t\t\t\t\tgroupManagementFacade,\n\t\t\t\t\t\t\trecipientsModel,\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t)\n\t}\n\n\tdispose() {\n\t\tthis.eventController.removeEntityListener(this.onEntityEvents)\n\t}\n\n\t/**\n\t * Whether or not a given member can be removed from the group by the current user\n\t */\n\tcanRemoveGroupMember(member: GroupMember): boolean {\n\t\treturn (\n\t\t\t(hasCapabilityOnGroup(this.logins.getUserController().user, this.group, ShareCapability.Invite) || this.memberIsSelf(member)) &&\n\t\t\t!isSharedGroupOwner(this.group, member.user)\n\t\t)\n\t}\n\n\tremoveGroupMember(member: GroupMember): Promise<void> {\n\t\treturn this.canRemoveGroupMember(member)\n\t\t\t? this._groupManagementFacade.removeUserFromGroup(member.user, getEtId(this.group))\n\t\t\t: Promise.reject(new ProgrammingError(\"User does not have permission to remove this member from the group\"))\n\t}\n\n\t/**\n\t * Whether or not a given invitation can be cancelled by the current user\n\t * @param group\n\t * @param sentGroupInvitation\n\t * @returns {boolean}\n\t */\n\tcanCancelInvitation(sentGroupInvitation: SentGroupInvitation): boolean {\n\t\treturn (\n\t\t\thasCapabilityOnGroup(this.logins.getUserController().user, this.group, ShareCapability.Invite) ||\n\t\t\tisSharedGroupOwner(this.group, this.logins.getUserController().user._id)\n\t\t)\n\t}\n\n\tmemberIsSelf(member: GroupMember): boolean {\n\t\treturn isSameId(this.logins.getUserController().user._id, member.user)\n\t}\n\n\tcancelInvitation(invitation: SentGroupInvitation): Promise<void> {\n\t\treturn this.canCancelInvitation(invitation) && invitation.receivedInvitation\n\t\t\t? this._shareFacade.rejectOrCancelGroupInvitation(invitation.receivedInvitation)\n\t\t\t: Promise.reject(new Error(\"User does not have permission to cancel this invitation\")) // TODO error type\n\t}\n\n\tasync sendGroupInvitation(sharedGroupInfo: GroupInfo, recipients: Array<Recipient>, capability: ShareCapability): Promise<Array<MailAddress>> {\n\t\tconst externalRecipients: string[] = []\n\t\tfor (let recipient of recipients) {\n\t\t\tconst resolved = await this.recipientsModel.resolve(recipient, ResolveMode.Eager).resolved()\n\t\t\tif (resolved.type !== RecipientType.INTERNAL) {\n\t\t\t\texternalRecipients.push(resolved.address)\n\t\t\t}\n\t\t}\n\t\tif (externalRecipients.length) {\n\t\t\tthrow new UserError(\n\t\t\t\tlang.makeTranslation(\n\t\t\t\t\t\"featureTutanotaOnly_msg\",\n\t\t\t\t\tlang.get(\"featureTutanotaOnly_msg\") + \" \" + lang.get(\"invalidRecipients_msg\") + \"\\n\" + externalRecipients.join(\"\\n\"),\n\t\t\t\t),\n\t\t\t)\n\t\t}\n\n\t\tlet groupInvitationReturn\n\t\ttry {\n\t\t\tgroupInvitationReturn = await this._shareFacade.sendGroupInvitation(\n\t\t\t\tsharedGroupInfo,\n\t\t\t\trecipients.map((r) => r.address),\n\t\t\t\tcapability,\n\t\t\t)\n\t\t} catch (e) {\n\t\t\tif (e instanceof RecipientsNotFoundError) {\n\t\t\t\tthrow new UserError(\n\t\t\t\t\tlang.makeTranslation(\n\t\t\t\t\t\t\"tutanotaAddressDoesNotExist_msg\",\n\t\t\t\t\t\t`${lang.get(\"tutanotaAddressDoesNotExist_msg\")} ${lang.get(\"invalidRecipients_msg\")}\\n${e.message}`,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\n\t\tif (groupInvitationReturn.existingMailAddresses.length > 0 || groupInvitationReturn.invalidMailAddresses.length > 0) {\n\t\t\tconst existingMailAddresses = groupInvitationReturn.existingMailAddresses.map((ma) => ma.address).join(\"\\n\")\n\t\t\tconst invalidMailAddresses = groupInvitationReturn.invalidMailAddresses.map((ma) => ma.address).join(\"\\n\")\n\t\t\tlet msg = \"\"\n\t\t\tmsg += existingMailAddresses.length === 0 ? \"\" : lang.get(\"existingMailAddress_msg\") + \"\\n\" + existingMailAddresses\n\t\t\tmsg += existingMailAddresses.length === 0 && invalidMailAddresses.length === 0 ? \"\" : \"\\n\\n\"\n\t\t\tmsg += invalidMailAddresses.length === 0 ? \"\" : lang.get(\"invalidMailAddress_msg\") + \"\\n\" + invalidMailAddresses\n\t\t\tthrow new UserError(lang.makeTranslation(\"group_invitation_err\", msg))\n\t\t}\n\n\t\treturn groupInvitationReturn.invitedMailAddresses\n\t}\n\n\tentityEventsReceived(updates: ReadonlyArray<EntityUpdateData>, eventOwnerGroupId: Id): Promise<void> {\n\t\treturn promiseMap(updates, (update) => {\n\t\t\tif (!isSameId(eventOwnerGroupId, getEtId(this.group))) {\n\t\t\t\t// ignore events of different group here\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (isUpdateForTypeRef(SentGroupInvitationTypeRef, update)) {\n\t\t\t\tif (update.operation === OperationType.CREATE && isSameId(update.instanceListId, this.group.invitations)) {\n\t\t\t\t\treturn this.entityClient\n\t\t\t\t\t\t.load(SentGroupInvitationTypeRef, [update.instanceListId, update.instanceId])\n\t\t\t\t\t\t.then((instance) => {\n\t\t\t\t\t\t\tif (instance) {\n\t\t\t\t\t\t\t\tthis.sentGroupInvitations.push(instance)\n\t\t\t\t\t\t\t\tthis.onEntityUpdate()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(ofClass(NotFoundError, (e) => console.log(\"sent invitation not found\", update)))\n\t\t\t\t}\n\n\t\t\t\tif (update.operation === OperationType.DELETE) {\n\t\t\t\t\tfindAndRemove(this.sentGroupInvitations, (sentGroupInvitation) => isSameId(getElementId(sentGroupInvitation), update.instanceId))\n\t\t\t\t\tthis.onEntityUpdate()\n\t\t\t\t}\n\t\t\t} else if (isUpdateForTypeRef(GroupMemberTypeRef, update)) {\n\t\t\t\tconsole.log(\"update received in share dialog\", update)\n\n\t\t\t\tif (update.operation === OperationType.CREATE && isSameId(update.instanceListId, this.group.members)) {\n\t\t\t\t\treturn this.entityClient\n\t\t\t\t\t\t.load(GroupMemberTypeRef, [update.instanceListId, update.instanceId])\n\t\t\t\t\t\t.then((instance) => {\n\t\t\t\t\t\t\tif (instance) {\n\t\t\t\t\t\t\t\treturn loadGroupInfoForMember(instance, this.entityClient).then((groupMemberInfo) => {\n\t\t\t\t\t\t\t\t\tconsole.log(\"new member\", groupMemberInfo)\n\t\t\t\t\t\t\t\t\tthis.memberInfos.push(groupMemberInfo)\n\t\t\t\t\t\t\t\t\tthis.onEntityUpdate()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(ofClass(NotFoundError, (e) => console.log(\"group member not found\", update)))\n\t\t\t\t}\n\n\t\t\t\tif (update.operation === OperationType.DELETE) {\n\t\t\t\t\tfindAndRemove(this.memberInfos, (memberInfo) => isSameId(getElementId(memberInfo.member), update.instanceId))\n\t\t\t\t\tthis.onEntityUpdate()\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(noOp)\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport stream from \"mithril/stream\"\nimport { Dialog, DialogType } from \"../../gui/base/Dialog\"\nimport type { TableLineAttrs } from \"../../gui/base/Table.js\"\nimport { ColumnWidth, Table } from \"../../gui/base/Table.js\"\nimport { assert, assertNotNull, downcast, findAndRemove, neverNull, remove } from \"@tutao/tutanota-utils\"\nimport { Icons } from \"../../gui/base/icons/Icons\"\nimport { lang } from \"../../misc/LanguageViewModel\"\nimport { ButtonType } from \"../../gui/base/Button.js\"\nimport { showProgressDialog } from \"../../gui/dialogs/ProgressDialog\"\nimport { GroupType, ShareCapability } from \"../../api/common/TutanotaConstants\"\nimport { DropDownSelector } from \"../../gui/base/DropDownSelector.js\"\nimport { PreconditionFailedError, TooManyRequestsError } from \"../../api/common/error/RestError\"\nimport { TextField } from \"../../gui/base/TextField.js\"\nimport type { GroupInfo } from \"../../api/entities/sys/TypeRefs.js\"\nimport { getCapabilityText, getMemberCapability, getSharedGroupName, hasCapabilityOnGroup, isShareableGroupType, isSharedGroupOwner } from \"../GroupUtils\"\nimport { sendShareNotificationEmail } from \"../GroupSharingUtils\"\nimport { GroupSharingModel } from \"../model/GroupSharingModel\"\nimport { locator } from \"../../api/main/CommonLocator\"\nimport { UserError } from \"../../api/main/UserError\"\nimport { showUserError } from \"../../misc/ErrorHandlerImpl\"\nimport { getConfirmation } from \"../../gui/base/GuiUtils\"\nimport type { GroupSharingTexts } from \"../GroupGuiUtils\"\nimport { getTextsForGroupType } from \"../GroupGuiUtils\"\nimport { ResolvableRecipient, ResolveMode } from \"../../api/main/RecipientsModel\"\nimport { MailRecipientsTextField } from \"../../gui/MailRecipientsTextField.js\"\nimport { cleanMailAddress, findRecipientWithAddress } from \"../../api/common/utils/CommonCalendarUtils.js\"\nimport { showPlanUpgradeRequiredDialog } from \"../../misc/SubscriptionDialogs.js\"\nimport { getMailAddressDisplayText } from \"../../mailFunctionality/SharedMailUtils.js\"\nimport { IconButtonAttrs } from \"../../gui/base/IconButton.js\"\n\nexport async function showGroupSharingDialog(groupInfo: GroupInfo, allowGroupNameOverride: boolean) {\n\tconst groupType = downcast(assertNotNull(groupInfo.groupType))\n\tassert(isShareableGroupType(groupInfo.groupType as GroupType), `Group type \"${groupType}\" must be shareable`)\n\tconst texts = getTextsForGroupType(groupType)\n\tconst recipientsModel = await locator.recipientsModel()\n\tshowProgressDialog(\n\t\t\"loading_msg\",\n\t\tGroupSharingModel.newAsync(\n\t\t\tgroupInfo,\n\t\t\tlocator.eventController,\n\t\t\tlocator.entityClient,\n\t\t\tlocator.logins,\n\t\t\tlocator.mailFacade,\n\t\t\tlocator.shareFacade,\n\t\t\tlocator.groupManagementFacade,\n\t\t\trecipientsModel,\n\t\t),\n\t).then((model) => {\n\t\tmodel.onEntityUpdate.map(m.redraw.bind(m))\n\t\tlet dialog = Dialog.showActionDialog({\n\t\t\ttitle: \"sharing_label\",\n\t\t\ttype: DialogType.EditMedium,\n\t\t\tchild: () =>\n\t\t\t\tm(GroupSharingDialogContent, {\n\t\t\t\t\tmodel,\n\t\t\t\t\tallowGroupNameOverride,\n\t\t\t\t\ttexts,\n\t\t\t\t\tdialog,\n\t\t\t\t}),\n\t\t\tokAction: null,\n\t\t\tcancelAction: () => model.dispose(),\n\t\t\tcancelActionTextId: \"close_alt\",\n\t\t})\n\t})\n}\n\ntype GroupSharingDialogAttrs = {\n\tmodel: GroupSharingModel\n\tallowGroupNameOverride: boolean\n\ttexts: GroupSharingTexts\n\tdialog: Dialog\n}\n\nclass GroupSharingDialogContent implements Component<GroupSharingDialogAttrs> {\n\tview(vnode: Vnode<GroupSharingDialogAttrs>): Children {\n\t\tconst { model, allowGroupNameOverride, texts, dialog } = vnode.attrs\n\t\tconst groupName = getSharedGroupName(model.info, model.logins.getUserController(), allowGroupNameOverride)\n\t\treturn m(\".flex.col.pt-s\", [\n\t\t\tm(Table, {\n\t\t\t\tcolumnHeading: [lang.makeTranslation(\"column_heading\", texts.participantsLabel(groupName))],\n\t\t\t\tcolumnWidths: [ColumnWidth.Largest, ColumnWidth.Largest],\n\t\t\t\tlines: this._renderMemberInfos(model, texts, groupName, dialog).concat(this._renderGroupInvitations(model, texts, groupName)),\n\t\t\t\tshowActionButtonColumn: true,\n\t\t\t\taddButtonAttrs: hasCapabilityOnGroup(locator.logins.getUserController().user, model.group, ShareCapability.Invite)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\ttitle: \"addParticipant_action\",\n\t\t\t\t\t\t\tclick: () => showAddParticipantDialog(model, texts),\n\t\t\t\t\t\t\ticon: Icons.Add,\n\t\t\t\t\t  }\n\t\t\t\t\t: null,\n\t\t\t}),\n\t\t])\n\t}\n\n\t_renderGroupInvitations(model: GroupSharingModel, texts: GroupSharingTexts, groupName: string): Array<TableLineAttrs> {\n\t\treturn model.sentGroupInvitations.map((sentGroupInvitation) => {\n\t\t\tlet iconBtn: IconButtonAttrs = {\n\t\t\t\ttitle: \"remove_action\",\n\t\t\t\tclick: () => {\n\t\t\t\t\tgetConfirmation(\n\t\t\t\t\t\tlang.makeTranslation(\"confirmation_msg\", texts.removeMemberMessage(groupName, sentGroupInvitation.inviteeMailAddress)),\n\t\t\t\t\t).confirmed(async () => {\n\t\t\t\t\t\tawait model.cancelInvitation(sentGroupInvitation)\n\t\t\t\t\t\tm.redraw()\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\ticon: Icons.Cancel,\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tcells: () => [\n\t\t\t\t\t{\n\t\t\t\t\t\tmain: sentGroupInvitation.inviteeMailAddress,\n\t\t\t\t\t\tinfo: [`${lang.get(\"invited_label\")}, ${getCapabilityText(downcast(sentGroupInvitation.capability))}`],\n\t\t\t\t\t\tmainStyle: \".i\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tactionButtonAttrs: model.canCancelInvitation(sentGroupInvitation) ? iconBtn : null,\n\t\t\t}\n\t\t})\n\t}\n\n\t_renderMemberInfos(model: GroupSharingModel, texts: GroupSharingTexts, groupName: string, dialog: Dialog): Array<TableLineAttrs> {\n\t\treturn model.memberInfos.map((memberInfo) => {\n\t\t\treturn {\n\t\t\t\tcells: () => [\n\t\t\t\t\t{\n\t\t\t\t\t\tmain: getMailAddressDisplayText(memberInfo.info.name, neverNull(memberInfo.info.mailAddress), false),\n\t\t\t\t\t\tinfo: [\n\t\t\t\t\t\t\t(isSharedGroupOwner(model.group, memberInfo.member.user) ? lang.get(\"owner_label\") : lang.get(\"participant_label\")) +\n\t\t\t\t\t\t\t\t\", \" +\n\t\t\t\t\t\t\t\tgetCapabilityText(getMemberCapability(memberInfo, model.group)),\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tactionButtonAttrs: model.canRemoveGroupMember(memberInfo.member)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\ttitle: \"delete_action\",\n\t\t\t\t\t\t\ticon: Icons.Cancel,\n\t\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\t\tgetConfirmation(\n\t\t\t\t\t\t\t\t\tlang.makeTranslation(\"confirmation_msg\", texts.removeMemberMessage(groupName, downcast(memberInfo.info.mailAddress))),\n\t\t\t\t\t\t\t\t).confirmed(async () => {\n\t\t\t\t\t\t\t\t\tawait model.removeGroupMember(memberInfo.member)\n\t\t\t\t\t\t\t\t\tif (model.memberIsSelf(memberInfo.member)) {\n\t\t\t\t\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tm.redraw()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  }\n\t\t\t\t\t: null,\n\t\t\t}\n\t\t})\n\t}\n}\n\nasync function showAddParticipantDialog(model: GroupSharingModel, texts: GroupSharingTexts) {\n\tconst recipientsText = stream(\"\")\n\tconst recipients = [] as Array<ResolvableRecipient>\n\tconst capability = stream<ShareCapability>(ShareCapability.Read)\n\tconst realGroupName = getSharedGroupName(model.info, locator.logins.getUserController(), false)\n\tconst customGroupName = getSharedGroupName(model.info, locator.logins.getUserController(), true)\n\n\tconst search = await locator.recipientsSearchModel()\n\tconst recipientsModel = await locator.recipientsModel()\n\n\tlet dialog = Dialog.showActionDialog({\n\t\ttype: DialogType.EditMedium,\n\t\ttitle: \"addParticipant_action\",\n\t\tchild: () => [\n\t\t\tm(\n\t\t\t\t\".rel\",\n\t\t\t\tm(MailRecipientsTextField, {\n\t\t\t\t\tlabel: \"shareWithEmailRecipient_label\",\n\t\t\t\t\ttext: recipientsText(),\n\t\t\t\t\trecipients: recipients,\n\t\t\t\t\tdisabled: false,\n\t\t\t\t\tgetRecipientClickedDropdownAttrs: async (address) => [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinfo: address,\n\t\t\t\t\t\t\tcenter: false,\n\t\t\t\t\t\t\tbold: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: \"remove_action\",\n\t\t\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\t\tconst bubbleToRemove = findRecipientWithAddress(recipients, address)\n\t\t\t\t\t\t\t\tif (bubbleToRemove) {\n\t\t\t\t\t\t\t\t\tremove(recipients, bubbleToRemove)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tonRecipientAdded: (address, name, contact) =>\n\t\t\t\t\t\trecipients.push(recipientsModel.resolve({ address, name, contact }, ResolveMode.Eager).whenResolved(() => m.redraw())),\n\t\t\t\t\tonRecipientRemoved: (address) =>\n\t\t\t\t\t\tfindAndRemove(recipients, (recipient) => cleanMailAddress(recipient.address) === cleanMailAddress(address)),\n\t\t\t\t\tonTextChanged: recipientsText,\n\t\t\t\t\tsearch,\n\t\t\t\t\tmaxSuggestionsToShow: 3,\n\t\t\t\t}),\n\t\t\t),\n\t\t\tm(DropDownSelector, {\n\t\t\t\tlabel: \"permissions_label\",\n\t\t\t\titems: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: getCapabilityText(ShareCapability.Invite),\n\t\t\t\t\t\tvalue: ShareCapability.Invite,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: getCapabilityText(ShareCapability.Write),\n\t\t\t\t\t\tvalue: ShareCapability.Write,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: getCapabilityText(ShareCapability.Read),\n\t\t\t\t\t\tvalue: ShareCapability.Read,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tselectedValue: capability(),\n\t\t\t\tselectionChangedHandler: capability,\n\t\t\t\tdropdownWidth: 300,\n\t\t\t}),\n\t\t\tm(TextField, {\n\t\t\t\tvalue: realGroupName,\n\t\t\t\tlabel: texts.groupNameLabel,\n\t\t\t\tisReadOnly: true,\n\t\t\t\thelpLabel: () => {\n\t\t\t\t\treturn m(\"\", customGroupName === realGroupName ? null : texts.yourCustomNameLabel(customGroupName))\n\t\t\t\t},\n\t\t\t}),\n\t\t\tm(\".pt\", texts.addMemberMessage(customGroupName || realGroupName)),\n\t\t],\n\t\tokAction: async () => {\n\t\t\tif (recipients.length === 0) {\n\t\t\t\treturn Dialog.message(\"noRecipients_msg\")\n\t\t\t}\n\n\t\t\tconst { checkPaidSubscription, showPlanUpgradeRequiredDialog } = await import(\"../../misc/SubscriptionDialogs\")\n\t\t\tif (await checkPaidSubscription()) {\n\t\t\t\ttry {\n\t\t\t\t\tconst invitedMailAddresses = await showProgressDialog(\n\t\t\t\t\t\t\"calendarInvitationProgress_msg\",\n\t\t\t\t\t\tmodel.sendGroupInvitation(model.info, recipients, capability()),\n\t\t\t\t\t)\n\t\t\t\t\tdialog.close()\n\t\t\t\t\tawait sendShareNotificationEmail(model.info, invitedMailAddresses, texts)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof PreconditionFailedError) {\n\t\t\t\t\t\tif (locator.logins.getUserController().isGlobalAdmin()) {\n\t\t\t\t\t\t\tconst { getAvailablePlansWithSharing } = await import(\"../../subscription/SubscriptionUtils.js\")\n\t\t\t\t\t\t\tconst plans = await getAvailablePlansWithSharing()\n\t\t\t\t\t\t\tawait showPlanUpgradeRequiredDialog(plans)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDialog.message(\"contactAdmin_msg\")\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (e instanceof UserError) {\n\t\t\t\t\t\tshowUserError(e)\n\t\t\t\t\t} else if (e instanceof TooManyRequestsError) {\n\t\t\t\t\t\tDialog.message(\"tooManyAttempts_msg\")\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tokActionTextId: \"invite_alt\",\n\t}).setCloseHandler(() => {\n\t\tdialog.close()\n\t})\n}\n"],"mappings":"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"}