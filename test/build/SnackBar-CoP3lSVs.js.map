{"version":3,"file":"SnackBar-CoP3lSVs.js","names":["notificationQueue: QueueItem[]","currentAnimationTimeout: TimeoutID | null","vnode: Vnode<SnackBarAttrs>","button: SnackBarButtonAttrs","args: { message: MaybeTranslation; button: SnackBarButtonAttrs; onClose?: () => void; waitingTime?: number }","originClickHandler: ClickHandler | undefined"],"sources":["../../src/common/gui/base/SnackBar.ts"],"sourcesContent":["import m, { Component, Vnode } from \"mithril\"\nimport { px, size } from \"../size\"\nimport { DefaultAnimationTime } from \"../animation/Animations\"\nimport { displayOverlay } from \"./Overlay\"\nimport type { ButtonAttrs } from \"./Button.js\"\nimport { Button, ButtonType } from \"./Button.js\"\nimport { lang, MaybeTranslation } from \"../../misc/LanguageViewModel\"\nimport { styles } from \"../styles\"\nimport { LayerType } from \"../../../RootView\"\nimport type { ClickHandler } from \"./GuiUtils\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { debounce, delay } from \"@tutao/tutanota-utils\"\n\nassertMainOrNode()\nexport const SNACKBAR_SHOW_TIME = 6000\nconst MAX_SNACKBAR_WIDTH = 400\nexport type SnackBarButtonAttrs = {\n\tlabel: MaybeTranslation\n\tclick: ClickHandler\n}\ntype SnackBarAttrs = {\n\tmessage: MaybeTranslation\n\tbutton: ButtonAttrs | null\n}\ntype QueueItem = SnackBarAttrs & { onClose: (() => void) | null }\nconst notificationQueue: QueueItem[] = []\nlet currentAnimationTimeout: TimeoutID | null = null\n\nclass SnackBar implements Component<SnackBarAttrs> {\n\tview(vnode: Vnode<SnackBarAttrs>) {\n\t\t// use same padding as MinimizedEditor\n\t\treturn m(\".snackbar-content.flex.flex-space-between.border-radius.plr.pb-xs.pt-xs\", [\n\t\t\tm(\".flex.center-vertically.smaller\", lang.getTranslationText(vnode.attrs.message)),\n\t\t\tvnode.attrs.button ? m(\".flex-end.center-vertically.pl\", m(Button, vnode.attrs.button)) : null,\n\t\t])\n\t}\n}\n\nfunction makeButtonAttrsForSnackBar(button: SnackBarButtonAttrs): ButtonAttrs {\n\treturn {\n\t\tlabel: button.label,\n\t\tclick: button.click,\n\t\ttype: ButtonType.Secondary,\n\t}\n}\n\n/**\n * Shows a SnackBar overlay at the bottom for low priority notifications that do not require (but might allow) user interaction and disappear after 6 seconds.\n * @param message The message to be shown. It must be short enough to ensure it is always shown in 2 lines of text at max in any language.\n * @param snackBarButton will close the snackbar if it is clicked (onClose() will be called)\n * @param onClose called when the snackbar is closed (either by timeout or button click)\n * @param waitingTime number of milliseconds to wait before showing the snackbar\n */\nexport async function showSnackBar(args: { message: MaybeTranslation; button: SnackBarButtonAttrs; onClose?: () => void; waitingTime?: number }) {\n\tconst { message, button, onClose, waitingTime } = args\n\tconst triggerSnackbar = () => {\n\t\tconst buttonAttrs = makeButtonAttrsForSnackBar(button)\n\t\tnotificationQueue.push({\n\t\t\tmessage: message,\n\t\t\tbutton: buttonAttrs,\n\t\t\tonClose: onClose ?? null,\n\t\t})\n\n\t\tif (notificationQueue.length > 1) {\n\t\t\t//Next notification will be shown when closing current notification\n\t\t\treturn\n\t\t}\n\n\t\tshowNextNotification()\n\t}\n\n\tif (waitingTime) {\n\t\tdebounce(waitingTime, triggerSnackbar)()\n\t\treturn\n\t} else {\n\t\ttriggerSnackbar()\n\t}\n}\n\nfunction getSnackBarPosition() {\n\t// The snackbar will be moved up from off the bottom of the viewport by the transformation animation.\n\tconst snackBarMargin = styles.isUsingBottomNavigation() ? size.hpad : size.hpad_medium\n\tconst leftOffset = styles.isDesktopLayout() ? size.drawer_menu_width : 0\n\tconst snackBarWidth = Math.min(window.innerWidth - leftOffset - 2 * snackBarMargin, MAX_SNACKBAR_WIDTH)\n\treturn {\n\t\tbottom: px(snackBarMargin),\n\t\t// The SnackBar is only shown at the right in single column layout\n\t\tleft: styles.isSingleColumnLayout() ? px(window.innerWidth - snackBarMargin - snackBarWidth) : px(leftOffset + snackBarMargin),\n\t\twidth: px(snackBarWidth),\n\t\tzIndex: LayerType.Overlay,\n\t}\n}\n\nfunction showNextNotification() {\n\tconst { message, button, onClose } = notificationQueue[0] //we shift later because it is still shown\n\tcurrentAnimationTimeout = null\n\tconst closeFunction = displayOverlay(\n\t\t() => getSnackBarPosition(),\n\t\t{\n\t\t\tview: () =>\n\t\t\t\tm(SnackBar, {\n\t\t\t\t\tmessage,\n\t\t\t\t\tbutton,\n\t\t\t\t}),\n\t\t},\n\t\t\"slide-bottom\",\n\t\tundefined,\n\t\t\"minimized-shadow\",\n\t)\n\n\tconst closeAndOpenNext = () => {\n\t\tif (currentAnimationTimeout !== null) {\n\t\t\treturn\n\t\t}\n\n\t\tcloseFunction()\n\n\t\tif (onClose) {\n\t\t\tonClose()\n\t\t}\n\n\t\tnotificationQueue.shift()\n\n\t\tif (notificationQueue.length > 0) {\n\t\t\tcurrentAnimationTimeout = setTimeout(showNextNotification, 2 * DefaultAnimationTime)\n\t\t}\n\t}\n\n\t// close the notification by default when pressing the button\n\tif (button) {\n\t\tconst originClickHandler: ClickHandler | undefined = button.click\n\n\t\tbutton.click = (e, dom) => {\n\t\t\tclearTimeout(autoRemoveTimer)\n\t\t\toriginClickHandler?.(e, dom)\n\t\t\tcloseAndOpenNext()\n\t\t}\n\t}\n\n\tconst autoRemoveTimer = setTimeout(closeAndOpenNext, SNACKBAR_SHOW_TIME)\n\tm.redraw()\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,kBAAkB;MACL,qBAAqB;AAClC,MAAM,qBAAqB;AAU3B,MAAMA,oBAAiC,CAAE;AACzC,IAAIC,0BAA4C;IAE1C,WAAN,MAAmD;CAClD,KAAKC,OAA6B;AAEjC,SAAO,gBAAE,2EAA2E,CACnF,gBAAE,mCAAmC,KAAK,mBAAmB,MAAM,MAAM,QAAQ,CAAC,EAClF,MAAM,MAAM,SAAS,gBAAE,kCAAkC,gBAAE,QAAQ,MAAM,MAAM,OAAO,CAAC,GAAG,IAC1F,EAAC;CACF;AACD;AAED,SAAS,2BAA2BC,QAA0C;AAC7E,QAAO;EACN,OAAO,OAAO;EACd,OAAO,OAAO;EACd,MAAM,WAAW;CACjB;AACD;AASM,eAAe,aAAaC,MAA8G;CAChJ,MAAM,EAAE,SAAS,QAAQ,SAAS,aAAa,GAAG;CAClD,MAAM,kBAAkB,MAAM;EAC7B,MAAM,cAAc,2BAA2B,OAAO;AACtD,oBAAkB,KAAK;GACb;GACT,QAAQ;GACR,SAAS,WAAW;EACpB,EAAC;AAEF,MAAI,kBAAkB,SAAS,EAE9B;AAGD,wBAAsB;CACtB;AAED,KAAI,aAAa;AAChB,WAAS,aAAa,gBAAgB,EAAE;AACxC;CACA,MACA,kBAAiB;AAElB;AAED,SAAS,sBAAsB;CAE9B,MAAM,iBAAiB,OAAO,yBAAyB,GAAG,KAAK,OAAO,KAAK;CAC3E,MAAM,aAAa,OAAO,iBAAiB,GAAG,KAAK,oBAAoB;CACvE,MAAM,gBAAgB,KAAK,IAAI,OAAO,aAAa,aAAa,IAAI,gBAAgB,mBAAmB;AACvG,QAAO;EACN,QAAQ,GAAG,eAAe;EAE1B,MAAM,OAAO,sBAAsB,GAAG,GAAG,OAAO,aAAa,iBAAiB,cAAc,GAAG,GAAG,aAAa,eAAe;EAC9H,OAAO,GAAG,cAAc;EACxB,QAAQ,UAAU;CAClB;AACD;AAED,SAAS,uBAAuB;CAC/B,MAAM,EAAE,SAAS,QAAQ,SAAS,GAAG,kBAAkB;AACvD,2BAA0B;CAC1B,MAAM,gBAAgB,eACrB,MAAM,qBAAqB,EAC3B,EACC,MAAM,MACL,gBAAE,UAAU;EACX;EACA;CACA,EAAC,CACH,GACD,gBACA,WACA,mBACA;CAED,MAAM,mBAAmB,MAAM;AAC9B,MAAI,4BAA4B,KAC/B;AAGD,iBAAe;AAEf,MAAI,QACH,UAAS;AAGV,oBAAkB,OAAO;AAEzB,MAAI,kBAAkB,SAAS,EAC9B,2BAA0B,WAAW,sBAAsB,IAAI,qBAAqB;CAErF;AAGD,KAAI,QAAQ;EACX,MAAMC,qBAA+C,OAAO;AAE5D,SAAO,QAAQ,CAAC,GAAG,QAAQ;AAC1B,gBAAa,gBAAgB;AAC7B,wBAAqB,GAAG,IAAI;AAC5B,qBAAkB;EAClB;CACD;CAED,MAAM,kBAAkB,WAAW,kBAAkB,mBAAmB;AACxE,iBAAE,QAAQ;AACV"}