{"version":3,"file":"CryptoWrapper-BTtEczdP.js","names":["key: AesKey","encryptedBytes: Uint8Array","usePadding: boolean","bytes: Uint8Array","iv?: Uint8Array","usePadding?: boolean","useMac?: boolean","encryptionKey: AesKey","key: Uint8Array","privateKey: EccPrivateKey","encryptingKey: AesKey","keyToBeEncrypted: AesKey","encryptingKey: VersionedKey","privateKey: KyberPrivateKey","kyberPublicKey: KyberPublicKey","encodedPublicKey: Uint8Array","sk: AesKey","value: Uint8Array","value: string","keyPair: EncryptedKeyPairs","data: Uint8Array"],"sources":["../../src/common/api/worker/crypto/CryptoWrapper.ts"],"sourcesContent":["import {\n\tAes256Key,\n\taes256RandomKey,\n\taesDecrypt,\n\taesEncrypt,\n\tAesKey,\n\tAsymmetricKeyPair,\n\tbytesToKyberPublicKey,\n\tdecryptKey,\n\tdecryptKeyPair,\n\tEccKeyPair,\n\tEccPrivateKey,\n\tENABLE_MAC,\n\tencryptEccKey,\n\tEncryptedKeyPairs,\n\tEncryptedPqKeyPairs,\n\tEncryptedRsaEccKeyPairs,\n\tEncryptedRsaKeyPairs,\n\tencryptKey,\n\tencryptKyberKey,\n\tgenerateEccKeyPair,\n\thkdf,\n\tHkdfKeyDerivationDomains,\n\tIV_BYTE_LENGTH,\n\tKEY_LENGTH_BYTES_AES_256,\n\tkeyToUint8Array,\n\tKyberPrivateKey,\n\tKyberPublicKey,\n\tkyberPublicKeyToBytes,\n\ttype PQKeyPairs,\n\trandom,\n\ttype RsaEccKeyPair,\n\ttype RsaKeyPair,\n\tsha256Hash,\n\tuint8ArrayToKey,\n} from \"@tutao/tutanota-crypto\"\nimport { stringToUtf8Uint8Array, Versioned } from \"@tutao/tutanota-utils\"\n\n/**\n * An AesKey (usually a group key) and its version.\n */\nexport type VersionedKey = Versioned<AesKey>\n/**\n * A key that is encrypted with a given version of some other key.\n */\nexport type VersionedEncryptedKey = {\n\tencryptingKeyVersion: number // the version of the encryption key NOT the encrypted key\n\tkey: Uint8Array // encrypted key\n}\n\n/**\n * This class is useful to bundle all the crypto primitives and make the code testable without using the real crypto implementations.\n */\nexport class CryptoWrapper {\n\taes256RandomKey(): Aes256Key {\n\t\treturn aes256RandomKey()\n\t}\n\n\taesDecrypt(key: AesKey, encryptedBytes: Uint8Array, usePadding: boolean): Uint8Array {\n\t\treturn aesDecrypt(key, encryptedBytes, usePadding)\n\t}\n\n\taesEncrypt(key: AesKey, bytes: Uint8Array, iv?: Uint8Array, usePadding?: boolean, useMac?: boolean): Uint8Array {\n\t\treturn aesEncrypt(key, bytes, iv, usePadding, useMac)\n\t}\n\n\tdecryptKey(encryptionKey: AesKey, key: Uint8Array): AesKey {\n\t\treturn decryptKey(encryptionKey, key)\n\t}\n\n\tencryptEccKey(encryptionKey: AesKey, privateKey: EccPrivateKey): Uint8Array {\n\t\treturn encryptEccKey(encryptionKey, privateKey)\n\t}\n\n\tencryptKey(encryptingKey: AesKey, keyToBeEncrypted: AesKey): Uint8Array {\n\t\treturn encryptKey(encryptingKey, keyToBeEncrypted)\n\t}\n\n\tencryptKeyWithVersionedKey(encryptingKey: VersionedKey, key: AesKey): VersionedEncryptedKey {\n\t\treturn encryptKeyWithVersionedKey(encryptingKey, key)\n\t}\n\n\tgenerateEccKeyPair(): EccKeyPair {\n\t\treturn generateEccKeyPair()\n\t}\n\n\tencryptKyberKey(encryptionKey: AesKey, privateKey: KyberPrivateKey): Uint8Array {\n\t\treturn encryptKyberKey(encryptionKey, privateKey)\n\t}\n\n\tkyberPublicKeyToBytes(kyberPublicKey: KyberPublicKey): Uint8Array {\n\t\treturn kyberPublicKeyToBytes(kyberPublicKey)\n\t}\n\n\tbytesToKyberPublicKey(encodedPublicKey: Uint8Array): KyberPublicKey {\n\t\treturn bytesToKyberPublicKey(encodedPublicKey)\n\t}\n\n\tencryptBytes(sk: AesKey, value: Uint8Array): Uint8Array {\n\t\treturn encryptBytes(sk, value)\n\t}\n\n\tencryptString(sk: AesKey, value: string): Uint8Array {\n\t\treturn encryptString(sk, value)\n\t}\n\n\tdecryptKeyPair(encryptionKey: AesKey, keyPair: EncryptedPqKeyPairs): PQKeyPairs\n\tdecryptKeyPair(encryptionKey: AesKey, keyPair: EncryptedRsaKeyPairs): RsaKeyPair\n\tdecryptKeyPair(encryptionKey: AesKey, keyPair: EncryptedRsaEccKeyPairs): RsaEccKeyPair\n\tdecryptKeyPair(encryptionKey: AesKey, keyPair: EncryptedKeyPairs): AsymmetricKeyPair\n\tdecryptKeyPair(encryptionKey: AesKey, keyPair: EncryptedKeyPairs): AsymmetricKeyPair {\n\t\treturn decryptKeyPair(encryptionKey, keyPair)\n\t}\n\n\tsha256Hash(data: Uint8Array): Uint8Array {\n\t\treturn sha256Hash(data)\n\t}\n\n\tderiveKeyWithHkdf({ key, salt, context }: { key: AesKey; salt: string; context: HkdfKeyDerivationDomains }) {\n\t\treturn deriveKey({\n\t\t\tsalt,\n\t\t\tkey,\n\t\t\tinfo: context,\n\t\t\tlength: KEY_LENGTH_BYTES_AES_256,\n\t\t})\n\t}\n}\n\nfunction deriveKey({ salt, key, info, length }: { salt: string; key: number[]; info: string; length: number }) {\n\treturn uint8ArrayToKey(hkdf(sha256Hash(stringToUtf8Uint8Array(salt)), keyToUint8Array(key), stringToUtf8Uint8Array(info), length))\n}\n\nexport function encryptBytes(sk: AesKey, value: Uint8Array): Uint8Array {\n\treturn aesEncrypt(sk, value, random.generateRandomData(IV_BYTE_LENGTH), true, ENABLE_MAC)\n}\n\nexport function encryptString(sk: AesKey, value: string): Uint8Array {\n\treturn aesEncrypt(sk, stringToUtf8Uint8Array(value), random.generateRandomData(IV_BYTE_LENGTH), true, ENABLE_MAC)\n}\n\n/**\n * Encrypts the key with the encryptingKey and return the encrypted key and the version of the encryptingKey.\n * @param encryptingKey the encrypting key.\n * @param key the key to be encrypted.\n */\nexport function encryptKeyWithVersionedKey(encryptingKey: VersionedKey, key: AesKey): VersionedEncryptedKey {\n\treturn {\n\t\tencryptingKeyVersion: encryptingKey.version,\n\t\tkey: encryptKey(encryptingKey.object, key),\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqDa,gBAAN,MAAoB;CAC1B,kBAA6B;AAC5B,SAAO,iBAAiB;CACxB;CAED,WAAWA,KAAaC,gBAA4BC,YAAiC;AACpF,SAAO,WAAW,KAAK,gBAAgB,WAAW;CAClD;CAED,WAAWF,KAAaG,OAAmBC,IAAiBC,YAAsBC,QAA8B;AAC/G,SAAO,WAAW,KAAK,OAAO,IAAI,YAAY,OAAO;CACrD;CAED,WAAWC,eAAuBC,KAAyB;AAC1D,SAAO,WAAW,eAAe,IAAI;CACrC;CAED,cAAcD,eAAuBE,YAAuC;AAC3E,SAAO,cAAc,eAAe,WAAW;CAC/C;CAED,WAAWC,eAAuBC,kBAAsC;AACvE,SAAO,WAAW,eAAe,iBAAiB;CAClD;CAED,2BAA2BC,eAA6BZ,KAAoC;AAC3F,SAAO,2BAA2B,eAAe,IAAI;CACrD;CAED,qBAAiC;AAChC,SAAO,oBAAoB;CAC3B;CAED,gBAAgBO,eAAuBM,YAAyC;AAC/E,SAAO,gBAAgB,eAAe,WAAW;CACjD;CAED,sBAAsBC,gBAA4C;AACjE,SAAO,sBAAsB,eAAe;CAC5C;CAED,sBAAsBC,kBAA8C;AACnE,SAAO,sBAAsB,iBAAiB;CAC9C;CAED,aAAaC,IAAYC,OAA+B;AACvD,SAAO,aAAa,IAAI,MAAM;CAC9B;CAED,cAAcD,IAAYE,OAA2B;AACpD,SAAO,cAAc,IAAI,MAAM;CAC/B;CAMD,eAAeX,eAAuBY,SAA+C;AACpF,SAAO,eAAe,eAAe,QAAQ;CAC7C;CAED,WAAWC,MAA8B;AACxC,SAAO,WAAW,KAAK;CACvB;CAED,kBAAkB,EAAE,KAAK,MAAM,SAA2E,EAAE;AAC3G,SAAO,UAAU;GAChB;GACA;GACA,MAAM;GACN,QAAQ;EACR,EAAC;CACF;AACD;AAED,SAAS,UAAU,EAAE,MAAM,KAAK,MAAM,QAAuE,EAAE;AAC9G,QAAO,gBAAgB,KAAK,WAAW,uBAAuB,KAAK,CAAC,EAAE,gBAAgB,IAAI,EAAE,uBAAuB,KAAK,EAAE,OAAO,CAAC;AAClI;AAEM,SAAS,aAAaJ,IAAYC,OAA+B;AACvE,QAAO,WAAW,IAAI,OAAO,OAAO,mBAAmB,eAAe,EAAE,MAAM,WAAW;AACzF;AAEM,SAAS,cAAcD,IAAYE,OAA2B;AACpE,QAAO,WAAW,IAAI,uBAAuB,MAAM,EAAE,OAAO,mBAAmB,eAAe,EAAE,MAAM,WAAW;AACjH;AAOM,SAAS,2BAA2BN,eAA6BZ,KAAoC;AAC3G,QAAO;EACN,sBAAsB,cAAc;EACpC,KAAK,WAAW,cAAc,QAAQ,IAAI;CAC1C;AACD"}