{"version":3,"file":"SearchInPageOverlay-BIbX7aTA.js","names":["result: ElectronResult | null","event: MouseEvent","e: KeyboardEvent","e: Event","searchInPageOverlay: SearchInPageOverlay"],"sources":["../../src/common/gui/SearchInPageOverlay.ts"],"sourcesContent":["import m, { Children, Component } from \"mithril\"\nimport type { PositionRect } from \"./base/Overlay\"\nimport { displayOverlay } from \"./base/Overlay\"\nimport { px, size } from \"./size\"\nimport { Icons } from \"./base/icons/Icons\"\nimport { assertMainOrNode } from \"../api/common/Env\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport { transform, TransformEnum } from \"./animation/Animations\"\nimport { Keys } from \"../api/common/TutanotaConstants\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { ElectronResult } from \"../native/common/generatedipc/ElectronResult.js\"\nimport { isKeyPressed } from \"../misc/KeyManager.js\"\nimport { IconButton } from \"./base/IconButton.js\"\nimport { ToggleButton } from \"./base/buttons/ToggleButton.js\"\nimport { styles } from \"./styles.js\"\nimport { getSafeAreaInsetBottom } from \"./HtmlUtils.js\"\n\nassertMainOrNode()\n\n/**\n * search bar for the Ctrl+F in-page search of the Desktop client\n * gets loaded asynchronously, shouldn't be in the web bundle\n */\nexport class SearchInPageOverlay {\n\tprivate closeFunction: (() => void) | null\n\tprivate domInput!: HTMLInputElement\n\tprivate matchCase: boolean = false\n\tprivate numberOfMatches: number = 0\n\tprivate currentMatch: number = 0\n\tprivate skipNextBlur: boolean = false\n\n\tconstructor() {\n\t\tthis.closeFunction = null\n\t}\n\n\topen() {\n\t\tif (locator.logins.isUserLoggedIn()) {\n\t\t\tif (!this.closeFunction) {\n\t\t\t\tthis.closeFunction = displayOverlay(() => this.getRect(), this.getComponent(), \"slide-bottom\")\n\t\t\t} else {\n\t\t\t\t//already open, refocus\n\t\t\t\tconsole.log(\"refocusing\")\n\n\t\t\t\tthis.domInput.focus()\n\n\t\t\t\tthis.domInput.select()\n\t\t\t}\n\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\tclose() {\n\t\tif (this.closeFunction) {\n\t\t\tthis.closeFunction()\n\t\t\tlocator.searchTextFacade.stopFindInPage()\n\t\t\tthis.closeFunction = null\n\t\t}\n\n\t\tm.redraw()\n\t}\n\n\tprivate getRect(): PositionRect {\n\t\tconst bottomNavHeight = size.bottom_nav_bar + getSafeAreaInsetBottom()\n\t\treturn {\n\t\t\theight: px(size.navbar_height_mobile),\n\t\t\t// Place the search overlay on top of the bottom nav bar\n\t\t\tbottom: px(styles.isUsingBottomNavigation() ? -bottomNavHeight : 0),\n\t\t\tright: px(0),\n\t\t\tleft: px(0),\n\t\t}\n\t}\n\n\tprivate inputField: () => Children = () => {\n\t\treturn m(\n\t\t\t\"input#search-overlay-input.dropdown-bar.elevated-bg.pl-l.button-height.inputWrapper\",\n\t\t\t{\n\t\t\t\tplaceholder: lang.get(\"searchPage_action\"),\n\t\t\t\toncreate: (vnode) => {\n\t\t\t\t\tthis.domInput = vnode.dom as HTMLInputElement\n\n\t\t\t\t\tthis.domInput.focus()\n\t\t\t\t},\n\t\t\t\tonblur: () => {\n\t\t\t\t\tif (this.skipNextBlur) {\n\t\t\t\t\t\tthis.skipNextBlur = false\n\n\t\t\t\t\t\tthis.domInput.focus()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlocator.searchTextFacade.setSearchOverlayState(false, false)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonfocus: () => locator.searchTextFacade.setSearchOverlayState(true, false),\n\t\t\t\toninput: () => this.find(true, true),\n\t\t\t\tstyle: {\n\t\t\t\t\twidth: px(250),\n\t\t\t\t\ttop: 0,\n\t\t\t\t\theight: px(size.button_height),\n\t\t\t\t\tleft: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"\",\n\t\t)\n\t}\n\tprivate find: (forward: boolean, findNext: boolean) => Promise<void> = async (forward, findNext) => {\n\t\tthis.skipNextBlur = true\n\t\tconst r = await locator.searchTextFacade.findInPage(this.domInput.value, forward, this.matchCase, findNext)\n\t\tthis.applyNextResult(r)\n\t}\n\n\tapplyNextResult(result: ElectronResult | null): void {\n\t\tif (result == null) {\n\t\t\tthis.numberOfMatches = 0\n\t\t\tthis.currentMatch = 0\n\t\t} else {\n\t\t\tconst { activeMatchOrdinal, matches } = result\n\n\t\t\tif (matches === 1) {\n\t\t\t\t/* the search bar loses focus without any events when there\n\t\t\t\t *  are no results except for the search bar itself. this enables\n\t\t\t\t *  us to retain focus. */\n\t\t\t\tthis.domInput.blur()\n\n\t\t\t\tthis.domInput.focus()\n\t\t\t}\n\n\t\t\tthis.numberOfMatches = matches - 1\n\t\t\tthis.currentMatch = activeMatchOrdinal - 1\n\t\t}\n\n\t\tm.redraw()\n\t}\n\n\tgetComponent(): Component {\n\t\tconst handleMouseUp = (event: MouseEvent) => this.handleMouseUp(event)\n\n\t\treturn {\n\t\t\tview: (_) => {\n\t\t\t\treturn m(\n\t\t\t\t\t\".flex.flex-space-between\",\n\t\t\t\t\t{\n\t\t\t\t\t\toncreate: () => window.addEventListener(\"mouseup\", handleMouseUp),\n\t\t\t\t\t\tonremove: () => window.removeEventListener(\"mouseup\", handleMouseUp),\n\t\t\t\t\t},\n\t\t\t\t\t[\n\t\t\t\t\t\tm(\n\t\t\t\t\t\t\t\".flex-start.center-vertically\",\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tonkeydown: (e: KeyboardEvent) => {\n\t\t\t\t\t\t\t\t\tif (isKeyPressed(e.key, Keys.ESC)) {\n\t\t\t\t\t\t\t\t\t\tthis.close()\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// prevent key from getting picked up by shortcuts etc.\n\t\t\t\t\t\t\t\t\te.stopPropagation()\n\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tthis.inputField(),\n\t\t\t\t\t\t\t\tm(IconButton, {\n\t\t\t\t\t\t\t\t\ttitle: \"previous_action\",\n\t\t\t\t\t\t\t\t\ticon: Icons.ArrowBackward,\n\t\t\t\t\t\t\t\t\tclick: () => this.find(false, true),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tm(IconButton, {\n\t\t\t\t\t\t\t\t\ttitle: \"next_action\",\n\t\t\t\t\t\t\t\t\ticon: Icons.ArrowForward,\n\t\t\t\t\t\t\t\t\tclick: () => this.find(true, true),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tm(ToggleButton, {\n\t\t\t\t\t\t\t\t\ttitle: \"matchCase_alt\",\n\t\t\t\t\t\t\t\t\ticon: Icons.MatchCase,\n\t\t\t\t\t\t\t\t\ttoggled: this.matchCase,\n\t\t\t\t\t\t\t\t\tonToggled: () => {\n\t\t\t\t\t\t\t\t\t\tthis.matchCase = !this.matchCase\n\n\t\t\t\t\t\t\t\t\t\tthis.find(true, false)\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tm(\"div.pl-m\", this.numberOfMatches > 0 ? `${this.currentMatch}/${this.numberOfMatches}` : lang.get(\"searchNoResults_msg\")),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t),\n\t\t\t\t\t\tm(IconButton, {\n\t\t\t\t\t\t\ttitle: \"close_alt\",\n\t\t\t\t\t\t\ticon: Icons.Cancel,\n\t\t\t\t\t\t\tclick: () => this.close(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t],\n\t\t\t\t)\n\t\t\t},\n\t\t}\n\t}\n\n\t/*\n\t * we're catching enter key events on the main thread while the search overlay is open to enable\n\t * next-result-via-enter behaviour.\n\t *\n\t * since losing focus on the overlay via issuing a search request seems to be indistinguishable\n\t * from losing it via click/tab we need to check if anything else was clicked and tell the main thread to\n\t * not search the next result for enter key events (otherwise we couldn't type newlines while the overlay is open)\n\t */\n\thandleMouseUp(e: Event) {\n\t\tif (!(e.target instanceof Element && e.target.id !== \"search-overlay-input\")) return\n\t\tlocator.searchTextFacade.setSearchOverlayState(false, true)\n\t}\n}\n\nexport const searchInPageOverlay: SearchInPageOverlay = new SearchInPageOverlay()\n"],"mappings":"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"}