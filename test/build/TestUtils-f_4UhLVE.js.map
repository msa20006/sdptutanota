{"version":3,"file":"TestUtils-f_4UhLVE.js","names":["browserDataStub: BrowserData","args?: {\n\t\tdb?: Db\n\t\tqueue?: EventQueue\n\t\tbrowserData?: BrowserData\n\t\ttransaction?: DbTransaction\n\t}","mocker?: (_: any) => void","uint8ArrayKey: Uint8Array","o: DesktopKeyStoreFacade","time: number","thunk: Thunk","after: number","period: number","id: ScheduledPeriodicId","domainConfigStub: DomainConfig","typeRef: TypeRef<any>","valueName: string","value: ModelValue","typeRef: TypeRef<T>","values?: Partial<T>","mock: typeof undiciFetch","url: string","headers: Record<string, string>","status: number","jsonObject: unknown","match: string"],"sources":["../tests/TestUtils.ts"],"sourcesContent":["import type { BrowserData } from \"../../src/common/misc/ClientConstants.js\"\nimport type { Db } from \"../../src/common/api/worker/search/SearchTypes.js\"\nimport { IndexerCore } from \"../../src/mail-app/workerUtils/index/IndexerCore.js\"\nimport { EventQueue } from \"../../src/common/api/worker/EventQueue.js\"\nimport { DbFacade, DbTransaction } from \"../../src/common/api/worker/search/DbFacade.js\"\nimport { assertNotNull, deepEqual, defer, Thunk, TypeRef } from \"@tutao/tutanota-utils\"\nimport type { DesktopKeyStoreFacade } from \"../../src/common/desktop/DesktopKeyStoreFacade.js\"\nimport { mock } from \"@tutao/tutanota-test-utils\"\nimport { aes256RandomKey, fixedIv, uint8ArrayToKey } from \"@tutao/tutanota-crypto\"\nimport { ScheduledPeriodicId, ScheduledTimeoutId, Scheduler } from \"../../src/common/api/common/utils/Scheduler.js\"\nimport { matchers, object, when } from \"testdouble\"\nimport { Entity, ModelValue, TypeModel } from \"../../src/common/api/common/EntityTypes.js\"\nimport { create } from \"../../src/common/api/common/utils/EntityUtils.js\"\nimport { typeModels } from \"../../src/common/api/common/EntityFunctions.js\"\nimport { type fetch as undiciFetch, type Response } from \"undici\"\nimport { Cardinality, ValueType } from \"../../src/common/api/common/EntityConstants.js\"\n\nexport const browserDataStub: BrowserData = {\n\tneedsMicrotaskHack: false,\n\tneedsExplicitIDBIds: false,\n\tindexedDbSupported: true,\n}\n\nexport function makeCore(\n\targs?: {\n\t\tdb?: Db\n\t\tqueue?: EventQueue\n\t\tbrowserData?: BrowserData\n\t\ttransaction?: DbTransaction\n\t},\n\tmocker?: (_: any) => void,\n): IndexerCore {\n\tconst safeArgs = args ?? {}\n\tconst { transaction } = safeArgs\n\tconst defaultDb = {\n\t\tkey: aes256RandomKey(),\n\t\tiv: fixedIv,\n\t\tdbFacade: { createTransaction: () => Promise.resolve(transaction) } as Partial<DbFacade>,\n\t\tinitialized: Promise.resolve(),\n\t} as Partial<Db> as Db\n\tconst defaultQueue = {} as Partial<EventQueue> as EventQueue\n\tconst { db, queue, browserData } = {\n\t\t...{ db: defaultDb, browserData: browserDataStub, queue: defaultQueue },\n\t\t...safeArgs,\n\t}\n\tconst core = new IndexerCore(db, queue, browserData)\n\tif (mocker) mock(core, mocker)\n\treturn core\n}\n\nexport function makeKeyStoreFacade(uint8ArrayKey: Uint8Array): DesktopKeyStoreFacade {\n\tconst o: DesktopKeyStoreFacade = object()\n\twhen(o.getDeviceKey()).thenResolve(uint8ArrayToKey(uint8ArrayKey))\n\twhen(o.getKeyChainKey()).thenResolve(uint8ArrayToKey(uint8ArrayKey))\n\treturn o\n}\n\ntype IdThunk = {\n\tid: ScheduledTimeoutId\n\tthunk: Thunk\n}\n\nexport class SchedulerMock implements Scheduler {\n\talarmId: number = 0\n\n\t/** key is the time */\n\tscheduledAt: Map<number, IdThunk> = new Map()\n\tscheduledAfter: Map<number, IdThunk> = new Map()\n\tcancelledAt: Set<ScheduledTimeoutId> = new Set()\n\tscheduledPeriodic: Map<number, IdThunk> = new Map()\n\tcancelledPeriodic: Set<ScheduledTimeoutId> = new Set()\n\n\tscheduleAt(callback, date): ScheduledTimeoutId {\n\t\tconst id = this._incAlarmId()\n\n\t\tthis.scheduledAt.set(date.getTime(), {\n\t\t\tid,\n\t\t\tthunk: callback,\n\t\t})\n\t\treturn id\n\t}\n\n\tgetThunkAt(time: number): Thunk {\n\t\treturn assertNotNull(this.scheduledAt.get(time), \"No thunk scheduled at \" + time).thunk\n\t}\n\n\tgetThunkAfter(time: number): Thunk {\n\t\treturn assertNotNull(this.scheduledAfter.get(time), \"No thunk scheduled after \" + time).thunk\n\t}\n\n\tscheduleAfter(thunk: Thunk, after: number): ScheduledTimeoutId {\n\t\tconst id = this._incAlarmId()\n\n\t\tthis.scheduledAfter.set(after, {\n\t\t\tid,\n\t\t\tthunk: thunk,\n\t\t})\n\t\treturn id\n\t}\n\n\tunscheduleTimeout(id) {\n\t\tthis.cancelledAt.add(id)\n\t}\n\n\tschedulePeriodic(thunk, period: number): ScheduledPeriodicId {\n\t\tconst id = this._incAlarmId()\n\t\tthis.scheduledPeriodic.set(period, { id, thunk })\n\t\treturn id\n\t}\n\n\tgetThunkPeriodic(period: number): Thunk {\n\t\treturn assertNotNull(this.scheduledPeriodic.get(period), \"No thunk scheduled each \" + period).thunk\n\t}\n\n\tgetAllPeriodThunks(): Array<Thunk> {\n\t\treturn Array.from(this.scheduledPeriodic.values()).map((idThunk) => idThunk.thunk)\n\t}\n\n\tunschedulePeriodic(id: ScheduledPeriodicId) {\n\t\tthis.cancelledPeriodic.add(id)\n\t}\n\n\t_incAlarmId(): ScheduledTimeoutId {\n\t\treturn this.alarmId++\n\t}\n}\n\nexport const domainConfigStub: DomainConfig = {\n\tfirstPartyDomain: true,\n\tpartneredDomainTransitionUrl: \"\",\n\tapiUrl: \"\",\n\tu2fAppId: \"\",\n\twebauthnRpId: \"\",\n\treferralBaseUrl: \"\",\n\tgiftCardBaseUrl: \"\",\n\tpaymentUrl: \"\",\n\twebauthnUrl: \"\",\n\tlegacyWebauthnUrl: \"\",\n\twebauthnMobileUrl: \"\",\n\tlegacyWebauthnMobileUrl: \"\",\n\twebsiteBaseUrl: \"\",\n}\n\n// non-async copy of the function\nfunction resolveTypeReference(typeRef: TypeRef<any>): TypeModel {\n\t// @ts-ignore\n\tconst modelMap = typeModels[typeRef.app]\n\n\tconst typeModel = modelMap[typeRef.type]\n\tif (typeModel == null) {\n\t\tthrow new Error(\"Cannot find TypeRef: \" + JSON.stringify(typeRef))\n\t} else {\n\t\treturn typeModel\n\t}\n}\n\n// copy of the _getDefaultValue but with Date(0) being default date so that the tests are deterministic\nfunction getDefaultTestValue(valueName: string, value: ModelValue): any {\n\tif (valueName === \"_format\") {\n\t\treturn \"0\"\n\t} else if (valueName === \"_id\") {\n\t\treturn null // aggregate ids are set in the worker, list ids must be set explicitely and element ids are created on the server\n\t} else if (valueName === \"_permissions\") {\n\t\treturn null\n\t} else if (value.cardinality === Cardinality.ZeroOrOne) {\n\t\treturn null\n\t} else {\n\t\tswitch (value.type) {\n\t\t\tcase ValueType.Bytes:\n\t\t\t\treturn new Uint8Array(0)\n\n\t\t\tcase ValueType.Date:\n\t\t\t\treturn new Date(0)\n\n\t\t\tcase ValueType.Number:\n\t\t\t\treturn \"0\"\n\n\t\t\tcase ValueType.String:\n\t\t\t\treturn \"\"\n\n\t\t\tcase ValueType.Boolean:\n\t\t\t\treturn false\n\n\t\t\tcase ValueType.CustomId:\n\t\t\tcase ValueType.GeneratedId:\n\t\t\t\treturn null\n\t\t\t// we have to use null although the value must be set to something different\n\t\t}\n\t}\n}\n\nexport function createTestEntity<T extends Entity>(typeRef: TypeRef<T>, values?: Partial<T>): T {\n\tconst typeModel = resolveTypeReference(typeRef as TypeRef<any>)\n\tconst entity = create(typeModel, typeRef, getDefaultTestValue)\n\tif (values) {\n\t\treturn Object.assign(entity, values)\n\t} else {\n\t\treturn entity\n\t}\n}\n\nexport function mockFetchRequest(mock: typeof undiciFetch, url: string, headers: Record<string, string>, status: number, jsonObject: unknown): Promise<void> {\n\tconst response = object<Writeable<Response>>()\n\tresponse.ok = status >= 200 && status < 300\n\tresponse.status = status\n\tconst jsonDefer = defer<void>()\n\twhen(response.json()).thenDo(() => {\n\t\tjsonDefer.resolve()\n\t\treturn Promise.resolve(jsonObject)\n\t})\n\twhen(\n\t\tmock(\n\t\t\tmatchers.argThat((urlArg) => urlArg.toString() === url),\n\t\t\tmatchers.argThat((options) => {\n\t\t\t\treturn deepEqual(options.headers, headers)\n\t\t\t}),\n\t\t),\n\t).thenResolve(response)\n\treturn jsonDefer.promise\n}\n\nexport function textIncludes(match: string): (text: string) => { pass: true } | { pass: false; message: string } {\n\treturn (text) => (text.includes(match) ? { pass: true } : { pass: false, message: `should include: \"${match}\"` })\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiBaA,kBAA+B;CAC3C,oBAAoB;CACpB,qBAAqB;CACrB,oBAAoB;AACpB;AAEM,SAAS,SACfC,MAMAC,QACc;CACd,MAAM,WAAW,QAAQ,CAAE;CAC3B,MAAM,EAAE,aAAa,GAAG;CACxB,MAAM,YAAY;EACjB,KAAK,iBAAiB;EACtB,IAAI;EACJ,UAAU,EAAE,mBAAmB,MAAM,QAAQ,QAAQ,YAAY,CAAE;EACnE,aAAa,QAAQ,SAAS;CAC9B;CACD,MAAM,eAAe,CAAE;CACvB,MAAM,EAAE,IAAI,OAAO,aAAa,GAAG;EAClC,GAAG;GAAE,IAAI;GAAW,aAAa;GAAiB,OAAO;EAAc;EACvE,GAAG;CACH;CACD,MAAM,OAAO,IAAI,YAAY,IAAI,OAAO;AACxC,KAAI,OAAQ,MAAK,MAAM,OAAO;AAC9B,QAAO;AACP;AAEM,SAAS,mBAAmBC,eAAkD;CACpF,MAAMC,IAA2B,+BAAQ;AACzC,6BAAK,EAAE,cAAc,CAAC,CAAC,YAAY,gBAAgB,cAAc,CAAC;AAClE,6BAAK,EAAE,gBAAgB,CAAC,CAAC,YAAY,gBAAgB,cAAc,CAAC;AACpE,QAAO;AACP;IAOY,gBAAN,MAAyC;CAC/C,UAAkB;;CAGlB,cAAoC,IAAI;CACxC,iBAAuC,IAAI;CAC3C,cAAuC,IAAI;CAC3C,oBAA0C,IAAI;CAC9C,oBAA6C,IAAI;CAEjD,WAAW,UAAU,MAA0B;EAC9C,MAAM,KAAK,KAAK,aAAa;AAE7B,OAAK,YAAY,IAAI,KAAK,SAAS,EAAE;GACpC;GACA,OAAO;EACP,EAAC;AACF,SAAO;CACP;CAED,WAAWC,MAAqB;AAC/B,SAAO,cAAc,KAAK,YAAY,IAAI,KAAK,EAAE,2BAA2B,KAAK,CAAC;CAClF;CAED,cAAcA,MAAqB;AAClC,SAAO,cAAc,KAAK,eAAe,IAAI,KAAK,EAAE,8BAA8B,KAAK,CAAC;CACxF;CAED,cAAcC,OAAcC,OAAmC;EAC9D,MAAM,KAAK,KAAK,aAAa;AAE7B,OAAK,eAAe,IAAI,OAAO;GAC9B;GACO;EACP,EAAC;AACF,SAAO;CACP;CAED,kBAAkB,IAAI;AACrB,OAAK,YAAY,IAAI,GAAG;CACxB;CAED,iBAAiB,OAAOC,QAAqC;EAC5D,MAAM,KAAK,KAAK,aAAa;AAC7B,OAAK,kBAAkB,IAAI,QAAQ;GAAE;GAAI;EAAO,EAAC;AACjD,SAAO;CACP;CAED,iBAAiBA,QAAuB;AACvC,SAAO,cAAc,KAAK,kBAAkB,IAAI,OAAO,EAAE,6BAA6B,OAAO,CAAC;CAC9F;CAED,qBAAmC;AAClC,SAAO,MAAM,KAAK,KAAK,kBAAkB,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,QAAQ,MAAM;CAClF;CAED,mBAAmBC,IAAyB;AAC3C,OAAK,kBAAkB,IAAI,GAAG;CAC9B;CAED,cAAkC;AACjC,SAAO,KAAK;CACZ;AACD;MAEYC,mBAAiC;CAC7C,kBAAkB;CAClB,8BAA8B;CAC9B,QAAQ;CACR,UAAU;CACV,cAAc;CACd,iBAAiB;CACjB,iBAAiB;CACjB,YAAY;CACZ,aAAa;CACb,mBAAmB;CACnB,mBAAmB;CACnB,yBAAyB;CACzB,gBAAgB;AAChB;AAGD,SAAS,qBAAqBC,SAAkC;CAE/D,MAAM,WAAW,WAAW,QAAQ;CAEpC,MAAM,YAAY,SAAS,QAAQ;AACnC,KAAI,aAAa,KAChB,OAAM,IAAI,MAAM,0BAA0B,KAAK,UAAU,QAAQ;IAEjE,QAAO;AAER;AAGD,SAAS,oBAAoBC,WAAmBC,OAAwB;AACvE,KAAI,cAAc,UACjB,QAAO;SACG,cAAc,MACxB,QAAO;SACG,cAAc,eACxB,QAAO;SACG,MAAM,gBAAgB,YAAY,UAC5C,QAAO;IAEP,SAAQ,MAAM,MAAd;AACC,OAAK,UAAU,MACd,QAAO,IAAI,WAAW;AAEvB,OAAK,UAAU,KACd,QAAO,IAAI,KAAK;AAEjB,OAAK,UAAU,OACd,QAAO;AAER,OAAK,UAAU,OACd,QAAO;AAER,OAAK,UAAU,QACd,QAAO;AAER,OAAK,UAAU;AACf,OAAK,UAAU,YACd,QAAO;CAER;AAEF;AAEM,SAAS,iBAAmCC,SAAqBC,QAAwB;CAC/F,MAAM,YAAY,qBAAqB,QAAwB;CAC/D,MAAM,SAAS,OAAO,WAAW,SAAS,oBAAoB;AAC9D,KAAI,OACH,QAAO,OAAO,OAAO,QAAQ,OAAO;IAEpC,QAAO;AAER;AAEM,SAAS,iBAAiBC,QAA0BC,KAAaC,SAAiCC,QAAgBC,YAAoC;CAC5J,MAAM,WAAW,+BAA6B;AAC9C,UAAS,KAAK,UAAU,OAAO,SAAS;AACxC,UAAS,SAAS;CAClB,MAAM,YAAY,OAAa;AAC/B,6BAAK,SAAS,MAAM,CAAC,CAAC,OAAO,MAAM;AAClC,YAAU,SAAS;AACnB,SAAO,QAAQ,QAAQ,WAAW;CAClC,EAAC;AACF,6BACC,OACC,2BAAS,QAAQ,CAAC,WAAW,OAAO,UAAU,KAAK,IAAI,EACvD,2BAAS,QAAQ,CAAC,YAAY;AAC7B,SAAO,UAAU,QAAQ,SAAS,QAAQ;CAC1C,EAAC,CACF,CACD,CAAC,YAAY,SAAS;AACvB,QAAO,UAAU;AACjB;AAEM,SAAS,aAAaC,OAAoF;AAChH,QAAO,CAAC,SAAU,KAAK,SAAS,MAAM,GAAG,EAAE,MAAM,KAAM,IAAG;EAAE,MAAM;EAAO,UAAU,mBAAmB,MAAM;CAAI;AAChH"}