{"version":3,"file":"Compression-CvN1IyGQ.js","names":["input: Uint8Array","l","end","sizeNeeded","isize: number","source: Uint8Array","literals_length"],"sources":["../../src/common/api/worker/Compression.ts"],"sourcesContent":["/**\n * lz4 compression/decompression routines adopted from the node-lz4 library\n * https://github.com/pierrec/node-lz4\n * (which is a port of the original LZ4 library http://www.lz4.org).\n *\n * node-lz4 does a lot of things we don't need and drags Node Buffer and\n * whatnot with it and subsequently weights 103KB.\n *\n * Modified to include auto-resizing of the buffer and slicing of the data.\n */\n\n/*\nCopyright (c) 2012 Pierre Curto\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n */\n\n/**\n * The largest a mail body can be to send. See StringUtils in TutaDb\n */\nexport const UNCOMPRESSED_MAX_SIZE = 1024 * 1024\n\n/**\n * Decode a block. Assumptions: input contains all sequences of a\n * chunk.\n * @param input {Buffer} input data\n * @throws on invalid offset\n * @return {Uint8Array} decoded data\n */\nexport function uncompress(input: Uint8Array): Uint8Array {\n\tconst endIndex = input.length\n\tlet output = new Uint8Array(input.length * 6)\n\tlet j = 0\n\n\t// Process each sequence in the incoming data\n\tfor (let i = 0, n = endIndex; i < n; ) {\n\t\tlet token = input[i++]\n\t\t// Literals\n\t\tlet literals_length = token >> 4\n\n\t\tif (literals_length > 0) {\n\t\t\t// length of literals\n\t\t\tlet l = literals_length + 240\n\n\t\t\twhile (l === 255) {\n\t\t\t\tl = input[i++]\n\t\t\t\tliterals_length += l\n\t\t\t}\n\n\t\t\t// Copy the literals\n\t\t\tlet end = i + literals_length\n\t\t\tconst sizeNeeded = j + (end - i)\n\n\t\t\tif (output.length < sizeNeeded) {\n\t\t\t\tconst newSize = Math.max(output.length * 2, sizeNeeded)\n\t\t\t\tconst newOutput = new Uint8Array(newSize)\n\t\t\t\tnewOutput.set(output)\n\t\t\t\toutput = newOutput\n\t\t\t}\n\n\t\t\twhile (i < end) output[j++] = input[i++]\n\n\t\t\t// End of buffer?\n\t\t\tif (i === n) break // return j\n\t\t}\n\n\t\t// Match copy\n\t\t// 2 bytes offset (little endian)\n\t\tlet offset = input[i++] | (input[i++] << 8)\n\n\t\t// 0 is an invalid offset value\n\t\tif (offset === 0 || offset > j) {\n\t\t\t// was:\n\t\t\t// return -(i - 2)\n\t\t\tthrow new Error(`Invalid offset value. i: ${i}, -(i-2): ${-(i - 2)}`)\n\t\t}\n\n\t\t// length of match copy\n\t\tlet match_length = token & 0xf\n\t\tlet l = match_length + 240\n\n\t\twhile (l === 255) {\n\t\t\tl = input[i++]\n\t\t\tmatch_length += l\n\t\t}\n\n\t\t// Copy the match\n\t\tlet pos = j - offset // position of the match copy in the current output\n\n\t\tlet end = j + match_length + 4 // minmatch = 4\n\n\t\tconst sizeNeeded = end\n\n\t\tif (output.length < sizeNeeded) {\n\t\t\tconst newSize = Math.max(output.length * 2, sizeNeeded)\n\t\t\tconst newOutput = new Uint8Array(newSize)\n\t\t\tnewOutput.set(output)\n\t\t\toutput = newOutput\n\t\t}\n\n\t\twhile (j < end) output[j++] = output[pos++]\n\t}\n\n\treturn output.slice(0, j)\n}\n\nconst MAX_INPUT_SIZE = 0x7e000000\nconst MIN_MATCH = 4\nconst HASH_LOG = 16\nconst HASH_SHIFT = MIN_MATCH * 8 - HASH_LOG\nconst HASH_SIZE = 1 << HASH_LOG\nconst COPY_LENGTH = 8\nconst MF_LIMIT = COPY_LENGTH + MIN_MATCH\nconst SKIP_STRENGTH = 6\nconst ML_BITS = 4\nconst ML_MASK = (1 << ML_BITS) - 1\nconst RUN_BITS = 8 - ML_BITS\nconst RUN_MASK = (1 << RUN_BITS) - 1\nconst HASHER = 2654435761\n\n// CompressBound returns the maximum length of a lz4 block, given it's uncompressed length\nfunction compressBound(isize: number) {\n\treturn isize > MAX_INPUT_SIZE ? 0 : (isize + isize / 255 + 16) | 0\n}\n\nexport function compress(source: Uint8Array): Uint8Array {\n\tif (source.length === 0) return new Uint8Array(0)\n\tconst dest = new Uint8Array(compressBound(source.length))\n\t// V8 optimization: non sparse array with integers\n\tconst hashTable = new Array(HASH_SIZE).fill(0)\n\tlet sourcePos = 0\n\tlet destPos = 0\n\tlet anchor = 0\n\tlet step = 1\n\tlet findMatchAttempts = (1 << SKIP_STRENGTH) + 3\n\tconst srcLength = source.length - MF_LIMIT\n\n\twhile (sourcePos + MIN_MATCH < srcLength) {\n\t\t// Find a match\n\t\t// min match of 4 bytes aka sequence\n\t\tconst sequenceLowBits = (source[sourcePos + 1] << 8) | source[sourcePos]\n\t\tconst sequenceHighBits = (source[sourcePos + 3] << 8) | source[sourcePos + 2]\n\t\t// compute hash for the current sequence\n\t\tconst hash = Math.imul(sequenceLowBits | (sequenceHighBits << 16), HASHER) >>> HASH_SHIFT\n\t\t// get the position of the sequence matching the hash\n\t\t// NB. since 2 different sequences may have the same hash\n\t\t// it is double-checked below\n\t\t// do -1 to distinguish between initialized and uninitialized values\n\t\tlet ref = hashTable[hash] - 1\n\t\t// save position of current sequence in hash table\n\t\thashTable[hash] = sourcePos + 1\n\n\t\t// first reference or within 64k limit or current sequence !== hashed one: no match\n\t\tif (\n\t\t\tref < 0 ||\n\t\t\t(sourcePos - ref) >>> 16 > 0 ||\n\t\t\t((source[ref + 3] << 8) | source[ref + 2]) != sequenceHighBits ||\n\t\t\t((source[ref + 1] << 8) | source[ref]) != sequenceLowBits\n\t\t) {\n\t\t\t// increase step if nothing found within limit\n\t\t\tstep = findMatchAttempts++ >> SKIP_STRENGTH\n\t\t\tsourcePos += step\n\t\t\tcontinue\n\t\t}\n\n\t\tfindMatchAttempts = (1 << SKIP_STRENGTH) + 3\n\t\t// got a match\n\t\tconst literals_length = sourcePos - anchor\n\t\tconst offset = sourcePos - ref\n\t\t// MIN_MATCH already verified\n\t\tsourcePos += MIN_MATCH\n\t\tref += MIN_MATCH\n\t\t// move to the end of the match (>=MIN_MATCH)\n\t\tlet match_length = sourcePos\n\n\t\twhile (sourcePos < srcLength && source[sourcePos] == source[ref]) {\n\t\t\tsourcePos++\n\t\t\tref++\n\t\t}\n\n\t\t// match length\n\t\tmatch_length = sourcePos - match_length\n\t\t// token\n\t\tconst token = match_length < ML_MASK ? match_length : ML_MASK\n\n\t\t// encode literals length\n\t\tif (literals_length >= RUN_MASK) {\n\t\t\tlet len\n\t\t\t// add match length to the token\n\t\t\tdest[destPos++] = (RUN_MASK << ML_BITS) + token\n\n\t\t\tfor (len = literals_length - RUN_MASK; len > 254; len -= 255) {\n\t\t\t\tdest[destPos++] = 255\n\t\t\t}\n\n\t\t\tdest[destPos++] = len\n\t\t} else {\n\t\t\t// add match length to the token\n\t\t\tdest[destPos++] = (literals_length << ML_BITS) + token\n\t\t}\n\n\t\t// write literals\n\t\tfor (let i = 0; i < literals_length; i++) {\n\t\t\tdest[destPos++] = source[anchor + i]\n\t\t}\n\n\t\t// encode offset\n\t\tdest[destPos++] = offset\n\t\tdest[destPos++] = offset >> 8\n\n\t\t// encode match length\n\t\tif (match_length >= ML_MASK) {\n\t\t\tmatch_length -= ML_MASK\n\n\t\t\twhile (match_length >= 255) {\n\t\t\t\tmatch_length -= 255\n\t\t\t\tdest[destPos++] = 255\n\t\t\t}\n\n\t\t\tdest[destPos++] = match_length\n\t\t}\n\n\t\tanchor = sourcePos\n\t}\n\n\t// Write last literals\n\t// encode literals length\n\tconst literals_length = source.length - anchor\n\n\tif (literals_length >= RUN_MASK) {\n\t\tlet ln = literals_length - RUN_MASK\n\t\t// add match length to the token\n\t\tdest[destPos++] = RUN_MASK << ML_BITS\n\n\t\twhile (ln > 254) {\n\t\t\tdest[destPos++] = 255\n\t\t\tln -= 255\n\t\t}\n\n\t\tdest[destPos++] = ln\n\t} else {\n\t\t// add match length to the token\n\t\tdest[destPos++] = literals_length << ML_BITS\n\t}\n\n\t// write literals\n\tsourcePos = anchor\n\n\twhile (sourcePos < source.length) {\n\t\tdest[destPos++] = source[sourcePos++]\n\t}\n\n\treturn dest.slice(0, destPos)\n}\n\nexport class zCompressionError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(message)\n\t}\n}\n"],"mappings":"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"}