{"version":3,"file":"DesktopNotifier-BR7GuUWK.js","names":["tray: DesktopTray","notificationFactory: ElectronNotificationFactory","delay: number","props: { title: string; body?: string; icon?: NativeImage }","title: string","message: string","id: string","onClick: (arg0: NotificationResult) => void","userId: string | null","w: ApplicationWindow"],"sources":["../../src/common/desktop/DesktopNotifier.ts"],"sourcesContent":["import type { NativeImage } from \"electron\"\nimport type { DesktopTray } from \"./tray/DesktopTray\"\nimport type { ApplicationWindow } from \"./ApplicationWindow\"\nimport type { ElectronNotificationFactory } from \"./NotificatonFactory\"\n\nexport const enum NotificationResult {\n\tClick = \"click\",\n\tClose = \"close\",\n}\n\nexport class DesktopNotifier {\n\t_tray: DesktopTray\n\t_canShow: boolean = false\n\tpendingNotifications: Array<(...args: Array<any>) => any> = []\n\t_notificationCloseFunctions: { [userId in string]?: () => void } = {}\n\t_notificationFactory: ElectronNotificationFactory\n\n\tconstructor(tray: DesktopTray, notificationFactory: ElectronNotificationFactory) {\n\t\tthis._tray = tray\n\t\tthis._notificationFactory = notificationFactory\n\t}\n\n\t/**\n\t * signal that notifications can now be shown. also start showing notifications that came\n\t * in before this point\n\t */\n\tstart(delay: number): void {\n\t\tsetTimeout(() => {\n\t\t\tthis._canShow = true\n\n\t\t\twhile (this.pendingNotifications.length > 0) {\n\t\t\t\tthis.pendingNotifications.shift()?.()\n\t\t\t}\n\t\t}, delay)\n\t}\n\n\tisAvailable(): boolean {\n\t\treturn this._notificationFactory.isSupported()\n\t}\n\n\t/**\n\t * Shows a simple Desktop Notification to the user, once.\n\t * @param props.title title of the notification\n\t * @param props.body body message. keep to less than 200 bytes for maximum compatibility.\n\t * @param props.clickHandler Called when the user clicks the notification\n\t * @param props.closeHandler Called when the notification was closed (by timeout or user action).\n\t */\n\tasync showOneShot(props: { title: string; body?: string; icon?: NativeImage }): Promise<NotificationResult> {\n\t\tconst withIcon = {\n\t\t\ttitle: props.title,\n\t\t\tbody: props.body,\n\t\t\ticon: props.icon || (await this._tray.getAppIcon()),\n\t\t}\n\n\t\tif (!this.isAvailable()) {\n\t\t\treturn Promise.reject()\n\t\t}\n\n\t\treturn this._canShow\n\t\t\t? new Promise((resolve) => this._notificationFactory.makeNotification(withIcon, (res) => resolve(res)))\n\t\t\t: new Promise((resolve) =>\n\t\t\t\t\tthis.pendingNotifications.push(() => {\n\t\t\t\t\t\tthis._notificationFactory.makeNotification(withIcon, (res) => resolve(res))\n\t\t\t\t\t}),\n\t\t\t  )\n\t}\n\n\tsubmitGroupedNotification(title: string, message: string, id: string, onClick: (arg0: NotificationResult) => void): void {\n\t\tif (\"function\" === typeof this._notificationCloseFunctions[id]) {\n\t\t\t// close previous notification for this id\n\t\t\tthis._notificationCloseFunctions[id]?.()\n\t\t}\n\n\t\tconst showIt = async () => {\n\t\t\tif (!this.isAvailable()) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis._notificationCloseFunctions[id] = this._notificationFactory.makeNotification(\n\t\t\t\t{\n\t\t\t\t\ttitle: title,\n\t\t\t\t\tbody: message,\n\t\t\t\t\ticon: await this._tray.getAppIcon(),\n\t\t\t\t},\n\t\t\t\tonClick,\n\t\t\t)\n\n\t\t\tthis._tray.setBadge()\n\n\t\t\tthis._tray.update(this)\n\t\t}\n\n\t\tif (this._canShow) {\n\t\t\tshowIt()\n\t\t} else {\n\t\t\tthis.pendingNotifications.push(showIt)\n\t\t}\n\t}\n\n\tresolveGroupedNotification(userId: string | null) {\n\t\tif (userId && \"function\" === typeof this._notificationCloseFunctions[userId]) {\n\t\t\tthis._notificationCloseFunctions[userId]?.()\n\n\t\t\tthis._tray.update(this)\n\n\t\t\tdelete this._notificationCloseFunctions[userId]\n\t\t}\n\t}\n\n\thasNotificationsForWindow(w: ApplicationWindow): boolean {\n\t\tconst userId = w.getUserId()\n\t\treturn userId != null && this.hasNotificationForId(userId)\n\t}\n\n\thasNotificationForId(id: string): boolean {\n\t\treturn \"function\" === typeof this._notificationCloseFunctions[id]\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKkB,oDAAX;AACN;AACA;;AACA;IAEY,kBAAN,MAAsB;CAC5B;CACA,WAAoB;CACpB,uBAA4D,CAAE;CAC9D,8BAAmE,CAAE;CACrE;CAEA,YAAYA,MAAmBC,qBAAkD;AAChF,OAAK,QAAQ;AACb,OAAK,uBAAuB;CAC5B;;;;;CAMD,MAAMC,OAAqB;AAC1B,aAAW,MAAM;AAChB,QAAK,WAAW;AAEhB,UAAO,KAAK,qBAAqB,SAAS,EACzC,MAAK,qBAAqB,OAAO,IAAI;EAEtC,GAAE,MAAM;CACT;CAED,cAAuB;AACtB,SAAO,KAAK,qBAAqB,aAAa;CAC9C;;;;;;;;CASD,MAAM,YAAYC,OAA0F;EAC3G,MAAM,WAAW;GAChB,OAAO,MAAM;GACb,MAAM,MAAM;GACZ,MAAM,MAAM,QAAS,MAAM,KAAK,MAAM,YAAY;EAClD;AAED,OAAK,KAAK,aAAa,CACtB,QAAO,QAAQ,QAAQ;AAGxB,SAAO,KAAK,WACT,IAAI,QAAQ,CAAC,YAAY,KAAK,qBAAqB,iBAAiB,UAAU,CAAC,QAAQ,QAAQ,IAAI,CAAC,IACpG,IAAI,QAAQ,CAAC,YACb,KAAK,qBAAqB,KAAK,MAAM;AACpC,QAAK,qBAAqB,iBAAiB,UAAU,CAAC,QAAQ,QAAQ,IAAI,CAAC;EAC3E,EAAC;CAEL;CAED,0BAA0BC,OAAeC,SAAiBC,IAAYC,SAAmD;AACxH,MAAI,sBAAsB,KAAK,4BAA4B,IAE1D,MAAK,4BAA4B,OAAO;EAGzC,MAAM,SAAS,YAAY;AAC1B,QAAK,KAAK,aAAa,CACtB;AAGD,QAAK,4BAA4B,MAAM,KAAK,qBAAqB,iBAChE;IACQ;IACP,MAAM;IACN,MAAM,MAAM,KAAK,MAAM,YAAY;GACnC,GACD,QACA;AAED,QAAK,MAAM,UAAU;AAErB,QAAK,MAAM,OAAO,KAAK;EACvB;AAED,MAAI,KAAK,SACR,SAAQ;IAER,MAAK,qBAAqB,KAAK,OAAO;CAEvC;CAED,2BAA2BC,QAAuB;AACjD,MAAI,UAAU,sBAAsB,KAAK,4BAA4B,SAAS;AAC7E,QAAK,4BAA4B,WAAW;AAE5C,QAAK,MAAM,OAAO,KAAK;AAEvB,UAAO,KAAK,4BAA4B;EACxC;CACD;CAED,0BAA0BC,GAA+B;EACxD,MAAM,SAAS,EAAE,WAAW;AAC5B,SAAO,UAAU,QAAQ,KAAK,qBAAqB,OAAO;CAC1D;CAED,qBAAqBH,IAAqB;AACzC,SAAO,sBAAsB,KAAK,4BAA4B;CAC9D;AACD"}