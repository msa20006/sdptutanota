{"version":3,"file":"Deflater-VR1UiLhC.js","names":["regularFontWidths: number[]","boldFontWidths: number[]","input: ArrayBuffer","output: Array<any>"],"sources":["../../src/common/api/worker/pdf/PdfConstants.ts","../../src/common/api/worker/pdf/Deflater.ts"],"sourcesContent":["export enum PdfStreamEncoding {\n\tNONE = \"NONE\",\n\tFLATE = \"/FlateDecode\",\n\tDCT = \"/DCTDecode\",\n}\n\nexport interface PdfObjectRef {\n\trefId: string\n}\n\nexport type PdfDictValue = string | PdfObjectRef | PdfDictValue[] | Map<string, PdfDictValue>\nexport const NEW_LINE = \"\\n\"\nexport const GENERATION_NUMBER = \"0\"\n\n// Widths of the glyphs in each font. The unit is 1/1000 of a PostScript point. Array is in unicode order starting with the glyph at 0x20 (Space character) and ending at 0xff\n// To (re)generate these width arrays, use the scripts provided in the tuta docs\nexport const regularFontWidths: number[] = [\n\t200, 289, 426, 497, 497, 824, 609, 249, 303, 303, 418, 497, 249, 311, 249, 350, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 249, 249, 497, 497, 497,\n\t425, 847, 544, 588, 571, 615, 527, 494, 617, 652, 263, 480, 579, 486, 727, 647, 664, 566, 664, 569, 534, 536, 645, 515, 786, 513, 476, 539, 303, 350, 303,\n\t497, 500, 542, 504, 553, 456, 555, 496, 292, 504, 544, 246, 247, 495, 255, 829, 547, 542, 555, 555, 347, 419, 338, 544, 467, 719, 446, 467, 425, 303, 241,\n\t303, 497, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,\n\t1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 200, 289, 497, 497, 497, 497, 241, 497, 542, 744, 345, 429, 497, 311, 423, 542, 331, 497, 367, 367,\n\t542, 562, 560, 249, 542, 367, 365, 429, 781, 808, 796, 425, 544, 544, 544, 544, 544, 544, 822, 571, 527, 527, 527, 527, 263, 263, 263, 263, 639, 647, 664,\n\t664, 664, 664, 664, 497, 664, 645, 645, 645, 645, 476, 583, 576, 504, 504, 504, 504, 504, 504, 778, 456, 496, 496, 496, 496, 246, 246, 246, 246, 544, 547,\n\t542, 542, 542, 542, 542, 497, 542, 544, 544, 544, 544, 467, 555, 467,\n]\nexport const boldFontWidths: number[] = [\n\t200, 340, 537, 528, 528, 857, 667, 300, 344, 344, 457, 528, 300, 332, 300, 339, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 300, 300, 528, 528, 528,\n\t463, 902, 573, 605, 582, 635, 548, 524, 638, 674, 301, 509, 614, 518, 762, 665, 684, 596, 684, 613, 556, 556, 665, 556, 813, 567, 525, 541, 344, 339, 344,\n\t528, 500, 555, 527, 573, 467, 573, 518, 341, 534, 571, 276, 278, 548, 286, 857, 572, 555, 573, 573, 398, 443, 383, 568, 523, 776, 514, 521, 460, 344, 268,\n\t344, 528, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,\n\t1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 200, 340, 528, 528, 528, 528, 268, 528, 555, 750, 359, 480, 528, 332, 462, 555, 365, 528, 376, 376,\n\t555, 594, 636, 300, 555, 376, 373, 480, 809, 846, 818, 463, 573, 573, 573, 573, 573, 573, 845, 582, 548, 548, 548, 548, 301, 301, 301, 301, 657, 665, 684,\n\t684, 684, 684, 684, 528, 684, 665, 665, 665, 665, 525, 617, 632, 527, 527, 527, 527, 527, 527, 781, 467, 518, 518, 518, 518, 276, 276, 276, 276, 558, 572,\n\t555, 555, 555, 555, 555, 528, 555, 568, 568, 568, 568, 521, 573, 521,\n]\n\n/**\n * All PDF documents require \"default objects\" which define many basic aspects for PDF. These objects are defined here as constants\n */\nexport const PDF_DEFAULT_OBJECTS = Object.freeze([\n\tObject.freeze({\n\t\t// Catalog object. Acts as starting object / entry point\n\t\trefId: \"CATALOG\",\n\t\tdictionary: new Map<string, PdfDictValue>([\n\t\t\t[\"Type\", \"/Catalog\"],\n\t\t\t[\"Pages\", { refId: \"PAGES\" }],\n\t\t\t[\"PageLayout\", \"/SinglePage\"],\n\t\t\t[\"Metadata\", { refId: \"METADATA\" }],\n\t\t\t[\"MarkInfo\", \"<< /Marked true >>\"],\n\t\t\t[\"OutputIntents\", [{ refId: \"OUTPUT_INTENT\" }]],\n\t\t\t[\"StructTreeRoot\", { refId: \"STRUCT_TREE_ROOT\" }],\n\t\t]),\n\t}),\n\tObject.freeze({\n\t\t// Object specifying how the PDF should be rendered. Required for PDF/A\n\t\trefId: \"OUTPUT_INTENT\",\n\t\tdictionary: new Map<string, PdfDictValue>([\n\t\t\t[\"Type\", \"/OutputIntent\"],\n\t\t\t[\"S\", \"/GTS_PDFA1\"],\n\t\t\t[\"OutputConditionIdentifier\", \"(sRGB)\"],\n\t\t\t[\"Info\", \"(sRGB)\"],\n\t\t\t[\"DestOutputProfile\", { refId: \"DEST_OUTPUT_PROFILE\" }],\n\t\t]),\n\t}),\n\tObject.freeze({\n\t\t// Object specifying the structure of the PDF for accessibility. Required for PDF/A\n\t\trefId: \"STRUCT_TREE_ROOT\",\n\t\tdictionary: new Map<string, PdfDictValue>([\n\t\t\t[\"Type\", \"/StructTreeRoot\"],\n\t\t\t[\"K\", \"[ null ]\"],\n\t\t]),\n\t}),\n\tObject.freeze({\n\t\t// Resources object. Keeps references to all used resources, i.e. fonts and images.\n\t\trefId: \"RESOURCES\",\n\t\tdictionary: new Map<string, PdfDictValue>([\n\t\t\t[\"ProcSet\", \"[/PDF/Text]\"],\n\t\t\t[\n\t\t\t\t\"XObject\",\n\t\t\t\tnew Map<string, PdfDictValue>([\n\t\t\t\t\t[\"Im1\", { refId: \"IMG_TUTA_LOGO\" }],\n\t\t\t\t\t[\"Im2\", { refId: \"IMG_ADDRESS\" }],\n\t\t\t\t]),\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"Font\",\n\t\t\t\tnew Map<string, PdfObjectRef>([\n\t\t\t\t\t[\"F1\", { refId: \"FONT_REGULAR\" }],\n\t\t\t\t\t[\"F2\", { refId: \"FONT_BOLD\" }],\n\t\t\t\t\t[\"F3\", { refId: \"FONT_INVISIBLE_CID\" }],\n\t\t\t\t]),\n\t\t\t],\n\t\t]),\n\t}),\n\tObject.freeze({\n\t\t// Regular font\n\t\trefId: \"FONT_REGULAR\",\n\t\tdictionary: new Map<string, PdfDictValue>([\n\t\t\t[\"Type\", \"/Font\"],\n\t\t\t[\"Subtype\", \"/TrueType\"],\n\t\t\t[\"FontDescriptor\", { refId: \"FONT_REGULAR_DESCRIPTOR\" }],\n\t\t\t[\"Name\", \"/F1\"],\n\t\t\t[\"BaseFont\", \"/SourceSans3-Regular\"],\n\t\t\t[\"Encoding\", \"/WinAnsiEncoding\"],\n\t\t\t[\"FirstChar\", \"32\"],\n\t\t\t[\"LastChar\", \"255\"],\n\t\t\t[\"Widths\", regularFontWidths.map((width) => width.toString())],\n\t\t]),\n\t}),\n\tObject.freeze({\n\t\trefId: \"FONT_REGULAR_DESCRIPTOR\",\n\t\tdictionary: new Map<string, PdfDictValue>([\n\t\t\t[\"Type\", \"/FontDescriptor\"],\n\t\t\t[\"FontName\", \"/SourceSans3-Regular\"],\n\t\t\t[\"FontFile2\", { refId: \"FONT_REGULAR_FILE\" }],\n\t\t\t[\"Subtype\", \"/TrueType\"],\n\t\t\t[\"Flags\", \"64\"],\n\t\t]),\n\t}),\n\tObject.freeze({\n\t\t// Bold font\n\t\trefId: \"FONT_BOLD\",\n\t\tdictionary: new Map<string, PdfDictValue>([\n\t\t\t[\"Type\", \"/Font\"],\n\t\t\t[\"Subtype\", \"/TrueType\"],\n\t\t\t[\"FontDescriptor\", { refId: \"FONT_BOLD_DESCRIPTOR\" }],\n\t\t\t[\"Name\", \"/F2\"],\n\t\t\t[\"BaseFont\", \"/SourceSans3-Bold\"],\n\t\t\t[\"Encoding\", \"/WinAnsiEncoding\"],\n\t\t\t[\"FirstChar\", \"32\"],\n\t\t\t[\"LastChar\", \"255\"],\n\t\t\t[\"Widths\", boldFontWidths.map((width) => width.toString())],\n\t\t]),\n\t}),\n\tObject.freeze({\n\t\trefId: \"FONT_BOLD_DESCRIPTOR\",\n\t\tdictionary: new Map<string, PdfDictValue>([\n\t\t\t[\"Type\", \"/FontDescriptor\"],\n\t\t\t[\"FontName\", \"/SourceSans3-Bold\"],\n\t\t\t[\"FontFile2\", { refId: \"FONT_BOLD_FILE\" }],\n\t\t\t[\"Subtype\", \"/TrueType\"],\n\t\t\t[\"Flags\", \"64\"],\n\t\t]),\n\t}),\n\t// Invisible font for the purpose of writing full UTF8, selectable ghost text.\n\t// We use external Helvetica as a standard PDF font to try to get as much compatibility as possible since external fonts are very unsafe to use.\n\tObject.freeze({\n\t\trefId: \"FONT_INVISIBLE_CID\",\n\t\tdictionary: new Map<string, PdfDictValue>([\n\t\t\t[\"Type\", \"/Font\"],\n\t\t\t[\"BaseFont\", \"/Helvetica\"],\n\t\t\t[\"Subtype\", \"/Type0\"],\n\t\t\t[\"Encoding\", \"/Identity-H\"],\n\t\t\t[\"DescendantFonts\", [{ refId: \"FONT_INVISIBLE_CID_DESCENDANT\" }]],\n\t\t\t[\"ToUnicode\", { refId: \"CMAP\" }],\n\t\t]),\n\t}),\n\tObject.freeze({\n\t\trefId: \"FONT_INVISIBLE_CID_DESCENDANT\",\n\t\tdictionary: new Map<string, PdfDictValue>([\n\t\t\t[\"Type\", \"/Font\"],\n\t\t\t[\"BaseFont\", \"/Helvetica\"],\n\t\t\t[\"Subtype\", \"/CIDFontType2\"],\n\t\t\t[\"CIDToGIDMap\", \"/Identity\"],\n\t\t\t[\"FontDescriptor\", { refId: \"FONT_INVISIBLE_CID_DESCRIPTOR\" }],\n\t\t\t[\"CIDSystemInfo\", \"<< /Registry (Adobe) /Ordering (Identity) /Supplement 0>>\"],\n\t\t\t[\"DW\", \"1000\"],\n\t\t]),\n\t}),\n\tObject.freeze({\n\t\trefId: \"FONT_INVISIBLE_CID_DESCRIPTOR\",\n\t\tdictionary: new Map<string, PdfDictValue>([\n\t\t\t[\"Type\", \"/FontDescriptor\"],\n\t\t\t[\"FontName\", \"/Helvetica\"],\n\t\t\t[\"Subtype\", \"/TrueType\"],\n\t\t\t[\"Flags\", \"64\"],\n\t\t]),\n\t}),\n])\n\n// language=XML\nexport const PDF_METADATA = `<?xpacket begin=\"?\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n\t<rdf:Description xmlns:xmp=\"http://ns.adobe.com/xap/1.0/\"\n\t\t\t\t\t xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\"\n\t\t\t\t\t xmlns:pdfaid=\"http://www.aiim.org/pdfa/ns/id/\" rdf:about=\"\">\n\t\t<xmp:CreateDate>{slotCreateDate}</xmp:CreateDate>\n\t\t<xmp:ModifyDate>{slotModifyDate}</xmp:ModifyDate>\n\t\t<pdfaid:conformance>A</pdfaid:conformance>\n\t\t<pdfaid:part>1</pdfaid:part>\n\t\t<pdf:Producer>Tuta PDF Generator</pdf:Producer>\n\t</rdf:Description>\n</rdf:RDF><?xpacket end=\"w\"?>`\n","import { downcast } from \"@tutao/tutanota-utils\"\n\nexport class Deflater {\n\tconstructor() {}\n\n\tasync deflate(input: ArrayBuffer): Promise<Uint8Array> {\n\t\t// see https://wicg.github.io/compression/#example-deflate-compress\n\t\tconst cs = new CompressionStream(\"deflate\")\n\t\tconst writer = cs.writable.getWriter()\n\t\twriter.write(input)\n\t\twriter.close()\n\t\tconst output: Array<any> = []\n\t\tconst reader = cs.readable.getReader()\n\t\tlet totalSize = 0\n\t\twhile (true) {\n\t\t\tconst { value, done } = await reader.read()\n\t\t\tif (done) break\n\t\t\toutput.push(downcast(value))\n\t\t\ttotalSize += value.byteLength\n\t\t}\n\t\tconst concatenated = new Uint8Array(totalSize)\n\t\tlet offset = 0\n\t\tfor (const array of output) {\n\t\t\tconcatenated.set(array, offset)\n\t\t\toffset += array.byteLength\n\t\t}\n\t\treturn concatenated\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAY,kDAAL;AACN;AACA;AACA;;AACA;MAOY,WAAW;MACX,oBAAoB;MAIpBA,oBAA8B;CAC1C;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACtJ;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACtJ;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACtJ;CAAK;CAAK;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CACpJ;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACrJ;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACtJ;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACtJ;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;AACjE;MACYC,iBAA2B;CACvC;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACtJ;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACtJ;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACtJ;CAAK;CAAK;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CACpJ;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAM;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACrJ;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACtJ;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CACtJ;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;CAAK;AACjE;MAKY,sBAAsB,OAAO,OAAO;CAChD,OAAO,OAAO;EAEb,OAAO;EACP,YAAY,IAAI,IAA0B;GACzC,CAAC,QAAQ,UAAW;GACpB,CAAC,SAAS,EAAE,OAAO,QAAS,CAAC;GAC7B,CAAC,cAAc,aAAc;GAC7B,CAAC,YAAY,EAAE,OAAO,WAAY,CAAC;GACnC,CAAC,YAAY,oBAAqB;GAClC,CAAC,iBAAiB,CAAC,EAAE,OAAO,gBAAiB,CAAC,CAAC;GAC/C,CAAC,kBAAkB,EAAE,OAAO,mBAAoB,CAAC;EACjD;CACD,EAAC;CACF,OAAO,OAAO;EAEb,OAAO;EACP,YAAY,IAAI,IAA0B;GACzC,CAAC,QAAQ,eAAgB;GACzB,CAAC,KAAK,YAAa;GACnB,CAAC,6BAA6B,QAAS;GACvC,CAAC,QAAQ,QAAS;GAClB,CAAC,qBAAqB,EAAE,OAAO,sBAAuB,CAAC;EACvD;CACD,EAAC;CACF,OAAO,OAAO;EAEb,OAAO;EACP,YAAY,IAAI,IAA0B,CACzC,CAAC,QAAQ,iBAAkB,GAC3B,CAAC,KAAK,UAAW,CACjB;CACD,EAAC;CACF,OAAO,OAAO;EAEb,OAAO;EACP,YAAY,IAAI,IAA0B;GACzC,CAAC,WAAW,aAAc;GAC1B,CACC,WACA,IAAI,IAA0B,CAC7B,CAAC,OAAO,EAAE,OAAO,gBAAiB,CAAC,GACnC,CAAC,OAAO,EAAE,OAAO,cAAe,CAAC,CACjC,EACD;GACD,CACC,QACA,IAAI,IAA0B;IAC7B,CAAC,MAAM,EAAE,OAAO,eAAgB,CAAC;IACjC,CAAC,MAAM,EAAE,OAAO,YAAa,CAAC;IAC9B,CAAC,MAAM,EAAE,OAAO,qBAAsB,CAAC;GACvC,EACD;EACD;CACD,EAAC;CACF,OAAO,OAAO;EAEb,OAAO;EACP,YAAY,IAAI,IAA0B;GACzC,CAAC,QAAQ,OAAQ;GACjB,CAAC,WAAW,WAAY;GACxB,CAAC,kBAAkB,EAAE,OAAO,0BAA2B,CAAC;GACxD,CAAC,QAAQ,KAAM;GACf,CAAC,YAAY,sBAAuB;GACpC,CAAC,YAAY,kBAAmB;GAChC,CAAC,aAAa,IAAK;GACnB,CAAC,YAAY,KAAM;GACnB,CAAC,UAAU,kBAAkB,IAAI,CAAC,UAAU,MAAM,UAAU,CAAC,AAAC;EAC9D;CACD,EAAC;CACF,OAAO,OAAO;EACb,OAAO;EACP,YAAY,IAAI,IAA0B;GACzC,CAAC,QAAQ,iBAAkB;GAC3B,CAAC,YAAY,sBAAuB;GACpC,CAAC,aAAa,EAAE,OAAO,oBAAqB,CAAC;GAC7C,CAAC,WAAW,WAAY;GACxB,CAAC,SAAS,IAAK;EACf;CACD,EAAC;CACF,OAAO,OAAO;EAEb,OAAO;EACP,YAAY,IAAI,IAA0B;GACzC,CAAC,QAAQ,OAAQ;GACjB,CAAC,WAAW,WAAY;GACxB,CAAC,kBAAkB,EAAE,OAAO,uBAAwB,CAAC;GACrD,CAAC,QAAQ,KAAM;GACf,CAAC,YAAY,mBAAoB;GACjC,CAAC,YAAY,kBAAmB;GAChC,CAAC,aAAa,IAAK;GACnB,CAAC,YAAY,KAAM;GACnB,CAAC,UAAU,eAAe,IAAI,CAAC,UAAU,MAAM,UAAU,CAAC,AAAC;EAC3D;CACD,EAAC;CACF,OAAO,OAAO;EACb,OAAO;EACP,YAAY,IAAI,IAA0B;GACzC,CAAC,QAAQ,iBAAkB;GAC3B,CAAC,YAAY,mBAAoB;GACjC,CAAC,aAAa,EAAE,OAAO,iBAAkB,CAAC;GAC1C,CAAC,WAAW,WAAY;GACxB,CAAC,SAAS,IAAK;EACf;CACD,EAAC;CAGF,OAAO,OAAO;EACb,OAAO;EACP,YAAY,IAAI,IAA0B;GACzC,CAAC,QAAQ,OAAQ;GACjB,CAAC,YAAY,YAAa;GAC1B,CAAC,WAAW,QAAS;GACrB,CAAC,YAAY,aAAc;GAC3B,CAAC,mBAAmB,CAAC,EAAE,OAAO,gCAAiC,CAAC,CAAC;GACjE,CAAC,aAAa,EAAE,OAAO,OAAQ,CAAC;EAChC;CACD,EAAC;CACF,OAAO,OAAO;EACb,OAAO;EACP,YAAY,IAAI,IAA0B;GACzC,CAAC,QAAQ,OAAQ;GACjB,CAAC,YAAY,YAAa;GAC1B,CAAC,WAAW,eAAgB;GAC5B,CAAC,eAAe,WAAY;GAC5B,CAAC,kBAAkB,EAAE,OAAO,gCAAiC,CAAC;GAC9D,CAAC,iBAAiB,2DAA4D;GAC9E,CAAC,MAAM,MAAO;EACd;CACD,EAAC;CACF,OAAO,OAAO;EACb,OAAO;EACP,YAAY,IAAI,IAA0B;GACzC,CAAC,QAAQ,iBAAkB;GAC3B,CAAC,YAAY,YAAa;GAC1B,CAAC,WAAW,WAAY;GACxB,CAAC,SAAS,IAAK;EACf;CACD,EAAC;AACF,EAAC;MAGW,gBAAgB;;;;;;;;;;;;;;;ICpLhB,WAAN,MAAe;CACrB,cAAc,CAAE;CAEhB,MAAM,QAAQC,OAAyC;EAEtD,MAAM,KAAK,IAAI,kBAAkB;EACjC,MAAM,SAAS,GAAG,SAAS,WAAW;AACtC,SAAO,MAAM,MAAM;AACnB,SAAO,OAAO;EACd,MAAMC,SAAqB,CAAE;EAC7B,MAAM,SAAS,GAAG,SAAS,WAAW;EACtC,IAAI,YAAY;AAChB,SAAO,MAAM;GACZ,MAAM,EAAE,OAAO,MAAM,GAAG,MAAM,OAAO,MAAM;AAC3C,OAAI,KAAM;AACV,UAAO,KAAK,SAAS,MAAM,CAAC;AAC5B,gBAAa,MAAM;EACnB;EACD,MAAM,eAAe,IAAI,WAAW;EACpC,IAAI,SAAS;AACb,OAAK,MAAM,SAAS,QAAQ;AAC3B,gBAAa,IAAI,OAAO,OAAO;AAC/B,aAAU,MAAM;EAChB;AACD,SAAO;CACP;AACD"}