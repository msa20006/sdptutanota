{"version":3,"file":"MailChecks-PhVUoR7f.js","names":["system: FolderSystem","folder: MailFolder","type: MailSetKind","mail: Mail","mailModel: MailModel"],"sources":["../../src/mail-app/mail/model/MailChecks.ts"],"sourcesContent":["//@bundleInto:common\n\nimport { Mail, MailFolder } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { MailModel } from \"./MailModel.js\"\nimport { FolderSystem } from \"../../../common/api/common/mail/FolderSystem.js\"\nimport { MailSetKind } from \"../../../common/api/common/TutanotaConstants.js\"\n\nexport function isSubfolderOfType(system: FolderSystem, folder: MailFolder, type: MailSetKind): boolean {\n\tconst systemFolder = system.getSystemFolderByType(type)\n\treturn systemFolder != null && system.checkFolderForAncestor(folder, systemFolder._id)\n}\n\nexport function isDraft(mail: Mail): boolean {\n\treturn mail.mailDetailsDraft != null\n}\n\nexport async function isMailInSpamOrTrash(mail: Mail, mailModel: MailModel): Promise<boolean> {\n\tconst folders = await mailModel.getMailboxFoldersForMail(mail)\n\tconst mailFolder = folders?.getFolderByMail(mail)\n\tif (folders && mailFolder) {\n\t\treturn isSpamOrTrashFolder(folders, mailFolder)\n\t} else {\n\t\treturn false\n\t}\n}\n\n/**\n * Returns true if given folder is the {@link MailFolderType.SPAM} or {@link MailFolderType.TRASH} folder, or a descendant of those folders.\n */\nexport function isSpamOrTrashFolder(system: FolderSystem, folder: MailFolder): boolean {\n\t// not using isOfTypeOrSubfolderOf because checking the type first is cheaper\n\treturn (\n\t\tfolder.folderType === MailSetKind.TRASH ||\n\t\tfolder.folderType === MailSetKind.SPAM ||\n\t\tisSubfolderOfType(system, folder, MailSetKind.TRASH) ||\n\t\tisSubfolderOfType(system, folder, MailSetKind.SPAM)\n\t)\n}\n\nexport function isOfTypeOrSubfolderOf(system: FolderSystem, folder: MailFolder, type: MailSetKind): boolean {\n\treturn folder.folderType === type || isSubfolderOfType(system, folder, type)\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOO,SAAS,kBAAkBA,QAAsBC,QAAoBC,MAA4B;CACvG,MAAM,eAAe,OAAO,sBAAsB,KAAK;AACvD,QAAO,gBAAgB,QAAQ,OAAO,uBAAuB,QAAQ,aAAa,IAAI;AACtF;AAEM,SAAS,QAAQC,MAAqB;AAC5C,QAAO,KAAK,oBAAoB;AAChC;AAEM,eAAe,oBAAoBA,MAAYC,WAAwC;CAC7F,MAAM,UAAU,MAAM,UAAU,yBAAyB,KAAK;CAC9D,MAAM,aAAa,SAAS,gBAAgB,KAAK;AACjD,KAAI,WAAW,WACd,QAAO,oBAAoB,SAAS,WAAW;IAE/C,QAAO;AAER;AAKM,SAAS,oBAAoBJ,QAAsBC,QAA6B;AAEtF,QACC,OAAO,eAAe,YAAY,SAClC,OAAO,eAAe,YAAY,QAClC,kBAAkB,QAAQ,QAAQ,YAAY,MAAM,IACpD,kBAAkB,QAAQ,QAAQ,YAAY,KAAK;AAEpD;AAEM,SAAS,sBAAsBD,QAAsBC,QAAoBC,MAA4B;AAC3G,QAAO,OAAO,eAAe,QAAQ,kBAAkB,QAAQ,QAAQ,KAAK;AAC5E"}