{"version":3,"file":"FormatValidator-2BBermUe.js","names":["string: string","strictUserName: boolean","domainName: string","value: string","input: string"],"sources":["../../src/common/misc/FormatValidator.ts"],"sourcesContent":["import { startsWith } from \"@tutao/tutanota-utils\"\n\nconst DOMAIN_PART_REGEX = \"[\\\\w\\\\-\\\\+_]+\"\nconst DOMAIN_REGEXP = new RegExp(`^${DOMAIN_PART_REGEX}\\\\.${DOMAIN_PART_REGEX}(\\\\.${DOMAIN_PART_REGEX})*\\\\s*$`)\nconst DOMAIN_OR_TLD_REGEXP = new RegExp(`^(${DOMAIN_PART_REGEX}.)*${DOMAIN_PART_REGEX}$`)\nconst STRICT_USERNAME_MAIL_ADDR_REGEXP = new RegExp(\n\t`^\\\\s*${DOMAIN_PART_REGEX}(\\\\.${DOMAIN_PART_REGEX})*\\\\@${DOMAIN_PART_REGEX}\\\\.${DOMAIN_PART_REGEX}(\\\\.${DOMAIN_PART_REGEX})*\\\\s*$`,\n)\nconst EMAIL_ADDR_REGEXP = new RegExp(`^[^\\\\s\\\\@]+\\\\@${DOMAIN_PART_REGEX}\\\\.${DOMAIN_PART_REGEX}(\\\\.${DOMAIN_PART_REGEX})*\\\\s*$`)\n\n/**\n * Checks if the given string is a valid email address format.\n * @param string The string to check.\n * @param strictUserName If true checks that the part before the @ is not longer than 64 characters and does not contain special characters.\n * @return If the string is an email address.\n */\nexport function isMailAddress(string: string, strictUserName: boolean): boolean {\n\t/* KEEP IN SYNC WITH JAVA VERSION IN PhoneNumberUtils.js (except uppercase) */\n\t// check trailing whitespaces because they are not covered by the following regexp\n\t// allow uppercase addresses in input check, convert them before sending to server.\n\tif (string == null || string !== string.trim()) {\n\t\treturn false\n\t}\n\n\tif (string.indexOf(\"-\") === 0) {\n\t\treturn false\n\t}\n\n\tif (\n\t\tstring.indexOf(\",\") !== -1 ||\n\t\tstring.indexOf(\"(\") !== -1 ||\n\t\tstring.indexOf(\")\") !== -1 ||\n\t\tstring.indexOf(\":\") !== -1 ||\n\t\tstring.indexOf(\";\") !== -1 ||\n\t\tstring.indexOf(\"<\") !== -1 ||\n\t\tstring.indexOf(\">\") !== -1 ||\n\t\tstring.indexOf(\"[\") !== -1 ||\n\t\tstring.indexOf(\"]\") !== -1 ||\n\t\tstring.indexOf(\"\\\\\") !== -1\n\t) {\n\t\treturn false\n\t}\n\n\t// check lengths (see https://tools.ietf.org/html/rfc5321#section-4.5.3)\n\tif (string.length > 254) {\n\t\t// 256 minus \"<\" and \">\" of the path\n\t\treturn false\n\t}\n\n\tif (strictUserName) {\n\t\tif (string.indexOf(\"@\") > 64) {\n\t\t\treturn false\n\t\t}\n\n\t\t// see https://web.archive.org/web/20180813043723/http://ntt.cc/2008/05/10/over-10-useful-javascript-regular-expression-functions-to-improve-your-web-applications-efficiency.html\n\t\treturn STRICT_USERNAME_MAIL_ADDR_REGEXP.test(string)\n\t} else {\n\t\t// see https://web.archive.org/web/20180813043723/http://ntt.cc/2008/05/10/over-10-useful-javascript-regular-expression-functions-to-improve-your-web-applications-efficiency.html\n\t\treturn EMAIL_ADDR_REGEXP.test(string)\n\t}\n}\n\n/**\n * Checks if the given string is a valid domain name.\n * @param {string} domainName The string to check.\n * @return {boolean} If the string is a domain name.\n */\nexport function isDomainName(domainName: string): boolean {\n\tif (domainName == null || domainName !== domainName.trim()) {\n\t\treturn false\n\t}\n\n\tif (startsWith(domainName, \"-\")) {\n\t\treturn false\n\t}\n\n\treturn DOMAIN_REGEXP.test(domainName)\n}\n\nexport function isDomainOrTopLevelDomain(value: string): boolean {\n\tif (startsWith(value, \"-\")) {\n\t\treturn false\n\t}\n\n\t// Repeated words ending with dot and word at the end.\n\t// matches test.com and com but not .com\n\treturn DOMAIN_OR_TLD_REGEXP.test(value)\n}\n\n/**\n * Checks if the value is a regular expression, with or without optional flags.\n * @param value The string to check\n */\nexport function isRegularExpression(value: string): boolean {\n\treturn /^\\/.*\\/$/.test(value) || /^\\/.*\\/(?!.*(.)\\1)[gimsuy]+$/.test(value)\n}\n\n/**\n * Determine whether an input string is a valid credit card number\n * https://en.wikipedia.org/wiki/Luhn_algorithm\n * @param input: a string between 6 and 20 chars long that should contain only digits or spaces\n * @returns {boolean}\n */\nexport function isValidCreditCardNumber(input: string): boolean {\n\tconst cleaned = input.match(/^[0123456789 ]+$/)\n\n\tif (!cleaned || cleaned.length !== 1) {\n\t\treturn false\n\t}\n\n\tconst digits = cleaned[0].split(\"\").filter((c) => !/\\s/.test(c))\n\n\tif (digits.length < 6 || digits.length > 20) {\n\t\treturn false\n\t}\n\n\treturn (\n\t\tdigits\n\t\t\t.reverse()\n\t\t\t.map((num) => Number(num))\n\t\t\t.reduce((acc, cur, idx) => {\n\t\t\t\tconst num = idx % 2 === 0 ? cur : cur * 2 - (cur > 4 ? 9 : 0)\n\t\t\t\treturn acc + num\n\t\t\t}, 0) %\n\t\t\t10 ===\n\t\t0\n\t)\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,oBAAoB;AAC1B,MAAM,gBAAgB,IAAI,QAAQ,GAAG,kBAAkB,KAAK,kBAAkB,MAAM,kBAAkB;AACtG,MAAM,uBAAuB,IAAI,QAAQ,IAAI,kBAAkB,KAAK,kBAAkB;AACtF,MAAM,mCAAmC,IAAI,QAC3C,OAAO,kBAAkB,MAAM,kBAAkB,OAAO,kBAAkB,KAAK,kBAAkB,MAAM,kBAAkB;AAE3H,MAAM,oBAAoB,IAAI,QAAQ,gBAAgB,kBAAkB,KAAK,kBAAkB,MAAM,kBAAkB;AAQhH,SAAS,cAAcA,QAAgBC,gBAAkC;AAI/E,KAAI,UAAU,QAAQ,WAAW,OAAO,MAAM,CAC7C,QAAO;AAGR,KAAI,OAAO,QAAQ,IAAI,KAAK,EAC3B,QAAO;AAGR,KACC,OAAO,QAAQ,IAAI,KAAK,MACxB,OAAO,QAAQ,IAAI,KAAK,MACxB,OAAO,QAAQ,IAAI,KAAK,MACxB,OAAO,QAAQ,IAAI,KAAK,MACxB,OAAO,QAAQ,IAAI,KAAK,MACxB,OAAO,QAAQ,IAAI,KAAK,MACxB,OAAO,QAAQ,IAAI,KAAK,MACxB,OAAO,QAAQ,IAAI,KAAK,MACxB,OAAO,QAAQ,IAAI,KAAK,MACxB,OAAO,QAAQ,KAAK,KAAK,GAEzB,QAAO;AAIR,KAAI,OAAO,SAAS,IAEnB,QAAO;AAGR,KAAI,gBAAgB;AACnB,MAAI,OAAO,QAAQ,IAAI,GAAG,GACzB,QAAO;AAIR,SAAO,iCAAiC,KAAK,OAAO;CACpD,MAEA,QAAO,kBAAkB,KAAK,OAAO;AAEtC;AAOM,SAAS,aAAaC,YAA6B;AACzD,KAAI,cAAc,QAAQ,eAAe,WAAW,MAAM,CACzD,QAAO;AAGR,KAAI,WAAW,YAAY,IAAI,CAC9B,QAAO;AAGR,QAAO,cAAc,KAAK,WAAW;AACrC;AAgBM,SAAS,oBAAoBC,OAAwB;AAC3D,QAAO,WAAW,KAAK,MAAM,IAAI,+BAA+B,KAAK,MAAM;AAC3E;AAQM,SAAS,wBAAwBC,OAAwB;CAC/D,MAAM,UAAU,MAAM,MAAM,mBAAmB;AAE/C,MAAK,WAAW,QAAQ,WAAW,EAClC,QAAO;CAGR,MAAM,SAAS,QAAQ,GAAG,MAAM,GAAG,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,EAAE,CAAC;AAEhE,KAAI,OAAO,SAAS,KAAK,OAAO,SAAS,GACxC,QAAO;AAGR,QACC,OACE,SAAS,CACT,IAAI,CAAC,QAAQ,OAAO,IAAI,CAAC,CACzB,OAAO,CAAC,KAAK,KAAK,QAAQ;EAC1B,MAAM,MAAM,MAAM,MAAM,IAAI,MAAM,MAAM,KAAK,MAAM,IAAI,IAAI;AAC3D,SAAO,MAAM;CACb,GAAE,EAAE,GACL,OACD;AAED"}