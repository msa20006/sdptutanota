{"version":3,"file":"TutaNotificationHandlerTest-B5iQmXAR.js","names":["windowManager: WindowManager","nativeCredentialFacade: NativeCredentialsFacade","sseStorage: SseStorage","notifier: DesktopNotifier","alarmScheduler: NativeAlarmScheduler","alarmStorage: DesktopAlarmStorage","lang: LanguageViewModel","fetch: FetchImpl","appVersion: string","sseInfo: SseInfo","notificationInfo: NotificationInfo","res: NotificationResult","requestedPath: string | null","ni: NotificationInfo","headers: Record<string, string>","mailId: IdTupleWrapper","alarmNotification: EncryptedAlarmNotification","userId: Id","wm: WindowManager","nativeCredentialsFacade: NativeCredentialsFacade","conf: SseStorage","notifier: DesktopNotifier","alarmScheduler: DesktopAlarmScheduler","alarmStorage: DesktopAlarmStorage","lang: LanguageViewModel","fetch: UndiciFetch","handler: TutaNotificationHandler","credentials: UnencryptedCredentials","mailMetadata: MailMetadata","alarmNotification: EncryptedAlarmNotification","template: Partial<SseInfo>"],"sources":["../../src/common/desktop/sse/TutaNotificationHandler.ts","../tests/desktop/sse/TutaNotificationHandlerTest.ts"],"sourcesContent":["import type { WindowManager } from \"../DesktopWindowManager\"\nimport { NativeCredentialsFacade } from \"../../native/common/generatedipc/NativeCredentialsFacade\"\nimport { DesktopNotifier, NotificationResult } from \"../DesktopNotifier\"\nimport { LanguageViewModel } from \"../../misc/LanguageViewModel\"\nimport { IdTupleWrapper, NotificationInfo } from \"../../api/entities/sys/TypeRefs\"\nimport { CredentialEncryptionMode } from \"../../misc/credentials/CredentialEncryptionMode.js\"\nimport { ExtendedNotificationMode } from \"../../native/common/generatedipc/ExtendedNotificationMode\"\nimport { assertNotNull, base64ToBase64Url, neverNull } from \"@tutao/tutanota-utils\"\nimport { log } from \"../DesktopLog\"\nimport tutanotaModelInfo from \"../../api/entities/tutanota/ModelInfo\"\nimport { handleRestError } from \"../../api/common/error/RestError\"\nimport { EncryptedAlarmNotification } from \"../../native/common/EncryptedAlarmNotification\"\nimport { Mail } from \"../../api/entities/tutanota/TypeRefs.js\"\nimport { NativeAlarmScheduler } from \"./DesktopAlarmScheduler.js\"\nimport { DesktopAlarmStorage } from \"./DesktopAlarmStorage.js\"\nimport { SseInfo } from \"./SseInfo.js\"\nimport { SseStorage } from \"./SseStorage.js\"\nimport { FetchImpl } from \"../net/NetAgent\"\n\nconst TAG = \"[notifications]\"\n\nexport type MailMetadata = Pick<Mail, \"sender\" | \"firstRecipient\" | \"_id\">\n\nexport class TutaNotificationHandler {\n\tconstructor(\n\t\tprivate readonly windowManager: WindowManager,\n\t\tprivate readonly nativeCredentialFacade: NativeCredentialsFacade,\n\t\tprivate readonly sseStorage: SseStorage,\n\t\tprivate readonly notifier: DesktopNotifier,\n\t\tprivate readonly alarmScheduler: NativeAlarmScheduler,\n\t\tprivate readonly alarmStorage: DesktopAlarmStorage,\n\t\tprivate readonly lang: LanguageViewModel,\n\t\tprivate readonly fetch: FetchImpl,\n\t\tprivate readonly appVersion: string,\n\t) {}\n\n\tasync onMailNotification(sseInfo: SseInfo, notificationInfo: NotificationInfo) {\n\t\tconst appWindow = this.windowManager.getAll().find((window) => window.getUserId() === notificationInfo.userId)\n\n\t\tif (appWindow && appWindow.isFocused()) {\n\t\t\t// no need for notification if user is looking right at the window\n\t\t\treturn\n\t\t}\n\n\t\t// we can't download the email if we don't have access to credentials\n\t\tconst canShowExtendedNotification =\n\t\t\t(await this.nativeCredentialFacade.getCredentialEncryptionMode()) === CredentialEncryptionMode.DEVICE_LOCK &&\n\t\t\t(await this.sseStorage.getExtendedNotificationConfig(notificationInfo.userId)) !== ExtendedNotificationMode.NoSenderOrSubject\n\t\tif (!canShowExtendedNotification) {\n\t\t\tconst notificationId = notificationInfo.mailId\n\t\t\t\t? `${notificationInfo.mailId.listId},${notificationInfo.mailId?.listElementId}`\n\t\t\t\t: notificationInfo.userId\n\t\t\tthis.notifier.submitGroupedNotification(this.lang.get(\"pushNewMail_msg\"), notificationInfo.mailAddress, notificationId, (res) =>\n\t\t\t\tthis.onMailNotificationClick(res, notificationInfo),\n\t\t\t)\n\t\t\treturn\n\t\t}\n\t\tconst mailMetadata = await this.downloadMailMetadata(sseInfo, notificationInfo)\n\t\tif (mailMetadata == null) return\n\t\tthis.notifier.submitGroupedNotification(mailMetadata.sender.address, mailMetadata.firstRecipient?.address ?? \"\", mailMetadata._id.join(\",\"), (res) =>\n\t\t\tthis.onMailNotificationClick(res, notificationInfo),\n\t\t)\n\t}\n\n\tprivate onMailNotificationClick(res: NotificationResult, notificationInfo: NotificationInfo) {\n\t\tif (res === NotificationResult.Click) {\n\t\t\tlet requestedPath: string | null\n\t\t\tif (notificationInfo.mailId) {\n\t\t\t\tconst mailIdParam = encodeURIComponent(`${notificationInfo.mailId.listId},${notificationInfo.mailId.listElementId}`)\n\t\t\t\trequestedPath = `?mail=${mailIdParam}`\n\t\t\t} else {\n\t\t\t\trequestedPath = null\n\t\t\t}\n\t\t\tthis.windowManager.openMailBox(\n\t\t\t\t{\n\t\t\t\t\tuserId: notificationInfo.userId,\n\t\t\t\t\tmailAddress: notificationInfo.mailAddress,\n\t\t\t\t},\n\t\t\t\trequestedPath,\n\t\t\t)\n\t\t}\n\t}\n\n\tprivate async downloadMailMetadata(sseInfo: SseInfo, ni: NotificationInfo): Promise<MailMetadata | null> {\n\t\tconst url = this.makeMailMetadataUrl(sseInfo, assertNotNull(ni.mailId))\n\n\t\t// decrypt access token\n\t\tconst credentials = await this.nativeCredentialFacade.loadByUserId(ni.userId)\n\t\tif (credentials == null) {\n\t\t\tlog.warn(`Not found credentials to download notification, userId ${ni.userId}`)\n\t\t\treturn null\n\t\t}\n\n\t\tlog.debug(TAG, \"downloading mail notification metadata\")\n\t\tconst headers: Record<string, string> = {\n\t\t\tv: tutanotaModelInfo.version.toString(),\n\t\t\tcv: this.appVersion,\n\t\t\taccessToken: credentials.accessToken,\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await this.fetch(url, { headers })\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow handleRestError(neverNull(response.status), url.toString(), response.headers.get(\"Error-Id\"), null)\n\t\t\t}\n\n\t\t\tconst parsedResponse = await response.json()\n\t\t\treturn parsedResponse as MailMetadata\n\t\t} catch (e) {\n\t\t\tlog.debug(TAG, \"Error fetching mail metadata, \" + (e as Error).message)\n\t\t\treturn null\n\t\t}\n\t}\n\n\tprivate makeMailMetadataUrl(sseInfo: SseInfo, mailId: IdTupleWrapper): URL {\n\t\tconst url = new URL(sseInfo.sseOrigin)\n\t\turl.pathname = `rest/tutanota/mail/${base64ToBase64Url(mailId.listId)}/${base64ToBase64Url(mailId.listElementId)}`\n\t\treturn url\n\t}\n\n\tasync onAlarmNotification(alarmNotification: EncryptedAlarmNotification) {\n\t\tawait this.alarmScheduler.handleAlarmNotification(alarmNotification)\n\t}\n\n\tasync onUserRemoved(userId: Id) {\n\t\tawait this.alarmScheduler.unscheduleAllAlarms(userId)\n\t}\n\n\tasync onLocalDataInvalidated() {\n\t\tawait this.alarmScheduler.unscheduleAllAlarms()\n\t\tawait this.alarmStorage.removePushIdentifierKeys()\n\t\tawait this.windowManager.invalidateAlarms()\n\t}\n}\n","import o from \"@tutao/otest\"\nimport { MailMetadata, TutaNotificationHandler } from \"../../../../src/common/desktop/sse/TutaNotificationHandler.js\"\nimport { WindowManager } from \"../../../../src/common/desktop/DesktopWindowManager.js\"\nimport { NativeCredentialsFacade } from \"../../../../src/common/native/common/generatedipc/NativeCredentialsFacade.js\"\nimport { DesktopNotifier, NotificationResult } from \"../../../../src/common/desktop/DesktopNotifier.js\"\nimport { DesktopAlarmScheduler } from \"../../../../src/common/desktop/sse/DesktopAlarmScheduler.js\"\nimport { DesktopAlarmStorage } from \"../../../../src/common/desktop/sse/DesktopAlarmStorage.js\"\nimport { LanguageViewModel } from \"../../../../src/common/misc/LanguageViewModel.js\"\nimport { fetch as undiciFetch } from \"undici\"\nimport { func, matchers, object, verify, when } from \"testdouble\"\nimport { CredentialEncryptionMode } from \"../../../../src/common/misc/credentials/CredentialEncryptionMode.js\"\nimport { ExtendedNotificationMode } from \"../../../../src/common/native/common/generatedipc/ExtendedNotificationMode.js\"\nimport { createIdTupleWrapper, createNotificationInfo } from \"../../../../src/common/api/entities/sys/TypeRefs.js\"\nimport { createTestEntity, mockFetchRequest } from \"../../TestUtils.js\"\nimport tutanotaModelInfo from \"../../../../src/common/api/entities/tutanota/ModelInfo.js\"\nimport { UnencryptedCredentials } from \"../../../../src/common/native/common/generatedipc/UnencryptedCredentials.js\"\nimport { CredentialType } from \"../../../../src/common/misc/credentials/CredentialType.js\"\nimport { MailAddressTypeRef } from \"../../../../src/common/api/entities/tutanota/TypeRefs.js\"\nimport { EncryptedAlarmNotification } from \"../../../../src/common/native/common/EncryptedAlarmNotification.js\"\nimport { OperationType } from \"../../../../src/common/api/common/TutanotaConstants.js\"\nimport { ApplicationWindow } from \"../../../../src/common/desktop/ApplicationWindow.js\"\nimport { SseInfo } from \"../../../../src/common/desktop/sse/SseInfo.js\"\nimport { SseStorage } from \"../../../../src/common/desktop/sse/SseStorage.js\"\n\ntype UndiciFetch = typeof undiciFetch\n\no.spec(\"TutaNotificationHandler\", () => {\n\tlet wm: WindowManager\n\tlet nativeCredentialsFacade: NativeCredentialsFacade\n\tlet conf: SseStorage\n\tlet notifier: DesktopNotifier\n\tlet alarmScheduler: DesktopAlarmScheduler\n\tlet alarmStorage: DesktopAlarmStorage\n\tlet lang: LanguageViewModel\n\tlet fetch: UndiciFetch\n\tlet appVersion = \"V_1\"\n\tlet handler: TutaNotificationHandler\n\n\to.beforeEach(() => {\n\t\twm = object()\n\t\tnativeCredentialsFacade = object()\n\t\tconf = object()\n\t\tnotifier = object()\n\t\talarmScheduler = object()\n\t\talarmStorage = object()\n\t\tlang = object()\n\t\tfetch = func<UndiciFetch>()\n\t\twhen(lang.get(matchers.anything())).thenDo((arg) => `translated:${arg}`)\n\t\thandler = new TutaNotificationHandler(wm, nativeCredentialsFacade, conf, notifier, alarmScheduler, alarmStorage, lang, fetch, appVersion)\n\t})\n\n\to.spec(\"onMailNotification\", () => {\n\t\to.test(\"displays simple notification if preview is off\", async () => {\n\t\t\twhen(wm.getAll()).thenReturn([])\n\t\t\twhen(nativeCredentialsFacade.getCredentialEncryptionMode()).thenResolve(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t\twhen(conf.getExtendedNotificationConfig(\"user1\")).thenResolve(ExtendedNotificationMode.NoSenderOrSubject)\n\t\t\tconst mailId = createIdTupleWrapper({\n\t\t\t\tlistId: \"mailListId\",\n\t\t\t\tlistElementId: \"mailElementId\",\n\t\t\t})\n\t\t\tconst notificationInfo = createNotificationInfo({\n\t\t\t\t_id: \"id\",\n\t\t\t\t_ownerGroup: \"ownerGroupId\",\n\t\t\t\tmailId,\n\t\t\t\tmailAddress: \"recipient@example.com\",\n\t\t\t\tuserId: \"user1\",\n\t\t\t})\n\n\t\t\tawait handler.onMailNotification(setupSseInfo(), notificationInfo)\n\n\t\t\tverify(\n\t\t\t\tnotifier.submitGroupedNotification(\"translated:pushNewMail_msg\", notificationInfo.mailAddress, \"mailListId,mailElementId\", matchers.anything()),\n\t\t\t)\n\t\t})\n\n\t\to.test(\"does not display email notification if the window is already focused\", async () => {\n\t\t\twhen(wm.getAll()).thenReturn([\n\t\t\t\t{\n\t\t\t\t\tgetUserId: () => \"user1\",\n\t\t\t\t\tisFocused: () => true,\n\t\t\t\t} as Partial<ApplicationWindow> as ApplicationWindow,\n\t\t\t])\n\t\t\twhen(nativeCredentialsFacade.getCredentialEncryptionMode()).thenResolve(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t\twhen(conf.getExtendedNotificationConfig(\"user1\")).thenResolve(ExtendedNotificationMode.NoSenderOrSubject)\n\t\t\tconst mailId = createIdTupleWrapper({\n\t\t\t\tlistId: \"mailListId\",\n\t\t\t\tlistElementId: \"mailElementId\",\n\t\t\t})\n\t\t\tconst notificationInfo = createNotificationInfo({\n\t\t\t\t_id: \"id\",\n\t\t\t\t_ownerGroup: \"ownerGroupId\",\n\t\t\t\tmailId,\n\t\t\t\tmailAddress: \"recipient@example.com\",\n\t\t\t\tuserId: \"user1\",\n\t\t\t})\n\n\t\t\tawait handler.onMailNotification(setupSseInfo(), notificationInfo)\n\n\t\t\tverify(notifier.submitGroupedNotification(matchers.anything(), matchers.anything(), matchers.anything(), matchers.anything()), { times: 0 })\n\t\t})\n\n\t\to.test(\"displays simple notification if app pass is on\", async () => {\n\t\t\twhen(wm.getAll()).thenReturn([])\n\t\t\twhen(nativeCredentialsFacade.getCredentialEncryptionMode()).thenResolve(CredentialEncryptionMode.APP_PASSWORD)\n\t\t\twhen(conf.getExtendedNotificationConfig(\"user1\")).thenResolve(ExtendedNotificationMode.OnlySender)\n\t\t\tconst mailId = createIdTupleWrapper({\n\t\t\t\tlistId: \"mailListId\",\n\t\t\t\tlistElementId: \"mailElementId\",\n\t\t\t})\n\t\t\tconst notificationInfo = createNotificationInfo({\n\t\t\t\t_id: \"id\",\n\t\t\t\t_ownerGroup: \"ownerGroupId\",\n\t\t\t\tmailId,\n\t\t\t\tmailAddress: \"recipient@example.com\",\n\t\t\t\tuserId: \"user1\",\n\t\t\t})\n\n\t\t\tawait handler.onMailNotification(setupSseInfo(), notificationInfo)\n\n\t\t\tconst listenerCaptor = matchers.captor()\n\t\t\tverify(\n\t\t\t\tnotifier.submitGroupedNotification(\n\t\t\t\t\t\"translated:pushNewMail_msg\",\n\t\t\t\t\tnotificationInfo.mailAddress,\n\t\t\t\t\t\"mailListId,mailElementId\",\n\t\t\t\t\tlistenerCaptor.capture(),\n\t\t\t\t),\n\t\t\t)\n\t\t\tlistenerCaptor.value(NotificationResult.Click)\n\t\t\tverify(\n\t\t\t\twm.openMailBox(\n\t\t\t\t\t{\n\t\t\t\t\t\tuserId: \"user1\",\n\t\t\t\t\t\tmailAddress: notificationInfo.mailAddress,\n\t\t\t\t\t},\n\t\t\t\t\t\"?mail=mailListId%2CmailElementId\",\n\t\t\t\t),\n\t\t\t)\n\t\t})\n\n\t\to.test(\"downloads and displays extended notifications\", async () => {\n\t\t\twhen(wm.getAll()).thenReturn([])\n\t\t\twhen(nativeCredentialsFacade.getCredentialEncryptionMode()).thenResolve(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t\twhen(conf.getExtendedNotificationConfig(\"user1\")).thenResolve(ExtendedNotificationMode.OnlySender)\n\t\t\tconst mailId = createIdTupleWrapper({\n\t\t\t\tlistId: \"mailListId\",\n\t\t\t\tlistElementId: \"mailElementId\",\n\t\t\t})\n\t\t\tconst notificationInfo = createNotificationInfo({\n\t\t\t\t_id: \"id\",\n\t\t\t\t_ownerGroup: \"ownerGroupId\",\n\t\t\t\tmailId,\n\t\t\t\tmailAddress: \"recipient@example.com\",\n\t\t\t\tuserId: \"user1\",\n\t\t\t})\n\t\t\tconst sseInfo = setupSseInfo()\n\t\t\tconst credentials: UnencryptedCredentials = {\n\t\t\t\tcredentialInfo: {\n\t\t\t\t\tuserId: \"user1\",\n\t\t\t\t\ttype: CredentialType.Internal,\n\t\t\t\t\tlogin: \"user1@example.com\",\n\t\t\t\t},\n\t\t\t\taccessToken: \"accessToken\",\n\t\t\t\tdatabaseKey: null,\n\t\t\t\tencryptedPassphraseKey: null,\n\t\t\t\tencryptedPassword: \"\",\n\t\t\t}\n\t\t\twhen(nativeCredentialsFacade.loadByUserId(\"user1\")).thenResolve(credentials)\n\t\t\tconst mailMetadata: MailMetadata = {\n\t\t\t\t_id: [mailId.listId, mailId.listElementId],\n\t\t\t\tsender: createTestEntity(MailAddressTypeRef, {\n\t\t\t\t\taddress: \"sender@example.com\",\n\t\t\t\t}),\n\t\t\t\tfirstRecipient: createTestEntity(MailAddressTypeRef, {\n\t\t\t\t\taddress: \"recipient@example.com\",\n\t\t\t\t}),\n\t\t\t}\n\n\t\t\tconst requestDefer = mockFetchRequest(\n\t\t\t\tfetch,\n\t\t\t\t\"http://something.com/rest/tutanota/mail/mailListId/mailElementId\",\n\t\t\t\t{\n\t\t\t\t\tv: tutanotaModelInfo.version.toString(),\n\t\t\t\t\tcv: appVersion,\n\t\t\t\t\taccessToken: \"accessToken\",\n\t\t\t\t},\n\t\t\t\t200,\n\t\t\t\tmailMetadata,\n\t\t\t)\n\n\t\t\tawait handler.onMailNotification(sseInfo, notificationInfo)\n\n\t\t\tawait requestDefer\n\n\t\t\tconst listenerCaptor = matchers.captor()\n\t\t\tverify(notifier.submitGroupedNotification(\"sender@example.com\", \"recipient@example.com\", \"mailListId,mailElementId\", listenerCaptor.capture()))\n\t\t\tlistenerCaptor.value(NotificationResult.Click)\n\t\t\tverify(\n\t\t\t\twm.openMailBox(\n\t\t\t\t\t{\n\t\t\t\t\t\tuserId: \"user1\",\n\t\t\t\t\t\tmailAddress: notificationInfo.mailAddress,\n\t\t\t\t\t},\n\t\t\t\t\t\"?mail=mailListId%2CmailElementId\",\n\t\t\t\t),\n\t\t\t)\n\t\t})\n\t})\n\n\to.spec(\"onAlarmNotification\", () => {\n\t\to.test(\"passes it to alarmScheduler\", async () => {\n\t\t\tconst alarmNotification: EncryptedAlarmNotification = {\n\t\t\t\toperation: OperationType.CREATE,\n\t\t\t\tnotificationSessionKeys: [],\n\t\t\t\talarmInfo: {\n\t\t\t\t\talarmIdentifier: \"alarmIdentifier\",\n\t\t\t\t},\n\t\t\t\tuser: \"user1\",\n\t\t\t}\n\t\t\tawait handler.onAlarmNotification(alarmNotification)\n\t\t\tverify(alarmScheduler.handleAlarmNotification(alarmNotification))\n\t\t})\n\t})\n\n\to.test(\"onLocalDataInvalidated\", async () => {\n\t\tawait handler.onLocalDataInvalidated()\n\t\tverify(alarmScheduler.unscheduleAllAlarms())\n\t\tverify(alarmStorage.removePushIdentifierKeys())\n\t\tverify(wm.invalidateAlarms())\n\t})\n\n\tfunction setupSseInfo(template: Partial<SseInfo> = {}): SseInfo {\n\t\tconst sseInfo = {\n\t\t\tidentifier: \"id\",\n\t\t\tsseOrigin: \"http://something.com\",\n\t\t\tuserIds: [\"userId\"],\n\t\t\t...template,\n\t\t}\n\t\treturn sseInfo\n\t}\n})\n"],"mappings":"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"}