{"version":3,"file":"ListElementListModel-DYHUNydL.js","names":["config: ListElementListModelConfig<ElementType>","listId: Id","elementId: Id","operation: OperationType","itemId: Id","shouldStop: () => boolean","finder: (a: ElementType) => boolean","item: ElementType","clearSelectionOnMultiSelectStart?: boolean","multiselect: boolean","filter: ListFilter<ElementType> | null","status: ListLoadingState"],"sources":["../../src/common/misc/ListElementListModel.ts"],"sourcesContent":["import { ListFilter, ListModel, ListModelConfig } from \"./ListModel\"\nimport { getElementId, isSameId, ListElement } from \"../api/common/utils/EntityUtils\"\nimport { OperationType } from \"../api/common/TutanotaConstants\"\nimport Stream from \"mithril/stream\"\nimport { ListLoadingState, ListState } from \"../gui/base/List\"\n\n/**\n * Specifies methods for fetching and sorting list elements for a ListElementListModel.\n *\n * Unlike ListModelConfig, isSameId and getItemId are provided automatically. However, an additional method `loadSingle`\n * is needed.\n */\nexport interface ListElementListModelConfig<ElementType> {\n\t/**\n\t * Returns null if the given item could not be loaded\n\t */\n\tloadSingle(listId: Id, itemId: Id): Promise<ElementType | null>\n\n\t// See ListModelConfig\n\tfetch: ListModelConfig<ElementType, Id>[\"fetch\"]\n\tsortCompare: ListModelConfig<ElementType, Id>[\"sortCompare\"]\n\tautoSelectBehavior: ListModelConfig<ElementType, Id>[\"autoSelectBehavior\"]\n}\n\n/**\n * List model that provides ListElement functionality.\n *\n * Internally wraps around a ListModel<ElementType, Id>.\n */\nexport class ListElementListModel<ElementType extends ListElement> {\n\tprivate readonly listModel: ListModel<ElementType, Id>\n\tprivate readonly config: ListElementListModelConfig<ElementType>\n\n\tget state(): ListState<ElementType> {\n\t\treturn this.listModel.state\n\t}\n\n\tget differentItemsSelected(): Stream<ReadonlySet<ElementType>> {\n\t\treturn this.listModel.differentItemsSelected\n\t}\n\n\tget stateStream(): Stream<ListState<ElementType>> {\n\t\treturn this.listModel.stateStream\n\t}\n\n\tconstructor(config: ListElementListModelConfig<ElementType>) {\n\t\tconst theBestConfig = {\n\t\t\t...config,\n\t\t\tisSameId,\n\t\t\tgetItemId: getElementId,\n\t\t}\n\n\t\tthis.listModel = new ListModel<ElementType, Id>(theBestConfig)\n\t\tthis.config = theBestConfig\n\t}\n\n\tasync entityEventReceived(listId: Id, elementId: Id, operation: OperationType): Promise<void> {\n\t\tif (operation === OperationType.CREATE || operation === OperationType.UPDATE) {\n\t\t\t// load the element without range checks for now\n\t\t\tconst entity = await this.config.loadSingle(listId, elementId)\n\t\t\tif (!entity) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Wait for any pending loading\n\t\t\treturn this.listModel.waitLoad(() => {\n\t\t\t\tif (operation === OperationType.CREATE) {\n\t\t\t\t\tif (this.listModel.canInsertItem(entity)) {\n\t\t\t\t\t\tthis.listModel.insertLoadedItem(entity)\n\t\t\t\t\t}\n\t\t\t\t} else if (operation === OperationType.UPDATE) {\n\t\t\t\t\tthis.listModel.updateLoadedItem(entity)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (operation === OperationType.DELETE) {\n\t\t\t// await this.swipeHandler?.animating\n\t\t\tawait this.listModel.deleteLoadedItem(elementId)\n\t\t}\n\t}\n\n\tasync loadAndSelect(\n\t\titemId: Id,\n\t\tshouldStop: () => boolean,\n\t\tfinder: (a: ElementType) => boolean = (item) => isSameId(getElementId(item), itemId),\n\t): Promise<ElementType | null> {\n\t\treturn this.listModel.loadAndSelect(finder, shouldStop)\n\t}\n\n\tisItemSelected(itemId: Id): boolean {\n\t\treturn this.listModel.isItemSelected(itemId)\n\t}\n\n\tenterMultiselect() {\n\t\treturn this.listModel.enterMultiselect()\n\t}\n\n\tstopLoading(): void {\n\t\treturn this.listModel.stopLoading()\n\t}\n\n\tisEmptyAndDone(): boolean {\n\t\treturn this.listModel.isEmptyAndDone()\n\t}\n\n\tisSelectionEmpty(): boolean {\n\t\treturn this.listModel.isSelectionEmpty()\n\t}\n\n\tgetUnfilteredAsArray(): Array<ElementType> {\n\t\treturn this.listModel.getUnfilteredAsArray()\n\t}\n\n\tsort() {\n\t\treturn this.listModel.sort()\n\t}\n\n\tasync loadMore() {\n\t\treturn this.listModel.loadMore()\n\t}\n\n\tasync loadAll() {\n\t\treturn this.listModel.loadAll()\n\t}\n\n\tasync retryLoading() {\n\t\treturn this.listModel.retryLoading()\n\t}\n\n\tonSingleSelection(item: ElementType) {\n\t\treturn this.listModel.onSingleSelection(item)\n\t}\n\n\tonSingleInclusiveSelection(item: ElementType, clearSelectionOnMultiSelectStart?: boolean) {\n\t\treturn this.listModel.onSingleInclusiveSelection(item, clearSelectionOnMultiSelectStart)\n\t}\n\n\tonSingleExclusiveSelection(item: ElementType) {\n\t\treturn this.listModel.onSingleExclusiveSelection(item)\n\t}\n\n\tselectRangeTowards(item: ElementType) {\n\t\treturn this.listModel.selectRangeTowards(item)\n\t}\n\n\tareAllSelected(): boolean {\n\t\treturn this.listModel.areAllSelected()\n\t}\n\n\tselectNone() {\n\t\treturn this.listModel.selectNone()\n\t}\n\n\tselectAll() {\n\t\treturn this.listModel.selectAll()\n\t}\n\n\tselectPrevious(multiselect: boolean) {\n\t\treturn this.listModel.selectPrevious(multiselect)\n\t}\n\n\tselectNext(multiselect: boolean) {\n\t\treturn this.listModel.selectNext(multiselect)\n\t}\n\n\tcancelLoadAll() {\n\t\treturn this.listModel.cancelLoadAll()\n\t}\n\n\tasync loadInitial() {\n\t\treturn this.listModel.loadInitial()\n\t}\n\n\treapplyFilter() {\n\t\treturn this.listModel.reapplyFilter()\n\t}\n\n\tsetFilter(filter: ListFilter<ElementType> | null) {\n\t\treturn this.listModel.setFilter(filter)\n\t}\n\n\tgetSelectedAsArray(): Array<ElementType> {\n\t\treturn this.listModel.getSelectedAsArray()\n\t}\n\n\tisLoadedCompletely(): boolean {\n\t\treturn this.listModel.isLoadedCompletely()\n\t}\n\n\tupdateLoadingStatus(status: ListLoadingState) {\n\t\treturn this.listModel.updateLoadingStatus(status)\n\t}\n}\n"],"mappings":"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"}