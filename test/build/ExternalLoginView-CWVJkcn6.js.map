{"version":3,"file":"ExternalLoginView-CWVJkcn6.js","names":["credentialsProvider: CredentialsProvider","credentials: UnencryptedCredentials","loginPromise: Promise<void>","errorAction: () => void","args: Record<string, any>"],"sources":["../../src/mail-app/mail/view/ExternalLoginView.ts"],"sourcesContent":["import m, { Children, Vnode } from \"mithril\"\nimport { AccessExpiredError } from \"../../../common/api/common/error/RestError.js\"\nimport { assertNotNull, base64ToUint8Array, base64UrlToBase64, noOp } from \"@tutao/tutanota-utils\"\nimport type { MaybeTranslation } from \"../../../common/misc/LanguageViewModel.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel.js\"\nimport { keyManager, Shortcut } from \"../../../common/misc/KeyManager.js\"\nimport { client } from \"../../../common/misc/ClientDetector.js\"\nimport { showProgressDialog } from \"../../../common/gui/dialogs/ProgressDialog.js\"\nimport { asKdfType, KdfType, Keys } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { progressIcon } from \"../../../common/gui/base/Icon.js\"\nimport { Autocomplete } from \"../../../common/gui/base/TextField.js\"\nimport { Checkbox } from \"../../../common/gui/base/Checkbox.js\"\nimport { MessageBox } from \"../../../common/gui/base/MessageBox.js\"\nimport { GENERATED_MIN_ID } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { getLoginErrorMessage, handleExpectedLoginError } from \"../../../common/misc/LoginUtils.js\"\nimport type { CredentialsProvider } from \"../../../common/misc/credentials/CredentialsProvider.js\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env.js\"\nimport { credentialsToUnencrypted } from \"../../../common/misc/credentials/Credentials.js\"\nimport { SessionType } from \"../../../common/api/common/SessionType.js\"\nimport { ResumeSessionErrorReason } from \"../../../common/api/worker/facades/LoginFacade.js\"\nimport { TopLevelAttrs, TopLevelView } from \"../../../TopLevelView.js\"\nimport { BaseTopLevelView } from \"../../../common/gui/BaseTopLevelView.js\"\nimport { locator } from \"../../../common/api/main/CommonLocator.js\"\nimport { LoginScreenHeader } from \"../../../common/gui/LoginScreenHeader.js\"\nimport { LoginButton } from \"../../../common/gui/base/buttons/LoginButton.js\"\nimport { UnencryptedCredentials } from \"../../../common/native/common/generatedipc/UnencryptedCredentials.js\"\nimport { PasswordField } from \"../../../common/misc/passwords/PasswordField.js\"\nimport { renderInfoLinks } from \"../../../common/gui/RenderLoginInfoLinks.js\"\n\nassertMainOrNode()\n\ntype UrlData = { userId: Id; salt: Uint8Array; kdfType: KdfType }\n\nexport class ExternalLoginViewModel {\n\tpassword: string = \"\"\n\tdoSavePassword: boolean = false\n\thelpText: MaybeTranslation = \"emptyString_msg\"\n\terrorMessageId: MaybeTranslation | null = null\n\tautologinInProgress = false\n\tshowAutoLoginButton = false\n\n\tprivate _urlData: UrlData | null = null\n\tget urlData(): UrlData {\n\t\treturn assertNotNull(this._urlData)\n\t}\n\n\tconstructor(private readonly credentialsProvider: CredentialsProvider) {}\n\n\tformLogin() {\n\t\tif (this.password === \"\") {\n\t\t\tthis.helpText = \"loginFailed_msg\"\n\t\t} else {\n\t\t\tthis.helpText = \"login_msg\"\n\t\t\tthis.handleLoginPromise(showProgressDialog(\"login_msg\", this.doFormLogin()), noOp)\n\t\t}\n\t}\n\n\tprivate async doFormLogin() {\n\t\tconst password = this.password\n\t\tconst clientIdentifier = client.browser + \" \" + client.device\n\t\tconst persistentSession = this.doSavePassword\n\n\t\tconst sessionType = persistentSession ? SessionType.Persistent : SessionType.Login\n\t\tconst { userId, salt, kdfType } = this.urlData\n\t\tconst newCredentials = await locator.logins.createExternalSession(userId, password, salt, kdfType, clientIdentifier, sessionType)\n\n\t\tthis.password = \"\"\n\n\t\tconst storedCredentials = await this.credentialsProvider.getDecryptedCredentialsByUserId(userId)\n\n\t\t// For external users userId is used instead of email address\n\t\tif (persistentSession) {\n\t\t\tawait this.credentialsProvider.store(credentialsToUnencrypted(newCredentials, null))\n\t\t}\n\n\t\tif (storedCredentials) {\n\t\t\t// delete persistent session if a new session is created\n\t\t\tawait locator.logins.deleteOldSession(storedCredentials)\n\n\t\t\tif (!persistentSession) {\n\t\t\t\tawait this.credentialsProvider.deleteByUserId(userId)\n\t\t\t}\n\t\t}\n\t}\n\n\tasync autologin(credentials: UnencryptedCredentials) {\n\t\tthis.autologinInProgress = true\n\t\tawait showProgressDialog(\n\t\t\t\"login_msg\",\n\t\t\tthis.handleLoginPromise(this.resumeSession(credentials), () => {\n\t\t\t\tthis.autologinInProgress = false\n\t\t\t\tm.redraw()\n\t\t\t}),\n\t\t)\n\t}\n\n\tprivate async resumeSession(credentials: UnencryptedCredentials): Promise<void> {\n\t\tconst result = await locator.logins.resumeSession(credentials, { salt: this.urlData.salt, kdfType: this.urlData.kdfType }, null)\n\t\tif (result.type === \"error\") {\n\t\t\tswitch (result.reason) {\n\t\t\t\tcase ResumeSessionErrorReason.OfflineNotAvailableForFree:\n\t\t\t\t\tthrow new Error(\"Cannot happen\")\n\t\t\t}\n\t\t}\n\t}\n\n\tasync loginWithStoredCredentials() {\n\t\ttry {\n\t\t\tconst credentials = await this.credentialsProvider.getDecryptedCredentialsByUserId(this.urlData.userId)\n\t\t\tif (credentials) {\n\t\t\t\tawait this.autologin(credentials)\n\t\t\t}\n\t\t} finally {\n\t\t\t// in case there is an error or there are no credentials we should show the form\n\t\t\tthis.showAutoLoginButton = false\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\tprivate async handleLoginPromise(loginPromise: Promise<void>, errorAction: () => void) {\n\t\ttry {\n\t\t\tawait loginPromise\n\t\t\tm.route.set(`/mail${location.hash}`)\n\t\t\tthis.helpText = \"emptyString_msg\"\n\t\t} catch (e) {\n\t\t\tconst messageId = getLoginErrorMessage(e, true)\n\n\t\t\tif (e instanceof AccessExpiredError) {\n\t\t\t\tthis.errorMessageId = messageId\n\t\t\t} else {\n\t\t\t\tthis.helpText = messageId\n\t\t\t}\n\n\t\t\tm.redraw()\n\n\t\t\thandleExpectedLoginError(e, errorAction)\n\t\t}\n\t}\n\n\tasync updateUrl(args: Record<string, any>): Promise<void> {\n\t\ttry {\n\t\t\tconst encodedExternalLoginData = decodeURIComponent(location.hash).substring(6) // cutoff #mail/ from #mail/KduzrgF----0S3BTO2gypfDMketWB_PbqQ\n\n\t\t\tconst userIdOffset = 0\n\t\t\tconst saltOffset = userIdOffset + GENERATED_MIN_ID.length\n\t\t\t// 16 bytes Base64 encoded is ceil(16 * 4/3) bytes, or 22 bytes\n\t\t\tconst encodedSaltLength = 22\n\t\t\tconst kdfOffset = saltOffset + encodedSaltLength\n\n\t\t\t// check if the KDF type is in the URL (encodedExternalLoginData.length > kdfOffset); if not, we assume bcrypt to ensure old links stay valid\n\t\t\tlet kdfType = KdfType.Bcrypt\n\t\t\tif (encodedExternalLoginData.length > kdfOffset) {\n\t\t\t\tkdfType = asKdfType(encodedExternalLoginData.substring(kdfOffset, kdfOffset + 1))\n\t\t\t}\n\n\t\t\tthis._urlData = {\n\t\t\t\tuserId: encodedExternalLoginData.substring(userIdOffset, saltOffset),\n\t\t\t\tsalt: base64ToUint8Array(base64UrlToBase64(encodedExternalLoginData.substring(saltOffset, kdfOffset))),\n\t\t\t\tkdfType: kdfType,\n\t\t\t}\n\n\t\t\tconst credentials = await this.credentialsProvider.getDecryptedCredentialsByUserId(this.urlData.userId)\n\n\t\t\tif (credentials && args.noAutoLogin !== true) {\n\t\t\t\tawait this.autologin(credentials)\n\t\t\t} else {\n\t\t\t\tthis.showAutoLoginButton = credentials != null\n\t\t\t\tm.redraw()\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.errorMessageId = \"invalidLink_msg\"\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\tdispose() {\n\t\tthis.password = \"\"\n\t}\n}\n\nexport interface ExternalLoginViewAttrs extends TopLevelAttrs {\n\tviewModelFactory: () => ExternalLoginViewModel\n}\n\n/** Login view for external mailboxes: recipients from other mail servers when the email is password-protected. */\nexport class ExternalLoginView extends BaseTopLevelView implements TopLevelView<ExternalLoginViewAttrs> {\n\tprivate readonly viewModel: ExternalLoginViewModel\n\tprivate readonly shortcuts: Array<Shortcut> = [\n\t\t{\n\t\t\tkey: Keys.RETURN,\n\t\t\texec: () => {\n\t\t\t\tthis.viewModel.formLogin()\n\t\t\t},\n\t\t\thelp: \"login_label\",\n\t\t},\n\t]\n\n\tconstructor(vnode: Vnode<ExternalLoginViewAttrs>) {\n\t\tsuper()\n\t\tthis.viewModel = vnode.attrs.viewModelFactory()\n\t}\n\n\toncreate() {\n\t\tkeyManager.registerShortcuts(this.shortcuts)\n\t}\n\n\tonremove() {\n\t\tthis.viewModel.password = \"\"\n\t\tthis.viewModel.dispose()\n\t\tkeyManager.unregisterShortcuts(this.shortcuts)\n\t}\n\n\tview({ attrs }: Vnode<ExternalLoginViewAttrs>): Children {\n\t\treturn m(\".main-view.flex.col.nav-bg\", [\n\t\t\tm(LoginScreenHeader),\n\t\t\tm(\".flex-grow.flex.col.items-center.scroll\", m(\".flex-grow-shrink-auto.flex.col.max-width-m.pt.pb.plr-l\", this.renderContent())),\n\t\t])\n\t}\n\n\tprivate renderContent(): Children {\n\t\tif (this.viewModel.autologinInProgress) {\n\t\t\treturn m(\"p.center\", progressIcon())\n\t\t} else if (this.viewModel.errorMessageId) {\n\t\t\treturn m(\"p.center\", m(MessageBox, {}, lang.getTranslationText(this.viewModel.errorMessageId)))\n\t\t} else {\n\t\t\treturn [\n\t\t\t\tm(\".flex.col.content-bg.border-radius-big.plr-2l.mt\", [\n\t\t\t\t\tthis.viewModel.showAutoLoginButton ? this.renderAutoLoginButton() : this.renderForm(),\n\t\t\t\t\tm(\"p.center.statusTextColor.mt-xs.mb-s\", m(\"small\", lang.getTranslationText(this.viewModel.helpText), [])),\n\t\t\t\t]),\n\t\t\t\tm(\".flex-grow\"),\n\t\t\t\trenderInfoLinks(),\n\t\t\t]\n\t\t}\n\t}\n\n\trenderAutoLoginButton(): Children {\n\t\treturn m(\n\t\t\t\".pt-l\",\n\t\t\tm(LoginButton, {\n\t\t\t\tlabel: \"showMail_action\",\n\t\t\t\tonclick: () => this.viewModel.loginWithStoredCredentials(),\n\t\t\t}),\n\t\t)\n\t}\n\n\trenderForm(): Children {\n\t\treturn [\n\t\t\tm(PasswordField, {\n\t\t\t\thelpLabel: () => lang.get(\"enterPresharedPassword_msg\"),\n\t\t\t\tvalue: this.viewModel.password,\n\t\t\t\tautocompleteAs: Autocomplete.currentPassword,\n\t\t\t\toninput: (input) => (this.viewModel.password = input),\n\t\t\t}),\n\t\t\tm(Checkbox, {\n\t\t\t\tlabel: () => lang.get(\"storePassword_action\"),\n\t\t\t\thelpLabel: \"onlyPrivateComputer_msg\",\n\t\t\t\tchecked: this.viewModel.doSavePassword,\n\t\t\t\tonChecked: (checked) => (this.viewModel.doSavePassword = checked),\n\t\t\t}),\n\t\t\tm(\n\t\t\t\t\".pt\",\n\t\t\t\tm(LoginButton, {\n\t\t\t\t\tlabel: \"showMail_action\",\n\t\t\t\t\tonclick: () => this.viewModel.formLogin(),\n\t\t\t\t}),\n\t\t\t),\n\t\t]\n\t}\n\n\tonNewUrl(args: Record<string, any>) {\n\t\tthis.viewModel.updateUrl(args)\n\t}\n}\n"],"mappings":"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"}