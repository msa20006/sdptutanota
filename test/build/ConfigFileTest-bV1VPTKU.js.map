{"version":3,"file":"ConfigFileTest-bV1VPTKU.js","names":["instances: Record<string, ConfigFile>","p: string","f: string","fs: FsExports","filePath: string","fullpath: string","defaultObj: any","obj: any","p: string","v: string","o: any","res: number[]"],"sources":["../../src/common/desktop/config/ConfigFile.ts","../tests/desktop/config/ConfigFileTest.ts"],"sourcesContent":["import type * as FsModule from \"node:fs\"\nimport path from \"node:path\"\n\nconst instances: Record<string, ConfigFile> = {}\n\ntype FsExports = typeof FsModule\n\n/**\n * get an instance of ConfigFile pointing at a certain path\n * @param p {string} path to file the configFile should write to\n * @param fs the fs object returned by \"import fs from ''fs\"\n */\nexport function getConfigFile(p: string, f: string, fs: FsExports): ConfigFile {\n\tconst fullpath = path.join(p, f)\n\tif (!Object.keys(instances).includes(fullpath)) {\n\t\tinstances[fullpath] = new ConfigFile(p, fullpath, fs)\n\t}\n\n\treturn instances[fullpath]\n}\n\nexport type ConfigFileType = ConfigFile\n\nexport class ConfigFile {\n\tprivate accessPromise: Promise<any>\n\n\t/**\n\t * @param filePath path to the file the json objects should be stored in\n\t **/\n\tconstructor(private readonly filePath: string, private readonly fullpath: string, private readonly fs: FsExports) {\n\t\tthis.accessPromise = Promise.resolve()\n\t}\n\n\tensurePresence(defaultObj: any): Promise<void> {\n\t\ttry {\n\t\t\tthis.fs.accessSync(this.fullpath, this.fs.constants.F_OK)\n\t\t} catch (e) {\n\t\t\treturn this.writeJSON(defaultObj || {})\n\t\t}\n\n\t\treturn Promise.resolve()\n\t}\n\n\treadJSON(): Promise<any> {\n\t\tthis.accessPromise = this.accessPromise\n\t\t\t.then(() => this.fs.promises.readFile(this.fullpath, \"utf8\"))\n\t\t\t.then((t) => JSON.parse(t))\n\t\t\t.catch((e) => {\n\t\t\t\t// catch needed to make future reads/writes work\n\t\t\t\tconsole.error(\"failed to read config!\", e)\n\t\t\t})\n\t\treturn this.accessPromise\n\t}\n\n\t/**\n\t * asynchronously write an object to a file.\n\t * multiple writes are handled in a fifo manner to prevent race conditions that could\n\t * cause the file to contain invalid json\n\t * deliberately not using async to make sure the chain of writes doesn't branch.\n\t *\n\t * @param obj the object to serialize\n\t * @returns {Promise<void>} resolves when the object has been written\n\t */\n\twriteJSON(obj: any): Promise<void> {\n\t\tthis.accessPromise = this.accessPromise\n\t\t\t.then(() => this.fs.promises.mkdir(this.filePath, { recursive: true }))\n\t\t\t.then(() => JSON.stringify(obj, null, 2))\n\t\t\t.then((json) => this.fs.promises.writeFile(this.fullpath, json))\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.error(\"failed to write conf:\", e)\n\t\t\t})\n\t\treturn this.accessPromise\n\t}\n}\n","import o from \"@tutao/otest\"\nimport n from \"../../nodemocker.js\"\nimport { delay, numberRange } from \"@tutao/tutanota-utils\"\nimport { getConfigFile } from \"../../../../src/common/desktop/config/ConfigFile.js\"\n\nconst MAX_LATENCY = 20\nconst rndDelay = () => delay(Math.floor(Math.random() * MAX_LATENCY))\n\nexport const fsMock = {\n\taccessSync: function (p) {\n\t\tif (Object.keys(this.promises.fs).includes(p)) return\n\t\tthrow new Error(\"404\")\n\t},\n\tconstants: {},\n\tpromises: {\n\t\tfs: {\n\t\t\t\"path/present.json\": JSON.stringify({ a: \"hello\", b: \"\" }),\n\t\t},\n\t\twriteFile: function (p: string, v: string) {\n\t\t\treturn rndDelay().then(() => (this.fs[p] = v))\n\t\t},\n\t\treadFile: function (p: string) {\n\t\t\treturn rndDelay().then(() => this.fs[p])\n\t\t},\n\t\tmkdir: function (p: string, o: any) {\n\t\t\tPromise.resolve()\n\t\t},\n\t},\n}\n\no.spec(\"ConfigFileTest\", function () {\n\to(\"ensurePresence works\", async function () {\n\t\tconst newV = { a: \"bye\", b: \"hello\" }\n\t\tconst cf = getConfigFile(\"path\", \"present.json\", n.mock<typeof import(\"fs\")>(\"fs\", fsMock).set())\n\t\tawait cf.ensurePresence(newV)\n\t\tconst v = await cf.readJSON()\n\t\to(v).notDeepEquals(newV)\n\t})\n\n\to(\"ensurePresence works 2\", async function () {\n\t\tconst cf = getConfigFile(\"path\", \"not-present.json\", n.mock<typeof import(\"fs\")>(\"fs\", fsMock).set())\n\t\tconst newV = { a: \"bye\", b: \"hello\" }\n\t\tawait cf.ensurePresence(newV)\n\t\tconst v = await cf.readJSON()\n\t\to(v).deepEquals(newV)\n\t})\n\n\to(\"interleaved reads/writes work\", async function () {\n\t\to.timeout(500)\n\t\tconst cf = getConfigFile(\"path\", \"conf.json\", n.mock<typeof import(\"fs\")>(\"fs\", fsMock).set())\n\n\t\tconst cycles = 19\n\t\tconst res: number[] = []\n\n\t\tfor (let i = 0; i < cycles + 1; ) {\n\t\t\tawait Promise.resolve()\n\t\t\tcf.writeJSON({ a: i++ })\n\t\t\tawait Promise.resolve()\n\t\t\tcf.readJSON().then((v) => {\n\t\t\t\ti = v.a\n\t\t\t\tres.push(i)\n\t\t\t})\n\t\t}\n\n\t\t// flush writes/reads\n\t\tawait cf.readJSON()\n\n\t\to(res).deepEquals(numberRange(0, cycles))\n\t})\n\n\to(\"instance pool works\", async function () {\n\t\tconst fs = n.mock<typeof import(\"fs\")>(\"fs\", fsMock).set()\n\t\tconst first = getConfigFile(\"path\", \"somepath.json\", fs)\n\n\t\tawait first.ensurePresence({ mork: 123 })\n\n\t\tconst second = getConfigFile(\"path\", \"somepath.json\", fs)\n\n\t\tawait second.ensurePresence({ mork: 321 })\n\n\t\tconst unchanged_content = await first.readJSON()\n\t\to(unchanged_content).deepEquals({ mork: 123 })\n\n\t\tsecond.writeJSON({ a: false })\n\n\t\tconst changed_content = await first.readJSON()\n\t\to(changed_content).deepEquals({ a: false })\n\n\t\t// @ts-ignore\n\t\tfirst.t = true\n\t\t// @ts-ignore\n\t\to(second.t).equals(true)\n\t})\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAMA,YAAwC,CAAE;AASzC,SAAS,cAAcC,GAAWC,GAAWC,IAA2B;CAC9E,MAAM,WAAW,KAAK,KAAK,GAAG,EAAE;AAChC,MAAK,OAAO,KAAK,UAAU,CAAC,SAAS,SAAS,CAC7C,WAAU,YAAY,IAAI,WAAW,GAAG,UAAU;AAGnD,QAAO,UAAU;AACjB;IAIY,aAAN,MAAiB;CACvB,AAAQ;;;;CAKR,YAA6BC,UAAmCC,UAAmCF,IAAe;EA6ClH,KA7C6B;EA6C5B,KA7C+D;EA6C9D,KA7CiG;AAClG,OAAK,gBAAgB,QAAQ,SAAS;CACtC;CAED,eAAeG,YAAgC;AAC9C,MAAI;AACH,QAAK,GAAG,WAAW,KAAK,UAAU,KAAK,GAAG,UAAU,KAAK;EACzD,SAAQ,GAAG;AACX,UAAO,KAAK,UAAU,cAAc,CAAE,EAAC;EACvC;AAED,SAAO,QAAQ,SAAS;CACxB;CAED,WAAyB;AACxB,OAAK,gBAAgB,KAAK,cACxB,KAAK,MAAM,KAAK,GAAG,SAAS,SAAS,KAAK,UAAU,OAAO,CAAC,CAC5D,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC,CAC1B,MAAM,CAAC,MAAM;AAEb,WAAQ,MAAM,0BAA0B,EAAE;EAC1C,EAAC;AACH,SAAO,KAAK;CACZ;;;;;;;;;;CAWD,UAAUC,KAAyB;AAClC,OAAK,gBAAgB,KAAK,cACxB,KAAK,MAAM,KAAK,GAAG,SAAS,MAAM,KAAK,UAAU,EAAE,WAAW,KAAM,EAAC,CAAC,CACtE,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,EAAE,CAAC,CACxC,KAAK,CAAC,SAAS,KAAK,GAAG,SAAS,UAAU,KAAK,UAAU,KAAK,CAAC,CAC/D,MAAM,CAAC,MAAM;AACb,WAAQ,MAAM,yBAAyB,EAAE;EACzC,EAAC;AACH,SAAO,KAAK;CACZ;AACD;;;;ACpED,MAAM,cAAc;AACpB,MAAM,WAAW,MAAM,MAAM,KAAK,MAAM,KAAK,QAAQ,GAAG,YAAY,CAAC;MAExD,SAAS;CACrB,YAAY,SAAU,GAAG;AACxB,MAAI,OAAO,KAAK,KAAK,SAAS,GAAG,CAAC,SAAS,EAAE,CAAE;AAC/C,QAAM,IAAI,MAAM;CAChB;CACD,WAAW,CAAE;CACb,UAAU;EACT,IAAI,EACH,qBAAqB,KAAK,UAAU;GAAE,GAAG;GAAS,GAAG;EAAI,EAAC,CAC1D;EACD,WAAW,SAAUC,GAAWC,GAAW;AAC1C,UAAO,UAAU,CAAC,KAAK,MAAO,KAAK,GAAG,KAAK,EAAG;EAC9C;EACD,UAAU,SAAUD,GAAW;AAC9B,UAAO,UAAU,CAAC,KAAK,MAAM,KAAK,GAAG,GAAG;EACxC;EACD,OAAO,SAAUA,GAAWE,GAAQ;AACnC,WAAQ,SAAS;EACjB;CACD;AACD;AAED,aAAE,KAAK,kBAAkB,WAAY;AACpC,cAAE,wBAAwB,iBAAkB;EAC3C,MAAM,OAAO;GAAE,GAAG;GAAO,GAAG;EAAS;EACrC,MAAM,KAAK,cAAc,QAAQ,gBAAgB,mBAAE,KAA0B,MAAM,OAAO,CAAC,KAAK,CAAC;AACjG,QAAM,GAAG,eAAe,KAAK;EAC7B,MAAM,IAAI,MAAM,GAAG,UAAU;AAC7B,eAAE,EAAE,CAAC,cAAc,KAAK;CACxB,EAAC;AAEF,cAAE,0BAA0B,iBAAkB;EAC7C,MAAM,KAAK,cAAc,QAAQ,oBAAoB,mBAAE,KAA0B,MAAM,OAAO,CAAC,KAAK,CAAC;EACrG,MAAM,OAAO;GAAE,GAAG;GAAO,GAAG;EAAS;AACrC,QAAM,GAAG,eAAe,KAAK;EAC7B,MAAM,IAAI,MAAM,GAAG,UAAU;AAC7B,eAAE,EAAE,CAAC,WAAW,KAAK;CACrB,EAAC;AAEF,cAAE,iCAAiC,iBAAkB;AACpD,eAAE,QAAQ,IAAI;EACd,MAAM,KAAK,cAAc,QAAQ,aAAa,mBAAE,KAA0B,MAAM,OAAO,CAAC,KAAK,CAAC;EAE9F,MAAM,SAAS;EACf,MAAMC,MAAgB,CAAE;AAExB,OAAK,IAAI,IAAI,GAAG,IAAI,SAAS,IAAK;AACjC,SAAM,QAAQ,SAAS;AACvB,MAAG,UAAU,EAAE,GAAG,IAAK,EAAC;AACxB,SAAM,QAAQ,SAAS;AACvB,MAAG,UAAU,CAAC,KAAK,CAAC,MAAM;AACzB,QAAI,EAAE;AACN,QAAI,KAAK,EAAE;GACX,EAAC;EACF;AAGD,QAAM,GAAG,UAAU;AAEnB,eAAE,IAAI,CAAC,WAAW,YAAY,GAAG,OAAO,CAAC;CACzC,EAAC;AAEF,cAAE,uBAAuB,iBAAkB;EAC1C,MAAM,KAAK,mBAAE,KAA0B,MAAM,OAAO,CAAC,KAAK;EAC1D,MAAM,QAAQ,cAAc,QAAQ,iBAAiB,GAAG;AAExD,QAAM,MAAM,eAAe,EAAE,MAAM,IAAK,EAAC;EAEzC,MAAM,SAAS,cAAc,QAAQ,iBAAiB,GAAG;AAEzD,QAAM,OAAO,eAAe,EAAE,MAAM,IAAK,EAAC;EAE1C,MAAM,oBAAoB,MAAM,MAAM,UAAU;AAChD,eAAE,kBAAkB,CAAC,WAAW,EAAE,MAAM,IAAK,EAAC;AAE9C,SAAO,UAAU,EAAE,GAAG,MAAO,EAAC;EAE9B,MAAM,kBAAkB,MAAM,MAAM,UAAU;AAC9C,eAAE,gBAAgB,CAAC,WAAW,EAAE,GAAG,MAAO,EAAC;AAG3C,QAAM,IAAI;AAEV,eAAE,OAAO,EAAE,CAAC,OAAO,KAAK;CACxB,EAAC;AACF,EAAC"}