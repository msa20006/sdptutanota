{"version":3,"file":"ShareFacade-DCXzEkdE.js","names":["userFacade: UserFacade","cryptoFacade: CryptoFacade","serviceExecutor: IServiceExecutor","entityClient: EntityClient","keyLoaderFacade: KeyLoaderFacade","sharedGroupInfo: GroupInfo","recipientMailAddresses: Array<string>","shareCapability: ShareCapability","invitationData: GroupInvitationPostData","sharedGroupKey: VersionedKey","notFoundRecipients: Array<string>","invitation: ReceivedGroupInvitation","receivedGroupInvitationId: IdTuple"],"sources":["../../src/common/api/worker/facades/lazy/ShareFacade.ts"],"sourcesContent":["import type { CryptoFacade } from \"../../crypto/CryptoFacade.js\"\nimport type { GroupInfo, ReceivedGroupInvitation } from \"../../../entities/sys/TypeRefs.js\"\nimport { GroupInfoTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport type { ShareCapability } from \"../../../common/TutanotaConstants.js\"\nimport type { GroupInvitationPostData, GroupInvitationPostReturn, InternalRecipientKeyData } from \"../../../entities/tutanota/TypeRefs.js\"\nimport {\n\tcreateGroupInvitationDeleteData,\n\tcreateGroupInvitationPostData,\n\tcreateGroupInvitationPutData,\n\tcreateSharedGroupData,\n\tInternalRecipientKeyDataTypeRef,\n} from \"../../../entities/tutanota/TypeRefs.js\"\nimport { isSameTypeRef, neverNull } from \"@tutao/tutanota-utils\"\nimport { RecipientsNotFoundError } from \"../../../common/error/RecipientsNotFoundError.js\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport { aes256RandomKey, bitArrayToUint8Array, encryptKey, uint8ArrayToBitArray } from \"@tutao/tutanota-crypto\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { GroupInvitationService } from \"../../../entities/tutanota/Services.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { EntityClient } from \"../../../common/EntityClient.js\"\nimport { KeyLoaderFacade } from \"../KeyLoaderFacade.js\"\nimport { encryptBytes, encryptKeyWithVersionedKey, encryptString, VersionedKey } from \"../../crypto/CryptoWrapper.js\"\n\nassertWorkerOrNode()\n\nexport class ShareFacade {\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly cryptoFacade: CryptoFacade,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t) {}\n\n\tasync sendGroupInvitation(\n\t\tsharedGroupInfo: GroupInfo,\n\t\trecipientMailAddresses: Array<string>,\n\t\tshareCapability: ShareCapability,\n\t): Promise<GroupInvitationPostReturn> {\n\t\tconst sharedGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(sharedGroupInfo.group)\n\t\tconst invitationData = await this.prepareGroupInvitation(sharedGroupKey, sharedGroupInfo, recipientMailAddresses, shareCapability)\n\t\treturn this.sendGroupInvitationRequest(invitationData)\n\t}\n\n\tasync sendGroupInvitationRequest(invitationData: GroupInvitationPostData): Promise<GroupInvitationPostReturn> {\n\t\treturn this.serviceExecutor.post(GroupInvitationService, invitationData)\n\t}\n\n\tasync prepareGroupInvitation(\n\t\tsharedGroupKey: VersionedKey,\n\t\tsharedGroupInfo: GroupInfo,\n\t\trecipientMailAddresses: Array<string>,\n\t\tshareCapability: ShareCapability,\n\t): Promise<GroupInvitationPostData> {\n\t\tconst userGroupInfo = await this.entityClient.load(GroupInfoTypeRef, this.userFacade.getLoggedInUser().userGroup.groupInfo)\n\t\tconst userGroupInfoSessionKey = await this.cryptoFacade.resolveSessionKeyForInstance(userGroupInfo)\n\t\tconst sharedGroupInfoSessionKey = await this.cryptoFacade.resolveSessionKeyForInstance(sharedGroupInfo)\n\t\tconst bucketKey = aes256RandomKey()\n\t\tconst invitationSessionKey = aes256RandomKey()\n\t\tconst sharedGroupEncInviterGroupInfoKey = encryptKeyWithVersionedKey(sharedGroupKey, neverNull(userGroupInfoSessionKey))\n\t\tconst sharedGroupEncSharedGroupInfoKey = encryptKeyWithVersionedKey(sharedGroupKey, neverNull(sharedGroupInfoSessionKey))\n\t\tconst sharedGroupData = createSharedGroupData({\n\t\t\tsessionEncInviterName: encryptString(invitationSessionKey, userGroupInfo.name),\n\t\t\tsessionEncSharedGroupKey: encryptBytes(invitationSessionKey, bitArrayToUint8Array(sharedGroupKey.object)),\n\t\t\tsessionEncSharedGroupName: encryptString(invitationSessionKey, sharedGroupInfo.name),\n\t\t\tbucketEncInvitationSessionKey: encryptKey(bucketKey, invitationSessionKey),\n\t\t\tcapability: shareCapability,\n\t\t\tsharedGroup: sharedGroupInfo.group,\n\t\t\tsharedGroupEncInviterGroupInfoKey: sharedGroupEncInviterGroupInfoKey.key,\n\t\t\tsharedGroupEncSharedGroupInfoKey: sharedGroupEncSharedGroupInfoKey.key,\n\t\t\tsharedGroupKeyVersion: String(sharedGroupKey.version),\n\t\t})\n\t\tconst invitationData = createGroupInvitationPostData({\n\t\t\tsharedGroupData,\n\t\t\tinternalKeyData: [],\n\t\t})\n\t\tconst notFoundRecipients: Array<string> = []\n\n\t\tfor (let mailAddress of recipientMailAddresses) {\n\t\t\tconst keyData = await this.cryptoFacade.encryptBucketKeyForInternalRecipient(userGroupInfo.group, bucketKey, mailAddress, notFoundRecipients)\n\t\t\tif (keyData && isSameTypeRef(keyData._type, InternalRecipientKeyDataTypeRef)) {\n\t\t\t\tinvitationData.internalKeyData.push(keyData as InternalRecipientKeyData)\n\t\t\t}\n\t\t}\n\n\t\tif (notFoundRecipients.length > 0) {\n\t\t\tthrow new RecipientsNotFoundError(notFoundRecipients.join(\"\\n\"))\n\t\t}\n\t\treturn invitationData\n\t}\n\n\tasync acceptGroupInvitation(invitation: ReceivedGroupInvitation): Promise<void> {\n\t\tconst userGroupInfo = await this.entityClient.load(GroupInfoTypeRef, this.userFacade.getLoggedInUser().userGroup.groupInfo)\n\t\tconst userGroupInfoSessionKey = await this.cryptoFacade.resolveSessionKeyForInstance(userGroupInfo)\n\t\tconst sharedGroupKey = { object: uint8ArrayToBitArray(invitation.sharedGroupKey), version: Number(invitation.sharedGroupKeyVersion) }\n\t\tconst userGroupKey = this.userFacade.getCurrentUserGroupKey()\n\t\tconst userGroupEncGroupKey = encryptKeyWithVersionedKey(userGroupKey, sharedGroupKey.object)\n\t\tconst sharedGroupEncInviteeGroupInfoKey = encryptKeyWithVersionedKey(sharedGroupKey, neverNull(userGroupInfoSessionKey))\n\t\tconst serviceData = createGroupInvitationPutData({\n\t\t\treceivedInvitation: invitation._id,\n\t\t\tuserGroupEncGroupKey: userGroupEncGroupKey.key,\n\t\t\tsharedGroupEncInviteeGroupInfoKey: sharedGroupEncInviteeGroupInfoKey.key,\n\t\t\tuserGroupKeyVersion: userGroupEncGroupKey.encryptingKeyVersion.toString(),\n\t\t\tsharedGroupKeyVersion: sharedGroupEncInviteeGroupInfoKey.encryptingKeyVersion.toString(),\n\t\t})\n\t\tawait this.serviceExecutor.put(GroupInvitationService, serviceData)\n\t}\n\n\tasync rejectOrCancelGroupInvitation(receivedGroupInvitationId: IdTuple): Promise<void> {\n\t\tconst serviceData = createGroupInvitationDeleteData({\n\t\t\treceivedInvitation: receivedGroupInvitationId,\n\t\t})\n\t\tawait this.serviceExecutor.delete(GroupInvitationService, serviceData)\n\t}\n}\n"],"mappings":"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"}