{"version":3,"file":"RsaApp-BXy_tFBC.js","names":["nativeCryptoFacade: NativeCryptoFacade","rng: Randomizer","publicKey: RsaPublicKey","bytes: Uint8Array","privateKey: RsaPrivateKey"],"sources":["../../src/common/native/worker/RsaApp.ts"],"sourcesContent":["import type { Randomizer, RsaPrivateKey, RsaPublicKey } from \"@tutao/tutanota-crypto\"\nimport type { RsaImplementation } from \"../../api/worker/crypto/RsaImplementation\"\nimport { NativeCryptoFacade } from \"../common/generatedipc/NativeCryptoFacade\"\n\nexport class RsaApp implements RsaImplementation {\n\tconstructor(private readonly nativeCryptoFacade: NativeCryptoFacade, private readonly rng: Randomizer) {}\n\n\t/**\n\t * Encrypt bytes with the provided publicKey\n\t */\n\tasync encrypt(publicKey: RsaPublicKey, bytes: Uint8Array): Promise<Uint8Array> {\n\t\tconst seed = this.rng.generateRandomData(32)\n\n\t\treturn await this.nativeCryptoFacade.rsaEncrypt(publicKey, bytes, seed)\n\t}\n\n\t/**\n\t * Decrypt bytes with the provided privateKey\n\t */\n\tasync decrypt(privateKey: RsaPrivateKey, bytes: Uint8Array): Promise<Uint8Array> {\n\t\treturn await this.nativeCryptoFacade.rsaDecrypt(privateKey, bytes)\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIa,SAAN,MAA0C;CAChD,YAA6BA,oBAAyDC,KAAiB;EAkBvG,KAlB6B;EAkB5B,KAlBqF;CAAmB;;;;CAKzG,MAAM,QAAQC,WAAyBC,OAAwC;EAC9E,MAAM,OAAO,KAAK,IAAI,mBAAmB,GAAG;AAE5C,SAAO,MAAM,KAAK,mBAAmB,WAAW,WAAW,OAAO,KAAK;CACvE;;;;CAKD,MAAM,QAAQC,YAA2BD,OAAwC;AAChF,SAAO,MAAM,KAAK,mBAAmB,WAAW,YAAY,MAAM;CAClE;AACD"}