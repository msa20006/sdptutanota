{"version":3,"file":"PdfWriter-D8FBjFbc.js","names":["objectNumber: number","objectDictionary: Map<string, PdfDictValue>","map: Map<string, string>","bytePosition: number","textEncoder: TextEncoder","objectNumber: number","objectDictionary: Map<string, PdfDictValue>","stream: Uint8Array","streamEncoding: PdfStreamEncoding","textEncoder: TextEncoder","textEncoder: TextEncoder","customFetch: GlobalFetch | undefined","objectDictionary: Map<string, PdfDictValue>","refId: string","stream: Uint8Array","streamEncoding: PdfStreamEncoding","identifier: string","objDictionary: Map<string, PdfDictValue>","value: PdfDictValue","objectReference: PdfObjectRef","objectReferences: PdfDictValue[]","objectReferenceDict: Map<string, PdfDictValue>","object: PdfObject","encodedObject: Uint8Array","encodedObjects: Uint8Array[]"],"sources":["../../src/common/api/worker/pdf/PdfObject.ts","../../src/common/api/worker/pdf/PdfStreamObject.ts","../../src/common/api/worker/pdf/PdfWriter.ts"],"sourcesContent":["import { GENERATION_NUMBER, NEW_LINE, PdfDictValue } from \"./PdfConstants.js\"\n\n/**\n * Class representing objects in PDF.\n * Holds data in form of an associative array which mirror the actual PDF object's \"object dictionary\"\n */\nexport class PdfObject {\n\tprotected readonly objectNumber: number\n\tprotected bytePosition: number = -1\n\tprotected objectDictionary: Map<string, PdfDictValue> = new Map<string, PdfDictValue>()\n\n\tconstructor(objectNumber: number, objectDictionary: Map<string, PdfDictValue>) {\n\t\tthis.objectNumber = objectNumber\n\t\tthis.objectDictionary = objectDictionary\n\t}\n\n\tpublic getDictionary(): Map<string, PdfDictValue> {\n\t\treturn this.objectDictionary\n\t}\n\n\tpublic getObjectNumber() {\n\t\treturn this.objectNumber\n\t}\n\n\tpublic getBytePosition(): number {\n\t\treturn this.bytePosition\n\t}\n\n\t/**\n\t * Set the dictionary of the object to be one with all references resolved (string, string)\n\t */\n\tpublic setResolvedDictionary(map: Map<string, string>) {\n\t\tthis.objectDictionary = map\n\t}\n\n\t/**\n\t * Set the byte-position of the object which is the byte in the PDF file at which the object's declaration starts\n\t */\n\tpublic setBytePosition(bytePosition: number) {\n\t\tthis.bytePosition = bytePosition\n\t}\n\n\t/**\n\t * Encode the object into a Uint8Array to enable writing it into a buffer / file\n\t * @param textEncoder\n\t */\n\tpublic encodeToUInt8Array(textEncoder: TextEncoder): Uint8Array {\n\t\treturn new Uint8Array([...textEncoder.encode(this.parseObjectHead()), ...textEncoder.encode(this.parseObjectTail())])\n\t}\n\n\t/**\n\t * Convert the object's head data into PDF syntax\n\t */\n\tpublic parseObjectHead(): string {\n\t\tlet head = `${this.objectNumber} ${GENERATION_NUMBER} obj${NEW_LINE}<<${NEW_LINE}`\n\t\tfor (const [key, val] of this.objectDictionary) {\n\t\t\tif (typeof val !== \"string\")\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Unresolved reference in object: ${this.objectNumber}. Unresolved reference found as value of: \"${key}\". Cannot encode an object that has unresolved references, aborting...`,\n\t\t\t\t)\n\t\t\thead += `/${key} ${val}`\n\t\t}\n\t\thead += `${NEW_LINE}>>${NEW_LINE}`\n\t\treturn head\n\t}\n\n\t/**\n\t * Convert the object's tail data into PDF syntax\n\t */\n\tpublic parseObjectTail(): string {\n\t\treturn `endobj${NEW_LINE}`\n\t}\n}\n","import { PdfObject } from \"./PdfObject.js\"\nimport { GENERATION_NUMBER, NEW_LINE, PdfDictValue, PdfStreamEncoding } from \"./PdfConstants.js\"\n\n/**\n * PDF object with an additional stream.\n * The stream requires different encoding syntax\n */\nexport class PdfStreamObject extends PdfObject {\n\tprivate readonly stream: Uint8Array\n\n\tconstructor(objectNumber: number, objectDictionary: Map<string, PdfDictValue>, stream: Uint8Array, streamEncoding: PdfStreamEncoding) {\n\t\tsuper(objectNumber, objectDictionary)\n\t\tthis.stream = stream\n\t\tif (streamEncoding !== \"NONE\") {\n\t\t\tthis.objectDictionary.set(\"Filter\", streamEncoding)\n\t\t}\n\t\tthis.objectDictionary.set(\"Length\", stream.byteLength.toString())\n\t}\n\n\tpublic encodeToUInt8Array(textEncoder: TextEncoder): Uint8Array {\n\t\treturn new Uint8Array([...textEncoder.encode(this.parseObjectHead()), ...this.stream, ...textEncoder.encode(this.parseObjectTail())])\n\t}\n\n\tpublic parseObjectHead(): string {\n\t\tlet head = `${this.objectNumber} ${GENERATION_NUMBER} obj${NEW_LINE}<<${NEW_LINE}`\n\t\tfor (const [key, val] of this.objectDictionary) {\n\t\t\thead += `/${key} ${val}`\n\t\t}\n\t\thead += `${NEW_LINE}>>${NEW_LINE}stream${NEW_LINE}`\n\t\treturn head\n\t}\n\n\tpublic parseObjectTail(): string {\n\t\treturn `${NEW_LINE}endstream${NEW_LINE}endobj${NEW_LINE}`\n\t}\n}\n","import { PdfObject } from \"./PdfObject.js\"\nimport { GENERATION_NUMBER, NEW_LINE, PDF_DEFAULT_OBJECTS, PDF_METADATA, PdfDictValue, PdfObjectRef, PdfStreamEncoding } from \"./PdfConstants.js\"\nimport { PdfStreamObject } from \"./PdfStreamObject.js\"\nimport { concat, hexToUint8Array } from \"@tutao/tutanota-utils\"\nimport { Deflater } from \"./Deflater.js\"\nimport { ProgrammingError } from \"../../common/error/ProgrammingError.js\"\n\n// Binary header specifying the PDF version (2.0 = \"322e30\") and the fact that binary data is present in the file\nconst PDF_HEADER = hexToUint8Array(\"255044462d322e300a25e2e3cfd30a\")\n// Special PDF object with number 0. Only appears in xref table\nconst ZERO_OBJECT_ENTRY = \"0000000000 65535 f\"\n\ntype GlobalFetch = typeof global.fetch\n\n/**\n * Object which manages the low-level building of a PDF document by managing objects and their relation to each other.\n * For high-level functionality see \"PdfDocument\" class\n */\nexport class PdfWriter {\n\tprivate readonly textEncoder: TextEncoder\n\tprivate readonly customFetch: GlobalFetch | undefined\n\tprivate readonly deflater: Deflater\n\tprivate byteLengthPosition = PDF_HEADER.byteLength\n\tprivate pdfObjectList: PdfObject[] = []\n\tprivate referenceTable: Map<string, PdfObject> = new Map<string, PdfObject>()\n\tprivate cachedResources: ArrayBuffer[] | undefined\n\n\tconstructor(textEncoder: TextEncoder, customFetch: GlobalFetch | undefined) {\n\t\tthis.textEncoder = textEncoder\n\t\tthis.customFetch = customFetch\n\t\tthis.deflater = new Deflater()\n\t\tthis.cachedResources = undefined\n\t}\n\n\t/**\n\t * Add all PDF default objects to this writer that are necessary for any functioning document, see \"PdfConstants\"\n\t */\n\tsetupDefaultObjects() {\n\t\tfor (const object of PDF_DEFAULT_OBJECTS) {\n\t\t\tthis.createObject(object.dictionary, object.refId)\n\t\t}\n\t}\n\n\t/**\n\t * Create a new PDF object\n\t * @param objectDictionary Map of the object dictionary\n\t * @param refId ID by which other objects can reference this object\n\t */\n\tcreateObject(objectDictionary: Map<string, PdfDictValue>, refId: string = \"\"): void {\n\t\tif (this.referenceTable.has(refId)) {\n\t\t\tthrow new ProgrammingError(`already defined object refId ${refId}`)\n\t\t}\n\t\tconst obj = new PdfObject(this.pdfObjectList.length + 1, objectDictionary)\n\t\tif (refId.length > 0) {\n\t\t\tthis.referenceTable.set(refId, obj)\n\t\t}\n\t\tthis.pdfObjectList.push(obj)\n\t}\n\n\t/**\n\t * Create a new PDF object with stream data\n\t * @param objectDictionary Map of the object dictionary. Must not provide stream-specific data\n\t * @param stream The stream of the object\n\t * @param streamEncoding The encoding of the stream\n\t * @param refId ID by which other objects can reference this object\n\t */\n\tcreateStreamObject(objectDictionary: Map<string, PdfDictValue>, stream: Uint8Array, streamEncoding: PdfStreamEncoding, refId: string = \"\"): void {\n\t\tif (this.referenceTable.has(refId)) {\n\t\t\tthrow new ProgrammingError(`already defined stream refId ${refId}`)\n\t\t}\n\t\tconst obj = new PdfStreamObject(this.pdfObjectList.length + 1, objectDictionary, stream, streamEncoding)\n\t\tif (refId.length > 0) {\n\t\t\tthis.referenceTable.set(refId, obj)\n\t\t}\n\t\tthis.pdfObjectList.push(obj)\n\t}\n\n\t/**\n\t * Get a PDF object added to this writer by its ID\n\t * @param refId The id of the desired object\n\t */\n\tgetObjectByRefId(refId: string): PdfObject {\n\t\tconst obj = this.referenceTable.get(refId)\n\t\tif (obj != null) {\n\t\t\treturn obj\n\t\t} else {\n\t\t\tthrow new Error(`Invalid ReferenceId: ${refId}. No object was found that has this refId. Reference can't be resolved, aborting...`)\n\t\t}\n\t}\n\n\t/**\n\t * Write the cross-reference table of the PDF which is a special object lookup table for PDF readers\n\t */\n\tmakeXRefTable(): string {\n\t\tlet xref = `xref${NEW_LINE}0 ${this.pdfObjectList.length + 1}${NEW_LINE}${ZERO_OBJECT_ENTRY} ${NEW_LINE}`\n\t\tfor (const pdfObject of this.pdfObjectList) {\n\t\t\tif (pdfObject.getBytePosition() === -1) throw new Error(`Found an object with invalid byte-position! ${pdfObject.getObjectNumber()}`)\n\t\t\t// Replace the \"0000000000\" value with the byte-position but keep all leading zeros\n\t\t\txref += `${(\"0000000000\" + pdfObject.getBytePosition()).slice(-10)} 00000 n ${NEW_LINE}`\n\t\t}\n\t\treturn xref\n\t}\n\n\t/**\n\t * Write the trailer of the PDF which is a special object pointing at the \"Catalog object\" and additional metadata\n\t * @param identifier A preferably unique string\n\t */\n\tmakeTrailer(identifier: string): string {\n\t\tlet trailer = `trailer${NEW_LINE}<<${NEW_LINE}`\n\t\ttrailer += `/Size ${this.pdfObjectList.length + 1}`\n\t\ttrailer += `/Root ${this.pdfReferenceToString({ refId: \"CATALOG\" })}`\n\t\ttrailer += `/ID [(${identifier})(${identifier})]`\n\t\ttrailer += `${NEW_LINE}>>${NEW_LINE}startxref${NEW_LINE}${this.byteLengthPosition}${NEW_LINE}%%EOF`\n\t\treturn trailer\n\t}\n\n\t/**\n\t * Resolve all references to other objects in a PDF dictionary\n\t * This replaces every refId with the string \"objNumber 0 R\" which is PDF syntax for referencing other objects\n\t * Returns the PDF dictionary as Map of <string, string> allowing it to be encoded\n\t * @param objDictionary The dictionary t\n\t */\n\tresolveReferences(objDictionary: Map<string, PdfDictValue>): Map<string, string> {\n\t\tconst newMap = new Map<string, string>()\n\t\tfor (const [key, value] of objDictionary) {\n\t\t\tnewMap.set(key, this.resolveDictValue(value))\n\t\t}\n\t\treturn newMap\n\t}\n\n\t/**\n\t * Resolve a PdfDictValue into its string equivalent\n\t * @param value Value to resolve\n\t */\n\tresolveDictValue(value: PdfDictValue): string {\n\t\tif (typeof value !== \"string\") {\n\t\t\tif (value instanceof Map) {\n\t\t\t\t// Value is a nested directory, recursively resolve all references in the nested directory and convert to string\n\t\t\t\treturn this.pdfDictionaryToString(value)\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t// Value is a list, iterate over all elements, resolve them if necessary and convert to string\n\t\t\t\treturn this.pdfListToString(value)\n\t\t\t} else {\n\t\t\t\t// Value is a singular reference, resolve it into a string\n\t\t\t\treturn this.pdfReferenceToString(value)\n\t\t\t}\n\t\t} else {\n\t\t\t// Value is a string, keep it\n\t\t\treturn value\n\t\t}\n\t}\n\n\tpdfReferenceToString(objectReference: PdfObjectRef): string {\n\t\tconst referencedObject = this.getObjectByRefId(objectReference.refId)\n\t\treturn `${referencedObject.getObjectNumber()} ${GENERATION_NUMBER} R`\n\t}\n\n\tpdfListToString(objectReferences: PdfDictValue[]): string {\n\t\tlet referenceString = \"[\" + \" \"\n\t\tfor (const objRef of objectReferences) {\n\t\t\treferenceString += this.resolveDictValue(objRef) + \" \"\n\t\t}\n\t\treferenceString += \"]\"\n\t\treturn referenceString\n\t}\n\n\tpdfDictionaryToString(objectReferenceDict: Map<string, PdfDictValue>): string {\n\t\tlet referenceString = \"<<\" + \" \"\n\t\tfor (const [key, value] of objectReferenceDict) {\n\t\t\treferenceString += `/${key} ${this.resolveDictValue(value)} `\n\t\t}\n\t\treferenceString += \">>\"\n\t\treturn referenceString\n\t}\n\n\t/**\n\t * Calculate the byte-position for a given object\n\t * @param object The object that should have its byte-position be calculated\n\t * @param encodedObject The provided object in encoded format to allow calculation for the next object\n\t */\n\tcalculateBytePositions(object: PdfObject, encodedObject: Uint8Array) {\n\t\tobject.setBytePosition(this.byteLengthPosition)\n\t\tthis.byteLengthPosition += encodedObject.byteLength\n\t}\n\n\t/**\n\t * Add all resource objects (stream objects) to the PDF. These are referenced by the \"default objects\" but need to be dynamically generated because they\n\t * include a huge amount of stream data / need to read their stream data in from external resources (base64 encoded)\n\t */\n\tasync setupResourceObjects() {\n\t\tconst baseUrl = typeof location === \"undefined\" ? \"\" : location.protocol + \"//\" + location.hostname + (location.port ? \":\" + location.port : \"\")\n\t\tif (!this.cachedResources) {\n\t\t\tthis.cachedResources = await Promise.all(\n\t\t\t\t[\"/pdf/SourceSans3-Regular.ttf\", \"/pdf/SourceSans3-Bold.ttf\", \"/pdf/sRGB2014.icc\", \"/pdf/identity_h.cmap\", \"/pdf/tutanota_logo_en.jpg\"].map(\n\t\t\t\t\t(url) =>\n\t\t\t\t\t\ttypeof this.customFetch !== \"undefined\"\n\t\t\t\t\t\t\t? this.customFetch(baseUrl + url).then((r) => r.arrayBuffer())\n\t\t\t\t\t\t\t: fetch(baseUrl + url).then((r) => r.arrayBuffer()),\n\t\t\t\t),\n\t\t\t)\n\t\t}\n\t\tconst [fontRegular, fontBold, colorProfile, cmap, tutaImage] = this.cachedResources\n\n\t\t// Regular font file\n\t\tthis.createStreamObject(\n\t\t\tnew Map([[\"Length1\", fontRegular.byteLength.toString()]]),\n\t\t\tawait this.deflater.deflate(fontRegular),\n\t\t\tPdfStreamEncoding.FLATE,\n\t\t\t\"FONT_REGULAR_FILE\",\n\t\t)\n\t\t// Bold font file\n\t\tthis.createStreamObject(\n\t\t\tnew Map([[\"Length1\", fontBold.byteLength.toString()]]),\n\t\t\tawait this.deflater.deflate(fontBold),\n\t\t\tPdfStreamEncoding.FLATE,\n\t\t\t\"FONT_BOLD_FILE\",\n\t\t)\n\t\t// Identity CMap\n\t\tthis.createStreamObject(\n\t\t\tnew Map([\n\t\t\t\t[\"Type\", \"/CMap\"],\n\t\t\t\t[\"CMapName\", \"/Identity-H \"],\n\t\t\t\t[\"CIDSystemInfo\", \"<< /Registry (Adobe) /Ordering (Identity) /Supplement 0 >>\"],\n\t\t\t]),\n\t\t\tawait this.deflater.deflate(cmap),\n\t\t\tPdfStreamEncoding.FLATE,\n\t\t\t\"CMAP\",\n\t\t)\n\t\t// Color profile\n\t\tthis.createStreamObject(\n\t\t\tnew Map([\n\t\t\t\t[\"Length1\", colorProfile.byteLength.toString()],\n\t\t\t\t[\"N\", \"3\"],\n\t\t\t]),\n\t\t\tawait this.deflater.deflate(colorProfile),\n\t\t\tPdfStreamEncoding.FLATE,\n\t\t\t\"DEST_OUTPUT_PROFILE\",\n\t\t)\n\t\t// Tuta logo as raster image\n\t\tthis.createStreamObject(\n\t\t\tnew Map([\n\t\t\t\t[\"Name\", \"/Im1\"],\n\t\t\t\t[\"Type\", \"/XObject\"],\n\t\t\t\t[\"Subtype\", \"/Image\"],\n\t\t\t\t[\"Width\", \"600\"],\n\t\t\t\t[\"Height\", \"209\"],\n\t\t\t\t[\"BitsPerComponent\", \"8\"],\n\t\t\t\t[\"ColorSpace\", \"/DeviceRGB\"],\n\t\t\t]),\n\t\t\tnew Uint8Array(tutaImage),\n\t\t\tPdfStreamEncoding.DCT,\n\t\t\t\"IMG_TUTA_LOGO\",\n\t\t)\n\t\t// Metadata\n\t\tconst todayDate = new Date()\n\t\tconst metaData = PDF_METADATA.replace(\"{slotCreateDate}\", todayDate.toISOString()).replace(\"{slotModifyDate}\", todayDate.toISOString())\n\t\tthis.createStreamObject(\n\t\t\tnew Map([\n\t\t\t\t[\"Type\", \"/Metadata\"],\n\t\t\t\t[\"Subtype\", \"/XML\"],\n\t\t\t]),\n\t\t\tnew Uint8Array(this.textEncoder.encode(metaData)),\n\t\t\tPdfStreamEncoding.NONE,\n\t\t\t\"METADATA\",\n\t\t)\n\t}\n\n\t/**\n\t * Writes the PDF file and return its entire data as a Uint8Array\n\t * @pre baseUrl must be defined\n\t */\n\tasync writePdfFile(): Promise<Uint8Array> {\n\t\t// Set up the objects requiring external resources last\n\t\tawait this.setupResourceObjects()\n\n\t\t// Encode all components of the file into uint8arrays for writing\n\t\tconst encodedObjects: Uint8Array[] = []\n\t\tencodedObjects.push(PDF_HEADER) // Header is written at the top of the file\n\t\tfor (const obj of this.pdfObjectList) {\n\t\t\t// Body includes all objects and streams\n\t\t\tobj.setResolvedDictionary(this.resolveReferences(obj.getDictionary())) // With all objects present, resolve all their references\n\t\t\tconst encodedObject = obj.encodeToUInt8Array(this.textEncoder) // Encode the object to uint8array\n\t\t\tthis.calculateBytePositions(obj, encodedObject) // Calculate the objects byte-position by considering its encoded form\n\t\t\tencodedObjects.push(encodedObject)\n\t\t}\n\t\tencodedObjects.push(this.textEncoder.encode(this.makeXRefTable())) // Make xref table which requires all object's calculated byte-positions\n\t\tencodedObjects.push(this.textEncoder.encode(this.makeTrailer(Date.now().toString()))) // Make trailer\n\n\t\treturn concat(...encodedObjects)\n\t}\n}\n"],"mappings":"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"}