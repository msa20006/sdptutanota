{"version":3,"file":"ChangePasswordDialogs-DmsK7o8b.js","names":["currentUser: User","newPasswordData: {\n\t\tnewEncryptedPassphrase: Base64\n\t\tnewEncryptedPassphraseKey: Uint8Array\n\t} | null","allowCancel: boolean","dialog: Dialog"],"sources":["../../src/common/settings/login/ChangePasswordDialogs.ts"],"sourcesContent":["import { User } from \"../../api/entities/sys/TypeRefs.js\"\nimport { Dialog } from \"../../gui/base/Dialog.js\"\nimport { locator } from \"../../api/main/CommonLocator.js\"\nimport { showProgressDialog } from \"../../gui/dialogs/ProgressDialog.js\"\nimport { lang } from \"../../misc/LanguageViewModel.js\"\nimport m from \"mithril\"\nimport { NotAuthenticatedError } from \"../../api/common/error/RestError.js\"\nimport { PasswordForm, PasswordModel } from \"../PasswordForm.js\"\nimport { assertNonNull, assertNotNull, Base64, ofClass } from \"@tutao/tutanota-utils\"\nimport { asKdfType, DEFAULT_KDF_TYPE } from \"../../api/common/TutanotaConstants.js\"\n\n/**\n *The admin does not have to enter the old password in addition to the new password (twice). The password strength is not enforced.\n */\nexport async function showChangeUserPasswordAsAdminDialog(user: User) {\n\tconst model = new PasswordModel(locator.usageTestController, locator.logins, { checkOldPassword: false, enforceStrength: false, hideConfirmation: true })\n\n\tconst changeUserPasswordAsAdminOkAction = async (dialog: Dialog) => {\n\t\tshowProgressDialog(\"pleaseWait_msg\", locator.userManagementFacade.changeUserPassword(user, model.getNewPassword())).then(\n\t\t\t() => {\n\t\t\t\tDialog.message(\"pwChangeValid_msg\")\n\t\t\t\tdialog.close()\n\t\t\t},\n\t\t\t(e) => {\n\t\t\t\tconsole.error(e)\n\t\t\t\tDialog.message(\"passwordResetFailed_msg\")\n\t\t\t},\n\t\t)\n\t}\n\n\tDialog.showActionDialog({\n\t\ttitle: \"changePassword_label\",\n\t\tchild: () => m(PasswordForm, { model }),\n\t\tvalidator: () => model.getErrorMessageId(),\n\t\tokAction: changeUserPasswordAsAdminOkAction,\n\t})\n}\n\nasync function storeNewPassword(\n\tcurrentUser: User,\n\tnewPasswordData: {\n\t\tnewEncryptedPassphrase: Base64\n\t\tnewEncryptedPassphraseKey: Uint8Array\n\t} | null,\n) {\n\tconst credentialsProvider = locator.credentialsProvider\n\tconst storedCredentials = await credentialsProvider.getCredentialsInfoByUserId(currentUser._id)\n\tif (storedCredentials != null) {\n\t\tassertNonNull(newPasswordData, \"encrypted password data is not provided\")\n\t\tawait credentialsProvider.replacePassword(storedCredentials, newPasswordData.newEncryptedPassphrase, newPasswordData.newEncryptedPassphraseKey)\n\t}\n}\n\n/**\n * The user must enter the old password in addition to the new password (twice). The password strength is enforced.\n */\nexport async function showChangeOwnPasswordDialog(allowCancel: boolean = true) {\n\tconst model = new PasswordModel(locator.usageTestController, locator.logins, { checkOldPassword: true, enforceStrength: true })\n\n\tconst changeOwnPasswordOkAction = async (dialog: Dialog) => {\n\t\tconst error = model.getErrorMessageId()\n\n\t\tif (error) {\n\t\t\tDialog.message(error)\n\t\t} else {\n\t\t\tconst currentUser = locator.logins.getUserController().user\n\t\t\tconst currentKdfType = asKdfType(currentUser.kdfVersion)\n\t\t\tconst currentPasswordKeyData = {\n\t\t\t\tkdfType: currentKdfType,\n\t\t\t\tsalt: assertNotNull(currentUser.salt),\n\t\t\t\tpassphrase: model.getOldPassword(),\n\t\t\t}\n\n\t\t\tconst newPasswordKeyData = {\n\t\t\t\tkdfType: DEFAULT_KDF_TYPE,\n\t\t\t\tpassphrase: model.getNewPassword(),\n\t\t\t}\n\n\t\t\tshowProgressDialog(\"pleaseWait_msg\", locator.loginFacade.changePassword(currentPasswordKeyData, newPasswordKeyData))\n\t\t\t\t.then((newPasswordData) => {\n\t\t\t\t\tDialog.message(\"pwChangeValid_msg\")\n\t\t\t\t\tdialog.close()\n\t\t\t\t\t// do not wait for it or catch the errors, we do not want to confuse the user with the password change if anything goes wrong\n\t\t\t\t\tstoreNewPassword(currentUser, newPasswordData)\n\t\t\t\t})\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(NotAuthenticatedError, (e) => {\n\t\t\t\t\t\tDialog.message(\"oldPasswordInvalid_msg\")\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tDialog.message(\"passwordResetFailed_msg\")\n\t\t\t\t})\n\t\t}\n\t}\n\n\tDialog.showActionDialog({\n\t\ttitle: \"changePassword_label\",\n\t\tchild: () => m(PasswordForm, { model }),\n\t\tvalidator: () => model.getErrorMessageId(),\n\t\tokAction: changeOwnPasswordOkAction,\n\t\tallowCancel: allowCancel,\n\t})\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,eAAe,iBACdA,aACAC,iBAIC;CACD,MAAM,sBAAsB,QAAQ;CACpC,MAAM,oBAAoB,MAAM,oBAAoB,2BAA2B,YAAY,IAAI;AAC/F,KAAI,qBAAqB,MAAM;AAC9B,gBAAc,iBAAiB,0CAA0C;AACzE,QAAM,oBAAoB,gBAAgB,mBAAmB,gBAAgB,wBAAwB,gBAAgB,0BAA0B;CAC/I;AACD;AAKM,eAAe,4BAA4BC,cAAuB,MAAM;CAC9E,MAAM,QAAQ,IAAI,cAAc,QAAQ,qBAAqB,QAAQ,QAAQ;EAAE,kBAAkB;EAAM,iBAAiB;CAAM;CAE9H,MAAM,4BAA4B,OAAOC,WAAmB;EAC3D,MAAM,QAAQ,MAAM,mBAAmB;AAEvC,MAAI,MACH,QAAO,QAAQ,MAAM;KACf;GACN,MAAM,cAAc,QAAQ,OAAO,mBAAmB,CAAC;GACvD,MAAM,iBAAiB,UAAU,YAAY,WAAW;GACxD,MAAM,yBAAyB;IAC9B,SAAS;IACT,MAAM,cAAc,YAAY,KAAK;IACrC,YAAY,MAAM,gBAAgB;GAClC;GAED,MAAM,qBAAqB;IAC1B,SAAS;IACT,YAAY,MAAM,gBAAgB;GAClC;AAED,sBAAmB,kBAAkB,QAAQ,YAAY,eAAe,wBAAwB,mBAAmB,CAAC,CAClH,KAAK,CAAC,oBAAoB;AAC1B,WAAO,QAAQ,oBAAoB;AACnC,WAAO,OAAO;AAEd,qBAAiB,aAAa,gBAAgB;GAC9C,EAAC,CACD,MACA,QAAQ,uBAAuB,CAAC,MAAM;AACrC,WAAO,QAAQ,yBAAyB;GACxC,EAAC,CACF,CACA,MAAM,CAAC,MAAM;AACb,YAAQ,MAAM,EAAE;AAChB,WAAO,QAAQ,0BAA0B;GACzC,EAAC;EACH;CACD;AAED,QAAO,iBAAiB;EACvB,OAAO;EACP,OAAO,MAAM,gBAAE,cAAc,EAAE,MAAO,EAAC;EACvC,WAAW,MAAM,MAAM,mBAAmB;EAC1C,UAAU;EACG;CACb,EAAC;AACF"}