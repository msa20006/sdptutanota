{"version":3,"file":"LanguageViewModel-BNC5ekpO.js","names":["translationImportMap: Record<LanguageCode, () => Promise<any>>","LanguageNames: Record<string, TranslationKey>","languages: ReadonlyArray<{\n\tcode: LanguageCode\n\ttextId: TranslationKey\n}>","languageNative: ReadonlyArray<{\n\tcode: LanguageCode\n\ttextName: string\n}>","en: object","key: string","text: string","code: LanguageCode","languageTag: string","fallBackTranslations: Record<string, any>","translations: Record<string, any>","lang: { code: LanguageCode; languageTag: string }","lang","tag: string","options: DateTimeFormatOptions","id: TranslationKey","replacements?: Record<string, string | number>","value: MaybeTranslation","testId: string","unresolved: string | lazy<string>","restrictions?: LanguageCode[]","customizations: WhitelabelCustomizations | null","code: string","assertTranslation: (id: string) => TranslationKey","lang: LanguageViewModel"],"sources":["../../src/common/misc/LanguageViewModel.ts"],"sourcesContent":["import { downcast, lazy, typedEntries } from \"@tutao/tutanota-utils\"\nimport type { TranslationKeyType } from \"./TranslationKey\"\nimport { getWhitelabelCustomizations, WhitelabelCustomizations } from \"./WhitelabelCustomizations\"\nimport { assertMainOrNodeBoot } from \"../api/common/Env\"\n\n/**\n * A translation key is a string that maps to a translation text.\n */\nexport type TranslationKey = TranslationKeyType\n\n/**\n * Legacy type that is either a TranslationKey or a Translation.\n * New code should either use TranslationKey or Translation.\n */\nexport type MaybeTranslation = TranslationKey | Translation\n\n/**\n * A Translation is a keyed translation text.\n *\n * Encapsulates a testid and the resolved translation text.\n * The testid is the translation key in most cases, and\n * it is used as data-testid dom attribute for acceptance tests.\n */\nexport type Translation = {\n\ttestId: TranslationKey | string\n\ttext: string\n\n\t// defined to make the Translation type clash with Component.\n\t// This ensures that typscript errors out when we pass a resolved translation\n\t// to the m hyperscript function like m('div', ResolvedTranslation{tkey: \"dummy\", text: \"yeah\"})\n\toninit?: object\n}\nassertMainOrNodeBoot()\nexport type DateTimeFormatOptions = {\n\thourCycle?: \"h11\" | \"h12\" | \"h23\" | \"h24\"\n}\nconst translationImportMap: Record<LanguageCode, () => Promise<any>> = {\n\tar: () => import(\"../../mail-app/translations/ar.js\"),\n\tbe: () => import(\"../../mail-app/translations/be.js\"),\n\tbg: () => import(\"../../mail-app/translations/bg.js\"),\n\tca: () => import(\"../../mail-app/translations/ca.js\"),\n\tcs: () => import(\"../../mail-app/translations/cs.js\"),\n\tda: () => import(\"../../mail-app/translations/da.js\"),\n\tde: () => import(\"../../mail-app/translations/de.js\"),\n\tde_sie: () => import(\"../../mail-app/translations/de_sie.js\"),\n\tel: () => import(\"../../mail-app/translations/el.js\"),\n\ten: () => import(\"../../mail-app/translations/en.js\"),\n\ten_gb: () => import(\"../../mail-app/translations/en.js\"),\n\tes: () => import(\"../../mail-app/translations/es.js\"),\n\tet: () => import(\"../../mail-app/translations/et.js\"),\n\tfa_ir: () => import(\"../../mail-app/translations/fa_ir.js\"),\n\tfi: () => import(\"../../mail-app/translations/fi.js\"),\n\tfr: () => import(\"../../mail-app/translations/fr.js\"),\n\tgl: () => import(\"../../mail-app/translations/gl.js\"),\n\the: () => import(\"../../mail-app/translations/he.js\"),\n\thi: () => import(\"../../mail-app/translations/hi.js\"),\n\thr: () => import(\"../../mail-app/translations/hr.js\"),\n\thu: () => import(\"../../mail-app/translations/hu.js\"),\n\tid: () => import(\"../../mail-app/translations/id.js\"),\n\tit: () => import(\"../../mail-app/translations/it.js\"),\n\tja: () => import(\"../../mail-app/translations/ja.js\"),\n\tko: () => import(\"../../mail-app/translations/ko.js\"),\n\tlt: () => import(\"../../mail-app/translations/lt.js\"),\n\tlv: () => import(\"../../mail-app/translations/lv.js\"),\n\tnl: () => import(\"../../mail-app/translations/nl.js\"),\n\tno: () => import(\"../../mail-app/translations/no.js\"),\n\tpl: () => import(\"../../mail-app/translations/pl.js\"),\n\tpt_br: () => import(\"../../mail-app/translations/pt_br.js\"),\n\tpt_pt: () => import(\"../../mail-app/translations/pt_pt.js\"),\n\tro: () => import(\"../../mail-app/translations/ro.js\"),\n\tru: () => import(\"../../mail-app/translations/ru.js\"),\n\tsi: () => import(\"../../mail-app/translations/si.js\"),\n\tsk: () => import(\"../../mail-app/translations/sk.js\"),\n\tsl: () => import(\"../../mail-app/translations/sl.js\"),\n\tsr_cyrl: () => import(\"../../mail-app/translations/sr_cyrl.js\"),\n\tsv: () => import(\"../../mail-app/translations/sv.js\"),\n\ttr: () => import(\"../../mail-app/translations/tr.js\"),\n\tuk: () => import(\"../../mail-app/translations/uk.js\"),\n\tvi: () => import(\"../../mail-app/translations/vi.js\"),\n\tzh: () => import(\"../../mail-app/translations/zh.js\"),\n\tzh_hant: () => import(\"../../mail-app/translations/zh_hant.js\"),\n}\n\n/**\n * Language = {code, textId}\n * \"code\" is the 2 letter abbr. of the language (\"en\", \"ar\")\n * \"textId\" corresponds to a code (\"languageEnglish_label\", \"languageArabic_label\")\n *\n * lang.get(textId) will return the translated languages\n * languageByCode[code] will return the whole language Object\n * in all cases lang.get(languageByCode[code].textId) will always return the translated language from a code\n */\nexport const LanguageNames: Record<string, TranslationKey> = Object.freeze({\n\tar: \"languageArabic_label\",\n\tbe: \"languageBelarusian_label\",\n\tbg: \"languageBulgarian_label\",\n\tca: \"languageCatalan_label\",\n\tcs: \"languageCzech_label\",\n\tda: \"languageDanish_label\",\n\tde: \"languageGerman_label\",\n\tde_sie: \"languageGermanSie_label\",\n\tel: \"languageGreek_label\",\n\ten: \"languageEnglish_label\",\n\ten_gb: \"languageEnglishUk_label\",\n\tes: \"languageSpanish_label\",\n\tet: \"languageEstonian_label\",\n\tfa_ir: \"languagePersian_label\",\n\tfi: \"languageFinnish_label\",\n\tfr: \"languageFrench_label\",\n\tgl: \"languageGalician_label\",\n\the: \"languageHebrew_label\",\n\thi: \"languageHindi_label\",\n\thr: \"languageCroatian_label\",\n\thu: \"languageHungarian_label\",\n\tid: \"languageIndonesian_label\",\n\tit: \"languageItalian_label\",\n\tja: \"languageJapanese_label\",\n\tko: \"languageKorean_label\",\n\tlt: \"languageLithuanian_label\",\n\tlv: \"languageLatvian_label\",\n\tnl: \"languageDutch_label\",\n\tno: \"languageNorwegian_label\",\n\tpl: \"languagePolish_label\",\n\tpt_br: \"languagePortugeseBrazil_label\",\n\tpt_pt: \"languagePortugesePortugal_label\",\n\tro: \"languageRomanian_label\",\n\tru: \"languageRussian_label\",\n\tsi: \"languageSinhalese_label\",\n\tsk: \"languageSlovak_label\",\n\tsl: \"languageSlovenian_label\",\n\tsr_cyrl: \"languageSerbian_label\",\n\tsv: \"languageSwedish_label\",\n\ttr: \"languageTurkish_label\",\n\tuk: \"languageUkrainian_label\",\n\tvi: \"languageVietnamese_label\",\n\tzh: \"languageChineseSimplified_label\",\n\tzh_hant: \"languageChineseTraditional_label\",\n} as const)\nexport type LanguageCode = keyof typeof LanguageNames\nexport type Language = {\n\tcode: LanguageCode\n\ttextId: TranslationKey\n}\n\nexport const LanguageActualNames = Object.freeze({\n\tar: \"العربية\",\n\tbe: \"Беларуская\",\n\tbg: \"Български\",\n\tca: \"Català\",\n\tcs: \"Čeština\",\n\tda: \"Dansk\",\n\tde: \"Deutsch\",\n\tde_sie: \"Deutsch (Sie)\",\n\tel: \"Ελληνική\",\n\ten: \"English\",\n\ten_gb: \"English (UK)\",\n\tes: \"Español\",\n\tet: \"Eesti keel\",\n\tfa_ir: \"فارسی\",\n\tfi: \"suomi\",\n\tfr: \"Français\",\n\tgl: \"Galego\",\n\the: \"עברית\",\n\thi: \"हिंदी\",\n\thr: \"Hrvatski\",\n\thu: \"Magyar\",\n\tid: \"Indonesia\",\n\tit: \"Italiano\",\n\tja: \"日本語\",\n\tko: \"한국어\",\n\tlt: \"Lietuvių\",\n\tlv: \"Latviešu\",\n\tnl: \"Nederlands\",\n\tno: \"Norsk\",\n\tpl: \"polski\",\n\tpt_br: \"Português, Brasil\",\n\tpt_pt: \"Português, Portugal\",\n\tro: \"Română\",\n\tru: \"Русский\",\n\tsi: \"සිංහල\",\n\tsk: \"Slovenčina\",\n\tsl: \"slovenščina\",\n\tsr_cyrl: \"Srpski\",\n\tsv: \"Svenska\",\n\ttr: \"Türkçe\",\n\tuk: \"Українська\",\n\tvi: \"Tiếng Việt\",\n\tzh: \"简体中文\",\n\tzh_hant: \"繁體中文\",\n} as const)\nexport const languageByCode = {} as Record<LanguageCode, Language>\n\n// cannot import typedEntries here for some reason\nfor (let [code, textId] of downcast(Object.entries(LanguageNames))) {\n\tlanguageByCode[code] = {\n\t\tcode,\n\t\ttextId,\n\t}\n}\n\nexport const languages: ReadonlyArray<{\n\tcode: LanguageCode\n\ttextId: TranslationKey\n}> = typedEntries(LanguageNames).map(([code, textId]) => {\n\treturn {\n\t\tcode,\n\t\ttextId,\n\t}\n})\n\nexport const languageNative: ReadonlyArray<{\n\tcode: LanguageCode\n\ttextName: string\n}> = typedEntries(LanguageActualNames).map(([code, textName]) => {\n\treturn {\n\t\tcode,\n\t\ttextName,\n\t}\n})\n\nexport const enum InfoLink {\n\tHomePage = \"https://tuta.com\",\n\tAbout = \"https://tuta.com/imprint\",\n\t//terms\n\tTerms = \"https://tuta.com/terms\",\n\tPrivacy = \"https://tuta.com/privacy-policy\",\n\tGiftCardsTerms = \"https://tuta.com/giftCardsTerms\",\n\t//faq\n\tRecoverCode = \"https://tuta.com/faq#reset\",\n\tSecondFactor = \"https://tuta.com/faq#2fa\",\n\tSpamRules = \"https://tuta.com/faq#spam\",\n\tDomainInfo = \"https://tuta.com/faq#custom-domain\",\n\tWhitelabel = \"https://tuta.com/faq#whitelabel\",\n\tReferralLink = \"https://tuta.com/faq#refer-a-friend\",\n\tWebview = \"https://tuta.com/faq#webview\",\n\tPhishing = \"https://tuta.com/faq#phishing\",\n\tMailAuth = \"https://tuta.com/faq#mail-auth\",\n\tRunInBackground = \"https://tuta.com/faq#tray-desktop\",\n\tLoadImages = \"https://tuta.com/faq#load-images\",\n\tUsage = \"https://tuta.com/faq#usage\",\n\tDownload = \"https://tuta.com/#download\",\n\tSharedMailboxes = \"https://tuta.com/support/#shared-mailboxes\",\n\tInactiveAccounts = \"https://tuta.com/faq/#inactive-accounts\",\n\tAppStorePaymentChange = \"https://tuta.com/support/#appstore-payment-change\",\n\tAppStorePayment = \"https://tuta.com/support/#appstore-payments\",\n\tAppStoreDowngrade = \"https://tuta.com/support/#appstore-subscription-downgrade\",\n\tPasswordGenerator = \"https://tuta.com/faq#passphrase-generator\",\n\tHomePageFreeSignup = \"https://tuta.com/free-email\",\n}\n\n/**\n * Provides all localizations of strings on our gui.\n *\n * The translations are defined on JSON files. See the folder 'translations' for examples.\n * The actual identifier is camel case and the type is appended by an underscore.\n * Types: label, action, msg, title, alt, placeholder\n *\n * @constructor\n */\nexport class LanguageViewModel {\n\ttranslations: Record<string, any>\n\tfallback: Record<string, any>\n\tcode!: LanguageCode\n\tlanguageTag!: string\n\tstaticTranslations: Record<string, any>\n\tformats!: {\n\t\tsimpleDate: Intl.DateTimeFormat\n\t\tdateWithMonth: Intl.DateTimeFormat\n\t\tdateWithoutYear: Intl.DateTimeFormat\n\t\tsimpleDateWithoutYear: Intl.DateTimeFormat\n\t\tdateWithWeekday: Intl.DateTimeFormat\n\t\tdateWithWeekdayWoMonth: Intl.DateTimeFormat\n\t\tdateWithWeekdayAndYear: Intl.DateTimeFormat\n\t\tdateWithWeekdayAndYearLong: Intl.DateTimeFormat\n\t\tdateWithWeekdayAndTime: Intl.DateTimeFormat\n\t\tweekdayShort: Intl.DateTimeFormat\n\t\tweekdayNarrow: Intl.DateTimeFormat\n\t\ttime: Intl.DateTimeFormat\n\t\tshortTime: Intl.DateTimeFormat\n\t\tdateTime: Intl.DateTimeFormat\n\t\tdateTimeShort: Intl.DateTimeFormat\n\t\tpriceWithCurrency: Intl.NumberFormat\n\t\tpriceWithCurrencyWithoutFractionDigits: Intl.NumberFormat\n\t\tpriceWithoutCurrency: Intl.NumberFormat\n\t\tpriceWithoutCurrencyWithoutFractionDigits: Intl.NumberFormat\n\t\tmonthLong: Intl.DateTimeFormat\n\t\tmonthShort: Intl.DateTimeFormat\n\t\tmonthShortWithFullYear: Intl.DateTimeFormat\n\t\tmonthWithYear: Intl.DateTimeFormat\n\t\tmonthWithFullYear: Intl.DateTimeFormat\n\t\tyearNumeric: Intl.DateTimeFormat\n\t\tshortMonthYear2Digit: Intl.DateTimeFormat\n\t}\n\n\tconstructor() {\n\t\tthis.translations = {}\n\t\tthis.fallback = {}\n\t\tthis.staticTranslations = {}\n\t}\n\n\tinit(en: object): Promise<void> {\n\t\tthis.translations = en\n\t\tthis.fallback = en // always load english as fallback\n\n\t\tthis.code = \"en\"\n\t\tconst language = getLanguage()\n\t\treturn this.setLanguage(language) // Service worker currently caches only English. We don't want the whole app to fail if we cannot fetch the language.\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.warn(\"Could not set language\", language, e)\n\n\t\t\t\tthis._setLanguageTag(\"en-US\")\n\t\t\t})\n\t}\n\n\taddStaticTranslation(key: string, text: string) {\n\t\tthis.staticTranslations[key] = text\n\t}\n\n\tinitWithTranslations(code: LanguageCode, languageTag: string, fallBackTranslations: Record<string, any>, translations: Record<string, any>) {\n\t\tthis.translations = translations\n\t\tthis.fallback = fallBackTranslations\n\t\tthis.code = code\n\t}\n\n\tsetLanguage(lang: { code: LanguageCode; languageTag: string }): Promise<void> {\n\t\tthis._setLanguageTag(lang.languageTag)\n\n\t\tif (this.code === lang.code) {\n\t\t\treturn Promise.resolve()\n\t\t}\n\n\t\t// we don't support multiple language files for en so just use the one and only.\n\t\tconst code: LanguageCode = lang.code.startsWith(\"en\") ? \"en\" : lang.code\n\t\treturn translationImportMap[code]().then((translationsModule) => {\n\t\t\tthis.translations = translationsModule.default\n\t\t\tthis.code = lang.code\n\t\t})\n\t}\n\n\t/**\n\t * must be invoked at startup from LanguageViewModel to initialize all DateTimeFormats\n\t * @param tag\n\t */\n\t_setLanguageTag(tag: string) {\n\t\tthis.languageTag = tag\n\t\tthis.updateFormats({})\n\t}\n\n\tupdateFormats(options: DateTimeFormatOptions) {\n\t\tconst tag = this.languageTag\n\t\tthis.formats = {\n\t\t\tsimpleDate: new Intl.DateTimeFormat(tag, {\n\t\t\t\tday: \"numeric\",\n\t\t\t\tmonth: \"numeric\",\n\t\t\t\tyear: \"numeric\",\n\t\t\t}),\n\t\t\tdateWithMonth: new Intl.DateTimeFormat(tag, {\n\t\t\t\tday: \"numeric\",\n\t\t\t\tmonth: \"short\",\n\t\t\t\tyear: \"numeric\",\n\t\t\t}),\n\t\t\tdateWithoutYear: Intl.DateTimeFormat(tag, {\n\t\t\t\tday: \"numeric\",\n\t\t\t\tmonth: \"short\",\n\t\t\t}),\n\t\t\tsimpleDateWithoutYear: Intl.DateTimeFormat(tag, {\n\t\t\t\tday: \"numeric\",\n\t\t\t\tmonth: \"numeric\",\n\t\t\t}),\n\t\t\tdateWithWeekday: new Intl.DateTimeFormat(tag, {\n\t\t\t\tweekday: \"short\",\n\t\t\t\tday: \"numeric\",\n\t\t\t\tmonth: \"short\",\n\t\t\t}),\n\t\t\tdateWithWeekdayWoMonth: new Intl.DateTimeFormat(tag, {\n\t\t\t\tweekday: \"short\",\n\t\t\t\tday: \"numeric\",\n\t\t\t}),\n\t\t\tdateWithWeekdayAndYear: new Intl.DateTimeFormat(tag, {\n\t\t\t\tweekday: \"short\",\n\t\t\t\tday: \"numeric\",\n\t\t\t\tmonth: \"short\",\n\t\t\t\tyear: \"numeric\",\n\t\t\t}),\n\t\t\tdateWithWeekdayAndYearLong: new Intl.DateTimeFormat(tag, {\n\t\t\t\tweekday: \"long\",\n\t\t\t\tday: \"numeric\",\n\t\t\t\tmonth: \"long\",\n\t\t\t\tyear: \"numeric\",\n\t\t\t}),\n\t\t\tdateWithWeekdayAndTime: new Intl.DateTimeFormat(\n\t\t\t\ttag,\n\t\t\t\tObject.assign(\n\t\t\t\t\t{},\n\t\t\t\t\t{\n\t\t\t\t\t\tweekday: \"short\",\n\t\t\t\t\t\tday: \"numeric\",\n\t\t\t\t\t\tmonth: \"short\",\n\t\t\t\t\t\thour: \"numeric\",\n\t\t\t\t\t\tminute: \"numeric\",\n\t\t\t\t\t} as const,\n\t\t\t\t\toptions,\n\t\t\t\t),\n\t\t\t),\n\t\t\ttime: new Intl.DateTimeFormat(\n\t\t\t\ttag,\n\t\t\t\tObject.assign(\n\t\t\t\t\t{},\n\t\t\t\t\t{\n\t\t\t\t\t\thour: \"numeric\",\n\t\t\t\t\t\tminute: \"numeric\",\n\t\t\t\t\t} as const,\n\t\t\t\t\toptions,\n\t\t\t\t),\n\t\t\t),\n\t\t\tshortTime: new Intl.DateTimeFormat(\n\t\t\t\ttag,\n\t\t\t\tObject.assign(\n\t\t\t\t\t{},\n\t\t\t\t\t{\n\t\t\t\t\t\thour: \"numeric\",\n\t\t\t\t\t} as const,\n\t\t\t\t\toptions,\n\t\t\t\t),\n\t\t\t),\n\t\t\tdateTime: new Intl.DateTimeFormat(\n\t\t\t\ttag,\n\t\t\t\tObject.assign(\n\t\t\t\t\t{},\n\t\t\t\t\t{\n\t\t\t\t\t\tday: \"numeric\",\n\t\t\t\t\t\tmonth: \"short\",\n\t\t\t\t\t\tyear: \"numeric\",\n\t\t\t\t\t\thour: \"numeric\",\n\t\t\t\t\t\tminute: \"numeric\",\n\t\t\t\t\t} as const,\n\t\t\t\t\toptions,\n\t\t\t\t),\n\t\t\t),\n\t\t\tdateTimeShort: new Intl.DateTimeFormat(\n\t\t\t\ttag,\n\t\t\t\tObject.assign(\n\t\t\t\t\t{},\n\t\t\t\t\t{\n\t\t\t\t\t\tday: \"numeric\",\n\t\t\t\t\t\tmonth: \"numeric\",\n\t\t\t\t\t\tyear: \"numeric\",\n\t\t\t\t\t\thour: \"numeric\",\n\t\t\t\t\t} as const,\n\t\t\t\t\toptions,\n\t\t\t\t),\n\t\t\t),\n\t\t\tweekdayShort: new Intl.DateTimeFormat(tag, {\n\t\t\t\tweekday: \"short\",\n\t\t\t}),\n\t\t\tweekdayNarrow: new Intl.DateTimeFormat(tag, {\n\t\t\t\tweekday: \"narrow\",\n\t\t\t}),\n\t\t\tpriceWithCurrency: new Intl.NumberFormat(tag, {\n\t\t\t\tstyle: \"currency\",\n\t\t\t\tcurrency: \"EUR\",\n\t\t\t\tminimumFractionDigits: 2,\n\t\t\t}),\n\t\t\tpriceWithCurrencyWithoutFractionDigits: new Intl.NumberFormat(tag, {\n\t\t\t\tstyle: \"currency\",\n\t\t\t\tcurrency: \"EUR\",\n\t\t\t\tmaximumFractionDigits: 0,\n\t\t\t\tminimumFractionDigits: 0,\n\t\t\t}),\n\t\t\tpriceWithoutCurrency: new Intl.NumberFormat(tag, {\n\t\t\t\tstyle: \"decimal\",\n\t\t\t\tminimumFractionDigits: 2,\n\t\t\t}),\n\t\t\tpriceWithoutCurrencyWithoutFractionDigits: new Intl.NumberFormat(tag, {\n\t\t\t\tstyle: \"decimal\",\n\t\t\t\tmaximumFractionDigits: 0,\n\t\t\t\tminimumFractionDigits: 0,\n\t\t\t}),\n\t\t\tmonthLong: new Intl.DateTimeFormat(tag, {\n\t\t\t\tmonth: \"long\",\n\t\t\t}),\n\t\t\tmonthShort: new Intl.DateTimeFormat(tag, {\n\t\t\t\tmonth: \"short\",\n\t\t\t}),\n\t\t\tmonthShortWithFullYear: new Intl.DateTimeFormat(tag, {\n\t\t\t\tmonth: \"short\",\n\t\t\t\tyear: \"numeric\",\n\t\t\t}),\n\t\t\tmonthWithYear: new Intl.DateTimeFormat(tag, {\n\t\t\t\tmonth: \"long\",\n\t\t\t\tyear: \"2-digit\",\n\t\t\t}),\n\t\t\tmonthWithFullYear: new Intl.DateTimeFormat(tag, {\n\t\t\t\tmonth: \"long\",\n\t\t\t\tyear: \"numeric\",\n\t\t\t}),\n\t\t\tyearNumeric: new Intl.DateTimeFormat(tag, {\n\t\t\t\tyear: \"numeric\",\n\t\t\t}),\n\t\t\tshortMonthYear2Digit: new Intl.DateTimeFormat(tag, {\n\t\t\t\tmonth: \"2-digit\",\n\t\t\t\tyear: \"2-digit\",\n\t\t\t}),\n\t\t}\n\t}\n\n\texists(id: TranslationKey): boolean {\n\t\ttry {\n\t\t\tthis.get(id)\n\t\t\treturn true\n\t\t} catch (e) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * Resolve TranslationKey to Translation.\n\t */\n\tgetTranslation(id: TranslationKey, replacements?: Record<string, string | number>): Translation {\n\t\treturn this.makeTranslation(id, this.get(id, replacements))\n\t}\n\n\t/**\n\t * Should only be used to write the text of a TranslationKey to the dom.\n\t */\n\tgetTranslationText(value: MaybeTranslation): string {\n\t\treturn typeof value === \"object\" ? (value as Translation).text : lang.get(value as TranslationKey)\n\t}\n\n\t/**\n\t * Legacy. Use getTranslation instead.\n\t *\n\t * Should only be used to write the text of a TranslationKey to the dom.\n\t */\n\tget(id: TranslationKey, replacements?: Record<string, string | number>): string {\n\t\tif (id == null) {\n\t\t\treturn \"\"\n\t\t}\n\n\t\tif (id === \"emptyString_msg\") {\n\t\t\treturn \"\\u2008\"\n\t\t}\n\n\t\tlet text = this.translations.keys[id]\n\n\t\tif (!text) {\n\t\t\t// try fallback language\n\t\t\ttext = this.fallback.keys[id]\n\n\t\t\tif (!text) {\n\t\t\t\t// try static definitions\n\t\t\t\ttext = this.staticTranslations[id]\n\n\t\t\t\tif (!text) {\n\t\t\t\t\tthrow new Error(\"no translation found for id \" + id)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let param in replacements) {\n\t\t\ttext = text.replaceAll(param, String(replacements[param]))\n\t\t}\n\n\t\treturn text\n\t}\n\n\tgetTestId(value: MaybeTranslation): string {\n\t\treturn typeof value === \"object\" ? (value as Translation).testId : (value as TranslationKey)\n\t}\n\n\t/**\n\t * Creates a Translation. Only to be used in rare cases where we can't use a\n\t * TranslationKey (e.g. rendering the name of a folder).\n\t * @param testId\n\t * @param unresolved\n\t */\n\tmakeTranslation(testId: string, unresolved: string | lazy<string>): Translation {\n\t\tlet text = typeof unresolved === \"function\" ? unresolved() : unresolved\n\t\treturn { testId: testId, text }\n\t}\n}\n\n/**\n * Gets the default language derived from the browser language.\n * @param restrictions An array of language codes the selection should be restricted to\n */\nexport function getLanguageNoDefault(restrictions?: LanguageCode[]): { code: LanguageCode; languageTag: string } | null {\n\t// navigator.languages can be an empty array on android 5.x devices\n\tlet languageTags\n\n\tif (typeof navigator !== \"undefined\") {\n\t\tlanguageTags = navigator.languages && navigator.languages.length > 0 ? navigator.languages : [navigator.language]\n\t} else if (typeof process !== \"undefined\" && typeof process.env !== \"undefined\") {\n\t\tconst locale = process.env.LC_ALL || process.env.LC_MESSAGES || process.env.LANG || process.env.LANGUAGE || process.env.LC_NAME\n\n\t\tif (locale) {\n\t\t\tlanguageTags = [locale.split(\".\")[0].replace(\"_\", \"-\")]\n\t\t}\n\t}\n\n\tif (languageTags) {\n\t\tfor (let tag of languageTags) {\n\t\t\tlet code = getSubstitutedLanguageCode(tag, restrictions)\n\n\t\t\tif (code) {\n\t\t\t\treturn {\n\t\t\t\t\tcode: code,\n\t\t\t\t\tlanguageTag: tag,\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null\n}\n\n/**\n * Gets the default language derived from the browser language.\n * @param restrictions An array of language codes the selection should be restricted to\n */\nexport function getLanguage(restrictions?: LanguageCode[]): {\n\tcode: LanguageCode\n\tlanguageTag: string\n} {\n\tconst language = getLanguageNoDefault(restrictions)\n\tif (language) return language\n\n\tif (restrictions == null || restrictions.indexOf(\"en\") !== -1) {\n\t\treturn {\n\t\t\tcode: \"en\",\n\t\t\tlanguageTag: \"en-US\",\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tcode: restrictions[0],\n\t\t\tlanguageTag: restrictions[0].replace(\"/_/g\", \"-\"),\n\t\t}\n\t}\n}\n\nexport function getSubstitutedLanguageCode(tag: string, restrictions?: LanguageCode[]): LanguageCode | null {\n\tlet code = tag.toLowerCase().replace(\"-\", \"_\")\n\tlet language = languages.find((l) => l.code === code && (restrictions == null || restrictions.indexOf(l.code) !== -1))\n\n\tif (language == null) {\n\t\tif (code === \"zh_hk\" || code === \"zh_tw\") {\n\t\t\tlanguage = languages.find((l) => l.code === \"zh_hant\")\n\t\t} else {\n\t\t\tlet basePart = getBasePart(code)\n\t\t\tlanguage = languages.find((l) => getBasePart(l.code) === basePart && (restrictions == null || restrictions.indexOf(l.code) !== -1))\n\t\t}\n\t}\n\n\tif (language) {\n\t\tlet customizations: WhitelabelCustomizations | null = null\n\n\t\t// accessing `window` throws an error on desktop, and this file is imported by DesktopMain\n\t\tif (typeof window !== \"undefined\") {\n\t\t\tcustomizations = getWhitelabelCustomizations(window)\n\t\t}\n\n\t\tconst germanCode = customizations?.germanLanguageCode\n\n\t\tif (language.code === \"de\" && germanCode != null) {\n\t\t\treturn downcast(germanCode)\n\t\t} else {\n\t\t\treturn language.code\n\t\t}\n\t} else {\n\t\treturn null\n\t}\n}\n\nfunction getBasePart(code: string): string {\n\tconst indexOfUnderscore = code.indexOf(\"_\")\n\n\tif (indexOfUnderscore > 0) {\n\t\treturn code.substring(0, indexOfUnderscore)\n\t} else {\n\t\treturn code\n\t}\n}\n\nexport function getAvailableLanguageCode(code: string): string {\n\treturn getSubstitutedLanguageCode(code) || \"en\"\n}\n\n/**\n * pt_br -> pt-BR\n * @param code\n */\nexport function languageCodeToTag(code: string): string {\n\tif (code === \"de_sie\") {\n\t\treturn \"de\"\n\t}\n\n\tconst indexOfUnderscore = code.indexOf(\"_\")\n\n\tif (indexOfUnderscore === -1) {\n\t\treturn code\n\t} else {\n\t\tconst [before, after] = code.split(\"_\")\n\t\treturn `${before}-${after.toUpperCase()}`\n\t}\n}\n\nexport const assertTranslation: (id: string) => TranslationKey = downcast\nexport type LanguageViewModelType = LanguageViewModel\nexport const lang: LanguageViewModel = new LanguageViewModel()\n"],"mappings":"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"}