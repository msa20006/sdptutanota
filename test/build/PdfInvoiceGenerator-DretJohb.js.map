{"version":3,"file":"PdfInvoiceGenerator-DretJohb.js","names":["ORIGIN_POSITION: [x: number, y: number]","pdfWriter: PdfWriter","text: string","position: [x: number, y: number]","byteLength: number","containerWidth: number","image: PDF_IMAGES","dimensions: [width: number, height: number]","fromPos: [x: number, y: number]","toPos: [x: number, y: number]","font: PDF_FONTS","points: number","grayScale: number","renderingMode: TEXT_RENDERING_MODE","tableWidth: number","columns: TableColumn[]","data: ReadonlyArray<ReadonlyArray<string>>","rowsOnFirstPage: number","chunk: ReadonlyArray<ReadonlyArray<string>>","columnInfo: ReadonlyArray<TableColumn>","rowItems: ReadonlyArray<string>","address: string","input: string","out: string[]","codePoint: number","stringParts: string[]","codePoints: string[]","fontSize: number","mm: number","pdfWriter: PdfWriter","invoice: InvoiceDataGetOut","invoiceNumber: string","customerId: string","InvoiceTexts","columns: TableColumn[]","tableData: Array<Array<string>>","tableEndPoint: number","type: NumberString","amount: NumberString","date: Date | null","price: string | number","itemType: string","amount: string"],"sources":["../../src/common/api/worker/pdf/PdfDocument.ts","../../src/common/api/worker/invoicegen/PdfInvoiceGenerator.ts"],"sourcesContent":["import { boldFontWidths, PdfDictValue, PdfObjectRef, PdfStreamEncoding, regularFontWidths } from \"./PdfConstants.js\"\nimport { PdfWriter } from \"./PdfWriter.js\"\nimport { Deflater } from \"./Deflater.js\"\nimport { stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\n\nexport enum PDF_FONTS {\n\tREGULAR = 1,\n\tBOLD = 2,\n\tINVISIBLE_CID = 3,\n}\n\nexport enum PDF_IMAGES {\n\tTUTA_LOGO = 1,\n\tADDRESS = 2,\n}\n\nexport enum TEXT_RENDERING_MODE {\n\tNORMAL = 0,\n\tINVISIBLE = 3,\n}\n\nexport type TableColumn = { headerName: string; columnWidth: number }\n\nexport const MARGIN_TOP = 20\nexport const MARGIN_LEFT = 25\nexport const TABLE_VERTICAL_SPACING = 5\nconst TEXT_VERTICAL_SPACING = 2\nconst PAPER_HEIGHT = 297\nconst PAPER_WIDTH = 210\nconst ORIGIN_POSITION: [x: number, y: number] = [0, 0]\n// Transform matrix to set origin point top-left\nconst TRANSFORM_MATRIX = `1 0 0 -1 0 ${mmToPSPoint(PAPER_HEIGHT)}`\n// 1 InvoiceItem = 2 Table rows (first row item info, second row dates)\n// The amount of rows rendered on the first page is dynamically determined in the addTable() method\n// Amount of table rows that can fit on the first page if a second is rendered too\nconst ROWS_FIRST_PAGE_MULTIPLE = 24 // 12 InvoiceItems\n// Amount of table rows that can fit on any n-th page that isn't the first\nconst ROWS_N_PAGE = 50\n\nconst ADDRESS_FIELD_WIDTH = 800\nconst ADDRESS_FIELD_HEIGHT = 320\n\n/**\n * Object which manages the high-level creation of a PDF document by parsing function instructions into PDF streams.\n * Use this object to create PDF documents. For the low-level functionality see \"PdfWriter\" class\n *\n * Once instantiated, use the public methods starting with \"add...()\" or \"change...()\" to describe the document.\n * Generate the PDF by calling the \"create()\" method any time. Do not utilize the same PdfDocument instance again once a PDF file has been created with it.\n * Private \"render...()\" methods are only used internally to interact with the low-level PdfWriter\n */\nexport class PdfDocument {\n\tprivate readonly pdfWriter: PdfWriter\n\tprivate readonly deflater: Deflater\n\tprivate pageCount: number = 0\n\tprivate textStream: string = \"\"\n\tprivate graphicsStream: string = \"\"\n\tprivate currentFont: PDF_FONTS = PDF_FONTS.REGULAR\n\tprivate currentFontSize: number = 12\n\tprivate pageList: PdfObjectRef[] = []\n\n\tconstructor(pdfWriter: PdfWriter) {\n\t\tthis.pdfWriter = pdfWriter\n\t\tthis.pdfWriter.setupDefaultObjects()\n\t\tthis.deflater = new Deflater()\n\t}\n\n\t/**\n\t * Create the document: commit all streams to objects and let the PdfWriter write the file\n\t */\n\tasync create(): Promise<Uint8Array> {\n\t\t// Write all open streams and add the page tree with all pages of the document to the PDF\n\t\tawait this.renderText()\n\t\tawait this.renderGraphics()\n\t\tthis.pdfWriter.createObject(\n\t\t\tnew Map<string, PdfDictValue>([\n\t\t\t\t[\"Type\", \"/Pages\"],\n\t\t\t\t[\"Parent\", { refId: \"CATALOG\" }],\n\t\t\t\t[\"Kids\", this.pageList],\n\t\t\t\t[\"Count\", `${this.pageCount}`],\n\t\t\t]),\n\t\t\t\"PAGES\",\n\t\t)\n\t\treturn await this.pdfWriter.writePdfFile()\n\t}\n\n\t/**\n\t * Closes the current textStream and writes it into an object\n\t */\n\tprivate async renderText(): Promise<void> {\n\t\tconst encodedTextStream = await this.deflater.deflate(\n\t\t\tstringToUtf8Uint8Array(`BT q ${TRANSFORM_MATRIX} cm /F${this.currentFont} ${this.currentFontSize} Tf ` + this.textStream + ` Q ET`),\n\t\t)\n\t\tthis.pdfWriter.createStreamObject(new Map(), encodedTextStream, PdfStreamEncoding.FLATE, `TEXT_${this.pageCount}`)\n\t\tthis.textStream = \"\"\n\t}\n\n\t/**\n\t * Closes the current graphicsStream and writes it into an object\n\t */\n\tprivate async renderGraphics(): Promise<void> {\n\t\tconst encodedGraphicsStream = await this.deflater.deflate(stringToUtf8Uint8Array(`q ${TRANSFORM_MATRIX} cm ` + this.graphicsStream + ` Q`))\n\t\tthis.pdfWriter.createStreamObject(new Map(), encodedGraphicsStream, PdfStreamEncoding.FLATE, `GRAPHICS_${this.pageCount}`)\n\t\tthis.graphicsStream = \"\"\n\t}\n\n\t/**\n\t * Append a new page to the PDF document\n\t */\n\tasync addPage(): Promise<PdfDocument> {\n\t\t// When adding a new page, all content streams must be rendered on the previous page. When creating the first page, all streams are still empty\n\t\tif (this.pageCount > 0) {\n\t\t\tawait this.renderText()\n\t\t\tawait this.renderGraphics()\n\t\t}\n\t\tthis.pageCount++\n\n\t\t// Create new page object\n\t\tconst pageRefId = `PAGE_${this.pageCount}`\n\t\tthis.pdfWriter.createObject(\n\t\t\tnew Map<string, PdfDictValue>([\n\t\t\t\t[\"Type\", \"/Page\"],\n\t\t\t\t[\"Parent\", { refId: \"PAGES\" }],\n\t\t\t\t[\"MediaBox\", `[ 0 0 ${mmToPSPoint(PAPER_WIDTH)} ${mmToPSPoint(PAPER_HEIGHT)}]`],\n\t\t\t\t[\"Resources\", { refId: \"RESOURCES\" }],\n\t\t\t\t[\"Contents\", [{ refId: `TEXT_${this.pageCount}` }, { refId: `GRAPHICS_${this.pageCount}` }]],\n\t\t\t]),\n\t\t\tpageRefId,\n\t\t)\n\n\t\t// Add new page to page-tree\n\t\tthis.pageList.push({ refId: pageRefId })\n\t\treturn this\n\t}\n\n\t/**\n\t * Add a text string at the given coordinates in millimeters\n\t * The coordinate field is in the fourth quadrant, i.e. the point of origin is top-left\n\t * @param text The text to place\n\t * @param position Coordinates [x,y] where to place the text, can be omitted to keep the current position\n\t * @param byteLength The byteLength of every character in the string. By default, this is 1 byte = 2 nibbles = \"XX\" e.g. \"20\" = \"SPACE\".\n\t * Do not change it to more than 1 byte unless you can verify any text printed this way will be displayed correctly on the PDF.\n\t */\n\taddText(text: string, position: [x: number, y: number] = ORIGIN_POSITION, byteLength: number = 1): PdfDocument {\n\t\tif (text === \"\") return this\n\t\t// If no position was specified, don't update the text cursor position\n\t\tif (position !== ORIGIN_POSITION) {\n\t\t\tthis.textStream += `1 0 0 -1 ${mmToPSPoint(position[0])} ${mmToPSPoint(position[1]) + this.currentFontSize} Tm <${toUnicodePoint(\n\t\t\t\ttext,\n\t\t\t\tbyteLength,\n\t\t\t).join(\"\")}> Tj `\n\t\t} else {\n\t\t\tthis.textStream += `<${toUnicodePoint(text, byteLength).join(\"\")}> Tj `\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t *\n\t *\n\t * Add a text string at the given coordinates in millimeters and align it to the right of its \"container\"\n\t * The container is specified by a width in millimeters.\n\t * @param text The text to place\n\t * @param position Coordinates [x,y] where to place the text, can be omitted to keep the current position\n\t * @param containerWidth The width in millimeters of the \"container\" in which the text is to be right aligned in\n\t */\n\taddTextRightAlign(text: string, position: [x: number, y: number], containerWidth: number): PdfDocument {\n\t\tif (text === \"\") return this\n\t\tconst unicodePoints = toUnicodePoint(text)\n\t\tthis.textStream += `1 0 0 -1 ${\n\t\t\tmmToPSPoint(position[0]) + mmToPSPoint(containerWidth) - getWordLengthInPoints(unicodePoints, this.currentFont, this.currentFontSize)\n\t\t} ${mmToPSPoint(position[1]) + this.currentFontSize} Tm <${unicodePoints.join(\"\")}> Tj `\n\t\treturn this\n\t}\n\n\t/**\n\t * Add a linebreak in the text\n\t */\n\taddLineBreak(): PdfDocument {\n\t\tthis.textStream += \"T* \"\n\t\treturn this\n\t}\n\n\t/**\n\t * Add an image at the given coordinates in millimeters\n\t * The coordinate field is in the fourth quadrant, i.e. the point of origin is top-left\n\t * @param image The image to add which is an enum of readily embeddable images\n\t * @param position Coordinates [x,y] where to place the image\n\t * @param dimensions Dimensions [width, height] of the image. Image will be stretched to fit the given dimensions\n\t */\n\taddImage(image: PDF_IMAGES, position: [x: number, y: number], dimensions: [width: number, height: number]): PdfDocument {\n\t\t// Image placement demands two matrix transformations, so it must make its own graphic state to not affect graphic elements which need no transform (drawLine)\n\t\tthis.graphicsStream += `Q q ${TRANSFORM_MATRIX} cm ${mmToPSPoint(dimensions[0])} 0 0 -${mmToPSPoint(dimensions[1])} ${mmToPSPoint(\n\t\t\tposition[0],\n\t\t)} ${mmToPSPoint(position[1])} cm /Im${image} Do Q q ${TRANSFORM_MATRIX} cm `\n\t\treturn this\n\t}\n\n\t/**\n\t * Draw black line \"fromPos\" \"toPos\"\n\t * @param fromPos Starting point of the line [x,y]\n\t * @param toPos Ending point of the line [x,y]\n\t */\n\taddDrawnLine(fromPos: [x: number, y: number], toPos: [x: number, y: number]): PdfDocument {\n\t\tthis.graphicsStream += `${mmToPSPoint(fromPos[0])} ${mmToPSPoint(fromPos[1])} m ${mmToPSPoint(toPos[0])} ${mmToPSPoint(toPos[1])} l s `\n\t\treturn this\n\t}\n\n\t/**\n\t * Change the currently used text font\n\t * @param font Font to change to which is an enum of readily embeddable fonts\n\t * @param points Font size in PostScript points\n\t */\n\tchangeFont(font: PDF_FONTS, points: number): PdfDocument {\n\t\tthis.textStream += `/F${font} ${points} Tf ${points + TEXT_VERTICAL_SPACING} TL `\n\t\tthis.currentFont = font\n\t\tthis.currentFontSize = points\n\t\treturn this\n\t}\n\n\t/**\n\t * Changes the current text cursor position to the specified position\n\t * @param position The position to place the cursor at\n\t */\n\tchangeTextCursorPosition(position: [x: number, y: number]): PdfDocument {\n\t\tthis.textStream += `1 0 0 -1 ${mmToPSPoint(position[0])} ${mmToPSPoint(position[1]) + this.currentFontSize} Tm `\n\t\treturn this\n\t}\n\n\t/**\n\t * Change font size of the currently used font\n\t * @param points Font size in PostScript points\n\t */\n\tchangeFontSize(points: number): PdfDocument {\n\t\tthis.textStream += `/F${this.currentFont} ${points} Tf ${points + TEXT_VERTICAL_SPACING} TL `\n\t\tthis.currentFontSize = points\n\t\treturn this\n\t}\n\n\t/**\n\t * Change the grayscale of the current text\n\t * @param grayScale Float between 0 and 1 by which the text lightness shall be adjusted. 1 = white, 0 = black\n\t */\n\tchangeTextGrayscale(grayScale: number): PdfDocument {\n\t\tgrayScale = Math.max(Math.min(grayScale, 1), 0)\n\t\tthis.textStream += `${grayScale} g `\n\t\treturn this\n\t}\n\n\t/**\n\t * Change the rendering mode of the current text. The rendering mode values and their effect are the same as the PDF standard describes\n\t * @param renderingMode Rendering mode (number) to set\n\t */\n\tchangeTextRenderingMode(renderingMode: TEXT_RENDERING_MODE) {\n\t\tthis.textStream += `${renderingMode} Tr `\n\t\treturn this\n\t}\n\n\t/**\n\t * Render a table with the input of a two-dimensional array. Produces automatic page breaks.\n\t * Returns the table's height on the last page where it is still rendered, allowing that value to be used to continue placing objects after the table\n\t * @param position Coordinates [x,y] where to place the table's origin point\n\t * @param tableWidth The width of the table\n\t * @param columns Array of ColumnObjects, specifying the header name and width of each column in percent of the total tableWidth { headerName: string, columnWidth: number  }\n\t * @param data Two-dimensional array of strings, specifying the data for every row : [ //row1 [a,b,c] //row2 [x,y,z]...   ]. The inner arrays (rows) must have the same length as the columns array!\n\t * @param rowsOnFirstPage How many rows can fit on the first page. This is dynamically decided by the amount of text that should follow after the table\n\t */\n\tasync addTable(\n\t\tposition: [x: number, y: number],\n\t\ttableWidth: number,\n\t\tcolumns: TableColumn[],\n\t\tdata: ReadonlyArray<ReadonlyArray<string>>,\n\t\trowsOnFirstPage: number = 4,\n\t): Promise<number> {\n\t\tthis.addTableHeader(position, tableWidth, columns)\n\t\t// If all entries fit on the first page, then have \"ITEMS_FIRST_PAGE_SINGLE\" amount of entries, else \"ROWS_FIRST_PAGE_MULTIPLE\"\n\t\tconst entriesOnFirstPage = data.length > rowsOnFirstPage ? ROWS_FIRST_PAGE_MULTIPLE : rowsOnFirstPage\n\t\t// Render the first page, save the height of the table\n\t\tlet tableHeight = this.addTablePage(position, tableWidth, columns, data.slice(0, entriesOnFirstPage))\n\t\tlet entryCounter = entriesOnFirstPage\n\n\t\t// only two fit on first page to then have enough space to render the BIGGEST, we have three so we new page\n\t\t// BIGGEST is German or Enligsh (its close) invoice + not vat + vatid\n\n\t\t// Keep writing pages of entries until all data is exhausted\n\t\twhile (entryCounter < data.length) {\n\t\t\tawait this.addPage()\n\t\t\tposition = [position[0], MARGIN_TOP]\n\t\t\ttableHeight = this.addTablePage(position, tableWidth, columns, data.slice(entryCounter, entryCounter + ROWS_N_PAGE))\n\t\t\tentryCounter += ROWS_N_PAGE\n\t\t}\n\n\t\tconst lastPageCannotFitRemainingRows = (entryCounter - entriesOnFirstPage) % ROWS_N_PAGE <= ROWS_FIRST_PAGE_MULTIPLE\n\t\tconst insufficientSpaceBelowTable = entryCounter == ROWS_FIRST_PAGE_MULTIPLE\n\n\t\tif (!lastPageCannotFitRemainingRows || insufficientSpaceBelowTable) {\n\t\t\tawait this.addPage()\n\t\t\ttableHeight = MARGIN_TOP\n\t\t}\n\n\t\tthis.addDrawnLine([position[0], tableHeight], [position[0] + tableWidth, tableHeight])\n\t\treturn tableHeight\n\t}\n\n\t/**\n\t * Render the actual visible table, starting with a header and all subsequent entries inside the \"chunk\"\n\t */\n\taddTablePage(position: [x: number, y: number], tableWidth: number, columns: TableColumn[], chunk: ReadonlyArray<ReadonlyArray<string>>): number {\n\t\tthis.addTableHeader(position, tableWidth, columns)\n\t\tlet previousRowOffset = TABLE_VERTICAL_SPACING\n\t\tfor (const row of chunk) {\n\t\t\tthis.addTableRow([position[0], position[1] + previousRowOffset], columns, row)\n\t\t\tpreviousRowOffset += TABLE_VERTICAL_SPACING\n\t\t}\n\t\treturn position[1] + previousRowOffset\n\t}\n\n\t/**\n\t * Render the table header\n\t */\n\taddTableHeader(position: [x: number, y: number], tableWidth: number, columns: TableColumn[]) {\n\t\tthis.changeFont(PDF_FONTS.BOLD, 11)\n\t\tthis.addTableRow(\n\t\t\tposition,\n\t\t\tcolumns,\n\t\t\tcolumns.flatMap((column) => column.headerName),\n\t\t)\n\t\tthis.addDrawnLine([position[0], position[1] + 5], [position[0] + tableWidth, position[1] + 5])\n\t\tthis.changeFont(PDF_FONTS.REGULAR, 11)\n\t}\n\n\t/**\n\t * Render a table row\n\t */\n\taddTableRow(position: [x: number, y: number], columnInfo: ReadonlyArray<TableColumn>, rowItems: ReadonlyArray<string>) {\n\t\tif (rowItems.length !== columnInfo.length) console.error(\"Amount of items in table row not equal to amount of columns!\")\n\t\tlet previousWidthOffset = 0\n\t\tfor (let i = 0; i < rowItems.length; i++) {\n\t\t\tif (i >= 2) {\n\t\t\t\tthis.addTextRightAlign(rowItems[i], [position[0] + previousWidthOffset, position[1]], columnInfo[i].columnWidth)\n\t\t\t} else {\n\t\t\t\tthis.addText(rowItems[i], [position[0] + previousWidthOffset, position[1]])\n\t\t\t}\n\t\t\tpreviousWidthOffset += columnInfo[i].columnWidth\n\t\t}\n\t}\n\n\t/**\n\t * Renders an address field, allowing the inclusion of any character inside text.\n\t * If any multibyte character outside the defined encoding is detected, the text will be written as an image via the canvas API.\n\t * The image will then be attached be inserted into the PDF. If the image generation fails (missing canvas support) fallback text will be rendered\n\t * @param position Coordinates [x,y] where to place the field's origin point\n\t * @param address String containing the address (expected to hold multiple newlines)\n\t */\n\tasync addAddressField(position: [x: number, y: number], address: string) {\n\t\tconst addressParts = address.split(\"\\n\")\n\t\tlet imageBuffer = new ArrayBuffer(0)\n\t\tlet byteLengthForAddress = 1\n\n\t\ttry {\n\t\t\tif (!areStringPartsOneByteLength(addressParts)) {\n\t\t\t\tconst canvas = new OffscreenCanvas(ADDRESS_FIELD_WIDTH, ADDRESS_FIELD_HEIGHT)\n\t\t\t\tconst context = canvas.getContext(\"2d\")\n\t\t\t\tif (context) {\n\t\t\t\t\t// 36px is arbitrarily chosen to align with the 12pt size of the actual PDF text\n\t\t\t\t\tcontext.font = \"36px serif\"\n\t\t\t\t\tcontext.fillStyle = \"white\"\n\t\t\t\t\tcontext.fillRect(0, 0, canvas.width, canvas.height)\n\t\t\t\t\tcontext.fillStyle = \"black\"\n\n\t\t\t\t\tfor (let i = 0; i < addressParts.length; i++) {\n\t\t\t\t\t\tcontext.fillText(addressParts[i], 0, 40 * (i + 1))\n\t\t\t\t\t}\n\t\t\t\t\tconst dataUrl = await canvas.convertToBlob({ type: \"image/jpeg\" })\n\t\t\t\t\timageBuffer = await dataUrl.arrayBuffer()\n\n\t\t\t\t\t// For the rendered image, we take its dimension divided by 8. This gives a nice resolution for JPEG\n\t\t\t\t\tthis.addImage(PDF_IMAGES.ADDRESS, position, [ADDRESS_FIELD_WIDTH / 8, ADDRESS_FIELD_HEIGHT / 8])\n\n\t\t\t\t\t// Prepare for rendering the address below the image invisibly\n\t\t\t\t\tbyteLengthForAddress = 2\n\t\t\t\t\tthis.changeTextRenderingMode(TEXT_RENDERING_MODE.INVISIBLE)\n\t\t\t\t\tthis.changeFont(PDF_FONTS.INVISIBLE_CID, 12)\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"PDF Canvas Error - Could not access OffscreenCanvasContext2D.\")\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.warn(`PDF Error - Cannot render canvas. This is likely because the browser does not support OffscreenCanvas. The error was:\\n\"${err}\"`)\n\t\t}\n\n\t\t// Must create image object in any case since otherwise the reference cannot be resolved. We then just fill it with empty data, but never render it\n\t\tthis.pdfWriter.createStreamObject(\n\t\t\tnew Map([\n\t\t\t\t[\"Name\", \"/Im2\"],\n\t\t\t\t[\"Type\", \"/XObject\"],\n\t\t\t\t[\"Subtype\", \"/Image\"],\n\t\t\t\t[\"Width\", `${ADDRESS_FIELD_WIDTH}`],\n\t\t\t\t[\"Height\", `${ADDRESS_FIELD_HEIGHT}`],\n\t\t\t\t[\"BitsPerComponent\", \"8\"],\n\t\t\t\t[\"ColorSpace\", \"/DeviceRGB\"],\n\t\t\t]),\n\t\t\tnew Uint8Array(imageBuffer),\n\t\t\tPdfStreamEncoding.DCT,\n\t\t\t\"IMG_ADDRESS\",\n\t\t)\n\n\t\t// Always render the address as text, Either directly or invisibly in case the canvas was called\n\t\tfor (const addressPart of addressParts) {\n\t\t\tthis.addText(addressPart, ORIGIN_POSITION, byteLengthForAddress).addLineBreak()\n\t\t}\n\n\t\t// Undo any invisible-configuration in case it was set\n\t\tthis.changeFont(PDF_FONTS.REGULAR, 12)\n\t\tthis.changeTextRenderingMode(TEXT_RENDERING_MODE.NORMAL)\n\t}\n}\n\n/**\n * Convert a text string into a NumString array where each character is replaced by its byte unicode point with a length specified by \"byteLength\"\n */\nexport function toUnicodePoint(input: string, byteLength: number = 1): string[] {\n\tif (byteLength === 1) {\n\t\tconst out: string[] = []\n\t\tfor (let i = 0; i < input.length; i++) {\n\t\t\tconst codePoint = input.codePointAt(i)\n\t\t\tif (codePoint && isCodePointOneByteLength(codePoint)) {\n\t\t\t\tout.push(codePoint.toString(16))\n\t\t\t} else {\n\t\t\t\tconsole.warn(`Attempted to render a character longer than one byte. Character was ${input[i]} with a code of ${codePoint}.`)\n\t\t\t}\n\t\t}\n\t\treturn out\n\t} else {\n\t\treturn input.split(\"\").map((c) => c.charCodeAt(0).toString(16).padStart(4, \"0\"))\n\t}\n}\n\n/**\n * Returns whether a given char's codepoint is above one byte in size, making it not displayable by simple PDF fonts\n * @param codePoint\n */\nexport function isCodePointOneByteLength(codePoint: number): boolean {\n\treturn codePoint < 256\n}\n\n/**\n * Returns whether a given string, split into its parts, includes any characters that are longer than one byte in size\n * @param stringParts\n */\nexport function areStringPartsOneByteLength(stringParts: string[]): boolean {\n\tfor (const addressPart of stringParts) {\n\t\tfor (let i = 0; i < addressPart.length; i++) {\n\t\t\tconst codePoint = addressPart.codePointAt(i)\n\t\t\tif (codePoint && !isCodePointOneByteLength(codePoint)) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\n/**\n * Calculates the size of a word by considering the width of every glyph in the font\n * @param codePoints Array of unicode points representing every character in the word\n * @param font The font used for the processed word\n * @param fontSize The font size used for the processed word\n */\nexport function getWordLengthInPoints(codePoints: string[], font: PDF_FONTS, fontSize: number): number {\n\tconst widthsArray = font === PDF_FONTS.REGULAR ? regularFontWidths : boldFontWidths\n\tlet total = 0\n\tfor (let i = 0; i < codePoints.length; i++) {\n\t\tlet index = parseInt(codePoints[i], 16) - 32\n\t\ttotal += 1 / (1000 / widthsArray[index])\n\t}\n\treturn total * fontSize\n}\n\n/**\n * Convert millimeters to PostScript points\n */\nfunction mmToPSPoint(mm: number) {\n\treturn mm * 2.834645688\n}\n","import { MARGIN_LEFT, MARGIN_TOP, PDF_FONTS, PDF_IMAGES, PdfDocument, TABLE_VERTICAL_SPACING, TableColumn } from \"../pdf/PdfDocument.js\"\nimport InvoiceTexts from \"./InvoiceTexts.js\"\nimport { PdfWriter } from \"../pdf/PdfWriter.js\"\nimport { InvoiceDataGetOut } from \"../../entities/sys/TypeRefs.js\"\nimport { countryUsesGerman, getInvoiceItemTypeName, InvoiceItemType, InvoiceType, PaymentMethod, VatType } from \"./InvoiceUtils.js\"\n\n/**\n * Object generating a PDF invoice document.\n * This generator is ONLY responsible for rendering the data it gets and formatting it in a way that does not change anything about it.\n * If adjustments to the data must be made prior to rendering, then these should take place within the RenderInvoice service.\n */\nexport class PdfInvoiceGenerator {\n\tprivate readonly doc: PdfDocument\n\tprivate readonly languageCode: \"de\" | \"en\" = \"en\"\n\tprivate readonly invoiceNumber: string\n\tprivate readonly customerId: string\n\tprivate invoice: InvoiceDataGetOut\n\n\tconstructor(pdfWriter: PdfWriter, invoice: InvoiceDataGetOut, invoiceNumber: string, customerId: string) {\n\t\tthis.invoice = invoice\n\t\tthis.invoiceNumber = invoiceNumber\n\t\tthis.customerId = customerId\n\t\tthis.languageCode = countryUsesGerman(this.invoice.country)\n\t\tthis.doc = new PdfDocument(pdfWriter)\n\t}\n\n\t/**\n\t * Generate the PDF document\n\t */\n\tasync generate(): Promise<Uint8Array> {\n\t\tawait this.doc.addPage()\n\t\tthis.doc.addImage(PDF_IMAGES.TUTA_LOGO, [25, MARGIN_TOP + 15.7], [45, 15.7])\n\t\tthis.renderSideBarInfo()\n\t\tawait this.renderAddressField()\n\t\tthis.renderInvoiceInfo()\n\t\tawait this.renderInvoiceTable()\n\t\tthis.renderAdditional()\n\t\tthis.renderLegalDisclaimer()\n\t\treturn await this.doc.create()\n\t}\n\n\t/**\n\t * The sidebar on the document in the top-right corner\n\t */\n\trenderSideBarInfo() {\n\t\tthis.doc\n\t\t\t.changeFont(PDF_FONTS.BOLD, 11)\n\t\t\t.addText(InvoiceTexts.universal.companyName, [MARGIN_LEFT + 125, MARGIN_TOP])\n\t\t\t.changeFont(PDF_FONTS.REGULAR, 11)\n\t\t\t.addLineBreak()\n\t\t\t.addText(InvoiceTexts.universal.addressStreet)\n\t\t\t.addLineBreak()\n\t\t\t.addText(InvoiceTexts[this.languageCode].addressPostal)\n\t\t\t.addLineBreak()\n\t\t\t.addText(InvoiceTexts[this.languageCode].addressCountry)\n\t\t\t.addLineBreak()\n\t\t\t.addLineBreak()\n\t\t\t.addText(InvoiceTexts[this.languageCode].tutaPhone)\n\t\t\t.addLineBreak()\n\t\t\t.addText(InvoiceTexts.universal.tutaFax)\n\t\t\t.addLineBreak()\n\t\t\t.addText(InvoiceTexts.universal.tutaEmail)\n\t\t\t.addLineBreak()\n\t\t\t.addText(InvoiceTexts.universal.tutaWebsite)\n\t\t\t.addLineBreak()\n\t\t\t.addLineBreak()\n\t\t\t.addText(InvoiceTexts[this.languageCode].yourCustomerId)\n\t\t\t.addLineBreak()\n\t\t\t.addText(this.customerId)\n\t\t\t.changeFontSize(12)\n\t\t\t.addText(`${InvoiceTexts[this.languageCode].addressCity}, ${this.formatInvoiceDate(this.invoice.date)}`, [MARGIN_LEFT + 125, MARGIN_TOP + 70])\n\t}\n\n\t/**\n\t * The short address field of Tuta and the address field of the customer below the image\n\t */\n\tasync renderAddressField() {\n\t\tthis.doc\n\t\t\t.changeFontSize(9)\n\t\t\t.addText(`${InvoiceTexts.universal.companyName} - ${InvoiceTexts.universal.addressStreet} - ${InvoiceTexts[this.languageCode].addressPostal}`, [\n\t\t\t\tMARGIN_LEFT,\n\t\t\t\tMARGIN_TOP + 35,\n\t\t\t])\n\t\t\t.addLineBreak()\n\t\t\t.changeFontSize(11)\n\t\t\t.addLineBreak()\n\t\tawait this.doc.addAddressField([MARGIN_LEFT, MARGIN_TOP + 82], this.invoice.address)\n\t}\n\n\t/**\n\t * The basic invoice info above the invoice table\n\t */\n\trenderInvoiceInfo() {\n\t\tthis.doc\n\t\t\t.changeFontSize(18)\n\t\t\t.addText(this.getInvoiceTypeName(this.invoice.invoiceType, this.invoice.grandTotal), [MARGIN_LEFT, MARGIN_TOP + 90])\n\t\t\t.changeFont(PDF_FONTS.BOLD, 12)\n\t\t\t.addText(`${InvoiceTexts[this.languageCode].invoiceNumber} ${this.invoiceNumber}`, [MARGIN_LEFT, MARGIN_TOP + 100])\n\t\t\t.changeFont(PDF_FONTS.REGULAR, 11)\n\t\tif (this.invoice.invoiceType === InvoiceType.INVOICE) {\n\t\t\tthis.doc.addText(InvoiceTexts[this.languageCode].asAgreedBlock, [MARGIN_LEFT, MARGIN_TOP + 110])\n\t\t}\n\t}\n\n\t/**\n\t * The table with all invoice items\n\t */\n\tasync renderInvoiceTable() {\n\t\t// Define headers and column widths\n\t\tconst columns: TableColumn[] = [\n\t\t\t{ headerName: InvoiceTexts[this.languageCode].quantity, columnWidth: 19.8 },\n\t\t\t{ headerName: InvoiceTexts[this.languageCode].item, columnWidth: 95.7 },\n\t\t\t{ headerName: InvoiceTexts[this.languageCode].singlePrice, columnWidth: 24.75 },\n\t\t\t{ headerName: InvoiceTexts[this.languageCode].totalPrice, columnWidth: 24.75 },\n\t\t]\n\t\tconst tableData: Array<Array<string>> = []\n\n\t\t// Fill table data (two entries at the time) and render it\n\t\tfor (const invoiceItem of this.invoice.items) {\n\t\t\t// Entry with all invoice info\n\t\t\ttableData.push([\n\t\t\t\tthis.formatAmount(invoiceItem.itemType, invoiceItem.amount),\n\t\t\t\tgetInvoiceItemTypeName(invoiceItem.itemType, this.languageCode),\n\t\t\t\tinvoiceItem.singlePrice == null ? \"\" : this.formatInvoiceCurrency(invoiceItem.singlePrice),\n\t\t\t\tthis.formatInvoiceCurrency(invoiceItem.totalPrice),\n\t\t\t])\n\t\t\t// Entry with date range\n\t\t\ttableData.push([\"\", `${this.formatInvoiceDate(invoiceItem.startDate)} - ${this.formatInvoiceDate(invoiceItem.endDate)}`, \"\", \"\"])\n\t\t}\n\t\tconst tableEndPoint = await this.doc.addTable([MARGIN_LEFT, MARGIN_TOP + 120], 165, columns, tableData, this.getTableRowsForFirstPage())\n\n\t\tthis.renderTableSummary(tableEndPoint, columns)\n\t\tthis.doc.changeTextCursorPosition([MARGIN_LEFT, tableEndPoint + 4 * TABLE_VERTICAL_SPACING])\n\t}\n\n\t/**\n\t * Summary of totals and applied VAT below the rendered table\n\t */\n\trenderTableSummary(tableEndPoint: number, columns: TableColumn[]) {\n\t\t// Line break that's to be removed if no VAT appears in the summary\n\t\tlet additionalVerticalSpace = 1\n\n\t\tthis.doc.changeFont(PDF_FONTS.REGULAR, 11)\n\n\t\t// Sub total\n\t\tthis.doc.addTableRow([MARGIN_LEFT, tableEndPoint], columns, [\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\tInvoiceTexts[this.languageCode].subTotal,\n\t\t\tthis.formatInvoiceCurrency(this.invoice.subTotal),\n\t\t])\n\t\t// VAT\n\t\tif (this.invoice.vatType === VatType.ADD_VAT) {\n\t\t\t// AddedVat\n\t\t\tthis.doc.addTableRow([MARGIN_LEFT, tableEndPoint + TABLE_VERTICAL_SPACING], columns, [\n\t\t\t\t\"\",\n\t\t\t\t\"\",\n\t\t\t\t`${InvoiceTexts[this.languageCode].addedVat} ${this.invoice.vatRate}${InvoiceTexts[this.languageCode].vatPercent}`,\n\t\t\t\tthis.formatInvoiceCurrency(this.invoice.vat),\n\t\t\t])\n\t\t} else if (this.invoice.vatType === VatType.VAT_INCLUDED_SHOWN) {\n\t\t\t// IncludedVat\n\t\t\tthis.doc.addTableRow([MARGIN_LEFT, tableEndPoint + TABLE_VERTICAL_SPACING], columns, [\n\t\t\t\t\"\",\n\t\t\t\t\"\",\n\t\t\t\t`${InvoiceTexts[this.languageCode].includedVat} ${this.invoice.vatRate}${InvoiceTexts[this.languageCode].vatPercent}`,\n\t\t\t\tthis.formatInvoiceCurrency(this.invoice.vat),\n\t\t\t])\n\t\t} else {\n\t\t\tadditionalVerticalSpace -= 1\n\t\t}\n\t\t// Grand total\n\t\tthis.doc.changeFont(PDF_FONTS.BOLD, 11)\n\t\tthis.doc.addTableRow([MARGIN_LEFT, tableEndPoint + (additionalVerticalSpace + 1) * TABLE_VERTICAL_SPACING], columns, [\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\tInvoiceTexts[this.languageCode].grandTotal,\n\t\t\t// in case of NO_VAT_CHARGE_TUTAO we must not show the VAT in the invoice, but we pay the taxes ourselves, so they need to be existing on the invoice\n\t\t\tthis.formatInvoiceCurrency(this.invoice.vatType == VatType.NO_VAT_CHARGE_TUTAO ? this.invoice.subTotal : this.invoice.grandTotal),\n\t\t])\n\t}\n\n\t/**\n\t * Additional blocks displayed below the table depending on invoice type, vat type and payment method\n\t */\n\trenderAdditional() {\n\t\tthis.doc.changeFont(PDF_FONTS.REGULAR, 11)\n\n\t\t// No VAT / VAT not shown in table\n\t\tswitch (this.invoice.vatType) {\n\t\t\tcase VatType.ADD_VAT:\n\t\t\tcase VatType.VAT_INCLUDED_SHOWN:\n\t\t\t\tbreak\n\t\t\tcase VatType.NO_VAT:\n\t\t\t\tif (this.invoice.vatIdNumber != null) {\n\t\t\t\t\tthis.doc\n\t\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].reverseChargeVatIdNumber1)\n\t\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].reverseChargeVatIdNumber2)\n\t\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t\t.addText(`${InvoiceTexts[this.languageCode].yourVatId} `)\n\t\t\t\t\t\t.changeFont(PDF_FONTS.BOLD, 11)\n\t\t\t\t\t\t.addText(`${this.invoice.vatIdNumber}`)\n\t\t\t\t\t\t.changeFont(PDF_FONTS.REGULAR, 11)\n\t\t\t\t} else {\n\t\t\t\t\tthis.doc.addText(InvoiceTexts[this.languageCode].netPricesNoVatInGermany)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase VatType.NO_VAT_CHARGE_TUTAO:\n\t\t\t\tthis.doc\n\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].reverseChargeAffiliate)\n\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].reverseChargeVatIdNumber2)\n\t\t\t\tif (this.invoice.vatIdNumber != null) {\n\t\t\t\t\tthis.doc\n\t\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t\t.addText(`${InvoiceTexts[this.languageCode].yourVatId} `)\n\t\t\t\t\t\t.changeFont(PDF_FONTS.BOLD, 11)\n\t\t\t\t\t\t.addText(`${this.invoice.vatIdNumber}`)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase VatType.VAT_INCLUDED_HIDDEN:\n\t\t\t\tthis.doc.addText(InvoiceTexts[this.languageCode].noVatInGermany)\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Unknown VatType \" + this.invoice.vatType)\n\t\t}\n\t\tthis.doc.addLineBreak()\n\t\tthis.doc.addLineBreak()\n\n\t\t// Payment info\n\t\tif (this.invoice.invoiceType === InvoiceType.INVOICE) {\n\t\t\tswitch (this.invoice.paymentMethod) {\n\t\t\t\tcase PaymentMethod.INVOICE:\n\t\t\t\t\tthis.doc\n\t\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].paymentInvoiceDue1)\n\t\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].paymentInvoiceDue2)\n\t\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].paymentInvoiceHolder)\n\t\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].paymentInvoiceBank)\n\t\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].paymentInvoiceIBAN)\n\t\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].paymentInvoiceBIC)\n\t\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].paymentInvoiceProvideNumber1)\n\t\t\t\t\t\t.changeFont(PDF_FONTS.BOLD, 11)\n\t\t\t\t\t\t.addText(` ${this.invoiceNumber} `)\n\t\t\t\t\t\t.changeFont(PDF_FONTS.REGULAR, 11)\n\t\t\t\t\t\t.addLineBreak()\n\t\t\t\t\t\t.addText(InvoiceTexts[this.languageCode].paymentInvoiceProvideNumber2)\n\t\t\t\t\tbreak\n\t\t\t\tcase PaymentMethod.CREDIT_CARD:\n\t\t\t\t\tthis.doc.addText(InvoiceTexts[this.languageCode].paymentCreditCard)\n\t\t\t\t\tbreak\n\t\t\t\tcase PaymentMethod.PAYPAL:\n\t\t\t\t\tthis.doc.addText(InvoiceTexts[this.languageCode].paymentPaypal)\n\t\t\t\t\tbreak\n\t\t\t\tcase PaymentMethod.ACCOUNT_BALANCE:\n\t\t\t\t\tthis.doc.addText(InvoiceTexts[this.languageCode].paymentAccountBalance)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t\tthis.doc.addLineBreak().addLineBreak().addText(InvoiceTexts[this.languageCode].thankYou)\n\t\t}\n\t}\n\n\t/**\n\t * The legal disclaimer info at the bottom of the last page\n\t */\n\trenderLegalDisclaimer() {\n\t\tthis.doc\n\t\t\t.changeFont(PDF_FONTS.REGULAR, 10)\n\t\t\t.addText(InvoiceTexts[this.languageCode].legalNoSigned, [MARGIN_LEFT, MARGIN_TOP + 240])\n\t\t\t.addLineBreak()\n\t\t\t.addLineBreak()\n\t\t\t.changeTextGrayscale(0.5)\n\t\t\t.addText(InvoiceTexts[this.languageCode].legalRepresented, [MARGIN_LEFT, MARGIN_TOP + 250])\n\t\t\t.addLineBreak()\n\t\t\t.addText(InvoiceTexts[this.languageCode].legalRegistration)\n\t\t\t.addLineBreak()\n\t\t\t.addText(InvoiceTexts[this.languageCode].legalVatIdentification)\n\t\t\t.addLineBreak()\n\t\t\t.addText(InvoiceTexts[this.languageCode].legalBankAccount)\n\t}\n\n\t/**\n\t * Determines how many table rows (invoice items) can be rendered on the first page depending on the texts that follow after the table\n\t */\n\tgetTableRowsForFirstPage(): number {\n\t\tif (\n\t\t\tthis.invoice.paymentMethod === PaymentMethod.INVOICE &&\n\t\t\tthis.invoice.vatIdNumber != null &&\n\t\t\t// Needs fix @arm, @jug, @jop\n\t\t\t(this.invoice.vatType === VatType.NO_VAT || this.invoice.vatType === VatType.NO_VAT_CHARGE_TUTAO)\n\t\t) {\n\t\t\t// In these scenarios, there will be a lot of text after the table summary, so few rows can render\n\t\t\treturn 4\n\t\t} else {\n\t\t\t// In all other scenarios, there will be little text after the table summary, so more rows can render\n\t\t\treturn 8\n\t\t}\n\t}\n\n\t/**\n\t * Get the name of a given InvoiceType\n\t */\n\tgetInvoiceTypeName(type: NumberString, amount: NumberString): string {\n\t\tswitch (type) {\n\t\t\tcase InvoiceType.INVOICE:\n\t\t\t\treturn InvoiceTexts[this.languageCode].invoice\n\t\t\tcase InvoiceType.CREDIT:\n\t\t\t\treturn InvoiceTexts[this.languageCode].credit\n\t\t\tcase InvoiceType.REFERRAL_CREDIT:\n\t\t\t\tif (parseFloat(amount) >= 0) {\n\t\t\t\t\treturn InvoiceTexts[this.languageCode].credit\n\t\t\t\t} else {\n\t\t\t\t\treturn InvoiceTexts[this.languageCode].cancelCredit\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid InvoiceType \" + type)\n\t\t}\n\t}\n\n\t/**\n\t * Format the date depending on document language (dd.mm.yyyy) / (dd. Mon yyyy)\n\t */\n\tformatInvoiceDate(date: Date | null): string {\n\t\tif (date == null) return \"\"\n\t\tif (this.languageCode === \"de\") {\n\t\t\treturn date.toLocaleDateString(\"de-DE\", {\n\t\t\t\tday: \"2-digit\",\n\t\t\t\tmonth: \"2-digit\",\n\t\t\t\tyear: \"numeric\",\n\t\t\t})\n\t\t} else {\n\t\t\treturn date.toLocaleDateString(\"en-UK\", {\n\t\t\t\tday: \"2-digit\",\n\t\t\t\tmonth: \"short\",\n\t\t\t\tyear: \"numeric\",\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Format the currency separator (dot, comma) depending on the country\n\t */\n\tformatInvoiceCurrency(price: string | number): string {\n\t\tprice = `${price} EUR`\n\t\treturn this.languageCode === \"de\" ? price.replace(\".\", \",\") : price\n\t}\n\n\t/**\n\t * Format the amount of storage into the appropriate byte unit if the item is a legacy storage package. Otherwise, return as is\n\t */\n\tformatAmount(itemType: string, amount: string): string {\n\t\tif (itemType === InvoiceItemType.StoragePackage || itemType === InvoiceItemType.StoragePackageUpgrade) {\n\t\t\tconst numAmount = Number(amount)\n\t\t\treturn numAmount < 1000 ? `${amount} GB` : `${numAmount / 1000} TB`\n\t\t} else {\n\t\t\treturn amount\n\t\t}\n\t}\n}\n"],"mappings":"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"}