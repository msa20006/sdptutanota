{"version":3,"file":"dist-BY49f75m.js","names":["mock","demonstration"],"sources":["../../packages/tutanota-test-utils/dist/TestUtils.js"],"sourcesContent":["import otest from \"@tutao/otest\";\nimport * as td from \"testdouble\";\nimport { lastThrow, mapObject } from \"@tutao/tutanota-utils\";\n/**\n * Mocks an attribute (function or object) on an object and makes sure that it can be restored to the original attribute by calling unmockAttribute() later.\n * Additionally creates a spy for the attribute if the attribute is a function.\n * @param object The object on which the attribute exists.\n * @param attributeOnObject The attribute to mock.\n * @param attributeMock The attribute mock.\n * @returns An object to be passed to unmockAttribute() in order to restore the original attribute.\n */\nexport function mockAttribute(object, attributeOnObject, attributeMock) {\n    if (attributeOnObject == null)\n        throw new Error(\"attributeOnObject is undefined\");\n    let attributeName = Object.getOwnPropertyNames(object).find((key) => object[key] === attributeOnObject);\n    if (!attributeName) {\n        attributeName = Object.getOwnPropertyNames(Object.getPrototypeOf(object)).find((key) => object[key] === attributeOnObject);\n    }\n    if (!attributeName) {\n        throw new Error(\"attribute not found on object\");\n    }\n    object[attributeName] = typeof attributeOnObject == \"function\" ? spy(attributeMock) : attributeMock;\n    return {\n        _originalObject: object,\n        _originalAttribute: attributeOnObject,\n        _attributeName: attributeName,\n    };\n}\nexport function unmockAttribute(mock) {\n    mock._originalObject[mock._attributeName] = mock._originalAttribute;\n}\nexport function spy(producer) {\n    const invocations = [];\n    // make it *non* arrow function so that it can be bound to objects\n    const s = function (...args) {\n        invocations.push(args);\n        return producer && producer.apply(this, args);\n    };\n    s.invocations = invocations;\n    Object.defineProperty(s, \"callCount\", {\n        get() {\n            return s.invocations.length;\n        },\n    });\n    Object.defineProperty(s, \"args\", {\n        get() {\n            return lastThrow(s.invocations);\n        },\n    });\n    Object.defineProperty(s, \"calls\", {\n        get() {\n            return s.invocations;\n        },\n    });\n    return s;\n}\n/**\n * Create partial mock, i.e. allows mocking attributes or functions on actual instances\n * @param obj The base mock object on which mocker may overwrite attributes or functions\n * @param mocker This function receives obj and can overwrite attributes or functions.\n * @returns {T}\n */\nexport const mock = (obj, mocker) => {\n    mocker(obj);\n    return obj;\n};\nexport function mapToObject(map) {\n    const obj = {};\n    for (const [key, value] of map.entries()) {\n        obj[key] = value;\n    }\n    return obj;\n}\nexport function replaceAllMaps(toReplace) {\n    return toReplace instanceof Map\n        ? replaceAllMaps(mapToObject(toReplace))\n        : toReplace instanceof Array\n            ? toReplace.map(replaceAllMaps)\n            : toReplace != null && Object.getPrototypeOf(toReplace) === Object.prototype // plain object\n                ? mapObject(replaceAllMaps, toReplace)\n                : toReplace;\n}\nexport async function assertThrows(expected, fn) {\n    try {\n        await fn();\n    }\n    catch (e) {\n        otest.check(e instanceof expected).equals(true)(\"AssertThrows failed: Expected a \" + expected.name + \" to be thrown, but got a \" + e);\n        return e;\n    }\n    throw new Error(\"AssertThrows failed: Expected a \" + expected + \" to be thrown, but nothing was\");\n}\nexport function makeTimeoutMock() {\n    let timeoutId = 1;\n    let scheduledFn;\n    const timeoutMock = function (fn) {\n        scheduledFn = fn;\n        timeoutId++;\n        return timeoutId;\n    };\n    const spiedMock = spy(timeoutMock);\n    spiedMock.next = function () {\n        scheduledFn?.();\n    };\n    return spiedMock;\n}\nfunction delay(ms) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n/** Verify using testdouble, but register as an otest assertion */\nexport function verify(demonstration, config) {\n    function check(demonstration) {\n        try {\n            td.verify(demonstration, config);\n            return {\n                pass: true,\n                message: \"Successful verification\",\n            };\n        }\n        catch (e) {\n            return {\n                pass: false,\n                message: e.toString(),\n            };\n        }\n    }\n    otest(demonstration).satisfies(check);\n}\nexport function throwsErrorWithMessage(errorClass, message) {\n    return (fn) => {\n        try {\n            fn();\n            return { pass: false, message: \"Did not throw!\" };\n        }\n        catch (e) {\n            const pass = e instanceof errorClass && typeof e.message === \"string\" && e.message.includes(message);\n            return { pass, message: `Error of type ${errorClass} w/ message ${message}, instead got ${e}` };\n        }\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWO,SAAS,cAAc,QAAQ,mBAAmB,eAAe;AACpE,KAAI,qBAAqB,KACrB,OAAM,IAAI,MAAM;CACpB,IAAI,gBAAgB,OAAO,oBAAoB,OAAO,CAAC,KAAK,CAAC,QAAQ,OAAO,SAAS,kBAAkB;AACvG,MAAK,cACD,iBAAgB,OAAO,oBAAoB,OAAO,eAAe,OAAO,CAAC,CAAC,KAAK,CAAC,QAAQ,OAAO,SAAS,kBAAkB;AAE9H,MAAK,cACD,OAAM,IAAI,MAAM;AAEpB,QAAO,wBAAwB,qBAAqB,aAAa,IAAI,cAAc,GAAG;AACtF,QAAO;EACH,iBAAiB;EACjB,oBAAoB;EACpB,gBAAgB;CACnB;AACJ;AACM,SAAS,gBAAgBA,QAAM;AAClC,QAAK,gBAAgBA,OAAK,kBAAkBA,OAAK;AACpD;AACM,SAAS,IAAI,UAAU;CAC1B,MAAM,cAAc,CAAE;CAEtB,MAAM,IAAI,SAAU,GAAG,MAAM;AACzB,cAAY,KAAK,KAAK;AACtB,SAAO,YAAY,SAAS,MAAM,MAAM,KAAK;CAChD;AACD,GAAE,cAAc;AAChB,QAAO,eAAe,GAAG,aAAa,EAClC,MAAM;AACF,SAAO,EAAE,YAAY;CACxB,EACJ,EAAC;AACF,QAAO,eAAe,GAAG,QAAQ,EAC7B,MAAM;AACF,SAAO,UAAU,EAAE,YAAY;CAClC,EACJ,EAAC;AACF,QAAO,eAAe,GAAG,SAAS,EAC9B,MAAM;AACF,SAAO,EAAE;CACZ,EACJ,EAAC;AACF,QAAO;AACV;MAOY,OAAO,CAAC,KAAK,WAAW;AACjC,QAAO,IAAI;AACX,QAAO;AACV;AACM,SAAS,YAAY,KAAK;CAC7B,MAAM,MAAM,CAAE;AACd,MAAK,MAAM,CAAC,KAAK,MAAM,IAAI,IAAI,SAAS,CACpC,KAAI,OAAO;AAEf,QAAO;AACV;AAUM,eAAe,aAAa,UAAU,IAAI;AAC7C,KAAI;AACA,QAAM,IAAI;CACb,SACM,GAAG;AACN,eAAM,MAAM,aAAa,SAAS,CAAC,OAAO,KAAK,CAAC,qCAAqC,SAAS,OAAO,8BAA8B,EAAE;AACrI,SAAO;CACV;AACD,OAAM,IAAI,MAAM,qCAAqC,WAAW;AACnE;AACM,SAAS,kBAAkB;CAC9B,IAAI,YAAY;CAChB,IAAI;CACJ,MAAM,cAAc,SAAU,IAAI;AAC9B,gBAAc;AACd;AACA,SAAO;CACV;CACD,MAAM,YAAY,IAAI,YAAY;AAClC,WAAU,OAAO,WAAY;AACzB,iBAAe;CAClB;AACD,QAAO;AACV;AAOM,SAAS,OAAO,eAAe,QAAQ;CAC1C,SAAS,MAAMC,iBAAe;AAC1B,MAAI;AACA,qBAAG,OAAOA,iBAAe,OAAO;AAChC,UAAO;IACH,MAAM;IACN,SAAS;GACZ;EACJ,SACM,GAAG;AACN,UAAO;IACH,MAAM;IACN,SAAS,EAAE,UAAU;GACxB;EACJ;CACJ;AACD,cAAM,cAAc,CAAC,UAAU,MAAM;AACxC"}