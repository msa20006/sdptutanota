{"version":3,"file":"PinBiometricsNews-1YR5uBKd.js","names":["credentialsProvider: CredentialsProvider","supportedModes: ReadonlyArray<CredentialEncryptionMode>","previousSelection: CredentialEncryptionMode | null","mode: CredentialEncryptionMode","attrs: SelectCredentialEncryptionModeDialogAttrs","name: TranslationKey","value: CredentialEncryptionMode","onclick: () => unknown","newsModel: NewsModel","credentialsProvider: CredentialsProvider","userId: Id","newsId: NewsId"],"sources":["../../src/common/gui/dialogs/SelectCredentialsEncryptionModeDialog.ts","../../src/common/misc/news/items/PinBiometricsNews.ts"],"sourcesContent":["import { CredentialEncryptionMode } from \"../../misc/credentials/CredentialEncryptionMode.js\"\nimport { Dialog, DialogType } from \"../base/Dialog\"\nimport type { CredentialsProvider } from \"../../misc/credentials/CredentialsProvider.js\"\nimport m, { Children, Component, Vnode } from \"mithril\"\nimport { lang, TranslationKey } from \"../../misc/LanguageViewModel\"\nimport { DialogHeaderBar } from \"../base/DialogHeaderBar\"\nimport type { RadioSelectorAttrs, RadioSelectorOption } from \"../base/RadioSelector\"\nimport { RadioSelector } from \"../base/RadioSelector\"\nimport { ButtonType } from \"../base/Button.js\"\nimport { CredentialAuthenticationError } from \"../../api/common/error/CredentialAuthenticationError\"\nimport { KeyPermanentlyInvalidatedError } from \"../../api/common/error/KeyPermanentlyInvalidatedError\"\nimport { liveDataAttrs } from \"../AriaUtils\"\nimport type { DeferredObject } from \"@tutao/tutanota-utils\"\nimport { defer } from \"@tutao/tutanota-utils\"\nimport { windowFacade } from \"../../misc/WindowFacade\"\nimport { CancelledError } from \"../../api/common/error/CancelledError.js\"\nimport { Keys } from \"../../api/common/TutanotaConstants.js\"\nimport { BaseButton } from \"../base/buttons/BaseButton.js\"\n\nexport const DEFAULT_CREDENTIAL_ENCRYPTION_MODE = CredentialEncryptionMode.DEVICE_LOCK\n\nexport async function showCredentialsEncryptionModeDialog(credentialsProvider: CredentialsProvider): Promise<void> {\n\tawait CredentialEncryptionMethodDialog.showAndWaitForSelection(credentialsProvider)\n}\n\nclass CredentialEncryptionMethodDialog {\n\tprivate error: string | null\n\tprivate readonly finished: DeferredObject<void>\n\tprivate readonly dialog: Dialog\n\n\tprivate constructor(\n\t\tprivate readonly credentialsProvider: CredentialsProvider,\n\t\tprivate readonly supportedModes: ReadonlyArray<CredentialEncryptionMode>,\n\t\tprivate readonly previousSelection: CredentialEncryptionMode | null,\n\t) {\n\t\tthis.error = null\n\t\tthis.finished = defer()\n\t\tthis.dialog = new Dialog(DialogType.EditMedium, {\n\t\t\tview: () => {\n\t\t\t\t// We need custom dialog because:\n\t\t\t\t// - We don't need large dialog\n\t\t\t\t// - We want our selector button in the body and not in the header and it must stick to the bottom of the dialog\n\t\t\t\t//   (large dialog scrolls its contents and that's *not* what we want for that button).\n\t\t\t\treturn m(\"\", [\n\t\t\t\t\t// Only allow skipping if it's first time user selects mode (not from settings)\n\t\t\t\t\tpreviousSelection == null\n\t\t\t\t\t\t? m(DialogHeaderBar, {\n\t\t\t\t\t\t\t\tleft: () => [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: \"skip_action\",\n\t\t\t\t\t\t\t\t\t\tclick: () => this.onModeSelected(DEFAULT_CREDENTIAL_ENCRYPTION_MODE),\n\t\t\t\t\t\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\t\t\t\t\t} as const,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t  })\n\t\t\t\t\t\t: null,\n\t\t\t\t\tm(SelectCredentialsEncryptionModeView, {\n\t\t\t\t\t\tclass: \"scroll pt plr-l height-100p\",\n\t\t\t\t\t\terror: this.error,\n\t\t\t\t\t\tonConfirm: (mode) => this.onModeSelected(mode),\n\t\t\t\t\t\tsupportedModes: this.supportedModes,\n\t\t\t\t\t\tpreviousSelection: this.previousSelection ?? DEFAULT_CREDENTIAL_ENCRYPTION_MODE,\n\t\t\t\t\t}),\n\t\t\t\t])\n\t\t\t},\n\t\t}).addShortcut({\n\t\t\thelp: \"close_alt\",\n\t\t\tkey: Keys.ESC,\n\t\t\texec: () => this.dialog.close(),\n\t\t})\n\t\tthis.dialog.setCloseHandler(() => {\n\t\t\tthis.finished.resolve()\n\t\t\tthis.dialog.close()\n\t\t})\n\t}\n\n\tstatic async showAndWaitForSelection(credentialsProvider: CredentialsProvider) {\n\t\tconst supportedModes = await credentialsProvider.getSupportedEncryptionModes()\n\t\tconst previousSelection = await credentialsProvider.getCredentialEncryptionMode()\n\t\tconst credentialsDialog = new CredentialEncryptionMethodDialog(credentialsProvider, supportedModes, previousSelection)\n\n\t\tcredentialsDialog.dialog.show()\n\n\t\tawait credentialsDialog.finished.promise\n\t}\n\n\tprivate async onModeSelected(mode: CredentialEncryptionMode) {\n\t\ttry {\n\t\t\tawait this.credentialsProvider.setCredentialEncryptionMode(mode)\n\n\t\t\tthis.dialog.close()\n\n\t\t\tthis.finished.resolve()\n\t\t} catch (e) {\n\t\t\tif (e instanceof CredentialAuthenticationError) {\n\t\t\t\tthis.error = e.message\n\t\t\t\tm.redraw()\n\t\t\t} else if (e instanceof KeyPermanentlyInvalidatedError) {\n\t\t\t\tawait this.credentialsProvider.clearCredentials(e)\n\n\t\t\t\tthis.dialog.close()\n\n\t\t\t\tawait Dialog.message(\"credentialsKeyInvalidated_msg\")\n\t\t\t\twindowFacade.reload({})\n\t\t\t} else if (e instanceof CancelledError) {\n\t\t\t\t// if the user cancels, is unrecognized by Face ID, enters an incorrect device password, etc., we should not close the dialog\n\t\t\t\t// and instead let them try again or choose a different encryption mode\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n}\n\ntype SelectCredentialEncryptionModeDialogAttrs = {\n\tclass?: string\n\tpreviousSelection: CredentialEncryptionMode\n\tonConfirm: ((encryptionMode: CredentialEncryptionMode) => unknown) | null\n\tsupportedModes: ReadonlyArray<CredentialEncryptionMode>\n\terror: string | null\n\tonModeSelected?: (mode: CredentialEncryptionMode) => unknown\n}\n\nexport class SelectCredentialsEncryptionModeView implements Component<SelectCredentialEncryptionModeDialogAttrs> {\n\tprivate currentMode: CredentialEncryptionMode\n\n\tconstructor({ attrs }: Vnode<SelectCredentialEncryptionModeDialogAttrs>) {\n\t\tthis.currentMode = attrs.previousSelection\n\t}\n\n\tview({ attrs }: Vnode<SelectCredentialEncryptionModeDialogAttrs>): Children {\n\t\tconst options = this.getSupportedOptions(attrs)\n\n\t\tconst { onConfirm } = attrs\n\t\treturn [\n\t\t\tm(\n\t\t\t\t\".flex.col\",\n\t\t\t\t{\n\t\t\t\t\tclass: attrs.class,\n\t\t\t\t},\n\t\t\t\t[\n\t\t\t\t\tattrs.error ? m(\".small.center.statusTextColor.pb-s\", liveDataAttrs(), attrs.error) : null,\n\t\t\t\t\tm(\"\", lang.get(\"credentialsEncryptionModeSelection_msg\")),\n\t\t\t\t\tm(\n\t\t\t\t\t\t\".mt\",\n\t\t\t\t\t\tm(RadioSelector, {\n\t\t\t\t\t\t\tname: \"credentialsEncryptionMode_label\",\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tselectedOption: this.currentMode,\n\t\t\t\t\t\t\tonOptionSelected: (mode: CredentialEncryptionMode) => {\n\t\t\t\t\t\t\t\tthis.currentMode = mode\n\t\t\t\t\t\t\t\tattrs.onModeSelected?.(mode)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} satisfies RadioSelectorAttrs<CredentialEncryptionMode>),\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t),\n\t\t\tonConfirm ? this.renderSelectButton(() => onConfirm(this.currentMode)) : null,\n\t\t]\n\t}\n\n\tprivate getSupportedOptions(attrs: SelectCredentialEncryptionModeDialogAttrs): Array<RadioSelectorOption<CredentialEncryptionMode>> {\n\t\tconst generateOption = (name: TranslationKey, value: CredentialEncryptionMode): RadioSelectorOption<CredentialEncryptionMode> => ({\n\t\t\tname,\n\t\t\tvalue,\n\t\t})\n\n\t\tconst options = [\n\t\t\tgenerateOption(\"credentialsEncryptionModeDeviceLock_label\", CredentialEncryptionMode.DEVICE_LOCK),\n\t\t\tgenerateOption(\"credentialsEncryptionModeDeviceCredentials_label\", CredentialEncryptionMode.SYSTEM_PASSWORD),\n\t\t\tgenerateOption(\"credentialsEncryptionModeBiometrics_label\", CredentialEncryptionMode.BIOMETRICS),\n\t\t\tgenerateOption(\"credentialsEncryptionModeAppPassword_label\", CredentialEncryptionMode.APP_PASSWORD),\n\t\t] as const\n\t\treturn options.filter((option) => attrs.supportedModes.includes(option.value))\n\t}\n\n\tprivate renderSelectButton(onclick: () => unknown) {\n\t\treturn m(BaseButton, {\n\t\t\tlabel: \"ok_action\",\n\t\t\ttext: lang.get(\"ok_action\"),\n\t\t\tclass: \"uppercase accent-bg full-width center b content-fg flash\",\n\t\t\tstyle: {\n\t\t\t\theight: \"60px\",\n\t\t\t},\n\t\t\tonclick,\n\t\t})\n\t}\n}\n","import { NewsListItem } from \"../NewsListItem.js\"\nimport { NewsId } from \"../../../api/entities/tutanota/TypeRefs.js\"\nimport Mithril from \"mithril\"\nimport m from \"mithril\"\nimport { isAndroidApp, isIOSApp } from \"../../../api/common/Env.js\"\nimport { lang } from \"../../LanguageViewModel.js\"\nimport { Button, ButtonType } from \"../../../gui/base/Button.js\"\nimport { NewsModel } from \"../NewsModel.js\"\nimport { showCredentialsEncryptionModeDialog } from \"../../../gui/dialogs/SelectCredentialsEncryptionModeDialog.js\"\nimport { CredentialsProvider } from \"../../credentials/CredentialsProvider.js\"\nimport { Dialog } from \"../../../gui/base/Dialog.js\"\nimport { ExternalLink } from \"../../../gui/base/ExternalLink.js\"\n\nconst playstoreLink = \"https://play.google.com/store/apps/details?id=de.tutao.tutanota\"\nconst appstoreLink = \"https://apps.apple.com/app/tutanota/id922429609\"\n\n/**\n * News item that reminds the user of configuring pin/ biometrics\n */\nexport class PinBiometricsNews implements NewsListItem {\n\tconstructor(private readonly newsModel: NewsModel, private readonly credentialsProvider: CredentialsProvider, private readonly userId: Id) {}\n\n\tisShown(newsId: NewsId): Promise<boolean> {\n\t\treturn Promise.resolve((isIOSApp() || isAndroidApp()) && !this.newsModel.hasAcknowledgedNewsForDevice(newsId.newsItemId))\n\t}\n\n\trender(newsId: NewsId): Mithril.Children {\n\t\tconst displayedLink = isAndroidApp() ? playstoreLink : appstoreLink\n\t\treturn m(\".full-width\", [\n\t\t\tm(\".h4\", { style: { \"text-transform\": \"capitalize\" } }, lang.get(\"pinBiometrics_action\")),\n\t\t\tm(\"p\", lang.get(\"pinBiometrics1_msg\", { \"{secureNowAction}\": lang.get(\"secureNow_action\") })),\n\t\t\tm(\"p\", lang.get(\"pinBiometrics2_msg\")),\n\t\t\tm(\"p\", [m(\".text-break\", [m(ExternalLink, { href: displayedLink, isCompanySite: false })])]),\n\t\t\tm(\"p\", lang.get(\"pinBiometrics3_msg\")),\n\t\t\tm(\".flex-end.flex-no-grow-no-shrink-auto.flex-wrap\", [\n\t\t\t\tthis.renderLaterButton(newsId),\n\t\t\t\tthis.renderDismissButton(newsId),\n\t\t\t\tthis.renderConfirmButton(newsId),\n\t\t\t]),\n\t\t])\n\t}\n\n\tprivate renderLaterButton(newsId: NewsId) {\n\t\treturn m(Button, {\n\t\t\tlabel: \"decideLater_action\",\n\t\t\ttype: ButtonType.Secondary,\n\t\t\tclick: async () => {\n\t\t\t\tawait this.newsModel.acknowledgeNews(newsId.newsItemId)\n\t\t\t\tm.redraw()\n\t\t\t},\n\t\t})\n\t}\n\n\tprivate renderDismissButton(newsId: NewsId) {\n\t\treturn m(Button, {\n\t\t\tlabel: \"noThanks_action\",\n\t\t\ttype: ButtonType.Secondary,\n\t\t\tclick: async () => {\n\t\t\t\tthis.newsModel.acknowledgeNewsForDevice(newsId.newsItemId)\n\t\t\t\tawait this.newsModel.acknowledgeNews(newsId.newsItemId)\n\t\t\t\tm.redraw()\n\t\t\t},\n\t\t})\n\t}\n\n\tprivate renderConfirmButton(newsId: NewsId) {\n\t\treturn m(Button, {\n\t\t\tlabel: \"secureNow_action\",\n\t\t\tclick: async () => {\n\t\t\t\tif ((await this.credentialsProvider.getCredentialsInfoByUserId(this.userId)) === null) {\n\t\t\t\t\tawait Dialog.message(lang.getTranslation(\"needSavedCredentials_msg\", { \"{storePasswordAction}\": lang.get(\"storePassword_action\") }))\n\t\t\t\t} else {\n\t\t\t\t\tawait showCredentialsEncryptionModeDialog(this.credentialsProvider)\n\n\t\t\t\t\tthis.newsModel.acknowledgeNewsForDevice(newsId.newsItemId)\n\t\t\t\t\tawait this.newsModel.acknowledgeNews(newsId.newsItemId)\n\t\t\t\t\tm.redraw()\n\t\t\t\t}\n\t\t\t},\n\t\t\ttype: ButtonType.Primary,\n\t\t})\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmBa,qCAAqC,yBAAyB;AAEpE,eAAe,oCAAoCA,qBAAyD;AAClH,OAAM,iCAAiC,wBAAwB,oBAAoB;AACnF;IAEK,mCAAN,MAAM,iCAAiC;CACtC,AAAQ;CACR,AAAiB;CACjB,AAAiB;CAEjB,AAAQ,YACUA,qBACAC,gBACAC,mBAChB;EA0JF,KA7JkB;EA6JjB,KA5JiB;EA4JhB,KA3JgB;AAEjB,OAAK,QAAQ;AACb,OAAK,WAAW,OAAO;AACvB,OAAK,SAAS,IAAI,OAAO,WAAW,YAAY,EAC/C,MAAM,MAAM;AAKX,UAAO,gBAAE,IAAI,CAEZ,qBAAqB,OAClB,gBAAE,iBAAiB,EACnB,MAAM,MAAM,CACX;IACC,OAAO;IACP,OAAO,MAAM,KAAK,eAAe,mCAAmC;IACpE,MAAM,WAAW;GACjB,CACD,EACA,EAAC,GACF,MACH,gBAAE,qCAAqC;IACtC,OAAO;IACP,OAAO,KAAK;IACZ,WAAW,CAAC,SAAS,KAAK,eAAe,KAAK;IAC9C,gBAAgB,KAAK;IACrB,mBAAmB,KAAK,qBAAqB;GAC7C,EAAC,AACF,EAAC;EACF,EACD,GAAE,YAAY;GACd,MAAM;GACN,KAAK,KAAK;GACV,MAAM,MAAM,KAAK,OAAO,OAAO;EAC/B,EAAC;AACF,OAAK,OAAO,gBAAgB,MAAM;AACjC,QAAK,SAAS,SAAS;AACvB,QAAK,OAAO,OAAO;EACnB,EAAC;CACF;CAED,aAAa,wBAAwBF,qBAA0C;EAC9E,MAAM,iBAAiB,MAAM,oBAAoB,6BAA6B;EAC9E,MAAM,oBAAoB,MAAM,oBAAoB,6BAA6B;EACjF,MAAM,oBAAoB,IAAI,iCAAiC,qBAAqB,gBAAgB;AAEpG,oBAAkB,OAAO,MAAM;AAE/B,QAAM,kBAAkB,SAAS;CACjC;CAED,MAAc,eAAeG,MAAgC;AAC5D,MAAI;AACH,SAAM,KAAK,oBAAoB,4BAA4B,KAAK;AAEhE,QAAK,OAAO,OAAO;AAEnB,QAAK,SAAS,SAAS;EACvB,SAAQ,GAAG;AACX,OAAI,aAAa,+BAA+B;AAC/C,SAAK,QAAQ,EAAE;AACf,oBAAE,QAAQ;GACV,WAAU,aAAa,gCAAgC;AACvD,UAAM,KAAK,oBAAoB,iBAAiB,EAAE;AAElD,SAAK,OAAO,OAAO;AAEnB,UAAM,OAAO,QAAQ,gCAAgC;AACrD,iBAAa,OAAO,CAAE,EAAC;GACvB,WAAU,aAAa,gBAAgB,CAGvC,MACA,OAAM;EAEP;CACD;AACD;IAWY,sCAAN,MAA0G;CAChH,AAAQ;CAER,YAAY,EAAE,OAAyD,EAAE;AACxE,OAAK,cAAc,MAAM;CACzB;CAED,KAAK,EAAE,OAAyD,EAAY;EAC3E,MAAM,UAAU,KAAK,oBAAoB,MAAM;EAE/C,MAAM,EAAE,WAAW,GAAG;AACtB,SAAO,CACN,gBACC,aACA,EACC,OAAO,MAAM,MACb,GACD;GACC,MAAM,QAAQ,gBAAE,sCAAsC,eAAe,EAAE,MAAM,MAAM,GAAG;GACtF,gBAAE,IAAI,KAAK,IAAI,yCAAyC,CAAC;GACzD,gBACC,OACA,gBAAE,eAAe;IAChB,MAAM;IACN;IACA,gBAAgB,KAAK;IACrB,kBAAkB,CAACA,SAAmC;AACrD,UAAK,cAAc;AACnB,WAAM,iBAAiB,KAAK;IAC5B;GACD,EAAwD,CACzD;EACD,EACD,EACD,YAAY,KAAK,mBAAmB,MAAM,UAAU,KAAK,YAAY,CAAC,GAAG,IACzE;CACD;CAED,AAAQ,oBAAoBC,OAAwG;EACnI,MAAM,iBAAiB,CAACC,MAAsBC,WAAoF;GACjI;GACA;EACA;EAED,MAAM,UAAU;GACf,eAAe,6CAA6C,yBAAyB,YAAY;GACjG,eAAe,oDAAoD,yBAAyB,gBAAgB;GAC5G,eAAe,6CAA6C,yBAAyB,WAAW;GAChG,eAAe,8CAA8C,yBAAyB,aAAa;EACnG;AACD,SAAO,QAAQ,OAAO,CAAC,WAAW,MAAM,eAAe,SAAS,OAAO,MAAM,CAAC;CAC9E;CAED,AAAQ,mBAAmBC,SAAwB;AAClD,SAAO,gBAAE,YAAY;GACpB,OAAO;GACP,MAAM,KAAK,IAAI,YAAY;GAC3B,OAAO;GACP,OAAO,EACN,QAAQ,OACR;GACD;EACA,EAAC;CACF;AACD;;;;AC9KD,MAAM,gBAAgB;AACtB,MAAM,eAAe;IAKR,oBAAN,MAAgD;CACtD,YAA6BC,WAAuCC,qBAA2DC,QAAY;EA+D3I,KA/D6B;EA+D5B,KA/DmE;EA+DlE,KA/D6H;CAAc;CAE7I,QAAQC,QAAkC;AACzC,SAAO,QAAQ,SAAS,UAAU,IAAI,cAAc,MAAM,KAAK,UAAU,6BAA6B,OAAO,WAAW,CAAC;CACzH;CAED,OAAOA,QAAkC;EACxC,MAAM,gBAAgB,cAAc,GAAG,gBAAgB;AACvD,SAAO,gBAAE,eAAe;GACvB,gBAAE,OAAO,EAAE,OAAO,EAAE,kBAAkB,aAAc,EAAE,GAAE,KAAK,IAAI,uBAAuB,CAAC;GACzF,gBAAE,KAAK,KAAK,IAAI,sBAAsB,EAAE,qBAAqB,KAAK,IAAI,mBAAmB,CAAE,EAAC,CAAC;GAC7F,gBAAE,KAAK,KAAK,IAAI,qBAAqB,CAAC;GACtC,gBAAE,KAAK,CAAC,gBAAE,eAAe,CAAC,gBAAE,cAAc;IAAE,MAAM;IAAe,eAAe;GAAO,EAAC,AAAC,EAAC,AAAC,EAAC;GAC5F,gBAAE,KAAK,KAAK,IAAI,qBAAqB,CAAC;GACtC,gBAAE,mDAAmD;IACpD,KAAK,kBAAkB,OAAO;IAC9B,KAAK,oBAAoB,OAAO;IAChC,KAAK,oBAAoB,OAAO;GAChC,EAAC;EACF,EAAC;CACF;CAED,AAAQ,kBAAkBA,QAAgB;AACzC,SAAO,gBAAE,QAAQ;GAChB,OAAO;GACP,MAAM,WAAW;GACjB,OAAO,YAAY;AAClB,UAAM,KAAK,UAAU,gBAAgB,OAAO,WAAW;AACvD,oBAAE,QAAQ;GACV;EACD,EAAC;CACF;CAED,AAAQ,oBAAoBA,QAAgB;AAC3C,SAAO,gBAAE,QAAQ;GAChB,OAAO;GACP,MAAM,WAAW;GACjB,OAAO,YAAY;AAClB,SAAK,UAAU,yBAAyB,OAAO,WAAW;AAC1D,UAAM,KAAK,UAAU,gBAAgB,OAAO,WAAW;AACvD,oBAAE,QAAQ;GACV;EACD,EAAC;CACF;CAED,AAAQ,oBAAoBA,QAAgB;AAC3C,SAAO,gBAAE,QAAQ;GAChB,OAAO;GACP,OAAO,YAAY;AAClB,QAAK,MAAM,KAAK,oBAAoB,2BAA2B,KAAK,OAAO,KAAM,KAChF,OAAM,OAAO,QAAQ,KAAK,eAAe,4BAA4B,EAAE,yBAAyB,KAAK,IAAI,uBAAuB,CAAE,EAAC,CAAC;KAC9H;AACN,WAAM,oCAAoC,KAAK,oBAAoB;AAEnE,UAAK,UAAU,yBAAyB,OAAO,WAAW;AAC1D,WAAM,KAAK,UAAU,gBAAgB,OAAO,WAAW;AACvD,qBAAE,QAAQ;IACV;GACD;GACD,MAAM,WAAW;EACjB,EAAC;CACF;AACD"}