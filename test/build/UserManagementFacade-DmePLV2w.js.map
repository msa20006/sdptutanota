{"version":3,"file":"UserManagementFacade-DmePLV2w.js","names":["userFacade: UserFacade","groupManagement: GroupManagementFacade","counters: CounterFacade","entityClient: EntityClient","serviceExecutor: IServiceExecutor","operationProgressTracker: ExposedOperationProgressTracker","loginFacade: LoginFacade","pqFacade: PQFacade","keyLoaderFacade: KeyLoaderFacade","recoverCodeFacade: RecoverCodeFacade","user: User","newPassword: string","admin: boolean","restore: boolean","name: string","mailAddress: string","password: string","userIndex: number","overallNbrOfUsersToCreate: number","operationId: OperationId","userGroupKey: VersionedKey","userGroupInfoSessionKey: AesKey","customerGroupKey: VersionedKey","passphrase: string","userName: string","recoverData: RecoverData"],"sources":["../../src/common/api/worker/facades/lazy/UserManagementFacade.ts"],"sourcesContent":["import { AccountType, Const, CounterType, DEFAULT_KDF_TYPE, GroupType } from \"../../../common/TutanotaConstants.js\"\nimport { createMembershipAddData, createResetPasswordPostIn, createUserDataDelete, GroupTypeRef, User } from \"../../../entities/sys/TypeRefs.js\"\nimport { getFirstOrThrow, neverNull } from \"@tutao/tutanota-utils\"\nimport type { UserAccountUserData } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { createUserAccountCreateData, createUserAccountUserData } from \"../../../entities/tutanota/TypeRefs.js\"\nimport type { GroupManagementFacade } from \"./GroupManagementFacade.js\"\nimport { LoginFacade } from \"../LoginFacade.js\"\nimport { CounterFacade } from \"./CounterFacade.js\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport { aes256RandomKey, AesKey, createAuthVerifier, encryptKey, generateRandomSalt, random, uint8ArrayToKey } from \"@tutao/tutanota-crypto\"\nimport { EntityClient } from \"../../../common/EntityClient.js\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { MembershipService, ResetPasswordService, SystemKeysService, UserService } from \"../../../entities/sys/Services.js\"\nimport { UserAccountService } from \"../../../entities/tutanota/Services.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { ExposedOperationProgressTracker, OperationId } from \"../../../main/OperationProgressTracker.js\"\nimport { PQFacade } from \"../PQFacade.js\"\nimport { freshVersioned } from \"@tutao/tutanota-utils/dist/Utils.js\"\nimport { KeyLoaderFacade } from \"../KeyLoaderFacade.js\"\nimport { RecoverCodeFacade, RecoverData } from \"./RecoverCodeFacade.js\"\nimport { encryptBytes, encryptKeyWithVersionedKey, encryptString, VersionedKey } from \"../../crypto/CryptoWrapper.js\"\n\nassertWorkerOrNode()\n\nexport class UserManagementFacade {\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly groupManagement: GroupManagementFacade,\n\t\tprivate readonly counters: CounterFacade,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly operationProgressTracker: ExposedOperationProgressTracker,\n\t\tprivate readonly loginFacade: LoginFacade,\n\t\tprivate readonly pqFacade: PQFacade,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t\tprivate readonly recoverCodeFacade: RecoverCodeFacade,\n\t) {}\n\n\tasync changeUserPassword(user: User, newPassword: string): Promise<void> {\n\t\tconst userGroupKey = await this.groupManagement.getCurrentGroupKeyViaAdminEncGKey(user.userGroup.group)\n\t\tconst salt = generateRandomSalt()\n\t\tconst kdfType = DEFAULT_KDF_TYPE\n\t\tconst passwordKey = await this.loginFacade.deriveUserPassphraseKey({ kdfType, passphrase: newPassword, salt })\n\t\tconst pwEncUserGroupKey = encryptKey(passwordKey, userGroupKey.object)\n\t\tconst passwordVerifier = createAuthVerifier(passwordKey)\n\t\tconst data = createResetPasswordPostIn({\n\t\t\tuser: user._id,\n\t\t\tsalt,\n\t\t\tverifier: passwordVerifier,\n\t\t\tpwEncUserGroupKey,\n\t\t\tkdfVersion: kdfType,\n\t\t\tuserGroupKeyVersion: String(userGroupKey.version),\n\t\t})\n\t\tawait this.serviceExecutor.post(ResetPasswordService, data)\n\t}\n\n\tasync changeAdminFlag(user: User, admin: boolean): Promise<void> {\n\t\tconst adminGroupId = this.userFacade.getGroupId(GroupType.Admin)\n\t\tconst userGroup = await this.entityClient.load(GroupTypeRef, user.userGroup.group)\n\t\tconst userGroupKey = await this.groupManagement.getCurrentGroupKeyViaAdminEncGKey(userGroup._id)\n\n\t\tif (admin) {\n\t\t\tawait this.groupManagement.addUserToGroup(user, adminGroupId)\n\n\t\t\tif (user.accountType !== AccountType.SYSTEM) {\n\t\t\t\tconst keyData = await this._getAccountKeyData()\n\t\t\t\tconst userEncAccountGroupKey = encryptKeyWithVersionedKey(userGroupKey, keyData.accountGroupKey)\n\n\t\t\t\t// we can not use addUserToGroup here because the admin is not admin of the account group\n\t\t\t\tconst addAccountGroup = createMembershipAddData({\n\t\t\t\t\tuser: user._id,\n\t\t\t\t\tgroup: keyData.accountGroup,\n\t\t\t\t\tsymEncGKey: userEncAccountGroupKey.key,\n\t\t\t\t\tsymKeyVersion: userEncAccountGroupKey.encryptingKeyVersion.toString(),\n\t\t\t\t\tgroupKeyVersion: keyData.accountGroupKeyVersion,\n\t\t\t\t})\n\t\t\t\tawait this.serviceExecutor.post(MembershipService, addAccountGroup)\n\t\t\t}\n\t\t} else {\n\t\t\tawait this.groupManagement.removeUserFromGroup(user._id, adminGroupId)\n\n\t\t\tif (user.accountType !== AccountType.SYSTEM) {\n\t\t\t\tconst keyData = await this._getAccountKeyData()\n\t\t\t\treturn this.groupManagement.removeUserFromGroup(user._id, keyData.accountGroup)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get key and id of premium group.\n\t * @throws Error if account type is not paid\n\t *\n\t * @private\n\t */\n\tasync _getAccountKeyData(): Promise<{ accountGroup: Id; accountGroupKeyVersion: string; accountGroupKey: AesKey }> {\n\t\tconst keysReturn = await this.serviceExecutor.get(SystemKeysService, null)\n\t\tconst user = this.userFacade.getLoggedInUser()\n\n\t\tif (user.accountType === AccountType.PAID) {\n\t\t\treturn {\n\t\t\t\taccountGroup: neverNull(keysReturn.premiumGroup),\n\t\t\t\taccountGroupKey: uint8ArrayToKey(keysReturn.premiumGroupKey),\n\t\t\t\taccountGroupKeyVersion: keysReturn.premiumGroupKeyVersion,\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(`Trying to get keyData for user with account type ${user.accountType}`)\n\t\t}\n\t}\n\n\tasync readUsedUserStorage(user: User): Promise<number> {\n\t\tconst counterValue = await this.counters.readCounterValue(CounterType.UserStorageLegacy, neverNull(user.customer), user.userGroup.group)\n\t\treturn Number(counterValue)\n\t}\n\n\tasync deleteUser(user: User, restore: boolean): Promise<void> {\n\t\tconst data = createUserDataDelete({\n\t\t\tuser: user._id,\n\t\t\trestore,\n\t\t\tdate: Const.CURRENT_DATE,\n\t\t})\n\t\tawait this.serviceExecutor.delete(UserService, data)\n\t}\n\n\tasync createUser(\n\t\tname: string,\n\t\tmailAddress: string,\n\t\tpassword: string,\n\t\tuserIndex: number,\n\t\toverallNbrOfUsersToCreate: number,\n\t\toperationId: OperationId,\n\t): Promise<void> {\n\t\tlet adminGroupIds = this.userFacade.getGroupIds(GroupType.Admin)\n\t\tconst adminGroupId = getFirstOrThrow(adminGroupIds)\n\n\t\tconst adminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId)\n\n\t\tconst customerGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(this.userFacade.getGroupId(GroupType.Customer))\n\n\t\tconst userGroupKey = freshVersioned(aes256RandomKey())\n\t\tconst userGroupInfoSessionKey = aes256RandomKey()\n\t\tconst keyPair = await this.pqFacade.generateKeyPairs()\n\t\tconst userGroupData = this.groupManagement.generateInternalGroupData(\n\t\t\tkeyPair,\n\t\t\tuserGroupKey.object,\n\t\t\tuserGroupInfoSessionKey,\n\t\t\tadminGroupId,\n\t\t\tadminGroupKey,\n\t\t\tcustomerGroupKey,\n\t\t)\n\t\tawait this.operationProgressTracker.onProgress(operationId, ((userIndex + 0.8) / overallNbrOfUsersToCreate) * 100)\n\n\t\tlet data = createUserAccountCreateData({\n\t\t\tdate: Const.CURRENT_DATE,\n\t\t\tuserGroupData: userGroupData,\n\t\t\tuserData: await this.generateUserAccountData(\n\t\t\t\tuserGroupKey,\n\t\t\t\tuserGroupInfoSessionKey,\n\t\t\t\tcustomerGroupKey,\n\t\t\t\tmailAddress,\n\t\t\t\tpassword,\n\t\t\t\tname,\n\t\t\t\tthis.recoverCodeFacade.generateRecoveryCode(userGroupKey),\n\t\t\t),\n\t\t})\n\t\tawait this.serviceExecutor.post(UserAccountService, data)\n\t\treturn this.operationProgressTracker.onProgress(operationId, ((userIndex + 1) / overallNbrOfUsersToCreate) * 100)\n\t}\n\n\tasync generateUserAccountData(\n\t\tuserGroupKey: VersionedKey,\n\t\tuserGroupInfoSessionKey: AesKey,\n\t\tcustomerGroupKey: VersionedKey,\n\t\tmailAddress: string,\n\t\tpassphrase: string,\n\t\tuserName: string,\n\t\trecoverData: RecoverData,\n\t): Promise<UserAccountUserData> {\n\t\tconst kdfType = DEFAULT_KDF_TYPE\n\t\tconst salt = generateRandomSalt()\n\t\tconst userPassphraseKey = await this.loginFacade.deriveUserPassphraseKey({ kdfType, passphrase, salt })\n\t\tconst mailGroupKey = freshVersioned(aes256RandomKey())\n\t\tconst contactGroupKey = freshVersioned(aes256RandomKey())\n\t\tconst fileGroupKey = freshVersioned(aes256RandomKey())\n\t\tconst mailboxSessionKey = aes256RandomKey()\n\t\tconst contactListSessionKey = aes256RandomKey()\n\t\tconst fileSystemSessionKey = aes256RandomKey()\n\t\tconst mailGroupInfoSessionKey = aes256RandomKey()\n\t\tconst contactGroupInfoSessionKey = aes256RandomKey()\n\t\tconst fileGroupInfoSessionKey = aes256RandomKey()\n\t\tconst tutanotaPropertiesSessionKey = aes256RandomKey()\n\n\t\tconst userEncCustomerGroupKey = encryptKeyWithVersionedKey(userGroupKey, customerGroupKey.object)\n\t\tconst userEncMailGroupKey = encryptKeyWithVersionedKey(userGroupKey, mailGroupKey.object)\n\t\tconst userEncContactGroupKey = encryptKeyWithVersionedKey(userGroupKey, contactGroupKey.object)\n\t\tconst userEncFileGroupKey = encryptKeyWithVersionedKey(userGroupKey, fileGroupKey.object)\n\t\tconst userEncTutanotaPropertiesSessionKey = encryptKeyWithVersionedKey(userGroupKey, tutanotaPropertiesSessionKey)\n\t\tconst userEncEntropy = encryptBytes(userGroupKey.object, random.generateRandomData(32))\n\n\t\tconst customerEncMailGroupInfoSessionKey = encryptKeyWithVersionedKey(customerGroupKey, mailGroupInfoSessionKey)\n\t\tconst customerEncContactGroupInfoSessionKey = encryptKeyWithVersionedKey(customerGroupKey, contactGroupInfoSessionKey)\n\t\tconst customerEncFileGroupInfoSessionKey = encryptKeyWithVersionedKey(customerGroupKey, fileGroupInfoSessionKey)\n\n\t\tconst contactEncContactListSessionKey = encryptKeyWithVersionedKey(contactGroupKey, contactListSessionKey)\n\t\tconst fileEncFileSystemSessionKey = encryptKeyWithVersionedKey(fileGroupKey, fileSystemSessionKey)\n\t\tconst mailEncMailBoxSessionKey = encryptKeyWithVersionedKey(mailGroupKey, mailboxSessionKey)\n\n\t\treturn createUserAccountUserData({\n\t\t\tmailAddress: mailAddress,\n\t\t\tencryptedName: encryptString(userGroupInfoSessionKey, userName),\n\t\t\tsalt: salt,\n\t\t\tkdfVersion: kdfType,\n\n\t\t\tverifier: createAuthVerifier(userPassphraseKey),\n\t\t\tpwEncUserGroupKey: encryptKey(userPassphraseKey, userGroupKey.object),\n\n\t\t\tuserEncCustomerGroupKey: userEncCustomerGroupKey.key,\n\t\t\tuserEncMailGroupKey: userEncMailGroupKey.key,\n\t\t\tuserEncContactGroupKey: userEncContactGroupKey.key,\n\t\t\tuserEncFileGroupKey: userEncFileGroupKey.key,\n\t\t\tuserEncEntropy: userEncEntropy,\n\t\t\tuserEncTutanotaPropertiesSessionKey: userEncTutanotaPropertiesSessionKey.key,\n\n\t\t\tcontactEncContactListSessionKey: contactEncContactListSessionKey.key,\n\n\t\t\tfileEncFileSystemSessionKey: fileEncFileSystemSessionKey.key,\n\n\t\t\tmailEncMailBoxSessionKey: mailEncMailBoxSessionKey.key,\n\n\t\t\tcustomerEncMailGroupInfoSessionKey: customerEncMailGroupInfoSessionKey.key,\n\t\t\tcustomerEncContactGroupInfoSessionKey: customerEncContactGroupInfoSessionKey.key,\n\t\t\tcustomerEncFileGroupInfoSessionKey: customerEncFileGroupInfoSessionKey.key,\n\t\t\tcustomerKeyVersion: customerEncContactGroupInfoSessionKey.encryptingKeyVersion.toString(),\n\n\t\t\trecoverCodeEncUserGroupKey: recoverData.recoverCodeEncUserGroupKey,\n\t\t\trecoverCodeVerifier: recoverData.recoveryCodeVerifier,\n\t\t\tuserEncRecoverCode: recoverData.userEncRecoverCode,\n\t\t})\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,oBAAoB;IAEP,uBAAN,MAA2B;CACjC,YACkBA,YACAC,iBACAC,UACAC,cACAC,iBACAC,0BACAC,aACAC,UACAC,iBACAC,mBAChB;EA2MF,KArNkB;EAqNjB,KApNiB;EAoNhB,KAnNgB;EAmNf,KAlNe;EAkNd,KAjNc;EAiNb,KAhNa;EAgNZ,KA/MY;EA+MX,KA9MW;EA8MV,KA7MU;EA6MT,KA5MS;CACd;CAEJ,MAAM,mBAAmBC,MAAYC,aAAoC;EACxE,MAAM,eAAe,MAAM,KAAK,gBAAgB,kCAAkC,KAAK,UAAU,MAAM;EACvG,MAAM,OAAO,oBAAoB;EACjC,MAAM,UAAU;EAChB,MAAM,cAAc,MAAM,KAAK,YAAY,wBAAwB;GAAE;GAAS,YAAY;GAAa;EAAM,EAAC;EAC9G,MAAM,oBAAoB,WAAW,aAAa,aAAa,OAAO;EACtE,MAAM,mBAAmB,mBAAmB,YAAY;EACxD,MAAM,OAAO,0BAA0B;GACtC,MAAM,KAAK;GACX;GACA,UAAU;GACV;GACA,YAAY;GACZ,qBAAqB,OAAO,aAAa,QAAQ;EACjD,EAAC;AACF,QAAM,KAAK,gBAAgB,KAAK,sBAAsB,KAAK;CAC3D;CAED,MAAM,gBAAgBD,MAAYE,OAA+B;EAChE,MAAM,eAAe,KAAK,WAAW,WAAW,UAAU,MAAM;EAChE,MAAM,YAAY,MAAM,KAAK,aAAa,KAAK,cAAc,KAAK,UAAU,MAAM;EAClF,MAAM,eAAe,MAAM,KAAK,gBAAgB,kCAAkC,UAAU,IAAI;AAEhG,MAAI,OAAO;AACV,SAAM,KAAK,gBAAgB,eAAe,MAAM,aAAa;AAE7D,OAAI,KAAK,gBAAgB,YAAY,QAAQ;IAC5C,MAAM,UAAU,MAAM,KAAK,oBAAoB;IAC/C,MAAM,yBAAyB,2BAA2B,cAAc,QAAQ,gBAAgB;IAGhG,MAAM,kBAAkB,wBAAwB;KAC/C,MAAM,KAAK;KACX,OAAO,QAAQ;KACf,YAAY,uBAAuB;KACnC,eAAe,uBAAuB,qBAAqB,UAAU;KACrE,iBAAiB,QAAQ;IACzB,EAAC;AACF,UAAM,KAAK,gBAAgB,KAAK,mBAAmB,gBAAgB;GACnE;EACD,OAAM;AACN,SAAM,KAAK,gBAAgB,oBAAoB,KAAK,KAAK,aAAa;AAEtE,OAAI,KAAK,gBAAgB,YAAY,QAAQ;IAC5C,MAAM,UAAU,MAAM,KAAK,oBAAoB;AAC/C,WAAO,KAAK,gBAAgB,oBAAoB,KAAK,KAAK,QAAQ,aAAa;GAC/E;EACD;CACD;;;;;;;CAQD,MAAM,qBAA6G;EAClH,MAAM,aAAa,MAAM,KAAK,gBAAgB,IAAI,mBAAmB,KAAK;EAC1E,MAAM,OAAO,KAAK,WAAW,iBAAiB;AAE9C,MAAI,KAAK,gBAAgB,YAAY,KACpC,QAAO;GACN,cAAc,UAAU,WAAW,aAAa;GAChD,iBAAiB,gBAAgB,WAAW,gBAAgB;GAC5D,wBAAwB,WAAW;EACnC;IAED,OAAM,IAAI,OAAO,mDAAmD,KAAK,YAAY;CAEtF;CAED,MAAM,oBAAoBF,MAA6B;EACtD,MAAM,eAAe,MAAM,KAAK,SAAS,iBAAiB,YAAY,mBAAmB,UAAU,KAAK,SAAS,EAAE,KAAK,UAAU,MAAM;AACxI,SAAO,OAAO,aAAa;CAC3B;CAED,MAAM,WAAWA,MAAYG,SAAiC;EAC7D,MAAM,OAAO,qBAAqB;GACjC,MAAM,KAAK;GACX;GACA,MAAM,MAAM;EACZ,EAAC;AACF,QAAM,KAAK,gBAAgB,OAAO,aAAa,KAAK;CACpD;CAED,MAAM,WACLC,MACAC,aACAC,UACAC,WACAC,2BACAC,aACgB;EAChB,IAAI,gBAAgB,KAAK,WAAW,YAAY,UAAU,MAAM;EAChE,MAAM,eAAe,gBAAgB,cAAc;EAEnD,MAAM,gBAAgB,MAAM,KAAK,gBAAgB,sBAAsB,aAAa;EAEpF,MAAM,mBAAmB,MAAM,KAAK,gBAAgB,sBAAsB,KAAK,WAAW,WAAW,UAAU,SAAS,CAAC;EAEzH,MAAM,eAAe,eAAe,iBAAiB,CAAC;EACtD,MAAM,0BAA0B,iBAAiB;EACjD,MAAM,UAAU,MAAM,KAAK,SAAS,kBAAkB;EACtD,MAAM,gBAAgB,KAAK,gBAAgB,0BAC1C,SACA,aAAa,QACb,yBACA,cACA,eACA,iBACA;AACD,QAAM,KAAK,yBAAyB,WAAW,cAAe,YAAY,MAAO,4BAA6B,IAAI;EAElH,IAAI,OAAO,4BAA4B;GACtC,MAAM,MAAM;GACG;GACf,UAAU,MAAM,KAAK,wBACpB,cACA,yBACA,kBACA,aACA,UACA,MACA,KAAK,kBAAkB,qBAAqB,aAAa,CACzD;EACD,EAAC;AACF,QAAM,KAAK,gBAAgB,KAAK,oBAAoB,KAAK;AACzD,SAAO,KAAK,yBAAyB,WAAW,cAAe,YAAY,KAAK,4BAA6B,IAAI;CACjH;CAED,MAAM,wBACLC,cACAC,yBACAC,kBACAP,aACAQ,YACAC,UACAC,aAC+B;EAC/B,MAAM,UAAU;EAChB,MAAM,OAAO,oBAAoB;EACjC,MAAM,oBAAoB,MAAM,KAAK,YAAY,wBAAwB;GAAE;GAAS;GAAY;EAAM,EAAC;EACvG,MAAM,eAAe,eAAe,iBAAiB,CAAC;EACtD,MAAM,kBAAkB,eAAe,iBAAiB,CAAC;EACzD,MAAM,eAAe,eAAe,iBAAiB,CAAC;EACtD,MAAM,oBAAoB,iBAAiB;EAC3C,MAAM,wBAAwB,iBAAiB;EAC/C,MAAM,uBAAuB,iBAAiB;EAC9C,MAAM,0BAA0B,iBAAiB;EACjD,MAAM,6BAA6B,iBAAiB;EACpD,MAAM,0BAA0B,iBAAiB;EACjD,MAAM,+BAA+B,iBAAiB;EAEtD,MAAM,0BAA0B,2BAA2B,cAAc,iBAAiB,OAAO;EACjG,MAAM,sBAAsB,2BAA2B,cAAc,aAAa,OAAO;EACzF,MAAM,yBAAyB,2BAA2B,cAAc,gBAAgB,OAAO;EAC/F,MAAM,sBAAsB,2BAA2B,cAAc,aAAa,OAAO;EACzF,MAAM,sCAAsC,2BAA2B,cAAc,6BAA6B;EAClH,MAAM,iBAAiB,aAAa,aAAa,QAAQ,OAAO,mBAAmB,GAAG,CAAC;EAEvF,MAAM,qCAAqC,2BAA2B,kBAAkB,wBAAwB;EAChH,MAAM,wCAAwC,2BAA2B,kBAAkB,2BAA2B;EACtH,MAAM,qCAAqC,2BAA2B,kBAAkB,wBAAwB;EAEhH,MAAM,kCAAkC,2BAA2B,iBAAiB,sBAAsB;EAC1G,MAAM,8BAA8B,2BAA2B,cAAc,qBAAqB;EAClG,MAAM,2BAA2B,2BAA2B,cAAc,kBAAkB;AAE5F,SAAO,0BAA0B;GACnB;GACb,eAAe,cAAc,yBAAyB,SAAS;GACzD;GACN,YAAY;GAEZ,UAAU,mBAAmB,kBAAkB;GAC/C,mBAAmB,WAAW,mBAAmB,aAAa,OAAO;GAErE,yBAAyB,wBAAwB;GACjD,qBAAqB,oBAAoB;GACzC,wBAAwB,uBAAuB;GAC/C,qBAAqB,oBAAoB;GACzB;GAChB,qCAAqC,oCAAoC;GAEzE,iCAAiC,gCAAgC;GAEjE,6BAA6B,4BAA4B;GAEzD,0BAA0B,yBAAyB;GAEnD,oCAAoC,mCAAmC;GACvE,uCAAuC,sCAAsC;GAC7E,oCAAoC,mCAAmC;GACvE,oBAAoB,sCAAsC,qBAAqB,UAAU;GAEzF,4BAA4B,YAAY;GACxC,qBAAqB,YAAY;GACjC,oBAAoB,YAAY;EAChC,EAAC;CACF;AACD"}