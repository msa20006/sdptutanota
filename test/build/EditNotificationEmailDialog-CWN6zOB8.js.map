{"version":3,"file":"EditNotificationEmailDialog-CWN6zOB8.js","names":["userController: UserController","selectedNotificationLanguage?: string","existingTemplate: NotificationMailTemplate | undefined","lastBooking: Booking | null","customerProperties: LazyLoaded<CustomerProperties>","existingTemplate?: NotificationMailTemplate","existingTemplate: NotificationMailTemplate | null","template: NotificationMailTemplate","sortedLanguages: SelectorItemList<string>","selectedLanguageStream: Stream<string>","dialog: Dialog","templates: NotificationMailTemplate[]","isExistingTemplate: boolean","customerProperties"],"sources":["../../src/common/settings/EditNotificationEmailDialog.ts"],"sourcesContent":["import type { Booking, CustomerInfo, CustomerProperties, NotificationMailTemplate } from \"../api/entities/sys/TypeRefs.js\"\nimport { BookingTypeRef, createNotificationMailTemplate, CustomerInfoTypeRef, CustomerPropertiesTypeRef } from \"../api/entities/sys/TypeRefs.js\"\nimport { HtmlEditor } from \"../gui/editor/HtmlEditor.js\"\nimport { InfoLink, lang, languages } from \"../misc/LanguageViewModel.js\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { Dialog, DialogType } from \"../gui/base/Dialog.js\"\nimport m from \"mithril\"\nimport type { SelectorItemList } from \"../gui/base/DropDownSelector.js\"\nimport { DropDownSelector } from \"../gui/base/DropDownSelector.js\"\nimport { TextField } from \"../gui/base/TextField.js\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog.js\"\nimport { assertNotNull, LazyLoaded, memoized, neverNull, ofClass } from \"@tutao/tutanota-utils\"\nimport { htmlSanitizer } from \"../misc/HtmlSanitizer.js\"\nimport { PayloadTooLargeError } from \"../api/common/error/RestError.js\"\nimport { SegmentControl } from \"../gui/base/SegmentControl.js\"\nimport { UserError } from \"../api/main/UserError.js\"\nimport { showNotAvailableForFreeDialog, showPlanUpgradeRequiredDialog } from \"../misc/SubscriptionDialogs.js\"\nimport { getAvailablePlansWithWhitelabel, isWhitelabelActive } from \"../subscription/SubscriptionUtils.js\"\nimport type { UserController } from \"../api/main/UserController.js\"\nimport { GENERATED_MAX_ID } from \"../api/common/utils/EntityUtils.js\"\nimport { locator } from \"../api/main/CommonLocator.js\"\nimport { PlanType } from \"../api/common/TutanotaConstants.js\"\nimport { getWhitelabelDomainInfo } from \"../api/common/utils/CustomerUtils.js\"\n\nimport { insertInlineImageB64ClickHandler } from \"../mailFunctionality/SharedMailUtils.js\"\n\nexport function showAddOrEditNotificationEmailDialog(userController: UserController, selectedNotificationLanguage?: string) {\n\tlet existingTemplate: NotificationMailTemplate | undefined = undefined\n\tuserController.loadCustomer().then((customer) => {\n\t\tif (customer.properties) {\n\t\t\tconst customerProperties = new LazyLoaded(() => locator.entityClient.load(CustomerPropertiesTypeRef, neverNull(customer.properties)))\n\t\t\treturn customerProperties\n\t\t\t\t.getAsync()\n\t\t\t\t.then((loadedCustomerProperties) => {\n\t\t\t\t\tif (selectedNotificationLanguage != null) {\n\t\t\t\t\t\texistingTemplate = loadedCustomerProperties.notificationMailTemplates.find(\n\t\t\t\t\t\t\t(template) => template.language === selectedNotificationLanguage,\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\treturn userController\n\t\t\t\t\t\t.loadCustomerInfo()\n\t\t\t\t\t\t.then((customerInfo) => {\n\t\t\t\t\t\t\treturn customerInfo.bookings\n\t\t\t\t\t\t\t\t? locator.entityClient\n\t\t\t\t\t\t\t\t\t\t.loadRange(BookingTypeRef, customerInfo.bookings.items, GENERATED_MAX_ID, 1, true)\n\t\t\t\t\t\t\t\t\t\t.then((bookings) => (bookings.length === 1 ? bookings[0] : null))\n\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((lastBooking) => {\n\t\t\t\t\t\t\tshowBuyOrSetNotificationEmailDialog(lastBooking, customerProperties, existingTemplate)\n\t\t\t\t\t\t})\n\t\t\t\t})\n\t\t}\n\t})\n}\n\nexport async function showBuyOrSetNotificationEmailDialog(\n\tlastBooking: Booking | null,\n\tcustomerProperties: LazyLoaded<CustomerProperties>,\n\texistingTemplate?: NotificationMailTemplate,\n): Promise<void> {\n\tif (locator.logins.getUserController().isFreeAccount()) {\n\t\tshowNotAvailableForFreeDialog([PlanType.Unlimited])\n\t} else {\n\t\tconst planConfiguration = await locator.logins.getUserController().getPlanConfig()\n\t\tlet whitelabel = isWhitelabelActive(lastBooking, planConfiguration)\n\t\tif (!whitelabel) {\n\t\t\tconst plansWithWhitelabel = await getAvailablePlansWithWhitelabel()\n\t\t\twhitelabel = await showPlanUpgradeRequiredDialog(plansWithWhitelabel)\n\t\t}\n\t\tif (whitelabel) {\n\t\t\tshow(existingTemplate ?? null, customerProperties)\n\t\t}\n\t}\n}\n\nexport function show(existingTemplate: NotificationMailTemplate | null, customerProperties: LazyLoaded<CustomerProperties>) {\n\tlet template: NotificationMailTemplate\n\n\tif (!existingTemplate) {\n\t\ttemplate = createNotificationMailTemplate({\n\t\t\tlanguage: \"en\",\n\t\t\tbody: getDefaultNotificationMail(),\n\t\t\tsubject: lang.get(\"externalNotificationMailSubject_msg\", {\n\t\t\t\t\"{1}\": \"{sender}\",\n\t\t\t}),\n\t\t})\n\t} else {\n\t\ttemplate = existingTemplate\n\t}\n\n\tconst editor = new HtmlEditor()\n\t\t.setMinHeight(400)\n\t\t.showBorders()\n\t\t.setModeSwitcher(\"mailBody_label\")\n\t\t.setValue(template.body)\n\t\t.enableToolbar()\n\t\t.setToolbarOptions({\n\t\t\timageButtonClickHandler: insertInlineImageB64ClickHandler,\n\t\t})\n\tconst editSegment = {\n\t\tname: lang.get(\"edit_action\"),\n\t\tvalue: \"edit\",\n\t}\n\tconst previewSegment = {\n\t\tname: lang.get(\"preview_label\"),\n\t\tvalue: \"preview\",\n\t}\n\tconst selectedTab = stream(editSegment.value)\n\tconst sortedLanguages: SelectorItemList<string> = languages\n\t\t.slice()\n\t\t.sort((a, b) => lang.get(a.textId).localeCompare(lang.get(b.textId)))\n\t\t.map((language) => {\n\t\t\treturn {\n\t\t\t\tname: lang.get(language.textId),\n\t\t\t\tvalue: language.code,\n\t\t\t}\n\t\t})\n\tconst selectedLanguage = assertNotNull(sortedLanguages.find(({ value }) => value === template.language))\n\tconst selectedLanguageStream: Stream<string> = stream(selectedLanguage.value)\n\tconst subject = stream(template.subject)\n\t// Editor resets its value on re-attach so we keep it ourselves\n\tlet savedHtml = editor.getValue()\n\tselectedTab.map((tab) => {\n\t\tif (tab === editSegment.value) {\n\t\t\teditor.setValue(savedHtml)\n\t\t} else {\n\t\t\tsavedHtml = editor.getValue()\n\t\t}\n\t})\n\n\tconst editTabContent = () => [\n\t\tm(\".small.mt-s\", lang.get(\"templateHelp_msg\")),\n\t\texistingTemplate\n\t\t\t? m(TextField, {\n\t\t\t\t\tlabel: \"notificationMailLanguage_label\",\n\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\tvalue: selectedLanguage.name,\n\t\t\t  })\n\t\t\t: m(DropDownSelector, {\n\t\t\t\t\tlabel: \"notificationMailLanguage_label\",\n\t\t\t\t\titems: sortedLanguages,\n\t\t\t\t\tselectedValue: selectedLanguageStream(),\n\t\t\t\t\tselectionChangedHandler: selectedLanguageStream,\n\t\t\t\t\tdropdownWidth: 250,\n\t\t\t  }),\n\t\tm(TextField, {\n\t\t\tlabel: \"subject_label\",\n\t\t\tvalue: subject(),\n\t\t\toninput: subject,\n\t\t}),\n\t\tm(editor),\n\t]\n\n\tconst senderName = locator.logins.getUserController().userGroupInfo.name\n\tlet senderDomain = \"https://app.tuta.com\"\n\tloadCustomerInfo().then((customerInfo) => {\n\t\tconst whitelabelDomainInfo = customerInfo && getWhitelabelDomainInfo(customerInfo)\n\t\tsenderDomain = \"https://\" + ((whitelabelDomainInfo && whitelabelDomainInfo.domain) || \"app.tuta.com\")\n\t\tm.redraw()\n\t})\n\t// Even though savedHtml is always sanitized changing it might lead to mXSS\n\tconst sanitizePreview = memoized<string, string>((html) => {\n\t\treturn htmlSanitizer.sanitizeHTML(html).html\n\t})\n\n\tconst previewTabContent = () => [\n\t\tm(TextField, {\n\t\t\tlabel: \"subject_label\",\n\t\t\tvalue: subject().replace(/{sender}/g, senderName),\n\t\t\tisReadOnly: true,\n\t\t}),\n\t\tm(\".small.mt.mb\", lang.get(\"mailBody_label\")),\n\t\tm.trust(sanitizePreview(savedHtml.replace(/{sender}/g, senderName).replace(/{link}/g, senderDomain))),\n\t]\n\n\tDialog.showActionDialog({\n\t\ttype: DialogType.EditLarge,\n\t\ttitle: \"edit_action\",\n\t\tchild: () => {\n\t\t\treturn [\n\t\t\t\tm(SegmentControl, {\n\t\t\t\t\titems: [editSegment, previewSegment],\n\t\t\t\t\tselectedValue: selectedTab(),\n\t\t\t\t\tonValueSelected: selectedTab,\n\t\t\t\t}),\n\t\t\t\tselectedTab() === editSegment.value ? editTabContent() : previewTabContent(),\n\t\t\t]\n\t\t},\n\t\tokAction: (dialog: Dialog) => {\n\t\t\tif (!editor.getValue().includes(\"{link}\")) {\n\t\t\t\treturn Dialog.message(\n\t\t\t\t\tlang.getTranslation(\"templateMustContain_msg\", {\n\t\t\t\t\t\t\"{value}\": \"{link}\",\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tlet templates: NotificationMailTemplate[]\n\t\t\tlet isExistingTemplate: boolean\n\t\t\tconst oldLanguage = template.language\n\t\t\tconst oldSubject = template.subject\n\t\t\tconst oldBody = template.body\n\t\t\treturn showProgressDialog(\n\t\t\t\t\"pleaseWait_msg\",\n\t\t\t\tcustomerProperties.getAsync().then((customerProperties) => {\n\t\t\t\t\ttemplates = customerProperties.notificationMailTemplates\n\n\t\t\t\t\tif (customerProperties.notificationMailTemplates.some((t) => t !== existingTemplate && t.language === selectedLanguageStream())) {\n\t\t\t\t\t\tthrow new UserError(\"templateLanguageExists_msg\")\n\t\t\t\t\t}\n\n\t\t\t\t\tisExistingTemplate = templates.includes(template)\n\n\t\t\t\t\tif (!isExistingTemplate) {\n\t\t\t\t\t\tcustomerProperties.notificationMailTemplates.push(template)\n\t\t\t\t\t}\n\n\t\t\t\t\ttemplate.subject = htmlSanitizer.sanitizeHTML(subject(), {\n\t\t\t\t\t\tblockExternalContent: false,\n\t\t\t\t\t}).html\n\t\t\t\t\ttemplate.body = htmlSanitizer.sanitizeHTML(editor.getValue(), {\n\t\t\t\t\t\tblockExternalContent: false,\n\t\t\t\t\t}).html\n\t\t\t\t\ttemplate.language = selectedLanguageStream()\n\t\t\t\t\treturn locator.entityClient.update(customerProperties).then(() => dialog.close())\n\t\t\t\t}),\n\t\t\t)\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(UserError, (err) => {\n\t\t\t\t\t\treturn Dialog.message(lang.makeTranslation(\"error_message\", err.message))\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(PayloadTooLargeError, () => {\n\t\t\t\t\t\ttemplate.subject = oldSubject\n\t\t\t\t\t\ttemplate.body = oldBody\n\t\t\t\t\t\ttemplate.language = oldLanguage\n\n\t\t\t\t\t\tif (!isExistingTemplate) {\n\t\t\t\t\t\t\ttemplates.pop()\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Dialog.message(\"notificationMailTemplateTooLarge_msg\")\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t},\n\t})\n}\n\nconst HTML_PTAG_START = \"<p>\"\nconst HTML_PTAG_END = \"</p>\"\n\nfunction getDefaultNotificationMail(): string {\n\treturn (\n\t\tHTML_PTAG_START +\n\t\tlang.get(\"externalNotificationMailBody1_msg\") +\n\t\tHTML_PTAG_END +\n\t\tHTML_PTAG_START +\n\t\tlang.get(\"externalNotificationMailBody2_msg\", {\n\t\t\t\"{1}\": InfoLink.HomePage,\n\t\t}) +\n\t\tHTML_PTAG_END +\n\t\tHTML_PTAG_START +\n\t\t\"<a href='{link}'>\" +\n\t\tlang.get(\"externalNotificationMailBody3_msg\") +\n\t\t\"</a>\" +\n\t\tHTML_PTAG_END +\n\t\tHTML_PTAG_START +\n\t\tlang.get(\"externalNotificationMailBody4_msg\") +\n\t\t\"<br>\" +\n\t\t\"{link}\" +\n\t\t\"<br>\" +\n\t\tHTML_PTAG_END +\n\t\tHTML_PTAG_START +\n\t\tlang.get(\"externalNotificationMailBody5_msg\") +\n\t\tHTML_PTAG_END +\n\t\tHTML_PTAG_START +\n\t\tlang.get(\"externalNotificationMailBody6_msg\") +\n\t\t\"<br>\" +\n\t\t\"{sender}\" +\n\t\tHTML_PTAG_END\n\t)\n}\n\nfunction loadCustomerInfo(): Promise<CustomerInfo | null> {\n\treturn locator.logins\n\t\t.getUserController()\n\t\t.loadCustomer()\n\t\t.then((customer) => locator.entityClient.load<CustomerInfo>(CustomerInfoTypeRef, customer.customerInfo))\n}\n"],"mappings":"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"}