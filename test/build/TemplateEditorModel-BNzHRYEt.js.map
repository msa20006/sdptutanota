{"version":3,"file":"TemplateEditorModel-BNzHRYEt.js","names":["template: EmailTemplate | null","templateGroupRoot: TemplateGroupRoot","entityClient: EntityClient","provider: () => string","languageCode: LanguageCode","content: EmailTemplateContent"],"sources":["../../src/mail-app/settings/TemplateEditorModel.ts"],"sourcesContent":["import type { Language, LanguageCode, Translation, TranslationKey } from \"../../common/misc/LanguageViewModel\"\nimport { lang, languageByCode, languages } from \"../../common/misc/LanguageViewModel\"\nimport type { EmailTemplateContent } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport type { EmailTemplate } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { createEmailTemplateContent } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { clone, downcast } from \"@tutao/tutanota-utils\"\nimport type { TemplateGroupRoot } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { createEmailTemplate, EmailTemplateTypeRef } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport stream from \"mithril/stream\"\nimport { difference, getFirstOrThrow, remove } from \"@tutao/tutanota-utils\"\nimport { getElementId, isSameId } from \"../../common/api/common/utils/EntityUtils\"\nimport type { EntityClient } from \"../../common/api/common/EntityClient\"\nimport { UserError } from \"../../common/api/main/UserError\"\nimport Stream from \"mithril/stream\"\n\nexport class TemplateEditorModel {\n\ttemplate: EmailTemplate\n\ttitle: Stream<string>\n\ttag: Stream<string>\n\tselectedContent: Stream<EmailTemplateContent>\n\t_templateGroupRoot: TemplateGroupRoot\n\t_entityClient: EntityClient\n\t_contentProvider: (() => string) | null\n\n\tconstructor(template: EmailTemplate | null, templateGroupRoot: TemplateGroupRoot, entityClient: EntityClient) {\n\t\tthis.template = template ? clone(template) : createEmailTemplate({ tag: \"\", title: \"\", contents: [] })\n\t\tthis.title = stream(\"\")\n\t\tthis.tag = stream(\"\")\n\t\tconst contents = this.template.contents\n\t\tthis.selectedContent = stream(contents.length > 0 ? getFirstOrThrow(contents) : this.createContent(lang.code))\n\t\tthis._templateGroupRoot = templateGroupRoot\n\t\tthis._entityClient = entityClient\n\t\tthis._contentProvider = null\n\t}\n\n\tisUpdate(): boolean {\n\t\treturn this.template._id != null\n\t}\n\n\tsetContentProvider(provider: () => string) {\n\t\tthis._contentProvider = provider\n\t}\n\n\tcreateContent(languageCode: LanguageCode): EmailTemplateContent {\n\t\tconst emailTemplateContent = createEmailTemplateContent({\n\t\t\tlanguageCode: languageCode,\n\t\t\ttext: \"\",\n\t\t})\n\t\tthis.template.contents.push(emailTemplateContent)\n\t\treturn emailTemplateContent\n\t}\n\n\tupdateContent(): void {\n\t\tconst selectedContent = this.selectedContent()\n\n\t\tif (selectedContent && this._contentProvider) {\n\t\t\tselectedContent.text = this._contentProvider()\n\t\t}\n\t}\n\n\tremoveContent(): void {\n\t\tconst content = this.selectedContent()\n\n\t\tif (content) {\n\t\t\tremove(this.template.contents, content)\n\t\t}\n\t}\n\n\t/**\n\t * Returns all languages that are available for creating new template content. Returns them in alphabetic order sorted by name.\n\t * @returns {Array<{name: string, value: LanguageCode}>}\n\t */\n\tgetAdditionalLanguages(): Array<Language> {\n\t\treturn difference(languages, this.getAddedLanguages(), (lang1, lang2) => lang1.code === lang2.code)\n\t}\n\n\tgetAddedLanguages(): Array<Language> {\n\t\treturn this.template.contents.map((content) => languageByCode[getLanguageCode(content)])\n\t}\n\n\ttagAlreadyExists(): Promise<boolean> {\n\t\tif (this.template._id) {\n\t\t\t// the current edited template should not be included in find()\n\t\t\treturn this._entityClient.loadAll(EmailTemplateTypeRef, this._templateGroupRoot.templates).then((allTemplates) => {\n\t\t\t\tconst filteredTemplates = allTemplates.filter((template) => !isSameId(getElementId(this.template), getElementId(template)))\n\t\t\t\treturn filteredTemplates.some((template) => template.tag.toLowerCase() === this.template.tag.toLowerCase())\n\t\t\t})\n\t\t} else {\n\t\t\treturn this._entityClient.loadAll(EmailTemplateTypeRef, this._templateGroupRoot.templates).then((allTemplates) => {\n\t\t\t\treturn allTemplates.some((template) => template.tag.toLowerCase() === this.template.tag.toLowerCase())\n\t\t\t})\n\t\t}\n\t}\n\n\tsave(): Promise<any> {\n\t\tif (!this.title()) {\n\t\t\treturn Promise.reject(new UserError(\"emptyTitle_msg\"))\n\t\t}\n\n\t\tif (!this.tag()) {\n\t\t\treturn Promise.reject(new UserError(\"emptyShortcut_msg\"))\n\t\t}\n\n\t\tthis.updateContent()\n\t\tthis.template.title = this.title().trim()\n\t\tthis.template.tag = this.tag().trim()\n\t\treturn this.tagAlreadyExists().then(async (exists) => {\n\t\t\tif (exists) {\n\t\t\t\treturn Promise.reject(new UserError(\"templateShortcutExists_msg\"))\n\t\t\t} else if (this.template._id) {\n\t\t\t\treturn this._entityClient.update(this.template)\n\t\t\t} else {\n\t\t\t\tthis.template._ownerGroup = this._templateGroupRoot._id\n\t\t\t\treturn this._entityClient.setup(this._templateGroupRoot.templates, this.template)\n\t\t\t}\n\t\t})\n\t}\n}\n\nexport function getLanguageCode(content: EmailTemplateContent): LanguageCode {\n\treturn downcast(content.languageCode)\n}\n\nexport function getLanguageName(content: EmailTemplateContent): TranslationKey {\n\treturn languageByCode[getLanguageCode(content)].textId\n}\n"],"mappings":"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"}