{"version":3,"file":"RecipientsModel-DxwXuUvL.js","names":["contactModel: ContactModel","loginController: LoginController","mailFacade: MailFacade","entityClient: EntityClient","recipient: PartialRecipient","resolveMode: ResolveMode","mailAddress: string","arg: PartialRecipient","typeResolver: (mailAddress: string) => Promise<RecipientType>","newName: string","newContact: Contact","handler: (resolvedRecipient: Recipient) => void","contact: Contact | IdTuple | None"],"sources":["../../src/common/api/main/RecipientsModel.ts"],"sourcesContent":["import type { ContactModel } from \"../../contactsFunctionality/ContactModel.js\"\nimport type { LoginController } from \"./LoginController.js\"\nimport type { MailFacade } from \"../worker/facades/lazy/MailFacade.js\"\nimport type { EntityClient } from \"../common/EntityClient.js\"\nimport { getContactDisplayName } from \"../../contactsFunctionality/ContactUtils.js\"\nimport { PartialRecipient, Recipient, RecipientType } from \"../common/recipients/Recipient.js\"\nimport { BoundedExecutor, LazyLoaded } from \"@tutao/tutanota-utils\"\nimport { Contact, ContactTypeRef } from \"../entities/tutanota/TypeRefs\"\nimport { cleanMailAddress } from \"../common/utils/CommonCalendarUtils.js\"\nimport { createNewContact, isTutaMailAddress } from \"../../mailFunctionality/SharedMailUtils.js\"\n\n/**\n * A recipient that can be resolved to obtain contact and recipient type\n * It is defined as an interface, because it should only be created using RecipientsModel.resolve\n * rather than directly constructing one\n */\nexport interface ResolvableRecipient extends Recipient {\n\t/** get the resolved value of the recipient, when it's ready */\n\tresolved(): Promise<Recipient>\n\n\t/** check if resolution is complete */\n\tisResolved(): boolean\n\n\t/** provide a handler to run when resolution is done, handy for chaining */\n\twhenResolved(onResolved: (resolvedRecipient: Recipient) => void): this\n\n\t/** update the contact. will override whatever contact gets resolved */\n\tsetContact(contact: Contact): void\n\n\t/** update the name. will override whatever the name has resolved to */\n\tsetName(name: string): void\n}\n\nexport enum ResolveMode {\n\tLazy,\n\tEager,\n}\n\nexport class RecipientsModel {\n\tprivate executor = new BoundedExecutor(5)\n\n\tconstructor(\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly loginController: LoginController,\n\t\tprivate readonly mailFacade: MailFacade,\n\t\tprivate readonly entityClient: EntityClient,\n\t) {}\n\n\t/**\n\t * Start resolving a recipient\n\t * If resolveLazily === true, Then resolution will not be initiated (i.e. no server calls will be made) until the first call to `resolved`\n\t */\n\tresolve(recipient: PartialRecipient, resolveMode: ResolveMode): ResolvableRecipient {\n\t\treturn new ResolvableRecipientImpl(\n\t\t\trecipient,\n\t\t\tthis.contactModel,\n\t\t\tthis.loginController,\n\t\t\t(mailAddress) => this.executor.run(this.resolveRecipientType(mailAddress)),\n\t\t\tthis.entityClient,\n\t\t\tresolveMode,\n\t\t)\n\t}\n\n\tprivate readonly resolveRecipientType = (mailAddress: string) => async () => {\n\t\tconst keyData = await this.mailFacade.getRecipientKeyData(mailAddress)\n\t\treturn keyData == null ? RecipientType.EXTERNAL : RecipientType.INTERNAL\n\t}\n}\n\nclass ResolvableRecipientImpl implements ResolvableRecipient {\n\tprivate _address: string\n\tprivate _name: string | null\n\tprivate readonly lazyType: LazyLoaded<RecipientType>\n\tprivate readonly lazyContact: LazyLoaded<Contact | null>\n\n\tprivate readonly initialType: RecipientType = RecipientType.UNKNOWN\n\tprivate readonly initialContact: Contact | null = null\n\n\tprivate overrideContact: Contact | null = null\n\n\tget address(): string {\n\t\treturn this._address\n\t}\n\n\tget name(): string {\n\t\treturn this._name ?? \"\"\n\t}\n\n\tget type(): RecipientType {\n\t\treturn this.lazyType.getSync() ?? this.initialType\n\t}\n\n\tget contact(): Contact | null {\n\t\treturn this.lazyContact.getSync() ?? this.initialContact\n\t}\n\n\tconstructor(\n\t\targ: PartialRecipient,\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly loginController: LoginController,\n\t\tprivate readonly typeResolver: (mailAddress: string) => Promise<RecipientType>,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tresolveMode: ResolveMode,\n\t) {\n\t\tif (isTutaMailAddress(arg.address) || arg.type === RecipientType.INTERNAL) {\n\t\t\tthis.initialType = RecipientType.INTERNAL\n\t\t\tthis._address = cleanMailAddress(arg.address)\n\t\t} else if (arg.type) {\n\t\t\tthis.initialType = arg.type\n\t\t\tthis._address = arg.address\n\t\t} else {\n\t\t\tthis._address = arg.address\n\t\t}\n\n\t\tthis._name = arg.name ?? null\n\n\t\tif (!(arg.contact instanceof Array)) {\n\t\t\tthis.initialContact = arg.contact ?? null\n\t\t}\n\n\t\tthis.lazyType = new LazyLoaded(() => this.resolveType())\n\t\tthis.lazyContact = new LazyLoaded(async () => {\n\t\t\tconst contact = await this.resolveContact(arg.contact)\n\t\t\t// sometimes we create resolvable contact and then dissect it into parts and resolve it again in which case we will default to an empty name\n\t\t\t// (see the getter) but we actually want the name from contact.\n\t\t\tif (contact != null && (this._name == null || this._name === \"\")) {\n\t\t\t\tthis._name = getContactDisplayName(contact)\n\t\t\t}\n\t\t\treturn contact\n\t\t})\n\n\t\tif (resolveMode === ResolveMode.Eager) {\n\t\t\tthis.lazyType.load()\n\t\t\tthis.lazyContact.load()\n\t\t}\n\t}\n\n\tsetName(newName: string) {\n\t\tthis._name = newName\n\t}\n\n\tsetContact(newContact: Contact) {\n\t\tthis.overrideContact = newContact\n\t\tthis.lazyContact.reload()\n\t}\n\n\tasync resolved(): Promise<Recipient> {\n\t\tawait Promise.all([this.lazyType.getAsync(), this.lazyContact.getAsync()])\n\t\treturn {\n\t\t\taddress: this.address,\n\t\t\tname: this.name,\n\t\t\ttype: this.type,\n\t\t\tcontact: this.contact,\n\t\t}\n\t}\n\n\tisResolved(): boolean {\n\t\t// We are only resolved when both type and contact are non-null and finished\n\t\treturn this.lazyType.isLoaded() && this.lazyContact.isLoaded()\n\t}\n\n\twhenResolved(handler: (resolvedRecipient: Recipient) => void): this {\n\t\tthis.resolved().then(handler)\n\t\treturn this\n\t}\n\n\t/**\n\t * Determine whether recipient is INTERNAL or EXTERNAL based on the existence of key data (external recipients don't have any)\n\t */\n\tprivate async resolveType(): Promise<RecipientType> {\n\t\tif (this.initialType === RecipientType.UNKNOWN) {\n\t\t\tconst cleanedAddress = cleanMailAddress(this.address)\n\t\t\tconst recipientType = await this.typeResolver(cleanedAddress)\n\t\t\tif (recipientType === RecipientType.INTERNAL) {\n\t\t\t\t// we know this is one of ours, so it's safe to clean it up\n\t\t\t\tthis._address = cleanedAddress\n\t\t\t}\n\t\t\treturn recipientType\n\t\t} else {\n\t\t\treturn this.initialType\n\t\t}\n\t}\n\n\t/**\n\t * Resolve the recipients contact.\n\t * If {@param contact} is an Id, the contact will be loaded directly\n\t * Otherwise, the contact will be searched for in the ContactModel\n\t */\n\tprivate async resolveContact(contact: Contact | IdTuple | None): Promise<Contact | null> {\n\t\ttry {\n\t\t\tif (this.overrideContact) {\n\t\t\t\treturn this.overrideContact\n\t\t\t} else if ((await this.contactModel.getContactListId()) == null) {\n\t\t\t\tconsole.log(\"can't resolve contacts for users with no contact list id\")\n\t\t\t\treturn null\n\t\t\t} else if (contact instanceof Array) {\n\t\t\t\treturn await this.entityClient.load(ContactTypeRef, contact)\n\t\t\t} else if (contact == null) {\n\t\t\t\tconst foundContact = await this.contactModel.searchForContact(this.address)\n\t\t\t\tif (foundContact) {\n\t\t\t\t\treturn foundContact\n\t\t\t\t} else {\n\t\t\t\t\t// we don't want to create a mixed-case contact if the address is an internal one.\n\t\t\t\t\t// after lazyType is loaded, if it resolves to RecipientType.INTERNAL, we have the\n\t\t\t\t\t// cleaned address in this.address.\n\t\t\t\t\tawait this.lazyType\n\t\t\t\t\treturn createNewContact(this.loginController.getUserController().user, this.address, this.name)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn contact\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(\"error resolving contact\", e)\n\t\t\treturn null\n\t\t}\n\t}\n}\n"],"mappings":"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"}