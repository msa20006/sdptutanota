{"version":3,"file":"StandardMigrations-7xZlHwBq.js","names":["typeRef: TypeRef<T>","storage: OfflineStorage","migrations: Array<Migration>","oldName: string","newName: string","valueName: string","value: any","attribute: string","type: TypeRef<T>"],"sources":["../../src/common/api/worker/offline/StandardMigrations.ts"],"sourcesContent":["import { OfflineStorage } from \"./OfflineStorage.js\"\nimport { modelInfos } from \"../../common/EntityFunctions.js\"\nimport { typedKeys, TypeRef } from \"@tutao/tutanota-utils\"\nimport { ElementEntity, ListElementEntity, SomeEntity } from \"../../common/EntityTypes.js\"\nimport { ProgrammingError } from \"../../common/error/ProgrammingError.js\"\n\nexport async function migrateAllListElements<T extends ListElementEntity>(typeRef: TypeRef<T>, storage: OfflineStorage, migrations: Array<Migration>) {\n\tlet entities = await storage.getRawListElementsOfType(typeRef)\n\n\tfor (const migration of migrations) {\n\t\t// @ts-ignore need better types for migrations\n\t\tentities = entities.map(migration)\n\t}\n\n\tfor (const entity of entities) {\n\t\tentity._type = typeRef as TypeRef<typeof entity>\n\t\tawait storage.put(entity)\n\t}\n}\n\nexport async function migrateAllElements<T extends ElementEntity>(typeRef: TypeRef<T>, storage: OfflineStorage, migrations: Array<Migration>) {\n\tlet entities = await storage.getRawElementsOfType(typeRef)\n\n\tfor (const migration of migrations) {\n\t\t// @ts-ignore need better types for migrations\n\t\tentities = entities.map(migration)\n\t}\n\n\tfor (const entity of entities) {\n\t\tentity._type = typeRef as TypeRef<typeof entity>\n\t\tawait storage.put(entity)\n\t}\n}\n\nexport type Migration = (entity: any) => SomeEntity\n\nexport function renameAttribute(oldName: string, newName: string): Migration {\n\treturn function (entity) {\n\t\tentity[newName] = entity[oldName]\n\t\tdelete entity[oldName]\n\t\treturn entity\n\t}\n}\n\nexport function addOwnerKeyVersion(): Migration {\n\treturn function (entity) {\n\t\tentity[\"_ownerKeyVersion\"] = entity[\"_ownerEncSessionKey\"] == null ? null : \"0\"\n\t\treturn entity\n\t}\n}\n\nexport function removeValue(valueName: string): Migration {\n\treturn function (entity) {\n\t\tdelete entity[valueName]\n\t\treturn entity\n\t}\n}\n\nexport function addValue(valueName: string, value: any): Migration {\n\treturn function (entity) {\n\t\tentity[valueName] = value\n\t\treturn entity\n\t}\n}\n\nexport function booleanToNumberValue(attribute: string): Migration {\n\treturn function (entity) {\n\t\t// same default value mapping as in the tutadb migration\n\t\tentity[attribute] = entity[attribute] ? \"1\" : \"0\"\n\t\treturn entity\n\t}\n}\n\nexport function changeCardinalityFromAnyToZeroOrOne(attribute: string): Migration {\n\treturn function (entity) {\n\t\tconst value = entity[attribute]\n\t\tif (!Array.isArray(value)) {\n\t\t\tthrow new ProgrammingError(\"Can only migrate from cardinality ANY.\")\n\t\t}\n\t\tconst length = value.length\n\t\tif (length === 0) {\n\t\t\tentity[attribute] = null\n\t\t} else if (length === 1) {\n\t\t\tentity[attribute] = value[0]\n\t\t} else {\n\t\t\tthrow new ProgrammingError(`not possible to migrate ANY to ZERO_OR_ONE with array length > 1. actual length: ${length}`)\n\t\t}\n\t\treturn entity\n\t}\n}\n\nexport async function clearDatabase(storage: OfflineStorage) {\n\tawait storage.purgeStorage()\n\tawait writeModelVersions(storage)\n}\n\nexport function deleteInstancesOfType<T extends SomeEntity>(storage: OfflineStorage, type: TypeRef<T>): Promise<void> {\n\treturn storage.deleteAllOfType(type)\n}\n\nasync function writeModelVersions(storage: OfflineStorage) {\n\tfor (const app of typedKeys(modelInfos)) {\n\t\tconst key = `${app}-version` as const\n\t\tlet version = modelInfos[app].version\n\t\tawait storage.setStoredModelVersion(app, version)\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMO,eAAe,uBAAoDA,SAAqBC,SAAyBC,YAA8B;CACrJ,IAAI,WAAW,MAAM,QAAQ,yBAAyB,QAAQ;AAE9D,MAAK,MAAM,aAAa,WAEvB,YAAW,SAAS,IAAI,UAAU;AAGnC,MAAK,MAAM,UAAU,UAAU;AAC9B,SAAO,QAAQ;AACf,QAAM,QAAQ,IAAI,OAAO;CACzB;AACD;AAEM,eAAe,mBAA4CF,SAAqBC,SAAyBC,YAA8B;CAC7I,IAAI,WAAW,MAAM,QAAQ,qBAAqB,QAAQ;AAE1D,MAAK,MAAM,aAAa,WAEvB,YAAW,SAAS,IAAI,UAAU;AAGnC,MAAK,MAAM,UAAU,UAAU;AAC9B,SAAO,QAAQ;AACf,QAAM,QAAQ,IAAI,OAAO;CACzB;AACD;AAIM,SAAS,gBAAgBC,SAAiBC,SAA4B;AAC5E,QAAO,SAAU,QAAQ;AACxB,SAAO,WAAW,OAAO;AACzB,SAAO,OAAO;AACd,SAAO;CACP;AACD;AAEM,SAAS,qBAAgC;AAC/C,QAAO,SAAU,QAAQ;AACxB,SAAO,sBAAsB,OAAO,0BAA0B,OAAO,OAAO;AAC5E,SAAO;CACP;AACD;AAEM,SAAS,YAAYC,WAA8B;AACzD,QAAO,SAAU,QAAQ;AACxB,SAAO,OAAO;AACd,SAAO;CACP;AACD;AAEM,SAAS,SAASA,WAAmBC,OAAuB;AAClE,QAAO,SAAU,QAAQ;AACxB,SAAO,aAAa;AACpB,SAAO;CACP;AACD;AAEM,SAAS,qBAAqBC,WAA8B;AAClE,QAAO,SAAU,QAAQ;AAExB,SAAO,aAAa,OAAO,aAAa,MAAM;AAC9C,SAAO;CACP;AACD;AAEM,SAAS,oCAAoCA,WAA8B;AACjF,QAAO,SAAU,QAAQ;EACxB,MAAM,QAAQ,OAAO;AACrB,OAAK,MAAM,QAAQ,MAAM,CACxB,OAAM,IAAI,iBAAiB;EAE5B,MAAM,SAAS,MAAM;AACrB,MAAI,WAAW,EACd,QAAO,aAAa;SACV,WAAW,EACrB,QAAO,aAAa,MAAM;IAE1B,OAAM,IAAI,kBAAkB,mFAAmF,OAAO;AAEvH,SAAO;CACP;AACD;AAOM,SAAS,sBAA4CN,SAAyBO,MAAiC;AACrH,QAAO,QAAQ,gBAAgB,KAAK;AACpC"}