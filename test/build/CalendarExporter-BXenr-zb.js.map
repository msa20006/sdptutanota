{"version":3,"file":"CalendarExporter-BXenr-zb.js","names":["event: CalendarEvent","method: CalendarMethod","now: Date","zone: string","versionNumber: string","events: Array<{\n\t\tevent: CalendarEvent\n\t\talarms: Array<UserAlarmInfo>\n\t}>","alarms: Array<UserAlarmInfo>","timeZone: string","repeatRule: RepeatRule | null","isAllDayEvent: boolean","localTimeZone: string","isAllDayEvent","excludedDates: DateWrapper[]","date: Date","method: string","dbAlarmInterval: string","lines: string[]","input: string","value: string","number: number","contents: Array<string>","alarm: UserAlarmInfo"],"sources":["../../src/calendar-app/calendar/export/CalendarExporter.ts"],"sourcesContent":["import type { CalendarAttendeeStatus, CalendarMethod } from \"../../../common/api/common/TutanotaConstants\"\nimport { assertEnumValue, EndType, RepeatPeriod, SECOND_MS } from \"../../../common/api/common/TutanotaConstants\"\nimport { assertNotNull, downcast, incrementDate, mapAndFilterNull, neverNull, pad, stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\nimport { calendarAttendeeStatusToParstat, iCalReplacements, repeatPeriodToIcalFrequency } from \"./CalendarParser\"\nimport { getAllDayDateLocal, isAllDayEvent } from \"../../../common/api/common/utils/CommonCalendarUtils\"\nimport { AlarmIntervalUnit, generateUid, getTimeZone, parseAlarmInterval } from \"../../../common/calendar/date/CalendarUtils\"\nimport type { CalendarEvent } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { createFile } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { convertToDataFile, DataFile } from \"../../../common/api/common/DataFile\"\nimport type { DateWrapper, RepeatRule, UserAlarmInfo } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { DateTime } from \"luxon\"\nimport { getLetId } from \"../../../common/api/common/utils/EntityUtils\"\nimport { CALENDAR_MIME_TYPE } from \"../../../common/file/FileController.js\"\n\n/** create an ical data file that can be attached to an invitation/update/cancellation/response mail */\nexport function makeInvitationCalendarFile(event: CalendarEvent, method: CalendarMethod, now: Date, zone: string): DataFile {\n\tconst stringValue = makeInvitationCalendar(env.versionNumber, event, method, now, zone)\n\tconst data = stringToUtf8Uint8Array(stringValue)\n\tconst date = new Date()\n\tconst tmpFile = createFile({\n\t\tname: `${method.toLowerCase()}-${date.getFullYear()}${date.getMonth() + 1}${date.getDate()}.ics`,\n\t\tmimeType: CALENDAR_MIME_TYPE,\n\t\tsize: String(data.byteLength),\n\t\tcid: null,\n\t\tblobs: [],\n\t\tparent: null,\n\t\tsubFiles: null,\n\t})\n\treturn convertToDataFile(tmpFile, data)\n}\n\n/** serialize a list of events into a valid ical string using the PUBLISH method suitable to import as a calendar into any app supporting ical */\nexport function serializeCalendar(\n\tversionNumber: string,\n\tevents: Array<{\n\t\tevent: CalendarEvent\n\t\talarms: Array<UserAlarmInfo>\n\t}>,\n\tnow: Date,\n\tzone: string,\n): string {\n\treturn wrapIntoCalendar(versionNumber, \"PUBLISH\", events.map(({ event, alarms }) => serializeEvent(event, alarms, now, zone)).flat())\n}\n\n//\n// end of the public interface for calendar invites/import/export, everything below this is exported for testing.\n//\n\n/** importer internals exported for testing, should always be used through serializeCalendar */\nexport function serializeEvent(event: CalendarEvent, alarms: Array<UserAlarmInfo>, now: Date, timeZone: string): Array<string> {\n\tconst repeatRule = event.repeatRule\n\tconst isAllDay = isAllDayEvent(event)\n\tconst localZone = getTimeZone()\n\tlet dateStart, dateEnd\n\n\tif (isAllDay) {\n\t\t// We use local zone because we convert UTC time to local first so to convert it back we need to use the right one.\n\t\t// It will not affect times in case of all-day event anyway\n\t\tdateStart = `DTSTART;VALUE=DATE:${formatDate(getAllDayDateLocal(event.startTime), localZone)}`\n\t\tdateEnd = `DTEND;VALUE=DATE:${formatDate(getAllDayDateLocal(event.endTime), localZone)}`\n\t} else if (repeatRule) {\n\t\tdateStart = `DTSTART;TZID=${repeatRule.timeZone}:${formatDateTime(event.startTime, repeatRule.timeZone)}`\n\t\tdateEnd = `DTEND;TZID=${repeatRule.timeZone}:${formatDateTime(event.endTime, repeatRule.timeZone)}`\n\t} else {\n\t\tdateStart = `DTSTART:${formatDateTimeUTC(event.startTime)}`\n\t\tdateEnd = `DTEND:${formatDateTimeUTC(event.endTime)}`\n\t}\n\n\treturn [\n\t\t\"BEGIN:VEVENT\",\n\t\tdateStart,\n\t\tdateEnd,\n\t\t`DTSTAMP:${formatDateTimeUTC(now)}`,\n\t\t`UID:${event.uid ? event.uid : generateUid(assertNotNull(event._ownerGroup), now.getTime())}`, // legacy: only generate uid for older calendar events.\n\t\t`SEQUENCE:${event.sequence}`,\n\t\t`SUMMARY:${serializeIcalText(event.summary)}`,\n\t]\n\t\t.concat(\n\t\t\tevent.recurrenceId != null\n\t\t\t\t? isAllDay\n\t\t\t\t\t? `RECURRENCE-ID;VALUE=DATE:${formatDate(getAllDayDateLocal(event.recurrenceId), localZone)}`\n\t\t\t\t\t: `RECURRENCE-ID;VALUE=DATETIME:${formatDateTimeUTC(event.recurrenceId)}`\n\t\t\t\t: [],\n\t\t)\n\t\t.concat(event.description && event.description !== \"\" ? `DESCRIPTION:${serializeIcalText(event.description)}` : [])\n\t\t.concat(event.recurrenceId == null ? serializeRepeatRule(repeatRule, isAllDay, timeZone) : [])\n\t\t.concat(event.location && event.location.length > 0 ? `LOCATION:${serializeIcalText(event.location)}` : [])\n\t\t.concat(\n\t\t\t...mapAndFilterNull(alarms, (alarm) => {\n\t\t\t\ttry {\n\t\t\t\t\treturn serializeAlarm(event, alarm)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(`error serializing alarm ${getLetId(alarm).toString()} for event ${getLetId(event).toString()}:`, e)\n\t\t\t\t\treturn null\n\t\t\t\t}\n\t\t\t}),\n\t\t)\n\t\t.concat(serializeParticipants(event))\n\t\t.concat(\"END:VEVENT\")\n}\n\n/** importer internals exported for testing */\nexport function serializeRepeatRule(repeatRule: RepeatRule | null, isAllDayEvent: boolean, localTimeZone: string) {\n\tif (repeatRule) {\n\t\tlet endType = \"\"\n\n\t\tif (repeatRule.endType === EndType.Count) {\n\t\t\tendType = `;COUNT=${neverNull(repeatRule.endValue)}`\n\t\t} else if (repeatRule.endType === EndType.UntilDate) {\n\t\t\t// According to the RFC 5545 section 3.3.5\n\t\t\t//  The UNTIL rule part defines a DATE or DATE-TIME value that bounds\n\t\t\t//  the recurrence rule in an inclusive manner.  If the value\n\t\t\t//  specified by UNTIL is synchronized with the specified recurrence,\n\t\t\t//  this DATE or DATE-TIME becomes the last instance of the\n\t\t\t//  recurrence.  The value of the UNTIL rule part MUST have the same\n\t\t\t//  value type as the \"DTSTART\" property.  Furthermore, if the\n\t\t\t//  \"DTSTART\" property is specified as a date with local time, then\n\t\t\t//  the UNTIL rule part MUST also be specified as a date with local\n\t\t\t//  time.  If the \"DTSTART\" property is specified as a date with UTC\n\t\t\t//  time or a date with local time and time zone reference, then the\n\t\t\t//  UNTIL rule part MUST be specified as a date with UTC time.\n\t\t\t// We have three cases (check serializeEvent()).\n\t\t\t// So our matrix wil be:\n\t\t\t//\n\t\t\t// Case       | start/end format | UNTIL format\n\t\t\t// All-day:   | date             | date\n\t\t\t// w/RR       | TZID + DateTime  | timestamp\n\t\t\t// w/o/RR     | timestamp        | N/A\n\t\t\t//\n\t\t\t// In this branch there is a repeat rule and we just check if it's all day.\n\t\t\t// We also differ in a way that we define end as exclusive (because it's so\n\t\t\t// hard to find anything in this RFC).\n\t\t\tconst date = new Date(Number(repeatRule.endValue))\n\t\t\tconst value = isAllDayEvent ? formatDate(incrementDate(date, -1), localTimeZone) : formatDateTimeUTC(new Date(date.getTime() - SECOND_MS))\n\t\t\tendType = `;UNTIL=${value}`\n\t\t}\n\n\t\tconst excludedDates = serializeExcludedDates(repeatRule.excludedDates, repeatRule.timeZone)\n\t\treturn [\n\t\t\t`RRULE:FREQ=${repeatPeriodToIcalFrequency(assertEnumValue(RepeatPeriod, repeatRule.frequency))}` + `;INTERVAL=${repeatRule.interval}` + endType,\n\t\t].concat(excludedDates)\n\t} else {\n\t\treturn []\n\t}\n}\n\n/** importer internals exported for testing */\nexport function serializeExcludedDates(excludedDates: DateWrapper[], timeZone: string): string[] {\n\tif (excludedDates.length > 0) {\n\t\tlet dates = \"\"\n\t\tfor (let i = 0; i < excludedDates.length; i++) {\n\t\t\tdates += formatDateTime(excludedDates[i].date, timeZone)\n\t\t\tif (i < excludedDates.length - 1) {\n\t\t\t\tdates += \",\"\n\t\t\t}\n\t\t}\n\t\treturn [`EXDATE;TZID=${timeZone}:${dates}`]\n\t} else {\n\t\treturn []\n\t}\n}\n\n/** importer internals exported for testing */\nexport function formatDateTimeUTC(date: Date): string {\n\treturn `${date.getUTCFullYear()}${pad2(date.getUTCMonth() + 1)}${pad2(date.getUTCDate())}T${pad2(date.getUTCHours())}${pad2(date.getUTCMinutes())}${pad2(\n\t\tdate.getUTCSeconds(),\n\t)}Z`\n}\n\nfunction formatDateTime(date: Date, timeZone: string): string {\n\tconst dateTime = DateTime.fromJSDate(date, {\n\t\tzone: timeZone,\n\t})\n\treturn `${dateTime.year}${pad2(dateTime.month)}${pad2(dateTime.day)}T${pad2(dateTime.hour)}${pad2(dateTime.minute)}${pad2(dateTime.second)}`\n}\n\nfunction formatDate(date: Date, timeZone: string): string {\n\tconst dateTime = DateTime.fromJSDate(date, {\n\t\tzone: timeZone,\n\t})\n\treturn `${dateTime.year}${pad2(dateTime.month)}${pad2(dateTime.day)}`\n}\n\nfunction makeInvitationCalendar(versionNumber: string, event: CalendarEvent, method: string, now: Date, zone: string): string {\n\tconst eventSerialized = serializeEvent(event, [], now, zone)\n\treturn wrapIntoCalendar(versionNumber, method, eventSerialized)\n}\n\nexport function serializeTrigger(dbAlarmInterval: string): string {\n\tconst alarmInterval = parseAlarmInterval(dbAlarmInterval)\n\n\tlet timeMarker = \"\"\n\n\tif (alarmInterval.unit === AlarmIntervalUnit.MINUTE || alarmInterval.unit === AlarmIntervalUnit.HOUR) {\n\t\ttimeMarker += \"T\"\n\t}\n\n\treturn \"-P\" + timeMarker + alarmInterval.value.toString() + alarmInterval.unit\n}\n\nfunction serializeParticipants(event: CalendarEvent): Array<string> {\n\tconst { organizer, attendees } = event\n\n\tif (attendees.length === 0 && organizer == null) {\n\t\treturn []\n\t}\n\n\tconst lines: string[] = []\n\n\tif (organizer) {\n\t\tconst namePart = organizer.name ? `;CN=${quotedString(organizer.name)}` : \"\"\n\t\tlines.push(`ORGANIZER${namePart};EMAIL=${organizer.address}:mailto:${organizer.address}`)\n\t}\n\n\tconst attendeesProperties = attendees.map(({ address, status }) => {\n\t\tconst namePart = address.name ? `;CN=${quotedString(address.name)}` : \"\"\n\t\tconst partstat = calendarAttendeeStatusToParstat[downcast<CalendarAttendeeStatus>(status)]\n\t\treturn (\n\t\t\t`ATTENDEE;CUTYPE=INDIVIDUAL;ROLE=REQ-PARTICIPANT;PARTSTAT=${partstat}` + `;RSVP=TRUE${namePart};EMAIL=${address.address}:mailto:${address.address}`\n\t\t)\n\t})\n\treturn lines.concat(attendeesProperties)\n}\n\n/**\n * Create an ical quoted-string param-value\n * double quotes are not allowed inside of param-value properties so they are removed\n */\nfunction quotedString(input: string): string {\n\treturn `\"${input.replace(/\"/g, \"\")}\"`\n}\n\n/**\n * Serialize text properties according to the iCal standard.\n * https://icalendar.org/iCalendar-RFC-5545/3-3-11-text.html\n */\nfunction serializeIcalText(value: string): string {\n\tlet text = value\n\tfor (const rawEscape in iCalReplacements) {\n\t\ttext = text.replaceAll(rawEscape, iCalReplacements[rawEscape as keyof typeof iCalReplacements])\n\t}\n\treturn text\n}\n\nfunction pad2(number: number) {\n\treturn pad(number, 2)\n}\n\nfunction wrapIntoCalendar(versionNumber: string, method: string, contents: Array<string>): string {\n\tlet value = [\"BEGIN:VCALENDAR\", `PRODID:-//Tutao GmbH//Tutanota ${versionNumber}//EN`, \"VERSION:2.0\", \"CALSCALE:GREGORIAN\", `METHOD:${method}`]\n\tvalue.push(...contents)\n\tvalue.push(\"END:VCALENDAR\")\n\treturn value.join(\"\\r\\n\")\n}\n\nfunction serializeAlarm(event: CalendarEvent, alarm: UserAlarmInfo): Array<string> {\n\t// prettier-ignore\n\treturn [\n\t\t\"BEGIN:VALARM\",\n\t\t\"ACTION:DISPLAY\",\n\t\t\"DESCRIPTION:This is an event reminder\",\n\t\t`TRIGGER:${serializeTrigger(alarm.alarmInfo.trigger)}`,\n\t\t\"END:VALARM\",\n\t]\n}\n"],"mappings":"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"}