{"version":3,"file":"WASMTestUtils-CN9pkVyq.js","names":["path: string","liboqsWASM: LazyLoaded<LibOQSExports>","argon2WASM: LazyLoaded<Argon2IDExports>"],"sources":["../../packages/tutanota-crypto/test/WebAssemblyTestUtils.ts","../tests/api/worker/WASMTestUtils.ts"],"sourcesContent":["import { WASMExports } from \"@tutao/tutanota-utils/dist/WebAssembly.js\"\n\n/**\n * Helper function to load a wasm module from file for testing.\n */\nexport async function loadWasmModuleFromFile(path: string): Promise<WASMExports> {\n\tif (typeof process !== \"undefined\") {\n\t\ttry {\n\t\t\tconst { readFile } = await import(\"node:fs/promises\")\n\t\t\tconst wasmBuffer = await readFile(path)\n\t\t\treturn (await WebAssembly.instantiate(wasmBuffer)).instance.exports as unknown as WASMExports\n\t\t} catch (e) {\n\t\t\tthrow new Error(`Can't load wasm module: ${path},  ${e}`)\n\t\t}\n\t} else {\n\t\treturn (await WebAssembly.instantiateStreaming(await fetch(path))).instance.exports as unknown as WASMExports\n\t}\n}\n\nexport async function loadWasmModuleFallback(path: string): Promise<WASMExports> {\n\treturn await import(path)\n}\n","import { loadWasmModuleFromFile } from \"../../../../packages/tutanota-crypto/test/WebAssemblyTestUtils.js\"\nimport { LazyLoaded } from \"@tutao/tutanota-utils\"\nimport { Argon2IDExports, LibOQSExports } from \"@tutao/tutanota-crypto\"\n\n/**\n * Load the liboqs WASM and return its imports, automatically accounting for browser tests vs. node tests\n */\nexport function loadLibOQSWASM(): Promise<LibOQSExports> {\n\treturn liboqsWASM.getAsync()\n}\n\n/**\n * Load the argon2 WASM and return its imports, automatically accounting for browser tests vs. node tests\n */\nexport function loadArgon2WASM(): Promise<Argon2IDExports> {\n\treturn argon2WASM.getAsync()\n}\n\nconst liboqsWASM: LazyLoaded<LibOQSExports> = new LazyLoaded(() => {\n\tif (typeof process !== \"undefined\") {\n\t\treturn loadWasmModuleFromFile(\"./build/wasm/liboqs.wasm\") as Promise<LibOQSExports>\n\t} else {\n\t\treturn loadWasmModuleFromFile(\"/wasm/liboqs.wasm\") as Promise<LibOQSExports>\n\t}\n})\n\nconst argon2WASM: LazyLoaded<Argon2IDExports> = new LazyLoaded(() => {\n\tif (typeof process !== \"undefined\") {\n\t\treturn loadWasmModuleFromFile(\"./build/wasm/argon2.wasm\") as Promise<Argon2IDExports>\n\t} else {\n\t\treturn loadWasmModuleFromFile(\"/wasm/argon2.wasm\") as Promise<Argon2IDExports>\n\t}\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKO,eAAe,uBAAuBA,MAAoC;AAChF,YAAW,YAAY,YACtB,KAAI;EACH,MAAM,EAAE,UAAU,GAAG,MAAM,OAAO;EAClC,MAAM,aAAa,MAAM,SAAS,KAAK;AACvC,UAAQ,MAAM,YAAY,YAAY,WAAW,EAAE,SAAS;CAC5D,SAAQ,GAAG;AACX,QAAM,IAAI,OAAO,0BAA0B,KAAK,KAAK,EAAE;CACvD;IAED,SAAQ,MAAM,YAAY,qBAAqB,MAAM,MAAM,KAAK,CAAC,EAAE,SAAS;AAE7E;;;;ACVM,SAAS,iBAAyC;AACxD,QAAO,WAAW,UAAU;AAC5B;AAKM,SAAS,iBAA2C;AAC1D,QAAO,WAAW,UAAU;AAC5B;AAED,MAAMC,aAAwC,IAAI,WAAW,MAAM;AAClE,YAAW,YAAY,YACtB,QAAO,uBAAuB,2BAA2B;IAEzD,QAAO,uBAAuB,oBAAoB;AAEnD;AAED,MAAMC,aAA0C,IAAI,WAAW,MAAM;AACpE,YAAW,YAAY,YACtB,QAAO,uBAAuB,2BAA2B;IAEzD,QAAO,uBAAuB,oBAAoB;AAEnD"}