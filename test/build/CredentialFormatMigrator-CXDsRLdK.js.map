{"version":3,"file":"CredentialFormatMigrator-CXDsRLdK.js","names":["mode: CredentialEncryptionMode","deviceConfig: DeviceConfig","nativeCredentialFacade: NativeCredentialsFacade | null","mobileSystemFacade: MobileSystemFacade | null","deviceConfigCredentials: DeviceConfigCredentials"],"sources":["../../src/common/misc/credentials/CredentialFormatMigrator.ts"],"sourcesContent":["import { DeviceConfig, DeviceConfigCredentials } from \"../DeviceConfig.js\"\nimport type { NativeCredentialsFacade } from \"../../native/common/generatedipc/NativeCredentialsFacade.js\"\nimport { Dialog } from \"../../gui/base/Dialog.js\"\nimport { PersistedCredentials } from \"../../native/common/generatedipc/PersistedCredentials.js\"\nimport { base64ToUint8Array, mapNullable } from \"@tutao/tutanota-utils\"\nimport { MobileSystemFacade } from \"../../native/common/generatedipc/MobileSystemFacade.js\"\nimport { CredentialEncryptionMode } from \"./CredentialEncryptionMode.js\"\nimport { AppLockMethod } from \"../../native/common/generatedipc/AppLockMethod.js\"\nimport { lang } from \"../LanguageViewModel.js\"\n\nfunction credentialEncryptionModeToAppLockMethod(mode: CredentialEncryptionMode): AppLockMethod {\n\tswitch (mode) {\n\t\tcase CredentialEncryptionMode.APP_PASSWORD:\n\t\tcase CredentialEncryptionMode.DEVICE_LOCK:\n\t\t\treturn AppLockMethod.None\n\t\tcase CredentialEncryptionMode.BIOMETRICS:\n\t\t\treturn AppLockMethod.Biometrics\n\t\tcase CredentialEncryptionMode.SYSTEM_PASSWORD:\n\t\t\treturn AppLockMethod.SystemPassOrBiometrics\n\t}\n}\n\nexport class CredentialFormatMigrator {\n\tconstructor(\n\t\tprivate readonly deviceConfig: DeviceConfig,\n\t\tprivate readonly nativeCredentialFacade: NativeCredentialsFacade | null,\n\t\tprivate readonly mobileSystemFacade: MobileSystemFacade | null,\n\t) {}\n\n\tasync migrate(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.migrateToNativeCredentials()\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t\tawait Dialog.message(\n\t\t\t\tlang.makeTranslation(\"confirm_msg\", \"Could not migrate credentials\"),\n\t\t\t\t`${e.name} ${e.message}\n${e.stack}`,\n\t\t\t).then(() => this.migrate())\n\t\t}\n\t}\n\n\t/**\n\t * Migrate existing credentials to native db if the migration haven't happened once. Also generate database key if missing.\n\t */\n\tprivate async migrateToNativeCredentials() {\n\t\tif (this.nativeCredentialFacade != null && !this.deviceConfig.getIsCredentialsMigratedToNative()) {\n\t\t\tconsole.log(\"Migrating credentials to native\")\n\t\t\tconst allPersistedCredentials = this.deviceConfig.getCredentials().map(deviceConfigCredentialsToPersisted)\n\t\t\tconst encryptionMode = await this.deviceConfig.getCredentialEncryptionMode()\n\t\t\tconst credentialsKey = await this.deviceConfig.getCredentialsEncryptionKey()\n\t\t\tif (encryptionMode != null && credentialsKey != null) {\n\t\t\t\tif (this.mobileSystemFacade != null) {\n\t\t\t\t\tawait this.mobileSystemFacade.setAppLockMethod(credentialEncryptionModeToAppLockMethod(encryptionMode))\n\t\t\t\t}\n\t\t\t\tconsole.log(\"migrating credentials\", allPersistedCredentials)\n\t\t\t\tawait this.nativeCredentialFacade.migrateToNativeCredentials(allPersistedCredentials, encryptionMode, credentialsKey)\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Skipping migration as encryption data is not there\")\n\t\t\t}\n\t\t\tconsole.log(\"Stored credentials in native\")\n\n\t\t\tawait this.deviceConfig.clearCredentialsData()\n\n\t\t\tconsole.log(\"Cleared credentials in deviceConfig\")\n\n\t\t\tthis.deviceConfig.setIsCredentialsMigratedToNative(true)\n\t\t}\n\t}\n}\n\nfunction deviceConfigCredentialsToPersisted(deviceConfigCredentials: DeviceConfigCredentials): PersistedCredentials {\n\treturn {\n\t\tcredentialInfo: deviceConfigCredentials.credentialInfo,\n\t\tencryptedPassword: deviceConfigCredentials.encryptedPassword,\n\t\tencryptedPassphraseKey: mapNullable(deviceConfigCredentials.encryptedPassphraseKey, base64ToUint8Array),\n\t\taccessToken: base64ToUint8Array(deviceConfigCredentials.accessToken),\n\t\tdatabaseKey: mapNullable(deviceConfigCredentials.databaseKey, base64ToUint8Array),\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,SAAS,wCAAwCA,MAA+C;AAC/F,SAAQ,MAAR;AACC,OAAK,yBAAyB;AAC9B,OAAK,yBAAyB,YAC7B,QAAO,cAAc;AACtB,OAAK,yBAAyB,WAC7B,QAAO,cAAc;AACtB,OAAK,yBAAyB,gBAC7B,QAAO,cAAc;CACtB;AACD;IAEY,2BAAN,MAA+B;CACrC,YACkBC,cACAC,wBACAC,oBAChB;EAqDF,KAxDkB;EAwDjB,KAvDiB;EAuDhB,KAtDgB;CACd;CAEJ,MAAM,UAAyB;AAC9B,MAAI;AACH,SAAM,KAAK,4BAA4B;EACvC,SAAQ,GAAG;AACX,WAAQ,MAAM,EAAE;AAChB,SAAM,OAAO,QACZ,KAAK,gBAAgB,eAAe,gCAAgC,GACnE,EAAE,EAAE,KAAK,GAAG,EAAE,QAAQ;EACzB,EAAE,MAAM,EACN,CAAC,KAAK,MAAM,KAAK,SAAS,CAAC;EAC5B;CACD;;;;CAKD,MAAc,6BAA6B;AAC1C,MAAI,KAAK,0BAA0B,SAAS,KAAK,aAAa,kCAAkC,EAAE;AACjG,WAAQ,IAAI,kCAAkC;GAC9C,MAAM,0BAA0B,KAAK,aAAa,gBAAgB,CAAC,IAAI,mCAAmC;GAC1G,MAAM,iBAAiB,MAAM,KAAK,aAAa,6BAA6B;GAC5E,MAAM,iBAAiB,MAAM,KAAK,aAAa,6BAA6B;AAC5E,OAAI,kBAAkB,QAAQ,kBAAkB,MAAM;AACrD,QAAI,KAAK,sBAAsB,KAC9B,OAAM,KAAK,mBAAmB,iBAAiB,wCAAwC,eAAe,CAAC;AAExG,YAAQ,IAAI,yBAAyB,wBAAwB;AAC7D,UAAM,KAAK,uBAAuB,2BAA2B,yBAAyB,gBAAgB,eAAe;GACrH,MACA,SAAQ,IAAI,qDAAqD;AAElE,WAAQ,IAAI,+BAA+B;AAE3C,SAAM,KAAK,aAAa,sBAAsB;AAE9C,WAAQ,IAAI,sCAAsC;AAElD,QAAK,aAAa,iCAAiC,KAAK;EACxD;CACD;AACD;AAED,SAAS,mCAAmCC,yBAAwE;AACnH,QAAO;EACN,gBAAgB,wBAAwB;EACxC,mBAAmB,wBAAwB;EAC3C,wBAAwB,YAAY,wBAAwB,wBAAwB,mBAAmB;EACvG,aAAa,mBAAmB,wBAAwB,YAAY;EACpE,aAAa,YAAY,wBAAwB,aAAa,mBAAmB;CACjF;AACD"}