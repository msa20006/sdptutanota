{"version":3,"file":"CommonCalendarUtils-DKaO7v1K.js","names":["startTime: Date","endTime: Date","localDate: Date","utcDate: Date","timestamp: number","identifier: string","shiftDays: number","address: string","attendees: ReadonlyArray<T>","addresses: ReadonlyArray<string>","recipients: ReadonlyArray<T>","date: Date","startDate: Date","interval: AlarmInterval"],"sources":["../../src/common/api/common/utils/CommonCalendarUtils.ts"],"sourcesContent":["import { DAY_IN_MILLIS } from \"@tutao/tutanota-utils\"\nimport type { CalendarEvent } from \"../../entities/tutanota/TypeRefs.js\"\nimport { EncryptedMailAddress } from \"../../entities/tutanota/TypeRefs.js\"\nimport { stringToCustomId } from \"./EntityUtils\"\nimport type { AlarmInterval } from \"../../../calendar/date/CalendarUtils.js\"\n\nexport type CalendarEventTimes = Pick<CalendarEvent, \"startTime\" | \"endTime\">\n\n/**\n * the time in ms that element ids for calendar events and alarms  get randomized by\n */\nexport const DAYS_SHIFTED_MS = 15 * DAY_IN_MILLIS\n\n/*\n * convenience wrapper for isAllDayEventByTimes\n */\nexport function isAllDayEvent({ startTime, endTime }: CalendarEventTimes): boolean {\n\treturn isAllDayEventByTimes(startTime, endTime)\n}\n\n/**\n * determine if an event with the given start and end times would be an all-day event\n */\nexport function isAllDayEventByTimes(startTime: Date, endTime: Date): boolean {\n\treturn (\n\t\tstartTime.getUTCHours() === 0 &&\n\t\tstartTime.getUTCMinutes() === 0 &&\n\t\tstartTime.getUTCSeconds() === 0 &&\n\t\tendTime.getUTCHours() === 0 &&\n\t\tendTime.getUTCMinutes() === 0 &&\n\t\tendTime.getUTCSeconds() === 0\n\t)\n}\n\n/**\n * @param localDate\n * @returns {Date} a Date with a unix timestamp corresponding to 00:00 UTC for localDate's Day in the local time zone\n */\nexport function getAllDayDateUTC(localDate: Date): Date {\n\treturn new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), 0, 0, 0, 0))\n}\n\n/**\n * @param utcDate a Date with a unix timestamp corresponding to 00:00 UTC for a given Day\n * @returns {Date} a Date with a unix timestamp corresponding to 00:00 for that day in the local time zone\n */\nexport function getAllDayDateLocal(utcDate: Date): Date {\n\treturn new Date(utcDate.getUTCFullYear(), utcDate.getUTCMonth(), utcDate.getUTCDate())\n}\n\n/**\n * generate a semi-randomized element id for a calendar event or an alarm\n * @param timestamp the start time of the event or the creation time of the alarm\n */\nexport function generateEventElementId(timestamp: number): string {\n\t// the id is based on either the event start time or the alarm creation time\n\t// we add a random shift between -DAYS_SHIFTED_MS and +DAYS_SHIFTED_MS to the event\n\t// id to prevent the server from knowing the exact time but still being able to\n\t// approximately sort them.\n\tconst randomDay = Math.floor(Math.random() * DAYS_SHIFTED_MS) * 2\n\treturn createEventElementId(timestamp, randomDay - DAYS_SHIFTED_MS)\n}\n\n/**\n * USE THIS ONLY WITH LOCAL EVENTS\n * generate an element id for a local calendar event\n * @param timestamp the start time of the event or the creation time of the alarm\n * @param identifier identifier to differentiate between events occurring at same time\n */\nexport function generateLocalEventElementId(timestamp: number, identifier: string): string {\n\t// We don't have to shift the days because the event never leaves the client\n\treturn stringToCustomId(`${timestamp}${identifier}`)\n}\n\n/**\n * https://262.ecma-international.org/5.1/#sec-15.9.1.1\n * * ECMAScript Number values can represent all integers from â€“9,007,199,254,740,992 to 9,007,199,254,740,992\n * * The actual range of times supported by ECMAScript Date objects is slightly smaller: a range of +-8,640,000,000,000,000 milliseconds\n * -> this makes the element Id a string of between 1 and 17 number characters (the shiftDays are negligible)\n *\n * exported for testing\n * @param timestamp\n * @param shiftDays\n */\nexport function createEventElementId(timestamp: number, shiftDays: number): string {\n\treturn stringToCustomId(String(timestamp + shiftDays))\n}\n\n/**\n * the maximum id an event with a given start time could have based on its\n * randomization.\n * @param timestamp\n */\nexport function geEventElementMaxId(timestamp: number): string {\n\treturn createEventElementId(timestamp, DAYS_SHIFTED_MS)\n}\n\n/**\n * the minimum an event with a given start time could have based on its\n * randomization.\n * @param timestamp\n */\nexport function getEventElementMinId(timestamp: number): string {\n\treturn createEventElementId(timestamp, -DAYS_SHIFTED_MS)\n}\n\n/**\n * return a cleaned and comparable version of a mail address without leading/trailing whitespace or uppercase characters.\n */\nexport function cleanMailAddress(address: string): string {\n\treturn address.trim().toLowerCase()\n}\n\n/**\n * get the first attendee from the list of attendees/guests that corresponds to one of the given recipient addresses, if there is one\n */\nexport function findAttendeeInAddresses<T extends { address: EncryptedMailAddress }>(attendees: ReadonlyArray<T>, addresses: ReadonlyArray<string>): T | null {\n\t// the filters are necessary because of #5147\n\t// we may get passed addresses and attendees that could not be decrypted and don't have addresses.\n\tconst lowerCaseAddresses = addresses.filter(Boolean).map(cleanMailAddress)\n\treturn attendees.find((a) => a.address.address != null && lowerCaseAddresses.includes(cleanMailAddress(a.address.address))) ?? null\n}\n\n/**\n * find the first of a list of recipients that have the given address assigned\n */\nexport function findRecipientWithAddress<T extends { address: string }>(recipients: ReadonlyArray<T>, address: string): T | null {\n\tconst cleanAddress = cleanMailAddress(address)\n\treturn recipients.find((r) => cleanMailAddress(r.address) === cleanAddress) ?? null\n}\n\n/**\n * get a date with the time set to the start of the next full half hour from the time this is called at\n * */\nexport function getNextHalfHour(): Date {\n\tlet date: Date = new Date()\n\n\treturn setNextHalfHour(date)\n}\n\n/**\n * set the given date to the start of the next full half hour from the time this is called at\n * */\nexport function setNextHalfHour(date: Date): Date {\n\tconst timeNow = new Date()\n\n\tif (timeNow.getMinutes() > 30) {\n\t\tdate.setHours(timeNow.getHours() + 1, 0)\n\t} else {\n\t\tdate.setHours(timeNow.getHours(), 30)\n\t}\n\n\treturn date\n}\n\n/**\n * get a partial calendar event with start time set to the passed value\n * (year, day, hours and minutes. seconds and milliseconds are zeroed.)\n * and an end time 30 minutes later than that.\n * @param startDate the start time to use for the event (defaults to the next full half hour)\n */\nexport function getEventWithDefaultTimes(startDate: Date = getNextHalfHour()): CalendarEventTimes {\n\tlet endDate = new Date(startDate)\n\treturn {\n\t\tstartTime: new Date(startDate),\n\t\tendTime: new Date(endDate.setMinutes(endDate.getMinutes() + 30)),\n\t}\n}\n\n/**\n * Converts runtime representation of an alarm into a db one.\n */\nexport function serializeAlarmInterval(interval: AlarmInterval): string {\n\treturn `${interval.value}${interval.unit}`\n}\n\nexport enum CalendarViewType {\n\tDAY = \"day\",\n\tWEEK = \"week\",\n\tMONTH = \"month\",\n\tAGENDA = \"agenda\",\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAWa,kBAAkB,KAAK;AAK7B,SAAS,cAAc,EAAE,WAAW,SAA6B,EAAW;AAClF,QAAO,qBAAqB,WAAW,QAAQ;AAC/C;AAKM,SAAS,qBAAqBA,WAAiBC,SAAwB;AAC7E,QACC,UAAU,aAAa,KAAK,KAC5B,UAAU,eAAe,KAAK,KAC9B,UAAU,eAAe,KAAK,KAC9B,QAAQ,aAAa,KAAK,KAC1B,QAAQ,eAAe,KAAK,KAC5B,QAAQ,eAAe,KAAK;AAE7B;AAMM,SAAS,iBAAiBC,WAAuB;AACvD,QAAO,IAAI,KAAK,KAAK,IAAI,UAAU,aAAa,EAAE,UAAU,UAAU,EAAE,UAAU,SAAS,EAAE,GAAG,GAAG,GAAG,EAAE;AACxG;AAMM,SAAS,mBAAmBC,SAAqB;AACvD,QAAO,IAAI,KAAK,QAAQ,gBAAgB,EAAE,QAAQ,aAAa,EAAE,QAAQ,YAAY;AACrF;AAMM,SAAS,uBAAuBC,WAA2B;CAKjE,MAAM,YAAY,KAAK,MAAM,KAAK,QAAQ,GAAG,gBAAgB,GAAG;AAChE,QAAO,qBAAqB,WAAW,YAAY,gBAAgB;AACnE;AAQM,SAAS,4BAA4BA,WAAmBC,YAA4B;AAE1F,QAAO,kBAAkB,EAAE,UAAU,EAAE,WAAW,EAAE;AACpD;AAYM,SAAS,qBAAqBD,WAAmBE,WAA2B;AAClF,QAAO,iBAAiB,OAAO,YAAY,UAAU,CAAC;AACtD;AAOM,SAAS,oBAAoBF,WAA2B;AAC9D,QAAO,qBAAqB,WAAW,gBAAgB;AACvD;AAOM,SAAS,qBAAqBA,WAA2B;AAC/D,QAAO,qBAAqB,YAAY,gBAAgB;AACxD;AAKM,SAAS,iBAAiBG,SAAyB;AACzD,QAAO,QAAQ,MAAM,CAAC,aAAa;AACnC;AAKM,SAAS,wBAAqEC,WAA6BC,WAA4C;CAG7J,MAAM,qBAAqB,UAAU,OAAO,QAAQ,CAAC,IAAI,iBAAiB;AAC1E,QAAO,UAAU,KAAK,CAAC,MAAM,EAAE,QAAQ,WAAW,QAAQ,mBAAmB,SAAS,iBAAiB,EAAE,QAAQ,QAAQ,CAAC,CAAC,IAAI;AAC/H;AAKM,SAAS,yBAAwDC,YAA8BH,SAA2B;CAChI,MAAM,eAAe,iBAAiB,QAAQ;AAC9C,QAAO,WAAW,KAAK,CAAC,MAAM,iBAAiB,EAAE,QAAQ,KAAK,aAAa,IAAI;AAC/E;AAKM,SAAS,kBAAwB;CACvC,IAAII,OAAa,IAAI;AAErB,QAAO,gBAAgB,KAAK;AAC5B;AAKM,SAAS,gBAAgBA,MAAkB;CACjD,MAAM,UAAU,IAAI;AAEpB,KAAI,QAAQ,YAAY,GAAG,GAC1B,MAAK,SAAS,QAAQ,UAAU,GAAG,GAAG,EAAE;IAExC,MAAK,SAAS,QAAQ,UAAU,EAAE,GAAG;AAGtC,QAAO;AACP;AAQM,SAAS,yBAAyBC,YAAkB,iBAAiB,EAAsB;CACjG,IAAI,UAAU,IAAI,KAAK;AACvB,QAAO;EACN,WAAW,IAAI,KAAK;EACpB,SAAS,IAAI,KAAK,QAAQ,WAAW,QAAQ,YAAY,GAAG,GAAG;CAC/D;AACD;AAKM,SAAS,uBAAuBC,UAAiC;AACvE,SAAQ,EAAE,SAAS,MAAM,EAAE,SAAS,KAAK;AACzC;IAEW,gDAAL;AACN;AACA;AACA;AACA;;AACA"}