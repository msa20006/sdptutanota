{"version":3,"file":"ContactImporter-D5ZB41b5.js","names":["contactBooks: ReadonlyArray<ContactBook>","book: ContactBook","contactFacade: ContactFacade","systemPermissionHandler: SystemPermissionHandler","mobileContactsFacade: MobileContactsFacade | null","nativeContactSyncManager: NativeContactsSyncManager | null","vCardData: string | string[]","contactListId: string","vCardData: string[]","contacts: ReadonlyArray<Contact>","allImportableStructuredContacts: StructuredContact[]","contactListId: string | null","selectedContacts: Contact[]","allImportableContacts: Map<Contact, StructuredContact>","selectedStructuredContacts: StructuredContact[]","mobileContactsFacade: MobileContactsFacade","ownerGroupId: Id","contact: StructuredContact","contacts: Contact[]","okAction: (dialog: Dialog, selectedContacts: Contact[]) => unknown","title: MaybeTranslation","viewModel: ContactImportDialogViewModel","renderConfig: RenderConfig<Contact, KindaContactRow>","selectedContact: Contact","item: Contact","fileList: FileReference[]","fileApp: NativeFileApp","rawContacts: string[]"],"sources":["../../src/mail-app/contacts/view/ImportNativeContactBooksDialog.ts","../../src/mail-app/contacts/ContactImporter.ts"],"sourcesContent":["import { Dialog, DialogType } from \"../../../common/gui/base/Dialog.js\"\nimport { ContactBook } from \"../../../common/native/common/generatedipc/ContactBook.js\"\nimport m, { Children } from \"mithril\"\nimport { Checkbox } from \"../../../common/gui/base/Checkbox.js\"\nimport { defer } from \"@tutao/tutanota-utils\"\nimport { lang } from \"../../../common/misc/LanguageViewModel.js\"\n\n/**\n * Displays a list of contact books to import contacts from.\n */\nexport class ImportNativeContactBooksDialog {\n\tprivate readonly selectedContactBooks: Set<string>\n\n\tconstructor(private readonly contactBooks: ReadonlyArray<ContactBook>) {\n\t\tthis.selectedContactBooks = new Set(this.contactBooks.map((book) => book.id))\n\t}\n\n\tshow(): Promise<ContactBook[] | null> {\n\t\tconst deferred = defer<ContactBook[] | null>()\n\t\tconst dialog = Dialog.showActionDialog({\n\t\t\ttitle: \"importContacts_label\",\n\t\t\ttype: DialogType.EditMedium,\n\t\t\tallowCancel: true,\n\t\t\tchild: () => {\n\t\t\t\treturn m(\n\t\t\t\t\t\".scroll\",\n\t\t\t\t\tthis.contactBooks.map((book) => this.renderRow(book)),\n\t\t\t\t)\n\t\t\t},\n\t\t\tokAction: () => {\n\t\t\t\tdeferred.resolve(this.contactBooks.filter((book) => this.selectedContactBooks.has(book.id)))\n\t\t\t\tdialog.close()\n\t\t\t},\n\t\t\tcancelAction: () => deferred.resolve(null),\n\t\t})\n\t\treturn deferred.promise\n\t}\n\n\tprivate renderRow(book: ContactBook): Children {\n\t\tconst checked = this.selectedContactBooks.has(book.id)\n\t\treturn m(\n\t\t\t\".flex.items-center\",\n\t\t\tm(Checkbox, {\n\t\t\t\tchecked,\n\t\t\t\tlabel: () => book.name ?? lang.get(\"pushIdentifierCurrentDevice_label\"),\n\t\t\t\tonChecked: () => {\n\t\t\t\t\tif (checked) {\n\t\t\t\t\t\tthis.selectedContactBooks.delete(book.id)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.selectedContactBooks.add(book.id)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}),\n\t\t)\n\t}\n}\n","import { Dialog, DialogType } from \"../../common/gui/base/Dialog.js\"\nimport { assertNotNull, getFirstOrThrow, ofClass, promiseMap } from \"@tutao/tutanota-utils\"\nimport { locator } from \"../../common/api/main/CommonLocator.js\"\nimport { vCardFileToVCards, vCardListToContacts } from \"./VCardImporter.js\"\nimport { ImportError } from \"../../common/api/common/error/ImportError.js\"\nimport { lang, MaybeTranslation } from \"../../common/misc/LanguageViewModel.js\"\nimport { showProgressDialog } from \"../../common/gui/dialogs/ProgressDialog.js\"\nimport { ContactFacade } from \"../../common/api/worker/facades/lazy/ContactFacade.js\"\nimport {\n\tContact,\n\tcreateContact,\n\tcreateContactAddress,\n\tcreateContactCustomDate,\n\tcreateContactMailAddress,\n\tcreateContactMessengerHandle,\n\tcreateContactPhoneNumber,\n\tcreateContactRelationship,\n\tcreateContactWebsite,\n} from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport m from \"mithril\"\nimport { List, ListAttrs, ListLoadingState, MultiselectMode, RenderConfig } from \"../../common/gui/base/List.js\"\nimport { size } from \"../../common/gui/size.js\"\nimport { UserError } from \"../../common/api/main/UserError.js\"\nimport { DialogHeaderBar, DialogHeaderBarAttrs } from \"../../common/gui/base/DialogHeaderBar.js\"\nimport { ButtonType } from \"../../common/gui/base/Button.js\"\nimport { ImportNativeContactBooksDialog } from \"./view/ImportNativeContactBooksDialog.js\"\nimport { StructuredContact } from \"../../common/native/common/generatedipc/StructuredContact.js\"\nimport { isoDateToBirthday } from \"../../common/api/common/utils/BirthdayUtils.js\"\nimport { ContactBook } from \"../../common/native/common/generatedipc/ContactBook.js\"\nimport { PermissionType } from \"../../common/native/common/generatedipc/PermissionType.js\"\nimport { SystemPermissionHandler } from \"../../common/native/main/SystemPermissionHandler.js\"\nimport { KindaContactRow } from \"./view/ContactListView.js\"\nimport { SelectAllCheckbox } from \"../../common/gui/SelectAllCheckbox.js\"\nimport { mailLocator } from \"../mailLocator.js\"\nimport { FileReference } from \"../../common/api/common/utils/FileUtils.js\"\nimport { AttachmentType, getAttachmentType } from \"../../common/gui/AttachmentBubble.js\"\nimport { NativeFileApp } from \"../../common/native/common/FileApp.js\"\nimport { MobileContactsFacade } from \"../../common/native/common/generatedipc/MobileContactsFacade.js\"\nimport { NativeContactsSyncManager } from \"./model/NativeContactsSyncManager\"\nimport { isIOSApp } from \"../../common/api/common/Env\"\n\nexport class ContactImporter {\n\tconstructor(\n\t\tprivate readonly contactFacade: ContactFacade,\n\t\tprivate readonly systemPermissionHandler: SystemPermissionHandler,\n\t\tprivate readonly mobileContactsFacade: MobileContactsFacade | null,\n\t\tprivate readonly nativeContactSyncManager: NativeContactsSyncManager | null,\n\t) {}\n\n\tasync importContactsFromFile(vCardData: string | string[], contactListId: string) {\n\t\tconst vCardList = Array.isArray(vCardData) ? ContactImporter.combineVCardData(vCardData) : vCardFileToVCards(vCardData)\n\n\t\tif (vCardList == null) throw new UserError(\"importVCardError_msg\")\n\n\t\tconst contactMembership = getFirstOrThrow(locator.logins.getUserController().getContactGroupMemberships())\n\t\tconst contacts = vCardListToContacts(vCardList, contactMembership.group)\n\n\t\treturn showContactImportDialog(\n\t\t\tcontacts,\n\t\t\t(dialog, selectedContacts) => {\n\t\t\t\tdialog.close()\n\t\t\t\tthis.importContacts(selectedContacts, contactListId)\n\t\t\t},\n\t\t\t\"importVCard_action\",\n\t\t)\n\t}\n\n\tprivate static combineVCardData(vCardData: string[]): string[] | null {\n\t\tconst combinedVCardData = vCardData.flatMap((itemData) => vCardFileToVCards(itemData))\n\t\treturn combinedVCardData.filter((vCard) => vCard != null) as string[]\n\t}\n\n\tasync importContacts(contacts: ReadonlyArray<Contact>, contactListId: string) {\n\t\tconst importPromise = this.contactFacade\n\t\t\t.importContactList(contacts, contactListId)\n\t\t\t.catch(\n\t\t\t\tofClass(ImportError, (e) =>\n\t\t\t\t\tDialog.message(\n\t\t\t\t\t\tlang.makeTranslation(\n\t\t\t\t\t\t\t\"confirm_msg\",\n\t\t\t\t\t\t\tlang.get(\"importContactsError_msg\", {\n\t\t\t\t\t\t\t\t\"{amount}\": e.numFailed + \"\",\n\t\t\t\t\t\t\t\t\"{total}\": contacts.length + \"\",\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t)\n\t\t\t.catch(() => Dialog.message(\"unknownError_msg\"))\n\t\tawait showProgressDialog(\"pleaseWait_msg\", importPromise)\n\t\tawait Dialog.message(\n\t\t\tlang.makeTranslation(\n\t\t\t\t\"confirm_msg\",\n\t\t\t\tlang.get(\"importVCardSuccess_msg\", {\n\t\t\t\t\t\"{1}\": contacts.length,\n\t\t\t\t}),\n\t\t\t),\n\t\t)\n\t}\n\n\t// will check for permission and ask for it if it is not granted\n\tasync importContactsFromDeviceSafely() {\n\t\t// check for permission\n\t\tconst isContactPermissionGranted = await this.systemPermissionHandler.requestPermission(PermissionType.Contacts, \"grantContactPermissionAction\")\n\n\t\tif (isContactPermissionGranted) {\n\t\t\tawait this.importContactsFromDevice()\n\t\t}\n\t}\n\n\tprivate async importContactsFromDevice() {\n\t\t// these will only ever be null if !isApp()\n\t\tconst mobileContactsFacade = assertNotNull(this.mobileContactsFacade)\n\n\t\tconst books = await this.selectContactBooks(mobileContactsFacade)\n\t\tif (books == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst contactListId = await locator.contactModel.getContactListId()\n\t\tconst contactGroupId = await locator.contactModel.getContactGroupId()\n\n\t\tconst allImportableStructuredContacts: StructuredContact[] = (\n\t\t\tawait promiseMap(\n\t\t\t\tbooks,\n\t\t\t\tasync (book) => await mobileContactsFacade.getContactsInContactBook(book.id, locator.logins.getUserController().loginUsername),\n\t\t\t)\n\t\t).flat()\n\t\tconst allImportableContacts = new Map(\n\t\t\tallImportableStructuredContacts.map((structuredContact) => [\n\t\t\t\tthis.contactFromStructuredContact(contactGroupId, structuredContact),\n\t\t\t\tstructuredContact,\n\t\t\t]),\n\t\t)\n\n\t\tshowContactImportDialog(\n\t\t\t[...allImportableContacts.keys()],\n\t\t\tasync (dialog, selectedContacts) => {\n\t\t\t\tdialog.close()\n\t\t\t\tawait this.onContactImportConfirmed(contactListId, selectedContacts, allImportableContacts)\n\t\t\t},\n\t\t\t\"importContacts_label\",\n\t\t)\n\t}\n\n\tprivate async onContactImportConfirmed(contactListId: string | null, selectedContacts: Contact[], allImportableContacts: Map<Contact, StructuredContact>) {\n\t\tconst importer = await mailLocator.contactImporter()\n\t\tconst mobileContactsFacade = assertNotNull(this.mobileContactsFacade)\n\t\tconst nativeContactSyncManager = assertNotNull(this.nativeContactSyncManager)\n\n\t\tconst selectedStructuredContacts: StructuredContact[] = selectedContacts.map((selectedContact) =>\n\t\t\tassertNotNull(allImportableContacts.get(selectedContact)),\n\t\t)\n\n\t\tawait importer.importContacts(selectedContacts, assertNotNull(contactListId))\n\t\tconst imported = nativeContactSyncManager.isEnabled() && (await nativeContactSyncManager.syncContacts())\n\n\t\t// On iOS, we want to give the option to remove the contacts locally, but we obviously only want to do\n\t\t// this if syncing is successful, assuming syncing is enabled.\n\t\t//\n\t\t// Do nothing further if not on iOS, or if syncing is disabled or failed.\n\t\tif (imported && isIOSApp()) {\n\t\t\tconst contactsWeJustImported = selectedStructuredContacts.map((contact) => assertNotNull(contact.rawId))\n\t\t\tconst remove = await Dialog.confirm(\"importContactRemoveImportedContactsConfirm_msg\")\n\t\t\tif (remove) {\n\t\t\t\tawait showProgressDialog(\"progressDeleting_msg\", mobileContactsFacade.deleteLocalContacts(contactsWeJustImported))\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async selectContactBooks(mobileContactsFacade: MobileContactsFacade): Promise<readonly ContactBook[] | null> {\n\t\tconst contactBooks = await showProgressDialog(\"pleaseWait_msg\", mobileContactsFacade.getContactBooks())\n\t\tif (contactBooks.length === 0) {\n\t\t\treturn null\n\t\t} else if (contactBooks.length === 1) {\n\t\t\treturn contactBooks\n\t\t} else {\n\t\t\tconst importDialog = new ImportNativeContactBooksDialog(contactBooks)\n\t\t\tconst selectedBooks = await importDialog.show()\n\t\t\tif (selectedBooks == null || selectedBooks.length === 0) return null\n\t\t\treturn selectedBooks\n\t\t}\n\t}\n\n\tprivate contactFromStructuredContact(ownerGroupId: Id, contact: StructuredContact): Contact {\n\t\treturn createContact({\n\t\t\t_ownerGroup: ownerGroupId,\n\t\t\tnickname: contact.nickname,\n\t\t\tfirstName: contact.firstName,\n\t\t\tlastName: contact.lastName,\n\t\t\tcompany: contact.company,\n\t\t\taddresses: contact.addresses.map((address) =>\n\t\t\t\tcreateContactAddress({\n\t\t\t\t\ttype: address.type,\n\t\t\t\t\taddress: address.address,\n\t\t\t\t\tcustomTypeName: address.customTypeName,\n\t\t\t\t}),\n\t\t\t),\n\t\t\tmailAddresses: contact.mailAddresses.map((address) =>\n\t\t\t\tcreateContactMailAddress({\n\t\t\t\t\ttype: address.type,\n\t\t\t\t\taddress: address.address,\n\t\t\t\t\tcustomTypeName: address.customTypeName,\n\t\t\t\t}),\n\t\t\t),\n\t\t\tphoneNumbers: contact.phoneNumbers.map((number) =>\n\t\t\t\tcreateContactPhoneNumber({\n\t\t\t\t\ttype: number.type,\n\t\t\t\t\tnumber: number.number,\n\t\t\t\t\tcustomTypeName: number.customTypeName,\n\t\t\t\t}),\n\t\t\t),\n\t\t\toldBirthdayAggregate: null,\n\t\t\toldBirthdayDate: null,\n\t\t\tphoto: null,\n\t\t\tpresharedPassword: null,\n\t\t\tsocialIds: [],\n\t\t\tbirthdayIso: this.validateBirthdayOfContact(contact),\n\t\t\tpronouns: [],\n\t\t\tcustomDate: contact.customDate.map((date) => createContactCustomDate(date)),\n\t\t\tdepartment: contact.department,\n\t\t\tmessengerHandles: contact.messengerHandles.map((handle) => createContactMessengerHandle(handle)),\n\t\t\tmiddleName: contact.middleName,\n\t\t\tnameSuffix: contact.nameSuffix,\n\t\t\tphoneticFirst: contact.phoneticFirst,\n\t\t\tphoneticLast: contact.phoneticLast,\n\t\t\tphoneticMiddle: contact.phoneticMiddle,\n\t\t\trelationships: contact.relationships.map((relation) => createContactRelationship(relation)),\n\t\t\twebsites: contact.websites.map((website) => createContactWebsite(website)),\n\t\t\tcomment: contact.notes,\n\t\t\ttitle: contact.title ?? \"\",\n\t\t\trole: contact.role,\n\t\t})\n\t}\n\n\tprivate validateBirthdayOfContact(contact: StructuredContact) {\n\t\tif (contact.birthday != null) {\n\t\t\ttry {\n\t\t\t\tisoDateToBirthday(contact.birthday)\n\t\t\t\treturn contact.birthday\n\t\t\t} catch (_) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n}\n\n/**\n * Show a dialog with a preview of a given list of contacts\n * @param contacts The contact list to be previewed\n * @param okAction The action to be executed when the user press the import button with at least one contact selected\n */\nexport function showContactImportDialog(contacts: Contact[], okAction: (dialog: Dialog, selectedContacts: Contact[]) => unknown, title: MaybeTranslation) {\n\tconst viewModel: ContactImportDialogViewModel = new ContactImportDialogViewModel()\n\tviewModel.selectContacts(contacts)\n\tconst renderConfig: RenderConfig<Contact, KindaContactRow> = {\n\t\titemHeight: size.list_row_height,\n\t\tmultiselectionAllowed: MultiselectMode.Enabled,\n\t\tswipe: null,\n\t\tcreateElement: (dom) => {\n\t\t\treturn new KindaContactRow(\n\t\t\t\tdom,\n\t\t\t\t(selectedContact: Contact) => viewModel.selectSingleContact(selectedContact),\n\t\t\t\t() => true,\n\t\t\t)\n\t\t},\n\t}\n\n\tconst dialog = new Dialog(DialogType.EditSmall, {\n\t\tview: () => [\n\t\t\t/** fixed-height header with a title, left and right buttons that's fixed to the top of the dialog's area */\n\t\t\tm(DialogHeaderBar, {\n\t\t\t\tleft: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tmiddle: title,\n\t\t\t\tright: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t\t\tlabel: \"import_action\",\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\tconst selectedContacts = [...viewModel.getSelectedContacts()]\n\t\t\t\t\t\t\tif (selectedContacts.length <= 0) {\n\t\t\t\t\t\t\t\tDialog.message(\"noContact_msg\")\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tokAction(dialog, selectedContacts)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t} satisfies DialogHeaderBarAttrs),\n\t\t\t/** variable-size child container that may be scrollable. */\n\t\t\tm(\".dialog-max-height.plr-s.pb.text-break.nav-bg\", [\n\t\t\t\tm(\n\t\t\t\t\t\".list-bg.border-radius.mt-s.ml-s.mr-s\",\n\t\t\t\t\tm(SelectAllCheckbox, {\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\"padding-left\": \"0\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tselected: viewModel.isAllContactsSelected(contacts),\n\t\t\t\t\t\tselectNone: () => viewModel.clearSelection(),\n\t\t\t\t\t\tselectAll: () => viewModel.selectContacts(contacts),\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t\tm(\n\t\t\t\t\t\".flex.col.rel.mt-s\",\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\theight: \"80vh\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tm(List, {\n\t\t\t\t\t\trenderConfig,\n\t\t\t\t\t\tstate: {\n\t\t\t\t\t\t\titems: contacts,\n\t\t\t\t\t\t\tloadingStatus: ListLoadingState.Done,\n\t\t\t\t\t\t\tloadingAll: false,\n\t\t\t\t\t\t\tselectedItems: viewModel.getSelectedContacts(),\n\t\t\t\t\t\t\tinMultiselect: true,\n\t\t\t\t\t\t\tactiveIndex: null,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonLoadMore() {},\n\t\t\t\t\t\tonRangeSelectionTowards(item: Contact) {},\n\t\t\t\t\t\tonRetryLoading() {},\n\t\t\t\t\t\tonSingleSelection(item: Contact) {\n\t\t\t\t\t\t\tviewModel.selectSingleContact(item)\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonSingleTogglingMultiselection(item: Contact) {},\n\t\t\t\t\t\tonStopLoading() {},\n\t\t\t\t\t} satisfies ListAttrs<Contact, KindaContactRow>),\n\t\t\t\t),\n\t\t\t]),\n\t\t],\n\t}).show()\n}\n\n// Controls the selected contacts in `showContactImportDialog()`\nclass ContactImportDialogViewModel {\n\tprivate readonly selectedContacts: Set<Contact> = new Set()\n\n\tgetSelectedContacts(): Set<Contact> {\n\t\treturn new Set(this.selectedContacts)\n\t}\n\n\t// Compares the selected contacts against a list of contacts and returns whether they contain the same contacts\n\tisAllContactsSelected(contacts: Contact[]): boolean {\n\t\tconst unselectedContacts = contacts.filter((contact) => !this.selectedContacts.has(contact))\n\t\treturn unselectedContacts.length <= 0\n\t}\n\n\t// Deselects all the selected contacts\n\tclearSelection(): void {\n\t\tthis.selectedContacts.clear()\n\t}\n\n\t// Toggles the presence of a contact within the selected contacts\n\tselectSingleContact(selectedContact: Contact): void {\n\t\tif (this.selectedContacts.has(selectedContact)) {\n\t\t\tthis.selectedContacts.delete(selectedContact)\n\t\t} else {\n\t\t\tthis.selectedContacts.add(selectedContact)\n\t\t}\n\t}\n\n\t// Replaces the selected contacts with the provided contacts\n\tselectContacts(contacts: Contact[]): void {\n\t\tthis.selectedContacts.clear()\n\t\tfor (const contact of contacts) {\n\t\t\tthis.selectedContacts.add(contact)\n\t\t}\n\t}\n}\n\nexport async function parseContacts(fileList: FileReference[], fileApp: NativeFileApp) {\n\tconst rawContacts: string[] = []\n\tfor (const file of fileList) {\n\t\tif (getAttachmentType(file.mimeType) === AttachmentType.CONTACT) {\n\t\t\tconst dataFile = await fileApp.readDataFile(file.location)\n\t\t\tif (dataFile == null) continue\n\n\t\t\tconst decoder = new TextDecoder(\"utf-8\")\n\t\t\tconst vCardData = decoder.decode(dataFile.data)\n\n\t\t\trawContacts.push(vCardData)\n\t\t}\n\t}\n\n\treturn rawContacts\n}\n"],"mappings":"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"}