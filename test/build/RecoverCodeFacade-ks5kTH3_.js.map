{"version":3,"file":"RecoverCodeFacade-ks5kTH3_.js","names":["userFacade: UserFacade","entityClient: EntityClient","loginFacade: LoginFacade","keyLoaderFacade: KeyLoaderFacade","currentUserGroupKey: VersionedKey","recoveryCode: Aes256Key","passphrase: string","passphraseKey: AesKey","user: User"],"sources":["../../src/common/api/worker/facades/lazy/RecoverCodeFacade.ts"],"sourcesContent":["import { asKdfType } from \"../../../common/TutanotaConstants.js\"\nimport { createRecoverCode, RecoverCodeTypeRef, User } from \"../../../entities/sys/TypeRefs.js\"\nimport { assertNotNull, type Hex, uint8ArrayToHex } from \"@tutao/tutanota-utils\"\nimport { LoginFacade } from \"../LoginFacade.js\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport {\n\tAes256Key,\n\taes256RandomKey,\n\tAesKey,\n\tbitArrayToUint8Array,\n\tcreateAuthVerifier,\n\tcreateAuthVerifierAsBase64Url,\n\tdecryptKey,\n\tencryptKey,\n} from \"@tutao/tutanota-crypto\"\nimport { EntityClient } from \"../../../common/EntityClient.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { KeyLoaderFacade } from \"../KeyLoaderFacade.js\"\nimport { VersionedKey } from \"../../crypto/CryptoWrapper.js\"\n\nassertWorkerOrNode()\n\nexport type RecoverData = {\n\tuserEncRecoverCode: Uint8Array\n\tuserKeyVersion: number\n\trecoverCodeEncUserGroupKey: Uint8Array\n\thexCode: Hex\n\trecoveryCodeVerifier: Uint8Array\n}\n\n/**\n * Facade to create, encrypt and show the recovery code.\n */\nexport class RecoverCodeFacade {\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly loginFacade: LoginFacade,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t) {}\n\n\tgenerateRecoveryCode(currentUserGroupKey: VersionedKey): RecoverData {\n\t\tconst recoveryCode = aes256RandomKey()\n\t\treturn this.encryptRecoveryCode(recoveryCode, currentUserGroupKey)\n\t}\n\n\tencryptRecoveryCode(recoveryCode: Aes256Key, currentUserGroupKey: VersionedKey): RecoverData {\n\t\tconst userEncRecoverCode = encryptKey(currentUserGroupKey.object, recoveryCode)\n\t\tconst recoverCodeEncUserGroupKey = encryptKey(recoveryCode, currentUserGroupKey.object)\n\t\tconst recoveryCodeVerifier = createAuthVerifier(recoveryCode)\n\t\treturn {\n\t\t\tuserEncRecoverCode,\n\t\t\tuserKeyVersion: currentUserGroupKey.version,\n\t\t\trecoverCodeEncUserGroupKey,\n\t\t\thexCode: uint8ArrayToHex(bitArrayToUint8Array(recoveryCode)),\n\t\t\trecoveryCodeVerifier,\n\t\t}\n\t}\n\n\tasync getRecoverCodeHex(passphrase: string): Promise<string> {\n\t\tconst user = this.userFacade.getLoggedInUser()\n\t\tconst passphraseKey = await this.getPassphraseKey(user, passphrase)\n\t\tconst rawRecoverCode = await this.getRawRecoverCode(passphraseKey)\n\t\treturn uint8ArrayToHex(bitArrayToUint8Array(rawRecoverCode))\n\t}\n\n\tasync getRawRecoverCode(passphraseKey: AesKey): Promise<AesKey> {\n\t\tconst user = this.userFacade.getLoggedInUser()\n\t\tconst recoverCodeId = user.auth?.recoverCode\n\t\tif (recoverCodeId == null) {\n\t\t\tthrow new Error(\"Auth is missing\")\n\t\t}\n\n\t\tconst extraHeaders = {\n\t\t\tauthVerifier: createAuthVerifierAsBase64Url(passphraseKey),\n\t\t}\n\n\t\tconst recoveryCodeEntity = await this.entityClient.load(RecoverCodeTypeRef, recoverCodeId, { extraHeaders })\n\t\tconst userGroupKey = await this.keyLoaderFacade.loadSymUserGroupKey(Number(recoveryCodeEntity.userKeyVersion))\n\t\treturn decryptKey(userGroupKey, recoveryCodeEntity.userEncRecoverCode)\n\t}\n\n\tprivate async getPassphraseKey(user: User, passphrase: string) {\n\t\tconst passphraseKeyData = {\n\t\t\tkdfType: asKdfType(user.kdfVersion),\n\t\t\tpassphrase,\n\t\t\tsalt: assertNotNull(user.salt),\n\t\t}\n\t\treturn await this.loginFacade.deriveUserPassphraseKey(passphraseKeyData)\n\t}\n\n\tasync createRecoveryCode(passphrase: string): Promise<string> {\n\t\tconst user = this.userFacade.getUser()\n\n\t\tif (user == null || user.auth == null) {\n\t\t\tthrow new Error(\"Invalid state: no user or no user.auth\")\n\t\t}\n\n\t\tconst { userEncRecoverCode, userKeyVersion, recoverCodeEncUserGroupKey, hexCode, recoveryCodeVerifier } = this.generateRecoveryCode(\n\t\t\tthis.userFacade.getCurrentUserGroupKey(),\n\t\t)\n\t\tconst recoverPasswordEntity = createRecoverCode({\n\t\t\tuserEncRecoverCode: userEncRecoverCode,\n\t\t\tuserKeyVersion: String(userKeyVersion),\n\t\t\trecoverCodeEncUserGroupKey: recoverCodeEncUserGroupKey,\n\t\t\t_ownerGroup: this.userFacade.getUserGroupId(),\n\t\t\tverifier: recoveryCodeVerifier,\n\t\t})\n\t\tconst passphraseKeyData = {\n\t\t\tkdfType: asKdfType(user.kdfVersion),\n\t\t\tpassphrase,\n\t\t\tsalt: assertNotNull(user.salt),\n\t\t}\n\t\tconst pwKey = await this.loginFacade.deriveUserPassphraseKey(passphraseKeyData)\n\t\tconst authVerifier = createAuthVerifierAsBase64Url(pwKey)\n\t\tawait this.entityClient.setup(null, recoverPasswordEntity, {\n\t\t\tauthVerifier,\n\t\t})\n\t\treturn hexCode\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,oBAAoB;IAaP,oBAAN,MAAwB;CAC9B,YACkBA,YACAC,cACAC,aACAC,iBAChB;EAkFF,KAtFkB;EAsFjB,KArFiB;EAqFhB,KApFgB;EAoFf,KAnFe;CACd;CAEJ,qBAAqBC,qBAAgD;EACpE,MAAM,eAAe,iBAAiB;AACtC,SAAO,KAAK,oBAAoB,cAAc,oBAAoB;CAClE;CAED,oBAAoBC,cAAyBD,qBAAgD;EAC5F,MAAM,qBAAqB,WAAW,oBAAoB,QAAQ,aAAa;EAC/E,MAAM,6BAA6B,WAAW,cAAc,oBAAoB,OAAO;EACvF,MAAM,uBAAuB,mBAAmB,aAAa;AAC7D,SAAO;GACN;GACA,gBAAgB,oBAAoB;GACpC;GACA,SAAS,gBAAgB,qBAAqB,aAAa,CAAC;GAC5D;EACA;CACD;CAED,MAAM,kBAAkBE,YAAqC;EAC5D,MAAM,OAAO,KAAK,WAAW,iBAAiB;EAC9C,MAAM,gBAAgB,MAAM,KAAK,iBAAiB,MAAM,WAAW;EACnE,MAAM,iBAAiB,MAAM,KAAK,kBAAkB,cAAc;AAClE,SAAO,gBAAgB,qBAAqB,eAAe,CAAC;CAC5D;CAED,MAAM,kBAAkBC,eAAwC;EAC/D,MAAM,OAAO,KAAK,WAAW,iBAAiB;EAC9C,MAAM,gBAAgB,KAAK,MAAM;AACjC,MAAI,iBAAiB,KACpB,OAAM,IAAI,MAAM;EAGjB,MAAM,eAAe,EACpB,cAAc,8BAA8B,cAAc,CAC1D;EAED,MAAM,qBAAqB,MAAM,KAAK,aAAa,KAAK,oBAAoB,eAAe,EAAE,aAAc,EAAC;EAC5G,MAAM,eAAe,MAAM,KAAK,gBAAgB,oBAAoB,OAAO,mBAAmB,eAAe,CAAC;AAC9G,SAAO,WAAW,cAAc,mBAAmB,mBAAmB;CACtE;CAED,MAAc,iBAAiBC,MAAYF,YAAoB;EAC9D,MAAM,oBAAoB;GACzB,SAAS,UAAU,KAAK,WAAW;GACnC;GACA,MAAM,cAAc,KAAK,KAAK;EAC9B;AACD,SAAO,MAAM,KAAK,YAAY,wBAAwB,kBAAkB;CACxE;CAED,MAAM,mBAAmBA,YAAqC;EAC7D,MAAM,OAAO,KAAK,WAAW,SAAS;AAEtC,MAAI,QAAQ,QAAQ,KAAK,QAAQ,KAChC,OAAM,IAAI,MAAM;EAGjB,MAAM,EAAE,oBAAoB,gBAAgB,4BAA4B,SAAS,sBAAsB,GAAG,KAAK,qBAC9G,KAAK,WAAW,wBAAwB,CACxC;EACD,MAAM,wBAAwB,kBAAkB;GAC3B;GACpB,gBAAgB,OAAO,eAAe;GACV;GAC5B,aAAa,KAAK,WAAW,gBAAgB;GAC7C,UAAU;EACV,EAAC;EACF,MAAM,oBAAoB;GACzB,SAAS,UAAU,KAAK,WAAW;GACnC;GACA,MAAM,cAAc,KAAK,KAAK;EAC9B;EACD,MAAM,QAAQ,MAAM,KAAK,YAAY,wBAAwB,kBAAkB;EAC/E,MAAM,eAAe,8BAA8B,MAAM;AACzD,QAAM,KAAK,aAAa,MAAM,MAAM,uBAAuB,EAC1D,aACA,EAAC;AACF,SAAO;CACP;AACD"}