{"version":3,"file":"MailExportFacade-BBIyF2WZ.js","names":["mailExportTokenFacade: MailExportTokenFacade","bulkMailLoader: BulkMailLoader","blobFacade: BlobFacade","cryptoFacade: CryptoFacade","blobAccessTokenFacade: BlobAccessTokenFacade","group: Group","mailListId: Id","startId: Id","baseUrl: string","mails: readonly Mail[]","mail: Mail","attachments: readonly TutanotaFile[]","attachment","token: string"],"sources":["../../src/common/api/worker/facades/lazy/MailExportFacade.ts"],"sourcesContent":["import { File as TutanotaFile, Mail } from \"../../../entities/tutanota/TypeRefs\"\nimport { assertWorkerOrNode } from \"../../../common/Env\"\nimport { BulkMailLoader, MailWithMailDetails } from \"../../../../../mail-app/workerUtils/index/BulkMailLoader.js\"\nimport { convertToDataFile, DataFile } from \"../../../common/DataFile.js\"\nimport { ArchiveDataType } from \"../../../common/TutanotaConstants.js\"\nimport { BlobFacade } from \"./BlobFacade.js\"\nimport { CryptoFacade } from \"../../crypto/CryptoFacade.js\"\nimport { createReferencingInstance } from \"../../../common/utils/BlobUtils.js\"\nimport { MailExportTokenFacade } from \"./MailExportTokenFacade.js\"\nimport { assertNotNull, isNotNull } from \"@tutao/tutanota-utils\"\nimport { NotFoundError } from \"../../../common/error/RestError\"\nimport { elementIdPart } from \"../../../common/utils/EntityUtils\"\nimport { BlobAccessTokenFacade } from \"../BlobAccessTokenFacade\"\nimport { BlobServerUrl } from \"../../../entities/storage/TypeRefs\"\nimport { Group } from \"../../../entities/sys/TypeRefs\"\nimport { SuspensionBehavior } from \"../../rest/RestClient\"\n\nassertWorkerOrNode()\n\n/**\n * Denotes the header that will have the mail export token.\n */\nexport const MAIL_EXPORT_TOKEN_HEADER = \"mailExportToken\"\n\n/**\n * Wraps bulk loading of mails for mail export.\n *\n * Takes care of using mail export tokens.\n */\nexport class MailExportFacade {\n\tconstructor(\n\t\tprivate readonly mailExportTokenFacade: MailExportTokenFacade,\n\t\tprivate readonly bulkMailLoader: BulkMailLoader,\n\t\tprivate readonly blobFacade: BlobFacade,\n\t\tprivate readonly cryptoFacade: CryptoFacade,\n\t\tprivate readonly blobAccessTokenFacade: BlobAccessTokenFacade,\n\t) {}\n\n\t/**\n\t * Returns a list of servers that can be used to request data from.\n\t */\n\tasync getExportServers(group: Group): Promise<BlobServerUrl[]> {\n\t\tconst blobServerAccessInfo = await this.blobAccessTokenFacade.requestWriteToken(ArchiveDataType.Attachments, group._id)\n\t\treturn blobServerAccessInfo.servers\n\t}\n\n\tasync loadFixedNumberOfMailsWithCache(mailListId: Id, startId: Id, baseUrl: string): Promise<Mail[]> {\n\t\treturn this.mailExportTokenFacade.loadWithToken((token) =>\n\t\t\tthis.bulkMailLoader.loadFixedNumberOfMailsWithCache(mailListId, startId, { baseUrl, ...this.options(token) }),\n\t\t)\n\t}\n\n\tasync loadMailDetails(mails: readonly Mail[]): Promise<MailWithMailDetails[]> {\n\t\treturn this.mailExportTokenFacade.loadWithToken((token) => this.bulkMailLoader.loadMailDetails(mails, this.options(token)))\n\t}\n\n\tasync loadAttachments(mails: readonly Mail[], baseUrl: string): Promise<TutanotaFile[]> {\n\t\treturn this.mailExportTokenFacade.loadWithToken((token) => this.bulkMailLoader.loadAttachments(mails, { baseUrl, ...this.options(token) }))\n\t}\n\n\tasync loadAttachmentData(mail: Mail, attachments: readonly TutanotaFile[]): Promise<DataFile[]> {\n\t\tconst attachmentsWithKeys = await this.cryptoFacade.enforceSessionKeyUpdateIfNeeded(mail, attachments)\n\n\t\tconst downloads = await this.mailExportTokenFacade.loadWithToken((token) => {\n\t\t\tconst referencingInstances = attachmentsWithKeys.map(createReferencingInstance)\n\t\t\treturn this.blobFacade.downloadAndDecryptBlobsOfMultipleInstances(ArchiveDataType.Attachments, referencingInstances, {\n\t\t\t\t...this.options(token),\n\t\t\t})\n\t\t})\n\n\t\tconst attachmentData = Array.from(downloads.entries()).map(([fileId, bytes]) => {\n\t\t\ttry {\n\t\t\t\tif (bytes == null) {\n\t\t\t\t\treturn null\n\t\t\t\t} else {\n\t\t\t\t\tconst attachment = assertNotNull(attachmentsWithKeys.find((attachment) => elementIdPart(attachment._id) === fileId))\n\t\t\t\t\treturn convertToDataFile(attachment, bytes)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\treturn null\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\treturn attachmentData.filter(isNotNull)\n\t}\n\n\tprivate options(token: string): { extraHeaders: Dict; suspensionBehavior: SuspensionBehavior.Throw } {\n\t\treturn {\n\t\t\textraHeaders: {\n\t\t\t\t[MAIL_EXPORT_TOKEN_HEADER]: token,\n\t\t\t},\n\t\t\tsuspensionBehavior: SuspensionBehavior.Throw,\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,oBAAoB;MAKP,2BAA2B;IAO3B,mBAAN,MAAuB;CAC7B,YACkBA,uBACAC,gBACAC,YACAC,cACAC,uBAChB;EA+DF,KApEkB;EAoEjB,KAnEiB;EAmEhB,KAlEgB;EAkEf,KAjEe;EAiEd,KAhEc;CACd;;;;CAKJ,MAAM,iBAAiBC,OAAwC;EAC9D,MAAM,uBAAuB,MAAM,KAAK,sBAAsB,kBAAkB,gBAAgB,aAAa,MAAM,IAAI;AACvH,SAAO,qBAAqB;CAC5B;CAED,MAAM,gCAAgCC,YAAgBC,SAAaC,SAAkC;AACpG,SAAO,KAAK,sBAAsB,cAAc,CAAC,UAChD,KAAK,eAAe,gCAAgC,YAAY,SAAS;GAAE;GAAS,GAAG,KAAK,QAAQ,MAAM;EAAE,EAAC,CAC7G;CACD;CAED,MAAM,gBAAgBC,OAAwD;AAC7E,SAAO,KAAK,sBAAsB,cAAc,CAAC,UAAU,KAAK,eAAe,gBAAgB,OAAO,KAAK,QAAQ,MAAM,CAAC,CAAC;CAC3H;CAED,MAAM,gBAAgBA,OAAwBD,SAA0C;AACvF,SAAO,KAAK,sBAAsB,cAAc,CAAC,UAAU,KAAK,eAAe,gBAAgB,OAAO;GAAE;GAAS,GAAG,KAAK,QAAQ,MAAM;EAAE,EAAC,CAAC;CAC3I;CAED,MAAM,mBAAmBE,MAAYC,aAA2D;EAC/F,MAAM,sBAAsB,MAAM,KAAK,aAAa,gCAAgC,MAAM,YAAY;EAEtG,MAAM,YAAY,MAAM,KAAK,sBAAsB,cAAc,CAAC,UAAU;GAC3E,MAAM,uBAAuB,oBAAoB,IAAI,0BAA0B;AAC/E,UAAO,KAAK,WAAW,2CAA2C,gBAAgB,aAAa,sBAAsB,EACpH,GAAG,KAAK,QAAQ,MAAM,CACtB,EAAC;EACF,EAAC;EAEF,MAAM,iBAAiB,MAAM,KAAK,UAAU,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,MAAM,KAAK;AAC/E,OAAI;AACH,QAAI,SAAS,KACZ,QAAO;KACD;KACN,MAAM,aAAa,cAAc,oBAAoB,KAAK,CAACC,iBAAe,cAAcA,aAAW,IAAI,KAAK,OAAO,CAAC;AACpH,YAAO,kBAAkB,YAAY,MAAM;IAC3C;GACD,SAAQ,GAAG;AACX,QAAI,aAAa,cAChB,QAAO;IAEP,OAAM;GAEP;EACD,EAAC;AAEF,SAAO,eAAe,OAAO,UAAU;CACvC;CAED,AAAQ,QAAQC,OAAqF;AACpG,SAAO;GACN,cAAc,GACZ,2BAA2B,MAC5B;GACD,oBAAoB,mBAAmB;EACvC;CACD;AACD"}