{"version":3,"file":"Formatter-zB15D6XI.js","names":["date: Date","sizeInBytes: number","text: string","userSettings: UserSettingsGroupRoot","hours: number","minutes: number","amPm: boolean","name: string","domain: string"],"sources":["../../src/common/misc/Formatter.ts"],"sourcesContent":["import { lang } from \"./LanguageViewModel\"\nimport { isSameDayOfDate, pad } from \"@tutao/tutanota-utils\"\nimport type { UserSettingsGroupRoot } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { TimeFormat } from \"../api/common/TutanotaConstants\"\nimport { assertMainOrNode } from \"../api/common/Env\"\nimport { cleanMailAddress } from \"../api/common/utils/CommonCalendarUtils.js\"\n\nassertMainOrNode()\n\nexport function formatMonthWithYear(date: Date): string {\n\treturn lang.formats.monthWithYear.format(date)\n}\n\n/**\n * Returns the given date formatted in mm/yy\n */\nexport function formatShortMonthYear2Digit(date: Date): string {\n\treturn lang.formats.shortMonthYear2Digit.format(date)\n}\n\nexport function formatMonthWithFullYear(date: Date): string {\n\treturn lang.formats.monthWithFullYear.format(date)\n}\n\nexport function formatDate(date: Date): string {\n\treturn lang.formats.simpleDate.format(date)\n}\n\nexport function formatDateWithMonth(date: Date): string {\n\treturn lang.formats.dateWithMonth.format(date)\n}\n\nexport function formatDateWithWeekday(date: Date): string {\n\tif (date.getFullYear() === new Date().getFullYear()) {\n\t\treturn lang.formats.dateWithWeekday.format(date)\n\t} else {\n\t\treturn lang.formats.dateWithWeekdayAndYear.format(date)\n\t}\n}\n\nexport function formatDateWithWeekdayAndYear(date: Date): string {\n\treturn lang.formats.dateWithWeekdayAndYear.format(date)\n}\n\nexport function formatDateWithWeekdayAndYearLong(date: Date): string {\n\treturn lang.formats.dateWithWeekdayAndYearLong.format(date)\n}\n\nexport function formatDateTimeFromYesterdayOn(date: Date): string {\n\tlet dateString\n\tlet startOfToday = new Date().setHours(0, 0, 0, 0)\n\tlet startOfYesterday = startOfToday - 1000 * 60 * 60 * 24\n\n\tif (date.getTime() >= startOfToday) {\n\t\tdateString = \"\"\n\t} else if (startOfToday > date.getTime() && date.getTime() >= startOfYesterday) {\n\t\tdateString = lang.get(\"yesterday_label\")\n\t} else {\n\t\tdateString = formatDateWithWeekday(date)\n\t}\n\n\treturn (dateString + \" \" + formatTime(date)).trim()\n}\n\nexport function formatTimeOrDateOrYesterday(date: Date): string {\n\tconst startOfToday = new Date().setHours(0, 0, 0, 0)\n\tif (date.getTime() >= startOfToday) {\n\t\treturn formatTime(date)\n\t}\n\tconst yesterday = new Date(startOfToday)\n\tyesterday.setDate(yesterday.getDate() - 1)\n\tif (isSameDayOfDate(date, yesterday)) {\n\t\treturn lang.get(\"yesterday_label\")\n\t} else if (date.getFullYear() === new Date().getFullYear()) {\n\t\treturn lang.formats.dateWithoutYear.format(date)\n\t} else {\n\t\treturn lang.formats.dateWithMonth.format(date)\n\t}\n}\n\nexport function formatTime(date: Date): string {\n\treturn lang.formats.time.format(date)\n}\n\nexport function formatShortTime(date: Date): string {\n\treturn lang.formats.shortTime.format(date)\n}\n\nexport function formatDateTime(date: Date): string {\n\treturn lang.formats.dateTime.format(date)\n}\n\nexport function formatDateTimeShort(date: Date): string {\n\treturn lang.formats.dateTimeShort.format(date)\n}\n\nexport function formatDateWithWeekdayAndTime(date: Date): string {\n\treturn lang.formats.dateWithWeekdayAndTime.format(date)\n}\n\nexport function formatDateWithTimeIfNotEven(date: Date): string {\n\tif (\n\t\t(date.getHours() === 0 && date.getMinutes() === 0) || // If it's beginning of the day\n\t\t(date.getHours() === 23 && date.getMinutes() === 59 && date.getSeconds() === 59)\n\t) {\n\t\t// or the end of the day\n\t\treturn formatDate(date)\n\t} else {\n\t\treturn formatDateTimeShort(date)\n\t}\n}\n\nexport function formatWeekdayShort(date: Date): string {\n\treturn lang.formats.weekdayShort.format(date)\n}\n\nexport function formatWeekdayNarrow(date: Date): string {\n\treturn lang.formats.weekdayNarrow.format(date)\n}\n\nexport function dateWithWeekdayWoMonth(date: Date): string {\n\treturn lang.formats.dateWithWeekdayWoMonth.format(date)\n}\n\nexport function formatMonthShortWithFullYear(date: Date): string {\n\treturn lang.formats.monthShortWithFullYear.format(date)\n}\n\n/**\n * Formats the given size in bytes to a better human readable string using B, KB, MB, GB, TB.\n */\nexport function formatStorageSize(sizeInBytes: number): string {\n\tconst units = [\"B\", \"kB\", \"MB\", \"GB\", \"TB\"]\n\tconst narrowNoBreakSpace = \"â€¯\" // this space is the special unicode narrow no-break character\n\n\tlet unitIndex = 0\n\n\twhile (sizeInBytes >= 1000) {\n\t\tsizeInBytes /= 1000 // we use 1000 instead of 1024\n\n\t\tunitIndex++\n\t}\n\n\t// round to 1 digit after comma\n\tsizeInBytes = Math.floor(sizeInBytes * 10) / 10\n\treturn sizeInBytes + narrowNoBreakSpace + units[unitIndex]\n}\n\nexport function urlEncodeHtmlTags(text: string): string {\n\treturn text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\")\n}\n\nexport function convertTextToHtml(text: string) {\n\treturn text.replace(/(\\r)?\\n/g, \"<br>\")\n}\n\nexport function getHourCycle(userSettings: UserSettingsGroupRoot): \"h12\" | \"h23\" {\n\treturn userSettings.timeFormat === TimeFormat.TWELVE_HOURS ? \"h12\" : \"h23\"\n}\n\nexport function timeStringFromParts(hours: number, minutes: number, amPm: boolean): string {\n\tlet minutesString = pad(minutes, 2)\n\n\tif (amPm) {\n\t\tif (hours === 0) {\n\t\t\treturn `12:${minutesString} am`\n\t\t} else if (hours === 12) {\n\t\t\treturn `12:${minutesString} pm`\n\t\t} else if (hours > 12) {\n\t\t\treturn `${hours - 12}:${minutesString} pm`\n\t\t} else {\n\t\t\treturn `${hours}:${minutesString} am`\n\t\t}\n\t} else {\n\t\tlet hoursString = pad(hours, 2)\n\t\treturn hoursString + \":\" + minutesString\n\t}\n}\n\nexport function formatMailAddressFromParts(name: string, domain: string): string {\n\treturn cleanMailAddress(`${name}@${domain}`)\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,kBAAkB;AAaX,SAAS,wBAAwBA,MAAoB;AAC3D,QAAO,KAAK,QAAQ,kBAAkB,OAAO,KAAK;AAClD;AAEM,SAAS,WAAWA,MAAoB;AAC9C,QAAO,KAAK,QAAQ,WAAW,OAAO,KAAK;AAC3C;AAEM,SAAS,oBAAoBA,MAAoB;AACvD,QAAO,KAAK,QAAQ,cAAc,OAAO,KAAK;AAC9C;AAUM,SAAS,6BAA6BA,MAAoB;AAChE,QAAO,KAAK,QAAQ,uBAAuB,OAAO,KAAK;AACvD;AAsBM,SAAS,4BAA4BA,MAAoB;CAC/D,MAAM,eAAe,IAAI,OAAO,SAAS,GAAG,GAAG,GAAG,EAAE;AACpD,KAAI,KAAK,SAAS,IAAI,aACrB,QAAO,WAAW,KAAK;CAExB,MAAM,YAAY,IAAI,KAAK;AAC3B,WAAU,QAAQ,UAAU,SAAS,GAAG,EAAE;AAC1C,KAAI,gBAAgB,MAAM,UAAU,CACnC,QAAO,KAAK,IAAI,kBAAkB;SACxB,KAAK,aAAa,KAAK,IAAI,OAAO,aAAa,CACzD,QAAO,KAAK,QAAQ,gBAAgB,OAAO,KAAK;IAEhD,QAAO,KAAK,QAAQ,cAAc,OAAO,KAAK;AAE/C;AAEM,SAAS,WAAWA,MAAoB;AAC9C,QAAO,KAAK,QAAQ,KAAK,OAAO,KAAK;AACrC;AAMM,SAAS,eAAeA,MAAoB;AAClD,QAAO,KAAK,QAAQ,SAAS,OAAO,KAAK;AACzC;AAMM,SAAS,6BAA6BA,MAAoB;AAChE,QAAO,KAAK,QAAQ,uBAAuB,OAAO,KAAK;AACvD;AAiCM,SAAS,kBAAkBC,aAA6B;CAC9D,MAAM,QAAQ;EAAC;EAAK;EAAM;EAAM;EAAM;CAAK;CAC3C,MAAM,qBAAqB;CAE3B,IAAI,YAAY;AAEhB,QAAO,eAAe,KAAM;AAC3B,iBAAe;AAEf;CACA;AAGD,eAAc,KAAK,MAAM,cAAc,GAAG,GAAG;AAC7C,QAAO,cAAc,qBAAqB,MAAM;AAChD;AAEM,SAAS,kBAAkBC,MAAsB;AACvD,QAAO,KAAK,QAAQ,MAAM,QAAQ,CAAC,QAAQ,MAAM,OAAO,CAAC,QAAQ,MAAM,OAAO,CAAC,QAAQ,MAAM,SAAS,CAAC,QAAQ,MAAM,SAAS;AAC9H;AAEM,SAAS,kBAAkBA,MAAc;AAC/C,QAAO,KAAK,QAAQ,YAAY,OAAO;AACvC;AAEM,SAAS,aAAaC,cAAoD;AAChF,QAAO,aAAa,eAAe,WAAW,eAAe,QAAQ;AACrE;AAEM,SAAS,oBAAoBC,OAAeC,SAAiBC,MAAuB;CAC1F,IAAI,gBAAgB,IAAI,SAAS,EAAE;AAEnC,KAAI,KACH,KAAI,UAAU,EACb,SAAQ,KAAK,cAAc;SACjB,UAAU,GACpB,SAAQ,KAAK,cAAc;SACjB,QAAQ,GAClB,SAAQ,EAAE,QAAQ,GAAG,GAAG,cAAc;IAEtC,SAAQ,EAAE,MAAM,GAAG,cAAc;KAE5B;EACN,IAAI,cAAc,IAAI,OAAO,EAAE;AAC/B,SAAO,cAAc,MAAM;CAC3B;AACD;AAEM,SAAS,2BAA2BC,MAAcC,QAAwB;AAChF,QAAO,kBAAkB,EAAE,KAAK,GAAG,OAAO,EAAE;AAC5C"}