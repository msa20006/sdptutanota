{"version":3,"file":"RestClientTest-CxYRvl-k.js","names":["suspensionHandlerMock: Partial<SuspensionHandler>","server: http.Server","port: number","baseUrl: string","res"],"sources":["../tests/api/worker/rest/RestClientTest.ts"],"sourcesContent":["import o from \"@tutao/otest\"\nimport { isSuspensionResponse, RestClient } from \"../../../../../src/common/api/worker/rest/RestClient.js\"\nimport { HttpMethod, MediaType } from \"../../../../../src/common/api/common/EntityFunctions.js\"\nimport { ResourceError } from \"../../../../../src/common/api/common/error/RestError.js\"\nimport { defer, noOp } from \"@tutao/tutanota-utils\"\nimport http from \"node:http\"\nimport { SuspensionHandler } from \"../../../../../src/common/api/worker/SuspensionHandler.js\"\nimport express from \"express\"\nimport bodyParser from \"body-parser\"\nimport type { AddressInfo } from \"node:net\"\nimport { domainConfigStub } from \"../../../TestUtils.js\"\n\n// only runs in node, it spins up a local server and connects to it\n\nconst SERVER_TIME_IN_HEADER = \"Mon, 12 Jul 2021 13:18:39 GMT\"\nconst SERVER_TIMESTAMP = 1626095919000\n\no.spec(\"RestClient\", function () {\n\tconst suspensionHandlerMock: Partial<SuspensionHandler> = {\n\t\tactivateSuspensionIfInactive: noOp,\n\t\tisSuspended: () => false,\n\t\tdeferRequest: (request) => request(),\n\t}\n\tconst restClient = new RestClient(suspensionHandlerMock as SuspensionHandler, domainConfigStub)\n\to.spec(\"integration tests\", function () {\n\t\tlet app = express()\n\t\tlet server: http.Server\n\t\tlet port: number\n\t\tlet baseUrl: string\n\n\t\to.before(async function () {\n\t\t\tserver = await new Promise((resolve) => {\n\t\t\t\tconst s = app.listen(0, () => resolve(s))\n\t\t\t})\n\t\t\tport = (server.address() as AddressInfo)!.port\n\t\t\tbaseUrl = `http://localhost:${port}`\n\t\t})\n\n\t\to.after(async function () {\n\t\t\tconst s = server\n\t\t\tif (s) {\n\t\t\t\tawait new Promise<void>((resolve) =>\n\t\t\t\t\ts.close(function (err) {\n\t\t\t\t\t\tif (err) console.log(err)\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\t\to(\"GET json\", async function () {\n\t\t\to.timeout(400)\n\t\t\tlet responseText = '{\"msg\":\"Hello Client\"}'\n\t\t\tapp.get(\"/get/json\", (req, res) => {\n\t\t\t\to(req.method).equals(\"GET\")\n\t\t\t\to(req.headers[\"content-type\"]).equals(undefined)\n\t\t\t\to(req.headers[\"accept\"]).equals(\"application/json\")\n\t\t\t\tres.send(responseText)\n\t\t\t})\n\t\t\tconst res = await restClient.request(\"/get/json\", HttpMethod.GET, {\n\t\t\t\tresponseType: MediaType.Json,\n\t\t\t\tbaseUrl,\n\t\t\t})\n\t\t\to(res).equals(responseText)\n\t\t})\n\t\to(\"GET with body (converted to query parameter)\", async function () {\n\t\t\to.timeout(200)\n\t\t\tlet request = \"{get: true}\"\n\t\t\tconst deferred = defer<void>()\n\t\t\tapp.get(\"/get/with-body\", (req, res) => {\n\t\t\t\to(req.method).equals(\"GET\")\n\t\t\t\to(req.query._body).equals(request)\n\t\t\t\tres.send()\n\t\t\t\tdeferred.resolve()\n\t\t\t})\n\t\t\trestClient.request(\"/get/with-body\", HttpMethod.GET, {\n\t\t\t\tbody: request,\n\t\t\t\tresponseType: MediaType.Json,\n\t\t\t\tbaseUrl,\n\t\t\t})\n\t\t\tawait deferred.promise\n\t\t})\n\t\to(\"GET binary\", async function () {\n\t\t\to.timeout(200)\n\t\t\tlet response = new Buffer([1, 50, 83, 250])\n\t\t\tapp.get(\"/get/binary\", (req, res) => {\n\t\t\t\to(req.method).equals(\"GET\")\n\t\t\t\to(req.headers[\"content-type\"]).equals(undefined)\n\t\t\t\to(req.headers[\"accept\"]).equals(\"application/octet-stream\")\n\t\t\t\tres.send(response)\n\t\t\t})\n\t\t\tconst res = await restClient.request(\"/get/binary\", HttpMethod.GET, {\n\t\t\t\tqueryParams: {},\n\t\t\t\tresponseType: MediaType.Binary,\n\t\t\t\tbaseUrl,\n\t\t\t})\n\t\t\to(res instanceof Uint8Array).equals(true)\n\t\t\to(Array.from(res as any)).deepEquals(Array.from(response))\n\t\t})\n\t\to(\"POST json\", testJson(\"POST\"))\n\t\to(\"PUT json\", testJson(\"PUT\"))\n\t\to(\"DELETE json\", testJson(\"DELETE\"))\n\n\t\tfunction testJson(method) {\n\t\t\treturn async function () {\n\t\t\t\to.timeout(200)\n\t\t\t\tlet requestText = '{\"msg\":\"Dear Server\"}'\n\t\t\t\tlet responseText = '{\"msg\":\"Hello Client\"}'\n\t\t\t\tlet url = \"/\" + method + \"/json\"\n\t\t\t\tapp.use(bodyParser.json())\n\t\t\t\tapp[method.toLowerCase()](url, (req, res) => {\n\t\t\t\t\to(req.method).equals(method)\n\t\t\t\t\to(req.headers[\"content-type\"]).equals(\"application/json\")\n\t\t\t\t\to(req.headers[\"accept\"]).equals(\"application/json\")\n\t\t\t\t\to(req.body).deepEquals(JSON.parse(requestText))\n\t\t\t\t\t//console.log(\"!\", req.body, req.method, req.originalUrl, req.path, req.query, req.headers)\n\t\t\t\t\to(req.query[\"_\"]).equals(undefined) // timestamp should be defined only for GET requests\n\n\t\t\t\t\tres.send(responseText)\n\t\t\t\t})\n\t\t\t\tconst res = await restClient.request(url, method, {\n\t\t\t\t\tbody: requestText,\n\t\t\t\t\tresponseType: MediaType.Json,\n\t\t\t\t\tbaseUrl,\n\t\t\t\t})\n\t\t\t\to(res).equals(responseText)\n\t\t\t}\n\t\t}\n\n\t\to(\"POST binary\", testBinary(\"POST\"))\n\t\to(\"PUT binary\", testBinary(\"PUT\"))\n\t\to(\"DELETE binary\", testBinary(\"DELETE\"))\n\n\t\tfunction testBinary(method) {\n\t\t\treturn async function () {\n\t\t\t\to.timeout(200)\n\t\t\t\tlet request = new Buffer([8, 5, 2, 183])\n\t\t\t\tlet response = new Buffer([1, 50, 83, 250])\n\t\t\t\tlet url = \"/\" + method + \"/binary\"\n\t\t\t\tapp.use(bodyParser.raw())\n\t\t\t\tapp[method.toLowerCase()](url, (req, res) => {\n\t\t\t\t\to(req.method).equals(method)\n\t\t\t\t\to(req.headers[\"content-type\"]).equals(\"application/octet-stream\")\n\t\t\t\t\to(req.headers[\"accept\"]).equals(\"application/octet-stream\")\n\t\t\t\t\to(Array.from(req.body)).deepEquals(Array.from(request))\n\t\t\t\t\to(req.query[\"_\"]).equals(undefined) // timestamp should be defined only for GET requests\n\n\t\t\t\t\tres.send(response)\n\t\t\t\t})\n\t\t\t\tconst res = await restClient.request(url, method, {\n\t\t\t\t\tbody: new Uint8Array(request),\n\t\t\t\t\tresponseType: MediaType.Binary,\n\t\t\t\t\tbaseUrl,\n\t\t\t\t})\n\t\t\t\to(res instanceof Uint8Array).equals(true)\n\t\t\t\to(Array.from(res as any)).deepEquals(Array.from(response))\n\t\t\t}\n\t\t}\n\n\t\to.test(\"GET empty body\", testEmptyBody(\"GET\"))\n\t\to.test(\"POST empty body\", testEmptyBody(\"POST\"))\n\t\to.test(\"PUT empty body\", testEmptyBody(\"PUT\"))\n\t\to.test(\"DELETE empty body\", testEmptyBody(\"DELETE\"))\n\n\t\tfunction testEmptyBody(method) {\n\t\t\treturn async function () {\n\t\t\t\to.timeout(200)\n\t\t\t\tlet url = \"/\" + method + \"/empty-body\"\n\t\t\t\tapp[method.toLowerCase()](url, (req, res) => {\n\t\t\t\t\to(req.headers[\"content-type\"]).equals(undefined)\n\t\t\t\t\to(req.headers[\"accept\"]).equals(undefined)\n\t\t\t\t\tres.set(\"Date\", SERVER_TIME_IN_HEADER)\n\t\t\t\t\tres.send()\n\t\t\t\t})\n\t\t\t\tconst res = await restClient.request(url, method, {\n\t\t\t\t\tbaseUrl,\n\t\t\t\t})\n\t\t\t\to(res).equals(null)\n\t\t\t}\n\t\t}\n\n\t\to(\"GET empty body error\", testError(\"GET\"))\n\t\to(\"POST empty body error\", testError(\"POST\"))\n\t\to(\"PUT empty body error\", testError(\"PUT\"))\n\t\to(\"DELETE empty body error\", testError(\"DELETE\"))\n\n\t\tfunction testError(method) {\n\t\t\treturn async function () {\n\t\t\t\tlet url = \"/\" + method + \"/error\"\n\t\t\t\tapp[method.toLowerCase()](url, (req, res) => {\n\t\t\t\t\tres.set(\"Date\", SERVER_TIME_IN_HEADER)\n\t\t\t\t\tres.status(205).send() // every status code !== 200 is currently handled as error\n\t\t\t\t})\n\t\t\t\tawait o(() => restClient.request(url, method, { baseUrl })).asyncThrows(ResourceError)\n\t\t\t}\n\t\t}\n\n\t\to(\"get time successful request\", async () => {\n\t\t\tconst test = testEmptyBody(\"GET\")\n\t\t\tawait test()\n\t\t\tconst timestamp = restClient.getServerTimestampMs()\n\t\t\t// Adjust for possible variance in date times\n\t\t\to(Math.abs(timestamp - SERVER_TIMESTAMP) < 10).equals(true)(\"Timestamp on the server was too different\")\n\t\t})\n\t\to(\"get time error request\", async () => {\n\t\t\tconst test = testError(\"GET\")\n\t\t\tawait test()\n\t\t\tconst timestamp = restClient.getServerTimestampMs()\n\t\t\t// Adjust for possible variance in date times\n\t\t\to(Math.abs(timestamp - SERVER_TIMESTAMP) < 10).equals(true)(\"Timestamp on the server was too different\")\n\t\t})\n\t})\n\to(\"isSuspensionResponse\", () => {\n\t\to(isSuspensionResponse(503, \"1\")).equals(true)\n\t\to(isSuspensionResponse(429, \"100\")).equals(true)\n\t\to(isSuspensionResponse(0, \"2\")).equals(false)\n\t\to(isSuspensionResponse(503, \"0\")).equals(false)\n\t\to(isSuspensionResponse(503, null)).equals(false)\n\t\to(isSuspensionResponse(503, null)).equals(false)\n\t})\n})\n"],"mappings":"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"}