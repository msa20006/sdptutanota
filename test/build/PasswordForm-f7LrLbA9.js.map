{"version":3,"file":"PasswordForm-f7LrLbA9.js","names":["NUMBER_OF_BYTES: number","BYTE_RANGE: number","randomizer: WorkerRandomizer","dictionary: Array<string>","range: number","dictionary: string[] | null","vnode: Vnode<PasswordGeneratorDialogAttrs>","usageTestController: UsageTestController","logins: LoginController","config: PasswordModelConfig","mailValid?: Stream<boolean>","newPassword: string","oldPassword: string","repeatedPassword: string","status: Status","reserved: string[]","attrs: PasswordFormAttrs"],"sources":["../../src/common/misc/passwords/PasswordGenerator.ts","../../src/common/misc/passwords/PasswordGeneratorDialog.ts","../../src/common/settings/PasswordForm.ts"],"sourcesContent":["import { assertMainOrNode } from \"../../api/common/Env\"\nimport { assert } from \"@tutao/tutanota-utils\"\nimport { WorkerRandomizer } from \"../../api/worker/workerInterfaces.js\"\n\nassertMainOrNode()\n\n// exported for tests\n// size of dictionary is within the 2Byte range\nexport const NUMBER_OF_BYTES: number = 2\nexport const BYTE_RANGE: number = Math.pow(2, 8 * NUMBER_OF_BYTES)\n\nexport class PasswordGenerator {\n\tconstructor(private randomizer: WorkerRandomizer, private dictionary: Array<string>) {}\n\n\tasync generateRandomPassphrase(): Promise<string> {\n\t\tconst usedWords = new Set()\n\n\t\twhile (usedWords.size < 6) {\n\t\t\tconst word = await this.pickRandomWordFromDictionary()\n\t\t\tusedWords.add(word)\n\t\t}\n\n\t\treturn Array.from(usedWords).join(\" \")\n\t}\n\n\tasync pickRandomWordFromDictionary(): Promise<string> {\n\t\tconst length = this.dictionary.length\n\t\treturn this.dictionary[await this.generateRandomNumberInRange(length)]\n\t}\n\n\t// The Randomizer generates a number within range := {0, ..., BYTE_RANGE - 1} (1Byte -> {0, ..., 255} for BYTE_RANGE = 256)\n\t// To scale the number n to our desired range, we can divide n by the BYTE_RANGE, resulting in a number n with 0 <= n < 1\n\t// @param 'range' is the length of the dictionary. Multiplying the above number by the range will result in a number in range := {0, ..., range - 1}\n\t// This is necessary to keep the distribution of numbers even, as well as ensuring that we do not access any invalid Index\n\tasync generateRandomNumberInRange(range: number): Promise<number> {\n\t\tassert(range > 0, \"range must be greater than 0\")\n\t\tconst byteNumber = await this.randomizer.generateRandomNumber(NUMBER_OF_BYTES)\n\t\treturn Math.floor((byteNumber / BYTE_RANGE) * range)\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport { Dialog } from \"../../gui/base/Dialog\"\nimport { PasswordGenerator } from \"./PasswordGenerator\"\nimport { Button, ButtonType } from \"../../gui/base/Button.js\"\nimport { locator } from \"../../api/main/CommonLocator\"\nimport { px } from \"../../gui/size\"\nimport { copyToClipboard } from \"../ClipboardUtils\"\nimport { InfoLink, lang } from \"../LanguageViewModel.js\"\nimport { LoginButton } from \"../../gui/base/buttons/LoginButton.js\"\nimport { ExternalLink } from \"../../gui/base/ExternalLink.js\"\n\nlet dictionary: string[] | null = null\n\n/**\n * Show a dialog to generate a random passphrase\n * @returns a promise containing the generated password\n */\nexport async function showPasswordGeneratorDialog(): Promise<string> {\n\tif (dictionary == null) {\n\t\tconst appState = window.tutao.appState\n\t\tconst baseUrl = location.protocol + \"//\" + location.hostname + (location.port ? \":\" + location.port : \"\") + appState.prefixWithoutFile\n\t\tdictionary = await fetch(baseUrl + \"/wordlibrary.json\").then((response) => response.json())\n\t}\n\n\tlet password = \"\"\n\tconst pwGenerator = new PasswordGenerator(locator.random, dictionary!)\n\n\treturn new Promise((resolve) => {\n\t\tconst insertPasswordOkAction = () => {\n\t\t\tresolve(password)\n\t\t\tdialog.close()\n\t\t}\n\n\t\tconst updateAction = async () => {\n\t\t\tpassword = await pwGenerator.generateRandomPassphrase()\n\t\t\tm.redraw()\n\t\t}\n\n\t\tupdateAction()\n\n\t\tconst dialog = Dialog.showActionDialog({\n\t\t\ttitle: \"passphrase_label\",\n\t\t\tchild: {\n\t\t\t\tview: () =>\n\t\t\t\t\tm(PasswordGeneratorDialog, {\n\t\t\t\t\t\tokAction: insertPasswordOkAction,\n\t\t\t\t\t\tupdateAction,\n\t\t\t\t\t\tpassword,\n\t\t\t\t\t}),\n\t\t\t},\n\t\t\tokAction: null,\n\t\t})\n\t})\n}\n\ninterface PasswordGeneratorDialogAttrs {\n\tokAction: () => void\n\tupdateAction: () => void\n\tpassword: string\n}\n\nclass PasswordGeneratorDialog implements Component<PasswordGeneratorDialogAttrs> {\n\tview(vnode: Vnode<PasswordGeneratorDialogAttrs>): Children {\n\t\tconst { updateAction, okAction, password } = vnode.attrs\n\t\treturn m(\"\", [\n\t\t\tm(\n\t\t\t\t\".editor-border.mt.flex.center-horizontally.center-vertically\",\n\t\t\t\t{\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tminHeight: px(65), // needs 65px for displaying two rows\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tm(\".center.b.monospace\", password),\n\t\t\t),\n\t\t\tm(\".small.mt-xs\", [\n\t\t\t\tlang.get(\"passphraseGeneratorHelp_msg\"),\n\t\t\t\t\" \",\n\t\t\t\tm(ExternalLink, {\n\t\t\t\t\thref: InfoLink.PasswordGenerator,\n\t\t\t\t\ttext: lang.get(\"faqEntry_label\"),\n\t\t\t\t\tisCompanySite: true,\n\t\t\t\t}),\n\t\t\t]),\n\t\t\tm(\".flex-end\", [\n\t\t\t\tm(Button, {\n\t\t\t\t\tlabel: \"regeneratePassword_action\",\n\t\t\t\t\tclick: () => updateAction(),\n\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t}),\n\t\t\t\tm(Button, {\n\t\t\t\t\tclick: () => copyToClipboard(password),\n\t\t\t\t\tlabel: \"copy_action\",\n\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t}),\n\t\t\t]),\n\t\t\tm(\n\t\t\t\t\".flex\",\n\t\t\t\tm(LoginButton, {\n\t\t\t\t\tlabel: \"apply_action\",\n\t\t\t\t\tonclick: () => okAction(),\n\t\t\t\t}),\n\t\t\t),\n\t\t])\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport { Autocomplete } from \"../gui/base/TextField.js\"\nimport { getPasswordStrength, isSecurePassword } from \"../misc/passwords/PasswordUtils.js\"\nimport type { TranslationKey } from \"../misc/LanguageViewModel.js\"\nimport { lang } from \"../misc/LanguageViewModel.js\"\nimport type { Status } from \"../gui/base/StatusField.js\"\nimport { LoginController } from \"../api/main/LoginController.js\"\nimport { assertMainOrNode } from \"../api/common/Env.js\"\nimport { getEnabledMailAddressesForGroupInfo } from \"../api/common/utils/GroupUtils.js\"\nimport { showPasswordGeneratorDialog } from \"../misc/passwords/PasswordGeneratorDialog.js\"\nimport { theme } from \"../gui/theme.js\"\nimport { px, size } from \"../gui/size.js\"\nimport { UsageTest, UsageTestController } from \"@tutao/tutanota-usagetests\"\nimport Stream from \"mithril/stream\"\nimport { PasswordField, PasswordFieldAttrs } from \"../misc/passwords/PasswordField.js\"\n\nassertMainOrNode()\n\nexport interface PasswordFormAttrs {\n\tmodel: PasswordModel\n\tpasswordInfoKey?: TranslationKey\n}\n\nexport interface PasswordModelConfig {\n\treadonly checkOldPassword: boolean\n\treadonly enforceStrength: boolean\n\t/** if set to true the second password field won't be rendered. If not set at all or false the second password field is rendered */\n\treadonly hideConfirmation?: boolean\n\treadonly reservedStrings?: () => string[]\n}\n\nconst enum PasswordFieldType {\n\tOld,\n\tNew,\n\tConfirm,\n}\n\nexport class PasswordModel {\n\tprivate newPassword = \"\"\n\tprivate oldPassword = \"\"\n\tprivate repeatedPassword = \"\"\n\tprivate passwordStrength: number\n\tprivate readonly __mailValid?: Stream<boolean>\n\tprivate __signupFreeTest?: UsageTest\n\tprivate __signupPaidTest?: UsageTest\n\n\tconstructor(\n\t\tprivate readonly usageTestController: UsageTestController,\n\t\tprivate readonly logins: LoginController,\n\t\treadonly config: PasswordModelConfig,\n\t\tmailValid?: Stream<boolean>,\n\t) {\n\t\tthis.passwordStrength = this.calculatePasswordStrength()\n\n\t\tthis.__mailValid = mailValid\n\t\tthis.__signupFreeTest = this.usageTestController.getTest(\"signup.free\")\n\t\tthis.__signupPaidTest = this.usageTestController.getTest(\"signup.paid\")\n\t}\n\n\t_checkBothValidAndSendPing() {\n\t\tif (this.getNewPasswordStatus().type === \"valid\" && this.getRepeatedPasswordStatus().type === \"valid\") {\n\t\t\t// Password entry (both passwords entered and valid)\n\t\t\t// Only the started test's (either free or paid clicked) stage is completed here\n\t\t\tthis.__signupFreeTest?.getStage(3).complete()\n\t\t\tthis.__signupPaidTest?.getStage(2).complete()\n\t\t}\n\t}\n\n\tgetNewPassword(): string {\n\t\treturn this.newPassword\n\t}\n\n\tsetNewPassword(newPassword: string) {\n\t\tif (this.__mailValid && this.__mailValid()) {\n\t\t\t// Email address selection finished (email address is available and clicked in password field)\n\t\t\t// Only the started test's (either free or paid clicked) stage is completed here\n\t\t\tthis.__signupFreeTest?.getStage(2).complete()\n\t\t\tthis.__signupPaidTest?.getStage(1).complete()\n\t\t}\n\n\t\tthis.newPassword = newPassword\n\t\tthis.recalculatePasswordStrength()\n\t}\n\n\t/**\n\t * Might be needed when reserved strings change in the config\n\t */\n\trecalculatePasswordStrength() {\n\t\tthis.passwordStrength = this.calculatePasswordStrength()\n\t\tthis._checkBothValidAndSendPing()\n\t}\n\n\tgetOldPassword(): string {\n\t\treturn this.oldPassword\n\t}\n\n\tsetOldPassword(oldPassword: string) {\n\t\tthis.oldPassword = oldPassword\n\t\tthis.passwordStrength = this.calculatePasswordStrength()\n\t}\n\n\tgetRepeatedPassword(): string {\n\t\treturn this.repeatedPassword\n\t}\n\n\tsetRepeatedPassword(repeatedPassword: string) {\n\t\tthis.repeatedPassword = repeatedPassword\n\t\tthis.passwordStrength = this.calculatePasswordStrength()\n\n\t\tthis._checkBothValidAndSendPing()\n\t}\n\n\tclear() {\n\t\tthis.newPassword = \"\"\n\t\tthis.oldPassword = \"\"\n\t\tthis.repeatedPassword = \"\"\n\t\tthis.passwordStrength = this.calculatePasswordStrength()\n\t}\n\n\tgetErrorMessageId(): TranslationKey | null {\n\t\treturn (\n\t\t\tthis.getErrorFromStatus(this.getOldPasswordStatus()) ??\n\t\t\tthis.getErrorFromStatus(this.getNewPasswordStatus()) ??\n\t\t\tthis.getErrorFromStatus(this.getRepeatedPasswordStatus())\n\t\t)\n\t}\n\n\tgetOldPasswordStatus(): Status {\n\t\tif (this.config.checkOldPassword && this.oldPassword === \"\") {\n\t\t\treturn {\n\t\t\t\ttype: \"neutral\",\n\t\t\t\ttext: \"oldPasswordNeutral_msg\",\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\ttype: \"valid\",\n\t\t\t\ttext: \"emptyString_msg\",\n\t\t\t}\n\t\t}\n\t}\n\n\tgetNewPasswordStatus(): Status {\n\t\tif (this.newPassword === \"\") {\n\t\t\treturn {\n\t\t\t\ttype: \"neutral\",\n\t\t\t\ttext: \"password1Neutral_msg\",\n\t\t\t}\n\t\t} else if (this.config.checkOldPassword && this.oldPassword === this.newPassword) {\n\t\t\treturn {\n\t\t\t\ttype: \"invalid\",\n\t\t\t\ttext: \"password1InvalidSame_msg\",\n\t\t\t}\n\t\t} else if (this.isPasswordInsecure()) {\n\t\t\tif (this.config.enforceStrength) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"invalid\",\n\t\t\t\t\ttext: \"password1InvalidUnsecure_msg\",\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"valid\",\n\t\t\t\t\ttext: \"password1InvalidUnsecure_msg\",\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\ttype: \"valid\",\n\t\t\t\ttext: \"passwordValid_msg\",\n\t\t\t}\n\t\t}\n\t}\n\n\tgetRepeatedPasswordStatus(): Status {\n\t\tif (this.config.hideConfirmation) {\n\t\t\treturn {\n\t\t\t\ttype: \"valid\",\n\t\t\t\ttext: \"passwordValid_msg\",\n\t\t\t}\n\t\t}\n\t\tconst repeatedPassword = this.repeatedPassword\n\t\tconst newPassword = this.newPassword\n\n\t\tif (repeatedPassword === \"\") {\n\t\t\treturn {\n\t\t\t\ttype: \"neutral\",\n\t\t\t\ttext: \"password2Neutral_msg\",\n\t\t\t}\n\t\t} else if (repeatedPassword !== newPassword) {\n\t\t\treturn {\n\t\t\t\ttype: \"invalid\",\n\t\t\t\ttext: \"password2Invalid_msg\",\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\ttype: \"valid\",\n\t\t\t\ttext: \"passwordValid_msg\",\n\t\t\t}\n\t\t}\n\t}\n\n\tisPasswordInsecure(): boolean {\n\t\treturn !isSecurePassword(this.getPasswordStrength())\n\t}\n\n\tgetPasswordStrength(): number {\n\t\treturn this.passwordStrength\n\t}\n\n\tprivate getErrorFromStatus(status: Status): TranslationKey | null {\n\t\tif (!status) return null\n\t\treturn status.type !== \"valid\" ? status.text : null\n\t}\n\n\tprivate calculatePasswordStrength(): number {\n\t\tlet reserved: string[] = this.config.reservedStrings ? this.config.reservedStrings() : []\n\n\t\tif (this.logins.isUserLoggedIn()) {\n\t\t\treserved = reserved\n\t\t\t\t.concat(getEnabledMailAddressesForGroupInfo(this.logins.getUserController().userGroupInfo))\n\t\t\t\t.concat(this.logins.getUserController().userGroupInfo.name)\n\t\t}\n\n\t\t// 80% strength is minimum. we expand it to 100%, so the password indicator if completely filled when the password is strong enough\n\t\treturn getPasswordStrength(this.newPassword, reserved)\n\t}\n}\n\n/**\n * A form for entering a new password. Optionally it allows to enter the old password for validation and/or to repeat the new password.\n * showChangeOwnPasswordDialog() and showChangeUserPasswordAsAdminDialog() show this form as dialog.\n */\nexport class PasswordForm implements Component<PasswordFormAttrs> {\n\tview({ attrs }: Vnode<PasswordFormAttrs>): Children {\n\t\treturn m(\n\t\t\t\"\",\n\t\t\t{\n\t\t\t\tonremove: () => attrs.model.clear(),\n\t\t\t},\n\t\t\t[\n\t\t\t\tattrs.model.config.checkOldPassword\n\t\t\t\t\t? m(PasswordField, {\n\t\t\t\t\t\t\tlabel: \"oldPassword_label\",\n\t\t\t\t\t\t\tvalue: attrs.model.getOldPassword(),\n\t\t\t\t\t\t\tstatus: attrs.model.getOldPasswordStatus(),\n\t\t\t\t\t\t\toninput: (input) => attrs.model.setOldPassword(input),\n\t\t\t\t\t\t\tautocompleteAs: Autocomplete.currentPassword,\n\t\t\t\t\t\t\tfontSize: px(size.font_size_smaller),\n\t\t\t\t\t  } satisfies PasswordFieldAttrs)\n\t\t\t\t\t: null,\n\t\t\t\tm(PasswordField, {\n\t\t\t\t\tlabel: \"newPassword_label\",\n\t\t\t\t\tvalue: attrs.model.getNewPassword(),\n\t\t\t\t\tpasswordStrength: attrs.model.getPasswordStrength(),\n\t\t\t\t\thelpLabel: () => this.renderPasswordGeneratorHelp(attrs),\n\t\t\t\t\tstatus: attrs.model.getNewPasswordStatus(),\n\t\t\t\t\toninput: (input) => attrs.model.setNewPassword(input),\n\t\t\t\t\tautocompleteAs: Autocomplete.newPassword,\n\t\t\t\t\tfontSize: px(size.font_size_smaller),\n\t\t\t\t}),\n\t\t\t\tattrs.model.config.hideConfirmation\n\t\t\t\t\t? null\n\t\t\t\t\t: m(PasswordField, {\n\t\t\t\t\t\t\tlabel: \"repeatedPassword_label\",\n\t\t\t\t\t\t\tvalue: attrs.model.getRepeatedPassword(),\n\t\t\t\t\t\t\tautocompleteAs: Autocomplete.newPassword,\n\t\t\t\t\t\t\tstatus: attrs.model.getRepeatedPasswordStatus(),\n\t\t\t\t\t\t\toninput: (input) => attrs.model.setRepeatedPassword(input),\n\t\t\t\t\t\t\tfontSize: px(size.font_size_smaller),\n\t\t\t\t\t  }),\n\t\t\t\tattrs.passwordInfoKey ? m(\".small.mt-s\", lang.get(attrs.passwordInfoKey)) : null,\n\t\t\t],\n\t\t)\n\t}\n\n\tprivate renderPasswordGeneratorHelp(attrs: PasswordFormAttrs): Children {\n\t\treturn m(\n\t\t\t\"button.b.mr-xs.hover.click.darkest-hover.mt-xs\",\n\t\t\t{\n\t\t\t\tstyle: { display: \"inline-block\", color: theme.navigation_button_selected },\n\t\t\t\tonclick: async () => {\n\t\t\t\t\tattrs.model.setNewPassword(await showPasswordGeneratorDialog())\n\t\t\t\t\tm.redraw()\n\t\t\t\t},\n\t\t\t},\n\t\t\tlang.get(\"generatePassphrase_action\"),\n\t\t)\n\t}\n}\n"],"mappings":"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"}