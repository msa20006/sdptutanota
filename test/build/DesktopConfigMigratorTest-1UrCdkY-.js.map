{"version":3,"file":"DesktopConfigMigratorTest-1UrCdkY-.js","names":["migrate","oldConfig: Config","migrateClient","migrateAdmin","migrate","oldConfig: Config","migrateClient","migrateAdmin","migrate","oldConfig: Config","migrateClient","migrateAdmin","migrate","oldConfig: Config","crypto: DesktopNativeCryptoFacade","keyStoreFacade: DesktopKeyStoreFacade","migrateClient","migrateAdmin","oldConfig: Config","migrateClient","migrateAdmin","oldConfig: Config","electron: ElectronExports","migrateClient","migrateAdmin","migrate","oldConfig: Config","migrateClient","migrateAdmin","migrate","oldConfig: Config","migrateClient","migrateAdmin","oldConfig: Config","migrateClient","migrateAdmin","migrateClient: ConfigMigration","oldConfig: Config","migrateAdmin: ConfigMigration","crypto: DesktopNativeCryptoFacade","keyStoreFacade: DesktopKeyStoreFacade","electron: ElectronExports","migrationFunction: MigrationKind","oldConfig: Config","migration0000","migration0001","migration0002","migration0004","migration0006","migration0007","migration0008","migration0009","migration: ConfigMigration","config: Config","crypto: DesktopNativeCryptoFacade","keyStoreFacade: DesktopKeyStoreFacade"],"sources":["../../src/common/desktop/config/migrations/migration-0000.ts","../../src/common/desktop/config/migrations/migration-0001.ts","../../src/common/desktop/config/migrations/migration-0002.ts","../../src/common/desktop/config/migrations/migration-0003.ts","../../src/common/desktop/config/migrations/migration-0004.ts","../../src/common/desktop/config/migrations/migration-0005.ts","../../src/common/desktop/config/migrations/migration-0006.ts","../../src/common/desktop/config/migrations/migration-0007.ts","../../src/common/desktop/config/migrations/migration-0008.ts","../../src/common/desktop/config/migrations/migration-0009.ts","../../src/common/desktop/config/migrations/DesktopConfigMigrator.ts","../tests/desktop/config/migrations/DesktopConfigMigratorTest.ts"],"sourcesContent":["import type { Config } from \"../ConfigCommon\"\n\nasync function migrate(oldConfig: Config): Promise<void> {\n\tObject.assign(oldConfig, {\n\t\tdesktopConfigVersion: 0,\n\t})\n}\n\nexport const migrateClient = migrate\nexport const migrateAdmin = migrate\n","import type { Config } from \"../ConfigCommon\"\n\nasync function migrate(oldConfig: Config): Promise<void> {\n\tObject.assign(oldConfig, {\n\t\tdesktopConfigVersion: 1,\n\t\tshowAutoUpdateOption: true,\n\t})\n}\n\nexport const migrateClient = migrate\nexport const migrateAdmin = migrate\n","import type { Config } from \"../ConfigCommon\"\n\nasync function migrate(oldConfig: Config): Promise<void> {\n\tObject.assign(oldConfig, {\n\t\tdesktopConfigVersion: 2,\n\t\tmailExportMode: process.platform === \"win32\" ? \"msg\" : \"eml\",\n\t})\n}\n\nexport const migrateClient = migrate\nexport const migrateAdmin = migrate\n","import { DesktopNativeCryptoFacade } from \"../../DesktopNativeCryptoFacade\"\nimport type { Config } from \"../ConfigCommon\"\nimport { downcast } from \"@tutao/tutanota-utils\"\nimport type { DesktopKeyStoreFacade } from \"../../DesktopKeyStoreFacade.js\"\nimport { log } from \"../../DesktopLog\"\n\nasync function migrate(oldConfig: Config, crypto: DesktopNativeCryptoFacade, keyStoreFacade: DesktopKeyStoreFacade): Promise<void> {\n\tObject.assign(oldConfig, {\n\t\tdesktopConfigVersion: 3,\n\t})\n\n\tif (oldConfig.pushIdentifier) {\n\t\ttry {\n\t\t\tconst deviceKey = await keyStoreFacade.getDeviceKey()\n\t\t\tObject.assign(oldConfig, {\n\t\t\t\tsseInfo: crypto.aesEncryptObject(deviceKey, downcast(oldConfig.pushIdentifier)),\n\t\t\t})\n\t\t} catch (e) {\n\t\t\t// cannot read device key, just remove sseInfo from old config\n\t\t\tlog.warn(\"migration003: could not read device key, will not save sseInfo\", e)\n\t\t}\n\n\t\tdelete oldConfig.pushIdentifier\n\t}\n}\n\nexport const migrateClient = migrate\nexport const migrateAdmin = migrate\n","import type { Config } from \"../ConfigCommon\"\n\nasync function migrateSpellcheckTrue(oldConfig: Config): Promise<void> {\n\tObject.assign(oldConfig, {\n\t\tdesktopConfigVersion: 4,\n\t\tspellcheck: true,\n\t})\n}\n\nasync function migrateSpellcheckFalse(oldConfig: Config): Promise<void> {\n\tObject.assign(oldConfig, {\n\t\tdesktopConfigVersion: 4,\n\t\tspellcheck: false,\n\t})\n}\n\nexport const migrateClient = migrateSpellcheckTrue\nexport const migrateAdmin = migrateSpellcheckFalse\n","import type { Config } from \"../ConfigCommon\"\nimport type { ElectronExports } from \"./DesktopConfigMigrator\"\n\nasync function migrateSpellcheck(oldConfig: Config, electron: ElectronExports): Promise<void> {\n\tconst currentLang = electron.session.defaultSession.getSpellCheckerLanguages()[0]\n\tconst spellcheckActivated = oldConfig.spellcheck === true\n\tObject.assign(oldConfig, {\n\t\tdesktopConfigVersion: 5,\n\t\tspellcheck: spellcheckActivated && currentLang ? currentLang : \"\",\n\t})\n}\n\nexport const migrateClient = migrateSpellcheck\nexport const migrateAdmin = migrateSpellcheck\n","import type { Config } from \"../ConfigCommon\"\n\nasync function migrate(oldConfig: Config): Promise<void> {\n\tObject.assign(oldConfig, {\n\t\tdesktopConfigVersion: 6,\n\t\tofflineStorageEnabled: false,\n\t})\n}\n\nexport const migrateClient = migrate\nexport const migrateAdmin = migrate\n","import type { Config } from \"../ConfigCommon\"\nimport { DesktopConfigKey } from \"../ConfigKeys.js\"\nimport { WindowBounds } from \"../../DesktopWindowManager.js\"\n\nconst newDefault = {\n\trect: {\n\t\tx: 200,\n\t\ty: 200,\n\t\twidth: 1200,\n\t\theight: 700,\n\t},\n\tfullscreen: false,\n\tscale: 1,\n}\n\nasync function migrate(oldConfig: Config): Promise<void> {\n\t// only migrate those that\n\t// * have the old default size\n\t// * don't have a value set (first run)\n\tlet oldBounds = oldConfig[DesktopConfigKey.lastBounds] as WindowBounds\n\tif (oldBounds == null) {\n\t\toldBounds = newDefault\n\t} else if (oldBounds.rect.width === 800 && oldBounds.rect.height === 600) {\n\t\toldBounds.rect.width = newDefault.rect.width\n\t\toldBounds.rect.height = newDefault.rect.height\n\t}\n\tObject.assign(oldConfig, {\n\t\tlastBounds: oldBounds,\n\t\tdesktopConfigVersion: 7,\n\t})\n}\n\nexport const migrateClient = migrate\nexport const migrateAdmin = migrate\n","import type { Config } from \"../ConfigCommon\"\nimport { DesktopConfigKey } from \"../ConfigKeys.js\"\n\n/** add the appPin default value to the config */\nasync function migrate(oldConfig: Config): Promise<void> {\n\tObject.assign(oldConfig, {\n\t\tdesktopConfigVersion: 8,\n\t\t[DesktopConfigKey.appPassSalt]: null,\n\t})\n}\n\nexport const migrateClient = migrate\nexport const migrateAdmin = migrate\n","import type { Config, ConfigMigration } from \"../ConfigCommon\"\nimport { DesktopConfigKey } from \"../ConfigKeys.js\"\n\nexport const migrateClient: ConfigMigration = async function (oldConfig: Config): Promise<void> {\n\tObject.assign(oldConfig, {\n\t\tdesktopConfigVersion: 9,\n\t\t[DesktopConfigKey.mailboxExportState]: {},\n\t})\n}\nexport const migrateAdmin: ConfigMigration = async (oldConfig: Config) => {\n\tObject.assign(oldConfig, {\n\t\tdesktopConfigVersion: 9,\n\t})\n}\n","import { log } from \"../../DesktopLog\"\n\n/**\n * Should not import them all manually but we need make the whole thing async then.\n */\nimport * as migration0000 from \"./migration-0000\"\nimport * as migration0001 from \"./migration-0001\"\nimport * as migration0002 from \"./migration-0002\"\nimport * as migration0003 from \"./migration-0003\"\nimport * as migration0004 from \"./migration-0004\"\nimport * as migration0005 from \"./migration-0005\"\nimport * as migration0006 from \"./migration-0006\"\nimport * as migration0007 from \"./migration-0007\"\nimport * as migration0008 from \"./migration-0008\"\nimport * as migration0009 from \"./migration-0009\"\n\nimport type { Config, ConfigMigration } from \"../ConfigCommon\"\nimport { DesktopNativeCryptoFacade } from \"../../DesktopNativeCryptoFacade\"\nimport type { DesktopKeyStoreFacade } from \"../../DesktopKeyStoreFacade.js\"\n\nexport type MigrationKind = \"migrateClient\" | \"migrateAdmin\"\nexport type ElectronExports = typeof Electron.CrossProcessExports\n\nexport class DesktopConfigMigrator {\n\treadonly crypto: DesktopNativeCryptoFacade\n\t_keyStoreFacade: DesktopKeyStoreFacade\n\t_electron: ElectronExports\n\n\tconstructor(crypto: DesktopNativeCryptoFacade, keyStoreFacade: DesktopKeyStoreFacade, electron: ElectronExports) {\n\t\tthis.crypto = crypto\n\t\tthis._keyStoreFacade = keyStoreFacade\n\t\tthis._electron = electron\n\t}\n\n\tasync applyMigrations(migrationFunction: MigrationKind, oldConfig: Config): Promise<Config> {\n\t\t// noinspection FallThroughInSwitchStatementJS\n\t\tswitch (oldConfig.desktopConfigVersion) {\n\t\t\tcase undefined:\n\t\t\t\tawait applyMigration(migration0000[migrationFunction], oldConfig)\n\n\t\t\t// no break, fallthrough applies all migrations in sequence\n\t\t\tcase 0:\n\t\t\t\tawait applyMigration(migration0001[migrationFunction], oldConfig)\n\t\t\t// falls through\n\n\t\t\tcase 1:\n\t\t\t\tawait applyMigration(migration0002[migrationFunction], oldConfig)\n\t\t\t// falls through\n\n\t\t\tcase 2:\n\t\t\t\tawait applyMigration((config) => migration0003[migrationFunction](config, this.crypto, this._keyStoreFacade), oldConfig)\n\t\t\t// falls through\n\n\t\t\tcase 3:\n\t\t\t\tawait applyMigration(migration0004[migrationFunction], oldConfig)\n\t\t\t// falls through\n\n\t\t\tcase 4:\n\t\t\t\tawait applyMigration((config) => migration0005[migrationFunction](config, this._electron), oldConfig)\n\t\t\t// falls through\n\n\t\t\tcase 5:\n\t\t\t\tawait applyMigration(migration0006[migrationFunction], oldConfig)\n\t\t\t// falls through\n\n\t\t\tcase 6:\n\t\t\t\tawait applyMigration(migration0007[migrationFunction], oldConfig)\n\t\t\t// falls through\n\n\t\t\tcase 7:\n\t\t\t\tawait applyMigration(migration0008[migrationFunction], oldConfig)\n\t\t\t// falls through\n\n\t\t\tcase 8:\n\t\t\t\tawait applyMigration(migration0009[migrationFunction], oldConfig)\n\t\t\t// falls through\n\t\t\tcase 9:\n\t\t\t\tlog.debug(\"config up to date\")\n\t\t\t\t/* add new migrations as needed */\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`unknown config version ${String(oldConfig.desktopConfigVersion)}`)\n\t\t}\n\n\t\treturn oldConfig\n\t}\n}\n\n/**\n * @param migration name of the function to use for migration\n * @param config default config to use if oldConfig is invalid\n */\nasync function applyMigration(migration: ConfigMigration, config: Config) {\n\tconst oldVersion = Object.freeze(config.desktopConfigVersion)\n\tawait migration(config)\n\tconst newVersion = config.desktopConfigVersion\n\n\tif (newVersion === undefined || Number(oldVersion) >= Number(newVersion)) {\n\t\tconsole.error(\"config migration did not increment desktopConfigVersion! aborting.\")\n\t\tprocess.exit(1)\n\t}\n}\n","import o from \"@tutao/otest\"\nimport { DesktopConfigMigrator } from \"../../../../../src/common/desktop/config/migrations/DesktopConfigMigrator.js\"\nimport { DesktopNativeCryptoFacade } from \"../../../../../src/common/desktop/DesktopNativeCryptoFacade.js\"\nimport { downcast } from \"@tutao/tutanota-utils\"\nimport { makeKeyStoreFacade } from \"../../../TestUtils.js\"\nimport { DesktopKeyStoreFacade } from \"../../../../../src/common/desktop/DesktopKeyStoreFacade.js\"\nimport { DesktopConfigEncKey, DesktopConfigKey } from \"../../../../../src/common/desktop/config/ConfigKeys.js\"\n\no.spec(\"DesktopConfigMigrator\", function () {\n\tlet migrator\n\tlet crypto: DesktopNativeCryptoFacade\n\tlet keyStoreFacade: DesktopKeyStoreFacade\n\tconst key = new Uint8Array([1, 2, 3])\n\n\to.before(function () {\n\t\tcrypto = downcast({\n\t\t\taesEncryptObject: (encryptionKey, object) => {\n\t\t\t\treturn JSON.stringify(object)\n\t\t\t},\n\t\t})\n\n\t\tconst electron = downcast({\n\t\t\tsession: {\n\t\t\t\tdefaultSession: {\n\t\t\t\t\tgetSpellCheckerLanguages: () => [\"de-DE\"],\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\n\t\tkeyStoreFacade = makeKeyStoreFacade(key)\n\t\tmigrator = new DesktopConfigMigrator(crypto, keyStoreFacade, electron)\n\t})\n\to(\"migrations result in correct default config, client\", async function () {\n\t\tconst oldConfig = {\n\t\t\theartbeatTimeoutInSeconds: 30,\n\t\t\tdefaultDownloadPath: null,\n\t\t\tenableAutoUpdate: true,\n\t\t\trunAsTrayApp: true,\n\t\t\tdesktopConfigVersion: 1,\n\t\t\tshowAutoUpdateOption: true,\n\t\t\tpushIdentifier: {\n\t\t\t\tidentifier: \"some identifier\",\n\t\t\t\tsseOrigin: \"some orign\",\n\t\t\t\tuserIds: [\"userId1\", \"userId2\"],\n\t\t\t},\n\t\t}\n\n\t\tconst requiredResult = {\n\t\t\theartbeatTimeoutInSeconds: 30,\n\t\t\tdefaultDownloadPath: null,\n\t\t\tenableAutoUpdate: true,\n\t\t\trunAsTrayApp: true,\n\t\t\tdesktopConfigVersion: 9,\n\t\t\tshowAutoUpdateOption: true,\n\t\t\tspellcheck: \"de-DE\",\n\t\t\tofflineStorageEnabled: false,\n\t\t\tmailExportMode: \"eml\",\n\t\t\tsseInfo: JSON.stringify(oldConfig.pushIdentifier),\n\t\t\tlastBounds: {\n\t\t\t\trect: { x: 200, y: 200, width: 1200, height: 700 },\n\t\t\t\tfullscreen: false,\n\t\t\t\tscale: 1,\n\t\t\t},\n\t\t\tappPassSalt: null,\n\t\t\t[DesktopConfigKey.mailboxExportState]: {},\n\t\t}\n\n\t\to(await migrator.applyMigrations(\"migrateClient\", oldConfig)).deepEquals(requiredResult)\n\t})\n\n\to(\"migrations result in correct default config, admin\", async function () {\n\t\tconst oldConfig = {\n\t\t\trunAsTrayApp: true,\n\t\t}\n\t\tconst requiredResult = {\n\t\t\tappPassSalt: null,\n\t\t\trunAsTrayApp: true,\n\t\t\tdesktopConfigVersion: 9,\n\t\t\tshowAutoUpdateOption: true,\n\t\t\tmailExportMode: \"eml\",\n\t\t\tspellcheck: \"\",\n\t\t\tofflineStorageEnabled: false,\n\t\t\tlastBounds: {\n\t\t\t\trect: { x: 200, y: 200, width: 1200, height: 700 },\n\t\t\t\tfullscreen: false,\n\t\t\t\tscale: 1,\n\t\t\t},\n\t\t}\n\n\t\to(await migrator.applyMigrations(\"migrateAdmin\", oldConfig)).deepEquals(requiredResult)\n\t})\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,eAAeA,UAAQC,WAAkC;AACxD,QAAO,OAAO,WAAW,EACxB,sBAAsB,EACtB,EAAC;AACF;MAEYC,kBAAgBF;MAChBG,iBAAeH;;;;;;;;;ACP5B,eAAeI,UAAQC,WAAkC;AACxD,QAAO,OAAO,WAAW;EACxB,sBAAsB;EACtB,sBAAsB;CACtB,EAAC;AACF;MAEYC,kBAAgBF;MAChBG,iBAAeH;;;;;;;;;ACR5B,eAAeI,UAAQC,WAAkC;AACxD,QAAO,OAAO,WAAW;EACxB,sBAAsB;EACtB,gBAAgB,QAAQ,aAAa,UAAU,QAAQ;CACvD,EAAC;AACF;MAEYC,kBAAgBF;MAChBG,iBAAeH;;;;;;;;;ACJ5B,eAAeI,UAAQC,WAAmBC,QAAmCC,gBAAsD;AAClI,QAAO,OAAO,WAAW,EACxB,sBAAsB,EACtB,EAAC;AAEF,KAAI,UAAU,gBAAgB;AAC7B,MAAI;GACH,MAAM,YAAY,MAAM,eAAe,cAAc;AACrD,UAAO,OAAO,WAAW,EACxB,SAAS,OAAO,iBAAiB,WAAW,SAAS,UAAU,eAAe,CAAC,CAC/E,EAAC;EACF,SAAQ,GAAG;AAEX,OAAI,KAAK,kEAAkE,EAAE;EAC7E;AAED,SAAO,UAAU;CACjB;AACD;MAEYC,kBAAgBJ;MAChBK,iBAAeL;;;;;;;;;ACzB5B,eAAe,sBAAsBM,WAAkC;AACtE,QAAO,OAAO,WAAW;EACxB,sBAAsB;EACtB,YAAY;CACZ,EAAC;AACF;AAED,eAAe,uBAAuBA,WAAkC;AACvE,QAAO,OAAO,WAAW;EACxB,sBAAsB;EACtB,YAAY;CACZ,EAAC;AACF;MAEYC,kBAAgB;MAChBC,iBAAe;;;;;;;;;ACd5B,eAAe,kBAAkBC,WAAmBC,UAA0C;CAC7F,MAAM,cAAc,SAAS,QAAQ,eAAe,0BAA0B,CAAC;CAC/E,MAAM,sBAAsB,UAAU,eAAe;AACrD,QAAO,OAAO,WAAW;EACxB,sBAAsB;EACtB,YAAY,uBAAuB,cAAc,cAAc;CAC/D,EAAC;AACF;MAEYC,kBAAgB;MAChBC,iBAAe;;;;;;;;;ACX5B,eAAeC,UAAQC,WAAkC;AACxD,QAAO,OAAO,WAAW;EACxB,sBAAsB;EACtB,uBAAuB;CACvB,EAAC;AACF;MAEYC,kBAAgBF;MAChBG,iBAAeH;;;;;;;;;ACN5B,MAAM,aAAa;CAClB,MAAM;EACL,GAAG;EACH,GAAG;EACH,OAAO;EACP,QAAQ;CACR;CACD,YAAY;CACZ,OAAO;AACP;AAED,eAAeI,UAAQC,WAAkC;CAIxD,IAAI,YAAY,UAAU,iBAAiB;AAC3C,KAAI,aAAa,KAChB,aAAY;SACF,UAAU,KAAK,UAAU,OAAO,UAAU,KAAK,WAAW,KAAK;AACzE,YAAU,KAAK,QAAQ,WAAW,KAAK;AACvC,YAAU,KAAK,SAAS,WAAW,KAAK;CACxC;AACD,QAAO,OAAO,WAAW;EACxB,YAAY;EACZ,sBAAsB;CACtB,EAAC;AACF;MAEYC,kBAAgBF;MAChBG,iBAAeH;;;;;;;;;;AC7B5B,eAAe,QAAQI,WAAkC;AACxD,QAAO,OAAO,WAAW;EACxB,sBAAsB;GACrB,iBAAiB,cAAc;CAChC,EAAC;AACF;MAEYC,kBAAgB;MAChBC,iBAAe;;;;;;;;;MCTfC,gBAAiC,eAAgBC,WAAkC;AAC/F,QAAO,OAAO,WAAW;EACxB,sBAAsB;GACrB,iBAAiB,qBAAqB,CAAE;CACzC,EAAC;AACF;MACYC,eAAgC,OAAOD,cAAsB;AACzE,QAAO,OAAO,WAAW,EACxB,sBAAsB,EACtB,EAAC;AACF;;;;ICUY,wBAAN,MAA4B;CAClC,AAAS;CACT;CACA;CAEA,YAAYE,QAAmCC,gBAAuCC,UAA2B;AAChH,OAAK,SAAS;AACd,OAAK,kBAAkB;AACvB,OAAK,YAAY;CACjB;CAED,MAAM,gBAAgBC,mBAAkCC,WAAoC;AAE3F,UAAQ,UAAU,sBAAlB;AACC,QAAK,UACJ,OAAM,eAAeC,uBAAc,oBAAoB,UAAU;AAGlE,QAAK,EACJ,OAAM,eAAeC,uBAAc,oBAAoB,UAAU;AAGlE,QAAK,EACJ,OAAM,eAAeC,uBAAc,oBAAoB,UAAU;AAGlE,QAAK,EACJ,OAAM,eAAe,CAAC,WAAW,uBAAc,mBAAmB,QAAQ,KAAK,QAAQ,KAAK,gBAAgB,EAAE,UAAU;AAGzH,QAAK,EACJ,OAAM,eAAeC,uBAAc,oBAAoB,UAAU;AAGlE,QAAK,EACJ,OAAM,eAAe,CAAC,WAAW,uBAAc,mBAAmB,QAAQ,KAAK,UAAU,EAAE,UAAU;AAGtG,QAAK,EACJ,OAAM,eAAeC,uBAAc,oBAAoB,UAAU;AAGlE,QAAK,EACJ,OAAM,eAAeC,uBAAc,oBAAoB,UAAU;AAGlE,QAAK,EACJ,OAAM,eAAeC,uBAAc,oBAAoB,UAAU;AAGlE,QAAK,EACJ,OAAM,eAAeC,uBAAc,oBAAoB,UAAU;AAElE,QAAK;AACJ,QAAI,MAAM,oBAAoB;AAE9B;AACD,WACC,OAAM,IAAI,OAAO,yBAAyB,OAAO,UAAU,qBAAqB,CAAC;EAClF;AAED,SAAO;CACP;AACD;;;;;AAMD,eAAe,eAAeC,WAA4BC,QAAgB;CACzE,MAAM,aAAa,OAAO,OAAO,OAAO,qBAAqB;AAC7D,OAAM,UAAU,OAAO;CACvB,MAAM,aAAa,OAAO;AAE1B,KAAI,eAAe,aAAa,OAAO,WAAW,IAAI,OAAO,WAAW,EAAE;AACzE,UAAQ,MAAM,qEAAqE;AACnF,UAAQ,KAAK,EAAE;CACf;AACD;;;;AC7FD,aAAE,KAAK,yBAAyB,WAAY;CAC3C,IAAI;CACJ,IAAIC;CACJ,IAAIC;CACJ,MAAM,MAAM,IAAI,WAAW;EAAC;EAAG;EAAG;CAAE;AAEpC,cAAE,OAAO,WAAY;AACpB,WAAS,SAAS,EACjB,kBAAkB,CAAC,eAAe,WAAW;AAC5C,UAAO,KAAK,UAAU,OAAO;EAC7B,EACD,EAAC;EAEF,MAAM,WAAW,SAAS,EACzB,SAAS,EACR,gBAAgB,EACf,0BAA0B,MAAM,CAAC,OAAQ,EACzC,EACD,EACD,EAAC;AAEF,mBAAiB,mBAAmB,IAAI;AACxC,aAAW,IAAI,sBAAsB,QAAQ,gBAAgB;CAC7D,EAAC;AACF,cAAE,uDAAuD,iBAAkB;EAC1E,MAAM,YAAY;GACjB,2BAA2B;GAC3B,qBAAqB;GACrB,kBAAkB;GAClB,cAAc;GACd,sBAAsB;GACtB,sBAAsB;GACtB,gBAAgB;IACf,YAAY;IACZ,WAAW;IACX,SAAS,CAAC,WAAW,SAAU;GAC/B;EACD;EAED,MAAM,iBAAiB;GACtB,2BAA2B;GAC3B,qBAAqB;GACrB,kBAAkB;GAClB,cAAc;GACd,sBAAsB;GACtB,sBAAsB;GACtB,YAAY;GACZ,uBAAuB;GACvB,gBAAgB;GAChB,SAAS,KAAK,UAAU,UAAU,eAAe;GACjD,YAAY;IACX,MAAM;KAAE,GAAG;KAAK,GAAG;KAAK,OAAO;KAAM,QAAQ;IAAK;IAClD,YAAY;IACZ,OAAO;GACP;GACD,aAAa;IACZ,iBAAiB,qBAAqB,CAAE;EACzC;AAED,eAAE,MAAM,SAAS,gBAAgB,iBAAiB,UAAU,CAAC,CAAC,WAAW,eAAe;CACxF,EAAC;AAEF,cAAE,sDAAsD,iBAAkB;EACzE,MAAM,YAAY,EACjB,cAAc,KACd;EACD,MAAM,iBAAiB;GACtB,aAAa;GACb,cAAc;GACd,sBAAsB;GACtB,sBAAsB;GACtB,gBAAgB;GAChB,YAAY;GACZ,uBAAuB;GACvB,YAAY;IACX,MAAM;KAAE,GAAG;KAAK,GAAG;KAAK,OAAO;KAAM,QAAQ;IAAK;IAClD,YAAY;IACZ,OAAO;GACP;EACD;AAED,eAAE,MAAM,SAAS,gBAAgB,gBAAgB,UAAU,CAAC,CAAC,WAAW,eAAe;CACvF,EAAC;AACF,EAAC"}