{"version":3,"file":"OfflineStorageMigratorTest-pSLHsQnf.js","names":["modelInfos: ModelInfos","migrations: OfflineMigration[]","migrator: OfflineStorageMigrator","storage: OfflineStorage","sqlCipherFacade: SqlCipherFacade","migration: OfflineMigration"],"sources":["../tests/api/worker/offline/OfflineStorageMigratorTest.ts"],"sourcesContent":["import o from \"@tutao/otest\"\nimport { OfflineMigration, OfflineStorageMigrator } from \"../../../../../src/common/api/worker/offline/OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../../../../../src/common/api/worker/offline/OfflineStorage.js\"\nimport { func, instance, matchers, object, when } from \"testdouble\"\nimport { assertThrows, verify } from \"@tutao/tutanota-test-utils\"\nimport { ModelInfos } from \"../../../../../src/common/api/common/EntityFunctions.js\"\nimport { typedEntries } from \"@tutao/tutanota-utils\"\nimport { ProgrammingError } from \"../../../../../src/common/api/common/error/ProgrammingError.js\"\nimport { SqlCipherFacade } from \"../../../../../src/common/native/common/generatedipc/SqlCipherFacade.js\"\nimport { OutOfSyncError } from \"../../../../../src/common/api/common/error/OutOfSyncError.js\"\n\no.spec(\"OfflineStorageMigrator\", function () {\n\tconst modelInfos: ModelInfos = {\n\t\tbase: {\n\t\t\tversion: 1,\n\t\t\tcompatibleSince: 0,\n\t\t},\n\t\tsys: {\n\t\t\tversion: 1,\n\t\t\tcompatibleSince: 0,\n\t\t},\n\t\ttutanota: {\n\t\t\tversion: 42,\n\t\t\tcompatibleSince: 41,\n\t\t},\n\t\tstorage: {\n\t\t\tversion: 1,\n\t\t\tcompatibleSince: 0,\n\t\t},\n\t\taccounting: {\n\t\t\tversion: 1,\n\t\t\tcompatibleSince: 0,\n\t\t},\n\t\tgossip: {\n\t\t\tversion: 1,\n\t\t\tcompatibleSince: 0,\n\t\t},\n\t\tmonitor: {\n\t\t\tversion: 1,\n\t\t\tcompatibleSince: 0,\n\t\t},\n\t\tusage: {\n\t\t\tversion: 1,\n\t\t\tcompatibleSince: 0,\n\t\t},\n\t}\n\tlet migrations: OfflineMigration[]\n\tlet migrator: OfflineStorageMigrator\n\tlet storage: OfflineStorage\n\tlet sqlCipherFacade: SqlCipherFacade\n\n\to.beforeEach(function () {\n\t\tmigrations = []\n\t\tstorage = instance(OfflineStorage)\n\t\tmigrator = new OfflineStorageMigrator(migrations, modelInfos)\n\t\tsqlCipherFacade = object()\n\t})\n\n\to(\"when there's an empty database the current model versions are written\", async function () {\n\t\twhen(storage.dumpMetadata()).thenResolve({})\n\n\t\tawait migrator.migrate(storage, sqlCipherFacade)\n\n\t\tfor (const [app, data] of typedEntries(modelInfos)) {\n\t\t\tverify(storage.setStoredModelVersion(app, data.version))\n\t\t}\n\t})\n\n\to(\"when the model version is written it is not overwritten\", async function () {\n\t\twhen(storage.dumpMetadata()).thenResolve({ \"tutanota-version\": 42 })\n\n\t\tawait migrator.migrate(storage, sqlCipherFacade)\n\n\t\tverify(storage.setStoredModelVersion(\"tutanota\", matchers.anything()), { times: 0 })\n\t})\n\n\to(\"when migration exists and it the version is incompatible the migration is run\", async function () {\n\t\t// stored is older than current so we actually \"migrate\" something\n\t\twhen(storage.dumpMetadata()).thenResolve({ \"tutanota-version\": 40 }, { \"tutanota-version\": 42 })\n\t\tconst migration: OfflineMigration = {\n\t\t\tapp: \"tutanota\",\n\t\t\tversion: 42,\n\t\t\tmigrate: func() as OfflineMigration[\"migrate\"],\n\t\t}\n\t\tmigrations.push(migration)\n\n\t\tawait migrator.migrate(storage, sqlCipherFacade)\n\n\t\tverify(migration.migrate(storage, sqlCipherFacade))\n\t\tverify(storage.setStoredModelVersion(\"tutanota\", 42))\n\t})\n\n\to(\"when migration is missing and the version is incompatible it throws\", async function () {\n\t\t// stored is older than current so we actually \"migrate\" something\n\t\twhen(storage.dumpMetadata()).thenResolve({ \"tutanota-version\": 40 })\n\n\t\tawait assertThrows(ProgrammingError, () => migrator.migrate(storage, sqlCipherFacade))\n\n\t\tverify(storage.setStoredModelVersion(\"tutanota\", matchers.anything()), { times: 0 })\n\t})\n\n\to(\"when the stored version is newer than the runtime version throw OutOfSyncError\", async function () {\n\t\t// stored is new than the current\n\t\tconst currentModelVersion = modelInfos.tutanota.version\n\t\twhen(storage.dumpMetadata()).thenResolve({ \"tutanota-version\": currentModelVersion + 1 })\n\t\tconst migration: OfflineMigration = {\n\t\t\tapp: \"tutanota\",\n\t\t\tversion: modelInfos.tutanota.compatibleSince,\n\t\t\tmigrate: func() as OfflineMigration[\"migrate\"],\n\t\t}\n\t\tmigrations.push(migration)\n\t\tawait assertThrows(OutOfSyncError, () => migrator.migrate(storage, sqlCipherFacade))\n\n\t\tverify(migration.migrate(storage, sqlCipherFacade), { times: 0 })\n\t\tverify(storage.setStoredModelVersion(\"tutanota\", matchers.anything()), { times: 0 })\n\t})\n})\n"],"mappings":"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"}