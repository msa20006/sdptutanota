{"version":3,"file":"DesktopIntegratorTest-Cx6s6-Er.js","names":["electron: ElectronExports","fs: FsExports","childProcess: ChildProcessExports","_winreg: () => Promise<WinregExports>","DesktopIntegratorWin32","DesktopIntegratorDarwin","DesktopIntegratorLinux","en","itemToReturn: string | undefined"],"sources":["../../src/common/desktop/integration/DesktopIntegrator.ts","../tests/desktop/integration/DesktopIntegratorTest.ts"],"sourcesContent":["import type { WindowManager } from \"../DesktopWindowManager\"\nimport type { ChildProcessExports, ElectronExports, FsExports, WinregExports } from \"../ElectronExportTypes\"\n\nexport interface DesktopIntegrator {\n\treadonly enableAutoLaunch: () => Promise<void>\n\treadonly disableAutoLaunch: () => Promise<void>\n\treadonly isAutoLaunchEnabled: () => Promise<boolean>\n\treadonly runIntegration: (wm: WindowManager) => Promise<void>\n\treadonly isIntegrated: () => Promise<boolean>\n\treadonly integrate: () => Promise<void>\n\treadonly unintegrate: () => Promise<void>\n}\n\nexport async function getDesktopIntegratorForPlatform(\n\telectron: ElectronExports,\n\tfs: FsExports,\n\tchildProcess: ChildProcessExports,\n\t_winreg: () => Promise<WinregExports>,\n): Promise<DesktopIntegrator> {\n\tswitch (process.platform) {\n\t\tcase \"win32\": {\n\t\t\tconst { DesktopIntegratorWin32 } = await import(\"./DesktopIntegratorWin32\")\n\t\t\tconst winreg = await _winreg()\n\t\t\treturn new DesktopIntegratorWin32(electron, winreg.default)\n\t\t}\n\n\t\tcase \"darwin\": {\n\t\t\tconst { DesktopIntegratorDarwin } = await import(\"./DesktopIntegratorDarwin.js\")\n\t\t\treturn new DesktopIntegratorDarwin(electron)\n\t\t}\n\n\t\tcase \"linux\": {\n\t\t\tconst { DesktopIntegratorLinux } = await import(\"./DesktopIntegratorLinux\")\n\t\t\treturn new DesktopIntegratorLinux(electron, fs, childProcess)\n\t\t}\n\n\t\tdefault:\n\t\t\treturn Promise.reject(new Error(\"Invalid Platform\"))\n\t}\n}\n","import o from \"@tutao/otest\"\nimport n from \"../../nodemocker.js\"\nimport { getDesktopIntegratorForPlatform } from \"../../../../src/common/desktop/integration/DesktopIntegrator.js\"\nimport { downcast } from \"@tutao/tutanota-utils\"\nimport type { WindowManager } from \"../../../../src/common/desktop/DesktopWindowManager.js\"\nimport { lang } from \"../../../../src/common/misc/LanguageViewModel.js\"\nimport en from \"../../../../src/mail-app/translations/en.js\"\nimport { DesktopIntegratorLinux } from \"../../../../src/common/desktop/integration/DesktopIntegratorLinux.js\"\nimport { DesktopIntegratorDarwin } from \"../../../../src/common/desktop/integration/DesktopIntegratorDarwin.js\"\nimport { DesktopIntegratorWin32 } from \"../../../../src/common/desktop/integration/DesktopIntegratorWin32.js\"\nimport { spy } from \"@tutao/tutanota-test-utils\"\n\nconst desktopEntry = `[Desktop Entry]\nName=Tuta Mail\nComment=The desktop client for Tuta Mail, the secure e-mail service.\nGenericName=Mail Client\nKeywords=Email;E-mail\nExec=\"/appimage/path/file.appImage\" %U\nTerminal=false\nType=Application\nIcon=appName\nStartupWMClass=appName\nMimeType=x-scheme-handler/mailto;\nCategories=Network;\nX-Tutanota-Version=appVersion\nTryExec=/appimage/path/file.appImage`\n\nlang.init(en)\n\no.spec(\"DesktopIntegrator Test\", () => {\n\tconst cp = {\n\t\texec: () => {},\n\t}\n\n\tconst oldDataHome = process.env.XDG_DATA_HOME\n\tconst oldConfigHome = process.env.XDG_CONFIG_HOME\n\tconst oldExecPath = process.execPath\n\n\tconst setupLinuxEnv = () => {\n\t\tn.setPlatform(\"linux\")\n\t\tprocess.env.APPIMAGE = \"/appimage/path/file.appImage\"\n\t\tprocess.env.XDG_DATA_HOME = \"/app/path/file/.local/share\"\n\t\tprocess.env.XDG_CONFIG_HOME = \"/app/path/file/.config\"\n\t\tprocess.execPath = \"/exec/path/elf\"\n\t}\n\n\tconst resetLinuxEnv = () => {\n\t\tdelete process.env.APPIMAGE\n\t\tprocess.env.XDG_DATA_HOME = oldDataHome\n\t\tprocess.env.XDG_CONFIG_HOME = oldConfigHome\n\t\tprocess.execPath = oldExecPath\n\t}\n\n\tconst electron = {\n\t\tapp: {\n\t\t\tname: \"appName\",\n\t\t\tgetLoginItemSettings() {\n\t\t\t\treturn { openAtLogin: false }\n\t\t\t},\n\t\t\tsetLoginItemSettings() {},\n\t\t\tgetPath() {\n\t\t\t\treturn \"/app/path/file\"\n\t\t\t},\n\t\t\tgetVersion() {\n\t\t\t\treturn \"appVersion\"\n\t\t\t},\n\t\t},\n\t\tdialog: {\n\t\t\tshowMessageBox: () => Promise.resolve({ response: 1, checkboxChecked: false }),\n\t\t},\n\t\tMenu: {\n\t\t\tbuildFromTemplate: () => {},\n\t\t\tsetApplicationMenu: () => {},\n\t\t},\n\t}\n\tlet writtenFiles, copiedFiles, deletedFiles, createdDirectories\n\n\tconst fsExtra = {\n\t\twriteFileSync(file, content, opts) {\n\t\t\twrittenFiles.push({ file, content, opts })\n\t\t},\n\t\twriteFile(file, content, opts) {\n\t\t\twrittenFiles.push({ file, content, opts })\n\t\t\treturn Promise.resolve()\n\t\t},\n\t\tcopyFileSync(from, to) {\n\t\t\tcopiedFiles.push({ from, to })\n\t\t},\n\t\tmkdir(directory, opts) {\n\t\t\tcreatedDirectories.push(directory)\n\t\t\treturn Promise.resolve()\n\t\t},\n\t\tmkdirSync(directory, opts) {\n\t\t\tcreatedDirectories.push(directory)\n\t\t\treturn Promise.resolve()\n\t\t},\n\t\tcopyFile(from, to) {\n\t\t\tcopiedFiles.push({ from, to })\n\t\t\treturn Promise.resolve()\n\t\t},\n\t\tunlinkSync(f) {\n\t\t\tdeletedFiles.push(f)\n\t\t},\n\t\treadFileSync: () => \"\",\n\t\tconstants: {\n\t\t\tF_OK: 0,\n\t\t\tW_OK: 1,\n\t\t\tR_OK: 2,\n\t\t},\n\t\tpromises: {\n\t\t\taccess: (p, f) => {\n\t\t\t\tconsole.log(p, f)\n\t\t\t\treturn Promise.reject(new Error(\"nope\"))\n\t\t\t},\n\t\t\tmkdir() {\n\t\t\t\treturn Promise.resolve()\n\t\t\t},\n\t\t\tcopyFile(from, to) {\n\t\t\t\tcopiedFiles.push({ from, to })\n\t\t\t\treturn Promise.resolve()\n\t\t\t},\n\t\t\twriteFile(file, content, opts) {\n\t\t\t\twrittenFiles.push({ file, content, opts })\n\t\t\t\treturn Promise.resolve()\n\t\t\t},\n\t\t\tunlink(path, cb) {\n\t\t\t\tdeletedFiles.push(path)\n\t\t\t\tif (cb) {\n\t\t\t\t\tsetImmediate(cb)\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.resolve()\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t}\n\n\tlet itemToReturn: string | undefined = undefined\n\n\tconst wm = {}\n\n\tconst standardMocks = () => {\n\t\twrittenFiles = []\n\t\tcopiedFiles = []\n\t\tdeletedFiles = []\n\t\tcreatedDirectories = []\n\n\t\tconst winreg = n.classify({\n\t\t\tprototype: {\n\t\t\t\tget(key, cb) {\n\t\t\t\t\tsetImmediate(() => cb(null, itemToReturn))\n\t\t\t\t},\n\t\t\t\tset(key, reg, val, cb) {\n\t\t\t\t\tsetImmediate(() => cb(null))\n\t\t\t\t},\n\t\t\t\tremove(key, cb) {\n\t\t\t\t\tsetImmediate(() => cb(null))\n\t\t\t\t},\n\t\t\t},\n\t\t\tstatics: {},\n\t\t})\n\n\t\t// node modules\n\t\tconst electronMock = n.mock<typeof import(\"electron\")>(\"electron\", electron).set()\n\t\tconst fsExtraMock = n.mock<typeof import(\"fs\")>(\"fs-extra\", fsExtra).set()\n\t\tconst winregMock = n.mock<WinregStatic & { mockedInstances: Array<any> }>(\"winreg\", winreg).set()\n\t\tconst cpMock = n.mock<typeof import(\"child_process\")>(\"child_process\", cp).set()\n\t\tconst wmMock = n.mock<WindowManager>(\"wm\", wm).set()\n\n\t\treturn {\n\t\t\telectronMock,\n\t\t\tfsExtraMock,\n\t\t\twinregMock,\n\t\t\tcpMock,\n\t\t\twmMock,\n\t\t}\n\t}\n\n\to.spec(\"macOS\", function () {\n\t\to.beforeEach(function () {\n\t\t\tn.setPlatform(\"darwin\")\n\t\t})\n\n\t\to(\"enable when off\", async function () {\n\t\t\tconst { electronMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorDarwin(electronMock)\n\t\t\tawait integrator.enableAutoLaunch()\n\n\t\t\to(electronMock.app.getLoginItemSettings.callCount).equals(1)\n\t\t\to(electronMock.app.setLoginItemSettings.callCount).equals(1)\n\n\t\t\to(electronMock.app.setLoginItemSettings.args.length).equals(1)\n\t\t\to(electronMock.app.setLoginItemSettings.args[0]).deepEquals({ openAtLogin: true })\n\t\t})\n\n\t\to(\"disable when off\", async function () {\n\t\t\tconst { electronMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorDarwin(electronMock)\n\t\t\tawait integrator.disableAutoLaunch()\n\n\t\t\to(electronMock.app.setLoginItemSettings.callCount).equals(0)\n\t\t})\n\n\t\to(\"enable when on\", async function () {\n\t\t\tconst electronMock = n\n\t\t\t\t.mock<typeof import(\"electron\")>(\"electron\", electron)\n\t\t\t\t.with({\n\t\t\t\t\tapp: {\n\t\t\t\t\t\tgetLoginItemSettings() {\n\t\t\t\t\t\t\treturn { openAtLogin: true }\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst integrator = new DesktopIntegratorDarwin(electronMock)\n\t\t\tawait integrator.enableAutoLaunch()\n\n\t\t\to(electronMock.app.getLoginItemSettings.callCount).equals(1)\n\t\t\to(electronMock.app.setLoginItemSettings.callCount).equals(0)\n\t\t})\n\n\t\to(\"disable when on\", async function () {\n\t\t\tconst electronMock = n\n\t\t\t\t.mock<typeof import(\"electron\")>(\"electron\", electron)\n\t\t\t\t.with({\n\t\t\t\t\tapp: {\n\t\t\t\t\t\tgetLoginItemSettings() {\n\t\t\t\t\t\t\treturn { openAtLogin: true }\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst integrator = new DesktopIntegratorDarwin(electronMock)\n\t\t\tawait integrator.disableAutoLaunch()\n\n\t\t\to(electronMock.app.getLoginItemSettings.callCount).equals(1)\n\t\t\to(electronMock.app.setLoginItemSettings.callCount).equals(1)\n\n\t\t\to(electronMock.app.setLoginItemSettings.args.length).equals(1)\n\t\t\to(electronMock.app.setLoginItemSettings.args[0]).deepEquals({ openAtLogin: false })\n\t\t})\n\n\t\to(\"ApplicationMenu gets created\", async function () {\n\t\t\tconst { electronMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorDarwin(electronMock)\n\n\t\t\tconst wmMock = downcast<WindowManager>({\n\t\t\t\tnewWindow: spy(() => {}),\n\t\t\t})\n\t\t\tawait integrator.runIntegration(wmMock)\n\t\t\to(electronMock.Menu.buildFromTemplate.callCount).equals(1)\n\t\t\to(electronMock.Menu.buildFromTemplate.args.length).equals(1)\n\t\t\to(electronMock.Menu.setApplicationMenu.callCount).equals(1)\n\t\t})\n\t})\n\n\to.spec(\"Linux\", function () {\n\t\to.beforeEach(function () {\n\t\t\tsetupLinuxEnv()\n\t\t})\n\n\t\to.afterEach(function () {\n\t\t\tresetLinuxEnv()\n\t\t})\n\n\t\to(\"enable when off\", async function () {\n\t\t\tconst { electronMock, fsExtraMock, cpMock } = standardMocks()\n\t\t\to(fsExtraMock.writeFileSync.callCount).equals(0)(\"test is not ready\")\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\n\t\t\tawait integrator.enableAutoLaunch()\n\n\t\t\to(fsExtraMock.writeFileSync.callCount).equals(1)\n\t\t\to(fsExtraMock.writeFileSync.args.length).equals(3)\n\t\t\to(fsExtraMock.writeFileSync.args[0]).equals(\"/app/path/file/.config/autostart/appName.desktop\")\n\t\t\to(fsExtraMock.writeFileSync.args[1]).equals(\n\t\t\t\t\"[Desktop Entry]\\n\\tType=Application\\n\\tVersion=appVersion\\n\\tName=appName\\n\\tComment=appName startup script\\n\\tExec=/appimage/path/file.appImage -a\\n\\tStartupNotify=false\\n\\tTerminal=false\",\n\t\t\t)\n\t\t\to(fsExtraMock.writeFileSync.args[2]).deepEquals({ encoding: \"utf-8\" })\n\n\t\t\to(fsExtraMock.mkdirSync.callCount).equals(1)\n\t\t\to(fsExtraMock.mkdirSync.args[0]).equals(\"/app/path/file/.config/autostart\")\n\t\t})\n\n\t\to(\"disable when off\", async function () {\n\t\t\tconst { electronMock, fsExtraMock, cpMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\n\t\t\tawait integrator.disableAutoLaunch()\n\t\t\to(fsExtraMock.promises.unlink.callCount).equals(0)\n\t\t})\n\n\t\to(\"enable when on\", async function () {\n\t\t\tconst fsExtraMock = n\n\t\t\t\t.mock<typeof import(\"fs\")>(\"fs-extra\", fsExtra)\n\t\t\t\t.with({\n\t\t\t\t\tpromises: {\n\t\t\t\t\t\taccess: (path, mode) => Promise.resolve(),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst { electronMock, cpMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\n\t\t\tawait integrator.enableAutoLaunch()\n\t\t\to(fsExtraMock.writeFileSync.callCount).equals(0)\n\t\t})\n\n\t\to(\"disable when on\", async function () {\n\t\t\tconst fsExtraMock = n\n\t\t\t\t.mock<typeof import(\"fs\")>(\"fs-extra\", fsExtra)\n\t\t\t\t.with({\n\t\t\t\t\tpromises: {\n\t\t\t\t\t\taccess: () => Promise.resolve(),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst { electronMock, cpMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\n\t\t\tawait integrator.disableAutoLaunch()\n\t\t\to(fsExtraMock.promises.unlink.callCount).equals(1)\n\t\t\to(fsExtraMock.promises.unlink.args.length).equals(1)\n\t\t\to(fsExtraMock.promises.unlink.args[0]).equals(\"/app/path/file/.config/autostart/appName.desktop\")\n\t\t})\n\n\t\to(\"runIntegration without integration, clicked yes, no no_integration, not checked\", async function () {\n\t\t\tconst { electronMock, fsExtraMock, cpMock, wmMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\t\t\tawait integrator.runIntegration(wmMock)\n\n\t\t\to(electronMock.dialog.showMessageBox.callCount).equals(1)\n\t\t\to(electronMock.dialog.showMessageBox.args.length).equals(1)\n\t\t\to(electronMock.dialog.showMessageBox.args[0]).deepEquals({\n\t\t\t\ttitle: lang.get(\"desktopIntegration_label\"),\n\t\t\t\tbuttons: [lang.get(\"no_label\"), lang.get(\"yes_label\")],\n\t\t\t\tdefaultId: 1,\n\t\t\t\tmessage: lang.get(\"desktopIntegration_msg\"),\n\t\t\t\tcheckboxLabel: lang.get(\"doNotAskAgain_label\"),\n\t\t\t\tcheckboxChecked: false,\n\t\t\t\ttype: \"question\",\n\t\t\t})\n\t\t\tawait Promise.resolve()\n\t\t\to(fsExtraMock.promises.mkdir.args[0]).equals(\"/app/path/file/.local/share/applications\")\n\t\t\to(writtenFiles).deepEquals([\n\t\t\t\t{\n\t\t\t\t\tfile: \"/app/path/file/.local/share/applications/appName.desktop\",\n\t\t\t\t\tcontent: desktopEntry,\n\t\t\t\t\topts: { encoding: \"utf-8\" },\n\t\t\t\t},\n\t\t\t])\n\t\t\to(copiedFiles).deepEquals([\n\t\t\t\t{\n\t\t\t\t\tfrom: \"/exec/path/resources/icons/logo-solo-red-small.png\",\n\t\t\t\t\tto: \"/app/path/file/.local/share/icons/hicolor/64x64/apps/appName.png\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfrom: \"/exec/path/resources/icons/logo-solo-red.png\",\n\t\t\t\t\tto: \"/app/path/file/.local/share/icons/hicolor/512x512/apps/appName.png\",\n\t\t\t\t},\n\t\t\t])\n\t\t})\n\n\t\to(\"runIntegration without integration, clicked yes, no no_integration, checked\", async function () {\n\t\t\tconst electronMock = n\n\t\t\t\t.mock<typeof import(\"electron\")>(\"electron\", electron)\n\t\t\t\t.with({\n\t\t\t\t\tdialog: {\n\t\t\t\t\t\tshowMessageBox: () => Promise.resolve({ response: 1, checkboxChecked: true }),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst { fsExtraMock, cpMock, wmMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\t\t\tawait integrator.runIntegration(wmMock)\n\t\t\to(fsExtraMock.promises.mkdir.args[0]).equals(\"/app/path/file/.local/share/applications\")\n\t\t\to(writtenFiles).deepEquals([\n\t\t\t\t{\n\t\t\t\t\tfile: \"/app/path/file/.config/tuta_integration/no_integration\",\n\t\t\t\t\tcontent: \"/appimage/path/file.appImage\\n\",\n\t\t\t\t\topts: { encoding: \"utf-8\", flag: \"a\" },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfile: \"/app/path/file/.local/share/applications/appName.desktop\",\n\t\t\t\t\tcontent: desktopEntry,\n\t\t\t\t\topts: { encoding: \"utf-8\" },\n\t\t\t\t},\n\t\t\t])\n\t\t\to(copiedFiles).deepEquals([\n\t\t\t\t{\n\t\t\t\t\tfrom: \"/exec/path/resources/icons/logo-solo-red-small.png\",\n\t\t\t\t\tto: \"/app/path/file/.local/share/icons/hicolor/64x64/apps/appName.png\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfrom: \"/exec/path/resources/icons/logo-solo-red.png\",\n\t\t\t\t\tto: \"/app/path/file/.local/share/icons/hicolor/512x512/apps/appName.png\",\n\t\t\t\t},\n\t\t\t])\n\t\t})\n\n\t\to(\"runIntegration without integration, clicked no, not checked\", async function () {\n\t\t\tn.setPlatform(\"linux\")\n\t\t\tprocess.env.APPIMAGE = \"/appimage/path/file.appImage\"\n\t\t\tconst electronMock = n\n\t\t\t\t.mock<typeof import(\"electron\")>(\"electron\", electron)\n\t\t\t\t.with({\n\t\t\t\t\tdialog: {\n\t\t\t\t\t\tshowMessageBox: () => Promise.resolve({ response: 0, checkboxChecked: false }),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst { fsExtraMock, cpMock, wmMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\t\t\tawait integrator.runIntegration(wmMock)\n\t\t\to(fsExtraMock.promises.mkdir.callCount).equals(0)\n\t\t\to(writtenFiles).deepEquals([])\n\t\t\to(copiedFiles).deepEquals([])\n\t\t\tdelete process.env.APPIMAGE\n\t\t})\n\n\t\to(\"runIntegration without integration, clicked no, checked\", async function () {\n\t\t\tconst electronMock = n\n\t\t\t\t.mock<typeof import(\"electron\")>(\"electron\", electron)\n\t\t\t\t.with({\n\t\t\t\t\tdialog: {\n\t\t\t\t\t\tshowMessageBox: () => Promise.resolve({ response: 0, checkboxChecked: true }),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst { fsExtraMock, cpMock, wmMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\t\t\tawait integrator.runIntegration(wmMock)\n\t\t\to(fsExtraMock.promises.mkdir.args[0]).equals(\"/app/path/file/.config/tuta_integration\")\n\t\t\to(writtenFiles).deepEquals([\n\t\t\t\t{\n\t\t\t\t\tfile: \"/app/path/file/.config/tuta_integration/no_integration\",\n\t\t\t\t\tcontent: \"/appimage/path/file.appImage\\n\",\n\t\t\t\t\topts: { encoding: \"utf-8\", flag: \"a\" },\n\t\t\t\t},\n\t\t\t])\n\t\t\to(copiedFiles).deepEquals([])\n\t\t})\n\n\t\to(\"runIntegration with integration, outdated version\", async function () {\n\t\t\tconst fsExtraMock = n\n\t\t\t\t.mock<typeof import(\"fs\")>(\"fs-extra\", fsExtra)\n\t\t\t\t.with({\n\t\t\t\t\treadFileSync: () => \"X-Tutanota-Version=notAppVersion\",\n\t\t\t\t\tpromises: {\n\t\t\t\t\t\taccess: () => Promise.resolve(),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst { electronMock, cpMock, wmMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\n\t\t\tawait integrator.runIntegration(wmMock)\n\n\t\t\to(electronMock.dialog.showMessageBox.callCount).equals(0)(\n\t\t\t\t\"should have no calls to dialog, had:\" + JSON.stringify(electronMock.dialog.showMessageBox.calls),\n\t\t\t)\n\t\t\to(writtenFiles).deepEquals([\n\t\t\t\t{\n\t\t\t\t\tfile: \"/app/path/file/.local/share/applications/appName.desktop\",\n\t\t\t\t\tcontent: desktopEntry,\n\t\t\t\t\topts: { encoding: \"utf-8\" },\n\t\t\t\t},\n\t\t\t])\n\t\t\to(copiedFiles).deepEquals([\n\t\t\t\t{\n\t\t\t\t\tfrom: \"/exec/path/resources/icons/logo-solo-red-small.png\",\n\t\t\t\t\tto: \"/app/path/file/.local/share/icons/hicolor/64x64/apps/appName.png\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfrom: \"/exec/path/resources/icons/logo-solo-red.png\",\n\t\t\t\t\tto: \"/app/path/file/.local/share/icons/hicolor/512x512/apps/appName.png\",\n\t\t\t\t},\n\t\t\t])\n\t\t})\n\n\t\to(\"runIntegration with integration, matching version\", async function () {\n\t\t\tn.setPlatform(\"linux\")\n\t\t\tprocess.env.APPIMAGE = \"/appimage/path/file.appImage\"\n\t\t\tconst fsExtraMock = n\n\t\t\t\t.mock<typeof import(\"fs\")>(\"fs-extra\", fsExtra)\n\t\t\t\t.with({\n\t\t\t\t\treadFileSync: () => \"X-Tutanota-Version=appVersion\",\n\t\t\t\t\tpromises: {\n\t\t\t\t\t\taccess: () => Promise.resolve(),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst { electronMock, cpMock, wmMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\n\t\t\tawait integrator.runIntegration(wmMock)\n\n\t\t\to(electronMock.dialog.showMessageBox.callCount).equals(0)\n\t\t\to(writtenFiles).deepEquals([])\n\t\t\to(copiedFiles).deepEquals([])\n\t\t\tdelete process.env.APPIMAGE\n\t\t})\n\n\t\to(\"runIntegration without integration, blacklisted\", async function () {\n\t\t\tconst fsExtraMock = n\n\t\t\t\t.mock<typeof import(\"fs\")>(\"fs-extra\", fsExtra)\n\t\t\t\t.with({\n\t\t\t\t\treadFileSync: () => \"/another/blacklisted/file.appImage\\n/appimage/path/file.appImage\",\n\t\t\t\t\tpromises: {\n\t\t\t\t\t\taccess: (p) => (p === \"/app/path/file/.config/tuta_integration/no_integration\" ? Promise.resolve() : Promise.reject()),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst { electronMock, cpMock, wmMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\n\t\t\tawait integrator.runIntegration(wmMock)\n\n\t\t\to(electronMock.dialog.showMessageBox.callCount).equals(0)\n\t\t\to(writtenFiles).deepEquals([])\n\t\t\to(copiedFiles).deepEquals([])\n\t\t})\n\n\t\to(\"unintegration & integration undo each other\", async function () {\n\t\t\tn.setPlatform(\"linux\")\n\t\t\tprocess.env.APPIMAGE = \"/appimage/path/file.appImage\"\n\t\t\tconst fsExtraMock = n\n\t\t\t\t.mock<typeof import(\"fs\")>(\"fs-extra\", fsExtra)\n\t\t\t\t.with({\n\t\t\t\t\treadFileSync: () => \"/another/blacklisted/file.appImage\\n/appimage/path/file.appImage\",\n\t\t\t\t\tpromises: {\n\t\t\t\t\t\taccess: (p) => (p === \"/app/path/file/.config/tuta_integration/no_integration\" ? Promise.resolve() : Promise.reject()),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst { electronMock, cpMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorLinux(electronMock, fsExtraMock, cpMock)\n\n\t\t\tawait integrator.integrate()\n\t\t\tawait integrator.unintegrate()\n\t\t\tconst addedFiles = writtenFiles\n\t\t\t\t.map((f) => f.file)\n\t\t\t\t.concat(copiedFiles.map((f) => f.to))\n\t\t\t\t.sort()\n\t\t\to(addedFiles).deepEquals(deletedFiles.sort())\n\t\t\tdelete process.env.APPIMAGE\n\t\t})\n\t})\n\n\to.spec(\"Windows\", function () {\n\t\to.beforeEach(function () {\n\t\t\tn.setPlatform(\"win32\")\n\t\t})\n\n\t\to(\"enable when off\", async function () {\n\t\t\tconst { electronMock, winregMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorWin32(electronMock, winregMock)\n\n\t\t\tawait integrator.enableAutoLaunch()\n\t\t\to(winregMock.mockedInstances.length).equals(1)\n\t\t\tconst regInst = winregMock.mockedInstances[0]\n\t\t\to(regInst.get.callCount).equals(1)\n\t\t\to(regInst.get.args.length).equals(2)\n\t\t\to(regInst.get.args[0]).equals(\"appName\")\n\n\t\t\to(regInst.set.callCount).equals(1)\n\t\t\to(regInst.set.args.length).equals(4)\n\t\t\to(regInst.set.args[0]).equals(\"appName\")\n\t\t\to(regInst.set.args[2]).equals(`${process.execPath} -a`)\n\t\t})\n\n\t\to(\"disable when off\", async function () {\n\t\t\tconst { electronMock, winregMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorWin32(electronMock, winregMock)\n\n\t\t\tawait integrator.disableAutoLaunch()\n\t\t\to(winregMock.mockedInstances.length).equals(1)\n\t\t\tconst regInst = winregMock.mockedInstances[0]\n\t\t\to(regInst.get.callCount).equals(1)\n\t\t\to(regInst.get.args.length).equals(2)\n\t\t\to(regInst.get.args[0]).equals(\"appName\")\n\n\t\t\to(regInst.set.callCount).equals(0)\n\t\t\to(regInst.remove.callCount).equals(0)\n\t\t})\n\n\t\to(\"enable when on\", async function () {\n\t\t\titemToReturn = \"not undefined\"\n\t\t\tconst { electronMock, winregMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorWin32(electronMock, winregMock)\n\n\t\t\tawait integrator.enableAutoLaunch()\n\t\t\to(winregMock.mockedInstances.length).equals(1)\n\t\t\tconst regInst = winregMock.mockedInstances[0]\n\n\t\t\to(regInst.set.callCount).equals(0)\n\t\t\to(regInst.remove.callCount).equals(0)\n\t\t})\n\n\t\to(\"disable when on\", async function () {\n\t\t\titemToReturn = \"not undefined\"\n\t\t\tconst { electronMock, winregMock } = standardMocks()\n\t\t\tconst integrator = new DesktopIntegratorWin32(electronMock, winregMock)\n\n\t\t\tawait integrator.disableAutoLaunch()\n\t\t\to(winregMock.mockedInstances.length).equals(1)\n\t\t\tconst regInst = winregMock.mockedInstances[0]\n\n\t\t\to(regInst.set.callCount).equals(0)\n\t\t\to(regInst.remove.callCount).equals(1)\n\t\t\to(regInst.remove.args.length).equals(2)\n\t\t\to(regInst.remove.args[0]).equals(\"appName\")\n\t\t})\n\t})\n\n\to.spec(\"Dispatch\", function () {\n\t\to(\"Linux\", async function () {\n\t\t\tn.setPlatform(\"linux\")\n\t\t\tconst { electronMock, fsExtraMock, cpMock, winregMock } = standardMocks()\n\t\t\tconst integrator = await getDesktopIntegratorForPlatform(electronMock, fsExtraMock, cpMock, () => Promise.resolve({ default: winregMock }))\n\t\t\to(integrator instanceof DesktopIntegratorLinux).equals(true)(\"Integrator should be a DesktopIntegratorLinux\")\n\t\t})\n\n\t\to(\"Win32\", async function () {\n\t\t\tn.setPlatform(\"win32\")\n\t\t\tconst { electronMock, fsExtraMock, cpMock, winregMock } = standardMocks()\n\t\t\tconst integrator = await getDesktopIntegratorForPlatform(electronMock, fsExtraMock, cpMock, () => Promise.resolve({ default: winregMock }))\n\t\t\to(integrator instanceof DesktopIntegratorWin32).equals(true)(\"Integrator should be a DesktopIntegratorLinux\")\n\t\t})\n\n\t\to(\"Darwin\", async function () {\n\t\t\tn.setPlatform(\"darwin\")\n\t\t\tconst { electronMock, fsExtraMock, cpMock, winregMock } = standardMocks()\n\t\t\tconst integrator = await getDesktopIntegratorForPlatform(electronMock, fsExtraMock, cpMock, () => Promise.resolve({ default: winregMock }))\n\t\t\to(integrator instanceof DesktopIntegratorDarwin).equals(true)(\"Integrator should be a DesktopIntegratorLinux\")\n\t\t})\n\t})\n})\n"],"mappings":"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"}