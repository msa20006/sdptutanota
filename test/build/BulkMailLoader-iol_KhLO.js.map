{"version":3,"file":"BulkMailLoader-iol_KhLO.js","names":["mailEntityClient: EntityClient","mailDataEntityClient: EntityClient","cachedStorage: ExposedCacheStorage | null","mailListId: Id","mailLIstId: Id","startId: Id","options: EntityRestClientLoadOptions","id: IdTuple","mails: readonly Mail[]","result: Array<MailWithMailDetails>","listIdToMailDetailsBlobIds: Map<Id, Array<Id>>","ownerEncSessionKeyProvider: OwnerEncSessionKeyProvider","instanceElementId: Id","listIdToMailDetailsDraftIds: Map<Id, Array<Id>>","attachmentIds: IdTuple[]","fileLoadingPromises: Array<Promise<Array<TutanotaFile>>>","typeRef: TypeRef<T>","listId: Id | null","ids: Id[]","ownerEncSessionKeyProvider?: OwnerEncSessionKeyProvider"],"sources":["../../src/mail-app/workerUtils/index/BulkMailLoader.ts"],"sourcesContent":["import { assertNotNull, groupBy, groupByAndMap, neverNull, promiseMap, splitInChunks, TypeRef } from \"@tutao/tutanota-utils\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { ExposedCacheStorage } from \"../../../common/api/worker/rest/DefaultEntityRestCache.js\"\nimport { elementIdPart, isSameId, listIdPart, timestampToGeneratedId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { CacheMode, EntityRestClientLoadOptions, OwnerEncSessionKeyProvider } from \"../../../common/api/worker/rest/EntityRestClient.js\"\nimport { isDraft } from \"../../mail/model/MailChecks.js\"\nimport {\n\tMail,\n\tFile as TutanotaFile,\n\tMailDetails,\n\tMailTypeRef,\n\tMailDetailsBlobTypeRef,\n\tMailDetailsDraftTypeRef,\n\tFileTypeRef,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { SomeEntity } from \"../../../common/api/common/EntityTypes.js\"\n\nexport const ENTITY_INDEXER_CHUNK = 20\nexport const MAIL_INDEXER_CHUNK = 100\n\nexport type TimeRange = [number, number]\n\nexport interface MailWithMailDetails {\n\tmail: Mail\n\tmailDetails: MailDetails\n}\n\nexport class BulkMailLoader {\n\tconstructor(\n\t\tprivate readonly mailEntityClient: EntityClient,\n\t\tprivate readonly mailDataEntityClient: EntityClient,\n\t\tprivate readonly cachedStorage: ExposedCacheStorage | null,\n\t) {}\n\n\tloadMailsInRangeWithCache(\n\t\tmailListId: Id,\n\t\t[rangeStart, rangeEnd]: TimeRange,\n\t): Promise<{\n\t\telements: Array<Mail>\n\t\tloadedCompletely: boolean\n\t}> {\n\t\treturn this.mailEntityClient.loadReverseRangeBetween(\n\t\t\tMailTypeRef,\n\t\t\tmailListId,\n\t\t\ttimestampToGeneratedId(rangeStart),\n\t\t\ttimestampToGeneratedId(rangeEnd),\n\t\t\tMAIL_INDEXER_CHUNK,\n\t\t)\n\t}\n\n\tloadFixedNumberOfMailsWithCache(mailLIstId: Id, startId: Id, options: EntityRestClientLoadOptions = {}): Promise<Mail[]> {\n\t\treturn this.mailEntityClient.loadRange(MailTypeRef, mailLIstId, startId, MAIL_INDEXER_CHUNK, true, { ...options, cacheMode: CacheMode.ReadOnly })\n\t}\n\n\tasync removeFromCache(id: IdTuple): Promise<void> {\n\t\treturn this.cachedStorage?.deleteIfExists(MailTypeRef, listIdPart(id), elementIdPart(id))\n\t}\n\n\tasync loadMailDetails(mails: readonly Mail[], options: EntityRestClientLoadOptions = {}): Promise<MailWithMailDetails[]> {\n\t\tconst result: Array<MailWithMailDetails> = []\n\t\t// mailDetails stored as blob\n\t\tlet mailDetailsBlobMails = mails.filter((m) => !isDraft(m))\n\t\tconst listIdToMailDetailsBlobIds: Map<Id, Array<Id>> = groupByAndMap(\n\t\t\tmailDetailsBlobMails,\n\t\t\t(m) => assertNotNull(m.mailDetails)[0],\n\t\t\t(m) => neverNull(m.mailDetails)[1],\n\t\t)\n\t\tfor (let [listId, ids] of listIdToMailDetailsBlobIds) {\n\t\t\tconst ownerEncSessionKeyProvider: OwnerEncSessionKeyProvider = async (instanceElementId: Id) => {\n\t\t\t\tconst mail = assertNotNull(mailDetailsBlobMails.find((m) => elementIdPart(assertNotNull(m.mailDetails)) === instanceElementId))\n\t\t\t\treturn {\n\t\t\t\t\tkey: assertNotNull(mail._ownerEncSessionKey),\n\t\t\t\t\tencryptingKeyVersion: Number(mail._ownerKeyVersion ?? 0),\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst mailDetailsBlobs = await this.loadInChunks(MailDetailsBlobTypeRef, listId, ids, ownerEncSessionKeyProvider, options)\n\t\t\tresult.push(\n\t\t\t\t...mailDetailsBlobs.map((mailDetailsBlob) => {\n\t\t\t\t\tconst mail = assertNotNull(mailDetailsBlobMails.find((m) => isSameId(m.mailDetails, mailDetailsBlob._id)))\n\t\t\t\t\treturn { mail, mailDetails: mailDetailsBlob.details }\n\t\t\t\t}),\n\t\t\t)\n\t\t}\n\t\t// mailDetails stored in db (draft)\n\t\tlet mailDetailsDraftMails = mails.filter((m) => isDraft(m))\n\t\tconst listIdToMailDetailsDraftIds: Map<Id, Array<Id>> = groupByAndMap(\n\t\t\tmailDetailsDraftMails,\n\t\t\t(m) => assertNotNull(m.mailDetailsDraft)[0],\n\t\t\t(m) => neverNull(m.mailDetailsDraft)[1],\n\t\t)\n\t\tfor (let [listId, ids] of listIdToMailDetailsDraftIds) {\n\t\t\tconst ownerEncSessionKeyProvider: OwnerEncSessionKeyProvider = async (instanceElementId: Id) => {\n\t\t\t\tconst mail = assertNotNull(mailDetailsDraftMails.find((m) => elementIdPart(assertNotNull(m.mailDetailsDraft)) === instanceElementId))\n\t\t\t\treturn {\n\t\t\t\t\tkey: assertNotNull(mail._ownerEncSessionKey),\n\t\t\t\t\tencryptingKeyVersion: Number(mail._ownerKeyVersion ?? 0),\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst mailDetailsDrafts = await this.loadInChunks(MailDetailsDraftTypeRef, listId, ids, ownerEncSessionKeyProvider, options)\n\t\t\tresult.push(\n\t\t\t\t...mailDetailsDrafts.map((draftDetails) => {\n\t\t\t\t\tconst mail = assertNotNull(mailDetailsDraftMails.find((m) => isSameId(m.mailDetailsDraft, draftDetails._id)))\n\t\t\t\t\treturn { mail, mailDetails: draftDetails.details }\n\t\t\t\t}),\n\t\t\t)\n\t\t}\n\t\treturn result\n\t}\n\n\tasync loadAttachments(mails: readonly Mail[], options: EntityRestClientLoadOptions = {}): Promise<TutanotaFile[]> {\n\t\tconst attachmentIds: IdTuple[] = []\n\t\tfor (const mail of mails) {\n\t\t\tattachmentIds.push(...mail.attachments)\n\t\t}\n\t\tconst filesByList = groupBy(attachmentIds, (a) => a[0])\n\t\tconst fileLoadingPromises: Array<Promise<Array<TutanotaFile>>> = []\n\t\tfor (const [listId, fileIds] of filesByList.entries()) {\n\t\t\tfileLoadingPromises.push(\n\t\t\t\tthis.loadInChunks(\n\t\t\t\t\tFileTypeRef,\n\t\t\t\t\tlistId,\n\t\t\t\t\tfileIds.map((f) => f[1]),\n\t\t\t\t\tundefined,\n\t\t\t\t\toptions,\n\t\t\t\t),\n\t\t\t)\n\t\t}\n\t\tconst filesResults = await Promise.all(fileLoadingPromises)\n\t\treturn filesResults.flat()\n\t}\n\n\tprivate async loadInChunks<T extends SomeEntity>(\n\t\ttypeRef: TypeRef<T>,\n\t\tlistId: Id | null,\n\t\tids: Id[],\n\t\townerEncSessionKeyProvider?: OwnerEncSessionKeyProvider,\n\t\toptions: EntityRestClientLoadOptions = {},\n\t): Promise<T[]> {\n\t\tconst byChunk = splitInChunks(ENTITY_INDEXER_CHUNK, ids)\n\t\tconst entityResults = await promiseMap(\n\t\t\tbyChunk,\n\t\t\t(chunk) => {\n\t\t\t\treturn chunk.length > 0\n\t\t\t\t\t? this.mailDataEntityClient.loadMultiple(typeRef, listId, chunk, ownerEncSessionKeyProvider, { ...options, cacheMode: CacheMode.ReadOnly })\n\t\t\t\t\t: Promise.resolve([])\n\t\t\t},\n\t\t\t{\n\t\t\t\tconcurrency: 2,\n\t\t\t},\n\t\t)\n\t\treturn entityResults.flat()\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiBa,uBAAuB;MACvB,qBAAqB;IASrB,iBAAN,MAAqB;CAC3B,YACkBA,kBACAC,sBACAC,eAChB;EAyHF,KA5HkB;EA4HjB,KA3HiB;EA2HhB,KA1HgB;CACd;CAEJ,0BACCC,YACA,CAAC,YAAY,SAAoB,EAI/B;AACF,SAAO,KAAK,iBAAiB,wBAC5B,aACA,YACA,uBAAuB,WAAW,EAClC,uBAAuB,SAAS,EAChC,mBACA;CACD;CAED,gCAAgCC,YAAgBC,SAAaC,UAAuC,CAAE,GAAmB;AACxH,SAAO,KAAK,iBAAiB,UAAU,aAAa,YAAY,SAAS,oBAAoB,MAAM;GAAE,GAAG;GAAS,WAAW,UAAU;EAAU,EAAC;CACjJ;CAED,MAAM,gBAAgBC,IAA4B;AACjD,SAAO,KAAK,eAAe,eAAe,aAAa,WAAW,GAAG,EAAE,cAAc,GAAG,CAAC;CACzF;CAED,MAAM,gBAAgBC,OAAwBF,UAAuC,CAAE,GAAkC;EACxH,MAAMG,SAAqC,CAAE;EAE7C,IAAI,uBAAuB,MAAM,OAAO,CAAC,OAAO,QAAQ,EAAE,CAAC;EAC3D,MAAMC,6BAAiD,cACtD,sBACA,CAAC,MAAM,cAAc,EAAE,YAAY,CAAC,IACpC,CAAC,MAAM,UAAU,EAAE,YAAY,CAAC,GAChC;AACD,OAAK,IAAI,CAAC,QAAQ,IAAI,IAAI,4BAA4B;GACrD,MAAMC,6BAAyD,OAAOC,sBAA0B;IAC/F,MAAM,OAAO,cAAc,qBAAqB,KAAK,CAAC,MAAM,cAAc,cAAc,EAAE,YAAY,CAAC,KAAK,kBAAkB,CAAC;AAC/H,WAAO;KACN,KAAK,cAAc,KAAK,oBAAoB;KAC5C,sBAAsB,OAAO,KAAK,oBAAoB,EAAE;IACxD;GACD;GACD,MAAM,mBAAmB,MAAM,KAAK,aAAa,wBAAwB,QAAQ,KAAK,4BAA4B,QAAQ;AAC1H,UAAO,KACN,GAAG,iBAAiB,IAAI,CAAC,oBAAoB;IAC5C,MAAM,OAAO,cAAc,qBAAqB,KAAK,CAAC,MAAM,SAAS,EAAE,aAAa,gBAAgB,IAAI,CAAC,CAAC;AAC1G,WAAO;KAAE;KAAM,aAAa,gBAAgB;IAAS;GACrD,EAAC,CACF;EACD;EAED,IAAI,wBAAwB,MAAM,OAAO,CAAC,MAAM,QAAQ,EAAE,CAAC;EAC3D,MAAMC,8BAAkD,cACvD,uBACA,CAAC,MAAM,cAAc,EAAE,iBAAiB,CAAC,IACzC,CAAC,MAAM,UAAU,EAAE,iBAAiB,CAAC,GACrC;AACD,OAAK,IAAI,CAAC,QAAQ,IAAI,IAAI,6BAA6B;GACtD,MAAMF,6BAAyD,OAAOC,sBAA0B;IAC/F,MAAM,OAAO,cAAc,sBAAsB,KAAK,CAAC,MAAM,cAAc,cAAc,EAAE,iBAAiB,CAAC,KAAK,kBAAkB,CAAC;AACrI,WAAO;KACN,KAAK,cAAc,KAAK,oBAAoB;KAC5C,sBAAsB,OAAO,KAAK,oBAAoB,EAAE;IACxD;GACD;GACD,MAAM,oBAAoB,MAAM,KAAK,aAAa,yBAAyB,QAAQ,KAAK,4BAA4B,QAAQ;AAC5H,UAAO,KACN,GAAG,kBAAkB,IAAI,CAAC,iBAAiB;IAC1C,MAAM,OAAO,cAAc,sBAAsB,KAAK,CAAC,MAAM,SAAS,EAAE,kBAAkB,aAAa,IAAI,CAAC,CAAC;AAC7G,WAAO;KAAE;KAAM,aAAa,aAAa;IAAS;GAClD,EAAC,CACF;EACD;AACD,SAAO;CACP;CAED,MAAM,gBAAgBJ,OAAwBF,UAAuC,CAAE,GAA2B;EACjH,MAAMQ,gBAA2B,CAAE;AACnC,OAAK,MAAM,QAAQ,MAClB,eAAc,KAAK,GAAG,KAAK,YAAY;EAExC,MAAM,cAAc,QAAQ,eAAe,CAAC,MAAM,EAAE,GAAG;EACvD,MAAMC,sBAA2D,CAAE;AACnE,OAAK,MAAM,CAAC,QAAQ,QAAQ,IAAI,YAAY,SAAS,CACpD,qBAAoB,KACnB,KAAK,aACJ,aACA,QACA,QAAQ,IAAI,CAAC,MAAM,EAAE,GAAG,EACxB,WACA,QACA,CACD;EAEF,MAAM,eAAe,MAAM,QAAQ,IAAI,oBAAoB;AAC3D,SAAO,aAAa,MAAM;CAC1B;CAED,MAAc,aACbC,SACAC,QACAC,KACAC,4BACAb,UAAuC,CAAE,GAC1B;EACf,MAAM,UAAU,cAAc,sBAAsB,IAAI;EACxD,MAAM,gBAAgB,MAAM,KAC3B,SACA,CAAC,UAAU;AACV,UAAO,MAAM,SAAS,IACnB,KAAK,qBAAqB,aAAa,SAAS,QAAQ,OAAO,4BAA4B;IAAE,GAAG;IAAS,WAAW,UAAU;GAAU,EAAC,GACzI,QAAQ,QAAQ,CAAE,EAAC;EACtB,GACD,EACC,aAAa,EACb,EACD;AACD,SAAO,cAAc,MAAM;CAC3B;AACD"}