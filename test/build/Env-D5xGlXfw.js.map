{"version":3,"file":"Env-D5xGlXfw.js","names":["Mode: Record<EnvMode, EnvMode>","domainConfig: DomainConfig"],"sources":["../../src/common/api/common/Env.ts"],"sourcesContent":["//@bundleInto:common-min\n\nimport { ProgrammingError } from \"./error/ProgrammingError.js\"\n\n// keep in sync with LaunchHtml.js meta tag title\nexport const LOGIN_TITLE = \"Mail. Done. Right. Tuta Mail Login & Sign up for an Ad-free Mailbox\"\nexport const Mode: Record<EnvMode, EnvMode> = Object.freeze({\n\tBrowser: \"Browser\",\n\tApp: \"App\",\n\tTest: \"Test\",\n\tPlayground: \"Playground\",\n\tDesktop: \"Desktop\",\n\tAdmin: \"Admin\",\n})\n\nexport function getWebsocketBaseUrl(domainConfig: DomainConfig): string {\n\treturn (\n\t\tdomainConfig.apiUrl\n\t\t\t// replaces http: with ws: and https: with wss:\n\t\t\t.replace(/^http/, \"ws\")\n\t)\n}\n\n/** Returns the origin which should be used for API requests. */\nexport function getApiBaseUrl(domainConfig: DomainConfig): string {\n\tif (isIOSApp()) {\n\t\t// http:// -> api:// and https:// -> apis://\n\t\treturn domainConfig.apiUrl.replace(/^http/, \"api\")\n\t} else {\n\t\treturn domainConfig.apiUrl\n\t}\n}\n\nexport function isIOSApp(): boolean {\n\tif (isApp() && env.platformId == null) {\n\t\tthrow new ProgrammingError(\"PlatformId is not set!\")\n\t}\n\treturn env.mode === Mode.App && env.platformId === \"ios\"\n}\n\n/**\n * Return true if an Apple device; used for checking if CTRL or CMD/Meta should be used as the primary modifier\n */\nexport function isAppleDevice(): boolean {\n\treturn env.platformId === \"darwin\" || isIOSApp()\n}\n\nexport function isAndroidApp(): boolean {\n\tif (isApp() && env.platformId == null) {\n\t\tthrow new ProgrammingError(\"PlatformId is not set!\")\n\t}\n\n\treturn env.mode === Mode.App && env.platformId === \"android\"\n}\n\nexport function isApp(): boolean {\n\treturn env.mode === Mode.App\n}\n\nexport function isDesktop(): boolean {\n\treturn env.mode === Mode.Desktop\n}\n\nexport function isBrowser(): boolean {\n\treturn env.mode === Mode.Browser\n}\n\nexport function ifDesktop<T>(obj: T | null): T | null {\n\treturn isDesktop() ? obj : null\n}\n\nlet worker = typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope\nlet node = typeof process === \"object\" && typeof process.versions === \"object\" && typeof process.versions.node !== \"undefined\"\n\nexport function isMain(): boolean {\n\treturn !worker && !node\n}\n\nexport function isWebClient() {\n\treturn env.mode === Mode.Browser\n}\n\nexport function isAdminClient(): boolean {\n\treturn env.mode === Mode.Admin\n}\n\nexport function isElectronClient(): boolean {\n\treturn isDesktop() || isAdminClient()\n}\n\nexport function isMainOrNode(): boolean {\n\treturn !worker || node || env.mode === Mode.Test\n}\n\nexport function isWorkerOrNode(): boolean {\n\treturn worker || node || env.mode === Mode.Test\n}\n\nexport function isWorker(): boolean {\n\treturn worker\n}\n\nexport function isTest(): boolean {\n\treturn env.mode === Mode.Test\n}\n\nexport function isDesktopMainThread(): boolean {\n\treturn node && typeof env !== \"undefined\" && (env.mode === Mode.Desktop || env.mode === Mode.Admin)\n}\n\nlet boot = !isDesktopMainThread() && !isWorker()\n\n/**\n * A hackaround. Set by bundler.\n * Rolldown doesn't inline const enums at the moment, so we can't assert the loading order.\n * If not set defaults to true\n */\nconst assertionsEnabled = typeof LOAD_ASSERTIONS === \"undefined\" || LOAD_ASSERTIONS\n\nexport function assertMainOrNode() {\n\tif (!assertionsEnabled) return\n\n\tif (!isMainOrNode()) {\n\t\tthrow new Error(\"this code must not run in the worker thread\")\n\t}\n\n\tif (boot) {\n\t\tthrow new Error(\"this main code must not be loaded at boot time\")\n\t}\n}\n\nexport function assertMainOrNodeBoot() {\n\tif (!assertionsEnabled) return\n\n\tif (!isMainOrNode()) {\n\t\tthrow new Error(\"this code must not run in the worker thread\")\n\t}\n}\n\nexport function assertWorkerOrNode() {\n\tif (!assertionsEnabled) return\n\n\tif (!isWorkerOrNode()) {\n\t\tthrow new Error(\"this code must not run in the gui thread\")\n\t}\n}\n\nexport function bootFinished() {\n\tboot = false\n}\n\n/**\n * Whether or not we will be using an offline cache (doesn't take into account if credentials are stored)\n */\nexport function isOfflineStorageAvailable(): boolean {\n\treturn !isBrowser()\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAKa,cAAc;MACdA,OAAiC,OAAO,OAAO;CAC3D,SAAS;CACT,KAAK;CACL,MAAM;CACN,YAAY;CACZ,SAAS;CACT,OAAO;AACP,EAAC;AAEK,SAAS,oBAAoBC,cAAoC;AACvE,QACC,aAAa,OAEX,QAAQ,SAAS,KAAK;AAEzB;AAGM,SAAS,cAAcA,cAAoC;AACjE,KAAI,UAAU,CAEb,QAAO,aAAa,OAAO,QAAQ,SAAS,MAAM;IAElD,QAAO,aAAa;AAErB;AAEM,SAAS,WAAoB;AACnC,KAAI,OAAO,IAAI,IAAI,cAAc,KAChC,OAAM,IAAI,iBAAiB;AAE5B,QAAO,IAAI,SAAS,KAAK,OAAO,IAAI,eAAe;AACnD;AAKM,SAAS,gBAAyB;AACxC,QAAO,IAAI,eAAe,YAAY,UAAU;AAChD;AAEM,SAAS,eAAwB;AACvC,KAAI,OAAO,IAAI,IAAI,cAAc,KAChC,OAAM,IAAI,iBAAiB;AAG5B,QAAO,IAAI,SAAS,KAAK,OAAO,IAAI,eAAe;AACnD;AAEM,SAAS,QAAiB;AAChC,QAAO,IAAI,SAAS,KAAK;AACzB;AAEM,SAAS,YAAqB;AACpC,QAAO,IAAI,SAAS,KAAK;AACzB;AAEM,SAAS,YAAqB;AACpC,QAAO,IAAI,SAAS,KAAK;AACzB;AAMD,IAAI,gBAAgB,sBAAsB,eAAe,gBAAgB;AACzE,IAAI,cAAc,YAAY,mBAAmB,QAAQ,aAAa,mBAAmB,QAAQ,SAAS,SAAS;AAM5G,SAAS,cAAc;AAC7B,QAAO,IAAI,SAAS,KAAK;AACzB;AAEM,SAAS,gBAAyB;AACxC,QAAO,IAAI,SAAS,KAAK;AACzB;AAEM,SAAS,mBAA4B;AAC3C,QAAO,WAAW,IAAI,eAAe;AACrC;AAEM,SAAS,eAAwB;AACvC,SAAQ,UAAU,QAAQ,IAAI,SAAS,KAAK;AAC5C;AAEM,SAAS,iBAA0B;AACzC,QAAO,UAAU,QAAQ,IAAI,SAAS,KAAK;AAC3C;AAEM,SAAS,WAAoB;AACnC,QAAO;AACP;AAEM,SAAS,SAAkB;AACjC,QAAO,IAAI,SAAS,KAAK;AACzB;AAEM,SAAS,sBAA+B;AAC9C,QAAO,eAAe,QAAQ,gBAAgB,IAAI,SAAS,KAAK,WAAW,IAAI,SAAS,KAAK;AAC7F;AAED,IAAI,QAAQ,qBAAqB,KAAK,UAAU;;;;;;AAOhD,MAAM;AAEC,SAAS,mBAAmB;AAClC,MAAK,kBAAmB;AAExB,MAAK,cAAc,CAClB,OAAM,IAAI,MAAM;AAGjB,KAAI,KACH,OAAM,IAAI,MAAM;AAEjB;AAEM,SAAS,uBAAuB;AACtC,MAAK,kBAAmB;AAExB,MAAK,cAAc,CAClB,OAAM,IAAI,MAAM;AAEjB;AAEM,SAAS,qBAAqB;AACpC,MAAK,kBAAmB;AAExB,MAAK,gBAAgB,CACpB,OAAM,IAAI,MAAM;AAEjB;AASM,SAAS,4BAAqC;AACpD,SAAQ,WAAW;AACnB"}