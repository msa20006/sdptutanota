{"version":3,"file":"ExportFacadeSendDispatcher-B0ubUu3N.js","names":["fileFacade: FileFacade","exportFacade: ExportFacade","file: FileReference","boundingRect: DOMRect","filter?: ReadonlyArray<string>","isFileOnly: boolean","file: FileUri","localFileUri: FileUri","fileNameToUse: string","data: DataFile","fileUrl: string","targetUrl: string","method: HttpMethod","headers: Dict","sourceUrl: FileUri","filename: string","fileUri: FileUri","uriOrPath: string","bundle: MailBundle","fileName: string","fileNames: Array<string>","file: DataFile","path: string","filesUris: ReadonlyArray<string>","uri: string","files: Array<FileUri>","maxChunkSizeBytes: number","transport: NativeInterface","transport: NativeInterface","transport: NativeInterface"],"sources":["../../src/common/native/common/FileApp.ts","../../src/common/native/common/generatedipc/NativePushFacadeSendDispatcher.ts","../../src/common/native/common/generatedipc/FileFacadeSendDispatcher.ts","../../src/common/native/common/generatedipc/ExportFacadeSendDispatcher.ts"],"sourcesContent":["import { promiseMap } from \"@tutao/tutanota-utils\"\nimport { FileReference } from \"../../api/common/utils/FileUtils\"\nimport { DataFile } from \"../../api/common/DataFile\"\nimport { HttpMethod } from \"../../api/common/EntityFunctions\"\nimport { FileFacade } from \"./generatedipc/FileFacade.js\"\nimport { ExportFacade } from \"./generatedipc/ExportFacade.js\"\nimport { DownloadTaskResponse } from \"./generatedipc/DownloadTaskResponse\"\nimport { UploadTaskResponse } from \"./generatedipc/UploadTaskResponse\"\nimport { MailBundle } from \"../../mailFunctionality/SharedMailUtils.js\"\n\nexport type FileUri = string\n\nexport class NativeFileApp {\n\tconstructor(private readonly fileFacade: FileFacade, private readonly exportFacade: ExportFacade) {}\n\n\t/**\n\t * Open the file\n\t * @param file The uri of the file\n\t */\n\topen(file: FileReference): Promise<void> {\n\t\treturn this.fileFacade.open(file.location, file.mimeType)\n\t}\n\n\t/**\n\t * Opens a file chooser to select a file.\n\t * @param boundingRect The file chooser is opened next to the rectangle.\n\t * @param filter an optional list of allowed file extensions\n\t */\n\tasync openFileChooser(boundingRect: DOMRect, filter?: ReadonlyArray<string>, isFileOnly: boolean = false): Promise<Array<FileReference>> {\n\t\t/* The file chooser opens next to a location specified by srcRect on larger devices (iPad).\n\t\t * The rectangle must be specifed using values for x, y, height and width.\n\t\t */\n\t\tconst srcRect = {\n\t\t\tx: Math.round(boundingRect.left),\n\t\t\ty: Math.round(boundingRect.top),\n\t\t\twidth: Math.round(boundingRect.width),\n\t\t\theight: Math.round(boundingRect.height),\n\t\t}\n\t\tconst files = await this.fileFacade.openFileChooser(srcRect, filter ?? null, isFileOnly)\n\t\treturn promiseMap(files, this.uriToFileRef.bind(this))\n\t}\n\n\topenFolderChooser(): Promise<string | null> {\n\t\treturn this.fileFacade.openFolderChooser()\n\t}\n\n\t/**\n\t * Deletes the file.\n\t * @param  file The uri of the file to delete.\n\t */\n\tdeleteFile(file: FileUri): Promise<void> {\n\t\treturn this.fileFacade.deleteFile(file)\n\t}\n\n\t/**\n\t * Returns the name of the file\n\t * @param file The uri of the file\n\t */\n\tgetName(file: FileUri): Promise<string> {\n\t\treturn this.fileFacade.getName(file)\n\t}\n\n\t/**\n\t * Returns the mime type of the file\n\t * @param file The uri of the file\n\t */\n\tgetMimeType(file: FileUri): Promise<string> {\n\t\treturn this.fileFacade.getMimeType(file)\n\t}\n\n\t/**\n\t * Returns the byte size of a file\n\t * @param file The uri of the file\n\t */\n\tgetSize(file: FileUri): Promise<number> {\n\t\treturn this.fileFacade.getSize(file)\n\t}\n\n\t/**\n\t * Copies the file into downloads folder and notifies system and user about that\n\t * @param localFileUri URI for the source file\n\t * @returns {*} absolute path of the destination file\n\t */\n\tputFileIntoDownloadsFolder(localFileUri: FileUri, fileNameToUse: string): Promise<string> {\n\t\treturn this.fileFacade.putFileIntoDownloadsFolder(localFileUri, fileNameToUse)\n\t}\n\n\tasync writeDataFile(data: DataFile): Promise<FileReference> {\n\t\tconst fileUri = await this.fileFacade.writeDataFile(data)\n\t\treturn {\n\t\t\t_type: \"FileReference\",\n\t\t\tname: data.name,\n\t\t\tmimeType: data.mimeType,\n\t\t\tsize: data.size,\n\t\t\tlocation: fileUri,\n\t\t}\n\t}\n\n\t/**\n\t * Uploads the binary data of a file to tutadb\n\t */\n\tupload(fileUrl: string, targetUrl: string, method: HttpMethod, headers: Dict): Promise<UploadTaskResponse> {\n\t\treturn this.fileFacade.upload(fileUrl, targetUrl, method, headers)\n\t}\n\n\t/**\n\t * Downloads the binary data of a file from tutadb and stores it in the internal memory.\n\t * @returns Resolves to the URI of the downloaded file\n\t */\n\tdownload(sourceUrl: FileUri, filename: string, headers: Dict): Promise<DownloadTaskResponse> {\n\t\treturn this.fileFacade.download(sourceUrl, filename, headers)\n\t}\n\n\t/**\n\t * Get the shortened (first six bytes) of the SHA256 of the file.\n\t * @param fileUri\n\t * @return Base64 encoded, shortened SHA256 hash of the file\n\t */\n\thashFile(fileUri: FileUri): Promise<string> {\n\t\treturn this.fileFacade.hashFile(fileUri)\n\t}\n\n\tclearFileData(): Promise<any> {\n\t\treturn this.fileFacade.clearFileData()\n\t}\n\n\t/**\n\t * take a file location in the form of\n\t *   - a uri like file:///home/user/cat.jpg\n\t *   - an absolute file path like C:\\Users\\cat.jpg\n\t * and return a DataFile populated\n\t * with data and metadata of that file on disk.\n\t *\n\t * returns null\n\t *   - if invoked in apps, because they use FileRef, not DataFile\n\t *   - if file can't be opened for any reason\n\t *   - if path is not absolute\n\t */\n\tasync readDataFile(uriOrPath: string): Promise<DataFile | null> {\n\t\treturn this.fileFacade.readDataFile(uriOrPath)\n\t}\n\n\t/**\n\t * Generate an MSG file from the mail bundle and save it in the temp export directory\n\t * @param bundle\n\t * @param fileName\n\t * @returns {Promise<*>}\n\t */\n\tmailToMsg(bundle: MailBundle, fileName: string): Promise<DataFile> {\n\t\treturn this.exportFacade.mailToMsg(bundle, fileName)\n\t}\n\n\t/**\n\t * drag given file names from the temp directory\n\t * @returns {Promise<*>}\n\t * @param fileNames: relative paths to files from the export directory\n\t */\n\tstartNativeDrag(fileNames: Array<string>): Promise<void> {\n\t\treturn this.exportFacade.startNativeDrag(fileNames)\n\t}\n\n\tsaveToExportDir(file: DataFile): Promise<void> {\n\t\treturn this.exportFacade.saveToExportDir(file)\n\t}\n\n\tcheckFileExistsInExportDir(path: string): Promise<boolean> {\n\t\treturn this.exportFacade.checkFileExistsInExportDir(path)\n\t}\n\n\tgetFilesMetaData(filesUris: ReadonlyArray<string>): Promise<Array<FileReference>> {\n\t\treturn promiseMap(filesUris, async (uri) => {\n\t\t\tconst [name, mimeType, size] = await Promise.all([this.getName(uri), this.getMimeType(uri), this.getSize(uri)])\n\t\t\treturn {\n\t\t\t\t_type: \"FileReference\",\n\t\t\t\tname,\n\t\t\t\tmimeType,\n\t\t\t\tsize,\n\t\t\t\tlocation: uri,\n\t\t\t}\n\t\t})\n\t}\n\n\turiToFileRef(uri: string): Promise<FileReference> {\n\t\treturn Promise.all([this.getName(uri), this.getMimeType(uri), this.getSize(uri)]).then(([name, mimeType, size]) => ({\n\t\t\t_type: \"FileReference\",\n\t\t\tname,\n\t\t\tmimeType,\n\t\t\tsize,\n\t\t\tlocation: uri,\n\t\t}))\n\t}\n\n\t/**\n\t * Joins the given files into one single file with a given name. The file is place in the app's temporary decrypted directory.\n\t * @param filename the resulting filename\n\t * @param files The files to join.\n\t *\n\t */\n\tjoinFiles(filename: string, files: Array<FileUri>): Promise<FileUri> {\n\t\treturn this.fileFacade.joinFiles(filename, files)\n\t}\n\n\t/**\n\t * Splits the given file into chunks of the given maximum size. The chunks will be placed in the temporary decrypted directory.\n\t * @param fileUri\n\t * @param maxChunkSizeBytes\n\t */\n\tasync splitFile(fileUri: FileUri, maxChunkSizeBytes: number): Promise<ReadonlyArray<FileUri>> {\n\t\treturn this.fileFacade.splitFile(fileUri, maxChunkSizeBytes)\n\t}\n}\n","/* generated file, don't edit. */\n\nimport { NativePushFacade } from \"./NativePushFacade.js\"\n\ninterface NativeInterface {\n\tinvokeNative(requestType: string, args: unknown[]): Promise<any>\n}\nexport class NativePushFacadeSendDispatcher implements NativePushFacade {\n\tconstructor(private readonly transport: NativeInterface) {}\n\tasync getPushIdentifier(...args: Parameters<NativePushFacade[\"getPushIdentifier\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"NativePushFacade\", \"getPushIdentifier\", ...args])\n\t}\n\tasync storePushIdentifierLocally(...args: Parameters<NativePushFacade[\"storePushIdentifierLocally\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"NativePushFacade\", \"storePushIdentifierLocally\", ...args])\n\t}\n\tasync removeUser(...args: Parameters<NativePushFacade[\"removeUser\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"NativePushFacade\", \"removeUser\", ...args])\n\t}\n\tasync initPushNotifications(...args: Parameters<NativePushFacade[\"initPushNotifications\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"NativePushFacade\", \"initPushNotifications\", ...args])\n\t}\n\tasync closePushNotifications(...args: Parameters<NativePushFacade[\"closePushNotifications\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"NativePushFacade\", \"closePushNotifications\", ...args])\n\t}\n\tasync scheduleAlarms(...args: Parameters<NativePushFacade[\"scheduleAlarms\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"NativePushFacade\", \"scheduleAlarms\", ...args])\n\t}\n\tasync invalidateAlarmsForUser(...args: Parameters<NativePushFacade[\"invalidateAlarmsForUser\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"NativePushFacade\", \"invalidateAlarmsForUser\", ...args])\n\t}\n\tasync setExtendedNotificationConfig(...args: Parameters<NativePushFacade[\"setExtendedNotificationConfig\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"NativePushFacade\", \"setExtendedNotificationConfig\", ...args])\n\t}\n\tasync getExtendedNotificationConfig(...args: Parameters<NativePushFacade[\"getExtendedNotificationConfig\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"NativePushFacade\", \"getExtendedNotificationConfig\", ...args])\n\t}\n\tasync setReceiveCalendarNotificationConfig(...args: Parameters<NativePushFacade[\"setReceiveCalendarNotificationConfig\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"NativePushFacade\", \"setReceiveCalendarNotificationConfig\", ...args])\n\t}\n\tasync getReceiveCalendarNotificationConfig(...args: Parameters<NativePushFacade[\"getReceiveCalendarNotificationConfig\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"NativePushFacade\", \"getReceiveCalendarNotificationConfig\", ...args])\n\t}\n}\n","/* generated file, don't edit. */\n\nimport { FileFacade } from \"./FileFacade.js\"\n\ninterface NativeInterface {\n\tinvokeNative(requestType: string, args: unknown[]): Promise<any>\n}\nexport class FileFacadeSendDispatcher implements FileFacade {\n\tconstructor(private readonly transport: NativeInterface) {}\n\tasync open(...args: Parameters<FileFacade[\"open\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"open\", ...args])\n\t}\n\tasync openFileChooser(...args: Parameters<FileFacade[\"openFileChooser\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"openFileChooser\", ...args])\n\t}\n\tasync openFolderChooser(...args: Parameters<FileFacade[\"openFolderChooser\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"openFolderChooser\", ...args])\n\t}\n\tasync deleteFile(...args: Parameters<FileFacade[\"deleteFile\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"deleteFile\", ...args])\n\t}\n\tasync getName(...args: Parameters<FileFacade[\"getName\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"getName\", ...args])\n\t}\n\tasync getMimeType(...args: Parameters<FileFacade[\"getMimeType\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"getMimeType\", ...args])\n\t}\n\tasync getSize(...args: Parameters<FileFacade[\"getSize\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"getSize\", ...args])\n\t}\n\tasync putFileIntoDownloadsFolder(...args: Parameters<FileFacade[\"putFileIntoDownloadsFolder\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"putFileIntoDownloadsFolder\", ...args])\n\t}\n\tasync upload(...args: Parameters<FileFacade[\"upload\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"upload\", ...args])\n\t}\n\tasync download(...args: Parameters<FileFacade[\"download\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"download\", ...args])\n\t}\n\tasync hashFile(...args: Parameters<FileFacade[\"hashFile\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"hashFile\", ...args])\n\t}\n\tasync clearFileData(...args: Parameters<FileFacade[\"clearFileData\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"clearFileData\", ...args])\n\t}\n\tasync joinFiles(...args: Parameters<FileFacade[\"joinFiles\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"joinFiles\", ...args])\n\t}\n\tasync splitFile(...args: Parameters<FileFacade[\"splitFile\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"splitFile\", ...args])\n\t}\n\tasync writeDataFile(...args: Parameters<FileFacade[\"writeDataFile\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"writeDataFile\", ...args])\n\t}\n\tasync readDataFile(...args: Parameters<FileFacade[\"readDataFile\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"FileFacade\", \"readDataFile\", ...args])\n\t}\n}\n","/* generated file, don't edit. */\n\nimport { ExportFacade } from \"./ExportFacade.js\"\n\ninterface NativeInterface {\n\tinvokeNative(requestType: string, args: unknown[]): Promise<any>\n}\nexport class ExportFacadeSendDispatcher implements ExportFacade {\n\tconstructor(private readonly transport: NativeInterface) {}\n\tasync mailToMsg(...args: Parameters<ExportFacade[\"mailToMsg\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"ExportFacade\", \"mailToMsg\", ...args])\n\t}\n\tasync saveToExportDir(...args: Parameters<ExportFacade[\"saveToExportDir\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"ExportFacade\", \"saveToExportDir\", ...args])\n\t}\n\tasync startNativeDrag(...args: Parameters<ExportFacade[\"startNativeDrag\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"ExportFacade\", \"startNativeDrag\", ...args])\n\t}\n\tasync checkFileExistsInExportDir(...args: Parameters<ExportFacade[\"checkFileExistsInExportDir\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"ExportFacade\", \"checkFileExistsInExportDir\", ...args])\n\t}\n\tasync getMailboxExportState(...args: Parameters<ExportFacade[\"getMailboxExportState\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"ExportFacade\", \"getMailboxExportState\", ...args])\n\t}\n\tasync endMailboxExport(...args: Parameters<ExportFacade[\"endMailboxExport\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"ExportFacade\", \"endMailboxExport\", ...args])\n\t}\n\tasync startMailboxExport(...args: Parameters<ExportFacade[\"startMailboxExport\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"ExportFacade\", \"startMailboxExport\", ...args])\n\t}\n\tasync saveMailboxExport(...args: Parameters<ExportFacade[\"saveMailboxExport\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"ExportFacade\", \"saveMailboxExport\", ...args])\n\t}\n\tasync clearExportState(...args: Parameters<ExportFacade[\"clearExportState\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"ExportFacade\", \"clearExportState\", ...args])\n\t}\n\tasync openExportDirectory(...args: Parameters<ExportFacade[\"openExportDirectory\"]>) {\n\t\treturn this.transport.invokeNative(\"ipc\", [\"ExportFacade\", \"openExportDirectory\", ...args])\n\t}\n}\n"],"mappings":"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"}