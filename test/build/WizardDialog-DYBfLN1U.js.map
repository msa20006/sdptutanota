{"version":3,"file":"WizardDialog-DYBfLN1U.js","names":["dom: HTMLElement | null","eventType: WizardEventType","vnode: VnodeDOM<WizardDialogAttrs<T>>","dom: HTMLElement","e: Event","vnode: Vnode<WizardDialogAttrs<T>>","vnode","index","isPreviousPage: boolean","component: Class<Component<A>>","attributes: A","data: T","pages: ReadonlyArray<WizardPageWrapper<T>>","cancelButtonText: TranslationKey | null","closeAction?: () => Promise<void>","backButtonAttrs: ButtonAttrs","skipButtonAttrs: ButtonAttrs","source: DialogHeaderBarAttrs","targetIndex: number","pageIndex: number","selectedPageIndex: number","vnode: Vnode<WizardPagingButtonAttrs>","isSelectedPage: boolean","closeAction: (() => $Promisable<void>) | null","dialogType: DialogType.EditLarge | DialogType.EditSmall","view: () => Children","child: Component","closeAction: () => Promise<void>"],"sources":["../../src/common/gui/base/WizardDialog.ts"],"sourcesContent":["import m, { Children, Component, Vnode, VnodeDOM } from \"mithril\"\nimport { Dialog, DialogType } from \"./Dialog\"\nimport type { ButtonAttrs } from \"./Button.js\"\nimport { ButtonType } from \"./Button.js\"\nimport { Icons } from \"./icons/Icons\"\nimport { Icon, IconSize } from \"./Icon\"\nimport { theme } from \"../theme\"\nimport { lang, MaybeTranslation, TranslationKey } from \"../../misc/LanguageViewModel\"\nimport type { DialogHeaderBarAttrs } from \"./DialogHeaderBar\"\nimport { Keys, TabIndex } from \"../../api/common/TutanotaConstants\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { $Promisable } from \"@tutao/tutanota-utils\"\nimport { windowFacade } from \"../../misc/WindowFacade.js\"\n\nassertMainOrNode()\n\nexport interface WizardPageAttrs<T> {\n\t/** Title of the page that is shown in the header bar of the WizardDialog*/\n\theaderTitle(): MaybeTranslation\n\n\t/** Action that needs to be executed before switching to the next page.\n\t * @return true if the action was successful and the next page can be shown, false otherwise.\n\t **/\n\tnextAction(showErrorDialog: boolean): Promise<boolean>\n\n\t/**\n\t * Checks if the page can be skipped.\n\t */\n\tisSkipAvailable(): boolean\n\n\t/**\n\t * Checks if the page is enabled and can be displayed.\n\t */\n\tisEnabled(): boolean\n\n\t/**\n\t * The actual data, which is the same for the entire wizard needs to be also accessible to each page\n\t */\n\treadonly data: T\n\n\t/**\n\t * Indicates that it should not be possible to select any earlier stage than this one, once reached. If not set or false, it is possible to go back\n\t */\n\treadonly preventGoBack?: boolean\n\n\t/**\n\t * if set to true, all paging buttons will be hidden for this page\n\t */\n\treadonly hideAllPagingButtons?: boolean\n\n\t/**\n\t * if this is true the paging button (button with the number) is hidden for this specific wizard page\n\t */\n\treadonly hidePagingButtonForPage?: boolean\n}\n\nexport type WizardPageN<T> = Component<WizardPageAttrs<T>>\n\nexport const enum WizardEventType {\n\tSHOW_NEXT_PAGE = \"showNextWizardDialogPage\",\n\tSHOW_PREVIOUS_PAGE = \"showPreviousWizardDialogPage\",\n\tCLOSE_DIALOG = \"closeWizardDialog\",\n}\n\n// A WizardPage dispatches this event to inform the parent WizardDialogN to close the dialog\nexport function emitWizardEvent(dom: HTMLElement | null, eventType: WizardEventType) {\n\tif (dom) {\n\t\tconst event = new Event(eventType, {\n\t\t\tbubbles: true,\n\t\t\tcancelable: true,\n\t\t})\n\t\tdom.dispatchEvent(event)\n\t}\n}\n\nclass WizardDialog<T> implements Component<WizardDialogAttrs<T>> {\n\tprivate _closeWizardDialogListener!: EventListener\n\tprivate _showNextWizardDialogPageListener!: EventListener\n\tprivate _showPreviousWizardDialogPageListener!: EventListener\n\tprivate wizardContentDom: HTMLElement | null = null // we need the wizard content dom to scroll to the top when redirecting to the next page\n\n\toncreate(vnode: VnodeDOM<WizardDialogAttrs<T>>) {\n\t\t// We listen for events triggered by the child WizardPages to close the dialog or show the next page\n\t\tconst dom: HTMLElement = vnode.dom as HTMLElement\n\n\t\tthis._closeWizardDialogListener = (e: Event) => {\n\t\t\te.stopPropagation()\n\t\t\tvnode.attrs.closeAction()\n\t\t}\n\n\t\tthis._showNextWizardDialogPageListener = (e: Event) => {\n\t\t\te.stopPropagation()\n\n\t\t\tif (vnode.attrs.currentPage) {\n\t\t\t\tvnode.attrs.currentPage.attrs.nextAction(true).then((ready) => {\n\t\t\t\t\tif (ready) {\n\t\t\t\t\t\tvnode.attrs.goToNextPageOrCloseWizard()\n\t\t\t\t\t\tthis.wizardContentDom?.scrollIntoView()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tthis._showPreviousWizardDialogPageListener = (e: Event) => {\n\t\t\te.stopPropagation()\n\n\t\t\tif (!vnode.attrs.currentPage?.attrs.preventGoBack) {\n\t\t\t\tvnode.attrs.goToPreviousPageOrClose()\n\t\t\t\tthis.wizardContentDom?.scrollIntoView()\n\t\t\t}\n\t\t}\n\n\t\tdom.addEventListener(WizardEventType.CLOSE_DIALOG, this._closeWizardDialogListener)\n\t\tdom.addEventListener(WizardEventType.SHOW_NEXT_PAGE, this._showNextWizardDialogPageListener)\n\t\tdom.addEventListener(WizardEventType.SHOW_PREVIOUS_PAGE, this._showPreviousWizardDialogPageListener)\n\t}\n\n\tonremove(vnode: VnodeDOM<WizardDialogAttrs<T>>) {\n\t\tconst dom: HTMLElement = vnode.dom as HTMLElement\n\t\tif (this._closeWizardDialogListener) dom.removeEventListener(WizardEventType.CLOSE_DIALOG, this._closeWizardDialogListener)\n\t\tif (this._showNextWizardDialogPageListener) dom.removeEventListener(WizardEventType.SHOW_NEXT_PAGE, this._showNextWizardDialogPageListener)\n\t\tif (this._showPreviousWizardDialogPageListener) dom.removeEventListener(WizardEventType.SHOW_PREVIOUS_PAGE, this._showPreviousWizardDialogPageListener)\n\t}\n\n\tview(vnode: Vnode<WizardDialogAttrs<T>>) {\n\t\tconst a = vnode.attrs\n\t\tconst enabledPages = a._getEnabledPages()\n\t\tconst selectedIndex = a.currentPage ? enabledPages.indexOf(a.currentPage) : -1\n\t\tconst visiblePages = enabledPages.filter((page) => !page.attrs.hidePagingButtonForPage)\n\t\tconst lastIndex = visiblePages.length - 1\n\n\t\treturn m(\n\t\t\t\"#wizardDialogContent.pt\",\n\t\t\t{\n\t\t\t\toncreate: (vnode) => {\n\t\t\t\t\tthis.wizardContentDom = vnode.dom as HTMLElement\n\t\t\t\t},\n\t\t\t},\n\t\t\t[\n\t\t\t\ta.currentPage && a.currentPage.attrs.hideAllPagingButtons\n\t\t\t\t\t? null\n\t\t\t\t\t: m(\n\t\t\t\t\t\t\t\"nav#wizard-paging.flex-space-around.center-vertically.mb-s.plr-2l\",\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"aria-label\": \"Breadcrumb\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvisiblePages.map((p, index) => [\n\t\t\t\t\t\t\t\tm(WizardPagingButton, {\n\t\t\t\t\t\t\t\t\tpageIndex: index,\n\t\t\t\t\t\t\t\t\tgetSelectedPageIndex: () => selectedIndex,\n\t\t\t\t\t\t\t\t\tisClickable: () => a.allowedToVisitPage(index, selectedIndex),\n\t\t\t\t\t\t\t\t\tnavigateBackHandler: (index) => a._goToPageAction(index),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tindex === lastIndex ? null : m(\".flex-grow\", { class: this.getLineClass(index < selectedIndex) }),\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t  ),\n\t\t\t\ta.currentPage ? a.currentPage.view() : null,\n\t\t\t],\n\t\t)\n\t}\n\n\tprivate getLineClass(isPreviousPage: boolean) {\n\t\tif (isPreviousPage) {\n\t\t\treturn \"wizard-breadcrumb-line-active\"\n\t\t} else {\n\t\t\treturn \"wizard-breadcrumb-line\"\n\t\t}\n\t}\n}\n\n/**\n * Pair of attrs and component for those attrs\n * We care about these properties:\n * It has WizardPageAttrs for T\n * A is consistent with the component\n *\n * When we use the wrapper we don't care about specific type of attrs or component.\n */\n\nexport interface WizardPageWrapper<T> {\n\treadonly attrs: WizardPageAttrs<T>\n\treadonly view: () => Children\n}\n\nexport function wizardPageWrapper<T, A extends WizardPageAttrs<T>>(component: Class<Component<A>>, attributes: A): WizardPageWrapper<T> {\n\treturn {\n\t\tattrs: attributes,\n\t\tview: () => m(component, attributes),\n\t}\n}\n\nclass WizardDialogAttrs<T> {\n\treadonly data: T\n\tpages: ReadonlyArray<WizardPageWrapper<T>>\n\tcurrentPage: WizardPageWrapper<T> | null\n\tcloseAction: () => Promise<void>\n\tcancelButtonText: TranslationKey\n\tprivate _headerBarAttrs: DialogHeaderBarAttrs = {}\n\n\tget headerBarAttrs(): DialogHeaderBarAttrs {\n\t\treturn this._headerBarAttrs\n\t}\n\n\t// Idea for refactoring: make optional parameters into separate object\n\tconstructor(data: T, pages: ReadonlyArray<WizardPageWrapper<T>>, cancelButtonText: TranslationKey | null = null, closeAction?: () => Promise<void>) {\n\t\tthis.data = data\n\t\tthis.pages = pages\n\t\tthis.currentPage = pages.find((p) => p.attrs.isEnabled()) ?? null\n\t\tthis.closeAction = closeAction\n\t\t\t? () => closeAction()\n\t\t\t: () => {\n\t\t\t\t\treturn Promise.resolve()\n\t\t\t  }\n\t\tthis.cancelButtonText = cancelButtonText ?? \"cancel_action\"\n\t\tthis.updateHeaderBarAttrs()\n\t}\n\n\tgoToPreviousPageOrClose(): void {\n\t\tlet currentPageIndex = this.currentPage ? this._getEnabledPages().indexOf(this.currentPage) : -1\n\n\t\tif (!this.allowedToVisitPage(currentPageIndex - 1, currentPageIndex)) return\n\n\t\tif (currentPageIndex > 0) {\n\t\t\tthis._goToPageAction(currentPageIndex - 1)\n\n\t\t\tm.redraw()\n\t\t} else {\n\t\t\tthis.closeAction()\n\t\t}\n\t}\n\n\tupdateHeaderBarAttrs<T>(): void {\n\t\tlet currentPageIndex = this.currentPage ? this._getEnabledPages().indexOf(this.currentPage) : -1\n\n\t\tconst backButtonAttrs: ButtonAttrs = {\n\t\t\tlabel: currentPageIndex === 0 ? this.cancelButtonText : \"back_action\",\n\t\t\tclick: () => this.goToPreviousPageOrClose(),\n\t\t\ttype: ButtonType.Secondary,\n\t\t}\n\t\tconst skipButtonAttrs: ButtonAttrs = {\n\t\t\tlabel: \"skip_action\",\n\t\t\tclick: () => this.goToNextPageOrCloseWizard(),\n\t\t\ttype: ButtonType.Secondary,\n\t\t}\n\n\t\t// the wizard dialog has a reference to this._headerBarAttrs -> changing this object changes the dialog\n\t\tlet source: DialogHeaderBarAttrs = {\n\t\t\tleft: currentPageIndex >= 0 && this.allowedToVisitPage(currentPageIndex - 1, currentPageIndex) ? [backButtonAttrs] : [],\n\t\t\tright: () =>\n\t\t\t\tthis.currentPage &&\n\t\t\t\tthis.currentPage.attrs.isSkipAvailable() &&\n\t\t\t\tthis._getEnabledPages().indexOf(this.currentPage) !== this._getEnabledPages().length - 1\n\t\t\t\t\t? [skipButtonAttrs]\n\t\t\t\t\t: [],\n\t\t\tmiddle: this.currentPage ? this.currentPage.attrs.headerTitle() : \"emptyString_msg\",\n\t\t}\n\t\tObject.assign(this._headerBarAttrs, source)\n\t}\n\n\t_getEnabledPages(): Array<WizardPageWrapper<T>> {\n\t\treturn this.pages.filter((p) => p.attrs.isEnabled())\n\t}\n\n\t_goToPageAction(targetIndex: number): void {\n\t\tconst pages = this._getEnabledPages()\n\n\t\tthis.currentPage = pages[targetIndex]\n\t\tthis.updateHeaderBarAttrs()\n\t}\n\n\tgoToNextPageOrCloseWizard() {\n\t\tconst pages = this._getEnabledPages()\n\n\t\tconst currentIndex = this.currentPage ? pages.indexOf(this.currentPage) : -1\n\t\tconst lastIndex = pages.length - 1\n\t\tlet finalAction = currentIndex === lastIndex\n\n\t\tif (finalAction) {\n\t\t\tthis.closeAction()\n\t\t} else {\n\t\t\tthis._goToPageAction(currentIndex < lastIndex ? currentIndex + 1 : lastIndex)\n\t\t}\n\t}\n\n\t/** returns whether it is allowed to visit the page specified by pageIndex depending on selectedPageIndex */\n\tallowedToVisitPage(pageIndex: number, selectedPageIndex: number): boolean {\n\t\tif (pageIndex < 0 || selectedPageIndex < 0) {\n\t\t\treturn true // invalid values -> should not restrict here\n\t\t}\n\t\tconst enabledPages = this._getEnabledPages()\n\t\t// page is only allowed to be visited if it was already visited and there is no later page that was already visited and does not allow to go back\n\t\treturn (\n\t\t\tpageIndex < selectedPageIndex &&\n\t\t\t!enabledPages\n\t\t\t\t.filter((page, index) => {\n\t\t\t\t\treturn index > pageIndex && index <= selectedPageIndex\n\t\t\t\t})\n\t\t\t\t.some((page) => page.attrs.preventGoBack)\n\t\t)\n\t}\n}\n\ntype WizardPagingButtonAttrs = {\n\tpageIndex: number\n\tgetSelectedPageIndex: () => number\n\tisClickable: () => boolean\n\tnavigateBackHandler: (pageIndex: number) => void\n}\n\n//exported for old-style WizardDialog.js\nexport class WizardPagingButton {\n\tview(vnode: Vnode<WizardPagingButtonAttrs>): Children {\n\t\tconst selectedPageIndex = vnode.attrs.getSelectedPageIndex()\n\t\tconst pageIndex = vnode.attrs.pageIndex\n\t\tconst isClickable = vnode.attrs.isClickable()\n\t\tconst nextIndex = (pageIndex + 1).toString()\n\t\tconst isSelectedPage = selectedPageIndex === pageIndex\n\t\tconst isPreviousPage = pageIndex < selectedPageIndex\n\n\t\treturn m(\n\t\t\t\"button.button-icon.flex-center.items-center\",\n\t\t\t{\n\t\t\t\ttabIndex: isClickable ? TabIndex.Default : TabIndex.Programmatic,\n\t\t\t\t\"aria-disabled\": isClickable.toString(),\n\t\t\t\t\"aria-label\": isClickable ? lang.get(\"previous_action\") : nextIndex,\n\t\t\t\t\"aria-current\": isSelectedPage ? \"step\" : \"false\",\n\t\t\t\t\"aria-live\": isSelectedPage ? \"polite\" : \"off\",\n\t\t\t\tclass: this.getClass(isSelectedPage, isPreviousPage),\n\t\t\t\tstyle: {\n\t\t\t\t\tcursor: isClickable ? \"pointer\" : \"auto\",\n\t\t\t\t},\n\t\t\t\tonclick: () => {\n\t\t\t\t\tif (isClickable) {\n\t\t\t\t\t\tvnode.attrs.navigateBackHandler(pageIndex)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tisPreviousPage\n\t\t\t\t? m(Icon, {\n\t\t\t\t\t\ticon: Icons.Checkmark,\n\t\t\t\t\t\tsize: IconSize.Medium,\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tfill: theme.content_bg,\n\t\t\t\t\t\t},\n\t\t\t\t  })\n\t\t\t\t: nextIndex,\n\t\t)\n\t}\n\n\t// Apply the correct styling based on the current page number\n\tprivate getClass(isSelectedPage: boolean, isPreviousPage: boolean) {\n\t\tif (isSelectedPage) {\n\t\t\treturn \"wizard-breadcrumb-active\"\n\t\t} else if (isPreviousPage) {\n\t\t\treturn \"wizard-breadcrumb-previous\"\n\t\t} else {\n\t\t\treturn \"wizard-breadcrumb\"\n\t\t}\n\t}\n}\n\nexport type WizardDialogAttrsBuilder<T> = {\n\tdialog: Dialog\n\tattrs: WizardDialogAttrs<T>\n}\n\n// Use to generate a new wizard\nexport function createWizardDialog<T>(\n\tdata: T,\n\tpages: ReadonlyArray<WizardPageWrapper<T>>,\n\tcloseAction: (() => $Promisable<void>) | null = null,\n\tdialogType: DialogType.EditLarge | DialogType.EditSmall,\n\tcancelButtonText: TranslationKey | null = null,\n): WizardDialogAttrsBuilder<T> {\n\t// We need the close action of the dialog before we can create the proper attributes\n\n\tlet view: () => Children = () => null\n\n\tconst child: Component = {\n\t\tview: () => view(),\n\t}\n\tconst unregisterCloseListener = windowFacade.addWindowCloseListener(() => {})\n\tconst closeActionWrapper = async () => {\n\t\tif (closeAction) {\n\t\t\tawait closeAction()\n\t\t}\n\t\twizardDialog.close()\n\t\tunregisterCloseListener()\n\t}\n\tconst wizardDialogAttrs = new WizardDialogAttrs(data, pages, cancelButtonText, closeActionWrapper)\n\tconst wizardDialog =\n\t\tdialogType === DialogType.EditLarge\n\t\t\t? Dialog.largeDialog(wizardDialogAttrs.headerBarAttrs, child)\n\t\t\t: Dialog.editSmallDialog(wizardDialogAttrs.headerBarAttrs, () => m(child))\n\n\tview = () => m(WizardDialog, wizardDialogAttrs)\n\twizardDialog\n\t\t.addShortcut({\n\t\t\tkey: Keys.ESC,\n\t\t\texec: () => {\n\t\t\t\tconfirmThenCleanup(() => wizardDialogAttrs.closeAction())\n\t\t\t},\n\t\t\thelp: \"close_alt\",\n\t\t})\n\t\t.setCloseHandler(() => {\n\t\t\t// the dialogs popState handler will return false which prevents the wizard from being closed\n\t\t\t// we then close the wizard manually if the user confirms\n\t\t\tconfirmThenCleanup(() => wizardDialogAttrs.closeAction())\n\t\t})\n\n\treturn {\n\t\tdialog: wizardDialog,\n\t\tattrs: wizardDialogAttrs,\n\t}\n}\n\nasync function confirmThenCleanup(closeAction: () => Promise<void>) {\n\tconst confirmed = await Dialog.confirm(\"closeWindowConfirmation_msg\")\n\tif (confirmed) {\n\t\tcloseAction()\n\t}\n}\n"],"mappings":"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"}