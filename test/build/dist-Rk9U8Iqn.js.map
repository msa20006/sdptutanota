{"version":3,"file":"dist-Rk9U8Iqn.js","names":["ExtendableError"],"sources":["../../packages/tutanota-error/dist/TutanotaError.js"],"sourcesContent":["/**\n * Base class for all errors in Tutanota. Provides the handling of error stacks for chrome (captureStackTrace) and others.\n * Implemented using ES5 inheritance as babel does not support extending builtin types\n * @see http://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node\n *\n * Note that passing errors between worker and main thread requires all fields of the error to be serializable.\n * Currently those are name, message, stack and data. See (errorToObj() and objToError()).\n *\n * In order to correctly set the class type of the error after deserialization\n * (needed for e instanceof CustomError to work), the error class needs to be\n * added to the ErrorNameToType map in Utils.js.\n */\nconst ExtendableErrorF = function ExtendableError(...args) {\n    // @ts-ignore\n    Error.apply(this, args);\n};\n// Warning: huge type hack\n// You can't import downcast here\nExtendableErrorF.prototype = Object.create(Error.prototype);\n// @ts-ignore\nconst ExtendableError = ExtendableErrorF;\nexport class TutanotaError extends ExtendableError {\n    name;\n    message;\n    constructor(name, message) {\n        super(message);\n        this.name = name;\n        this.message = message;\n        if (typeof Error.captureStackTrace === \"function\") {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        else {\n            let error = new Error();\n            if (!error.stack) {\n                // fill the stack trace on ios devices\n                try {\n                    throw error;\n                }\n                catch (e) {\n                    /* empty */\n                }\n            }\n            this.stack = this.name + \". \" + this.message;\n            if (error.stack) {\n                // not existing in IE9\n                let stackLines = error.stack.split(\"\\n\");\n                while (stackLines[0] && !stackLines[0].match(this.name)) {\n                    stackLines = stackLines.slice(1); // removes line from stack\n                }\n                if (stackLines.length === 0) {\n                    this.stack = error.stack;\n                }\n                else {\n                    this.stack += \"\\n\" + stackLines.join(\"\\n\");\n                }\n            }\n        }\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,MAAM,mBAAmB,SAASA,kBAAgB,GAAG,MAAM;AAEvD,OAAM,MAAM,MAAM,KAAK;AAC1B;AAGD,iBAAiB,YAAY,OAAO,OAAO,MAAM,UAAU;AAE3D,MAAM,kBAAkB;IACX,gBAAN,cAA4B,gBAAgB;CAC/C;CACA;CACA,YAAY,MAAM,SAAS;AACvB,QAAM,QAAQ;AACd,OAAK,OAAO;AACZ,OAAK,UAAU;AACf,aAAW,MAAM,sBAAsB,WACnC,OAAM,kBAAkB,MAAM,KAAK,YAAY;KAE9C;GACD,IAAI,QAAQ,IAAI;AAChB,QAAK,MAAM,MAEP,KAAI;AACA,UAAM;GACT,SACM,GAAG,CAET;AAEL,QAAK,QAAQ,KAAK,OAAO,OAAO,KAAK;AACrC,OAAI,MAAM,OAAO;IAEb,IAAI,aAAa,MAAM,MAAM,MAAM,KAAK;AACxC,WAAO,WAAW,OAAO,WAAW,GAAG,MAAM,KAAK,KAAK,CACnD,cAAa,WAAW,MAAM,EAAE;AAEpC,QAAI,WAAW,WAAW,EACtB,MAAK,QAAQ,MAAM;IAGnB,MAAK,SAAS,OAAO,WAAW,KAAK,KAAK;GAEjD;EACJ;CACJ;AACJ"}