{"version":3,"file":"AddNotificationEmailDialog-BPpUA5tG.js","names":["logins: LoginController","entityClient: EntityClient","dialog: Dialog","mailAddress: string","user: User","emailAddress: string"],"sources":["../../src/mail-app/settings/AddNotificationEmailDialog.ts"],"sourcesContent":["import { createPushIdentifier, User } from \"../../common/api/entities/sys/TypeRefs.js\"\nimport { showNotAvailableForFreeDialog } from \"../../common/misc/SubscriptionDialogs.js\"\nimport { Dialog } from \"../../common/gui/base/Dialog.js\"\nimport { lang, type TranslationKey } from \"../../common/misc/LanguageViewModel.js\"\nimport m from \"mithril\"\nimport { TextField, TextFieldType } from \"../../common/gui/base/TextField.js\"\nimport { assertNotNull } from \"@tutao/tutanota-utils\"\nimport { getCleanedMailAddress } from \"../../common/misc/parsing/MailAddressParser.js\"\nimport { PushServiceType } from \"../../common/api/common/TutanotaConstants.js\"\nimport { showProgressDialog } from \"../../common/gui/dialogs/ProgressDialog.js\"\nimport { LoginController } from \"../../common/api/main/LoginController.js\"\nimport { EntityClient } from \"../../common/api/common/EntityClient.js\"\nimport { AppType } from \"../../common/misc/ClientConstants.js\"\n\nexport class AddNotificationEmailDialog {\n\tconstructor(private readonly logins: LoginController, private readonly entityClient: EntityClient) {}\n\n\tshow() {\n\t\tif (this.logins.getUserController().isFreeAccount()) {\n\t\t\tshowNotAvailableForFreeDialog()\n\t\t} else {\n\t\t\tlet mailAddress = \"\"\n\n\t\t\tDialog.showActionDialog({\n\t\t\t\ttitle: \"notificationSettings_action\",\n\t\t\t\tchild: {\n\t\t\t\t\tview: () => [\n\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\tlabel: \"mailAddress_label\",\n\t\t\t\t\t\t\tvalue: mailAddress,\n\t\t\t\t\t\t\ttype: TextFieldType.Email,\n\t\t\t\t\t\t\toninput: (newValue) => (mailAddress = newValue),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tm(\".small.mt-s\", lang.get(\"emailPushNotification_msg\")),\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tvalidator: () => this.validateAddNotificationEmailAddressInput(mailAddress),\n\t\t\t\tallowOkWithReturn: true,\n\t\t\t\tokAction: (dialog: Dialog) => {\n\t\t\t\t\tthis.createNotificationEmail(mailAddress, this.logins.getUserController().user)\n\t\t\t\t\tdialog.close()\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t}\n\n\tprivate createNotificationEmail(mailAddress: string, user: User) {\n\t\tconst pushIdentifier = createPushIdentifier({\n\t\t\t_area: \"0\", // legacy\n\t\t\t_owner: user.userGroup.group, // legacy\n\t\t\t_ownerGroup: user.userGroup.group,\n\t\t\tdisplayName: lang.get(\"adminEmailSettings_action\"),\n\t\t\tidentifier: assertNotNull(getCleanedMailAddress(mailAddress)),\n\t\t\tlanguage: lang.code,\n\t\t\tpushServiceType: PushServiceType.EMAIL,\n\t\t\tlastUsageTime: new Date(),\n\t\t\tlastNotificationDate: null,\n\t\t\tdisabled: false,\n\t\t\tapp: AppType.Mail, // Calendar app doesn't receive mail notifications\n\t\t})\n\n\t\tshowProgressDialog(\"pleaseWait_msg\", this.entityClient.setup(assertNotNull(user.pushIdentifierList).list, pushIdentifier))\n\t}\n\n\tprivate validateAddNotificationEmailAddressInput(emailAddress: string): TranslationKey | null {\n\t\treturn getCleanedMailAddress(emailAddress) == null ? \"mailAddressInvalid_msg\" : null // TODO check if it is a Tutanota mail address\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAca,6BAAN,MAAiC;CACvC,YAA6BA,QAA0CC,cAA4B;EAqDnG,KArD6B;EAqD5B,KArDsE;CAA8B;CAErG,OAAO;AACN,MAAI,KAAK,OAAO,mBAAmB,CAAC,eAAe,CAClD,gCAA+B;KACzB;GACN,IAAI,cAAc;AAElB,UAAO,iBAAiB;IACvB,OAAO;IACP,OAAO,EACN,MAAM,MAAM,CACX,gBAAE,WAAW;KACZ,OAAO;KACP,OAAO;KACP,MAAM,cAAc;KACpB,SAAS,CAAC,aAAc,cAAc;IACtC,EAAC,EACF,gBAAE,eAAe,KAAK,IAAI,4BAA4B,CAAC,AACvD,EACD;IACD,WAAW,MAAM,KAAK,yCAAyC,YAAY;IAC3E,mBAAmB;IACnB,UAAU,CAACC,WAAmB;AAC7B,UAAK,wBAAwB,aAAa,KAAK,OAAO,mBAAmB,CAAC,KAAK;AAC/E,YAAO,OAAO;IACd;GACD,EAAC;EACF;CACD;CAED,AAAQ,wBAAwBC,aAAqBC,MAAY;EAChE,MAAM,iBAAiB,qBAAqB;GAC3C,OAAO;GACP,QAAQ,KAAK,UAAU;GACvB,aAAa,KAAK,UAAU;GAC5B,aAAa,KAAK,IAAI,4BAA4B;GAClD,YAAY,cAAc,sBAAsB,YAAY,CAAC;GAC7D,UAAU,KAAK;GACf,iBAAiB,gBAAgB;GACjC,eAAe,IAAI;GACnB,sBAAsB;GACtB,UAAU;GACV,KAAK,QAAQ;EACb,EAAC;AAEF,qBAAmB,kBAAkB,KAAK,aAAa,MAAM,cAAc,KAAK,mBAAmB,CAAC,MAAM,eAAe,CAAC;CAC1H;CAED,AAAQ,yCAAyCC,cAA6C;AAC7F,SAAO,sBAAsB,aAAa,IAAI,OAAO,2BAA2B;CAChF;AACD"}