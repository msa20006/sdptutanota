{"version":3,"file":"nodemocker-Bh_RUICG.js","names":["old: string","replacer: any","props: string[]","obj: T","anyObj: any","template: { prototype: object; statics: object }","newPlatform: string","adder: B","obj: B"],"sources":["../tests/nodemocker.ts"],"sourcesContent":["/**\n * @fileoverview This is an old homebrew mocking attempt. This is depreacted. Please use testdouble instead.\n */\n\nimport { downcast } from \"@tutao/tutanota-utils\"\nimport { spy } from \"@tutao/tutanota-test-utils\"\n\n/**\n * you need to call .get() on the return value to actually register the replacer to spyify its functions.\n * placer object that replaces the module and gets returned when require(old) is called. Its functions are spyified when .get() is called.\n * warning: contents of array properties will not be spyified\n * @param old name of the module to replace\n * @returns {MockBuilder}\n */\nfunction mock<T>(old: string, replacer: any): MockBuilder<T> {\n\treturn new MockBuilder(old, replacer)\n}\n\nfunction getAllPropertyNames(obj) {\n\tconst props: string[] = []\n\n\tdo {\n\t\tfor (const prop of Object.getOwnPropertyNames(obj)) {\n\t\t\tif (props.indexOf(prop) === -1) {\n\t\t\t\tprops.push(prop)\n\t\t\t}\n\t\t}\n\t} while ((obj = Object.getPrototypeOf(obj)))\n\n\treturn props\n}\n\nexport function spyify<T>(obj: T): T {\n\tconst anyObj: any = obj\n\tswitch (typeof obj) {\n\t\tcase \"function\": {\n\t\t\tconst fSpy = spy(obj as any)\n\n\t\t\t// classes are functions\n\t\t\tfor (const k of Object.keys(anyObj)) {\n\t\t\t\tif (![\"args\", \"callCount\", \"spy\"].includes(k)) {\n\t\t\t\t\tfSpy[k] = spyify(anyObj[k])\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn downcast<T>(fSpy)\n\t\t}\n\t\tcase \"object\":\n\t\t\tif (anyObj instanceof Promise) {\n\t\t\t\treturn downcast<T>(anyObj)\n\t\t\t}\n\t\t\tif (Array.isArray(anyObj)) {\n\t\t\t\treturn downcast<T>(anyObj)\n\t\t\t} else if (anyObj instanceof Map) {\n\t\t\t\tconst entries = Array.from(anyObj.entries()).map(([k, v]) => [k, spyify(v)])\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn downcast<T>(new Map(entries))\n\t\t\t} else {\n\t\t\t\tif (anyObj == null) {\n\t\t\t\t\treturn anyObj\n\t\t\t\t} else {\n\t\t\t\t\tconst newObj = {}\n\t\t\t\t\t// iterate over everything, not only own props\n\t\t\t\t\tfor (let key of getAllPropertyNames(anyObj)) {\n\t\t\t\t\t\t// if it's a proto, don't deeply copy it, just assign a new one\n\t\t\t\t\t\tif (key === \"__proto__\") {\n\t\t\t\t\t\t\t;(newObj as any)[key] = (obj as any)[key]\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t;(newObj as any)[key] = spyify((obj as any)[key])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn downcast<T>(newObj)\n\t\t\t\t}\n\t\t\t}\n\t\tdefault:\n\t\t\treturn obj\n\t}\n}\n\nexport type Mocked<T> = Class<T> & {\n\tmockedInstances: Array<T>\n}\n\n/**\n * create a class-like structure from an object to be able to o.spy on method and constructor calls\n * @param template\n * @returns {cls}\n */\nfunction classify(template: { prototype: object; statics: object }): Mocked<any> {\n\tconst cls = function () {\n\t\tcls.mockedInstances.push(this)\n\t\tfor (const p of Object.keys(template.prototype)) {\n\t\t\tif (\"function\" === typeof template.prototype[p]) {\n\t\t\t\tthis[p] = spy(template.prototype[p]) // don't use spyify, we don't want these to be spyCached\n\t\t\t} else if (\"object\" === typeof template.prototype[p]) {\n\t\t\t\t// duplicate properties\n\t\t\t\tconst obj = template.prototype[p]\n\t\t\t\tthis[p] =\n\t\t\t\t\tobj == null\n\t\t\t\t\t\t? obj\n\t\t\t\t\t\t: Object.keys(obj).reduce((newObj, key) => {\n\t\t\t\t\t\t\t\t;(newObj as any)[key] = (obj as any)[key]\n\t\t\t\t\t\t\t\treturn newObj\n\t\t\t\t\t\t  }, {} as any)\n\t\t\t} else {\n\t\t\t\tthis[p] = template.prototype[p]\n\t\t\t}\n\t\t}\n\n\t\tif (typeof template.prototype[\"constructor\"] === \"function\") {\n\t\t\t// eslint-disable-next-line prefer-rest-params\n\t\t\ttemplate.prototype[\"constructor\"].apply(this, arguments)\n\t\t}\n\t}\n\n\tif (template.statics) {\n\t\tfor (const s of Object.keys(template.statics)) {\n\t\t\tcls[s] = template.statics[s]\n\t\t}\n\t}\n\n\tcls.mockedInstances = []\n\treturn downcast(cls)\n}\n\nfunction setPlatform(newPlatform: string) {\n\tsetProperty(process, \"platform\", newPlatform)\n}\n\nfunction setProperty(object, property, value) {\n\tconst originalProperty = Object.getOwnPropertyDescriptor(object, property)\n\tObject.defineProperty(object, property, { value })\n\treturn originalProperty\n}\n\n/**\n * recursively merge two objects\n * @param obj the base object\n * @param adder properties in this object will replace properties of the same name in the base object or,\n * in case of object type properties, be deep assigned to them.\n * @returns {B}\n */\nfunction deepAssign<T, B>(obj: T, adder: B): T & B {\n\tlet ret\n\tif (typeof adder !== \"object\" || typeof obj !== \"object\" || adder == null || obj == null) {\n\t\tret = adder\n\t} else {\n\t\tret = Object.keys(adder).reduce((newObj, key) => {\n\t\t\t;(newObj as any)[key] = deepAssign((newObj as any)[key], (adder as any)[key])\n\t\t\treturn newObj\n\t\t}, Object.assign({}, obj))\n\t}\n\treturn downcast(ret)\n}\n\nexport class MockBuilder<T> {\n\t_mock: T\n\t_old: string\n\n\tconstructor(old: string, obj: T) {\n\t\tthis._mock = obj\n\t\tthis._old = old\n\t}\n\n\t/**\n\t *\n\t * @param obj the object whose properties will replace properties on this mockbuilders output\n\t * @returns {MockBuilder<*>} a new mockbuilder with the combined output\n\t */\n\twith<B>(obj: B): MockBuilder<T & B> {\n\t\treturn mock(this._old, deepAssign(this._mock, obj))\n\t}\n\n\t/**\n\t * register & get the actual mock module object\n\t * warning! This effectively returns any.\n\t * @returns {T} the mock with recursively o.spy()'d functions\n\t */\n\tset(): T {\n\t\tconst copy = spyify(this._mock)\n\t\treturn downcast(copy)\n\t}\n}\n\nconst n = {\n\tclassify,\n\tmock,\n\tspyify,\n\tsetPlatform,\n}\n\nexport default n\n"],"mappings":"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"}