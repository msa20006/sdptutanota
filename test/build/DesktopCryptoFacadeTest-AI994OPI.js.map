{"version":3,"file":"DesktopCryptoFacadeTest-AI994OPI.js","names":["cryptoFnsMock: CryptoFunctions","fsPromises: typeof import(\"fs\").promises","fsMock: typeof import(\"fs\")","argon2: Promise<Argon2IDExports>"],"sources":["../tests/desktop/DesktopCryptoFacadeTest.ts"],"sourcesContent":["import n from \"../nodemocker.js\"\nimport o from \"@tutao/otest\"\nimport { DesktopNativeCryptoFacade } from \"../../../src/common/desktop/DesktopNativeCryptoFacade.js\"\nimport { downcast, stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\nimport type { CryptoFunctions } from \"../../../src/common/desktop/CryptoFns.js\"\nimport { Argon2IDExports, keyToUint8Array, uint8ArrayToBitArray } from \"@tutao/tutanota-crypto\"\nimport { matchers, object, verify, when } from \"testdouble\"\nimport { TempFs } from \"../../../src/common/desktop/files/TempFs.js\"\n\no.spec(\"DesktopCryptoFacadeTest\", () => {\n\tconst data = Buffer.from([42])\n\tconst aes128Key = [1, 2, 8]\n\tconst aes256Key = [2, 5, 6]\n\tconst aes256DecryptedKey = new Uint8Array([2, 5, 6, 2])\n\tconst aes256EncryptedKey = new Uint8Array([2, 5, 6, 1])\n\tconst encryptedUint8 = stringToUtf8Uint8Array(\"encrypted\")\n\tconst decryptedUint8 = stringToUtf8Uint8Array(\"decrypted\")\n\tconst someKey = new Uint8Array([1, 2])\n\tconst instanceMapper = {\n\t\tdecryptAndMapToInstance: (model, obj, sk) => Promise.resolve(obj),\n\t}\n\tconst encoding = {\n\t\tbase64ToUint8Array: (b64) => (b64.startsWith(\"b64\") ? \"uint8_stuff\" : \"nonsense_uint8array\"),\n\t\tuint8ArrayToBase64: (uint8) => (uint8.startsWith(\"uint8\") ? \"b64_stuff\" : \"nonsense_b64\"),\n\t}\n\n\tconst bufferComp = (a, b) => a.length === b.length && a.includes(b)\n\n\tconst uint8ArrayComp = (a, b) => a.length === b.length && Object.assign(a, b) === a\n\n\tconst standardMocks = () => {\n\t\treturn {\n\t\t\tcryptoMock: n.mock(\"crypto\", crypto).set(),\n\t\t\tinstanceMapperMock: n.mock(\"../api/worker/crypto/InstanceMapper\", instanceMapper).set(),\n\t\t\tencodingMock: n.mock(\"../api/common/utils/Encoding\", encoding).set(),\n\t\t}\n\t}\n\n\tconst setupSubject = () => {\n\t\tconst cryptoFnsMock: CryptoFunctions = object()\n\t\twhen(cryptoFnsMock.aesEncrypt(aes128Key, matchers.anything(), matchers.anything(), matchers.anything(), matchers.anything())).thenReturn(decryptedUint8)\n\t\twhen(cryptoFnsMock.aesEncrypt(aes256Key, aes256DecryptedKey, matchers.anything(), matchers.anything(), matchers.anything())).thenReturn(\n\t\t\taes256EncryptedKey,\n\t\t)\n\n\t\twhen(cryptoFnsMock.aesDecrypt(aes128Key, matchers.anything(), matchers.anything())).thenReturn(decryptedUint8)\n\t\twhen(cryptoFnsMock.aesDecrypt(aes256Key, aes256EncryptedKey, matchers.anything())).thenReturn(aes256DecryptedKey)\n\n\t\twhen(cryptoFnsMock.unauthenticatedAesDecrypt(aes256Key, aes256EncryptedKey, false)).thenReturn(aes256DecryptedKey)\n\n\t\twhen(cryptoFnsMock.decryptKey(aes128Key, aes256EncryptedKey)).thenReturn(uint8ArrayToBitArray(aes256DecryptedKey))\n\t\twhen(cryptoFnsMock.bytesToKey(someKey)).thenReturn(aes128Key)\n\t\twhen(cryptoFnsMock.randomBytes(matchers.anything())).thenReturn(Buffer.alloc(10, 4))\n\t\tconst instanceCaptor = matchers.captor()\n\t\twhen(cryptoFnsMock.decryptAndMapToInstance(matchers.anything(), instanceCaptor.capture(), matchers.anything())).thenResolve(instanceCaptor.value)\n\t\twhen(cryptoFnsMock.aes256RandomKey()).thenReturn(uint8ArrayToBitArray(Buffer.alloc(32, 1)))\n\n\t\tconst fsPromises: typeof import(\"fs\").promises = object()\n\t\twhen(fsPromises.readFile(matchers.anything())).thenResolve(data)\n\t\twhen(fsPromises.mkdir(matchers.anything())).thenResolve()\n\t\twhen(fsPromises.writeFile(matchers.anything(), decryptedUint8)).thenResolve()\n\t\twhen(fsPromises.readdir(matchers.anything())).thenResolve([])\n\t\tconst fsMock: typeof import(\"fs\") = object()\n\t\tfsMock.promises = fsPromises\n\n\t\tconst sm = standardMocks()\n\t\tconst tfs = object<TempFs>()\n\t\twhen(tfs.getTutanotaTempPath()).thenReturn(\"/some/other/path/to\")\n\t\twhen(tfs.ensureEncryptedDir()).thenResolve(\"/some/other/path/to/encrypted\")\n\t\twhen(tfs.ensureUnencrytpedDir()).thenResolve(\"/some/other/path/to/decrypted\")\n\n\t\tconst argon2: Promise<Argon2IDExports> = Promise.resolve(object())\n\t\tconst desktopCrypto = new DesktopNativeCryptoFacade(fsMock, cryptoFnsMock, tfs, argon2)\n\t\treturn Object.assign({}, sm, {\n\t\t\tfsMock,\n\t\t\tcryptoFnsMock,\n\t\t\tdesktopCrypto,\n\t\t})\n\t}\n\to(\"aesEncryptFile\", async function () {\n\t\tconst { desktopCrypto, fsMock } = setupSubject()\n\t\tconst { uri } = await desktopCrypto.aesEncryptFile(someKey, \"/some/path/to/encrypted/file.pdf\")\n\t\to(uri).equals(\"/some/other/path/to/encrypted/file.pdf\")\n\t\tverify(fsMock.promises.writeFile(matchers.anything(), matchers.anything()), { times: 1 })\n\t})\n\to(\"aesDecryptFile\", async function () {\n\t\tconst { desktopCrypto, fsMock } = setupSubject()\n\t\tconst file = await desktopCrypto.aesDecryptFile(someKey, \"/some/path/to/file.pdf\")\n\t\to(file).equals(\"/some/other/path/to/decrypted/file.pdf\")\n\t\tverify(fsMock.promises.writeFile(matchers.anything(), matchers.anything(), matchers.anything()), { times: 1 })\n\t})\n\to(\"unauthenticatedAes256DecryptKey\", function () {\n\t\tconst { desktopCrypto } = setupSubject()\n\t\tconst key = desktopCrypto.unauthenticatedAes256DecryptKey(aes256Key, aes256EncryptedKey)\n\t\to(Array.from(key)).deepEquals(Array.from(aes256DecryptedKey))\n\t})\n\to(\"aes256EncryptKey\", function () {\n\t\tconst { desktopCrypto, cryptoFnsMock } = setupSubject()\n\t\tdesktopCrypto.aes256EncryptKey(aes256Key, aes256DecryptedKey)\n\t\tverify(cryptoFnsMock.aesEncrypt(aes256Key, aes256DecryptedKey, undefined, false), { times: 1 })\n\t})\n\to(\"decryptAndMapToInstance\", async function () {\n\t\tconst { desktopCrypto, cryptoFnsMock } = setupSubject()\n\t\tconst instance = {\n\t\t\ta: \"property_a\",\n\t\t\tb: true,\n\t\t\tc: 42,\n\t\t}\n\t\twhen(\n\t\t\tcryptoFnsMock.decryptAndMapToInstance(\n\t\t\t\tdowncast(\"somemodel\"),\n\t\t\t\t{\n\t\t\t\t\ta: \"property_a\",\n\t\t\t\t\tb: true,\n\t\t\t\t\tc: 42,\n\t\t\t\t},\n\t\t\t\tuint8ArrayToBitArray(aes256DecryptedKey),\n\t\t\t),\n\t\t).thenResolve(instance)\n\t\tawait desktopCrypto.decryptAndMapToInstance(downcast(\"somemodel\"), instance, keyToUint8Array(aes128Key), aes256EncryptedKey)\n\t\tverify(cryptoFnsMock.decryptKey(aes128Key, aes256EncryptedKey), { times: 1 })\n\t})\n})\n"],"mappings":"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"}