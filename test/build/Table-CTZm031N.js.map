{"version":3,"file":"Table-CTZm031N.js","names":["vnode: Vnode<TableAttrs>","lineAttrs","textIdOrFunction: TableHeading | MaybeTranslation","lineAttrs: TableLineAttrs","showActionButtonColumn: boolean","columnWidths: ReadonlyArray<ColumnWidth>","bold: boolean","columnAlignments: Array<boolean>","verticalText: boolean","useHelpButton: boolean","event: MouseEvent","cellTextData: CellTextData"],"sources":["../../src/common/gui/base/Table.ts"],"sourcesContent":["import m, { Children, Component, Vnode } from \"mithril\"\nimport { lang, MaybeTranslation } from \"../../misc/LanguageViewModel\"\nimport { progressIcon } from \"./Icon\"\nimport { downcast, neverNull } from \"@tutao/tutanota-utils\"\nimport { createDropdown, DropdownButtonAttrs } from \"./Dropdown.js\"\nimport { Icons } from \"./icons/Icons\"\nimport type { ClickHandler } from \"./GuiUtils\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { IconButton, IconButtonAttrs } from \"./IconButton.js\"\nimport { ButtonSize } from \"./ButtonSize.js\"\nimport { px, size } from \"../size.js\"\nimport { InfoIcon } from \"./InfoIcon.js\"\n\nassertMainOrNode()\n\nexport const enum ColumnWidth {\n\t// the column has a fixed small width\n\tSmall = \".column-width-small\",\n\t// all Largest columns equally share the rest of the available width\n\tLargest = \".column-width-largest\",\n}\n\nexport type TableHeading = {\n\tlabel: MaybeTranslation\n\thelpText?: MaybeTranslation\n}\n\n/**\n * @param columnHeading The texts that shall appear as headers of each column. Either a textId or function that returns the translation\n * @param columnWidths The sizes of the columns in px. If 0 is specified the column shares the remaining space with all other '0' width columns.\n * @param columnAlignments true for a column that's aligned opposite the default, false for one with the default alignment.\n * @param showActionButtonColumn True if addButton is specified or the table lines may contain action buttons.\n * @param addButton If set, this button appears beside the expander button.\n * @param lines the lines of the table\n */\nexport type TableAttrs = {\n\tcolumnHeading?: Array<TableHeading | MaybeTranslation>\n\tcolumnWidths: ReadonlyArray<ColumnWidth>\n\tcolumnAlignments?: Array<boolean>\n\tverticalColumnHeadings?: boolean\n\tshowActionButtonColumn: boolean\n\taddButtonAttrs?: IconButtonAttrs | null\n\tlines: ReadonlyArray<TableLineAttrs> | null\n\tclass?: string\n}\nexport type CellTextData = {\n\tmain: string\n\tinfo?: string[]\n\tclick?: ClickHandler\n\tmainStyle?: string\n}\nexport type TableLineAttrs = {\n\tcells: string[] | (() => CellTextData[])\n\tactionButtonAttrs?: IconButtonAttrs | null\n}\n\n/**\n * Shows a table of TableLine entries. The last column of the table may show action buttons for each TableLine and/or an add button.\n * The table shows a loading spinner until updateEntries() is called the first time.\n */\nexport class Table implements Component<TableAttrs> {\n\tview(vnode: Vnode<TableAttrs>): Children {\n\t\tconst a = vnode.attrs\n\t\tconst loading = !a.lines\n\t\tconst alignments = a.columnAlignments || []\n\t\tconst lineAttrs = a.lines\n\t\t\t? a.lines.map((lineAttrs) => this.createLine(lineAttrs, a.showActionButtonColumn, a.columnWidths, false, alignments, false))\n\t\t\t: []\n\n\t\treturn m(\"\", { class: a.class }, [\n\t\t\tm(`table.table${a.columnHeading ? \".table-header-border\" : \"\"}`, [\n\t\t\t\t(a.columnHeading\n\t\t\t\t\t? [\n\t\t\t\t\t\t\tthis.createLine(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcells: () =>\n\t\t\t\t\t\t\t\t\t\ta.columnHeading!.map((header) => {\n\t\t\t\t\t\t\t\t\t\t\tconst text = this.isTableHeading(header) ? header.label : header\n\t\t\t\t\t\t\t\t\t\t\tconst info = this.isTableHeading(header) && header.helpText ? [lang.getTranslationText(header.helpText)] : undefined\n\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\tmain: lang.getTranslationText(text),\n\t\t\t\t\t\t\t\t\t\t\t\tinfo: info,\n\t\t\t\t\t\t\t\t\t\t\t} satisfies CellTextData\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tactionButtonAttrs: loading ? null : a.addButtonAttrs,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ta.showActionButtonColumn,\n\t\t\t\t\t\t\t\ta.columnWidths,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\talignments,\n\t\t\t\t\t\t\t\ta.verticalColumnHeadings ?? false,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t  ]\n\t\t\t\t\t: []\n\t\t\t\t).concat(lineAttrs),\n\t\t\t]),\n\t\t\tloading ? m(\".flex-center.items-center.button-height\", progressIcon()) : null,\n\t\t\t!loading && neverNull(a.lines).length === 0 ? m(\".flex-center.items-center.button-height\", lang.get(\"noEntries_msg\")) : null,\n\t\t])\n\t}\n\n\tprivate isTableHeading(textIdOrFunction: TableHeading | MaybeTranslation): textIdOrFunction is TableHeading {\n\t\treturn (textIdOrFunction as TableHeading).label !== undefined\n\t}\n\n\tprivate createLine(\n\t\tlineAttrs: TableLineAttrs,\n\t\tshowActionButtonColumn: boolean,\n\t\tcolumnWidths: ReadonlyArray<ColumnWidth>,\n\t\tbold: boolean,\n\t\tcolumnAlignments: Array<boolean>,\n\t\tverticalText: boolean,\n\t\tuseHelpButton: boolean = false,\n\t): Children {\n\t\tlet cells\n\n\t\tif (typeof lineAttrs.cells == \"function\") {\n\t\t\tcells = lineAttrs.cells().map((cellTextData, index) =>\n\t\t\t\tm(\n\t\t\t\t\t\"td\" + columnWidths[index],\n\t\t\t\t\tm(\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t{ class: useHelpButton ? \"flex items-center height-100p full-width\" : \"\" },\n\t\t\t\t\t\tm(\n\t\t\t\t\t\t\t\".text-ellipsis.pr.pt-s\" +\n\t\t\t\t\t\t\t\t(bold ? \".b\" : \"\") +\n\t\t\t\t\t\t\t\t(cellTextData.click ? \".click\" : \"\" + (cellTextData.mainStyle ? cellTextData.mainStyle : \"\")) +\n\t\t\t\t\t\t\t\t(columnAlignments[index] ? \".right\" : \"\"),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: cellTextData.main,\n\t\t\t\t\t\t\t\t// show the text as tooltip, so ellipsed lines can be shown\n\t\t\t\t\t\t\t\tonclick: cellTextData.click\n\t\t\t\t\t\t\t\t\t? (event: MouseEvent) => {\n\t\t\t\t\t\t\t\t\t\t\tconst dom = downcast(event.target)\n\t\t\t\t\t\t\t\t\t\t\tcellTextData.click!(event, dom)\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tverticalText ? m(\"span.vertical-text\", cellTextData.main) : cellTextData.main,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tTable.renderHelpText(cellTextData, useHelpButton),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t)\n\t\t} else {\n\t\t\tcells = lineAttrs.cells.map((text, index) =>\n\t\t\t\tm(\n\t\t\t\t\t\"td.text-ellipsis.pr.pt-s.pb-s.\" + columnWidths[index] + (bold ? \".b\" : \"\") + (columnAlignments[index] ? \".right\" : \"\"),\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: text, // show the text as tooltip, so ellipsed lines can be shown\n\t\t\t\t\t},\n\t\t\t\t\tverticalText ? m(\"span.vertical-text\", text) : text,\n\t\t\t\t),\n\t\t\t)\n\t\t}\n\n\t\tif (showActionButtonColumn) {\n\t\t\tcells.push(\n\t\t\t\tm(\n\t\t\t\t\t\"td\",\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\twidth: px(size.button_height_compact),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tlineAttrs.actionButtonAttrs ? m(IconButton, lineAttrs.actionButtonAttrs) : [],\n\t\t\t\t),\n\t\t\t)\n\t\t}\n\n\t\treturn m(\"tr.selectable\", cells)\n\t}\n\n\tprivate static renderHelpText(cellTextData: CellTextData, useHelpButton: boolean): Children {\n\t\tconst info = cellTextData.info\n\t\tif (info == null) {\n\t\t\treturn undefined\n\t\t}\n\n\t\tif (useHelpButton) {\n\t\t\treturn m(InfoIcon, { text: info.join(\"\\n\") })\n\t\t} else {\n\t\t\treturn m(\n\t\t\t\t\".small.text-ellipsis.pr\" + (cellTextData.click ? \".click\" : \"\"),\n\t\t\t\t{\n\t\t\t\t\tonclick: cellTextData.click\n\t\t\t\t\t\t? (event: MouseEvent) => {\n\t\t\t\t\t\t\t\tconst dom = downcast(event.target)\n\t\t\t\t\t\t\t\tcellTextData.click!(event, dom)\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: undefined,\n\t\t\t\t},\n\t\t\t\tinfo.map((line) => m(\"\", line)),\n\t\t\t)\n\t\t}\n\t}\n}\n\ninterface UpdateableInstanceWithArray<T> {\n\tgetArray: () => Array<T>\n\tupdateInstance: () => Promise<void>\n}\n\nexport function createRowActions<T>(\n\tinstance: UpdateableInstanceWithArray<T>,\n\tcurrentElement: T,\n\tindexOfElement: number,\n\tprefixActions: ReadonlyArray<DropdownButtonAttrs> = [],\n): IconButtonAttrs {\n\tconst elements = instance.getArray()\n\tconst makeButtonAttrs: () => ReadonlyArray<DropdownButtonAttrs | null> = () => [\n\t\t...prefixActions,\n\t\tindexOfElement > 1\n\t\t\t? {\n\t\t\t\t\tlabel: \"moveToTop_action\",\n\t\t\t\t\tclick: () => {\n\t\t\t\t\t\telements.splice(indexOfElement, 1)\n\t\t\t\t\t\telements.unshift(currentElement)\n\t\t\t\t\t\tinstance.updateInstance()\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: null,\n\t\tindexOfElement > 0\n\t\t\t? {\n\t\t\t\t\tlabel: \"moveUp_action\",\n\t\t\t\t\tclick: () => {\n\t\t\t\t\t\tlet prev = elements[indexOfElement - 1]\n\t\t\t\t\t\telements[indexOfElement - 1] = currentElement\n\t\t\t\t\t\telements[indexOfElement] = prev\n\t\t\t\t\t\tinstance.updateInstance()\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: null,\n\t\tindexOfElement < instance.getArray().length - 1\n\t\t\t? {\n\t\t\t\t\tlabel: \"moveDown_action\",\n\t\t\t\t\tclick: () => {\n\t\t\t\t\t\tlet next = elements[indexOfElement + 1]\n\t\t\t\t\t\telements[indexOfElement + 1] = currentElement\n\t\t\t\t\t\telements[indexOfElement] = next\n\t\t\t\t\t\tinstance.updateInstance()\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: null,\n\t\tindexOfElement < instance.getArray().length - 2\n\t\t\t? {\n\t\t\t\t\tlabel: \"moveToBottom_action\",\n\t\t\t\t\tclick: () => {\n\t\t\t\t\t\telements.splice(indexOfElement, 1)\n\t\t\t\t\t\telements.push(currentElement)\n\t\t\t\t\t\tinstance.updateInstance()\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: null,\n\t\t{\n\t\t\tlabel: \"delete_action\",\n\t\t\tclick: () => {\n\t\t\t\telements.splice(indexOfElement, 1)\n\t\t\t\tinstance.updateInstance()\n\t\t\t},\n\t\t},\n\t]\n\treturn {\n\t\ttitle: \"edit_action\",\n\t\tclick: createDropdown({ lazyButtons: makeButtonAttrs, width: 260 }),\n\t\ticon: Icons.More,\n\t\tsize: ButtonSize.Compact,\n\t}\n}\n"],"mappings":"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"}