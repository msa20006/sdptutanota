{"version":3,"file":"AppPassHandlerTest-c0bEB59T.js","names":["crypto: DesktopNativeCryptoFacade","conf: DesktopConfig","argon2idFacade: Promise<Argon2IDExports>","lang: LanguageViewModel","getCurrentCommonNativeFacade: () => Promise<CommonNativeFacade>","dataWithoutAppPassWrapper: Uint8Array","encryptionMode: DesktopCredentialsMode","dataWithAppPassWrapper: Uint8Array","pwPromise: Promise<string>","promise: Promise<R>","whileNotRejected: Promise<never>","otherWiseAlso: Thunk","crypto: DesktopNativeCryptoFacade","lang: LanguageViewModel","conf: DesktopConfig","commonNativeFacade: CommonNativeFacade","appPassHandler: AppPassHandler","cbs: Array<any>"],"sources":["../../src/common/desktop/credentials/AppPassHandler.ts","../tests/desktop/credentials/AppPassHandlerTest.ts"],"sourcesContent":["import { CredentialEncryptionMode } from \"../../misc/credentials/CredentialEncryptionMode.js\"\nimport { DesktopConfigKey } from \"../config/ConfigKeys.js\"\nimport { Aes256Key, Argon2IDExports, generateKeyFromPassphraseArgon2id, KEY_LENGTH_BYTES_AES_256 } from \"@tutao/tutanota-crypto\"\nimport { base64ToUint8Array, Thunk, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport { KeyPermanentlyInvalidatedError } from \"../../api/common/error/KeyPermanentlyInvalidatedError.js\"\nimport { CryptoError } from \"@tutao/tutanota-crypto/error.js\"\nimport { CancelledError } from \"../../api/common/error/CancelledError.js\"\nimport { DesktopNativeCryptoFacade } from \"../DesktopNativeCryptoFacade.js\"\nimport { DesktopConfig } from \"../config/DesktopConfig.js\"\nimport { CommonNativeFacade } from \"../../native/common/generatedipc/CommonNativeFacade.js\"\nimport { LanguageViewModel } from \"../../misc/LanguageViewModel.js\"\nimport { DesktopCredentialsMode } from \"./CredentialCommons.js\"\n\nexport class AppPassHandler {\n\tconstructor(\n\t\tprivate readonly crypto: DesktopNativeCryptoFacade,\n\t\tprivate readonly conf: DesktopConfig,\n\t\tprivate readonly argon2idFacade: Promise<Argon2IDExports>,\n\t\tprivate readonly lang: LanguageViewModel,\n\t\tprivate readonly getCurrentCommonNativeFacade: () => Promise<CommonNativeFacade>,\n\t) {}\n\n\tasync addAppPassWrapper(dataWithoutAppPassWrapper: Uint8Array, encryptionMode: DesktopCredentialsMode): Promise<Uint8Array> {\n\t\tif (encryptionMode === CredentialEncryptionMode.APP_PASSWORD) {\n\t\t\tconst appPassKey = (await this.deriveKeyFromAppPass()) ?? (await this.enrollForAppPass())\n\t\t\treturn this.crypto.aesEncryptBytes(appPassKey, dataWithoutAppPassWrapper)\n\t\t} else {\n\t\t\t// our mode is not app Pass, so the app Pass salt should not be set\n\t\t\tawait this.conf.setVar(DesktopConfigKey.appPassSalt, null)\n\t\t\treturn dataWithoutAppPassWrapper\n\t\t}\n\t}\n\n\tasync removeAppPassWrapper(dataWithAppPassWrapper: Uint8Array, encryptionMode: DesktopCredentialsMode): Promise<Uint8Array> {\n\t\t// our mode is not app Pass, so there is no wrapper to remove\n\t\tif (encryptionMode !== CredentialEncryptionMode.APP_PASSWORD) return dataWithAppPassWrapper\n\t\tconst appPassKey = await this.deriveKeyFromAppPass()\n\t\tif (appPassKey == null) throw new KeyPermanentlyInvalidatedError(\"can't remove app pass wrapper without salt\")\n\n\t\ttry {\n\t\t\treturn this.crypto.aesDecryptBytes(appPassKey, dataWithAppPassWrapper)\n\t\t} catch (e) {\n\t\t\tif (e instanceof CryptoError) {\n\t\t\t\tconst nativeFacade = await this.getCurrentCommonNativeFacade()\n\t\t\t\t//noinspection ES6MissingAwait\n\t\t\t\tnativeFacade.showAlertDialog(\"invalidPassword_msg\")\n\t\t\t\tthrow new CancelledError(\"app Pass verification failed\")\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * if there is a salt stored, use it and a password prompt to derive the app Pass key.\n\t * if there isn't, ask for a new password, generate a salt & store it, then derive the key.\n\t * @return the derived 256-bit key or null if none is found\n\t */\n\tprivate async deriveKeyFromAppPass(): Promise<Aes256Key | null> {\n\t\tconst storedAppPassSaltB64 = await this.conf.getVar(DesktopConfigKey.appPassSalt)\n\t\tif (storedAppPassSaltB64 == null) return null\n\t\tconst commonNativeFacade = await this.getCurrentCommonNativeFacade()\n\t\tconst pw = await this.tryWhileSaltNotChanged(commonNativeFacade.promptForPassword(this.lang.get(\"credentialsEncryptionModeAppPassword_label\")))\n\t\tconst salt = base64ToUint8Array(storedAppPassSaltB64)\n\t\treturn generateKeyFromPassphraseArgon2id(await this.argon2idFacade, pw, salt)\n\t}\n\n\tprivate async enrollForAppPass(): Promise<Aes256Key> {\n\t\tconst newSalt = this.crypto.randomBytes(KEY_LENGTH_BYTES_AES_256)\n\t\tconst commonNativeFacade = await this.getCurrentCommonNativeFacade()\n\t\tconst newPw = await this.tryWhileSaltNotChanged(\n\t\t\tcommonNativeFacade.promptForNewPassword(this.lang.get(\"credentialsEncryptionModeAppPassword_label\"), null),\n\t\t)\n\t\tconst newAppPassSaltB64 = uint8ArrayToBase64(newSalt)\n\t\tawait this.conf.setVar(DesktopConfigKey.appPassSalt, newAppPassSaltB64)\n\t\treturn generateKeyFromPassphraseArgon2id(await this.argon2idFacade, newPw, newSalt)\n\t}\n\n\tprivate async tryWhileSaltNotChanged(pwPromise: Promise<string>): Promise<string> {\n\t\tconst commonNativeFacade = await this.getCurrentCommonNativeFacade()\n\t\treturn resolveChecked<string>(\n\t\t\tpwPromise,\n\t\t\tnew Promise((_, reject) =>\n\t\t\t\tthis.conf.once(DesktopConfigKey.appPassSalt, () => {\n\t\t\t\t\treject(new CancelledError(\"salt changed during pw prompt\"))\n\t\t\t\t}),\n\t\t\t),\n\t\t\t() => commonNativeFacade.showAlertDialog(\"retry_action\"),\n\t\t)\n\t}\n}\n\n/**\n * resolve a promise, but inject another action if whileNot did reject in the meantime.\n * if whileNot did reject, the returned promise will reject as well.\n */\nexport async function resolveChecked<R>(promise: Promise<R>, whileNotRejected: Promise<never>, otherWiseAlso: Thunk): Promise<R> {\n\tlet cancelled = false\n\treturn await Promise.race<R>([\n\t\tpromise.then((value) => {\n\t\t\tif (cancelled) otherWiseAlso()\n\t\t\treturn value\n\t\t}),\n\t\twhileNotRejected.catch((e) => {\n\t\t\tcancelled = true\n\t\t\tthrow e\n\t\t}),\n\t])\n}\n","import o from \"@tutao/otest\"\nimport { AppPassHandler, resolveChecked } from \"../../../../src/common/desktop/credentials/AppPassHandler.js\"\nimport { DesktopNativeCryptoFacade } from \"../../../../src/common/desktop/DesktopNativeCryptoFacade.js\"\nimport { LanguageViewModel } from \"../../../../src/common/misc/LanguageViewModel.js\"\nimport { DesktopConfig } from \"../../../../src/common/desktop/config/DesktopConfig.js\"\nimport { function as fn, matchers, object, verify, when } from \"testdouble\"\nimport { CommonNativeFacade } from \"../../../../src/common/native/common/generatedipc/CommonNativeFacade.js\"\nimport { DesktopConfigKey } from \"../../../../src/common/desktop/config/ConfigKeys.js\"\nimport { defer, delay, stringToBase64 } from \"@tutao/tutanota-utils\"\nimport { CredentialEncryptionMode } from \"../../../../src/common/misc/credentials/CredentialEncryptionMode.js\"\nimport { CancelledError } from \"../../../../src/common/api/common/error/CancelledError.js\"\nimport { assertThrows } from \"@tutao/tutanota-test-utils\"\nimport { KeyPermanentlyInvalidatedError } from \"../../../../src/common/api/common/error/KeyPermanentlyInvalidatedError.js\"\nimport { loadArgon2WASM } from \"../../api/worker/WASMTestUtils.js\"\n\no.spec(\"AppPassHandler\", () => {\n\tlet crypto: DesktopNativeCryptoFacade\n\tlet lang: LanguageViewModel\n\tlet conf: DesktopConfig\n\tlet commonNativeFacade: CommonNativeFacade\n\tlet appPassHandler: AppPassHandler\n\n\to.beforeEach(async () => {\n\t\tcrypto = object()\n\t\tlang = object()\n\t\tconf = object()\n\t\tcommonNativeFacade = object()\n\t\t// too hard to mock\n\t\tconst argon2 = loadArgon2WASM()\n\t\tappPassHandler = new AppPassHandler(crypto, conf, argon2, lang, () => Promise.resolve(commonNativeFacade))\n\t})\n\n\to(\"does not throw when using right encryption mode, app pw\", async function () {\n\t\twhen(conf.getVar(DesktopConfigKey.appPassSalt)).thenResolve(stringToBase64(\"saltsalt\"))\n\t\twhen(commonNativeFacade.promptForPassword(matchers.anything())).thenResolve(\"password!\")\n\n\t\t// @ts-ignore\n\t\tawait appPassHandler.removeAppPassWrapper(\"base64\", CredentialEncryptionMode.APP_PASSWORD)\n\t})\n\n\to(\"throws a CancelledError for all pending requests if the salt changes\", async function () {\n\t\twhen(conf.getVar(DesktopConfigKey.appPassSalt)).thenResolve(stringToBase64(\"saltsalt\"))\n\t\tconst pwPromise = defer<string>()\n\t\twhen(commonNativeFacade.promptForPassword(matchers.anything())).thenReturn(pwPromise.promise)\n\n\t\t// matchers.captor() did not give me the values array :(\n\t\tconst cbs: Array<any> = []\n\t\tconf.once = (key, cb) => {\n\t\t\to(key).equals(DesktopConfigKey.appPassSalt)\n\t\t\tcb(\"saltsalt2\")\n\t\t\treturn conf\n\t\t}\n\t\tconst promise1 = appPassHandler.removeAppPassWrapper(Uint8Array.from([1, 2, 3, 4]), CredentialEncryptionMode.APP_PASSWORD)\n\t\tconst promise2 = appPassHandler.removeAppPassWrapper(Uint8Array.from([1, 2, 3, 4]), CredentialEncryptionMode.APP_PASSWORD)\n\n\t\tverify(commonNativeFacade.showAlertDialog(matchers.anything()), { times: 0 })\n\n\t\tawait assertThrows(CancelledError, () => promise1)\n\t\tawait assertThrows(CancelledError, () => promise2)\n\n\t\tpwPromise.resolve(\"make it call the alternative\")\n\t\tawait delay(0)\n\t\tverify(commonNativeFacade.showAlertDialog(matchers.anything()), { times: 2 })\n\t})\n\n\to(\"throws a KeyPermanentlyInvalidatedError if there is no salt\", async function () {\n\t\twhen(conf.getVar(DesktopConfigKey.appPassSalt)).thenResolve(null)\n\t\tconst pwPromise = defer<string>()\n\t\twhen(commonNativeFacade.promptForPassword(matchers.anything())).thenReturn(pwPromise.promise)\n\n\t\tawait assertThrows(KeyPermanentlyInvalidatedError, () =>\n\t\t\tappPassHandler.removeAppPassWrapper(Uint8Array.from([1, 2, 3, 4]), CredentialEncryptionMode.APP_PASSWORD),\n\t\t)\n\t})\n})\n\no.spec(\"resolveChecked\", function () {\n\to(\"rejects if whileNot rejects, also calls otherwise\", async function () {\n\t\tconst otherWise = fn<any>()\n\t\tconst { promise, resolve } = defer()\n\t\tconst rejector = defer<never>()\n\t\tconst subject = assertThrows(Error, () => resolveChecked(promise, rejector.promise, otherWise))\n\t\trejector.reject(new Error(\"aw\"))\n\t\tresolve(0)\n\t\tawait subject\n\t\tverify(otherWise(), { times: 1 })\n\t})\n\n\to(\"rejects if promise rejects\", async function () {\n\t\tconst otherWise = fn<any>()\n\t\tconst { promise, reject } = defer()\n\t\tconst rejector = defer<never>()\n\t\tconst subject = assertThrows(Error, () => resolveChecked(promise, rejector.promise, otherWise))\n\t\treject(new Error(\"aw\"))\n\t\tawait subject\n\t\tverify(otherWise(), { times: 0 })\n\t})\n\n\to(\"resolves if promise resolves\", async function () {\n\t\tconst otherWise = fn<any>()\n\t\tconst { promise, resolve } = defer()\n\t\tconst rejector = defer<never>()\n\t\tconst subject = resolveChecked(promise, rejector.promise, otherWise)\n\t\tresolve(\"hello\")\n\t\tconst value = await subject\n\t\tverify(otherWise(), { times: 0 })\n\t\to(value).equals(\"hello\")\n\t})\n})\n"],"mappings":"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"}