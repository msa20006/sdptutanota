{"version":3,"file":"SearchUtils-Cu31OiTT.js","names":["category: string","SEARCH_MAIL_FIELDS: ReadonlyArray<SearchMailField>","routeSetThrottled: RouteSetFn","restriction: SearchRestriction","query: string | null","selectionKey: string | null","params: Record<string, string | number | Array<string>>","searchCategory: SearchCategoryTypes","start: number | null","end: number | null","field: string | null","folderIds: Array<string>","eventSeries: boolean | null","r: SearchRestriction","route: string","category: SearchCategoryTypes","searchKey: string","event: CalendarEvent"],"sources":["../../src/mail-app/search/model/SearchUtils.ts"],"sourcesContent":["import m from \"mithril\"\nimport {\n\tassertNotNull,\n\tbase64ToBase64Url,\n\tbase64UrlToBase64,\n\tdecodeBase64,\n\tfilterInt,\n\tgetDayShifted,\n\tgetEndOfDay,\n\tgetStartOfDay,\n\tincrementMonth,\n\tisSameTypeRef,\n\tstringToBase64,\n\tTypeRef,\n} from \"@tutao/tutanota-utils\"\nimport { RouteSetFn, throttleRoute } from \"../../../common/misc/RouteChange\"\nimport { SearchRestriction } from \"../../../common/api/worker/search/SearchTypes\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { TranslationKey } from \"../../../common/misc/LanguageViewModel\"\nimport { CalendarEvent, CalendarEventTypeRef, Contact, ContactTypeRef, Mail, MailTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs\"\nimport { typeModels } from \"../../../common/api/entities/tutanota/TypeModels.js\"\nimport { locator } from \"../../../common/api/main/CommonLocator.js\"\nimport {\n\tgetElementId,\n\tLEGACY_BCC_RECIPIENTS_ID,\n\tLEGACY_BODY_ID,\n\tLEGACY_CC_RECIPIENTS_ID,\n\tLEGACY_TO_RECIPIENTS_ID,\n} from \"../../../common/api/common/utils/EntityUtils.js\"\n\nassertMainOrNode()\n\nconst FIXED_FREE_SEARCH_DAYS = 28\n\nexport const enum SearchCategoryTypes {\n\tmail = \"mail\",\n\tcontact = \"contact\",\n\tcalendar = \"calendar\",\n}\n\nconst SEARCH_CATEGORIES = [\n\t{\n\t\tname: SearchCategoryTypes.mail,\n\t\ttypeRef: MailTypeRef,\n\t},\n\t{\n\t\tname: SearchCategoryTypes.contact,\n\t\ttypeRef: ContactTypeRef,\n\t},\n\t{\n\t\tname: SearchCategoryTypes.calendar,\n\t\ttypeRef: CalendarEventTypeRef,\n\t},\n] as const\n\n/** get the TypeRef that corresponds to the selected category (as taken from the URL: <host>/search/<category>?<query> */\nexport function getSearchType(category: string): TypeRef<CalendarEvent> | TypeRef<Mail> | TypeRef<Contact> {\n\treturn assertNotNull(SEARCH_CATEGORIES.find((c) => c.name === category)).typeRef\n}\n\ninterface SearchMailField {\n\treadonly textId: TranslationKey\n\treadonly field: string | null\n\treadonly attributeIds: number[] | null\n}\n\nexport const SEARCH_MAIL_FIELDS: ReadonlyArray<SearchMailField> = [\n\t{\n\t\ttextId: \"all_label\",\n\t\tfield: null,\n\t\tattributeIds: null,\n\t},\n\t{\n\t\ttextId: \"subject_label\",\n\t\tfield: \"subject\",\n\t\tattributeIds: [typeModels.Mail.values[\"subject\"].id as number],\n\t},\n\t{\n\t\ttextId: \"mailBody_label\",\n\t\tfield: \"body\",\n\t\tattributeIds: [LEGACY_BODY_ID /** id of the legacy typeModels.Mail.associations[\"body\"] */],\n\t},\n\t{\n\t\ttextId: \"from_label\",\n\t\tfield: \"from\",\n\t\tattributeIds: [typeModels.Mail.associations[\"sender\"].id as number],\n\t},\n\t{\n\t\ttextId: \"to_label\",\n\t\tfield: \"to\",\n\t\tattributeIds: [\n\t\t\tLEGACY_TO_RECIPIENTS_ID /** id of the legacy Mail.toRecipients */,\n\t\t\tLEGACY_CC_RECIPIENTS_ID /** id of the legacy Mail.ccRecipients */,\n\t\t\tLEGACY_BCC_RECIPIENTS_ID /** id of the legacy Mail.bccRecipients */,\n\t\t],\n\t},\n\t{\n\t\ttextId: \"attachmentName_label\",\n\t\tfield: \"attachment\",\n\t\tattributeIds: [typeModels.Mail.associations[\"attachments\"].id as number],\n\t},\n]\n\nconst routeSetThrottled: RouteSetFn = throttleRoute()\n\nexport function setSearchUrl(url: string) {\n\tif (url !== m.route.get()) {\n\t\trouteSetThrottled(url, {})\n\t}\n}\n\nexport function searchCategoryForRestriction(restriction: SearchRestriction): SearchCategoryTypes {\n\treturn assertNotNull(SEARCH_CATEGORIES.find((c) => isSameTypeRef(c.typeRef, restriction.type))).name\n}\n\n// Gets the resulting URL if the output of `getSearchParameters()` was routed to\nexport function getSearchUrl(query: string | null, restriction: SearchRestriction, selectionKey: string | null = null): string {\n\tconst { path, params } = getSearchParameters(query, restriction, selectionKey)\n\treturn m.buildPathname(path, params as m.Params)\n}\n\nexport function getSearchParameters(\n\tquery: string | null,\n\trestriction: SearchRestriction,\n\tselectionKey: string | null,\n): {\n\tpath: string\n\tparams: Record<string, string | number | Array<string>>\n} {\n\tconst category = searchCategoryForRestriction(restriction)\n\tconst params: Record<string, string | number | Array<string>> = {\n\t\tquery: query ?? \"\",\n\t\tcategory,\n\t}\n\t// a bit annoying but avoids putting unnecessary things into the url (if we would put undefined into it)\n\tif (restriction.start) {\n\t\tparams.start = restriction.start\n\t}\n\tif (restriction.end) {\n\t\tparams.end = restriction.end\n\t}\n\tif (restriction.folderIds.length > 0) {\n\t\tparams.folder = restriction.folderIds\n\t}\n\tif (restriction.field) {\n\t\tparams.field = restriction.field\n\t}\n\tif (restriction.eventSeries != null) {\n\t\tparams.eventSeries = String(restriction.eventSeries)\n\t}\n\n\treturn {\n\t\tpath: \"/search/:category\" + (selectionKey ? \"/\" + selectionKey : \"\"),\n\t\tparams: params,\n\t}\n}\n\nexport function getFreeSearchStartDate(): Date {\n\treturn getStartOfDay(getDayShifted(new Date(), -FIXED_FREE_SEARCH_DAYS))\n}\n\n/**\n * Adjusts the restriction according to the account type if necessary\n */\nexport function createRestriction(\n\tsearchCategory: SearchCategoryTypes,\n\tstart: number | null,\n\tend: number | null,\n\tfield: string | null,\n\tfolderIds: Array<string>,\n\teventSeries: boolean | null,\n): SearchRestriction {\n\tif (locator.logins.getUserController().isFreeAccount() && searchCategory === SearchCategoryTypes.mail) {\n\t\tstart = null\n\t\tend = getFreeSearchStartDate().getTime()\n\t\tfield = null\n\t\tfolderIds = []\n\t\teventSeries = null\n\t}\n\n\tlet r: SearchRestriction = {\n\t\ttype: getSearchType(searchCategory),\n\t\tstart: start,\n\t\tend: end,\n\t\tfield: null,\n\t\tattributeIds: null,\n\t\tfolderIds,\n\t\teventSeries,\n\t}\n\n\tif (!field) {\n\t\treturn r\n\t}\n\n\tif (searchCategory === SearchCategoryTypes.mail) {\n\t\tlet fieldData = SEARCH_MAIL_FIELDS.find((f) => f.field === field)\n\n\t\tif (fieldData) {\n\t\t\tr.field = field\n\t\t\tr.attributeIds = fieldData.attributeIds\n\t\t}\n\t} else if (searchCategory === SearchCategoryTypes.contact) {\n\t\t// nothing to do, the calendar restriction was completely set up already.\n\t} else if (searchCategory === SearchCategoryTypes.calendar) {\n\t\tif (field === \"recipient\") {\n\t\t\tr.field = field\n\t\t\tr.attributeIds = [\n\t\t\t\ttypeModels.Contact.values[\"firstName\"].id,\n\t\t\t\ttypeModels.Contact.values[\"lastName\"].id,\n\t\t\t\ttypeModels.Contact.associations[\"mailAddresses\"].id,\n\t\t\t]\n\t\t} else if (field === \"mailAddress\") {\n\t\t\tr.field = field\n\t\t\tr.attributeIds = [typeModels.Contact.associations[\"mailAddresses\"].id]\n\t\t}\n\t}\n\n\treturn r\n}\n\n/**\n * Adjusts the restriction according to the account type if necessary\n */\nexport function getRestriction(route: string): SearchRestriction {\n\tlet category: SearchCategoryTypes\n\tlet start: number | null = null\n\tlet end: number | null = null\n\tlet field: string | null = null\n\tlet folderIds: Array<string> = []\n\tlet eventSeries: boolean | null = null\n\n\tif (route.startsWith(\"/mail\") || route.startsWith(\"/search/mail\")) {\n\t\tcategory = SearchCategoryTypes.mail\n\n\t\tif (route.startsWith(\"/search/mail\")) {\n\t\t\ttry {\n\t\t\t\t// mithril will parse boolean but not numbers\n\t\t\t\tconst { params } = m.parsePathname(route)\n\t\t\t\tif (typeof params[\"start\"] === \"string\") {\n\t\t\t\t\tstart = filterInt(params[\"start\"])\n\t\t\t\t}\n\n\t\t\t\tif (typeof params[\"end\"] === \"string\") {\n\t\t\t\t\tend = filterInt(params[\"end\"])\n\t\t\t\t}\n\n\t\t\t\tif (typeof params[\"field\"] === \"string\") {\n\t\t\t\t\tconst fieldString = params[\"field\"]\n\t\t\t\t\tfield = SEARCH_MAIL_FIELDS.find((f) => f.field === fieldString)?.field ?? null\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(params[\"folder\"])) {\n\t\t\t\t\tfolderIds = params[\"folder\"]\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"invalid query: \" + route, e)\n\t\t\t}\n\t\t}\n\t} else if (route.startsWith(\"/contact\") || route.startsWith(\"/search/contact\")) {\n\t\tcategory = SearchCategoryTypes.contact\n\t} else if (route.startsWith(\"/calendar\") || route.startsWith(\"/search/calendar\")) {\n\t\tconst { params } = m.parsePathname(route)\n\n\t\ttry {\n\t\t\tif (typeof params[\"eventSeries\"] === \"boolean\") {\n\t\t\t\teventSeries = params[\"eventSeries\"]\n\t\t\t}\n\n\t\t\tif (typeof params[\"start\"] === \"string\") {\n\t\t\t\tstart = filterInt(params[\"start\"])\n\t\t\t}\n\n\t\t\tif (typeof params[\"end\"] === \"string\") {\n\t\t\t\tend = filterInt(params[\"end\"])\n\t\t\t}\n\n\t\t\tconst folder = params[\"folder\"]\n\t\t\tif (Array.isArray(folder)) {\n\t\t\t\tfolderIds = folder\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(\"invalid query: \" + route, e)\n\t\t}\n\n\t\tcategory = SearchCategoryTypes.calendar\n\t\tif (start == null || locator.logins.getUserController().isFreeAccount()) {\n\t\t\tconst now = new Date()\n\t\t\tnow.setDate(1)\n\t\t\tstart = getStartOfDay(now).getTime()\n\t\t}\n\n\t\tif (end == null || locator.logins.getUserController().isFreeAccount()) {\n\t\t\tconst endDate = incrementMonth(new Date(start), 3)\n\t\t\tendDate.setDate(0)\n\t\t\tend = getEndOfDay(endDate).getTime()\n\t\t}\n\t} else {\n\t\tthrow new Error(\"invalid type \" + route)\n\t}\n\n\treturn createRestriction(category, start, end, field, folderIds, eventSeries)\n}\n\nexport function decodeCalendarSearchKey(searchKey: string): { id: Id; start: number } {\n\treturn JSON.parse(decodeBase64(\"utf-8\", base64UrlToBase64(searchKey))) as { id: Id; start: number }\n}\n\nexport function encodeCalendarSearchKey(event: CalendarEvent): string {\n\tconst eventStartTime = event.startTime.getTime()\n\treturn base64ToBase64Url(stringToBase64(JSON.stringify({ start: eventStartTime, id: getElementId(event) })))\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,kBAAkB;AAElB,MAAM,yBAAyB;IAEb,sDAAX;AACN;AACA;AACA;;AACA;AAED,MAAM,oBAAoB;CACzB;EACC,MAAM,oBAAoB;EAC1B,SAAS;CACT;CACD;EACC,MAAM,oBAAoB;EAC1B,SAAS;CACT;CACD;EACC,MAAM,oBAAoB;EAC1B,SAAS;CACT;AACD;AAGM,SAAS,cAAcA,UAA6E;AAC1G,QAAO,cAAc,kBAAkB,KAAK,CAAC,MAAM,EAAE,SAAS,SAAS,CAAC,CAAC;AACzE;MAQYC,qBAAqD;CACjE;EACC,QAAQ;EACR,OAAO;EACP,cAAc;CACd;CACD;EACC,QAAQ;EACR,OAAO;EACP,cAAc,CAAC,WAAW,KAAK,OAAO,WAAW,EAAa;CAC9D;CACD;EACC,QAAQ;EACR,OAAO;EACP,cAAc,CAAC,cAA4E;CAC3F;CACD;EACC,QAAQ;EACR,OAAO;EACP,cAAc,CAAC,WAAW,KAAK,aAAa,UAAU,EAAa;CACnE;CACD;EACC,QAAQ;EACR,OAAO;EACP,cAAc;GACb;GACA;GACA;EACA;CACD;CACD;EACC,QAAQ;EACR,OAAO;EACP,cAAc,CAAC,WAAW,KAAK,aAAa,eAAe,EAAa;CACxE;AACD;AAED,MAAMC,oBAAgC,eAAe;AAQ9C,SAAS,6BAA6BC,aAAqD;AACjG,QAAO,cAAc,kBAAkB,KAAK,CAAC,MAAM,cAAc,EAAE,SAAS,YAAY,KAAK,CAAC,CAAC,CAAC;AAChG;AAGM,SAAS,aAAaC,OAAsBD,aAAgCE,eAA8B,MAAc;CAC9H,MAAM,EAAE,MAAM,QAAQ,GAAG,oBAAoB,OAAO,aAAa,aAAa;AAC9E,QAAO,gBAAE,cAAc,MAAM,OAAmB;AAChD;AAEM,SAAS,oBACfD,OACAD,aACAE,cAIC;CACD,MAAM,WAAW,6BAA6B,YAAY;CAC1D,MAAMC,SAA0D;EAC/D,OAAO,SAAS;EAChB;CACA;AAED,KAAI,YAAY,MACf,QAAO,QAAQ,YAAY;AAE5B,KAAI,YAAY,IACf,QAAO,MAAM,YAAY;AAE1B,KAAI,YAAY,UAAU,SAAS,EAClC,QAAO,SAAS,YAAY;AAE7B,KAAI,YAAY,MACf,QAAO,QAAQ,YAAY;AAE5B,KAAI,YAAY,eAAe,KAC9B,QAAO,cAAc,OAAO,YAAY,YAAY;AAGrD,QAAO;EACN,MAAM,uBAAuB,eAAe,MAAM,eAAe;EACzD;CACR;AACD;AAEM,SAAS,yBAA+B;AAC9C,QAAO,cAAc,cAAc,IAAI,SAAS,uBAAuB,CAAC;AACxE;AAKM,SAAS,kBACfC,gBACAC,OACAC,KACAC,OACAC,WACAC,aACoB;AACpB,KAAI,QAAQ,OAAO,mBAAmB,CAAC,eAAe,IAAI,mBAAmB,oBAAoB,MAAM;AACtG,UAAQ;AACR,QAAM,wBAAwB,CAAC,SAAS;AACxC,UAAQ;AACR,cAAY,CAAE;AACd,gBAAc;CACd;CAED,IAAIC,IAAuB;EAC1B,MAAM,cAAc,eAAe;EAC5B;EACF;EACL,OAAO;EACP,cAAc;EACd;EACA;CACA;AAED,MAAK,MACJ,QAAO;AAGR,KAAI,mBAAmB,oBAAoB,MAAM;EAChD,IAAI,YAAY,mBAAmB,KAAK,CAAC,MAAM,EAAE,UAAU,MAAM;AAEjE,MAAI,WAAW;AACd,KAAE,QAAQ;AACV,KAAE,eAAe,UAAU;EAC3B;CACD,WAAU,mBAAmB,oBAAoB,SAAS,CAE1D,WAAU,mBAAmB,oBAAoB,UACjD;MAAI,UAAU,aAAa;AAC1B,KAAE,QAAQ;AACV,KAAE,eAAe;IAChB,WAAW,QAAQ,OAAO,aAAa;IACvC,WAAW,QAAQ,OAAO,YAAY;IACtC,WAAW,QAAQ,aAAa,iBAAiB;GACjD;EACD,WAAU,UAAU,eAAe;AACnC,KAAE,QAAQ;AACV,KAAE,eAAe,CAAC,WAAW,QAAQ,aAAa,iBAAiB,EAAG;EACtE;;AAGF,QAAO;AACP;AAKM,SAAS,eAAeC,OAAkC;CAChE,IAAIC;CACJ,IAAIP,QAAuB;CAC3B,IAAIC,MAAqB;CACzB,IAAIC,QAAuB;CAC3B,IAAIC,YAA2B,CAAE;CACjC,IAAIC,cAA8B;AAElC,KAAI,MAAM,WAAW,QAAQ,IAAI,MAAM,WAAW,eAAe,EAAE;AAClE,aAAW,oBAAoB;AAE/B,MAAI,MAAM,WAAW,eAAe,CACnC,KAAI;GAEH,MAAM,EAAE,QAAQ,GAAG,gBAAE,cAAc,MAAM;AACzC,cAAW,OAAO,aAAa,SAC9B,SAAQ,UAAU,OAAO,SAAS;AAGnC,cAAW,OAAO,WAAW,SAC5B,OAAM,UAAU,OAAO,OAAO;AAG/B,cAAW,OAAO,aAAa,UAAU;IACxC,MAAM,cAAc,OAAO;AAC3B,YAAQ,mBAAmB,KAAK,CAAC,MAAM,EAAE,UAAU,YAAY,EAAE,SAAS;GAC1E;AAED,OAAI,MAAM,QAAQ,OAAO,UAAU,CAClC,aAAY,OAAO;EAEpB,SAAQ,GAAG;AACX,WAAQ,IAAI,oBAAoB,OAAO,EAAE;EACzC;CAEF,WAAU,MAAM,WAAW,WAAW,IAAI,MAAM,WAAW,kBAAkB,CAC7E,YAAW,oBAAoB;SACrB,MAAM,WAAW,YAAY,IAAI,MAAM,WAAW,mBAAmB,EAAE;EACjF,MAAM,EAAE,QAAQ,GAAG,gBAAE,cAAc,MAAM;AAEzC,MAAI;AACH,cAAW,OAAO,mBAAmB,UACpC,eAAc,OAAO;AAGtB,cAAW,OAAO,aAAa,SAC9B,SAAQ,UAAU,OAAO,SAAS;AAGnC,cAAW,OAAO,WAAW,SAC5B,OAAM,UAAU,OAAO,OAAO;GAG/B,MAAM,SAAS,OAAO;AACtB,OAAI,MAAM,QAAQ,OAAO,CACxB,aAAY;EAEb,SAAQ,GAAG;AACX,WAAQ,IAAI,oBAAoB,OAAO,EAAE;EACzC;AAED,aAAW,oBAAoB;AAC/B,MAAI,SAAS,QAAQ,QAAQ,OAAO,mBAAmB,CAAC,eAAe,EAAE;GACxE,MAAM,MAAM,IAAI;AAChB,OAAI,QAAQ,EAAE;AACd,WAAQ,cAAc,IAAI,CAAC,SAAS;EACpC;AAED,MAAI,OAAO,QAAQ,QAAQ,OAAO,mBAAmB,CAAC,eAAe,EAAE;GACtE,MAAM,UAAU,eAAe,IAAI,KAAK,QAAQ,EAAE;AAClD,WAAQ,QAAQ,EAAE;AAClB,SAAM,YAAY,QAAQ,CAAC,SAAS;EACpC;CACD,MACA,OAAM,IAAI,MAAM,kBAAkB;AAGnC,QAAO,kBAAkB,UAAU,OAAO,KAAK,OAAO,WAAW,YAAY;AAC7E;AAEM,SAAS,wBAAwBI,WAA8C;AACrF,QAAO,KAAK,MAAM,aAAa,SAAS,kBAAkB,UAAU,CAAC,CAAC;AACtE;AAEM,SAAS,wBAAwBC,OAA8B;CACrE,MAAM,iBAAiB,MAAM,UAAU,SAAS;AAChD,QAAO,kBAAkB,eAAe,KAAK,UAAU;EAAE,OAAO;EAAgB,IAAI,aAAa,MAAM;CAAE,EAAC,CAAC,CAAC;AAC5G"}