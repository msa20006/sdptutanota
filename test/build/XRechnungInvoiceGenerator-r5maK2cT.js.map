{"version":3,"file":"XRechnungInvoiceGenerator-r5maK2cT.js","names":["PaymentMethodTypeCodes: Record<PaymentMethod, NumberString>","VatTypeCategoryCodes: Record<VatType, string>","invoice: InvoiceDataGetOut","invoiceNumber: string","customerId: string","buyerMailAddress: string","XRechnungUBLTemplate","InvoiceTexts","invoiceItem: InvoiceDataItem","priceValue: NumberString","date: Date | null","addressLine: string"],"sources":["../../src/common/api/worker/invoicegen/XRechnungUBLTemplate.ts","../../src/common/api/worker/invoicegen/XRechnungInvoiceGenerator.ts"],"sourcesContent":["// WARNING: If you work with this, note that the ORDER in which elements appear can sometimes matter to the validator. (I.e. PostalAddress must come before PartyLegalEntity)\n// NOTE: Do not auto-format this file as it will delete XML root attribute (cac, cbc etc.)\nexport default {\n\tRootInvoice: `\n\t\t<ubl:Invoice xmlns:ubl=\"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\"\n\t\t\t\t\t xmlns:cac=\"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\"\n\t\t\t\t\t xmlns:cbc=\"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\">\n\t\t\t<cbc:CustomizationID>urn:cen.eu:en16931:2017#compliant#urn:xeinkauf.de:kosit:xrechnung_3.0#conformant#urn:xeinkauf.de:kosit:extension:xrechnung_3.0</cbc:CustomizationID>\n\t\t\t{slotMain}\n\t\t</ubl:Invoice>`,\n\n\tRootCreditNote: `\n\t\t<ubl:CreditNote xmlns:ubl=\"urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2\"\n\t\t\t\t\t\txmlns:cac=\"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\"\n\t\t\t\t\t\txmlns:cbc=\"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\">\n\t\t\t<cbc:CustomizationID>urn:cen.eu:en16931:2017#compliant#urn:xeinkauf.de:kosit:xrechnung_3.0</cbc:CustomizationID>\n\t\t\t{slotMain}\n\t\t</ubl:CreditNote>`,\n\n\t// language=HTML\n\tMain: `\n\t\t<cbc:ProfileID>urn:fdc:peppol.eu:2017:poacc:billing:01:1.0</cbc:ProfileID>\n\t\t<cbc:ID>{invoiceNumber}</cbc:ID>\n\t\t<cbc:IssueDate>{issueDate}</cbc:IssueDate>\n\t\t{slotInvoiceType}\n\t\t<cbc:DocumentCurrencyCode>EUR</cbc:DocumentCurrencyCode>\n\t\t<cbc:BuyerReference>{buyerId}</cbc:BuyerReference>\n\t\t{slotSeller}\n\t\t{slotBuyer}\n\t\t<cac:PaymentMeans>\n\t\t\t<cbc:PaymentMeansCode>{paymentMeansCode}</cbc:PaymentMeansCode>\n\t\t\t<cac:PayeeFinancialAccount>\n\t\t\t\t<cbc:ID>DE67250800200138040001</cbc:ID>\n\t\t\t\t<cbc:Name>Tutao GmbH</cbc:Name>\n\t\t\t\t<cac:FinancialInstitutionBranch>\n\t\t\t\t\t<cbc:ID>DRESDEFF250</cbc:ID>\n\t\t\t\t</cac:FinancialInstitutionBranch>\n\t\t\t</cac:PayeeFinancialAccount>\n\t\t</cac:PaymentMeans>\n\t\t{slotPaymentTerms}\n\t\t{slotAllowanceCharge}\n\t\t{slotTotalTax}\n\t\t{slotDocumentTotals}\n\t\t{slotInvoiceLines}`,\n\n\t// language=XML\n\tSeller: `\n\t\t<cac:AccountingSupplierParty>\n\t\t\t<cac:Party>\n\t\t\t\t<cbc:EndpointID schemeID=\"EM\">sales@tutao.de</cbc:EndpointID>\n\t\t\t\t<cac:PartyName>\n\t\t\t\t\t<cbc:Name>Tutao GmbH</cbc:Name>\n\t\t\t\t</cac:PartyName>\n\t\t\t\t<cac:PostalAddress>\n\t\t\t\t\t<cbc:StreetName>Deisterstra√üe 17a</cbc:StreetName>\n\t\t\t\t\t<cbc:CityName>Hannover</cbc:CityName>\n\t\t\t\t\t<cbc:PostalZone>30449</cbc:PostalZone>\n\t\t\t\t\t<cac:Country>\n\t\t\t\t\t\t<cbc:IdentificationCode>DE</cbc:IdentificationCode>\n\t\t\t\t\t</cac:Country>\n\t\t\t\t</cac:PostalAddress>\n\t\t\t\t<cac:PartyTaxScheme>\n\t\t\t\t\t<cbc:CompanyID>DE280903265</cbc:CompanyID>\n\t\t\t\t\t<cac:TaxScheme>\n\t\t\t\t\t\t<cbc:ID>VAT</cbc:ID>\n\t\t\t\t\t</cac:TaxScheme>\n\t\t\t\t</cac:PartyTaxScheme>\n\t\t\t\t<cac:PartyLegalEntity>\n\t\t\t\t\t<cbc:RegistrationName>Tutao GmbH</cbc:RegistrationName>\n\t\t\t\t\t<cbc:CompanyID>208014</cbc:CompanyID>\n\t\t\t\t</cac:PartyLegalEntity>\n\t\t\t\t<cac:Contact>\n\t\t\t\t\t<cbc:Name>Tutao GmbH</cbc:Name>\n\t\t\t\t\t<cbc:Telephone>+49 511202801-0</cbc:Telephone>\n\t\t\t\t\t<cbc:ElectronicMail>sales@tutao.de</cbc:ElectronicMail>\n\t\t\t\t</cac:Contact>\n\t\t\t</cac:Party>\n\t\t</cac:AccountingSupplierParty>`,\n\n\t// language=XML\n\tBuyer: `\n\t\t<cac:AccountingCustomerParty>\n\t\t\t<cac:Party>\n\t\t\t\t<cbc:EndpointID schemeID=\"EM\">{buyerMail}</cbc:EndpointID>\n\t\t\t\t<cac:PostalAddress>\n\t\t\t\t\t<cbc:StreetName>{buyerStreetName}</cbc:StreetName>\n\t\t\t\t\t<cbc:CityName>{buyerCityName}</cbc:CityName>\n\t\t\t\t\t<cbc:PostalZone>{buyerPostalZone}</cbc:PostalZone>\n\t\t\t\t\t<cac:AddressLine>\n\t\t\t\t\t\t<cbc:Line>{buyerAddressLine}</cbc:Line>\n\t\t\t\t\t</cac:AddressLine>\n\t\t\t\t\t<cac:Country>\n\t\t\t\t\t\t<cbc:IdentificationCode>{buyerCountryCode}</cbc:IdentificationCode>\n\t\t\t\t\t</cac:Country>\n\t\t\t\t</cac:PostalAddress>\n\t\t\t\t{slotBuyerVatInfo}\n\t\t\t\t<cac:PartyLegalEntity>\n\t\t\t\t\t<cbc:RegistrationName>{buyerName}</cbc:RegistrationName>\n\t\t\t\t</cac:PartyLegalEntity>\n\t\t\t</cac:Party>\n\t\t</cac:AccountingCustomerParty>`,\n\n\t// language=XML\n\tBuyerVatInfo: `\n\t\t<cac:PartyTaxScheme>\n\t\t\t<cbc:CompanyID>{buyerVatId}</cbc:CompanyID>\n\t\t\t<cac:TaxScheme>\n\t\t\t\t<cbc:ID>VAT</cbc:ID>\n\t\t\t</cac:TaxScheme>\n\t\t</cac:PartyTaxScheme>`,\n\n\t// language=XML\n\tAllowanceCharge: `\n\t\t<cac:AllowanceCharge>\n\t\t\t<cbc:ChargeIndicator>false</cbc:ChargeIndicator>\n\t\t\t<cbc:AllowanceChargeReasonCode>95</cbc:AllowanceChargeReasonCode>\n\t\t\t<cbc:Amount currencyID=\"EUR\">{totalDiscount}</cbc:Amount>\n\t\t\t<cac:TaxCategory>\n\t\t\t\t<cbc:ID>{vatType}</cbc:ID>\n\t\t\t\t<cbc:Percent>{vatPercent}</cbc:Percent>\n\t\t\t\t{slotTaxExemptionReason}\n\t\t\t\t<cac:TaxScheme>\n\t\t\t\t\t<cbc:ID>VAT</cbc:ID>\n\t\t\t\t</cac:TaxScheme>\n\t\t\t</cac:TaxCategory>\n\t\t</cac:AllowanceCharge>\n\t`,\n\n\t// language=XML\n\tTaxTotal: `\n\t\t<cac:TaxTotal>\n\t\t\t<cbc:TaxAmount currencyID=\"EUR\">{vatAmount}</cbc:TaxAmount>\n\t\t\t<cac:TaxSubtotal>\n\t\t\t\t<cbc:TaxableAmount currencyID=\"EUR\">{taxableAmount}</cbc:TaxableAmount>\n\t\t\t\t<cbc:TaxAmount currencyID=\"EUR\">{vatAmount}</cbc:TaxAmount>\n\t\t\t\t<cac:TaxCategory>\n\t\t\t\t\t<cbc:ID>{vatType}</cbc:ID>\n\t\t\t\t\t<cbc:Percent>{vatPercent}</cbc:Percent>\n\t\t\t\t\t{slotTaxExemptionReason}\n\t\t\t\t\t<cac:TaxScheme>\n\t\t\t\t\t\t<cbc:ID>VAT</cbc:ID>\n\t\t\t\t\t</cac:TaxScheme>\n\t\t\t\t</cac:TaxCategory>\n\t\t\t</cac:TaxSubtotal>\n\t\t</cac:TaxTotal>`,\n\n\t// language=XML\n\tDocumentTotals: `\n\t\t<cac:LegalMonetaryTotal>\n\t\t\t<cbc:LineExtensionAmount currencyID=\"EUR\">{sumOfInvoiceLines}</cbc:LineExtensionAmount>\n\t\t\t<cbc:TaxExclusiveAmount currencyID=\"EUR\">{invoiceExclusiveVat}</cbc:TaxExclusiveAmount>\n\t\t\t<cbc:TaxInclusiveAmount currencyID=\"EUR\">{invoiceInclusiveVat}</cbc:TaxInclusiveAmount>\n\t\t\t<cbc:AllowanceTotalAmount currencyID=\"EUR\">{totalDiscount}</cbc:AllowanceTotalAmount>\n\t\t\t<cbc:PayableAmount currencyID=\"EUR\">{amountDueForPayment}</cbc:PayableAmount>\n\t\t</cac:LegalMonetaryTotal>`,\n\n\t// language=XML\n\tInvoiceLine: `\n\t\t<cac:InvoiceLine>\n\t\t\t<cbc:ID>{invoiceLineId}</cbc:ID>\n\t\t\t<cbc:InvoicedQuantity unitCode=\"XPP\">{invoiceLineQuantity}</cbc:InvoicedQuantity>\n\t\t\t<cbc:LineExtensionAmount currencyID=\"EUR\">{invoiceLineTotal}</cbc:LineExtensionAmount>\n\t\t\t<cac:InvoicePeriod>\n\t\t\t\t<cbc:StartDate>{invoiceLineStartDate}</cbc:StartDate>\n\t\t\t\t<cbc:EndDate>{invoiceLineEndDate}</cbc:EndDate>\n\t\t\t</cac:InvoicePeriod>\n\t\t\t<cac:Item>\n\t\t\t\t<cbc:Name>{invoiceLineItemName}</cbc:Name>\n\t\t\t\t<cac:ClassifiedTaxCategory>\n\t\t\t\t\t<cbc:ID>{invoiceLineItemVatType}</cbc:ID>\n\t\t\t\t\t<cbc:Percent>{invoiceLineItemVatPercent}</cbc:Percent>\n\t\t\t\t\t<cac:TaxScheme>\n\t\t\t\t\t\t<cbc:ID>VAT</cbc:ID>\n\t\t\t\t\t</cac:TaxScheme>\n\t\t\t\t</cac:ClassifiedTaxCategory>\n\t\t\t</cac:Item>\n\t\t\t<cac:Price>\n\t\t\t\t<cbc:PriceAmount currencyID=\"EUR\">{invoiceLineItemPrice}</cbc:PriceAmount>\n\t\t\t</cac:Price>\n\t\t</cac:InvoiceLine>`,\n\n\t// language=XML\n\tCreditNoteLine: `\n\t\t<cac:CreditNoteLine>\n\t\t\t<cbc:ID>{invoiceLineId}</cbc:ID>\n\t\t\t<cbc:CreditedQuantity unitCode=\"XPP\">{invoiceLineQuantity}</cbc:CreditedQuantity>\n\t\t\t<cbc:LineExtensionAmount currencyID=\"EUR\">{invoiceLineTotal}</cbc:LineExtensionAmount>\n\t\t\t<cac:InvoicePeriod>\n\t\t\t\t<cbc:StartDate>{invoiceLineStartDate}</cbc:StartDate>\n\t\t\t\t<cbc:EndDate>{invoiceLineEndDate}</cbc:EndDate>\n\t\t\t</cac:InvoicePeriod>\n\t\t\t<cac:Item>\n\t\t\t\t<cbc:Name>{invoiceLineItemName}</cbc:Name>\n\t\t\t\t<cac:ClassifiedTaxCategory>\n\t\t\t\t\t<cbc:ID>{invoiceLineItemVatType}</cbc:ID>\n\t\t\t\t\t<cbc:Percent>{invoiceLineItemVatPercent}</cbc:Percent>\n\t\t\t\t\t<cac:TaxScheme>\n\t\t\t\t\t\t<cbc:ID>VAT</cbc:ID>\n\t\t\t\t\t</cac:TaxScheme>\n\t\t\t\t</cac:ClassifiedTaxCategory>\n\t\t\t</cac:Item>\n\t\t\t<cac:Price>\n\t\t\t\t<cbc:PriceAmount currencyID=\"EUR\">{invoiceLineItemPrice}</cbc:PriceAmount>\n\t\t\t</cac:Price>\n\t\t</cac:CreditNoteLine>\n\t`,\n}\n","import { InvoiceDataGetOut, InvoiceDataItem } from \"../../entities/sys/TypeRefs.js\"\nimport XRechnungUBLTemplate from \"./XRechnungUBLTemplate.js\"\nimport InvoiceTexts from \"./InvoiceTexts.js\"\nimport { countryUsesGerman, getInvoiceItemTypeName, InvoiceType, PaymentMethod, VatType } from \"./InvoiceUtils.js\"\n\nconst DE_POSTAL_CODE_REGEX = new RegExp(/\\d{5}/)\nconst CITY_NAME_REGEX = new RegExp(/\\d{5}/)\n\nconst PaymentMethodTypeCodes: Record<PaymentMethod, NumberString> = Object.freeze({\n\t[PaymentMethod.INVOICE]: \"31\",\n\t[PaymentMethod.CREDIT_CARD]: \"97\",\n\t[PaymentMethod.SEPA_UNUSED]: \"59\",\n\t[PaymentMethod.PAYPAL]: \"68\",\n\t[PaymentMethod.ACCOUNT_BALANCE]: \"97\",\n})\n\nconst VatTypeCategoryCodes: Record<VatType, string> = Object.freeze({\n\t[VatType.NO_VAT]: \"E\",\n\t[VatType.ADD_VAT]: \"S\",\n\t[VatType.VAT_INCLUDED_SHOWN]: \"S\",\n\t[VatType.VAT_INCLUDED_HIDDEN]: \"S\",\n\t[VatType.NO_VAT_CHARGE_TUTAO]: \"AE\",\n})\n\n/**\n * Object for generating XRechnung invoices.\n * These are electronic invoices conforming to the European standard EN16931 and the German CIUS+Extension XRechnung standard.\n * They are a legal requirement and also improve the billing process for business users.\n * The resulting invoice is an XML file in UBL syntax.\n *\n * This generator is ONLY responsible for processing the data it gets and formatting it in a way that does not change anything about it.\n * If adjustments to the data must be made prior to generation, then these should take place within the RenderInvoice service.\n */\nexport class XRechnungInvoiceGenerator {\n\tprivate readonly languageCode: \"de\" | \"en\" = \"en\"\n\tprivate readonly invoiceNumber: string\n\tprivate readonly customerId: string\n\tprivate readonly buyerMailAddress: string\n\tprivate invoice: InvoiceDataGetOut\n\tprivate itemIndex: number = 0\n\tprivate discountItems: InvoiceDataItem[] = []\n\tprivate totalDiscountSum: number = -1\n\n\tconstructor(invoice: InvoiceDataGetOut, invoiceNumber: string, customerId: string, buyerMailAddress: string) {\n\t\tthis.invoice = invoice\n\t\tthis.invoiceNumber = invoiceNumber\n\t\tthis.customerId = customerId\n\t\tthis.languageCode = countryUsesGerman(this.invoice.country)\n\t\tthis.buyerMailAddress = buyerMailAddress\n\t}\n\n\t/**\n\t * Generate the XRechnung xml file\n\t */\n\tgenerate(): Uint8Array {\n\t\tlet stringTemplate =\n\t\t\t`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n` +\n\t\t\t(this.invoice.invoiceType === InvoiceType.INVOICE ? XRechnungUBLTemplate.RootInvoice : XRechnungUBLTemplate.RootCreditNote)\n\t\tstringTemplate = stringTemplate\n\t\t\t.replace(\"{slotMain}\", XRechnungUBLTemplate.Main)\n\t\t\t.replace(\"{slotInvoiceLines}\", this.resolveInvoiceLines()) // Must run first to calculate potential discounts\n\t\t\t.replace(\"{invoiceNumber}\", this.invoiceNumber)\n\t\t\t.replace(\"{issueDate}\", formatDate(this.invoice.date))\n\t\t\t.replace(\"{slotInvoiceType}\", this.resolveInvoiceType())\n\t\t\t.replace(\"{buyerId}\", this.customerId)\n\t\t\t.replace(\"{slotSeller}\", XRechnungUBLTemplate.Seller)\n\t\t\t.replace(\"{slotBuyer}\", this.resolveBuyer())\n\t\t\t.replace(\"{paymentMeansCode}\", PaymentMethodTypeCodes[this.invoice.paymentMethod as PaymentMethod])\n\t\t\t.replace(\"{slotPaymentTerms}\", this.resolvePaymentTerms())\n\t\t\t.replace(\"{slotAllowanceCharge}\", this.resolveAllowanceCharge())\n\t\t\t.replace(\"{slotTotalTax}\", this.resolveTotalTax())\n\t\t\t.replace(\"{slotDocumentTotals}\", this.resolveDocumentsTotal())\n\t\t\t.replaceAll(/^\\t\\t/gm, \"\")\n\t\treturn new TextEncoder().encode(stringTemplate)\n\t}\n\n\t/**\n\t * Resolves the root of the xml depending on invoice type (billing invoice or credit)\n\t * @private\n\t */\n\tprivate resolveInvoiceType(): string {\n\t\tif (this.invoice.invoiceType === InvoiceType.INVOICE) {\n\t\t\treturn `<cbc:InvoiceTypeCode>380</cbc:InvoiceTypeCode>`\n\t\t}\n\t\treturn `<cbc:CreditNoteTypeCode>381</cbc:CreditNoteTypeCode>`\n\t}\n\n\t/**\n\t * Resolves placeholders concerning the buyer (customer)\n\t * buyerMail - Electronic address of the customer\n\t * buyerStreetName - despite its name, also includes the street number\n\t * buyerCityName - self-explanatory\n\t * buyerPostalZone - despite its name, only refers to the postal code, not any associated city\n\t * buyerCountryCode - self-explanatory\n\t * buyerName - Legal name / company name of the customer -> The first line of the address field\n\t * @private\n\t */\n\tprivate resolveBuyer(): string {\n\t\tconst addressParts = this.invoice.address.split(\"\\n\")\n\t\treturn XRechnungUBLTemplate.Buyer.replace(\"{buyerMail}\", this.buyerMailAddress)\n\t\t\t.replace(\"{buyerStreetName}\", addressParts[1] ?? \"STREET NAME UNKNOWN\")\n\t\t\t.replace(\"{buyerCityName}\", extractCityName(addressParts[2] ?? \"\"))\n\t\t\t.replace(\"{buyerPostalZone}\", extractPostalCode(addressParts[2] ?? \"\"))\n\t\t\t.replace(\"{buyerCountryCode}\", this.invoice.country)\n\t\t\t.replace(\"{buyerAddressLine}\", this.invoice.address.replaceAll(\"\\n\", \" \"))\n\t\t\t.replace(\"{slotBuyerVatInfo}\", this.resolveBuyerVatInfo())\n\t\t\t.replace(\"{buyerName}\", addressParts[0] ?? \"BUYER NAME UNKNOWN\")\n\t}\n\n\t/**\n\t * Resolves tax info about the buyer (customer). Only resolved if the buyer has a vatIdNumber.\n\t * buyerVatId - Customer's vatIdNumber\n\t * @private\n\t */\n\tprivate resolveBuyerVatInfo(): string {\n\t\tif (this.invoice.vatIdNumber != null) {\n\t\t\treturn XRechnungUBLTemplate.BuyerVatInfo.replace(\"{buyerVatId}\", this.invoice.vatIdNumber)\n\t\t}\n\t\treturn \"\"\n\t}\n\n\t/**\n\t * Resolves the payment note, i.e. the instructions for the buyer\n\t * These are the same texts below the summary table of a PDF invoice\n\t * @private\n\t */\n\tprivate resolvePaymentNote(): string {\n\t\tlet paymentNote = \"\"\n\t\tif (this.invoice.invoiceType === InvoiceType.INVOICE) {\n\t\t\tswitch (this.invoice.paymentMethod) {\n\t\t\t\tcase PaymentMethod.INVOICE:\n\t\t\t\t\tpaymentNote += `${InvoiceTexts[this.languageCode].paymentInvoiceDue1} ${InvoiceTexts[this.languageCode].paymentInvoiceDue2} ${\n\t\t\t\t\t\tInvoiceTexts[this.languageCode].paymentInvoiceHolder\n\t\t\t\t\t} ${InvoiceTexts[this.languageCode].paymentInvoiceBank} ${InvoiceTexts[this.languageCode].paymentInvoiceIBAN} ${\n\t\t\t\t\t\tInvoiceTexts[this.languageCode].paymentInvoiceBIC\n\t\t\t\t\t} ${InvoiceTexts[this.languageCode].paymentInvoiceProvideNumber1} ${this.invoiceNumber} ${\n\t\t\t\t\t\tInvoiceTexts[this.languageCode].paymentInvoiceProvideNumber2\n\t\t\t\t\t}`\n\t\t\t\t\tbreak\n\t\t\t\tcase PaymentMethod.CREDIT_CARD:\n\t\t\t\t\tpaymentNote += `${InvoiceTexts[this.languageCode].paymentCreditCard}`\n\t\t\t\t\tbreak\n\t\t\t\tcase PaymentMethod.PAYPAL:\n\t\t\t\t\tpaymentNote += `${InvoiceTexts[this.languageCode].paymentPaypal}`\n\t\t\t\t\tbreak\n\t\t\t\tcase PaymentMethod.ACCOUNT_BALANCE:\n\t\t\t\t\tpaymentNote += `${InvoiceTexts[this.languageCode].paymentAccountBalance}`\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t\tpaymentNote += \" \" + InvoiceTexts[this.languageCode].thankYou\n\t\t}\n\t\treturn paymentNote\n\t}\n\n\t/**\n\t * Resolves the payment terms (supplementary note to customer) if the invoice is a billing invoice\n\t * @private\n\t */\n\tprivate resolvePaymentTerms(): string {\n\t\tif (this.invoice.invoiceType === InvoiceType.INVOICE) {\n\t\t\t// language=HTML\n\t\t\treturn `\n\t\t\t\t<cac:PaymentTerms>\n\t\t\t\t\t<cbc:Note>${this.resolvePaymentNote()}</cbc:Note>\n\t\t\t\t</cac:PaymentTerms>\n\t\t\t`\n\t\t}\n\t\treturn \"\"\n\t}\n\n\t/**\n\t * Resolves all information about potential discounts\n\t * totalDiscount - Inverted sum of all discount invoiceitems\n\t * vatType - Standardized VAT category code\n\t * vatPercent - Percentage of the vat applied. I.e. 19% -> vatPercent == 19\n\t * taxableAmount - Amount that is subject to the tax. Usually this is the entire amount, so the subTotal\n\t * vatAmount - The amount of the tax. This is equal to \"taxableAmount * vatPercent\"\n\t * @private\n\t */\n\tprivate resolveAllowanceCharge(): string {\n\t\treturn XRechnungUBLTemplate.AllowanceCharge.replace(\"{totalDiscount}\", this.calculateTotalDiscount().toFixed(2))\n\t\t\t.replace(\"{vatType}\", VatTypeCategoryCodes[this.invoice.vatType as VatType])\n\t\t\t.replace(\"{vatPercent}\", this.invoice.vatRate)\n\t\t\t.replace(\"{slotTaxExemptionReason}\", this.resolveTaxExemptionReason())\n\t\t\t.replace(\"{taxableAmount}\", this.getVatExcludedPrice(this.invoice.subTotal))\n\t\t\t.replaceAll(\"{vatAmount}\", this.invoice.vat)\n\t}\n\n\t/**\n\t * Resolves the total tax slot: summarized information of all applied taxes (vat)\n\t * vatType - Standardized VAT category code\n\t * vatPercent - Percentage of the vat applied. I.e. 19% -> vatPercent == 19\n\t * taxableAmount - Amount that is subject to the tax. Usually this is the entire amount, so the subTotal\n\t * vatAmount - The amount of the tax. This is equal to \"taxableAmount * vatPercent\"\n\t * @private\n\t */\n\tprivate resolveTotalTax(): string {\n\t\treturn XRechnungUBLTemplate.TaxTotal.replace(\"{vatType}\", VatTypeCategoryCodes[this.invoice.vatType as VatType])\n\t\t\t.replace(\"{vatPercent}\", this.invoice.vatRate)\n\t\t\t.replace(\"{slotTaxExemptionReason}\", this.resolveTaxExemptionReason())\n\t\t\t.replace(\"{taxableAmount}\", this.getVatExcludedPrice(this.invoice.subTotal))\n\t\t\t.replaceAll(\"{vatAmount}\", this.invoice.vat)\n\t}\n\n\t/**\n\t * Resolves the textual reason why taxes are exempt. Only resolved if the vat type is reverse-charge\n\t * @private\n\t */\n\tprivate resolveTaxExemptionReason(): string {\n\t\t// Needs fix @arm, @jug, @jop\n\t\tif (this.invoice.vatType === VatType.NO_VAT || this.invoice.vatType === VatType.NO_VAT_CHARGE_TUTAO) {\n\t\t\treturn `<cbc:TaxExemptionReason>Umkehrung der Steuerschuldnerschaft</cbc:TaxExemptionReason>`\n\t\t}\n\t\treturn \"\"\n\t}\n\n\t/**\n\t * Resolves the document total slot: summarized information of the pricing\n\t * sumOfInvoiceLines - The total amount of all invoice items summed up alongside their quantity (amount): subTotal\n\t * invoiceExclusiveVat - The total amount of the entire invoice without vat: subTotal\n\t * invoiceInclusiveVat - The total amount of the entire invoice with vat: grandTotal\n\t * amountDueForPayment - The final amount the buyer is billed with: grandTotal\n\t * @private\n\t */\n\tprivate resolveDocumentsTotal(): string {\n\t\treturn XRechnungUBLTemplate.DocumentTotals.replace(\n\t\t\t\"{sumOfInvoiceLines}\",\n\t\t\tthis.getVatExcludedPrice((parseFloat(this.invoice.subTotal) + this.calculateTotalDiscount()).toFixed(2)),\n\t\t)\n\t\t\t.replace(\"{invoiceExclusiveVat}\", this.getVatExcludedPrice(this.invoice.subTotal))\n\t\t\t.replace(\"{invoiceInclusiveVat}\", this.invoice.grandTotal)\n\t\t\t.replace(\"{amountDueForPayment}\", this.invoice.grandTotal)\n\t\t\t.replace(\"{totalDiscount}\", this.calculateTotalDiscount().toFixed(2))\n\t}\n\n\t/**\n\t * Resolves all invoice items (invoiceLines) by iterating over every invoice item and resolving a list for it\n\t * @private\n\t */\n\tprivate resolveInvoiceLines(): string {\n\t\tlet invoiceLines = \"\"\n\t\tif (this.invoice.invoiceType === InvoiceType.INVOICE) {\n\t\t\tfor (const invoiceItem of this.invoice.items) {\n\t\t\t\tinvoiceLines += this.resolveInvoiceLine(invoiceItem)\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const invoiceItem of this.invoice.items) {\n\t\t\t\tinvoiceLines += this.resolveCreditNoteLine(invoiceItem)\n\t\t\t}\n\t\t}\n\t\treturn invoiceLines\n\t}\n\n\t/**\n\t * Resolves a singular invoice item (invoiceLine): information about one row in an invoice table\n\t * invoiceLineQuantity - The amount (quantity) of the item in the invoice line, so the invoiceItem's amount\n\t * invoiceLineTotal - The total price of the invoice line. This is equal to \"itemPrice * quantity\" == totalPrice\n\t * invoiceLineStartDate - self-explanatory\n\t * invoiceLineEndDate - self-explanatory\n\t * invoiceLineItemName - self-explanatory\n\t * invoiceLineItemVatType - Standardized Vat category code for this item. Equal to the vat type of the entire invoice\n\t * invoiceLineItemVatPercent - Percentage of vat applied to this item. Equal to the vat percentage of the entire invoice\n\t * invoiceLineItemPrice - Price of the singular item: singlePrice\n\t * @param invoiceItem\n\t * @private\n\t */\n\tprivate resolveInvoiceLine(invoiceItem: InvoiceDataItem): string {\n\t\tthis.itemIndex++\n\t\t// If the invoice has a negative price it is some form of credit or discount.\n\t\t// This is not the definition of an \"invoice item\" in the traditional sense, and therefore we treat it as a discount later applied to the whole invoice.\n\t\tif (parseFloat(invoiceItem.totalPrice) < 0) {\n\t\t\tthis.discountItems.push(invoiceItem)\n\t\t\treturn \"\"\n\t\t}\n\t\treturn XRechnungUBLTemplate.InvoiceLine.replace(\"{invoiceLineId}\", this.itemIndex.toString())\n\t\t\t.replace(\"{invoiceLineQuantity}\", invoiceItem.amount)\n\t\t\t.replace(\"{invoiceLineTotal}\", this.getVatExcludedPrice(invoiceItem.totalPrice))\n\t\t\t.replace(\"{invoiceLineStartDate}\", formatDate(invoiceItem.startDate))\n\t\t\t.replace(\"{invoiceLineEndDate}\", formatDate(invoiceItem.endDate))\n\t\t\t.replace(\"{invoiceLineItemName}\", getInvoiceItemTypeName(invoiceItem.itemType, this.languageCode))\n\t\t\t.replace(\"{invoiceLineItemVatType}\", VatTypeCategoryCodes[this.invoice.vatType as VatType])\n\t\t\t.replace(\"{invoiceLineItemVatPercent}\", this.invoice.vatRate)\n\t\t\t.replace(\"{invoiceLineItemPrice}\", this.getVatExcludedPrice(getInvoiceItemPrice(invoiceItem)))\n\t}\n\n\t/**\n\t * Same as resolveInvoiceLine but for CreditNotes\n\t * @param invoiceItem\n\t * @private\n\t */\n\tprivate resolveCreditNoteLine(invoiceItem: InvoiceDataItem): string {\n\t\tthis.itemIndex++\n\t\treturn XRechnungUBLTemplate.CreditNoteLine.replace(\"{invoiceLineId}\", this.itemIndex.toString())\n\t\t\t.replace(\"{invoiceLineQuantity}\", invoiceItem.amount)\n\t\t\t.replace(\"{invoiceLineTotal}\", this.getVatExcludedPrice(invoiceItem.totalPrice))\n\t\t\t.replace(\"{invoiceLineStartDate}\", formatDate(invoiceItem.startDate))\n\t\t\t.replace(\"{invoiceLineEndDate}\", formatDate(invoiceItem.endDate))\n\t\t\t.replace(\"{invoiceLineItemName}\", getInvoiceItemTypeName(invoiceItem.itemType, this.languageCode))\n\t\t\t.replace(\"{invoiceLineItemVatType}\", VatTypeCategoryCodes[this.invoice.vatType as VatType])\n\t\t\t.replace(\"{invoiceLineItemVatPercent}\", this.invoice.vatRate)\n\t\t\t.replace(\"{invoiceLineItemPrice}\", this.getVatExcludedPrice(getInvoiceItemPrice(invoiceItem)))\n\t}\n\n\t/**\n\t * Calculates the total discount applied to the entire invoice. The discount is a positive number that is to be subtracted from the invoice total\n\t * The discount is calculated by iterating over every invoiceItem that is of type \"discount\" and adding it up.\n\t * @private\n\t */\n\tprivate calculateTotalDiscount(): number {\n\t\tif (this.totalDiscountSum !== -1) {\n\t\t\treturn this.totalDiscountSum\n\t\t}\n\t\tthis.totalDiscountSum = 0\n\t\tfor (const discountItem of this.discountItems) {\n\t\t\tthis.totalDiscountSum += parseFloat(discountItem.totalPrice)\n\t\t}\n\t\tthis.totalDiscountSum *= -1\n\t\treturn this.totalDiscountSum\n\t}\n\n\t/**\n\t * Recalculates a price if the vat is already included. I.e. subtracts the applied vat\n\t * Returns the price with vat excluded\n\t * @param priceValue\n\t * @private\n\t */\n\tprivate getVatExcludedPrice(priceValue: NumberString): NumberString {\n\t\tswitch (this.invoice.vatType) {\n\t\t\tcase VatType.VAT_INCLUDED_SHOWN:\n\t\t\tcase VatType.VAT_INCLUDED_HIDDEN: {\n\t\t\t\tconst nPriceValue = parseFloat(priceValue)\n\t\t\t\tconst nVat = parseFloat(this.invoice.vat)\n\t\t\t\treturn (nPriceValue - nVat).toFixed(2)\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t\treturn priceValue\n\t}\n}\n\n/**\n * Formats a date to be of the pattern \"yyyy-mm-dd\"\n * @param date\n */\nfunction formatDate(date: Date | null): string {\n\tif (date != null) {\n\t\treturn date.toISOString().split(\"T\")[0]\n\t}\n\treturn \"No date given.\"\n}\n\n/**\n * Returns the price of an invoice item.\n * This is singlePrice if the amount of item is 1 or totalPrice if not.\n * @param invoiceItem\n */\nfunction getInvoiceItemPrice(invoiceItem: InvoiceDataItem): string {\n\tif (invoiceItem.singlePrice != null) {\n\t\treturn invoiceItem.singlePrice\n\t}\n\treturn invoiceItem.totalPrice\n}\n\n/**\n * Naively tries to extract a German postal code.\n * If this extraction fails, returns a string notifying the user to consult their full address line\n * @param addressLine\n */\nexport function extractPostalCode(addressLine: string): string {\n\tconst match = addressLine.match(DE_POSTAL_CODE_REGEX)\n\tif (match && match[0]) {\n\t\treturn match[0].trim()\n\t}\n\treturn \"Could not extract postal code. Please refer to full address line.\"\n}\n\n/**\n * Naively tries to extract the city name from the third line.\n * If this extraction fails, then we accept that the city field of the customer is filled incorrectly and must be manually changed by them\n * @param addressLine\n */\nexport function extractCityName(addressLine: string): string {\n\tconst cityName = addressLine.replace(CITY_NAME_REGEX, \"\").replace(\",\", \"\").trim()\n\tif (cityName === \"\") {\n\t\treturn \"Could not extract city name. Please refer to full address line.\"\n\t}\n\treturn cityName\n}\n"],"mappings":"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"}