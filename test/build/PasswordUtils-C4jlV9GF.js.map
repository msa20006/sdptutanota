{"version":3,"file":"PasswordUtils-C4jlV9GF.js","names":["password: string","badStrings: string[]","recipientInfo: PartialRecipient","mailboxDetails: MailboxDetail","logins: LoginController","passwordStrength: number","sequences: string[]","reverseToo: boolean","string: string","regexp: RegExp"],"sources":["../../src/common/misc/passwords/PasswordUtils.ts"],"sourcesContent":["import type { MailboxDetail } from \"../../mailFunctionality/MailboxModel.js\"\nimport type { LoginController } from \"../../api/main/LoginController\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { PartialRecipient } from \"../../api/common/recipients/Recipient\"\nimport { getEnabledMailAddressesWithUser, getMailboxName } from \"../../mailFunctionality/SharedMailUtils.js\"\n\nassertMainOrNode()\n/** password strength resulting in a full bar */\nexport const PASSWORD_MAX_VALUE = 80\nexport const PASSWORD_MIN_VALUE = 0\n/** the minimum password strength we accept, but the user can choose a stronger password */\nexport const PASSWORD_MIN_SECURE_VALUE = 64\nexport const _BAD_SEQUENCES = [\n\t\"^1234567890ß´\",\n\t'°!\"§$%&/()=?`',\n\t\"qwertzuiopü+\",\n\t\"asdfghjklöä#\",\n\t\"<yxcvbnm,.-\",\n\t\"`1234567890-=\",\n\t\"~!@#$%^&*()_+\",\n\t\"qwertyuiop[]\",\n\t\"asdfghjkl'\\\\\",\n\t\"\\\\zxcvbnm,./\",\n\t\"abcdefghijklmnopqrstuvwxyz\",\n]\nconst _BAD_STRINGS = [\"passwort\", \"password\", \"tutanota\", \"free\", \"test\", \"keemail\", \"tutamail\"]\n\n/**\n * Checks how secure the given password is. The following password characteristics decrease the password strength:\n * - irregular distribution of characters across the character classes lower case, upper case, digit, other\n * - consecutive characters of the same class\n * - same chars\n * - same consecutive chars\n * - keyboard (german/english) or alphabet sequences\n * - bad strings (statically defined and passed to function in badStrings)\n * @param password The password to check.\n * @param badStrings Strings that reduce the strength of the password.\n * @return A number from 0 to PASSWORD_MAX_VALUE.\n */\nexport function getPasswordStrength(password: string, badStrings: string[]): number {\n\tif (password.length === 0) return 0\n\n\t// calculate the characteristics of the password\n\tlet nbrOfLowerChars = _getNbrOfOccurrences(password, /[a-z ]/g)\n\n\tlet nbrOfConsecutiveLowerChars = Math.max(0, _getLongestResult(password, /[a-z ]*/g) - 2) // consecutive chars > 2\n\n\tlet nbrOfUpperChars = _getNbrOfOccurrences(password, /[A-Z]/g)\n\n\tlet nbrOfConsecutiveUpperChars = Math.max(0, _getLongestResult(password, /[A-Z]*/g) - 2)\n\n\tlet nbrOfDigits = _getNbrOfOccurrences(password, /[0-9]/g)\n\n\tlet nbrOfConsecutiveDigits = Math.max(0, _getLongestResult(password, /[0-9]*/g) - 2)\n\tlet nbrOfOtherChars = password.length - nbrOfDigits - nbrOfLowerChars - nbrOfUpperChars\n\tlet nbrOfConsecutiveOtherChars = Math.max(0, _getLongestResult(password, /[^a-z A-Z0-9]*/g) - 2)\n\tlet nbrOfConsecutiveSame = Math.max(0, _getLongestResult(password, /(.)\\1+/g) - 2)\n\tlet minNbrOfCharsPerType = password.length / 4 // best is 1/4 lower case, 1/4 upper case, 1/4 digits, 1/4 other chars\n\n\t// all these values decrease the strength\n\tlet nbrOfMissingLowerChars = Math.max(0, minNbrOfCharsPerType - nbrOfLowerChars)\n\tlet nbrOfMissingUpperChars = Math.max(0, minNbrOfCharsPerType - nbrOfUpperChars)\n\tlet nbrOfMissingDigits = Math.max(0, minNbrOfCharsPerType - nbrOfDigits)\n\tlet nbrOfMissingOtherChars = Math.max(0, minNbrOfCharsPerType - nbrOfOtherChars)\n\n\tlet nbrOfSameChars = _getNbrOfSameChars(password)\n\n\tlet nbrOfSequenceDigits = _getNbrOfSequenceChars(password.toLowerCase(), _BAD_SEQUENCES, true)\n\n\tlet nbrOfBadStringDigits = _getNbrOfSequenceChars(password.toLowerCase(), badStrings.map((s) => s.toLowerCase()).concat(_BAD_STRINGS), false)\n\n\tlet strength = password.length * 11 // 11 = strength per character without reduction\n\n\tstrength -= nbrOfMissingLowerChars * 3\n\tstrength -= nbrOfMissingUpperChars * 3\n\tstrength -= nbrOfMissingDigits * 3\n\tstrength -= nbrOfMissingOtherChars * 3\n\tstrength -= nbrOfConsecutiveLowerChars * 2\n\tstrength -= nbrOfConsecutiveUpperChars * 2\n\tstrength -= nbrOfConsecutiveDigits * 2\n\tstrength -= nbrOfConsecutiveOtherChars * 2\n\tstrength -= nbrOfConsecutiveSame * 2\n\tstrength -= nbrOfSameChars * 5\n\tstrength -= nbrOfSequenceDigits * 4\n\tstrength -= nbrOfBadStringDigits * 4\n\treturn Math.min(PASSWORD_MAX_VALUE, Math.max(PASSWORD_MIN_VALUE, Math.round(strength)))\n}\n\nexport function getPasswordStrengthForUser(password: string, recipientInfo: PartialRecipient, mailboxDetails: MailboxDetail, logins: LoginController): number {\n\tlet reserved = getEnabledMailAddressesWithUser(mailboxDetails, logins.getUserController().userGroupInfo).concat(\n\t\tgetMailboxName(logins, mailboxDetails),\n\t\trecipientInfo.address,\n\t\trecipientInfo.name ?? \"\",\n\t)\n\treturn Math.min(PASSWORD_MAX_VALUE, getPasswordStrength(password, reserved))\n}\n\n/**\n * Maps the password strength from the range 0 to PASSWORD_MAX_VALUE to the range 0% to 100%. Therefore, if a password reaches the PASSWORD_MIN_SECURE_VALUE it is not at 100% yet.\n * @return A value indicating the password strength between 0 and 100.\n */\nexport function scaleToVisualPasswordStrength(passwordStrength: number): number {\n\treturn Math.min(100, (passwordStrength / PASSWORD_MAX_VALUE) * 100)\n}\n\nexport function isSecurePassword(passwordStrength: number): boolean {\n\treturn passwordStrength >= PASSWORD_MIN_SECURE_VALUE\n}\n\n/**\n * Provides the number of repetitions of any characters in the given password at any position.\n * @param password The password to check.\n * @returns The number of same characters.\n */\nfunction _getNbrOfSameChars(password: string): number {\n\tconst characterObject = new Set<string>()\n\n\tfor (const c of password) {\n\t\tcharacterObject.add(c)\n\t}\n\n\treturn password.length - characterObject.size\n}\n\n/**\n * Provides the number of chars in the given password that contains parts (> 2 characters) of the given sequences.\n * @param password The password to check.\n * @param sequences The sequences to check.\n * @param reverseToo If true, also all reverse sequences are checked.\n * @returns The number of chars that match any sequences.\n */\nexport function _getNbrOfSequenceChars(password: string, sequences: string[], reverseToo: boolean): number {\n\t// all sequences to the list of checked sequences s. also add all reverse sequences if requested\n\tlet s = sequences\n\n\tif (reverseToo) {\n\t\ts = sequences.concat(sequences.map((s1) => s1.split(\"\").reverse().join(\"\")))\n\t}\n\n\tlet MIN_SEQUENCE_LEN = 4\n\tlet nbrOfSequenceDigits = 0\n\n\t// check the part of the password (substringToCheck) from i to i+sequenceLen in a loop\n\tfor (let i = 0; i <= password.length - MIN_SEQUENCE_LEN; i++) {\n\t\tlet maxFoundLen = 0\n\n\t\tfor (let sequenceLen = MIN_SEQUENCE_LEN; i + sequenceLen <= password.length; sequenceLen++) {\n\t\t\tlet substringToCheck = password.substring(i, i + sequenceLen)\n\n\t\t\tfor (let a = 0; a < s.length; a++) {\n\t\t\t\tif (s[a].indexOf(substringToCheck) !== -1) {\n\t\t\t\t\tmaxFoundLen = sequenceLen\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (maxFoundLen > 0) {\n\t\t\tnbrOfSequenceDigits += maxFoundLen\n\t\t\ti += maxFoundLen - 1 // skip the found sequence. -1 because the for loop also decreases by 1\n\t\t}\n\t}\n\n\treturn nbrOfSequenceDigits\n}\n\n/**\n * Gets the number of occurrences of the given regular expression in the given string.\n * @param string The string to check.\n * @param regexp The reqular expression to check against.\n * @return The number of occurrences.\n */\nfunction _getNbrOfOccurrences(string: string, regexp: RegExp): number {\n\tlet result = string.match(regexp)\n\treturn result ? result.length : 0\n}\n\n/**\n * Gets the number of characters in the longest result when checking the given string against the given regular expression.\n * @param string The string to check.\n * @param regexp The reqular expression to check against.\n * @returns The number of characters of the longest result.\n */\nfunction _getLongestResult(string: string, regexp: RegExp): number {\n\tlet result = string.match(regexp)\n\treturn result ? result.reduce((max, val) => Math.max(max, val.length), 0) : 0\n}\n"],"mappings":"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"}