{"version":3,"file":"VCardImporter-D9iigKrh.js","names":["vCardFileData: string","details: string","details: string[]","addressDetails: string","encoding: string","charset: string","text: string","cs: string","l: string","property: string","tagValue: string","vCardList: string[]","ownerGroupId: Id","contacts: Contact[]","lastName: string","firstName: string","title: string | null","birthdayIso: string | null","company: string","comment: string","nickname: string | null","addresses: Array<ContactAddress>","mailAddresses: Array<ContactMailAddress>","phoneNumbers: Array<ContactPhoneNumber>","websites: Array<ContactWebsite>","relationships: Array<ContactRelationship>","pronouns: Array<ContactPronouns>","messengerHandles: Array<ContactMessengerHandle>","i","bDayDetails: Birthday | null","vCardAddressValue: string","type: ContactAddressType","vCardPhoneNumberValue: string","type: ContactPhoneNumberType","vCardMailAddressValue: string","relationshipPerson: string","type: ContactRelationshipType","pronouns: string","pronounsArray: Array<ContactPronouns>","lang: string","handle: string","messengerHandleArray: Array<ContactMessengerHandle>","type: ContactMessengerHandleType","customTypeName: string"],"sources":["../../src/mail-app/contacts/VCardImporter.ts"],"sourcesContent":["import {\n\tBirthday,\n\tContact,\n\tContactAddress,\n\tContactMailAddress,\n\tContactMessengerHandle,\n\tContactPhoneNumber,\n\tContactPronouns,\n\tContactRelationship,\n\tContactWebsite,\n\tcreateBirthday,\n\tcreateContact,\n\tcreateContactAddress,\n\tcreateContactMailAddress,\n\tcreateContactMessengerHandle,\n\tcreateContactPhoneNumber,\n\tcreateContactPronouns,\n\tcreateContactRelationship,\n\tcreateContactWebsite,\n} from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport {\n\tContactAddressType,\n\tContactMessengerHandleType,\n\tContactPhoneNumberType,\n\tContactRelationshipType,\n\tContactWebsiteType,\n} from \"../../common/api/common/TutanotaConstants\"\nimport { decodeBase64, decodeQuotedPrintable } from \"@tutao/tutanota-utils\"\nimport { birthdayToIsoDate, isValidBirthday } from \"../../common/api/common/utils/BirthdayUtils\"\nimport { ParsingError } from \"../../common/api/common/error/ParsingError\"\nimport { assertMainOrNode } from \"../../common/api/common/Env\"\n\nassertMainOrNode()\n\n/**\n * split file content with multiple vCards into a list of vCard strings\n * @param vCardFileData\n */\nexport function vCardFileToVCards(vCardFileData: string): string[] | null {\n\tlet V4 = \"\\nVERSION:4.0\"\n\tlet V3 = \"\\nVERSION:3.0\"\n\tlet V2 = \"\\nVERSION:2.1\"\n\tlet B = \"BEGIN:VCARD\\n\"\n\tlet E = \"END:VCARD\"\n\tvCardFileData = vCardFileData.replace(/begin:vcard/g, \"BEGIN:VCARD\")\n\tvCardFileData = vCardFileData.replace(/end:vcard/g, \"END:VCARD\")\n\tvCardFileData = vCardFileData.replace(/version:2.1/g, \"VERSION:2.1\")\n\n\tif (\n\t\tvCardFileData.indexOf(\"BEGIN:VCARD\") > -1 &&\n\t\tvCardFileData.indexOf(E) > -1 &&\n\t\t(vCardFileData.indexOf(V4) > -1 || vCardFileData.indexOf(V3) > -1 || vCardFileData.indexOf(V2) > -1)\n\t) {\n\t\tvCardFileData = vCardFileData.replace(/\\r/g, \"\")\n\t\tvCardFileData = vCardFileData.replace(/\\n /g, \"\") //folding symbols removed\n\n\t\tvCardFileData = vCardFileData.replace(/\\nEND:VCARD\\n\\n/g, \"\")\n\t\tvCardFileData = vCardFileData.replace(/\\nEND:VCARD\\n/g, \"\")\n\t\tvCardFileData = vCardFileData.replace(/\\nEND:VCARD/g, \"\")\n\t\tvCardFileData = vCardFileData.substring(vCardFileData.indexOf(B) + B.length)\n\t\treturn vCardFileData.split(B)\n\t} else {\n\t\treturn null\n\t}\n}\n\nexport function vCardEscapingSplit(details: string): string[] {\n\tdetails = details.replace(/\\\\\\\\/g, \"--bslashbslash++\")\n\tdetails = details.replace(/\\\\;/g, \"--semiColonsemiColon++\")\n\tdetails = details.replace(/\\\\:/g, \"--dPunktdPunkt++\")\n\tlet array = details.split(\";\")\n\tarray = array.map((elem) => {\n\t\treturn elem.trim()\n\t})\n\treturn array\n}\n\nexport function vCardReescapingArray(details: string[]): string[] {\n\treturn details.map((a) => {\n\t\ta = a.replace(/--bslashbslash\\+\\+/g, \"\\\\\")\n\t\ta = a.replace(/--semiColonsemiColon\\+\\+/g, \";\")\n\t\ta = a.replace(/--dPunktdPunkt\\+\\+/g, \":\")\n\t\ta = a.replace(/\\\\n/g, \"\\n\")\n\t\ta = a.replace(/\\\\,/g, \",\")\n\t\treturn a\n\t})\n}\n\nexport function vCardEscapingSplitAdr(addressDetails: string): string[] {\n\taddressDetails = addressDetails.replace(/\\\\\\\\/g, \"--bslashbslash++\")\n\taddressDetails = addressDetails.replace(/\\\\;/g, \"--semiColonsemiColon++\")\n\tlet array = addressDetails.split(\";\")\n\treturn array.map((elem) => {\n\t\tif (elem.trim().length > 0) {\n\t\t\treturn elem.trim().concat(\"\\n\")\n\t\t} else {\n\t\t\t// needed for only Space elements in Address\n\t\t\treturn \"\"\n\t\t}\n\t})\n}\n\nfunction _decodeTag(encoding: string, charset: string, text: string): string {\n\tlet decoder = (cs: string, l: string) => l\n\n\tswitch (encoding.toLowerCase()) {\n\t\tcase \"quoted-printable:\":\n\t\t\tdecoder = decodeQuotedPrintable\n\t\t\tbreak\n\n\t\tcase \"base64:\":\n\t\t\tdecoder = decodeBase64\n\t}\n\n\treturn text\n\t\t.split(\";\")\n\t\t.map((line) => decoder(charset, line))\n\t\t.join(\";\")\n}\n\nexport function getPropertyValue(property: string, tagValue: string) {\n\tconst exp = new RegExp(property + \"=(.*?)[:;]\", \"gi\")\n\treturn (Array.from(tagValue.matchAll(exp), (m) => m[1])[0] ?? \"\").trim()\n}\n\n/**\n * @returns The list of created Contact instances (but not yet saved) or null if vCardFileData is not a valid vCard string.\n */\nexport function vCardListToContacts(vCardList: string[], ownerGroupId: Id): Contact[] {\n\tlet contacts: Contact[] = []\n\n\tfor (let i = 0; i < vCardList.length; i++) {\n\t\tlet lastName: string = \"\"\n\t\tlet firstName: string = \"\"\n\t\tlet title: string | null = null\n\t\tlet birthdayIso: string | null = null\n\t\tlet company: string = \"\"\n\t\tlet comment: string = \"\"\n\t\tlet nickname: string | null = null\n\t\tlet role = \"\"\n\t\tlet department = \"\"\n\t\tlet middleName = \"\"\n\t\tlet suffix = \"\"\n\t\tconst addresses: Array<ContactAddress> = []\n\t\tconst mailAddresses: Array<ContactMailAddress> = []\n\t\tconst phoneNumbers: Array<ContactPhoneNumber> = []\n\t\tconst websites: Array<ContactWebsite> = []\n\t\tconst relationships: Array<ContactRelationship> = []\n\t\tconst pronouns: Array<ContactPronouns> = []\n\t\tconst messengerHandles: Array<ContactMessengerHandle> = []\n\t\tlet vCardLines = vCardList[i].split(\"\\n\")\n\n\t\tfor (let j = 0; j < vCardLines.length; j++) {\n\t\t\tlet indexAfterTag = vCardLines[j].indexOf(\":\")\n\t\t\tlet tagAndTypeString = vCardLines[j].substring(0, indexAfterTag).toUpperCase()\n\t\t\tlet tagName = tagAndTypeString.split(\";\")[0]\n\t\t\tlet tagValue = vCardLines[j].substring(indexAfterTag + 1)\n\t\t\tlet encodingObj = vCardLines[j].split(\";\").find((line) => line.includes(\"ENCODING=\"))\n\t\t\tlet encoding = encodingObj ? encodingObj.split(\"=\")[1] : \"\"\n\t\t\tlet charsetObj = vCardLines[j].split(\";\").find((line) => line.includes(\"CHARSET=\"))\n\t\t\tlet charset = charsetObj ? charsetObj.split(\"=\")[1] : \"utf-8\"\n\t\t\ttagValue = _decodeTag(encoding, charset, tagValue)\n\n\t\t\tswitch (tagName) {\n\t\t\t\tcase \"N\": {\n\t\t\t\t\tlet nameDetails = vCardReescapingArray(vCardEscapingSplit(tagValue))\n\n\t\t\t\t\tfor (let i = nameDetails.length; nameDetails.length < 4; i++) {\n\t\t\t\t\t\tnameDetails.push(\"\")\n\t\t\t\t\t}\n\n\t\t\t\t\tlastName = nameDetails[0]\n\t\t\t\t\tfirstName = nameDetails[1]\n\t\t\t\t\tmiddleName = nameDetails[2]\n\t\t\t\t\ttitle = nameDetails[3]\n\t\t\t\t\tsuffix = nameDetails[4]\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcase \"FN\":\n\t\t\t\t\t//Thunderbird can export FULLNAME tag if that is given with the email address automatic contact creation. If there is no first name or second name the namestring will be saved as full name.\n\t\t\t\t\tif (firstName === \"\" && lastName === \"\" && title == null && middleName === \"\" && suffix === \"\") {\n\t\t\t\t\t\tlet fullName = vCardReescapingArray(vCardEscapingSplit(tagValue))\n\t\t\t\t\t\tfirstName = fullName.join(\" \").replace(/\"/g, \"\") //Thunderbird saves the Fullname in \"quoteations marks\" they are deleted here\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\n\t\t\t\tcase \"BDAY\": {\n\t\t\t\t\tlet indexOfT = tagValue.indexOf(\"T\")\n\t\t\t\t\tlet bDayDetails: Birthday | null = null\n\n\t\t\t\t\tif (tagValue.match(/--\\d{4}/g)) {\n\t\t\t\t\t\tbDayDetails = createBirthday({\n\t\t\t\t\t\t\tmonth: tagValue.substring(2, 4),\n\t\t\t\t\t\t\tday: tagValue.substring(4, 6),\n\t\t\t\t\t\t\tyear: null,\n\t\t\t\t\t\t})\n\t\t\t\t\t} else if (tagValue.match(/\\d{4}-\\d{2}-\\d{2}/g)) {\n\t\t\t\t\t\tlet bDay = tagValue.substring(0, indexOfT !== -1 ? indexOfT : tagValue.length).split(\"-\")\n\t\t\t\t\t\tbDayDetails = createBirthday({\n\t\t\t\t\t\t\tyear: bDay[0].trim(),\n\t\t\t\t\t\t\tmonth: bDay[1].trim(),\n\t\t\t\t\t\t\tday: bDay[2].trim(),\n\t\t\t\t\t\t})\n\t\t\t\t\t} else if (tagValue.match(/\\d{8}/g)) {\n\t\t\t\t\t\tbDayDetails = createBirthday({\n\t\t\t\t\t\t\tyear: tagValue.substring(0, 4),\n\t\t\t\t\t\t\tmonth: tagValue.substring(4, 6),\n\t\t\t\t\t\t\tday: tagValue.substring(6, 8),\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bDayDetails && bDayDetails.year === \"1111\") {\n\t\t\t\t\t\t// we use 1111 as marker if no year has been defined as vcard 3.0 does not support dates without year\n\t\t\t\t\t\tbDayDetails.year = null\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbirthdayIso = bDayDetails && isValidBirthday(bDayDetails) ? birthdayToIsoDate(bDayDetails) : null\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof ParsingError) {\n\t\t\t\t\t\t\tconsole.log(\"failed to parse birthday\", e)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcase \"ORG\": {\n\t\t\t\t\tlet orgDetails = vCardReescapingArray(vCardEscapingSplit(tagValue))\n\t\t\t\t\tfor (let i = orgDetails.length; orgDetails.length < 2; i++) {\n\t\t\t\t\t\torgDetails.push(\"\")\n\t\t\t\t\t}\n\n\t\t\t\t\tdepartment = orgDetails.pop() ?? \"\"\n\t\t\t\t\tcompany = orgDetails.join(\" \")\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcase \"NOTE\": {\n\t\t\t\t\tlet note = vCardReescapingArray(vCardEscapingSplit(tagValue))\n\t\t\t\t\tcomment = note.join(\" \")\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcase \"ADR\":\n\t\t\t\tcase \"ITEM1.ADR\": // necessary for apple vcards\n\t\t\t\tcase \"ITEM2.ADR\":\n\t\t\t\t\t// necessary for apple vcards\n\t\t\t\t\tif (tagAndTypeString.indexOf(\"HOME\") > -1) {\n\t\t\t\t\t\t_addAddress(tagValue, addresses, ContactAddressType.PRIVATE)\n\t\t\t\t\t} else if (tagAndTypeString.indexOf(\"WORK\") > -1) {\n\t\t\t\t\t\t_addAddress(tagValue, addresses, ContactAddressType.WORK)\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_addAddress(tagValue, addresses, ContactAddressType.OTHER)\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\n\t\t\t\tcase \"EMAIL\":\n\t\t\t\tcase \"ITEM1.EMAIL\": // necessary for apple and protonmail vcards\n\t\t\t\tcase \"ITEM2.EMAIL\":\n\t\t\t\t\t// necessary for apple vcards\n\t\t\t\t\tif (tagAndTypeString.indexOf(\"HOME\") > -1) {\n\t\t\t\t\t\t_addMailAddress(tagValue, mailAddresses, ContactAddressType.PRIVATE)\n\t\t\t\t\t} else if (tagAndTypeString.indexOf(\"WORK\") > -1) {\n\t\t\t\t\t\t_addMailAddress(tagValue, mailAddresses, ContactAddressType.WORK)\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_addMailAddress(tagValue, mailAddresses, ContactAddressType.OTHER)\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\n\t\t\t\tcase \"TEL\":\n\t\t\t\tcase \"ITEM1.TEL\": // necessary for apple vcards\n\t\t\t\tcase \"ITEM2.TEL\":\n\t\t\t\t\t// necessary for apple vcards\n\t\t\t\t\ttagValue = tagValue.replace(/[\\u2000-\\u206F]/g, \"\")\n\n\t\t\t\t\tif (tagAndTypeString.indexOf(\"HOME\") > -1) {\n\t\t\t\t\t\t_addPhoneNumber(tagValue, phoneNumbers, ContactPhoneNumberType.PRIVATE)\n\t\t\t\t\t} else if (tagAndTypeString.indexOf(\"WORK\") > -1) {\n\t\t\t\t\t\t_addPhoneNumber(tagValue, phoneNumbers, ContactPhoneNumberType.WORK)\n\t\t\t\t\t} else if (tagAndTypeString.indexOf(\"FAX\") > -1) {\n\t\t\t\t\t\t_addPhoneNumber(tagValue, phoneNumbers, ContactPhoneNumberType.FAX)\n\t\t\t\t\t} else if (tagAndTypeString.indexOf(\"CELL\") > -1) {\n\t\t\t\t\t\t_addPhoneNumber(tagValue, phoneNumbers, ContactPhoneNumberType.MOBILE)\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_addPhoneNumber(tagValue, phoneNumbers, ContactPhoneNumberType.OTHER)\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\n\t\t\t\tcase \"URL\":\n\t\t\t\tcase \"ITEM1.URL\": // necessary for apple vcards\n\t\t\t\tcase \"ITEM2.URL\":\n\t\t\t\t\t// necessary for apple vcards\n\t\t\t\t\taddWebsite(tagValue, websites)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase \"NICKNAME\": {\n\t\t\t\t\tlet nick = vCardReescapingArray(vCardEscapingSplit(tagValue))\n\t\t\t\t\tnickname = nick.join(\" \")\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcase \"PHOTO\":\n\t\t\t\t\t// if (indexAfterTag < tagValue.indexOf(\":\")) {\n\t\t\t\t\t// \tindexAfterTag = tagValue.indexOf(\":\")\n\t\t\t\t\t// }\n\t\t\t\t\t// /*Here will be the photo import*/\n\t\t\t\t\tbreak\n\n\t\t\t\tcase \"ROLE\":\n\t\t\t\tcase \"TITLE\": {\n\t\t\t\t\tlet vcardRole = vCardReescapingArray(vCardEscapingSplit(tagValue))\n\t\t\t\t\trole += (\" \" + vcardRole.join(\" \")).trim()\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\t// The content bellow this comment is present only on vCard 4.0+ - RFC 6350\n\t\t\t\tcase \"RELATED\": {\n\t\t\t\t\tlet type = ContactRelationshipType.OTHER\n\t\t\t\t\tconst vCardPropertyType = getPropertyValue(\"TYPE\", tagAndTypeString).toLowerCase()\n\t\t\t\t\tif (vCardPropertyType === \"friend\") {\n\t\t\t\t\t\ttype = ContactRelationshipType.FRIEND\n\t\t\t\t\t} else if (vCardPropertyType === \"child\") {\n\t\t\t\t\t\ttype = ContactRelationshipType.CHILD\n\t\t\t\t\t} else if (vCardPropertyType === \"parent\") {\n\t\t\t\t\t\ttype = ContactRelationshipType.PARENT\n\t\t\t\t\t} else if (vCardPropertyType === \"spouse\") {\n\t\t\t\t\t\ttype = ContactRelationshipType.SPOUSE\n\t\t\t\t\t}\n\n\t\t\t\t\taddRelationship(tagValue, relationships, type)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcase \"PRONOUNS\": {\n\t\t\t\t\tconst lang = getPropertyValue(\"LANG\", tagAndTypeString)\n\t\t\t\t\taddPronouns(tagValue, pronouns, lang)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcase \"IMPP\": {\n\t\t\t\t\tconst imRawType = getPropertyValue(\"TYPE\", tagAndTypeString)\n\t\t\t\t\tlet imType = ContactMessengerHandleType.OTHER\n\t\t\t\t\tlet customTypeName = \"\"\n\n\t\t\t\t\tif (imRawType.toLowerCase() === \"telegram\") {\n\t\t\t\t\t\timType = ContactMessengerHandleType.TELEGRAM\n\t\t\t\t\t} else if (imRawType.toLowerCase() === \"whatsapp\") {\n\t\t\t\t\t\timType = ContactMessengerHandleType.WHATSAPP\n\t\t\t\t\t} else if (imRawType.toLowerCase() === \"signal\") {\n\t\t\t\t\t\timType = ContactMessengerHandleType.SIGNAL\n\t\t\t\t\t} else if (imRawType.toLowerCase() === \"discord\") {\n\t\t\t\t\t\timType = ContactMessengerHandleType.DISCORD\n\t\t\t\t\t} else if (imRawType.trim() != \"\") {\n\t\t\t\t\t\timType = ContactMessengerHandleType.CUSTOM\n\t\t\t\t\t\tcustomTypeName = imRawType.trim()\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove the im:/xmpp: added by the vcard standard\n\t\t\t\t\tconst handleData = tagValue.indexOf(\":\") > -1 ? tagValue.substring(tagValue.indexOf(\":\") + 1) : tagValue\n\t\t\t\t\taddMessengerHandle(handleData, messengerHandles, imType, customTypeName)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t\tcontacts[i] = createContact({\n\t\t\t_ownerGroup: ownerGroupId,\n\t\t\tlastName,\n\t\t\tfirstName,\n\t\t\ttitle,\n\t\t\tbirthdayIso,\n\t\t\tcompany,\n\t\t\tcomment,\n\t\t\tnickname,\n\t\t\trole,\n\t\t\taddresses,\n\t\t\tmailAddresses,\n\t\t\tphoneNumbers,\n\t\t\tdepartment,\n\t\t\tmiddleName,\n\t\t\twebsites,\n\t\t\trelationships,\n\t\t\tpronouns,\n\t\t\tmessengerHandles,\n\t\t\tnameSuffix: suffix,\n\t\t\tphoneticFirst: null,\n\t\t\tphoneticLast: null,\n\t\t\tphoneticMiddle: null,\n\t\t\tcustomDate: [],\n\t\t\tsocialIds: [],\n\t\t\tpresharedPassword: null,\n\t\t\tphoto: null,\n\t\t\toldBirthdayDate: null,\n\t\t\toldBirthdayAggregate: null,\n\t\t})\n\t}\n\n\tfunction _addAddress(vCardAddressValue: string, addresses: Array<ContactAddress>, type: ContactAddressType) {\n\t\tlet addressDetails = vCardReescapingArray(vCardEscapingSplitAdr(vCardAddressValue))\n\t\tlet address = createContactAddress({\n\t\t\ttype: type,\n\t\t\taddress: addressDetails.join(\"\").trim(),\n\t\t\tcustomTypeName: \"\",\n\t\t})\n\t\taddresses.push(address)\n\t}\n\n\tfunction _addPhoneNumber(vCardPhoneNumberValue: string, phoneNumbers: Array<ContactPhoneNumber>, type: ContactPhoneNumberType) {\n\t\tlet phoneNumber = createContactPhoneNumber({\n\t\t\ttype: type,\n\t\t\tnumber: vCardPhoneNumberValue,\n\t\t\tcustomTypeName: \"\",\n\t\t})\n\t\tphoneNumbers.push(phoneNumber)\n\t}\n\n\tfunction _addMailAddress(vCardMailAddressValue: string, mailAddresses: Array<ContactMailAddress>, type: ContactAddressType) {\n\t\tlet email = createContactMailAddress({\n\t\t\ttype: type,\n\t\t\taddress: vCardMailAddressValue,\n\t\t\tcustomTypeName: \"\",\n\t\t})\n\t\tmailAddresses.push(email)\n\t}\n\n\tfunction addRelationship(relationshipPerson: string, relationships: Array<ContactRelationship>, type: ContactRelationshipType) {\n\t\tconst relationship = createContactRelationship({\n\t\t\ttype: type,\n\t\t\tperson: relationshipPerson,\n\t\t\tcustomTypeName: \"\",\n\t\t})\n\t\trelationships.push(relationship)\n\t}\n\n\tfunction addPronouns(pronouns: string, pronounsArray: Array<ContactPronouns>, lang: string) {\n\t\tconst pronounsToAdd = createContactPronouns({\n\t\t\tlanguage: lang,\n\t\t\tpronouns,\n\t\t})\n\t\tpronounsArray.push(pronounsToAdd)\n\t}\n\n\tfunction addMessengerHandle(handle: string, messengerHandleArray: Array<ContactMessengerHandle>, type: ContactMessengerHandleType, customTypeName: string) {\n\t\tconst newHandle = createContactMessengerHandle({\n\t\t\thandle,\n\t\t\ttype,\n\t\t\tcustomTypeName,\n\t\t})\n\t\tmessengerHandleArray.push(newHandle)\n\t}\n\n\tfunction addWebsite(tagValue: string, websites: Array<ContactWebsite>) {\n\t\tlet website = createContactWebsite({\n\t\t\ttype: ContactWebsiteType.OTHER,\n\t\t\turl: vCardReescapingArray(vCardEscapingSplit(tagValue)).join(\"\"),\n\t\t\tcustomTypeName: \"\",\n\t\t})\n\t\twebsites.push(website)\n\t}\n\n\treturn contacts\n}\n"],"mappings":"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"}