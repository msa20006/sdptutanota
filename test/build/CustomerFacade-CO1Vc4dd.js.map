{"version":3,"file":"CustomerFacade-CO1Vc4dd.js","names":["userFacade: UserFacade","groupManagement: GroupManagementFacade","userManagement: UserManagementFacade","counters: CounterFacade","rsa: RsaImplementation","entityClient: EntityClient","serviceExecutor: IServiceExecutor","bookingFacade: BookingFacade","cryptoFacade: CryptoFacade","operationProgressTracker: ExposedOperationProgressTracker","pdfWriter: lazyAsync<PdfWriter>","pqFacade: PQFacade","keyLoaderFacade: KeyLoaderFacade","recoverCodeFacade: RecoverCodeFacade","asymmetricCryptoFacade: AsymmetricCryptoFacade","domainName: string","mailGroupId: Id | null","customerId: Id","field: SpamRuleFieldType","type: SpamRuleType","value: string","spamRule: EmailSenderListElement","operationId: OperationId","keyPairs: [PQKeyPairs, PQKeyPairs, PQKeyPairs]","accountType: AccountType","authToken: string","mailAddress: string","password: string","registrationCode: string","currentLanguage: string","app: SubscriptionApp","systemAdminPubEncAccountingInfoSessionKey: VersionedEncryptedKey","systemAdminPublicProtocolVersion: CryptoProtocolVersion","paymentInterval: PaymentInterval","invoiceData: InvoiceData","paymentData: PaymentData | null","confirmedInvoiceCountry: Country | null","accountingInfo: AccountingInfo","newPaymentInterval: PaymentInterval","invoiceNumber: string","oldGroup: Id","newGroup: Id","newGroupKey: VersionedKey"],"sources":["../../src/common/api/worker/facades/lazy/CustomerFacade.ts"],"sourcesContent":["import {\n\tAccountType,\n\tBookingItemFeatureType,\n\tConst,\n\tCounterType,\n\tCryptoProtocolVersion,\n\tGroupType,\n\tInvoiceData,\n\tPaymentData,\n\tSpamRuleFieldType,\n\tSpamRuleType,\n} from \"../../../common/TutanotaConstants.js\"\nimport {\n\tAccountingInfo,\n\tAccountingInfoTypeRef,\n\tcreateBrandingDomainData,\n\tcreateBrandingDomainDeleteData,\n\tcreateCreateCustomerServerPropertiesData,\n\tcreateCustomDomainData,\n\tcreateEmailSenderListElement,\n\tcreateInvoiceDataGetIn,\n\tcreateMembershipAddData,\n\tcreateMembershipRemoveData,\n\tcreatePaymentDataServicePutData,\n\tCustomDomainReturn,\n\tCustomerInfoTypeRef,\n\tCustomerServerProperties,\n\tCustomerServerPropertiesTypeRef,\n\tCustomerTypeRef,\n\tEmailSenderListElement,\n\tPaymentDataServicePutReturn,\n} from \"../../../entities/sys/TypeRefs.js\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport type { Hex, lazyAsync } from \"@tutao/tutanota-utils\"\nimport { assertNotNull, neverNull, noOp, ofClass, stringToUtf8Uint8Array, uint8ArrayToBase64, uint8ArrayToHex } from \"@tutao/tutanota-utils\"\nimport { CryptoFacade } from \"../../crypto/CryptoFacade.js\"\nimport {\n\tBrandingDomainService,\n\tCreateCustomerServerProperties,\n\tCustomDomainService,\n\tInvoiceDataService,\n\tMembershipService,\n\tPaymentDataService,\n\tSystemKeysService,\n} from \"../../../entities/sys/Services.js\"\nimport type { UserManagementFacade } from \"./UserManagementFacade.js\"\nimport type { GroupManagementFacade } from \"./GroupManagementFacade.js\"\nimport { CounterFacade } from \"./CounterFacade.js\"\nimport type { Country } from \"../../../common/CountryList.js\"\nimport { getByAbbreviation } from \"../../../common/CountryList.js\"\nimport { LockedError } from \"../../../common/error/RestError.js\"\nimport type { PQKeyPairs } from \"@tutao/tutanota-crypto\"\nimport { aes256RandomKey, bitArrayToUint8Array, hexToRsaPublicKey, sha256Hash, uint8ArrayToBitArray } from \"@tutao/tutanota-crypto\"\nimport type { RsaImplementation } from \"../../crypto/RsaImplementation.js\"\nimport { EntityClient } from \"../../../common/EntityClient.js\"\nimport { DataFile } from \"../../../common/DataFile.js\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { CustomerAccountService } from \"../../../entities/tutanota/Services.js\"\nimport { BookingFacade } from \"./BookingFacade.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { PaymentInterval } from \"../../../../subscription/PriceUtils.js\"\nimport { ExposedOperationProgressTracker, OperationId } from \"../../../main/OperationProgressTracker.js\"\nimport { formatNameAndAddress } from \"../../../common/utils/CommonFormatter.js\"\nimport { PQFacade } from \"../PQFacade.js\"\nimport { ProgrammingError } from \"../../../common/error/ProgrammingError.js\"\nimport { getWhitelabelDomainInfo } from \"../../../common/utils/CustomerUtils.js\"\nimport type { PdfWriter } from \"../../pdf/PdfWriter.js\"\nimport { createCustomerAccountCreateData } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { KeyLoaderFacade } from \"../KeyLoaderFacade.js\"\nimport { RecoverCodeFacade } from \"./RecoverCodeFacade.js\"\nimport { encryptKeyWithVersionedKey, VersionedEncryptedKey, VersionedKey } from \"../../crypto/CryptoWrapper.js\"\nimport { AsymmetricCryptoFacade } from \"../../crypto/AsymmetricCryptoFacade.js\"\nimport { XRechnungInvoiceGenerator } from \"../../invoicegen/XRechnungInvoiceGenerator.js\"\nimport type { SubscriptionApp } from \"../../../../subscription/SubscriptionViewer.js\"\n\nassertWorkerOrNode()\n\nexport class CustomerFacade {\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly groupManagement: GroupManagementFacade,\n\t\tprivate readonly userManagement: UserManagementFacade,\n\t\tprivate readonly counters: CounterFacade,\n\t\tprivate readonly rsa: RsaImplementation,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly bookingFacade: BookingFacade,\n\t\tprivate readonly cryptoFacade: CryptoFacade,\n\t\tprivate readonly operationProgressTracker: ExposedOperationProgressTracker,\n\t\tprivate readonly pdfWriter: lazyAsync<PdfWriter>,\n\t\tprivate readonly pqFacade: PQFacade,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t\tprivate readonly recoverCodeFacade: RecoverCodeFacade,\n\t\tprivate readonly asymmetricCryptoFacade: AsymmetricCryptoFacade,\n\t) {}\n\n\tasync getDomainValidationRecord(domainName: string): Promise<string> {\n\t\tconst customer = this.getCustomerId()\n\t\tconst baseString = domainName.trim().toLowerCase() + customer\n\t\tconst hash = sha256Hash(stringToUtf8Uint8Array(baseString)).slice(0, 16)\n\t\treturn \"t-verify=\" + uint8ArrayToHex(hash)\n\t}\n\n\taddDomain(domainName: string): Promise<CustomDomainReturn> {\n\t\tconst data = createCustomDomainData({\n\t\t\tdomain: domainName.trim().toLowerCase(),\n\t\t\tcatchAllMailGroup: null,\n\t\t})\n\t\treturn this.serviceExecutor.post(CustomDomainService, data)\n\t}\n\n\tasync removeDomain(domainName: string): Promise<void> {\n\t\tconst data = createCustomDomainData({\n\t\t\tdomain: domainName.trim().toLowerCase(),\n\t\t\tcatchAllMailGroup: null,\n\t\t})\n\t\tawait this.serviceExecutor.delete(CustomDomainService, data)\n\t}\n\n\tasync setCatchAllGroup(domainName: string, mailGroupId: Id | null): Promise<void> {\n\t\tconst data = createCustomDomainData({\n\t\t\tdomain: domainName.trim().toLowerCase(),\n\t\t\tcatchAllMailGroup: mailGroupId,\n\t\t})\n\t\tawait this.serviceExecutor.put(CustomDomainService, data)\n\t}\n\n\tasync orderWhitelabelCertificate(domainName: string): Promise<void> {\n\t\tconst customerId = this.getCustomerId()\n\t\tconst customer = await this.entityClient.load(CustomerTypeRef, customerId)\n\t\tconst customerInfo = await this.entityClient.load(CustomerInfoTypeRef, customer.customerInfo)\n\t\tlet existingBrandingDomain = getWhitelabelDomainInfo(customerInfo, domainName)\n\t\tlet sessionKey = aes256RandomKey()\n\n\t\tconst keyData = await this.serviceExecutor.get(SystemKeysService, null)\n\t\tconst pubRsaKey = keyData.systemAdminPubRsaKey\n\t\tconst pubEccKey = keyData.systemAdminPubEccKey\n\t\tconst pubKyberKey = keyData.systemAdminPubKyberKey\n\t\tconst systemAdminPubKeys = {\n\t\t\tobject: {\n\t\t\t\tpubEccKey,\n\t\t\t\tpubKyberKey,\n\t\t\t\tpubRsaKey,\n\t\t\t},\n\t\t\tversion: Number(keyData.systemAdminPubKeyVersion),\n\t\t}\n\t\tconst { pubEncSymKeyBytes, cryptoProtocolVersion } = await this.asymmetricCryptoFacade.asymEncryptSymKey(\n\t\t\tsessionKey,\n\t\t\tsystemAdminPubKeys,\n\t\t\tthis.userFacade.getUserGroupId(),\n\t\t)\n\n\t\tconst data = createBrandingDomainData({\n\t\t\tdomain: domainName,\n\t\t\tsystemAdminPubEncSessionKey: pubEncSymKeyBytes,\n\t\t\tsystemAdminPubKeyVersion: String(systemAdminPubKeys.version),\n\t\t\tsystemAdminPublicProtocolVersion: cryptoProtocolVersion,\n\t\t\tsessionEncPemPrivateKey: null,\n\t\t\tsessionEncPemCertificateChain: null,\n\t\t})\n\t\tif (existingBrandingDomain) {\n\t\t\tawait this.serviceExecutor.put(BrandingDomainService, data)\n\t\t} else {\n\t\t\tawait this.serviceExecutor.post(BrandingDomainService, data)\n\t\t}\n\t}\n\n\tprivate getCustomerId() {\n\t\treturn assertNotNull(this.userFacade.getLoggedInUser().customer)\n\t}\n\n\tasync deleteCertificate(domainName: string): Promise<void> {\n\t\tconst data = createBrandingDomainDeleteData({\n\t\t\tdomain: domainName,\n\t\t})\n\t\tawait this.serviceExecutor.delete(BrandingDomainService, data)\n\t}\n\n\t/**\n\t * Reads the used storage of a customer in bytes.\n\t * @return The amount of used storage in byte.\n\t */\n\tasync readUsedCustomerStorage(customerId: Id): Promise<number> {\n\t\tconst customerCounters = await this.counters.readAllCustomerCounterValues(CounterType.UserStorageLegacy, customerId)\n\t\treturn customerCounters.reduce((sum, counterValue) => sum + Number(counterValue.value), 0)\n\t}\n\n\t/**\n\t * Reads the available storage capacity of a customer in bytes.\n\t * @return The amount of available storage capacity in byte.\n\t */\n\treadAvailableCustomerStorage(customerId: Id): Promise<number> {\n\t\treturn this.entityClient.load(CustomerTypeRef, customerId).then((customer) => {\n\t\t\treturn this.entityClient.load(CustomerInfoTypeRef, customer.customerInfo).then((customerInfo) => {\n\t\t\t\tlet includedStorage = Number(customerInfo.includedStorageCapacity)\n\t\t\t\tlet promotionStorage = Number(customerInfo.promotionStorageCapacity)\n\t\t\t\tlet availableStorage = Math.max(includedStorage, promotionStorage)\n\t\t\t\tlet bookedStorage = 0\n\n\t\t\t\tif (customer.type === AccountType.PAID) {\n\t\t\t\t\treturn this.bookingFacade.getCurrentPrice().then((price) => {\n\t\t\t\t\t\tlet currentStorageItem = this.bookingFacade.getPriceItem(price.currentPriceNextPeriod, BookingItemFeatureType.Storage)\n\n\t\t\t\t\t\tif (currentStorageItem != null) {\n\t\t\t\t\t\t\tbookedStorage = Number(currentStorageItem.count)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tavailableStorage = Math.max(bookedStorage, availableStorage)\n\t\t\t\t\t\treturn availableStorage * Const.MEMORY_GB_FACTOR\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\treturn availableStorage * Const.MEMORY_GB_FACTOR\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\tasync loadCustomerServerProperties(): Promise<CustomerServerProperties> {\n\t\tconst customer = await this.entityClient.load(CustomerTypeRef, this.getCustomerId())\n\t\tlet cspId\n\t\tif (customer.serverProperties) {\n\t\t\tcspId = customer.serverProperties\n\t\t} else {\n\t\t\t// create properties\n\t\t\tconst sessionKey = aes256RandomKey()\n\t\t\tconst adminGroupId = this.userFacade.getGroupId(GroupType.Admin)\n\t\t\tconst adminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId)\n\n\t\t\tconst adminGroupEncSessionKey = encryptKeyWithVersionedKey(adminGroupKey, sessionKey)\n\t\t\tconst data = createCreateCustomerServerPropertiesData({\n\t\t\t\tadminGroupEncSessionKey: adminGroupEncSessionKey.key,\n\t\t\t\tadminGroupKeyVersion: adminGroupEncSessionKey.encryptingKeyVersion.toString(),\n\t\t\t})\n\t\t\tconst returnData = await this.serviceExecutor.post(CreateCustomerServerProperties, data)\n\t\t\tcspId = returnData.id\n\t\t}\n\t\treturn this.entityClient.load(CustomerServerPropertiesTypeRef, cspId)\n\t}\n\n\taddSpamRule(field: SpamRuleFieldType, type: SpamRuleType, value: string): Promise<void> {\n\t\treturn this.loadCustomerServerProperties().then((props) => {\n\t\t\tvalue = value.toLowerCase().trim()\n\t\t\tlet newListEntry = createEmailSenderListElement({\n\t\t\t\tvalue,\n\t\t\t\thashedValue: uint8ArrayToBase64(sha256Hash(stringToUtf8Uint8Array(value))),\n\t\t\t\ttype,\n\t\t\t\tfield,\n\t\t\t})\n\t\t\tprops.emailSenderList.push(newListEntry)\n\t\t\treturn this.entityClient.update(props).catch(ofClass(LockedError, noOp))\n\t\t})\n\t}\n\n\teditSpamRule(spamRule: EmailSenderListElement): Promise<void> {\n\t\treturn this.loadCustomerServerProperties().then((props) => {\n\t\t\tspamRule.value = spamRule.value.toLowerCase().trim()\n\t\t\tconst index = props.emailSenderList.findIndex((item) => spamRule._id === item._id)\n\n\t\t\tif (index === -1) {\n\t\t\t\tthrow new Error(\"spam rule does not exist \" + JSON.stringify(spamRule))\n\t\t\t}\n\n\t\t\tprops.emailSenderList[index] = spamRule\n\t\t\treturn this.entityClient.update(props).catch(ofClass(LockedError, noOp))\n\t\t})\n\t}\n\n\tasync generateSignupKeys(operationId: OperationId): Promise<[PQKeyPairs, PQKeyPairs, PQKeyPairs]> {\n\t\tconst key1 = await this.pqFacade.generateKeyPairs()\n\t\tawait this.operationProgressTracker.onProgress(operationId, 33)\n\t\tconst key2 = await this.pqFacade.generateKeyPairs()\n\t\tawait this.operationProgressTracker.onProgress(operationId, 66)\n\t\tconst key3 = await this.pqFacade.generateKeyPairs()\n\t\tawait this.operationProgressTracker.onProgress(operationId, 100)\n\t\treturn [key1, key2, key3]\n\t}\n\n\tasync signup(\n\t\tkeyPairs: [PQKeyPairs, PQKeyPairs, PQKeyPairs],\n\t\taccountType: AccountType,\n\t\tauthToken: string,\n\t\tmailAddress: string,\n\t\tpassword: string,\n\t\tregistrationCode: string,\n\t\tcurrentLanguage: string,\n\t\tapp: SubscriptionApp,\n\t): Promise<Hex> {\n\t\tconst userGroupKey = { object: aes256RandomKey(), version: 0 }\n\t\tconst adminGroupKey = { object: aes256RandomKey(), version: 0 }\n\t\tconst customerGroupKey = { object: aes256RandomKey(), version: 0 }\n\t\tconst userGroupInfoSessionKey = aes256RandomKey()\n\t\tconst adminGroupInfoSessionKey = aes256RandomKey()\n\t\tconst customerGroupInfoSessionKey = aes256RandomKey()\n\t\tconst accountingInfoSessionKey = aes256RandomKey()\n\t\tconst customerServerPropertiesSessionKey = aes256RandomKey()\n\n\t\tconst keyData = await this.serviceExecutor.get(SystemKeysService, null)\n\t\tconst pubRsaKey = keyData.systemAdminPubRsaKey\n\t\tconst pubEccKey = keyData.systemAdminPubEccKey\n\t\tconst pubKyberKey = keyData.systemAdminPubKyberKey\n\t\tlet systemAdminPubEncAccountingInfoSessionKey: VersionedEncryptedKey\n\t\tlet systemAdminPublicProtocolVersion: CryptoProtocolVersion\n\n\t\tif (pubRsaKey) {\n\t\t\tconst rsaPublicKey = hexToRsaPublicKey(uint8ArrayToHex(pubRsaKey))\n\t\t\tconst systemAdminPubEncAccountingInfoSessionKeyBytes = await this.rsa.encrypt(rsaPublicKey, bitArrayToUint8Array(accountingInfoSessionKey))\n\t\t\tsystemAdminPubEncAccountingInfoSessionKey = {\n\t\t\t\tkey: systemAdminPubEncAccountingInfoSessionKeyBytes,\n\t\t\t\tencryptingKeyVersion: Number(keyData.systemAdminPubKeyVersion),\n\t\t\t}\n\t\t\tsystemAdminPublicProtocolVersion = CryptoProtocolVersion.RSA\n\t\t} else {\n\t\t\t// we need to release tuta-crypt by default first before we can encrypt keys for the system admin with PQ public keys.\n\t\t\tthrow new ProgrammingError(\"system admin having pq key pair is not supported\")\n\t\t}\n\n\t\tconst userGroupData = this.groupManagement.generateInternalGroupData(\n\t\t\tkeyPairs[0],\n\t\t\tuserGroupKey.object,\n\t\t\tuserGroupInfoSessionKey,\n\t\t\tnull,\n\t\t\tadminGroupKey,\n\t\t\tcustomerGroupKey,\n\t\t)\n\n\t\tconst adminGroupData = this.groupManagement.generateInternalGroupData(\n\t\t\tkeyPairs[1],\n\t\t\tadminGroupKey.object,\n\t\t\tadminGroupInfoSessionKey,\n\t\t\tnull,\n\t\t\tadminGroupKey,\n\t\t\tcustomerGroupKey,\n\t\t)\n\n\t\tconst customerGroupData = this.groupManagement.generateInternalGroupData(\n\t\t\tkeyPairs[2],\n\t\t\tcustomerGroupKey.object,\n\t\t\tcustomerGroupInfoSessionKey,\n\t\t\tnull,\n\t\t\tadminGroupKey,\n\t\t\tcustomerGroupKey,\n\t\t)\n\n\t\tconst recoverData = this.recoverCodeFacade.generateRecoveryCode(userGroupKey)\n\n\t\tconst userEncAdminGroupKey = encryptKeyWithVersionedKey(userGroupKey, adminGroupKey.object)\n\t\tconst adminEncAccountingInfoSessionKey = encryptKeyWithVersionedKey(adminGroupKey, accountingInfoSessionKey)\n\t\tconst adminEncCustomerServerPropertiesSessionKey = encryptKeyWithVersionedKey(adminGroupKey, customerServerPropertiesSessionKey)\n\n\t\tconst data = createCustomerAccountCreateData({\n\t\t\tauthToken,\n\t\t\tdate: Const.CURRENT_DATE,\n\t\t\tlang: currentLanguage,\n\t\t\tcode: registrationCode,\n\t\t\tuserData: await this.userManagement.generateUserAccountData(\n\t\t\t\tuserGroupKey,\n\t\t\t\tuserGroupInfoSessionKey,\n\t\t\t\tcustomerGroupKey,\n\t\t\t\tmailAddress,\n\t\t\t\tpassword,\n\t\t\t\t\"\",\n\t\t\t\trecoverData,\n\t\t\t),\n\t\t\tuserEncAdminGroupKey: userEncAdminGroupKey.key,\n\t\t\tuserGroupData,\n\t\t\tadminGroupData,\n\t\t\tcustomerGroupData,\n\t\t\tadminEncAccountingInfoSessionKey: adminEncAccountingInfoSessionKey.key,\n\t\t\tsystemAdminPubEncAccountingInfoSessionKey: systemAdminPubEncAccountingInfoSessionKey.key,\n\t\t\tsystemAdminPubKeyVersion: String(systemAdminPubEncAccountingInfoSessionKey.encryptingKeyVersion),\n\t\t\tsystemAdminPublicProtocolVersion,\n\t\t\tadminEncCustomerServerPropertiesSessionKey: adminEncCustomerServerPropertiesSessionKey.key,\n\t\t\tuserEncAccountGroupKey: new Uint8Array(0), // if we some day start passing the right key here, we'll also need to pass the right version\n\t\t\taccountGroupKeyVersion: \"0\",\n\t\t\tapp,\n\t\t})\n\t\tawait this.serviceExecutor.post(CustomerAccountService, data)\n\t\treturn recoverData.hexCode\n\t}\n\n\tasync switchFreeToPremiumGroup(): Promise<void> {\n\t\ttry {\n\t\t\tconst keyData = await this.serviceExecutor.get(SystemKeysService, null)\n\t\t\tawait this.switchAccountGroup(neverNull(keyData.freeGroup), neverNull(keyData.premiumGroup), {\n\t\t\t\tobject: uint8ArrayToBitArray(keyData.premiumGroupKey),\n\t\t\t\tversion: Number(keyData.premiumGroupKeyVersion),\n\t\t\t})\n\t\t} catch (e) {\n\t\t\te.message = e.message + \" error switching free to premium group\"\n\t\t\tconsole.log(e)\n\t\t\tthrow e\n\t\t}\n\t}\n\n\tasync switchPremiumToFreeGroup(): Promise<void> {\n\t\ttry {\n\t\t\tconst keyData = await this.serviceExecutor.get(SystemKeysService, null)\n\t\t\tawait this.switchAccountGroup(neverNull(keyData.premiumGroup), neverNull(keyData.freeGroup), {\n\t\t\t\tobject: uint8ArrayToBitArray(keyData.freeGroupKey),\n\t\t\t\tversion: Number(keyData.freeGroupKeyVersion),\n\t\t\t})\n\t\t} catch (e) {\n\t\t\te.message = e.message + \" error switching premium to free group\"\n\t\t\tconsole.log(e)\n\t\t\tthrow e\n\t\t}\n\t}\n\n\tasync updatePaymentData(\n\t\tpaymentInterval: PaymentInterval,\n\t\tinvoiceData: InvoiceData,\n\t\tpaymentData: PaymentData | null,\n\t\tconfirmedInvoiceCountry: Country | null,\n\t): Promise<PaymentDataServicePutReturn> {\n\t\tlet customer = await this.entityClient.load(CustomerTypeRef, assertNotNull(this.userFacade.getLoggedInUser().customer))\n\t\tlet customerInfo = await this.entityClient.load(CustomerInfoTypeRef, customer.customerInfo)\n\t\tlet accountingInfo = await this.entityClient.load(AccountingInfoTypeRef, customerInfo.accountingInfo)\n\t\tlet accountingInfoSessionKey = await this.cryptoFacade.resolveSessionKeyForInstance(accountingInfo)\n\t\tconst service = createPaymentDataServicePutData({\n\t\t\tpaymentInterval: paymentInterval.toString(),\n\t\t\tinvoiceName: \"\",\n\t\t\tinvoiceAddress: invoiceData.invoiceAddress,\n\t\t\tinvoiceCountry: invoiceData.country ? invoiceData.country.a : \"\",\n\t\t\tinvoiceVatIdNo: invoiceData.vatNumber ? invoiceData.vatNumber : \"\",\n\t\t\tpaymentMethod: paymentData ? paymentData.paymentMethod : accountingInfo.paymentMethod ? accountingInfo.paymentMethod : \"\",\n\t\t\tpaymentMethodInfo: null,\n\t\t\tpaymentToken: null,\n\t\t\tcreditCard: paymentData && paymentData.creditCardData ? paymentData.creditCardData : null,\n\t\t\tconfirmedCountry: confirmedInvoiceCountry ? confirmedInvoiceCountry.a : null,\n\t\t})\n\t\treturn this.serviceExecutor.put(PaymentDataService, service, { sessionKey: accountingInfoSessionKey ?? undefined })\n\t}\n\n\t/**\n\t * Convenience function to change the payment interval for the current subscription\n\t * @param accountingInfo accounting info\n\t * @param newPaymentInterval new payment interval\n\t */\n\tasync changePaymentInterval(accountingInfo: AccountingInfo, newPaymentInterval: PaymentInterval): Promise<PaymentDataServicePutReturn> {\n\t\tconst invoiceCountry = neverNull(getByAbbreviation(neverNull(accountingInfo.invoiceCountry)))\n\n\t\treturn this.updatePaymentData(\n\t\t\tnewPaymentInterval,\n\t\t\t{\n\t\t\t\tinvoiceAddress: formatNameAndAddress(accountingInfo.invoiceName, accountingInfo.invoiceAddress),\n\t\t\t\tcountry: invoiceCountry,\n\t\t\t\tvatNumber: accountingInfo.invoiceVatIdNo,\n\t\t\t},\n\t\t\tnull,\n\t\t\tinvoiceCountry,\n\t\t)\n\t}\n\n\tasync generatePdfInvoice(invoiceNumber: string): Promise<DataFile> {\n\t\tconst invoiceData = await this.serviceExecutor.get(InvoiceDataService, createInvoiceDataGetIn({ invoiceNumber }))\n\t\tconst writer = await this.pdfWriter()\n\t\tconst { PdfInvoiceGenerator } = await import(\"../../invoicegen/PdfInvoiceGenerator.js\")\n\t\tconst pdfGenerator = new PdfInvoiceGenerator(writer, invoiceData, invoiceNumber, this.getCustomerId())\n\t\tconst pdfFile = await pdfGenerator.generate()\n\t\treturn {\n\t\t\t_type: \"DataFile\",\n\t\t\tname: String(invoiceNumber) + \".pdf\",\n\t\t\tmimeType: \"application/pdf\",\n\t\t\tdata: pdfFile,\n\t\t\tsize: pdfFile.byteLength,\n\t\t\tid: undefined,\n\t\t}\n\t}\n\n\tasync generateXRechnungInvoice(invoiceNumber: string): Promise<DataFile> {\n\t\tconst customer = await this.entityClient.load(CustomerTypeRef, assertNotNull(this.userFacade.getUser()?.customer))\n\t\tconst customerInfo = await this.entityClient.load(CustomerInfoTypeRef, customer.customerInfo)\n\t\tconst invoiceData = await this.serviceExecutor.get(InvoiceDataService, createInvoiceDataGetIn({ invoiceNumber }))\n\t\tconst { XRechnungInvoiceGenerator } = await import(\"../../invoicegen/XRechnungInvoiceGenerator.js\")\n\t\tconst xRechnungGenerator = new XRechnungInvoiceGenerator(invoiceData, invoiceNumber, this.getCustomerId(), customerInfo.registrationMailAddress)\n\t\tconst xRechnungFile = xRechnungGenerator.generate()\n\t\treturn {\n\t\t\t_type: \"DataFile\",\n\t\t\tname: String(invoiceNumber) + \".xml\",\n\t\t\tmimeType: \"application/xml\",\n\t\t\tdata: xRechnungFile,\n\t\t\tsize: xRechnungFile.byteLength,\n\t\t\tid: undefined,\n\t\t}\n\t}\n\n\tasync loadAccountingInfo(): Promise<AccountingInfo> {\n\t\tconst customer = await this.entityClient.load(CustomerTypeRef, assertNotNull(this.userFacade.getUser()?.customer))\n\t\tconst customerInfo = await this.entityClient.load(CustomerInfoTypeRef, customer.customerInfo)\n\t\treturn this.entityClient.load(AccountingInfoTypeRef, customerInfo.accountingInfo)\n\t}\n\n\tprivate async switchAccountGroup(oldGroup: Id, newGroup: Id, newGroupKey: VersionedKey): Promise<void> {\n\t\tconst loggedInUser = this.userFacade.getLoggedInUser()\n\t\tconst symEncGKey = encryptKeyWithVersionedKey(this.userFacade.getCurrentUserGroupKey(), newGroupKey.object)\n\t\tconst membershipAddData = createMembershipAddData({\n\t\t\tuser: loggedInUser._id,\n\t\t\tgroup: newGroup,\n\t\t\tsymEncGKey: symEncGKey.key,\n\t\t\tgroupKeyVersion: newGroupKey.version.toString(),\n\t\t\tsymKeyVersion: symEncGKey.encryptingKeyVersion.toString(),\n\t\t})\n\t\tawait this.serviceExecutor.post(MembershipService, membershipAddData)\n\t\tconst membershipRemoveData = createMembershipRemoveData({\n\t\t\tuser: loggedInUser._id,\n\t\t\tgroup: oldGroup,\n\t\t})\n\t\treturn this.serviceExecutor.delete(MembershipService, membershipRemoveData)\n\t}\n}\n"],"mappings":"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"}