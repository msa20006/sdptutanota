{"version":3,"file":"WindowFacade-B9kSBKw7.js","names":["listener: windowSizeListener","listener: () => unknown","e: Event","listener: KeyboardSizeListener","href: string","logins: LoginController","connectivityModel: WebsocketConnectivityModel","appBasedVisibilityChage: ((visible: boolean) => void) | null","enable: boolean","e: any","listener: (e: Event) => boolean","listener: () => void","args: Params","stringifiedArgs: Record<string, string>","size: number","windowFacade: WindowFacade"],"sources":["../../src/common/misc/WindowFacade.ts"],"sourcesContent":["import m, { Params } from \"mithril\"\nimport { assertMainOrNodeBoot, isApp, isElectronClient, isIOSApp, Mode } from \"../api/common/Env\"\nimport { lang } from \"./LanguageViewModel\"\nimport { client } from \"./ClientDetector\"\nimport type { Indexer } from \"../../mail-app/workerUtils/index/Indexer.js\"\nimport { noOp, remove } from \"@tutao/tutanota-utils\"\nimport { WebsocketConnectivityModel } from \"./WebsocketConnectivityModel.js\"\nimport { LoginController } from \"../api/main/LoginController.js\"\n\nassertMainOrNodeBoot()\nexport type KeyboardSizeListener = (keyboardSize: number) => unknown\nexport type windowSizeListener = (width: number, height: number) => unknown\n\nexport class WindowFacade {\n\tprivate _windowSizeListeners: windowSizeListener[]\n\tresizeTimeout: (AnimationFrameID | null) | (TimeoutID | null)\n\twindowCloseConfirmation: boolean\n\tprivate _windowCloseListeners: Set<(e: Event) => unknown>\n\tprivate _historyStateEventListeners: Array<(e: Event) => boolean> = []\n\tprivate indexerFacade: Indexer | null = null\n\t// following two properties are for the iOS\n\tprivate _keyboardSize: number = 0\n\tprivate _keyboardSizeListeners: KeyboardSizeListener[] = []\n\tprivate _ignoreNextPopstate: boolean = false\n\tprivate connectivityModel!: WebsocketConnectivityModel\n\tprivate logins: LoginController | null = null\n\tprivate appBasedVisibilityChage: (visible: boolean) => void = noOp\n\n\tconstructor() {\n\t\tthis._windowSizeListeners = []\n\t\tthis.resizeTimeout = null\n\t\tthis.windowCloseConfirmation = false\n\t\tthis._windowCloseListeners = new Set()\n\n\t\tconst onresize = () => {\n\t\t\t// see https://developer.mozilla.org/en-US/docs/Web/Events/resize\n\t\t\tif (!this.resizeTimeout) {\n\t\t\t\tconst cb = () => {\n\t\t\t\t\tthis.resizeTimeout = null\n\n\t\t\t\t\tthis._resize() // The actualResizeHandler will execute at a rate of 15fps\n\t\t\t\t}\n\n\t\t\t\t// On mobile devices there's usually no resize but when changing orientation it's to early to\n\t\t\t\t// measure the size in requestAnimationFrame (it's usually incorrect size at this point)\n\t\t\t\tthis.resizeTimeout = client.isMobileDevice() ? setTimeout(cb, 66) : requestAnimationFrame(cb)\n\t\t\t}\n\t\t}\n\t\twindow.onresize = onresize\n\t\t// specifially for iOS: rotation through the unsupported orientation (e.g, 90 degrees 3 times) will not trigger the resize and we wouldn't resize\n\t\t// some things so we react to both, it is throttled anyway\n\t\twindow.onorientationchange = onresize\n\t}\n\n\t/**\n\t * Add a window resize listener with a listenerId\n\t * @param listener Provides the new width and height of the window if the values change.\n\t */\n\taddResizeListener(listener: windowSizeListener) {\n\t\tthis._windowSizeListeners.push(listener)\n\t}\n\n\tremoveResizeListener(listener: windowSizeListener) {\n\t\tremove(this._windowSizeListeners, listener)\n\t}\n\n\taddWindowCloseListener(listener: () => unknown): (...args: Array<any>) => any {\n\t\tthis._windowCloseListeners.add(listener)\n\n\t\tthis._checkWindowClosing(this._windowCloseListeners.size > 0)\n\n\t\treturn () => {\n\t\t\tthis._windowCloseListeners.delete(listener)\n\n\t\t\tthis._checkWindowClosing(this._windowCloseListeners.size > 0)\n\t\t}\n\t}\n\n\t_notifyCloseListeners(e: Event) {\n\t\tfor (const f of this._windowCloseListeners) {\n\t\t\tf(e)\n\t\t}\n\t}\n\n\taddKeyboardSizeListener(listener: KeyboardSizeListener) {\n\t\tthis._keyboardSizeListeners.push(listener)\n\n\t\tlistener(this._keyboardSize)\n\t}\n\n\tremoveKeyboardSizeListener(listener: KeyboardSizeListener) {\n\t\tremove(this._keyboardSizeListeners, listener)\n\t}\n\n\topenLink(href: string) {\n\t\tif (env.mode === Mode.App) {\n\t\t\twindow.open(href, \"_system\")\n\t\t} else {\n\t\t\twindow.open(href, \"_blank\")\n\t\t}\n\t}\n\n\tinit(logins: LoginController, connectivityModel: WebsocketConnectivityModel, appBasedVisibilityChage: ((visible: boolean) => void) | null) {\n\t\tthis.logins = logins\n\n\t\tif (window.addEventListener && !isApp()) {\n\t\t\twindow.addEventListener(\"beforeunload\", (e) => this._beforeUnload(e))\n\t\t\twindow.addEventListener(\"popstate\", (e) => this._popState(e))\n\t\t\twindow.addEventListener(\"unload\", (e) => this._onUnload())\n\t\t}\n\n\t\tthis.appBasedVisibilityChage = appBasedVisibilityChage ?? noOp\n\t\tthis.connectivityModel = connectivityModel\n\n\t\tif (env.mode === Mode.App || env.mode === Mode.Desktop || env.mode === Mode.Admin) {\n\t\t\tthis.addPageInBackgroundListener()\n\t\t}\n\n\t\t// needed to help the MacOs desktop client to distinguish between Cmd+Arrow to navigate the history\n\t\t// and Cmd+Arrow to navigate a text editor\n\t\tif (env.mode === Mode.Desktop && client.isMacOS && window.addEventListener) {\n\t\t\twindow.addEventListener(\"keydown\", (e) => {\n\t\t\t\tif (!e.metaKey || e.key === \"Meta\") return\n\n\t\t\t\tconst target = e.target as HTMLElement | null\n\t\t\t\t// prevent history nav if the active element is an input / squire editor\n\t\t\t\tif (target?.tagName === \"INPUT\" || target?.contentEditable === \"true\") {\n\t\t\t\t\te.stopPropagation()\n\t\t\t\t} else if (e.key === \"ArrowLeft\") {\n\t\t\t\t\twindow.history.back()\n\t\t\t\t} else if (e.key === \"ArrowRight\") {\n\t\t\t\t\twindow.history.forward()\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\t// call the resize listeners once to make sure everyone\n\t\t// has the current window size once we're done initializing\n\t\tthis._resize()\n\t}\n\n\t_resize() {\n\t\ttry {\n\t\t\tfor (const listener of this._windowSizeListeners) {\n\t\t\t\tlistener(window.innerWidth, window.innerHeight)\n\t\t\t}\n\t\t} finally {\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\t_checkWindowClosing(enable: boolean) {\n\t\tthis.windowCloseConfirmation = enable\n\t}\n\n\t_beforeUnload(e: any): string | null {\n\t\t// BeforeUnloadEvent\n\t\tconsole.log(\"windowfacade._beforeUnload\")\n\n\t\tthis._notifyCloseListeners(e)\n\n\t\tif (this.windowCloseConfirmation) {\n\t\t\tlet m = lang.get(\"closeWindowConfirmation_msg\")\n\t\t\te.returnValue = m\n\t\t\treturn m\n\t\t} else {\n\t\t\tthis.logins?.logout(true)\n\t\t\treturn null\n\t\t}\n\t}\n\n\t/**\n\t * add a function to call when onpopstate event occurs\n\t * @param listener: return true if this popstate may go ahead\n\t * @returns {Function}\n\t */\n\taddHistoryEventListener(listener: (e: Event) => boolean): () => void {\n\t\tthis._historyStateEventListeners.push(listener)\n\n\t\treturn () => {\n\t\t\tconst index = this._historyStateEventListeners.indexOf(listener)\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis._historyStateEventListeners.splice(index, 1)\n\t\t\t}\n\t\t}\n\t}\n\n\tremoveHistoryEventListener(listener: (e: Event) => boolean): void {\n\t\tremove(this._historyStateEventListeners, listener)\n\t}\n\n\t/**\n\t * calls the last history event listener that was added\n\t * and reverts the state change if it returns false\n\t * TODO: this also fires for forward-events and when the user jumps around in the history\n\t * TODO: by long-clicking the back/forward buttons.\n\t * TODO: solving this requires extensive bookkeeping because the events are indistinguishable by default\n\t * @param e: popstate DOM event\n\t * @private\n\t */\n\t_popState(e: Event) {\n\t\tconst len = this._historyStateEventListeners.length\n\t\tif (len === 0) return\n\n\t\tif (this._ignoreNextPopstate) {\n\t\t\tthis._ignoreNextPopstate = false\n\t\t\treturn\n\t\t}\n\n\t\tif (!this._historyStateEventListeners[len - 1](e)) {\n\t\t\tthis._ignoreNextPopstate = true\n\t\t\t// go 1 page forward in the history\n\t\t\t// this reverts the state change (if the event was triggered by a back-button press)\n\t\t\thistory.go(1)\n\t\t}\n\t}\n\n\t_onUnload() {\n\t\tif (this.windowCloseConfirmation && this.logins) {\n\t\t\tthis.logins.logout(true)\n\t\t}\n\t}\n\n\taddOnlineListener(listener: () => void) {\n\t\twindow.addEventListener(\"online\", listener)\n\t}\n\n\taddOfflineListener(listener: () => void) {\n\t\twindow.addEventListener(\"offline\", listener)\n\t}\n\n\tasync reload(args: Params) {\n\t\tif (isApp() || isElectronClient()) {\n\t\t\tif (!Object.hasOwn(args, \"noAutoLogin\")) {\n\t\t\t\targs.noAutoLogin = true\n\t\t\t}\n\n\t\t\tconst { locator } = await import(\"../api/main/CommonLocator\")\n\n\t\t\tconst stringifiedArgs: Record<string, string> = {}\n\t\t\tfor (const [k, v] of Object.entries(args)) {\n\t\t\t\tif (v != null) {\n\t\t\t\t\tstringifiedArgs[k] = String(v)\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait locator.commonSystemFacade.reload(stringifiedArgs)\n\t\t} else {\n\t\t\twindow.location.reload()\n\t\t}\n\t}\n\n\taddPageInBackgroundListener() {\n\t\t// For Android it's handled manually from native because visibilitychange listener is not called after the\n\t\t// app was inactive for some time.\n\t\t// See NativeWrapperCommands.js\n\t\tif (isIOSApp()) {\n\t\t\tdocument.addEventListener(\"visibilitychange\", () => {\n\t\t\t\tconsole.log(\"Visibility change, hidden: \", document.hidden)\n\n\t\t\t\tthis.appBasedVisibilityChage(!document.hidden)\n\n\t\t\t\tif (!document.hidden) {\n\t\t\t\t\t// On iOS devices the WebSocket close event fires when the app comes back to foreground\n\t\t\t\t\t// so we try to reconnect with a delay to receive _close event first. Otherwise\n\t\t\t\t\t// we may try to reconnect while we think that we're still connected\n\t\t\t\t\t// (e.g. first reconnect and then receive close).\n\t\t\t\t\t// We used to handle it in the EventBus and reconnect immediately but isIosApp()\n\t\t\t\t\t// check does not work in the worker currently.\n\t\t\t\t\t// Doing this for all apps just to be sure.\n\t\t\t\t\tsetTimeout(() => this.connectivityModel?.tryReconnect(false, true), 100)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tonKeyboardSizeChanged(size: number) {\n\t\tthis._keyboardSize = size\n\n\t\tfor (let listener of this._keyboardSizeListeners) {\n\t\t\tlistener(size)\n\t\t}\n\n\t\tif (size > 0) {\n\t\t\t// reset position fixed for the body to allow scrolling in dialogs on iOS\n\t\t\t// https://github.com/scottjehl/Device-Bugs/issues/14\n\t\t\tconst body = document.body as any\n\t\t\tbody.style.position = \"unset\"\n\t\t\tsetTimeout(() => {\n\t\t\t\tbody.style.position = \"fixed\"\n\t\t\t}, 200)\n\t\t}\n\t}\n}\n\nexport const windowFacade: WindowFacade = new WindowFacade()\n"],"mappings":"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"}