{"version":3,"file":"TutaSseFacadeTest-DdOMHyC8.js","names":["sseStorage: SseStorage","notificationHandler: TutaNotificationHandler","sseClient: SseClient","crypto: DesktopNativeCryptoFacade","appVersion: string","fetch: FetchImpl","date: DateProvider","sseInfo: SseInfo","userId: string","identifier: string","headers: Record<string, string>","message: string","userId: Id","userId: string | undefined","sseFacade: TutaSseFacade","sseStorage: SseStorage","notificationHandler: TutaNotificationHandler","sseClient: SseClient","crypto: DesktopNativeCryptoFacade","fetch: typeof undiciFetch","date: DateProvider","template: Partial<SseInfo>","opts: SseConnectOptions","headers: Record<string, string>","encryptedMissedNotification: EncryptedMissedNotification"],"sources":["../../src/common/desktop/sse/TutaSseFacade.ts","../tests/desktop/sse/TutaSseFacadeTest.ts"],"sourcesContent":["import { SseClient, SseEventHandler } from \"./SseClient.js\"\nimport { TutaNotificationHandler } from \"./TutaNotificationHandler.js\"\nimport { DesktopNativeCryptoFacade } from \"../DesktopNativeCryptoFacade.js\"\nimport { makeTaggedLogger } from \"../DesktopLog.js\"\nimport { typeModels } from \"../../api/entities/sys/TypeModels.js\"\nimport { assertNotNull, base64ToBase64Url, filterInt, neverNull, stringToUtf8Uint8Array, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport { handleRestError } from \"../../api/common/error/RestError.js\"\nimport { MissedNotification } from \"../../api/entities/sys/TypeRefs.js\"\nimport { EncryptedAlarmNotification } from \"../../native/common/EncryptedAlarmNotification.js\"\nimport { SseStorage } from \"./SseStorage.js\"\nimport { DateProvider } from \"../../api/common/DateProvider.js\"\nimport { SseInfo } from \"./SseInfo.js\"\nimport { FetchImpl } from \"../net/NetAgent\"\n\nconst log = makeTaggedLogger(\"[SSEFacade]\")\n\nexport const MISSED_NOTIFICATION_TTL = 30 * 24 * 60 * 60 * 1000 // 30 days\nexport type EncryptedMissedNotification = MissedNotification & { alarmNotifications: readonly EncryptedAlarmNotification[] }\n\nexport class TutaSseFacade implements SseEventHandler {\n\tprivate currentSseInfo: SseInfo | null = null\n\n\tconstructor(\n\t\tprivate readonly sseStorage: SseStorage,\n\t\tprivate readonly notificationHandler: TutaNotificationHandler,\n\t\tprivate readonly sseClient: SseClient,\n\t\tprivate readonly crypto: DesktopNativeCryptoFacade,\n\t\tprivate readonly appVersion: string,\n\t\tprivate readonly fetch: FetchImpl,\n\t\tprivate readonly date: DateProvider,\n\t) {\n\t\tsseClient.setEventListener(this)\n\t}\n\n\tasync connect() {\n\t\tif (await this.hasNotificationTTLExpired()) {\n\t\t\tawait this.notificationHandler.onLocalDataInvalidated()\n\t\t\tawait this.sseStorage.clear()\n\t\t\treturn\n\t\t}\n\t\tif (this.currentSseInfo != null) {\n\t\t\tawait this.disconnect()\n\t\t}\n\t\tconst sseInfo = await this.sseStorage.getSseInfo()\n\t\tif (sseInfo == null) {\n\t\t\tlog.debug(\"No SSE info\")\n\t\t\treturn\n\t\t}\n\t\tconst url = this.getSseUrl(sseInfo, sseInfo.userIds[0])\n\t\tconst headers = {\n\t\t\tv: typeModels.MissedNotification.version,\n\t\t\tcv: this.appVersion,\n\t\t}\n\t\tconst timeout = await this.sseStorage.getHeartbeatTimeoutSec()\n\t\tif (timeout != null) {\n\t\t\tthis.sseClient.setReadTimeout(timeout)\n\t\t}\n\n\t\tawait this.sseClient.connect({ url, headers })\n\t\tthis.currentSseInfo = sseInfo\n\t}\n\n\t/**\n\t * We remember the last time we connected or fetched missed notification and if since the last time we did the the TTL time has\n\t * expired, we certainly missed some updates.\n\t * We need to unschedule all alarms and to tell web part that we would like alarms to be scheduled all over.\n\t */\n\tprivate async hasNotificationTTLExpired(): Promise<boolean> {\n\t\tconst lastMissedNotificationCheckTime = await this.sseStorage.getMissedNotificationCheckTime()\n\t\tlog.debug(\"last missed notification check:\", {\n\t\t\tlastMissedNotificationCheckTime,\n\t\t})\n\t\treturn lastMissedNotificationCheckTime != null && this.date.now() - lastMissedNotificationCheckTime > MISSED_NOTIFICATION_TTL\n\t}\n\n\tprivate getSseUrl(sseInfo: SseInfo, userId: string): URL {\n\t\tconst url = new URL(sseInfo.sseOrigin)\n\t\turl.pathname = \"sse\"\n\t\turl.searchParams.append(\"_body\", this.requestJson(sseInfo.identifier, userId))\n\t\treturn url\n\t}\n\n\tprivate requestJson(identifier: string, userId: string): string {\n\t\treturn JSON.stringify({\n\t\t\t_format: \"0\",\n\t\t\tidentifier: identifier,\n\t\t\tuserIds: [\n\t\t\t\t{\n\t\t\t\t\t_id: this.crypto.generateId(4),\n\t\t\t\t\tvalue: userId,\n\t\t\t\t},\n\t\t\t],\n\t\t})\n\t}\n\n\tprivate async onNotification() {\n\t\tif ((await this.sseStorage.getMissedNotificationCheckTime()) == null) {\n\t\t\t// We set default value for  the case when Push identifier was added but no notifications were received. Then more than\n\t\t\t// MISSED_NOTIFICATION_TTL has passed and notifications has expired\n\t\t\tawait this.sseStorage.recordMissedNotificationCheckTime()\n\t\t}\n\t\tif (await this.hasNotificationTTLExpired()) {\n\t\t\tawait this.notificationHandler.onLocalDataInvalidated()\n\t\t\treturn\n\t\t}\n\t\tlet missedNotification\n\t\ttry {\n\t\t\tmissedNotification = await this.downloadMissedNotification()\n\t\t} catch (e) {\n\t\t\tlog.warn(\"Failed to download missed notification\", e)\n\t\t\treturn\n\t\t}\n\n\t\tawait this.sseStorage.setLastProcessedNotificationId(assertNotNull(missedNotification.lastProcessedNotificationId))\n\t\tawait this.sseStorage.recordMissedNotificationCheckTime()\n\t\tconst sseInfo = this.currentSseInfo\n\t\tif (sseInfo == null) return\n\t\tfor (const notificationInfo of missedNotification.notificationInfos) {\n\t\t\tawait this.notificationHandler.onMailNotification(sseInfo, notificationInfo)\n\t\t}\n\t\tfor (const alarmNotification of missedNotification.alarmNotifications) {\n\t\t\tawait this.notificationHandler.onAlarmNotification(alarmNotification)\n\t\t}\n\t}\n\n\tprivate async downloadMissedNotification(): Promise<EncryptedMissedNotification> {\n\t\tconst sseInfo = assertNotNull(this.currentSseInfo)\n\t\tconst url = this.makeMissedNotificationUrl(sseInfo)\n\n\t\tlog.debug(\"downloading missed notification\")\n\t\tconst headers: Record<string, string> = {\n\t\t\tuserIds: sseInfo.userIds[0],\n\t\t\tv: typeModels.MissedNotification.version,\n\t\t\tcv: this.appVersion,\n\t\t}\n\t\tconst lastProcessedId = await this.sseStorage.getLastProcessedNotificationId()\n\n\t\tif (lastProcessedId) {\n\t\t\theaders[\"lastProcessedNotificationId\"] = lastProcessedId\n\t\t}\n\n\t\tconst res = await this.fetch(url, { headers })\n\n\t\tif (!res.ok) {\n\t\t\tthrow handleRestError(neverNull(res.status), url, res.headers.get(\"error-id\") as string, null)\n\t\t} else {\n\t\t\tconst json = await res.json()\n\t\t\tlog.debug(\"downloaded missed notification\")\n\t\t\treturn json as EncryptedMissedNotification\n\t\t}\n\t}\n\n\tprivate makeMissedNotificationUrl(sseInfo: SseInfo): string {\n\t\tconst { identifier, sseOrigin } = sseInfo\n\t\tconst customId = uint8ArrayToBase64(stringToUtf8Uint8Array(identifier))\n\t\tconst url = new URL(sseOrigin)\n\t\turl.pathname = \"rest/sys/missednotification/\" + base64ToBase64Url(customId)\n\t\treturn url.toString()\n\t}\n\n\tasync onNewMessage(message: string) {\n\t\tif (message === \"data: notification\") {\n\t\t\tlog.debug(\"notification\")\n\t\t\tawait this.onNotification()\n\t\t\t// deal with it\n\t\t} else if (message.startsWith(\"data: heartbeatTimeout:\")) {\n\t\t\tconst timeoutString = message.split(\":\").at(2)\n\t\t\tlog.debug(\"heartbeatTimeout\", timeoutString)\n\t\t\tconst timeout = timeoutString == null ? null : filterInt(timeoutString)\n\t\t\tif (timeout != null && !isNaN(timeout)) {\n\t\t\t\tawait this.sseStorage.setHeartbeatTimeoutSec(timeout)\n\t\t\t\tthis.sseClient.setReadTimeout(timeout)\n\t\t\t}\n\t\t}\n\t}\n\n\tasync onNotAuthenticated() {\n\t\t// invalid userids\n\t\tlog.debug(\"got NotAuthenticated, deleting userId\")\n\t\tlet lastSseInfo = this.currentSseInfo\n\t\tthis.currentSseInfo = null\n\t\tif (lastSseInfo == null) {\n\t\t\tlog.warn(\"NotAuthorized while not connected?\")\n\t\t\treturn\n\t\t}\n\t\tconst firstUser = lastSseInfo.userIds.at(0)\n\t\tawait this.removeUserIdInternal(firstUser)\n\t}\n\n\tasync removeUser(userId: Id) {\n\t\tawait this.removeUserIdInternal(userId)\n\t\tawait this.connect()\n\t}\n\n\tprivate async removeUserIdInternal(userId: string | undefined) {\n\t\tlet sseInfo\n\t\tif (userId != null) {\n\t\t\tsseInfo = await this.sseStorage.removeUser(userId)\n\t\t\tawait this.notificationHandler.onUserRemoved(userId)\n\t\t} else {\n\t\t\tsseInfo = await this.sseStorage.getSseInfo()\n\t\t}\n\t\tif (sseInfo?.userIds.length === 0) {\n\t\t\tlog.debug(\"No user ids, skipping reconnect\")\n\t\t\tawait this.notificationHandler.onLocalDataInvalidated()\n\t\t\tawait this.sseStorage.clear()\n\t\t}\n\t}\n\n\tasync reconnect() {\n\t\tawait this.disconnect()\n\t\tawait this.connect()\n\t}\n\n\tasync disconnect() {\n\t\tthis.currentSseInfo = null\n\t\tawait this.sseClient.disconnect()\n\t}\n}\n","import o from \"@tutao/otest\"\nimport { EncryptedMissedNotification, MISSED_NOTIFICATION_TTL, TutaSseFacade } from \"../../../../src/common/desktop/sse/TutaSseFacade.js\"\nimport { func, matchers, object, verify, when } from \"testdouble\"\nimport { SseStorage } from \"../../../../src/common/desktop/sse/SseStorage.js\"\nimport { TutaNotificationHandler } from \"../../../../src/common/desktop/sse/TutaNotificationHandler.js\"\nimport { SseClient, SseConnectOptions } from \"../../../../src/common/desktop/sse/SseClient.js\"\nimport { DesktopNativeCryptoFacade } from \"../../../../src/common/desktop/DesktopNativeCryptoFacade.js\"\nimport { fetch as undiciFetch } from \"undici\"\nimport { typeModels } from \"../../../../src/common/api/entities/sys/TypeModels.js\"\nimport { deepEqual } from \"@tutao/tutanota-utils\"\nimport { DateProvider } from \"../../../../src/common/api/common/DateProvider.js\"\nimport { createIdTupleWrapper, createMissedNotification, createNotificationInfo } from \"../../../../src/common/api/entities/sys/TypeRefs.js\"\nimport { EncryptedAlarmNotification } from \"../../../../src/common/native/common/EncryptedAlarmNotification.js\"\nimport { mockFetchRequest } from \"../../TestUtils.js\"\nimport { SseInfo } from \"../../../../src/common/desktop/sse/SseInfo.js\"\n\nconst APP_V = \"3\"\no.spec(\"TutaSseFacade\", () => {\n\tlet sseFacade: TutaSseFacade\n\tlet sseStorage: SseStorage\n\tlet notificationHandler: TutaNotificationHandler\n\tlet sseClient: SseClient\n\tlet crypto: DesktopNativeCryptoFacade\n\tlet fetch: typeof undiciFetch\n\tlet date: DateProvider\n\to.beforeEach(() => {\n\t\tsseStorage = object()\n\t\tnotificationHandler = object()\n\t\tsseClient = object()\n\t\tcrypto = object()\n\t\tfetch = func<typeof undiciFetch>()\n\t\tdate = object()\n\t\tsseFacade = new TutaSseFacade(sseStorage, notificationHandler, sseClient, crypto, APP_V, fetch, date)\n\t})\n\n\tfunction setupSseInfo(template: Partial<SseInfo> = {}): SseInfo {\n\t\tconst sseInfo = {\n\t\t\tidentifier: \"id\",\n\t\t\tsseOrigin: \"http://something.com\",\n\t\t\tuserIds: [\"userId\"],\n\t\t\t...template,\n\t\t}\n\t\twhen(sseStorage.getSseInfo()).thenResolve(sseInfo)\n\t\treturn sseInfo\n\t}\n\n\to.spec(\"connect\", () => {\n\t\to.test(\"connect\", async () => {\n\t\t\tsetupSseInfo()\n\t\t\tawait sseFacade.connect()\n\t\t\tconst url = new URL(\n\t\t\t\t\"http://something.com/sse?_body=%7B%22_format%22%3A%220%22%2C%22identifier%22%3A%22id%22%2C%22userIds%22%3A%5B%7B%22value%22%3A%22userId%22%7D%5D%7D\",\n\t\t\t)\n\t\t\tverify(\n\t\t\t\tsseClient.connect(\n\t\t\t\t\tmatchers.argThat((opts: SseConnectOptions) => {\n\t\t\t\t\t\treturn opts.url.toString() === url.toString() && deepEqual(opts.headers, { v: typeModels.MissedNotification.version, cv: APP_V })\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t)\n\t\t})\n\t\to.test(\"connect when notification TTL expired\", async () => {\n\t\t\twhen(date.now()).thenReturn(MISSED_NOTIFICATION_TTL + 100)\n\t\t\twhen(sseStorage.getMissedNotificationCheckTime()).thenResolve(1)\n\t\t\tawait sseFacade.connect()\n\t\t\tverify(notificationHandler.onLocalDataInvalidated())\n\t\t\tverify(sseStorage.clear())\n\t\t\tverify(sseClient.connect(matchers.anything()), { times: 0 })\n\t\t})\n\t\to.test(\"disconnect and reconnect when already connected\", async () => {\n\t\t\tsetupSseInfo()\n\t\t\tawait sseFacade.connect()\n\t\t\tawait sseFacade.connect()\n\t\t\tverify(sseClient.disconnect())\n\t\t\tverify(sseClient.connect(matchers.anything()), { times: 2 })\n\t\t})\n\t\to.test(\"set heartbeat timeout when connecting\", async () => {\n\t\t\twhen(sseStorage.getHeartbeatTimeoutSec()).thenResolve(1)\n\t\t\tsetupSseInfo()\n\t\t\tawait sseFacade.connect()\n\t\t\tverify(sseClient.setReadTimeout(1))\n\t\t})\n\t})\n\n\to.spec(\"onNotification\", () => {\n\t\to.test(\"downloads and handles notification\", async () => {\n\t\t\tconst headers: Record<string, string> = {\n\t\t\t\tuserIds: \"userId\",\n\t\t\t\tv: typeModels.MissedNotification.version,\n\t\t\t\tcv: APP_V,\n\t\t\t}\n\t\t\tconst sseInfo = setupSseInfo()\n\t\t\tawait sseFacade.connect()\n\t\t\tconst alarmNotification = { _marker: \"encryptedAlarmNotification\" } as unknown as EncryptedAlarmNotification\n\t\t\tconst notificationInfo = createNotificationInfo({\n\t\t\t\t_id: \"notificationInfoId\",\n\t\t\t\t_ownerGroup: \"ownerGroupId\",\n\t\t\t\tuserId: \"userId\",\n\t\t\t\tmailId: createIdTupleWrapper({\n\t\t\t\t\tlistId: \"mailListId\",\n\t\t\t\t\tlistElementId: \"mailElementId\",\n\t\t\t\t}),\n\t\t\t\tmailAddress: \"test@mail.address\",\n\t\t\t})\n\t\t\tconst missedNotification = createMissedNotification({\n\t\t\t\t_ownerEncSessionKey: null,\n\t\t\t\t_ownerGroup: \"ownerGroupId\",\n\t\t\t\t_permissions: \"permissionsId\",\n\t\t\t\tchangeTime: new Date(\"2024-04-22\"),\n\t\t\t\tconfirmationId: \"confirmationId\",\n\t\t\t\tlastProcessedNotificationId: \"lastProcessedNotificationId\",\n\t\t\t\talarmNotifications: [],\n\t\t\t\tnotificationInfos: [notificationInfo],\n\t\t\t})\n\t\t\tconst encryptedMissedNotification: EncryptedMissedNotification = Object.assign({}, missedNotification, {\n\t\t\t\talarmNotifications: [alarmNotification] as readonly EncryptedAlarmNotification[],\n\t\t\t})\n\n\t\t\tconst jsonDefer = mockFetchRequest(fetch, \"http://something.com/rest/sys/missednotification/aWQ\", headers, 200, encryptedMissedNotification)\n\n\t\t\tawait sseFacade.onNewMessage(\"data: notification\")\n\n\t\t\tawait jsonDefer\n\t\t\tverify(sseStorage.setLastProcessedNotificationId(\"lastProcessedNotificationId\"))\n\t\t\tverify(sseStorage.recordMissedNotificationCheckTime())\n\t\t\tverify(notificationHandler.onMailNotification(sseInfo, notificationInfo))\n\t\t\tverify(notificationHandler.onAlarmNotification(alarmNotification))\n\t\t})\n\n\t\to.test(\"passes lastProcessedNotificationId if present\", async () => {\n\t\t\tconst previousLastProcessedNotificationId = \"previousLastProcessedNotificationId\"\n\t\t\tconst newLastProcessedNotificationId = \"newLastProcessedNotificationId\"\n\t\t\tconst headers: Record<string, string> = {\n\t\t\t\tuserIds: \"userId\",\n\t\t\t\tv: typeModels.MissedNotification.version,\n\t\t\t\tcv: APP_V,\n\t\t\t\tlastProcessedNotificationId: previousLastProcessedNotificationId,\n\t\t\t}\n\t\t\tsetupSseInfo()\n\t\t\twhen(sseStorage.getLastProcessedNotificationId()).thenResolve(previousLastProcessedNotificationId)\n\n\t\t\tconst missedNotification = createMissedNotification({\n\t\t\t\t_ownerEncSessionKey: null,\n\t\t\t\t_ownerGroup: \"ownerGroupId\",\n\t\t\t\t_permissions: \"permissionsId\",\n\t\t\t\tchangeTime: new Date(\"2024-04-22\"),\n\t\t\t\tconfirmationId: \"confirmationId\",\n\t\t\t\tlastProcessedNotificationId: newLastProcessedNotificationId,\n\t\t\t\talarmNotifications: [],\n\t\t\t\tnotificationInfos: [],\n\t\t\t})\n\t\t\tconst encryptedMissedNotification: EncryptedMissedNotification = Object.assign({}, missedNotification, { alarmNotifications: [] })\n\t\t\tawait sseFacade.connect()\n\n\t\t\tconst jsonDefer = mockFetchRequest(fetch, \"http://something.com/rest/sys/missednotification/aWQ\", headers, 200, encryptedMissedNotification)\n\n\t\t\tawait sseFacade.onNewMessage(\"data: notification\")\n\n\t\t\tawait jsonDefer\n\t\t\tverify(sseStorage.setLastProcessedNotificationId(newLastProcessedNotificationId))\n\t\t})\n\t})\n\n\to.spec(\"heartbeat\", () => {\n\t\to.test(\"saves valid heartbeat and passes it to sse client\", async () => {\n\t\t\tsetupSseInfo()\n\t\t\tawait sseFacade.connect()\n\t\t\tawait sseFacade.onNewMessage(\"data: heartbeatTimeout:240\")\n\n\t\t\tverify(sseStorage.setHeartbeatTimeoutSec(240))\n\t\t\tverify(sseClient.setReadTimeout(240))\n\t\t})\n\t})\n\n\to.spec(\"onNotAuthenticated\", () => {\n\t\to.test(\"when it has more than one user it removes the first one\", async () => {\n\t\t\tsetupSseInfo({\n\t\t\t\tuserIds: [\"user1\", \"user2\"],\n\t\t\t})\n\t\t\tawait sseFacade.connect()\n\n\t\t\tawait sseFacade.onNotAuthenticated()\n\n\t\t\tverify(sseStorage.removeUser(\"user1\"))\n\t\t\tverify(notificationHandler.onUserRemoved(\"user1\"))\n\t\t})\n\n\t\to.test(\"when it has only one user it invalidates the storage\", async () => {\n\t\t\tconst sseInfo = setupSseInfo({\n\t\t\t\tuserIds: [\"user1\"],\n\t\t\t})\n\t\t\twhen(sseStorage.removeUser(\"user1\")).thenResolve({ ...sseInfo, userIds: [] })\n\t\t\tawait sseFacade.connect()\n\n\t\t\tawait sseFacade.onNotAuthenticated()\n\n\t\t\tverify(notificationHandler.onUserRemoved(\"user1\"))\n\t\t\tverify(sseStorage.clear())\n\t\t\tverify(notificationHandler.onLocalDataInvalidated())\n\t\t})\n\t})\n\n\to.spec(\"removeUser\", () => {\n\t\to.test(\"reconnects with new SSE info\", async () => {\n\t\t\twhen(sseStorage.getSseInfo()).thenResolve(\n\t\t\t\t{\n\t\t\t\t\tidentifier: \"id\",\n\t\t\t\t\tsseOrigin: \"http://something.com\",\n\t\t\t\t\tuserIds: [\"user1\", \"user2\"],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tidentifier: \"id\",\n\t\t\t\t\tsseOrigin: \"http://something.com\",\n\t\t\t\t\tuserIds: [\"user1\"],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tawait sseFacade.connect()\n\n\t\t\tawait sseFacade.removeUser(\"user2\")\n\n\t\t\tverify(sseStorage.removeUser(\"user2\"))\n\t\t\tverify(notificationHandler.onUserRemoved(\"user2\"))\n\n\t\t\tconst captor = matchers.captor()\n\t\t\tverify(sseClient.connect(captor.capture()))\n\t\t\tconst url = captor.values![1].url\n\t\t\tconst body = url.searchParams.get(\"_body\")!\n\t\t\to(JSON.parse(body).userIds).deepEquals([{ value: \"user1\" }])\n\t\t})\n\n\t\to.test(\"does not reconnect if there are no more users\", async () => {\n\t\t\twhen(sseStorage.getSseInfo()).thenResolve(\n\t\t\t\t{\n\t\t\t\t\tidentifier: \"id\",\n\t\t\t\t\tsseOrigin: \"http://something.com\",\n\t\t\t\t\tuserIds: [\"user1\"],\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t)\n\t\t\twhen(sseStorage.removeUser(\"user1\")).thenResolve({\n\t\t\t\tidentifier: \"id\",\n\t\t\t\tsseOrigin: \"http://something.com\",\n\t\t\t\tuserIds: [],\n\t\t\t})\n\n\t\t\tawait sseFacade.connect()\n\n\t\t\tawait sseFacade.removeUser(\"user1\")\n\n\t\t\tverify(sseStorage.removeUser(\"user1\"))\n\t\t\tverify(notificationHandler.onUserRemoved(\"user1\"))\n\t\t\t// that was the last user\n\t\t\tverify(sseStorage.clear())\n\t\t\tverify(notificationHandler.onLocalDataInvalidated())\n\n\t\t\tverify(sseClient.connect(matchers.anything()), { times: 1 })\n\t\t})\n\t})\n})\n"],"mappings":"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"}