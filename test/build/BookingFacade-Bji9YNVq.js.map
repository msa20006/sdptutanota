{"version":3,"file":"BookingFacade-Bji9YNVq.js","names":["serviceExecutor: IServiceExecutor","type: BookingItemFeatureType","count: number","reactivate: boolean","priceData: PriceData | null","featureType: NumberString"],"sources":["../../src/common/api/worker/facades/lazy/BookingFacade.ts"],"sourcesContent":["import type { BookingItemFeatureType } from \"../../../common/TutanotaConstants.js\"\nimport { Const } from \"../../../common/TutanotaConstants.js\"\nimport type { PriceData, PriceItemData, PriceServiceReturn } from \"../../../entities/sys/TypeRefs.js\"\nimport { createPriceRequestData, createPriceServiceData } from \"../../../entities/sys/TypeRefs.js\"\nimport { neverNull } from \"@tutao/tutanota-utils\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { PriceService } from \"../../../entities/sys/Services.js\"\n\nassertWorkerOrNode()\n\nexport class BookingFacade {\n\tconstructor(private readonly serviceExecutor: IServiceExecutor) {}\n\n\t/**\n\t * Provides the price for a given feature type and count.\n\t * @param  type The booking feature type, one of tutao.entity.tutanota.TutanotaConstants.BOOKING_ITEM_FEATURE_TYPE_*.\n\t * @param  count Number of items, may be negative.\n\t * @param  reactivate  If true a user or group is reactivated instead of created - not used for aliases, storage or branding\n\t * @return Resolves to PriceServiceReturn or an exception if the loading failed.\n\t */\n\tgetPrice(type: BookingItemFeatureType, count: number, reactivate: boolean): Promise<PriceServiceReturn> {\n\t\tconst priceRequestData = createPriceRequestData({\n\t\t\tfeatureType: type,\n\t\t\tcount: String(count),\n\t\t\treactivate,\n\t\t\tpaymentInterval: null,\n\t\t\taccountType: null,\n\t\t\tbusiness: null,\n\t\t})\n\t\tconst serviceData = createPriceServiceData({\n\t\t\tdate: Const.CURRENT_DATE,\n\t\t\tpriceRequest: priceRequestData,\n\t\t})\n\t\treturn this.serviceExecutor.get(PriceService, serviceData)\n\t}\n\n\t/**\n\t * Provides the price for a given feature type and count.\n\t * @return Resolves to PriceServiceReturn or an exception if the loading failed.\n\t */\n\tgetCurrentPrice(): Promise<PriceServiceReturn> {\n\t\tconst serviceData = createPriceServiceData({\n\t\t\tdate: null,\n\t\t\tpriceRequest: null,\n\t\t})\n\t\treturn this.serviceExecutor.get(PriceService, serviceData)\n\t}\n\n\t/**\n\t * Provides the price item from the given priceData for the given featureType. Returns null if no such item is available.\n\t * @param  priceData The given price data.\n\t * @param  featureType The booking item feature type\n\t * @return The price item or null\n\t */\n\tgetPriceItem(priceData: PriceData | null, featureType: NumberString): PriceItemData | null {\n\t\tif (priceData != null) {\n\t\t\treturn neverNull(priceData).items.find((p) => p.featureType === featureType) ?? null\n\t\t}\n\n\t\treturn null\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,oBAAoB;IAEP,gBAAN,MAAoB;CAC1B,YAA6BA,iBAAmC;EAmDhE,KAnD6B;CAAqC;;;;;;;;CASlE,SAASC,MAA8BC,OAAeC,YAAkD;EACvG,MAAM,mBAAmB,uBAAuB;GAC/C,aAAa;GACb,OAAO,OAAO,MAAM;GACpB;GACA,iBAAiB;GACjB,aAAa;GACb,UAAU;EACV,EAAC;EACF,MAAM,cAAc,uBAAuB;GAC1C,MAAM,MAAM;GACZ,cAAc;EACd,EAAC;AACF,SAAO,KAAK,gBAAgB,IAAI,cAAc,YAAY;CAC1D;;;;;CAMD,kBAA+C;EAC9C,MAAM,cAAc,uBAAuB;GAC1C,MAAM;GACN,cAAc;EACd,EAAC;AACF,SAAO,KAAK,gBAAgB,IAAI,cAAc,YAAY;CAC1D;;;;;;;CAQD,aAAaC,WAA6BC,aAAiD;AAC1F,MAAI,aAAa,KAChB,QAAO,UAAU,UAAU,CAAC,MAAM,KAAK,CAAC,MAAM,EAAE,gBAAgB,YAAY,IAAI;AAGjF,SAAO;CACP;AACD"}