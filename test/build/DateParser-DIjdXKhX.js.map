{"version":3,"file":"DateParser-DIjdXKhX.js","names":["dateString: string","referenceDateRenderer: (refdate: Date) => string","month: number","year: number","text: string"],"sources":["../../src/common/misc/DateParser.ts"],"sourcesContent":["import { DateTime } from \"luxon\"\nimport type { Birthday } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { createBirthday } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\n\n/**\n * parses the following formats:\n *\n * zh-hant    2017/6/23\n * hu         2017. 06. 23.\n * lt-lt      2017-06-23\n *\n * en        6/23/2017\n * fil-ph    6/23/2017\n * no        6/23/2017\n\n * sq        23.6.2017\n * hr        23. 06. 2017.\n * nl        23-6-2017\n * de        23.6.2017\n * el        23/6/2017\n * fr        23/06/2017\n * it        23/6/2017\n * pl        23.06.2017\n * pt-pt     23/06/2017\n * pt-br     23/06/2017\n * ro        23.06.2017\n * ru        23.06.2017\n * es        23/6/2017\n * tr        23.06.2017\n * fi        23.6.2017\n * mk        23.6.2017\n * sr        23.6.2017.\n * cs-cz     23. 6. 2017\n * da-dk     23/6/2017\n * et-ee     23.6.2017\n * id        23/6/2017\n * bg-bg     23.06.2017 Ð³.\n\n * @param dateString\n * @returns The timestamp from the given date string\n */\nconst referenceDate = new Date(2017, 5, 23)\n\nexport function parseDate(dateString: string, referenceDateRenderer: (refdate: Date) => string): Date {\n\tconst referenceParts = _cleanupAndSplit(referenceDateRenderer(referenceDate))\n\n\t// for finding day month and year position of locale date format  in cleanAndSplit array\n\tconst dayPos = referenceParts.findIndex((e) => e === 23)\n\tconst monthPos = referenceParts.findIndex((e) => e === 6)\n\tconst yearPos = referenceParts.findIndex((e) => e === 2017)\n\n\tconst parts = _cleanupAndSplit(dateString)\n\n\tlet day, month, year\n\n\tif (parts.length === 3) {\n\t\t// default dd-mm-yyyy or dd/mm/yyyy or dd.mm.yyyy\n\t\tday = parts[dayPos]\n\t\tmonth = parts[monthPos]\n\t\tyear = parts[yearPos]\n\t} else if (parts.length === 2) {\n\t\t// if only two numbers are provided then we interpret that as a day and a month\n\t\t// year pos *should* only ever be 0 or 2 (at the front or the back)\n\t\tif (yearPos === 0) {\n\t\t\tday = parts[dayPos - 1]\n\t\t\tmonth = parts[monthPos - 1]\n\t\t} else {\n\t\t\t// yearPos === 2\n\t\t\tday = parts[dayPos]\n\t\t\tmonth = parts[monthPos]\n\t\t}\n\n\t\tyear = new Date().getFullYear()\n\t} else {\n\t\t// invalid parts length\n\t\tthrow new ProgrammingError(`could not parse dateString '${dateString}' with reference date ${referenceParts}`)\n\t}\n\n\t// if 1 or 2 digit year, then make it be in the 2000\n\tif (year < 1000) {\n\t\tyear += 2000\n\t}\n\n\tif (month < 1 || month > 12) {\n\t\tthrow new Error(`Invalid value ${month} for month in ${dateString}`)\n\t}\n\n\t// maybe do better day clamping based on the month\n\tif (day < 1 || day > _getNumDaysInMonth(month, year)) {\n\t\tthrow new Error(`Invalid value ${day} for day in ${dateString}`)\n\t}\n\n\tconst date = new Date(year, month - 1, day)\n\n\tif (isNaN(date.getTime())) {\n\t\tthrow new Error(`Couldn't parse date string ${dateString}`)\n\t}\n\n\treturn date\n}\n\n/**\n * Get the number of days in a month in a given year\n * @param month as a number between 1 and 12\n * @param year\n * @return the number of days in the month\n * @private\n */\nexport function _getNumDaysInMonth(month: number, year: number): number {\n\tconst { daysInMonth } = DateTime.fromObject({\n\t\tmonth,\n\t\tyear,\n\t})\n\n\tif (!daysInMonth) {\n\t\tthrow new ProgrammingError(`could not get daysInMonth for month-year ${month}-${year}`)\n\t}\n\n\treturn daysInMonth\n}\n\n/**\n * Parses a birthday string containing either day and month or day and month and year. The year may be 4 or 2 digits. If it is 2 digits and after the current year, 1900 + x is used, 2000 + x otherwise.\n * @return A birthday object containing the data form the given text or null if the text could not be parsed.\n */\nexport function parseBirthday(text: string, referenceDateRenderer: (refdate: Date) => string): Birthday | null {\n\ttry {\n\t\tconst referenceParts = _cleanupAndSplit(referenceDateRenderer(referenceDate))\n\n\t\t//for finding day month and year position of locale date format  in cleanAndSplit array\n\t\tlet dayPos = referenceParts.findIndex((e) => e === 23)\n\t\tlet monthPos = referenceParts.findIndex((e) => e === 6)\n\t\tlet yearPos = referenceParts.findIndex((e) => e === 2017)\n\n\t\tlet birthdayValues = _cleanupAndSplit(text)\n\n\t\tlet day, month, year\n\n\t\tif (String(birthdayValues[dayPos]).length < 3 && String(birthdayValues[monthPos]).length < 3) {\n\t\t\tif (birthdayValues[dayPos] < 32) {\n\t\t\t\tday = String(birthdayValues[dayPos])\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\tif (birthdayValues[monthPos] < 13) {\n\t\t\t\tmonth = String(birthdayValues[monthPos])\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\n\t\tif (birthdayValues[yearPos]) {\n\t\t\tif (String(birthdayValues[yearPos]).length === 4) {\n\t\t\t\tyear = String(birthdayValues[yearPos])\n\t\t\t} else if (String(birthdayValues[yearPos]).length === 2) {\n\t\t\t\tif (birthdayValues[yearPos] > Number(String(new Date().getFullYear()).substring(2))) {\n\t\t\t\t\tyear = \"19\" + String(birthdayValues[yearPos])\n\t\t\t\t} else {\n\t\t\t\t\tyear = \"20\" + String(birthdayValues[yearPos])\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t} else {\n\t\t\tyear = null\n\t\t}\n\t\treturn createBirthday({ day, month, year })\n\t} catch (e) {\n\t\treturn null\n\t}\n}\n\nexport function _cleanupAndSplit(dateString: string): number[] {\n\t// Clean up any characters that can't be dealt with\n\tdateString = dateString.replace(/[^ 0-9./-]/g, \"\")\n\treturn dateString\n\t\t.split(/[./-]/g)\n\t\t.slice(0, 3) // keep at most three date parts even if the string contains more than two separators (e.g., extra '.' at the end)\n\t\t.map((part) => parseInt(part))\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,MAAM,gBAAgB,IAAI,KAAK,MAAM,GAAG;AAEjC,SAAS,UAAUA,YAAoBC,uBAAwD;CACrG,MAAM,iBAAiB,iBAAiB,sBAAsB,cAAc,CAAC;CAG7E,MAAM,SAAS,eAAe,UAAU,CAAC,MAAM,MAAM,GAAG;CACxD,MAAM,WAAW,eAAe,UAAU,CAAC,MAAM,MAAM,EAAE;CACzD,MAAM,UAAU,eAAe,UAAU,CAAC,MAAM,MAAM,KAAK;CAE3D,MAAM,QAAQ,iBAAiB,WAAW;CAE1C,IAAI,KAAK,OAAO;AAEhB,KAAI,MAAM,WAAW,GAAG;AAEvB,QAAM,MAAM;AACZ,UAAQ,MAAM;AACd,SAAO,MAAM;CACb,WAAU,MAAM,WAAW,GAAG;AAG9B,MAAI,YAAY,GAAG;AAClB,SAAM,MAAM,SAAS;AACrB,WAAQ,MAAM,WAAW;EACzB,OAAM;AAEN,SAAM,MAAM;AACZ,WAAQ,MAAM;EACd;AAED,SAAO,IAAI,OAAO,aAAa;CAC/B,MAEA,OAAM,IAAI,kBAAkB,8BAA8B,WAAW,wBAAwB,eAAe;AAI7G,KAAI,OAAO,IACV,SAAQ;AAGT,KAAI,QAAQ,KAAK,QAAQ,GACxB,OAAM,IAAI,OAAO,gBAAgB,MAAM,gBAAgB,WAAW;AAInE,KAAI,MAAM,KAAK,MAAM,mBAAmB,OAAO,KAAK,CACnD,OAAM,IAAI,OAAO,gBAAgB,IAAI,cAAc,WAAW;CAG/D,MAAM,OAAO,IAAI,KAAK,MAAM,QAAQ,GAAG;AAEvC,KAAI,MAAM,KAAK,SAAS,CAAC,CACxB,OAAM,IAAI,OAAO,6BAA6B,WAAW;AAG1D,QAAO;AACP;AASM,SAAS,mBAAmBC,OAAeC,MAAsB;CACvE,MAAM,EAAE,aAAa,GAAG,SAAS,WAAW;EAC3C;EACA;CACA,EAAC;AAEF,MAAK,YACJ,OAAM,IAAI,kBAAkB,2CAA2C,MAAM,GAAG,KAAK;AAGtF,QAAO;AACP;AAMM,SAAS,cAAcC,MAAcH,uBAAmE;AAC9G,KAAI;EACH,MAAM,iBAAiB,iBAAiB,sBAAsB,cAAc,CAAC;EAG7E,IAAI,SAAS,eAAe,UAAU,CAAC,MAAM,MAAM,GAAG;EACtD,IAAI,WAAW,eAAe,UAAU,CAAC,MAAM,MAAM,EAAE;EACvD,IAAI,UAAU,eAAe,UAAU,CAAC,MAAM,MAAM,KAAK;EAEzD,IAAI,iBAAiB,iBAAiB,KAAK;EAE3C,IAAI,KAAK,OAAO;AAEhB,MAAI,OAAO,eAAe,QAAQ,CAAC,SAAS,KAAK,OAAO,eAAe,UAAU,CAAC,SAAS,GAAG;AAC7F,OAAI,eAAe,UAAU,GAC5B,OAAM,OAAO,eAAe,QAAQ;IAEpC,QAAO;AAGR,OAAI,eAAe,YAAY,GAC9B,SAAQ,OAAO,eAAe,UAAU;IAExC,QAAO;EAER,MACA,QAAO;AAGR,MAAI,eAAe,SAClB,KAAI,OAAO,eAAe,SAAS,CAAC,WAAW,EAC9C,QAAO,OAAO,eAAe,SAAS;SAC5B,OAAO,eAAe,SAAS,CAAC,WAAW,EACrD,KAAI,eAAe,WAAW,OAAO,OAAO,IAAI,OAAO,aAAa,CAAC,CAAC,UAAU,EAAE,CAAC,CAClF,QAAO,OAAO,OAAO,eAAe,SAAS;IAE7C,QAAO,OAAO,OAAO,eAAe,SAAS;IAG9C,QAAO;IAGR,QAAO;AAER,SAAO,eAAe;GAAE;GAAK;GAAO;EAAM,EAAC;CAC3C,SAAQ,GAAG;AACX,SAAO;CACP;AACD;AAEM,SAAS,iBAAiBD,YAA8B;AAE9D,cAAa,WAAW,QAAQ,eAAe,GAAG;AAClD,QAAO,WACL,MAAM,SAAS,CACf,MAAM,GAAG,EAAE,CACX,IAAI,CAAC,SAAS,SAAS,KAAK,CAAC;AAC/B"}