{"version":3,"file":"MailEditor-Dm804Ukq.js","names":["model: SendMailModel","boundingRect: ClientRect","fileTypes?: Array<string>","dataFiles: Array<DataFile>","inlineImageElements: Array<HTMLElement>","attachment: Attachment","cleanupInlineAttachments: (arg0: HTMLElement, arg1: Array<HTMLElement>, arg2: Array<Attachment>) => void","domElement: HTMLElement","attachments: Array<Attachment>","elementsToRemove: HTMLElement[]","isConfidential: boolean","vnode: Vnode<TemplateResultRowAttrs>","text: string","e: KeyboardEvent","vnode: Vnode<TemplateSearchBarAttrs>","a: TemplateSearchBarAttrs","e: KeyboardEvent","vnode: CVnode<ScrollSelectListAttrs<T>>","vnode: CVnodeDOM<ScrollSelectListAttrs<T>>","item: T","vnode: Vnode<ScrollSelectListAttrs<T>>","e: MouseEvent","selectedItem: T | null","items: ReadonlyArray<T>","scrollDom: HTMLElement","templateModel: TemplatePopupModel","editor: Editor","template: EmailTemplate | null","highlightedText: string","text: string","rect: PosRect","onSelect: (arg0: string) => void","initialSearchString: string","restoreEditorFocus?: () => void","value: string","e: MouseEvent","e: KeyboardEvent","selectedTemplate: EmailTemplate","langCode: LanguageCode","template: EmailTemplate","_: EmailTemplate","e: Event","templateToEdit: EmailTemplate | null","groupRoot: TemplateGroupRoot","editor: Editor","templateModel: TemplatePopupModel","event: KeyboardEvent","event: CustomEvent<{ range: Range | null }>","lang: LanguageViewModel","lang","vnode: Vnode<KnowledgebaseListEntryAttrs>","attrs: KnowledgeBaseEntryViewAttrs","event: MouseEvent","entry: KnowledgeBaseEntry","event: Event","stream","model: KnowledgeBaseModel","attrs: KnowledgebaseDialogContentAttrs","entry: KnowledgeBaseEntry","knowledgeBase: KnowledgeBaseModel","templateModel: TemplatePopupModel","editor: Editor","knowledgebaseAttrs: KnowledgebaseDialogContentAttrs","attrs: KnowledgebaseDialogContentAttrs","isDialogVisible: Stream<boolean>","entry: KnowledgeBaseEntry","model: KnowledgeBaseModel","entryToEdit: KnowledgeBaseEntry | null","groupRoot: TemplateGroupRoot","entry1: KnowledgeBaseEntry","entry2: KnowledgeBaseEntry","eventController: EventController","entityClient: EntityClient","userController: UserController","newGroupInstances: TemplateGroupInstance[]","entry: KnowledgeBaseEntry","template: EmailTemplate","emailContent: string","input: string","action: string","keyword: string","templateId: IdTuple","instance","updates: ReadonlyArray<EntityUpdateData>","templateGroups: Array<TemplateGroupInstance>","vnode: Vnode<CounterBadgeAttrs>","vnode: Vnode<MinimizedEditorOverlayAttrs>","updates: ReadonlyArray<EntityUpdateData>","eventOwnerGroupId: Id","minimizedEditor: MinimizedEditor","viewModel: MinimizedMailEditorViewModel","saveStatus: SaveStatus","dialog: Dialog","sendMailModel: SendMailModel","viewModel: MinimizedMailEditorViewModel","eventController: EventController","dispose: () => void","saveStatus: Stream<SaveStatus>","closeOverlayFunction: () => void","minimizedEditor: MinimizedEditor","model: SendMailModel","doBlockExternalContent: boolean","doFocusEditorOnLoad: boolean","dialog: lazy<Dialog>","templateModel: TemplatePopupModel | null","knowledgeBaseInjection: (editor: Editor) => Promise<DialogInjectionRightAttrs<KnowledgebaseDialogContentAttrs> | null>","search: RecipientsSearchModel","alwaysBlockExternalContent: boolean","vnode: Vnode<MailEditorAttrs>","shortcuts: Shortcut[]","cid: string","confidentialButtonAttrs: ToggleButtonAttrs","attachFilesButtonAttrs: IconButtonAttrs","subjectFieldAttrs: TextFieldAttrs","editCustomNotificationMailAttrs: IconButtonAttrs | null","e: MouseEvent","ev: DragEvent","selection: string","vnode","v: string","a","attrs: MailEditorAttrs","showButton: BannerButtonAttrs","status: ContentBlockingStatus","knowledgeBaseInjection: DialogInjectionRightAttrs<KnowledgebaseDialogContentAttrs>","event: Event","rect: DOMRect","files: ReadonlyArray<DataFile | FileReference>","field: RecipientField","fieldText: Stream<string>","recipient: ResolvableRecipient","contactElementId: Id","contactListId: string","id: IdTuple","contact: Contact","contextButtons: Array<DropdownChildAttrs>","contactListId: Id","domElement: HTMLElement","fadein: boolean","dialog: Dialog","mailEditorAttrs: MailEditorAttrs","showProgress: boolean","disposables: { dispose: () => unknown }[]","headerBarAttrs: DialogHeaderBarAttrs","editor: Editor","mailboxDetails: MailboxDetail","currentStatus: boolean","e: unknown","args: InitAsResponseArgs","blockExternalContent: boolean","inlineImages: InlineImages","mailboxDetails?: MailboxDetail","mail: Mail","mailDetails: MailDetails","attachments: TutanotaFile[]","mailtoUrl: string","confidential: boolean","dataFiles: Attachment[]","recipients: Recipients","subject: string","bodyText: string","attachments?: ReadonlyArray<Attachment>","confidential?: boolean","senderMailAddress?: string","initialChangedState?: boolean","referralLink: string","link: string","mailboxDetails: MailboxDetail | null | undefined"],"sources":["../../src/mail-app/mail/editor/MailEditorViewModel.ts","../../src/mail-app/templates/view/TemplateConstants.ts","../../src/mail-app/templates/view/TemplatePopupResultRow.ts","../../src/mail-app/templates/view/TemplateExpander.ts","../../src/mail-app/templates/view/TemplateSearchBar.ts","../../src/mail-app/templates/TemplateGroupUtils.ts","../../src/common/gui/ScrollSelectList.ts","../../src/mail-app/templates/view/TemplatePopup.ts","../../src/mail-app/templates/view/TemplateShortcutListener.ts","../../src/mail-app/knowledgebase/view/KnowledgeBaseListEntry.ts","../../src/mail-app/knowledgebase/view/KnowledgeBaseEntryView.ts","../../src/mail-app/knowledgebase/view/KnowledgeBaseDialogContent.ts","../../src/mail-app/knowledgebase/view/KnowledgeBaseDialog.ts","../../src/mail-app/knowledgebase/model/KnowledgeBaseModel.ts","../../src/common/gui/base/CounterBadge.ts","../../src/mail-app/mail/view/MinimizedEditorOverlay.ts","../../src/mail-app/mail/view/MinimizedMailEditorOverlay.ts","../../src/mail-app/mail/editor/MailEditor.ts"],"sourcesContent":["import m from \"mithril\"\nimport type { Attachment } from \"../../../common/mailFunctionality/SendMailModel.js\"\nimport { SendMailModel } from \"../../../common/mailFunctionality/SendMailModel.js\"\nimport { debounce, findAllAndRemove, isNotNull, ofClass, remove } from \"@tutao/tutanota-utils\"\nimport { Mode } from \"../../../common/api/common/Env\"\nimport { PermissionError } from \"../../../common/api/common/error/PermissionError\"\nimport { Dialog } from \"../../../common/gui/base/Dialog\"\nimport { FileNotFoundError } from \"../../../common/api/common/error/FileNotFoundError\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport { FileOpenError } from \"../../../common/api/common/error/FileOpenError\"\nimport { UserError } from \"../../../common/api/main/UserError\"\nimport { showUserError } from \"../../../common/misc/ErrorHandlerImpl\"\nimport { locator } from \"../../../common/api/main/CommonLocator\"\nimport { FileReference, isDataFile, isFileReference, isTutanotaFile } from \"../../../common/api/common/utils/FileUtils\"\nimport { DataFile } from \"../../../common/api/common/DataFile\"\nimport { showFileChooser } from \"../../../common/file/FileController.js\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError.js\"\nimport { AttachmentBubbleAttrs, AttachmentType } from \"../../../common/gui/AttachmentBubble.js\"\n\nexport async function chooseAndAttachFile(\n\tmodel: SendMailModel,\n\tboundingRect: ClientRect,\n\tfileTypes?: Array<string>,\n): Promise<ReadonlyArray<DataFile | FileReference> | void> {\n\tboundingRect.height = Math.round(boundingRect.height)\n\tboundingRect.width = Math.round(boundingRect.width)\n\tboundingRect.x = Math.round(boundingRect.x)\n\tboundingRect.y = Math.round(boundingRect.y)\n\ttry {\n\t\tconst files = await showFileChooserForAttachments(boundingRect, fileTypes)\n\t\tif (!files || files.length === 0) return\n\t\tswitch (env.mode) {\n\t\t\tcase Mode.App:\n\t\t\t\t// we have file refs and want to keep them\n\t\t\t\tmodel.attachFiles(files)\n\t\t\t\treturn files\n\t\t\tcase Mode.Desktop: {\n\t\t\t\t// this is important for the desktop client so it can attach them as inline images. // we have file refs and want to read them.\n\t\t\t\tconst dataFiles: Array<DataFile> = (\n\t\t\t\t\tawait Promise.all((files as Array<FileReference>).map(async (f) => locator.fileApp.readDataFile(f.location)))\n\t\t\t\t).filter(isNotNull)\n\t\t\t\tmodel.attachFiles(dataFiles)\n\t\t\t\treturn dataFiles\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\t// we have data files and want to keep them\n\t\t\t\tmodel.attachFiles(files)\n\t\t\t\treturn files\n\t\t}\n\t} catch (e) {\n\t\tif (e instanceof UserError) {\n\t\t\tawait showUserError(e)\n\t\t} else {\n\t\t\tconst msg = e.message || \"unknown error\"\n\t\t\tconsole.error(\"could not attach files:\", msg)\n\t\t}\n\t}\n}\n\nexport function showFileChooserForAttachments(boundingRect: ClientRect, fileTypes?: Array<string>): Promise<ReadonlyArray<FileReference | DataFile> | void> {\n\tconst fileSelector = [Mode.App, Mode.Desktop].includes(env.mode)\n\t\t? locator.fileApp.openFileChooser(boundingRect, fileTypes)\n\t\t: showFileChooser(true, fileTypes)\n\treturn fileSelector\n\t\t.catch(\n\t\t\tofClass(PermissionError, () => {\n\t\t\t\tDialog.message(\"fileAccessDeniedMobile_msg\")\n\t\t\t}),\n\t\t)\n\t\t.catch(\n\t\t\tofClass(FileNotFoundError, () => {\n\t\t\t\tDialog.message(\"couldNotAttachFile_msg\")\n\t\t\t}),\n\t\t)\n}\n\nexport function createAttachmentBubbleAttrs(model: SendMailModel, inlineImageElements: Array<HTMLElement>): Array<AttachmentBubbleAttrs> {\n\treturn model.getAttachments().map((attachment) => ({\n\t\tattachment,\n\t\topen: null,\n\t\tdownload: () => _downloadAttachment(attachment),\n\t\tremove: () => {\n\t\t\tmodel.removeAttachment(attachment)\n\n\t\t\t// If an attachment has a cid it means it could be in the editor's inline images too\n\t\t\tif (attachment.cid) {\n\t\t\t\tconst imageElement = inlineImageElements.find((e) => e.getAttribute(\"cid\") === attachment.cid)\n\n\t\t\t\tif (imageElement) {\n\t\t\t\t\timageElement.remove()\n\t\t\t\t\tremove(inlineImageElements, imageElement)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tm.redraw()\n\t\t},\n\t\tfileImport: null,\n\t\ttype: AttachmentType.GENERIC,\n\t}))\n}\n\nasync function _downloadAttachment(attachment: Attachment) {\n\ttry {\n\t\tif (isFileReference(attachment)) {\n\t\t\tawait locator.fileApp.open(attachment)\n\t\t} else if (isDataFile(attachment)) {\n\t\t\tawait locator.fileController.saveDataFile(attachment)\n\t\t} else if (isTutanotaFile(attachment)) {\n\t\t\tawait locator.fileController.download(attachment)\n\t\t} else {\n\t\t\tthrow new ProgrammingError(\"attachment is neither reference, datafile nor tutanotafile!\")\n\t\t}\n\t} catch (e) {\n\t\tif (e instanceof FileOpenError) {\n\t\t\treturn Dialog.message(\"canNotOpenFileOnDevice_msg\")\n\t\t} else {\n\t\t\tconst msg = e.message || \"unknown error\"\n\t\t\tconsole.error(\"could not open file:\", msg)\n\t\t\treturn Dialog.message(\"errorDuringFileOpen_msg\")\n\t\t}\n\t}\n}\n\nexport const cleanupInlineAttachments: (arg0: HTMLElement, arg1: Array<HTMLElement>, arg2: Array<Attachment>) => void = debounce(\n\t50,\n\t(domElement: HTMLElement, inlineImageElements: Array<HTMLElement>, attachments: Array<Attachment>) => {\n\t\t// Previously we replied on subtree option of MutationObserver to receive info when nested child is removed.\n\t\t// It works but it doesn't work if the parent of the nested child is removed, we would have to go over each mutation\n\t\t// and check each descendant and if it's an image with CID or not.\n\t\t// It's easier and faster to just go over each inline image that we know about. It's more bookkeeping but it's easier\n\t\t// code which touches less dome.\n\t\t//\n\t\t// Alternative would be observe the parent of each inline image but that's more complexity and we need to take care of\n\t\t// new (just inserted) inline images and also assign listener there.\n\t\t// Doing this check instead of relying on mutations also helps with the case when node is removed but inserted again\n\t\t// briefly, e.g. if some text is inserted before/after the element, Squire would put it into another diff and this\n\t\t// means removal + insertion.\n\t\tconst elementsToRemove: HTMLElement[] = []\n\t\tfor (const inlineImage of inlineImageElements) {\n\t\t\tif (domElement && !domElement.contains(inlineImage)) {\n\t\t\t\tconst cid = inlineImage.getAttribute(\"cid\")\n\t\t\t\tconst attachmentIndex = attachments.findIndex((a) => a.cid === cid)\n\n\t\t\t\tif (attachmentIndex !== -1) {\n\t\t\t\t\tattachments.splice(attachmentIndex, 1)\n\t\t\t\t\telementsToRemove.push(inlineImage)\n\t\t\t\t\tm.redraw()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfindAllAndRemove(inlineImageElements, (imageElement) => elementsToRemove.includes(imageElement))\n\t},\n)\n\nexport function getConfidentialStateMessage(isConfidential: boolean): string {\n\treturn isConfidential ? lang.get(\"confidentialStatus_msg\") : lang.get(\"nonConfidentialStatus_msg\")\n}\n","export const TEMPLATE_POPUP_HEIGHT = 340\nexport const TEMPLATE_POPUP_TWO_COLUMN_MIN_WIDTH = 600\nexport const TEMPLATE_LIST_ENTRY_HEIGHT = 47\nexport const TEMPLATE_LIST_ENTRY_WIDTH = 354\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport { px } from \"../../../common/gui/size\"\nimport type { EmailTemplate } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { TEMPLATE_SHORTCUT_PREFIX } from \"../model/TemplatePopupModel.js\"\nimport { TEMPLATE_LIST_ENTRY_HEIGHT } from \"./TemplateConstants.js\"\n\nexport type TemplateResultRowAttrs = {\n\ttemplate: EmailTemplate\n}\n\n/**\n *   renders one entry of the list in the template popup\n */\nexport class TemplatePopupResultRow implements Component<TemplateResultRowAttrs> {\n\tview(vnode: Vnode<TemplateResultRowAttrs>): Children {\n\t\tconst { title, tag } = vnode.attrs.template\n\t\treturn m(\n\t\t\t\".flex.flex-column.overflow-hidden.full-width.ml-s\",\n\t\t\t{\n\t\t\t\tstyle: {\n\t\t\t\t\theight: px(TEMPLATE_LIST_ENTRY_HEIGHT),\n\t\t\t\t},\n\t\t\t\t// this title is for the hover text\n\t\t\t\ttitle: title,\n\t\t\t},\n\t\t\t[\n\t\t\t\t// marginLeft 4px because border-radius of tag has margin of 4px\n\t\t\t\tm(\n\t\t\t\t\t\".text-ellipsis.smaller\",\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tmarginLeft: \"4px\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttitle,\n\t\t\t\t),\n\t\t\t\tm(\".flex.badge-line-height.text-ellipsis\", [\n\t\t\t\t\ttag\n\t\t\t\t\t\t? m(\".small.keyword-bubble-no-padding.pl-s.pr-s.border-radius.no-wrap.small.min-content\", TEMPLATE_SHORTCUT_PREFIX + tag.toLowerCase())\n\t\t\t\t\t\t: null,\n\t\t\t\t]),\n\t\t\t],\n\t\t)\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport { px, size } from \"../../../common/gui/size\"\nimport { Keys } from \"../../../common/api/common/TutanotaConstants\"\nimport { TemplatePopupModel } from \"../model/TemplatePopupModel.js\"\nimport { isKeyPressed } from \"../../../common/misc/KeyManager\"\nimport type { EmailTemplate } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { TEMPLATE_POPUP_HEIGHT } from \"./TemplateConstants.js\"\nimport { memoized } from \"@tutao/tutanota-utils\"\nimport { htmlSanitizer } from \"../../../common/misc/HtmlSanitizer.js\"\nimport { theme } from \"../../../common/gui/theme.js\"\n\n/**\n * TemplateExpander is the right side that is rendered within the Popup. Consists of Dropdown, Content and Button.\n * The Popup handles whether the Expander should be rendered or not, depending on available width-space.\n */\nexport type TemplateExpanderAttrs = {\n\ttemplate: EmailTemplate\n\tmodel: TemplatePopupModel\n}\n\nexport class TemplateExpander implements Component<TemplateExpanderAttrs> {\n\tprivate readonly sanitizedText = memoized(\n\t\t(text: string) =>\n\t\t\thtmlSanitizer.sanitizeHTML(text, {\n\t\t\t\tblockExternalContent: false,\n\t\t\t\tallowRelativeLinks: true,\n\t\t\t}).html,\n\t)\n\n\tview({ attrs }: Vnode<TemplateExpanderAttrs>): Children {\n\t\tconst { model, template } = attrs\n\t\tconst selectedContent = model.getSelectedContent()\n\t\treturn m(\n\t\t\t\".flex.flex-column.flex-grow.scroll.ml-s\",\n\t\t\t{\n\t\t\t\tstyle: {\n\t\t\t\t\t// maxHeight has to be set, because otherwise the content would overflow outside the flexbox (-44 because of header height)\n\t\t\t\t\tmaxHeight: px(TEMPLATE_POPUP_HEIGHT - size.button_height),\n\t\t\t\t},\n\t\t\t\tonkeydown: (e: KeyboardEvent) => {\n\t\t\t\t\tif (isKeyPressed(e.key, Keys.TAB)) {\n\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\t[\n\t\t\t\tm(\n\t\t\t\t\t\".text-break.smaller.b.text-center\",\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\"border-bottom\": `1px solid ${theme.content_border}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttemplate.title,\n\t\t\t\t),\n\t\t\t\tm(\".text-break.flex-grow.pr.overflow-y-visible.pt\", selectedContent ? m.trust(this.sanitizedText(selectedContent.text)) : null),\n\t\t\t],\n\t\t)\n\t}\n}\n","import m, { Children, ClassComponent, Vnode } from \"mithril\"\nimport type { MaybeTranslation } from \"../../../common/misc/LanguageViewModel\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport { inputLineHeight, px } from \"../../../common/gui/size\"\nimport { keyboardEventToKeyPress, keyHandler } from \"../../../common/misc/KeyManager\"\nimport { theme } from \"../../../common/gui/theme\"\nimport { assertNotNull } from \"@tutao/tutanota-utils\"\nimport Stream from \"mithril/stream\"\n\nexport type TemplateSearchBarAttrs = {\n\tvalue: Stream<string>\n\tplaceholder?: MaybeTranslation\n\toninput?: (value: string, input: HTMLInputElement) => unknown\n\tkeyHandler?: keyHandler\n}\n\nexport class TemplateSearchBar implements ClassComponent<TemplateSearchBarAttrs> {\n\tdomInput: HTMLInputElement | null = null\n\n\tview(vnode: Vnode<TemplateSearchBarAttrs>): Children {\n\t\tconst a = vnode.attrs\n\t\treturn m(\n\t\t\t\".inputWrapper.pt-xs.pb-xs\",\n\t\t\t{\n\t\t\t\tstyle: {\n\t\t\t\t\t\"border-bottom\": `1px solid ${theme.content_border}`,\n\t\t\t\t},\n\t\t\t},\n\t\t\tthis._getInputField(a),\n\t\t)\n\t}\n\n\t_getInputField(a: TemplateSearchBarAttrs): Children {\n\t\treturn m(\"input.input\", {\n\t\t\tplaceholder: a.placeholder && lang.getTranslationText(a.placeholder),\n\t\t\toncreate: (vnode) => {\n\t\t\t\tthis.domInput = vnode.dom as HTMLInputElement\n\t\t\t\tthis.domInput.value = a.value()\n\t\t\t\tthis.domInput.focus()\n\t\t\t},\n\t\t\tonkeydown: (e: KeyboardEvent) => {\n\t\t\t\tconst key = keyboardEventToKeyPress(e)\n\t\t\t\treturn a.keyHandler != null ? a.keyHandler(key) : true\n\t\t\t},\n\t\t\toninput: () => {\n\t\t\t\tconst domInput = assertNotNull(this.domInput)\n\t\t\t\ta.value(domInput.value)\n\t\t\t\ta.oninput?.(domInput.value, domInput)\n\t\t\t},\n\t\t\tstyle: {\n\t\t\t\tlineHeight: px(inputLineHeight),\n\t\t\t},\n\t\t})\n\t}\n}\n","import type { TemplateGroupRoot } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { TemplateGroupRootTypeRef } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { showPlanUpgradeRequiredDialog } from \"../../common/misc/SubscriptionDialogs\"\nimport { locator } from \"../../common/api/main/CommonLocator\"\nimport { FeatureType } from \"../../common/api/common/TutanotaConstants\"\nimport { Dialog } from \"../../common/gui/base/Dialog.js\"\nimport { lang } from \"../../common/misc/LanguageViewModel.js\"\nimport { isCustomizationEnabledForCustomer } from \"../../common/api/common/utils/CustomerUtils.js\"\n\n/**\n * @return True if the group has been created.\n */\nexport async function createInitialTemplateListIfAllowed(): Promise<TemplateGroupRoot | null> {\n\tconst userController = locator.logins.getUserController()\n\tconst customer = await userController.loadCustomer()\n\tconst { getAvailablePlansWithTemplates } = await import(\"../../common/subscription/SubscriptionUtils.js\")\n\tlet allowed = (await userController.getPlanConfig()).templates || isCustomizationEnabledForCustomer(customer, FeatureType.BusinessFeatureEnabled)\n\tif (!allowed) {\n\t\tif (userController.isGlobalAdmin()) {\n\t\t\tallowed = await showPlanUpgradeRequiredDialog(await getAvailablePlansWithTemplates())\n\t\t} else {\n\t\t\tDialog.message(\"contactAdmin_msg\")\n\t\t}\n\t}\n\n\tif (allowed) {\n\t\tconst groupId = await locator.groupManagementFacade.createTemplateGroup(\"\")\n\t\treturn locator.entityClient.load<TemplateGroupRoot>(TemplateGroupRootTypeRef, groupId)\n\t} else {\n\t\treturn null\n\t}\n}\n","import m, { Children, ClassComponent, Component, CVnode, CVnodeDOM, Vnode, VnodeDOM } from \"mithril\"\nimport type { TranslationKey } from \"../misc/LanguageViewModel\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport { Icon } from \"./base/Icon\"\nimport { Icons } from \"./base/icons/Icons\"\nimport type { MaybeLazy } from \"@tutao/tutanota-utils\"\nimport { resolveMaybeLazy } from \"@tutao/tutanota-utils\"\n\nexport type ScrollSelectListAttrs<T> = {\n\titems: ReadonlyArray<T>\n\tselectedItem: T | null\n\tonItemSelected: (item: T) => unknown\n\temptyListMessage: MaybeLazy<TranslationKey>\n\twidth: number\n\trenderItem: (item: T) => Children\n\tonItemDoubleClicked: (item: T) => unknown\n}\n\nexport class ScrollSelectList<T> implements ClassComponent<ScrollSelectListAttrs<T>> {\n\tprivate selectedItem: T | null = null\n\n\tview(vnode: CVnode<ScrollSelectListAttrs<T>>): Children {\n\t\tconst a = vnode.attrs\n\t\treturn m(\n\t\t\t\".flex.flex-column.scroll-no-overlay\",\n\t\t\ta.items.length > 0\n\t\t\t\t? a.items.map((item) => this.renderRow(item, vnode))\n\t\t\t\t: m(\".row-selected.text-center.pt\", lang.get(resolveMaybeLazy(a.emptyListMessage))),\n\t\t)\n\t}\n\n\tonupdate(vnode: CVnodeDOM<ScrollSelectListAttrs<T>>) {\n\t\tconst newSelectedItem = vnode.attrs.selectedItem\n\n\t\tif (newSelectedItem !== this.selectedItem) {\n\t\t\tthis._onSelectionChanged(newSelectedItem, vnode.attrs.items, vnode.dom as HTMLElement)\n\t\t\t// Ensures that redraw happens after selected item changed this guarantess that the selected item is focused correctly.\n\t\t\t// Selecting the correct item in the list requires that the (possible filtered) list needs render first and then we\n\t\t\t// can scroll to the new selected item. Therefore we call onSelectionChange in onupdate callback.\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\trenderRow(item: T, vnode: Vnode<ScrollSelectListAttrs<T>>): Children {\n\t\tconst a = vnode.attrs\n\t\tconst isSelected = a.selectedItem === item\n\t\treturn m(\n\t\t\t\".flex.flex-column.click\",\n\t\t\t{\n\t\t\t\tstyle: {\n\t\t\t\t\tmaxWidth: a.width,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[\n\t\t\t\tm(\n\t\t\t\t\t\".flex.template-list-row\" + (isSelected ? \".row-selected\" : \"\"),\n\t\t\t\t\t{\n\t\t\t\t\t\tonclick: (e: MouseEvent) => {\n\t\t\t\t\t\t\ta.onItemSelected(item)\n\t\t\t\t\t\t\te.stopPropagation()\n\t\t\t\t\t\t},\n\t\t\t\t\t\tondblclick: (e: MouseEvent) => {\n\t\t\t\t\t\t\ta.onItemSelected(item)\n\t\t\t\t\t\t\ta.onItemDoubleClicked(item)\n\t\t\t\t\t\t\te.stopPropagation()\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t[\n\t\t\t\t\t\ta.renderItem(item),\n\t\t\t\t\t\tisSelected\n\t\t\t\t\t\t\t? m(Icon, {\n\t\t\t\t\t\t\t\t\ticon: Icons.ArrowForward,\n\t\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\t\tmarginTop: \"auto\",\n\t\t\t\t\t\t\t\t\t\tmarginBottom: \"auto\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t: m(\"\", {\n\t\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\t\twidth: \"17.1px\",\n\t\t\t\t\t\t\t\t\t\theight: \"16px\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  }),\n\t\t\t\t\t],\n\t\t\t\t),\n\t\t\t],\n\t\t)\n\t}\n\n\t_onSelectionChanged(selectedItem: T | null, items: ReadonlyArray<T>, scrollDom: HTMLElement) {\n\t\tthis.selectedItem = selectedItem\n\t\tif (selectedItem != null) {\n\t\t\tconst selectedIndex = items.indexOf(selectedItem)\n\n\t\t\tif (selectedIndex !== -1) {\n\t\t\t\tconst selectedDomElement = scrollDom.children.item(selectedIndex)\n\n\t\t\t\tif (selectedDomElement) {\n\t\t\t\t\tselectedDomElement.scrollIntoView({\n\t\t\t\t\t\tblock: \"nearest\",\n\t\t\t\t\t\tinline: \"nearest\",\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import m, { Children } from \"mithril\"\nimport type { ModalComponent } from \"../../../common/gui/base/Modal\"\nimport { modal } from \"../../../common/gui/base/Modal\"\nimport { px } from \"../../../common/gui/size\"\nimport type { Shortcut } from \"../../../common/misc/KeyManager\"\nimport { isKeyPressed } from \"../../../common/misc/KeyManager\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { Keys, ShareCapability } from \"../../../common/api/common/TutanotaConstants\"\nimport { TemplatePopupResultRow } from \"./TemplatePopupResultRow.js\"\nimport { Icons } from \"../../../common/gui/base/icons/Icons\"\nimport { TemplateExpander } from \"./TemplateExpander.js\"\nimport type { LanguageCode } from \"../../../common/misc/LanguageViewModel\"\nimport { lang, languageByCode } from \"../../../common/misc/LanguageViewModel\"\nimport type { windowSizeListener } from \"../../../common/misc/WindowFacade\"\nimport { windowFacade } from \"../../../common/misc/WindowFacade\"\nimport type { EmailTemplate, TemplateGroupRoot } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { TemplateGroupRootTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport type { ButtonAttrs } from \"../../../common/gui/base/Button.js\"\nimport { Button, ButtonColor, ButtonType } from \"../../../common/gui/base/Button.js\"\nimport { SELECT_NEXT_TEMPLATE, SELECT_PREV_TEMPLATE, TEMPLATE_SHORTCUT_PREFIX, TemplatePopupModel } from \"../model/TemplatePopupModel.js\"\nimport { attachDropdown, DomRectReadOnlyPolyfilled, PosRect } from \"../../../common/gui/base/Dropdown.js\"\nimport { debounce, downcast, neverNull } from \"@tutao/tutanota-utils\"\nimport { locator } from \"../../../common/api/main/CommonLocator\"\nimport { TemplateSearchBar } from \"./TemplateSearchBar.js\"\nimport { Editor } from \"../../../common/gui/editor/Editor\"\nimport { getSharedGroupName, hasCapabilityOnGroup } from \"../../../common/sharing/GroupUtils\"\nimport { createInitialTemplateListIfAllowed } from \"../TemplateGroupUtils.js\"\nimport { getConfirmation } from \"../../../common/gui/base/GuiUtils\"\nimport { ScrollSelectList } from \"../../../common/gui/ScrollSelectList\"\nimport { IconButton, IconButtonAttrs } from \"../../../common/gui/base/IconButton.js\"\nimport { TEMPLATE_LIST_ENTRY_WIDTH, TEMPLATE_POPUP_HEIGHT, TEMPLATE_POPUP_TWO_COLUMN_MIN_WIDTH } from \"./TemplateConstants.js\"\n\n/**\n *\tCreates a Modal/Popup that allows user to paste templates directly into the MailEditor.\n *\tAlso allows user to change desired language when pasting.\n */\nexport function showTemplatePopupInEditor(templateModel: TemplatePopupModel, editor: Editor, template: EmailTemplate | null, highlightedText: string) {\n\tconst initialSearchString = template ? TEMPLATE_SHORTCUT_PREFIX + template.tag : highlightedText\n\tconst cursorRect = editor.getCursorPosition()\n\tconst editorRect = editor.getDOM().getBoundingClientRect()\n\n\tconst onSelect = (text: string) => {\n\t\teditor.insertHTML(text)\n\t\teditor.focus()\n\t}\n\n\tlet rect\n\tconst availableHeightBelowCursor = window.innerHeight - cursorRect.bottom\n\tconst popUpHeight = TEMPLATE_POPUP_HEIGHT + 10 // height + 10px offset for space from the bottom of the screen\n\n\t// By default the popup is shown below the cursor. If there is not enough space move the popup above the cursor\n\tconst popUpWidth = editorRect.right - editorRect.left\n\n\tif (availableHeightBelowCursor < popUpHeight) {\n\t\tconst diff = popUpHeight - availableHeightBelowCursor\n\t\trect = new DomRectReadOnlyPolyfilled(editorRect.left, cursorRect.bottom - diff, popUpWidth, cursorRect.height)\n\t} else {\n\t\trect = new DomRectReadOnlyPolyfilled(editorRect.left, cursorRect.bottom, popUpWidth, cursorRect.height)\n\t}\n\n\tconst popup = new TemplatePopup(templateModel, rect, onSelect, initialSearchString, () => editor.focus())\n\ttemplateModel.search(initialSearchString)\n\tpopup.show()\n}\n\nexport class TemplatePopup implements ModalComponent {\n\tprivate _rect: PosRect\n\tprivate _shortcuts: Shortcut[]\n\tprivate _onSelect: (_: string) => void\n\tprivate _initialWindowWidth: number\n\tprivate _resizeListener: windowSizeListener\n\tprivate _redrawStream: Stream<any>\n\tprivate readonly _templateModel: TemplatePopupModel\n\tprivate readonly _searchBarValue: Stream<string>\n\tprivate _selectTemplateButtonAttrs: ButtonAttrs\n\tprivate _inputDom: HTMLElement | null = null\n\tprivate _debounceFilter: (_: string) => void\n\tprivate focusedBeforeShown: HTMLElement | null = null\n\n\tconstructor(\n\t\ttemplateModel: TemplatePopupModel,\n\t\trect: PosRect,\n\t\tonSelect: (arg0: string) => void,\n\t\tinitialSearchString: string,\n\t\tprivate readonly restoreEditorFocus?: () => void,\n\t) {\n\t\tthis._rect = rect\n\t\tthis._onSelect = onSelect\n\t\tthis._initialWindowWidth = window.innerWidth\n\n\t\tthis._resizeListener = () => {\n\t\t\tthis._close()\n\t\t}\n\n\t\tthis._searchBarValue = stream(initialSearchString)\n\t\tthis._templateModel = templateModel\n\t\tthis._shortcuts = [\n\t\t\t{\n\t\t\t\tkey: Keys.ESC,\n\t\t\t\tenabled: () => true,\n\t\t\t\texec: () => {\n\t\t\t\t\tthis.restoreEditorFocus?.()\n\n\t\t\t\t\tthis._close()\n\n\t\t\t\t\tm.redraw()\n\t\t\t\t},\n\t\t\t\thelp: \"closeTemplate_action\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: Keys.RETURN,\n\t\t\t\tenabled: () => true,\n\t\t\t\texec: () => {\n\t\t\t\t\tconst selectedContent = this._templateModel.getSelectedContent()\n\n\t\t\t\t\tif (selectedContent) {\n\t\t\t\t\t\tthis._onSelect(selectedContent.text)\n\n\t\t\t\t\t\tthis._close()\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\thelp: \"insertTemplate_action\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: Keys.UP,\n\t\t\t\tenabled: () => true,\n\t\t\t\texec: () => {\n\t\t\t\t\tthis._templateModel.selectNextTemplate(SELECT_PREV_TEMPLATE)\n\t\t\t\t},\n\t\t\t\thelp: \"selectPreviousTemplate_action\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: Keys.DOWN,\n\t\t\t\tenabled: () => true,\n\t\t\t\texec: () => {\n\t\t\t\t\tthis._templateModel.selectNextTemplate(SELECT_NEXT_TEMPLATE)\n\t\t\t\t},\n\t\t\t\thelp: \"selectNextTemplate_action\",\n\t\t\t},\n\t\t]\n\t\tthis._redrawStream = templateModel.searchResults.map((results) => {\n\t\t\tm.redraw()\n\t\t})\n\t\tthis._selectTemplateButtonAttrs = {\n\t\t\tlabel: \"selectTemplate_action\",\n\t\t\tclick: () => {\n\t\t\t\tconst selected = this._templateModel.getSelectedContent()\n\n\t\t\t\tif (selected) {\n\t\t\t\t\tthis._onSelect(selected.text)\n\n\t\t\t\t\tthis._close()\n\t\t\t\t}\n\t\t\t},\n\t\t\ttype: ButtonType.Primary,\n\t\t}\n\t\tthis._debounceFilter = debounce(200, (value: string) => {\n\t\t\ttemplateModel.search(value)\n\t\t})\n\n\t\tthis._debounceFilter(initialSearchString)\n\t}\n\n\tview: () => Children = () => {\n\t\tconst showTwoColumns = this._isScreenWideEnough()\n\n\t\treturn m(\n\t\t\t\".flex.flex-column.abs.elevated-bg.border-radius.dropdown-shadow\",\n\t\t\t{\n\t\t\t\t// Main Wrapper\n\t\t\t\tstyle: {\n\t\t\t\t\twidth: px(this._rect.width),\n\t\t\t\t\theight: px(TEMPLATE_POPUP_HEIGHT),\n\t\t\t\t\ttop: px(this._rect.top),\n\t\t\t\t\tleft: px(this._rect.left),\n\t\t\t\t},\n\t\t\t\tonclick: (e: MouseEvent) => {\n\t\t\t\t\tthis._inputDom?.focus()\n\n\t\t\t\t\te.stopPropagation()\n\t\t\t\t},\n\t\t\t\toncreate: () => {\n\t\t\t\t\twindowFacade.addResizeListener(this._resizeListener)\n\t\t\t\t},\n\t\t\t\tonremove: () => {\n\t\t\t\t\twindowFacade.removeResizeListener(this._resizeListener)\n\t\t\t\t},\n\t\t\t},\n\t\t\t[\n\t\t\t\tthis._renderHeader(),\n\t\t\t\tm(\".flex.flex-grow.scroll.mb-s\", [\n\t\t\t\t\tm(\n\t\t\t\t\t\t\".flex.flex-column.scroll\" + (showTwoColumns ? \".pr\" : \"\"),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tflex: \"1 1 40%\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis._renderList(),\n\t\t\t\t\t),\n\t\t\t\t\tshowTwoColumns\n\t\t\t\t\t\t? m(\n\t\t\t\t\t\t\t\t\".flex.flex-column.flex-grow-shrink-half\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\t\tflex: \"1 1 60%\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tthis._renderRightColumn(),\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: null,\n\t\t\t\t]),\n\t\t\t],\n\t\t)\n\t}\n\n\t_renderHeader(): Children {\n\t\tconst selectedTemplate = this._templateModel.getSelectedTemplate()\n\n\t\treturn m(\".flex-space-between.center-vertically.pl.pr-s\", [\n\t\t\tm(\".flex-start\", [m(\".flex.center-vertically\", this._renderSearchBar()), this._renderAddButton()]),\n\t\t\tm(\".flex-end\", [\n\t\t\t\tselectedTemplate\n\t\t\t\t\t? this._renderEditButtons(selectedTemplate) // Right header wrapper\n\t\t\t\t\t: null,\n\t\t\t]),\n\t\t])\n\t}\n\n\t_renderSearchBar: () => Children = () => {\n\t\treturn m(TemplateSearchBar, {\n\t\t\tvalue: this._searchBarValue,\n\t\t\tplaceholder: \"filter_label\",\n\t\t\tkeyHandler: (keyPress) => {\n\t\t\t\tif (isKeyPressed(keyPress.key, Keys.DOWN, Keys.UP)) {\n\t\t\t\t\t// This duplicates the listener set in this._shortcuts\n\t\t\t\t\t// because the input consumes the event\n\t\t\t\t\tthis._templateModel.selectNextTemplate(isKeyPressed(keyPress.key, Keys.UP) ? SELECT_PREV_TEMPLATE : SELECT_NEXT_TEMPLATE)\n\n\t\t\t\t\treturn false\n\t\t\t\t} else {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t},\n\t\t\toninput: (value) => {\n\t\t\t\tthis._debounceFilter(value)\n\t\t\t},\n\t\t\toncreate: (vnode) => {\n\t\t\t\tthis._inputDom = vnode.dom.firstElementChild as HTMLElement // firstElementChild is the input field of the input wrapper\n\t\t\t},\n\t\t})\n\t}\n\n\t_renderAddButton(): Children {\n\t\tconst attrs = this._createAddButtonAttributes()\n\n\t\treturn m(\n\t\t\t\"\",\n\t\t\t{\n\t\t\t\tonkeydown: (e: KeyboardEvent) => {\n\t\t\t\t\t// prevents tabbing into the background of the modal\n\t\t\t\t\tif (isKeyPressed(e.key, Keys.TAB) && !this._templateModel.getSelectedTemplate()) {\n\t\t\t\t\t\tthis._inputDom?.focus()\n\n\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tattrs ? m(IconButton, attrs as IconButtonAttrs) : null,\n\t\t)\n\t}\n\n\t_createAddButtonAttributes(): IconButtonAttrs | null {\n\t\tconst templateGroupInstances = this._templateModel.getTemplateGroupInstances()\n\n\t\tconst writeableGroups = templateGroupInstances.filter((instance) =>\n\t\t\thasCapabilityOnGroup(locator.logins.getUserController().user, instance.group, ShareCapability.Write),\n\t\t)\n\n\t\tif (templateGroupInstances.length === 0) {\n\t\t\treturn {\n\t\t\t\ttitle: \"createTemplate_action\",\n\t\t\t\tclick: () => {\n\t\t\t\t\tcreateInitialTemplateListIfAllowed().then((groupRoot) => {\n\t\t\t\t\t\tif (groupRoot) {\n\t\t\t\t\t\t\tthis.showTemplateEditor(null, groupRoot)\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\ticon: Icons.Add,\n\t\t\t\tcolors: ButtonColor.DrawerNav,\n\t\t\t}\n\t\t} else if (writeableGroups.length === 1) {\n\t\t\treturn {\n\t\t\t\ttitle: \"createTemplate_action\",\n\t\t\t\tclick: () => this.showTemplateEditor(null, writeableGroups[0].groupRoot),\n\t\t\t\ticon: Icons.Add,\n\t\t\t\tcolors: ButtonColor.DrawerNav,\n\t\t\t}\n\t\t} else if (writeableGroups.length > 1) {\n\t\t\treturn attachDropdown({\n\t\t\t\tmainButtonAttrs: {\n\t\t\t\t\ttitle: \"createTemplate_action\",\n\t\t\t\t\ticon: Icons.Add,\n\t\t\t\t\tcolors: ButtonColor.DrawerNav,\n\t\t\t\t},\n\t\t\t\tchildAttrs: () =>\n\t\t\t\t\twriteableGroups.map((groupInstances) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tlabel: lang.makeTranslation(\"group_name\", getSharedGroupName(groupInstances.groupInfo, locator.logins.getUserController(), true)),\n\t\t\t\t\t\t\tclick: () => this.showTemplateEditor(null, groupInstances.groupRoot),\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t})\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\t_renderEditButtons(selectedTemplate: EmailTemplate): Children {\n\t\tconst selectedContent = this._templateModel.getSelectedContent()\n\n\t\tconst selectedGroup = this._templateModel.getSelectedTemplateGroupInstance()\n\n\t\tconst canEdit = !!selectedGroup && hasCapabilityOnGroup(locator.logins.getUserController().user, selectedGroup.group, ShareCapability.Write)\n\t\treturn [\n\t\t\tm(\".flex.flex-column.justify-center.mr-m\", selectedContent ? m(\"\", lang.get(languageByCode[selectedContent.languageCode].textId)) : \"\"),\n\t\t\tm(\n\t\t\t\tIconButton,\n\t\t\t\tattachDropdown({\n\t\t\t\t\tmainButtonAttrs: {\n\t\t\t\t\t\ttitle: \"chooseLanguage_action\",\n\t\t\t\t\t\ticon: Icons.Language,\n\t\t\t\t\t},\n\t\t\t\t\tchildAttrs: () =>\n\t\t\t\t\t\tselectedTemplate.contents.map((content) => {\n\t\t\t\t\t\t\tconst langCode: LanguageCode = downcast(content.languageCode)\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tlabel: languageByCode[langCode].textId,\n\t\t\t\t\t\t\t\tclick: (e: MouseEvent) => {\n\t\t\t\t\t\t\t\t\te.stopPropagation()\n\t\t\t\t\t\t\t\t\tthis._templateModel.setSelectedContentLanguage(langCode)\n\t\t\t\t\t\t\t\t\tthis._inputDom?.focus()\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t),\n\t\t\tcanEdit\n\t\t\t\t? [\n\t\t\t\t\t\tm(IconButton, {\n\t\t\t\t\t\t\ttitle: \"editTemplate_action\",\n\t\t\t\t\t\t\tclick: () =>\n\t\t\t\t\t\t\t\tlocator.entityClient\n\t\t\t\t\t\t\t\t\t.load(TemplateGroupRootTypeRef, neverNull(selectedTemplate._ownerGroup))\n\t\t\t\t\t\t\t\t\t.then((groupRoot) => this.showTemplateEditor(selectedTemplate, groupRoot)),\n\t\t\t\t\t\t\ticon: Icons.Edit,\n\t\t\t\t\t\t\tcolors: ButtonColor.DrawerNav,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tm(IconButton, {\n\t\t\t\t\t\t\ttitle: \"remove_action\",\n\t\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\t\tgetConfirmation(\"deleteTemplate_msg\").confirmed(() => locator.entityClient.erase(selectedTemplate))\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ticon: Icons.Trash,\n\t\t\t\t\t\t\tcolors: ButtonColor.DrawerNav,\n\t\t\t\t\t\t}),\n\t\t\t\t  ]\n\t\t\t\t: null,\n\t\t\tm(\".pr-s\", m(\".nav-bar-spacer\")),\n\t\t\tm(\n\t\t\t\t\"\",\n\t\t\t\t{\n\t\t\t\t\tonkeydown: (e: KeyboardEvent) => {\n\t\t\t\t\t\t// prevents tabbing into the background of the modal\n\t\t\t\t\t\tif (isKeyPressed(e.key, Keys.TAB)) {\n\t\t\t\t\t\t\tthis._inputDom?.focus()\n\n\t\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tm(Button, this._selectTemplateButtonAttrs),\n\t\t\t),\n\t\t]\n\t}\n\n\t_renderList(): Children {\n\t\treturn m(ScrollSelectList, {\n\t\t\titems: this._templateModel.searchResults(),\n\t\t\tselectedItem: this._templateModel.selectedTemplate(),\n\t\t\tonItemSelected: this._templateModel.selectedTemplate,\n\t\t\temptyListMessage: () => (this._templateModel.isLoaded() ? \"nothingFound_label\" : \"loadingTemplates_label\"),\n\t\t\twidth: TEMPLATE_LIST_ENTRY_WIDTH,\n\t\t\trenderItem: (template: EmailTemplate) =>\n\t\t\t\tm(TemplatePopupResultRow, {\n\t\t\t\t\ttemplate: template,\n\t\t\t\t}),\n\t\t\tonItemDoubleClicked: (_: EmailTemplate) => {\n\t\t\t\tconst selected = this._templateModel.getSelectedContent()\n\n\t\t\t\tif (selected) {\n\t\t\t\t\tthis._onSelect(selected.text)\n\n\t\t\t\t\tthis._close()\n\t\t\t\t}\n\t\t\t},\n\t\t})\n\t}\n\n\t_renderRightColumn(): Children {\n\t\tconst template = this._templateModel.getSelectedTemplate()\n\n\t\tif (template) {\n\t\t\treturn [\n\t\t\t\tm(TemplateExpander, {\n\t\t\t\t\ttemplate: template,\n\t\t\t\t\tmodel: this._templateModel,\n\t\t\t\t}),\n\t\t\t]\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\t_isScreenWideEnough(): boolean {\n\t\treturn window.innerWidth > TEMPLATE_POPUP_TWO_COLUMN_MIN_WIDTH\n\t}\n\n\t_getWindowWidthChange(): number {\n\t\treturn window.innerWidth - this._initialWindowWidth\n\t}\n\n\tshow() {\n\t\tthis.focusedBeforeShown = document.activeElement as HTMLElement\n\t\tmodal.display(this, false)\n\t}\n\n\t_close(): void {\n\t\tmodal.remove(this)\n\t}\n\n\tbackgroundClick(e: MouseEvent): void {\n\t\tthis.restoreEditorFocus?.()\n\t\tthis._close()\n\t}\n\n\thideAnimation(): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n\n\tonClose(): void {\n\t\tthis._redrawStream.end(true)\n\t}\n\n\tshortcuts(): Shortcut[] {\n\t\treturn this._shortcuts\n\t}\n\n\tpopState(e: Event): boolean {\n\t\treturn true\n\t}\n\n\tcallingElement(): HTMLElement | null {\n\t\treturn this.focusedBeforeShown\n\t}\n\n\tshowTemplateEditor(templateToEdit: EmailTemplate | null, groupRoot: TemplateGroupRoot) {\n\t\timport(\"../../settings/TemplateEditor.js\").then((editor) => {\n\t\t\teditor.showTemplateEditor(templateToEdit, groupRoot)\n\t\t})\n\t}\n}\n","import { Editor } from \"../../../common/gui/editor/Editor\"\nimport { isKeyPressed } from \"../../../common/misc/KeyManager\"\nimport { downcast, getFirstOrThrow } from \"@tutao/tutanota-utils\"\nimport { Keys } from \"../../../common/api/common/TutanotaConstants\"\nimport { TEMPLATE_SHORTCUT_PREFIX, TemplatePopupModel } from \"../model/TemplatePopupModel.js\"\nimport { lang, languageByCode, LanguageViewModel } from \"../../../common/misc/LanguageViewModel\"\nimport { Dropdown } from \"../../../common/gui/base/Dropdown.js\"\nimport { modal } from \"../../../common/gui/base/Modal\"\nimport { showTemplatePopupInEditor } from \"./TemplatePopup.js\"\n\nexport function registerTemplateShortcutListener(editor: Editor, templateModel: TemplatePopupModel): TemplateShortcutListener {\n\tconst listener = new TemplateShortcutListener(editor, templateModel, lang)\n\teditor.addEventListener(\"keydown\", (event: KeyboardEvent) => listener.handleKeyDown(event))\n\teditor.addEventListener(\"cursor\", (event: CustomEvent<{ range: Range | null }>) => listener.handleCursorChange(event))\n\treturn listener\n}\n\nclass TemplateShortcutListener {\n\t_currentCursorPosition: Range | null\n\t_editor: Editor\n\t_templateModel: TemplatePopupModel\n\t_lang: LanguageViewModel\n\n\tconstructor(editor: Editor, templateModel: TemplatePopupModel, lang: LanguageViewModel) {\n\t\tthis._editor = editor\n\t\tthis._currentCursorPosition = null\n\t\tthis._templateModel = templateModel\n\t\tthis._lang = lang\n\t}\n\n\t// add this event listener to handle quick selection of templates inside the editor\n\thandleKeyDown(event: KeyboardEvent) {\n\t\tif (isKeyPressed(event.key, Keys.TAB) && this._currentCursorPosition) {\n\t\t\tconst cursorEndPos = this._currentCursorPosition\n\t\t\tconst text = cursorEndPos.startContainer.nodeType === Node.TEXT_NODE ? cursorEndPos.startContainer.textContent ?? \"\" : \"\"\n\t\t\tconst templateShortcutStartIndex = text.lastIndexOf(TEMPLATE_SHORTCUT_PREFIX)\n\t\t\tconst lastWhiteSpaceIndex = text.search(/\\s\\S*$/)\n\n\t\t\tif (\n\t\t\t\ttemplateShortcutStartIndex !== -1 &&\n\t\t\t\ttemplateShortcutStartIndex < cursorEndPos.startOffset &&\n\t\t\t\ttemplateShortcutStartIndex > lastWhiteSpaceIndex\n\t\t\t) {\n\t\t\t\t// stopPropagation & preventDefault to prevent tabbing to \"close\" button or tabbing into background\n\t\t\t\tevent.stopPropagation()\n\t\t\t\tevent.preventDefault()\n\t\t\t\tconst range = document.createRange()\n\t\t\t\trange.setStart(cursorEndPos.startContainer, templateShortcutStartIndex)\n\t\t\t\trange.setEnd(cursorEndPos.startContainer, cursorEndPos.startOffset)\n\n\t\t\t\tthis._editor.setSelection(range)\n\n\t\t\t\t// find and insert template\n\t\t\t\tconst selectedText = this._editor.getSelectedText()\n\n\t\t\t\tconst template = this._templateModel.findTemplateWithTag(selectedText)\n\n\t\t\t\tif (template) {\n\t\t\t\t\tif (template.contents.length > 1) {\n\t\t\t\t\t\t// multiple languages\n\t\t\t\t\t\t// show dropdown to select language\n\t\t\t\t\t\tlet buttons = template.contents.map((content) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tlabel: languageByCode[downcast(content.languageCode)].textId,\n\t\t\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\t\t\tthis._editor.insertHTML(content.text)\n\n\t\t\t\t\t\t\t\t\tthis._editor.focus()\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\tconst dropdown = new Dropdown(() => buttons, 200)\n\t\t\t\t\t\tdropdown.setOrigin(this._editor.getCursorPosition())\n\t\t\t\t\t\tmodal.displayUnique(dropdown, false)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._editor.insertHTML(getFirstOrThrow(template.contents).text)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tshowTemplatePopupInEditor(this._templateModel, this._editor, null, selectedText)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\thandleCursorChange(event: CustomEvent<{ range: Range | null }>) {\n\t\tthis._currentCursorPosition = event.detail.range\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport type { KnowledgeBaseEntry } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { px } from \"../../../common/gui/size.js\"\n\nexport type KnowledgebaseListEntryAttrs = {\n\tentry: KnowledgeBaseEntry\n}\nexport const KNOWLEDGEBASE_LIST_ENTRY_HEIGHT = 50\n\n/**\n *  Renders one list entry of the knowledgeBase\n */\nexport class KnowledgeBaseListEntry implements Component<KnowledgebaseListEntryAttrs> {\n\tview(vnode: Vnode<KnowledgebaseListEntryAttrs>): Children {\n\t\tconst { title, keywords } = vnode.attrs.entry\n\t\treturn m(\n\t\t\t\".flex.flex-column.overflow-hidden.full-width\",\n\t\t\t{\n\t\t\t\tstyle: {\n\t\t\t\t\theight: px(KNOWLEDGEBASE_LIST_ENTRY_HEIGHT),\n\t\t\t\t},\n\t\t\t},\n\t\t\t[\n\t\t\t\tm(\".text-ellipsis.mb-xs.b\", title),\n\t\t\t\tm(\".flex.badge-line-height.text-ellipsis\", [\n\t\t\t\t\tkeywords.map((keyword) => {\n\t\t\t\t\t\treturn m(\".b.small.teamLabel.pl-s.pr-s.border-radius.no-wrap.small.mr-s.min-content\", keyword.keyword)\n\t\t\t\t\t}),\n\t\t\t\t]),\n\t\t\t],\n\t\t)\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport type { KnowledgeBaseEntry } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { TemplateGroupRootTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { memoized, neverNull, noOp, ofClass, startsWith } from \"@tutao/tutanota-utils\"\nimport { htmlSanitizer } from \"../../../common/misc/HtmlSanitizer.js\"\nimport { Icons } from \"../../../common/gui/base/icons/Icons.js\"\nimport { locator } from \"../../../common/api/main/CommonLocator.js\"\nimport { getConfirmation } from \"../../../common/gui/base/GuiUtils.js\"\nimport { NotFoundError } from \"../../../common/api/common/error/RestError.js\"\nimport { IconButton } from \"../../../common/gui/base/IconButton.js\"\n\ntype KnowledgeBaseEntryViewAttrs = {\n\tentry: KnowledgeBaseEntry\n\tonTemplateSelected: (arg0: IdTuple) => unknown\n\treadonly: boolean\n}\n\n/**\n *  Renders one knowledgeBase entry\n */\nexport class KnowledgeBaseEntryView implements Component<KnowledgeBaseEntryViewAttrs> {\n\t_sanitizedEntry: (arg0: KnowledgeBaseEntry) => {\n\t\tcontent: string\n\t}\n\n\tconstructor() {\n\t\tthis._sanitizedEntry = memoized((entry) => {\n\t\t\treturn {\n\t\t\t\tcontent: htmlSanitizer.sanitizeHTML(entry.description, {\n\t\t\t\t\tblockExternalContent: true,\n\t\t\t\t}).html,\n\t\t\t}\n\t\t})\n\t}\n\n\tview({ attrs }: Vnode<KnowledgeBaseEntryViewAttrs>): Children {\n\t\treturn m(\".flex.flex-column\", [this._renderContent(attrs)])\n\t}\n\n\t_renderContent(attrs: KnowledgeBaseEntryViewAttrs): Children {\n\t\tconst { entry, readonly } = attrs\n\t\treturn m(\n\t\t\t\"\",\n\t\t\t{\n\t\t\t\tonclick: (event: MouseEvent) => {\n\t\t\t\t\tthis._handleAnchorClick(event, attrs)\n\t\t\t\t},\n\t\t\t},\n\t\t\t[\n\t\t\t\tm(\n\t\t\t\t\t\".flex.mt-l.center-vertically.selectable\",\n\t\t\t\t\tm(\".h4.text-ellipsis\", entry.title),\n\t\t\t\t\t!readonly ? [m(\".flex.flex-grow.justify-end\", [this.renderEditButton(entry), this.renderRemoveButton(entry)])] : null,\n\t\t\t\t),\n\t\t\t\tm(\"\", [\n\t\t\t\t\tm(\".mt-s.flex.mt-s.wrap\", [\n\t\t\t\t\t\tentry.keywords.map((entryKeyword) => {\n\t\t\t\t\t\t\treturn m(\".keyword-bubble.selectable\", entryKeyword.keyword)\n\t\t\t\t\t\t}),\n\t\t\t\t\t]),\n\t\t\t\t\tm(\".flex.flex-column.mt-s\", [m(\".editor-border.text-break.selectable\", m.trust(this._sanitizedEntry(entry).content))]),\n\t\t\t\t]),\n\t\t\t],\n\t\t)\n\t}\n\n\tprivate renderRemoveButton(entry: KnowledgeBaseEntry) {\n\t\treturn m(IconButton, {\n\t\t\ttitle: \"remove_action\",\n\t\t\ticon: Icons.Trash,\n\t\t\tclick: () => {\n\t\t\t\tgetConfirmation(\"deleteEntryConfirm_msg\").confirmed(() => locator.entityClient.erase(entry).catch(ofClass(NotFoundError, noOp)))\n\t\t\t},\n\t\t})\n\t}\n\n\tprivate renderEditButton(entry: KnowledgeBaseEntry) {\n\t\treturn m(IconButton, {\n\t\t\ttitle: \"edit_action\",\n\t\t\ticon: Icons.Edit,\n\t\t\tclick: () => {\n\t\t\t\timport(\"../../settings/KnowledgeBaseEditor.js\").then(({ showKnowledgeBaseEditor }) => {\n\t\t\t\t\tlocator.entityClient.load(TemplateGroupRootTypeRef, neverNull(entry._ownerGroup)).then((groupRoot) => {\n\t\t\t\t\t\tshowKnowledgeBaseEditor(entry, groupRoot)\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t},\n\t\t})\n\t}\n\n\t_handleAnchorClick(event: Event, attrs: KnowledgeBaseEntryViewAttrs): void {\n\t\tlet target = event.target as any\n\n\t\tif (target && target.closest) {\n\t\t\tlet anchorElement = target.closest(\"a\")\n\n\t\t\tif (anchorElement && startsWith(anchorElement.href, \"tutatemplate:\")) {\n\t\t\t\tevent.preventDefault()\n\t\t\t\tconst [listId, elementId] = new URL(anchorElement.href).pathname.split(\"/\")\n\t\t\t\tattrs.onTemplateSelected([listId, elementId])\n\t\t\t}\n\t\t}\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport { KnowledgeBaseModel } from \"../model/KnowledgeBaseModel.js\"\nimport type { EmailTemplate, KnowledgeBaseEntry } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { KNOWLEDGEBASE_LIST_ENTRY_HEIGHT, KnowledgeBaseListEntry } from \"./KnowledgeBaseListEntry.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel.js\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { KnowledgeBaseEntryView } from \"./KnowledgeBaseEntryView.js\"\nimport { NotFoundError } from \"../../../common/api/common/error/RestError.js\"\nimport { Dialog } from \"../../../common/gui/base/Dialog.js\"\nimport { TextField } from \"../../../common/gui/base/TextField.js\"\nimport { makeListSelectionChangedScrollHandler } from \"../../../common/gui/base/GuiUtils.js\"\nimport { ofClass } from \"@tutao/tutanota-utils\"\n\nexport type KnowledgebaseDialogContentAttrs = {\n\treadonly onTemplateSelect: (arg0: EmailTemplate) => void\n\treadonly model: KnowledgeBaseModel\n}\n\n/**\n *  Renders the SearchBar and the pages (list, entry, template) of the knowledgeBase besides the MailEditor\n */\nexport class KnowledgeBaseDialogContent implements Component<KnowledgebaseDialogContentAttrs> {\n\tprivate _streams: Array<Stream<any>>\n\tprivate filterValue: string = \"\"\n\tprivate _selectionChangedListener!: Stream<void>\n\n\tconstructor() {\n\t\tthis._streams = []\n\t}\n\n\toncreate({ attrs }: Vnode<KnowledgebaseDialogContentAttrs>) {\n\t\tconst { model } = attrs\n\n\t\tthis._streams.push(\n\t\t\tstream.combine(() => {\n\t\t\t\tm.redraw()\n\t\t\t}, [model.selectedEntry, model.filteredEntries]),\n\t\t)\n\t}\n\n\tonremove() {\n\t\tfor (let stream of this._streams) {\n\t\t\tstream.end(true)\n\t\t}\n\t}\n\n\tview({ attrs }: Vnode<KnowledgebaseDialogContentAttrs>): Children {\n\t\tconst model = attrs.model\n\t\tconst selectedEntry = model.selectedEntry()\n\t\treturn selectedEntry\n\t\t\t? m(KnowledgeBaseEntryView, {\n\t\t\t\t\tentry: selectedEntry,\n\t\t\t\t\tonTemplateSelected: (templateId) => {\n\t\t\t\t\t\tmodel\n\t\t\t\t\t\t\t.loadTemplate(templateId)\n\t\t\t\t\t\t\t.then((fetchedTemplate) => {\n\t\t\t\t\t\t\t\tattrs.onTemplateSelect(fetchedTemplate)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(ofClass(NotFoundError, () => Dialog.message(\"templateNotExists_msg\")))\n\t\t\t\t\t},\n\t\t\t\t\treadonly: model.isReadOnly(selectedEntry),\n\t\t\t  })\n\t\t\t: [\n\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\tlabel: \"filter_label\",\n\t\t\t\t\t\tvalue: this.filterValue,\n\t\t\t\t\t\toninput: (value) => {\n\t\t\t\t\t\t\tthis.filterValue = value\n\t\t\t\t\t\t\tmodel.filter(value)\n\t\t\t\t\t\t\tm.redraw()\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t\tthis._renderKeywords(model),\n\t\t\t\t\tthis._renderList(model, attrs),\n\t\t\t  ]\n\t}\n\n\t_renderKeywords(model: KnowledgeBaseModel): Children {\n\t\tconst matchedKeywords = model.getMatchedKeywordsInContent()\n\t\treturn m(\".flex.mt-s.wrap\", [\n\t\t\tmatchedKeywords.length > 0 ? m(\".small.full-width\", lang.get(\"matchingKeywords_label\")) : null,\n\t\t\tmatchedKeywords.map((keyword) => {\n\t\t\t\treturn m(\".keyword-bubble-no-padding.plr-button.pl-s.pr-s.border-radius.no-wrap.mr-s.min-content\", keyword)\n\t\t\t}),\n\t\t])\n\t}\n\n\t_renderList(model: KnowledgeBaseModel, attrs: KnowledgebaseDialogContentAttrs): Children {\n\t\treturn m(\n\t\t\t\".mt-s.scroll\",\n\t\t\t{\n\t\t\t\toncreate: (vnode) => {\n\t\t\t\t\tthis._selectionChangedListener = model.selectedEntry.map(\n\t\t\t\t\t\tmakeListSelectionChangedScrollHandler(\n\t\t\t\t\t\t\tvnode.dom as HTMLElement,\n\t\t\t\t\t\t\tKNOWLEDGEBASE_LIST_ENTRY_HEIGHT,\n\t\t\t\t\t\t\tmodel.getSelectedEntryIndex.bind(model),\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\tonbeforeremove: () => {\n\t\t\t\t\tthis._selectionChangedListener.end()\n\t\t\t\t},\n\t\t\t},\n\t\t\t[\n\t\t\t\tmodel.containsResult()\n\t\t\t\t\t? model.filteredEntries().map((entry) => this._renderListEntry(model, entry))\n\t\t\t\t\t: m(\".center\", lang.get(\"noEntryFound_label\")),\n\t\t\t],\n\t\t)\n\t}\n\n\t_renderListEntry(model: KnowledgeBaseModel, entry: KnowledgeBaseEntry): Children {\n\t\treturn m(\".flex.flex-column.click.hoverable-list-item\", [\n\t\t\tm(\n\t\t\t\t\".flex\",\n\t\t\t\t{\n\t\t\t\t\tonclick: () => {\n\t\t\t\t\t\tmodel.selectedEntry(entry)\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t[\n\t\t\t\t\tm(KnowledgeBaseListEntry, {\n\t\t\t\t\t\tentry: entry,\n\t\t\t\t\t}),\n\t\t\t\t\tm(\"\", {\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\twidth: \"17.1px\",\n\t\t\t\t\t\t\theight: \"16px\",\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t],\n\t\t\t),\n\t\t])\n\t}\n}\n","import { KnowledgeBaseModel } from \"../model/KnowledgeBaseModel.js\"\nimport { Editor } from \"../../../common/gui/editor/Editor.js\"\nimport type { KnowledgebaseDialogContentAttrs } from \"./KnowledgeBaseDialogContent.js\"\nimport { KnowledgeBaseDialogContent } from \"./KnowledgeBaseDialogContent.js\"\nimport { showTemplatePopupInEditor } from \"../../templates/view/TemplatePopup.js\"\nimport type { ButtonAttrs } from \"../../../common/gui/base/Button.js\"\nimport { ButtonType } from \"../../../common/gui/base/Button.js\"\nimport type { DialogHeaderBarAttrs } from \"../../../common/gui/base/DialogHeaderBar.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel.js\"\nimport type { KnowledgeBaseEntry, TemplateGroupRoot } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport type { lazy } from \"@tutao/tutanota-utils\"\nimport { createDropdown } from \"../../../common/gui/base/Dropdown.js\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport type { DialogInjectionRightAttrs } from \"../../../common/gui/base/DialogInjectionRight.js\"\nimport { TemplatePopupModel } from \"../../templates/model/TemplatePopupModel.js\"\n\nimport { getSharedGroupName } from \"../../../common/sharing/GroupUtils.js\"\n\nexport function createKnowledgeBaseDialogInjection(\n\tknowledgeBase: KnowledgeBaseModel,\n\ttemplateModel: TemplatePopupModel,\n\teditor: Editor,\n): DialogInjectionRightAttrs<KnowledgebaseDialogContentAttrs> {\n\tconst knowledgebaseAttrs: KnowledgebaseDialogContentAttrs = {\n\t\tonTemplateSelect: (template) => {\n\t\t\tshowTemplatePopupInEditor(templateModel, editor, template, \"\")\n\t\t},\n\t\tmodel: knowledgeBase,\n\t}\n\tconst isDialogVisible = stream(false)\n\treturn {\n\t\tvisible: isDialogVisible,\n\t\theaderAttrs: _createHeaderAttrs(knowledgebaseAttrs, isDialogVisible),\n\t\tcomponentAttrs: knowledgebaseAttrs,\n\t\tcomponent: KnowledgeBaseDialogContent,\n\t}\n}\n\nfunction _createHeaderAttrs(attrs: KnowledgebaseDialogContentAttrs, isDialogVisible: Stream<boolean>): lazy<DialogHeaderBarAttrs> {\n\treturn () => {\n\t\tconst selectedEntry = attrs.model.selectedEntry()\n\t\treturn selectedEntry ? createEntryViewHeader(selectedEntry, attrs.model) : createListViewHeader(attrs.model, isDialogVisible)\n\t}\n}\n\nfunction createEntryViewHeader(entry: KnowledgeBaseEntry, model: KnowledgeBaseModel): DialogHeaderBarAttrs {\n\treturn {\n\t\tleft: [\n\t\t\t{\n\t\t\t\tlabel: \"back_action\",\n\t\t\t\tclick: () => model.selectedEntry(null),\n\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t},\n\t\t],\n\t\tmiddle: \"knowledgebase_label\",\n\t}\n}\n\nfunction createListViewHeader(model: KnowledgeBaseModel, isDialogVisible: Stream<boolean>): DialogHeaderBarAttrs {\n\treturn {\n\t\tleft: () => [\n\t\t\t{\n\t\t\t\tlabel: \"close_alt\",\n\t\t\t\tclick: () => isDialogVisible(false),\n\t\t\t\ttype: ButtonType.Primary,\n\t\t\t},\n\t\t],\n\t\tmiddle: \"knowledgebase_label\",\n\t\tright: [createAddButtonAttrs(model)],\n\t}\n}\n\nfunction createAddButtonAttrs(model: KnowledgeBaseModel): ButtonAttrs {\n\tconst templateGroupInstances = model.getTemplateGroupInstances()\n\n\tif (templateGroupInstances.length === 1) {\n\t\treturn {\n\t\t\tlabel: \"add_action\",\n\t\t\tclick: () => {\n\t\t\t\tshowKnowledgeBaseEditor(null, templateGroupInstances[0].groupRoot)\n\t\t\t},\n\t\t\ttype: ButtonType.Primary,\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tlabel: \"add_action\",\n\t\t\ttype: ButtonType.Primary,\n\t\t\tclick: createDropdown({\n\t\t\t\tlazyButtons: () =>\n\t\t\t\t\ttemplateGroupInstances.map((groupInstances) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tlabel: lang.makeTranslation(\"group_name\", getSharedGroupName(groupInstances.groupInfo, model.userController, true)),\n\t\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\t\tshowKnowledgeBaseEditor(null, groupInstances.groupRoot)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t}),\n\t\t}\n\t}\n}\n\nfunction showKnowledgeBaseEditor(entryToEdit: KnowledgeBaseEntry | null, groupRoot: TemplateGroupRoot) {\n\timport(\"../../settings/KnowledgeBaseEditor.js\").then((editor) => {\n\t\teditor.showKnowledgeBaseEditor(entryToEdit, groupRoot)\n\t})\n}\n","import type { EmailTemplate, KnowledgeBaseEntry } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { EmailTemplateTypeRef, KnowledgeBaseEntryTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { knowledgeBaseSearch } from \"./KnowledgeBaseSearchFilter.js\"\nimport type { LanguageCode } from \"../../../common/misc/LanguageViewModel.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel.js\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { OperationType, ShareCapability } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { downcast, LazyLoaded, noOp, promiseMap, SortedArray } from \"@tutao/tutanota-utils\"\nimport { getElementId, getEtId, getLetId, isSameId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport type { TemplateGroupInstance } from \"../../templates/model/TemplateGroupModel.js\"\nimport { loadTemplateGroupInstance } from \"../../templates/model/TemplatePopupModel.js\"\nimport type { UserController } from \"../../../common/api/main/UserController.js\"\nimport { hasCapabilityOnGroup } from \"../../../common/sharing/GroupUtils.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { EntityEventsListener, EventController } from \"../../../common/api/main/EventController.js\"\n\nexport const SELECT_NEXT_ENTRY = \"next\"\n\nfunction compareKnowledgeBaseEntriesForSort(entry1: KnowledgeBaseEntry, entry2: KnowledgeBaseEntry): number {\n\treturn entry1.title.localeCompare(entry2.title)\n}\n\n/**\n *   Model that holds main logic for the Knowledgebase.\n */\nexport class KnowledgeBaseModel {\n\t_allEntries: SortedArray<KnowledgeBaseEntry>\n\tfilteredEntries: Stream<ReadonlyArray<KnowledgeBaseEntry>>\n\tselectedEntry: Stream<KnowledgeBaseEntry | null>\n\t_allKeywords: Array<string>\n\t_matchedKeywordsInContent: Array<string | null>\n\t_filterValue: string\n\treadonly _eventController: EventController\n\treadonly _entityClient: EntityClient\n\treadonly _entityEventReceived: EntityEventsListener\n\t_groupInstances: Array<TemplateGroupInstance>\n\t_initialized: LazyLoaded<KnowledgeBaseModel>\n\treadonly userController: UserController\n\n\tconstructor(eventController: EventController, entityClient: EntityClient, userController: UserController) {\n\t\tthis._eventController = eventController\n\t\tthis._entityClient = entityClient\n\t\tthis.userController = userController\n\t\tthis._allEntries = SortedArray.empty(compareKnowledgeBaseEntriesForSort)\n\t\tthis._allKeywords = []\n\t\tthis._matchedKeywordsInContent = []\n\t\tthis.filteredEntries = stream(this._allEntries.array)\n\t\tthis.selectedEntry = stream<KnowledgeBaseEntry | null>(null)\n\t\tthis._filterValue = \"\"\n\n\t\tthis._entityEventReceived = (updates) => {\n\t\t\treturn this._entityUpdate(updates)\n\t\t}\n\n\t\tthis._eventController.addEntityListener(this._entityEventReceived)\n\n\t\tthis._groupInstances = []\n\t\tthis._allKeywords = []\n\t\tthis.filteredEntries(this._allEntries.array)\n\t\tthis.selectedEntry(this.containsResult() ? this.filteredEntries()[0] : null)\n\t\tthis._initialized = new LazyLoaded(() => {\n\t\t\tconst templateMemberships = this.userController.getTemplateMemberships()\n\n\t\t\tlet newGroupInstances: TemplateGroupInstance[] = []\n\t\t\treturn promiseMap(templateMemberships, (membership) => loadTemplateGroupInstance(membership, entityClient))\n\t\t\t\t.then((groupInstances) => {\n\t\t\t\t\tnewGroupInstances = groupInstances\n\t\t\t\t\treturn loadKnowledgebaseEntries(groupInstances, entityClient)\n\t\t\t\t})\n\t\t\t\t.then((knowledgebaseEntries) => {\n\t\t\t\t\tthis._allEntries.insertAll(knowledgebaseEntries)\n\n\t\t\t\t\tthis._groupInstances = newGroupInstances\n\t\t\t\t\tthis.initAllKeywords()\n\t\t\t\t\treturn this\n\t\t\t\t})\n\t\t})\n\t}\n\n\tinit(): Promise<KnowledgeBaseModel> {\n\t\treturn this._initialized.getAsync()\n\t}\n\n\tisInitialized(): boolean {\n\t\treturn this._initialized.isLoaded()\n\t}\n\n\tgetTemplateGroupInstances(): Array<TemplateGroupInstance> {\n\t\treturn this._groupInstances\n\t}\n\n\tinitAllKeywords() {\n\t\tthis._allKeywords = []\n\t\tthis._matchedKeywordsInContent = []\n\n\t\tfor (const entry of this._allEntries.array) {\n\t\t\tfor (const keyword of entry.keywords) {\n\t\t\t\tthis._allKeywords.push(keyword.keyword)\n\t\t\t}\n\t\t}\n\t}\n\n\tisSelectedEntry(entry: KnowledgeBaseEntry): boolean {\n\t\treturn this.selectedEntry() === entry\n\t}\n\n\tcontainsResult(): boolean {\n\t\treturn this.filteredEntries().length > 0\n\t}\n\n\tgetAllKeywords(): Array<string> {\n\t\treturn this._allKeywords.sort()\n\t}\n\n\tgetMatchedKeywordsInContent(): Array<string | null> {\n\t\treturn this._matchedKeywordsInContent\n\t}\n\n\tgetLanguageFromTemplate(template: EmailTemplate): LanguageCode {\n\t\tconst clientLanguage = lang.code\n\t\tconst hasClientLanguage = template.contents.some((content) => content.languageCode === clientLanguage)\n\n\t\tif (hasClientLanguage) {\n\t\t\treturn clientLanguage\n\t\t}\n\n\t\treturn downcast(template.contents[0].languageCode)\n\t}\n\n\tsortEntriesByMatchingKeywords(emailContent: string) {\n\t\tthis._matchedKeywordsInContent = []\n\t\tconst emailContentNoTags = emailContent.replace(/(<([^>]+)>)/gi, \"\") // remove all html tags\n\n\t\tfor (const keyword of this._allKeywords) {\n\t\t\tif (emailContentNoTags.includes(keyword)) {\n\t\t\t\tthis._matchedKeywordsInContent.push(keyword)\n\t\t\t}\n\t\t}\n\n\t\tthis._allEntries = SortedArray.from(this._allEntries.array, (a, b) => this._compareEntriesByMatchedKeywords(a, b))\n\t\tthis._filterValue = \"\"\n\t\tthis.filteredEntries(this._allEntries.array)\n\t}\n\n\t_compareEntriesByMatchedKeywords(entry1: KnowledgeBaseEntry, entry2: KnowledgeBaseEntry): number {\n\t\tconst difference = this._getMatchedKeywordsNumber(entry2) - this._getMatchedKeywordsNumber(entry1)\n\n\t\treturn difference === 0 ? compareKnowledgeBaseEntriesForSort(entry1, entry2) : difference\n\t}\n\n\t_getMatchedKeywordsNumber(entry: KnowledgeBaseEntry): number {\n\t\tlet matches = 0\n\t\tfor (const k of entry.keywords) {\n\t\t\tif (this._matchedKeywordsInContent.includes(k.keyword)) {\n\t\t\t\tmatches++\n\t\t\t}\n\t\t}\n\t\treturn matches\n\t}\n\n\tfilter(input: string): void {\n\t\tthis._filterValue = input\n\t\tconst inputTrimmed = input.trim()\n\n\t\tif (inputTrimmed) {\n\t\t\tthis.filteredEntries(knowledgeBaseSearch(inputTrimmed, this._allEntries.array))\n\t\t} else {\n\t\t\tthis.filteredEntries(this._allEntries.array)\n\t\t}\n\t}\n\n\tselectNextEntry(action: string): boolean {\n\t\t// returns true if selection is changed\n\t\tconst selectedIndex = this.getSelectedEntryIndex()\n\t\tconst nextIndex = selectedIndex + (action === SELECT_NEXT_ENTRY ? 1 : -1)\n\n\t\tif (nextIndex >= 0 && nextIndex < this.filteredEntries().length) {\n\t\t\tconst nextSelectedEntry = this.filteredEntries()[nextIndex]\n\t\t\tthis.selectedEntry(nextSelectedEntry)\n\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\tgetSelectedEntryIndex(): number {\n\t\tconst selectedEntry = this.selectedEntry()\n\t\tif (selectedEntry == null) {\n\t\t\treturn -1\n\t\t}\n\t\treturn this.filteredEntries().indexOf(selectedEntry)\n\t}\n\n\t_removeFromAllKeywords(keyword: string) {\n\t\tconst index = this._allKeywords.indexOf(keyword)\n\n\t\tif (index > -1) {\n\t\t\tthis._allKeywords.splice(index, 1)\n\t\t}\n\t}\n\n\tdispose() {\n\t\tthis._eventController.removeEntityListener(this._entityEventReceived)\n\t}\n\n\tloadTemplate(templateId: IdTuple): Promise<EmailTemplate> {\n\t\treturn this._entityClient.load(EmailTemplateTypeRef, templateId)\n\t}\n\n\tisReadOnly(entry: KnowledgeBaseEntry): boolean {\n\t\tconst instance = this._groupInstances.find((instance) => isSameId(entry._ownerGroup, getEtId(instance.group)))\n\n\t\treturn !instance || !hasCapabilityOnGroup(this.userController.user, instance.group, ShareCapability.Write)\n\t}\n\n\t_entityUpdate(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\treturn promiseMap(updates, (update) => {\n\t\t\tif (isUpdateForTypeRef(KnowledgeBaseEntryTypeRef, update)) {\n\t\t\t\tif (update.operation === OperationType.CREATE) {\n\t\t\t\t\treturn this._entityClient.load(KnowledgeBaseEntryTypeRef, [update.instanceListId, update.instanceId]).then((entry) => {\n\t\t\t\t\t\tthis._allEntries.insert(entry)\n\n\t\t\t\t\t\tthis.filter(this._filterValue)\n\t\t\t\t\t})\n\t\t\t\t} else if (update.operation === OperationType.UPDATE) {\n\t\t\t\t\treturn this._entityClient.load(KnowledgeBaseEntryTypeRef, [update.instanceListId, update.instanceId]).then((updatedEntry) => {\n\t\t\t\t\t\tthis._allEntries.removeFirst((e) => isSameId(getElementId(e), update.instanceId))\n\n\t\t\t\t\t\tthis._allEntries.insert(updatedEntry)\n\n\t\t\t\t\t\tthis.filter(this._filterValue)\n\t\t\t\t\t\tconst oldSelectedEntry = this.selectedEntry()\n\n\t\t\t\t\t\tif (oldSelectedEntry && isSameId(oldSelectedEntry._id, updatedEntry._id)) {\n\t\t\t\t\t\t\tthis.selectedEntry(updatedEntry)\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t} else if (update.operation === OperationType.DELETE) {\n\t\t\t\t\tconst selected = this.selectedEntry()\n\n\t\t\t\t\tif (selected && isSameId(getLetId(selected), [update.instanceListId, update.instanceId])) {\n\t\t\t\t\t\tthis.selectedEntry(null)\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._allEntries.removeFirst((e) => isSameId(getElementId(e), update.instanceId))\n\n\t\t\t\t\tthis.filter(this._filterValue)\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(noOp)\n\t}\n}\n\nfunction loadKnowledgebaseEntries(templateGroups: Array<TemplateGroupInstance>, entityClient: EntityClient): Promise<Array<KnowledgeBaseEntry>> {\n\treturn promiseMap(templateGroups, (group) => entityClient.loadAll(KnowledgeBaseEntryTypeRef, group.groupRoot.knowledgeBase)).then((groupedTemplates) =>\n\t\tgroupedTemplates.flat(),\n\t)\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport type { PositionRect } from \"./Overlay\"\n\n/**\n * Small badge symbol to display numeric values to indicate that content is available, e.g. unread mail counter.\n * It will only appear if the counter value is greater than zero.\n */\nexport type CounterBadgeAttrs = {\n\tcount: number\n\tposition?: PositionRect\n\tcolor: string\n\tbackground: string\n\tshowFullCount?: boolean\n}\n\nexport class CounterBadge implements Component<CounterBadgeAttrs> {\n\t_hovered: boolean = false\n\n\tconstructor(vnode: Vnode<CounterBadgeAttrs>) {\n\t\tthis._hovered = false\n\t}\n\n\tview(vnode: Vnode<CounterBadgeAttrs>): Children {\n\t\tconst { count, position, background, color, showFullCount } = vnode.attrs\n\t\treturn count > 0\n\t\t\t? m(\n\t\t\t\t\t\".counter-badge.z2\",\n\t\t\t\t\t{\n\t\t\t\t\t\tclass: position ? \"abs\" : \"\",\n\t\t\t\t\t\tonmouseenter: () => {\n\t\t\t\t\t\t\tthis._hovered = true\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonmouseleave: () => {\n\t\t\t\t\t\t\tthis._hovered = false\n\t\t\t\t\t\t},\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\twidth: position?.width,\n\t\t\t\t\t\t\ttop: position?.top,\n\t\t\t\t\t\t\tbottom: position?.bottom,\n\t\t\t\t\t\t\tright: position?.right,\n\t\t\t\t\t\t\tleft: position?.left,\n\t\t\t\t\t\t\theight: position?.height,\n\t\t\t\t\t\t\t\"z-index\": position?.zIndex,\n\t\t\t\t\t\t\tbackground,\n\t\t\t\t\t\t\tcolor,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tcount < 99 || this._hovered || showFullCount ? count : \"99+\",\n\t\t\t  )\n\t\t\t: null\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport { CounterBadge } from \"../../../common/gui/base/CounterBadge\"\nimport { getNavButtonIconBackground, theme } from \"../../../common/gui/theme\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport { Button, ButtonColor, ButtonType } from \"../../../common/gui/base/Button.js\"\nimport type { MinimizedEditor, MinimizedMailEditorViewModel } from \"../model/MinimizedMailEditorViewModel\"\nimport { SaveErrorReason, SaveStatus, SaveStatusEnum } from \"../model/MinimizedMailEditorViewModel\"\nimport { px } from \"../../../common/gui/size\"\nimport { Icons } from \"../../../common/gui/base/icons/Icons\"\nimport { styles } from \"../../../common/gui/styles\"\nimport { promptAndDeleteMails } from \"./MailGuiUtils\"\nimport { MailTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { OperationType } from \"../../../common/api/common/TutanotaConstants\"\nimport { isSameId } from \"../../../common/api/common/utils/EntityUtils\"\nimport { noOp, promiseMap } from \"@tutao/tutanota-utils\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { EntityEventsListener, EventController } from \"../../../common/api/main/EventController.js\"\nimport { IconButton } from \"../../../common/gui/base/IconButton.js\"\nimport { mailLocator } from \"../../mailLocator.js\"\n\nconst COUNTER_POS_OFFSET = px(-8)\nexport type MinimizedEditorOverlayAttrs = {\n\tviewModel: MinimizedMailEditorViewModel\n\tminimizedEditor: MinimizedEditor\n\teventController: EventController\n}\n\nexport class MinimizedEditorOverlay implements Component<MinimizedEditorOverlayAttrs> {\n\t_listener: EntityEventsListener\n\t_eventController: EventController\n\n\tconstructor(vnode: Vnode<MinimizedEditorOverlayAttrs>) {\n\t\tconst { minimizedEditor, viewModel, eventController } = vnode.attrs\n\t\tthis._eventController = eventController\n\n\t\tthis._listener = (updates: ReadonlyArray<EntityUpdateData>, eventOwnerGroupId: Id): Promise<unknown> => {\n\t\t\treturn promiseMap(updates, (update) => {\n\t\t\t\tif (isUpdateForTypeRef(MailTypeRef, update) && update.operation === OperationType.DELETE) {\n\t\t\t\t\tlet draft = minimizedEditor.sendMailModel.getDraft()\n\n\t\t\t\t\tif (draft && isSameId(draft._id, [update.instanceListId, update.instanceId])) {\n\t\t\t\t\t\tviewModel.removeMinimizedEditor(minimizedEditor)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\teventController.addEntityListener(this._listener)\n\t}\n\n\tonremove() {\n\t\tthis._eventController.removeEntityListener(this._listener)\n\t}\n\n\tview(vnode: Vnode<MinimizedEditorOverlayAttrs>): Children {\n\t\tconst { minimizedEditor, viewModel, eventController } = vnode.attrs\n\t\tconst subject = minimizedEditor.sendMailModel.getSubject()\n\t\treturn m(\".elevated-bg.pl.border-radius\", [\n\t\t\tm(CounterBadge, {\n\t\t\t\tcount: viewModel.getMinimizedEditors().indexOf(minimizedEditor) + 1,\n\t\t\t\tposition: {\n\t\t\t\t\ttop: COUNTER_POS_OFFSET,\n\t\t\t\t\tright: COUNTER_POS_OFFSET,\n\t\t\t\t},\n\t\t\t\tcolor: theme.navigation_button_icon,\n\t\t\t\tbackground: getNavButtonIconBackground(),\n\t\t\t}),\n\t\t\tm(\".flex.justify-between.pb-xs.pt-xs\", [\n\t\t\t\tm(\n\t\t\t\t\t\".flex.col.justify-center.min-width-0.flex-grow\",\n\t\t\t\t\t{\n\t\t\t\t\t\tonclick: () => viewModel.reopenMinimizedEditor(minimizedEditor),\n\t\t\t\t\t},\n\t\t\t\t\t[\n\t\t\t\t\t\tm(\".b.text-ellipsis\", subject ? subject : lang.get(\"newMail_action\")),\n\t\t\t\t\t\tm(\".small.text-ellipsis\", getStatusMessage(minimizedEditor.saveStatus())),\n\t\t\t\t\t],\n\t\t\t\t),\n\t\t\t\tm(\".flex.items-center.justify-right\", [\n\t\t\t\t\t!styles.isSingleColumnLayout()\n\t\t\t\t\t\t? m(IconButton, {\n\t\t\t\t\t\t\t\ttitle: \"edit_action\",\n\t\t\t\t\t\t\t\tclick: () => viewModel.reopenMinimizedEditor(minimizedEditor),\n\t\t\t\t\t\t\t\ticon: Icons.Edit,\n\t\t\t\t\t\t  })\n\t\t\t\t\t\t: null,\n\t\t\t\t\tm(IconButton, {\n\t\t\t\t\t\ttitle: \"delete_action\",\n\t\t\t\t\t\tclick: () => this._onDeleteClicked(minimizedEditor, viewModel),\n\t\t\t\t\t\ticon: Icons.Trash,\n\t\t\t\t\t}),\n\t\t\t\t\tm(IconButton, {\n\t\t\t\t\t\ttitle: \"close_alt\",\n\t\t\t\t\t\tclick: () => viewModel.removeMinimizedEditor(minimizedEditor),\n\t\t\t\t\t\ticon: Icons.Cancel,\n\t\t\t\t\t}),\n\t\t\t\t]),\n\t\t\t]),\n\t\t])\n\t}\n\n\tprivate _onDeleteClicked(minimizedEditor: MinimizedEditor, viewModel: MinimizedMailEditorViewModel) {\n\t\tconst model = minimizedEditor.sendMailModel\n\t\tviewModel.removeMinimizedEditor(minimizedEditor)\n\t\t// only delete once save has finished\n\t\tminimizedEditor.saveStatus.map(async ({ status }) => {\n\t\t\tif (status !== SaveStatusEnum.Saving) {\n\t\t\t\tconst draft = model.draft\n\n\t\t\t\tif (draft) {\n\t\t\t\t\tawait promptAndDeleteMails(mailLocator.mailModel, [draft], noOp)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction getStatusMessage(saveStatus: SaveStatus): string {\n\tswitch (saveStatus.status) {\n\t\tcase SaveStatusEnum.Saving:\n\t\t\treturn lang.get(\"save_msg\")\n\t\tcase SaveStatusEnum.NotSaved:\n\t\t\tswitch (saveStatus.reason) {\n\t\t\t\tcase SaveErrorReason.ConnectionLost:\n\t\t\t\t\treturn lang.get(\"draftNotSavedConnectionLost_msg\")\n\t\t\t\tdefault:\n\t\t\t\t\treturn lang.get(\"draftNotSaved_msg\")\n\t\t\t}\n\t\tcase SaveStatusEnum.Saved:\n\t\t\treturn lang.get(\"draftSaved_msg\")\n\t\tdefault:\n\t\t\treturn \"\"\n\t}\n}\n","import m from \"mithril\"\nimport { px, size } from \"../../../common/gui/size\"\nimport { displayOverlay } from \"../../../common/gui/base/Overlay\"\nimport { DefaultAnimationTime } from \"../../../common/gui/animation/Animations\"\nimport { EventController } from \"../../../common/api/main/EventController\"\nimport { styles } from \"../../../common/gui/styles\"\nimport { LayerType } from \"../../../RootView\"\nimport type { Dialog } from \"../../../common/gui/base/Dialog\"\nimport type { SendMailModel } from \"../../../common/mailFunctionality/SendMailModel.js\"\nimport type { MinimizedEditor, SaveStatus } from \"../model/MinimizedMailEditorViewModel\"\nimport { MinimizedMailEditorViewModel } from \"../model/MinimizedMailEditorViewModel\"\nimport { MinimizedEditorOverlay } from \"./MinimizedEditorOverlay\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport Stream from \"mithril/stream\"\nimport { noOp } from \"@tutao/tutanota-utils\"\n\nassertMainOrNode()\nconst MINIMIZED_OVERLAY_WIDTH_WIDE = 350\nconst MINIMIZED_OVERLAY_WIDTH_SMALL = 220\n\nexport function showMinimizedMailEditor(\n\tdialog: Dialog,\n\tsendMailModel: SendMailModel,\n\tviewModel: MinimizedMailEditorViewModel,\n\teventController: EventController,\n\tdispose: () => void,\n\tsaveStatus: Stream<SaveStatus>,\n): void {\n\tlet closeOverlayFunction: () => void = noOp // will be assigned with the actual close function when overlay is visible.\n\n\tconst minimizedEditor = viewModel.minimizeMailEditor(dialog, sendMailModel, dispose, saveStatus, () => closeOverlayFunction())\n\t// only show overlay once editor is gone\n\tsetTimeout(() => {\n\t\tcloseOverlayFunction = showMinimizedEditorOverlay(viewModel, minimizedEditor, eventController)\n\t}, DefaultAnimationTime)\n}\n\nfunction showMinimizedEditorOverlay(viewModel: MinimizedMailEditorViewModel, minimizedEditor: MinimizedEditor, eventController: EventController): () => void {\n\treturn displayOverlay(\n\t\t() => getOverlayPosition(),\n\t\t{\n\t\t\tview: () =>\n\t\t\t\tm(MinimizedEditorOverlay, {\n\t\t\t\t\tviewModel,\n\t\t\t\t\tminimizedEditor,\n\t\t\t\t\teventController,\n\t\t\t\t}),\n\t\t},\n\t\t\"slide-bottom\",\n\t\tundefined,\n\t\t\"minimized-shadow\",\n\t)\n}\n\nfunction getOverlayPosition() {\n\treturn {\n\t\tbottom: styles.isUsingBottomNavigation() ? px(size.hpad) : px(size.vpad),\n\t\t// position will change with translateY\n\t\tright: styles.isUsingBottomNavigation() ? px(size.hpad) : px(size.hpad_medium),\n\t\twidth: px(styles.isSingleColumnLayout() ? MINIMIZED_OVERLAY_WIDTH_SMALL : MINIMIZED_OVERLAY_WIDTH_WIDE),\n\t\tzIndex: LayerType.LowPriorityOverlay,\n\t}\n}\n","import m, { Children, Component, Vnode } from \"mithril\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { Editor, ImagePasteEvent } from \"../../../common/gui/editor/Editor\"\nimport type { Attachment, InitAsResponseArgs, SendMailModel } from \"../../../common/mailFunctionality/SendMailModel.js\"\nimport { Dialog } from \"../../../common/gui/base/Dialog\"\nimport { InfoLink, lang } from \"../../../common/misc/LanguageViewModel\"\nimport type { MailboxDetail } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { checkApprovalStatus } from \"../../../common/misc/LoginUtils\"\nimport { locator } from \"../../../common/api/main/CommonLocator\"\nimport {\n\tALLOWED_IMAGE_FORMATS,\n\tConversationType,\n\tExternalImageRule,\n\tFeatureType,\n\tKeys,\n\tMailAuthenticationStatus,\n\tMailMethod,\n} from \"../../../common/api/common/TutanotaConstants\"\nimport { TooManyRequestsError } from \"../../../common/api/common/error/RestError\"\nimport type { DialogHeaderBarAttrs } from \"../../../common/gui/base/DialogHeaderBar\"\nimport { ButtonType } from \"../../../common/gui/base/Button.js\"\nimport { attachDropdown, createDropdown, DropdownChildAttrs } from \"../../../common/gui/base/Dropdown.js\"\nimport { isApp, isBrowser, isDesktop } from \"../../../common/api/common/Env\"\nimport { Icons } from \"../../../common/gui/base/icons/Icons\"\nimport { AnimationPromise, animations, height, opacity } from \"../../../common/gui/animation/Animations\"\nimport type { TextFieldAttrs } from \"../../../common/gui/base/TextField.js\"\nimport { Autocomplete, TextField } from \"../../../common/gui/base/TextField.js\"\nimport { chooseAndAttachFile, cleanupInlineAttachments, createAttachmentBubbleAttrs, getConfidentialStateMessage } from \"./MailEditorViewModel\"\nimport { ExpanderPanel } from \"../../../common/gui/base/Expander\"\nimport { windowFacade } from \"../../../common/misc/WindowFacade\"\nimport { UserError } from \"../../../common/api/main/UserError\"\nimport { showProgressDialog } from \"../../../common/gui/dialogs/ProgressDialog\"\nimport { htmlSanitizer } from \"../../../common/misc/HtmlSanitizer\"\nimport { DropDownSelector } from \"../../../common/gui/base/DropDownSelector.js\"\nimport {\n\tContact,\n\tContactTypeRef,\n\tcreateTranslationGetIn,\n\tFile as TutanotaFile,\n\tMail,\n\tMailboxProperties,\n\tMailDetails,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { FileOpenError } from \"../../../common/api/common/error/FileOpenError\"\nimport type { lazy } from \"@tutao/tutanota-utils\"\nimport { assertNotNull, cleanMatch, downcast, isNotNull, noOp, ofClass, typedValues } from \"@tutao/tutanota-utils\"\nimport { createInlineImage, isMailContrastFixNeeded, replaceCidsWithInlineImages, replaceInlineImagesWithCids } from \"../view/MailGuiUtils\"\nimport { client } from \"../../../common/misc/ClientDetector\"\nimport { appendEmailSignature } from \"../signature/Signature\"\nimport { showTemplatePopupInEditor } from \"../../templates/view/TemplatePopup\"\nimport { registerTemplateShortcutListener } from \"../../templates/view/TemplateShortcutListener\"\nimport { TemplatePopupModel } from \"../../templates/model/TemplatePopupModel\"\nimport { createKnowledgeBaseDialogInjection } from \"../../knowledgebase/view/KnowledgeBaseDialog\"\nimport { KnowledgeBaseModel } from \"../../knowledgebase/model/KnowledgeBaseModel\"\nimport { styles } from \"../../../common/gui/styles\"\nimport { showMinimizedMailEditor } from \"../view/MinimizedMailEditorOverlay\"\nimport { SaveErrorReason, SaveStatus, SaveStatusEnum } from \"../model/MinimizedMailEditorViewModel\"\nimport { fileListToArray, FileReference, isTutanotaFile } from \"../../../common/api/common/utils/FileUtils\"\nimport { parseMailtoUrl } from \"../../../common/misc/parsing/MailAddressParser\"\nimport { CancelledError } from \"../../../common/api/common/error/CancelledError\"\nimport { Shortcut } from \"../../../common/misc/KeyManager\"\nimport { Recipients, RecipientType } from \"../../../common/api/common/recipients/Recipient\"\nimport { showUserError } from \"../../../common/misc/ErrorHandlerImpl\"\nimport { MailRecipientsTextField } from \"../../../common/gui/MailRecipientsTextField.js\"\nimport { getContactDisplayName } from \"../../../common/contactsFunctionality/ContactUtils.js\"\nimport { ResolvableRecipient } from \"../../../common/api/main/RecipientsModel\"\n\nimport { animateToolbar, RichTextToolbar } from \"../../../common/gui/base/RichTextToolbar.js\"\nimport { readLocalFiles } from \"../../../common/file/FileController\"\nimport { IconButton, IconButtonAttrs } from \"../../../common/gui/base/IconButton.js\"\nimport { ToggleButton, ToggleButtonAttrs } from \"../../../common/gui/base/buttons/ToggleButton.js\"\nimport { BootIcons } from \"../../../common/gui/base/icons/BootIcons.js\"\nimport { ButtonSize } from \"../../../common/gui/base/ButtonSize.js\"\nimport { DialogInjectionRightAttrs } from \"../../../common/gui/base/DialogInjectionRight.js\"\nimport { KnowledgebaseDialogContentAttrs } from \"../../knowledgebase/view/KnowledgeBaseDialogContent.js\"\nimport { RecipientsSearchModel } from \"../../../common/misc/RecipientsSearchModel.js\"\nimport { createDataFile, DataFile } from \"../../../common/api/common/DataFile.js\"\nimport { AttachmentBubble } from \"../../../common/gui/AttachmentBubble.js\"\nimport { ContentBlockingStatus } from \"../view/MailViewerViewModel.js\"\nimport { canSeeTutaLinks } from \"../../../common/gui/base/GuiUtils.js\"\nimport { BannerButtonAttrs, InfoBanner } from \"../../../common/gui/base/InfoBanner.js\"\nimport { isCustomizationEnabledForCustomer } from \"../../../common/api/common/utils/CustomerUtils.js\"\nimport { isOfflineError } from \"../../../common/api/common/utils/ErrorUtils.js\"\nimport { TranslationService } from \"../../../common/api/entities/tutanota/Services.js\"\nimport { PasswordField } from \"../../../common/misc/passwords/PasswordField.js\"\nimport { InlineImages } from \"../../../common/mailFunctionality/inlineImagesUtils.js\"\nimport {\n\tcheckAttachmentSize,\n\tcreateNewContact,\n\tdialogTitleTranslationKey,\n\tgetEnabledMailAddressesWithUser,\n\tgetMailAddressDisplayText,\n\tLINE_BREAK,\n\tRecipientField,\n} from \"../../../common/mailFunctionality/SharedMailUtils.js\"\nimport { mailLocator } from \"../../mailLocator.js\"\n\nimport { handleRatingByEvent } from \"../../../common/ratings/InAppRatingDialog.js\"\n\nexport type MailEditorAttrs = {\n\tmodel: SendMailModel\n\tdoBlockExternalContent: Stream<boolean>\n\tdoShowToolbar: Stream<boolean>\n\tonload?: (editor: Editor) => void\n\tonclose?: (...args: Array<any>) => any\n\tselectedNotificationLanguage: Stream<string>\n\tdialog: lazy<Dialog>\n\ttemplateModel: TemplatePopupModel | null\n\tknowledgeBaseInjection: (editor: Editor) => Promise<DialogInjectionRightAttrs<KnowledgebaseDialogContentAttrs> | null>\n\tsearch: RecipientsSearchModel\n\talwaysBlockExternalContent: boolean\n}\n\nexport function createMailEditorAttrs(\n\tmodel: SendMailModel,\n\tdoBlockExternalContent: boolean,\n\tdoFocusEditorOnLoad: boolean,\n\tdialog: lazy<Dialog>,\n\ttemplateModel: TemplatePopupModel | null,\n\tknowledgeBaseInjection: (editor: Editor) => Promise<DialogInjectionRightAttrs<KnowledgebaseDialogContentAttrs> | null>,\n\tsearch: RecipientsSearchModel,\n\talwaysBlockExternalContent: boolean,\n): MailEditorAttrs {\n\treturn {\n\t\tmodel,\n\t\tdoBlockExternalContent: stream(doBlockExternalContent),\n\t\tdoShowToolbar: stream<boolean>(false),\n\t\tselectedNotificationLanguage: stream(\"\"),\n\t\tdialog,\n\t\ttemplateModel,\n\t\tknowledgeBaseInjection: knowledgeBaseInjection,\n\t\tsearch,\n\t\talwaysBlockExternalContent,\n\t}\n}\n\nexport class MailEditor implements Component<MailEditorAttrs> {\n\tprivate attrs: MailEditorAttrs\n\n\teditor: Editor\n\n\tprivate readonly recipientFieldTexts = {\n\t\tto: stream(\"\"),\n\t\tcc: stream(\"\"),\n\t\tbcc: stream(\"\"),\n\t}\n\n\tmentionedInlineImages: Array<string>\n\tinlineImageElements: Array<HTMLElement>\n\ttemplateModel: TemplatePopupModel | null\n\tknowledgeBaseInjection: DialogInjectionRightAttrs<KnowledgebaseDialogContentAttrs> | null = null\n\tsendMailModel: SendMailModel\n\tprivate areDetailsExpanded: boolean\n\tprivate recipientShowConfidential: Map<string, boolean> = new Map()\n\tprivate blockExternalContent: boolean\n\tprivate readonly alwaysBlockExternalContent: boolean = false\n\t// if we're set to block external content, but there is no content to block,\n\t// we don't want to show the banner.\n\tprivate blockedExternalContent: number = 0\n\n\tconstructor(vnode: Vnode<MailEditorAttrs>) {\n\t\tconst a = vnode.attrs\n\t\tthis.attrs = a\n\t\tthis.inlineImageElements = []\n\t\tthis.mentionedInlineImages = []\n\t\tconst model = a.model\n\t\tthis.sendMailModel = model\n\t\tthis.templateModel = a.templateModel\n\t\tthis.blockExternalContent = a.doBlockExternalContent()\n\t\tthis.alwaysBlockExternalContent = a.alwaysBlockExternalContent\n\n\t\t// if we have any CC/BCC recipients, we should show these so, should the user send the mail, they know where it will be going to\n\t\tthis.areDetailsExpanded = model.bccRecipients().length + model.ccRecipients().length > 0\n\n\t\tthis.editor = new Editor(\n\t\t\t200,\n\t\t\t(html, isPaste) => {\n\t\t\t\tconst sanitized = htmlSanitizer.sanitizeFragment(html, {\n\t\t\t\t\tblockExternalContent: !isPaste && this.blockExternalContent,\n\t\t\t\t})\n\t\t\t\tthis.blockedExternalContent = sanitized.blockedExternalContent\n\n\t\t\t\tthis.mentionedInlineImages = sanitized.inlineImageCids\n\t\t\t\treturn sanitized.fragment\n\t\t\t},\n\t\t\tnull,\n\t\t)\n\n\t\tconst onEditorChanged = () => {\n\t\t\tcleanupInlineAttachments(this.editor.getDOM(), this.inlineImageElements, model.getAttachments())\n\t\t\tmodel.markAsChangedIfNecessary(true)\n\t\t\tm.redraw()\n\t\t}\n\n\t\t// call this async because the editor is not initialized before this mail editor dialog is shown\n\t\tthis.editor.initialized.promise.then(() => {\n\t\t\tthis.editor.setHTML(model.getBody())\n\n\t\t\tconst editorDom = this.editor.getDOM()\n\t\t\tconst contrastFixNeeded = isMailContrastFixNeeded(editorDom)\n\t\t\t// If mail body cannot be displayed as-is on the dark background then apply the background and text color\n\t\t\t// fix. This class will change tutanota-quote's inside of it.\n\t\t\tif (contrastFixNeeded) {\n\t\t\t\teditorDom.classList.add(\"bg-fix-quoted\")\n\t\t\t}\n\n\t\t\tthis.processInlineImages()\n\n\t\t\t// Add mutation observer to remove attachments when corresponding DOM element is removed\n\t\t\tnew MutationObserver(onEditorChanged).observe(this.editor.getDOM(), {\n\t\t\t\tattributes: false,\n\t\t\t\tchildList: true,\n\t\t\t\tsubtree: true,\n\t\t\t})\n\t\t\t// since the editor is the source for the body text, the model won't know if the body has changed unless we tell it\n\t\t\tthis.editor.addChangeListener(() => model.setBody(replaceInlineImagesWithCids(this.editor.getDOM()).innerHTML))\n\t\t\tthis.editor.addEventListener(\"pasteImage\", ({ detail }: ImagePasteEvent) => {\n\t\t\t\tconst items = Array.from(detail.clipboardData.items)\n\t\t\t\tconst imageItems = items.filter((item) => /image/.test(item.type))\n\t\t\t\tif (!imageItems.length) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tconst file = imageItems[0]?.getAsFile()\n\t\t\t\tif (file == null) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tconst reader = new FileReader()\n\t\t\t\treader.onload = () => {\n\t\t\t\t\tif (reader.result == null || \"string\" === typeof reader.result) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tconst newInlineImages = [createDataFile(file.name, file.type, new Uint8Array(reader.result))]\n\t\t\t\t\tmodel.attachFiles(newInlineImages)\n\t\t\t\t\tthis.insertInlineImages(model, newInlineImages)\n\t\t\t\t}\n\t\t\t\treader.readAsArrayBuffer(file)\n\t\t\t})\n\n\t\t\tif (a.templateModel) {\n\t\t\t\ta.templateModel.init().then((templateModel) => {\n\t\t\t\t\t// add this event listener to handle quick selection of templates inside the editor\n\t\t\t\t\tregisterTemplateShortcutListener(this.editor, templateModel)\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\n\t\tmodel.onMailChanged.map(() => m.redraw())\n\t\t// Leftover text in recipient field is an error\n\t\tmodel.setOnBeforeSendFunction(() => {\n\t\t\tlet invalidText = \"\"\n\t\t\tfor (const leftoverText of typedValues(this.recipientFieldTexts)) {\n\t\t\t\tif (leftoverText().trim() !== \"\") {\n\t\t\t\t\tinvalidText += \"\\n\" + leftoverText().trim()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (invalidText !== \"\") {\n\t\t\t\tthrow new UserError(lang.makeTranslation(\"invalidRecipients_msg\", lang.get(\"invalidRecipients_msg\") + invalidText))\n\t\t\t}\n\t\t})\n\t\tconst dialog = a.dialog()\n\n\t\tif (model.getConversationType() === ConversationType.REPLY || model.toRecipients().length) {\n\t\t\tdialog.setFocusOnLoadFunction(() => {\n\t\t\t\tthis.editor.initialized.promise.then(() => this.editor.focus())\n\t\t\t})\n\t\t}\n\n\t\tconst shortcuts: Shortcut[] = [\n\t\t\t{\n\t\t\t\tkey: Keys.SPACE,\n\t\t\t\tctrlOrCmd: true,\n\t\t\t\texec: () => this.openTemplates(),\n\t\t\t\thelp: \"openTemplatePopup_msg\",\n\t\t\t}, // B (bold), I (italic), and U (underline) are handled by squire\n\t\t\t{\n\t\t\t\tkey: Keys.B,\n\t\t\t\tctrlOrCmd: true,\n\t\t\t\texec: noOp,\n\t\t\t\thelp: \"formatTextBold_msg\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: Keys.I,\n\t\t\t\tctrlOrCmd: true,\n\t\t\t\texec: noOp,\n\t\t\t\thelp: \"formatTextItalic_msg\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: Keys.U,\n\t\t\t\tctrlOrCmd: true,\n\t\t\t\texec: noOp,\n\t\t\t\thelp: \"formatTextUnderline_msg\",\n\t\t\t},\n\t\t]\n\t\tfor (const shortcut of shortcuts) {\n\t\t\tdialog.addShortcut(shortcut)\n\t\t}\n\t\tthis.editor.initialized.promise.then(() => {\n\t\t\ta.knowledgeBaseInjection(this.editor).then((injection) => {\n\t\t\t\tthis.knowledgeBaseInjection = injection\n\t\t\t\tm.redraw()\n\t\t\t})\n\t\t})\n\t}\n\n\tprivate downloadInlineImage(model: SendMailModel, cid: string) {\n\t\tconst tutanotaFiles = model.getAttachments().filter((attachment) => isTutanotaFile(attachment))\n\t\tconst inlineAttachment = tutanotaFiles.find((attachment) => attachment.cid === cid)\n\n\t\tif (inlineAttachment && isTutanotaFile(inlineAttachment)) {\n\t\t\tlocator.fileController.open(inlineAttachment).catch(ofClass(FileOpenError, () => Dialog.message(\"canNotOpenFileOnDevice_msg\")))\n\t\t}\n\t}\n\n\tview(vnode: Vnode<MailEditorAttrs>): Children {\n\t\tconst a = vnode.attrs\n\t\tthis.attrs = a\n\t\tconst { model } = a\n\t\tthis.sendMailModel = model\n\n\t\tconst showConfidentialButton = model.containsExternalRecipients()\n\t\tconst isConfidential = model.isConfidential() && showConfidentialButton\n\t\tconst confidentialButtonAttrs: ToggleButtonAttrs = {\n\t\t\ttitle: \"confidential_action\",\n\t\t\tonToggled: (_, e) => {\n\t\t\t\te.stopPropagation()\n\t\t\t\tmodel.setConfidential(!model.isConfidential())\n\t\t\t},\n\t\t\ticon: model.isConfidential() ? Icons.Lock : Icons.Unlock,\n\t\t\ttoggled: model.isConfidential(),\n\t\t\tsize: ButtonSize.Compact,\n\t\t}\n\t\tconst attachFilesButtonAttrs: IconButtonAttrs = {\n\t\t\ttitle: \"attachFiles_action\",\n\t\t\tclick: (ev, dom) => chooseAndAttachFile(model, dom.getBoundingClientRect()).then(() => m.redraw()),\n\t\t\ticon: Icons.Attachment,\n\t\t\tsize: ButtonSize.Compact,\n\t\t}\n\t\tconst plaintextFormatting = locator.logins.getUserController().props.sendPlaintextOnly\n\t\tthis.editor.setCreatesLists(!plaintextFormatting)\n\n\t\tconst toolbarButton = () =>\n\t\t\t!plaintextFormatting\n\t\t\t\t? m(ToggleButton, {\n\t\t\t\t\t\ttitle: \"showRichTextToolbar_action\",\n\t\t\t\t\t\ticon: Icons.FontSize,\n\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t\ttoggled: a.doShowToolbar(),\n\t\t\t\t\t\tonToggled: (_, e) => {\n\t\t\t\t\t\t\ta.doShowToolbar(!a.doShowToolbar())\n\t\t\t\t\t\t\t// Stop the subject bar from being focused\n\t\t\t\t\t\t\te.stopPropagation()\n\t\t\t\t\t\t\tthis.editor.focus()\n\t\t\t\t\t\t},\n\t\t\t\t  })\n\t\t\t\t: null\n\n\t\tconst subjectFieldAttrs: TextFieldAttrs = {\n\t\t\tlabel: \"subject_label\",\n\t\t\thelpLabel: () => getConfidentialStateMessage(model.isConfidential()),\n\t\t\tvalue: model.getSubject(),\n\t\t\toninput: (val) => model.setSubject(val),\n\t\t\tinjectionsRight: () =>\n\t\t\t\tm(\".flex.end.ml-between-s.items-center\", [\n\t\t\t\t\tshowConfidentialButton ? m(ToggleButton, confidentialButtonAttrs) : null,\n\t\t\t\t\tthis.knowledgeBaseInjection ? this.renderToggleKnowledgeBase(this.knowledgeBaseInjection) : null,\n\t\t\t\t\tm(IconButton, attachFilesButtonAttrs),\n\t\t\t\t\ttoolbarButton(),\n\t\t\t\t]),\n\t\t}\n\n\t\tconst attachmentBubbleAttrs = createAttachmentBubbleAttrs(model, this.inlineImageElements)\n\n\t\tlet editCustomNotificationMailAttrs: IconButtonAttrs | null = null\n\n\t\tif (locator.logins.getUserController().isGlobalAdmin()) {\n\t\t\teditCustomNotificationMailAttrs = attachDropdown({\n\t\t\t\tmainButtonAttrs: {\n\t\t\t\t\ttitle: \"more_label\",\n\t\t\t\t\ticon: Icons.More,\n\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t},\n\t\t\t\tchildAttrs: () => [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"add_action\",\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\timport(\"../../../common/settings/EditNotificationEmailDialog.js\").then(({ showAddOrEditNotificationEmailDialog }) =>\n\t\t\t\t\t\t\t\tshowAddOrEditNotificationEmailDialog(locator.logins.getUserController()),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"edit_action\",\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\timport(\"../../../common/settings/EditNotificationEmailDialog.js\").then(({ showAddOrEditNotificationEmailDialog }) =>\n\t\t\t\t\t\t\t\tshowAddOrEditNotificationEmailDialog(locator.logins.getUserController(), model.getSelectedNotificationLanguageCode()),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\t\t}\n\n\t\treturn m(\n\t\t\t\"#mail-editor.full-height.text.touch-callout.flex.flex-column\",\n\t\t\t{\n\t\t\t\tonclick: (e: MouseEvent) => {\n\t\t\t\t\tif (e.target === this.editor.getDOM()) {\n\t\t\t\t\t\tthis.editor.focus()\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tondragover: (ev: DragEvent) => {\n\t\t\t\t\t// do not check the data transfer here because it is not always filled, e.g. in Safari\n\t\t\t\t\tev.stopPropagation()\n\t\t\t\t\tev.preventDefault()\n\t\t\t\t},\n\t\t\t\tondrop: (ev: DragEvent) => {\n\t\t\t\t\tif (ev.dataTransfer?.files && ev.dataTransfer.files.length > 0) {\n\t\t\t\t\t\tlet nativeFiles = fileListToArray(ev.dataTransfer.files)\n\t\t\t\t\t\treadLocalFiles(nativeFiles)\n\t\t\t\t\t\t\t.then((dataFiles) => {\n\t\t\t\t\t\t\t\tmodel.attachFiles(dataFiles as any)\n\t\t\t\t\t\t\t\tm.redraw()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\t\t\tconsole.log(e)\n\t\t\t\t\t\t\t\treturn Dialog.message(\"couldNotAttachFile_msg\")\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\tev.stopPropagation()\n\t\t\t\t\t\tev.preventDefault()\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\t[\n\t\t\t\tm(\".rel\", this.renderRecipientField(RecipientField.TO, this.recipientFieldTexts.to, a.search)),\n\t\t\t\tm(\n\t\t\t\t\t\".rel\",\n\t\t\t\t\tm(\n\t\t\t\t\t\tExpanderPanel,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\texpanded: this.areDetailsExpanded,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tm(\".details\", [\n\t\t\t\t\t\t\tthis.renderRecipientField(RecipientField.CC, this.recipientFieldTexts.cc, a.search),\n\t\t\t\t\t\t\tthis.renderRecipientField(RecipientField.BCC, this.recipientFieldTexts.bcc, a.search),\n\t\t\t\t\t\t]),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tm(\".wrapping-row\", [\n\t\t\t\t\tm(\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\"min-width\": \"250px\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tm(DropDownSelector, {\n\t\t\t\t\t\t\tlabel: \"sender_label\",\n\t\t\t\t\t\t\titems: getEnabledMailAddressesWithUser(model.mailboxDetails, model.user().userGroupInfo)\n\t\t\t\t\t\t\t\t.sort()\n\t\t\t\t\t\t\t\t.map((mailAddress) => ({\n\t\t\t\t\t\t\t\t\tname: mailAddress,\n\t\t\t\t\t\t\t\t\tvalue: mailAddress,\n\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\tselectedValue: a.model.getSender(),\n\t\t\t\t\t\t\tselectedValueDisplay: getMailAddressDisplayText(a.model.getSenderName(), a.model.getSender(), false),\n\t\t\t\t\t\t\tselectionChangedHandler: (selection: string) => model.setSender(selection),\n\t\t\t\t\t\t\tdropdownWidth: 250,\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t\tisConfidential\n\t\t\t\t\t\t? m(\n\t\t\t\t\t\t\t\t\".flex\",\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\t\t\"min-width\": \"250px\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\toncreate: (vnode) => {\n\t\t\t\t\t\t\t\t\t\tconst htmlDom = vnode.dom as HTMLElement\n\t\t\t\t\t\t\t\t\t\thtmlDom.style.opacity = \"0\"\n\t\t\t\t\t\t\t\t\t\treturn animations.add(htmlDom, opacity(0, 1, true))\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tonbeforeremove: (vnode) => {\n\t\t\t\t\t\t\t\t\t\tconst htmlDom = vnode.dom as HTMLElement\n\t\t\t\t\t\t\t\t\t\thtmlDom.style.opacity = \"1\"\n\t\t\t\t\t\t\t\t\t\treturn animations.add(htmlDom, opacity(1, 0, true))\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tm(\n\t\t\t\t\t\t\t\t\t\t\".flex-grow\",\n\t\t\t\t\t\t\t\t\t\tm(DropDownSelector, {\n\t\t\t\t\t\t\t\t\t\t\tlabel: \"notificationMailLanguage_label\",\n\t\t\t\t\t\t\t\t\t\t\titems: model.getAvailableNotificationTemplateLanguages().map((language) => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\t\tname: lang.get(language.textId),\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: language.code,\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\tselectedValue: model.getSelectedNotificationLanguageCode(),\n\t\t\t\t\t\t\t\t\t\t\tselectionChangedHandler: (v: string) => model.setSelectedNotificationLanguageCode(v),\n\t\t\t\t\t\t\t\t\t\t\tdropdownWidth: 250,\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\teditCustomNotificationMailAttrs\n\t\t\t\t\t\t\t\t\t\t? m(\".pt.flex-no-grow.flex-end.border-bottom.flex.items-center\", m(IconButton, editCustomNotificationMailAttrs))\n\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: null,\n\t\t\t\t]),\n\t\t\t\tisConfidential ? this.renderPasswordFields() : null,\n\t\t\t\tm(\".row\", m(TextField, subjectFieldAttrs)),\n\t\t\t\tm(\n\t\t\t\t\t\".flex-start.flex-wrap.mt-s.mb-s.gap-hpad\",\n\t\t\t\t\tattachmentBubbleAttrs.map((a) => m(AttachmentBubble, a)),\n\t\t\t\t),\n\t\t\t\tmodel.getAttachments().length > 0 ? m(\"hr.hr\") : null,\n\t\t\t\tthis.renderExternalContentBanner(this.attrs),\n\t\t\t\ta.doShowToolbar() ? this.renderToolbar(model) : null,\n\t\t\t\tm(\n\t\t\t\t\t\".pt-s.text.scroll-x.break-word-links.flex.flex-column.flex-grow\",\n\t\t\t\t\t{\n\t\t\t\t\t\tonclick: () => this.editor.focus(),\n\t\t\t\t\t},\n\t\t\t\t\tm(this.editor),\n\t\t\t\t),\n\t\t\t\tm(\".pb\"),\n\t\t\t],\n\t\t)\n\t}\n\n\tprivate renderExternalContentBanner(attrs: MailEditorAttrs): Children | null {\n\t\tif (!this.blockExternalContent || this.alwaysBlockExternalContent || this.blockedExternalContent === 0) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst showButton: BannerButtonAttrs = {\n\t\t\tlabel: \"showBlockedContent_action\",\n\t\t\tclick: () => {\n\t\t\t\tthis.updateExternalContentStatus(ContentBlockingStatus.Show)\n\t\t\t\tthis.processInlineImages()\n\t\t\t},\n\t\t}\n\n\t\treturn m(InfoBanner, {\n\t\t\tmessage: \"contentBlocked_msg\",\n\t\t\ticon: Icons.Picture,\n\t\t\thelpLink: canSeeTutaLinks(attrs.model.logins) ? InfoLink.LoadImages : null,\n\t\t\tbuttons: [showButton],\n\t\t})\n\t}\n\n\tprivate updateExternalContentStatus(status: ContentBlockingStatus) {\n\t\tthis.blockExternalContent = status === ContentBlockingStatus.Block || status === ContentBlockingStatus.AlwaysBlock\n\n\t\tconst sanitized = htmlSanitizer.sanitizeHTML(this.editor.getHTML(), {\n\t\t\tblockExternalContent: this.blockExternalContent,\n\t\t})\n\n\t\tthis.editor.setHTML(sanitized.html)\n\t}\n\n\tprivate processInlineImages() {\n\t\tthis.inlineImageElements = replaceCidsWithInlineImages(this.editor.getDOM(), this.sendMailModel.loadedInlineImages, (cid, event, dom) => {\n\t\t\tconst downloadClickHandler = createDropdown({\n\t\t\t\tlazyButtons: () => [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"download_action\",\n\t\t\t\t\t\tclick: () => this.downloadInlineImage(this.sendMailModel, cid),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\t\t\tdownloadClickHandler(downcast(event), dom)\n\t\t})\n\t}\n\n\tprivate renderToggleKnowledgeBase(knowledgeBaseInjection: DialogInjectionRightAttrs<KnowledgebaseDialogContentAttrs>) {\n\t\treturn m(ToggleButton, {\n\t\t\ttitle: \"openKnowledgebase_action\",\n\t\t\ttoggled: knowledgeBaseInjection.visible(),\n\t\t\tonToggled: () => {\n\t\t\t\tif (knowledgeBaseInjection.visible()) {\n\t\t\t\t\tknowledgeBaseInjection.visible(false)\n\t\t\t\t} else {\n\t\t\t\t\tknowledgeBaseInjection.componentAttrs.model.sortEntriesByMatchingKeywords(this.editor.getValue())\n\t\t\t\t\tknowledgeBaseInjection.visible(true)\n\t\t\t\t\tknowledgeBaseInjection.componentAttrs.model.init()\n\t\t\t\t}\n\t\t\t},\n\t\t\ticon: Icons.Book,\n\t\t\tsize: ButtonSize.Compact,\n\t\t})\n\t}\n\n\tprivate renderToolbar(model: SendMailModel): Children {\n\t\t// Toolbar is not removed from DOM directly, only it's parent (array) is so we have to animate it manually.\n\t\t// m.fragment() gives us a vnode without actual DOM element so that we can run callback on removal\n\t\treturn m.fragment(\n\t\t\t{\n\t\t\t\tonbeforeremove: ({ dom }) => animateToolbar(dom.children[0] as HTMLElement, false),\n\t\t\t},\n\t\t\t[\n\t\t\t\tm(RichTextToolbar, {\n\t\t\t\t\teditor: this.editor,\n\t\t\t\t\timageButtonClickHandler: isApp()\n\t\t\t\t\t\t? null\n\t\t\t\t\t\t: (event: Event) => this.imageButtonClickHandler(model, (event.target as HTMLElement).getBoundingClientRect()),\n\t\t\t\t\tcustomButtonAttrs: this.templateModel\n\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttitle: \"openTemplatePopup_msg\",\n\t\t\t\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\t\t\t\tthis.openTemplates()\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ticon: Icons.ListAlt,\n\t\t\t\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t  ]\n\t\t\t\t\t\t: [],\n\t\t\t\t}),\n\t\t\t\tm(\"hr.hr\"),\n\t\t\t],\n\t\t)\n\t}\n\n\tprivate async imageButtonClickHandler(model: SendMailModel, rect: DOMRect): Promise<void> {\n\t\tconst files = await chooseAndAttachFile(model, rect, ALLOWED_IMAGE_FORMATS)\n\t\tif (!files || files.length === 0) return\n\t\treturn await this.insertInlineImages(model, files)\n\t}\n\n\tprivate async insertInlineImages(model: SendMailModel, files: ReadonlyArray<DataFile | FileReference>): Promise<void> {\n\t\tfor (const file of files) {\n\t\t\tconst img = createInlineImage(file as DataFile)\n\t\t\tmodel.loadedInlineImages.set(img.cid, img)\n\t\t\tthis.inlineImageElements.push(\n\t\t\t\tthis.editor.insertImage(img.objectUrl, {\n\t\t\t\t\tcid: img.cid,\n\t\t\t\t\tstyle: \"max-width: 100%\",\n\t\t\t\t}),\n\t\t\t)\n\t\t}\n\t\tm.redraw()\n\t}\n\n\tprivate renderPasswordFields(): Children {\n\t\treturn m(\n\t\t\t\".external-recipients.overflow-hidden\",\n\t\t\t{\n\t\t\t\toncreate: (vnode) => this.animateHeight(vnode.dom as HTMLElement, true),\n\t\t\t\tonbeforeremove: (vnode) => this.animateHeight(vnode.dom as HTMLElement, false),\n\t\t\t},\n\t\t\tthis.sendMailModel\n\t\t\t\t.allRecipients()\n\t\t\t\t.filter((r) => r.type === RecipientType.EXTERNAL)\n\t\t\t\t.map((recipient) => {\n\t\t\t\t\tif (!this.recipientShowConfidential.has(recipient.address)) this.recipientShowConfidential.set(recipient.address, false)\n\n\t\t\t\t\treturn m(PasswordField, {\n\t\t\t\t\t\toncreate: (vnode) => this.animateHeight(vnode.dom as HTMLElement, true),\n\t\t\t\t\t\tonbeforeremove: (vnode) => this.animateHeight(vnode.dom as HTMLElement, false),\n\t\t\t\t\t\tlabel: lang.getTranslation(\"passwordFor_label\", { \"{1}\": recipient.address }),\n\t\t\t\t\t\tvalue: this.sendMailModel.getPassword(recipient.address),\n\t\t\t\t\t\tpasswordStrength: this.sendMailModel.getPasswordStrength(recipient),\n\t\t\t\t\t\tstatus: \"auto\",\n\t\t\t\t\t\tautocompleteAs: Autocomplete.off,\n\t\t\t\t\t\toninput: (val) => this.sendMailModel.setPassword(recipient.address, val),\n\t\t\t\t\t})\n\t\t\t\t}),\n\t\t)\n\t}\n\n\tprivate renderRecipientField(field: RecipientField, fieldText: Stream<string>, search: RecipientsSearchModel): Children {\n\t\tconst label = (\n\t\t\t{\n\t\t\t\tto: \"to_label\",\n\t\t\t\tcc: \"cc_label\",\n\t\t\t\tbcc: \"bcc_label\",\n\t\t\t} as const\n\t\t)[field]\n\n\t\treturn m(MailRecipientsTextField, {\n\t\t\tlabel,\n\t\t\ttext: fieldText(),\n\t\t\tonTextChanged: (text) => fieldText(text),\n\t\t\trecipients: this.sendMailModel.getRecipientList(field),\n\t\t\tonRecipientAdded: async (address, name) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.sendMailModel.addRecipient(field, { address, name })\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (isOfflineError(e)) {\n\t\t\t\t\t\t// we are offline but we want to show the error dialog only when we click on send.\n\t\t\t\t\t} else if (e instanceof TooManyRequestsError) {\n\t\t\t\t\t\tawait Dialog.message(\"tooManyAttempts_msg\")\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tonRecipientRemoved: (address) => this.sendMailModel.removeRecipientByAddress(address, field),\n\t\t\tgetRecipientClickedDropdownAttrs: (address) => {\n\t\t\t\tconst recipient = this.sendMailModel.getRecipient(field, address)!\n\t\t\t\treturn this.getRecipientClickedContextButtons(recipient, field)\n\t\t\t},\n\t\t\tdisabled: !this.sendMailModel.logins.isInternalUserLoggedIn(),\n\t\t\tinjectionsRight:\n\t\t\t\tfield === RecipientField.TO && this.sendMailModel.logins.isInternalUserLoggedIn()\n\t\t\t\t\t? m(\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\tm(ToggleButton, {\n\t\t\t\t\t\t\t\ttitle: \"show_action\",\n\t\t\t\t\t\t\t\ticon: BootIcons.Expand,\n\t\t\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t\t\t\ttoggled: this.areDetailsExpanded,\n\t\t\t\t\t\t\t\tonToggled: (_, e) => {\n\t\t\t\t\t\t\t\t\te.stopPropagation()\n\t\t\t\t\t\t\t\t\tthis.areDetailsExpanded = !this.areDetailsExpanded\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t  )\n\t\t\t\t\t: null,\n\t\t\tsearch,\n\t\t})\n\t}\n\n\tprivate async getRecipientClickedContextButtons(recipient: ResolvableRecipient, field: RecipientField): Promise<DropdownChildAttrs[]> {\n\t\tconst { entity, contactModel } = this.sendMailModel\n\n\t\tconst canEditBubbleRecipient = locator.logins.getUserController().isInternalUser() && !locator.logins.isEnabled(FeatureType.DisableContacts)\n\n\t\tconst canRemoveBubble = locator.logins.getUserController().isInternalUser()\n\n\t\tconst createdContactReceiver = (contactElementId: Id) => {\n\t\t\tconst mailAddress = recipient.address\n\n\t\t\tcontactModel.getContactListId().then((contactListId: string) => {\n\t\t\t\tif (!contactListId) return\n\t\t\t\tconst id: IdTuple = [contactListId, contactElementId]\n\t\t\t\tentity.load(ContactTypeRef, id).then((contact: Contact) => {\n\t\t\t\t\tif (contact.mailAddresses.some((ma) => cleanMatch(ma.address, mailAddress))) {\n\t\t\t\t\t\trecipient.setName(getContactDisplayName(contact))\n\t\t\t\t\t\trecipient.setContact(contact)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.sendMailModel.removeRecipient(recipient, field, false)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\tconst contextButtons: Array<DropdownChildAttrs> = []\n\n\t\tif (canEditBubbleRecipient) {\n\t\t\tif (recipient.contact && recipient.contact._id) {\n\t\t\t\tcontextButtons.push({\n\t\t\t\t\tlabel: \"editContact_label\",\n\t\t\t\t\tclick: () => {\n\t\t\t\t\t\timport(\"../../contacts/ContactEditor\").then(({ ContactEditor }) => new ContactEditor(entity, recipient.contact).show())\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tcontextButtons.push({\n\t\t\t\t\tlabel: \"createContact_action\",\n\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t// contact list\n\t\t\t\t\t\tcontactModel.getContactListId().then((contactListId: Id) => {\n\t\t\t\t\t\t\tconst newContact = createNewContact(locator.logins.getUserController().user, recipient.address, recipient.name)\n\t\t\t\t\t\t\timport(\"../../contacts/ContactEditor\").then(({ ContactEditor }) => {\n\t\t\t\t\t\t\t\t// external users don't see edit buttons\n\t\t\t\t\t\t\t\tnew ContactEditor(entity, newContact, assertNotNull(contactListId), createdContactReceiver).show()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tif (canRemoveBubble) {\n\t\t\tcontextButtons.push({\n\t\t\t\tlabel: \"remove_action\",\n\t\t\t\tclick: () => this.sendMailModel.removeRecipient(recipient, field, false),\n\t\t\t})\n\t\t}\n\n\t\treturn contextButtons\n\t}\n\n\tprivate openTemplates() {\n\t\tif (this.templateModel) {\n\t\t\tthis.templateModel.init().then((templateModel) => {\n\t\t\t\tshowTemplatePopupInEditor(templateModel, this.editor, null, this.editor.getSelectedText())\n\t\t\t})\n\t\t}\n\t}\n\n\tprivate animateHeight(domElement: HTMLElement, fadein: boolean): AnimationPromise {\n\t\tlet childHeight = domElement.offsetHeight\n\t\treturn animations.add(domElement, fadein ? height(0, childHeight) : height(childHeight, 0)).then(() => {\n\t\t\tdomElement.style.height = \"\"\n\t\t})\n\t}\n}\n\n/**\n * Creates a new Dialog with a MailEditor inside.\n * @param model\n * @param blockExternalContent\n * @param alwaysBlockExternalContent\n * @returns {Dialog}\n * @private\n */\nasync function createMailEditorDialog(model: SendMailModel, blockExternalContent = false, alwaysBlockExternalContent = false): Promise<Dialog> {\n\tlet dialog: Dialog\n\tlet mailEditorAttrs: MailEditorAttrs\n\n\tconst save = (showProgress: boolean = true) => {\n\t\tconst savePromise = model.saveDraft(true, MailMethod.NONE)\n\n\t\tif (showProgress) {\n\t\t\treturn showProgressDialog(\"save_msg\", savePromise)\n\t\t} else {\n\t\t\treturn savePromise\n\t\t}\n\t}\n\n\tconst send = async () => {\n\t\tif (model.isSharedMailbox() && model.containsExternalRecipients() && model.isConfidential()) {\n\t\t\tawait Dialog.message(\"sharedMailboxCanNotSendConfidentialExternal_msg\")\n\t\t\treturn\n\t\t}\n\n\t\ttry {\n\t\t\tconst success = await model.send(MailMethod.NONE, Dialog.confirm, showProgressDialog)\n\t\t\tif (success) {\n\t\t\t\tdispose()\n\t\t\t\tdialog.close()\n\n\t\t\t\tawait handleRatingByEvent()\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (e instanceof UserError) {\n\t\t\t\tshowUserError(e)\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\t// keep track of things we need to dispose of when the editor is completely closed\n\tconst disposables: { dispose: () => unknown }[] = []\n\n\tconst dispose = () => {\n\t\tmodel.dispose()\n\t\tif (templatePopupModel) templatePopupModel.dispose()\n\t\tfor (const disposable of disposables) {\n\t\t\tdisposable.dispose()\n\t\t}\n\t}\n\n\tconst minimize = () => {\n\t\tlet saveStatus = stream<SaveStatus>({ status: SaveStatusEnum.Saving })\n\t\tif (model.hasMailChanged()) {\n\t\t\tsave(false)\n\t\t\t\t.then(() => saveStatus({ status: SaveStatusEnum.Saved }))\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconst reason = isOfflineError(e) ? SaveErrorReason.ConnectionLost : SaveErrorReason.Unknown\n\n\t\t\t\t\tsaveStatus({ status: SaveStatusEnum.NotSaved, reason })\n\n\t\t\t\t\t// If we don't show the error in the minimized error dialog,\n\t\t\t\t\t// Then we need to communicate it in a dialog or as an unhandled error\n\t\t\t\t\tif (reason === SaveErrorReason.Unknown) {\n\t\t\t\t\t\tif (e instanceof UserError) {\n\t\t\t\t\t\t\tshowUserError(e)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.finally(() => m.redraw())\n\t\t} else if (!model.draft) {\n\t\t\t// If the mail is unchanged and there was no preexisting draft, close instead of saving and return to not show minimized mail editor\n\t\t\tdispose()\n\t\t\tdialog.close()\n\t\t\treturn\n\t\t}\n\t\t// If the mail is unchanged and there /is/ a preexisting draft, there was no change and the mail is already saved\n\t\telse saveStatus = stream<SaveStatus>({ status: SaveStatusEnum.Saved })\n\t\tshowMinimizedMailEditor(dialog, model, mailLocator.minimizedMailModel, locator.eventController, dispose, saveStatus)\n\t}\n\n\tlet windowCloseUnsubscribe = () => {}\n\n\tconst headerBarAttrs: DialogHeaderBarAttrs = {\n\t\tleft: [\n\t\t\t{\n\t\t\t\tlabel: \"close_alt\",\n\t\t\t\tclick: () => minimize(),\n\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t},\n\t\t],\n\t\tright: [\n\t\t\t{\n\t\t\t\tlabel: \"send_action\",\n\t\t\t\tclick: () => {\n\t\t\t\t\tsend()\n\t\t\t\t},\n\t\t\t\ttype: ButtonType.Primary,\n\t\t\t},\n\t\t],\n\t\tmiddle: dialogTitleTranslationKey(model.getConversationType()),\n\t\tcreate: () => {\n\t\t\tif (isBrowser()) {\n\t\t\t\t// Have a simple listener on browser, so their browser will make the user ask if they are sure they want to close when closing the tab/window\n\t\t\t\twindowCloseUnsubscribe = windowFacade.addWindowCloseListener(() => {})\n\t\t\t} else if (isDesktop()) {\n\t\t\t\t// Simulate clicking the Close button when on the desktop so they can see they can save a draft rather than completely closing it\n\t\t\t\twindowCloseUnsubscribe = windowFacade.addWindowCloseListener(() => {\n\t\t\t\t\tminimize()\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tremove: () => {\n\t\t\twindowCloseUnsubscribe()\n\t\t},\n\t}\n\tconst templatePopupModel =\n\t\tlocator.logins.isInternalUserLoggedIn() && client.isDesktopDevice()\n\t\t\t? new TemplatePopupModel(locator.eventController, locator.logins, locator.entityClient)\n\t\t\t: null\n\n\tconst createKnowledgebaseButtonAttrs = async (editor: Editor) => {\n\t\tif (locator.logins.isInternalUserLoggedIn()) {\n\t\t\tconst customer = await locator.logins.getUserController().loadCustomer()\n\t\t\t// only create knowledgebase button for internal users with valid template group and enabled KnowledgebaseFeature\n\t\t\tif (\n\t\t\t\tstyles.isDesktopLayout() &&\n\t\t\t\ttemplatePopupModel &&\n\t\t\t\tlocator.logins.getUserController().getTemplateMemberships().length > 0 &&\n\t\t\t\tisCustomizationEnabledForCustomer(customer, FeatureType.KnowledgeBase)\n\t\t\t) {\n\t\t\t\tconst knowledgebaseModel = new KnowledgeBaseModel(locator.eventController, locator.entityClient, locator.logins.getUserController())\n\t\t\t\tawait knowledgebaseModel.init()\n\n\t\t\t\t// make sure we dispose knowledbaseModel once the editor is closed\n\t\t\t\tdisposables.push(knowledgebaseModel)\n\n\t\t\t\tconst knowledgebaseInjection = createKnowledgeBaseDialogInjection(knowledgebaseModel, templatePopupModel, editor)\n\t\t\t\tdialog.setInjectionRight(knowledgebaseInjection)\n\t\t\t\treturn knowledgebaseInjection\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\tmailEditorAttrs = createMailEditorAttrs(\n\t\tmodel,\n\t\tblockExternalContent,\n\t\tmodel.toRecipients().length !== 0,\n\t\t() => dialog,\n\t\ttemplatePopupModel,\n\t\tcreateKnowledgebaseButtonAttrs,\n\t\tawait locator.recipientsSearchModel(),\n\t\talwaysBlockExternalContent,\n\t)\n\tconst shortcuts: Shortcut[] = [\n\t\t{\n\t\t\tkey: Keys.ESC,\n\t\t\texec: () => {\n\t\t\t\tminimize()\n\t\t\t},\n\t\t\thelp: \"close_alt\",\n\t\t},\n\t\t{\n\t\t\tkey: Keys.S,\n\t\t\tctrlOrCmd: true,\n\t\t\texec: () => {\n\t\t\t\tsave().catch(ofClass(UserError, showUserError))\n\t\t\t},\n\t\t\thelp: \"save_action\",\n\t\t},\n\t\t{\n\t\t\tkey: Keys.S,\n\t\t\tctrlOrCmd: true,\n\t\t\tshift: true,\n\t\t\texec: () => {\n\t\t\t\tsend()\n\t\t\t},\n\t\t\thelp: \"send_action\",\n\t\t},\n\t\t{\n\t\t\tkey: Keys.RETURN,\n\t\t\tctrlOrCmd: true,\n\t\t\texec: () => {\n\t\t\t\tsend()\n\t\t\t},\n\t\t\thelp: \"send_action\",\n\t\t},\n\t]\n\tdialog = Dialog.editDialog(headerBarAttrs, MailEditor, mailEditorAttrs)\n\tdialog.setCloseHandler(() => minimize())\n\n\tfor (let shortcut of shortcuts) {\n\t\tdialog.addShortcut(shortcut)\n\t}\n\n\treturn dialog\n}\n\n/**\n * open a MailEditor\n * @param mailboxDetails details to use when sending an email\n * @returns {*}\n * @private\n * @throws PermissionError\n */\nexport async function newMailEditor(mailboxDetails: MailboxDetail): Promise<Dialog> {\n\t// We check approval status so as to get a dialog informing the user that they cannot send mails\n\t// but we still want to open the mail editor because they should still be able to contact sales@tutao.de\n\tawait checkApprovalStatus(locator.logins, false)\n\tconst { appendEmailSignature } = await import(\"../signature/Signature\")\n\tconst signature = appendEmailSignature(\"\", locator.logins.getUserController().props)\n\tconst detailsProperties = await getMailboxDetailsAndProperties(mailboxDetails)\n\treturn newMailEditorFromTemplate(detailsProperties.mailboxDetails, {}, \"\", signature)\n}\n\nasync function getExternalContentRulesForEditor(model: SendMailModel, currentStatus: boolean) {\n\tlet contentRules\n\tconst previousMail = model.getPreviousMail()\n\n\tif (!previousMail) {\n\t\tcontentRules = {\n\t\t\talwaysBlockExternalContent: false,\n\t\t\t// external content in a mail for which we don't have a\n\t\t\t// previous mail must have been put there by us.\n\t\t\tblockExternalContent: false,\n\t\t}\n\t} else {\n\t\tconst externalImageRule = await locator.configFacade.getExternalImageRule(previousMail.sender.address).catch((e: unknown) => {\n\t\t\tconsole.log(\"Error getting external image rule:\", e)\n\t\t\treturn ExternalImageRule.None\n\t\t})\n\n\t\tlet isAuthenticatedMail\n\t\tif (previousMail.authStatus !== null) {\n\t\t\tisAuthenticatedMail = previousMail.authStatus === MailAuthenticationStatus.AUTHENTICATED\n\t\t} else {\n\t\t\tconst mailDetails = await locator.mailFacade.loadMailDetailsBlob(previousMail)\n\t\t\tisAuthenticatedMail = mailDetails.authStatus === MailAuthenticationStatus.AUTHENTICATED\n\t\t}\n\n\t\tif (externalImageRule === ExternalImageRule.Block || (externalImageRule === ExternalImageRule.None && model.isUserPreviousSender())) {\n\t\t\tcontentRules = {\n\t\t\t\t// When we have an explicit rule for blocking images we don´t\n\t\t\t\t// want to prompt the user about showing images again\n\t\t\t\talwaysBlockExternalContent: externalImageRule === ExternalImageRule.Block,\n\t\t\t\tblockExternalContent: true,\n\t\t\t}\n\t\t} else if (externalImageRule === ExternalImageRule.Allow && isAuthenticatedMail) {\n\t\t\tcontentRules = {\n\t\t\t\talwaysBlockExternalContent: false,\n\t\t\t\tblockExternalContent: false,\n\t\t\t}\n\t\t} else {\n\t\t\tcontentRules = {\n\t\t\t\talwaysBlockExternalContent: false,\n\t\t\t\tblockExternalContent: currentStatus,\n\t\t\t}\n\t\t}\n\t}\n\n\treturn contentRules\n}\n\nexport async function newMailEditorAsResponse(\n\targs: InitAsResponseArgs,\n\tblockExternalContent: boolean,\n\tinlineImages: InlineImages,\n\tmailboxDetails?: MailboxDetail,\n): Promise<Dialog> {\n\tconst detailsProperties = await getMailboxDetailsAndProperties(mailboxDetails)\n\tconst model = await locator.sendMailModel(detailsProperties.mailboxDetails, detailsProperties.mailboxProperties)\n\tawait model.initAsResponse(args, inlineImages)\n\n\tconst externalImageRules = await getExternalContentRulesForEditor(model, blockExternalContent)\n\treturn createMailEditorDialog(model, externalImageRules?.blockExternalContent, externalImageRules?.alwaysBlockExternalContent)\n}\n\nexport async function newMailEditorFromDraft(\n\tmail: Mail,\n\tmailDetails: MailDetails,\n\tattachments: TutanotaFile[],\n\tinlineImages: InlineImages,\n\tblockExternalContent: boolean,\n\tmailboxDetails?: MailboxDetail,\n): Promise<Dialog> {\n\tconst detailsProperties = await getMailboxDetailsAndProperties(mailboxDetails)\n\tconst model = await locator.sendMailModel(detailsProperties.mailboxDetails, detailsProperties.mailboxProperties)\n\tawait model.initWithDraft(mail, mailDetails, attachments, inlineImages)\n\tconst externalImageRules = await getExternalContentRulesForEditor(model, blockExternalContent)\n\treturn createMailEditorDialog(model, externalImageRules?.blockExternalContent, externalImageRules?.alwaysBlockExternalContent)\n}\n\nexport async function newMailtoUrlMailEditor(mailtoUrl: string, confidential: boolean, mailboxDetails?: MailboxDetail): Promise<Dialog> {\n\tconst detailsProperties = await getMailboxDetailsAndProperties(mailboxDetails)\n\tconst mailTo = parseMailtoUrl(mailtoUrl)\n\tlet dataFiles: Attachment[] = []\n\n\tif (mailTo.attach) {\n\t\tconst attach = mailTo.attach\n\n\t\tif (isDesktop()) {\n\t\t\tconst files = await Promise.all(attach.map((uri) => locator.fileApp.readDataFile(uri)))\n\t\t\tdataFiles = files.filter(isNotNull)\n\t\t}\n\t\t// make sure the user is aware that (and which) files have been attached\n\t\tconst keepAttachments =\n\t\t\tdataFiles.length === 0 ||\n\t\t\t(await Dialog.confirm(\"attachmentWarning_msg\", \"attachFiles_action\", () =>\n\t\t\t\tdataFiles.map((df, i) =>\n\t\t\t\t\tm(\n\t\t\t\t\t\t\".text-break.selectable.mt-xs\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttitle: attach[i],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdf.name,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t))\n\n\t\tif (keepAttachments) {\n\t\t\tconst sizeCheckResult = checkAttachmentSize(dataFiles)\n\t\t\tdataFiles = sizeCheckResult.attachableFiles\n\n\t\t\tif (sizeCheckResult.tooBigFiles.length > 0) {\n\t\t\t\tawait Dialog.message(\"tooBigAttachment_msg\", () => sizeCheckResult.tooBigFiles.map((file) => m(\".text-break.selectable\", file)))\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new CancelledError(\"user cancelled opening mail editor with attachments\")\n\t\t}\n\t}\n\n\treturn newMailEditorFromTemplate(\n\t\tdetailsProperties.mailboxDetails,\n\t\tmailTo.recipients,\n\t\tmailTo.subject || \"\",\n\t\tappendEmailSignature(mailTo.body || \"\", locator.logins.getUserController().props),\n\t\tdataFiles,\n\t\tconfidential,\n\t\tundefined,\n\t\ttrue, // emails created with mailto should always save as draft\n\t)\n}\n\nexport async function newMailEditorFromTemplate(\n\tmailboxDetails: MailboxDetail,\n\trecipients: Recipients,\n\tsubject: string,\n\tbodyText: string,\n\tattachments?: ReadonlyArray<Attachment>,\n\tconfidential?: boolean,\n\tsenderMailAddress?: string,\n\tinitialChangedState?: boolean,\n): Promise<Dialog> {\n\tconst mailboxProperties = await locator.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot)\n\treturn locator\n\t\t.sendMailModel(mailboxDetails, mailboxProperties)\n\t\t.then((model) => model.initWithTemplate(recipients, subject, bodyText, attachments, confidential, senderMailAddress, initialChangedState))\n\t\t.then((model) => createMailEditorDialog(model))\n}\n\nexport function getSupportMailSignature(): Promise<string> {\n\treturn import(\"../../../common/calendar/date/CalendarUtils\").then(({ getTimeZone }) => {\n\t\treturn (\n\t\t\tLINE_BREAK +\n\t\t\tLINE_BREAK +\n\t\t\t\"--\" +\n\t\t\t`<br>Client: ${client.getIdentifier()}` +\n\t\t\t`<br>Tutanota version: ${env.versionNumber}` +\n\t\t\t`<br>Time zone: ${getTimeZone()}` +\n\t\t\t`<br>User agent:<br> ${navigator.userAgent}`\n\t\t)\n\t})\n}\n\n/**\n * Create and show a new mail editor with a support query, addressed to premium support,\n * or show an option to upgrade\n * @param subject\n * @param mailboxDetails\n * @returns true if sending support email is allowed, false if upgrade to premium is required (may have been ordered)\n */\nexport async function writeSupportMail(subject: string = \"\", mailboxDetails?: MailboxDetail): Promise<boolean> {\n\tif (locator.logins.getUserController().isPremiumAccount()) {\n\t\tconst detailsProperties = await getMailboxDetailsAndProperties(mailboxDetails)\n\t\tconst recipients = {\n\t\t\tto: [\n\t\t\t\t{\n\t\t\t\t\tname: null,\n\t\t\t\t\taddress: \"premium@tutao.de\",\n\t\t\t\t},\n\t\t\t],\n\t\t}\n\t\tconst signature = await getSupportMailSignature()\n\t\tconst dialog = await newMailEditorFromTemplate(detailsProperties.mailboxDetails, recipients, subject, signature)\n\t\tdialog.show()\n\t\treturn true\n\t} else {\n\t\treturn import(\"../../../common/subscription/PriceUtils\")\n\t\t\t.then(({ formatPrice }) => {\n\t\t\t\tconst message = lang.get(\"premiumOffer_msg\", {\n\t\t\t\t\t\"{1}\": formatPrice(1, true),\n\t\t\t\t})\n\t\t\t\tconst title = lang.get(\"upgradeReminderTitle_msg\")\n\t\t\t\treturn Dialog.reminder(title, message)\n\t\t\t})\n\t\t\t.then((confirm) => {\n\t\t\t\tif (confirm) {\n\t\t\t\t\timport(\"../../../common/subscription/UpgradeSubscriptionWizard\").then((utils) => utils.showUpgradeWizard(locator.logins))\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => false)\n\t}\n}\n\n/**\n * Create and show a new mail editor with an invite message\n * @param referralLink\n * @returns {*}\n */\nexport async function writeInviteMail(referralLink: string) {\n\tconst detailsProperties = await getMailboxDetailsAndProperties(null)\n\tconst username = locator.logins.getUserController().userGroupInfo.name\n\tconst body = lang.get(\"invitationMailBody_msg\", {\n\t\t\"{registrationLink}\": referralLink,\n\t\t\"{username}\": username,\n\t})\n\tconst { invitationSubject } = await locator.serviceExecutor.get(TranslationService, createTranslationGetIn({ lang: lang.code }))\n\tconst dialog = await newMailEditorFromTemplate(detailsProperties.mailboxDetails, {}, invitationSubject, body, [], false)\n\tdialog.show()\n}\n\n/**\n * Create and show a new mail editor with an invite message\n * @param link the link to the giftcard\n * @param mailboxDetails\n * @returns {*}\n */\nexport async function writeGiftCardMail(link: string, mailboxDetails?: MailboxDetail) {\n\tconst detailsProperties = await getMailboxDetailsAndProperties(mailboxDetails)\n\tconst bodyText = lang\n\t\t.get(\"defaultShareGiftCardBody_msg\", {\n\t\t\t\"{link}\": '<a href=\"' + link + '\">' + link + \"</a>\",\n\t\t\t\"{username}\": locator.logins.getUserController().userGroupInfo.name,\n\t\t})\n\t\t.split(\"\\n\")\n\t\t.join(\"<br />\")\n\tconst { giftCardSubject } = await locator.serviceExecutor.get(TranslationService, createTranslationGetIn({ lang: lang.code }))\n\tlocator\n\t\t.sendMailModel(detailsProperties.mailboxDetails, detailsProperties.mailboxProperties)\n\t\t.then((model) => model.initWithTemplate({}, giftCardSubject, appendEmailSignature(bodyText, locator.logins.getUserController().props), [], false))\n\t\t.then((model) => createMailEditorDialog(model, false))\n\t\t.then((dialog) => dialog.show())\n}\n\nasync function getMailboxDetailsAndProperties(\n\tmailboxDetails: MailboxDetail | null | undefined,\n): Promise<{ mailboxDetails: MailboxDetail; mailboxProperties: MailboxProperties }> {\n\tmailboxDetails = mailboxDetails ?? (await locator.mailboxModel.getUserMailboxDetails())\n\tconst mailboxProperties = await locator.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot)\n\treturn { mailboxDetails, mailboxProperties }\n}\n"],"mappings":"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"}