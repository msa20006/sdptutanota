{"version":3,"file":"DesktopAlarmSchedulerTest-CJYUpgHB.js","names":["wm: WindowManager","notifier: DesktopNotifier","alarmStorage: DesktopAlarmStorage","desktopCrypto: DesktopNativeCryptoFacade","alarmScheduler: AlarmScheduler","an: EncryptedAlarmNotification","userId: Id | null","decAn: AlarmNotification","an: AlarmNotification | EncryptedAlarmNotification","formatNotificationForDisplay","eventTime: Date","summary: string","dateString: string","alarmScheduler: AlarmScheduler","alarmIdentifier: string"],"sources":["../../src/common/desktop/sse/DesktopAlarmScheduler.ts","../tests/desktop/sse/DesktopAlarmSchedulerTest.ts"],"sourcesContent":["import { OperationType } from \"../../api/common/TutanotaConstants\"\nimport type { AlarmNotification } from \"../../api/entities/sys/TypeRefs.js\"\nimport { AlarmNotificationTypeRef } from \"../../api/entities/sys/TypeRefs.js\"\nimport type { DesktopNotifier } from \"../DesktopNotifier\"\nimport { NotificationResult } from \"../DesktopNotifier\"\nimport type { WindowManager } from \"../DesktopWindowManager\"\nimport type { DesktopAlarmStorage } from \"./DesktopAlarmStorage\"\nimport type { DesktopNativeCryptoFacade } from \"../DesktopNativeCryptoFacade\"\nimport { log } from \"../DesktopLog\"\nimport type { AlarmScheduler } from \"../../calendar/date/AlarmScheduler.js\"\nimport { elementIdPart } from \"../../api/common/utils/EntityUtils\"\nimport { resolveTypeReference } from \"../../api/common/EntityFunctions\"\nimport { EncryptedAlarmNotification } from \"../../native/common/EncryptedAlarmNotification.js\"\nimport { base64ToUint8Array, isSameDay } from \"@tutao/tutanota-utils\"\nimport { CryptoError } from \"@tutao/tutanota-crypto/error.js\"\nimport { hasError } from \"../../api/common/utils/ErrorUtils.js\"\nimport { formatDateWithWeekdayAndTime, formatTime } from \"../../misc/Formatter\"\n\nexport interface NativeAlarmScheduler {\n\thandleAlarmNotification(an: EncryptedAlarmNotification): Promise<void>\n\n\tunscheduleAllAlarms(userId?: Id | null): Promise<void>\n\n\trescheduleAll(): Promise<void>\n}\n\nexport class DesktopAlarmScheduler implements NativeAlarmScheduler {\n\tconstructor(\n\t\tprivate readonly wm: WindowManager,\n\t\tprivate readonly notifier: DesktopNotifier,\n\t\tprivate readonly alarmStorage: DesktopAlarmStorage,\n\t\tprivate readonly desktopCrypto: DesktopNativeCryptoFacade,\n\t\tprivate readonly alarmScheduler: AlarmScheduler,\n\t) {}\n\n\t/**\n\t * stores, deletes and schedules alarm notifications\n\t * @param an the AlarmNotification to handle\n\t */\n\tasync handleAlarmNotification(an: EncryptedAlarmNotification): Promise<void> {\n\t\tif (an.operation === OperationType.CREATE) {\n\t\t\tawait this.handleCreateAlarm(an)\n\t\t} else if (an.operation === OperationType.DELETE) {\n\t\t\tlog.debug(`deleting alarm notifications for ${an.alarmInfo.alarmIdentifier}!`)\n\n\t\t\tthis.handleDeleteAlarm(an)\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t`received AlarmNotification (alarmInfo identifier ${an.alarmInfo.alarmIdentifier}) with unsupported operation ${an.operation}, ignoring`,\n\t\t\t)\n\t\t}\n\t}\n\n\tasync unscheduleAllAlarms(userId: Id | null = null): Promise<void> {\n\t\tconst alarms = await this.alarmStorage.getScheduledAlarms()\n\t\tfor (const alarm of alarms) {\n\t\t\tif (userId == null || alarm.user === userId) {\n\t\t\t\tthis.cancelAlarms(alarm)\n\t\t\t}\n\t\t}\n\t\treturn this.alarmStorage.deleteAllAlarms(userId)\n\t}\n\n\t/**\n\t * read all stored alarms and reschedule the notifications\n\t */\n\tasync rescheduleAll(): Promise<void> {\n\t\tconst alarms = await this.alarmStorage.getScheduledAlarms()\n\n\t\tfor (const alarm of alarms) {\n\t\t\tawait this.decryptAndSchedule(alarm)\n\t\t}\n\t}\n\n\tprivate async decryptAndSchedule(an: EncryptedAlarmNotification): Promise<void> {\n\t\tfor (const currentKey of an.notificationSessionKeys) {\n\t\t\tconst pushIdentifierSessionKey = await this.alarmStorage.getPushIdentifierSessionKey(currentKey)\n\n\t\t\tif (!pushIdentifierSessionKey) {\n\t\t\t\t// this key is either not for us (we don't have the right PushIdentifierSessionKey in our local storage)\n\t\t\t\t// or we couldn't decrypt the NotificationSessionKey for some reason\n\t\t\t\t// either way, we probably can't use it.\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tconst decAn: AlarmNotification = await this.desktopCrypto.decryptAndMapToInstance(\n\t\t\t\tawait resolveTypeReference(AlarmNotificationTypeRef),\n\t\t\t\tan,\n\t\t\t\tpushIdentifierSessionKey,\n\t\t\t\tbase64ToUint8Array(currentKey.pushIdentifierSessionEncSessionKey),\n\t\t\t)\n\n\t\t\tif (hasError(decAn)) {\n\t\t\t\t// some property of the AlarmNotification couldn't be decrypted with the selected key\n\t\t\t\t// throw away the key that caused the error and try the next one\n\t\t\t\tawait this.alarmStorage.removePushIdentifierKey(elementIdPart(currentKey.pushIdentifier))\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// we just want to keep the key that can decrypt the AlarmNotification\n\t\t\tan.notificationSessionKeys = [currentKey]\n\t\t\treturn this.scheduleAlarms(decAn)\n\t\t}\n\n\t\t// none of the NotificationSessionKeys in the AlarmNotification worked.\n\t\t// this is indicative of a serious problem with the stored keys.\n\t\t// therefore, we should invalidate the sseInfo and throw away\n\t\t// our pushEncSessionKeys.\n\t\tthrow new CryptoError(\"could not decrypt alarmNotification\")\n\t}\n\n\tprivate handleDeleteAlarm(an: EncryptedAlarmNotification) {\n\t\tthis.cancelAlarms(an)\n\n\t\tthis.alarmStorage.deleteAlarm(an.alarmInfo.alarmIdentifier)\n\t}\n\n\tprivate async handleCreateAlarm(an: EncryptedAlarmNotification) {\n\t\tlog.debug(\"creating alarm notification!\")\n\t\tawait this.decryptAndSchedule(an)\n\t\tawait this.alarmStorage.storeAlarm(an)\n\t}\n\n\tprivate cancelAlarms(an: AlarmNotification | EncryptedAlarmNotification): void {\n\t\tthis.alarmScheduler.cancelAlarm(an.alarmInfo.alarmIdentifier)\n\t}\n\n\tprivate scheduleAlarms(decAn: AlarmNotification): void {\n\t\tconst eventInfo = {\n\t\t\tstartTime: decAn.eventStart,\n\t\t\tendTime: decAn.eventEnd,\n\t\t\tsummary: decAn.summary,\n\t\t}\n\n\t\tthis.alarmScheduler.scheduleAlarm(eventInfo, decAn.alarmInfo, decAn.repeatRule, (eventTime, summary) => {\n\t\t\tconst { title, body } = formatNotificationForDisplay(eventTime, summary)\n\t\t\tthis.notifier.submitGroupedNotification(title, body, decAn.alarmInfo.alarmIdentifier, (res) => {\n\t\t\t\tif (res === NotificationResult.Click) {\n\t\t\t\t\tthis.wm.openCalendar({\n\t\t\t\t\t\tuserId: decAn.user,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n}\n\nexport function formatNotificationForDisplay(eventTime: Date, summary: string): { title: string; body: string } {\n\tlet dateString: string\n\n\tif (isSameDay(eventTime, new Date())) {\n\t\tdateString = formatTime(eventTime)\n\t} else {\n\t\tdateString = formatDateWithWeekdayAndTime(eventTime)\n\t}\n\n\tconst body = `${dateString} ${summary}`\n\n\treturn { body, title: body }\n}\n","import o from \"@tutao/otest\"\nimport n from \"../../nodemocker.js\"\nimport { EndType, RepeatPeriod } from \"../../../../src/common/api/common/TutanotaConstants.js\"\nimport { DesktopAlarmScheduler } from \"../../../../src/common/desktop/sse/DesktopAlarmScheduler.js\"\nimport { downcast, lastThrow } from \"@tutao/tutanota-utils\"\nimport { WindowManager } from \"../../../../src/common/desktop/DesktopWindowManager.js\"\nimport { DesktopNotifier, NotificationResult } from \"../../../../src/common/desktop/DesktopNotifier.js\"\nimport { DesktopAlarmStorage } from \"../../../../src/common/desktop/sse/DesktopAlarmStorage.js\"\nimport { DesktopNativeCryptoFacade } from \"../../../../src/common/desktop/DesktopNativeCryptoFacade.js\"\nimport { assertThrows, spy } from \"@tutao/tutanota-test-utils\"\nimport { EncryptedAlarmNotification } from \"../../../../src/common/native/common/EncryptedAlarmNotification.js\"\nimport { CryptoError } from \"@tutao/tutanota-crypto/error.js\"\nimport { makeAlarmScheduler } from \"../../calendar/CalendarTestUtils.js\"\nimport { matchers, object, verify, when } from \"testdouble\"\nimport { AlarmInfoTypeRef, AlarmNotificationTypeRef, CalendarEventRefTypeRef, RepeatRuleTypeRef } from \"../../../../src/common/api/entities/sys/TypeRefs.js\"\nimport { AlarmScheduler } from \"../../../../src/common/calendar/date/AlarmScheduler.js\"\nimport { formatNotificationForDisplay } from \"../../../../src/calendar-app/calendar/model/CalendarModel.js\"\n\nconst oldTimezone = process.env.TZ\n\no.spec(\"DesktopAlarmSchedulerTest\", function () {\n\to.before(function () {\n\t\tprocess.env.TZ = \"Europe/Berlin\"\n\t})\n\to.after(function () {\n\t\tprocess.env.TZ = oldTimezone\n\t})\n\n\tconst lang = {\n\t\tlang: { get: (key) => key },\n\t}\n\tconst crypto = {\n\t\tdecryptAndMapToInstance: (tm, an) => Promise.resolve(Object.assign({}, an)),\n\t}\n\tconst alarmNotification = {}\n\tconst wm = {\n\t\topenCalendar() {},\n\t}\n\tconst notifier = {\n\t\tsubmitGroupedNotification: () => {\n\t\t\tconsole.log(\"show notification!\")\n\t\t},\n\t}\n\n\tconst standardMocks = () => {\n\t\t// node modules\n\n\t\t// our modules\n\t\tconst langMock = n.mock(\"__lang\", lang).set()\n\t\tconst alarmNotificationMock = n.mock(\"__alarmNotification\", alarmNotification).set()\n\t\tconst cryptoMock = n.mock<DesktopNativeCryptoFacade>(\"__crypto\", crypto).set()\n\n\t\t// instances\n\t\tconst wmMock = n.mock<WindowManager>(\"__wm\", wm).set()\n\t\tconst notifierMock = n.mock<DesktopNotifier>(\"__notifier\", notifier).set()\n\n\t\tconst alarmStorage = {\n\t\t\tstoreAlarm: spy(() => Promise.resolve()),\n\t\t\tdeleteAlarm: spy(() => Promise.resolve()),\n\t\t\tgetPushIdentifierSessionKey: () => Promise.resolve(\"piSk\"),\n\t\t\tgetScheduledAlarms: () => [],\n\t\t\tremovePushIdentifierKey: () => {},\n\t\t}\n\t\tconst alarmStorageMock = n.mock<DesktopAlarmStorage>(\"__alarmStorage\", alarmStorage).set()\n\n\t\treturn {\n\t\t\tlangMock,\n\t\t\talarmNotificationMock,\n\t\t\twmMock,\n\t\t\tnotifierMock,\n\t\t\talarmStorageMock,\n\t\t\tcryptoMock,\n\t\t}\n\t}\n\n\to.spec(\"rescheduleAll\", function () {\n\t\to(\"no alarms\", async function () {\n\t\t\tconst { wmMock, notifierMock, cryptoMock, alarmStorageMock } = standardMocks()\n\t\t\tconst alarmScheduler = makeAlarmScheduler()\n\t\t\tconst scheduler = new DesktopAlarmScheduler(wmMock, notifierMock, alarmStorageMock, cryptoMock, alarmScheduler)\n\n\t\t\tawait scheduler.rescheduleAll()\n\n\t\t\to(alarmStorageMock.storeAlarm.callCount).equals(0)\n\t\t\to(notifierMock.submitGroupedNotification.callCount).equals(0)\n\t\t\tverify(alarmScheduler.scheduleAlarm(matchers.anything(), matchers.anything(), matchers.anything(), matchers.anything()), { times: 0 })\n\t\t})\n\n\t\to(\"some alarms\", async function () {\n\t\t\tconst { wmMock, notifierMock, cryptoMock, alarmStorageMock } = standardMocks()\n\t\t\tconst alarmScheduler = makeAlarmScheduler()\n\t\t\tconst scheduler = new DesktopAlarmScheduler(wmMock, notifierMock, alarmStorageMock, cryptoMock, alarmScheduler)\n\n\t\t\tconst an = createAlarmNotification({\n\t\t\t\tstartTime: new Date(2019, 9, 20, 10),\n\t\t\t\tendTime: new Date(2019, 9, 20, 12),\n\t\t\t\ttrigger: \"5M\",\n\t\t\t\tendType: EndType.Never,\n\t\t\t\tendValue: null,\n\t\t\t\tfrequency: RepeatPeriod.ANNUALLY,\n\t\t\t\tinterval: \"1\",\n\t\t\t})\n\t\t\t// crypto is a stub which just returns things back\n\t\t\talarmStorageMock.getScheduledAlarms = () => Promise.resolve([downcast<EncryptedAlarmNotification>(an)])\n\n\t\t\tawait scheduler.rescheduleAll()\n\n\t\t\to(alarmStorageMock.storeAlarm.callCount).equals(0)\n\n\t\t\t// Summary 1\n\t\t\tverify(\n\t\t\t\talarmScheduler.scheduleAlarm(\n\t\t\t\t\t{\n\t\t\t\t\t\tstartTime: an.eventStart,\n\t\t\t\t\t\tendTime: an.eventEnd,\n\t\t\t\t\t\tsummary: an.summary,\n\t\t\t\t\t},\n\t\t\t\t\tan.alarmInfo,\n\t\t\t\t\tan.repeatRule,\n\t\t\t\t\tmatchers.anything(),\n\t\t\t\t),\n\t\t\t\t{ times: 1 },\n\t\t\t)\n\t\t})\n\t})\n\n\to.spec(\"handleAlarmNotification\", function () {\n\t\to(\"handle multiple events\", async function () {\n\t\t\tconst { wmMock, notifierMock, alarmStorageMock, cryptoMock } = standardMocks()\n\n\t\t\tconst alarmScheduler = makeAlarmScheduler()\n\t\t\tconst scheduler = new DesktopAlarmScheduler(wmMock, notifierMock, alarmStorageMock, cryptoMock, alarmScheduler)\n\n\t\t\t// Summary 2\n\t\t\tconst an1 = createAlarmNotification({\n\t\t\t\tstartTime: new Date(2019, 9, 20, 10),\n\t\t\t\tendTime: new Date(2019, 9, 20, 12),\n\t\t\t\ttrigger: \"5M\",\n\t\t\t\tendType: EndType.Never,\n\t\t\t\tendValue: null,\n\t\t\t\tfrequency: RepeatPeriod.ANNUALLY,\n\t\t\t\tinterval: \"1\",\n\t\t\t})\n\n\t\t\t// Summary 3\n\t\t\tconst an2 = createAlarmNotification({\n\t\t\t\tstartTime: new Date(2019, 9, 20, 10),\n\t\t\t\tendTime: new Date(2019, 9, 20, 12),\n\t\t\t\ttrigger: \"5M\",\n\t\t\t\tendType: EndType.Never,\n\t\t\t\tendValue: null,\n\t\t\t\tfrequency: RepeatPeriod.ANNUALLY,\n\t\t\t\tinterval: \"1\",\n\t\t\t})\n\n\t\t\tconst an3 = createDeleteAlarmNotification(an1.alarmInfo.alarmIdentifier)\n\n\t\t\t// @ts-ignore\n\t\t\tawait scheduler.handleAlarmNotification(an1)\n\t\t\t// @ts-ignore\n\t\t\tawait scheduler.handleAlarmNotification(an2)\n\n\t\t\t// We don't want the callback argument\n\t\t\tverify(\n\t\t\t\talarmScheduler.scheduleAlarm(\n\t\t\t\t\t{\n\t\t\t\t\t\tstartTime: an1.eventStart,\n\t\t\t\t\t\tendTime: an1.eventEnd,\n\t\t\t\t\t\tsummary: an1.summary,\n\t\t\t\t\t},\n\t\t\t\t\tan1.alarmInfo,\n\t\t\t\t\tan1.repeatRule,\n\t\t\t\t\tmatchers.anything(),\n\t\t\t\t),\n\t\t\t\t{ times: 1 },\n\t\t\t)\n\t\t\tverify(\n\t\t\t\talarmScheduler.scheduleAlarm(\n\t\t\t\t\t{\n\t\t\t\t\t\tstartTime: an2.eventStart,\n\t\t\t\t\t\tendTime: an2.eventEnd,\n\t\t\t\t\t\tsummary: an2.summary,\n\t\t\t\t\t},\n\t\t\t\t\tan2.alarmInfo,\n\t\t\t\t\tan2.repeatRule,\n\t\t\t\t\tmatchers.anything(),\n\t\t\t\t),\n\t\t\t\t{ times: 1 },\n\t\t\t)\n\n\t\t\t// @ts-ignore\n\t\t\tawait scheduler.handleAlarmNotification(an3)\n\t\t\tverify(alarmScheduler.cancelAlarm(an3.alarmInfo.alarmIdentifier), { times: 1 })\n\t\t})\n\n\t\to(\"notification is shown and calendar is opened when it's clicked\", async function () {\n\t\t\tconst { wmMock, notifierMock, alarmStorageMock, cryptoMock } = standardMocks()\n\n\t\t\tconst alarmScheduler: AlarmScheduler = object()\n\t\t\tconst scheduler = new DesktopAlarmScheduler(wmMock, notifierMock, alarmStorageMock, cryptoMock, alarmScheduler)\n\n\t\t\tconst an1 = createAlarmNotification({\n\t\t\t\tstartTime: new Date(2019, 9, 20, 10),\n\t\t\t\tendTime: new Date(2019, 9, 20, 12),\n\t\t\t\ttrigger: \"5M\",\n\t\t\t\tendType: EndType.Never,\n\t\t\t\tendValue: null,\n\t\t\t\tfrequency: RepeatPeriod.ANNUALLY,\n\t\t\t\tinterval: \"1\",\n\t\t\t})\n\n\t\t\tconst cbCaptor = matchers.captor()\n\t\t\twhen(alarmScheduler.scheduleAlarm(matchers.anything(), matchers.anything(), matchers.anything(), cbCaptor.capture())).thenResolve(undefined)\n\t\t\t// @ts-ignore\n\t\t\tawait scheduler.handleAlarmNotification(an1)\n\t\t\to(notifierMock.submitGroupedNotification.callCount).equals(0)\n\t\t\tconst cb = cbCaptor.value\n\t\t\tcb(an1.eventStart, \"title\")\n\n\t\t\tconst { title, body } = formatNotificationForDisplay(an1.eventStart, \"title\")\n\t\t\to(notifierMock.submitGroupedNotification.calls.map((c) => c.slice(0, -1))).deepEquals([[title, title, an1.alarmInfo.alarmIdentifier]])\n\t\t\to(wmMock.openCalendar.callCount).equals(0)\n\t\t\tconst onClick = lastThrow(notifierMock.submitGroupedNotification.calls[0])\n\t\t\tonClick(NotificationResult.Click)\n\t\t\to(wmMock.openCalendar.callCount).equals(1)\n\t\t})\n\n\t\to(\"alarmnotification with unavailable pushIdentifierSessionKey\", async function () {\n\t\t\tconst { wmMock, notifierMock, cryptoMock } = standardMocks()\n\t\t\tconst alarmStorageMock = n\n\t\t\t\t.mock<DesktopAlarmStorage>(\"__alarmStorage\", {\n\t\t\t\t\tstoreAlarm: spy(() => Promise.resolve()),\n\t\t\t\t\tdeleteAlarm: spy(() => Promise.resolve()),\n\t\t\t\t\tgetPushIdentifierSessionKey: () => null,\n\t\t\t\t\tgetScheduledAlarms: () => [],\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst alarmScheduler = makeAlarmScheduler()\n\t\t\tconst scheduler = new DesktopAlarmScheduler(wmMock, notifierMock, alarmStorageMock, cryptoMock, alarmScheduler)\n\n\t\t\tconst an1 = createAlarmNotification({\n\t\t\t\tstartTime: new Date(2019, 9, 20, 10),\n\t\t\t\tendTime: new Date(2019, 9, 20, 12),\n\t\t\t\ttrigger: \"5M\",\n\t\t\t\tendType: EndType.Never,\n\t\t\t\tendValue: null,\n\t\t\t\tfrequency: RepeatPeriod.ANNUALLY,\n\t\t\t\tinterval: \"1\",\n\t\t\t})\n\n\t\t\tan1.notificationSessionKeys.push({\n\t\t\t\t_id: `notificationSessionKeysIdFoo`,\n\t\t\t\tpushIdentifierSessionEncSessionKey: `pushIdentifierSessionEncSessionKeyFoo`,\n\t\t\t\tpushIdentifier: [`pushIdentifierFooPart1`, `pushIdentifierFooPart2`],\n\t\t\t})\n\n\t\t\tawait assertThrows(CryptoError, () => scheduler.handleAlarmNotification(an1 as unknown as EncryptedAlarmNotification))\n\t\t\to(alarmStorageMock.getPushIdentifierSessionKey.callCount).equals(2)\n\t\t})\n\n\t\to(\"alarmnotification with corrupt fields\", async function () {\n\t\t\tconst { wmMock, notifierMock, alarmStorageMock } = standardMocks()\n\t\t\tconst cryptoMock = n\n\t\t\t\t.mock<DesktopNativeCryptoFacade>(\"__crypto\", crypto)\n\t\t\t\t.with({\n\t\t\t\t\tdecryptAndMapToInstance: (tm, an) => Promise.resolve(Object.assign({ _errors: {} }, an)),\n\t\t\t\t})\n\t\t\t\t.set()\n\t\t\tconst alarmScheduler = makeAlarmScheduler()\n\t\t\tconst scheduler = new DesktopAlarmScheduler(wmMock, notifierMock, alarmStorageMock, cryptoMock, alarmScheduler)\n\n\t\t\tconst an1 = createAlarmNotification({\n\t\t\t\tstartTime: new Date(2019, 9, 20, 10),\n\t\t\t\tendTime: new Date(2019, 9, 20, 12),\n\t\t\t\ttrigger: \"5M\",\n\t\t\t\tendType: EndType.Never,\n\t\t\t\tendValue: null,\n\t\t\t\tfrequency: RepeatPeriod.ANNUALLY,\n\t\t\t\tinterval: \"1\",\n\t\t\t})\n\t\t\t// @ts-ignore\n\t\t\tawait assertThrows(CryptoError, () => scheduler.handleAlarmNotification(an1))\n\t\t\to(alarmStorageMock.removePushIdentifierKey.callCount).equals(1)\n\t\t})\n\t})\n})\n\nlet alarmIdCounter = 0\n\nfunction createAlarmNotification({ startTime, endTime, trigger, endType, endValue, frequency, interval }: any) {\n\talarmIdCounter++\n\treturn {\n\t\t_id: `scheduledAlarmId${alarmIdCounter}`,\n\t\t_type: AlarmNotificationTypeRef,\n\t\teventStart: startTime,\n\t\teventEnd: endTime,\n\t\toperation: \"0\",\n\t\tsummary: `summary${alarmIdCounter}`,\n\t\talarmInfo: {\n\t\t\t_type: AlarmInfoTypeRef,\n\t\t\t_id: `alarmInfoId1${alarmIdCounter}`,\n\t\t\talarmIdentifier: `alarmIdentifier${alarmIdCounter}`,\n\t\t\ttrigger,\n\t\t\tcalendarRef: {\n\t\t\t\t_type: CalendarEventRefTypeRef,\n\t\t\t\t_id: `calendarRefId${alarmIdCounter}`,\n\t\t\t\telementId: `calendarRefElementId${alarmIdCounter}`,\n\t\t\t\tlistId: `calendarRefListId${alarmIdCounter}`,\n\t\t\t},\n\t\t},\n\t\tnotificationSessionKeys: [\n\t\t\t{\n\t\t\t\t_id: `notificationSessionKeysId${alarmIdCounter}`,\n\t\t\t\tpushIdentifierSessionEncSessionKey: `pushIdentifierSessionEncSessionKey${alarmIdCounter}=`,\n\t\t\t\tpushIdentifier: [`pushIdentifier${alarmIdCounter}Part1`, `pushIdentifier${alarmIdCounter}Part2`],\n\t\t\t},\n\t\t],\n\t\trepeatRule: endType\n\t\t\t? {\n\t\t\t\t\t_id: `repeatRuleId${alarmIdCounter}`,\n\t\t\t\t\t_type: RepeatRuleTypeRef,\n\t\t\t\t\ttimeZone: \"Europe/Berlin\",\n\t\t\t\t\texcludedDates: [],\n\t\t\t\t\tendType,\n\t\t\t\t\tendValue,\n\t\t\t\t\tfrequency,\n\t\t\t\t\tinterval,\n\t\t\t\t\tadvancedRules: [],\n\t\t\t  }\n\t\t\t: null,\n\t\tuser: \"userId1\",\n\t}\n}\n\nfunction createDeleteAlarmNotification(alarmIdentifier: string) {\n\treturn {\n\t\t_id: \"irrelevantAlarmNotificationId\",\n\t\teventEnd: \"\",\n\t\teventStart: \"\",\n\t\toperation: \"2\",\n\t\tsummary: \"\",\n\t\talarmInfo: {\n\t\t\t_id: \"irrelevantAlarmInfoId\",\n\t\t\talarmIdentifier,\n\t\t\ttrigger: \"\",\n\t\t\tcalendarRef: {\n\t\t\t\t_id: \"yZRX5A\",\n\t\t\t\telementId: \"irrelevantElementId\",\n\t\t\t\tlistId: \"irrelevantListId\",\n\t\t\t},\n\t\t},\n\t\tnotificationSessionKeys: [],\n\t\trepeatRule: null,\n\t\tuser: \"someIrrelevantUserId\",\n\t}\n}\n"],"mappings":"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"}