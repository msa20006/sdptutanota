{"version":3,"file":"ElectronUpdaterTest-nL6QEJ0k.js","names":["conf: DesktopConfig","notifier: DesktopNotifier","crypto: DesktopNativeCryptoFacade","app: App","icon: NativeImage","updater: UpdaterWrapper","fs: FsExports","scheduler: IntervalSetter","m: string","info: UpdateDownloadedEvent & { signature: string }","data","publicKeys: string[]","messageEvent: { message: string }","pubKey: string","updateInfo: TutanotaUpdateInfo","data: Uint8Array","listener: () => void","hasUpdate: boolean","hasUpdate","e: Error","info: TutanotaUpdateInfo","en","electron: {\n\t\tapp: App\n\t}","fs: FsExports","crypto: DesktopNativeCryptoFacade","conf: DesktopConfig","notifier: DesktopNotifier","updaterImpl: UpdaterWrapper","prop: { title: string; body: string; icon: any }","key: string","cb: () => void","app: Electron.App","ev: string","cb: (arg0: any) => void","args: any","cb: any"],"sources":["../../src/common/desktop/ElectronUpdater.ts","../tests/desktop/ElectronUpdaterTest.ts"],"sourcesContent":["import type { DesktopNotifier } from \"./DesktopNotifier\"\nimport { NotificationResult } from \"./DesktopNotifier\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport type { DesktopConfig } from \"./config/DesktopConfig\"\nimport { assertNotNull, delay, downcast, neverNull } from \"@tutao/tutanota-utils\"\nimport { DesktopNativeCryptoFacade } from \"./DesktopNativeCryptoFacade\"\nimport type { App, NativeImage } from \"electron\"\nimport type { UpdaterWrapper } from \"./UpdaterWrapper\"\nimport type { UpdateDownloadedEvent, UpdateInfo } from \"electron-updater\"\nimport { BuildConfigKey, DesktopConfigKey } from \"./config/ConfigKeys\"\nimport { FsExports } from \"./ElectronExportTypes.js\"\n\n/**\n * Wraps electron-updater for Tutanota Desktop\n *\n * To test:\n * run local server to serve updates\n * run 'node dist -l local' to build initial client\n * run 'cp ./build/desktop-snapshot/tutanota-desktop-snapshot-linux.AppImage ~/tutanota-desktop-snapshot-linux.AppImage'\n * run '~/tutanota-desktop-snapshot-linux.AppImage'\n * run 'node dist -el local' to build an update when it's needed (takes about 20s)\n *\n */\n\nconst TAG = \"[ElectronUpdater]\"\n\ntype LoggerFn = (_: string, ...args: any) => void\ntype UpdaterLogger = { debug: LoggerFn; info: LoggerFn; warn: LoggerFn; error: LoggerFn; silly: LoggerFn; verbose: LoggerFn }\n/** we add the signature to the UpdateInfo when building the client */\ntype TutanotaUpdateInfo = UpdateInfo & { signature: string }\ntype IntervalID = ReturnType<typeof setTimeout>\n\n// re-do the type as opposed to doing typeof because it doesn't work otherwise\nexport type IntervalSetter = (fn: (...arr: Array<unknown>) => unknown, time?: number) => IntervalID\n\nexport class ElectronUpdater {\n\tprivate updatePollInterval: IntervalID | null = null\n\tprivate checkUpdateSignature: boolean = false\n\tprivate errorCount: number = 0\n\tprivate readonly logger: UpdaterLogger\n\tprivate _updateInfo: TutanotaUpdateInfo | null = null\n\n\treadonly enableAutoUpdateListener = () => {\n\t\tthis.start()\n\t}\n\n\tget updateInfo(): TutanotaUpdateInfo | null {\n\t\treturn this._updateInfo\n\t}\n\n\tconstructor(\n\t\tprivate readonly conf: DesktopConfig,\n\t\tprivate readonly notifier: DesktopNotifier,\n\t\tprivate readonly crypto: DesktopNativeCryptoFacade,\n\t\tprivate readonly app: App,\n\t\tprivate readonly icon: NativeImage,\n\t\tprivate readonly updater: UpdaterWrapper,\n\t\tprivate readonly fs: FsExports,\n\t\tprivate readonly scheduler: IntervalSetter = setInterval,\n\t) {\n\t\tthis.logger = {\n\t\t\tinfo: (m: string, ...args: any) => console.log.apply(console, [TAG, \"INFO:\", m].concat(args)),\n\t\t\twarn: (m: string, ...args: any) => console.warn.apply(console, [TAG, \"WARN:\", m].concat(args)),\n\t\t\terror: (m: string, ...args: any) => console.error.apply(console, [TAG, \"ERROR:\", m].concat(args)),\n\t\t\tverbose: (m: string, ...args: any) => console.log.apply(console, [TAG, \":\", m].concat(args)),\n\t\t\tdebug: (m: string, ...args: any) => console.log.apply(console, [TAG, \"DEBUG:\", m].concat(args)),\n\t\t\tsilly: (m: string, ...args: any) => console.log.apply(console, [TAG, \"DEBUG:\", m].concat(args)),\n\t\t}\n\t\tconst autoUpdater = this.updater.electronUpdater\n\t\tautoUpdater.logger = this.logger\n\t\t// default behaviour is to just dl the update as soon as found, but we want to check the signature\n\t\t// before telling the updater to get the file.\n\t\tautoUpdater.autoDownload = false\n\t\tautoUpdater.autoInstallOnAppQuit = false\n\t\tautoUpdater\n\t\t\t.on(\"checking-for-update\", () => {\n\t\t\t\tthis.logger.info(\"checking-for-update\")\n\t\t\t})\n\t\t\t.on(\"update-available\", () => {\n\t\t\t\tthis.logger.info(\"update-available\")\n\t\t\t\tthis.stopPolling()\n\t\t\t\tthis.downloadUpdate()\n\t\t\t})\n\t\t\t.on(\"update-not-available\", (info) => {\n\t\t\t\tthis.logger.info(\"update not available:\", info)\n\t\t\t})\n\t\t\t.on(\"download-progress\", (prg) => {\n\t\t\t\tthis.logger.debug(\"update dl progress:\", prg)\n\t\t\t})\n\t\t\t.on(\"update-downloaded\", async (info: UpdateDownloadedEvent & { signature: string }) => {\n\t\t\t\tthis._updateInfo = info\n\t\t\t\tthis.logger.info(`update-downloaded: ${JSON.stringify(info)}`)\n\t\t\t\tthis.stopPolling()\n\n\t\t\t\tconst data = await this.fs.promises.readFile(info.downloadedFile)\n\t\t\t\tconst publicKeys: string[] = await this.conf.getConst(BuildConfigKey.pubKeys)\n\t\t\t\tconst verified = publicKeys.some((pk) => this.verifySignature(pk, assertNotNull(info), data))\n\n\t\t\t\tif (verified) {\n\t\t\t\t\tthis.notifyAndInstall(info)\n\t\t\t\t} else {\n\t\t\t\t\tthis._updateInfo = null\n\t\t\t\t\tthis.logger.warn(`all signatures invalid, could not update. Deleting ${info.downloadedFile}.`)\n\t\t\t\t\tthis.fs.promises.unlink(info.downloadedFile)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on(\"error\", (e) => {\n\t\t\t\tthis.stopPolling()\n\t\t\t\tthis.errorCount += 1\n\t\t\t\tconst messageEvent: { message: string } = downcast(e)\n\t\t\t\tif (this.errorCount >= 5) {\n\t\t\t\t\tthis.logger.error(`Auto Update Error ${this.errorCount}, polling is stopped:\\n${messageEvent.message}`)\n\n\t\t\t\t\t// Avoid spamming the notification to the user\n\t\t\t\t\tif (this.errorCount === 5) this.notifyUpdateError()\n\n\t\t\t\t\tthis.logger.error(`Update failed multiple times. Last error:\\n${messageEvent.message}`)\n\t\t\t\t} else {\n\t\t\t\t\tthis.logger.error(`Auto Update Error ${this.errorCount}, continuing polling:\\n${messageEvent.message}`)\n\t\t\t\t\tthis.startPolling()\n\t\t\t\t}\n\t\t\t})\n\n\t\t/**\n\t\t * this replaces the autoInstallOnAppQuit feature of autoUpdater,\n\t\t * which causes the app to uninstall itself if it is installed for\n\t\t * all users on a windows system.\n\t\t *\n\t\t * should be removed once https://github.com/electron-userland/electron-builder/issues/4815\n\t\t * is resolved.\n\t\t */\n\t\tthis.app.once(\"before-quit\", (ev) => {\n\t\t\tif (this._updateInfo) {\n\t\t\t\tev.preventDefault()\n\t\t\t\tthis._updateInfo = null\n\t\t\t\tif (process.platform !== \"win32\") {\n\t\t\t\t\t// We don't do auto-update on close on Windows because it launches the installer which is pretty annoying.\n\t\t\t\t\t// We have to start the installer wizard (first argument to install being \"false\") because without it update for\n\t\t\t\t\t// system-wide installation does not work.\n\t\t\t\t\t// see https://github.com/tutao/tutanota/issues/1413#issuecomment-796737959\n\t\t\t\t\t// see c4b12e9\n\n\t\t\t\t\t// quitAndInstall takes two arguments which are only used for windows and linux updater.\n\t\t\t\t\t// isSilent and isForceRunAfter. If the first one is set to false then the second one is set to true implicitly.\n\t\t\t\t\t// we want a silent install on quit anyway (as we disabled update on quit for windows) and no restart of the application.\n\t\t\t\t\tthis.updater.electronUpdater.quitAndInstall(true, false)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tasync start() {\n\t\tif (!this.updater.updatesEnabledInBuild()) {\n\t\t\tthis.logger.debug(\"no update info on disk, disabling updater.\")\n\t\t\tthis.conf.setVar(DesktopConfigKey.showAutoUpdateOption, false)\n\t\t\treturn\n\t\t}\n\n\t\t// if we got here, we could theoretically download updates.\n\t\t// show the option in the settings menu\n\t\tthis.conf.setVar(DesktopConfigKey.showAutoUpdateOption, true)\n\n\t\t// if user changes auto update setting, we want to know\n\t\tthis.conf\n\t\t\t.removeListener(DesktopConfigKey.enableAutoUpdate, this.enableAutoUpdateListener)\n\t\t\t.on(DesktopConfigKey.enableAutoUpdate, this.enableAutoUpdateListener)\n\n\t\tif (!(await this.conf.getVar(DesktopConfigKey.enableAutoUpdate))) {\n\t\t\tthis.stopPolling()\n\t\t\treturn\n\t\t}\n\t\tif (this.updatePollInterval) {\n\t\t\t//already running\n\t\t\t// TODO: reset any other fields?\n\t\t\treturn\n\t\t}\n\n\t\tthis.checkUpdateSignature = await this.conf.getConst(BuildConfigKey.checkUpdateSignature)\n\t\tthis.startPolling()\n\t\t// the first check is immediate, all others are done with a delay\n\t\t// and random exponential backoff\n\t\tthis.checkUpdate()\n\t}\n\n\tprivate verifySignature(pubKey: string, updateInfo: TutanotaUpdateInfo, data: Uint8Array): boolean {\n\t\tif (!this.checkUpdateSignature) {\n\t\t\treturn true\n\t\t}\n\t\ttry {\n\t\t\tconst signature = Buffer.from(updateInfo.signature, \"base64\")\n\n\t\t\tif (this.crypto.verifySignature(pubKey, data, signature)) {\n\t\t\t\tthis.logger.info(\"Signature verification successful, installing update\")\n\t\t\t\treturn true\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.logger.error(\"Failed to verify update signature\", e)\n\t\t\treturn false\n\t\t}\n\t\treturn false\n\t}\n\n\tsetUpdateDownloadedListener(listener: () => void): void {\n\t\tthis.updater.electronUpdater.on(\"update-downloaded\", listener)\n\t}\n\n\tprivate async startPolling() {\n\t\tif (!this.updatePollInterval) {\n\t\t\t// sets the poll interval at a random multiple of (base value)\n\t\t\t// between (base value) and (base value) * 2^(errorCount)\n\t\t\tconst multiplier = Math.floor(Math.random() * Math.pow(2, this.errorCount)) + 1\n\t\t\tconst interval = await this.conf.getConst(BuildConfigKey.pollingInterval)\n\t\t\tthis.updatePollInterval = this.scheduler(() => this.checkUpdate(), interval * multiplier)\n\t\t}\n\t}\n\n\tprivate async checkUpdateThrottleTime() {\n\t\t// After 5 unsuccessful attempts to update, we start throttling the user\n\t\t// to avoid too many calls to our servers\n\t\tif (this.errorCount >= 5) {\n\t\t\t// Half of a second * errorCount\n\t\t\tconst throttleTime = 500 * this.errorCount\n\t\t\tthis.logger.debug(`Auto Update: throttling manual update attempt # ${this.errorCount} by ${throttleTime}`)\n\t\t\tawait delay(throttleTime)\n\t\t}\n\t}\n\n\tprivate stopPolling() {\n\t\tclearInterval(neverNull(this.updatePollInterval))\n\t\tthis.updatePollInterval = null\n\t}\n\n\t/**\n\t * try to get the update:\n\t * check update availability,\n\t * check signatures\n\t * try to download\n\t *\n\t * if the signature check is successful, further handling of the update\n\t * will be done by the 'update-downloaded' callback set up in the constructor\n\t * @returns {Promise} true if an update was downloaded, false otherwise\n\t */\n\tprivate async checkUpdate(): Promise<boolean> {\n\t\tconst autoUpdater = await this.updater.electronUpdater\n\t\treturn new Promise((resolve) => {\n\t\t\tlet cleanup = (hasUpdate: boolean) => {\n\t\t\t\tcleanup = (hasUpdate) => {}\n\t\t\t\tresolve(hasUpdate)\n\t\t\t\tautoUpdater.removeListener(\"update-not-available\", updateNotAvailable)\n\t\t\t\tautoUpdater.removeListener(\"update-downloaded\", updateDownloaded)\n\t\t\t\tautoUpdater.removeListener(\"error\", updateNotAvailable)\n\t\t\t}\n\t\t\tconst updateNotAvailable = () => cleanup(false)\n\t\t\tconst updateDownloaded = () => cleanup(true)\n\t\t\tautoUpdater.checkForUpdates().catch((e: Error) => {\n\t\t\t\tthis.logger.error(\"Update check failed,\", e.message)\n\t\t\t\tcleanup(false)\n\t\t\t})\n\n\t\t\tautoUpdater.once(\"update-not-available\", updateNotAvailable).once(\"update-downloaded\", updateDownloaded).once(\"error\", updateNotAvailable)\n\t\t})\n\t}\n\n\t/**\n\t * check for update if none is currently available,\n\t * quit and install otherwise\n\t * @returns {Promise<boolean>} True if an update is available and the next call will install it, false otherwise.\n\t */\n\tmanualUpdate(): Promise<boolean> {\n\t\treturn this.checkUpdateThrottleTime().then(() => {\n\t\t\tif (!this.updateInfo) {\n\t\t\t\treturn this.checkUpdate()\n\t\t\t}\n\t\t\tthis.installUpdate()\n\t\t\treturn Promise.resolve(false)\n\t\t})\n\t}\n\n\tprivate async downloadUpdate(): Promise<Array<string>> {\n\t\tthis.logger.debug(\"downloading\")\n\t\ttry {\n\t\t\treturn await this.updater.electronUpdater.downloadUpdate()\n\t\t} catch (e) {\n\t\t\tthis.logger.error(\"Update Download failed,\", e.message)\n\t\t\t// no files have been dl'd\n\t\t\treturn []\n\t\t}\n\t}\n\n\tprivate async notifyAndInstall(info: TutanotaUpdateInfo): Promise<void> {\n\t\tthis.logger.debug(\"notifying for update\")\n\t\tthis.notifier\n\t\t\t.showOneShot({\n\t\t\t\ttitle: lang.get(\"updateAvailable_label\", { \"{version}\": info.version }),\n\t\t\t\tbody: lang.get(\"clickToUpdate_msg\"),\n\t\t\t\ticon: this.icon,\n\t\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tif (res === NotificationResult.Click) {\n\t\t\t\t\tthis.installUpdate()\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e: Error) => this.logger.error(\"Notification failed, error message:\", e?.message))\n\t}\n\n\tinstallUpdate() {\n\t\tthis.logger.debug(\"installing update\")\n\t\t//the window manager enables force-quit on the app-quit event,\n\t\t// which is not emitted for quitAndInstall\n\t\t// so we enable force-quit manually with a custom event\n\t\tthis.app.emit(\"enable-force-quit\")\n\t\tthis._updateInfo = null\n\t\t// first argument: isSilent Boolean - windows-only Runs the installer in silent mode. Defaults to false.\n\t\t// second argument: isForceRunAfter Boolean - Run the app after finish even on silent install. Not applicable for macOS.\n\t\t//  Ignored if isSilent is set to false.\n\t\t// https://www.electron.build/auto-update#appupdater-eventemitter\n\t\t// As this is triggered by user we want to restart afterwards and don't mind showing the wizard either.\n\t\tthis.updater.electronUpdater.quitAndInstall(false, true)\n\t}\n\n\tprivate async notifyUpdateError() {\n\t\tthis.notifier\n\t\t\t.showOneShot({\n\t\t\t\ttitle: lang.get(\"errorReport_label\"),\n\t\t\t\tbody: lang.get(\"errorDuringUpdate_msg\"),\n\t\t\t\ticon: this.icon,\n\t\t\t})\n\t\t\t.catch((e) => this.logger.error(\"Error Notification failed, error message:\", e?.message))\n\t}\n}\n","import o from \"@tutao/otest\"\nimport type { App } from \"electron\"\nimport type { DesktopNativeCryptoFacade } from \"../../../src/common/desktop/DesktopNativeCryptoFacade.js\"\nimport { delay, downcast } from \"@tutao/tutanota-utils\"\nimport { ElectronUpdater } from \"../../../src/common/desktop/ElectronUpdater.js\"\nimport type { UpdaterWrapper } from \"../../../src/common/desktop/UpdaterWrapper.js\"\nimport n from \"../nodemocker.js\"\nimport type { DesktopConfig } from \"../../../src/common/desktop/config/DesktopConfig.js\"\nimport type { DesktopNotifier } from \"../../../src/common/desktop/DesktopNotifier.js\"\nimport { lang } from \"../../../src/common/misc/LanguageViewModel.js\"\nimport en from \"../../../src/mail-app/translations/en.js\"\nimport { matchers, object, verify, when } from \"testdouble\"\nimport { FsExports } from \"../../../src/common/desktop/ElectronExportTypes.js\"\nimport { spy } from \"@tutao/tutanota-test-utils\"\n\nlang.init(en)\n\nconst sigB64 = \"c2lnbmF0dXJlCg==\"\nconst shaB64 = \"c2hhNTEyCg==\"\nconst data = Buffer.from([1, 2, 3])\n\no.spec(\"ElectronUpdater Test\", function () {\n\tlet electron: {\n\t\tapp: App\n\t}\n\tlet fs: FsExports\n\tlet crypto: DesktopNativeCryptoFacade\n\tlet autoUpdater\n\tlet conf: DesktopConfig\n\tlet notifier: DesktopNotifier\n\tlet updaterImpl: UpdaterWrapper\n\to.beforeEach(function () {\n\t\tfs = object()\n\t\twhen(fs.promises.unlink(\"downloadedFile.AppImage\")).thenResolve()\n\t\twhen(fs.promises.readFile(\"downloadedFile.AppImage\")).thenResolve(data)\n\t\tnotifier = downcast({\n\t\t\tshowOneShot: spy((prop: { title: string; body: string; icon: any }) => Promise.resolve(\"click\")),\n\t\t})\n\t\tconf = downcast({\n\t\t\tremoveListener: spy((key: string, cb: () => void) => conf),\n\t\t\ton: spy((key: string) => conf),\n\t\t\tsetVar: spy(),\n\t\t\tgetVar: (key: string) => {\n\t\t\t\tswitch (key) {\n\t\t\t\t\tcase \"enableAutoUpdate\":\n\t\t\t\t\t\treturn true\n\n\t\t\t\t\tcase \"showAutoUpdateOption\":\n\t\t\t\t\t\treturn true\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`unexpected getVar key ${key}`)\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetConst: (key: string) => {\n\t\t\t\tswitch (key) {\n\t\t\t\t\tcase \"checkUpdateSignature\":\n\t\t\t\t\t\treturn true\n\n\t\t\t\t\tcase \"pubKeys\":\n\t\t\t\t\t\treturn [\"no\", \"yes\"]\n\n\t\t\t\t\tcase \"pollingInterval\":\n\t\t\t\t\t\treturn 300\n\n\t\t\t\t\tcase \"iconName\":\n\t\t\t\t\t\treturn \"iconName.name\"\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`unexpected getConst key ${key}`)\n\t\t\t\t}\n\t\t\t},\n\t\t})\n\t\tconst app: Electron.App = object()\n\t\twhen(app.getVersion()).thenReturn(\"3.45.0\")\n\t\telectron = { app }\n\t\tconst pathCaptor = matchers.captor()\n\t\twhen(app.getPath(pathCaptor.capture())).thenReturn(`/mock-${pathCaptor.value}/`)\n\t\twhen(app.once(matchers.anything(), matchers.anything())).thenReturn(app)\n\n\t\tcrypto = object()\n\t\twhen(crypto.verifySignature(\"yes\", data, Buffer.from(sigB64, \"base64\"))).thenReturn(true)\n\t\twhen(crypto.verifySignature(\"no\", matchers.anything(), matchers.anything())).thenReturn(false)\n\n\t\tautoUpdater = {\n\t\t\tcallbacks: {},\n\t\t\tlogger: undefined,\n\t\t\ton: spy(function (ev: string, cb: (arg0: any) => void) {\n\t\t\t\tif (!this.callbacks[ev]) this.callbacks[ev] = []\n\t\t\t\tthis.callbacks[ev].push({\n\t\t\t\t\tfn: spy(cb),\n\t\t\t\t\tonce: false,\n\t\t\t\t})\n\t\t\t\treturn this\n\t\t\t}),\n\t\t\tonce: function (ev: string, cb: (arg0: any) => void) {\n\t\t\t\tif (!this.callbacks[ev]) this.callbacks[ev] = []\n\t\t\t\tthis.callbacks[ev].push({\n\t\t\t\t\tfn: spy(cb),\n\t\t\t\t\tonce: true,\n\t\t\t\t})\n\t\t\t\treturn this\n\t\t\t},\n\t\t\tremoveListener: function (ev: string, cb: (arg0: any) => void) {\n\t\t\t\tif (!this.callbacks[ev]) return\n\t\t\t\tthis.callbacks[ev] = this.callbacks[ev].filter((entry) => entry.fn !== cb)\n\t\t\t},\n\t\t\tremoveAllListeners: spy(function (ev: string) {\n\t\t\t\tthis.callbacks[ev] = []\n\t\t\t\treturn this\n\t\t\t}),\n\t\t\temit: function (ev: string, args: any) {\n\t\t\t\tconst entries = this.callbacks[ev]\n\t\t\t\tfor (const entry of entries) {\n\t\t\t\t\tsetTimeout(() => entry.fn(args), 1)\n\t\t\t\t}\n\t\t\t\tthis.callbacks[ev] = entries.filter((entry) => !entry.once)\n\t\t\t},\n\t\t\tcheckForUpdates: spy(function () {\n\t\t\t\tthis.emit(\"update-available\", {\n\t\t\t\t\tdownloadedFile: \"downloadedFile.AppImage\",\n\t\t\t\t\tsha512: shaB64,\n\t\t\t\t\tsignature: sigB64,\n\t\t\t\t\tversion: \"4.5.0\",\n\t\t\t\t})\n\t\t\t\treturn Promise.resolve()\n\t\t\t}),\n\t\t\tdownloadUpdate: spy(function () {\n\t\t\t\tthis.emit(\"update-downloaded\", {\n\t\t\t\t\tdownloadedFile: \"downloadedFile.AppImage\",\n\t\t\t\t\tsha512: shaB64, // \"sha512\"\n\t\t\t\t\tsignature: sigB64,\n\t\t\t\t\tversion: \"4.5.0\",\n\t\t\t\t})\n\t\t\t\treturn Promise.resolve()\n\t\t\t}),\n\t\t\tquitAndInstall: spy(),\n\t\t}\n\n\t\tupdaterImpl = downcast({\n\t\t\telectronUpdater: autoUpdater,\n\t\t\tupdatesEnabledInBuild: () => true,\n\t\t})\n\t})\n\to(\"update is available\", async function () {\n\t\tdowncast(updaterImpl).updatesEnabledInBuild = () => true\n\n\t\tconst upd = new ElectronUpdater(conf, notifier, crypto, electron.app, object(), updaterImpl, fs)\n\t\tupd.start()\n\t\to(conf.setVar.callCount).equals(1)\n\t\to(conf.setVar.args).deepEquals([\"showAutoUpdateOption\", true])\n\t\t// there is only one enableAutoUpdate listener\n\t\to(conf.removeListener.callCount).equals(1)\n\t\to(conf.removeListener.args[0]).equals(\"enableAutoUpdate\")\n\t\to(conf.on.callCount).equals(1)\n\t\tawait updaterImpl.electronUpdater\n\t\tawait delay(190)\n\t\t// show notification\n\t\to(notifier.showOneShot.callCount).equals(1)\n\t\tverify(electron.app.emit(\"enable-force-quit\"), { times: 1 })\n\t\to(autoUpdater.quitAndInstall.callCount).equals(1)\n\t\to(autoUpdater.quitAndInstall.args[0]).equals(false)\n\t\to(autoUpdater.quitAndInstall.args[1]).equals(true)\n\t})\n\to(\"update is not available\", async function () {\n\t\tautoUpdater.checkForUpdates = spy(() => Promise.resolve())\n\t\tconst upd = new ElectronUpdater(conf, notifier, crypto, electron.app, object(), updaterImpl, fs)\n\t\tupd.start()\n\t\tawait delay(190)\n\t\to(autoUpdater.checkForUpdates.callCount).equals(1)\n\t\t// don't check signature\n\t\tverify(crypto.verifySignature(matchers.anything(), matchers.anything(), matchers.anything()), { times: 0 })\n\t\t// don't show notification\n\t\to(notifier.showOneShot.callCount).equals(0)\n\t\to(autoUpdater.quitAndInstall.callCount).equals(0)\n\n\t\t// @ts-ignore makes the test halt\n\t\tupd.stopPolling()\n\t})\n\to(\"enable autoUpdate while running\", async function () {\n\t\t//mock instances\n\t\tlet enabled = false\n\t\tconst oldConf = conf\n\t\tconf = n\n\t\t\t.mock<DesktopConfig>(\"__conf\", oldConf)\n\t\t\t.with({\n\t\t\t\tremoveListener: () => conf,\n\t\t\t\ton: (key: string, cb: any) => {\n\t\t\t\t\tif (!enabled) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tenabled = true\n\t\t\t\t\t\t\tcb()\n\t\t\t\t\t\t}, 25)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn conf\n\t\t\t\t},\n\t\t\t\tgetVar: (key: string) => {\n\t\t\t\t\tswitch (key) {\n\t\t\t\t\t\tcase \"enableAutoUpdate\":\n\t\t\t\t\t\t\treturn enabled\n\n\t\t\t\t\t\tcase \"showAutoUpdateOption\":\n\t\t\t\t\t\t\treturn true\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error(`unexpected getVar key ${key}`)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t})\n\t\t\t.set()\n\t\tconst upd = new ElectronUpdater(conf, notifier, crypto, electron.app, object(), updaterImpl, fs)\n\t\tupd.start()\n\t\tawait delay(100)\n\t\t// entered start() twice\n\t\to(conf.removeListener.callCount).equals(2)\n\t\to(conf.on.callCount).equals(2)\n\t\t// check signature\n\t\tverify(crypto.verifySignature(\"yes\", data, Buffer.from(sigB64, \"base64\")))\n\t\tverify(crypto.verifySignature(\"no\", data, Buffer.from(sigB64, \"base64\")))\n\t\t// show notification\n\t\to(notifier.showOneShot.callCount).equals(1)\n\t\tverify(electron.app.emit(\"enable-force-quit\"), { times: 1 })\n\t\to(autoUpdater.quitAndInstall.callCount).equals(1)\n\t\to(autoUpdater.quitAndInstall.args[0]).equals(false)\n\t\to(autoUpdater.quitAndInstall.args[1]).equals(true)\n\t})\n\to(\"retry after autoUpdater reports an error\", async function () {\n\t\to.timeout(500) // this is very slow for some reason\n\n\t\tlet first = true\n\n\t\tautoUpdater.checkForUpdates = function () {\n\t\t\tif (first) {\n\t\t\t\tfirst = false\n\t\t\t\tthis.emit(\"error\", {\n\t\t\t\t\tmessage: \"this is an autoUpdater error\",\n\t\t\t\t})\n\t\t\t\treturn Promise.reject(\"oops\")\n\t\t\t} else {\n\t\t\t\tthis.emit(\"update-available\", {\n\t\t\t\t\tsha512: \"sha512\",\n\t\t\t\t\tsignature: \"signature\",\n\t\t\t\t})\n\t\t\t\treturn Promise.resolve()\n\t\t\t}\n\t\t}\n\n\t\tconst scheduler = (fn, time) => setInterval(fn, 10)\n\n\t\tconst upd = new ElectronUpdater(conf, notifier, crypto, electron.app, object(), updaterImpl, fs, scheduler)\n\t\tupd.start()\n\t\t// after the error\n\t\tawait delay(2)\n\t\to(autoUpdater.downloadUpdate.callCount).equals(0)(\"downloadUpdate after error\")\n\t\t//after the download\n\t\tawait delay(200)\n\t\to(notifier.showOneShot.callCount).equals(1)(\"showOneShot\")\n\t\to(autoUpdater.downloadUpdate.callCount).equals(1)(\"downloadUpdate after download\")\n\t})\n\to(\"shut down autoUpdater after errors\", async function () {\n\t\tautoUpdater.downloadUpdate = function () {\n\t\t\tautoUpdater.emit(\"error\", {\n\t\t\t\tmessage: \"this is an autoUpdater error\",\n\t\t\t})\n\t\t\treturn Promise.resolve()\n\t\t}\n\n\t\tconst scheduler = (fn) => setInterval(fn, 5)\n\n\t\tconst upd = new ElectronUpdater(conf, notifier, crypto, electron.app, object(), updaterImpl, fs, scheduler)\n\t\tupd.start()\n\t\tawait delay(150)\n\n\t\t// @ts-ignore\n\t\tupd.stopPolling()\n\n\t\to(notifier.showOneShot.callCount).equals(1)(\"showOneShot\")\n\t})\n\to(\"works if second key is right one\", async function () {\n\t\to.timeout(1000)\n\t\tconst upd = new ElectronUpdater(conf, notifier, crypto, electron.app, object(), updaterImpl, fs)\n\t\tupd.start()\n\t\t// there is only one enableAutoUpdate listener\n\t\to(conf.removeListener.callCount).equals(1)\n\t\to(conf.removeListener.args[0]).equals(\"enableAutoUpdate\")\n\t\to(conf.on.callCount).equals(1)\n\t\tawait delay(250)\n\t\to(autoUpdater.checkForUpdates.callCount).equals(1)\n\t\t// check signature\n\t\tverify(crypto.verifySignature(\"no\", data, Buffer.from(sigB64, \"base64\")))\n\t\tverify(crypto.verifySignature(\"yes\", data, Buffer.from(sigB64, \"base64\")))\n\t\t// show notification\n\t\to(notifier.showOneShot.callCount).equals(1)\n\t\tverify(electron.app.emit(\"enable-force-quit\"), { times: 1 })\n\t\to(autoUpdater.quitAndInstall.callCount).equals(1)\n\t\to(autoUpdater.quitAndInstall.args[0]).equals(false)\n\t\to(autoUpdater.quitAndInstall.args[1]).equals(true)\n\n\t\t// @ts-ignore\n\t\tupd.stopPolling()\n\t})\n\to(\"updater disables itself if accessSync throws\", async function () {\n\t\tdowncast(updaterImpl).updatesEnabledInBuild = () => false\n\n\t\tconst upd = new ElectronUpdater(conf, notifier, crypto, electron.app, object(), updaterImpl, fs)\n\t\tawait updaterImpl.electronUpdater\n\t\to(autoUpdater.on.callCount).equals(6)\n\t\tupd.start()\n\t\to(conf.setVar.callCount).equals(1)\n\t\to(conf.setVar.args).deepEquals([\"showAutoUpdateOption\", false])\n\t\to(conf.removeListener.callCount).equals(0)\n\t})\n})\n"],"mappings":"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"}