{"version":3,"file":"OfflineStorageMigrationsTest-BGiq-A-6.js","names":[],"sources":["../tests/api/worker/offline/OfflineStorageMigrationsTest.ts"],"sourcesContent":["import o from \"@tutao/otest\"\nimport { OfflineStorage } from \"../../../../../src/common/api/worker/offline/OfflineStorage.js\"\nimport { object, when } from \"testdouble\"\nimport { GiftCard, GiftCardTypeRef } from \"../../../../../src/common/api/entities/sys/TypeRefs.js\"\nimport { booleanToNumberValue, migrateAllListElements, renameAttribute } from \"../../../../../src/common/api/worker/offline/StandardMigrations.js\"\nimport { verify } from \"@tutao/tutanota-test-utils\"\nimport { ListElementEntity } from \"../../../../../src/common/api/common/EntityTypes.js\"\n\no.spec(\"OfflineStorageMigrations\", function () {\n\to.spec(\"migrateAllListElements\", function () {\n\t\to(\"should run migrations in the correct order on all entities\", async function () {\n\t\t\tconst storageMock = object<OfflineStorage>()\n\n\t\t\twhen(storageMock.getRawListElementsOfType(GiftCardTypeRef)).thenResolve([\n\t\t\t\t{ message: \"A\" },\n\t\t\t\t{ message: \"B\" },\n\t\t\t\t{ message: \"C\" },\n\t\t\t] as unknown as ListElementEntity[])\n\n\t\t\tawait migrateAllListElements(GiftCardTypeRef, storageMock, [\n\t\t\t\t(card) => {\n\t\t\t\t\tcard.message = card.message + \"1\"\n\t\t\t\t\treturn card\n\t\t\t\t},\n\t\t\t\t(card) => {\n\t\t\t\t\tcard.message = card.message + \"2\"\n\t\t\t\t\treturn card\n\t\t\t\t},\n\t\t\t\t(card) => {\n\t\t\t\t\tcard.message = card.message + \"3\"\n\t\t\t\t\treturn card\n\t\t\t\t},\n\t\t\t])\n\n\t\t\tverify(storageMock.put({ message: \"A123\", _type: GiftCardTypeRef } as GiftCard))\n\t\t\tverify(storageMock.put({ message: \"B123\", _type: GiftCardTypeRef } as GiftCard))\n\t\t\tverify(storageMock.put({ message: \"C123\", _type: GiftCardTypeRef } as GiftCard))\n\t\t})\n\t})\n\to.spec(\"migrations\", function () {\n\t\to(\"should rename 'oldAttribute' to 'newAttribute' and ignore other attributes\", function () {\n\t\t\to(renameAttribute(\"oldAttribute\", \"newAttribute\")({ oldAttribute: \"value of attribute\", ignoreMe: \"doing nothing\" }) as any).deepEquals({\n\t\t\t\tnewAttribute: \"value of attribute\",\n\t\t\t\tignoreMe: \"doing nothing\",\n\t\t\t})\n\t\t})\n\n\t\to(\"should convert true to '1' and ignore other attributes\", function () {\n\t\t\to(booleanToNumberValue(\"attr\")({ attr: true, ignoreMe: \"doing nothing\" }) as any).deepEquals({ attr: \"1\", ignoreMe: \"doing nothing\" })\n\t\t})\n\n\t\to(\"should convert false to '0' and ignore other attributes\", function () {\n\t\t\to(booleanToNumberValue(\"attr\")({ attr: false, ignoreMe: \"doing nothing\" }) as any).deepEquals({ attr: \"0\", ignoreMe: \"doing nothing\" })\n\t\t})\n\t})\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,aAAE,KAAK,4BAA4B,WAAY;AAC9C,cAAE,KAAK,0BAA0B,WAAY;AAC5C,eAAE,8DAA8D,iBAAkB;GACjF,MAAM,cAAc,+BAAwB;AAE5C,+BAAK,YAAY,yBAAyB,gBAAgB,CAAC,CAAC,YAAY;IACvE,EAAE,SAAS,IAAK;IAChB,EAAE,SAAS,IAAK;IAChB,EAAE,SAAS,IAAK;GAChB,EAAmC;AAEpC,SAAM,uBAAuB,iBAAiB,aAAa;IAC1D,CAAC,SAAS;AACT,UAAK,UAAU,KAAK,UAAU;AAC9B,YAAO;IACP;IACD,CAAC,SAAS;AACT,UAAK,UAAU,KAAK,UAAU;AAC9B,YAAO;IACP;IACD,CAAC,SAAS;AACT,UAAK,UAAU,KAAK,UAAU;AAC9B,YAAO;IACP;GACD,EAAC;AAEF,UAAO,YAAY,IAAI;IAAE,SAAS;IAAQ,OAAO;GAAiB,EAAa,CAAC;AAChF,UAAO,YAAY,IAAI;IAAE,SAAS;IAAQ,OAAO;GAAiB,EAAa,CAAC;AAChF,UAAO,YAAY,IAAI;IAAE,SAAS;IAAQ,OAAO;GAAiB,EAAa,CAAC;EAChF,EAAC;CACF,EAAC;AACF,cAAE,KAAK,cAAc,WAAY;AAChC,eAAE,8EAA8E,WAAY;AAC3F,gBAAE,gBAAgB,gBAAgB,eAAe,CAAC;IAAE,cAAc;IAAsB,UAAU;GAAiB,EAAC,CAAQ,CAAC,WAAW;IACvI,cAAc;IACd,UAAU;GACV,EAAC;EACF,EAAC;AAEF,eAAE,0DAA0D,WAAY;AACvE,gBAAE,qBAAqB,OAAO,CAAC;IAAE,MAAM;IAAM,UAAU;GAAiB,EAAC,CAAQ,CAAC,WAAW;IAAE,MAAM;IAAK,UAAU;GAAiB,EAAC;EACtI,EAAC;AAEF,eAAE,2DAA2D,WAAY;AACxE,gBAAE,qBAAqB,OAAO,CAAC;IAAE,MAAM;IAAO,UAAU;GAAiB,EAAC,CAAQ,CAAC,WAAW;IAAE,MAAM;IAAK,UAAU;GAAiB,EAAC;EACvI,EAAC;CACF,EAAC;AACF,EAAC"}