{"version":3,"file":"CacheManagementFacade-PpLmAIBj.js","names":["userFacade: UserFacade","cachingEntityClient: EntityClient","entityRestCache: DefaultEntityRestCache","groupId: Id"],"sources":["../../src/common/api/worker/facades/lazy/CacheManagementFacade.ts"],"sourcesContent":["import { Group, GroupKeyTypeRef, GroupTypeRef, User, UserGroupKeyDistributionTypeRef, UserTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport { EntityClient } from \"../../../common/EntityClient.js\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { DefaultEntityRestCache } from \"../../rest/DefaultEntityRestCache.js\"\nimport { isSameId } from \"../../../common/utils/EntityUtils.js\"\n\nassertWorkerOrNode()\n\n/**\n * This facade is responsible for handling cases where we need to manually update an entity in the rest cache.\n * It is also suitable to manually ensure consistency between the rest cache and the key cache.\n */\nexport class CacheManagementFacade {\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly cachingEntityClient: EntityClient,\n\t\tprivate readonly entityRestCache: DefaultEntityRestCache,\n\t) {}\n\n\t/**\n\t * Refreshes group and user (because of the memberships) in the rest cache and updates the key cache if possible.\n\t * @param groupId\n\t */\n\tasync refreshKeyCache(groupId: Id): Promise<{ user: User; group: Group }> {\n\t\tconst group = await this.reloadGroup(groupId)\n\t\tconst user = await this.reloadUser()\n\t\tif (isSameId(groupId, this.userFacade.getUserGroupId())) {\n\t\t\tawait this.tryUpdatingUserGroupKey()\n\t\t}\n\t\treturn { user, group }\n\t}\n\n\t/**\n\t * Refreshes a group in the rest cache.\n\t * @param groupId\n\t */\n\tasync reloadGroup(groupId: Id): Promise<Group> {\n\t\tawait this.entityRestCache.deleteFromCacheIfExists(GroupTypeRef, null, groupId)\n\t\treturn await this.cachingEntityClient.load(GroupTypeRef, groupId)\n\t}\n\n\t/*\n\t * Deletes the logged-in user from the cache, and reloads and returns the new user object.\n\t * Is used to ensure we have the latest version, there can be times when the object becomes a little outdated, resulting in errors.\n\t * It also ensures that the key cache is updated.\n\t */\n\tasync reloadUser(): Promise<User> {\n\t\tconst userId = this.userFacade.getLoggedInUser()._id\n\n\t\tawait this.entityRestCache.deleteFromCacheIfExists(UserTypeRef, null, userId)\n\n\t\tconst user = await this.cachingEntityClient.load(UserTypeRef, userId)\n\t\tawait this.userFacade.updateUser(user) // updates the key cache too\n\n\t\treturn user\n\t}\n\n\t/**\n\t * Tries updating the user group key in the key cache by loading and decrypting the UserGroupKeyDistribution entity.\n\t */\n\tasync tryUpdatingUserGroupKey() {\n\t\t// this handles updates of the user group key which is also stored on the user as a membership\n\t\t// we might not have access to the password to decrypt it, though. therefore we handle it here\n\t\ttry {\n\t\t\t// Note that UserGroupKeyDistribution is never cached in the rest cache. no need to delete it\n\t\t\tconst userGroupKeyDistribution = await this.cachingEntityClient.load(UserGroupKeyDistributionTypeRef, this.userFacade.getUserGroupId())\n\t\t\tthis.userFacade.updateUserGroupKey(userGroupKeyDistribution)\n\t\t} catch (e) {\n\t\t\t// we do not want to fail here, as this update might be an outdated entity update\n\t\t\t// in case we only process updates after a longer period of being offline\n\t\t\t// in such case we should have set the correct user group key already during the regular login\n\t\t\tconsole.log(\"Could not update user group key\", e)\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,oBAAoB;IAMP,wBAAN,MAA4B;CAClC,YACkBA,YACAC,qBACAC,iBAChB;EA0DF,KA7DkB;EA6DjB,KA5DiB;EA4DhB,KA3DgB;CACd;;;;;CAMJ,MAAM,gBAAgBC,SAAoD;EACzE,MAAM,QAAQ,MAAM,KAAK,YAAY,QAAQ;EAC7C,MAAM,OAAO,MAAM,KAAK,YAAY;AACpC,MAAI,SAAS,SAAS,KAAK,WAAW,gBAAgB,CAAC,CACtD,OAAM,KAAK,yBAAyB;AAErC,SAAO;GAAE;GAAM;EAAO;CACtB;;;;;CAMD,MAAM,YAAYA,SAA6B;AAC9C,QAAM,KAAK,gBAAgB,wBAAwB,cAAc,MAAM,QAAQ;AAC/E,SAAO,MAAM,KAAK,oBAAoB,KAAK,cAAc,QAAQ;CACjE;CAOD,MAAM,aAA4B;EACjC,MAAM,SAAS,KAAK,WAAW,iBAAiB,CAAC;AAEjD,QAAM,KAAK,gBAAgB,wBAAwB,aAAa,MAAM,OAAO;EAE7E,MAAM,OAAO,MAAM,KAAK,oBAAoB,KAAK,aAAa,OAAO;AACrE,QAAM,KAAK,WAAW,WAAW,KAAK;AAEtC,SAAO;CACP;;;;CAKD,MAAM,0BAA0B;AAG/B,MAAI;GAEH,MAAM,2BAA2B,MAAM,KAAK,oBAAoB,KAAK,iCAAiC,KAAK,WAAW,gBAAgB,CAAC;AACvI,QAAK,WAAW,mBAAmB,yBAAyB;EAC5D,SAAQ,GAAG;AAIX,WAAQ,IAAI,mCAAmC,EAAE;EACjD;CACD;AACD"}