{"version":3,"file":"TemplatePopupModel-Bv3eIGgN.js","names":["queryString: string","entries: ReadonlyArray<T>","attributeNames: string[]","markHits: boolean","nestedEntry: Record<string, any>","attributeName: string","queryWords: Array<string>","searchMatch: SearchMatch<T>","nestedArray: Array<Record<string, any>>","splittedValue: Array<string>","regExp: RegExp","string: string","template1: EmailTemplate","template2: EmailTemplate","eventController: EventController","logins: LoginController","entityClient: EntityClient","template: EmailTemplate","template: EmailTemplate | null","langCode: LanguageCode","query: string","action: NavAction","selectedText: string","updates: ReadonlyArray<EntityUpdateData>","eventOwnerGroupId: Id","memberships: Array<GroupMembership>","groupMembership: GroupMembership","templateGroups: Array<TemplateGroupInstance>","input: string","allTemplates: ReadonlyArray<EmailTemplate>","input: ReadonlyArray<EmailTemplate>"],"sources":["../../src/common/api/common/utils/PlainTextSearch.ts","../../src/mail-app/templates/model/TemplatePopupModel.ts"],"sourcesContent":["type SearchMatch<T> = {\n\tentry: T\n\t// the input entry in which we searches\n\tcompleteMatch: number\n\t//the number of occurences of the entire queryString in the searched entry\n\tfullWordMatches: number\n\t//the number of occurences of any queryWord from the splitted queryString\n\tpartialWordMatches: number\n\t// the number of occurences a queryWord is part of the searched entry\n\tmatchedWords: Array<string> //all distinct queryWords that were found\n}\n\n/**\n * @param queryString List of query words separated by whitespace\n * @param entries Plain text entries to search in.\n * @param attributeNames The attributes that are searched within entries. The list should be sorted by priority\n * @param markHits If set to true the hits will be marked with html tag <mark>\n * @returns a list of entries, sorted by priority, that match the query string\n */\nexport function search<T extends Record<string, any>>(\n\tqueryString: string,\n\tentries: ReadonlyArray<T>,\n\tattributeNames: string[],\n\tmarkHits: boolean = false,\n): ReadonlyArray<T> {\n\tentries = entries.map((e) => Object.assign({}, e)) // create a copy in order to not override the original values\n\n\tif (queryString) {\n\t\treturn _search<T>(queryString, entries, attributeNames, markHits)\n\t\t\t.filter((match) => match.matchedWords.length > 0) // a and be are two matches that refer to entries (e.g. faqs)\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (a.completeMatch !== b.completeMatch) {\n\t\t\t\t\treturn b.completeMatch - a.completeMatch\n\t\t\t\t}\n\n\t\t\t\tif (a.matchedWords.length !== b.matchedWords.length) {\n\t\t\t\t\treturn b.matchedWords.length - a.matchedWords.length\n\t\t\t\t} else if (a.fullWordMatches !== b.fullWordMatches) {\n\t\t\t\t\treturn b.fullWordMatches - a.fullWordMatches\n\t\t\t\t} else if (a.partialWordMatches !== b.partialWordMatches) {\n\t\t\t\t\treturn b.partialWordMatches - a.partialWordMatches\n\t\t\t\t} else {\n\t\t\t\t\treturn 0\n\t\t\t\t}\n\t\t\t})\n\t\t\t.map((match) => match.entry)\n\t} else {\n\t\treturn entries\n\t}\n}\n\nfunction _findMatchInEntry<T>(\n\tnestedEntry: Record<string, any>,\n\tattributeName: string,\n\tqueryString: string,\n\tqueryWords: Array<string>,\n\tsearchMatch: SearchMatch<T>,\n\tmarkHits: boolean,\n) {\n\tconst value = nestedEntry[attributeName]\n\n\tif (!value || typeof value !== \"string\") {\n\t\treturn\n\t}\n\n\tconst splittedValue = value.split(/(<[^>]+>)/gi) // we split the array into words that are html markup and non html markup words as we don't want to search in html tags\n\n\t// find all matches with the full and exact queryString\n\tconst completeRegExp = new RegExp(escapeRegExp(queryString), \"gi\")\n\tsearchMatch.completeMatch += _findMatches(splittedValue, completeRegExp, false).hits\n\t// create regualar expression to match whole words, case insensitive\n\tconst fullWordRegExp = new RegExp(queryWords.map((queryWord) => \"\\\\b\" + escapeRegExp(queryWord) + \"\\\\b\").join(\"|\"), \"gi\")\n\tsearchMatch.fullWordMatches += _findMatches(splittedValue, fullWordRegExp, false).hits\n\t// regular expression for finding all matches (including partial matches)\n\tlet regExp = new RegExp(queryWords.map((queryWord) => escapeRegExp(queryWord)).join(\"|\"), \"gi\")\n\n\tlet findResult = _findMatches(splittedValue, regExp, markHits)\n\n\tif (markHits && findResult.hits > 0) {\n\t\tnestedEntry[attributeName] = splittedValue.join(\"\")\n\t}\n\n\tfor (const queryWord of findResult.matchedQueryWords) {\n\t\tif (searchMatch.matchedWords.indexOf(queryWord) === -1) {\n\t\t\tsearchMatch.matchedWords.push(queryWord)\n\t\t}\n\t}\n\n\tif (findResult.hits > 0) {\n\t\tsearchMatch.partialWordMatches += findResult.hits\n\t}\n}\n\n//export only for testing\nexport function _search<T extends Record<string, any>>(\n\tqueryString: string,\n\tentries: ReadonlyArray<T>,\n\tattributeNames: string[],\n\tmarkHits: boolean,\n): SearchMatch<T>[] {\n\tlet queryWords = queryString\n\t\t.toLocaleLowerCase()\n\t\t.split(\" \")\n\t\t.map((word) => word.trim())\n\t\t.filter((word) => word.length > 0)\n\treturn entries.map((entry) => {\n\t\tconst searchMatch = {\n\t\t\tentry,\n\t\t\tcompleteMatch: 0,\n\t\t\tfullWordMatches: 0,\n\t\t\tpartialWordMatches: 0,\n\t\t\tmatchedWords: [],\n\t\t}\n\t\tfor (const name of attributeNames) {\n\t\t\tconst nestedAttributes = name.split(\".\")\n\t\t\tif (nestedAttributes.length === 1) {\n\t\t\t\t// no nesting regular value check\n\t\t\t\t_findMatchInEntry(entry, nestedAttributes[0], queryString, queryWords, searchMatch, markHits)\n\t\t\t} else if (nestedAttributes.length === 2) {\n\t\t\t\t// We only accept arrays that contain objects for now.\n\t\t\t\tconst [nestedArrayName, nestedEntryAttributeName] = nestedAttributes\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst nestedArray: Array<Record<string, any>> = entry[nestedArrayName]\n\n\t\t\t\tif (Array.isArray(nestedArray)) {\n\t\t\t\t\tfor (const nestedEntry of nestedArray) {\n\t\t\t\t\t\t_findMatchInEntry(nestedEntry, nestedEntryAttributeName, queryString, queryWords, searchMatch, markHits)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn searchMatch\n\t})\n}\n\ntype FindResult = {\n\thits: number\n\tmatchedQueryWords: string[]\n}\n\n//export for testing only\nexport function _findMatches(splittedValue: Array<string>, regExp: RegExp, markHits: boolean): FindResult {\n\treturn splittedValue.reduce(\n\t\t(sum, value, index) => {\n\t\t\tif (value.trim().length === 0 || value.startsWith(\"<\")) {\n\t\t\t\treturn sum\n\t\t\t}\n\n\t\t\tsplittedValue[index] = value.replace(regExp, (match) => {\n\t\t\t\tsum.hits++\n\n\t\t\t\tif (sum.matchedQueryWords.indexOf(match.toLowerCase()) === -1) {\n\t\t\t\t\tsum.matchedQueryWords.push(match.toLowerCase())\n\t\t\t\t}\n\n\t\t\t\tif (markHits && match.length > 2) {\n\t\t\t\t\t// only mark matches that are longer then two characters.\n\t\t\t\t\t// We could mark these small matches but we should check that the match is a whole word then.\n\t\t\t\t\treturn `<mark>${match}</mark>`\n\t\t\t\t} else {\n\t\t\t\t\treturn match\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn sum\n\t\t},\n\t\t{\n\t\t\thits: 0,\n\t\t\tmatchedQueryWords: [] as string[],\n\t\t},\n\t)\n}\n\n// see https://stackoverflow.com/a/6969486\nfunction escapeRegExp(string: string): string {\n\treturn string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\") // $& means the whole matched string\n}\n","import type { LanguageCode } from \"../../../common/misc/LanguageViewModel\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport type { EmailTemplateContent } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { EmailTemplate, EmailTemplateTypeRef, TemplateGroupRootTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { OperationType } from \"../../../common/api/common/TutanotaConstants\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport type { EntityClient } from \"../../../common/api/common/EntityClient\"\nimport type { LoginController } from \"../../../common/api/main/LoginController\"\nimport { getElementId, getEtId, isSameId } from \"../../../common/api/common/utils/EntityUtils\"\nimport type { GroupMembership } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { GroupInfoTypeRef, GroupTypeRef } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { LazyLoaded, promiseMap, SortedArray } from \"@tutao/tutanota-utils\"\nimport type { TemplateGroupInstance } from \"./TemplateGroupModel.js\"\nimport { search } from \"../../../common/api/common/utils/PlainTextSearch.js\"\nimport { EntityEventsListener, EventController } from \"../../../common/api/main/EventController.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\n\n/**\n *   Model that holds main logic for the Template Feature.\n *   Handles things like returning the selected Template, selecting Templates, indexes, scrolling.\n */\nexport const TEMPLATE_SHORTCUT_PREFIX = \"#\"\nexport type NavAction = \"previous\" | \"next\"\nexport const SELECT_NEXT_TEMPLATE = \"next\"\nexport const SELECT_PREV_TEMPLATE = \"previous\"\n\n// sort first by name then by tag\nfunction compareTemplatesForSort(template1: EmailTemplate, template2: EmailTemplate) {\n\tconst titleComparison = template1.title.localeCompare(template2.title)\n\treturn titleComparison === 0 ? template1.tag.localeCompare(template2.tag) : titleComparison\n}\n\nexport class TemplatePopupModel {\n\t_allTemplates: SortedArray<EmailTemplate>\n\treadonly searchResults: Stream<ReadonlyArray<EmailTemplate>>\n\treadonly selectedTemplate: Stream<EmailTemplate | null>\n\tinitialized: LazyLoaded<TemplatePopupModel>\n\treadonly _eventController: EventController\n\treadonly _entityEventReceived: EntityEventsListener\n\treadonly _logins: LoginController\n\treadonly _entityClient: EntityClient\n\t_groupInstances: Array<TemplateGroupInstance>\n\t_selectedContentLanguage: LanguageCode\n\t_searchFilter: TemplateSearchFilter\n\n\tconstructor(eventController: EventController, logins: LoginController, entityClient: EntityClient) {\n\t\tthis._eventController = eventController\n\t\tthis._logins = logins\n\t\tthis._entityClient = entityClient\n\t\tthis._allTemplates = SortedArray.empty(compareTemplatesForSort)\n\t\tthis.searchResults = stream<ReadonlyArray<EmailTemplate>>([])\n\t\tthis.selectedTemplate = stream<EmailTemplate | null>(null)\n\t\tthis._selectedContentLanguage = lang.code\n\t\tthis._searchFilter = new TemplateSearchFilter()\n\t\tthis._groupInstances = []\n\n\t\tthis._entityEventReceived = (updates, eventOwnerGroupId) => {\n\t\t\treturn this._entityUpdate(updates, eventOwnerGroupId)\n\t\t}\n\n\t\tthis.initialized = new LazyLoaded(() => {\n\t\t\tconst templateMemberships = this._logins.getUserController().getTemplateMemberships()\n\n\t\t\treturn loadTemplateGroupInstances(templateMemberships, this._entityClient)\n\t\t\t\t.then((templateGroupInstances) =>\n\t\t\t\t\tloadTemplates(templateGroupInstances, this._entityClient).then((templates) => {\n\t\t\t\t\t\tthis._allTemplates.insertAll(templates)\n\n\t\t\t\t\t\tthis._groupInstances = templateGroupInstances\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.searchResults(this._searchFilter.filter(\"\", this._allTemplates.array))\n\t\t\t\t\tthis.setSelectedTemplate(this.searchResults()[0])\n\t\t\t\t\treturn this\n\t\t\t\t})\n\t\t})\n\n\t\tthis._eventController.addEntityListener(this._entityEventReceived)\n\t}\n\n\tinit(): Promise<TemplatePopupModel> {\n\t\treturn this.initialized.getAsync()\n\t}\n\n\tisLoaded(): boolean {\n\t\treturn this.initialized.isLoaded()\n\t}\n\n\tdispose() {\n\t\tthis._eventController.removeEntityListener(this._entityEventReceived)\n\t}\n\n\tisSelectedTemplate(template: EmailTemplate): boolean {\n\t\treturn this.selectedTemplate() === template\n\t}\n\n\tgetAllTemplates(): ReadonlyArray<EmailTemplate> {\n\t\treturn this._allTemplates.array\n\t}\n\n\tgetSelectedTemplate(): EmailTemplate | null {\n\t\treturn this.selectedTemplate()\n\t}\n\n\tgetSelectedContent(): EmailTemplateContent | null {\n\t\tconst selectedTemplate = this.selectedTemplate()\n\t\treturn (\n\t\t\tselectedTemplate &&\n\t\t\t(selectedTemplate.contents.find((contents) => contents.languageCode === this._selectedContentLanguage) ||\n\t\t\t\tselectedTemplate.contents.find((contents) => contents.languageCode === lang.code) ||\n\t\t\t\tselectedTemplate.contents[0])\n\t\t)\n\t}\n\n\tgetSelectedTemplateIndex(): number {\n\t\tconst selectedTemplate = this.selectedTemplate()\n\t\tif (selectedTemplate == null) {\n\t\t\treturn -1\n\t\t}\n\t\treturn this.searchResults().indexOf(selectedTemplate)\n\t}\n\n\tsetSelectedTemplate(template: EmailTemplate | null) {\n\t\tthis.selectedTemplate(template)\n\t}\n\n\tsetSelectedContentLanguage(langCode: LanguageCode) {\n\t\tthis._selectedContentLanguage = langCode\n\t}\n\n\tsearch(query: string): void {\n\t\tthis.searchResults(this._searchFilter.filter(query, this._allTemplates.array))\n\t\tthis.setSelectedTemplate(this.searchResults()[0])\n\t}\n\n\t_rerunSearch(): void {\n\t\tthis.searchResults(this._searchFilter.rerunQuery(this._allTemplates.array))\n\t\tthis.setSelectedTemplate(this.searchResults()[0])\n\t}\n\n\t/**\n\t * Increments or decrements the selection, unless it would go past the beginning or end of the search results\n\t * @param action\n\t * @returns true if the selection changed\n\t */\n\tselectNextTemplate(action: NavAction): boolean {\n\t\tconst selectedIndex = this.getSelectedTemplateIndex()\n\t\tconst nextIndex = selectedIndex + (action === SELECT_NEXT_TEMPLATE ? 1 : -1)\n\n\t\tif (nextIndex >= 0 && nextIndex < this.searchResults().length) {\n\t\t\tconst nextSelectedTemplate = this.searchResults()[nextIndex]\n\t\t\tthis.setSelectedTemplate(nextSelectedTemplate)\n\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\tfindTemplateWithTag(selectedText: string): EmailTemplate | null {\n\t\tconst tag = selectedText.substring(TEMPLATE_SHORTCUT_PREFIX.length) // remove TEMPLATE_SHORTCUT_PREFIX from selected text\n\n\t\treturn this._allTemplates.array.find((template) => template.tag === tag) ?? null\n\t}\n\n\t_entityUpdate(updates: ReadonlyArray<EntityUpdateData>, eventOwnerGroupId: Id): Promise<any> {\n\t\treturn promiseMap(updates, (update) => {\n\t\t\tif (isUpdateForTypeRef(EmailTemplateTypeRef, update)) {\n\t\t\t\tif (update.operation === OperationType.CREATE) {\n\t\t\t\t\treturn this._entityClient.load(EmailTemplateTypeRef, [update.instanceListId, update.instanceId]).then((template) => {\n\t\t\t\t\t\tthis._allTemplates.insert(template)\n\n\t\t\t\t\t\tthis._rerunSearch()\n\n\t\t\t\t\t\tthis.setSelectedTemplate(template)\n\t\t\t\t\t})\n\t\t\t\t} else if (update.operation === OperationType.UPDATE) {\n\t\t\t\t\treturn this._entityClient.load(EmailTemplateTypeRef, [update.instanceListId, update.instanceId]).then((template) => {\n\t\t\t\t\t\tthis._allTemplates.removeFirst((t) => isSameId(getElementId(t), update.instanceId))\n\n\t\t\t\t\t\tthis._allTemplates.insert(template)\n\n\t\t\t\t\t\tthis._rerunSearch()\n\n\t\t\t\t\t\tthis.setSelectedTemplate(template)\n\t\t\t\t\t})\n\t\t\t\t} else if (update.operation === OperationType.DELETE) {\n\t\t\t\t\t// Try select the next or the previous template\n\t\t\t\t\t// if neither option is possible, it means we are deleting the last template, so clear the selection\n\t\t\t\t\tif (!this.selectNextTemplate(\"next\") && !this.selectNextTemplate(\"previous\")) {\n\t\t\t\t\t\tthis.setSelectedTemplate(null)\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._allTemplates.removeFirst((t) => isSameId(getElementId(t), update.instanceId))\n\n\t\t\t\t\tthis._rerunSearch()\n\t\t\t\t}\n\t\t\t} else if (this._logins.getUserController().isUpdateForLoggedInUserInstance(update, eventOwnerGroupId)) {\n\t\t\t\t// template group memberships may have changed\n\t\t\t\tif (this._groupInstances.length !== this._logins.getUserController().getTemplateMemberships().length) {\n\t\t\t\t\tthis.initialized.reset()\n\t\t\t\t\treturn this.initialized.getAsync().then(() => this._rerunSearch())\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tgetTemplateGroupInstances(): Array<TemplateGroupInstance> {\n\t\treturn this._groupInstances\n\t}\n\n\tgetSelectedTemplateGroupInstance(): TemplateGroupInstance | null {\n\t\tconst selected = this.getSelectedTemplate()\n\t\tif (selected == null) {\n\t\t\treturn null\n\t\t} else {\n\t\t\treturn this._groupInstances.find((instance) => isSameId(getEtId(instance.group), selected._ownerGroup)) ?? null\n\t\t}\n\t}\n}\n\nexport function loadTemplateGroupInstances(memberships: Array<GroupMembership>, entityClient: EntityClient): Promise<Array<TemplateGroupInstance>> {\n\treturn promiseMap(memberships, (membership) => loadTemplateGroupInstance(membership, entityClient))\n}\n\nexport function loadTemplateGroupInstance(groupMembership: GroupMembership, entityClient: EntityClient): Promise<TemplateGroupInstance> {\n\treturn entityClient.load(GroupInfoTypeRef, groupMembership.groupInfo).then((groupInfo) =>\n\t\tentityClient.load(TemplateGroupRootTypeRef, groupInfo.group).then((groupRoot) =>\n\t\t\tentityClient.load(GroupTypeRef, groupInfo.group).then((group) => {\n\t\t\t\treturn {\n\t\t\t\t\tgroupInfo,\n\t\t\t\t\tgroup,\n\t\t\t\t\tgroupRoot,\n\t\t\t\t\tgroupMembership,\n\t\t\t\t}\n\t\t\t}),\n\t\t),\n\t)\n}\n\nfunction loadTemplates(templateGroups: Array<TemplateGroupInstance>, entityClient: EntityClient): Promise<Array<EmailTemplate>> {\n\treturn promiseMap(templateGroups, (group) => entityClient.loadAll(EmailTemplateTypeRef, group.groupRoot.templates)).then((groupedTemplates) =>\n\t\tgroupedTemplates.flat(),\n\t)\n}\n\nexport function searchInTemplates(input: string, allTemplates: ReadonlyArray<EmailTemplate>): ReadonlyArray<EmailTemplate> {\n\tif (input.startsWith(TEMPLATE_SHORTCUT_PREFIX)) {\n\t\t// search in tag only\n\t\tconst newQueryString = input.substring(TEMPLATE_SHORTCUT_PREFIX.length)\n\t\treturn search(newQueryString, allTemplates, [\"tag\"], false)\n\t} else {\n\t\treturn search(input, allTemplates, [\"tag\", \"title\", \"contents.text\"], false)\n\t}\n}\n\nclass TemplateSearchFilter {\n\tlastInput: ReadonlyArray<EmailTemplate>\n\tlastQuery: string\n\tlastResults: ReadonlyArray<EmailTemplate>\n\n\tconstructor() {\n\t\tthis.lastInput = []\n\t\tthis.lastQuery = \"\"\n\t\tthis.lastResults = []\n\t}\n\n\tfilter(query: string, input: ReadonlyArray<EmailTemplate>): ReadonlyArray<EmailTemplate> {\n\t\treturn this._doFilter(query, input)\n\t}\n\n\trerunQuery(input: ReadonlyArray<EmailTemplate>): ReadonlyArray<EmailTemplate> {\n\t\treturn this._doFilter(this.lastQuery, input)\n\t}\n\n\t_doFilter(query: string, input: ReadonlyArray<EmailTemplate>): ReadonlyArray<EmailTemplate> {\n\t\tthis.lastInput = input.slice()\n\t\tthis.lastQuery = query\n\t\tthis.lastResults = query === \"\" ? this.lastInput : searchInTemplates(query, input)\n\t\treturn this.lastResults\n\t}\n}\n"],"mappings":"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"}