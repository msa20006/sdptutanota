{"version":3,"file":"ContactGuiUtils-BOj2qfyh.js","names":["ContactMailAddressTypeToLabel: Record<ContactAddressType, TranslationKey>","type: ContactAddressType","custom: string","ContactPhoneNumberTypeToLabel: Record<ContactPhoneNumberType, TranslationKey>","type: ContactPhoneNumberType","ContactSocialTypeToLabel: Record<ContactSocialType, TranslationKey>","type: ContactSocialType","ContactRelationshipTypeToLabel: Record<ContactRelationshipType, TranslationKey>","type: ContactRelationshipType","ContactMessengerHandleTypeToLabel: Record<ContactMessengerHandleType, TranslationKey>","type: ContactMessengerHandleType","ContactCustomDateTypeToLabel: Record<ContactCustomDateType, TranslationKey>","type: ContactCustomDateType","ContactCustomWebsiteTypeToLabel: Record<ContactWebsiteType, TranslationKey>","type: ContactWebsiteType","contact1: Contact","contact2: Contact","sortByFirstName: boolean"],"sources":["../../src/mail-app/contacts/view/ContactGuiUtils.ts"],"sourcesContent":["import {\n\tContactAddressType,\n\tContactCustomDateType,\n\tContactMessengerHandleType,\n\tContactPhoneNumberType,\n\tContactRelationshipType,\n\tContactSocialType,\n\tContactWebsiteType,\n} from \"../../../common/api/common/TutanotaConstants\"\nimport type { MaybeTranslation, Translation, TranslationKey } from \"../../../common/misc/LanguageViewModel\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport type { Contact } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { sortCompareByReverseId } from \"../../../common/api/common/utils/EntityUtils\"\n\nexport const ContactMailAddressTypeToLabel: Record<ContactAddressType, TranslationKey> = {\n\t[ContactAddressType.PRIVATE]: \"private_label\",\n\t[ContactAddressType.WORK]: \"work_label\",\n\t[ContactAddressType.OTHER]: \"other_label\",\n\t[ContactAddressType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactAddressTypeLabel(type: ContactAddressType, custom: string): MaybeTranslation {\n\tif (type === ContactAddressType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactMailAddressTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactPhoneNumberTypeToLabel: Record<ContactPhoneNumberType, TranslationKey> = {\n\t[ContactPhoneNumberType.PRIVATE]: \"private_label\",\n\t[ContactPhoneNumberType.WORK]: \"work_label\",\n\t[ContactPhoneNumberType.MOBILE]: \"mobile_label\",\n\t[ContactPhoneNumberType.FAX]: \"fax_label\",\n\t[ContactPhoneNumberType.OTHER]: \"other_label\",\n\t[ContactPhoneNumberType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactPhoneNumberTypeLabel(type: ContactPhoneNumberType, custom: string): MaybeTranslation {\n\tif (type === ContactPhoneNumberType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactPhoneNumberTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactSocialTypeToLabel: Record<ContactSocialType, TranslationKey> = {\n\t[ContactSocialType.TWITTER]: \"twitter_label\",\n\t[ContactSocialType.FACEBOOK]: \"facebook_label\",\n\t[ContactSocialType.XING]: \"xing_label\",\n\t[ContactSocialType.LINKED_IN]: \"linkedin_label\",\n\t[ContactSocialType.OTHER]: \"other_label\",\n\t[ContactSocialType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactSocialTypeLabel(type: ContactSocialType, custom: string): MaybeTranslation {\n\tif (type === ContactSocialType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactSocialTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactRelationshipTypeToLabel: Record<ContactRelationshipType, TranslationKey> = {\n\t[ContactRelationshipType.PARENT]: \"parent_label\",\n\t[ContactRelationshipType.BROTHER]: \"brother_label\",\n\t[ContactRelationshipType.SISTER]: \"sister_label\",\n\t[ContactRelationshipType.CHILD]: \"child_label\",\n\t[ContactRelationshipType.FRIEND]: \"friend_label\",\n\t[ContactRelationshipType.RELATIVE]: \"relative_label\",\n\t[ContactRelationshipType.SPOUSE]: \"spouse_label\",\n\t[ContactRelationshipType.PARTNER]: \"partner_label\",\n\t[ContactRelationshipType.ASSISTANT]: \"assistant_label\",\n\t[ContactRelationshipType.MANAGER]: \"manager_label\",\n\t[ContactRelationshipType.OTHER]: \"other_label\",\n\t[ContactRelationshipType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactRelationshipTypeToLabel(type: ContactRelationshipType, custom: string): MaybeTranslation {\n\tif (type === ContactRelationshipType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactRelationshipTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactMessengerHandleTypeToLabel: Record<ContactMessengerHandleType, TranslationKey> = {\n\t[ContactMessengerHandleType.SIGNAL]: \"signal_label\",\n\t[ContactMessengerHandleType.WHATSAPP]: \"whatsapp_label\",\n\t[ContactMessengerHandleType.TELEGRAM]: \"telegram_label\",\n\t[ContactMessengerHandleType.DISCORD]: \"discord_label\",\n\t[ContactMessengerHandleType.OTHER]: \"other_label\",\n\t[ContactMessengerHandleType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactMessengerHandleTypeToLabel(type: ContactMessengerHandleType, custom: string): MaybeTranslation {\n\tif (type === ContactMessengerHandleType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactMessengerHandleTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactCustomDateTypeToLabel: Record<ContactCustomDateType, TranslationKey> = {\n\t[ContactCustomDateType.ANNIVERSARY]: \"anniversary_label\",\n\t[ContactCustomDateType.OTHER]: \"other_label\",\n\t[ContactCustomDateType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactCustomDateTypeToLabel(type: ContactCustomDateType, custom: string): MaybeTranslation {\n\tif (type === ContactCustomDateType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactCustomDateTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactCustomWebsiteTypeToLabel: Record<ContactWebsiteType, TranslationKey> = {\n\t[ContactWebsiteType.PRIVATE]: \"private_label\",\n\t[ContactWebsiteType.WORK]: \"work_label\",\n\t[ContactWebsiteType.OTHER]: \"other_label\",\n\t[ContactWebsiteType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactCustomWebsiteTypeToLabel(type: ContactWebsiteType, custom: string): MaybeTranslation {\n\tif (type === ContactWebsiteType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactCustomWebsiteTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport type ContactComparator = (arg0: Contact, arg1: Contact) => number\n\n/**\n * Sorts by the following preferences:\n * 1. first name\n * 2. second name\n * 3. first email address\n * 4. id\n * Missing fields are sorted below existing fields\n */\nexport function compareContacts(contact1: Contact, contact2: Contact, sortByFirstName: boolean = true): number {\n\tlet c1First = contact1.firstName.trim()\n\tlet c2First = contact2.firstName.trim()\n\tlet c1Last = contact1.lastName.trim()\n\tlet c2Last = contact2.lastName.trim()\n\tlet c1MailLength = contact1.mailAddresses.length\n\tlet c2MailLength = contact2.mailAddresses.length\n\tlet [c1Primary, c1Secondary] = sortByFirstName ? [c1First, c1Last] : [c1Last, c1First]\n\tlet [c2Primary, c2Secondary] = sortByFirstName ? [c2First, c2Last] : [c2Last, c2First]\n\n\t// If the contact doesn't have either the first or the last name, use company as the first name. We cannot just make a string out of it\n\t// and compare it because we would lose priority of first name over last name and set name over unset name.\n\tif (!c1Primary && !c1Secondary) {\n\t\tc1Primary = contact1.company\n\t}\n\n\tif (!c2Primary && !c2Secondary) {\n\t\tc2Primary = contact2.company\n\t}\n\n\tif (c1Primary && !c2Primary) {\n\t\treturn -1\n\t} else if (c2Primary && !c1Primary) {\n\t\treturn 1\n\t} else {\n\t\tlet result = c1Primary.localeCompare(c2Primary)\n\n\t\tif (result === 0) {\n\t\t\tif (c1Secondary && !c2Secondary) {\n\t\t\t\treturn -1\n\t\t\t} else if (c2Secondary && !c1Secondary) {\n\t\t\t\treturn 1\n\t\t\t} else {\n\t\t\t\tresult = c1Secondary.localeCompare(c2Secondary)\n\t\t\t}\n\t\t}\n\n\t\tif (result === 0) {\n\t\t\t// names are equal or no names in contact\n\t\t\tif (c1MailLength > 0 && c2MailLength === 0) {\n\t\t\t\treturn -1\n\t\t\t} else if (c2MailLength > 0 && c1MailLength === 0) {\n\t\t\t\treturn 1\n\t\t\t} else if (c1MailLength === 0 && c2MailLength === 0) {\n\t\t\t\t// see Multiselect with shift and up arrow not working properly #152 at github\n\t\t\t\treturn sortCompareByReverseId(contact1, contact2)\n\t\t\t} else {\n\t\t\t\tresult = contact1.mailAddresses[0].address.trim().localeCompare(contact2.mailAddresses[0].address.trim())\n\n\t\t\t\tif (result === 0) {\n\t\t\t\t\t// see Multiselect with shift and up arrow not working properly #152 at github\n\t\t\t\t\treturn sortCompareByReverseId(contact1, contact2)\n\t\t\t\t} else {\n\t\t\t\t\treturn result\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn result\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAcaA,gCAA4E;EACvF,mBAAmB,UAAU;EAC7B,mBAAmB,OAAO;EAC1B,mBAAmB,QAAQ;EAC3B,mBAAmB,SAAS;AAC7B;AAEM,SAAS,2BAA2BC,MAA0BC,QAAkC;AACtG,KAAI,SAAS,mBAAmB,OAC/B,QAAO,KAAK,gBAAgB,UAAU,OAAO;KACvC;EACN,IAAI,MAAM,8BAA8B;AACxC,SAAO;CACP;AACD;MAEYC,gCAAgF;EAC3F,uBAAuB,UAAU;EACjC,uBAAuB,OAAO;EAC9B,uBAAuB,SAAS;EAChC,uBAAuB,MAAM;EAC7B,uBAAuB,QAAQ;EAC/B,uBAAuB,SAAS;AACjC;AAEM,SAAS,+BAA+BC,MAA8BF,QAAkC;AAC9G,KAAI,SAAS,uBAAuB,OACnC,QAAO,KAAK,gBAAgB,UAAU,OAAO;KACvC;EACN,IAAI,MAAM,8BAA8B;AACxC,SAAO;CACP;AACD;MAEYG,2BAAsE;EACjF,kBAAkB,UAAU;EAC5B,kBAAkB,WAAW;EAC7B,kBAAkB,OAAO;EACzB,kBAAkB,YAAY;EAC9B,kBAAkB,QAAQ;EAC1B,kBAAkB,SAAS;AAC5B;AAEM,SAAS,0BAA0BC,MAAyBJ,QAAkC;AACpG,KAAI,SAAS,kBAAkB,OAC9B,QAAO,KAAK,gBAAgB,UAAU,OAAO;KACvC;EACN,IAAI,MAAM,yBAAyB;AACnC,SAAO;CACP;AACD;MAEYK,iCAAkF;EAC7F,wBAAwB,SAAS;EACjC,wBAAwB,UAAU;EAClC,wBAAwB,SAAS;EACjC,wBAAwB,QAAQ;EAChC,wBAAwB,SAAS;EACjC,wBAAwB,WAAW;EACnC,wBAAwB,SAAS;EACjC,wBAAwB,UAAU;EAClC,wBAAwB,YAAY;EACpC,wBAAwB,UAAU;EAClC,wBAAwB,QAAQ;EAChC,wBAAwB,SAAS;AAClC;AAEM,SAAS,kCAAkCC,MAA+BN,QAAkC;AAClH,KAAI,SAAS,wBAAwB,OACpC,QAAO,KAAK,gBAAgB,UAAU,OAAO;KACvC;EACN,IAAI,MAAM,+BAA+B;AACzC,SAAO;CACP;AACD;MAEYO,oCAAwF;EACnG,2BAA2B,SAAS;EACpC,2BAA2B,WAAW;EACtC,2BAA2B,WAAW;EACtC,2BAA2B,UAAU;EACrC,2BAA2B,QAAQ;EACnC,2BAA2B,SAAS;AACrC;AAEM,SAAS,qCAAqCC,MAAkCR,QAAkC;AACxH,KAAI,SAAS,2BAA2B,OACvC,QAAO,KAAK,gBAAgB,UAAU,OAAO;KACvC;EACN,IAAI,MAAM,kCAAkC;AAC5C,SAAO;CACP;AACD;MAEYS,+BAA8E;EACzF,sBAAsB,cAAc;EACpC,sBAAsB,QAAQ;EAC9B,sBAAsB,SAAS;AAChC;AAEM,SAAS,gCAAgCC,MAA6BV,QAAkC;AAC9G,KAAI,SAAS,sBAAsB,OAClC,QAAO,KAAK,gBAAgB,UAAU,OAAO;KACvC;EACN,IAAI,MAAM,6BAA6B;AACvC,SAAO;CACP;AACD;MAEYW,kCAA8E;EACzF,mBAAmB,UAAU;EAC7B,mBAAmB,OAAO;EAC1B,mBAAmB,QAAQ;EAC3B,mBAAmB,SAAS;AAC7B;AAEM,SAAS,mCAAmCC,MAA0BZ,QAAkC;AAC9G,KAAI,SAAS,mBAAmB,OAC/B,QAAO,KAAK,gBAAgB,UAAU,OAAO;KACvC;EACN,IAAI,MAAM,gCAAgC;AAC1C,SAAO;CACP;AACD;AAYM,SAAS,gBAAgBa,UAAmBC,UAAmBC,kBAA2B,MAAc;CAC9G,IAAI,UAAU,SAAS,UAAU,MAAM;CACvC,IAAI,UAAU,SAAS,UAAU,MAAM;CACvC,IAAI,SAAS,SAAS,SAAS,MAAM;CACrC,IAAI,SAAS,SAAS,SAAS,MAAM;CACrC,IAAI,eAAe,SAAS,cAAc;CAC1C,IAAI,eAAe,SAAS,cAAc;CAC1C,IAAI,CAAC,WAAW,YAAY,GAAG,kBAAkB,CAAC,SAAS,MAAO,IAAG,CAAC,QAAQ,OAAQ;CACtF,IAAI,CAAC,WAAW,YAAY,GAAG,kBAAkB,CAAC,SAAS,MAAO,IAAG,CAAC,QAAQ,OAAQ;AAItF,MAAK,cAAc,YAClB,aAAY,SAAS;AAGtB,MAAK,cAAc,YAClB,aAAY,SAAS;AAGtB,KAAI,cAAc,UACjB,QAAO;SACG,cAAc,UACxB,QAAO;KACD;EACN,IAAI,SAAS,UAAU,cAAc,UAAU;AAE/C,MAAI,WAAW,EACd,KAAI,gBAAgB,YACnB,QAAO;SACG,gBAAgB,YAC1B,QAAO;IAEP,UAAS,YAAY,cAAc,YAAY;AAIjD,MAAI,WAAW,EAEd,KAAI,eAAe,KAAK,iBAAiB,EACxC,QAAO;SACG,eAAe,KAAK,iBAAiB,EAC/C,QAAO;SACG,iBAAiB,KAAK,iBAAiB,EAEjD,QAAO,uBAAuB,UAAU,SAAS;KAC3C;AACN,YAAS,SAAS,cAAc,GAAG,QAAQ,MAAM,CAAC,cAAc,SAAS,cAAc,GAAG,QAAQ,MAAM,CAAC;AAEzG,OAAI,WAAW,EAEd,QAAO,uBAAuB,UAAU,SAAS;IAEjD,QAAO;EAER;IAED,QAAO;CAER;AACD"}