{"version":3,"file":"emlUtils-afBEUvhM.js","names":["mail: MailBundle","fileName: string","date: Date","lines: string[]","key: string","recipients: MailBundleRecipient[]","name: string","string: string","id: string","subject: string","sentOn: Date","mode: MailExportMode"],"sources":["../../src/mail-app/mail/export/emlUtils.ts"],"sourcesContent":["import { MailBundle, MailBundleRecipient, MailExportMode } from \"../../../common/mailFunctionality/SharedMailUtils.js\"\nimport { createDataFile, DataFile, getCleanedMimeType } from \"../../../common/api/common/DataFile.js\"\nimport { assertNotNull, formatSortableDateTime, pad, stringToBase64, stringToUtf8Uint8Array, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport { sanitizeFilename } from \"../../../common/api/common/utils/FileUtils.js\"\n\nexport function mailToEmlFile(mail: MailBundle, fileName: string): DataFile {\n\tconst data = stringToUtf8Uint8Array(mailToEml(mail))\n\treturn createDataFile(fileName, \"message/rfc822\", data)\n}\n\nexport function _formatSmtpDateTime(date: Date): string {\n\tconst dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n\tconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\treturn (\n\t\tdayNames[date.getUTCDay()] +\n\t\t\", \" +\n\t\tdate.getUTCDate() +\n\t\t\" \" +\n\t\tmonthNames[date.getUTCMonth()] +\n\t\t\" \" +\n\t\tdate.getUTCFullYear() +\n\t\t\" \" +\n\t\tpad(date.getUTCHours(), 2) +\n\t\t\":\" +\n\t\tpad(date.getUTCMinutes(), 2) +\n\t\t\":\" +\n\t\tpad(date.getUTCSeconds(), 2) +\n\t\t\" +0000\"\n\t)\n}\n\n/**\n * Converts a mail into the plain text EML format.\n */\nexport function mailToEml(mail: MailBundle): string {\n\tconst lines: string[] = []\n\n\tif (mail.headers) {\n\t\tconst filteredHeaders = mail.headers\n\t\t\t// we want to make sure all line endings are exactly \\r\\n after we're done.\n\t\t\t.split(/\\r\\n|\\n/)\n\t\t\t.filter((line) => !line.match(/^\\s*(Content-Type:|boundary=)/))\n\t\tlines.push(...filteredHeaders)\n\t} else {\n\t\tlines.push(\"From: \" + mail.sender.address, \"MIME-Version: 1.0\")\n\n\t\tconst formatRecipients = (key: string, recipients: MailBundleRecipient[]) =>\n\t\t\t`${key}: ${recipients\n\t\t\t\t.map((recipient) => (recipient.name ? `${escapeSpecialCharacters(recipient.name)} ` : \"\") + `<${recipient.address}>`)\n\t\t\t\t.join(\",\")}`\n\n\t\tif (mail.to.length > 0) {\n\t\t\tlines.push(formatRecipients(\"To\", mail.to))\n\t\t}\n\n\t\tif (mail.cc.length > 0) {\n\t\t\tlines.push(formatRecipients(\"CC\", mail.cc))\n\t\t}\n\n\t\tif (mail.bcc.length > 0) {\n\t\t\tlines.push(formatRecipients(\"BCC\", mail.bcc))\n\t\t}\n\n\t\tlet subject = mail.subject.trim() === \"\" ? \"\" : `=?UTF-8?B?${uint8ArrayToBase64(stringToUtf8Uint8Array(mail.subject))}?=`\n\t\tlines.push(\n\t\t\t\"Subject: \" + subject,\n\t\t\t\"Date: \" + _formatSmtpDateTime(new Date(mail.sentOn)), // TODO (later) load conversation entries and write message id and references\n\t\t\t//\"Message-ID: \" + // <006e01cf442b$52864f10$f792ed30$@tutao.de>\n\t\t\t//References: <53074EB8.4010505@tutao.de> <DD374AF0-AC6D-4C58-8F38-7F6D8A0307F3@tutao.de> <530E3529.70503@tutao.de>\n\t\t)\n\t}\n\n\tlines.push(\n\t\t'Content-Type: multipart/related; boundary=\"------------79Bu5A16qPEYcVIZL@tutanota\"',\n\t\t\"\",\n\t\t\"--------------79Bu5A16qPEYcVIZL@tutanota\",\n\t\t\"Content-Type: text/html; charset=UTF-8\",\n\t\t\"Content-transfer-encoding: base64\",\n\t\t\"\",\n\t)\n\n\tfor (let bodyLine of breakIntoLines(stringToBase64(mail.body))) {\n\t\tlines.push(bodyLine)\n\t}\n\n\tlines.push(\"\")\n\n\tfor (let attachment of mail.attachments) {\n\t\tconst base64Filename = `=?UTF-8?B?${uint8ArrayToBase64(stringToUtf8Uint8Array(attachment.name))}?=`\n\t\tconst fileContentLines = breakIntoLines(uint8ArrayToBase64(attachment.data))\n\t\tlines.push(\n\t\t\t\"--------------79Bu5A16qPEYcVIZL@tutanota\",\n\t\t\t\"Content-Type: \" + getCleanedMimeType(attachment.mimeType) + \";\",\n\t\t\t\" name=\" + base64Filename + \"\",\n\t\t\t\"Content-Transfer-Encoding: base64\",\n\t\t\t\"Content-Disposition: attachment;\",\n\t\t\t\" filename=\" + base64Filename + \"\",\n\t\t)\n\n\t\tif (attachment.cid) {\n\t\t\tlines.push(\"Content-Id: <\" + attachment.cid + \">\")\n\t\t}\n\n\t\tlines.push(\"\")\n\n\t\t// don't use destructuring, big files can hit callstack limit\n\t\tfor (let fileLine of fileContentLines) {\n\t\t\tlines.push(fileLine)\n\t\t}\n\n\t\tlines.push(\"\")\n\t}\n\n\tlines.push(\"--------------79Bu5A16qPEYcVIZL@tutanota--\")\n\treturn lines.join(\"\\r\\n\")\n}\n\nfunction escapeSpecialCharacters(name: string): string {\n\t// There may be other special characters that need escaping\n\treturn name.replace(/[,<>]/gi, \"\\\\$&\")\n}\n\n/**\n * Break up a long string into lines of up to 78 characters\n * @param string\n * @returns the lines, each as an individual array\n */\nfunction breakIntoLines(string: string): Array<string> {\n\treturn string.length > 0 ? assertNotNull(string.match(/.{1,78}/g)) : []\n}\n\nexport function generateExportFileName(id: string, subject: string, sentOn: Date, mode: MailExportMode): string {\n\tlet filename = [...formatSortableDateTime(sentOn).split(\" \"), id, subject].join(\"-\")\n\tfilename = filename.trim()\n\n\tif (filename.length === 0) {\n\t\tfilename = \"unnamed\"\n\t} else if (filename.length > 96) {\n\t\t// windows MAX_PATH is 260, this should be fairly safe.\n\t\tfilename = filename.substring(0, 95) + \"_\"\n\t}\n\n\treturn sanitizeFilename(`${filename}.${mode}`)\n}\n"],"mappings":"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"}