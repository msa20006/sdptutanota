{"version":3,"file":"WorkerImpl-DIBtyULv.js","names":["self: DedicatedWorkerGlobalScope","browserData: BrowserData","event: PromiseRejectionEvent","e: string | Event","nbrOfBytes: number","exposedWorker: DelayedImpls<WorkerInterface>","message: WorkerRequest","requestType: string","args: ReadonlyArray<unknown>","e: Error"],"sources":["../../src/mail-app/workerUtils/worker/WorkerImpl.ts"],"sourcesContent":["import type { Commands } from \"../../../common/api/common/threading/MessageDispatcher.js\"\nimport { errorToObj, MessageDispatcher, Request } from \"../../../common/api/common/threading/MessageDispatcher.js\"\nimport { BookingFacade } from \"../../../common/api/worker/facades/lazy/BookingFacade.js\"\nimport { NotAuthenticatedError } from \"../../../common/api/common/error/RestError.js\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError.js\"\nimport { initLocator, locator, resetLocator } from \"./WorkerLocator.js\"\nimport { assertWorkerOrNode, isMainOrNode } from \"../../../common/api/common/Env.js\"\nimport type { BrowserData } from \"../../../common/misc/ClientConstants.js\"\nimport { CryptoFacade } from \"../../../common/api/worker/crypto/CryptoFacade.js\"\nimport type { GiftCardFacade } from \"../../../common/api/worker/facades/lazy/GiftCardFacade.js\"\nimport type { LoginFacade } from \"../../../common/api/worker/facades/LoginFacade.js\"\nimport type { CustomerFacade } from \"../../../common/api/worker/facades/lazy/CustomerFacade.js\"\nimport type { GroupManagementFacade } from \"../../../common/api/worker/facades/lazy/GroupManagementFacade.js\"\nimport { ConfigurationDatabase } from \"../../../common/api/worker/facades/lazy/ConfigurationDatabase.js\"\nimport { CalendarFacade } from \"../../../common/api/worker/facades/lazy/CalendarFacade.js\"\nimport { MailFacade } from \"../../../common/api/worker/facades/lazy/MailFacade.js\"\nimport { ShareFacade } from \"../../../common/api/worker/facades/lazy/ShareFacade.js\"\nimport { CounterFacade } from \"../../../common/api/worker/facades/lazy/CounterFacade.js\"\nimport type { Indexer } from \"../index/Indexer.js\"\nimport { SearchFacade } from \"../index/SearchFacade.js\"\nimport { MailAddressFacade } from \"../../../common/api/worker/facades/lazy/MailAddressFacade.js\"\nimport { UserManagementFacade } from \"../../../common/api/worker/facades/lazy/UserManagementFacade.js\"\nimport { DelayedImpls, exposeLocalDelayed, exposeRemote } from \"../../../common/api/common/WorkerProxy.js\"\nimport { random } from \"@tutao/tutanota-crypto\"\nimport type { NativeInterface } from \"../../../common/native/common/NativeInterface.js\"\nimport type { EntityRestInterface } from \"../../../common/api/worker/rest/EntityRestClient.js\"\nimport { RestClient } from \"../../../common/api/worker/rest/RestClient.js\"\nimport { IServiceExecutor } from \"../../../common/api/common/ServiceRequest.js\"\nimport { BlobFacade } from \"../../../common/api/worker/facades/lazy/BlobFacade.js\"\nimport { ExposedCacheStorage } from \"../../../common/api/worker/rest/DefaultEntityRestCache.js\"\nimport { BlobAccessTokenFacade } from \"../../../common/api/worker/facades/BlobAccessTokenFacade.js\"\nimport { EntropyFacade } from \"../../../common/api/worker/facades/EntropyFacade.js\"\nimport { WorkerFacade } from \"../../../common/api/worker/facades/WorkerFacade.js\"\nimport { SqlCipherFacade } from \"../../../common/native/common/generatedipc/SqlCipherFacade.js\"\nimport { WebWorkerTransport } from \"../../../common/api/common/threading/Transport.js\"\nimport { ContactFacade } from \"../../../common/api/worker/facades/lazy/ContactFacade.js\"\nimport { RecoverCodeFacade } from \"../../../common/api/worker/facades/lazy/RecoverCodeFacade.js\"\nimport { CacheManagementFacade } from \"../../../common/api/worker/facades/lazy/CacheManagementFacade.js\"\nimport { ExposedEventBus, MainInterface, WorkerRandomizer } from \"../../../common/api/worker/workerInterfaces.js\"\nimport { CryptoError } from \"@tutao/tutanota-crypto/error.js\"\nimport { CryptoWrapper } from \"../../../common/api/worker/crypto/CryptoWrapper.js\"\nimport { AsymmetricCryptoFacade } from \"../../../common/api/worker/crypto/AsymmetricCryptoFacade.js\"\nimport { MailExportFacade } from \"../../../common/api/worker/facades/lazy/MailExportFacade\"\nimport { BulkMailLoader } from \"../index/BulkMailLoader.js\"\n\nassertWorkerOrNode()\n\n/** Interface of the facades exposed by the worker, basically interface for the worker itself */\nexport interface WorkerInterface {\n\treadonly loginFacade: LoginFacade\n\treadonly customerFacade: CustomerFacade\n\treadonly giftCardFacade: GiftCardFacade\n\treadonly groupManagementFacade: GroupManagementFacade\n\treadonly configFacade: ConfigurationDatabase\n\treadonly calendarFacade: CalendarFacade\n\treadonly mailFacade: MailFacade\n\treadonly shareFacade: ShareFacade\n\treadonly cacheManagementFacade: CacheManagementFacade\n\treadonly counterFacade: CounterFacade\n\treadonly indexerFacade: Indexer\n\treadonly searchFacade: SearchFacade\n\treadonly bookingFacade: BookingFacade\n\treadonly mailAddressFacade: MailAddressFacade\n\treadonly blobAccessTokenFacade: BlobAccessTokenFacade\n\treadonly blobFacade: BlobFacade\n\treadonly userManagementFacade: UserManagementFacade\n\treadonly recoverCodeFacade: RecoverCodeFacade\n\treadonly restInterface: EntityRestInterface\n\treadonly serviceExecutor: IServiceExecutor\n\treadonly cryptoWrapper: CryptoWrapper\n\treadonly asymmetricCryptoFacade: AsymmetricCryptoFacade\n\treadonly cryptoFacade: CryptoFacade\n\treadonly cacheStorage: ExposedCacheStorage\n\treadonly sqlCipherFacade: SqlCipherFacade\n\treadonly random: WorkerRandomizer\n\treadonly eventBus: ExposedEventBus\n\treadonly entropyFacade: EntropyFacade\n\treadonly workerFacade: WorkerFacade\n\treadonly contactFacade: ContactFacade\n\treadonly mailExportFacade: MailExportFacade\n\treadonly bulkMailLoader: BulkMailLoader\n}\n\ntype WorkerRequest = Request<WorkerRequestType>\n\nexport class WorkerImpl implements NativeInterface {\n\tprivate readonly _scope: DedicatedWorkerGlobalScope\n\tprivate readonly _dispatcher: MessageDispatcher<MainRequestType, WorkerRequestType>\n\n\tconstructor(self: DedicatedWorkerGlobalScope) {\n\t\tthis._scope = self\n\t\tthis._dispatcher = new MessageDispatcher(new WebWorkerTransport(this._scope), this.queueCommands(this.exposedInterface), \"worker-main\")\n\t}\n\n\tasync init(browserData: BrowserData): Promise<void> {\n\t\t// import(\"tuta-sdk\").then(async (module) => {\n\t\t// \t// await module.default(\"wasm/tutasdk.wasm\")\n\t\t// \tconst entityClient = new module.EntityClient()\n\t\t// \tconst typeRef = new module.TypeRef(\"tutanota\", \"Mail\")\n\t\t// \tconsole.log(\"result from rust: \", awai t entityClient.load_element(typeRef, \"myId\"))\n\t\t// \ttypeRef.free()\n\t\t// \tentityClient.free()\n\t\t// })\n\n\t\tawait initLocator(this, browserData)\n\t\tconst workerScope = this._scope\n\n\t\t// only register oncaught error handler if we are in the *real* worker scope\n\t\t// Otherwise uncaught error handler might end up in an infinite loop for test cases.\n\t\tif (workerScope && !isMainOrNode()) {\n\t\t\tworkerScope.addEventListener(\"unhandledrejection\", (event: PromiseRejectionEvent) => {\n\t\t\t\tthis.sendError(event.reason)\n\t\t\t})\n\n\t\t\t// @ts-ignore\n\t\t\tworkerScope.onerror = (e: string | Event, source, lineno, colno, error) => {\n\t\t\t\tconsole.error(\"workerImpl.onerror\", e, source, lineno, colno, error)\n\n\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\tthis.sendError(error)\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst err = new Error(e)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\terr.lineNumber = lineno\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\terr.columnNumber = colno\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\terr.fileName = source\n\t\t\t\t\tthis.sendError(err)\n\t\t\t\t}\n\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\n\tget exposedInterface(): DelayedImpls<WorkerInterface> {\n\t\treturn {\n\t\t\tasync loginFacade() {\n\t\t\t\treturn locator.login\n\t\t\t},\n\n\t\t\tasync customerFacade() {\n\t\t\t\treturn locator.customer()\n\t\t\t},\n\n\t\t\tasync giftCardFacade() {\n\t\t\t\treturn locator.giftCards()\n\t\t\t},\n\n\t\t\tasync groupManagementFacade() {\n\t\t\t\treturn locator.groupManagement()\n\t\t\t},\n\n\t\t\tasync configFacade() {\n\t\t\t\treturn locator.configFacade()\n\t\t\t},\n\n\t\t\tasync calendarFacade() {\n\t\t\t\treturn locator.calendar()\n\t\t\t},\n\n\t\t\tasync mailFacade() {\n\t\t\t\treturn locator.mail()\n\t\t\t},\n\n\t\t\tasync shareFacade() {\n\t\t\t\treturn locator.share()\n\t\t\t},\n\n\t\t\tasync cacheManagementFacade() {\n\t\t\t\treturn locator.cacheManagement()\n\t\t\t},\n\n\t\t\tasync counterFacade() {\n\t\t\t\treturn locator.counters()\n\t\t\t},\n\n\t\t\tasync indexerFacade() {\n\t\t\t\treturn locator.indexer()\n\t\t\t},\n\n\t\t\tasync searchFacade() {\n\t\t\t\treturn locator.search()\n\t\t\t},\n\n\t\t\tasync bookingFacade() {\n\t\t\t\treturn locator.booking()\n\t\t\t},\n\n\t\t\tasync mailAddressFacade() {\n\t\t\t\treturn locator.mailAddress()\n\t\t\t},\n\n\t\t\tasync blobAccessTokenFacade() {\n\t\t\t\treturn locator.blobAccessToken\n\t\t\t},\n\n\t\t\tasync blobFacade() {\n\t\t\t\treturn locator.blob()\n\t\t\t},\n\n\t\t\tasync userManagementFacade() {\n\t\t\t\treturn locator.userManagement()\n\t\t\t},\n\n\t\t\tasync recoverCodeFacade() {\n\t\t\t\treturn locator.recoverCode()\n\t\t\t},\n\n\t\t\tasync restInterface() {\n\t\t\t\treturn locator.cache\n\t\t\t},\n\n\t\t\tasync serviceExecutor() {\n\t\t\t\treturn locator.serviceExecutor\n\t\t\t},\n\n\t\t\tasync cryptoWrapper() {\n\t\t\t\treturn locator.cryptoWrapper\n\t\t\t},\n\n\t\t\tasync asymmetricCryptoFacade() {\n\t\t\t\treturn locator.asymmetricCrypto\n\t\t\t},\n\n\t\t\tasync cryptoFacade() {\n\t\t\t\treturn locator.crypto\n\t\t\t},\n\n\t\t\tasync cacheStorage() {\n\t\t\t\treturn locator.cacheStorage\n\t\t\t},\n\n\t\t\tasync sqlCipherFacade() {\n\t\t\t\treturn locator.sqlCipherFacade\n\t\t\t},\n\n\t\t\tasync random() {\n\t\t\t\treturn {\n\t\t\t\t\tasync generateRandomNumber(nbrOfBytes: number) {\n\t\t\t\t\t\treturn random.generateRandomNumber(nbrOfBytes)\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync eventBus() {\n\t\t\t\treturn locator.eventBusClient\n\t\t\t},\n\n\t\t\tasync entropyFacade() {\n\t\t\t\treturn locator.entropyFacade\n\t\t\t},\n\n\t\t\tasync workerFacade() {\n\t\t\t\treturn locator.workerFacade\n\t\t\t},\n\n\t\t\tasync contactFacade() {\n\t\t\t\treturn locator.contactFacade()\n\t\t\t},\n\t\t\tasync bulkMailLoader() {\n\t\t\t\treturn locator.bulkMailLoader()\n\t\t\t},\n\t\t\tasync mailExportFacade() {\n\t\t\t\treturn locator.mailExportFacade()\n\t\t\t},\n\t\t}\n\t}\n\n\tqueueCommands(exposedWorker: DelayedImpls<WorkerInterface>): Commands<WorkerRequestType> {\n\t\treturn {\n\t\t\tsetup: async (message) => {\n\t\t\t\tconsole.error(\"WorkerImpl: setup was called after bootstrap! message: \", message)\n\t\t\t},\n\t\t\ttestEcho: (message) =>\n\t\t\t\tPromise.resolve({\n\t\t\t\t\tmsg: \">>> \" + message.args[0].msg,\n\t\t\t\t}),\n\t\t\ttestError: (message) => {\n\t\t\t\tconst errorTypes = {\n\t\t\t\t\tProgrammingError,\n\t\t\t\t\tCryptoError,\n\t\t\t\t\tNotAuthenticatedError,\n\t\t\t\t}\n\t\t\t\t// @ts-ignore\n\t\t\t\tlet ErrorType = errorTypes[message.args[0].errorType]\n\t\t\t\treturn Promise.reject(new ErrorType(`wtf: ${message.args[0].errorType}`))\n\t\t\t},\n\t\t\treset: (message: WorkerRequest) => {\n\t\t\t\treturn resetLocator()\n\t\t\t},\n\t\t\trestRequest: (message: WorkerRequest) => {\n\t\t\t\t// This horror is to add auth headers to the admin client\n\t\t\t\tconst args = message.args as Parameters<RestClient[\"request\"]>\n\t\t\t\tlet [path, method, options] = args\n\t\t\t\toptions = options ?? {}\n\t\t\t\toptions.headers = { ...locator.user.createAuthHeaders(), ...options.headers }\n\t\t\t\treturn locator.restClient.request(path, method, options)\n\t\t\t},\n\n\t\t\tfacade: exposeLocalDelayed<DelayedImpls<WorkerInterface>, WorkerRequestType>(exposedWorker),\n\t\t}\n\t}\n\n\tinvokeNative(requestType: string, args: ReadonlyArray<unknown>): Promise<any> {\n\t\treturn this._dispatcher.postRequest(new Request(\"execNative\", [requestType, args]))\n\t}\n\n\tgetMainInterface(): MainInterface {\n\t\treturn exposeRemote<MainInterface>((request) => this._dispatcher.postRequest(request))\n\t}\n\n\tsendError(e: Error): Promise<void> {\n\t\treturn this._dispatcher.postRequest(new Request(\"error\", [errorToObj(e)]))\n\t}\n}\n"],"mappings":"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"}