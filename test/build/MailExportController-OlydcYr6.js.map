{"version":3,"file":"MailExportController-OlydcYr6.js","names":["mailExportFacade: MailExportFacade","sanitizer: HtmlSanitizer","exportFacade: ExportFacade","logins: LoginController","mailboxModel: MailboxModel","scheduler: Scheduler","mailboxDetail: MailboxDetail","mailbagId: Id","mailId: Id","mailBags: MailBag[]","mailBag: MailBag","startId: Id"],"sources":["../../src/mail-app/native/main/MailExportController.ts"],"sourcesContent":["import { MailboxDetail, MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport { MailBag } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { GENERATED_MAX_ID, getElementId, isSameId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { assertNotNull, delay, filterInt, isNotNull, lastThrow } from \"@tutao/tutanota-utils\"\nimport { HtmlSanitizer } from \"../../../common/misc/HtmlSanitizer.js\"\nimport { ExportFacade } from \"../../../common/native/common/generatedipc/ExportFacade.js\"\nimport { LoginController } from \"../../../common/api/main/LoginController.js\"\nimport { CancelledError } from \"../../../common/api/common/error/CancelledError.js\"\nimport { FileOpenError } from \"../../../common/api/common/error/FileOpenError.js\"\nimport { isOfflineError } from \"../../../common/api/common/utils/ErrorUtils.js\"\nimport { MailExportFacade } from \"../../../common/api/worker/facades/lazy/MailExportFacade.js\"\nimport { SuspensionError } from \"../../../common/api/common/error/SuspensionError\"\nimport { Scheduler } from \"../../../common/api/common/utils/Scheduler\"\nimport { ExportError, ExportErrorReason } from \"../../../common/api/common/error/ExportError\"\nimport { BlobServerUrl } from \"../../../common/api/entities/storage/TypeRefs\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\n\nassertMainOrNode()\n\nexport type MailExportState =\n\t| { type: \"idle\" }\n\t| { type: \"exporting\"; mailboxDetail: MailboxDetail; progress: number; exportedMails: number }\n\t| { type: \"locked\" }\n\t| { type: \"error\"; message: string }\n\t| {\n\t\t\ttype: \"finished\"\n\t\t\tmailboxDetail: MailboxDetail\n\t  }\n\nconst TAG = \"MailboxExport\"\n\n/**\n * Controller to keep the state of mail exporting with the details.\n */\nexport class MailExportController {\n\tprivate _state: Stream<MailExportState> = stream({ type: \"idle\" })\n\tprivate servers?: BlobServerUrl[]\n\tprivate serverIndex: number = 0\n\n\tconstructor(\n\t\tprivate readonly mailExportFacade: MailExportFacade,\n\t\tprivate readonly sanitizer: HtmlSanitizer,\n\t\tprivate readonly exportFacade: ExportFacade,\n\t\tprivate readonly logins: LoginController,\n\t\tprivate readonly mailboxModel: MailboxModel,\n\t\tprivate readonly scheduler: Scheduler,\n\t) {}\n\n\tget state(): Stream<MailExportState> {\n\t\treturn this._state\n\t}\n\n\tprivate get userId(): Id {\n\t\treturn this.logins.getUserController().userId\n\t}\n\n\t/**\n\t * Start exporting the mailbox for the user\n\t * @param mailboxDetail\n\t */\n\tasync startExport(mailboxDetail: MailboxDetail) {\n\t\tconst allMailBags = [assertNotNull(mailboxDetail.mailbox.currentMailBag), ...mailboxDetail.mailbox.archivedMailBags]\n\n\t\ttry {\n\t\t\tawait this.exportFacade.startMailboxExport(this.userId, mailboxDetail.mailbox._id, allMailBags[0]._id, GENERATED_MAX_ID)\n\t\t} catch (e) {\n\t\t\tif (e instanceof CancelledError) {\n\t\t\t\tconsole.log(\"Export start cancelled\")\n\t\t\t\treturn\n\t\t\t} else if (e instanceof ExportError && e.data === ExportErrorReason.LockedForUser) {\n\t\t\t\tthis._state({ type: \"locked\" })\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\n\t\tthis._state({ type: \"exporting\", mailboxDetail: mailboxDetail, progress: 0, exportedMails: 0 })\n\n\t\tawait this.runExport(mailboxDetail, allMailBags, GENERATED_MAX_ID)\n\t}\n\n\tasync resumeIfNeeded() {\n\t\tconst exportState = await this.exportFacade.getMailboxExportState(this.userId)\n\t\tconsole.log(TAG, `Export, previous state: ${exportState?.type}`)\n\t\tif (exportState) {\n\t\t\tif (exportState.type === \"running\") {\n\t\t\t\tconst mailboxDetail = await this.mailboxModel.getMailboxDetailByMailboxId(exportState.mailboxId)\n\t\t\t\tif (mailboxDetail == null) {\n\t\t\t\t\tconsole.warn(TAG, `Did not find mailbox to resume export: ${exportState.mailboxId}`)\n\t\t\t\t\tawait this.cancelExport()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis._state({\n\t\t\t\t\ttype: \"exporting\",\n\t\t\t\t\tmailboxDetail: mailboxDetail,\n\t\t\t\t\tprogress: 0,\n\t\t\t\t\texportedMails: exportState.exportedMails,\n\t\t\t\t})\n\t\t\t\tawait this.resumeExport(mailboxDetail, exportState.mailBagId, exportState.mailId)\n\t\t\t} else if (exportState.type === \"finished\") {\n\t\t\t\tconst mailboxDetail = await this.mailboxModel.getMailboxDetailByMailboxId(exportState.mailboxId)\n\t\t\t\tif (mailboxDetail == null) {\n\t\t\t\t\tconsole.warn(TAG, `Did not find mailbox to resume export: ${exportState.mailboxId}`)\n\t\t\t\t\tawait this.cancelExport()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis._state({ type: \"finished\", mailboxDetail: mailboxDetail })\n\t\t\t} else if (exportState.type === \"locked\") {\n\t\t\t\tthis._state({ type: \"locked\" })\n\t\t\t\tthis.scheduler.scheduleAfter(() => this.resumeIfNeeded(), 1000 * 60 * 5) // 5 min\n\t\t\t}\n\t\t}\n\t}\n\n\tasync openExportDirectory() {\n\t\tif (this._state().type === \"finished\") {\n\t\t\tawait this.exportFacade.openExportDirectory(this.userId)\n\t\t}\n\t}\n\n\t/**\n\t * When the user wants to cancel the exporting\n\t */\n\tasync cancelExport() {\n\t\tthis._state({ type: \"idle\" })\n\t\tawait this.exportFacade.clearExportState(this.userId)\n\t}\n\n\tprivate async resumeExport(mailboxDetail: MailboxDetail, mailbagId: Id, mailId: Id) {\n\t\tconsole.log(TAG, `Resuming export from mail bag: ${mailbagId} ${mailId}`)\n\t\tconst allMailBags = [assertNotNull(mailboxDetail.mailbox.currentMailBag), ...mailboxDetail.mailbox.archivedMailBags]\n\t\tconst currentMailBagIndex = allMailBags.findIndex((mb) => mb._id === mailbagId)\n\t\tconst mailBags = allMailBags.slice(currentMailBagIndex)\n\n\t\tawait this.runExport(mailboxDetail, mailBags, mailId)\n\t}\n\n\tprivate async runExport(mailboxDetail: MailboxDetail, mailBags: MailBag[], mailId: Id) {\n\t\tthis.servers = await this.mailExportFacade.getExportServers(mailboxDetail.mailGroup)\n\t\tfor (const mailBag of mailBags) {\n\t\t\tawait this.exportMailBag(mailBag, mailId)\n\t\t\tif (this._state().type !== \"exporting\") {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif (this._state().type !== \"exporting\") {\n\t\t\treturn\n\t\t}\n\t\tawait this.exportFacade.endMailboxExport(this.userId)\n\t\tthis._state({ type: \"finished\", mailboxDetail: mailboxDetail })\n\t}\n\n\tprivate async exportMailBag(mailBag: MailBag, startId: Id): Promise<void> {\n\t\tlet currentStartId = startId\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tconst downloadedMails = await this.mailExportFacade.loadFixedNumberOfMailsWithCache(mailBag.mails, currentStartId, this.getServerUrl())\n\t\t\t\tif (downloadedMails.length === 0) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tconst downloadedMailDetails = await this.mailExportFacade.loadMailDetails(downloadedMails)\n\t\t\t\tconst attachmentInfo = await this.mailExportFacade.loadAttachments(downloadedMails, this.getServerUrl())\n\t\t\t\tfor (const { mail, mailDetails } of downloadedMailDetails) {\n\t\t\t\t\tif (this._state().type !== \"exporting\") {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tconst mailAttachmentInfo = mail.attachments\n\t\t\t\t\t\t.map((attachmentId) => attachmentInfo.find((attachment) => isSameId(attachment._id, attachmentId)))\n\t\t\t\t\t\t.filter(isNotNull)\n\t\t\t\t\tconst attachments = await this.mailExportFacade.loadAttachmentData(mail, mailAttachmentInfo)\n\t\t\t\t\tconst { makeMailBundle } = await import(\"../../mail/export/Bundler.js\")\n\t\t\t\t\tconst mailBundle = makeMailBundle(this.sanitizer, mail, mailDetails, attachments)\n\n\t\t\t\t\t// can't write export if it was canceled\n\t\t\t\t\tif (this._state().type !== \"exporting\") {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.exportFacade.saveMailboxExport(mailBundle, this.userId, mailBag._id, getElementId(mail))\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof FileOpenError) {\n\t\t\t\t\t\t\tthis._state({ type: \"error\", message: e.message })\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcurrentStartId = getElementId(lastThrow(downloadedMails))\n\t\t\t\tconst currentState = this._state()\n\t\t\t\tif (currentState.type != \"exporting\") {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis._state({ ...currentState, exportedMails: currentState.exportedMails + downloadedMails.length })\n\t\t\t} catch (e) {\n\t\t\t\tif (isOfflineError(e)) {\n\t\t\t\t\tconsole.log(TAG, \"Offline, will retry later\")\n\t\t\t\t\tawait delay(1000 * 60) // 1 min\n\t\t\t\t} else if (e instanceof SuspensionError) {\n\t\t\t\t\tconst timeToWait = Math.max(filterInt(assertNotNull(e.data)), 1)\n\t\t\t\t\tconsole.log(TAG, `Pausing for ${Math.floor(timeToWait / 1000 + 0.5)} seconds`)\n\t\t\t\t\tawait delay(timeToWait)\n\t\t\t\t\tif (this._state().type !== \"exporting\") {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t\tconsole.log(TAG, \"Trying to continue with export\")\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getServerUrl(): string {\n\t\tif (this.servers) {\n\t\t\tthis.serverIndex += 1\n\t\t\tif (this.serverIndex >= this.servers.length) {\n\t\t\t\tthis.serverIndex = 0\n\t\t\t}\n\t\t\treturn this.servers[this.serverIndex].url\n\t\t}\n\t\tthrow new Error(\"No servers\")\n\t}\n}\n"],"mappings":"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"}