{"version":3,"file":"CalendarTestUtils-I5CFxRuP.js","names":["ownerRecipient: Recipient","ownerAliasRecipient: Recipient","otherRecipient: Recipient","otherRecipient2: Recipient","thirdRecipient: Recipient","calendars: ReadonlyMap<Id, CalendarInfo>","ownAddresses: ReadonlyArray<EncryptedMailAddress>","aliases: Array<string>","accountType: AccountType","defaultSender?: string","businessFeatureOrdered: boolean","isNewPaidPlan: boolean","user?: User","userSettingsGroupRoot?: UserSettingsGroupRoot","customizations: Feature[]","element: string","_id: string","startTime: Date","endTime: Date","uid: string","user: User","groupId: Id","capability: ShareCapability","iso: string","scheduler: AlarmScheduler","matchers"],"sources":["../tests/calendar/CalendarTestUtils.ts"],"sourcesContent":["import { AccountType, ContactAddressType, FeatureType, GroupType, ShareCapability, TimeFormat } from \"../../../src/common/api/common/TutanotaConstants.js\"\nimport type { UserController } from \"../../../src/common/api/main/UserController.js\"\nimport {\n\tBookingsRefTypeRef,\n\tCustomerInfoTypeRef,\n\tCustomerTypeRef,\n\tFeature,\n\tFeatureTypeRef,\n\tGroupInfoTypeRef,\n\tGroupMembershipTypeRef,\n\tGroupTypeRef,\n\tMailAddressAliasTypeRef,\n\tPlanConfigurationTypeRef,\n\tUser,\n\tUserTypeRef,\n} from \"../../../src/common/api/entities/sys/TypeRefs.js\"\nimport { GENERATED_MAX_ID } from \"../../../src/common/api/common/utils/EntityUtils.js\"\nimport { downcast, LazyLoaded } from \"@tutao/tutanota-utils\"\nimport {\n\tCalendarEvent,\n\tCalendarEventTypeRef,\n\tCalendarGroupRootTypeRef,\n\tContactAddressTypeRef,\n\tContactTypeRef,\n\tEncryptedMailAddress,\n\tEncryptedMailAddressTypeRef,\n\tMailboxGroupRootTypeRef,\n\tMailBoxTypeRef,\n\tTutanotaPropertiesTypeRef,\n\tUserSettingsGroupRoot,\n} from \"../../../src/common/api/entities/tutanota/TypeRefs.js\"\nimport type { CalendarInfo } from \"../../../src/calendar-app/calendar/model/CalendarModel\"\nimport { Recipient, RecipientType } from \"../../../src/common/api/common/recipients/Recipient.js\"\nimport { DateTime } from \"luxon\"\nimport { createTestEntity } from \"../TestUtils.js\"\nimport { matchers, object, when } from \"testdouble\"\nimport { MailboxDetail } from \"../../../src/common/mailFunctionality/MailboxModel.js\"\nimport { AlarmScheduler } from \"../../../src/common/calendar/date/AlarmScheduler.js\"\nimport { FolderSystem } from \"../../../src/common/api/common/mail/FolderSystem.js\"\n\nexport const ownerMailAddress = \"calendarowner@tutanota.de\" as const\nexport const ownerId = \"ownerId\" as const\nexport const calendarGroupId = \"0\" as const\n\nexport const ownerAddress = createTestEntity(EncryptedMailAddressTypeRef, {\n\taddress: ownerMailAddress,\n\tname: \"Calendar Owner\",\n})\nexport const ownerRecipient: Recipient = {\n\taddress: ownerAddress.address,\n\tname: ownerAddress.name,\n\ttype: RecipientType.INTERNAL,\n\tcontact: null,\n}\nexport const ownerAlias = createTestEntity(EncryptedMailAddressTypeRef, {\n\taddress: \"calendarowneralias@tutanota.de\",\n\tname: \"Calendar Owner Alias\",\n})\nexport const ownerAliasRecipient: Recipient = {\n\taddress: ownerAlias.address,\n\tname: ownerAlias.name,\n\ttype: RecipientType.INTERNAL,\n\tcontact: null,\n}\nexport const otherAddress = createTestEntity(EncryptedMailAddressTypeRef, {\n\taddress: \"someone@tutanota.de\",\n\tname: \"Some One\",\n})\nexport const otherRecipient: Recipient = {\n\taddress: otherAddress.address,\n\tname: otherAddress.name,\n\ttype: RecipientType.EXTERNAL,\n\tcontact: createTestEntity(ContactTypeRef, {\n\t\tnickname: otherAddress.name,\n\t\tpresharedPassword: \"otherPassword\",\n\t\taddresses: [\n\t\t\tcreateTestEntity(ContactAddressTypeRef, {\n\t\t\t\taddress: otherAddress.address,\n\t\t\t\ttype: ContactAddressType.WORK,\n\t\t\t}),\n\t\t],\n\t}),\n}\nexport const otherAddress2 = createTestEntity(EncryptedMailAddressTypeRef, {\n\taddress: \"someoneelse@tutanota.de\",\n\tname: \"Some One Else\",\n})\nexport const otherRecipient2: Recipient = {\n\taddress: otherAddress2.address,\n\tname: otherAddress2.name,\n\ttype: RecipientType.INTERNAL,\n\tcontact: createTestEntity(ContactTypeRef, {\n\t\tnickname: otherAddress2.name,\n\t\tpresharedPassword: \"otherPassword2\",\n\t\taddresses: [\n\t\t\tcreateTestEntity(ContactAddressTypeRef, {\n\t\t\t\taddress: otherAddress2.address,\n\t\t\t\ttype: ContactAddressType.WORK,\n\t\t\t}),\n\t\t],\n\t}),\n}\n\nexport const thirdAddress = createTestEntity(EncryptedMailAddressTypeRef, { address: \"somethirdaddress@tuta.com\", name: \"thirdperson\" })\nexport const thirdRecipient: Recipient = {\n\taddress: thirdAddress.address,\n\tname: thirdAddress.name,\n\ttype: RecipientType.INTERNAL,\n\tcontact: createTestEntity(ContactTypeRef, {\n\t\tnickname: \"drei\",\n\t\tpresharedPassword: \"noPassword\",\n\t\taddresses: [\n\t\t\tcreateTestEntity(ContactAddressTypeRef, {\n\t\t\t\taddress: thirdAddress.address,\n\t\t\t\ttype: ContactAddressType.OTHER,\n\t\t\t}),\n\t\t],\n\t}),\n}\n\nexport const calendars: ReadonlyMap<Id, CalendarInfo> = new Map([\n\t[\n\t\t\"ownCalendar\",\n\t\t{\n\t\t\tgroupRoot: createTestEntity(CalendarGroupRootTypeRef, {}),\n\t\t\tshared: false,\n\t\t\tuserIsOwner: true,\n\t\t\tlongEvents: new LazyLoaded(() => Promise.resolve([])),\n\t\t\tgroupInfo: createTestEntity(GroupInfoTypeRef, {}),\n\t\t\tgroup: createTestEntity(GroupTypeRef, {\n\t\t\t\t_id: \"ownCalendar\",\n\t\t\t\tuser: \"ownerId\",\n\t\t\t\ttype: GroupType.Calendar,\n\t\t\t}),\n\t\t\tisExternal: false,\n\t\t},\n\t],\n\t[\n\t\t\"ownSharedCalendar\",\n\t\t{\n\t\t\tgroupRoot: createTestEntity(CalendarGroupRootTypeRef, {}),\n\t\t\tshared: true,\n\t\t\tuserIsOwner: true,\n\t\t\tlongEvents: new LazyLoaded(() => Promise.resolve([])),\n\t\t\tgroupInfo: createTestEntity(GroupInfoTypeRef, {}),\n\t\t\tgroup: createTestEntity(GroupTypeRef, {\n\t\t\t\t_id: \"ownSharedCalendar\",\n\t\t\t\tuser: \"ownerId\",\n\t\t\t\ttype: GroupType.Calendar,\n\t\t\t}),\n\t\t\tisExternal: false,\n\t\t},\n\t],\n\t[\n\t\t\"ownExternalCalendar\",\n\t\t{\n\t\t\tgroupRoot: createTestEntity(CalendarGroupRootTypeRef, {}),\n\t\t\tshared: false,\n\t\t\tuserIsOwner: true,\n\t\t\tlongEvents: new LazyLoaded(() => Promise.resolve([])),\n\t\t\tgroupInfo: createTestEntity(GroupInfoTypeRef, {}),\n\t\t\tgroup: createTestEntity(GroupTypeRef, {\n\t\t\t\t_id: \"ownExternalCalendar\",\n\t\t\t\tuser: \"ownerId\",\n\t\t\t\ttype: GroupType.Calendar,\n\t\t\t}),\n\t\t\tisExternal: true,\n\t\t},\n\t],\n\t[\n\t\t\"sharedCalendar\",\n\t\t{\n\t\t\tgroupRoot: createTestEntity(CalendarGroupRootTypeRef, {}),\n\t\t\tshared: true,\n\t\t\tuserIsOwner: false,\n\t\t\tlongEvents: new LazyLoaded(() => Promise.resolve([])),\n\t\t\tgroupInfo: createTestEntity(GroupInfoTypeRef, {}),\n\t\t\tgroup: createTestEntity(GroupTypeRef, {\n\t\t\t\t_id: \"sharedCalendar\",\n\t\t\t\tuser: \"otherId\",\n\t\t\t\ttype: GroupType.Calendar,\n\t\t\t}),\n\t\t\tisExternal: false,\n\t\t},\n\t],\n])\n\nexport const ownAddresses: ReadonlyArray<EncryptedMailAddress> = [ownerAddress, ownerAlias]\n\nexport function makeUserController(\n\taliases: Array<string> = [],\n\taccountType: AccountType = AccountType.PAID,\n\tdefaultSender?: string,\n\tbusinessFeatureOrdered: boolean = false,\n\tisNewPaidPlan: boolean = false,\n\tuser?: User,\n\tuserSettingsGroupRoot?: UserSettingsGroupRoot,\n): UserController {\n\tconst bookingsRef = createTestEntity(BookingsRefTypeRef, {\n\t\titems: GENERATED_MAX_ID,\n\t})\n\tconst customizations: Feature[] = []\n\n\tif (businessFeatureOrdered) {\n\t\tcustomizations.push(\n\t\t\tcreateTestEntity(FeatureTypeRef, {\n\t\t\t\tfeature: FeatureType.BusinessFeatureEnabled,\n\t\t\t}),\n\t\t)\n\t}\n\n\treturn downcast({\n\t\tuser: createTestEntity(UserTypeRef, {\n\t\t\t_id: ownerId,\n\t\t\tmemberships: [\n\t\t\t\tcreateTestEntity(GroupMembershipTypeRef, {\n\t\t\t\t\tgroupType: GroupType.Mail,\n\t\t\t\t}),\n\t\t\t\tcreateTestEntity(GroupMembershipTypeRef, {\n\t\t\t\t\tgroupType: GroupType.Contact,\n\t\t\t\t}),\n\t\t\t],\n\t\t\taccountType,\n\t\t\t...user,\n\t\t}),\n\t\tprops: createTestEntity(TutanotaPropertiesTypeRef, {\n\t\t\tdefaultSender: defaultSender || ownerMailAddress,\n\t\t}),\n\t\tuserGroupInfo: createTestEntity(GroupInfoTypeRef, {\n\t\t\tmailAddressAliases: aliases.map((address) =>\n\t\t\t\tcreateTestEntity(MailAddressAliasTypeRef, {\n\t\t\t\t\tmailAddress: address,\n\t\t\t\t\tenabled: true,\n\t\t\t\t}),\n\t\t\t),\n\t\t\tmailAddress: ownerMailAddress,\n\t\t}),\n\t\tuserSettingsGroupRoot: {\n\t\t\ttimeFormat: TimeFormat.TWENTY_FOUR_HOURS,\n\t\t\tgroupSettings: [],\n\t\t\t...userSettingsGroupRoot,\n\t\t},\n\t\tisInternalUser: () => true,\n\t\tisFreeAccount: () => true,\n\t\tisNewPaidPlan: () => isNewPaidPlan,\n\t\tloadCustomer: () =>\n\t\t\tPromise.resolve(\n\t\t\t\tcreateTestEntity(CustomerTypeRef, {\n\t\t\t\t\tcustomizations: customizations,\n\t\t\t\t}),\n\t\t\t),\n\t\tloadCustomerInfo: () =>\n\t\t\tPromise.resolve(\n\t\t\t\tcreateTestEntity(CustomerInfoTypeRef, {\n\t\t\t\t\tbookings: bookingsRef,\n\t\t\t\t}),\n\t\t\t),\n\t\tgetCalendarMemberships: () => {\n\t\t\t//TODO\n\t\t\treturn []\n\t\t},\n\t\tgetPlanConfig: () =>\n\t\t\tPromise.resolve(\n\t\t\t\tcreateTestEntity(PlanConfigurationTypeRef, {\n\t\t\t\t\teventInvites: businessFeatureOrdered || isNewPaidPlan,\n\t\t\t\t}),\n\t\t\t),\n\t})\n}\n\nexport function makeCalendarInfo(type: \"own\" | \"shared\" | \"external\", id: string): CalendarInfo {\n\treturn {\n\t\tgroupRoot: downcast({\n\t\t\tlongEvents: \"longEventsList\",\n\t\t\tshortEvents: \"shortEventsList\",\n\t\t}),\n\t\tgroupInfo: downcast({}),\n\t\tgroup: createTestEntity(GroupTypeRef, {\n\t\t\t_id: id,\n\t\t\ttype: GroupType.Calendar,\n\t\t\tuser: type === \"own\" ? ownerId : \"anotherUserId\",\n\t\t}),\n\t\tshared: type === \"shared\",\n\t\tuserIsOwner: type === \"own\",\n\t\tisExternal: type === \"external\",\n\t}\n}\n\nfunction id(element: string): IdTuple {\n\treturn [\"list\", element]\n}\n\nexport function makeEvent(_id: string, startTime: Date, endTime: Date, uid: string = \"\"): CalendarEvent {\n\treturn createTestEntity(CalendarEventTypeRef, {\n\t\t_ownerGroup: \"ownerGroup\",\n\t\t_id: id(_id),\n\t\tstartTime,\n\t\tendTime,\n\t\tuid,\n\t})\n}\n\nexport function addCapability(user: User, groupId: Id, capability: ShareCapability) {\n\tuser.memberships.push(\n\t\tcreateTestEntity(GroupMembershipTypeRef, {\n\t\t\tgroup: groupId,\n\t\t\tcapability,\n\t\t}),\n\t)\n}\n\nexport const zone = \"Europe/Berlin\"\n\n/** create a js date object corresponding to the given ISO-like date string (YYYY-MM-DDTHH:MM)in\n * the {@param useZone} time zone, which defaults to Europe/Berlin (UTC+2)\n * times can be omitted.\n * */\nexport function getDateInZone(iso: string, useZone = zone): Date {\n\tconst dt = DateTime.fromISO(iso, { zone: useZone })\n\tif (!dt.isValid) {\n\t\tthrow new Error(`Invalid date! ${iso} ${dt.invalidExplanation}`)\n\t}\n\treturn dt.toJSDate()\n}\n\n/** create a js date object corresponding to the given ISO-like date string (YYYY-MM-DDTHH:MM)in\n * the utc time zone\n * times can be omitted.\n * */\nexport function getDateInUTC(iso: string): Date {\n\tconst dt = DateTime.fromISO(iso, { zone: \"utc\" })\n\tif (!dt.isValid) {\n\t\tthrow new Error(`Invalid date! ${iso} ${dt.invalidExplanation}`)\n\t}\n\treturn dt.toJSDate()\n}\n\nexport function makeAlarmScheduler(): AlarmScheduler {\n\tconst scheduler: AlarmScheduler = object()\n\twhen(scheduler.scheduleAlarm(matchers.anything(), matchers.anything(), matchers.anything(), matchers.anything)).thenReturn(undefined)\n\twhen(scheduler.cancelAlarm(matchers.anything())).thenReturn(undefined)\n\treturn scheduler\n}\n"],"mappings":"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"}