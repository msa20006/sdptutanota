{"version":3,"file":"testInNode.js","names":[],"sources":["../tests/testInNode.ts"],"sourcesContent":["// some things should be defined before we import the tests\n\n// @ts-nocheck\nglobalThis.isBrowser = false\n\nconst noOp = () => {}\n\n/**\n * runs this test exclusively on browsers (not node)\n */\nglobalThis.browser = () => noOp\n\n/**\n * runs this test exclusively on node (not browsers)\n */\nglobalThis.node = (func) => func\n\nconst { JSDOM } = await import(\"jsdom\")\nconst dom = new JSDOM(\"\", {\n\t// So we can get `requestAnimationFrame`\n\tpretendToBeVisual: true,\n})\n\nglobalThis.requestAnimationFrame = dom.window.requestAnimationFrame\nglobalThis.window = dom.window\ndom.reconfigure({ url: \"http://tutanota.com\" })\nglobalThis.window.getElementsByTagName = function () {} // for styles.js\nglobalThis.window.document.addEventListener = function () {}\nglobalThis.document = globalThis.window.document\n// globalThis.navigator = globalThis.window.navigator\nconst local = {}\nglobalThis.localStorage = {\n\tgetItem: (key) => local[key],\n\tsetItem: (key, value) => (local[key] = value),\n}\nglobalThis.requestAnimationFrame = globalThis.requestAnimationFrame || ((callback) => setTimeout(callback, 10))\n\nglobalThis.btoa = (str) => Buffer.from(str, \"binary\").toString(\"base64\")\nglobalThis.atob = (b64Encoded) => Buffer.from(b64Encoded, \"base64\").toString(\"binary\")\nglobalThis.WebSocket = noOp\nglobalThis.window.CompressionStream = CompressionStream\n\nconst nowOffset = Date.now()\nglobalThis.performance = {\n\tnow: function () {\n\t\treturn Date.now() - nowOffset\n\t},\n}\nglobalThis.performance = {\n\tnow: Date.now,\n\tmark: noOp,\n\tmeasure: noOp,\n}\n// modern node *does* have it set globally but it sometimes doesn't work\nconst crypto = await import(\"node:crypto\")\nObject.defineProperty(globalThis, \"crypto\", {\n\tvalue: {\n\t\tgetRandomValues: function (bytes) {\n\t\t\tlet randomBytes = crypto.randomBytes(bytes.length)\n\t\t\tbytes.set(randomBytes)\n\t\t\treturn bytes\n\t\t},\n\t},\n})\n\nglobalThis.XMLHttpRequest = (await import(\"xhr2\")).default\nprocess.on(\"unhandledRejection\", function (e) {\n\tconsole.log(\"Uncaught (in promise) \" + e.stack)\n})\nglobalThis.electronMock = {\n\tapp: {},\n}\n\nwindow.tutao = {\n\tappState: {\n\t\tprefixWithoutFile: \"./\",\n\t},\n}\n\nexport const run = (await import(\"./Suite.js\")).run\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,WAAW,YAAY;AAEvB,MAAM,OAAO,MAAM,CAAE;;;;AAKrB,WAAW,UAAU,MAAM;;;;AAK3B,WAAW,OAAO,CAAC,SAAS;AAE5B,MAAM,EAAE,OAAO,GAAG,MAAM,OAAO;AAC/B,MAAM,MAAM,IAAI,MAAM,IAAI,EAEzB,mBAAmB,KACnB;AAED,WAAW,wBAAwB,IAAI,OAAO;AAC9C,WAAW,SAAS,IAAI;AACxB,IAAI,YAAY,EAAE,KAAK,sBAAuB,EAAC;AAC/C,WAAW,OAAO,uBAAuB,WAAY,CAAE;AACvD,WAAW,OAAO,SAAS,mBAAmB,WAAY,CAAE;AAC5D,WAAW,WAAW,WAAW,OAAO;AAExC,MAAM,QAAQ,CAAE;AAChB,WAAW,eAAe;CACzB,SAAS,CAAC,QAAQ,MAAM;CACxB,SAAS,CAAC,KAAK,UAAW,MAAM,OAAO;AACvC;AACD,WAAW,wBAAwB,WAAW,0BAA0B,CAAC,aAAa,WAAW,UAAU,GAAG;AAE9G,WAAW,OAAO,CAAC,QAAQ,OAAO,KAAK,KAAK,SAAS,CAAC,SAAS,SAAS;AACxE,WAAW,OAAO,CAAC,eAAe,OAAO,KAAK,YAAY,SAAS,CAAC,SAAS,SAAS;AACtF,WAAW,YAAY;AACvB,WAAW,OAAO,oBAAoB;AAEtC,MAAM,YAAY,KAAK,KAAK;AAC5B,WAAW,cAAc,EACxB,KAAK,WAAY;AAChB,QAAO,KAAK,KAAK,GAAG;AACpB,EACD;AACD,WAAW,cAAc;CACxB,KAAK,KAAK;CACV,MAAM;CACN,SAAS;AACT;AAED,MAAM,SAAS,MAAM,OAAO;AAC5B,OAAO,eAAe,YAAY,UAAU,EAC3C,OAAO,EACN,iBAAiB,SAAU,OAAO;CACjC,IAAI,cAAc,OAAO,YAAY,MAAM,OAAO;AAClD,OAAM,IAAI,YAAY;AACtB,QAAO;AACP,EACD,EACD,EAAC;AAEF,WAAW,kBAAkB,MAAM,OAAO,SAAS;AACnD,QAAQ,GAAG,sBAAsB,SAAU,GAAG;AAC7C,SAAQ,IAAI,2BAA2B,EAAE,MAAM;AAC/C,EAAC;AACF,WAAW,eAAe,EACzB,KAAK,CAAE,EACP;AAED,OAAO,QAAQ,EACd,UAAU,EACT,mBAAmB,KACnB,EACD;MAEY,OAAO,MAAM,OAAO,wBAAe"}