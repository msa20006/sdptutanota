{"version":3,"file":"OfflineStorageMigrator-CQqO_-Qy.js","names":["sys94: OfflineMigration","storage: OfflineStorage","tutanota66: OfflineMigration","storage: OfflineStorage","sys92: OfflineMigration","storage: OfflineStorage","e: Mail","entity: T","tutanota65: OfflineMigration","storage: OfflineStorage","sys91: OfflineMigration","storage: OfflineStorage","sys90: OfflineMigration","storage: OfflineStorage","oldCustomerInfo: CustomerInfo","user: User","tutanota64: OfflineMigration","storage: OfflineStorage","tutanota67: OfflineMigration","storage: OfflineStorage","sys96: OfflineMigration","storage: OfflineStorage","encryptedElementTypes: Array<TypeRef<ElementEntity>>","encryptedListElementTypes: Array<TypeRef<ListElementEntity>>","tutanota69: OfflineMigration","storage: OfflineStorage","encryptedElementTypes: Array<TypeRef<ElementEntity>>","encryptedListElementTypes: Array<TypeRef<ListElementEntity>>","sys97: OfflineMigration","storage: OfflineStorage","tutanota71: OfflineMigration","storage: OfflineStorage","sys99: OfflineMigration","storage: OfflineStorage","sys101: OfflineMigration","storage: OfflineStorage","sqlCipherFacade: SqlCipherFacade","sys102: OfflineMigration","storage: OfflineStorage","sqlCipherFacade: SqlCipherFacade","tutanota72: OfflineMigration","storage: OfflineStorage","sys103: OfflineMigration","storage: OfflineStorage","sqlCipherFacade: SqlCipherFacade","tutanota73: OfflineMigration","storage: OfflineStorage","sys104: OfflineMigration","storage: OfflineStorage","_: SqlCipherFacade","sys105: OfflineMigration","storage: OfflineStorage","_: SqlCipherFacade","sys106: OfflineMigration","storage: OfflineStorage","tutanota74: OfflineMigration","storage: OfflineStorage","sys107: OfflineMigration","storage: OfflineStorage","tutanota75: OfflineMigration","storage: OfflineStorage","sys111: OfflineMigration","storage: OfflineStorage","tutanota76: OfflineMigration","storage: OfflineStorage","sys112: OfflineMigration","storage: OfflineStorage","tutanota77: OfflineMigration","storage: OfflineStorage","sys114: OfflineMigration","storage: OfflineStorage","entity: any","offline2: OfflineMigration","storage: OfflineStorage","_: SqlCipherFacade","sys115: OfflineMigration","storage: OfflineStorage","tutanota78: OfflineMigration","storage: OfflineStorage","sys116: OfflineMigration","storage: OfflineStorage","tutanota79: OfflineMigration","storage: OfflineStorage","offline3: OfflineMigration","storage: OfflineStorage","_: SqlCipherFacade","sys118: OfflineMigration","storage: OfflineStorage","calendarEvent: CalendarEvent","tutanota80: OfflineMigration","storage: OfflineStorage","calendarEvent: CalendarEvent","storage11: OfflineMigration","storage: OfflineStorage","OFFLINE_STORAGE_MIGRATIONS: ReadonlyArray<OfflineMigration>","migrations: ReadonlyArray<OfflineMigration>","modelInfos: ModelInfos","storage: OfflineStorage","sqlCipherFacade: SqlCipherFacade","meta: Partial<OfflineDbMeta>","meta: Readonly<Partial<OfflineDbMeta>>","app: VersionMetadataBaseKey","version: number"],"sources":["../../src/common/api/worker/offline/migrations/sys-v94.ts","../../src/common/api/worker/offline/migrations/tutanota-v66.ts","../../src/common/api/worker/offline/migrations/sys-v92.ts","../../src/common/api/worker/offline/migrations/tutanota-v65.ts","../../src/common/api/worker/offline/migrations/sys-v91.ts","../../src/common/api/worker/offline/migrations/sys-v90.ts","../../src/common/api/worker/offline/migrations/tutanota-v64.ts","../../src/common/api/worker/offline/migrations/tutanota-v67.ts","../../src/common/api/worker/offline/migrations/sys-v96.ts","../../src/common/api/worker/offline/migrations/tutanota-v69.ts","../../src/common/api/worker/offline/migrations/sys-v97.ts","../../src/common/api/worker/offline/migrations/tutanota-v71.ts","../../src/common/api/worker/offline/migrations/sys-v99.ts","../../src/common/api/worker/offline/migrations/sys-v101.ts","../../src/common/api/worker/offline/migrations/sys-v102.ts","../../src/common/api/worker/offline/migrations/tutanota-v72.ts","../../src/common/api/worker/offline/migrations/sys-v103.ts","../../src/common/api/worker/offline/migrations/tutanota-v73.ts","../../src/common/api/worker/offline/migrations/sys-v104.ts","../../src/common/api/worker/offline/migrations/sys-v105.ts","../../src/common/api/worker/offline/migrations/sys-v106.ts","../../src/common/api/worker/offline/migrations/tutanota-v74.ts","../../src/common/api/worker/offline/migrations/sys-v107.ts","../../src/common/api/worker/offline/migrations/tutanota-v75.ts","../../src/common/api/worker/offline/migrations/sys-v111.ts","../../src/common/api/worker/offline/migrations/tutanota-v76.ts","../../src/common/api/worker/offline/migrations/sys-v112.ts","../../src/common/api/worker/offline/migrations/tutanota-v77.ts","../../src/common/api/worker/offline/migrations/sys-v114.ts","../../src/common/api/worker/offline/migrations/offline2.ts","../../src/common/api/worker/offline/migrations/sys-v115.ts","../../src/common/api/worker/offline/migrations/tutanota-v78.ts","../../src/common/api/worker/offline/migrations/sys-v116.ts","../../src/common/api/worker/offline/migrations/tutanota-v79.ts","../../src/common/api/worker/offline/migrations/offline3.ts","../../src/common/api/worker/offline/migrations/sys-v118.ts","../../src/common/api/worker/offline/migrations/tutanota-v80.ts","../../src/common/api/worker/offline/migrations/storage-v11.ts","../../src/common/api/worker/offline/OfflineStorageMigrator.ts"],"sourcesContent":["import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { deleteInstancesOfType, migrateAllListElements } from \"../StandardMigrations.js\"\nimport { MailTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { createCustomerInfo, CustomerInfoTypeRef, UserTypeRef } from \"../../../entities/sys/TypeRefs.js\"\n\nexport const sys94: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 94,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// these are due to the mailbody migration\n\t\tawait deleteInstancesOfType(storage, MailTypeRef)\n\t\tawait deleteInstancesOfType(storage, UserTypeRef)\n\t\t// this is to add the customerInfo.supportInfo field (sys94)\n\t\tawait migrateAllListElements(CustomerInfoTypeRef, storage, [createCustomerInfo])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { migrateAllListElements } from \"../StandardMigrations.js\"\nimport { createMail, MailTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\n\nexport const tutanota66: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 66,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait migrateAllListElements(MailTypeRef, storage, [createMail]) // initializes encryptionAuthStatus\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { deleteInstancesOfType, migrateAllListElements } from \"../StandardMigrations.js\"\nimport { BucketKey, BucketPermission, BucketPermissionTypeRef, GroupTypeRef, UserTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport { CryptoProtocolVersion } from \"../../../common/TutanotaConstants.js\"\nimport { Mail, MailTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\n\nexport const sys92: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 92,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait migrateAllListElements(BucketPermissionTypeRef, storage, [addProtocolVersion])\n\t\tawait migrateAllListElements(MailTypeRef, storage, [\n\t\t\t(e: Mail) => {\n\t\t\t\tif (e.bucketKey) {\n\t\t\t\t\taddProtocolVersion(e.bucketKey)\n\t\t\t\t}\n\t\t\t\treturn e\n\t\t\t},\n\t\t])\n\t\t// KeyPair was changed\n\t\tawait deleteInstancesOfType(storage, GroupTypeRef)\n\t\t// We also delete UserType ref to disable offline login. Otherwise, clients will see an unexpected error message with pure offline login.\n\t\tawait deleteInstancesOfType(storage, UserTypeRef)\n\t},\n}\n\nfunction addProtocolVersion<T extends BucketKey | BucketPermission>(entity: T): T {\n\tif (entity.pubEncBucketKey) {\n\t\tentity.protocolVersion = CryptoProtocolVersion.RSA\n\t} else {\n\t\tentity.protocolVersion = CryptoProtocolVersion.SYMMETRIC_ENCRYPTION\n\t}\n\treturn entity\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { deleteInstancesOfType, migrateAllElements, migrateAllListElements, removeValue } from \"../StandardMigrations.js\"\nimport { CustomerTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport { MailboxGroupRootTypeRef, MailTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\n\nexport const tutanota65: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 65,\n\tasync migrate(storage: OfflineStorage) {\n\t\tmigrateAllListElements(MailTypeRef, storage, [removeValue(\"restrictions\")])\n\t\tmigrateAllElements(MailboxGroupRootTypeRef, storage, [\n\t\t\tremoveValue(\"contactFormUserContactForm\"),\n\t\t\tremoveValue(\"targetMailGroupContactForm\"),\n\t\t\tremoveValue(\"participatingContactForms\"),\n\t\t])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { migrateAllElements, removeValue } from \"../StandardMigrations.js\"\nimport { CustomerTypeRef } from \"../../../entities/sys/TypeRefs.js\"\n\nexport const sys91: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 91,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait migrateAllElements(CustomerTypeRef, storage, [removeValue(\"contactFormUserGroups\"), removeValue(\"contactFormUserAreaGroups\")])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { migrateAllElements, migrateAllListElements } from \"../StandardMigrations.js\"\nimport { CustomerInfo, CustomerInfoTypeRef, User, UserTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport { KdfType } from \"../../../common/TutanotaConstants.js\"\n\nexport const sys90: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 90,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// we've added a new field to PlanConfig and we want to make sure that it's correct in the future\n\t\t// anyone who has a custom plan at the moment does not have the contact list\n\t\tawait migrateAllListElements(CustomerInfoTypeRef, storage, [\n\t\t\t(oldCustomerInfo: CustomerInfo) => {\n\t\t\t\tif (oldCustomerInfo.customPlan) {\n\t\t\t\t\toldCustomerInfo.customPlan.contactList = false\n\t\t\t\t}\n\t\t\t\treturn oldCustomerInfo\n\t\t\t},\n\t\t])\n\n\t\t// we forgot to include this in v89 migration\n\t\tawait migrateAllElements(UserTypeRef, storage, [\n\t\t\t(user: User) => {\n\t\t\t\tif (!user.kdfVersion) {\n\t\t\t\t\tuser.kdfVersion = KdfType.Bcrypt\n\t\t\t\t}\n\t\t\t\treturn user\n\t\t\t},\n\t\t])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { migrateAllListElements, removeValue } from \"../StandardMigrations.js\"\nimport { FileTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\n\nexport const tutanota64: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 64,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// We have fully removed FileData\n\t\tmigrateAllListElements(FileTypeRef, storage, [removeValue(\"data\")])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { deleteInstancesOfType } from \"../StandardMigrations.js\"\nimport { ContactTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\n\nexport const tutanota67: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 67,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait deleteInstancesOfType(storage, ContactTypeRef)\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport {\n\tAccountingInfoTypeRef,\n\tAuditLogEntryTypeRef,\n\tCustomerServerPropertiesTypeRef,\n\tGiftCardTypeRef,\n\tGroupInfoTypeRef,\n\tGroupTypeRef,\n\tInvoiceTypeRef,\n\tMissedNotificationTypeRef,\n\tOrderProcessingAgreementTypeRef,\n\tPushIdentifierTypeRef,\n\tReceivedGroupInvitationTypeRef,\n\tRecoverCodeTypeRef,\n\tUserAlarmInfoTypeRef,\n\tUserGroupRootTypeRef,\n\tUserTypeRef,\n\tWhitelabelChildTypeRef,\n} from \"../../../entities/sys/TypeRefs.js\"\nimport {\n\taddOwnerKeyVersion,\n\taddValue,\n\tchangeCardinalityFromAnyToZeroOrOne,\n\tmigrateAllElements,\n\tmigrateAllListElements,\n\tMigration,\n\tremoveValue,\n\trenameAttribute,\n} from \"../StandardMigrations.js\"\nimport { ElementEntity, ListElementEntity } from \"../../../common/EntityTypes.js\"\nimport { TypeRef } from \"@tutao/tutanota-utils\"\n\nexport const sys96: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 96,\n\tasync migrate(storage: OfflineStorage) {\n\t\tconst encryptedElementTypes: Array<TypeRef<ElementEntity>> = [\n\t\t\tAccountingInfoTypeRef,\n\t\t\tCustomerServerPropertiesTypeRef,\n\t\t\tInvoiceTypeRef,\n\t\t\tMissedNotificationTypeRef,\n\t\t]\n\t\tconst encryptedListElementTypes: Array<TypeRef<ListElementEntity>> = [\n\t\t\tGroupInfoTypeRef,\n\t\t\tAuditLogEntryTypeRef,\n\t\t\tWhitelabelChildTypeRef,\n\t\t\tOrderProcessingAgreementTypeRef,\n\t\t\tUserAlarmInfoTypeRef,\n\t\t\tReceivedGroupInvitationTypeRef,\n\t\t\tGiftCardTypeRef,\n\t\t\tPushIdentifierTypeRef,\n\t\t]\n\n\t\tfor (const type of encryptedElementTypes) {\n\t\t\tawait migrateAllElements(type, storage, [addOwnerKeyVersion()])\n\t\t}\n\t\tfor (const type of encryptedListElementTypes) {\n\t\t\tawait migrateAllListElements(type, storage, [addOwnerKeyVersion()])\n\t\t}\n\n\t\tawait migrateAllElements(GroupTypeRef, storage, [\n\t\t\trenameAttribute(\"keys\", \"currentKeys\"),\n\t\t\tchangeCardinalityFromAnyToZeroOrOne(\"currentKeys\"),\n\t\t\tremoveKeyPairVersion(),\n\t\t\taddValue(\"formerGroupKeys\", null),\n\t\t\taddValue(\"pubAdminGroupEncGKey\", null),\n\t\t\taddValue(\"groupKeyVersion\", \"0\"),\n\t\t\taddAdminGroupKeyVersion(),\n\t\t])\n\n\t\tawait migrateAllElements(UserTypeRef, storage, [addVersionsToGroupMemberships(), removeValue(\"userEncClientKey\")])\n\t\tawait migrateAllListElements(ReceivedGroupInvitationTypeRef, storage, [addValue(\"sharedGroupKeyVersion\", \"0\")])\n\t\tawait migrateAllElements(RecoverCodeTypeRef, storage, [addValue(\"userKeyVersion\", \"0\")])\n\t\tawait migrateAllElements(UserGroupRootTypeRef, storage, [addValue(\"keyRotations\", null)])\n\t},\n}\n\nfunction addVersionsToGroupMemberships(): Migration {\n\treturn function (entity) {\n\t\tconst userGroupMembership = entity[\"userGroup\"]\n\t\tuserGroupMembership[\"groupKeyVersion\"] = \"0\"\n\t\tuserGroupMembership[\"symKeyVersion\"] = \"0\"\n\t\tfor (const membership of entity[\"memberships\"]) {\n\t\t\tmembership[\"groupKeyVersion\"] = \"0\"\n\t\t\tmembership[\"symKeyVersion\"] = \"0\"\n\t\t}\n\t\treturn entity\n\t}\n}\n\nfunction addAdminGroupKeyVersion(): Migration {\n\treturn function (entity) {\n\t\tentity[\"adminGroupKeyVersion\"] = entity[\"adminGroupEncGKey\"] == null ? null : \"0\"\n\t\treturn entity\n\t}\n}\n\nfunction removeKeyPairVersion(): Migration {\n\treturn function (entity) {\n\t\tconst currentKeys = entity[\"currentKeys\"]\n\t\tif (currentKeys) {\n\t\t\tdelete currentKeys[\"version\"]\n\t\t}\n\t\treturn entity\n\t}\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { addOwnerKeyVersion, addValue, migrateAllElements, migrateAllListElements, Migration, removeValue, renameAttribute } from \"../StandardMigrations.js\"\nimport { ElementEntity, ListElementEntity, SomeEntity } from \"../../../common/EntityTypes.js\"\nimport { TypeRef } from \"@tutao/tutanota-utils\"\nimport {\n\tCalendarEventTypeRef,\n\tCalendarEventUpdateTypeRef,\n\tCalendarGroupRootTypeRef,\n\tContactListEntryTypeRef,\n\tContactListGroupRootTypeRef,\n\tContactListTypeRef,\n\tContactTypeRef,\n\tEmailTemplateTypeRef,\n\tFileSystemTypeRef,\n\tFileTypeRef,\n\tKnowledgeBaseEntryTypeRef,\n\tMailboxPropertiesTypeRef,\n\tMailBoxTypeRef,\n\tMailDetailsBlobTypeRef,\n\tMailDetailsDraftTypeRef,\n\tMailFolderTypeRef,\n\tMailTypeRef,\n\tTemplateGroupRootTypeRef,\n\tTutanotaPropertiesTypeRef,\n\tUserSettingsGroupRootTypeRef,\n} from \"../../../entities/tutanota/TypeRefs.js\"\nimport { CryptoProtocolVersion } from \"../../../common/TutanotaConstants.js\"\n\nexport const tutanota69: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 69,\n\tasync migrate(storage: OfflineStorage) {\n\t\tconst encryptedElementTypes: Array<TypeRef<ElementEntity>> = [\n\t\t\tFileSystemTypeRef,\n\t\t\tMailBoxTypeRef,\n\t\t\tContactListTypeRef,\n\t\t\tTutanotaPropertiesTypeRef,\n\t\t\tCalendarGroupRootTypeRef,\n\t\t\tUserSettingsGroupRootTypeRef,\n\t\t\tContactListGroupRootTypeRef,\n\t\t\tMailboxPropertiesTypeRef,\n\t\t\tTemplateGroupRootTypeRef,\n\t\t]\n\n\t\tconst encryptedListElementTypes: Array<TypeRef<ListElementEntity>> = [\n\t\t\tFileTypeRef,\n\t\t\tContactTypeRef,\n\t\t\tMailTypeRef,\n\t\t\tMailFolderTypeRef,\n\t\t\tCalendarEventTypeRef,\n\t\t\tCalendarEventUpdateTypeRef,\n\t\t\tEmailTemplateTypeRef,\n\t\t\tMailDetailsDraftTypeRef,\n\t\t\tMailDetailsBlobTypeRef,\n\t\t\tContactListEntryTypeRef,\n\t\t\tKnowledgeBaseEntryTypeRef,\n\t\t]\n\n\t\tfor (const type of encryptedElementTypes) {\n\t\t\tawait migrateAllElements(type, storage, [addOwnerKeyVersion()])\n\t\t}\n\t\tfor (const type of encryptedListElementTypes) {\n\t\t\tawait migrateAllListElements(type, storage, [addOwnerKeyVersion()])\n\t\t}\n\n\t\tawait migrateAllListElements(MailTypeRef, storage, [addVersionsToBucketKey()])\n\t\tawait migrateAllElements(TutanotaPropertiesTypeRef, storage, [renameAttribute(\"groupEncEntropy\", \"userEncEntropy\"), addValue(\"userKeyVersion\", null)])\n\t\tawait migrateAllElements(MailBoxTypeRef, storage, [removeValue(\"symEncShareBucketKey\")])\n\t},\n}\n\nfunction addVersionsToBucketKey(): Migration {\n\treturn function (entity) {\n\t\tconst bucketKey = entity[\"bucketKey\"]\n\t\tif (bucketKey != null) {\n\t\t\tbucketKey[\"recipientKeyVersion\"] = \"0\"\n\t\t\tbucketKey[\"senderKeyVersion\"] = bucketKey[\"protocolVersion\"] === CryptoProtocolVersion.TUTA_CRYPT ? \"0\" : null\n\t\t\tfor (const instanceSessionKey of bucketKey[\"bucketEncSessionKeys\"]) {\n\t\t\t\tinstanceSessionKey[\"symKeyVersion\"] = \"0\"\n\t\t\t}\n\t\t}\n\t\treturn entity\n\t}\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { CustomerTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport { migrateAllElements, removeValue } from \"../StandardMigrations.js\"\n\nexport const sys97: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 97,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// As of 2020 the canceledPremiumAccount boolean value has always been set to\n\t\t// false therefore this value is no longer needed, and we can remove it.\n\t\tawait migrateAllElements(CustomerTypeRef, storage, [removeValue(\"canceledPremiumAccount\")])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { deleteInstancesOfType } from \"../StandardMigrations.js\"\nimport { ReceivedGroupInvitationTypeRef, SentGroupInvitationTypeRef, UserGroupRootTypeRef } from \"../../../entities/sys/TypeRefs.js\"\n\nexport const tutanota71: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 71,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait deleteInstancesOfType(storage, UserGroupRootTypeRef)\n\t\tawait deleteInstancesOfType(storage, ReceivedGroupInvitationTypeRef)\n\t\tawait deleteInstancesOfType(storage, SentGroupInvitationTypeRef)\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\n\nexport const sys99: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 99,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// only changes MissedNotification which we do not load nor cache\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { SqlCipherFacade } from \"../../../../native/common/generatedipc/SqlCipherFacade.js\"\n\nexport const sys101: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 101,\n\tasync migrate(storage: OfflineStorage, sqlCipherFacade: SqlCipherFacade) {\n\t\t// no cached types have been modified\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { SqlCipherFacade } from \"../../../../native/common/generatedipc/SqlCipherFacade.js\"\nimport { deleteInstancesOfType } from \"../StandardMigrations.js\"\nimport { GroupTypeRef, UserGroupRootTypeRef, UserTypeRef } from \"../../../entities/sys/TypeRefs.js\"\n\nexport const sys102: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 102,\n\tasync migrate(storage: OfflineStorage, sqlCipherFacade: SqlCipherFacade) {\n\t\tawait deleteInstancesOfType(storage, UserGroupRootTypeRef) // to ensure keyRotations is populated\n\t\tawait deleteInstancesOfType(storage, GroupTypeRef) // to ensure formerGroupKeys is populated\n\t\t// We also delete UserType ref to disable offline login. Otherwise, clients will see an unexpected error message with pure offline login.\n\t\tawait deleteInstancesOfType(storage, UserTypeRef)\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\n\nexport const tutanota72: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 72,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// only data transfer types have been modified\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { SqlCipherFacade } from \"../../../../native/common/generatedipc/SqlCipherFacade.js\"\nimport { deleteInstancesOfType } from \"../StandardMigrations.js\"\nimport { AccountingInfoTypeRef } from \"../../../entities/sys/TypeRefs.js\"\n\nexport const sys103: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 103,\n\tasync migrate(storage: OfflineStorage, sqlCipherFacade: SqlCipherFacade) {\n\t\t// delete AccountingInfo to make sure appStoreSubscription is not missing from offlne db\n\t\tawait deleteInstancesOfType(storage, AccountingInfoTypeRef)\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { migrateAllElements, migrateAllListElements, removeValue } from \"../StandardMigrations.js\"\nimport { ContactTypeRef, FileTypeRef, MailBoxTypeRef, MailFolderTypeRef, MailTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\n\nexport const tutanota73: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 73,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// the TutanotaModelV73 finally removes all legacy mail (without MailDetails) attributes and types\n\t\t// all mails must use MailDetails now\n\t\tawait migrateAllListElements(MailTypeRef, storage, [\n\t\t\tremoveValue(\"body\"),\n\t\t\tremoveValue(\"toRecipients\"),\n\t\t\tremoveValue(\"ccRecipients\"),\n\t\t\tremoveValue(\"bccRecipients\"),\n\t\t\tremoveValue(\"replyTos\"),\n\t\t\tremoveValue(\"headers\"),\n\t\t\tremoveValue(\"sentDate\"),\n\t\t])\n\n\t\t// cleanup TutanotaModel\n\t\tawait migrateAllElements(MailBoxTypeRef, storage, [removeValue(\"mails\")])\n\t\tawait migrateAllListElements(MailFolderTypeRef, storage, [removeValue(\"subFolders\")])\n\n\t\t// removing Value.OLD_OWNER_GROUP_NAME, and Value.OLD_AREA_ID_NAME from FILE_TYPE and CONTACT_TYPE\n\t\tawait migrateAllListElements(FileTypeRef, storage, [removeValue(\"_owner\"), removeValue(\"_area\")])\n\t\tawait migrateAllListElements(ContactTypeRef, storage, [\n\t\t\tremoveValue(\"_owner\"),\n\t\t\tremoveValue(\"_area\"),\n\t\t\tremoveValue(\"autoTransmitPassword\"), // autoTransmitPassword has been removed from ContactType\n\t\t])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { SqlCipherFacade } from \"../../../../native/common/generatedipc/SqlCipherFacade.js\"\nimport { migrateAllElements, removeValue } from \"../StandardMigrations.js\"\nimport { UserTypeRef } from \"../../../entities/sys/TypeRefs.js\"\n\nexport const sys104: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 104,\n\tasync migrate(storage: OfflineStorage, _: SqlCipherFacade) {\n\t\t// SystemModelV104 removes phoneNumbers from the USER_TYPE\n\t\tawait migrateAllElements(UserTypeRef, storage, [removeValue(\"phoneNumbers\")])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { SqlCipherFacade } from \"../../../../native/common/generatedipc/SqlCipherFacade.js\"\nimport { deleteInstancesOfType } from \"../StandardMigrations.js\"\nimport { PushIdentifierTypeRef } from \"../../../entities/sys/TypeRefs.js\"\n\nexport const sys105: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 105,\n\tasync migrate(storage: OfflineStorage, _: SqlCipherFacade) {\n\t\tawait deleteInstancesOfType(storage, PushIdentifierTypeRef)\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\n\nexport const sys106: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 106,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// only changes data transfer type\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { addValue, deleteInstancesOfType, migrateAllElements, migrateAllListElements } from \"../StandardMigrations.js\"\nimport { CalendarEventTypeRef, createMail, createMailBox, MailBoxTypeRef, MailFolderTypeRef, MailTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { GENERATED_MIN_ID } from \"../../../common/utils/EntityUtils.js\"\n\nexport const tutanota74: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 74,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// the TutanotaModelV74 introduces MailSets to support import and labels\n\t\tawait migrateAllListElements(MailFolderTypeRef, storage, [\n\t\t\taddValue(\"isLabel\", false),\n\t\t\taddValue(\"isMailSet\", false),\n\t\t\taddValue(\"entries\", GENERATED_MIN_ID),\n\t\t])\n\t\tawait migrateAllElements(MailBoxTypeRef, storage, [createMailBox]) // initialize mailbags\n\t\tawait migrateAllListElements(MailTypeRef, storage, [createMail]) // initialize sets\n\n\t\t// we need to delete all CalendarEvents since we changed the format for storing customIds (CalendarEvents use customIds) in the offline database\n\t\t// all entities with customIds, that are stored in the offline database (e.g. CalendarEvent, MailSetEntry),\n\t\t// are from now on stored in the offline database using a **base64Ext** encoded id string\n\t\tawait deleteInstancesOfType(storage, CalendarEventTypeRef)\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\n\nexport const sys107: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 107,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// only changes data transfer type\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { deleteInstancesOfType } from \"../StandardMigrations.js\"\nimport { UserSettingsGroupRootTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { AuditLogEntryTypeRef, GroupInfoTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport { GroupType } from \"../../../common/TutanotaConstants.js\"\nimport { getElementId, getListId } from \"../../../common/utils/EntityUtils.js\"\n\nexport const tutanota75: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 75,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait deleteInstancesOfType(storage, UserSettingsGroupRootTypeRef)\n\t\t// required to throw the LoginIncompleteError when trying async login\n\t\tconst groupInfos = await storage.getRawListElementsOfType(GroupInfoTypeRef)\n\t\tfor (const groupInfo of groupInfos) {\n\t\t\tif ((groupInfo as any).groupType !== GroupType.User) continue\n\t\t\tawait storage.deleteIfExists(GroupInfoTypeRef, getListId(groupInfo), getElementId(groupInfo))\n\t\t}\n\t\tawait deleteInstancesOfType(storage, AuditLogEntryTypeRef)\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { addValue, migrateAllElements, migrateAllListElements, removeValue } from \"../StandardMigrations.js\"\nimport { GroupKeyTypeRef, GroupTypeRef } from \"../../../entities/sys/TypeRefs.js\"\n\nexport const sys111: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 111,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait migrateAllElements(GroupTypeRef, storage, [removeValue(\"pubAdminGroupEncGKey\"), addValue(\"pubAdminGroupEncGKey\", null)])\n\t\tawait migrateAllListElements(GroupKeyTypeRef, storage, [removeValue(\"pubAdminGroupEncGKey\"), addValue(\"pubAdminGroupEncGKey\", null)])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { deleteInstancesOfType, migrateAllElements, removeValue } from \"../StandardMigrations\"\nimport { MailboxGroupRootTypeRef, MailBoxTypeRef } from \"../../../entities/tutanota/TypeRefs\"\nimport { UserGroupRootTypeRef } from \"../../../entities/sys/TypeRefs\"\n\nexport const tutanota76: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 76,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait migrateAllElements(MailboxGroupRootTypeRef, storage, [removeValue(\"whitelistRequests\")])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { migrateAllElements, removeValue } from \"../StandardMigrations\"\nimport { MailboxGroupRootTypeRef } from \"../../../entities/tutanota/TypeRefs\"\n\nexport const sys112: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 112,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait migrateAllElements(MailboxGroupRootTypeRef, storage, [removeValue(\"whitelistedDomains\")])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { addValue, deleteInstancesOfType, migrateAllListElements, removeValue } from \"../StandardMigrations\"\nimport { MailFolderTypeRef, TutanotaPropertiesTypeRef } from \"../../../entities/tutanota/TypeRefs\"\n\nexport const tutanota77: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 77,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait migrateAllListElements(MailFolderTypeRef, storage, [removeValue(\"isLabel\"), addValue(\"color\", null)])\n\t\tawait deleteInstancesOfType(storage, TutanotaPropertiesTypeRef)\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { migrateAllListElements, Migration } from \"../StandardMigrations\"\nimport { CustomerInfoTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport { SomeEntity } from \"../../../common/EntityTypes.js\"\n\nexport const sys114: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 114,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait migrateAllListElements(CustomerInfoTypeRef, storage, [addUnlimitedLabelsToPlanConfiguration()])\n\t},\n}\n\nfunction addUnlimitedLabelsToPlanConfiguration(): Migration {\n\treturn function addUnlimitedLabelsToPlanConfigurationMigration(entity: any): SomeEntity {\n\t\tif (entity.customPlan != null) {\n\t\t\tentity.customPlan.unlimitedLabels = false\n\t\t}\n\t\treturn entity\n\t}\n}\n","import { OfflineStorage } from \"../OfflineStorage.js\"\nimport { SqlCipherFacade } from \"../../../../native/common/generatedipc/SqlCipherFacade.js\"\nimport { addValue, deleteInstancesOfType, migrateAllElements } from \"../StandardMigrations.js\"\nimport { TutanotaPropertiesTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { OfflineMigration } from \"../OfflineStorageMigrator.js\"\n\n/**\n * Migration to patch up the broken tutanota-v77 migration.\n *\n * We write default value which might be out of sync with the server but we have an extra check for that where\n * we use this property.\n */\nexport const offline2: OfflineMigration = {\n\tapp: \"offline\",\n\tversion: 2,\n\tasync migrate(storage: OfflineStorage, _: SqlCipherFacade): Promise<void> {\n\t\tawait migrateAllElements(TutanotaPropertiesTypeRef, storage, [addValue(\"defaultLabelCreated\", false)])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\n\nexport const sys115: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 115,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// Nothing to migrate here, only App Store subscription changes\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { addValue, deleteInstancesOfType, migrateAllListElements, removeValue } from \"../StandardMigrations\"\nimport { MailFolderTypeRef, TutanotaPropertiesTypeRef } from \"../../../entities/tutanota/TypeRefs\"\n\nexport const tutanota78: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 78,\n\tasync migrate(storage: OfflineStorage) {},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nexport const sys116: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 116,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// only Downgraded customer was added so nothing to migrate\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { addValue, migrateAllElements } from \"../StandardMigrations\"\nimport { MailBoxTypeRef } from \"../../../entities/tutanota/TypeRefs\"\nimport { GENERATED_MIN_ID } from \"../../../common/utils/EntityUtils\"\n\nexport const tutanota79: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 79,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait migrateAllElements(MailBoxTypeRef, storage, [addValue(\"importedAttachments\", GENERATED_MIN_ID), addValue(\"mailImportStates\", GENERATED_MIN_ID)])\n\t},\n}\n","import { OfflineStorage } from \"../OfflineStorage.js\"\nimport { SqlCipherFacade } from \"../../../../native/common/generatedipc/SqlCipherFacade.js\"\nimport { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { MailBoxTypeRef, UserSettingsGroupRootTypeRef } from \"../../../entities/tutanota/TypeRefs\"\nimport { GENERATED_MIN_ID, getElementId, getListId } from \"../../../common/utils/EntityUtils\"\nimport { GroupInfoTypeRef } from \"../../../entities/sys/TypeRefs\"\nimport { deleteInstancesOfType } from \"../StandardMigrations\"\nimport { GroupType } from \"../../../common/TutanotaConstants\"\n\n/**\n * Migration to re-download mailboxes with importMailStates and importedAttachment\n * lists pointing to a wrong value.\n */\nexport const offline3: OfflineMigration = {\n\tapp: \"offline\",\n\tversion: 3,\n\tasync migrate(storage: OfflineStorage, _: SqlCipherFacade): Promise<void> {\n\t\tlet mailboxes = await storage.getElementsOfType(MailBoxTypeRef)\n\t\tlet needsOfflineDisable = false\n\t\tfor (const mailbox of mailboxes) {\n\t\t\tif (mailbox.importedAttachments !== GENERATED_MIN_ID && mailbox.mailImportStates !== GENERATED_MIN_ID) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// delete the offending instance\n\t\t\tawait storage.deleteIfExists(MailBoxTypeRef, null, mailbox._id)\n\t\t\tneedsOfflineDisable = true\n\t\t}\n\n\t\tif (needsOfflineDisable) {\n\t\t\t// also prevent the user's offline login from requesting the mailbox\n\t\t\t// before it's fully logged in\n\t\t\tawait deleteInstancesOfType(storage, UserSettingsGroupRootTypeRef)\n\t\t\t// required to throw the LoginIncompleteError when trying async login\n\t\t\tconst groupInfos = await storage.getRawListElementsOfType(GroupInfoTypeRef)\n\t\t\tfor (const groupInfo of groupInfos) {\n\t\t\t\tif ((groupInfo as any).groupType !== GroupType.User) continue\n\t\t\t\tawait storage.deleteIfExists(GroupInfoTypeRef, getListId(groupInfo), getElementId(groupInfo))\n\t\t\t}\n\t\t}\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { migrateAllListElements } from \"../StandardMigrations.js\"\nimport { CalendarEvent, CalendarEventTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\n\nexport const sys118: OfflineMigration = {\n\tapp: \"sys\",\n\tversion: 118,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait migrateAllListElements(CalendarEventTypeRef, storage, [\n\t\t\t(calendarEvent: CalendarEvent) => {\n\t\t\t\tif (calendarEvent.repeatRule) {\n\t\t\t\t\tcalendarEvent.repeatRule.advancedRules = []\n\t\t\t\t}\n\t\t\t\treturn calendarEvent\n\t\t\t},\n\t\t])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { migrateAllListElements } from \"../StandardMigrations\"\nimport { CalendarEvent, CalendarEventTypeRef, MailBoxTypeRef } from \"../../../entities/tutanota/TypeRefs\"\n\nexport const tutanota80: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 80,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait migrateAllListElements(CalendarEventTypeRef, storage, [\n\t\t\t(calendarEvent: CalendarEvent) => {\n\t\t\t\tif (calendarEvent.repeatRule) {\n\t\t\t\t\tcalendarEvent.repeatRule.advancedRules = []\n\t\t\t\t}\n\t\t\t\treturn calendarEvent\n\t\t\t},\n\t\t])\n\t},\n}\n","import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\n\nexport const storage11: OfflineMigration = {\n\tapp: \"storage\",\n\tversion: 11,\n\tasync migrate(storage: OfflineStorage) {},\n}\n","import { OfflineDbMeta, OfflineStorage, VersionMetadataBaseKey } from \"./OfflineStorage.js\"\nimport { ModelInfos } from \"../../common/EntityFunctions.js\"\nimport { assertNotNull, typedEntries, typedKeys } from \"@tutao/tutanota-utils\"\nimport { ProgrammingError } from \"../../common/error/ProgrammingError.js\"\nimport { SqlCipherFacade } from \"../../../native/common/generatedipc/SqlCipherFacade.js\"\nimport { OutOfSyncError } from \"../../common/error/OutOfSyncError.js\"\nimport { sys94 } from \"./migrations/sys-v94.js\"\nimport { tutanota66 } from \"./migrations/tutanota-v66.js\"\nimport { sys92 } from \"./migrations/sys-v92.js\"\nimport { tutanota65 } from \"./migrations/tutanota-v65.js\"\nimport { sys91 } from \"./migrations/sys-v91.js\"\nimport { sys90 } from \"./migrations/sys-v90.js\"\nimport { tutanota64 } from \"./migrations/tutanota-v64.js\"\nimport { tutanota67 } from \"./migrations/tutanota-v67.js\"\nimport { sys96 } from \"./migrations/sys-v96.js\"\nimport { tutanota69 } from \"./migrations/tutanota-v69.js\"\nimport { sys97 } from \"./migrations/sys-v97.js\"\nimport { tutanota71 } from \"./migrations/tutanota-v71.js\"\nimport { sys99 } from \"./migrations/sys-v99.js\"\nimport { sys101 } from \"./migrations/sys-v101.js\"\nimport { sys102 } from \"./migrations/sys-v102.js\"\nimport { tutanota72 } from \"./migrations/tutanota-v72.js\"\nimport { sys103 } from \"./migrations/sys-v103.js\"\nimport { tutanota73 } from \"./migrations/tutanota-v73.js\"\nimport { sys104 } from \"./migrations/sys-v104.js\"\nimport { sys105 } from \"./migrations/sys-v105.js\"\nimport { sys106 } from \"./migrations/sys-v106.js\"\nimport { tutanota74 } from \"./migrations/tutanota-v74.js\"\nimport { sys107 } from \"./migrations/sys-v107.js\"\nimport { tutanota75 } from \"./migrations/tutanota-v75.js\"\nimport { sys111 } from \"./migrations/sys-v111.js\"\nimport { tutanota76 } from \"./migrations/tutanota-v76.js\"\nimport { sys112 } from \"./migrations/sys-v112.js\"\nimport { tutanota77 } from \"./migrations/tutanota-v77.js\"\nimport { sys114 } from \"./migrations/sys-v114.js\"\nimport { offline2 } from \"./migrations/offline2.js\"\nimport { sys115 } from \"./migrations/sys-v115.js\"\nimport { tutanota78 } from \"./migrations/tutanota-v78.js\"\nimport { sys116 } from \"./migrations/sys-v116.js\"\nimport { tutanota79 } from \"./migrations/tutanota-v79.js\"\nimport { offline3 } from \"./migrations/offline3\"\nimport { sys118 } from \"./migrations/sys-v118.js\"\nimport { tutanota80 } from \"./migrations/tutanota-v80.js\"\nimport { storage11 } from \"./migrations/storage-v11\"\n\nexport interface OfflineMigration {\n\treadonly app: VersionMetadataBaseKey\n\treadonly version: number\n\n\tmigrate(storage: OfflineStorage, sqlCipherFacade: SqlCipherFacade): Promise<void>\n}\n\n/**\n * List of migrations that will be run when needed. Please add your migrations to the list.\n *\n * Normally you should only add them to the end of the list but with offline ones it can be a bit tricky since they change the db structure itself so sometimes\n * they should rather be in the beginning.\n */\nexport const OFFLINE_STORAGE_MIGRATIONS: ReadonlyArray<OfflineMigration> = [\n\tsys90,\n\ttutanota64,\n\tsys91,\n\ttutanota65,\n\tsys92,\n\ttutanota66,\n\tsys94,\n\ttutanota67,\n\tsys96,\n\ttutanota69,\n\tsys97,\n\ttutanota71,\n\tsys99,\n\tsys101,\n\tsys102,\n\ttutanota72,\n\tsys103,\n\ttutanota73,\n\tsys104,\n\tsys105,\n\tsys106,\n\ttutanota74,\n\ttutanota75,\n\tsys107,\n\ttutanota75,\n\tsys111,\n\ttutanota76,\n\tsys112,\n\ttutanota77,\n\tsys114,\n\toffline2,\n\tsys115,\n\ttutanota78,\n\tsys116,\n\ttutanota79,\n\toffline3,\n\tsys118,\n\ttutanota80,\n\tstorage11,\n]\n\n// in cases where the actual migration is not there anymore (we clean up old migrations no client would apply anymore)\n// and we create a new offline database, we still need to set the offline version to the current value.\nconst CURRENT_OFFLINE_VERSION = 3\n\n/**\n * Migrator for the offline storage between different versions of model. It is tightly couples to the versions of API entities: every time we make an\n * \"incompatible\" change to the API model we need to update offline database somehow.\n *\n * Migrations are done manually but there are a few checks done:\n *  - compile time check that migration exists and is used in this file\n *  - runtime check that runtime model is compatible to the stored one after all the migrations are done.\n *\n *  To add a new migration create a migration with the filename matching ./migrations/{app}-v{version}.ts and use it in the `migrations` field on this\n *  migrator.\n *\n *  Migrations might read and write to the database and they should use StandardMigrations when needed.\n */\nexport class OfflineStorageMigrator {\n\tconstructor(private readonly migrations: ReadonlyArray<OfflineMigration>, private readonly modelInfos: ModelInfos) {}\n\n\tasync migrate(storage: OfflineStorage, sqlCipherFacade: SqlCipherFacade) {\n\t\tconst meta = await storage.dumpMetadata()\n\n\t\t// We did not write down the \"offline\" version from the beginning, so we need to figure out if we need to run the migration for the db structure or\n\t\t// not. Previously we've been checking that there's something in the meta table which is a pretty decent check. Unfortunately we had multiple bugs\n\t\t// which resulted in a state where we would re-create the offline db but not populate the meta table with the versions, the only thing that would be\n\t\t// written is lastUpdateTime.\n\t\t// {}                                                               -> new db, do not migrate offline\n\t\t// {\"base-version\": 1, \"lastUpdateTime\": 123, \"offline-version\": 1} -> up-to-date db, do not migrate offline\n\t\t// {\"lastUpdateTime\": 123}                                          -> broken state after the buggy recreation of db, delete the db\n\t\t// {\"base-version\": 1, \"lastUpdateTime\": 123}                       -> some very old state where we would actually have to migrate offline\n\t\tif (Object.keys(meta).length === 1 && meta.lastUpdateTime != null) {\n\t\t\tthrow new OutOfSyncError(\"Invalid DB state, missing model versions\")\n\t\t}\n\n\t\tconst populatedMeta = await this.populateModelVersions(meta, storage)\n\n\t\tif (this.isDbNewerThanCurrentClient(populatedMeta)) {\n\t\t\tthrow new OutOfSyncError(`offline database has newer schema than client`)\n\t\t}\n\n\t\tawait this.runMigrations(meta, storage, sqlCipherFacade)\n\t\tawait this.checkStateAfterMigrations(storage)\n\t}\n\n\tprivate async checkStateAfterMigrations(storage: OfflineStorage) {\n\t\t// Check that all the necessary migrations have been run, at least to the point where we are compatible.\n\t\tconst meta = await storage.dumpMetadata()\n\t\tfor (const app of typedKeys(this.modelInfos)) {\n\t\t\tconst compatibleSince = this.modelInfos[app].compatibleSince\n\t\t\tlet metaVersion = meta[`${app}-version`]!\n\t\t\tif (metaVersion < compatibleSince) {\n\t\t\t\tthrow new ProgrammingError(\n\t\t\t\t\t`You forgot to migrate your databases! ${app}.version should be >= ${this.modelInfos[app].compatibleSince} but in db it is ${metaVersion}`,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async runMigrations(meta: Partial<OfflineDbMeta>, storage: OfflineStorage, sqlCipherFacade: SqlCipherFacade) {\n\t\tfor (const { app, version, migrate } of this.migrations) {\n\t\t\tconst storedVersion = meta[`${app}-version`]!\n\t\t\tif (storedVersion < version) {\n\t\t\t\tconsole.log(`running offline db migration for ${app} from ${storedVersion} to ${version}`)\n\t\t\t\tawait migrate(storage, sqlCipherFacade)\n\t\t\t\tconsole.log(\"migration finished\")\n\t\t\t\tawait storage.setStoredModelVersion(app, version)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async populateModelVersions(meta: Readonly<Partial<OfflineDbMeta>>, storage: OfflineStorage): Promise<Partial<OfflineDbMeta>> {\n\t\t// copy metadata because it's going to be mutated\n\t\tconst newMeta = { ...meta }\n\t\t// Populate model versions if they haven't been written already\n\t\tfor (const app of typedKeys(this.modelInfos)) {\n\t\t\tawait this.prepopulateVersionIfAbsent(app, this.modelInfos[app].version, newMeta, storage)\n\t\t}\n\n\t\tawait this.prepopulateVersionIfAbsent(\"offline\", CURRENT_OFFLINE_VERSION, newMeta, storage)\n\t\treturn newMeta\n\t}\n\n\t/**\n\t * update the metadata table to initialize the row of the app with the given model version\n\t *\n\t * NB: mutates meta\n\t */\n\tprivate async prepopulateVersionIfAbsent(app: VersionMetadataBaseKey, version: number, meta: Partial<OfflineDbMeta>, storage: OfflineStorage) {\n\t\tconst key = `${app}-version` as const\n\t\tconst storedVersion = meta[key]\n\t\tif (storedVersion == null) {\n\t\t\tmeta[key] = version\n\t\t\tawait storage.setStoredModelVersion(app, version)\n\t\t}\n\t}\n\n\t/**\n\t * it's possible that the user installed an older client over a newer one, and we don't have backwards migrations.\n\t * in that case, it's likely that the client can't even understand the contents of the db.\n\t * we're going to delete it and not migrate at all.\n\t * @private\n\t *\n\t * @returns true if the database we're supposed to migrate has any higher model versions than our highest migration for that model, false otherwise\n\t */\n\tprivate isDbNewerThanCurrentClient(meta: Partial<OfflineDbMeta>): boolean {\n\t\tfor (const [app, { version }] of typedEntries(this.modelInfos)) {\n\t\t\tconst storedVersion = meta[`${app}-version`]!\n\t\t\tif (storedVersion > version) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\treturn assertNotNull(meta[`offline-version`]) > CURRENT_OFFLINE_VERSION\n\t}\n}\n"],"mappings":"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"}