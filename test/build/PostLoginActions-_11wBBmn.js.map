{"version":3,"file":"PostLoginActions-_11wBBmn.js","names":["credentialsProvider: CredentialsProvider","secondFactorHandler: SecondFactorHandler","connectivityModel: WebsocketConnectivityModel","logins: LoginController","dateProvider: DateProvider","entityClient: EntityClient","userManagementFacade: UserManagementFacade","customerFacade: CustomerFacade","themeController: ThemeController","showSetupWizard: () => unknown","syncExternalCalendars: () => unknown","setUpClientOnlyCalendars: () => unknown","loggedInEvent: LoggedInEvent","updates: ReadonlyArray<EntityUpdateData>","isCustomerUpdate: boolean","notification: OutOfOfficeNotification","notificationMessage: Component","customizations: ThemeCustomizations"],"sources":["../../src/common/login/PostLoginActions.ts"],"sourcesContent":["import m, { Component } from \"mithril\"\nimport type { LoggedInEvent, PostLoginAction } from \"../api/main/LoginController\"\nimport { LoginController } from \"../api/main/LoginController\"\nimport { isAdminClient, isApp, isDesktop, LOGIN_TITLE } from \"../api/common/Env\"\nimport { assertNotNull, defer, delay, neverNull, noOp, ofClass } from \"@tutao/tutanota-utils\"\nimport { windowFacade } from \"../misc/WindowFacade.js\"\nimport { checkApprovalStatus } from \"../misc/LoginUtils.js\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { ReceiveInfoService } from \"../api/entities/tutanota/Services\"\nimport { lang } from \"../misc/LanguageViewModel.js\"\nimport { getHourCycle } from \"../misc/Formatter.js\"\nimport { createReceiveInfoServiceData, OutOfOfficeNotification } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { isNotificationCurrentlyActive, loadOutOfOfficeNotification } from \"../misc/OutOfOfficeNotificationUtils.js\"\nimport * as notificationOverlay from \"../gui/base/NotificationOverlay\"\nimport { ButtonType } from \"../gui/base/Button.js\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport { CloseEventBusOption, Const, SecondFactorType } from \"../api/common/TutanotaConstants\"\nimport { showMoreStorageNeededOrderDialog } from \"../misc/SubscriptionDialogs.js\"\nimport { notifications } from \"../gui/Notifications\"\nimport { LockedError } from \"../api/common/error/RestError\"\nimport { CredentialsProvider, usingKeychainAuthenticationWithOptions } from \"../misc/credentials/CredentialsProvider.js\"\nimport type { ThemeCustomizations } from \"../misc/WhitelabelCustomizations.js\"\nimport { getThemeCustomizations } from \"../misc/WhitelabelCustomizations.js\"\nimport { CredentialEncryptionMode } from \"../misc/credentials/CredentialEncryptionMode.js\"\nimport { SecondFactorHandler } from \"../misc/2fa/SecondFactorHandler.js\"\nimport { SessionType } from \"../api/common/SessionType\"\nimport { StorageBehavior } from \"../misc/UsageTestModel.js\"\nimport type { WebsocketConnectivityModel } from \"../misc/WebsocketConnectivityModel.js\"\nimport { DateProvider } from \"../api/common/DateProvider.js\"\nimport { createCustomerProperties, CustomerTypeRef, SecondFactorTypeRef } from \"../api/entities/sys/TypeRefs.js\"\nimport { EntityClient } from \"../api/common/EntityClient.js\"\nimport { shouldShowStorageWarning, shouldShowUpgradeReminder } from \"./PostLoginUtils.js\"\nimport { UserManagementFacade } from \"../api/worker/facades/lazy/UserManagementFacade.js\"\nimport { CustomerFacade } from \"../api/worker/facades/lazy/CustomerFacade.js\"\nimport { deviceConfig } from \"../misc/DeviceConfig.js\"\nimport { ThemeController } from \"../gui/ThemeController.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../api/common/utils/EntityUpdateUtils.js\"\n\n/**\n * This is a collection of all things that need to be initialized/global state to be set after a user has logged in successfully.\n */\n\nexport class PostLoginActions implements PostLoginAction {\n\tconstructor(\n\t\tprivate readonly credentialsProvider: CredentialsProvider,\n\t\tpublic secondFactorHandler: SecondFactorHandler,\n\t\tprivate readonly connectivityModel: WebsocketConnectivityModel,\n\t\tprivate readonly logins: LoginController,\n\t\tprivate readonly dateProvider: DateProvider,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly userManagementFacade: UserManagementFacade,\n\t\tprivate readonly customerFacade: CustomerFacade,\n\t\tprivate readonly themeController: ThemeController,\n\t\tprivate readonly showSetupWizard: () => unknown,\n\t\tprivate readonly syncExternalCalendars: () => unknown,\n\t\tprivate readonly setUpClientOnlyCalendars: () => unknown,\n\t) {}\n\n\tasync onPartialLoginSuccess(loggedInEvent: LoggedInEvent): Promise<void> {\n\t\t// We establish websocket connection even for temporary sessions because we need to get updates e.g. during signup\n\t\twindowFacade.addOnlineListener(() => {\n\t\t\tconsole.log(new Date().toISOString(), \"online - try reconnect\")\n\t\t\tif (this.logins.isFullyLoggedIn()) {\n\t\t\t\t// When we try to connect after receiving online event it might not succeed so we delay reconnect attempt by 2s\n\t\t\t\tthis.connectivityModel.tryReconnect(true, true, 2000)\n\t\t\t} else {\n\t\t\t\t// log in user\n\t\t\t\tthis.logins.retryAsyncLogin()\n\t\t\t}\n\t\t})\n\t\twindowFacade.addOfflineListener(() => {\n\t\t\tconsole.log(new Date().toISOString(), \"offline - pause event bus\")\n\t\t\tthis.connectivityModel.close(CloseEventBusOption.Pause)\n\t\t})\n\n\t\t// only show \"Tuta Mail\" after login if there is no custom title set\n\t\tif (!this.logins.getUserController().isInternalUser()) {\n\t\t\tif (document.title === LOGIN_TITLE) {\n\t\t\t\tdocument.title = \"Tuta Mail\"\n\t\t\t}\n\n\t\t\treturn\n\t\t} else {\n\t\t\tlet postLoginTitle = document.title === LOGIN_TITLE ? \"Tuta Mail\" : document.title\n\t\t\tdocument.title = neverNull(this.logins.getUserController().userGroupInfo.mailAddress) + \" - \" + postLoginTitle\n\t\t}\n\t\tnotifications.requestPermission()\n\n\t\tif (\n\t\t\tloggedInEvent.sessionType === SessionType.Persistent &&\n\t\t\tusingKeychainAuthenticationWithOptions() &&\n\t\t\t(await this.credentialsProvider.getCredentialEncryptionMode()) == null\n\t\t) {\n\t\t\t// If the encryption mode is not selected, we opt user into automatic mode.\n\t\t\t// We keep doing it here for now to have some flexibility if we want to show some other option here in the future.\n\t\t\tawait this.credentialsProvider.setCredentialEncryptionMode(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t}\n\n\t\tlang.updateFormats({\n\t\t\t// partial\n\t\t\thourCycle: getHourCycle(this.logins.getUserController().userSettingsGroupRoot),\n\t\t})\n\n\t\t// We already have user data to load themes\n\t\tif (isApp() || isDesktop()) {\n\t\t\tawait this.storeNewCustomThemes()\n\t\t}\n\t}\n\n\tasync onFullLoginSuccess(loggedInEvent: LoggedInEvent): Promise<void> {\n\t\tif (loggedInEvent.sessionType === SessionType.Temporary || !this.logins.getUserController().isInternalUser()) {\n\t\t\treturn\n\t\t}\n\n\t\t// Do not wait\n\t\tthis.fullLoginAsyncActions()\n\n\t\tthis.showSetupWizardIfNeeded()\n\t}\n\n\t// Runs the user approval check after the user has been updated or after a timeout\n\tprivate checkApprovalAfterSync(): Promise<void> {\n\t\t// Create a promise we will use to track the completion of the below listener\n\t\tconst listenerDeferral = defer<void>()\n\t\t// Add an event listener to run the check after any customer entity update\n\t\tconst listener = async (updates: ReadonlyArray<EntityUpdateData>) => {\n\t\t\t// Get whether the entity update contains the customer\n\t\t\tconst customer = this.logins.getUserController().user.customer\n\t\t\tconst isCustomerUpdate: boolean = updates.some((update) => isUpdateForTypeRef(CustomerTypeRef, update) && update.instanceId === customer)\n\t\t\tif (customer != null && isCustomerUpdate) {\n\t\t\t\tlistenerDeferral.resolve()\n\t\t\t}\n\t\t}\n\t\tlocator.eventController.addEntityListener(listener)\n\n\t\t// Timeout if the entity update does not arrive or takes too long to arrive\n\t\tconst timeoutPromise = delay(2000)\n\n\t\t// Remove the listener and start the approval check depending on whether a customer update or the timeout resolves first.\n\t\treturn Promise.race([listenerDeferral.promise, timeoutPromise]).then(() => {\n\t\t\tlocator.eventController.removeEntityListener(listener)\n\t\t\tcheckApprovalStatus(this.logins, true)\n\t\t})\n\t}\n\n\tprivate async fullLoginAsyncActions() {\n\t\tthis.checkApprovalAfterSync() // Not awaiting so this is run in parallel\n\t\tawait this.showUpgradeReminderIfNeeded()\n\t\tawait this.checkStorageLimit()\n\n\t\tthis.secondFactorHandler.setupAcceptOtherClientLoginListener()\n\n\t\tif (!isAdminClient()) {\n\t\t\t// If it failed during the partial login due to missing cache entries we will give it another spin here. If it didn't fail then it's just a noop\n\t\t\tawait locator.mailboxModel.init()\n\t\t\tconst calendarModel = await locator.calendarModel()\n\t\t\tawait calendarModel.init()\n\t\t\tawait this.remindActiveOutOfOfficeNotification()\n\t\t}\n\n\t\tif (isApp() || isDesktop()) {\n\t\t\t// Do not try to register for notifications while the setup dialog\n\t\t\t// is being shown because we might not have a permission yet and\n\t\t\t// we don't want to ask for it while dialog is shown, we will ask in\n\t\t\t// the dialog anyway.\n\t\t\t// After dialog is finished or dismissed the setup is \"complete\".\n\t\t\tif ((isApp() && deviceConfig.getIsSetupComplete()) || isDesktop()) {\n\t\t\t\t// Await the push service registration so `storePushIdentifierLocally()` can set the extended notification mode on Android\n\t\t\t\t// before `loadNewsIds()` runs the `isShown()` check of the `RichNotificationsNews` news item\n\t\t\t\tawait locator.pushService.register()\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Skipping registering for notifications while setup dialog is shown\")\n\t\t\t}\n\n\t\t\tthis.syncExternalCalendars()\n\t\t}\n\n\t\tthis.setUpClientOnlyCalendars()\n\n\t\tif (this.logins.isGlobalAdminUserLoggedIn() && !isAdminClient()) {\n\t\t\tconst receiveInfoData = createReceiveInfoServiceData({\n\t\t\t\tlanguage: lang.code,\n\t\t\t})\n\t\t\tlocator.serviceExecutor.post(ReceiveInfoService, receiveInfoData)\n\t\t}\n\n\t\tthis.enforcePasswordChange()\n\n\t\tconst usageTestModel = locator.usageTestModel\n\t\tawait usageTestModel.init()\n\n\t\tusageTestModel.setStorageBehavior(StorageBehavior.Persist)\n\t\t// Load only up-to-date (not older than 1h) assignments here and make a request for that.\n\t\t// There should not be a lot of re-rendering at this point since assignments for new tests are usually fetched right after a client version update.\n\t\tlocator.usageTestController.setTests(await usageTestModel.loadActiveUsageTests())\n\n\t\t// Needs to be called after UsageTestModel.init() if the UsageOptInNews is live! (its isShown() requires an initialized UsageTestModel)\n\t\tawait locator.newsModel.loadNewsIds()\n\n\t\t// Redraw to render usage tests and news, among other things that may have changed.\n\t\tm.redraw()\n\t}\n\n\tprivate deactivateOutOfOfficeNotification(notification: OutOfOfficeNotification): Promise<void> {\n\t\tnotification.enabled = false\n\t\treturn this.entityClient.update(notification)\n\t}\n\n\tprivate remindActiveOutOfOfficeNotification(): Promise<void> {\n\t\treturn loadOutOfOfficeNotification().then((notification) => {\n\t\t\tif (notification && isNotificationCurrentlyActive(notification, new Date())) {\n\t\t\t\tconst notificationMessage: Component = {\n\t\t\t\t\tview: () => {\n\t\t\t\t\t\treturn m(\"\", lang.get(\"outOfOfficeReminder_label\"))\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tnotificationOverlay.show(\n\t\t\t\t\tnotificationMessage,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"close_alt\",\n\t\t\t\t\t},\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: \"deactivate_action\",\n\t\t\t\t\t\t\tclick: () => this.deactivateOutOfOfficeNotification(notification),\n\t\t\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate async storeNewCustomThemes(): Promise<void> {\n\t\tconst domainInfoAndConfig = await this.logins.getUserController().loadWhitelabelConfig()\n\t\tif (domainInfoAndConfig && domainInfoAndConfig.whitelabelConfig.jsonTheme) {\n\t\t\tconst customizations: ThemeCustomizations = getThemeCustomizations(domainInfoAndConfig.whitelabelConfig)\n\t\t\t// jsonTheme is stored on WhitelabelConfig as an empty json string (\"{}\", or whatever JSON.stringify({}) gives you)\n\t\t\t// so we can't just check `!whitelabelConfig.jsonTheme`\n\t\t\tif (Object.keys(customizations).length > 0) {\n\t\t\t\t// Custom theme is missing themeId, so we update it with the whitelabel domain\n\t\t\t\tif (!customizations.themeId) {\n\t\t\t\t\tcustomizations.themeId = domainInfoAndConfig.domainInfo.domain\n\t\t\t\t}\n\n\t\t\t\tawait this.themeController.storeCustomThemeForCustomizations(customizations)\n\n\t\t\t\t// Update the already loaded custom themes to their latest version\n\t\t\t\tconst previouslySavedThemes = await this.themeController.getCustomThemes()\n\t\t\t\tconst isExistingTheme = previouslySavedThemes.includes(domainInfoAndConfig.domainInfo.domain)\n\t\t\t\tif (isExistingTheme) {\n\t\t\t\t\tawait this.themeController.reloadTheme()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async checkStorageLimit(): Promise<void> {\n\t\tif (await shouldShowStorageWarning(this.logins.getUserController(), this.userManagementFacade, this.customerFacade)) {\n\t\t\tawait showMoreStorageNeededOrderDialog(\"insufficientStorageWarning_msg\")\n\t\t}\n\t}\n\n\tprivate async showUpgradeReminderIfNeeded(): Promise<void> {\n\t\tif (await shouldShowUpgradeReminder(this.logins.getUserController(), new Date(this.dateProvider.now()))) {\n\t\t\tconst confirmed = await Dialog.reminder(lang.get(\"upgradeReminderTitle_msg\"), lang.get(\"premiumOffer_msg\"))\n\t\t\tif (confirmed) {\n\t\t\t\tconst wizard = await import(\"../subscription/UpgradeSubscriptionWizard.js\")\n\t\t\t\tawait wizard.showUpgradeWizard(this.logins)\n\t\t\t}\n\n\t\t\tconst newCustomerProperties = createCustomerProperties(await this.logins.getUserController().loadCustomerProperties())\n\t\t\tnewCustomerProperties.lastUpgradeReminder = new Date(this.dateProvider.now())\n\t\t\tthis.entityClient.update(newCustomerProperties).catch(ofClass(LockedError, noOp))\n\t\t}\n\t}\n\n\tprivate async enforcePasswordChange(): Promise<void> {\n\t\tif (this.logins.getUserController().user.requirePasswordUpdate) {\n\t\t\tconst { showChangeOwnPasswordDialog } = await import(\"../settings/login/ChangePasswordDialogs.js\")\n\t\t\tawait showChangeOwnPasswordDialog(false)\n\t\t}\n\n\t\tif (location.hostname === Const.DEFAULT_APP_DOMAIN) {\n\t\t\tconst user = this.logins.getUserController().user\n\t\t\tconst secondFactors = await this.entityClient.loadAll(SecondFactorTypeRef, assertNotNull(user.auth).secondFactors)\n\t\t\tconst webauthnFactors = secondFactors.filter((f) => f.type === SecondFactorType.webauthn || f.type === SecondFactorType.u2f)\n\t\t\t// If there are webauthn factors but none of them are for the default domain, show a message\n\t\t\tif (webauthnFactors.length > 0 && !webauthnFactors.some((f) => f.u2f && f.u2f?.appId == Const.WEBAUTHN_RP_ID)) {\n\t\t\t\tconst dialog = Dialog.confirmMultiple(\"noKeysForThisDomain_msg\", [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"skip_action\",\n\t\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\t\tclick: () => dialog.close(),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"settings_label\",\n\t\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t\t\tm.route.set(\"/settings/login\")\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t}\n\t\t}\n\t}\n\n\t// Show the onboarding wizard if this is the first time the app has been opened since install\n\tprivate async showSetupWizardIfNeeded(): Promise<void> {\n\t\tconst isSetupComplete = deviceConfig.getIsSetupComplete()\n\t\tif (isApp() && !isSetupComplete) {\n\t\t\tawait this.showSetupWizard()\n\t\t}\n\t}\n}\n"],"mappings":"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"}