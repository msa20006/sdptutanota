{"version":3,"file":"DeviceConfig-payZM407.js","names":["defaultThemePreference: ThemePreference","_version: number","localStorage: Storage | null","credentials: DeviceConfigCredentials","userId: Id","version: number","value: boolean","value: Map<Id, LastExternalCalendarSyncEntry>","groupId: Id","lastSyncStatus: SyncStatus","language: LanguageCode | null","theme: ThemePreference","defaultView: CalendarViewType","user: Id","calendars: Id[]","folders: Id[]","newsItemId: Id","testDeviceId: string","persistedAssignmentData: PersistedAssignmentData","days: number","setting: boolean","id: Id","expanded: boolean","action: ListAutoSelectBehavior","calendarId: Id","clientOnlyCalendarConfig: ClientOnlyCalendarsInfo","events: Date[]","date: Date","loadedConfig: any","deviceConfig: DeviceConfig"],"sources":["../../src/common/misc/DeviceConfig.ts"],"sourcesContent":["import { Base64, base64ToUint8Array, typedEntries, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport type { LanguageCode } from \"./LanguageViewModel\"\nimport type { ThemePreference } from \"../gui/theme\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError\"\nimport type { CredentialEncryptionMode } from \"./credentials/CredentialEncryptionMode.js\"\nimport { assertMainOrNodeBoot, isApp } from \"../api/common/Env\"\nimport { PersistedAssignmentData, UsageTestStorage } from \"./UsageTestModel\"\nimport { client } from \"./ClientDetector\"\nimport { NewsItemStorage } from \"./news/NewsModel.js\"\nimport { CredentialsInfo } from \"../native/common/generatedipc/CredentialsInfo.js\"\nimport { CalendarViewType } from \"../api/common/utils/CommonCalendarUtils.js\"\nimport { SyncStatus } from \"../calendar/import/ImportExportUtils.js\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport type { GroupSettings } from \"../api/entities/tutanota/TypeRefs.js\"\n\nassertMainOrNodeBoot()\nexport const defaultThemePreference: ThemePreference = \"auto:light|dark\"\n\nexport enum ListAutoSelectBehavior {\n\tNONE,\n\tOLDER,\n\tNEWER,\n}\n\nexport type LastExternalCalendarSyncEntry = {\n\tlastSuccessfulSync: number | undefined | null\n\tlastSyncStatus: SyncStatus\n}\n\nexport type ClientOnlyCalendarsInfo = Pick<GroupSettings, \"name\" | \"color\">\n\n/**\n * Definition of the config object that will be saved to local storage\n */\ninterface ConfigObject {\n\t_version: number\n\t_credentials: Map<Id, DeviceConfigCredentials>\n\tscheduledAlarmModelVersionPerUser: Record<Id, number>\n\t_themeId: ThemePreference\n\t_language: LanguageCode | null\n\t_defaultCalendarView: Record<Id, CalendarViewType | null>\n\t/** map from user id to a list of calendar grouproots*/\n\t_hiddenCalendars: Record<Id, Id[]>\n\t/** map from user id to a list of expanded folders (elementId)*/\n\texpandedMailFolders: Record<Id, Id[]>\n\t_signupToken: string\n\t_credentialEncryptionMode: CredentialEncryptionMode | null\n\t_encryptedCredentialsKey: Base64 | null\n\t/** list of acknowledged news item ids for this device */\n\tacknowledgedNewsItems: Id[]\n\t_testDeviceId: string | null\n\t_testAssignments: PersistedAssignmentData | null\n\tofflineTimeRangeDaysByUser: Record<Id, number>\n\tconversationViewShowOnlySelectedMail: boolean\n\t/** Stores each users' definition about contact synchronization */\n\tsyncContactsWithPhonePreference: Record<Id, boolean>\n\t/** Whether mobile calendar navigation is in the \"per week\" or \"per month\" mode */\n\tisCalendarDaySelectorExpanded: boolean\n\t/** Stores user's desired behavior to the view when an email is removed from the list */\n\tmailAutoSelectBehavior: ListAutoSelectBehavior\n\t// True if the app has already been run after install\n\tisSetupComplete: boolean\n\t// True if the credentials have been migrated to native\n\tisCredentialsMigratedToNative: boolean\n\tlastExternalCalendarSync: Record<Id, LastExternalCalendarSyncEntry>\n\tclientOnlyCalendars: Map<Id, ClientOnlyCalendarsInfo>\n\n\t/**\n\t * A list of dates on which a user has sent an e-mail or created a calendar event. Each date is represented as the date's timestamp.\n\t */\n\tevents: Array<number>\n\n\t/**\n\t * The last date on which the user was prompted to rate the app as a timestamp.\n\t */\n\tlastRatingPromptedDate?: number\n\n\t/**\n\t * The date of the earliest possible next date from which another rating can be requested from the user.\n\t * This is only for the case the user does not want to rate right now or completely opts out of the in-app ratings.\n\t */\n\tretryRatingPromptAfter?: number\n}\n\n/**\n * Device config for internal user auto login. Only one config per device is stored.\n */\nexport class DeviceConfig implements UsageTestStorage, NewsItemStorage {\n\tpublic static Version = 4\n\tpublic static LocalStorageKey = \"tutanotaConfig\"\n\n\tprivate config!: ConfigObject\n\tprivate lastSyncStream: Stream<Map<Id, LastExternalCalendarSyncEntry>> = stream(new Map())\n\n\tconstructor(private readonly _version: number, private readonly localStorage: Storage | null) {\n\t\tthis.init()\n\t}\n\n\tinit() {\n\t\tconst loadedConfig = this.loadConfigFromLocalStorage() ?? {}\n\n\t\tlet doSave = false\n\t\tif (loadedConfig._version != null && loadedConfig._version !== DeviceConfig.Version) {\n\t\t\tmigrateConfig(loadedConfig)\n\t\t\tdoSave = true\n\t\t}\n\n\t\tlet signupToken\n\t\tif (loadedConfig._signupToken) {\n\t\t\tsignupToken = loadedConfig._signupToken\n\t\t} else {\n\t\t\tlet bytes = new Uint8Array(6)\n\t\t\tlet crypto = window.crypto\n\t\t\tcrypto.getRandomValues(bytes)\n\t\t\tsignupToken = uint8ArrayToBase64(bytes)\n\t\t\tdoSave = true\n\t\t}\n\n\t\tthis.config = {\n\t\t\t_version: DeviceConfig.Version,\n\t\t\t_credentials: loadedConfig._credentials ? new Map(typedEntries(loadedConfig._credentials)) : new Map(),\n\t\t\t_credentialEncryptionMode: loadedConfig._credentialEncryptionMode ?? null,\n\t\t\t_encryptedCredentialsKey: loadedConfig._encryptedCredentialsKey ?? null,\n\t\t\tacknowledgedNewsItems: loadedConfig.acknowledgedNewsItems ?? [],\n\t\t\t_themeId: loadedConfig._themeId ?? defaultThemePreference,\n\t\t\tscheduledAlarmModelVersionPerUser: loadedConfig.scheduledAlarmModelVersionPerUser ?? {},\n\t\t\t_language: loadedConfig._language ?? null,\n\t\t\t_defaultCalendarView: loadedConfig._defaultCalendarView ?? {},\n\t\t\t_hiddenCalendars: loadedConfig._hiddenCalendars ?? {},\n\t\t\texpandedMailFolders: loadedConfig.expandedMailFolders ?? {},\n\t\t\t_testDeviceId: loadedConfig._testDeviceId ?? null,\n\t\t\t_testAssignments: loadedConfig._testAssignments ?? null,\n\t\t\t_signupToken: signupToken,\n\t\t\tofflineTimeRangeDaysByUser: loadedConfig.offlineTimeRangeDaysByUser ?? {},\n\t\t\tconversationViewShowOnlySelectedMail: loadedConfig.conversationViewShowOnlySelectedMail ?? false,\n\t\t\tsyncContactsWithPhonePreference: loadedConfig.syncContactsWithPhonePreference ?? {},\n\t\t\tisCalendarDaySelectorExpanded: loadedConfig.isCalendarDaySelectorExpanded ?? false,\n\t\t\tmailAutoSelectBehavior: loadedConfig.mailAutoSelectBehavior ?? (isApp() ? ListAutoSelectBehavior.NONE : ListAutoSelectBehavior.OLDER),\n\t\t\tisSetupComplete: loadedConfig.isSetupComplete ?? false,\n\t\t\tisCredentialsMigratedToNative: loadedConfig.isCredentialsMigratedToNative ?? false,\n\t\t\tlastExternalCalendarSync: loadedConfig.lastExternalCalendarSync ?? {},\n\t\t\tclientOnlyCalendars: loadedConfig.clientOnlyCalendars ? new Map(typedEntries(loadedConfig.clientOnlyCalendars)) : new Map(),\n\t\t\tevents: loadedConfig.events ?? [],\n\t\t\tlastRatingPromptedDate: loadedConfig.lastRatingPromptedDate ?? null,\n\t\t\tretryRatingPromptAfter: loadedConfig.retryRatingPromptAfter ?? null,\n\t\t}\n\n\t\tthis.lastSyncStream(new Map(Object.entries(this.config.lastExternalCalendarSync)))\n\n\t\t// We need to write the config if there was a migration and if we generate the signup token and if.\n\t\t// We do not save the config if there was no config. The config is stored when some value changes.\n\t\tif (doSave) {\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\tprivate loadConfigFromLocalStorage(): any | null {\n\t\tif (this.localStorage == null) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst loadedConfigString = this.localStorage.getItem(DeviceConfig.LocalStorageKey)\n\t\tif (loadedConfigString == null) {\n\t\t\treturn null\n\t\t}\n\n\t\ttry {\n\t\t\treturn JSON.parse(loadedConfigString)\n\t\t} catch (e) {\n\t\t\tconsole.warn(\"Could not parse device config\")\n\t\t\treturn null\n\t\t}\n\t}\n\n\tstoreCredentials(credentials: DeviceConfigCredentials) {\n\t\tthis.config._credentials.set(credentials.credentialInfo.userId, credentials)\n\n\t\tthis.writeToStorage()\n\t}\n\n\tgetCredentialsByUserId(userId: Id): DeviceConfigCredentials | null {\n\t\treturn this.config._credentials.get(userId) ?? null\n\t}\n\n\tgetCredentials(): Array<DeviceConfigCredentials> {\n\t\treturn Array.from(this.config._credentials.values())\n\t}\n\n\tasync deleteByUserId(userId: Id): Promise<void> {\n\t\tthis.config._credentials.delete(userId)\n\n\t\tthis.writeToStorage()\n\t}\n\n\tasync clearCredentialsData(): Promise<void> {\n\t\tthis.config._credentials.clear()\n\t\tthis.config._encryptedCredentialsKey = null\n\t\tthis.config._credentialEncryptionMode = null\n\n\t\tthis.writeToStorage()\n\t}\n\n\tgetSignupToken(): string {\n\t\treturn this.config._signupToken\n\t}\n\n\tgetScheduledAlarmsModelVersion(userId: Id): number | null {\n\t\treturn this.config.scheduledAlarmModelVersionPerUser[userId] ?? null\n\t}\n\n\tsetScheduledAlarmsModelVersion(userId: Id, version: number): void {\n\t\tthis.config.scheduledAlarmModelVersionPerUser[userId] = version\n\t\tthis.writeToStorage()\n\t}\n\n\tsetNoAlarmsScheduled() {\n\t\tthis.config.scheduledAlarmModelVersionPerUser = {}\n\t\tthis.writeToStorage()\n\t}\n\n\tgetIsSetupComplete(): boolean {\n\t\treturn this.config.isSetupComplete ?? false\n\t}\n\n\tsetIsSetupComplete(value: boolean): void {\n\t\tthis.config.isSetupComplete = value\n\t\tthis.writeToStorage()\n\t}\n\n\tgetIsCredentialsMigratedToNative(): boolean {\n\t\treturn this.config.isCredentialsMigratedToNative ?? false\n\t}\n\n\tsetIsCredentialsMigratedToNative(value: boolean): void {\n\t\tthis.config.isCredentialsMigratedToNative = value\n\t\tthis.writeToStorage()\n\t}\n\n\tgetLastExternalCalendarSync(): Map<Id, LastExternalCalendarSyncEntry> {\n\t\treturn this.lastSyncStream()\n\t}\n\n\tsetLastExternalCalendarSync(value: Map<Id, LastExternalCalendarSyncEntry>): void {\n\t\tthis.config.lastExternalCalendarSync = Object.fromEntries(value)\n\t\tthis.writeToStorage()\n\t\tthis.lastSyncStream(value)\n\t}\n\n\tupdateLastSync(groupId: Id, lastSyncStatus: SyncStatus = SyncStatus.Success) {\n\t\tconst lastExternalCalendarSync = this.getLastExternalCalendarSync()\n\t\tconst lastSuccessfulSync = lastSyncStatus === SyncStatus.Success ? Date.now() : lastExternalCalendarSync.get(groupId)?.lastSuccessfulSync\n\t\tlastExternalCalendarSync.set(groupId, { lastSuccessfulSync, lastSyncStatus })\n\t\tthis.setLastExternalCalendarSync(lastExternalCalendarSync)\n\t}\n\n\tgetLastSyncStream() {\n\t\treturn this.lastSyncStream\n\t}\n\n\tremoveLastSync(groupId: Id) {\n\t\tconst lastExternalCalendarSync = this.getLastExternalCalendarSync()\n\t\tif (lastExternalCalendarSync.delete(groupId)) this.setLastExternalCalendarSync(lastExternalCalendarSync)\n\t}\n\n\tgetLanguage(): LanguageCode | null {\n\t\treturn this.config._language\n\t}\n\n\tsetLanguage(language: LanguageCode | null) {\n\t\tthis.config._language = language\n\t\tthis.writeToStorage()\n\t}\n\n\tprivate writeToStorage() {\n\t\ttry {\n\t\t\tif (this.localStorage != null) {\n\t\t\t\tthis.localStorage.setItem(\n\t\t\t\t\tDeviceConfig.LocalStorageKey,\n\t\t\t\t\tJSON.stringify(this.config, (key, value) => {\n\t\t\t\t\t\tif (key === \"_credentials\") {\n\t\t\t\t\t\t\treturn Object.fromEntries(this.config._credentials.entries())\n\t\t\t\t\t\t} else if (key === \"clientOnlyCalendars\") {\n\t\t\t\t\t\t\treturn Object.fromEntries(this.config.clientOnlyCalendars.entries())\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// may occur in Safari < 11 in incognito mode because it throws a QuotaExceededError\n\t\t\t// DOMException will occurr if all cookies are disabled\n\t\t\tconsole.log(\"could not store config\", e)\n\t\t}\n\t}\n\n\tgetTheme(): ThemePreference {\n\t\treturn this.config._themeId\n\t}\n\n\tsetTheme(theme: ThemePreference) {\n\t\tif (this.config._themeId !== theme) {\n\t\t\tthis.config._themeId = theme\n\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\tgetDefaultCalendarView(userId: Id): CalendarViewType | null {\n\t\treturn this.config._defaultCalendarView[userId]\n\t}\n\n\tsetDefaultCalendarView(userId: Id, defaultView: CalendarViewType) {\n\t\tif (this.config._defaultCalendarView[userId] !== defaultView) {\n\t\t\tthis.config._defaultCalendarView[userId] = defaultView\n\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\tgetHiddenCalendars(user: Id): Id[] {\n\t\treturn this.config._hiddenCalendars[user] ?? []\n\t}\n\n\tsetHiddenCalendars(user: Id, calendars: Id[]) {\n\t\tif (this.config._hiddenCalendars[user] !== calendars) {\n\t\t\tthis.config._hiddenCalendars[user] = calendars\n\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\tgetExpandedFolders(user: Id): Id[] {\n\t\treturn this.config.expandedMailFolders[user] ?? []\n\t}\n\n\tsetExpandedFolders(user: Id, folders: Id[]) {\n\t\tif (this.config.expandedMailFolders[user] !== folders) {\n\t\t\tthis.config.expandedMailFolders[user] = folders\n\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\thasAcknowledgedNewsItemForDevice(newsItemId: Id): boolean {\n\t\treturn this.config.acknowledgedNewsItems.includes(newsItemId)\n\t}\n\n\tacknowledgeNewsItemForDevice(newsItemId: Id) {\n\t\tif (!this.config.acknowledgedNewsItems.includes(newsItemId)) {\n\t\t\tthis.config.acknowledgedNewsItems.push(newsItemId)\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\tasync getCredentialEncryptionMode(): Promise<CredentialEncryptionMode | null> {\n\t\treturn this.config._credentialEncryptionMode\n\t}\n\n\tasync getCredentialsEncryptionKey(): Promise<Uint8Array | null> {\n\t\treturn this.config._encryptedCredentialsKey ? base64ToUint8Array(this.config._encryptedCredentialsKey) : null\n\t}\n\n\tasync getTestDeviceId(): Promise<string | null> {\n\t\treturn this.config._testDeviceId\n\t}\n\n\tasync storeTestDeviceId(testDeviceId: string): Promise<void> {\n\t\tthis.config._testDeviceId = testDeviceId\n\t\tthis.writeToStorage()\n\t}\n\n\tasync getAssignments(): Promise<PersistedAssignmentData | null> {\n\t\treturn this.config._testAssignments\n\t}\n\n\tasync storeAssignments(persistedAssignmentData: PersistedAssignmentData): Promise<void> {\n\t\tthis.config._testAssignments = persistedAssignmentData\n\t\tthis.writeToStorage()\n\t}\n\n\tgetOfflineTimeRangeDays(userId: Id): number | null {\n\t\treturn this.config.offlineTimeRangeDaysByUser[userId]\n\t}\n\n\tsetOfflineTimeRangeDays(userId: Id, days: number) {\n\t\tthis.config.offlineTimeRangeDaysByUser[userId] = days\n\t\tthis.writeToStorage()\n\t}\n\n\tgetConversationViewShowOnlySelectedMail(): boolean {\n\t\treturn this.config.conversationViewShowOnlySelectedMail\n\t}\n\n\tsetConversationViewShowOnlySelectedMail(setting: boolean) {\n\t\tthis.config.conversationViewShowOnlySelectedMail = setting\n\t\tthis.writeToStorage()\n\t}\n\n\tgetUserSyncContactsWithPhonePreference(id: Id): boolean | null {\n\t\treturn this.config.syncContactsWithPhonePreference[id] ?? null\n\t}\n\n\tsetUserSyncContactsWithPhonePreference(user: Id, value: boolean) {\n\t\tthis.config.syncContactsWithPhonePreference[user] = value\n\t\tthis.writeToStorage()\n\t}\n\n\tisCalendarDaySelectorExpanded(): boolean {\n\t\treturn this.config.isCalendarDaySelectorExpanded\n\t}\n\n\tsetCalendarDaySelectorExpanded(expanded: boolean) {\n\t\tthis.config.isCalendarDaySelectorExpanded = expanded\n\t\tthis.writeToStorage()\n\t}\n\n\tgetMailAutoSelectBehavior(): ListAutoSelectBehavior {\n\t\treturn this.config.mailAutoSelectBehavior\n\t}\n\n\tsetMailAutoSelectBehavior(action: ListAutoSelectBehavior) {\n\t\tthis.config.mailAutoSelectBehavior = action\n\t\tthis.writeToStorage()\n\t}\n\n\tgetClientOnlyCalendars() {\n\t\treturn this.config.clientOnlyCalendars\n\t}\n\n\tupdateClientOnlyCalendars(calendarId: Id, clientOnlyCalendarConfig: ClientOnlyCalendarsInfo): void {\n\t\tthis.config.clientOnlyCalendars.set(calendarId, clientOnlyCalendarConfig)\n\t\tthis.writeToStorage()\n\t}\n\n\tpublic writeEvents(events: Date[]): void {\n\t\tthis.config.events = events.map((date) => date.getTime())\n\t\tthis.writeToStorage()\n\t}\n\n\t/**\n\t * Gets a list of dates on which a certain event has occurred. Could be email sent, replied, contact created etc.\n\t *\n\t * Only present on iOS.\n\t */\n\tpublic getEvents(): Date[] {\n\t\treturn (this.config.events ?? []).flatMap((timestamp) => {\n\t\t\ttry {\n\t\t\t\treturn new Date(timestamp)\n\t\t\t} catch (e) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic setLastRatingPromptedDate(date: Date): void {\n\t\tthis.config.lastRatingPromptedDate = date.getTime()\n\t\tthis.writeToStorage()\n\t}\n\n\t/**\n\t * Gets the last date on which the user was prompted to rate the app.\n\t */\n\tpublic getLastRatingPromptedDate(): Date | null {\n\t\tif (this.config.lastRatingPromptedDate == null) {\n\t\t\treturn null\n\t\t}\n\n\t\ttry {\n\t\t\treturn new Date(this.config.lastRatingPromptedDate)\n\t\t} catch (e) {\n\t\t\treturn null\n\t\t}\n\t}\n\n\t/**\n\t * Sets the date of the earliest possible next date from which another rating can be requested from the user.\n\t */\n\tpublic setRetryRatingPromptAfter(date: Date): void {\n\t\tthis.config.retryRatingPromptAfter = date.getTime()\n\t\tthis.writeToStorage()\n\t}\n\n\t/**\n\t * Gets the date of the earliest possible next date from which another rating can be requested from the user.\n\t */\n\tpublic getRetryRatingPromptAfter(): Date | null {\n\t\tif (this.config.retryRatingPromptAfter == null) {\n\t\t\treturn null\n\t\t}\n\n\t\ttry {\n\t\t\treturn new Date(this.config.retryRatingPromptAfter)\n\t\t} catch (e) {\n\t\t\treturn null\n\t\t}\n\t}\n}\n\nexport function migrateConfig(loadedConfig: any) {\n\tif (loadedConfig === DeviceConfig.Version) {\n\t\tthrow new ProgrammingError(\"Should not migrate credentials, current version\")\n\t}\n\n\tif (loadedConfig._version < 2) {\n\t\tloadedConfig._credentials = []\n\t}\n\n\tif (loadedConfig._version < 3) {\n\t\tmigrateConfigV2to3(loadedConfig)\n\t}\n}\n\n/**\n * Migrate from V2 of the config to V3\n *\n * Exported for testing\n */\nexport function migrateConfigV2to3(loadedConfig: any) {\n\tconst oldCredentialsArray = loadedConfig._credentials\n\tloadedConfig._credentials = {}\n\n\tfor (let credential of oldCredentialsArray) {\n\t\tlet login, type\n\t\tif (credential.mailAddress.includes(\"@\")) {\n\t\t\tlogin = credential.mailAddress\n\t\t\ttype = \"internal\"\n\t\t} else {\n\t\t\t// in version 2 external users had userId as their email address\n\t\t\t// We use encryption stub in this version\n\t\t\tlogin = credential.userId\n\t\t\ttype = \"external\"\n\t\t}\n\n\t\tloadedConfig._credentials[credential.userId] = {\n\t\t\tcredentialInfo: {\n\t\t\t\tlogin,\n\t\t\t\tuserId: credential.userId,\n\t\t\t\ttype,\n\t\t\t},\n\t\t\tencryptedPassword: credential.encryptedPassword,\n\t\t\taccessToken: credential.accessToken,\n\t\t\tencryptedPassphraseKey: null, // should not be present\n\t\t}\n\t}\n}\n\n/**\n * Credentials as they are stored in DeviceConfig (byte arrays replaced with strings as DeviceConfig can only deal with strings).\n * @private visibleForTesting\n */\nexport interface DeviceConfigCredentials {\n\treadonly credentialInfo: CredentialsInfo\n\treadonly accessToken: string\n\treadonly databaseKey: Base64 | null\n\treadonly encryptedPassword: string\n\treadonly encryptedPassphraseKey: Base64 | null\n}\n\nexport const deviceConfig: DeviceConfig = new DeviceConfig(DeviceConfig.Version, client.localStorage() ? localStorage : null)\n"],"mappings":"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"}