{"version":3,"file":"RestClient.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/rest/RestClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { assertWorkerOrNode, getApiBaseUrl, isAdminClient, isAndroidApp, isWebClient, isWorker } from \"../../common/Env\"\nimport { ConnectionError, handleRestError, PayloadTooLargeError, ServiceUnavailableError, TooManyRequestsError } from \"../../common/error/RestError\"\nimport { HttpMethod, MediaType } from \"../../common/EntityFunctions\"\nimport { assertNotNull, typedEntries, uint8ArrayToArrayBuffer } from \"@tutao/tutanota-utils\"\nimport { SuspensionHandler } from \"../SuspensionHandler\"\nimport { REQUEST_SIZE_LIMIT_DEFAULT, REQUEST_SIZE_LIMIT_MAP } from \"../../common/TutanotaConstants\"\nimport { SuspensionError } from \"../../common/error/SuspensionError.js\"\n\nassertWorkerOrNode()\n\nconst TAG = \"[RestClient]\"\n\ninterface ProgressListener {\n\tupload(percent: number): void\n\n\tdownload(percent: number): void\n}\n\nexport const enum SuspensionBehavior {\n\tSuspend,\n\tThrow,\n}\n\nexport interface RestClientOptions {\n\tbody?: string | Uint8Array\n\tresponseType?: MediaType\n\tprogressListener?: ProgressListener\n\tbaseUrl?: string\n\theaders?: Dict\n\tqueryParams?: Dict\n\tnoCORS?: boolean\n\t/** Default is to suspend all requests on rate limit. */\n\tsuspensionBehavior?: SuspensionBehavior\n}\n\n/**\n * Allows REST communication with the server.\n * The RestClient observes upload/download progress and times\n * out in case no data is sent or received for a certain time.\n *\n * Uses XmlHttpRequest as there is still no support for tracking\n * upload progress with fetch (see https://stackoverflow.com/a/69400632)\n */\nexport class RestClient {\n\tprivate id: number\n\t// accurate to within a few seconds, depending on network speed\n\tprivate serverTimeOffsetMs: number | null = null\n\n\tconstructor(private readonly suspensionHandler: SuspensionHandler, private readonly domainConfig: DomainConfig) {\n\t\tthis.id = 0\n\t}\n\n\trequest(path: string, method: HttpMethod, options: RestClientOptions = {}): Promise<any | null> {\n\t\t// @ts-ignore\n\t\tconst debug = typeof self !== \"undefined\" && self.debug\n\t\tconst verbose = isWorker() && debug\n\n\t\tthis.checkRequestSizeLimit(path, method, options.body ?? null)\n\n\t\tif (this.suspensionHandler.isSuspended()) {\n\t\t\treturn this.suspensionHandler.deferRequest(() => this.request(path, method, options))\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.id++\n\n\t\t\t\tconst queryParams: Dict = options.queryParams ?? {}\n\n\t\t\t\tif (method === HttpMethod.GET && typeof options.body === \"string\") {\n\t\t\t\t\tqueryParams[\"_body\"] = options.body // get requests are not allowed to send a body. Therefore, we convert our body to a parameter\n\t\t\t\t}\n\n\t\t\t\tif (options.noCORS) {\n\t\t\t\t\tqueryParams[\"cv\"] = env.versionNumber\n\t\t\t\t}\n\n\t\t\t\tconst origin = options.baseUrl ?? getApiBaseUrl(this.domainConfig)\n\t\t\t\tconst resourceURL = new URL(origin)\n\t\t\t\tresourceURL.pathname = path\n\t\t\t\tconst url = addParamsToUrl(resourceURL, queryParams)\n\t\t\t\tconst xhr = new XMLHttpRequest()\n\t\t\t\txhr.open(method, url.toString())\n\n\t\t\t\tthis.setHeaders(xhr, options)\n\n\t\t\t\txhr.responseType = options.responseType === MediaType.Json || options.responseType === MediaType.Text ? \"text\" : \"arraybuffer\"\n\n\t\t\t\tconst abortAfterTimeout = () => {\n\t\t\t\t\tconst res = {\n\t\t\t\t\t\ttimeoutId: 0 as TimeoutID,\n\t\t\t\t\t\tabortFunction: () => {\n\t\t\t\t\t\t\tif (this.usingTimeoutAbort()) {\n\t\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} aborting ` + String(res.timeoutId))\n\t\t\t\t\t\t\t\txhr.abort()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t\treturn res\n\t\t\t\t}\n\n\t\t\t\tconst t = abortAfterTimeout()\n\t\t\t\tlet timeout = setTimeout(t.abortFunction, env.timeout)\n\t\t\t\tt.timeoutId = timeout\n\n\t\t\t\tif (verbose) {\n\t\t\t\t\tconsole.log(TAG, `${this.id}: set initial timeout ${String(timeout)} of ${env.timeout}`)\n\t\t\t\t}\n\n\t\t\t\txhr.onload = () => {\n\t\t\t\t\t// XMLHttpRequestProgressEvent, but not needed\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} finished request. Clearing Timeout ${String(timeout)}.`)\n\t\t\t\t\t}\n\n\t\t\t\t\tclearTimeout(timeout)\n\n\t\t\t\t\tthis.saveServerTimeOffsetFromRequest(xhr)\n\n\t\t\t\t\tif (xhr.status === 200 || (method === HttpMethod.POST && xhr.status === 201)) {\n\t\t\t\t\t\tif (options.responseType === MediaType.Json || options.responseType === MediaType.Text) {\n\t\t\t\t\t\t\tresolve(xhr.response)\n\t\t\t\t\t\t} else if (options.responseType === MediaType.Binary) {\n\t\t\t\t\t\t\tresolve(new Uint8Array(xhr.response))\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(null)\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst suspensionTime = xhr.getResponseHeader(\"Retry-After\") || xhr.getResponseHeader(\"Suspension-Time\")\n\n\t\t\t\t\t\tif (isSuspensionResponse(xhr.status, suspensionTime) && options.suspensionBehavior === SuspensionBehavior.Throw) {\n\t\t\t\t\t\t\treject(\n\t\t\t\t\t\t\t\tnew SuspensionError(\n\t\t\t\t\t\t\t\t\t`blocked for ${suspensionTime}, not suspending (${xhr.status})`,\n\t\t\t\t\t\t\t\t\tsuspensionTime && (parseInt(suspensionTime) * 1000).toString(),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t} else if (isSuspensionResponse(xhr.status, suspensionTime)) {\n\t\t\t\t\t\t\tthis.suspensionHandler.activateSuspensionIfInactive(Number(suspensionTime), resourceURL)\n\n\t\t\t\t\t\t\tresolve(this.suspensionHandler.deferRequest(() => this.request(path, method, options)))\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlogFailedRequest(method, url, xhr, options)\n\t\t\t\t\t\t\treject(handleRestError(xhr.status, `| ${method} ${path}`, xhr.getResponseHeader(\"Error-Id\"), xhr.getResponseHeader(\"Precondition\")))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\txhr.onerror = function () {\n\t\t\t\t\tclearTimeout(timeout)\n\t\t\t\t\tlogFailedRequest(method, url, xhr, options)\n\t\t\t\t\treject(handleRestError(xhr.status, ` | ${method} ${path}`, xhr.getResponseHeader(\"Error-Id\"), xhr.getResponseHeader(\"Precondition\")))\n\t\t\t\t}\n\n\t\t\t\t// don't add an EventListener for non-CORS requests, otherwise it would not meet the 'CORS-Preflight simple request' requirements\n\t\t\t\tif (!options.noCORS) {\n\t\t\t\t\txhr.upload.onprogress = (pe: ProgressEvent) => {\n\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} upload progress. Clearing Timeout ${String(timeout)}`, pe)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclearTimeout(timeout)\n\t\t\t\t\t\tconst t = abortAfterTimeout()\n\t\t\t\t\t\ttimeout = setTimeout(t.abortFunction, env.timeout)\n\t\t\t\t\t\tt.timeoutId = timeout\n\n\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: set new timeout ${String(timeout)} of ${env.timeout}`)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.progressListener != null && pe.lengthComputable) {\n\t\t\t\t\t\t\t// see https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent\n\t\t\t\t\t\t\toptions.progressListener.upload((1 / pe.total) * pe.loaded)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\txhr.upload.ontimeout = (e) => {\n\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} upload timeout. calling error handler.`, e)\n\t\t\t\t\t\t}\n\t\t\t\t\t\txhr.onerror?.(e)\n\t\t\t\t\t}\n\n\t\t\t\t\txhr.upload.onerror = (e) => {\n\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} upload error. calling error handler.`, e)\n\t\t\t\t\t\t}\n\t\t\t\t\t\txhr.onerror?.(e)\n\t\t\t\t\t}\n\n\t\t\t\t\txhr.upload.onabort = (e) => {\n\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} upload aborted. calling error handler.`, e)\n\t\t\t\t\t\t}\n\t\t\t\t\t\txhr.onerror?.(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\txhr.onprogress = (pe: ProgressEvent) => {\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tconsole.log(TAG, `${this.id}: ${String(new Date())} download progress. Clearing Timeout ${String(timeout)}`, pe)\n\t\t\t\t\t}\n\n\t\t\t\t\tclearTimeout(timeout)\n\t\t\t\t\tlet t = abortAfterTimeout()\n\t\t\t\t\ttimeout = setTimeout(t.abortFunction, env.timeout)\n\t\t\t\t\tt.timeoutId = timeout\n\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tconsole.log(TAG, `${this.id}: set new timeout ${String(timeout)} of ${env.timeout}`)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.progressListener != null && pe.lengthComputable) {\n\t\t\t\t\t\t// see https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent\n\t\t\t\t\t\toptions.progressListener.download((1 / pe.total) * pe.loaded)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\txhr.onabort = () => {\n\t\t\t\t\tclearTimeout(timeout)\n\t\t\t\t\treject(new ConnectionError(`Reached timeout of ${env.timeout}ms ${xhr.statusText} | ${method} ${path}`))\n\t\t\t\t}\n\n\t\t\t\tif (options.body instanceof Uint8Array) {\n\t\t\t\t\txhr.send(uint8ArrayToArrayBuffer(options.body))\n\t\t\t\t} else {\n\t\t\t\t\txhr.send(options.body)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t/** We only need to track timeout directly here on some platforms. Other platforms do it inside their network driver. */\n\tprivate usingTimeoutAbort() {\n\t\treturn isWebClient() || isAndroidApp()\n\t}\n\n\tprivate saveServerTimeOffsetFromRequest(xhr: XMLHttpRequest) {\n\t\t// Dates sent in the `Date` field of HTTP headers follow the format specified by rfc7231\n\t\t// JavaScript's Date expects dates in the format specified by rfc2822\n\t\t// rfc7231 provides three options of formats, the preferred one being IMF-fixdate. This one is definitely\n\t\t// parseable by any rfc2822 compatible parser, since it is a strict subset (with no folding white space) of the\n\t\t// format of rfc5322, which is the same as rfc2822 accepting more folding white spaces.\n\t\t// Furthermore, there is no reason to expect the server to return any of the other two accepted formats, which\n\t\t// are obsolete and accepted only for backwards compatibility.\n\t\tconst serverTimestamp = xhr.getResponseHeader(\"Date\")\n\n\t\tif (serverTimestamp != null) {\n\t\t\t// check that serverTimestamp has been returned\n\t\t\tconst serverTime = new Date(serverTimestamp).getTime()\n\n\t\t\tif (!isNaN(serverTime)) {\n\t\t\t\tconst now = Date.now()\n\t\t\t\tthis.serverTimeOffsetMs = serverTime - now\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the time on the server based on the client time + the server time offset\n\t * The server time offset is calculated based on the date field in the header returned from REST requests.\n\t * will throw an error if offline or no rest requests have been made yet\n\t */\n\tgetServerTimestampMs(): number {\n\t\tconst timeOffset = assertNotNull(this.serverTimeOffsetMs, \"You can't get server time if no rest requests were made\")\n\t\treturn Date.now() + timeOffset\n\t}\n\n\t/**\n\t * Checks if the request body is too large.\n\t * Ignores the method because GET requests etc. should not exceed the limits neither.\n\t * This is done to avoid making the request, because the server will return a PayloadTooLargeError anyway.\n\t * */\n\tprivate checkRequestSizeLimit(path: string, method: HttpMethod, body: string | Uint8Array | null) {\n\t\tif (isAdminClient()) {\n\t\t\treturn\n\t\t}\n\n\t\tconst limit = REQUEST_SIZE_LIMIT_MAP.get(path) ?? REQUEST_SIZE_LIMIT_DEFAULT\n\n\t\tif (body && body.length > limit) {\n\t\t\tthrow new PayloadTooLargeError(`request body is too large. Path: ${path}, Method: ${method}, Body length: ${body.length}`)\n\t\t}\n\t}\n\n\tprivate setHeaders(xhr: XMLHttpRequest, options: RestClientOptions) {\n\t\tif (options.headers == null) {\n\t\t\toptions.headers = {}\n\t\t}\n\t\tconst { headers, body, responseType } = options\n\n\t\t// don't add custom and content-type headers for non-CORS requests, otherwise it would not meet the 'CORS-Preflight simple request' requirements\n\t\tif (!options.noCORS) {\n\t\t\theaders[\"cv\"] = env.versionNumber\n\t\t\tif (body instanceof Uint8Array) {\n\t\t\t\theaders[\"Content-Type\"] = MediaType.Binary\n\t\t\t} else if (typeof body === \"string\") {\n\t\t\t\theaders[\"Content-Type\"] = MediaType.Json\n\t\t\t}\n\t\t}\n\n\t\tif (responseType) {\n\t\t\theaders[\"Accept\"] = responseType\n\t\t}\n\t\tfor (const i in headers) {\n\t\t\txhr.setRequestHeader(i, headers[i])\n\t\t}\n\t}\n}\n\nexport function addParamsToUrl(url: URL, urlParams: Dict): URL {\n\tif (urlParams) {\n\t\tfor (const [key, value] of typedEntries(urlParams)) {\n\t\t\tif (value !== undefined) {\n\t\t\t\turl.searchParams.set(key, value)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn url\n}\n\nexport function isSuspensionResponse(statusCode: number, suspensionTimeNumberString: string | null): boolean {\n\treturn Number(suspensionTimeNumberString) > 0 && (statusCode === TooManyRequestsError.CODE || statusCode === ServiceUnavailableError.CODE)\n}\n\nfunction logFailedRequest(method: HttpMethod, url: URL, xhr: XMLHttpRequest, options: RestClientOptions): void {\n\tconst args: Array<unknown> = [TAG, \"failed request\", method, url.toString(), xhr.status, xhr.statusText]\n\tif (options.headers != null) {\n\t\targs.push(Object.keys(options.headers))\n\t}\n\tif (options.body != null) {\n\t\tconst logBody = \"string\" === typeof options.body ? `[${options.body.length} characters]` : `[${options.body.length} bytes]`\n\t\targs.push(logBody)\n\t} else {\n\t\targs.push(\"no body\")\n\t}\n\tconsole.log(...args)\n}\n"]}