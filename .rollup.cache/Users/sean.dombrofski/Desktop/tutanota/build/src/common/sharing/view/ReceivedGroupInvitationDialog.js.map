{"version":3,"file":"ReceivedGroupInvitationDialog.js","sourceRoot":"","sources":["../../../../../src/common/sharing/view/ReceivedGroupInvitationDialog.ts"],"names":[],"mappings":"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","sourcesContent":["import { createDefaultAlarmInfo, createGroupSettings } from \"../../api/entities/tutanota/TypeRefs.js\"\nimport m, { Children } from \"mithril\"\nimport { lang } from \"../../misc/LanguageViewModel.js\"\nimport { TextField } from \"../../gui/base/TextField.js\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { downcast } from \"@tutao/tutanota-utils\"\nimport { Dialog } from \"../../gui/base/Dialog.js\"\nimport { ReceivedGroupInvitation } from \"../../api/entities/sys/TypeRefs.js\"\nimport { isSameId } from \"../../api/common/utils/EntityUtils.js\"\nimport { sendAcceptNotificationEmail, sendRejectNotificationEmail } from \"../GroupSharingUtils.js\"\nimport { getCapabilityText, getDefaultGroupName, getInvitationGroupType, isTemplateGroup } from \"../GroupUtils.js\"\nimport { showPlanUpgradeRequiredDialog } from \"../../misc/SubscriptionDialogs.js\"\nimport type { GroupSharingTexts } from \"../GroupGuiUtils.js\"\nimport { getTextsForGroupType } from \"../GroupGuiUtils.js\"\nimport { GroupType } from \"../../api/common/TutanotaConstants.js\"\nimport { locator } from \"../../api/main/CommonLocator.js\"\nimport { LoginButton } from \"../../gui/base/buttons/LoginButton.js\"\nimport { AlarmInterval } from \"../../calendar/date/CalendarUtils.js\"\nimport { getMailAddressDisplayText } from \"../../mailFunctionality/SharedMailUtils.js\"\nimport { serializeAlarmInterval } from \"../../api/common/utils/CommonCalendarUtils.js\"\nimport { ColorPickerView } from \"../../gui/base/colorPicker/ColorPickerView\"\n\nexport function showGroupInvitationDialog(invitation: ReceivedGroupInvitation) {\n\tconst groupType = getInvitationGroupType(invitation)\n\tconst texts = getTextsForGroupType(groupType)\n\tconst userSettingsGroupRoot = locator.logins.getUserController().userSettingsGroupRoot\n\tconst existingGroupSettings = userSettingsGroupRoot.groupSettings.find((gc) => gc.group === invitation.sharedGroup)\n\tconst color = existingGroupSettings ? \"#\" + existingGroupSettings.color : \"\"\n\tconst colorStream = stream(color)\n\tconst isDefaultGroupName = invitation.sharedGroupName === getDefaultGroupName(downcast(invitation.groupType))\n\tconst nameStream = stream(isDefaultGroupName ? texts.sharedGroupDefaultCustomName(invitation) : invitation.sharedGroupName)\n\tconst alarmsStream: stream<AlarmInterval[]> = stream([])\n\n\tconst isMember = locator.logins\n\t\t.getUserController()\n\t\t.getCalendarMemberships()\n\t\t.some((ms) => isSameId(ms.group, invitation.sharedGroup))\n\tlet dialog: Dialog\n\n\tconst onAcceptClicked = () => {\n\t\tcheckCanAcceptGroupInvitation(invitation).then((canAccept) => {\n\t\t\tif (canAccept) {\n\t\t\t\tacceptInvite(invitation, texts).then(() => {\n\t\t\t\t\tdialog.close()\n\t\t\t\t\tconst newColor = colorStream().substring(1) // color is stored without #\n\n\t\t\t\t\tconst newName = nameStream()\n\n\t\t\t\t\tif (existingGroupSettings) {\n\t\t\t\t\t\texistingGroupSettings.color = newColor\n\t\t\t\t\t\texistingGroupSettings.name = newName\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst groupSettings = createGroupSettings({\n\t\t\t\t\t\t\tgroup: invitation.sharedGroup,\n\t\t\t\t\t\t\tcolor: newColor,\n\t\t\t\t\t\t\tname: newName,\n\t\t\t\t\t\t\tdefaultAlarmsList: alarmsStream().map((alarm) => createDefaultAlarmInfo({ trigger: serializeAlarmInterval(alarm) })),\n\t\t\t\t\t\t\tsourceUrl: null,\n\t\t\t\t\t\t})\n\t\t\t\t\t\tuserSettingsGroupRoot.groupSettings.push(groupSettings)\n\t\t\t\t\t}\n\n\t\t\t\t\tlocator.entityClient.update(userSettingsGroupRoot)\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\n\tdialog = Dialog.showActionDialog({\n\t\ttitle: \"invitation_label\",\n\t\tchild: {\n\t\t\tview: () =>\n\t\t\t\tm(\".flex.col\", [\n\t\t\t\t\tm(\".mb\", [\n\t\t\t\t\t\tm(\".pt.selectable\", isMember ? lang.getTranslationText(texts.alreadyGroupMemberMessage) : texts.receivedGroupInvitationMessage),\n\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\tvalue: nameStream(),\n\t\t\t\t\t\t\toninput: nameStream,\n\t\t\t\t\t\t\tlabel: texts.groupNameLabel,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\tvalue: getMailAddressDisplayText(invitation.inviterName, invitation.inviterMailAddress, false),\n\t\t\t\t\t\t\tlabel: \"sender_label\",\n\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\tvalue: invitation.inviteeMailAddress,\n\t\t\t\t\t\t\tlabel: \"to_label\",\n\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\tvalue: getCapabilityText(downcast(invitation.capability)),\n\t\t\t\t\t\t\tlabel: \"permissions_label\",\n\t\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tgroupType === GroupType.Calendar ? renderCalendarGroupInvitationFields(invitation, colorStream, alarmsStream) : null,\n\t\t\t\t\t]),\n\t\t\t\t\tisMember\n\t\t\t\t\t\t? null\n\t\t\t\t\t\t: m(LoginButton, {\n\t\t\t\t\t\t\t\tlabel: \"acceptInvitation_action\",\n\t\t\t\t\t\t\t\tonclick: onAcceptClicked,\n\t\t\t\t\t\t  }),\n\t\t\t\t]),\n\t\t},\n\t\tokActionTextId: \"decline_action\",\n\t\tokAction: (dialog: Dialog) => {\n\t\t\tdialog.close()\n\t\t\tdeclineInvite(invitation, texts)\n\t\t},\n\t\tcancelActionTextId: \"close_alt\",\n\t})\n}\n\n/**\n * Checks if the logged-in user is able to accept the group invitation.\n * This is necessary because to be part of some kinds of groups you must have certain features.\n * Currently, there are two kinds of group invitations:\n * 1. Calendar: any paid account can accept invitations\n * 2. Template: only accounts with the templates feature can accept invitations\n * @param invitation\n */\nasync function checkCanAcceptGroupInvitation(invitation: ReceivedGroupInvitation): Promise<boolean> {\n\tconst SubscriptionDialogUtils = await import(\"../../misc/SubscriptionDialogs.js\")\n\tconst allowed = await SubscriptionDialogUtils.checkPaidSubscription()\n\tif (!allowed) {\n\t\treturn false\n\t}\n\tconst planConfig = await locator.logins.getUserController().getPlanConfig()\n\tif (isTemplateGroup(getInvitationGroupType(invitation)) && !planConfig.templates) {\n\t\tconst { getAvailablePlansWithTemplates } = await import(\"../../subscription/SubscriptionUtils.js\")\n\t\tconst plans = await getAvailablePlansWithTemplates()\n\t\treturn showPlanUpgradeRequiredDialog(plans)\n\t} else {\n\t\treturn true\n\t}\n}\n\nfunction renderCalendarGroupInvitationFields(\n\tinvitation: ReceivedGroupInvitation,\n\tselectedColourValue: Stream<string>,\n\talarmsStream: Stream<AlarmInterval[]>,\n): Children {\n\tlet alarms = alarmsStream()\n\treturn [\n\t\tm(\".small.mt.mb-xs\", lang.get(\"color_label\")),\n\t\tm(ColorPickerView, {\n\t\t\tvalue: selectedColourValue(),\n\t\t\tonselect: selectedColourValue,\n\t\t}),\n\t]\n}\n\nfunction acceptInvite(invitation: ReceivedGroupInvitation, texts: GroupSharingTexts): Promise<void> {\n\treturn locator.shareFacade.acceptGroupInvitation(invitation).then(() => {\n\t\tsendAcceptNotificationEmail(invitation, texts)\n\t})\n}\n\nfunction declineInvite(invitation: ReceivedGroupInvitation, texts: GroupSharingTexts): Promise<void> {\n\treturn locator.shareFacade.rejectOrCancelGroupInvitation(invitation._id).then(() => {\n\t\tsendRejectNotificationEmail(invitation, texts)\n\t})\n}\n"]}