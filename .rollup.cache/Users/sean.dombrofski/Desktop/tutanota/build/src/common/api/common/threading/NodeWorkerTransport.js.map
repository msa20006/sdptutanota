{"version":3,"file":"NodeWorkerTransport.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/threading/NodeWorkerTransport.ts"],"names":[],"mappings":"AAIA,8CAA8C;AAC9C,MAAM,OAAO,mBAAmB;IAEF;IAD7B,kHAAkH;IAClH,YAA6B,MAAmD;QAAnD,WAAM,GAAN,MAAM,CAA6C;IAAG,CAAC;IAEpF,WAAW,CAAC,OAAqC;QAChD,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;IACxC,CAAC;IAED,iBAAiB,CAAC,OAA2D;QAC5E,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,EAAgC,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAA;IAC7E,CAAC;CACD","sourcesContent":["import { Message } from \"./MessageDispatcher.js\"\nimport { isMainThread, parentPort, Worker as NodeWorker } from \"node:worker_threads\"\nimport { Transport } from \"./Transport.js\"\n\n/** transport impl for the node main thread */\nexport class NodeWorkerTransport<OutgoingCommandType, IncomingCommandType> implements Transport<OutgoingCommandType, IncomingCommandType> {\n\t/** typed for the main thread that creates the worker and for the thread itself that gets a parentPort instance */\n\tconstructor(private readonly worker: NodeWorker | NonNullable<typeof parentPort>) {}\n\n\tpostMessage(message: Message<OutgoingCommandType>): void {\n\t\treturn this.worker.postMessage(message)\n\t}\n\n\tsetMessageHandler(handler: (message: Message<IncomingCommandType>) => unknown) {\n\t\tthis.worker.on(\"message\", (ev: Message<IncomingCommandType>) => handler(ev))\n\t}\n}\n"]}