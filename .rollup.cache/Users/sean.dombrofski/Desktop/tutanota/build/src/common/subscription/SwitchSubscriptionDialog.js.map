{"version":3,"file":"SwitchSubscriptionDialog.js","sourceRoot":"","sources":["../../../../src/common/subscription/SwitchSubscriptionDialog.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,SAAS,CAAA;AACvB,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAA;AAC3C,OAAO,EAAE,IAAI,EAAoB,MAAM,2BAA2B,CAAA;AAElE,OAAO,EAA2B,gBAAgB,EAAE,6BAA6B,EAAsC,MAAM,iCAAiC,CAAA;AAC9J,OAAO,EACN,WAAW,EAGX,KAAK,EACL,oBAAoB,EAEpB,IAAI,EACJ,WAAW,EACX,gBAAgB,EAChB,iBAAiB,EACjB,QAAQ,EACR,cAAc,GAEd,MAAM,iCAAiC,CAAA;AACxC,OAAO,EAA6B,oBAAoB,EAAE,MAAM,wBAAwB,CAAA;AACxF,OAAO,MAAM,MAAM,gBAAgB,CAAA;AACnC,OAAO,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAA;AAGlE,OAAO,EAAE,6BAA6B,EAAE,MAAM,iCAAiC,CAAA;AAC/E,OAAO,EAAE,OAAO,EAAE,MAAM,2BAA2B,CAAA;AACnD,OAAO,EAAE,wBAAwB,EAAE,MAAM,iCAAiC,CAAA;AAC1E,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAAE,uBAAuB,EAAE,MAAM,kCAAkC,CAAA;AAC7G,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAA;AAC3D,OAAO,EAAmB,sBAAsB,EAAE,MAAM,cAAc,CAAA;AACtE,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,KAAK,EAAE,QAAQ,EAAQ,MAAM,uBAAuB,CAAA;AACnH,OAAO,EAAE,qCAAqC,EAAE,MAAM,wCAAwC,CAAA;AAC9F,OAAO,EAAE,iBAAiB,EAAE,MAAM,8BAA8B,CAAA;AAChE,OAAO,EAAE,oBAAoB,EAAE,MAAM,wCAAwC,CAAA;AAE7E,OAAO,EAAE,2BAA2B,EAAE,MAAM,8BAA8B,CAAA;AAC1E,OAAO,EAAE,qBAAqB,EAAE,MAAM,iCAAiC,CAAA;AACvE,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAA;AAE/C,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAA;AACpE,OAAO,EAAE,gBAAgB,EAAE,8BAA8B,EAAE,MAAM,wBAAwB,CAAA;AACzF,OAAO,EAAE,kBAAkB,EAAE,MAAM,2CAA2C,CAAA;AAC9E,OAAO,EAAE,WAAW,EAAE,MAAM,4BAA4B,CAAA;AACxD,OAAO,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AAClD,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAA;AAEzD;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACrC,QAAkB,EAClB,YAA0B,EAC1B,cAA8B,EAC9B,WAAoB,EACpB,aAAkC,EAClC,MAA+B;IAE/B,IAAI,8BAA8B,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;QACnE,MAAM,+BAA+B,EAAE,CAAA;QACvC,OAAM;IACP,CAAC;IAED,MAAM,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,GAAG,MAAM,kBAAkB,CAC7E,gBAAgB,EAChB,OAAO,CAAC,GAAG,CAAC;QACX,mBAAmB,CAAC,sBAAsB,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC,sBAAsB,EAAE,CAAC;QACnG,sBAAsB,CAAC,sBAAsB,CAAC,IAAI,EAAE,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC;KAClF,CAAC,CACF,CAAA;IACD,MAAM,KAAK,GAAG,IAAI,6BAA6B,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,OAAO,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,WAAW,EAAE,EAAE,WAAW,CAAC,CAAA;IAC9I,MAAM,YAAY,GAAG,GAAG,EAAE;QACzB,MAAM,CAAC,KAAK,EAAE,CAAA;IACf,CAAC,CAAA;IAED,MAAM,cAAc,GAAyB;QAC5C,IAAI,EAAE;YACL;gBACC,KAAK,EAAE,eAAe;gBACtB,KAAK,EAAE,YAAY;gBACnB,IAAI,wCAAsB;aAC1B;SACD;QACD,KAAK,EAAE,EAAE;QACT,MAAM,EAAE,oBAAoB;KAC5B,CAAA;IACD,MAAM,eAAe,GAAG,KAAK,CAAC,eAAe,CAAA;IAC7C,MAAM,WAAW,GAAG,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAA;IACvD,MAAM,eAAe,GAAG,MAAM,iCAAwB,CAAA,CAAC,2BAA2B;IAClF,MAAM,oBAAoB,GAAG,KAAK,CAAC,iCAAiC,EAAE,CAAA;IAEtE,MAAM,MAAM,GAAW,MAAM,CAAC,WAAW,CAAC,cAAc,EAAE;QACzD,IAAI,EAAE,GAAG,EAAE,CACV,CAAC,CACA,KAAK,EACL,CAAC,CAAC,oBAAoB,EAAE;YACvB,OAAO,EAAE;gBACR,WAAW;gBACX,eAAe,EAAE,eAAe;aAChC;YACD,eAAe,EAAE,sBAAsB,CAAC,mBAAmB,EAAE;YAC7D,GAAG,EAAE,MAAM;YACX,QAAQ,EAAE,GAAG;YACb,SAAS,EAAE,GAAG;YACd,aAAa,EAAE,aAAa;YAC5B,eAAe,EAAE,eAAe,CAAC,QAAQ;YACzC,6BAA6B,EAAE,eAAe,CAAC,eAAe,oCAA2B;YACzF,aAAa,EAAE,yBAAyB;YACxC,mBAAmB,EAAE,mBAAmB;YACxC,sBAAsB;YACtB,oBAAoB;SACpB,CAAC,CACF;KACF,CAAC;SACA,WAAW,CAAC;QACZ,GAAG,EAAE,IAAI,CAAC,GAAG;QACb,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,WAAW;KACjB,CAAC;SACD,eAAe,CAAC,YAAY,CAAC,CAAA;IAC/B,MAAM,yBAAyB,GAA8B;QAC5D,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CACrB,CAAC;YACA,KAAK,EAAE,uBAAuB;YAC9B,OAAO,EAAE,GAAG,EAAE,CAAC,cAAc,CAAC,QAAQ,EAAE,MAAM,EAAE,eAAe,CAAC;SACrC,CAAC;QAC9B,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,aAAa,EAAE,eAAe,EAAE,eAAe,EAAE,cAAc,CAAC;QAC5H,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,eAAe,EAAE,eAAe,EAAE,cAAc,CAAC;QAC9G,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,EAAE,eAAe,EAAE,eAAe,EAAE,cAAc,CAAC;QACpH,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,eAAe,EAAE,eAAe,EAAE,cAAc,CAAC;QAClH,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,SAAS,EAAE,eAAe,EAAE,eAAe,EAAE,cAAc,CAAC;KACpH,CAAA;IACD,MAAM,CAAC,IAAI,EAAE,CAAA;IACb,OAAM;AACP,CAAC;AAED,KAAK,UAAU,cAAc,CAAC,QAAkB,EAAE,MAAc,EAAE,eAAgC;IACjG,IAAI,QAAQ,EAAE,EAAE,CAAC;QAChB,2FAA2F;QAC3F,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,oBAAoB,CAAC,kCAAkC,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;QAC5I,IAAI,SAAS,uDAA6C,IAAI,CAAC,MAAM,OAAO,CAAC,oBAAoB,CAAC,wBAAwB,EAAE,CAAC,EAAE,CAAC;YAC/H,MAAM,OAAO,CAAC,oBAAoB,CAAC,0BAA0B,EAAE,CAAA;YAE/D,MAAM,kBAAkB,CAAC,gBAAgB,EAAE,wBAAwB,EAAE,CAAC,CAAA;YAEtE,IAAI,MAAM,OAAO,CAAC,oBAAoB,CAAC,wBAAwB,EAAE,EAAE,CAAC;gBACnE,OAAO,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAA;gBACrE,0DAA0D;gBAC1D,OAAM;YACP,CAAC;QACF,CAAC;IACF,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,2BAA2B,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;IAC5D,MAAM,IAAI,GACT,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,MAAM;QACnD,CAAC,CAAC,gBAAgB,CAAC;YACjB,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,OAAO,EAAE,qBAAqB;SAC7B,CAAC;QACJ,CAAC,CAAC,IAAI,CAAA;IACR,MAAM,WAAW,GAAG,MAAM,kBAAkB,CAAC,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAA;IAErF,IAAI,WAAW,KAAK,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,KAAK,MAAM,eAAe,IAAI,WAAW,CAAC,SAAS,CAAC,mBAAmB,EAAE;YAAE,WAAW,CAAC,SAAS,CAAC,6BAA6B,CAAC,eAAe,CAAC,CAAA;IAChJ,CAAC;AACF,CAAC;AAED,KAAK,UAAU,wBAAwB;IACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC5B,0DAA0D;QAC1D,MAAM,KAAK,CAAC,IAAI,CAAC,CAAA;QACjB,IAAI,CAAC,CAAC,MAAM,OAAO,CAAC,oBAAoB,CAAC,wBAAwB,EAAE,CAAC,EAAE,CAAC;YACtE,OAAM;QACP,CAAC;IACF,CAAC;AACF,CAAC;AAED,KAAK,UAAU,kBAAkB,CAChC,cAA8B,EAC9B,kBAAmC,EACnC,kBAA4B,EAC5B,MAAc,EACd,eAAgC;IAEhC,IAAI,QAAQ,EAAE,IAAI,oBAAoB,CAAC,cAAc,CAAC,KAAK,iBAAiB,CAAC,QAAQ,EAAE,CAAC;QACvF,MAAM,eAAe,GAAG,kBAAkB,CAAC,iBAAiB,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;QAC9H,MAAM,CAAC,KAAK,EAAE,CAAA;QACd,IAAI,CAAC;YACJ,MAAM,OAAO,CAAC,oBAAoB,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,EAAE,kBAAkB,EAAE,eAAe,CAAC,CAAA;QACxI,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,IAAI,CAAC,YAAY,kBAAkB,EAAE,CAAC;gBACrC,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,CAAC,CAAC,CAAA;gBAChD,MAAM,CAAC,OAAO,CAAC,+BAA+B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAA;YAC3D,CAAC;iBAAM,CAAC;gBACP,MAAM,CAAC,CAAA;YACR,CAAC;QACF,CAAC;IACF,CAAC;SAAM,CAAC;QACP,IAAI,eAAe,CAAC,eAAe,KAAK,kBAAkB,EAAE,CAAC;YAC5D,MAAM,OAAO,CAAC,cAAc,CAAC,qBAAqB,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAA;QACvF,CAAC;QACD,MAAM,kBAAkB,CAAC,kBAAkB,EAAE,MAAM,EAAE,eAAe,CAAC,CAAA;IACtE,CAAC;AACF,CAAC;AAED,SAAS,gBAAgB,CACxB,MAAc,EACd,kBAA4B,EAC5B,eAAgC,EAChC,kBAA2C,EAC3C,cAA8B;IAE9B,OAAO,GAAG,EAAE,CAAC,CAAC;QACb,KAAK,EAAE,YAAY;QACnB,OAAO,EAAE,KAAK,IAAI,EAAE;YACnB,yHAAyH;YACzH,IACC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC;gBAC9C,CAAC,CAAC,MAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,EAAE,QAAQ,EAAE,cAAc,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC,EAChH,CAAC;gBACF,OAAM;YACP,CAAC;YACD,MAAM,kBAAkB,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,cAAc,EAAE,kBAAkB,EAAE,EAAE,kBAAkB,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC,CAAA;QAClJ,CAAC;KACD,CAAC,CAAA;AACH,CAAC;AAED,SAAS,qCAAqC,CAAC,CAA0B;IACxE,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI,CAAA;IAErB,IAAI,MAAM,IAAI,IAAI,EAAE,CAAC;QACpB,OAAO,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;IAC1C,CAAC;SAAM,CAAC;QACP,IAAI,SAAiB,CAAA;QAErB,QAAQ,MAAM,EAAE,CAAC;YAChB;gBACC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAA;gBAC3D,MAAK;YAEN;gBACC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAA;gBAC1D,MAAK;YAEN;gBACC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAA;gBAC1D,MAAK;YAEN;gBACC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAA;gBACvD,MAAK;YAEN,oFAA+C;YAC/C;gBACC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAA;gBAChD,MAAK;YAEN,yFAAoD;YACpD;gBACC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAA;gBAChE,MAAK;YAEN,oFAA+C;YAC/C;gBACC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAA;gBAChD,MAAK;YAEN,wFAAiD;YACjD;gBACC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAA;gBAChD,MAAK;YAEN,oGAAuD;YACvD;gBACC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAA;gBACpD,MAAK;YAEN;gBACC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAA;gBAC/C,MAAK;YAEN;gBACC,OAAO,MAAM,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAA;YAEtD;gBACC,OAAO,MAAM,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAA;YAElD;gBACC,IAAI,QAAQ,EAAE,EAAE,CAAC;oBAChB,OAAO,OAAO,CAAC,oBAAoB,CAAC,0BAA0B,EAAE,CAAA;gBACjE,CAAC;qBAAM,CAAC;oBACP,OAAO,+BAA+B,EAAE,CAAA;gBACzC,CAAC;YAEF;gBACC,OAAO,MAAM,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAA;YAChD;gBACC,MAAM,CAAC,CAAA;QACT,CAAC;QAED,OAAO,MAAM,CAAC,OAAO,CACpB,IAAI,CAAC,cAAc,CAAC,8BAA8B,EAAE;YACnD,aAAa,EAAE,SAAS;SACxB,CAAC,CACF,CAAA;IACF,CAAC;AACF,CAAC;AAED;;;;;GAKG;AACH,KAAK,UAAU,yBAAyB,CAAC,QAAkB,EAAE,eAAgC,EAAE,UAA6B;IAC3H,MAAM,qBAAqB,GAAG,6BAA6B,CAAC;QAC3D,WAAW,EAAE,WAAW,CAAC,IAAI;QAC7B,IAAI,EAAE,KAAK,CAAC,YAAY;QACxB,QAAQ,EAAE,QAAQ,CAAC,GAAG;QACtB,sBAAsB,EAAE,IAAI;QAC5B,YAAY,EAAE,IAAI;QAClB,IAAI,EAAE,QAAQ,CAAC,IAAI;QACnB,UAAU,EAAE,UAAU;QACtB,GAAG,EAAE,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI;KAC7E,CAAC,CAAA;IACF,IAAI,CAAC;QACJ,MAAM,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,wBAAwB,EAAE,qBAAqB,CAAC,CAAA;QACnF,MAAM,OAAO,CAAC,cAAc,CAAC,wBAAwB,EAAE,CAAA;QACvD,OAAO,QAAQ,CAAC,IAAI,CAAA;IACrB,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACZ,IAAI,CAAC,YAAY,uBAAuB,EAAE,CAAC;YAC1C,MAAM,qCAAqC,CAAC,CAAC,CAAC,CAAA;QAC/C,CAAC;aAAM,IAAI,CAAC,YAAY,gBAAgB,EAAE,CAAC;YAC1C,MAAM,MAAM,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAA;QAC5D,CAAC;aAAM,IAAI,CAAC,YAAY,eAAe,EAAE,CAAC;YACzC,MAAM,MAAM,CAAC,OAAO,CAAC,4CAA4C,CAAC,CAAA;QACnE,CAAC;aAAM,CAAC;YACP,MAAM,CAAC,CAAA;QACR,CAAC;QACD,OAAO,eAAe,CAAC,QAAQ,CAAA;IAChC,CAAC;AACF,CAAC;AAED,KAAK,UAAU,kBAAkB,CAChC,MAAc,EACd,eAAgC,EAChC,QAAkB,EAClB,aAAgC,IAAI;IAEpC,MAAM,yBAAyB,GAAG,MAAM,CAAC,OAAO,CAAC,wBAAwB,EAAE,WAAW,EAAE,GAAG,EAAE;QAC5F,OAAO,CAAC,CACP,KAAK,EACL,CAAC,CAAC,8BAA8B,EAAE;YACjC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;YACrD,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;YAC3D,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;SACrD,CAAC,CACF,CAAA;IACF,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,CAAC,MAAM,yBAAyB,CAAC,EAAE,CAAC;QACxC,OAAO,eAAe,CAAC,QAAQ,CAAA;IAChC,CAAC;IAED,IAAI,CAAC;QACJ,OAAO,MAAM,kBAAkB,CAAC,gBAAgB,EAAE,yBAAyB,CAAC,QAAQ,EAAE,eAAe,EAAE,UAAU,CAAC,CAAC,CAAA;IACpH,CAAC;YAAS,CAAC;QACV,MAAM,CAAC,KAAK,EAAE,CAAA;IACf,CAAC;AACF,CAAC;AAED,KAAK,UAAU,kBAAkB,CAAC,kBAA4B,EAAE,MAAc,EAAE,eAAgC;IAC/G,IAAI,kBAAkB,KAAK,eAAe,CAAC,QAAQ,EAAE,CAAC;QACrD,OAAO,eAAe,CAAC,QAAQ,CAAA;IAChC,CAAC;IAED,MAAM,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAA;IACzD,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,YAAY,EAAE,CAAA;IACpD,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC;QACtF,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,kBAAkB,EAAE,CAAA;QAChE,MAAM,WAAW,GAAgB;YAChC,cAAc,EAAE,oBAAoB,CAAC,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,cAAc,CAAC;YAC/F,OAAO,EAAE,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,iBAAiB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI;YAChG,SAAS,EAAE,cAAc,CAAC,cAAc,EAAE,wCAAwC;SAClF,CAAA;QACD,MAAM,kBAAkB,GAAG,MAAM,qCAAqC,CAAC,QAAQ,EAAE,WAAW,EAAE,cAAc,CAAC,CAAA;QAC7G,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACzB,OAAO,eAAe,CAAC,QAAQ,CAAA;QAChC,CAAC;IACF,CAAC;IAED,IAAI,CAAC;QACJ,MAAM,MAAM,GAAG,6BAA6B,CAAC;YAC5C,WAAW,EAAE,WAAW,CAAC,IAAI;YAC7B,IAAI,EAAE,kBAAkB;YACxB,IAAI,EAAE,KAAK,CAAC,YAAY;YACxB,YAAY,EAAE,IAAI;YAClB,QAAQ,EAAE,QAAQ,CAAC,GAAG;YACtB,sBAAsB,EAAE,IAAI;YAC5B,UAAU,EAAE,IAAI;YAChB,GAAG,EAAE,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI;SAC7E,CAAC,CAAA;QAEF,IAAI,CAAC;YACJ,MAAM,kBAAkB,CAAC,gBAAgB,EAAE,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAC,CAAA;YAC1G,OAAO,kBAAkB,CAAA;QAC1B,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,IAAI,CAAC,YAAY,uBAAuB,EAAE,CAAC;gBAC1C,MAAM,qCAAqC,CAAC,CAAC,CAAC,CAAA;gBAE9C,OAAO,eAAe,CAAC,QAAQ,CAAA;YAChC,CAAC;YACD,MAAM,CAAC,CAAA;QACR,CAAC;IACF,CAAC;YAAS,CAAC;QACV,MAAM,CAAC,KAAK,EAAE,CAAA;IACf,CAAC;AACF,CAAC","sourcesContent":["import m from \"mithril\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport { lang, MaybeTranslation } from \"../misc/LanguageViewModel\"\nimport { ButtonType } from \"../gui/base/Button.js\"\nimport { AccountingInfo, Booking, createSurveyData, createSwitchAccountTypePostIn, Customer, CustomerInfo, SurveyData } from \"../api/entities/sys/TypeRefs.js\"\nimport {\n\tAccountType,\n\tAvailablePlanType,\n\tBookingFailureReason,\n\tConst,\n\tgetPaymentMethodType,\n\tInvoiceData,\n\tKeys,\n\tLegacyPlans,\n\tNewBusinessPlans,\n\tPaymentMethodType,\n\tPlanType,\n\tPlanTypeToName,\n\tUnsubscribeFailureReason,\n} from \"../api/common/TutanotaConstants\"\nimport { SubscriptionActionButtons, SubscriptionSelector } from \"./SubscriptionSelector\"\nimport stream from \"mithril/stream\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport { DialogHeaderBarAttrs } from \"../gui/base/DialogHeaderBar\"\nimport type { CurrentPlanInfo } from \"./SwitchSubscriptionDialogModel\"\nimport { SwitchSubscriptionDialogModel } from \"./SwitchSubscriptionDialogModel\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { SwitchAccountTypeService } from \"../api/entities/sys/Services.js\"\nimport { BadRequestError, InvalidDataError, PreconditionFailedError } from \"../api/common/error/RestError.js\"\nimport { FeatureListProvider } from \"./FeatureListProvider\"\nimport { PaymentInterval, PriceAndConfigProvider } from \"./PriceUtils\"\nimport { assertNotNull, base64ExtToBase64, base64ToUint8Array, delay, downcast, lazy } from \"@tutao/tutanota-utils\"\nimport { showSwitchToBusinessInvoiceDataDialog } from \"./SwitchToBusinessInvoiceDataDialog.js\"\nimport { getByAbbreviation } from \"../api/common/CountryList.js\"\nimport { formatNameAndAddress } from \"../api/common/utils/CommonFormatter.js\"\nimport { LoginButtonAttrs } from \"../gui/base/buttons/LoginButton.js\"\nimport { showLeavingUserSurveyWizard } from \"./LeavingUserSurveyWizard.js\"\nimport { SURVEY_VERSION_NUMBER } from \"./LeavingUserSurveyConstants.js\"\nimport { isIOSApp } from \"../api/common/Env.js\"\nimport { MobilePaymentSubscriptionOwnership } from \"../native/common/generatedipc/MobilePaymentSubscriptionOwnership.js\"\nimport { showManageThroughAppStoreDialog } from \"./PaymentViewer.js\"\nimport { appStorePlanName, hasRunningAppStoreSubscription } from \"./SubscriptionUtils.js\"\nimport { MobilePaymentError } from \"../api/common/error/MobilePaymentError.js\"\nimport { mailLocator } from \"../../mail-app/mailLocator\"\nimport { client } from \"../misc/ClientDetector.js\"\nimport { SubscriptionApp } from \"./SubscriptionViewer.js\"\n\n/**\n * Allows cancelling the subscription (only private use) and switching the subscription to a different paid subscription.\n * Note: Only shown if the user is already a Premium user.\n */\nexport async function showSwitchDialog(\n\tcustomer: Customer,\n\tcustomerInfo: CustomerInfo,\n\taccountingInfo: AccountingInfo,\n\tlastBooking: Booking,\n\tacceptedPlans: AvailablePlanType[],\n\treason: MaybeTranslation | null,\n): Promise<void> {\n\tif (hasRunningAppStoreSubscription(accountingInfo) && !isIOSApp()) {\n\t\tawait showManageThroughAppStoreDialog()\n\t\treturn\n\t}\n\n\tconst [featureListProvider, priceAndConfigProvider] = await showProgressDialog(\n\t\t\"pleaseWait_msg\",\n\t\tPromise.all([\n\t\t\tFeatureListProvider.getInitializedInstance(locator.domainConfigProvider().getCurrentDomainConfig()),\n\t\t\tPriceAndConfigProvider.getInitializedInstance(null, locator.serviceExecutor, null),\n\t\t]),\n\t)\n\tconst model = new SwitchSubscriptionDialogModel(customer, accountingInfo, await locator.logins.getUserController().getPlanType(), lastBooking)\n\tconst cancelAction = () => {\n\t\tdialog.close()\n\t}\n\n\tconst headerBarAttrs: DialogHeaderBarAttrs = {\n\t\tleft: [\n\t\t\t{\n\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\tclick: cancelAction,\n\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t},\n\t\t],\n\t\tright: [],\n\t\tmiddle: \"subscription_label\",\n\t}\n\tconst currentPlanInfo = model.currentPlanInfo\n\tconst businessUse = stream(currentPlanInfo.businessUse)\n\tconst paymentInterval = stream(PaymentInterval.Yearly) // always default to yearly\n\tconst multipleUsersAllowed = model.multipleUsersStillSupportedLegacy()\n\n\tconst dialog: Dialog = Dialog.largeDialog(headerBarAttrs, {\n\t\tview: () =>\n\t\t\tm(\n\t\t\t\t\".pt\",\n\t\t\t\tm(SubscriptionSelector, {\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tbusinessUse,\n\t\t\t\t\t\tpaymentInterval: paymentInterval,\n\t\t\t\t\t},\n\t\t\t\t\tpriceInfoTextId: priceAndConfigProvider.getPriceInfoMessage(),\n\t\t\t\t\tmsg: reason,\n\t\t\t\t\tboxWidth: 230,\n\t\t\t\t\tboxHeight: 270,\n\t\t\t\t\tacceptedPlans: acceptedPlans,\n\t\t\t\t\tcurrentPlanType: currentPlanInfo.planType,\n\t\t\t\t\tallowSwitchingPaymentInterval: currentPlanInfo.paymentInterval !== PaymentInterval.Yearly,\n\t\t\t\t\tactionButtons: subscriptionActionButtons,\n\t\t\t\t\tfeatureListProvider: featureListProvider,\n\t\t\t\t\tpriceAndConfigProvider,\n\t\t\t\t\tmultipleUsersAllowed,\n\t\t\t\t}),\n\t\t\t),\n\t})\n\t\t.addShortcut({\n\t\t\tkey: Keys.ESC,\n\t\t\texec: cancelAction,\n\t\t\thelp: \"close_alt\",\n\t\t})\n\t\t.setCloseHandler(cancelAction)\n\tconst subscriptionActionButtons: SubscriptionActionButtons = {\n\t\t[PlanType.Free]: () =>\n\t\t\t({\n\t\t\t\tlabel: \"pricing.select_action\",\n\t\t\t\tonclick: () => onSwitchToFree(customer, dialog, currentPlanInfo),\n\t\t\t} satisfies LoginButtonAttrs),\n\t\t[PlanType.Revolutionary]: createPlanButton(dialog, PlanType.Revolutionary, currentPlanInfo, paymentInterval, accountingInfo),\n\t\t[PlanType.Legend]: createPlanButton(dialog, PlanType.Legend, currentPlanInfo, paymentInterval, accountingInfo),\n\t\t[PlanType.Essential]: createPlanButton(dialog, PlanType.Essential, currentPlanInfo, paymentInterval, accountingInfo),\n\t\t[PlanType.Advanced]: createPlanButton(dialog, PlanType.Advanced, currentPlanInfo, paymentInterval, accountingInfo),\n\t\t[PlanType.Unlimited]: createPlanButton(dialog, PlanType.Unlimited, currentPlanInfo, paymentInterval, accountingInfo),\n\t}\n\tdialog.show()\n\treturn\n}\n\nasync function onSwitchToFree(customer: Customer, dialog: Dialog, currentPlanInfo: CurrentPlanInfo) {\n\tif (isIOSApp()) {\n\t\t// We want the user to disable renewal in AppStore before they try to downgrade on our side\n\t\tconst ownership = await locator.mobilePaymentsFacade.queryAppStoreSubscriptionOwnership(base64ToUint8Array(base64ExtToBase64(customer._id)))\n\t\tif (ownership === MobilePaymentSubscriptionOwnership.Owner && (await locator.mobilePaymentsFacade.isAppStoreRenewalEnabled())) {\n\t\t\tawait locator.mobilePaymentsFacade.showSubscriptionConfigView()\n\n\t\t\tawait showProgressDialog(\"pleaseWait_msg\", waitUntilRenewalDisabled())\n\n\t\t\tif (await locator.mobilePaymentsFacade.isAppStoreRenewalEnabled()) {\n\t\t\t\tconsole.log(\"AppStore renewal is still enabled, canceling downgrade\")\n\t\t\t\t// User probably did not disable the renewal still, cancel\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\n\tconst reason = await showLeavingUserSurveyWizard(true, true)\n\tconst data =\n\t\treason.submitted && reason.category && reason.reason\n\t\t\t? createSurveyData({\n\t\t\t\t\tcategory: reason.category,\n\t\t\t\t\treason: reason.reason,\n\t\t\t\t\tdetails: reason.details,\n\t\t\t\t\tversion: SURVEY_VERSION_NUMBER,\n\t\t\t  })\n\t\t\t: null\n\tconst newPlanType = await cancelSubscription(dialog, currentPlanInfo, customer, data)\n\n\tif (newPlanType === PlanType.Free) {\n\t\tfor (const importedMailSet of mailLocator.mailModel.getImportedMailSets()) mailLocator.mailModel.finallyDeleteCustomMailFolder(importedMailSet)\n\t}\n}\n\nasync function waitUntilRenewalDisabled() {\n\tfor (let i = 0; i < 3; i++) {\n\t\t// Wait a bit before checking, it takes a bit to propagate\n\t\tawait delay(2000)\n\t\tif (!(await locator.mobilePaymentsFacade.isAppStoreRenewalEnabled())) {\n\t\t\treturn\n\t\t}\n\t}\n}\n\nasync function doSwitchToPaidPlan(\n\taccountingInfo: AccountingInfo,\n\tnewPaymentInterval: PaymentInterval,\n\ttargetSubscription: PlanType,\n\tdialog: Dialog,\n\tcurrentPlanInfo: CurrentPlanInfo,\n) {\n\tif (isIOSApp() && getPaymentMethodType(accountingInfo) === PaymentMethodType.AppStore) {\n\t\tconst customerIdBytes = base64ToUint8Array(base64ExtToBase64(assertNotNull(locator.logins.getUserController().user.customer)))\n\t\tdialog.close()\n\t\ttry {\n\t\t\tawait locator.mobilePaymentsFacade.requestSubscriptionToPlan(appStorePlanName(targetSubscription), newPaymentInterval, customerIdBytes)\n\t\t} catch (e) {\n\t\t\tif (e instanceof MobilePaymentError) {\n\t\t\t\tconsole.error(\"AppStore subscription failed\", e)\n\t\t\t\tDialog.message(\"appStoreSubscriptionError_msg\", e.message)\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (currentPlanInfo.paymentInterval !== newPaymentInterval) {\n\t\t\tawait locator.customerFacade.changePaymentInterval(accountingInfo, newPaymentInterval)\n\t\t}\n\t\tawait switchSubscription(targetSubscription, dialog, currentPlanInfo)\n\t}\n}\n\nfunction createPlanButton(\n\tdialog: Dialog,\n\ttargetSubscription: PlanType,\n\tcurrentPlanInfo: CurrentPlanInfo,\n\tnewPaymentInterval: stream<PaymentInterval>,\n\taccountingInfo: AccountingInfo,\n): lazy<LoginButtonAttrs> {\n\treturn () => ({\n\t\tlabel: \"buy_action\",\n\t\tonclick: async () => {\n\t\t\t// Show an extra dialog in the case that someone is upgrading from a legacy plan to a new plan because they can't revert.\n\t\t\tif (\n\t\t\t\tLegacyPlans.includes(currentPlanInfo.planType) &&\n\t\t\t\t!(await Dialog.confirm(lang.getTranslation(\"upgradePlan_msg\", { \"{plan}\": PlanTypeToName[targetSubscription] })))\n\t\t\t) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tawait showProgressDialog(\"pleaseWait_msg\", doSwitchToPaidPlan(accountingInfo, newPaymentInterval(), targetSubscription, dialog, currentPlanInfo))\n\t\t},\n\t})\n}\n\nfunction handleSwitchAccountPreconditionFailed(e: PreconditionFailedError): Promise<void> {\n\tconst reason = e.data\n\n\tif (reason == null) {\n\t\treturn Dialog.message(\"unknownError_msg\")\n\t} else {\n\t\tlet detailMsg: string\n\n\t\tswitch (reason) {\n\t\t\tcase UnsubscribeFailureReason.TOO_MANY_ENABLED_USERS:\n\t\t\t\tdetailMsg = lang.get(\"accountSwitchTooManyActiveUsers_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.CUSTOM_MAIL_ADDRESS:\n\t\t\t\tdetailMsg = lang.get(\"accountSwitchCustomMailAddress_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.TOO_MANY_CALENDARS:\n\t\t\t\tdetailMsg = lang.get(\"accountSwitchMultipleCalendars_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.CALENDAR_TYPE:\n\t\t\t\tdetailMsg = lang.get(\"accountSwitchSharedCalendar_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.TOO_MANY_ALIASES:\n\t\t\tcase BookingFailureReason.TOO_MANY_ALIASES:\n\t\t\t\tdetailMsg = lang.get(\"accountSwitchAliases_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.TOO_MUCH_STORAGE_USED:\n\t\t\tcase BookingFailureReason.TOO_MUCH_STORAGE_USED:\n\t\t\t\tdetailMsg = lang.get(\"storageCapacityTooManyUsedForBooking_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.TOO_MANY_DOMAINS:\n\t\t\tcase BookingFailureReason.TOO_MANY_DOMAINS:\n\t\t\t\tdetailMsg = lang.get(\"tooManyCustomDomains_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.HAS_TEMPLATE_GROUP:\n\t\t\tcase BookingFailureReason.HAS_TEMPLATE_GROUP:\n\t\t\t\tdetailMsg = lang.get(\"deleteTemplateGroups_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.WHITELABEL_DOMAIN_ACTIVE:\n\t\t\tcase BookingFailureReason.WHITELABEL_DOMAIN_ACTIVE:\n\t\t\t\tdetailMsg = lang.get(\"whitelabelDomainExisting_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.HAS_CONTACT_LIST_GROUP:\n\t\t\t\tdetailMsg = lang.get(\"contactListExisting_msg\")\n\t\t\t\tbreak\n\n\t\t\tcase UnsubscribeFailureReason.NOT_ENOUGH_CREDIT:\n\t\t\t\treturn Dialog.message(\"insufficientBalanceError_msg\")\n\n\t\t\tcase UnsubscribeFailureReason.INVOICE_NOT_PAID:\n\t\t\t\treturn Dialog.message(\"invoiceNotPaidSwitch_msg\")\n\n\t\t\tcase UnsubscribeFailureReason.ACTIVE_APPSTORE_SUBSCRIPTION:\n\t\t\t\tif (isIOSApp()) {\n\t\t\t\t\treturn locator.mobilePaymentsFacade.showSubscriptionConfigView()\n\t\t\t\t} else {\n\t\t\t\t\treturn showManageThroughAppStoreDialog()\n\t\t\t\t}\n\n\t\t\tcase UnsubscribeFailureReason.LABEL_LIMIT_EXCEEDED:\n\t\t\t\treturn Dialog.message(\"labelLimitExceeded_msg\")\n\t\t\tdefault:\n\t\t\t\tthrow e\n\t\t}\n\n\t\treturn Dialog.message(\n\t\t\tlang.getTranslation(\"accountSwitchNotPossible_msg\", {\n\t\t\t\t\"{detailMsg}\": detailMsg,\n\t\t\t}),\n\t\t)\n\t}\n}\n\n/**\n * @param customer\n * @param currentPlanInfo\n * @param surveyData\n * @returns the new plan type after the attempt.\n */\nasync function tryDowngradePremiumToFree(customer: Customer, currentPlanInfo: CurrentPlanInfo, surveyData: SurveyData | null): Promise<PlanType> {\n\tconst switchAccountTypeData = createSwitchAccountTypePostIn({\n\t\taccountType: AccountType.FREE,\n\t\tdate: Const.CURRENT_DATE,\n\t\tcustomer: customer._id,\n\t\tspecialPriceUserSingle: null,\n\t\treferralCode: null,\n\t\tplan: PlanType.Free,\n\t\tsurveyData: surveyData,\n\t\tapp: client.isCalendarApp() ? SubscriptionApp.Calendar : SubscriptionApp.Mail,\n\t})\n\ttry {\n\t\tawait locator.serviceExecutor.post(SwitchAccountTypeService, switchAccountTypeData)\n\t\tawait locator.customerFacade.switchPremiumToFreeGroup()\n\t\treturn PlanType.Free\n\t} catch (e) {\n\t\tif (e instanceof PreconditionFailedError) {\n\t\t\tawait handleSwitchAccountPreconditionFailed(e)\n\t\t} else if (e instanceof InvalidDataError) {\n\t\t\tawait Dialog.message(\"accountSwitchTooManyActiveUsers_msg\")\n\t\t} else if (e instanceof BadRequestError) {\n\t\t\tawait Dialog.message(\"deactivatePremiumWithCustomDomainError_msg\")\n\t\t} else {\n\t\t\tthrow e\n\t\t}\n\t\treturn currentPlanInfo.planType\n\t}\n}\n\nasync function cancelSubscription(\n\tdialog: Dialog,\n\tcurrentPlanInfo: CurrentPlanInfo,\n\tcustomer: Customer,\n\tsurveyData: SurveyData | null = null,\n): Promise<PlanType> {\n\tconst confirmCancelSubscription = Dialog.confirm(\"unsubscribeConfirm_msg\", \"ok_action\", () => {\n\t\treturn m(\n\t\t\t\".pt\",\n\t\t\tm(\"ul.usage-test-opt-in-bullets\", [\n\t\t\t\tm(\"li\", lang.get(\"importedMailsWillBeDeleted_label\")),\n\t\t\t\tm(\"li\", lang.get(\"accountWillBeDeactivatedIn6Month_label\")),\n\t\t\t\tm(\"li\", lang.get(\"accountWillHaveLessStorage_label\")),\n\t\t\t]),\n\t\t)\n\t})\n\n\tif (!(await confirmCancelSubscription)) {\n\t\treturn currentPlanInfo.planType\n\t}\n\n\ttry {\n\t\treturn await showProgressDialog(\"pleaseWait_msg\", tryDowngradePremiumToFree(customer, currentPlanInfo, surveyData))\n\t} finally {\n\t\tdialog.close()\n\t}\n}\n\nasync function switchSubscription(targetSubscription: PlanType, dialog: Dialog, currentPlanInfo: CurrentPlanInfo): Promise<PlanType> {\n\tif (targetSubscription === currentPlanInfo.planType) {\n\t\treturn currentPlanInfo.planType\n\t}\n\n\tconst userController = locator.logins.getUserController()\n\tconst customer = await userController.loadCustomer()\n\tif (!customer.businessUse && NewBusinessPlans.includes(downcast(targetSubscription))) {\n\t\tconst accountingInfo = await userController.loadAccountingInfo()\n\t\tconst invoiceData: InvoiceData = {\n\t\t\tinvoiceAddress: formatNameAndAddress(accountingInfo.invoiceName, accountingInfo.invoiceAddress),\n\t\t\tcountry: accountingInfo.invoiceCountry ? getByAbbreviation(accountingInfo.invoiceCountry) : null,\n\t\t\tvatNumber: accountingInfo.invoiceVatIdNo, // only for EU countries otherwise empty\n\t\t}\n\t\tconst updatedInvoiceData = await showSwitchToBusinessInvoiceDataDialog(customer, invoiceData, accountingInfo)\n\t\tif (!updatedInvoiceData) {\n\t\t\treturn currentPlanInfo.planType\n\t\t}\n\t}\n\n\ttry {\n\t\tconst postIn = createSwitchAccountTypePostIn({\n\t\t\taccountType: AccountType.PAID,\n\t\t\tplan: targetSubscription,\n\t\t\tdate: Const.CURRENT_DATE,\n\t\t\treferralCode: null,\n\t\t\tcustomer: customer._id,\n\t\t\tspecialPriceUserSingle: null,\n\t\t\tsurveyData: null,\n\t\t\tapp: client.isCalendarApp() ? SubscriptionApp.Calendar : SubscriptionApp.Mail,\n\t\t})\n\n\t\ttry {\n\t\t\tawait showProgressDialog(\"pleaseWait_msg\", locator.serviceExecutor.post(SwitchAccountTypeService, postIn))\n\t\t\treturn targetSubscription\n\t\t} catch (e) {\n\t\t\tif (e instanceof PreconditionFailedError) {\n\t\t\t\tawait handleSwitchAccountPreconditionFailed(e)\n\n\t\t\t\treturn currentPlanInfo.planType\n\t\t\t}\n\t\t\tthrow e\n\t\t}\n\t} finally {\n\t\tdialog.close()\n\t}\n}\n"]}