{"version":3,"file":"WhitelabelBrandingDomainSettings.js","sourceRoot":"","sources":["../../../../../src/common/settings/whitelabel/WhitelabelBrandingDomainSettings.ts"],"names":[],"mappings":"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","sourcesContent":["import { TextField } from \"../../gui/base/TextField.js\"\nimport { Dialog } from \"../../gui/base/Dialog\"\nimport { showProgressDialog } from \"../../gui/dialogs/ProgressDialog\"\nimport { neverNull } from \"@tutao/tutanota-utils\"\nimport { PreconditionFailedError } from \"../../api/common/error/RestError\"\nimport { Icons } from \"../../gui/base/icons/Icons\"\nimport { showNotAvailableForFreeDialog, showPlanUpgradeRequiredDialog } from \"../../misc/SubscriptionDialogs\"\nimport * as SetCustomDomainCertificateDialog from \"../SetDomainCertificateDialog.js\"\nimport { lang } from \"../../misc/LanguageViewModel\"\nimport m, { Children, Component, Vnode } from \"mithril\"\nimport type { CertificateInfo, CustomerInfo } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { CertificateState, CertificateType, PlanType } from \"../../../common/api/common/TutanotaConstants\"\nimport { formatDateTime } from \"../../../common/misc/Formatter\"\nimport { locator } from \"../../../common/api/main/CommonLocator\"\nimport { IconButton } from \"../../../common/gui/base/IconButton.js\"\nimport { ButtonSize } from \"../../../common/gui/base/ButtonSize.js\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError.js\"\nimport { getAvailablePlansWithWhitelabel } from \"../../../common/subscription/SubscriptionUtils.js\"\n\nexport type WhitelabelBrandingDomainSettingsAttrs = {\n\tcustomerInfo: CustomerInfo\n\tisWhitelabelFeatureEnabled: boolean\n\tcertificateInfo: CertificateInfo | null\n\twhitelabelDomain: string\n}\n\nconst FAILURE_LOCKED = \"lock.locked\"\nconst FAILURE_CONTACT_FORM_ACTIVE = \"domain.contact_form_active\"\n\nexport class WhitelabelBrandingDomainSettings implements Component<WhitelabelBrandingDomainSettingsAttrs> {\n\tview(vnode: Vnode<WhitelabelBrandingDomainSettingsAttrs>): Children {\n\t\tconst { customerInfo, certificateInfo, whitelabelDomain, isWhitelabelFeatureEnabled } = vnode.attrs\n\t\treturn m(TextField, {\n\t\t\tlabel: \"whitelabelDomain_label\",\n\t\t\tvalue: whitelabelDomain ? whitelabelDomain : lang.get(\"deactivated_label\"),\n\t\t\thelpLabel: this.renderWhitelabelInfo(certificateInfo),\n\t\t\tisReadOnly: true,\n\t\t\tinjectionsRight: () =>\n\t\t\t\tm(\".ml-between-s\", [\n\t\t\t\t\twhitelabelDomain ? this.renderDeactivateButton(whitelabelDomain) : null,\n\t\t\t\t\tcustomerInfo ? this._renderEditButton(customerInfo, certificateInfo, isWhitelabelFeatureEnabled) : null,\n\t\t\t\t]),\n\t\t})\n\t}\n\n\tprivate renderDeactivateButton(whitelabelDomain: string): Children {\n\t\treturn m(IconButton, {\n\t\t\ttitle: \"deactivate_action\",\n\t\t\tclick: () => this.deactivate(whitelabelDomain),\n\t\t\ticon: Icons.Cancel,\n\t\t\tsize: ButtonSize.Compact,\n\t\t})\n\t}\n\n\tprivate async deactivate(whitelabelDomain: string) {\n\t\tif (await Dialog.confirm(\"confirmDeactivateWhitelabelDomain_msg\")) {\n\t\t\ttry {\n\t\t\t\treturn await showProgressDialog(\"pleaseWait_msg\", locator.customerFacade.deleteCertificate(whitelabelDomain))\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof PreconditionFailedError) {\n\t\t\t\t\tif (e.data === FAILURE_LOCKED) {\n\t\t\t\t\t\treturn await Dialog.message(\"operationStillActive_msg\")\n\t\t\t\t\t} else if (e.data === FAILURE_CONTACT_FORM_ACTIVE) {\n\t\t\t\t\t\treturn await Dialog.message(lang.getTranslation(\"domainStillHasContactForms_msg\", { \"{domain}\": whitelabelDomain }))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\t_renderEditButton(customerInfo: CustomerInfo, certificateInfo: CertificateInfo | null, isWhitelabelFeatureEnabled: boolean): Children {\n\t\treturn m(IconButton, {\n\t\t\ttitle: \"edit_action\",\n\t\t\tclick: () => this.edit(isWhitelabelFeatureEnabled, customerInfo),\n\t\t\ticon: Icons.Edit,\n\t\t\tsize: ButtonSize.Compact,\n\t\t})\n\t}\n\n\tprivate async edit(isWhitelabelFeatureEnabled: boolean, customerInfo: CustomerInfo): Promise<void> {\n\t\tif (locator.logins.getUserController().isFreeAccount()) {\n\t\t\tshowNotAvailableForFreeDialog([PlanType.Unlimited])\n\t\t} else {\n\t\t\tif (!isWhitelabelFeatureEnabled) {\n\t\t\t\tconst plansWithWhitelabel = await getAvailablePlansWithWhitelabel()\n\t\t\t\tisWhitelabelFeatureEnabled = await showPlanUpgradeRequiredDialog(plansWithWhitelabel)\n\t\t\t}\n\t\t\tif (isWhitelabelFeatureEnabled) {\n\t\t\t\tSetCustomDomainCertificateDialog.show(customerInfo)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderWhitelabelInfo(certificateInfo: CertificateInfo | null): () => Children {\n\t\tlet components: Array<string>\n\n\t\tif (certificateInfo) {\n\t\t\tswitch (certificateInfo.state) {\n\t\t\t\tcase CertificateState.VALID:\n\t\t\t\t\tcomponents = [\n\t\t\t\t\t\tlang.get(\"certificateExpiryDate_label\", {\n\t\t\t\t\t\t\t\"{date}\": formatDateTime(neverNull(certificateInfo.expiryDate)),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tthis.certificateTypeString(certificateInfo),\n\t\t\t\t\t]\n\t\t\t\t\tbreak\n\n\t\t\t\tcase CertificateState.VALIDATING:\n\t\t\t\t\tcomponents = [lang.get(\"certificateStateProcessing_label\")]\n\t\t\t\t\tbreak\n\n\t\t\t\tcase CertificateState.INVALID:\n\t\t\t\t\tcomponents = [lang.get(\"certificateStateInvalid_label\")]\n\t\t\t\t\tbreak\n\n\t\t\t\tdefault:\n\t\t\t\t\tcomponents = [lang.get(\"emptyString_msg\")]\n\t\t\t}\n\t\t} else {\n\t\t\tcomponents = [lang.get(\"emptyString_msg\")]\n\t\t}\n\n\t\treturn () =>\n\t\t\tm(\n\t\t\t\t\".flex\",\n\t\t\t\tcomponents.map((c) => m(\".pr-s\", c)),\n\t\t\t)\n\t}\n\n\tprivate certificateTypeString(certificateInfo: CertificateInfo): string {\n\t\tswitch (certificateInfo.type) {\n\t\t\tcase CertificateType.LETS_ENCRYPT:\n\t\t\t\treturn lang.get(\"certificateTypeAutomatic_label\")\n\n\t\t\tcase CertificateType.MANUAL:\n\t\t\t\treturn lang.get(\"certificateTypeManual_label\")\n\n\t\t\tdefault:\n\t\t\t\treturn lang.get(\"emptyString_msg\")\n\t\t}\n\t}\n}\n"]}