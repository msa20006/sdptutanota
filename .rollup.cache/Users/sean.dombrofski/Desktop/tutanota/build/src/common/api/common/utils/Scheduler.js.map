{"version":3,"file":"Scheduler.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/utils/Scheduler.ts"],"names":[],"mappings":"AAkBA;;;KAGK;AACL,MAAM,CAAC,MAAM,iBAAiB,GAAG,UAAU,CAAA;AAkB3C,MAAM,OAAO,aAAa;IAMI;IAA6C;IAA+C;IALzH;;OAEG;IACc,eAAe,CAA6C;IAE7E,YAA6B,YAA0B,EAAmB,aAA4B,EAAmB,cAA8B;QAA1H,iBAAY,GAAZ,YAAY,CAAc;QAAmB,kBAAa,GAAb,aAAa,CAAe;QAAmB,mBAAc,GAAd,cAAc,CAAgB;QACtJ,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,EAAE,CAAA;IACjC,CAAC;IAED,UAAU,CAAC,QAAe,EAAE,IAAU;QACrC,IAAI,SAAoB,CAAA;QAExB,iDAAiD;QACjD,MAAM,eAAe,GAAG,GAAG,EAAE;YAC5B,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;YAEtC,QAAQ,EAAE,CAAA;QACX,CAAC,CAAA;QAED,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,IAAI,CAAC,CAAA;QAC1D,OAAO,SAAS,CAAA;IACjB,CAAC;IAED,aAAa,CAAC,KAAY,EAAE,KAAa;QACxC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAA;QACtD,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;IACpC,CAAC;IAED,0EAA0E;IAClE,kBAAkB,CAAC,KAAY,EAAE,IAAU;QAClD,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAA;QAEnC,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAA;QAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,CAAA;QACpC,IAAI,SAAoB,CAAA;QAExB,IAAI,IAAI,GAAG,iBAAiB,EAAE,CAAC;YAC9B,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,EAAE;gBAC9C,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;gBAEzD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC,CAAA;YAClD,CAAC,EAAE,iBAAiB,CAAC,CAAA;QACtB,CAAC;aAAM,CAAC;YACP,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;QACvD,CAAC;QAED,OAAO,SAAS,CAAA;IACjB,CAAC;IAED,iBAAiB,CAAC,EAAsB;QACvC,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAA;QAExD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,aAAa,CAAC,CAAA;QAE1C,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,aAAa,CAAC,CAAA;IACtD,CAAC;IAED,gBAAgB,CAAC,KAAY,EAAE,EAAU;QACxC,qJAAqJ;QACrJ,iBAAiB;QACjB,IAAI,EAAE,GAAG,iBAAiB,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,kEAAkE,GAAG,EAAE,CAAC,CAAA;QACzF,CAAC;QACD,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;IAClD,CAAC;IAED,kBAAkB,CAAC,EAAuB;QACzC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,CAAC,CAAA;IACtC,CAAC;CACD","sourcesContent":["import type { Thunk } from \"@tutao/tutanota-utils\"\nimport { DateProvider } from \"../DateProvider.js\"\n\nexport type ScheduledTimeoutId = TimeoutID\nexport type ScheduledPeriodicId = TimeoutID\n\nexport interface Scheduler {\n\tscheduleAt(thunk: Thunk, date: Date): ScheduledTimeoutId\n\n\tunscheduleTimeout(id: ScheduledTimeoutId): void\n\n\tscheduleAfter(thunk: Thunk, after: number): ScheduledTimeoutId\n\n\tschedulePeriodic(thunk: Thunk, period: number): ScheduledPeriodicId\n\n\tunschedulePeriodic(id: ScheduledPeriodicId): void\n}\n\n/**\n * setTimeout() only works on 32bit integers, it doesn't do what you expect on longer intervals. If you use Scheduler you should not\n * worry about it, mainly exported for tests.\n * */\nexport const SET_TIMEOUT_LIMIT = 0x7fffffff\n\n/** Default impl of timeout functions, useful for testing */\nexport type SystemTimeout = {\n\t// Copying it because ts has some weird properties attach to it in node tslib.\n\t// no-arg version because lambadas exist.\n\tsetTimeout(callback: () => void, ms: number): number\n\tclearTimeout: typeof clearTimeout\n}\n\n/** Default impl of interval functions, useful for testing */\nexport type SystemInterval = {\n\t// Copying it because ts has some weird properties attach to it in node tslib.\n\t// no-arg version because lambadas exist.\n\tsetInterval(callback: () => void, ms: number): number\n\tclearInterval: typeof clearInterval\n}\n\nexport class SchedulerImpl implements Scheduler {\n\t/**\n\t * This points from the originally scheduled timeout to the most recent timeout\n\t */\n\tprivate readonly bridgedTimeouts: Map<ScheduledTimeoutId, ScheduledTimeoutId>\n\n\tconstructor(private readonly dateProvider: DateProvider, private readonly systemTimeout: SystemTimeout, private readonly systemInterval: SystemInterval) {\n\t\tthis.bridgedTimeouts = new Map()\n\t}\n\n\tscheduleAt(callback: Thunk, date: Date): ScheduledTimeoutId {\n\t\tlet timeoutId: TimeoutID\n\n\t\t// Call the thunk and clean up timeout in the map\n\t\tconst wrappedCallback = () => {\n\t\t\tthis.bridgedTimeouts.delete(timeoutId)\n\n\t\t\tcallback()\n\t\t}\n\n\t\ttimeoutId = this.scheduleAtInternal(wrappedCallback, date)\n\t\treturn timeoutId\n\t}\n\n\tscheduleAfter(thunk: Thunk, after: number): ScheduledTimeoutId {\n\t\tconst date = new Date(this.dateProvider.now() + after)\n\t\treturn this.scheduleAt(thunk, date)\n\t}\n\n\t/** We have separate internal version which does not re-wrap the thunk. */\n\tprivate scheduleAtInternal(thunk: Thunk, date: Date): ScheduledTimeoutId {\n\t\tconst now = this.dateProvider.now()\n\n\t\tconst then = date.getTime()\n\t\tconst diff = Math.max(then - now, 0)\n\t\tlet timeoutId: TimeoutID\n\n\t\tif (diff > SET_TIMEOUT_LIMIT) {\n\t\t\ttimeoutId = this.systemTimeout.setTimeout(() => {\n\t\t\t\tconst newTimeoutId = this.scheduleAtInternal(thunk, date)\n\n\t\t\t\tthis.bridgedTimeouts.set(timeoutId, newTimeoutId)\n\t\t\t}, SET_TIMEOUT_LIMIT)\n\t\t} else {\n\t\t\ttimeoutId = this.systemTimeout.setTimeout(thunk, diff)\n\t\t}\n\n\t\treturn timeoutId\n\t}\n\n\tunscheduleTimeout(id: ScheduledTimeoutId): void {\n\t\tconst rescheduledId = this.bridgedTimeouts.get(id) || id\n\n\t\tthis.bridgedTimeouts.delete(rescheduledId)\n\n\t\treturn this.systemTimeout.clearTimeout(rescheduledId)\n\t}\n\n\tschedulePeriodic(thunk: Thunk, ms: number): ScheduledPeriodicId {\n\t\t// Intervals bigger than 32 bit int will not work out-of-the-box and we do not want to implement bridging for them as this is a very rare case and is\n\t\t// usually a bug.\n\t\tif (ms > SET_TIMEOUT_LIMIT) {\n\t\t\tthrow new Error(\"Attempting to schedule periodic task but the period is too big: \" + ms)\n\t\t}\n\t\treturn this.systemInterval.setInterval(thunk, ms)\n\t}\n\n\tunschedulePeriodic(id: ScheduledPeriodicId) {\n\t\tthis.systemInterval.clearInterval(id)\n\t}\n}\n"]}