{"version":3,"file":"RecoverCodeFacade.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/facades/lazy/RecoverCodeFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { asKdfType } from \"../../../common/TutanotaConstants.js\"\nimport { createRecoverCode, RecoverCodeTypeRef, User } from \"../../../entities/sys/TypeRefs.js\"\nimport { assertNotNull, type Hex, KeyVersion, uint8ArrayToHex } from \"@tutao/tutanota-utils\"\nimport { LoginFacade } from \"../LoginFacade.js\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport {\n\tAes256Key,\n\taes256RandomKey,\n\tAesKey,\n\tbitArrayToUint8Array,\n\tcreateAuthVerifier,\n\tcreateAuthVerifierAsBase64Url,\n\tdecryptKey,\n\tencryptKey,\n} from \"@tutao/tutanota-crypto\"\nimport { EntityClient } from \"../../../common/EntityClient.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { KeyLoaderFacade, parseKeyVersion } from \"../KeyLoaderFacade.js\"\nimport { VersionedKey } from \"../../crypto/CryptoWrapper.js\"\n\nassertWorkerOrNode()\n\nexport type RecoverData = {\n\tuserEncRecoverCode: Uint8Array\n\tuserKeyVersion: KeyVersion\n\trecoverCodeEncUserGroupKey: Uint8Array\n\thexCode: Hex\n\trecoveryCodeVerifier: Uint8Array\n}\n\n/**\n * Facade to create, encrypt and show the recovery code.\n */\nexport class RecoverCodeFacade {\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly loginFacade: LoginFacade,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t) {}\n\n\tgenerateRecoveryCode(currentUserGroupKey: VersionedKey): RecoverData {\n\t\tconst recoveryCode = aes256RandomKey()\n\t\treturn this.encryptRecoveryCode(recoveryCode, currentUserGroupKey)\n\t}\n\n\tencryptRecoveryCode(recoveryCode: Aes256Key, currentUserGroupKey: VersionedKey): RecoverData {\n\t\tconst userEncRecoverCode = encryptKey(currentUserGroupKey.object, recoveryCode)\n\t\tconst recoverCodeEncUserGroupKey = encryptKey(recoveryCode, currentUserGroupKey.object)\n\t\tconst recoveryCodeVerifier = createAuthVerifier(recoveryCode)\n\t\treturn {\n\t\t\tuserEncRecoverCode,\n\t\t\tuserKeyVersion: currentUserGroupKey.version,\n\t\t\trecoverCodeEncUserGroupKey,\n\t\t\thexCode: uint8ArrayToHex(bitArrayToUint8Array(recoveryCode)),\n\t\t\trecoveryCodeVerifier,\n\t\t}\n\t}\n\n\tasync getRecoverCodeHex(passphrase: string): Promise<string> {\n\t\tconst user = this.userFacade.getLoggedInUser()\n\t\tconst passphraseKey = await this.getPassphraseKey(user, passphrase)\n\t\tconst rawRecoverCode = await this.getRawRecoverCode(passphraseKey)\n\t\treturn uint8ArrayToHex(bitArrayToUint8Array(rawRecoverCode))\n\t}\n\n\tasync getRawRecoverCode(passphraseKey: AesKey): Promise<AesKey> {\n\t\tconst user = this.userFacade.getLoggedInUser()\n\t\tconst recoverCodeId = user.auth?.recoverCode\n\t\tif (recoverCodeId == null) {\n\t\t\tthrow new Error(\"Auth is missing\")\n\t\t}\n\n\t\tconst extraHeaders = {\n\t\t\tauthVerifier: createAuthVerifierAsBase64Url(passphraseKey),\n\t\t}\n\n\t\tconst recoveryCodeEntity = await this.entityClient.load(RecoverCodeTypeRef, recoverCodeId, { extraHeaders })\n\t\tconst userGroupKey = await this.keyLoaderFacade.loadSymUserGroupKey(parseKeyVersion(recoveryCodeEntity.userKeyVersion))\n\t\treturn decryptKey(userGroupKey, recoveryCodeEntity.userEncRecoverCode)\n\t}\n\n\tprivate async getPassphraseKey(user: User, passphrase: string) {\n\t\tconst passphraseKeyData = {\n\t\t\tkdfType: asKdfType(user.kdfVersion),\n\t\t\tpassphrase,\n\t\t\tsalt: assertNotNull(user.salt),\n\t\t}\n\t\treturn await this.loginFacade.deriveUserPassphraseKey(passphraseKeyData)\n\t}\n\n\tasync createRecoveryCode(passphrase: string): Promise<string> {\n\t\tconst user = this.userFacade.getUser()\n\n\t\tif (user == null || user.auth == null) {\n\t\t\tthrow new Error(\"Invalid state: no user or no user.auth\")\n\t\t}\n\n\t\tconst { userEncRecoverCode, userKeyVersion, recoverCodeEncUserGroupKey, hexCode, recoveryCodeVerifier } = this.generateRecoveryCode(\n\t\t\tthis.userFacade.getCurrentUserGroupKey(),\n\t\t)\n\t\tconst recoverPasswordEntity = createRecoverCode({\n\t\t\tuserEncRecoverCode: userEncRecoverCode,\n\t\t\tuserKeyVersion: String(userKeyVersion),\n\t\t\trecoverCodeEncUserGroupKey: recoverCodeEncUserGroupKey,\n\t\t\t_ownerGroup: this.userFacade.getUserGroupId(),\n\t\t\tverifier: recoveryCodeVerifier,\n\t\t})\n\t\tconst passphraseKeyData = {\n\t\t\tkdfType: asKdfType(user.kdfVersion),\n\t\t\tpassphrase,\n\t\t\tsalt: assertNotNull(user.salt),\n\t\t}\n\t\tconst pwKey = await this.loginFacade.deriveUserPassphraseKey(passphraseKeyData)\n\t\tconst authVerifier = createAuthVerifierAsBase64Url(pwKey)\n\t\tawait this.entityClient.setup(null, recoverPasswordEntity, {\n\t\t\tauthVerifier,\n\t\t})\n\t\treturn hexCode\n\t}\n}\n"]}