{"version":3,"file":"PlainTextSearch.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/utils/PlainTextSearch.ts"],"names":[],"mappings":"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","sourcesContent":["type SearchMatch<T> = {\n\tentry: T\n\t// the input entry in which we searches\n\tcompleteMatch: number\n\t//the number of occurences of the entire queryString in the searched entry\n\tfullWordMatches: number\n\t//the number of occurences of any queryWord from the splitted queryString\n\tpartialWordMatches: number\n\t// the number of occurences a queryWord is part of the searched entry\n\tmatchedWords: Array<string> //all distinct queryWords that were found\n}\n\n/**\n * @param queryString List of query words separated by whitespace\n * @param entries Plain text entries to search in.\n * @param attributeNames The attributes that are searched within entries. The list should be sorted by priority\n * @param markHits If set to true the hits will be marked with html tag <mark>\n * @returns a list of entries, sorted by priority, that match the query string\n */\nexport function search<T extends Record<string, any>>(\n\tqueryString: string,\n\tentries: ReadonlyArray<T>,\n\tattributeNames: string[],\n\tmarkHits: boolean = false,\n): ReadonlyArray<T> {\n\tentries = entries.map((e) => Object.assign({}, e)) // create a copy in order to not override the original values\n\n\tif (queryString) {\n\t\treturn _search<T>(queryString, entries, attributeNames, markHits)\n\t\t\t.filter((match) => match.matchedWords.length > 0) // a and be are two matches that refer to entries (e.g. faqs)\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (a.completeMatch !== b.completeMatch) {\n\t\t\t\t\treturn b.completeMatch - a.completeMatch\n\t\t\t\t}\n\n\t\t\t\tif (a.matchedWords.length !== b.matchedWords.length) {\n\t\t\t\t\treturn b.matchedWords.length - a.matchedWords.length\n\t\t\t\t} else if (a.fullWordMatches !== b.fullWordMatches) {\n\t\t\t\t\treturn b.fullWordMatches - a.fullWordMatches\n\t\t\t\t} else if (a.partialWordMatches !== b.partialWordMatches) {\n\t\t\t\t\treturn b.partialWordMatches - a.partialWordMatches\n\t\t\t\t} else {\n\t\t\t\t\treturn 0\n\t\t\t\t}\n\t\t\t})\n\t\t\t.map((match) => match.entry)\n\t} else {\n\t\treturn entries\n\t}\n}\n\nfunction _findMatchInEntry<T>(\n\tnestedEntry: Record<string, any>,\n\tattributeName: string,\n\tqueryString: string,\n\tqueryWords: Array<string>,\n\tsearchMatch: SearchMatch<T>,\n\tmarkHits: boolean,\n) {\n\tconst value = nestedEntry[attributeName]\n\n\tif (!value || typeof value !== \"string\") {\n\t\treturn\n\t}\n\n\tconst splittedValue = value.split(/(<[^>]+>)/gi) // we split the array into words that are html markup and non html markup words as we don't want to search in html tags\n\n\t// find all matches with the full and exact queryString\n\tconst completeRegExp = new RegExp(escapeRegExp(queryString), \"gi\")\n\tsearchMatch.completeMatch += _findMatches(splittedValue, completeRegExp, false).hits\n\t// create regualar expression to match whole words, case insensitive\n\tconst fullWordRegExp = new RegExp(queryWords.map((queryWord) => \"\\\\b\" + escapeRegExp(queryWord) + \"\\\\b\").join(\"|\"), \"gi\")\n\tsearchMatch.fullWordMatches += _findMatches(splittedValue, fullWordRegExp, false).hits\n\t// regular expression for finding all matches (including partial matches)\n\tlet regExp = new RegExp(queryWords.map((queryWord) => escapeRegExp(queryWord)).join(\"|\"), \"gi\")\n\n\tlet findResult = _findMatches(splittedValue, regExp, markHits)\n\n\tif (markHits && findResult.hits > 0) {\n\t\tnestedEntry[attributeName] = splittedValue.join(\"\")\n\t}\n\n\tfor (const queryWord of findResult.matchedQueryWords) {\n\t\tif (searchMatch.matchedWords.indexOf(queryWord) === -1) {\n\t\t\tsearchMatch.matchedWords.push(queryWord)\n\t\t}\n\t}\n\n\tif (findResult.hits > 0) {\n\t\tsearchMatch.partialWordMatches += findResult.hits\n\t}\n}\n\n//export only for testing\nexport function _search<T extends Record<string, any>>(\n\tqueryString: string,\n\tentries: ReadonlyArray<T>,\n\tattributeNames: string[],\n\tmarkHits: boolean,\n): SearchMatch<T>[] {\n\tlet queryWords = queryString\n\t\t.toLocaleLowerCase()\n\t\t.split(\" \")\n\t\t.map((word) => word.trim())\n\t\t.filter((word) => word.length > 0)\n\treturn entries.map((entry) => {\n\t\tconst searchMatch = {\n\t\t\tentry,\n\t\t\tcompleteMatch: 0,\n\t\t\tfullWordMatches: 0,\n\t\t\tpartialWordMatches: 0,\n\t\t\tmatchedWords: [],\n\t\t}\n\t\tfor (const name of attributeNames) {\n\t\t\tconst nestedAttributes = name.split(\".\")\n\t\t\tif (nestedAttributes.length === 1) {\n\t\t\t\t// no nesting regular value check\n\t\t\t\t_findMatchInEntry(entry, nestedAttributes[0], queryString, queryWords, searchMatch, markHits)\n\t\t\t} else if (nestedAttributes.length === 2) {\n\t\t\t\t// We only accept arrays that contain objects for now.\n\t\t\t\tconst [nestedArrayName, nestedEntryAttributeName] = nestedAttributes\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst nestedArray: Array<Record<string, any>> = entry[nestedArrayName]\n\n\t\t\t\tif (Array.isArray(nestedArray)) {\n\t\t\t\t\tfor (const nestedEntry of nestedArray) {\n\t\t\t\t\t\t_findMatchInEntry(nestedEntry, nestedEntryAttributeName, queryString, queryWords, searchMatch, markHits)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn searchMatch\n\t})\n}\n\ntype FindResult = {\n\thits: number\n\tmatchedQueryWords: string[]\n}\n\n//export for testing only\nexport function _findMatches(splittedValue: Array<string>, regExp: RegExp, markHits: boolean): FindResult {\n\treturn splittedValue.reduce(\n\t\t(sum, value, index) => {\n\t\t\tif (value.trim().length === 0 || value.startsWith(\"<\")) {\n\t\t\t\treturn sum\n\t\t\t}\n\n\t\t\tsplittedValue[index] = value.replace(regExp, (match) => {\n\t\t\t\tsum.hits++\n\n\t\t\t\tif (sum.matchedQueryWords.indexOf(match.toLowerCase()) === -1) {\n\t\t\t\t\tsum.matchedQueryWords.push(match.toLowerCase())\n\t\t\t\t}\n\n\t\t\t\tif (markHits && match.length > 2) {\n\t\t\t\t\t// only mark matches that are longer then two characters.\n\t\t\t\t\t// We could mark these small matches but we should check that the match is a whole word then.\n\t\t\t\t\treturn `<mark>${match}</mark>`\n\t\t\t\t} else {\n\t\t\t\t\treturn match\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn sum\n\t\t},\n\t\t{\n\t\t\thits: 0,\n\t\t\tmatchedQueryWords: [] as string[],\n\t\t},\n\t)\n}\n\n// see https://stackoverflow.com/a/6969486\nfunction escapeRegExp(string: string): string {\n\treturn string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\") // $& means the whole matched string\n}\n"]}