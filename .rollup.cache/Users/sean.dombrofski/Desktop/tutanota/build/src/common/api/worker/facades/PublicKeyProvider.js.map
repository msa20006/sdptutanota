{"version":3,"file":"PublicKeyProvider.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/facades/PublicKeyProvider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAmB,MAAM,gCAAgC,CAAA;AAEtF,OAAO,EAAE,gBAAgB,EAAE,MAAM,gCAAgC,CAAA;AACjE,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAA;AAItD,OAAO,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAA;AAClE,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAA;AAY7D;;;GAGG;AACH,MAAM,OAAO,iBAAiB;IACA;IAA7B,YAA6B,eAAiC;QAAjC,oBAAe,GAAf,eAAe,CAAkB;IAAG,CAAC;IAElE,KAAK,CAAC,iBAAiB,CAAC,gBAAqC;QAC5D,OAAO,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAA;IAC/C,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,gBAAqC,EAAE,OAAmB;QACnF,OAAO,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC,CAAC,MAAM,CAAA;IACjE,CAAC;IAEO,KAAK,CAAC,UAAU,CAAC,gBAAqC,EAAE,OAA0B;QACzF,MAAM,WAAW,GAAG,oBAAoB,CAAC;YACxC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI;YACzC,UAAU,EAAE,gBAAgB,CAAC,UAAU;YACvC,cAAc,EAAE,gBAAgB,CAAC,cAAc;SAC/C,CAAC,CAAA;QACF,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAA;QACrF,MAAM,OAAO,GAAG,IAAI,CAAC,4BAA4B,CAAC,eAAe,CAAC,CAAA;QAClE,IAAI,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAA;QAC5C,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,OAAO,KAAK,OAAO,EAAE,CAAC;YACpD,MAAM,IAAI,gBAAgB,CAAC,0DAA0D,CAAC,CAAA;QACvF,CAAC;QACD,OAAO,OAAO,CAAA;IACf,CAAC;IAED;;;;OAIG;IACK,8BAA8B,CAAC,OAA8B;QACpE,IAAI,OAAO,CAAC,OAAO,KAAK,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,SAAS,IAAI,IAAI,EAAE,CAAC;YAC/D,MAAM,IAAI,WAAW,CAAC,oCAAoC,CAAC,CAAA;QAC5D,CAAC;IACF,CAAC;IAEO,4BAA4B,CAAC,eAAgC;QACpE,OAAO;YACN,MAAM,EAAE;gBACP,SAAS,EAAE,eAAe,CAAC,SAAS;gBACpC,WAAW,EAAE,eAAe,CAAC,WAAW;gBACxC,SAAS,EAAE,eAAe,CAAC,SAAS;aACpC;YACD,OAAO,EAAE,eAAe,CAAC,eAAe,CAAC,aAAa,CAAC;SACvD,CAAA;IACF,CAAC;CACD","sourcesContent":["import { createPublicKeyGetIn, PublicKeyGetOut } from \"../../entities/sys/TypeRefs.js\"\nimport { IServiceExecutor } from \"../../common/ServiceRequest.js\"\nimport { PublicKeyService } from \"../../entities/sys/Services.js\"\nimport { parseKeyVersion } from \"./KeyLoaderFacade.js\"\nimport { Versioned } from \"@tutao/tutanota-utils\"\nimport { PublicKeyIdentifierType } from \"../../common/TutanotaConstants.js\"\nimport { KeyVersion } from \"@tutao/tutanota-utils/dist/Utils.js\"\nimport { InvalidDataError } from \"../../common/error/RestError.js\"\nimport { CryptoError } from \"@tutao/tutanota-crypto/error.js\"\n\nexport type PublicKeyIdentifier = {\n\tidentifier: string\n\tidentifierType: PublicKeyIdentifierType\n}\nexport type PublicKeys = {\n\tpubRsaKey: null | Uint8Array\n\tpubEccKey: null | Uint8Array\n\tpubKyberKey: null | Uint8Array\n}\n\n/**\n * Load public keys.\n * Handle key versioning.\n */\nexport class PublicKeyProvider {\n\tconstructor(private readonly serviceExecutor: IServiceExecutor) {}\n\n\tasync loadCurrentPubKey(pubKeyIdentifier: PublicKeyIdentifier): Promise<Versioned<PublicKeys>> {\n\t\treturn this.loadPubKey(pubKeyIdentifier, null)\n\t}\n\n\tasync loadVersionedPubKey(pubKeyIdentifier: PublicKeyIdentifier, version: KeyVersion): Promise<PublicKeys> {\n\t\treturn (await this.loadPubKey(pubKeyIdentifier, version)).object\n\t}\n\n\tprivate async loadPubKey(pubKeyIdentifier: PublicKeyIdentifier, version: KeyVersion | null): Promise<Versioned<PublicKeys>> {\n\t\tconst requestData = createPublicKeyGetIn({\n\t\t\tversion: version ? String(version) : null,\n\t\t\tidentifier: pubKeyIdentifier.identifier,\n\t\t\tidentifierType: pubKeyIdentifier.identifierType,\n\t\t})\n\t\tconst publicKeyGetOut = await this.serviceExecutor.get(PublicKeyService, requestData)\n\t\tconst pubKeys = this.convertToVersionedPublicKeys(publicKeyGetOut)\n\t\tthis.enforceRsaKeyVersionConstraint(pubKeys)\n\t\tif (version != null && pubKeys.version !== version) {\n\t\t\tthrow new InvalidDataError(\"the server returned a key version that was not requested\")\n\t\t}\n\t\treturn pubKeys\n\t}\n\n\t/**\n\t * RSA keys were only created before introducing key versions, i.e. they always have version 0.\n\t *\n\t * Receiving a higher version would indicate a protocol downgrade/ MITM attack, and we reject such keys.\n\t */\n\tprivate enforceRsaKeyVersionConstraint(pubKeys: Versioned<PublicKeys>) {\n\t\tif (pubKeys.version !== 0 && pubKeys.object.pubRsaKey != null) {\n\t\t\tthrow new CryptoError(\"rsa key in a version that is not 0\")\n\t\t}\n\t}\n\n\tprivate convertToVersionedPublicKeys(publicKeyGetOut: PublicKeyGetOut): Versioned<PublicKeys> {\n\t\treturn {\n\t\t\tobject: {\n\t\t\t\tpubRsaKey: publicKeyGetOut.pubRsaKey,\n\t\t\t\tpubKyberKey: publicKeyGetOut.pubKyberKey,\n\t\t\t\tpubEccKey: publicKeyGetOut.pubEccKey,\n\t\t\t},\n\t\t\tversion: parseKeyVersion(publicKeyGetOut.pubKeyVersion),\n\t\t}\n\t}\n}\n"]}