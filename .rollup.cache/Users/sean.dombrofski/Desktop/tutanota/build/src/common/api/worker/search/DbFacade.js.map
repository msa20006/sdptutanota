{"version":3,"file":"DbFacade.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/search/DbFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { DbError } from \"../../common/error/DbError\"\nimport { delay, downcast, LazyLoaded, stringToUtf8Uint8Array, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport { IndexingNotSupportedError } from \"../../common/error/IndexingNotSupportedError\"\nimport { QuotaExceededError } from \"../../common/error/QuotaExceededError\"\nimport { sha256Hash } from \"@tutao/tutanota-crypto\"\nimport { IndexName, ObjectStoreName } from \"./IndexTables.js\"\n\nexport const osName = (objectStoreName: ObjectStoreName): string => objectStoreName\nexport type DbKey = string | number | Uint8Array\nexport type DatabaseEntry = {\n\tkey: DbKey\n\tvalue: any\n}\n\nexport interface DbTransaction {\n\tgetAll(objectStore: ObjectStoreName): Promise<Array<DatabaseEntry>>\n\n\tget<T = any>(objectStore: ObjectStoreName, key: DbKey, indexName?: IndexName): Promise<T | null>\n\n\tgetAsList<T = any>(objectStore: ObjectStoreName, key: DbKey, indexName?: IndexName): Promise<T[]>\n\n\tput(objectStore: ObjectStoreName, key: DbKey | null, value: any): Promise<any>\n\n\tdelete(objectStore: ObjectStoreName, key: DbKey): Promise<void>\n\n\tabort(): void\n\n\twait(): Promise<void>\n\n\taborted: boolean\n}\n\nfunction extractErrorProperties(e: any): string {\n\tconst requestErrorEntries: Record<string, any> = {}\n\n\tfor (let key in e) {\n\t\trequestErrorEntries[key] = e[key]\n\t}\n\n\treturn JSON.stringify(requestErrorEntries)\n}\n\n/** facade to manage a single named indexedDb */\nexport class DbFacade {\n\tprivate _id!: string\n\tprivate _db: LazyLoaded<IDBDatabase>\n\tprivate _activeTransactions: number\n\tindexingSupported: boolean = true\n\n\tconstructor(version: number, onupgrade: (event: any, db: IDBDatabase, dbFacade: DbFacade) => void) {\n\t\tthis._activeTransactions = 0\n\t\tthis._db = new LazyLoaded(() => {\n\t\t\tif (!this.indexingSupported) {\n\t\t\t\treturn Promise.reject(new IndexingNotSupportedError(\"indexedDB not supported\"))\n\t\t\t} else {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tlet DBOpenRequest: IDBOpenDBRequest\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDBOpenRequest = self.indexedDB.open(this._id, version)\n\n\t\t\t\t\t\tDBOpenRequest.onerror = (event) => {\n\t\t\t\t\t\t\tconst target = event.target\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tconst error = event.target?.error\n\n\t\t\t\t\t\t\t// Copy all the keys from the error, including inheritent ones so we can get some info\n\t\t\t\t\t\t\tconst requestErrorEntries = extractErrorProperties(DBOpenRequest.error)\n\t\t\t\t\t\t\tconst eventProperties = extractErrorProperties(event)\n\t\t\t\t\t\t\tthis.indexingSupported = false\n\t\t\t\t\t\t\tconst message =\n\t\t\t\t\t\t\t\t\"DbFacade.open.onerror: \" +\n\t\t\t\t\t\t\t\tthis._id +\n\t\t\t\t\t\t\t\t\"\\nrequest.error: \" +\n\t\t\t\t\t\t\t\trequestErrorEntries +\n\t\t\t\t\t\t\t\t\"\\nevent: \" +\n\t\t\t\t\t\t\t\teventProperties +\n\t\t\t\t\t\t\t\t\"\\nevent.target.error: \" +\n\t\t\t\t\t\t\t\t(error ?? \"[none]\")\n\n\t\t\t\t\t\t\tif (error?.name === \"QuotaExceededError\") {\n\t\t\t\t\t\t\t\tconsole.log(\"Storage Quota is exceeded\")\n\t\t\t\t\t\t\t\treject(new QuotaExceededError(message, DBOpenRequest.error || error))\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treject(new IndexingNotSupportedError(message, DBOpenRequest.error || error))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tDBOpenRequest.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n\t\t\t\t\t\t\t//console.log(\"upgrade db\", event)\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\tonupgrade(event, event.target.result, this)\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treject(new DbError(\"could not create object store for DB \" + this._id, e))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tDBOpenRequest.onsuccess = (event) => {\n\t\t\t\t\t\t\t//console.log(\"opened db\", event)\n\t\t\t\t\t\t\tDBOpenRequest.result.onabort = (event) => console.log(\"db aborted\", event)\n\n\t\t\t\t\t\t\tDBOpenRequest.result.onclose = (event) => {\n\t\t\t\t\t\t\t\tconsole.log(\"db closed\", event)\n\n\t\t\t\t\t\t\t\tthis._db.reset()\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tDBOpenRequest.result.onerror = (event) => console.log(\"db error\", event)\n\n\t\t\t\t\t\t\tresolve(DBOpenRequest.result)\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthis.indexingSupported = false\n\t\t\t\t\t\treject(new IndexingNotSupportedError(`exception when accessing indexeddb ${this._id}`, e))\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\n\tasync open(id: string): Promise<void> {\n\t\tthis._id = id\n\t\tawait this._db.getAsync()\n\t}\n\n\tisSameDbId(dbId: string): boolean {\n\t\treturn this._id === dbId\n\t}\n\n\t/**\n\t * Closes the db if it's open and deletes it.\n\t */\n\tdeleteDatabase(id: string): Promise<void> {\n\t\tconst ensureDbIsClosed = (): Promise<void> => {\n\t\t\tif (this._db.isLoaded()) {\n\t\t\t\tif (this._activeTransactions > 0) {\n\t\t\t\t\treturn delay(150).then(ensureDbIsClosed)\n\t\t\t\t} else {\n\t\t\t\t\tthis._db.getLoaded().close()\n\t\t\t\t\treturn Promise.resolve()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve()\n\t\t\t}\n\t\t}\n\n\t\treturn ensureDbIsClosed()\n\t\t\t.then(() => DbFacade.deleteDb(id))\n\t\t\t.then(() => this._db.reset())\n\t}\n\n\tstatic deleteDb(id: string): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst deleteRequest = self.indexedDB.deleteDatabase(id)\n\t\t\tdeleteRequest.onerror = (event: ErrorEvent) => reject(new DbError(`could not delete database ${id}`, downcast<Error>(event)))\n\t\t\tdeleteRequest.onsuccess = () => resolve()\n\t\t})\n\t}\n\n\t/**\n\t * @pre open() must have been called before, but the promise does not need to have returned.\n\t */\n\tcreateTransaction(readOnly: boolean, objectStores: ObjectStoreName[]): Promise<DbTransaction> {\n\t\t// WARNING\n\t\t// Do not make this method async because Safari likes to close the transaction if it's not used right away and async somehow influences that.\n\t\t// Would be great if we couldn't even call `createTransaction` without having a database beforehand, then this method could be sync.\n\t\treturn this._db.getAsync().then((db) => {\n\t\t\ttry {\n\t\t\t\tconst idbTransaction = db.transaction(objectStores as string[], readOnly ? \"readonly\" : \"readwrite\")\n\t\t\t\tconst transaction = new IndexedDbTransaction(idbTransaction, () => {\n\t\t\t\t\tthis.indexingSupported = false\n\n\t\t\t\t\tthis._db.reset()\n\t\t\t\t})\n\t\t\t\tthis._activeTransactions++\n\t\t\t\ttransaction.wait().finally(() => {\n\t\t\t\t\tthis._activeTransactions--\n\t\t\t\t})\n\t\t\t\treturn transaction\n\t\t\t} catch (e) {\n\t\t\t\tthrow new DbError(\"could not create transaction\", e)\n\t\t\t}\n\t\t})\n\t}\n}\n\n/**\n * A transaction is usually committed after all requests placed against the transaction have been executed and their\n * returned results handled, and no new requests have been placed against the transaction.\n * @see https://w3c.github.io/IndexedDB/#ref-for-transaction-finish\n */\nexport class IndexedDbTransaction implements DbTransaction {\n\tprivate readonly _transaction: IDBTransaction\n\tprivate readonly _promise: Promise<void>\n\tprivate readonly _onUnknownError: (e: any) => unknown\n\taborted: boolean = false\n\n\tconstructor(transaction: IDBTransaction, onUnknownError: (e: any) => unknown) {\n\t\tthis._transaction = transaction\n\t\tthis._onUnknownError = onUnknownError\n\t\tthis._promise = new Promise((resolve, reject) => {\n\t\t\tlet done = false\n\n\t\t\ttransaction.onerror = (event) => {\n\t\t\t\tif (!done) {\n\t\t\t\t\tthis._handleDbError(event, this._transaction, \"transaction.onerror\", (e) => {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"ignore error of aborted/fulfilled transaction\", event)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttransaction.oncomplete = () => {\n\t\t\t\tdone = true\n\t\t\t\tresolve()\n\t\t\t}\n\n\t\t\ttransaction.onabort = (event) => {\n\t\t\t\tevent.stopPropagation()\n\t\t\t\tdone = true\n\t\t\t\tresolve()\n\t\t\t}\n\t\t})\n\t}\n\n\tgetAll(objectStore: ObjectStoreName): Promise<Array<DatabaseEntry>> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet keys: DatabaseEntry[] = []\n\t\t\t\tlet request = this._transaction.objectStore(objectStore).openCursor()\n\n\t\t\t\trequest.onerror = (event) => {\n\t\t\t\t\tthis._handleDbError(event, request, \"getAll().onError \" + objectStore, reject)\n\t\t\t\t}\n\n\t\t\t\trequest.onsuccess = (event) => {\n\t\t\t\t\tlet cursor = request.result\n\n\t\t\t\t\tif (cursor) {\n\t\t\t\t\t\tkeys.push({\n\t\t\t\t\t\t\t// @ts-ignore Key can be something crazy like Date or array of keys\n\t\t\t\t\t\t\tkey: cursor.key,\n\t\t\t\t\t\t\tvalue: cursor.value,\n\t\t\t\t\t\t})\n\t\t\t\t\t\tcursor.continue() // onsuccess is called again\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(keys) // cursor has reached the end\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._handleDbError(e, null, \"getAll().catch\", reject)\n\t\t\t}\n\t\t})\n\t}\n\n\tget<T>(objectStore: ObjectStoreName, key: DbKey, indexName?: IndexName): Promise<T | null> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst os = this._transaction.objectStore(objectStore)\n\n\t\t\t\tlet request: IDBRequest<any>\n\n\t\t\t\tif (indexName) {\n\t\t\t\t\trequest = os.index(indexName).get(key)\n\t\t\t\t} else {\n\t\t\t\t\trequest = os.get(key)\n\t\t\t\t}\n\n\t\t\t\trequest.onerror = (event) => {\n\t\t\t\t\tthis._handleDbError(event, request, \"get().onerror \" + objectStore, reject)\n\t\t\t\t}\n\n\t\t\t\trequest.onsuccess = (event) => {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tresolve(event.target.result)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._handleDbError(e, null, \"get().catch\", reject)\n\t\t\t}\n\t\t})\n\t}\n\n\tasync getAsList<T>(objectStore: ObjectStoreName, key: DbKey, indexName?: IndexName): Promise<T[]> {\n\t\tconst result = await this.get<T>(objectStore, key, indexName)\n\t\treturn result ? [result] : []\n\t}\n\n\tput(objectStore: ObjectStoreName, key: DbKey | null, value: any): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet request = key ? this._transaction.objectStore(objectStore).put(value, key) : this._transaction.objectStore(objectStore).put(value)\n\n\t\t\t\trequest.onerror = (event) => {\n\t\t\t\t\tthis._handleDbError(event, request, \"put().onerror \" + objectStore, reject)\n\t\t\t\t}\n\n\t\t\t\trequest.onsuccess = (event) => {\n\t\t\t\t\t// event.target.result isn't known by typescript definitions\n\t\t\t\t\t// see: https://github.com/Microsoft/TypeScript/issues/30669\n\t\t\t\t\tresolve((event.target as any).result)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._handleDbError(e, null, \"put().catch\", reject)\n\t\t\t}\n\t\t})\n\t}\n\n\tdelete(objectStore: ObjectStoreName, key: DbKey): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet request = this._transaction.objectStore(objectStore).delete(key)\n\n\t\t\t\trequest.onerror = (event) => {\n\t\t\t\t\tthis._handleDbError(event, request, \"delete().onerror \" + objectStore, reject)\n\t\t\t\t}\n\n\t\t\t\trequest.onsuccess = (event) => {\n\t\t\t\t\tresolve()\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._handleDbError(e, null, \".delete().catch \" + objectStore, reject)\n\t\t\t}\n\t\t})\n\t}\n\n\tabort() {\n\t\tthis.aborted = true\n\n\t\tthis._transaction.abort()\n\t}\n\n\twait(): Promise<void> {\n\t\treturn this._promise\n\t}\n\n\t_handleDbError(event: any, customTarget: any | null, prefix: string, callback: (e: any) => unknown) {\n\t\tconst errorEntries = extractErrorProperties(event)\n\t\tconst eventTargetEntries = event.target ? extractErrorProperties(event.target) : \"<null>\"\n\t\tconst eventTargetErrorEntries = event.target && event.target.error ? extractErrorProperties(event.target.error) : \"<null>\"\n\t\tconst customTargetEntries = customTarget ? extractErrorProperties(customTarget) : \"<null>\"\n\t\tconst customTargetErrorEntries = customTarget && customTarget.error ? extractErrorProperties(customTarget.error) : \"<null>\"\n\t\tconst msg =\n\t\t\t\"IndexedDbTransaction \" +\n\t\t\tprefix +\n\t\t\t\"\\nOSes: \" +\n\t\t\tJSON.stringify((this._transaction as any).objectStoreNames) +\n\t\t\t\"\\nevent:\" +\n\t\t\terrorEntries +\n\t\t\t\"\\ntransaction.error: \" +\n\t\t\t(this._transaction.error ? this._transaction.error.message : \"<null>\") +\n\t\t\t\"\\nevent.target: \" +\n\t\t\teventTargetEntries +\n\t\t\t\"\\nevent.target.error: \" +\n\t\t\teventTargetErrorEntries +\n\t\t\t\"\\ncustom.target: \" +\n\t\t\tcustomTargetEntries +\n\t\t\t\"\\ncustom.target.error: \" +\n\t\t\tcustomTargetErrorEntries\n\t\t// In some cases it's not available on Firefox 70\n\t\tif (typeof event.stopPropagation === \"function\") event.stopPropagation()\n\n\t\tif (\n\t\t\tcustomTarget &&\n\t\t\tcustomTarget.error &&\n\t\t\t(customTarget.error.name === \"UnknownError\" ||\n\t\t\t\t(typeof customTarget.error.message === \"string\" && customTarget.error.message.includes(\"UnknownError\")))\n\t\t) {\n\t\t\tthis._onUnknownError(customTarget.error)\n\n\t\t\tcallback(new IndexingNotSupportedError(msg, this._transaction.error ?? undefined))\n\t\t} else {\n\t\t\tconst e = this._transaction.error || (customTarget ? customTarget.error : null)\n\n\t\t\tif (e && e.name && e.name === \"QuotaExceededError\") {\n\t\t\t\tconsole.warn(\"Storage Quota exceeded\")\n\t\t\t\tcallback(new QuotaExceededError(msg, e))\n\t\t\t} else {\n\t\t\t\tcallback(new DbError(msg, e))\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function b64UserIdHash(userId: Id): string {\n\treturn uint8ArrayToBase64(sha256Hash(stringToUtf8Uint8Array(userId)))\n}\n"]}