{"version":3,"file":"theme.js","sourceRoot":"","sources":["../../../../src/common/gui/theme.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAA;AACxD,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAA;AAC3C,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAA;AACtE,OAAO,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAA;AAE/C,oBAAoB,EAAE,CAAA;AAqDtB,MAAM,cAAc,GAAG,EAAE,CAAA;AAEzB,2FAA2F;AAC3F,mEAAmE;AACnE,kFAAkF;AAClF,0DAA0D;AAC1D,oJAAoJ;AACpJ,MAAM,CAAC,MAAM,KAAK,GAAG,cAAuB,CAAA;AAE5C,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,aAAsB,EAAE,EAAE,CACtD;IACC;QACC,IAAI,EAAE,uBAAuB;QAC7B,KAAK,EAAE,iBAAiB;KACxB;IACD;QACC,IAAI,EAAE,aAAa;QACnB,KAAK,EAAE,OAAO;KACd;IACD;QACC,IAAI,EAAE,YAAY;QAClB,KAAK,EAAE,MAAM;KACb;IACD;QACC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,kBAAkB;QAC5D,KAAK,EAAE,iBAAiB;KACxB;IACD;QACC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,iBAAiB;QAC1D,KAAK,EAAE,gBAAgB;KACvB;CACQ,CAAA;AAEX,MAAM,UAAU,8BAA8B;IAC7C,OAAO,KAAK,CAAC,sBAAsB,IAAI,KAAK,CAAC,cAAc,CAAA,CAAC,oDAAoD;AACjH,CAAC;AAED,MAAM,UAAU,0BAA0B;IACzC,OAAO,KAAK,CAAC,yBAAyB,IAAI,KAAK,CAAC,iBAAiB,CAAA,CAAC,oDAAoD;AACvH,CAAC;AAED,MAAM,UAAU,qBAAqB;IACpC,OAAO,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,UAAU,CAAA;AAC7C,CAAC;AAED,MAAM,UAAU,mBAAmB;IAClC,OAAO,KAAK,CAAC,kBAAkB,IAAI,KAAK,CAAC,aAAa,CAAA;AACvD,CAAC;AAED,MAAM,UAAU,qBAAqB;IACpC,OAAO,KAAK,CAAC,oBAAoB,IAAI,KAAK,CAAC,sBAAsB,CAAA;AAClE,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,aAAsB;IAC5D,sCAAsC;IACtC,MAAM,eAAe,GAAG,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,KAAK,iBAAiB,IAAI,CAAC,aAAa,CAAC,CAAA;IAC/H,IAAI,YAAY,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;QACxD,OAAO,cAAc,CAAC,OAAO,EAAE,UAAU,CAAC,CAAA;IAC3C,CAAC;SAAM,CAAC;QACP,OAAO,cAAc,CAAC,eAAe,EAAE,eAAe,CAAC,CAAA;IACxD,CAAC;AACF,CAAC","sourcesContent":["import { assertMainOrNodeBoot } from \"../api/common/Env\"\nimport { isColorLight } from \"./base/Color\"\nimport { logoDefaultGrey, tutaDunkel, tutaRed } from \"./builtinThemes\"\nimport { getTutaLogoSvg } from \"./base/Logo.js\"\n\nassertMainOrNodeBoot()\n\n/**\n * Unique identifier for a theme.\n * There are few built-in ones and there are whitelabel ones.\n * Whitelabel themes use domain name as an ID.\n */\nexport type ThemeId = \"light\" | \"dark\" | \"light_secondary\" | \"dark_secondary\" | string\nexport type BaseThemeId = \"light\" | \"dark\"\n/**\n * This one is not attached to any single theme but is persisted and is shown to the user as a preference.\n */\nexport type ThemePreference = ThemeId | \"auto:light|dark\"\nexport type Theme = {\n\tthemeId: ThemeId\n\tlogo: string\n\tbutton_bubble_bg: string\n\tbutton_bubble_fg: string\n\tcontent_bg: string\n\tcontent_bg_cyber_monday: string\n\tcontent_fg: string\n\tcontent_button: string\n\tcontent_button_selected: string\n\tcontent_button_icon: string\n\tcontent_button_icon_selected: string\n\tcontent_button_icon_bg?: string\n\tcontent_accent: string\n\tcontent_accent_cyber_monday: string\n\tcontent_border: string\n\tcontent_border_cyber_monday: string\n\tcontent_message_bg: string\n\theader_bg: string\n\theader_box_shadow_bg: string\n\theader_button: string\n\theader_button_selected: string\n\tlist_bg: string\n\tlist_alternate_bg: string\n\tlist_accent_fg: string\n\tlist_message_bg: string\n\tlist_border: string\n\tmodal_bg: string\n\televated_bg?: string\n\tnavigation_bg: string\n\tnavigation_border: string\n\tnavigation_button: string\n\tnavigation_button_icon_bg?: string\n\tnavigation_button_selected: string\n\tnavigation_button_icon: string\n\tnavigation_button_icon_selected: string\n\tnavigation_menu_bg?: string\n\tnavigation_menu_icon: string\n}\n\nconst themeSingleton = {}\n\n// ThemeController.updateTheme updates the object in place, so this will always be current.\n// There are few alternative ways this could have been implemented:\n//  * make each property on this singleton a getter that defers to themeController\n//  * make this singleton a proxy that does the same thing\n// We keep this singleton available because it is convenient to refer to, and already everywhere in the code before the addition of ThemeController.\nexport const theme = themeSingleton as Theme\n\nexport const themeOptions = (isCalendarApp: boolean) =>\n\t[\n\t\t{\n\t\t\tname: \"systemThemePref_label\",\n\t\t\tvalue: \"auto:light|dark\",\n\t\t},\n\t\t{\n\t\t\tname: \"light_label\",\n\t\t\tvalue: \"light\",\n\t\t},\n\t\t{\n\t\t\tname: \"dark_label\",\n\t\t\tvalue: \"dark\",\n\t\t},\n\t\t{\n\t\t\tname: isCalendarApp ? \"light_red_label\" : \"light_blue_label\",\n\t\t\tvalue: \"light_secondary\",\n\t\t},\n\t\t{\n\t\t\tname: isCalendarApp ? \"dark_red_label\" : \"dark_blue_label\",\n\t\t\tvalue: \"dark_secondary\",\n\t\t},\n\t] as const\n\nexport function getContentButtonIconBackground(): string {\n\treturn theme.content_button_icon_bg || theme.content_button // fallback for the new color content_button_icon_bg\n}\n\nexport function getNavButtonIconBackground(): string {\n\treturn theme.navigation_button_icon_bg || theme.navigation_button // fallback for the new color content_button_icon_bg\n}\n\nexport function getElevatedBackground(): string {\n\treturn theme.elevated_bg || theme.content_bg\n}\n\nexport function getNavigationMenuBg(): string {\n\treturn theme.navigation_menu_bg || theme.navigation_bg\n}\n\nexport function getNavigationMenuIcon(): string {\n\treturn theme.navigation_menu_icon || theme.navigation_button_icon\n}\n\nexport function getLightOrDarkTutaLogo(isCalendarApp: boolean): string {\n\t// Use tuta logo with our brand colors\n\tconst isCalendarTheme = (theme.themeId === \"light\" && isCalendarApp) || (theme.themeId === \"light_secondary\" && !isCalendarApp)\n\tif (isColorLight(theme.content_bg) && !isCalendarTheme) {\n\t\treturn getTutaLogoSvg(tutaRed, tutaDunkel)\n\t} else {\n\t\treturn getTutaLogoSvg(logoDefaultGrey, logoDefaultGrey)\n\t}\n}\n"]}