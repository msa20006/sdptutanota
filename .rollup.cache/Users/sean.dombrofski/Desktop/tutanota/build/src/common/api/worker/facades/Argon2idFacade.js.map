{"version":3,"file":"Argon2idFacade.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/facades/Argon2idFacade.ts"],"names":[],"mappings":"AAAA,OAAO,EAA8B,iCAAiC,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAA;AAC5H,OAAO,EAAE,UAAU,EAA0B,MAAM,uBAAuB,CAAA;AAE1E,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAA;AACxD,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AAEtC,kBAAkB,EAAE,CAAA;AAepB;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAC9B,oBAAoB;IACZ,MAAM,GAAgC,IAAI,UAAU,CAAC,KAAK,IAAI,EAAE;QACvE,OAAO,MAAM,QAAQ,EAAE,CAAA;IACxB,CAAC,CAAC,CAAA;IAEF,KAAK,CAAC,yBAAyB,CAAC,UAAkB,EAAE,IAAgB;QACnE,OAAO,iCAAiC,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,CAAA;IACzF,CAAC;CACD;AAED;;GAEG;AACH,MAAM,OAAO,oBAAoB;IACH;IAA7B,YAA6B,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;IAAG,CAAC;IAEvE,KAAK,CAAC,yBAAyB,CAAC,UAAkB,EAAE,IAAgB;QACnE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;QAC1F,OAAO,oBAAoB,CAAC,IAAI,CAAC,CAAA;IAClC,CAAC;CACD","sourcesContent":["import { Aes256Key, Argon2IDExports, generateKeyFromPassphraseArgon2id, uint8ArrayToBitArray } from \"@tutao/tutanota-crypto\"\nimport { LazyLoaded, stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\nimport { NativeCryptoFacade } from \"../../../native/common/generatedipc/NativeCryptoFacade.js\"\nimport { assertWorkerOrNode } from \"../../common/Env.js\"\nimport { loadWasm } from \"argon2.wasm\"\n\nassertWorkerOrNode()\n\n/**\n * Abstract interface for generating Argon2id passphrase keys using the preferred implementation (i.e. native or WASM)\n */\nexport interface Argon2idFacade {\n\t/**\n\t * Generate a key from a passphrase\n\t * @param passphrase\n\t * @param salt\n\t * @return bit array of the resulting key\n\t */\n\tgenerateKeyFromPassphrase(passphrase: string, salt: Uint8Array): Promise<Aes256Key>\n}\n\n/**\n * WebAssembly implementation of Argon2id\n */\nexport class WASMArgon2idFacade implements Argon2idFacade {\n\t// loads argon2 WASM\n\tprivate argon2: LazyLoaded<Argon2IDExports> = new LazyLoaded(async () => {\n\t\treturn await loadWasm()\n\t})\n\n\tasync generateKeyFromPassphrase(passphrase: string, salt: Uint8Array): Promise<Aes256Key> {\n\t\treturn generateKeyFromPassphraseArgon2id(await this.argon2.getAsync(), passphrase, salt)\n\t}\n}\n\n/**\n * Native implementation of Argon2id\n */\nexport class NativeArgon2idFacade implements Argon2idFacade {\n\tconstructor(private readonly nativeCryptoFacade: NativeCryptoFacade) {}\n\n\tasync generateKeyFromPassphrase(passphrase: string, salt: Uint8Array): Promise<Aes256Key> {\n\t\tconst hash = await this.nativeCryptoFacade.argon2idGeneratePassphraseKey(passphrase, salt)\n\t\treturn uint8ArrayToBitArray(hash)\n\t}\n}\n"]}