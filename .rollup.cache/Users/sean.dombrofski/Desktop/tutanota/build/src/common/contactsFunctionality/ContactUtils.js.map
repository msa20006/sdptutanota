{"version":3,"file":"ContactUtils.js","sourceRoot":"","sources":["../../../../src/common/contactsFunctionality/ContactUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { assertMainOrNode } from \"../api/common/Env.js\"\nimport {\n\tBirthday,\n\tContact,\n\tContactAddress,\n\tContactCustomDate,\n\tContactMailAddress,\n\tContactMessengerHandle,\n\tContactPhoneNumber,\n\tContactRelationship,\n\tContactSocialId,\n\tContactWebsite,\n} from \"../api/entities/tutanota/TypeRefs.js\"\nimport { formatDate } from \"../misc/Formatter.js\"\nimport { lang } from \"../misc/LanguageViewModel.js\"\nimport { isoDateToBirthday } from \"../api/common/utils/BirthdayUtils.js\"\nimport {\n\tContactAddressType,\n\tContactCustomDateType,\n\tContactMessengerHandleType,\n\tContactPhoneNumberType,\n\tContactRelationshipType,\n\tContactSocialType,\n\tContactWebsiteType,\n} from \"../api/common/TutanotaConstants.js\"\nimport { StructuredMailAddress } from \"../native/common/generatedipc/StructuredMailAddress.js\"\nimport { StructuredAddress } from \"../native/common/generatedipc/StructuredAddress.js\"\nimport { StructuredPhoneNumber } from \"../native/common/generatedipc/StructuredPhoneNumber.js\"\nimport { StructuredCustomDate } from \"../native/common/generatedipc/StructuredCustomDate.js\"\nimport { StructuredWebsite } from \"../native/common/generatedipc/StructuredWebsite.js\"\nimport { StructuredRelationship } from \"../native/common/generatedipc/StructuredRelationship.js\"\nimport { StructuredMessengerHandle } from \"../native/common/generatedipc/StructuredMessengerHandle.js\"\nimport { StructuredContact } from \"../native/common/generatedipc/StructuredContact.js\"\n\nassertMainOrNode()\n\nexport type ContactNames = Pick<Contact, \"nickname\" | \"firstName\" | \"lastName\">\n\nexport function getContactDisplayName(contact: ContactNames): string {\n\tif (contact.nickname != null && contact.nickname !== \"\") {\n\t\treturn contact.nickname\n\t} else {\n\t\treturn `${contact.firstName} ${contact.lastName}`.trim()\n\t}\n}\n\nexport function getContactListName(contact: Contact): string {\n\tlet name = `${contact.firstName} ${contact.lastName}`.trim()\n\n\tif (name.length === 0) {\n\t\tname = contact.company.trim()\n\t}\n\n\treturn name\n}\n\nexport function formatBirthdayNumeric(birthday: Birthday): string {\n\tif (birthday.year) {\n\t\treturn formatDate(new Date(Number(birthday.year), Number(birthday.month) - 1, Number(birthday.day)))\n\t} else {\n\t\t//if no year is specified a leap year is used to allow 2/29 as birthday\n\t\treturn lang.formats.simpleDateWithoutYear.format(new Date(Number(2016), Number(birthday.month) - 1, Number(birthday.day)))\n\t}\n}\n\n/**\n * Returns the given date of the contact as formatted string using default date formatter including date, month and year.\n * If date contains no year only month and day will be included.\n * If there is no date or an invalid birthday format an empty string returns.\n */\nexport function formatContactDate(isoDate: string | null): string {\n\tif (isoDate) {\n\t\ttry {\n\t\t\treturn formatBirthdayNumeric(isoDateToBirthday(isoDate))\n\t\t} catch (e) {\n\t\t\t// cant format, cant do anything\n\t\t}\n\t}\n\n\treturn \"\"\n}\n\nexport function getSocialUrl(contactId: ContactSocialId): string {\n\tlet socialUrlType = \"\"\n\tlet http = \"https://\"\n\tlet worldwidew = \"www.\"\n\n\tconst isSchemePrefixed = contactId.socialId.indexOf(\"http\") !== -1\n\tconst isWwwDotPrefixed = contactId.socialId.indexOf(worldwidew) !== -1\n\n\tif (!isSchemePrefixed && !isWwwDotPrefixed) {\n\t\tswitch (contactId.type) {\n\t\t\tcase ContactSocialType.TWITTER:\n\t\t\t\tsocialUrlType = \"twitter.com/\"\n\t\t\t\tbreak\n\n\t\t\tcase ContactSocialType.FACEBOOK:\n\t\t\t\tsocialUrlType = \"facebook.com/\"\n\t\t\t\tbreak\n\n\t\t\tcase ContactSocialType.XING:\n\t\t\t\tsocialUrlType = \"xing.com/profile/\"\n\t\t\t\tbreak\n\n\t\t\tcase ContactSocialType.LINKED_IN:\n\t\t\t\tsocialUrlType = \"linkedin.com/in/\"\n\t\t}\n\t}\n\n\tif (isSchemePrefixed) {\n\t\thttp = \"\"\n\t}\n\n\tif (isSchemePrefixed || isWwwDotPrefixed) {\n\t\tworldwidew = \"\"\n\t}\n\n\treturn `${http}${worldwidew}${socialUrlType}${contactId.socialId.trim()}`\n}\n\nexport function getWebsiteUrl(websiteUrl: string): string {\n\tlet http = \"https://\"\n\tlet worldwidew = \"www.\"\n\n\tconst isSchemePrefixed = websiteUrl.indexOf(\"http\") !== -1\n\tconst isWwwDotPrefixed = websiteUrl.indexOf(worldwidew) !== -1\n\n\tif (isSchemePrefixed) {\n\t\thttp = \"\"\n\t}\n\n\tif (isSchemePrefixed || isWwwDotPrefixed) {\n\t\tworldwidew = \"\"\n\t}\n\n\treturn `${http}${worldwidew}${websiteUrl}`.trim()\n}\n\nexport function getMessengerHandleUrl(handle: ContactMessengerHandle): string {\n\tconst replaceNumberExp = new RegExp(/[^0-9+]/g)\n\tswitch (handle.type) {\n\t\tcase ContactMessengerHandleType.SIGNAL:\n\t\t\treturn `sgnl://signal.me/#p/${handle.handle.replaceAll(replaceNumberExp, \"\")}`\n\t\tcase ContactMessengerHandleType.WHATSAPP:\n\t\t\treturn `whatsapp://send?phone=${handle.handle.replaceAll(replaceNumberExp, \"\")}`\n\t\tcase ContactMessengerHandleType.TELEGRAM:\n\t\t\treturn `tg://resolve?domain=${handle.handle}`\n\t\tcase ContactMessengerHandleType.DISCORD:\n\t\t\treturn `discord://-/users/${handle.handle}`\n\t\tdefault:\n\t\t\treturn \"\"\n\t}\n}\n\nexport function extractStructuredMailAddresses(addresses: ContactMailAddress[]): ReadonlyArray<StructuredMailAddress> {\n\treturn addresses.map((address) => ({\n\t\taddress: address.address,\n\t\ttype: address.type as ContactAddressType,\n\t\tcustomTypeName: address.customTypeName,\n\t}))\n}\n\nexport function extractStructuredAddresses(addresses: ContactAddress[]): ReadonlyArray<StructuredAddress> {\n\treturn addresses.map((address) => ({\n\t\taddress: address.address,\n\t\ttype: address.type as ContactAddressType,\n\t\tcustomTypeName: address.customTypeName,\n\t}))\n}\n\nexport function extractStructuredPhoneNumbers(numbers: ContactPhoneNumber[]): ReadonlyArray<StructuredPhoneNumber> {\n\treturn numbers.map((number) => ({\n\t\tnumber: number.number,\n\t\ttype: number.type as ContactPhoneNumberType,\n\t\tcustomTypeName: number.customTypeName,\n\t}))\n}\n\nexport function extractStructuredCustomDates(dates: ContactCustomDate[]): ReadonlyArray<StructuredCustomDate> {\n\treturn dates.map((date) => ({\n\t\tdateIso: date.dateIso,\n\t\ttype: date.type as ContactCustomDateType,\n\t\tcustomTypeName: date.customTypeName,\n\t}))\n}\n\nexport function extractStructuredWebsites(websites: ContactWebsite[]): ReadonlyArray<StructuredWebsite> {\n\treturn websites.map((website) => ({\n\t\turl: website.url,\n\t\ttype: website.type as ContactWebsiteType,\n\t\tcustomTypeName: website.customTypeName,\n\t}))\n}\n\nexport function extractStructuredRelationships(relationships: ContactRelationship[]): ReadonlyArray<StructuredRelationship> {\n\treturn relationships.map((relation) => ({\n\t\tperson: relation.person,\n\t\ttype: relation.type as ContactRelationshipType,\n\t\tcustomTypeName: relation.customTypeName,\n\t}))\n}\n\nexport function extractStructuredMessengerHandle(handles: ContactMessengerHandle[]): ReadonlyArray<StructuredMessengerHandle> {\n\treturn handles.map((handle) => ({\n\t\ttype: handle.type as ContactMessengerHandleType,\n\t\tcustomTypeName: handle.customTypeName,\n\t\thandle: handle.handle,\n\t}))\n}\n\nexport function validateBirthdayOfContact(contact: StructuredContact) {\n\tif (contact.birthday != null) {\n\t\ttry {\n\t\t\tisoDateToBirthday(contact.birthday)\n\t\t\treturn contact.birthday\n\t\t} catch (_) {\n\t\t\treturn null\n\t\t}\n\t} else {\n\t\treturn null\n\t}\n}\n"]}