{"version":3,"file":"WhitelabelRegistrationSettings.js","sourceRoot":"","sources":["../../../../../src/common/settings/whitelabel/WhitelabelRegistrationSettings.ts"],"names":[],"mappings":"AAAA,OAAO,CAAiC,MAAM,SAAS,CAAA;AAEvD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oCAAoC,CAAA;AACrE,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAA;AAE9C,OAAO,EAAE,SAAS,EAAE,MAAM,6BAA6B,CAAA;AACvD,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAA;AAWzD,MAAM,OAAO,8BAA8B;IAC1C,YAAY,KAAiD,IAAG,CAAC;IAEjE,IAAI,CAAC,KAAiD;QACrD,MAAM,EAAE,yBAAyB,EAAE,2BAA2B,EAAE,4BAA4B,EAAE,cAAc,EAAE,uBAAuB,EAAE,GAAG,KAAK,CAAC,KAAK,CAAA;QACrJ,OAAO,CAAC,CAAC,EAAE,EAAE;YACZ,IAAI,CAAC,yBAAyB,CAAC,yBAAyB,EAAE,2BAA2B,EAAE,4BAA4B,CAAC;YACpH,IAAI,CAAC,0BAA0B,CAAC,cAAc,EAAE,uBAAuB,CAAC;SACxE,CAAC,CAAA;IACH,CAAC;IAED,yBAAyB,CACxB,yBAAwC,EACxC,2BAA4D,EAC5D,4BAA8D;QAE9D,OAAO,CAAC,CAAC,gBAAgB,EAAE;YAC1B,KAAK,EAAE,yCAAyC;YAChD,aAAa,EAAE,yBAAyB;YACxC,KAAK,EAAE,2BAA2B;YAClC,uBAAuB,EAAE,4BAA4B;gBACpD,CAAC,CAAC,CAAC,aAA4B,EAAE,EAAE;oBACjC,4BAA4B,CAAC,aAAa,CAAC,CAAA;gBAC3C,CAAC;gBACH,CAAC,CAAC,IAAI;YACP,QAAQ,EAAE,CAAC,4BAA4B;SACvC,CAAC,CAAA;IACH,CAAC;IAED,0BAA0B,CAAC,cAAsB,EAAE,uBAA2D;QAC7G,OAAO,CAAC,CAAC,SAAS,EAAE;YACnB,KAAK,EAAE,kCAAkC;YACzC,KAAK,EAAE,cAAc;YACrB,UAAU,EAAE,IAAI;YAChB,eAAe,EAAE,GAAG,EAAE,CACrB,uBAAuB;gBACtB,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE;oBACd,KAAK,EAAE,aAAa;oBACpB,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,uBAAuB,CAAC;oBAC/E,IAAI,yBAAY;oBAChB,IAAI,4BAAoB;iBACvB,CAAC;gBACJ,CAAC,CAAC,IAAI;SACC,CAAC,CAAA;IACZ,CAAC;IAEO,oBAAoB,CAAC,cAAsB,EAAE,uBAAkD;QACtG,MAAM,CAAC,mBAAmB,CAAC;YAC1B,KAAK,EAAE,aAAa;YACpB,KAAK,EAAE,kCAAkC;YACzC,YAAY,EAAE,cAAc;SAC5B,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YACnB,uBAAuB,CAAC,OAAO,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;IACH,CAAC;CACD","sourcesContent":["import m, { Children, Component, Vnode } from \"mithril\"\nimport type { SelectorItemList } from \"../../gui/base/DropDownSelector.js\"\nimport { DropDownSelector } from \"../../gui/base/DropDownSelector.js\"\nimport { Dialog } from \"../../gui/base/Dialog\"\nimport { Icons } from \"../../gui/base/icons/Icons\"\nimport { TextField } from \"../../gui/base/TextField.js\"\nimport { IconButton } from \"../../gui/base/IconButton.js\"\nimport { ButtonSize } from \"../../gui/base/ButtonSize.js\"\n\nexport type WhitelabelRegistrationSettingsAttrs = {\n\twhitelabelCode: string\n\tonWhitelabelCodeChanged: (arg0: string) => unknown\n\tcurrentRegistrationDomain: string | null\n\tpossibleRegistrationDomains: SelectorItemList<string | null>\n\tonRegistrationDomainSelected: (arg0: string | null) => unknown\n}\n\nexport class WhitelabelRegistrationSettings implements Component<WhitelabelRegistrationSettingsAttrs> {\n\tconstructor(vnode: Vnode<WhitelabelRegistrationSettingsAttrs>) {}\n\n\tview(vnode: Vnode<WhitelabelRegistrationSettingsAttrs>): Children {\n\t\tconst { currentRegistrationDomain, possibleRegistrationDomains, onRegistrationDomainSelected, whitelabelCode, onWhitelabelCodeChanged } = vnode.attrs\n\t\treturn m(\"\", [\n\t\t\tthis._renderRegistrationDomain(currentRegistrationDomain, possibleRegistrationDomains, onRegistrationDomainSelected),\n\t\t\tthis._renderWhitelabelCodeField(whitelabelCode, onWhitelabelCodeChanged),\n\t\t])\n\t}\n\n\t_renderRegistrationDomain(\n\t\tcurrentRegistrationDomain: string | null,\n\t\tpossibleRegistrationDomains: SelectorItemList<string | null>,\n\t\tonRegistrationDomainSelected: (arg0: string | null) => unknown,\n\t): Children {\n\t\treturn m(DropDownSelector, {\n\t\t\tlabel: \"whitelabelRegistrationEmailDomain_label\",\n\t\t\tselectedValue: currentRegistrationDomain,\n\t\t\titems: possibleRegistrationDomains,\n\t\t\tselectionChangedHandler: onRegistrationDomainSelected\n\t\t\t\t? (selectedValue: string | null) => {\n\t\t\t\t\t\tonRegistrationDomainSelected(selectedValue)\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\t\tdisabled: !onRegistrationDomainSelected,\n\t\t})\n\t}\n\n\t_renderWhitelabelCodeField(whitelabelCode: string, onWhitelabelCodeChanged: ((arg0: string) => unknown) | null): Children {\n\t\treturn m(TextField, {\n\t\t\tlabel: \"whitelabelRegistrationCode_label\",\n\t\t\tvalue: whitelabelCode,\n\t\t\tisReadOnly: true,\n\t\t\tinjectionsRight: () =>\n\t\t\t\tonWhitelabelCodeChanged\n\t\t\t\t\t? m(IconButton, {\n\t\t\t\t\t\t\ttitle: \"edit_action\",\n\t\t\t\t\t\t\tclick: () => this.editRegistrationCode(whitelabelCode, onWhitelabelCodeChanged),\n\t\t\t\t\t\t\ticon: Icons.Edit,\n\t\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t  })\n\t\t\t\t\t: null,\n\t\t} as const)\n\t}\n\n\tprivate editRegistrationCode(whitelabelCode: string, onWhitelabelCodeChanged: (arg0: string) => unknown) {\n\t\tDialog.showTextInputDialog({\n\t\t\ttitle: \"edit_action\",\n\t\t\tlabel: \"whitelabelRegistrationCode_label\",\n\t\t\tdefaultValue: whitelabelCode,\n\t\t}).then((newCode) => {\n\t\t\tonWhitelabelCodeChanged(newCode)\n\t\t})\n\t}\n}\n"]}