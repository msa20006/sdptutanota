{"version":3,"file":"CustomColorsEditorViewModel.js","sourceRoot":"","sources":["../../../../../src/common/settings/whitelabel/CustomColorsEditorViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { assertMainOrNode } from \"../../api/common/Env\"\nimport type { BaseThemeId, Theme } from \"../../gui/theme\"\nimport { assertNotNull, clone, debounceStart, downcast } from \"@tutao/tutanota-utils\"\nimport type { DomainInfo, WhitelabelConfig } from \"../../api/entities/sys/TypeRefs.js\"\nimport { isValidColorCode } from \"../../gui/base/Color\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport type { CustomizationKey, ThemeCustomizations, ThemeKey } from \"../../misc/WhitelabelCustomizations\"\nimport { ThemeController } from \"../../gui/ThemeController\"\nimport { EntityClient } from \"../../api/common/EntityClient\"\nimport type { LoginController } from \"../../api/main/LoginController\"\n\nassertMainOrNode()\nexport type CustomColor = {\n\tname: ThemeKey\n\tvalue: string\n\tdefaultValue: string\n\tvalid: boolean\n}\n\nexport class CustomColorsEditorViewModel {\n\tprivate _customizations: ThemeCustomizations\n\tprivate readonly _whitelabelConfig: WhitelabelConfig\n\tprivate readonly _whitelabelDomainInfo: DomainInfo\n\tprivate _accentColor!: string\n\tprivate _baseTheme!: BaseThemeId\n\tprivate readonly _themeController: ThemeController\n\tprivate readonly _entityClient: EntityClient\n\tprivate readonly _loginController: LoginController\n\tprivate readonly _themeBeforePreview: Theme\n\treadonly builtTheme: Stream<Theme>\n\n\tconstructor(\n\t\tcurrentTheme: Theme,\n\t\tthemeCustomizations: ThemeCustomizations,\n\t\twhitelabelConfig: WhitelabelConfig,\n\t\twhitelabelDomainInfo: DomainInfo,\n\t\tthemeController: ThemeController,\n\t\tentityClient: EntityClient,\n\t\tloginController: LoginController,\n\t) {\n\t\tthis._themeBeforePreview = Object.freeze(currentTheme)\n\t\tthis._customizations = clone(themeCustomizations)\n\t\tthis._whitelabelDomainInfo = whitelabelDomainInfo\n\t\tthis._whitelabelConfig = whitelabelConfig\n\t\tthis._themeController = themeController\n\t\tthis._entityClient = entityClient\n\t\tthis._loginController = loginController\n\t\tthis.builtTheme = stream()\n\t\tconst baseThemeId = themeCustomizations.base ?? \"light\"\n\n\t\tconst accentColor = themeCustomizations.content_accent ?? this._themeController.getDefaultTheme().content_accent\n\n\t\tthis.changeBaseTheme(baseThemeId)\n\t\tthis.changeAccentColor(accentColor)\n\t}\n\n\tinit() {\n\t\tthis._applyEditedTheme()\n\t}\n\n\tget customColors(): ReadonlyArray<CustomColor> {\n\t\tconst base = this._themeController.getBaseTheme(this.baseThemeId)\n\n\t\treturn Object.keys(base)\n\t\t\t.map((key) => key as CustomizationKey)\n\t\t\t.filter((name) => !this._shallBeExcluded(name))\n\t\t\t.map((key) => key as ThemeKey)\n\t\t\t.sort((a, b) => a.localeCompare(b))\n\t\t\t.map((key) => {\n\t\t\t\tconst value = this._customizations[key] ?? \"\"\n\t\t\t\t// @ts-ignore we already checked that it's safe\n\t\t\t\tconst defaultValue = base[key]\n\t\t\t\treturn {\n\t\t\t\t\tname: key,\n\t\t\t\t\tvalue,\n\t\t\t\t\tdefaultValue: assertNotNull(defaultValue),\n\t\t\t\t\tvalid: this._isValidColorValue(value),\n\t\t\t\t}\n\t\t\t})\n\t}\n\n\tget accentColor(): string {\n\t\treturn this._accentColor\n\t}\n\n\tget customizations(): ThemeCustomizations {\n\t\treturn this._customizations\n\t}\n\n\tget baseThemeId(): BaseThemeId {\n\t\treturn this._baseTheme\n\t}\n\n\tgetDefaultColor(colorName: ThemeKey): string {\n\t\treturn assertNotNull(this._themeController.getBaseTheme(this.baseThemeId)[colorName])\n\t}\n\n\tchangeAccentColor(accentColor: string) {\n\t\tthis._accentColor = accentColor\n\t\tthis.addCustomization(\"list_accent_fg\", accentColor)\n\t\tthis.addCustomization(\"content_accent\", accentColor)\n\t\tthis.addCustomization(\"content_button_selected\", accentColor)\n\t\tthis.addCustomization(\"navigation_button_selected\", accentColor)\n\t\tthis.addCustomization(\"header_button_selected\", accentColor)\n\n\t\tthis._applyEditedTheme()\n\t}\n\n\tchangeBaseTheme(baseThemeId: BaseThemeId) {\n\t\tthis._baseTheme = baseThemeId\n\t\tthis.addCustomization(\"base\", baseThemeId)\n\n\t\tthis._applyEditedTheme()\n\t}\n\n\t/**\n\t * Try to save changes. if there are invalid color values in the theme doesn't save and returns false, else saves and returns true\n\t */\n\tasync save(): Promise<boolean> {\n\t\tconst colors = Object.keys(this.customizations).filter((name) => name !== \"logo\" && name !== \"themeId\" && name !== \"base\") as CustomizationKey[]\n\n\t\tfor (let i = 0; i < colors.length; i++) {\n\t\t\tif (!this._isValidColorValue(this.customizations[colors[i]] ?? \"\")) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\tthis.addCustomization(\"themeId\", this._whitelabelDomainInfo.domain)\n\t\tthis._whitelabelConfig.jsonTheme = JSON.stringify(this.customizations)\n\t\tawait this._entityClient.update(this._whitelabelConfig)\n\n\t\tif (!this._loginController.isWhitelabel()) {\n\t\t\tawait this.resetActiveClientTheme()\n\t\t}\n\n\t\treturn true\n\t}\n\n\tasync resetActiveClientTheme(): Promise<void> {\n\t\tawait this._themeController.applyCustomizations(\n\t\t\tdowncast(\n\t\t\t\tObject.assign(\n\t\t\t\t\t{},\n\t\t\t\t\t{\n\t\t\t\t\t\tbase: null,\n\t\t\t\t\t},\n\t\t\t\t\tthis._themeBeforePreview,\n\t\t\t\t),\n\t\t\t),\n\t\t\tfalse,\n\t\t)\n\t}\n\n\taddCustomization(nameOfKey: CustomizationKey, colorValue: string) {\n\t\t// @ts-ignore it's pretty hard to define what we want\n\t\tthis.customizations[nameOfKey] = colorValue\n\n\t\tthis._applyEditedTheme()\n\t}\n\n\t_isValidColorValue(colorValue: string): boolean {\n\t\treturn isValidColorCode(colorValue.trim()) || colorValue.trim() === \"\"\n\t}\n\n\t/**\n\t * These values shall be excluded when rendering the advanced TextFields\n\t * @return boolean, true iff provided parameter 'name' shall be excluded\n\t */\n\t_shallBeExcluded(name: CustomizationKey): boolean {\n\t\tconst excludedColors = [\n\t\t\t\"logo\",\n\t\t\t\"themeId\",\n\t\t\t\"base\",\n\t\t\t\"list_accent_fg\",\n\t\t\t\"content_button_selected\",\n\t\t\t\"navigation_button_selected\",\n\t\t\t\"header_button_selected\",\n\t\t\t\"content_accent\",\n\t\t\t\"content_accent_cyber_monday\",\n\t\t\t\"content_bg_cyber_monday\",\n\t\t\t\"content_border_cyber_monday\",\n\t\t]\n\t\treturn excludedColors.includes(name)\n\t}\n\n\t_applyEditedTheme: () => void = debounceStart(100, () => {\n\t\tthis._removeEmptyCustomizations()\n\n\t\tthis._themeController.applyCustomizations(this._filterAndReturnCustomizations(), false)\n\t})\n\n\t_removeEmptyCustomizations() {\n\t\tthis._customizations = downcast(Object.fromEntries(Object.entries(this.customizations).filter(([k, v]) => v !== \"\")))\n\t}\n\n\t/**\n\t *  filters out all invalid color values from ThemeCustomizations whilst keeping logo, base and themeId\n\t */\n\t_filterAndReturnCustomizations(): ThemeCustomizations {\n\t\tconst colorValues = Object.entries(this.customizations).filter(([n, v]) => n !== \"themeId\" && n !== \"base\" && n !== \"logo\")\n\t\tconst filteredColorValues = colorValues.filter(([n, v]) => this._isValidColorValue(downcast(v)))\n\t\tfor (const [n, v] of Object.entries(this.customizations)) {\n\t\t\tif (n === \"themeId\" || n === \"base\" || n === \"logo\") {\n\t\t\t\tfilteredColorValues.push([n, v])\n\t\t\t}\n\t\t}\n\t\treturn downcast(Object.fromEntries(filteredColorValues))\n\t}\n}\n"]}