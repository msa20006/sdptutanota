{"version":3,"file":"tutanota-v74.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/offline/migrations/tutanota-v74.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,QAAQ,EAAE,qBAAqB,EAAE,kBAAkB,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAA;AACtH,OAAO,EAAE,oBAAoB,EAAE,UAAU,EAAE,aAAa,EAAE,cAAc,EAAE,iBAAiB,EAAE,WAAW,EAAE,MAAM,wCAAwC,CAAA;AACxJ,OAAO,EAAE,gBAAgB,EAAE,MAAM,sCAAsC,CAAA;AAEvE,MAAM,CAAC,MAAM,UAAU,GAAqB;IAC3C,GAAG,EAAE,UAAU;IACf,OAAO,EAAE,EAAE;IACX,KAAK,CAAC,OAAO,CAAC,OAAuB;QACpC,wEAAwE;QACxE,MAAM,sBAAsB,CAAC,iBAAiB,EAAE,OAAO,EAAE;YACxD,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC;YAC1B,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC;YAC5B,QAAQ,CAAC,SAAS,EAAE,gBAAgB,CAAC;SACrC,CAAC,CAAA;QACF,MAAM,kBAAkB,CAAC,cAAc,EAAE,OAAO,EAAE,CAAC,aAAa,CAAC,CAAC,CAAA,CAAC,sBAAsB;QACzF,MAAM,sBAAsB,CAAC,WAAW,EAAE,OAAO,EAAE,CAAC,UAAU,CAAC,CAAC,CAAA,CAAC,kBAAkB;QAEnF,gJAAgJ;QAChJ,2GAA2G;QAC3G,yFAAyF;QACzF,MAAM,qBAAqB,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAA;IAC3D,CAAC;CACD,CAAA","sourcesContent":["import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { addValue, deleteInstancesOfType, migrateAllElements, migrateAllListElements } from \"../StandardMigrations.js\"\nimport { CalendarEventTypeRef, createMail, createMailBox, MailBoxTypeRef, MailFolderTypeRef, MailTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { GENERATED_MIN_ID } from \"../../../common/utils/EntityUtils.js\"\n\nexport const tutanota74: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 74,\n\tasync migrate(storage: OfflineStorage) {\n\t\t// the TutanotaModelV74 introduces MailSets to support import and labels\n\t\tawait migrateAllListElements(MailFolderTypeRef, storage, [\n\t\t\taddValue(\"isLabel\", false),\n\t\t\taddValue(\"isMailSet\", false),\n\t\t\taddValue(\"entries\", GENERATED_MIN_ID),\n\t\t])\n\t\tawait migrateAllElements(MailBoxTypeRef, storage, [createMailBox]) // initialize mailbags\n\t\tawait migrateAllListElements(MailTypeRef, storage, [createMail]) // initialize sets\n\n\t\t// we need to delete all CalendarEvents since we changed the format for storing customIds (CalendarEvents use customIds) in the offline database\n\t\t// all entities with customIds, that are stored in the offline database (e.g. CalendarEvent, MailSetEntry),\n\t\t// are from now on stored in the offline database using a **base64Ext** encoded id string\n\t\tawait deleteInstancesOfType(storage, CalendarEventTypeRef)\n\t},\n}\n"]}