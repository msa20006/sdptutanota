{"version":3,"file":"RecoverLoginDialog.js","sourceRoot":"","sources":["../../../../../src/common/login/recover/RecoverLoginDialog.ts"],"names":[],"mappings":"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","sourcesContent":["import m from \"mithril\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { AccessBlockedError, AccessDeactivatedError, NotAuthenticatedError, TooManyRequestsError } from \"../../api/common/error/RestError\"\nimport { showProgressDialog } from \"../../gui/dialogs/ProgressDialog\"\nimport { isMailAddress } from \"../../misc/FormatValidator.js\"\nimport { Autocomplete, TextField, TextFieldType } from \"../../gui/base/TextField.js\"\nimport { lang } from \"../../misc/LanguageViewModel.js\"\nimport { PasswordForm, PasswordModel } from \"../../settings/PasswordForm.js\"\nimport { Icons } from \"../../gui/base/icons/Icons\"\nimport { Dialog, DialogType } from \"../../gui/base/Dialog\"\nimport { HtmlEditor, HtmlEditorMode } from \"../../gui/editor/HtmlEditor\"\nimport { client } from \"../../misc/ClientDetector.js\"\nimport { CancelledError } from \"../../api/common/error/CancelledError\"\nimport { locator } from \"../../api/main/CommonLocator\"\nimport { windowFacade } from \"../../misc/WindowFacade.js\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { createDropdown, DropdownButtonAttrs } from \"../../gui/base/Dropdown.js\"\nimport { IconButton, IconButtonAttrs } from \"../../gui/base/IconButton.js\"\nimport { ButtonSize } from \"../../gui/base/ButtonSize.js\"\nimport { PasswordField } from \"../../misc/passwords/PasswordField.js\"\n\nassertMainOrNode()\nexport type ResetAction = \"password\" | \"secondFactor\"\n\nexport function show(mailAddress?: string | null, resetAction?: ResetAction): Dialog {\n\tconst selectedAction: Stream<ResetAction | null> = stream(resetAction ?? null)\n\tconst passwordModel = new PasswordModel(locator.usageTestController, locator.logins, { checkOldPassword: false, enforceStrength: true })\n\tconst passwordValueStream = stream(\"\")\n\tconst emailAddressStream = stream(mailAddress || \"\")\n\tconst resetPasswordAction: DropdownButtonAttrs = {\n\t\tlabel: \"recoverSetNewPassword_action\",\n\t\tclick: () => selectedAction(\"password\"),\n\t}\n\tconst resetSecondFactorAction: DropdownButtonAttrs = {\n\t\tlabel: \"recoverResetFactors_action\",\n\t\tclick: () => selectedAction(\"secondFactor\"),\n\t}\n\tconst resetActionClickHandler = createDropdown({\n\t\tlazyButtons: () => [resetPasswordAction, resetSecondFactorAction],\n\t\twidth: 300,\n\t})\n\tconst resetActionButtonAttrs: IconButtonAttrs = {\n\t\ttitle: \"action_label\",\n\t\tclick: resetActionClickHandler,\n\t\ticon: Icons.Edit,\n\t\tsize: ButtonSize.Compact,\n\t}\n\tconst selectedValueLabelStream = selectedAction.map((v) => {\n\t\tif (v === \"password\") {\n\t\t\treturn lang.get(\"recoverSetNewPassword_action\")\n\t\t} else if (v === \"secondFactor\") {\n\t\t\treturn lang.get(\"recoverResetFactors_action\")\n\t\t} else {\n\t\t\treturn lang.get(\"choose_label\")\n\t\t}\n\t})\n\tconst editor = new HtmlEditor(\"recoveryCode_label\")\n\teditor.setMode(HtmlEditorMode.HTML)\n\teditor.setHtmlMonospace(true)\n\teditor.setMinHeight(80)\n\teditor.showBorders()\n\tconst recoverDialog = Dialog.showActionDialog({\n\t\ttitle: \"recover_label\",\n\t\ttype: DialogType.EditSmall,\n\t\tchild: {\n\t\t\tview: () => {\n\t\t\t\treturn [\n\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\tlabel: \"mailAddress_label\",\n\t\t\t\t\t\tvalue: emailAddressStream(),\n\t\t\t\t\t\tautocompleteAs: Autocomplete.email,\n\t\t\t\t\t\ttype: TextFieldType.Email,\n\t\t\t\t\t\toninput: emailAddressStream,\n\t\t\t\t\t}),\n\t\t\t\t\tm(editor),\n\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\tlabel: \"action_label\",\n\t\t\t\t\t\tvalue: selectedValueLabelStream(),\n\t\t\t\t\t\toninput: selectedValueLabelStream,\n\t\t\t\t\t\tinjectionsRight: () => m(IconButton, resetActionButtonAttrs),\n\t\t\t\t\t\tisReadOnly: true,\n\t\t\t\t\t}),\n\t\t\t\t\tselectedAction() == null\n\t\t\t\t\t\t? null\n\t\t\t\t\t\t: selectedAction() === \"password\"\n\t\t\t\t\t\t? m(PasswordForm, { model: passwordModel })\n\t\t\t\t\t\t: m(PasswordField, {\n\t\t\t\t\t\t\t\tvalue: passwordValueStream(),\n\t\t\t\t\t\t\t\tautocompleteAs: Autocomplete.currentPassword,\n\t\t\t\t\t\t\t\toninput: passwordValueStream,\n\t\t\t\t\t\t  }),\n\t\t\t\t]\n\t\t\t},\n\t\t},\n\t\tokAction: async () => {\n\t\t\tconst cleanMailAddress = emailAddressStream().trim().toLowerCase()\n\t\t\tconst cleanRecoverCodeValue = editor.getValue().replace(/\\s/g, \"\").toLowerCase()\n\n\t\t\tif (!isMailAddress(cleanMailAddress, true)) {\n\t\t\t\tDialog.message(\"mailAddressInvalid_msg\")\n\t\t\t} else if (cleanRecoverCodeValue === \"\") {\n\t\t\t\tDialog.message(\"recoveryCodeEmpty_msg\")\n\t\t\t} else if (selectedAction() === \"password\") {\n\t\t\t\tconst errorMessageId = passwordModel.getErrorMessageId()\n\n\t\t\t\tif (errorMessageId) {\n\t\t\t\t\tDialog.message(errorMessageId)\n\t\t\t\t} else {\n\t\t\t\t\tshowProgressDialog(\n\t\t\t\t\t\t\"pleaseWait_msg\",\n\t\t\t\t\t\tlocator.loginFacade.recoverLogin(cleanMailAddress, cleanRecoverCodeValue, passwordModel.getNewPassword(), client.getIdentifier()),\n\t\t\t\t\t)\n\t\t\t\t\t\t.then(async () => {\n\t\t\t\t\t\t\trecoverDialog.close()\n\t\t\t\t\t\t\tawait deleteCredentialsByMailAddress(cleanMailAddress)\n\t\t\t\t\t\t\twindowFacade.reload({})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((e) => handleError(e))\n\t\t\t\t\t\t.finally(() => locator.secondFactorHandler.closeWaitingForSecondFactorDialog())\n\t\t\t\t}\n\t\t\t} else if (selectedAction() === \"secondFactor\") {\n\t\t\t\tconst passwordValue = passwordValueStream()\n\t\t\t\tshowProgressDialog(\"pleaseWait_msg\", locator.loginFacade.resetSecondFactors(cleanMailAddress, passwordValue, cleanRecoverCodeValue))\n\t\t\t\t\t.then(async () => {\n\t\t\t\t\t\trecoverDialog.close()\n\t\t\t\t\t\tawait deleteCredentialsByMailAddress(cleanMailAddress)\n\t\t\t\t\t\twindowFacade.reload({})\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => handleError(e))\n\t\t\t}\n\t\t},\n\t\tcancelAction: () =>\n\t\t\tm.route.set(\"/login\", {\n\t\t\t\tnoAutoLogin: true,\n\t\t\t}),\n\t})\n\treturn recoverDialog\n}\n\nasync function deleteCredentialsByMailAddress(cleanMailAddress: string) {\n\tconst allCredentials = await locator.credentialsProvider.getInternalCredentialsInfos()\n\tconst credentials = allCredentials.find((c) => c.login === cleanMailAddress)\n\n\tif (credentials) {\n\t\tawait locator.credentialsProvider.deleteByUserId(credentials.userId)\n\t}\n}\n\nfunction handleError(e: Error) {\n\tif (e instanceof NotAuthenticatedError) {\n\t\tDialog.message(\"loginFailed_msg\")\n\t} else if (e instanceof AccessBlockedError || e instanceof AccessDeactivatedError) {\n\t\tDialog.message(\"loginFailedOften_msg\")\n\t} else if (e instanceof CancelledError) {\n\t\t// Thrown when second factor dialog is cancelled\n\t\tm.redraw()\n\t} else if (e instanceof TooManyRequestsError) {\n\t\tDialog.message(\"tooManyAttempts_msg\")\n\t} else {\n\t\tthrow e\n\t}\n}\n"]}