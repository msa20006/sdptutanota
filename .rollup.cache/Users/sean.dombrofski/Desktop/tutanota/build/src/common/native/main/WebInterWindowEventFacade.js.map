{"version":3,"file":"WebInterWindowEventFacade.js","sourceRoot":"","sources":["../../../../../src/common/native/main/WebInterWindowEventFacade.ts"],"names":[],"mappings":"AAKA;;GAEG;AACH,MAAM,OAAO,yBAAyB;IACR;IAA0C;IAA6C;IAApH,YAA6B,MAAuB,EAAmB,YAA0B,EAAmB,YAA0B;QAAjH,WAAM,GAAN,MAAM,CAAiB;QAAmB,iBAAY,GAAZ,YAAY,CAAc;QAAmB,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAElJ,KAAK,CAAC,wBAAwB,CAAC,MAAc;QAC5C,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,MAAM,EAAE,CAAC;YACvF,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;YAC/B,mDAAmD;YACnD,uCAAuC;YACvC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;QAC9E,CAAC;IACF,CAAC;IAED,KAAK,CAAC,kBAAkB;QACvB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAA;IACzB,CAAC;CACD","sourcesContent":["import { InterWindowEventFacade } from \"../common/generatedipc/InterWindowEventFacade.js\"\nimport { LoginController } from \"../../api/main/LoginController.js\"\nimport { WindowFacade } from \"../../misc/WindowFacade.js\"\nimport { DeviceConfig } from \"../../misc/DeviceConfig.js\"\n\n/**\n * receiving side of the InterWindowEventBus\n */\nexport class WebInterWindowEventFacade implements InterWindowEventFacade {\n\tconstructor(private readonly logins: LoginController, private readonly windowFacade: WindowFacade, private readonly deviceConfig: DeviceConfig) {}\n\n\tasync localUserDataInvalidated(userId: string): Promise<void> {\n\t\tif (this.logins.isUserLoggedIn() && userId === this.logins.getUserController().userId) {\n\t\t\tawait this.logins.logout(false)\n\t\t\t// we don't want to reload before returning because\n\t\t\t// someone is waiting for our response.\n\t\t\tPromise.resolve().then(() => this.windowFacade.reload({ noAutoLogin: true }))\n\t\t}\n\t}\n\n\tasync reloadDeviceConfig(): Promise<void> {\n\t\tthis.deviceConfig.init()\n\t}\n}\n"]}