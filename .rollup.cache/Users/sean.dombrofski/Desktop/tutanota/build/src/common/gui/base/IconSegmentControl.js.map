{"version":3,"file":"IconSegmentControl.js","sourceRoot":"","sources":["../../../../../src/common/gui/base/IconSegmentControl.ts"],"names":[],"mappings":"AAAA,OAAO,CAAiC,MAAM,SAAS,CAAA;AACvD,OAAO,EAAY,IAAI,EAAE,QAAQ,EAAE,MAAM,WAAW,CAAA;AACpD,OAAO,EAAE,IAAI,EAAoB,MAAM,iCAAiC,CAAA;AACxE,OAAO,EAAe,SAAS,EAAE,MAAM,aAAa,CAAA;AACpD,OAAO,EAAE,EAAE,EAAE,MAAM,YAAY,CAAA;AAe/B;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAC9B,IAAI,CAAC,KAAwC;QAC5C,OAAO;YACN,CAAC,CACA,yCAAyC,EACzC;gBACC,IAAI,EAAE,SAAS;aACf,EACD,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBACjD,OAAO,CAAC,CACP,sHAAsH,EACtH;oBACC,MAAM,EAAE,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;oBACrE,KAAK;oBACL,IAAI,EAAE,KAAK;oBACX,YAAY,EAAE,KAAK;oBACnB,eAAe,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC;oBACjE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC;oBACjD,KAAK,EAAE;wBACN,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI;wBACxE,kFAAkF;wBAClF,8GAA8G;wBAC9G,cAAc,EAAE,aAAa;qBAC7B;iBACD,EACD,CAAC,CAAC,IAAI,EAAE;oBACP,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,SAAS,EAAE,KAAK;oBAChB,KAAK,EAAE,UAAU;oBACjB,IAAI,EAAE,QAAQ,CAAC,MAAM;oBACrB,KAAK,EAAE;wBACN,IAAI,EAAE,SAAS,qCAAqB,CAAC,MAAM;qBAC3C;iBACD,CAAC,CACF,CAAA;YACF,CAAC,CAAC,CACF;SACD,CAAA;IACF,CAAC;IAEO,UAAU,CAAC,IAA+B,EAAE,KAAiC;QACpF,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,aAAa,EAAE,CAAC;YACxC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAClC,CAAC;IACF,CAAC;CACD","sourcesContent":["import m, { Children, Component, Vnode } from \"mithril\"\nimport { AllIcons, Icon, IconSize } from \"./Icon.js\"\nimport { lang, MaybeTranslation } from \"../../misc/LanguageViewModel.js\"\nimport { ButtonColor, getColors } from \"./Button.js\"\nimport { px } from \"../size.js\"\n\nexport interface IconSegmentControlItem<T> {\n\ticon: AllIcons\n\tlabel: MaybeTranslation\n\tvalue: T\n}\n\nexport interface IconSegmentControlAttrs<T> {\n\tselectedValue: T\n\tonValueSelected: (_: T) => unknown\n\titems: IconSegmentControlItem<T>[]\n\tmaxItemWidth?: number\n}\n\n/**\n * Selector for a few options with one option selected.\n */\nexport class IconSegmentControl<T> implements Component<IconSegmentControlAttrs<T>> {\n\tview(vnode: Vnode<IconSegmentControlAttrs<T>>): Children {\n\t\treturn [\n\t\t\tm(\n\t\t\t\t\".icon-segment-control.flex.items-center\",\n\t\t\t\t{\n\t\t\t\t\trole: \"tablist\",\n\t\t\t\t},\n\t\t\t\tvnode.attrs.items.map((item) => {\n\t\t\t\t\tconst title = lang.getTranslationText(item.label)\n\t\t\t\t\treturn m(\n\t\t\t\t\t\t\"button.icon-segment-control-item.flex.center-horizontally.center-vertically.text-ellipsis.small.state-bg.pt-xs.pb-xs\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactive: item.value === vnode.attrs.selectedValue ? \"true\" : undefined,\n\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\trole: \"tab\",\n\t\t\t\t\t\t\t\"aria-label\": title,\n\t\t\t\t\t\t\t\"aria-selected\": String(item.value === vnode.attrs.selectedValue),\n\t\t\t\t\t\t\tonclick: () => this.onSelected(item, vnode.attrs),\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tmaxWidth: vnode.attrs.maxItemWidth ? px(vnode.attrs.maxItemWidth) : null,\n\t\t\t\t\t\t\t\t// need to specify explicitly because setting \"background\" e.g. on hover resets it\n\t\t\t\t\t\t\t\t// we need it because stateBgHover background has transparency and when it overlaps the border it looks wrong.\n\t\t\t\t\t\t\t\tbackgroundClip: \"padding-box\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tm(Icon, {\n\t\t\t\t\t\t\ticon: item.icon,\n\t\t\t\t\t\t\tcontainer: \"div\",\n\t\t\t\t\t\t\tclass: \"center-h\",\n\t\t\t\t\t\t\tsize: IconSize.Medium,\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tfill: getColors(ButtonColor.Content).button,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t}),\n\t\t\t),\n\t\t]\n\t}\n\n\tprivate onSelected(item: IconSegmentControlItem<T>, attrs: IconSegmentControlAttrs<T>) {\n\t\tif (item.value !== attrs.selectedValue) {\n\t\t\tattrs.onValueSelected(item.value)\n\t\t}\n\t}\n}\n"]}