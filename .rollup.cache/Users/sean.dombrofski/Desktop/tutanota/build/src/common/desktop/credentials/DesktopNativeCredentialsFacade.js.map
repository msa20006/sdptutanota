{"version":3,"file":"DesktopNativeCredentialsFacade.js","sourceRoot":"","sources":["../../../../../src/common/desktop/credentials/DesktopNativeCredentialsFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { CredentialEncryptionMode } from \"../../misc/credentials/CredentialEncryptionMode.js\"\nimport { DesktopNativeCryptoFacade } from \"../DesktopNativeCryptoFacade\"\nimport { stringToUtf8Uint8Array, utf8Uint8ArrayToString } from \"@tutao/tutanota-utils\"\nimport { NativeCredentialsFacade } from \"../../native/common/generatedipc/NativeCredentialsFacade.js\"\nimport { BitArray, bitArrayToUint8Array, uint8ArrayToBitArray } from \"@tutao/tutanota-crypto\"\nimport { KeyPermanentlyInvalidatedError } from \"../../api/common/error/KeyPermanentlyInvalidatedError.js\"\nimport { PersistedCredentials } from \"../../native/common/generatedipc/PersistedCredentials.js\"\nimport { DesktopCredentialsStorage } from \"../db/DesktopCredentialsStorage.js\"\nimport { UnencryptedCredentials } from \"../../native/common/generatedipc/UnencryptedCredentials.js\"\nimport { assertDesktopEncryptionMode, assertSupportedEncryptionMode, DesktopCredentialsMode, SUPPORTED_MODES } from \"./CredentialCommons.js\"\nimport { KeychainEncryption } from \"./KeychainEncryption.js\"\n\n/**\n * Native storage will transparently encrypt and decrypt database key and access token during load and store calls.\n */\nexport class DesktopNativeCredentialsFacade implements NativeCredentialsFacade {\n\tconstructor(\n\t\tprivate readonly crypto: DesktopNativeCryptoFacade,\n\t\tprivate readonly credentialDb: DesktopCredentialsStorage,\n\t\tprivate readonly keychainEncryption: KeychainEncryption,\n\t) {}\n\n\tasync getSupportedEncryptionModes(): Promise<ReadonlyArray<DesktopCredentialsMode>> {\n\t\treturn SUPPORTED_MODES\n\t}\n\n\tasync deleteByUserId(id: string): Promise<void> {\n\t\tthis.credentialDb.deleteByUserId(id)\n\t}\n\n\tasync getCredentialEncryptionMode(): Promise<CredentialEncryptionMode | null> {\n\t\treturn this.credentialDb.getCredentialEncryptionMode()\n\t}\n\n\tprivate getDesktopCredentialEncryptionMode(): DesktopCredentialsMode | null {\n\t\tconst retVal = this.credentialDb.getCredentialEncryptionMode()\n\t\treturn retVal ? CredentialEncryptionMode[retVal as DesktopCredentialsMode] : null\n\t}\n\n\tasync loadAll(): Promise<ReadonlyArray<PersistedCredentials>> {\n\t\treturn this.credentialDb.getAllCredentials()\n\t}\n\n\tasync loadByUserId(id: string): Promise<UnencryptedCredentials | null> {\n\t\tconst credentialsKey = await this.getCredentialsEncryptionKey()\n\t\tif (credentialsKey == null) {\n\t\t\tthrow new KeyPermanentlyInvalidatedError(\"Credentials key is missing, cannot decrypt credentials\")\n\t\t}\n\t\tconst encryptedCredentials = this.credentialDb.getCredentialsByUserId(id)\n\t\treturn encryptedCredentials ? this.decryptCredentials(encryptedCredentials, credentialsKey) : null\n\t}\n\n\tprivate decryptCredentials(persistedCredentials: PersistedCredentials, credentialsKey: BitArray): UnencryptedCredentials {\n\t\ttry {\n\t\t\treturn {\n\t\t\t\tcredentialInfo: persistedCredentials.credentialInfo,\n\t\t\t\tencryptedPassword: persistedCredentials.encryptedPassword,\n\t\t\t\taccessToken: utf8Uint8ArrayToString(this.crypto.aesDecryptBytes(credentialsKey, persistedCredentials.accessToken)),\n\t\t\t\tdatabaseKey: persistedCredentials.databaseKey ? this.crypto.aesDecryptBytes(credentialsKey, persistedCredentials.databaseKey) : null,\n\t\t\t\tencryptedPassphraseKey: persistedCredentials.encryptedPassphraseKey,\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthrow new KeyPermanentlyInvalidatedError(\"Failed AES decrypt: \" + e)\n\t\t}\n\t}\n\n\tprivate encryptCredentials(unencryptedCredentials: UnencryptedCredentials, credentialsEncryptionKey: BitArray): PersistedCredentials {\n\t\treturn {\n\t\t\tcredentialInfo: unencryptedCredentials.credentialInfo,\n\t\t\taccessToken: this.crypto.aesEncryptBytes(credentialsEncryptionKey, stringToUtf8Uint8Array(unencryptedCredentials.accessToken)),\n\t\t\tdatabaseKey: unencryptedCredentials.databaseKey ? this.crypto.aesEncryptBytes(credentialsEncryptionKey, unencryptedCredentials.databaseKey) : null,\n\t\t\tencryptedPassphraseKey: unencryptedCredentials.encryptedPassphraseKey,\n\t\t\tencryptedPassword: unencryptedCredentials.encryptedPassword,\n\t\t}\n\t}\n\n\tasync setCredentialEncryptionMode(encryptionMode: CredentialEncryptionMode): Promise<void> {\n\t\tassertDesktopEncryptionMode(encryptionMode)\n\t\tconst decryptedKey = await this.getOrCreateCredentialEncryptionKey()\n\t\tconst encryptedKey = await this.keychainEncryption.encryptUsingKeychain(bitArrayToUint8Array(decryptedKey), encryptionMode)\n\t\tthis.credentialDb.setCredentialEncryptionMode(encryptionMode)\n\t\tthis.credentialDb.setCredentialEncryptionKey(encryptedKey)\n\t}\n\n\tasync store(credentials: UnencryptedCredentials): Promise<void> {\n\t\tconst credentialsEncryptionKey = await this.getOrCreateCredentialEncryptionKey()\n\t\tconst encryptedCredentials: PersistedCredentials = this.encryptCredentials(credentials, credentialsEncryptionKey)\n\t\treturn this.storeEncrypted(encryptedCredentials)\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tthis.credentialDb.deleteAllCredentials()\n\t\tthis.credentialDb.setCredentialEncryptionKey(null)\n\t\tthis.credentialDb.setCredentialEncryptionMode(null)\n\t}\n\n\tasync migrateToNativeCredentials(credentials: ReadonlyArray<PersistedCredentials>, encryptionMode: CredentialEncryptionMode, credentialsKey: Uint8Array) {\n\t\t// store persistedCredentials, key & mode\n\t\tassertSupportedEncryptionMode(encryptionMode as DesktopCredentialsMode)\n\t\tthis.credentialDb.setCredentialEncryptionMode(encryptionMode)\n\t\tthis.credentialDb.setCredentialEncryptionKey(credentialsKey)\n\t\tfor (const credential of credentials) {\n\t\t\tawait this.storeEncrypted(credential)\n\t\t}\n\t}\n\n\tasync storeEncrypted(credentials: PersistedCredentials): Promise<void> {\n\t\tthis.credentialDb.store(credentials)\n\t}\n\n\tprivate async getOrCreateCredentialEncryptionKey(): Promise<BitArray> {\n\t\tconst existingKey = await this.getCredentialsEncryptionKey()\n\t\tif (existingKey != null) {\n\t\t\treturn existingKey\n\t\t} else {\n\t\t\tconst encryptionMode = this.getDesktopCredentialEncryptionMode() ?? CredentialEncryptionMode.DEVICE_LOCK\n\t\t\tconst newKey = bitArrayToUint8Array(this.crypto.generateDeviceKey())\n\t\t\tconst encryptedKey = await this.keychainEncryption.encryptUsingKeychain(newKey, encryptionMode)\n\t\t\tthis.credentialDb.setCredentialEncryptionKey(encryptedKey)\n\t\t\treturn uint8ArrayToBitArray(newKey)\n\t\t}\n\t}\n\n\tprivate async getCredentialsEncryptionKey(): Promise<BitArray | null> {\n\t\tconst encryptionMode = this.getDesktopCredentialEncryptionMode() ?? CredentialEncryptionMode.DEVICE_LOCK\n\t\tconst keyChainEncCredentialsKey = this.credentialDb.getCredentialEncryptionKey()\n\t\tif (keyChainEncCredentialsKey != null) {\n\t\t\tconst credentialsKey = await this.keychainEncryption.decryptUsingKeychain(keyChainEncCredentialsKey, encryptionMode)\n\t\t\treturn uint8ArrayToBitArray(credentialsKey)\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n}\n"]}