{"version":3,"file":"DeviceEncryptionFacade.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/facades/DeviceEncryptionFacade.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,UAAU,EAAE,oBAAoB,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAA;AAE5H,MAAM,OAAO,sBAAsB;IAClC;;OAEG;IACH,KAAK,CAAC,WAAW;QAChB,OAAO,oBAAoB,CAAC,eAAe,EAAE,CAAC,CAAA;IAC/C,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,SAAqB,EAAE,IAAgB;QACpD,OAAO,UAAU,CAAC,oBAAoB,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAA;IACzD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,SAAqB,EAAE,aAAyB;QAC7D,OAAO,UAAU,CAAC,oBAAoB,CAAC,SAAS,CAAC,EAAE,aAAa,CAAC,CAAA;IAClE,CAAC;CACD","sourcesContent":["import { aes256RandomKey, aesDecrypt, aesEncrypt, bitArrayToUint8Array, uint8ArrayToBitArray } from \"@tutao/tutanota-crypto\"\n\nexport class DeviceEncryptionFacade {\n\t/**\n\t * Generates an encryption key.\n\t */\n\tasync generateKey(): Promise<Uint8Array> {\n\t\treturn bitArrayToUint8Array(aes256RandomKey())\n\t}\n\n\t/**\n\t * Encrypts {@param data} using {@param deviceKey}.\n\t * @param deviceKey Key used for encryption\n\t * @param data Data to encrypt.\n\t */\n\tasync encrypt(deviceKey: Uint8Array, data: Uint8Array): Promise<Uint8Array> {\n\t\treturn aesEncrypt(uint8ArrayToBitArray(deviceKey), data)\n\t}\n\n\t/**\n\t * Decrypts {@param encryptedData} using {@param deviceKey}.\n\t * @param deviceKey Key used for encryption\n\t * @param encryptedData Data to be decrypted.\n\t */\n\tasync decrypt(deviceKey: Uint8Array, encryptedData: Uint8Array): Promise<Uint8Array> {\n\t\treturn aesDecrypt(uint8ArrayToBitArray(deviceKey), encryptedData)\n\t}\n}\n"]}