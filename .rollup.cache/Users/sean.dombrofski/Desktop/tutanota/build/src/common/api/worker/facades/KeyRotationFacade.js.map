{"version":3,"file":"KeyRotationFacade.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/facades/KeyRotationFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { EntityClient } from \"../../common/EntityClient.js\"\nimport {\n\tAdminGroupKeyDistributionElement,\n\tcreateAdminGroupKeyDistributionElement,\n\tcreateAdminGroupKeyRotationPostIn,\n\tcreateAdminGroupKeyRotationPutIn,\n\tcreateGroupKeyRotationData,\n\tcreateGroupKeyRotationPostIn,\n\tcreateGroupKeyUpdateData,\n\tcreateGroupMembershipKeyData,\n\tcreateGroupMembershipUpdateData,\n\tcreateKeyMac,\n\tcreateKeyPair,\n\tcreateMembershipPutIn,\n\tcreatePubEncKeyData,\n\tcreateRecoverCodeData,\n\tcreateUserGroupKeyRotationData,\n\tcreateUserGroupKeyRotationPostIn,\n\tCustomerTypeRef,\n\tGroup,\n\tGroupInfoTypeRef,\n\tGroupKeyRotationData,\n\tGroupKeyUpdate,\n\tGroupKeyUpdateData,\n\tGroupKeyUpdateTypeRef,\n\tGroupMember,\n\tGroupMembershipKeyData,\n\tGroupMembershipUpdateData,\n\tGroupMemberTypeRef,\n\tGroupTypeRef,\n\tKeyMac,\n\tKeyPair,\n\tKeyRotation,\n\tKeyRotationTypeRef,\n\tPubDistributionKey,\n\tPubEncKeyData,\n\tRecoverCodeData,\n\tSentGroupInvitationTypeRef,\n\tUser,\n\tUserGroupRootTypeRef,\n\tUserTypeRef,\n} from \"../../entities/sys/TypeRefs.js\"\nimport {\n\tasPublicKeyIdentifier,\n\tassertEnumValue,\n\tCryptoProtocolVersion,\n\tGroupKeyRotationType,\n\tGroupType,\n\tPublicKeyIdentifierType,\n} from \"../../common/TutanotaConstants.js\"\nimport {\n\tassertNotNull,\n\tdefer,\n\tDeferredObject,\n\tdowncast,\n\tgetFirstOrThrow,\n\tgroupBy,\n\tisEmpty,\n\tisNotNull,\n\tisSameTypeRef,\n\tKeyVersion,\n\tlazyAsync,\n\tpromiseMap,\n\tVersioned,\n} from \"@tutao/tutanota-utils\"\nimport { elementIdPart, getElementId, isSameId, listIdPart } from \"../../common/utils/EntityUtils.js\"\nimport { checkKeyVersionConstraints, KeyLoaderFacade, parseKeyVersion } from \"./KeyLoaderFacade.js\"\nimport {\n\tAes256Key,\n\tAesKey,\n\tbitArrayToUint8Array,\n\tcreateAuthVerifier,\n\tEccKeyPair,\n\tEncryptedPqKeyPairs,\n\tgetKeyLengthBytes,\n\tisEncryptedPqKeyPairs,\n\tKEY_LENGTH_BYTES_AES_256,\n\tMacTag,\n\tPQKeyPairs,\n\tPQPublicKeys,\n\tuint8ArrayToKey,\n} from \"@tutao/tutanota-crypto\"\nimport { PQFacade } from \"./PQFacade.js\"\nimport {\n\tAdminGroupKeyRotationService,\n\tGroupKeyRotationInfoService,\n\tGroupKeyRotationService,\n\tMembershipService,\n\tUserGroupKeyRotationService,\n} from \"../../entities/sys/Services.js\"\nimport { IServiceExecutor } from \"../../common/ServiceRequest.js\"\nimport { CryptoFacade } from \"../crypto/CryptoFacade.js\"\nimport { assertWorkerOrNode } from \"../../common/Env.js\"\nimport { CryptoWrapper, VersionedEncryptedKey, VersionedKey } from \"../crypto/CryptoWrapper.js\"\nimport { getUserGroupMemberships } from \"../../common/utils/GroupUtils.js\"\nimport { RecoverCodeFacade } from \"./lazy/RecoverCodeFacade.js\"\nimport { UserFacade } from \"./UserFacade.js\"\nimport { GroupInvitationPostData, type InternalRecipientKeyData, InternalRecipientKeyDataTypeRef } from \"../../entities/tutanota/TypeRefs.js\"\nimport { ShareFacade } from \"./lazy/ShareFacade.js\"\nimport { GroupManagementFacade } from \"./lazy/GroupManagementFacade.js\"\nimport { RecipientsNotFoundError } from \"../../common/error/RecipientsNotFoundError.js\"\nimport { LockedError } from \"../../common/error/RestError.js\"\nimport { AsymmetricCryptoFacade } from \"../crypto/AsymmetricCryptoFacade.js\"\nimport { TutanotaError } from \"@tutao/tutanota-error\"\nimport { asPQPublicKeys, brandKeyMac, KeyAuthenticationFacade } from \"./KeyAuthenticationFacade.js\"\nimport { PublicKeyProvider, PublicKeys } from \"./PublicKeyProvider.js\"\n\nassertWorkerOrNode()\n\nexport enum MultiAdminGroupKeyAdminActionPath {\n\tWAIT_FOR_OTHER_ADMINS,\n\tCREATE_DISTRIBUTION_KEYS,\n\tPERFORM_KEY_ROTATION,\n\tIMPOSSIBLE_STATE,\n}\n\n/**\n * Type to keep a pending key rotation and the password key in memory as long as the key rotation has not been processed.\n */\ntype PendingKeyRotation = {\n\tpwKey: Aes256Key | null\n\t//If we rotate the admin group we always want to rotate the user group for the admin user.\n\t// Therefore, we do not need to save two different key rotations for this case.\n\tadminOrUserGroupKeyRotation: KeyRotation | null\n\tteamOrCustomerGroupKeyRotations: Array<KeyRotation>\n\tuserAreaGroupsKeyRotations: Array<KeyRotation>\n}\n\ntype PreparedUserAreaGroupKeyRotation = {\n\tgroupKeyRotationData: GroupKeyRotationData\n\tpreparedReInvitations: GroupInvitationPostData[]\n}\n\ntype GeneratedGroupKeys = {\n\tsymGroupKey: VersionedKey\n\tencryptedKeyPair: EncryptedPqKeyPairs | null\n}\n\ntype EncryptedGroupKeys = {\n\tnewGroupKeyEncCurrentGroupKey: VersionedEncryptedKey\n\tkeyPair: EncryptedPqKeyPairs | null\n\tadminGroupKeyEncNewGroupKey: VersionedEncryptedKey | null\n}\n\ntype EncryptedUserGroupKeys = {\n\tnewUserGroupKeyEncCurrentGroupKey: VersionedEncryptedKey\n\tpassphraseKeyEncNewUserGroupKey: VersionedEncryptedKey\n\tkeyPair: KeyPair\n\trecoverCodeData: RecoverCodeData | null\n\tnewAdminGroupKeyEncNewUserGroupKey: VersionedEncryptedKey\n\tdistributionKeyEncNewUserGroupKey: Uint8Array\n\tauthVerifier: Uint8Array\n}\n\n/**\n * Facade to handle key rotation requests. Maintains and processes @PendingKeyRotation\n */\nexport class KeyRotationFacade {\n\t/**\n\t * @VisibleForTesting\n\t */\n\tpendingKeyRotations: PendingKeyRotation\n\t/**\n\t * Keeps track of which User and Team groups have performed Key Rotation (only for the current session).\n\t * Other group types may be included, but it is not guaranteed.\n\t * @private\n\t */\n\tprivate groupIdsThatPerformedKeyRotations: Set<Id>\n\tprivate readonly facadeInitializedDeferredObject: DeferredObject<void>\n\tprivate pendingGroupKeyUpdateIds: IdTuple[] // already rotated groups for which we need to update the memberships (GroupKeyUpdateIds all in one list)\n\n\tconstructor(\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t\tprivate readonly pqFacade: PQFacade,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly cryptoWrapper: CryptoWrapper,\n\t\tprivate readonly recoverCodeFacade: lazyAsync<RecoverCodeFacade>,\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly cryptoFacade: CryptoFacade,\n\t\tprivate readonly shareFacade: lazyAsync<ShareFacade>,\n\t\tprivate readonly groupManagementFacade: lazyAsync<GroupManagementFacade>,\n\t\tprivate readonly asymmetricCryptoFacade: AsymmetricCryptoFacade,\n\t\tprivate readonly keyAuthenticationFacade: KeyAuthenticationFacade,\n\t\tprivate readonly publicKeyProvider: PublicKeyProvider,\n\t) {\n\t\tthis.pendingKeyRotations = {\n\t\t\tpwKey: null,\n\t\t\tadminOrUserGroupKeyRotation: null,\n\t\t\tteamOrCustomerGroupKeyRotations: [],\n\t\t\tuserAreaGroupsKeyRotations: [],\n\t\t}\n\t\tthis.facadeInitializedDeferredObject = defer<void>()\n\t\tthis.pendingGroupKeyUpdateIds = []\n\t\tthis.groupIdsThatPerformedKeyRotations = new Set<Id>()\n\t}\n\n\t/**\n\t * Initialize the facade with the data it needs to perform rotations later.\n\t * Needs to be called during login when the password key is still available.\n\t * @param pwKey the user's passphrase key. May or may not be kept in memory, depending on whether a UserGroup key rotation is scheduled.\n\t * @param modernKdfType true if argon2id. no admin or user key rotation should be executed if false.\n\t */\n\tpublic async initialize(pwKey: Aes256Key, modernKdfType: boolean) {\n\t\tconst result = await this.serviceExecutor.get(GroupKeyRotationInfoService, null)\n\t\tif (result.userOrAdminGroupKeyRotationScheduled && modernKdfType) {\n\t\t\t// If we have not migrated to argon2 we postpone key rotation until next login.\n\t\t\tthis.pendingKeyRotations.pwKey = pwKey\n\t\t}\n\t\tthis.pendingGroupKeyUpdateIds = result.groupKeyUpdates\n\t\tthis.facadeInitializedDeferredObject.resolve()\n\t}\n\n\t/**\n\t * Processes pending key rotations and performs follow-up tasks such as updating memberships for groups rotated by another user.\n\t * @param user\n\t */\n\tasync processPendingKeyRotationsAndUpdates(user: User): Promise<void> {\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tawait this.loadPendingKeyRotations(user)\n\t\t\t\tawait this.processPendingKeyRotation(user)\n\t\t\t} finally {\n\t\t\t\t// we still try updating memberships if there was an error with rotations\n\t\t\t\tawait this.updateGroupMemberships(this.pendingGroupKeyUpdateIds)\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (e instanceof LockedError) {\n\t\t\t\t// we catch here so that we also catch errors in the `finally` block\n\t\t\t\tconsole.log(\"error when processing key rotation or group key update\", e)\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Queries the server for pending key rotations for a given user and saves them and optionally the given password key (in case an admin or user group needs to be rotated).\n\t *\n\t * Note that this function currently makes 2 server requests to load the key rotation list and check if a key rotation is needed.\n\t * This routine should be optimized in the future by saving a flag on the user to determine whether a key rotation is required or not.\n\t * @VisibleForTesting\n\t */\n\tasync loadPendingKeyRotations(user: User) {\n\t\tconst userGroupRoot = await this.entityClient.load(UserGroupRootTypeRef, user.userGroup.group)\n\t\tif (userGroupRoot.keyRotations != null) {\n\t\t\tconst pendingKeyRotations = await this.entityClient.loadAll(KeyRotationTypeRef, userGroupRoot.keyRotations.list)\n\t\t\tconst keyRotationsByType = groupBy(pendingKeyRotations, (keyRotation) => keyRotation.groupKeyRotationType)\n\t\t\tlet adminOrUserGroupKeyRotationArray: Array<KeyRotation> = [\n\t\t\t\tkeyRotationsByType.get(GroupKeyRotationType.AdminGroupKeyRotationSingleUserAccount),\n\t\t\t\tkeyRotationsByType.get(GroupKeyRotationType.AdminGroupKeyRotationMultipleUserAccount),\n\t\t\t\tkeyRotationsByType.get(GroupKeyRotationType.AdminGroupKeyRotationMultipleAdminAccount),\n\t\t\t\tkeyRotationsByType.get(GroupKeyRotationType.User),\n\t\t\t]\n\t\t\t\t.flat()\n\t\t\t\t.filter(isNotNull)\n\t\t\tlet customerGroupKeyRotationArray = keyRotationsByType.get(GroupKeyRotationType.Customer) || []\n\t\t\tconst adminOrUserGroupKeyRotation = adminOrUserGroupKeyRotationArray[0]\n\t\t\tthis.pendingKeyRotations = {\n\t\t\t\tpwKey: this.pendingKeyRotations.pwKey,\n\t\t\t\tadminOrUserGroupKeyRotation: adminOrUserGroupKeyRotation ? adminOrUserGroupKeyRotation : null,\n\t\t\t\tteamOrCustomerGroupKeyRotations: customerGroupKeyRotationArray.concat(keyRotationsByType.get(GroupKeyRotationType.Team) || []),\n\t\t\t\tuserAreaGroupsKeyRotations: keyRotationsByType.get(GroupKeyRotationType.UserArea) || [],\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Processes the internal list of @PendingKeyRotation. Key rotations and (if existent) password keys are deleted after processing.\n\t * @VisibleForTesting\n\t */\n\tasync processPendingKeyRotation(user: User) {\n\t\tawait this.facadeInitializedDeferredObject.promise\n\t\t// first admin, then user and then user area\n\t\ttry {\n\t\t\tif (this.pendingKeyRotations.adminOrUserGroupKeyRotation && this.pendingKeyRotations.pwKey) {\n\t\t\t\tconst groupKeyRotationType = assertEnumValue(GroupKeyRotationType, this.pendingKeyRotations.adminOrUserGroupKeyRotation.groupKeyRotationType)\n\t\t\t\tswitch (groupKeyRotationType) {\n\t\t\t\t\tcase GroupKeyRotationType.AdminGroupKeyRotationMultipleAdminAccount:\n\t\t\t\t\t\tawait this.rotateMultipleAdminsGroupKeys(user, this.pendingKeyRotations.pwKey, this.pendingKeyRotations.adminOrUserGroupKeyRotation)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase GroupKeyRotationType.AdminGroupKeyRotationSingleUserAccount:\n\t\t\t\t\tcase GroupKeyRotationType.AdminGroupKeyRotationMultipleUserAccount:\n\t\t\t\t\t\tawait this.rotateSingleAdminGroupKeys(user, this.pendingKeyRotations.pwKey, this.pendingKeyRotations.adminOrUserGroupKeyRotation)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase GroupKeyRotationType.User:\n\t\t\t\t\t\tawait this.rotateUserGroupKey(user, this.pendingKeyRotations.pwKey, this.pendingKeyRotations.adminOrUserGroupKeyRotation)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tthis.pendingKeyRotations.adminOrUserGroupKeyRotation = null\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.pendingKeyRotations.pwKey = null\n\t\t}\n\n\t\t//user area, team and customer key rotations are send in a single request, so that they can be processed in parallel\n\t\tconst serviceData = createGroupKeyRotationPostIn({ groupKeyUpdates: [] })\n\t\tif (!isEmpty(this.pendingKeyRotations.teamOrCustomerGroupKeyRotations)) {\n\t\t\tconst groupKeyRotationData = await this.rotateCustomerOrTeamGroupKeys(user)\n\t\t\tif (groupKeyRotationData != null) {\n\t\t\t\tserviceData.groupKeyUpdates = groupKeyRotationData\n\t\t\t}\n\t\t\tthis.pendingKeyRotations.teamOrCustomerGroupKeyRotations = []\n\t\t}\n\n\t\tlet invitationData: GroupInvitationPostData[] = []\n\t\tif (!isEmpty(this.pendingKeyRotations.userAreaGroupsKeyRotations)) {\n\t\t\tconst { groupKeyRotationData, preparedReInvites } = await this.rotateUserAreaGroupKeys(user)\n\t\t\tinvitationData = preparedReInvites\n\t\t\tif (groupKeyRotationData != null) {\n\t\t\t\tserviceData.groupKeyUpdates = serviceData.groupKeyUpdates.concat(groupKeyRotationData)\n\t\t\t}\n\t\t\tthis.pendingKeyRotations.userAreaGroupsKeyRotations = []\n\t\t}\n\t\tif (serviceData.groupKeyUpdates.length <= 0) {\n\t\t\treturn\n\t\t}\n\t\tawait this.serviceExecutor.post(GroupKeyRotationService, serviceData)\n\n\t\tfor (const groupKeyUpdate of serviceData.groupKeyUpdates) {\n\t\t\tthis.groupIdsThatPerformedKeyRotations.add(groupKeyUpdate.group)\n\t\t}\n\n\t\tif (!isEmpty(invitationData)) {\n\t\t\tconst shareFacade = await this.shareFacade()\n\t\t\tawait promiseMap(invitationData, (preparedInvite) => shareFacade.sendGroupInvitationRequest(preparedInvite))\n\t\t}\n\t}\n\n\t/**\n\t * @VisibleForTesting\n\t */\n\tasync rotateSingleAdminGroupKeys(user: User, passphraseKey: Aes256Key, keyRotation: KeyRotation) {\n\t\tif (hasNonQuantumSafeKeys(passphraseKey)) {\n\t\t\tconsole.log(\"Not allowed to rotate admin group keys with a bcrypt password key\")\n\t\t\treturn\n\t\t}\n\t\tconst currentUserGroupKey = this.keyLoaderFacade.getCurrentSymUserGroupKey()\n\t\tconst adminGroupMembership = getFirstOrThrow(getUserGroupMemberships(user, GroupType.Admin))\n\t\tconst currentAdminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupMembership.group)\n\t\tconst adminKeyRotationData = await this.prepareKeyRotationForSingleAdmin(keyRotation, user, currentUserGroupKey, currentAdminGroupKey, passphraseKey)\n\n\t\tawait this.serviceExecutor.post(AdminGroupKeyRotationService, adminKeyRotationData.keyRotationData)\n\t\tthis.groupIdsThatPerformedKeyRotations.add(user.userGroup.group)\n\t}\n\n\t//We assume that the logged-in user is an admin user and that the key encrypting the group key are already pq secure\n\tprivate async rotateUserAreaGroupKeys(user: User): Promise<{\n\t\tgroupKeyRotationData: GroupKeyRotationData[]\n\t\tpreparedReInvites: GroupInvitationPostData[]\n\t}> {\n\t\t// * the encrypting keys are 128-bit keys. (user group key)\n\t\tconst currentUserGroupKey = this.keyLoaderFacade.getCurrentSymUserGroupKey()\n\t\tif (hasNonQuantumSafeKeys(currentUserGroupKey.object)) {\n\t\t\t// user or admin group key rotation should be scheduled first on the server, so this should not happen\n\t\t\tconsole.log(\"Keys cannot be rotated as the encrypting keys are not pq secure\")\n\t\t\treturn { groupKeyRotationData: [], preparedReInvites: [] }\n\t\t}\n\n\t\tconst groupKeyUpdates = new Array<GroupKeyRotationData>()\n\t\tlet preparedReInvites: GroupInvitationPostData[] = []\n\t\tfor (const keyRotation of this.pendingKeyRotations.userAreaGroupsKeyRotations) {\n\t\t\tconst { groupKeyRotationData, preparedReInvitations } = await this.prepareKeyRotationForAreaGroup(keyRotation, currentUserGroupKey, user)\n\t\t\tgroupKeyUpdates.push(groupKeyRotationData)\n\t\t\tpreparedReInvites = preparedReInvites.concat(preparedReInvitations)\n\t\t}\n\n\t\treturn { groupKeyRotationData: groupKeyUpdates, preparedReInvites }\n\t}\n\n\t//We assume that the logged-in user is an admin user and that the key encrypting the group key are already pq secure\n\tprivate async rotateCustomerOrTeamGroupKeys(user: User) {\n\t\t//group key rotation is skipped if\n\t\t// * user is not an admin user\n\t\tconst adminGroupMembership = user.memberships.find((m) => m.groupType === GroupKeyRotationType.AdminGroupKeyRotationSingleUserAccount)\n\t\tif (adminGroupMembership == null) {\n\t\t\tconsole.log(\"Only admin user can rotate the group\")\n\t\t\treturn\n\t\t}\n\n\t\t// * the encrypting keys are 128-bit keys. (user group key, admin group key)\n\t\tconst currentUserGroupKey = this.keyLoaderFacade.getCurrentSymUserGroupKey()\n\t\tconst currentAdminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupMembership.group)\n\t\tif (hasNonQuantumSafeKeys(currentUserGroupKey.object, currentAdminGroupKey.object)) {\n\t\t\t// admin group key rotation should be scheduled first on the server, so this should not happen\n\t\t\tconsole.log(\"Keys cannot be rotated as the encrypting keys are not pq secure\")\n\t\t\treturn\n\t\t}\n\n\t\tconst groupKeyUpdates = new Array<GroupKeyRotationData>()\n\t\tfor (const keyRotation of this.pendingKeyRotations.teamOrCustomerGroupKeyRotations) {\n\t\t\tconst groupKeyRotationData = await this.prepareKeyRotationForCustomerOrTeamGroup(keyRotation, currentUserGroupKey, currentAdminGroupKey, user)\n\t\t\tgroupKeyUpdates.push(groupKeyRotationData)\n\t\t}\n\t\treturn groupKeyUpdates\n\t}\n\n\tprivate async prepareKeyRotationForSingleAdmin(\n\t\tkeyRotation: KeyRotation,\n\t\tuser: User,\n\t\tcurrentUserGroupKey: VersionedKey,\n\t\tcurrentAdminGroupKey: VersionedKey,\n\t\tpassphraseKey: Aes256Key,\n\t) {\n\t\tconst adminGroupId = this.getTargetGroupId(keyRotation)\n\t\tconst userGroupMembership = user.userGroup\n\t\tconst userGroupId = userGroupMembership.group\n\t\tconsole.log(`KeyRotationFacade: rotate key for group: ${adminGroupId}, groupKeyRotationType: ${keyRotation.groupKeyRotationType}`)\n\n\t\tconst adminGroup = await this.entityClient.load(GroupTypeRef, adminGroupId)\n\t\tconst userGroup = await this.entityClient.load(GroupTypeRef, userGroupId)\n\n\t\tconst newAdminGroupKeys = await this.generateGroupKeys(adminGroup)\n\t\tconst adminKeyPair = assertNotNull(newAdminGroupKeys.encryptedKeyPair)\n\t\tconst adminPubKeyMacList = await this.generatePubKeyTagsForNonAdminUsers(\n\t\t\tasPQPublicKeys(adminKeyPair),\n\t\t\tnewAdminGroupKeys.symGroupKey.version,\n\t\t\tadminGroupId,\n\t\t\tassertNotNull(user.customer),\n\t\t\tuserGroupId,\n\t\t)\n\n\t\tconst newUserGroupKeys = await this.generateGroupKeys(userGroup)\n\t\tconst encryptedAdminKeys = await this.encryptGroupKeys(adminGroup, currentAdminGroupKey, newAdminGroupKeys, newAdminGroupKeys.symGroupKey)\n\t\tconst encryptedUserKeys = await this.encryptUserGroupKey(userGroup, currentUserGroupKey, newUserGroupKeys, passphraseKey, newAdminGroupKeys, user)\n\t\tconst membershipEncNewGroupKey = this.cryptoWrapper.encryptKeyWithVersionedKey(newUserGroupKeys.symGroupKey, newAdminGroupKeys.symGroupKey.object)\n\n\t\tconst adminGroupKeyData = createGroupKeyRotationData({\n\t\t\tadminGroupEncGroupKey: assertNotNull(encryptedAdminKeys.adminGroupKeyEncNewGroupKey).key,\n\t\t\tadminGroupKeyVersion: String(assertNotNull(encryptedAdminKeys.adminGroupKeyEncNewGroupKey).encryptingKeyVersion),\n\t\t\tgroupEncPreviousGroupKey: encryptedAdminKeys.newGroupKeyEncCurrentGroupKey.key,\n\t\t\tgroupKeyVersion: String(newAdminGroupKeys.symGroupKey.version),\n\t\t\tgroup: adminGroup._id,\n\t\t\tkeyPair: makeKeyPair(encryptedAdminKeys.keyPair),\n\t\t\tgroupKeyUpdatesForMembers: [], // we only rotated for admin groups with only one member,\n\t\t\tgroupMembershipUpdateData: [\n\t\t\t\tcreateGroupMembershipUpdateData({\n\t\t\t\t\tuserId: user._id,\n\t\t\t\t\tuserEncGroupKey: membershipEncNewGroupKey.key,\n\t\t\t\t\tuserKeyVersion: String(membershipEncNewGroupKey.encryptingKeyVersion),\n\t\t\t\t}),\n\t\t\t],\n\t\t})\n\n\t\tconst userGroupKeyData = createUserGroupKeyRotationData({\n\t\t\trecoverCodeData: encryptedUserKeys.recoverCodeData,\n\t\t\tdistributionKeyEncUserGroupKey: encryptedUserKeys.distributionKeyEncNewUserGroupKey,\n\t\t\tauthVerifier: encryptedUserKeys.authVerifier,\n\t\t\tgroup: userGroup._id,\n\t\t\tuserGroupEncPreviousGroupKey: encryptedUserKeys.newUserGroupKeyEncCurrentGroupKey.key,\n\t\t\tuserGroupKeyVersion: String(newUserGroupKeys.symGroupKey.version),\n\t\t\tkeyPair: encryptedUserKeys.keyPair,\n\t\t\tadminGroupEncUserGroupKey: encryptedUserKeys.newAdminGroupKeyEncNewUserGroupKey.key,\n\t\t\tadminGroupKeyVersion: String(encryptedUserKeys.newAdminGroupKeyEncNewUserGroupKey.encryptingKeyVersion),\n\t\t\tpassphraseEncUserGroupKey: encryptedUserKeys.passphraseKeyEncNewUserGroupKey.key,\n\t\t\tpubAdminGroupEncUserGroupKey: null,\n\t\t\tuserGroupEncAdminGroupKey: null,\n\t\t})\n\n\t\treturn {\n\t\t\tkeyRotationData: createAdminGroupKeyRotationPostIn({\n\t\t\t\tadminGroupKeyData,\n\t\t\t\tuserGroupKeyData,\n\t\t\t\tadminPubKeyMacList,\n\t\t\t\tdistribution: [],\n\t\t\t}),\n\t\t\tnewAdminGroupKeys,\n\t\t\tnewUserGroupKeys,\n\t\t}\n\t}\n\n\tprivate async generatePubKeyTagsForNonAdminUsers(\n\t\tnewAdminPubKey: PQPublicKeys,\n\t\tnewAdminGroupKeyVersion: KeyVersion,\n\t\tadminGroupId: Id,\n\t\tcustomerId: Id,\n\t\tgroupToExclude: Id,\n\t): Promise<Array<KeyMac>> {\n\t\tconst keyTags: KeyMac[] = []\n\n\t\tconst customer = await this.entityClient.load(CustomerTypeRef, customerId)\n\t\tconst userGroupInfos = await this.entityClient.loadAll(GroupInfoTypeRef, customer.userGroups)\n\n\t\tlet groupManagementFacade = await this.groupManagementFacade()\n\n\t\tfor (const userGroupInfo of userGroupInfos) {\n\t\t\tif (isSameId(userGroupInfo.group, groupToExclude)) continue\n\n\t\t\tconst currentUserGroupKey = await groupManagementFacade.getCurrentGroupKeyViaAdminEncGKey(userGroupInfo.group)\n\t\t\tconst tag = this.keyAuthenticationFacade.computeTag({\n\t\t\t\ttagType: \"NEW_ADMIN_PUB_KEY_TAG\",\n\t\t\t\tsourceOfTrust: { receivingUserGroupKey: currentUserGroupKey.object },\n\t\t\t\tuntrustedKey: { newAdminPubKey },\n\t\t\t\tbindingData: {\n\t\t\t\t\tuserGroupId: userGroupInfo.group,\n\t\t\t\t\tadminGroupId,\n\t\t\t\t\tcurrentReceivingUserGroupKeyVersion: currentUserGroupKey.version,\n\t\t\t\t\tnewAdminGroupKeyVersion,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tconst publicKeyTag = createKeyMac({\n\t\t\t\ttaggingGroup: userGroupInfo.group,\n\t\t\t\ttag,\n\t\t\t\ttaggedKeyVersion: String(newAdminGroupKeyVersion),\n\t\t\t\ttaggingKeyVersion: String(currentUserGroupKey.version),\n\t\t\t})\n\t\t\tkeyTags.push(publicKeyTag)\n\t\t}\n\n\t\treturn keyTags\n\t}\n\n\tprivate deriveAdminGroupDistributionKeyPairEncryptionKey(\n\t\tadminGroupId: Id,\n\t\tuserGroupId: Id,\n\t\tcurrentAdminGroupKeyVersion: KeyVersion,\n\t\tcurrentUserGroupKeyVersion: number,\n\t\tpwKey: Aes256Key,\n\t): Aes256Key {\n\t\treturn this.cryptoWrapper.deriveKeyWithHkdf({\n\t\t\tsalt: `adminGroup: ${adminGroupId}, userGroup: ${userGroupId}, currentUserGroupKeyVersion: ${currentUserGroupKeyVersion}, currentAdminGroupKeyVersion: ${currentAdminGroupKeyVersion}`,\n\t\t\tkey: pwKey,\n\t\t\tcontext: \"adminGroupDistributionKeyPairEncryptionKey\",\n\t\t})\n\t}\n\n\tprivate async prepareKeyRotationForAreaGroup(\n\t\tkeyRotation: KeyRotation,\n\t\tcurrentUserGroupKey: VersionedKey,\n\t\tuser: User,\n\t): Promise<PreparedUserAreaGroupKeyRotation> {\n\t\tconst targetGroupId = this.getTargetGroupId(keyRotation)\n\t\tconsole.log(`KeyRotationFacade: rotate key for group: ${targetGroupId}, groupKeyRotationType: ${keyRotation.groupKeyRotationType}`)\n\t\tconst targetGroup = await this.entityClient.load(GroupTypeRef, targetGroupId)\n\t\tconst currentGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(targetGroupId)\n\n\t\tconst newGroupKeys = await this.generateGroupKeys(targetGroup)\n\t\tconst groupEncPreviousGroupKey = this.cryptoWrapper.encryptKeyWithVersionedKey(newGroupKeys.symGroupKey, currentGroupKey.object)\n\t\tconst membershipSymEncNewGroupKey = this.cryptoWrapper.encryptKeyWithVersionedKey(currentUserGroupKey, newGroupKeys.symGroupKey.object)\n\t\tconst preparedReInvitations = await this.handlePendingInvitations(targetGroup, newGroupKeys.symGroupKey)\n\n\t\tconst groupKeyUpdatesForMembers = await this.createGroupKeyUpdatesForMembers(targetGroup, newGroupKeys.symGroupKey)\n\n\t\tconst groupKeyRotationData = createGroupKeyRotationData({\n\t\t\tadminGroupEncGroupKey: null, // for user area groups we do not have an adminGroupEncGroupKey, so we set it always to null.\n\t\t\tadminGroupKeyVersion: null,\n\t\t\tgroup: targetGroupId,\n\t\t\tgroupKeyVersion: String(newGroupKeys.symGroupKey.version),\n\t\t\tgroupEncPreviousGroupKey: groupEncPreviousGroupKey.key,\n\t\t\tkeyPair: makeKeyPair(newGroupKeys.encryptedKeyPair),\n\t\t\tgroupKeyUpdatesForMembers,\n\t\t\tgroupMembershipUpdateData: [\n\t\t\t\tcreateGroupMembershipUpdateData({\n\t\t\t\t\tuserId: user._id,\n\t\t\t\t\tuserEncGroupKey: membershipSymEncNewGroupKey.key,\n\t\t\t\t\tuserKeyVersion: String(currentUserGroupKey.version),\n\t\t\t\t}),\n\t\t\t],\n\t\t})\n\t\treturn {\n\t\t\tgroupKeyRotationData,\n\t\t\tpreparedReInvitations,\n\t\t}\n\t}\n\n\tprivate async prepareKeyRotationForCustomerOrTeamGroup(\n\t\tkeyRotation: KeyRotation,\n\t\tcurrentUserGroupKey: VersionedKey,\n\t\tcurrentAdminGroupKey: VersionedKey,\n\t\tuser: User,\n\t) {\n\t\tconst targetGroupId = this.getTargetGroupId(keyRotation)\n\t\tconsole.log(`KeyRotationFacade: rotate key for group: ${targetGroupId}, groupKeyRotationType: ${keyRotation.groupKeyRotationType}`)\n\t\tconst targetGroup = await this.entityClient.load(GroupTypeRef, targetGroupId)\n\n\t\tconst members = await this.entityClient.loadAll(GroupMemberTypeRef, targetGroup.members)\n\t\tconst ownMember = members.find((member) => member.user == user._id)\n\t\tconst otherMembers = members.filter((member) => member.user != user._id)\n\t\tlet currentGroupKey = await this.getCurrentGroupKey(targetGroup)\n\t\tconst newGroupKeys = await this.generateGroupKeys(targetGroup)\n\t\tconst encryptedGroupKeys = await this.encryptGroupKeys(targetGroup, currentGroupKey, newGroupKeys, currentAdminGroupKey)\n\n\t\tconst groupMembershipUpdateData = new Array<GroupMembershipUpdateData>()\n\n\t\t//for team groups the admin user might not be a member of the group\n\t\tif (ownMember) {\n\t\t\tconst membershipSymEncNewGroupKey = this.cryptoWrapper.encryptKeyWithVersionedKey(currentUserGroupKey, newGroupKeys.symGroupKey.object)\n\t\t\tgroupMembershipUpdateData.push(\n\t\t\t\tcreateGroupMembershipUpdateData({\n\t\t\t\t\tuserId: user._id,\n\t\t\t\t\tuserEncGroupKey: membershipSymEncNewGroupKey.key,\n\t\t\t\t\tuserKeyVersion: String(currentUserGroupKey.version),\n\t\t\t\t}),\n\t\t\t)\n\t\t}\n\t\tfor (const member of otherMembers) {\n\t\t\tconst userEncNewGroupKey: VersionedEncryptedKey = await this.encryptGroupKeyForOtherUsers(member.user, newGroupKeys.symGroupKey)\n\t\t\tlet groupMembershipUpdate = createGroupMembershipUpdateData({\n\t\t\t\tuserId: member.user,\n\t\t\t\tuserEncGroupKey: userEncNewGroupKey.key,\n\t\t\t\tuserKeyVersion: String(userEncNewGroupKey.encryptingKeyVersion),\n\t\t\t})\n\t\t\tgroupMembershipUpdateData.push(groupMembershipUpdate)\n\t\t}\n\n\t\treturn createGroupKeyRotationData({\n\t\t\tadminGroupEncGroupKey: encryptedGroupKeys.adminGroupKeyEncNewGroupKey ? encryptedGroupKeys.adminGroupKeyEncNewGroupKey.key : null,\n\t\t\tadminGroupKeyVersion: encryptedGroupKeys.adminGroupKeyEncNewGroupKey\n\t\t\t\t? String(encryptedGroupKeys.adminGroupKeyEncNewGroupKey.encryptingKeyVersion)\n\t\t\t\t: null,\n\t\t\tgroup: targetGroupId,\n\t\t\tgroupKeyVersion: String(newGroupKeys.symGroupKey.version),\n\t\t\tgroupEncPreviousGroupKey: encryptedGroupKeys.newGroupKeyEncCurrentGroupKey.key,\n\t\t\tkeyPair: makeKeyPair(encryptedGroupKeys.keyPair),\n\t\t\tgroupKeyUpdatesForMembers: [],\n\t\t\tgroupMembershipUpdateData: groupMembershipUpdateData,\n\t\t})\n\t}\n\n\tprivate async getCurrentGroupKey(targetGroup: Group): Promise<VersionedKey> {\n\t\ttry {\n\t\t\treturn await this.keyLoaderFacade.getCurrentSymGroupKey(targetGroup._id)\n\t\t} catch (e) {\n\t\t\t//if we cannot get/decrypt the group key via membership we try via adminEncGroupKey\n\t\t\tconst groupManagementFacade = await this.groupManagementFacade()\n\t\t\tconst currentKey = await groupManagementFacade.getGroupKeyViaAdminEncGKey(targetGroup._id, parseKeyVersion(targetGroup.groupKeyVersion))\n\t\t\treturn { object: currentKey, version: parseKeyVersion(targetGroup.groupKeyVersion) }\n\t\t}\n\t}\n\n\tprivate async encryptUserGroupKey(\n\t\tuserGroup: Group,\n\t\tcurrentUserGroupKey: VersionedKey,\n\t\tnewUserGroupKeys: GeneratedGroupKeys,\n\t\tpassphraseKey: Aes256Key,\n\t\tnewAdminGroupKeys: GeneratedGroupKeys,\n\t\tuser: User,\n\t): Promise<EncryptedUserGroupKeys> {\n\t\tconst { membershipSymEncNewGroupKey, distributionKeyEncNewUserGroupKey, authVerifier } = this.encryptUserGroupKeyForUser(\n\t\t\tpassphraseKey,\n\t\t\tnewUserGroupKeys,\n\t\t\tuserGroup,\n\t\t\tcurrentUserGroupKey,\n\t\t)\n\n\t\tconst encryptedUserKeys = await this.encryptGroupKeys(userGroup, currentUserGroupKey, newUserGroupKeys, newAdminGroupKeys.symGroupKey)\n\t\tconst recoverCodeData = await this.reencryptRecoverCodeIfExists(user, passphraseKey, newUserGroupKeys)\n\n\t\treturn {\n\t\t\tnewUserGroupKeyEncCurrentGroupKey: encryptedUserKeys.newGroupKeyEncCurrentGroupKey,\n\t\t\tnewAdminGroupKeyEncNewUserGroupKey: assertNotNull(encryptedUserKeys.adminGroupKeyEncNewGroupKey),\n\t\t\tkeyPair: assertNotNull(makeKeyPair(encryptedUserKeys.keyPair)),\n\t\t\tpassphraseKeyEncNewUserGroupKey: membershipSymEncNewGroupKey,\n\t\t\trecoverCodeData,\n\t\t\tdistributionKeyEncNewUserGroupKey,\n\t\t\tauthVerifier,\n\t\t}\n\t}\n\n\tprivate async reencryptRecoverCodeIfExists(user: User, passphraseKey: AesKey, newUserGroupKeys: GeneratedGroupKeys): Promise<RecoverCodeData | null> {\n\t\tlet recoverCodeData: RecoverCodeData | null = null\n\t\tif (user.auth?.recoverCode != null) {\n\t\t\tconst recoverCodeFacade = await this.recoverCodeFacade()\n\t\t\tconst recoverCode = await recoverCodeFacade.getRawRecoverCode(passphraseKey)\n\t\t\tconst recoverData = recoverCodeFacade.encryptRecoveryCode(recoverCode, newUserGroupKeys.symGroupKey)\n\t\t\trecoverCodeData = createRecoverCodeData({\n\t\t\t\trecoveryCodeVerifier: recoverData.recoveryCodeVerifier,\n\t\t\t\tuserEncRecoveryCode: recoverData.userEncRecoverCode,\n\t\t\t\tuserKeyVersion: String(recoverData.userKeyVersion),\n\t\t\t\trecoveryCodeEncUserGroupKey: recoverData.recoverCodeEncUserGroupKey,\n\t\t\t})\n\t\t}\n\t\treturn recoverCodeData\n\t}\n\n\tprivate encryptUserGroupKeyForUser(passphraseKey: AesKey, newUserGroupKeys: GeneratedGroupKeys, userGroup: Group, currentGroupKey: VersionedKey) {\n\t\tconst versionedPassphraseKey: VersionedKey = {\n\t\t\tobject: passphraseKey,\n\t\t\tversion: 0, // dummy\n\t\t}\n\t\tconst membershipSymEncNewGroupKey = this.cryptoWrapper.encryptKeyWithVersionedKey(versionedPassphraseKey, newUserGroupKeys.symGroupKey.object)\n\t\tconst legacyUserDistKey = this.userFacade.deriveLegacyUserDistKey(userGroup._id, passphraseKey)\n\t\tconst distributionKeyEncNewUserGroupKey = this.cryptoWrapper.encryptKey(legacyUserDistKey, newUserGroupKeys.symGroupKey.object)\n\t\tconst authVerifier = createAuthVerifier(passphraseKey)\n\t\tconst newGroupKeyEncCurrentGroupKey = this.cryptoWrapper.encryptKeyWithVersionedKey(newUserGroupKeys.symGroupKey, currentGroupKey.object)\n\t\treturn { membershipSymEncNewGroupKey, distributionKeyEncNewUserGroupKey, authVerifier, newGroupKeyEncCurrentGroupKey }\n\t}\n\n\tprivate async handlePendingInvitations(targetGroup: Group, newTargetGroupKey: VersionedKey) {\n\t\tconst preparedReInvitations: Array<GroupInvitationPostData> = []\n\t\tconst targetGroupInfo = await this.entityClient.load(GroupInfoTypeRef, targetGroup.groupInfo)\n\t\tconst pendingInvitations = await this.entityClient.loadAll(SentGroupInvitationTypeRef, targetGroup.invitations)\n\t\tconst sentInvitationsByCapability = groupBy(pendingInvitations, (invitation) => invitation.capability)\n\t\tconst shareFacade = await this.shareFacade()\n\t\tfor (const [capability, sentInvitations] of sentInvitationsByCapability) {\n\t\t\tconst inviteeMailAddresses = sentInvitations.map((invite) => invite.inviteeMailAddress)\n\t\t\tconst prepareGroupReInvites = async (mailAddresses: string[]) => {\n\t\t\t\tconst preparedInvitation = await shareFacade.prepareGroupInvitation(newTargetGroupKey, targetGroupInfo, mailAddresses, downcast(capability))\n\t\t\t\tpreparedReInvitations.push(preparedInvitation)\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tawait prepareGroupReInvites(inviteeMailAddresses)\n\t\t\t} catch (e) {\n\t\t\t\t// we accept removing pending invitations that we cannot send again (e.g. because the user was deactivated)\n\t\t\t\tif (e instanceof RecipientsNotFoundError) {\n\t\t\t\t\tconst notFoundRecipients = e.message.split(\"\\n\")\n\t\t\t\t\tconst reducedInviteeAddresses = inviteeMailAddresses.filter((address) => !notFoundRecipients.includes(address))\n\t\t\t\t\tif (reducedInviteeAddresses.length) {\n\t\t\t\t\t\tawait prepareGroupReInvites(reducedInviteeAddresses)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn preparedReInvitations\n\t}\n\n\tprivate async createGroupKeyUpdatesForMembers(group: Group, newGroupKey: VersionedKey): Promise<Array<GroupKeyUpdateData>> {\n\t\tconst members = await this.entityClient.loadAll(GroupMemberTypeRef, group.members)\n\t\tconst otherMembers = members.filter((member) => member.user != this.userFacade.getUser()?._id)\n\t\treturn await this.tryCreatingGroupKeyUpdatesForMembers(group._id, otherMembers, newGroupKey)\n\t}\n\n\tprivate async tryCreatingGroupKeyUpdatesForMembers(groupId: Id, otherMembers: GroupMember[], newGroupKey: VersionedKey): Promise<GroupKeyUpdateData[]> {\n\t\tconst groupKeyUpdates = new Array<GroupKeyUpdateData>()\n\t\t// try to reduce the amount of requests\n\t\tconst groupedMembers = groupBy(otherMembers, (member) => listIdPart(member.userGroupInfo))\n\t\tconst membersToRemove = new Array<GroupMember>()\n\t\tfor (const [listId, members] of groupedMembers) {\n\t\t\tconst userGroupInfos = await this.entityClient.loadMultiple(\n\t\t\t\tGroupInfoTypeRef,\n\t\t\t\tlistId,\n\t\t\t\tmembers.map((member) => elementIdPart(member.userGroupInfo)),\n\t\t\t)\n\t\t\tfor (const member of members) {\n\t\t\t\tconst userGroupInfoForMember = userGroupInfos.find((ugi) => isSameId(ugi._id, member.userGroupInfo))\n\t\t\t\tconst memberMailAddress = assertNotNull(userGroupInfoForMember?.mailAddress) // user group info must always have a mail address\n\t\t\t\tconst bucketKey = this.cryptoWrapper.aes256RandomKey()\n\t\t\t\tconst sessionKey = this.cryptoWrapper.aes256RandomKey()\n\t\t\t\t// always pass an empty list because we don't want the encryption to be skipped in case other recipients weren't found\n\t\t\t\t// recipients that are not found will be null anyway, and added to membersToRemove\n\t\t\t\tconst notFoundRecipients: Array<string> = []\n\t\t\t\tconst senderGroupId = this.userFacade.getUserGroupId()\n\t\t\t\tconst recipientKeyData = await this.cryptoFacade.encryptBucketKeyForInternalRecipient(\n\t\t\t\t\tsenderGroupId,\n\t\t\t\t\tbucketKey,\n\t\t\t\t\tmemberMailAddress,\n\t\t\t\t\tnotFoundRecipients,\n\t\t\t\t)\n\t\t\t\tif (recipientKeyData != null && isSameTypeRef(recipientKeyData._type, InternalRecipientKeyDataTypeRef)) {\n\t\t\t\t\tconst keyData = recipientKeyData as InternalRecipientKeyData\n\t\t\t\t\tconst pubEncKeyData = createPubEncKeyData({\n\t\t\t\t\t\trecipientIdentifier: keyData.mailAddress,\n\t\t\t\t\t\trecipientIdentifierType: PublicKeyIdentifierType.MAIL_ADDRESS,\n\t\t\t\t\t\tpubEncSymKey: keyData.pubEncBucketKey,\n\t\t\t\t\t\trecipientKeyVersion: keyData.recipientKeyVersion,\n\t\t\t\t\t\tsenderKeyVersion: keyData.senderKeyVersion,\n\t\t\t\t\t\tprotocolVersion: keyData.protocolVersion,\n\t\t\t\t\t\tsenderIdentifier: senderGroupId,\n\t\t\t\t\t\tsenderIdentifierType: PublicKeyIdentifierType.GROUP_ID,\n\t\t\t\t\t\tsymKeyMac: null,\n\t\t\t\t\t})\n\t\t\t\t\tconst groupKeyUpdateData = createGroupKeyUpdateData({\n\t\t\t\t\t\tsessionKeyEncGroupKey: this.cryptoWrapper.encryptBytes(sessionKey, bitArrayToUint8Array(newGroupKey.object)),\n\t\t\t\t\t\tsessionKeyEncGroupKeyVersion: String(newGroupKey.version),\n\t\t\t\t\t\tbucketKeyEncSessionKey: this.cryptoWrapper.encryptKey(bucketKey, sessionKey),\n\t\t\t\t\t\tpubEncBucketKeyData: pubEncKeyData,\n\t\t\t\t\t})\n\t\t\t\t\tgroupKeyUpdates.push(groupKeyUpdateData)\n\t\t\t\t} else {\n\t\t\t\t\tmembersToRemove.push(member)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst groupManagementFacade = await this.groupManagementFacade()\n\t\tif (membersToRemove.length !== 0) {\n\t\t\tfor (const member of membersToRemove) {\n\t\t\t\tawait groupManagementFacade.removeUserFromGroup(member.user, groupId)\n\t\t\t}\n\t\t\tconst reducedMembers = otherMembers.filter((member) => !membersToRemove.includes(member))\n\t\t\t// retry without the removed members\n\t\t\treturn this.tryCreatingGroupKeyUpdatesForMembers(groupId, reducedMembers, newGroupKey)\n\t\t} else {\n\t\t\treturn groupKeyUpdates\n\t\t}\n\t}\n\n\t/**\n\t * Get the ID of the group we want to rotate the keys for.\n\t */\n\tprivate getTargetGroupId(keyRotation: KeyRotation) {\n\t\t// The KeyRotation is a list element type whose list element ID part is the target group ID,\n\t\t// i.e., an indirect reference to Group.\n\t\treturn elementIdPart(keyRotation._id)\n\t}\n\n\tprivate async encryptGroupKeys(\n\t\tgroup: Group,\n\t\tcurrentGroupKey: VersionedKey,\n\t\tnewKeys: GeneratedGroupKeys,\n\t\tadminGroupKeys: VersionedKey,\n\t): Promise<EncryptedGroupKeys> {\n\t\tconst newGroupKeyEncCurrentGroupKey = this.cryptoWrapper.encryptKeyWithVersionedKey(newKeys.symGroupKey, currentGroupKey.object)\n\t\tconst adminGroupKeyEncNewGroupKey = (await this.groupManagementFacade()).hasAdminEncGKey(group)\n\t\t\t? this.cryptoWrapper.encryptKeyWithVersionedKey(adminGroupKeys, newKeys.symGroupKey.object)\n\t\t\t: null\n\n\t\treturn {\n\t\t\tnewGroupKeyEncCurrentGroupKey: newGroupKeyEncCurrentGroupKey,\n\t\t\tkeyPair: newKeys.encryptedKeyPair,\n\t\t\tadminGroupKeyEncNewGroupKey: adminGroupKeyEncNewGroupKey,\n\t\t}\n\t}\n\n\t/*\n\tGets the userGroupKey for the given userId via the adminEncGKey and symmetrically encrypts the given newGroupKey with it. Note that the logged-in user needs\n\t to be the admin of the same customer that the uer with userId belongs to.\n\t */\n\tprivate async encryptGroupKeyForOtherUsers(userId: Id, newGroupKey: VersionedKey): Promise<VersionedEncryptedKey> {\n\t\tconst groupManagementFacade = await this.groupManagementFacade()\n\t\tconst user = await this.entityClient.load(UserTypeRef, userId)\n\t\tconst userGroupKey = await groupManagementFacade.getGroupKeyViaAdminEncGKey(user.userGroup.group, parseKeyVersion(user.userGroup.groupKeyVersion))\n\t\tconst encrypteNewGroupKey = this.cryptoWrapper.encryptKey(userGroupKey, newGroupKey.object)\n\t\treturn { key: encrypteNewGroupKey, encryptingKeyVersion: parseKeyVersion(user.userGroup.groupKeyVersion) }\n\t}\n\n\tprivate async generateGroupKeys(group: Group): Promise<GeneratedGroupKeys> {\n\t\tconst symGroupKeyBytes = this.cryptoWrapper.aes256RandomKey()\n\t\tconst keyPair = await this.createNewKeyPairValue(group, symGroupKeyBytes)\n\t\treturn {\n\t\t\tsymGroupKey: {\n\t\t\t\tobject: symGroupKeyBytes,\n\t\t\t\tversion: checkKeyVersionConstraints(parseKeyVersion(group.groupKeyVersion) + 1),\n\t\t\t},\n\t\t\tencryptedKeyPair: keyPair,\n\t\t}\n\t}\n\n\t/**\n\t * Not all groups have key pairs, but if they do we need to rotate them as well.\n\t */\n\tprivate async createNewKeyPairValue(groupToRotate: Group, newSymmetricGroupKey: Aes256Key): Promise<EncryptedPqKeyPairs | null> {\n\t\tif (groupToRotate.currentKeys) {\n\t\t\treturn this.generateAndEncryptPqKeyPairs(newSymmetricGroupKey)\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\tprivate async generateAndEncryptPqKeyPairs(symmmetricEncryptionKey: Aes256Key): Promise<EncryptedPqKeyPairs> {\n\t\tconst newPqPairs = await this.pqFacade.generateKeyPairs()\n\t\treturn {\n\t\t\tpubRsaKey: null,\n\t\t\tsymEncPrivRsaKey: null,\n\t\t\tpubEccKey: newPqPairs.eccKeyPair.publicKey,\n\t\t\tsymEncPrivEccKey: this.cryptoWrapper.encryptEccKey(symmmetricEncryptionKey, newPqPairs.eccKeyPair.privateKey),\n\t\t\tpubKyberKey: this.cryptoWrapper.kyberPublicKeyToBytes(newPqPairs.kyberKeyPair.publicKey),\n\t\t\tsymEncPrivKyberKey: this.cryptoWrapper.encryptKyberKey(symmmetricEncryptionKey, newPqPairs.kyberKeyPair.privateKey),\n\t\t}\n\t}\n\n\t/**\n\t * @VisibleForTesting\n\t * @private\n\t */\n\tsetPendingKeyRotations(pendingKeyRotations: PendingKeyRotation) {\n\t\tthis.pendingKeyRotations = pendingKeyRotations\n\t\tthis.facadeInitializedDeferredObject.resolve()\n\t}\n\n\tasync reset() {\n\t\tawait this.facadeInitializedDeferredObject.promise\n\t\tthis.pendingKeyRotations = {\n\t\t\tpwKey: null,\n\t\t\tadminOrUserGroupKeyRotation: null,\n\t\t\tteamOrCustomerGroupKeyRotations: [],\n\t\t\tuserAreaGroupsKeyRotations: [],\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param groupKeyUpdateIds MUST be in the same list\n\t */\n\tasync updateGroupMemberships(groupKeyUpdateIds: IdTuple[]): Promise<void> {\n\t\tif (groupKeyUpdateIds.length < 1) return\n\t\tconsole.log(\"handling group key update for groups: \", groupKeyUpdateIds)\n\t\tconst groupKeyUpdateInstances = await this.entityClient.loadMultiple(\n\t\t\tGroupKeyUpdateTypeRef,\n\t\t\tlistIdPart(groupKeyUpdateIds[0]),\n\t\t\tgroupKeyUpdateIds.map((id) => elementIdPart(id)),\n\t\t)\n\t\tconst groupKeyUpdates = groupKeyUpdateInstances.map((update) => this.prepareGroupMembershipUpdate(update))\n\t\tconst membershipPutIn = createMembershipPutIn({\n\t\t\tgroupKeyUpdates,\n\t\t})\n\t\treturn this.serviceExecutor.put(MembershipService, membershipPutIn)\n\t}\n\n\tprivate prepareGroupMembershipUpdate(groupKeyUpdate: GroupKeyUpdate): GroupMembershipKeyData {\n\t\tconst userGroupKey = this.keyLoaderFacade.getCurrentSymUserGroupKey()\n\t\tconst symEncGroupKey = this.cryptoWrapper.encryptKeyWithVersionedKey(userGroupKey, uint8ArrayToKey(groupKeyUpdate.groupKey))\n\t\treturn createGroupMembershipKeyData({\n\t\t\tgroup: elementIdPart(groupKeyUpdate._id),\n\t\t\tsymEncGKey: symEncGroupKey.key,\n\t\t\tgroupKeyVersion: groupKeyUpdate.groupKeyVersion,\n\t\t\tsymKeyVersion: String(userGroupKey.version),\n\t\t})\n\t}\n\n\t/**\n\t * This function is responsible for upgrading the encryption keys of any user according to a GroupKeyRotation object\n\t * Before rotating the keys the user will check that the admin hash created by the admin and encrypted with this user\n\t * group key matches the hash generated by the user for this rotation.\n\t *\n\t * @param user\n\t * @param pwKey\n\t * @param userGroupKeyRotation\n\t * @private\n\t */\n\tprivate async rotateUserGroupKey(user: User, pwKey: AesKey, userGroupKeyRotation: KeyRotation) {\n\t\tconst userGroupMembership = user.userGroup\n\t\tconst userGroupId = userGroupMembership.group\n\t\tconst currentUserGroupKey = this.keyLoaderFacade.getCurrentSymUserGroupKey()\n\t\tconsole.log(`KeyRotationFacade: rotate key for group: ${userGroupId}, groupKeyRotationType: ${userGroupKeyRotation.groupKeyRotationType}`)\n\n\t\tconst userGroup: Group = await this.entityClient.load(GroupTypeRef, userGroupId)\n\n\t\tconst adminGroupId = assertNotNull(userGroup.admin)\n\n\t\tconst newUserGroupKeys = await this.generateGroupKeys(userGroup)\n\n\t\tconst { membershipSymEncNewGroupKey, distributionKeyEncNewUserGroupKey, authVerifier, newGroupKeyEncCurrentGroupKey } = this.encryptUserGroupKeyForUser(\n\t\t\tpwKey,\n\t\t\tnewUserGroupKeys,\n\t\t\tuserGroup,\n\t\t\tcurrentUserGroupKey,\n\t\t)\n\t\tconst recoverCodeData = await this.reencryptRecoverCodeIfExists(user, pwKey, newUserGroupKeys)\n\n\t\tlet pubAdminGroupEncUserGroupKey: null | PubEncKeyData = null\n\t\tlet adminGroupEncUserGroupKey: null | Uint8Array = null\n\t\tlet userGroupEncAdminGroupKey: null | Uint8Array = null\n\t\tlet adminGroupKeyVersion: NumberString\n\t\t//optionally decrypt new admin group key\n\t\tif (userGroupKeyRotation.distEncAdminGroupSymKey != null) {\n\t\t\tconst encryptedKeysForAdmin = await this.handleUserGroupKeyRotationAsAdmin(\n\t\t\t\tuserGroupKeyRotation,\n\t\t\t\tadminGroupId,\n\t\t\t\tpwKey,\n\t\t\t\tuserGroupId,\n\t\t\t\tcurrentUserGroupKey,\n\t\t\t\tnewUserGroupKeys,\n\t\t\t)\n\t\t\tadminGroupEncUserGroupKey = encryptedKeysForAdmin.adminGroupEncUserGroupKey\n\t\t\tadminGroupKeyVersion = encryptedKeysForAdmin.adminGroupKeyVersion\n\t\t\tuserGroupEncAdminGroupKey = encryptedKeysForAdmin.userGroupEncAdminGroupKey\n\t\t} else {\n\t\t\tconst encryptedKeysForUser = await this.handleUserGroupKeyRotationAsUser(\n\t\t\t\tuserGroupKeyRotation,\n\t\t\t\tcurrentUserGroupKey,\n\t\t\t\tuserGroupId,\n\t\t\t\tadminGroupId,\n\t\t\t\tnewUserGroupKeys,\n\t\t\t)\n\t\t\tpubAdminGroupEncUserGroupKey = encryptedKeysForUser.pubAdminGroupEncUserGroupKey\n\t\t\tadminGroupKeyVersion = String(encryptedKeysForUser.adminGroupKeyVersion)\n\t\t}\n\n\t\tconst userGroupKeyData = createUserGroupKeyRotationData({\n\t\t\tuserGroupKeyVersion: String(newUserGroupKeys.symGroupKey.version),\n\t\t\tuserGroupEncPreviousGroupKey: newGroupKeyEncCurrentGroupKey.key,\n\t\t\tpassphraseEncUserGroupKey: membershipSymEncNewGroupKey.key,\n\t\t\tgroup: userGroupId,\n\t\t\tdistributionKeyEncUserGroupKey: distributionKeyEncNewUserGroupKey,\n\t\t\tkeyPair: assertNotNull(makeKeyPair(newUserGroupKeys.encryptedKeyPair)),\n\t\t\tauthVerifier,\n\t\t\tadminGroupKeyVersion,\n\t\t\tpubAdminGroupEncUserGroupKey,\n\t\t\tadminGroupEncUserGroupKey,\n\t\t\trecoverCodeData,\n\t\t\tuserGroupEncAdminGroupKey,\n\t\t})\n\n\t\tawait this.serviceExecutor.post(\n\t\t\tUserGroupKeyRotationService,\n\t\t\tcreateUserGroupKeyRotationPostIn({\n\t\t\t\tuserGroupKeyData,\n\t\t\t}),\n\t\t)\n\t\tthis.groupIdsThatPerformedKeyRotations.add(userGroupId)\n\t}\n\n\tprivate async handleUserGroupKeyRotationAsUser(\n\t\tuserGroupKeyRotation: KeyRotation,\n\t\tcurrentUserGroupKey: VersionedKey,\n\t\tuserGroupId: Id,\n\t\tadminGroupId: Id,\n\t\tnewUserGroupKeys: GeneratedGroupKeys,\n\t) {\n\t\tif (userGroupKeyRotation.adminPubKeyMac == null) {\n\t\t\tthrow new Error(\"The hash encrypted by admin is not present in the user group key rotation !\")\n\t\t}\n\n\t\tconst { taggedKeyVersion, tag, taggingKeyVersion } = brandKeyMac(userGroupKeyRotation.adminPubKeyMac)\n\t\tif (parseKeyVersion(taggingKeyVersion) !== currentUserGroupKey.version) {\n\t\t\tthrow new Error(\n\t\t\t\t`the encrypting key version in the userEncAdminPubKeyHash does not match hash: ${taggingKeyVersion} current user group key:${currentUserGroupKey.version}`,\n\t\t\t)\n\t\t}\n\n\t\t// get admin group public keys\n\t\tconst currentAdminPubKeys = await this.publicKeyProvider.loadCurrentPubKey({\n\t\t\tidentifier: adminGroupId,\n\t\t\tidentifierType: PublicKeyIdentifierType.GROUP_ID,\n\t\t})\n\t\tconst adminGroupKeyVersion = parseKeyVersion(taggedKeyVersion)\n\t\tif (currentAdminPubKeys.version !== adminGroupKeyVersion) {\n\t\t\tthrow new Error(\"the public key service did not return the tagged key version to verify the admin public key\")\n\t\t}\n\n\t\tthis.keyAuthenticationFacade.verifyTag(\n\t\t\t{\n\t\t\t\ttagType: \"NEW_ADMIN_PUB_KEY_TAG\",\n\t\t\t\tsourceOfTrust: { receivingUserGroupKey: currentUserGroupKey.object },\n\t\t\t\tuntrustedKey: { newAdminPubKey: asPQPublicKeys(currentAdminPubKeys.object) },\n\t\t\t\tbindingData: {\n\t\t\t\t\tuserGroupId,\n\t\t\t\t\tadminGroupId,\n\t\t\t\t\tnewAdminGroupKeyVersion: adminGroupKeyVersion,\n\t\t\t\t\tcurrentReceivingUserGroupKeyVersion: currentUserGroupKey.version,\n\t\t\t\t},\n\t\t\t},\n\t\t\ttag,\n\t\t)\n\n\t\tconst pubAdminGroupEncUserGroupKey = await this.encryptUserGroupKeyForAdminAsymmetrically(\n\t\t\tuserGroupId,\n\t\t\tnewUserGroupKeys,\n\t\t\tcurrentAdminPubKeys,\n\t\t\tadminGroupId,\n\t\t\tcurrentUserGroupKey,\n\t\t)\n\t\treturn { pubAdminGroupEncUserGroupKey, adminGroupKeyVersion: currentAdminPubKeys.version }\n\t}\n\n\tprivate async handleUserGroupKeyRotationAsAdmin(\n\t\tuserGroupKeyRotation: KeyRotation,\n\t\tadminGroupId: Id,\n\t\tpwKey: Aes256Key,\n\t\tuserGroupId: Id,\n\t\tcurrentUserGroupKey: VersionedKey,\n\t\tnewUserGroupKeys: GeneratedGroupKeys,\n\t) {\n\t\tconst distEncAdminGroupSymKey = assertNotNull(userGroupKeyRotation.distEncAdminGroupSymKey, \"missing new admin group key\")\n\t\tconst pubAdminEncGKeyAuthHash = brandKeyMac(assertNotNull(distEncAdminGroupSymKey.symKeyMac, \"missing new admin group key encrypted hash\"))\n\t\tif (userGroupKeyRotation.adminDistKeyPair == null || !isEncryptedPqKeyPairs(userGroupKeyRotation.adminDistKeyPair)) {\n\t\t\tthrow new Error(\"missing some required parameters for a user group key rotation as admin\")\n\t\t}\n\t\t//derive adminDistKeyPairDistributionKey\n\t\tconst currentAdminGroupKeyFromMembership = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId) // get admin group key from the membership (not yet rotated)\n\t\tconst adminGroupKeyDistributionKeyPairKey = this.deriveAdminGroupDistributionKeyPairEncryptionKey(\n\t\t\tadminGroupId,\n\t\t\tuserGroupId,\n\t\t\tcurrentAdminGroupKeyFromMembership.version,\n\t\t\tcurrentUserGroupKey.version,\n\t\t\tpwKey,\n\t\t)\n\n\t\t// decrypt his private distribution key\n\t\tconst adminGroupDistKeyPair = this.cryptoWrapper.decryptKeyPair(adminGroupKeyDistributionKeyPairKey, userGroupKeyRotation.adminDistKeyPair)\n\t\t//decrypt new symmetric admin group key\n\t\tconst senderIdentifier = {\n\t\t\tidentifier: assertNotNull(distEncAdminGroupSymKey.senderIdentifier),\n\t\t\tidentifierType: asPublicKeyIdentifier(assertNotNull(distEncAdminGroupSymKey.senderIdentifierType)),\n\t\t}\n\t\tconst decapsulatedNewAdminGroupKey = await this.asymmetricCryptoFacade.decryptSymKeyWithKeyPairAndAuthenticate(\n\t\t\tadminGroupDistKeyPair,\n\t\t\tdistEncAdminGroupSymKey,\n\t\t\tsenderIdentifier,\n\t\t)\n\t\tconst versionedNewAdminGroupKey = {\n\t\t\tobject: decapsulatedNewAdminGroupKey.decryptedAesKey,\n\t\t\tversion: parseKeyVersion(pubAdminEncGKeyAuthHash.taggedKeyVersion),\n\t\t}\n\n\t\tthis.keyAuthenticationFacade.verifyTag(\n\t\t\t{\n\t\t\t\ttagType: \"ADMIN_SYM_KEY_TAG\",\n\t\t\t\tsourceOfTrust: { currentReceivingUserGroupKey: currentUserGroupKey.object },\n\t\t\t\tuntrustedKey: { newAdminGroupKey: versionedNewAdminGroupKey.object },\n\t\t\t\tbindingData: {\n\t\t\t\t\tcurrentReceivingUserGroupKeyVersion: currentUserGroupKey.version,\n\t\t\t\t\tadminGroupId,\n\t\t\t\t\tuserGroupId,\n\t\t\t\t\tnewAdminGroupKeyVersion: versionedNewAdminGroupKey.version,\n\t\t\t\t},\n\t\t\t},\n\t\t\tpubAdminEncGKeyAuthHash.tag,\n\t\t)\n\n\t\tconst adminGroupEncUserGroupKey = this.cryptoWrapper.encryptKeyWithVersionedKey(versionedNewAdminGroupKey, newUserGroupKeys.symGroupKey.object).key\n\t\tconst userGroupEncAdminGroupKey = this.cryptoWrapper.encryptKeyWithVersionedKey(newUserGroupKeys.symGroupKey, versionedNewAdminGroupKey.object).key\n\t\tconst adminGroupKeyVersion = String(versionedNewAdminGroupKey.version)\n\t\treturn { adminGroupEncUserGroupKey, userGroupEncAdminGroupKey, adminGroupKeyVersion }\n\t}\n\n\tprivate async encryptUserGroupKeyForAdminAsymmetrically(\n\t\tuserGroupId: Id,\n\t\tnewUserGroupKeys: GeneratedGroupKeys,\n\t\tadminPubKeys: Versioned<PublicKeys>,\n\t\tadminGroupId: Id,\n\t\tcurrentUserGroupKey: VersionedKey,\n\t): Promise<PubEncKeyData> {\n\t\t// we want to authenticate with new sender key pair. so we just decrypt it again\n\t\tconst pqKeyPair: PQKeyPairs = this.cryptoWrapper.decryptKeyPair(newUserGroupKeys.symGroupKey.object, assertNotNull(newUserGroupKeys.encryptedKeyPair))\n\n\t\tconst pubEncSymKey = await this.asymmetricCryptoFacade.tutaCryptEncryptSymKey(newUserGroupKeys.symGroupKey.object, adminPubKeys, {\n\t\t\tversion: newUserGroupKeys.symGroupKey.version,\n\t\t\tobject: pqKeyPair.eccKeyPair,\n\t\t})\n\n\t\tconst tag = this.keyAuthenticationFacade.computeTag({\n\t\t\ttagType: \"USER_GROUP_KEY_TAG\",\n\t\t\tuntrustedKey: {\n\t\t\t\tnewUserGroupKey: newUserGroupKeys.symGroupKey.object,\n\t\t\t},\n\t\t\tsourceOfTrust: {\n\t\t\t\tcurrentUserGroupKey: currentUserGroupKey.object,\n\t\t\t},\n\t\t\tbindingData: {\n\t\t\t\tuserGroupId,\n\t\t\t\tadminGroupId,\n\t\t\t\tnewAdminGroupKeyVersion: adminPubKeys.version,\n\t\t\t\tcurrentUserGroupKeyVersion: currentUserGroupKey.version,\n\t\t\t\tnewUserGroupKeyVersion: newUserGroupKeys.symGroupKey.version,\n\t\t\t},\n\t\t})\n\n\t\tconst symKeyMac = createKeyMac({\n\t\t\ttaggingGroup: userGroupId,\n\t\t\ttag,\n\t\t\ttaggedKeyVersion: String(newUserGroupKeys.symGroupKey.version),\n\t\t\ttaggingKeyVersion: String(currentUserGroupKey.version),\n\t\t})\n\n\t\treturn createPubEncKeyData({\n\t\t\trecipientIdentifier: adminGroupId,\n\t\t\trecipientIdentifierType: PublicKeyIdentifierType.GROUP_ID,\n\t\t\tpubEncSymKey: pubEncSymKey.pubEncSymKeyBytes,\n\t\t\tprotocolVersion: pubEncSymKey.cryptoProtocolVersion,\n\t\t\tsenderKeyVersion: pubEncSymKey.senderKeyVersion != null ? pubEncSymKey.senderKeyVersion.toString() : null,\n\t\t\trecipientKeyVersion: pubEncSymKey.recipientKeyVersion.toString(),\n\t\t\tsenderIdentifier: userGroupId,\n\t\t\tsenderIdentifierType: PublicKeyIdentifierType.GROUP_ID,\n\t\t\tsymKeyMac,\n\t\t})\n\t}\n\n\tprivate async createDistributionKeyPair(pwKey: Aes256Key, multiAdminKeyRotation: KeyRotation) {\n\t\tlet adminGroupId = getElementId(multiAdminKeyRotation)\n\t\tconst currentAdminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId)\n\t\tconst currentUserGroupKey = this.keyLoaderFacade.getCurrentSymUserGroupKey()\n\t\tconst userGroupId = this.userFacade.getUserGroupId()\n\t\tconst userGroupKey = this.keyLoaderFacade.getCurrentSymUserGroupKey()\n\t\tconst adminDistKeyPairDistributionKey = this.deriveAdminGroupDistributionKeyPairEncryptionKey(\n\t\t\tadminGroupId,\n\t\t\tuserGroupId,\n\t\t\tcurrentAdminGroupKey.version,\n\t\t\tuserGroupKey.version,\n\t\t\tpwKey,\n\t\t)\n\t\tconst adminDistributionKeyPair = await this.generateAndEncryptPqKeyPairs(adminDistKeyPairDistributionKey)\n\n\t\tconst tag = this.keyAuthenticationFacade.computeTag({\n\t\t\ttagType: \"PUB_DIST_KEY_TAG\",\n\t\t\tsourceOfTrust: { currentAdminGroupKey: currentAdminGroupKey.object },\n\t\t\tuntrustedKey: {\n\t\t\t\tdistPubKey: asPQPublicKeys(adminDistributionKeyPair),\n\t\t\t},\n\t\t\tbindingData: {\n\t\t\t\tuserGroupId,\n\t\t\t\tadminGroupId,\n\t\t\t\tcurrentUserGroupKeyVersion: currentUserGroupKey.version,\n\t\t\t\tcurrentAdminGroupKeyVersion: currentAdminGroupKey.version,\n\t\t\t},\n\t\t})\n\n\t\tconst putDistributionKeyPairsOnKeyRotation = createAdminGroupKeyRotationPutIn({\n\t\t\tadminDistKeyPair: assertNotNull(makeKeyPair(adminDistributionKeyPair)),\n\t\t\tdistKeyMac: createKeyMac({\n\t\t\t\ttag,\n\t\t\t\ttaggedKeyVersion: \"0\", // dummy value because this is only used for the rotation and does not have a version\n\t\t\t\ttaggingGroup: adminGroupId,\n\t\t\t\ttaggingKeyVersion: currentAdminGroupKey.version.toString(),\n\t\t\t}),\n\t\t})\n\t\tawait this.serviceExecutor.put(AdminGroupKeyRotationService, putDistributionKeyPairsOnKeyRotation)\n\t}\n\n\tasync rotateMultipleAdminsGroupKeys(user: User, passphraseKey: Aes256Key, keyRotation: KeyRotation) {\n\t\t// first get all admin members' available distribution keys\n\t\tconst { distributionKeys, userGroupIdsMissingDistributionKeys } = await this.serviceExecutor.get(AdminGroupKeyRotationService, null)\n\n\t\tswitch (this.decideMultiAdminGroupKeyRotationNextPathOfAction(userGroupIdsMissingDistributionKeys, user, distributionKeys)) {\n\t\t\tcase MultiAdminGroupKeyAdminActionPath.WAIT_FOR_OTHER_ADMINS:\n\t\t\t\tbreak\n\t\t\tcase MultiAdminGroupKeyAdminActionPath.CREATE_DISTRIBUTION_KEYS:\n\t\t\t\tawait this.createDistributionKeyPair(passphraseKey, keyRotation)\n\t\t\t\tbreak\n\t\t\tcase MultiAdminGroupKeyAdminActionPath.PERFORM_KEY_ROTATION:\n\t\t\t\tawait this.performMultiAdminKeyRotation(keyRotation, user, passphraseKey, distributionKeys)\n\t\t\t\tbreak\n\t\t\tcase MultiAdminGroupKeyAdminActionPath.IMPOSSIBLE_STATE:\n\t\t\t\tthrow new TutanotaError(\n\t\t\t\t\t\"MultiAdminGroupKeyAdminActionPathImpossibleStateMetError\",\n\t\t\t\t\t\"Impossible state met while performing multi admin key rotation\",\n\t\t\t\t)\n\t\t}\n\t}\n\n\tprivate async performMultiAdminKeyRotation(keyRotation: KeyRotation, user: User, passphraseKey: number[], distributionKeys: PubDistributionKey[]) {\n\t\tconst adminGroupId = this.getTargetGroupId(keyRotation)\n\n\t\t// load current admin group key\n\t\tconst currentAdminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId)\n\n\t\t// creation of a new admin group key\n\t\tconst currentUserGroupKey = this.keyLoaderFacade.getCurrentSymUserGroupKey()\n\t\tconst { keyRotationData, newAdminGroupKeys, newUserGroupKeys } = await this.prepareKeyRotationForSingleAdmin(\n\t\t\tkeyRotation,\n\t\t\tuser,\n\t\t\tcurrentUserGroupKey,\n\t\t\tcurrentAdminGroupKey,\n\t\t\tpassphraseKey,\n\t\t)\n\t\tconst newSymAdminGroupKey = newAdminGroupKeys.symGroupKey\n\n\t\tconst { symGroupKey: symUserGroupKey, encryptedKeyPair: encryptedUserKeyPair } = newUserGroupKeys\n\t\tconst generatedPrivateEccKey = this.cryptoWrapper.aesDecrypt(symUserGroupKey.object, assertNotNull(encryptedUserKeyPair?.symEncPrivEccKey), true)\n\t\tconst generatedPublicEccKey = assertNotNull(encryptedUserKeyPair?.pubEccKey)\n\t\tconst generatedEccKeyPair: Versioned<EccKeyPair> = {\n\t\t\tversion: symUserGroupKey.version,\n\t\t\tobject: {\n\t\t\t\tprivateKey: generatedPrivateEccKey,\n\t\t\t\tpublicKey: generatedPublicEccKey,\n\t\t\t},\n\t\t}\n\n\t\tconst groupManagementFacade = await this.groupManagementFacade()\n\n\t\t// distribution for all other admins using their distribution keys\n\t\tfor (const distributionKey of distributionKeys) {\n\t\t\t// we do not distribute for ourselves\n\t\t\tif (isSameId(distributionKey.userGroupId, user.userGroup.group)) continue\n\t\t\t// verify authenticity of this distribution key\n\t\t\t// reproduce hash\n\n\t\t\tconst userGroupId = distributionKey.userGroupId\n\t\t\tconst targetUserGroupKey = await groupManagementFacade.getCurrentGroupKeyViaAdminEncGKey(userGroupId)\n\t\t\tconst givenTag = brandKeyMac(distributionKey.pubKeyMac).tag\n\n\t\t\tthis.keyAuthenticationFacade.verifyTag(\n\t\t\t\t{\n\t\t\t\t\ttagType: \"PUB_DIST_KEY_TAG\",\n\t\t\t\t\tsourceOfTrust: { currentAdminGroupKey: currentAdminGroupKey.object },\n\t\t\t\t\tuntrustedKey: {\n\t\t\t\t\t\tdistPubKey: asPQPublicKeys(distributionKey),\n\t\t\t\t\t},\n\t\t\t\t\tbindingData: {\n\t\t\t\t\t\tuserGroupId,\n\t\t\t\t\t\tadminGroupId,\n\t\t\t\t\t\tcurrentUserGroupKeyVersion: targetUserGroupKey.version,\n\t\t\t\t\t\tcurrentAdminGroupKeyVersion: currentAdminGroupKey.version,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tgivenTag,\n\t\t\t)\n\n\t\t\tconst recipientPublicDistKeys: Versioned<PublicKeys> = {\n\t\t\t\tversion: 0,\n\t\t\t\tobject: {\n\t\t\t\t\tpubRsaKey: null,\n\t\t\t\t\tpubEccKey: distributionKey.pubEccKey,\n\t\t\t\t\tpubKyberKey: distributionKey.pubKyberKey,\n\t\t\t\t},\n\t\t\t}\n\n\t\t\tconst encryptedAdminGroupKeyForThisAdmin = await this.asymmetricCryptoFacade.tutaCryptEncryptSymKey(\n\t\t\t\tnewSymAdminGroupKey.object,\n\t\t\t\trecipientPublicDistKeys,\n\t\t\t\tgeneratedEccKeyPair,\n\t\t\t)\n\n\t\t\tconst adminSymKeyTag = this.keyAuthenticationFacade.computeTag({\n\t\t\t\ttagType: \"ADMIN_SYM_KEY_TAG\",\n\t\t\t\tsourceOfTrust: { currentReceivingUserGroupKey: targetUserGroupKey.object },\n\t\t\t\tuntrustedKey: { newAdminGroupKey: newSymAdminGroupKey.object },\n\t\t\t\tbindingData: {\n\t\t\t\t\tadminGroupId,\n\t\t\t\t\tuserGroupId,\n\t\t\t\t\tcurrentReceivingUserGroupKeyVersion: currentUserGroupKey.version,\n\t\t\t\t\tnewAdminGroupKeyVersion: newSymAdminGroupKey.version,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tconst symKeyMac = createKeyMac({\n\t\t\t\ttaggingGroup: adminGroupId,\n\t\t\t\ttaggedKeyVersion: String(newSymAdminGroupKey.version),\n\t\t\t\ttaggingKeyVersion: String(currentAdminGroupKey.version),\n\t\t\t\ttag: adminSymKeyTag,\n\t\t\t})\n\n\t\t\tconst pubEncKeyData = createPubEncKeyData({\n\t\t\t\trecipientIdentifierType: PublicKeyIdentifierType.GROUP_ID,\n\t\t\t\trecipientIdentifier: \"dummy\",\n\t\t\t\trecipientKeyVersion: \"0\",\n\t\t\t\tpubEncSymKey: encryptedAdminGroupKeyForThisAdmin.pubEncSymKeyBytes,\n\t\t\t\tsenderIdentifierType: PublicKeyIdentifierType.GROUP_ID,\n\t\t\t\tsenderIdentifier: user.userGroup.group,\n\t\t\t\tsenderKeyVersion: String(generatedEccKeyPair.version),\n\t\t\t\tprotocolVersion: CryptoProtocolVersion.TUTA_CRYPT,\n\t\t\t\tsymKeyMac,\n\t\t\t})\n\t\t\tconst thisAdminDistributionElement: AdminGroupKeyDistributionElement = createAdminGroupKeyDistributionElement({\n\t\t\t\tuserGroupId: distributionKey.userGroupId,\n\t\t\t\tdistEncAdminGroupKey: pubEncKeyData,\n\t\t\t})\n\n\t\t\tkeyRotationData.distribution.push(thisAdminDistributionElement)\n\t\t}\n\n\t\t// call service\n\t\tawait this.serviceExecutor.post(AdminGroupKeyRotationService, keyRotationData)\n\t\tthis.groupIdsThatPerformedKeyRotations.add(user.userGroup.group)\n\t}\n\n\t/**\n\t * Context: multi admin group key rotation\n\t *\n\t * This utility function determines the action a given admin must take in a multi admin group key rotation scenario\n\t * This action can be one of these three\n\t * - the admin should wait for the other to create their distribution keys\n\t * - the admin should create their distribution keys\n\t * - the admin should perform the key rotation and distribute the new keys to other admins\n\t *\n\t * @param userGroupIdsMissingDistributionKeys all admin member ids that currently don't have distribution keys\n\t * @param adminUser the current logged-in admin user\n\t * @param distributionKeys the distribution keys already created (include the admins user keys)\n\t *\n\t */\n\tpublic decideMultiAdminGroupKeyRotationNextPathOfAction(\n\t\tuserGroupIdsMissingDistributionKeys: Id[],\n\t\tadminUser: User,\n\t\tdistributionKeys: PubDistributionKey[],\n\t): MultiAdminGroupKeyAdminActionPath {\n\t\tconst everyoneHasDistributionKeys = userGroupIdsMissingDistributionKeys.length === 0\n\t\tconst everyoneElseHasDistributionKeysButMe =\n\t\t\tuserGroupIdsMissingDistributionKeys.length === 1 && isSameId(userGroupIdsMissingDistributionKeys[0], adminUser.userGroup.group)\n\t\tconst iHaveDistributionKeys = distributionKeys.some((dk) => isSameId(dk.userGroupId, adminUser.userGroup.group))\n\n\t\t// check order is important\n\t\tif (everyoneElseHasDistributionKeysButMe || everyoneHasDistributionKeys) {\n\t\t\treturn MultiAdminGroupKeyAdminActionPath.PERFORM_KEY_ROTATION\n\t\t} else if (!everyoneHasDistributionKeys && iHaveDistributionKeys) {\n\t\t\treturn MultiAdminGroupKeyAdminActionPath.WAIT_FOR_OTHER_ADMINS\n\t\t} else if (!everyoneElseHasDistributionKeysButMe && !iHaveDistributionKeys) {\n\t\t\treturn MultiAdminGroupKeyAdminActionPath.CREATE_DISTRIBUTION_KEYS\n\t\t} else {\n\t\t\treturn MultiAdminGroupKeyAdminActionPath.IMPOSSIBLE_STATE\n\t\t}\n\t}\n\n\t/**\n\t * Gets a list of the groups for which we have rotated keys in the session, so far.\n\t */\n\tpublic async getGroupIdsThatPerformedKeyRotations(): Promise<Array<Id>> {\n\t\treturn Array.from(this.groupIdsThatPerformedKeyRotations.values())\n\t}\n}\n\n/**\n * We require AES keys to be 256-bit long to be quantum-safe because of Grover's algorithm.\n */\nfunction isQuantumSafe(key: AesKey) {\n\treturn getKeyLengthBytes(key) === KEY_LENGTH_BYTES_AES_256\n}\n\nfunction hasNonQuantumSafeKeys(...keys: AesKey[]) {\n\treturn keys.some((key) => !isQuantumSafe(key))\n}\n\nfunction makeKeyPair(keyPair: EncryptedPqKeyPairs | null): KeyPair | null {\n\treturn keyPair != null ? createKeyPair(keyPair) : null\n}\n"]}