{"version":3,"file":"FormatValidator.js","sourceRoot":"","sources":["../../../../src/common/misc/FormatValidator.ts"],"names":[],"mappings":"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","sourcesContent":["import { startsWith } from \"@tutao/tutanota-utils\"\n\nconst DOMAIN_PART_REGEX = \"[\\\\w\\\\-\\\\+_]+\"\nconst DOMAIN_REGEXP = new RegExp(`^${DOMAIN_PART_REGEX}\\\\.${DOMAIN_PART_REGEX}(\\\\.${DOMAIN_PART_REGEX})*\\\\s*$`)\nconst DOMAIN_OR_TLD_REGEXP = new RegExp(`^(${DOMAIN_PART_REGEX}.)*${DOMAIN_PART_REGEX}$`)\nconst STRICT_USERNAME_MAIL_ADDR_REGEXP = new RegExp(\n\t`^\\\\s*${DOMAIN_PART_REGEX}(\\\\.${DOMAIN_PART_REGEX})*\\\\@${DOMAIN_PART_REGEX}\\\\.${DOMAIN_PART_REGEX}(\\\\.${DOMAIN_PART_REGEX})*\\\\s*$`,\n)\nconst EMAIL_ADDR_REGEXP = new RegExp(`^[^\\\\s\\\\@]+\\\\@${DOMAIN_PART_REGEX}\\\\.${DOMAIN_PART_REGEX}(\\\\.${DOMAIN_PART_REGEX})*\\\\s*$`)\n\n/**\n * Checks if the given string is a valid email address format.\n * @param string The string to check.\n * @param strictUserName If true checks that the part before the @ is not longer than 64 characters and does not contain special characters.\n * @return If the string is an email address.\n */\nexport function isMailAddress(string: string, strictUserName: boolean): boolean {\n\t/* KEEP IN SYNC WITH JAVA VERSION IN PhoneNumberUtils.js (except uppercase) */\n\t// check trailing whitespaces because they are not covered by the following regexp\n\t// allow uppercase addresses in input check, convert them before sending to server.\n\tif (string == null || string !== string.trim()) {\n\t\treturn false\n\t}\n\n\tif (string.indexOf(\"-\") === 0) {\n\t\treturn false\n\t}\n\n\tif (\n\t\tstring.indexOf(\",\") !== -1 ||\n\t\tstring.indexOf(\"(\") !== -1 ||\n\t\tstring.indexOf(\")\") !== -1 ||\n\t\tstring.indexOf(\":\") !== -1 ||\n\t\tstring.indexOf(\";\") !== -1 ||\n\t\tstring.indexOf(\"<\") !== -1 ||\n\t\tstring.indexOf(\">\") !== -1 ||\n\t\tstring.indexOf(\"[\") !== -1 ||\n\t\tstring.indexOf(\"]\") !== -1 ||\n\t\tstring.indexOf(\"\\\\\") !== -1\n\t) {\n\t\treturn false\n\t}\n\n\t// check lengths (see https://tools.ietf.org/html/rfc5321#section-4.5.3)\n\tif (string.length > 254) {\n\t\t// 256 minus \"<\" and \">\" of the path\n\t\treturn false\n\t}\n\n\tif (strictUserName) {\n\t\tif (string.indexOf(\"@\") > 64) {\n\t\t\treturn false\n\t\t}\n\n\t\t// see https://web.archive.org/web/20180813043723/http://ntt.cc/2008/05/10/over-10-useful-javascript-regular-expression-functions-to-improve-your-web-applications-efficiency.html\n\t\treturn STRICT_USERNAME_MAIL_ADDR_REGEXP.test(string)\n\t} else {\n\t\t// see https://web.archive.org/web/20180813043723/http://ntt.cc/2008/05/10/over-10-useful-javascript-regular-expression-functions-to-improve-your-web-applications-efficiency.html\n\t\treturn EMAIL_ADDR_REGEXP.test(string)\n\t}\n}\n\n/**\n * Checks if the given string is a valid domain name.\n * @param {string} domainName The string to check.\n * @return {boolean} If the string is a domain name.\n */\nexport function isDomainName(domainName: string): boolean {\n\tif (domainName == null || domainName !== domainName.trim()) {\n\t\treturn false\n\t}\n\n\tif (startsWith(domainName, \"-\")) {\n\t\treturn false\n\t}\n\n\treturn DOMAIN_REGEXP.test(domainName)\n}\n\nexport function isDomainOrTopLevelDomain(value: string): boolean {\n\tif (startsWith(value, \"-\")) {\n\t\treturn false\n\t}\n\n\t// Repeated words ending with dot and word at the end.\n\t// matches test.com and com but not .com\n\treturn DOMAIN_OR_TLD_REGEXP.test(value)\n}\n\n/**\n * Checks if the value is a regular expression, with or without optional flags.\n * @param value The string to check\n */\nexport function isRegularExpression(value: string): boolean {\n\treturn /^\\/.*\\/$/.test(value) || /^\\/.*\\/(?!.*(.)\\1)[gimsuy]+$/.test(value)\n}\n\n/**\n * Determine whether an input string is a valid credit card number\n * https://en.wikipedia.org/wiki/Luhn_algorithm\n * @param input: a string between 6 and 20 chars long that should contain only digits or spaces\n * @returns {boolean}\n */\nexport function isValidCreditCardNumber(input: string): boolean {\n\tconst cleaned = input.match(/^[0123456789 ]+$/)\n\n\tif (!cleaned || cleaned.length !== 1) {\n\t\treturn false\n\t}\n\n\tconst digits = cleaned[0].split(\"\").filter((c) => !/\\s/.test(c))\n\n\tif (digits.length < 6 || digits.length > 20) {\n\t\treturn false\n\t}\n\n\treturn (\n\t\tdigits\n\t\t\t.reverse()\n\t\t\t.map((num) => Number(num))\n\t\t\t.reduce((acc, cur, idx) => {\n\t\t\t\tconst num = idx % 2 === 0 ? cur : cur * 2 - (cur > 4 ? 9 : 0)\n\t\t\t\treturn acc + num\n\t\t\t}, 0) %\n\t\t\t10 ===\n\t\t0\n\t)\n}\n"]}