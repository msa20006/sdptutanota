{"version":3,"file":"EntityUtils.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/utils/EntityUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tbase64ExtToBase64,\n\tbase64ToBase64Ext,\n\tbase64ToBase64Url,\n\tbase64ToUint8Array,\n\tbase64UrlToBase64,\n\tclone,\n\tcompare,\n\tHex,\n\thexToBase64,\n\tisSameTypeRef,\n\tpad,\n\trepeat,\n\tstringToUtf8Uint8Array,\n\tTypeRef,\n\tuint8ArrayToBase64,\n\tutf8Uint8ArrayToString,\n} from \"@tutao/tutanota-utils\"\nimport { Cardinality, ValueType } from \"../EntityConstants.js\"\nimport type { ElementEntity, Entity, ModelValue, SomeEntity, TypeModel } from \"../EntityTypes\"\n\n/**\n * the maximum ID for elements stored on the server (number with the length of 10 bytes) => 2^80 - 1\n */\nexport const GENERATED_MAX_ID = \"zzzzzzzzzzzz\"\n\n/**\n * The minimum ID for elements with generated id stored on the server\n */\nexport const GENERATED_MIN_ID = \"------------\"\n\n/**\n * The byte length of a generated id\n */\nexport const GENERATED_ID_BYTES_LENGTH = 9\n\n/**\n * The byte length of a custom Id used by mail set entries\n * 4 bytes timestamp (1024ms resolution)\n * 9 bytes mail element Id\n */\nexport const MAIL_SET_ENTRY_ID_BYTE_LENGTH = 13\n\n/**\n * The minimum ID for elements with custom id stored on the server\n */\nexport const CUSTOM_MIN_ID = \"\"\n/**\n * the maximum custom element id is enforced to be less than 256 bytes on the server. decoding this as Base64Url gives 255 bytes.\n *\n * NOTE: this is currently only used as a marker value when caching CalenderEvent and MailSetEntry.\n */\nexport const CUSTOM_MAX_ID = repeat(\"_\", 340)\nexport const RANGE_ITEM_LIMIT = 1000\nexport const LOAD_MULTIPLE_LIMIT = 100\nexport const POST_MULTIPLE_LIMIT = 100\n\n/**\n * an entity that only contains the actual user data and can not be used to refer to any existing entity.\n */\nexport type Stripped<T extends Partial<SomeEntity>> = Omit<\n\tT,\n\t| \"_id\"\n\t| \"_area\"\n\t| \"_owner\"\n\t| \"_ownerGroup\"\n\t| \"_ownerEncSessionKey\"\n\t| \"_ownerKeyVersion\"\n\t| \"_permissions\"\n\t| \"_errors\"\n\t| \"_format\"\n\t| \"_type\"\n\t| `_finalEncrypted${string}`\n\t| `_defaultEncrypted${string}`\n>\n\ntype OptionalEntity<T extends Entity> = T & {\n\t_id?: Id | IdTuple\n\t_ownerGroup?: Id\n}\n\nexport type StrippedEntity<T extends Entity> =\n\t| Omit<\n\t\t\tT,\n\t\t\t| \"_id\"\n\t\t\t| \"_ownerGroup\"\n\t\t\t| \"_ownerEncSessionKey\"\n\t\t\t| \"_ownerKeyVersion\"\n\t\t\t| \"_permissions\"\n\t\t\t| \"_errors\"\n\t\t\t| \"_format\"\n\t\t\t| \"_type\"\n\t\t\t| \"_area\"\n\t\t\t| \"_owner\"\n\t\t\t| `_finalEncrypted${string}`\n\t\t\t| `_defaultEncrypted${string}`\n\t  >\n\t| OptionalEntity<T>\n\n/**\n * Tests if one id is bigger than another.\n * For generated IDs we use base64ext which is sortable.\n * For custom IDs we use base64url which is not sortable, so we convert them to string before comparing.\n * Important: using this for custom IDs works only with custom IDs which are derived from strings.\n *\n * @param firstId The element id that is tested if it is bigger.\n * @param secondId The element id that is tested against.\n * @param typeModel optional - the type the Ids belong to. this can be used to compare custom IDs.\n * @return True if firstId is bigger than secondId, false otherwise.\n */\nexport function firstBiggerThanSecond(firstId: Id, secondId: Id, typeModel?: TypeModel): boolean {\n\tif (typeModel?.values._id.type === ValueType.CustomId) {\n\t\treturn firstBiggerThanSecondCustomId(firstId, secondId)\n\t} else {\n\t\t// if the number of digits is bigger, then the id is bigger, otherwise we can use the lexicographical comparison\n\t\tif (firstId.length > secondId.length) {\n\t\t\treturn true\n\t\t} else if (secondId.length > firstId.length) {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn firstId > secondId\n\t\t}\n\t}\n}\n\nexport function firstBiggerThanSecondCustomId(firstId: Id, secondId: Id): boolean {\n\treturn compare(customIdToUint8array(firstId), customIdToUint8array(secondId)) === 1\n}\n\nexport function customIdToUint8array(id: Id): Uint8Array {\n\tif (id === \"\") {\n\t\treturn new Uint8Array()\n\t}\n\treturn base64ToUint8Array(base64UrlToBase64(id))\n}\n\nexport function compareNewestFirst(id1: Id | IdTuple, id2: Id | IdTuple): number {\n\tlet firstId = id1 instanceof Array ? id1[1] : id1\n\tlet secondId = id2 instanceof Array ? id2[1] : id2\n\n\tif (firstId === secondId) {\n\t\treturn 0\n\t} else {\n\t\treturn firstBiggerThanSecond(firstId, secondId) ? -1 : 1\n\t}\n}\n\nexport function compareOldestFirst(id1: Id | IdTuple, id2: Id | IdTuple): number {\n\tlet firstId = id1 instanceof Array ? id1[1] : id1\n\tlet secondId = id2 instanceof Array ? id2[1] : id2\n\n\tif (firstId === secondId) {\n\t\treturn 0\n\t} else {\n\t\treturn firstBiggerThanSecond(firstId, secondId) ? 1 : -1\n\t}\n}\n\nexport function sortCompareByReverseId<T extends ListElement>(entity1: T, entity2: T): number {\n\treturn compareNewestFirst(getElementId(entity1), getElementId(entity2))\n}\n\nexport function sortCompareById<T extends ListElement>(entity1: T, entity2: T): number {\n\treturn compareOldestFirst(getElementId(entity1), getElementId(entity2))\n}\n\n/**\n * Compares the ids of two elements.\n * @pre Both entities are either ElementTypes or ListElementTypes\n * @param id1\n * @param id2\n * @returns True if the ids are the same, false otherwise\n */\nexport function isSameId(id1: (Id | IdTuple) | null, id2: (Id | IdTuple) | null): boolean {\n\tif (id1 === null || id2 === null) {\n\t\treturn false\n\t} else if (id1 instanceof Array && id2 instanceof Array) {\n\t\treturn id1[0] === id2[0] && id1[1] === id2[1]\n\t} else {\n\t\treturn id1 === id2\n\t}\n}\n\nexport function haveSameId(entity1: SomeEntity, entity2: SomeEntity): boolean {\n\treturn isSameId(entity1._id, entity2._id)\n}\n\nexport function containsId(ids: ReadonlyArray<Id | IdTuple>, id: Id | IdTuple): boolean {\n\treturn ids.some((idInArray) => isSameId(idInArray, id))\n}\n\nexport interface Element {\n\t_id: Id\n}\n\nexport interface ListElement {\n\t_id: IdTuple\n}\n\nexport interface BlobElement {\n\t_id: IdTuple\n}\n\nexport function getEtId(entity: Element): Id {\n\treturn entity._id\n}\n\nexport function getLetId(entity: ListElement): IdTuple {\n\tif (typeof entity._id === \"undefined\") {\n\t\tthrow new Error(\"listId is not defined for \" + (typeof (entity as any)._type === \"undefined\" ? JSON.stringify(entity) : (entity as any)))\n\t}\n\n\treturn entity._id\n}\n\nexport function getElementId<T extends ListElement>(entity: T): Id {\n\treturn elementIdPart(getLetId(entity))\n}\n\nexport function getListId<T extends ListElement>(entity: T): Id {\n\treturn listIdPart(getLetId(entity))\n}\n\nexport function listIdPart(id: IdTuple): Id {\n\treturn id[0]\n}\n\nexport function elementIdPart(id: IdTuple): Id {\n\treturn id[1]\n}\n\n/**\n * Converts a string to a custom id. Attention: the custom id must be intended to be derived from a string.\n */\nexport function stringToCustomId(string: string): string {\n\treturn uint8arrayToCustomId(stringToUtf8Uint8Array(string))\n}\n\nexport function uint8arrayToCustomId(array: Uint8Array): string {\n\treturn base64ToBase64Url(uint8ArrayToBase64(array))\n}\n\n/**\n * Converts a custom id to a string. Attention: the custom id must be intended to be derived from a string.\n */\nexport function customIdToString(customId: string): string {\n\treturn utf8Uint8ArrayToString(base64ToUint8Array(base64UrlToBase64(customId)))\n}\n\nexport function create<T>(typeModel: TypeModel, typeRef: TypeRef<T>, createDefaultValue: (name: string, value: ModelValue) => any = _getDefaultValue): T {\n\tlet i: Record<string, any> = {\n\t\t_type: typeRef,\n\t}\n\n\tfor (let valueName of Object.keys(typeModel.values)) {\n\t\tlet value = typeModel.values[valueName]\n\t\ti[valueName] = createDefaultValue(valueName, value)\n\t}\n\n\tfor (let associationName of Object.keys(typeModel.associations)) {\n\t\tlet association = typeModel.associations[associationName]\n\n\t\tif (association.cardinality === Cardinality.Any) {\n\t\t\ti[associationName] = []\n\t\t} else {\n\t\t\t// set to null even if the cardinality is One. we could think about calling create recursively,\n\t\t\t// but that would require us to resolve type refs (async) and recursively merge the result with\n\t\t\t// the provided values\n\t\t\ti[associationName] = null\n\t\t}\n\t}\n\n\treturn i as any\n}\n\nfunction _getDefaultValue(valueName: string, value: ModelValue): any {\n\tif (valueName === \"_format\") {\n\t\treturn \"0\"\n\t} else if (valueName === \"_id\") {\n\t\treturn null // aggregate ids are set in the worker, list ids must be set explicitely and element ids are created on the server\n\t} else if (valueName === \"_permissions\") {\n\t\treturn null\n\t} else if (value.cardinality === Cardinality.ZeroOrOne) {\n\t\treturn null\n\t} else {\n\t\tswitch (value.type) {\n\t\t\tcase ValueType.Bytes:\n\t\t\t\treturn new Uint8Array(0)\n\n\t\t\tcase ValueType.Date:\n\t\t\t\treturn new Date()\n\n\t\t\tcase ValueType.Number:\n\t\t\t\treturn \"0\"\n\n\t\t\tcase ValueType.String:\n\t\t\t\treturn \"\"\n\n\t\t\tcase ValueType.Boolean:\n\t\t\t\treturn false\n\n\t\t\tcase ValueType.CustomId:\n\t\t\tcase ValueType.GeneratedId:\n\t\t\t\treturn null\n\t\t\t// we have to use null although the value must be set to something different\n\t\t}\n\t}\n\n\tthrow new Error(`no default value for ${JSON.stringify(value)}`)\n}\n\n/**\n * Converts a timestamp number to a GeneratedId (the counter is set to zero) in hex format.\n *\n * @param timestamp The timestamp of the GeneratedId\n * @return The GeneratedId as hex string.\n */\nexport function timestampToHexGeneratedId(timestamp: number, serverBytes: number): Hex {\n\tlet id = timestamp * 4 // shifted 2 bits left, so the value covers 44 bits overall (42 timestamp + 2 shifted)\n\n\tlet hex = id.toString(16) + \"00000\" + pad(serverBytes, 2) // add one zero for the missing 4 bits plus 4 more (2 bytes) plus 2 more for the server id to get 9 bytes\n\n\t// add leading zeros to reach 9 bytes (GeneratedId length) = 18 hex\n\tfor (let length = hex.length; length < 18; length++) {\n\t\thex = \"0\" + hex\n\t}\n\n\treturn hex\n}\n\n/**\n * Converts a timestamp number to a GeneratedId (the counter and server bits are set to zero).\n *\n * @param timestamp The timestamp of the GeneratedId\n * @return The GeneratedId.\n */\nexport function timestampToGeneratedId(timestamp: number, serverBytes: number = 0): Id {\n\tlet hex = timestampToHexGeneratedId(timestamp, serverBytes)\n\treturn base64ToBase64Ext(hexToBase64(hex))\n}\n\n/**\n * Extracts the timestamp from a GeneratedId\n * @param base64Ext The id as base64Ext\n * @returns The timestamp of the GeneratedId\n */\nexport function generatedIdToTimestamp(base64Ext: Id): number {\n\tconst base64 = base64ExtToBase64(base64Ext)\n\tconst decodedbB4 = atob(base64)\n\tlet numberResult = 0\n\n\t// Timestamp is in the first 42 bits\n\tfor (let i = 0; i < 5; i++) {\n\t\t// We \"shift\" each number by 8 bits to the left: numberResult << 8\n\t\tnumberResult = numberResult * 256\n\t\tnumberResult += decodedbB4.charCodeAt(i)\n\t}\n\n\t// We need to shift the whole number to the left by 2 bits (because 42 bits is encoded in 6 bytes)\n\tnumberResult = numberResult * 4\n\t// We take only last two highest bits from the last byte\n\tnumberResult += decodedbB4.charCodeAt(5) >>> 6\n\treturn numberResult\n}\n\nconst base64extEncodedIdLength = GENERATED_MAX_ID.length\nconst base64extAlphabet = \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\"\n\nexport function isValidGeneratedId(id: Id | IdTuple): boolean {\n\tconst test = (id: string) => id.length === base64extEncodedIdLength && Array.from(id).every((char) => base64extAlphabet.includes(char))\n\n\treturn typeof id === \"string\" ? test(id) : id.every(test)\n}\n\nexport function isElementEntity(e: SomeEntity): e is ElementEntity {\n\treturn typeof e._id === \"string\"\n}\n\nexport function assertIsEntity<T extends SomeEntity>(entity: SomeEntity, type: TypeRef<T>): entity is T {\n\tif (isSameTypeRef(entity._type, type)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\nexport function assertIsEntity2<T extends SomeEntity>(type: TypeRef<T>): (entity: SomeEntity) => entity is T {\n\treturn (e): e is T => assertIsEntity(e, type)\n}\n\n/**\n * Remove some hidden technical fields from the entity.\n *\n * Only use for new entities, the {@param entity} won't be usable for updates anymore after this.\n */\nexport function removeTechnicalFields<E extends Partial<SomeEntity>>(entity: E) {\n\t// we want to restrict outer function to entity types but internally we also want to handle aggregates\n\tfunction _removeTechnicalFields(erased: Record<string, any>) {\n\t\tfor (const key of Object.keys(erased)) {\n\t\t\tif (key.startsWith(\"_finalEncrypted\") || key.startsWith(\"_defaultEncrypted\") || key.startsWith(\"_errors\")) {\n\t\t\t\tdelete erased[key]\n\t\t\t} else {\n\t\t\t\tconst value = erased[key]\n\t\t\t\tif (value instanceof Object) {\n\t\t\t\t\t_removeTechnicalFields(value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t_removeTechnicalFields(entity)\n}\n\n/**\n * get a clone of a (partial) entity that does not contain any fields that would indicate that it was ever persisted anywhere.\n * @param entity the entity to strip\n */\nexport function getStrippedClone<E extends SomeEntity>(entity: StrippedEntity<E>): StrippedEntity<E> {\n\tconst cloned = clone(entity)\n\tremoveTechnicalFields(cloned)\n\tremoveIdentityFields(cloned)\n\treturn cloned\n}\n\n/**\n * remove fields that do not contain user defined data but are related to finding/accessing the entity on the server\n */\nfunction removeIdentityFields<E extends Partial<SomeEntity>>(entity: E) {\n\tconst keysToDelete = [\"_id\", \"_ownerGroup\", \"_ownerEncSessionKey\", \"_ownerKeyVersion\", \"_permissions\"]\n\n\tfunction _removeIdentityFields(erased: Record<string, any>) {\n\t\tfor (const key of Object.keys(erased)) {\n\t\t\tif (keysToDelete.includes(key)) {\n\t\t\t\tdelete erased[key]\n\t\t\t} else {\n\t\t\t\tconst value = erased[key]\n\t\t\t\tif (value instanceof Object) {\n\t\t\t\t\t_removeIdentityFields(value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t_removeIdentityFields(entity)\n}\n\n/** construct a mail set entry Id for a given mail. see MailFolderHelper.java */\nexport function constructMailSetEntryId(receiveDate: Date, mailId: Id): Id {\n\tconst buffer = new DataView(new ArrayBuffer(MAIL_SET_ENTRY_ID_BYTE_LENGTH))\n\tconst mailIdBytes = base64ToUint8Array(base64ExtToBase64(mailId))\n\n\t// shifting the received timestamp by 10 bit reduces the resolution from 1ms to 1024ms.\n\t// truncating to 4 bytes leaves us with enough space for epoch + 4_294_967_295 not-quite-seconds\n\t// (until around 2109-05-15 15:00)\n\tconst timestamp: bigint = BigInt(Math.trunc(receiveDate.getTime()))\n\n\tconst truncatedReceiveDate = (timestamp >> 10n) & 0x00000000ffffffffn\n\n\t// we don't need the leading zeroes\n\tbuffer.setBigUint64(0, truncatedReceiveDate << 32n)\n\n\tfor (let i = 0; i < mailIdBytes.length; i++) {\n\t\tbuffer.setUint8(i + 4, mailIdBytes[i])\n\t}\n\n\treturn uint8arrayToCustomId(new Uint8Array(buffer.buffer))\n}\n\nexport function deconstructMailSetEntryId(id: Id): { receiveDate: Date; mailId: Id } {\n\tconst buffer = customIdToUint8array(id)\n\tconst timestampBytes = buffer.slice(0, 4)\n\tconst generatedIdBytes = buffer.slice(4)\n\n\tconst timestamp1024 = (timestampBytes[0] << 24) | (timestampBytes[1] << 16) | (timestampBytes[2] << 8) | timestampBytes[3]\n\tconst timestamp = timestamp1024 * 1024\n\n\tconst mailId = base64ToBase64Ext(uint8ArrayToBase64(generatedIdBytes))\n\n\treturn { receiveDate: new Date(timestamp), mailId }\n}\n\nexport const LEGACY_TO_RECIPIENTS_ID = 112\nexport const LEGACY_CC_RECIPIENTS_ID = 113\nexport const LEGACY_BCC_RECIPIENTS_ID = 114\nexport const LEGACY_BODY_ID = 116\n"]}