{"version":3,"file":"OperationProgressTracker.js","sourceRoot":"","sources":["../../../../../src/common/api/main/OperationProgressTracker.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,gBAAgB,CAAA;AAOnC;;;;;GAKG;AACH,MAAM,OAAO,wBAAwB;IACnB,aAAa,GAAqC,IAAI,GAAG,EAAE,CAAA;IACpE,WAAW,GAAG,CAAC,CAAA;IAEvB;;;;;OAKG;IACH,iBAAiB;QAChB,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAA;QAC7B,MAAM,QAAQ,GAAG,MAAM,CAAS,CAAC,CAAC,CAAA;QAClC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAA;QACpC,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAA;IACnE,CAAC;IAED,+EAA+E;IAC/E,KAAK,CAAC,UAAU,CAAC,SAAsB,EAAE,aAAqB;QAC7D,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,aAAa,CAAC,CAAA;IACnD,CAAC;CACD","sourcesContent":["import stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\n\nexport type OperationId = number\n\nexport type ExposedOperationProgressTracker = Pick<OperationProgressTracker, \"onProgress\">\n\n/**\n * This is a multiplexer for tracking individual remote async operations.\n * Unlike {@link ProgressTracker} does not accumulate the progress and doesn't compute the percentage from units of work.\n *\n * progress is tracked with numbers between 0 and 100\n */\nexport class OperationProgressTracker {\n\tprivate readonly progressPerOp: Map<OperationId, Stream<number>> = new Map()\n\tprivate operationId = 0\n\n\t/**\n\t * Prepares a new operation and gives a handle for it which contains:\n\t *   - id for sending updates\n\t *   - progress, a stream to observe\n\t *   - done, a handle to stop tracking the operation progress\n\t */\n\tstartNewOperation(): { id: OperationId; progress: Stream<number>; done: () => unknown } {\n\t\tconst id = this.operationId++\n\t\tconst progress = stream<number>(0)\n\t\tthis.progressPerOp.set(id, progress)\n\t\treturn { id, progress, done: () => this.progressPerOp.delete(id) }\n\t}\n\n\t/** Updates the progress for {@param operation} with {@param progressValue}. */\n\tasync onProgress(operation: OperationId, progressValue: number): Promise<void> {\n\t\tthis.progressPerOp.get(operation)?.(progressValue)\n\t}\n}\n"]}