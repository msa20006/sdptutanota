{"version":3,"file":"PdfDocument.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/pdf/PdfDocument.ts"],"names":[],"mappings":"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","sourcesContent":["import { boldFontWidths, PdfDictValue, PdfObjectRef, PdfStreamEncoding, regularFontWidths } from \"./PdfConstants.js\"\nimport { PdfWriter } from \"./PdfWriter.js\"\nimport { Deflater } from \"./Deflater.js\"\nimport { stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\n\nexport enum PDF_FONTS {\n\tREGULAR = 1,\n\tBOLD = 2,\n\tINVISIBLE_CID = 3,\n}\n\nexport enum PDF_IMAGES {\n\tTUTA_LOGO = 1,\n\tADDRESS = 2,\n}\n\nexport enum TEXT_RENDERING_MODE {\n\tNORMAL = 0,\n\tINVISIBLE = 3,\n}\n\nexport type TableColumn = { headerName: string; columnWidth: number }\n\nexport const MARGIN_TOP = 20\nexport const MARGIN_LEFT = 25\nexport const TABLE_VERTICAL_SPACING = 5\nconst TEXT_VERTICAL_SPACING = 2\nconst PAPER_HEIGHT = 297\nconst PAPER_WIDTH = 210\nconst ORIGIN_POSITION: [x: number, y: number] = [0, 0]\n// Transform matrix to set origin point top-left\nconst TRANSFORM_MATRIX = `1 0 0 -1 0 ${mmToPSPoint(PAPER_HEIGHT)}`\n// 1 InvoiceItem = 2 Table rows (first row item info, second row dates)\n// The amount of rows rendered on the first page is dynamically determined in the addTable() method\n// Amount of table rows that can fit on the first page if a second is rendered too\nconst ROWS_FIRST_PAGE_MULTIPLE = 24 // 12 InvoiceItems\n// Amount of table rows that can fit on any n-th page that isn't the first\nconst ROWS_N_PAGE = 50\n\nconst ADDRESS_FIELD_WIDTH = 800\nconst ADDRESS_FIELD_HEIGHT = 320\n\n/**\n * Object which manages the high-level creation of a PDF document by parsing function instructions into PDF streams.\n * Use this object to create PDF documents. For the low-level functionality see \"PdfWriter\" class\n *\n * Once instantiated, use the public methods starting with \"add...()\" or \"change...()\" to describe the document.\n * Generate the PDF by calling the \"create()\" method any time. Do not utilize the same PdfDocument instance again once a PDF file has been created with it.\n * Private \"render...()\" methods are only used internally to interact with the low-level PdfWriter\n */\nexport class PdfDocument {\n\tprivate readonly pdfWriter: PdfWriter\n\tprivate readonly deflater: Deflater\n\tprivate pageCount: number = 0\n\tprivate textStream: string = \"\"\n\tprivate graphicsStream: string = \"\"\n\tprivate currentFont: PDF_FONTS = PDF_FONTS.REGULAR\n\tprivate currentFontSize: number = 12\n\tprivate pageList: PdfObjectRef[] = []\n\n\tconstructor(pdfWriter: PdfWriter) {\n\t\tthis.pdfWriter = pdfWriter\n\t\tthis.pdfWriter.setupDefaultObjects()\n\t\tthis.deflater = new Deflater()\n\t}\n\n\t/**\n\t * Create the document: commit all streams to objects and let the PdfWriter write the file\n\t */\n\tasync create(): Promise<Uint8Array> {\n\t\t// Write all open streams and add the page tree with all pages of the document to the PDF\n\t\tawait this.renderText()\n\t\tawait this.renderGraphics()\n\t\tthis.pdfWriter.createObject(\n\t\t\tnew Map<string, PdfDictValue>([\n\t\t\t\t[\"Type\", \"/Pages\"],\n\t\t\t\t[\"Parent\", { refId: \"CATALOG\" }],\n\t\t\t\t[\"Kids\", this.pageList],\n\t\t\t\t[\"Count\", `${this.pageCount}`],\n\t\t\t]),\n\t\t\t\"PAGES\",\n\t\t)\n\t\treturn await this.pdfWriter.writePdfFile()\n\t}\n\n\t/**\n\t * Closes the current textStream and writes it into an object\n\t */\n\tprivate async renderText(): Promise<void> {\n\t\tconst encodedTextStream = await this.deflater.deflate(\n\t\t\tstringToUtf8Uint8Array(`BT q ${TRANSFORM_MATRIX} cm /F${this.currentFont} ${this.currentFontSize} Tf ` + this.textStream + ` Q ET`),\n\t\t)\n\t\tthis.pdfWriter.createStreamObject(new Map(), encodedTextStream, PdfStreamEncoding.FLATE, `TEXT_${this.pageCount}`)\n\t\tthis.textStream = \"\"\n\t}\n\n\t/**\n\t * Closes the current graphicsStream and writes it into an object\n\t */\n\tprivate async renderGraphics(): Promise<void> {\n\t\tconst encodedGraphicsStream = await this.deflater.deflate(stringToUtf8Uint8Array(`q ${TRANSFORM_MATRIX} cm ` + this.graphicsStream + ` Q`))\n\t\tthis.pdfWriter.createStreamObject(new Map(), encodedGraphicsStream, PdfStreamEncoding.FLATE, `GRAPHICS_${this.pageCount}`)\n\t\tthis.graphicsStream = \"\"\n\t}\n\n\t/**\n\t * Append a new page to the PDF document\n\t */\n\tasync addPage(): Promise<PdfDocument> {\n\t\t// When adding a new page, all content streams must be rendered on the previous page. When creating the first page, all streams are still empty\n\t\tif (this.pageCount > 0) {\n\t\t\tawait this.renderText()\n\t\t\tawait this.renderGraphics()\n\t\t}\n\t\tthis.pageCount++\n\n\t\t// Create new page object\n\t\tconst pageRefId = `PAGE_${this.pageCount}`\n\t\tthis.pdfWriter.createObject(\n\t\t\tnew Map<string, PdfDictValue>([\n\t\t\t\t[\"Type\", \"/Page\"],\n\t\t\t\t[\"Parent\", { refId: \"PAGES\" }],\n\t\t\t\t[\"MediaBox\", `[ 0 0 ${mmToPSPoint(PAPER_WIDTH)} ${mmToPSPoint(PAPER_HEIGHT)}]`],\n\t\t\t\t[\"Resources\", { refId: \"RESOURCES\" }],\n\t\t\t\t[\"Contents\", [{ refId: `TEXT_${this.pageCount}` }, { refId: `GRAPHICS_${this.pageCount}` }]],\n\t\t\t]),\n\t\t\tpageRefId,\n\t\t)\n\n\t\t// Add new page to page-tree\n\t\tthis.pageList.push({ refId: pageRefId })\n\t\treturn this\n\t}\n\n\t/**\n\t * Add a text string at the given coordinates in millimeters\n\t * The coordinate field is in the fourth quadrant, i.e. the point of origin is top-left\n\t * @param text The text to place\n\t * @param position Coordinates [x,y] where to place the text, can be omitted to keep the current position\n\t * @param byteLength The byteLength of every character in the string. By default, this is 1 byte = 2 nibbles = \"XX\" e.g. \"20\" = \"SPACE\".\n\t * Do not change it to more than 1 byte unless you can verify any text printed this way will be displayed correctly on the PDF.\n\t */\n\taddText(text: string, position: [x: number, y: number] = ORIGIN_POSITION, byteLength: number = 1): PdfDocument {\n\t\tif (text === \"\") return this\n\t\t// If no position was specified, don't update the text cursor position\n\t\tif (position !== ORIGIN_POSITION) {\n\t\t\tthis.textStream += `1 0 0 -1 ${mmToPSPoint(position[0])} ${mmToPSPoint(position[1]) + this.currentFontSize} Tm <${toUnicodePoint(\n\t\t\t\ttext,\n\t\t\t\tbyteLength,\n\t\t\t).join(\"\")}> Tj `\n\t\t} else {\n\t\t\tthis.textStream += `<${toUnicodePoint(text, byteLength).join(\"\")}> Tj `\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t *\n\t *\n\t * Add a text string at the given coordinates in millimeters and align it to the right of its \"container\"\n\t * The container is specified by a width in millimeters.\n\t * @param text The text to place\n\t * @param position Coordinates [x,y] where to place the text, can be omitted to keep the current position\n\t * @param containerWidth The width in millimeters of the \"container\" in which the text is to be right aligned in\n\t */\n\taddTextRightAlign(text: string, position: [x: number, y: number], containerWidth: number): PdfDocument {\n\t\tif (text === \"\") return this\n\t\tconst unicodePoints = toUnicodePoint(text)\n\t\tthis.textStream += `1 0 0 -1 ${\n\t\t\tmmToPSPoint(position[0]) + mmToPSPoint(containerWidth) - getWordLengthInPoints(unicodePoints, this.currentFont, this.currentFontSize)\n\t\t} ${mmToPSPoint(position[1]) + this.currentFontSize} Tm <${unicodePoints.join(\"\")}> Tj `\n\t\treturn this\n\t}\n\n\t/**\n\t * Add a linebreak in the text\n\t */\n\taddLineBreak(): PdfDocument {\n\t\tthis.textStream += \"T* \"\n\t\treturn this\n\t}\n\n\t/**\n\t * Add an image at the given coordinates in millimeters\n\t * The coordinate field is in the fourth quadrant, i.e. the point of origin is top-left\n\t * @param image The image to add which is an enum of readily embeddable images\n\t * @param position Coordinates [x,y] where to place the image\n\t * @param dimensions Dimensions [width, height] of the image. Image will be stretched to fit the given dimensions\n\t */\n\taddImage(image: PDF_IMAGES, position: [x: number, y: number], dimensions: [width: number, height: number]): PdfDocument {\n\t\t// Image placement demands two matrix transformations, so it must make its own graphic state to not affect graphic elements which need no transform (drawLine)\n\t\tthis.graphicsStream += `Q q ${TRANSFORM_MATRIX} cm ${mmToPSPoint(dimensions[0])} 0 0 -${mmToPSPoint(dimensions[1])} ${mmToPSPoint(\n\t\t\tposition[0],\n\t\t)} ${mmToPSPoint(position[1])} cm /Im${image} Do Q q ${TRANSFORM_MATRIX} cm `\n\t\treturn this\n\t}\n\n\t/**\n\t * Draw black line \"fromPos\" \"toPos\"\n\t * @param fromPos Starting point of the line [x,y]\n\t * @param toPos Ending point of the line [x,y]\n\t */\n\taddDrawnLine(fromPos: [x: number, y: number], toPos: [x: number, y: number]): PdfDocument {\n\t\tthis.graphicsStream += `${mmToPSPoint(fromPos[0])} ${mmToPSPoint(fromPos[1])} m ${mmToPSPoint(toPos[0])} ${mmToPSPoint(toPos[1])} l s `\n\t\treturn this\n\t}\n\n\t/**\n\t * Change the currently used text font\n\t * @param font Font to change to which is an enum of readily embeddable fonts\n\t * @param points Font size in PostScript points\n\t */\n\tchangeFont(font: PDF_FONTS, points: number): PdfDocument {\n\t\tthis.textStream += `/F${font} ${points} Tf ${points + TEXT_VERTICAL_SPACING} TL `\n\t\tthis.currentFont = font\n\t\tthis.currentFontSize = points\n\t\treturn this\n\t}\n\n\t/**\n\t * Changes the current text cursor position to the specified position\n\t * @param position The position to place the cursor at\n\t */\n\tchangeTextCursorPosition(position: [x: number, y: number]): PdfDocument {\n\t\tthis.textStream += `1 0 0 -1 ${mmToPSPoint(position[0])} ${mmToPSPoint(position[1]) + this.currentFontSize} Tm `\n\t\treturn this\n\t}\n\n\t/**\n\t * Change font size of the currently used font\n\t * @param points Font size in PostScript points\n\t */\n\tchangeFontSize(points: number): PdfDocument {\n\t\tthis.textStream += `/F${this.currentFont} ${points} Tf ${points + TEXT_VERTICAL_SPACING} TL `\n\t\tthis.currentFontSize = points\n\t\treturn this\n\t}\n\n\t/**\n\t * Change the grayscale of the current text\n\t * @param grayScale Float between 0 and 1 by which the text lightness shall be adjusted. 1 = white, 0 = black\n\t */\n\tchangeTextGrayscale(grayScale: number): PdfDocument {\n\t\tgrayScale = Math.max(Math.min(grayScale, 1), 0)\n\t\tthis.textStream += `${grayScale} g `\n\t\treturn this\n\t}\n\n\t/**\n\t * Change the rendering mode of the current text. The rendering mode values and their effect are the same as the PDF standard describes\n\t * @param renderingMode Rendering mode (number) to set\n\t */\n\tchangeTextRenderingMode(renderingMode: TEXT_RENDERING_MODE) {\n\t\tthis.textStream += `${renderingMode} Tr `\n\t\treturn this\n\t}\n\n\t/**\n\t * Render a table with the input of a two-dimensional array. Produces automatic page breaks.\n\t * Returns the table's height on the last page where it is still rendered, allowing that value to be used to continue placing objects after the table\n\t * @param position Coordinates [x,y] where to place the table's origin point\n\t * @param tableWidth The width of the table\n\t * @param columns Array of ColumnObjects, specifying the header name and width of each column in percent of the total tableWidth { headerName: string, columnWidth: number  }\n\t * @param data Two-dimensional array of strings, specifying the data for every row : [ //row1 [a,b,c] //row2 [x,y,z]...   ]. The inner arrays (rows) must have the same length as the columns array!\n\t * @param rowsOnFirstPage How many rows can fit on the first page. This is dynamically decided by the amount of text that should follow after the table\n\t */\n\tasync addTable(\n\t\tposition: [x: number, y: number],\n\t\ttableWidth: number,\n\t\tcolumns: TableColumn[],\n\t\tdata: ReadonlyArray<ReadonlyArray<string>>,\n\t\trowsOnFirstPage: number = 4,\n\t): Promise<number> {\n\t\tthis.addTableHeader(position, tableWidth, columns)\n\t\t// If all entries fit on the first page, then have \"ITEMS_FIRST_PAGE_SINGLE\" amount of entries, else \"ROWS_FIRST_PAGE_MULTIPLE\"\n\t\tconst entriesOnFirstPage = data.length > rowsOnFirstPage ? ROWS_FIRST_PAGE_MULTIPLE : rowsOnFirstPage\n\t\t// Render the first page, save the height of the table\n\t\tlet tableHeight = this.addTablePage(position, tableWidth, columns, data.slice(0, entriesOnFirstPage))\n\t\tlet entryCounter = entriesOnFirstPage\n\n\t\t// only two fit on first page to then have enough space to render the BIGGEST, we have three so we new page\n\t\t// BIGGEST is German or Enligsh (its close) invoice + not vat + vatid\n\n\t\t// Keep writing pages of entries until all data is exhausted\n\t\twhile (entryCounter < data.length) {\n\t\t\tawait this.addPage()\n\t\t\tposition = [position[0], MARGIN_TOP]\n\t\t\ttableHeight = this.addTablePage(position, tableWidth, columns, data.slice(entryCounter, entryCounter + ROWS_N_PAGE))\n\t\t\tentryCounter += ROWS_N_PAGE\n\t\t}\n\n\t\tconst lastPageCannotFitRemainingRows = (entryCounter - entriesOnFirstPage) % ROWS_N_PAGE <= ROWS_FIRST_PAGE_MULTIPLE\n\t\tconst insufficientSpaceBelowTable = entryCounter == ROWS_FIRST_PAGE_MULTIPLE\n\n\t\tif (!lastPageCannotFitRemainingRows || insufficientSpaceBelowTable) {\n\t\t\tawait this.addPage()\n\t\t\ttableHeight = MARGIN_TOP\n\t\t}\n\n\t\tthis.addDrawnLine([position[0], tableHeight], [position[0] + tableWidth, tableHeight])\n\t\treturn tableHeight\n\t}\n\n\t/**\n\t * Render the actual visible table, starting with a header and all subsequent entries inside the \"chunk\"\n\t */\n\taddTablePage(position: [x: number, y: number], tableWidth: number, columns: TableColumn[], chunk: ReadonlyArray<ReadonlyArray<string>>): number {\n\t\tthis.addTableHeader(position, tableWidth, columns)\n\t\tlet previousRowOffset = TABLE_VERTICAL_SPACING\n\t\tfor (const row of chunk) {\n\t\t\tthis.addTableRow([position[0], position[1] + previousRowOffset], columns, row)\n\t\t\tpreviousRowOffset += TABLE_VERTICAL_SPACING\n\t\t}\n\t\treturn position[1] + previousRowOffset\n\t}\n\n\t/**\n\t * Render the table header\n\t */\n\taddTableHeader(position: [x: number, y: number], tableWidth: number, columns: TableColumn[]) {\n\t\tthis.changeFont(PDF_FONTS.BOLD, 11)\n\t\tthis.addTableRow(\n\t\t\tposition,\n\t\t\tcolumns,\n\t\t\tcolumns.flatMap((column) => column.headerName),\n\t\t)\n\t\tthis.addDrawnLine([position[0], position[1] + 5], [position[0] + tableWidth, position[1] + 5])\n\t\tthis.changeFont(PDF_FONTS.REGULAR, 11)\n\t}\n\n\t/**\n\t * Render a table row\n\t */\n\taddTableRow(position: [x: number, y: number], columnInfo: ReadonlyArray<TableColumn>, rowItems: ReadonlyArray<string>) {\n\t\tif (rowItems.length !== columnInfo.length) console.error(\"Amount of items in table row not equal to amount of columns!\")\n\t\tlet previousWidthOffset = 0\n\t\tfor (let i = 0; i < rowItems.length; i++) {\n\t\t\tif (i >= 2) {\n\t\t\t\tthis.addTextRightAlign(rowItems[i], [position[0] + previousWidthOffset, position[1]], columnInfo[i].columnWidth)\n\t\t\t} else {\n\t\t\t\tthis.addText(rowItems[i], [position[0] + previousWidthOffset, position[1]])\n\t\t\t}\n\t\t\tpreviousWidthOffset += columnInfo[i].columnWidth\n\t\t}\n\t}\n\n\t/**\n\t * Renders an address field, allowing the inclusion of any character inside text.\n\t * If any multibyte character outside the defined encoding is detected, the text will be written as an image via the canvas API.\n\t * The image will then be attached be inserted into the PDF. If the image generation fails (missing canvas support) fallback text will be rendered\n\t * @param position Coordinates [x,y] where to place the field's origin point\n\t * @param address String containing the address (expected to hold multiple newlines)\n\t */\n\tasync addAddressField(position: [x: number, y: number], address: string) {\n\t\tconst addressParts = address.split(\"\\n\")\n\t\tlet imageBuffer = new ArrayBuffer(0)\n\t\tlet byteLengthForAddress = 1\n\n\t\ttry {\n\t\t\tif (!areStringPartsOneByteLength(addressParts)) {\n\t\t\t\tconst canvas = new OffscreenCanvas(ADDRESS_FIELD_WIDTH, ADDRESS_FIELD_HEIGHT)\n\t\t\t\tconst context = canvas.getContext(\"2d\")\n\t\t\t\tif (context) {\n\t\t\t\t\t// 36px is arbitrarily chosen to align with the 12pt size of the actual PDF text\n\t\t\t\t\tcontext.font = \"36px serif\"\n\t\t\t\t\tcontext.fillStyle = \"white\"\n\t\t\t\t\tcontext.fillRect(0, 0, canvas.width, canvas.height)\n\t\t\t\t\tcontext.fillStyle = \"black\"\n\n\t\t\t\t\tfor (let i = 0; i < addressParts.length; i++) {\n\t\t\t\t\t\tcontext.fillText(addressParts[i], 0, 40 * (i + 1))\n\t\t\t\t\t}\n\t\t\t\t\tconst dataUrl = await canvas.convertToBlob({ type: \"image/jpeg\" })\n\t\t\t\t\timageBuffer = await dataUrl.arrayBuffer()\n\n\t\t\t\t\t// For the rendered image, we take its dimension divided by 8. This gives a nice resolution for JPEG\n\t\t\t\t\tthis.addImage(PDF_IMAGES.ADDRESS, position, [ADDRESS_FIELD_WIDTH / 8, ADDRESS_FIELD_HEIGHT / 8])\n\n\t\t\t\t\t// Prepare for rendering the address below the image invisibly\n\t\t\t\t\tbyteLengthForAddress = 2\n\t\t\t\t\tthis.changeTextRenderingMode(TEXT_RENDERING_MODE.INVISIBLE)\n\t\t\t\t\tthis.changeFont(PDF_FONTS.INVISIBLE_CID, 12)\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"PDF Canvas Error - Could not access OffscreenCanvasContext2D.\")\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.warn(`PDF Error - Cannot render canvas. This is likely because the browser does not support OffscreenCanvas. The error was:\\n\"${err}\"`)\n\t\t}\n\n\t\t// Must create image object in any case since otherwise the reference cannot be resolved. We then just fill it with empty data, but never render it\n\t\tthis.pdfWriter.createStreamObject(\n\t\t\tnew Map([\n\t\t\t\t[\"Name\", \"/Im2\"],\n\t\t\t\t[\"Type\", \"/XObject\"],\n\t\t\t\t[\"Subtype\", \"/Image\"],\n\t\t\t\t[\"Width\", `${ADDRESS_FIELD_WIDTH}`],\n\t\t\t\t[\"Height\", `${ADDRESS_FIELD_HEIGHT}`],\n\t\t\t\t[\"BitsPerComponent\", \"8\"],\n\t\t\t\t[\"ColorSpace\", \"/DeviceRGB\"],\n\t\t\t]),\n\t\t\tnew Uint8Array(imageBuffer),\n\t\t\tPdfStreamEncoding.DCT,\n\t\t\t\"IMG_ADDRESS\",\n\t\t)\n\n\t\t// Always render the address as text, Either directly or invisibly in case the canvas was called\n\t\tfor (const addressPart of addressParts) {\n\t\t\tthis.addText(addressPart, ORIGIN_POSITION, byteLengthForAddress).addLineBreak()\n\t\t}\n\n\t\t// Undo any invisible-configuration in case it was set\n\t\tthis.changeFont(PDF_FONTS.REGULAR, 12)\n\t\tthis.changeTextRenderingMode(TEXT_RENDERING_MODE.NORMAL)\n\t}\n}\n\n/**\n * Convert a text string into a NumString array where each character is replaced by its byte unicode point with a length specified by \"byteLength\"\n */\nexport function toUnicodePoint(input: string, byteLength: number = 1): string[] {\n\tif (byteLength === 1) {\n\t\tconst out: string[] = []\n\t\tfor (let i = 0; i < input.length; i++) {\n\t\t\tconst codePoint = input.codePointAt(i)\n\t\t\tif (codePoint && isCodePointOneByteLength(codePoint)) {\n\t\t\t\tout.push(codePoint.toString(16))\n\t\t\t} else {\n\t\t\t\tconsole.warn(`Attempted to render a character longer than one byte. Character was ${input[i]} with a code of ${codePoint}.`)\n\t\t\t}\n\t\t}\n\t\treturn out\n\t} else {\n\t\treturn input.split(\"\").map((c) => c.charCodeAt(0).toString(16).padStart(4, \"0\"))\n\t}\n}\n\n/**\n * Returns whether a given char's codepoint is above one byte in size, making it not displayable by simple PDF fonts\n * @param codePoint\n */\nexport function isCodePointOneByteLength(codePoint: number): boolean {\n\treturn codePoint < 256\n}\n\n/**\n * Returns whether a given string, split into its parts, includes any characters that are longer than one byte in size\n * @param stringParts\n */\nexport function areStringPartsOneByteLength(stringParts: string[]): boolean {\n\tfor (const addressPart of stringParts) {\n\t\tfor (let i = 0; i < addressPart.length; i++) {\n\t\t\tconst codePoint = addressPart.codePointAt(i)\n\t\t\tif (codePoint && !isCodePointOneByteLength(codePoint)) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\n/**\n * Calculates the size of a word by considering the width of every glyph in the font\n * @param codePoints Array of unicode points representing every character in the word\n * @param font The font used for the processed word\n * @param fontSize The font size used for the processed word\n */\nexport function getWordLengthInPoints(codePoints: string[], font: PDF_FONTS, fontSize: number): number {\n\tconst widthsArray = font === PDF_FONTS.REGULAR ? regularFontWidths : boldFontWidths\n\tlet total = 0\n\tfor (let i = 0; i < codePoints.length; i++) {\n\t\tlet index = parseInt(codePoints[i], 16) - 32\n\t\ttotal += 1 / (1000 / widthsArray[index])\n\t}\n\treturn total * fontSize\n}\n\n/**\n * Convert millimeters to PostScript points\n */\nfunction mmToPSPoint(mm: number) {\n\treturn mm * 2.834645688\n}\n"]}