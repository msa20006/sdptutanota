{"version":3,"file":"InstanceMapper.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/crypto/InstanceMapper.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolveTypeReference } from \"../../common/EntityFunctions\"\nimport { ProgrammingError } from \"../../common/error/ProgrammingError\"\nimport type { Base64 } from \"@tutao/tutanota-utils\"\nimport {\n\tassertNotNull,\n\tbase64ToBase64Url,\n\tbase64ToUint8Array,\n\tdowncast,\n\tpromiseMap,\n\tstringToUtf8Uint8Array,\n\tTypeRef,\n\tuint8ArrayToBase64,\n\tutf8Uint8ArrayToString,\n} from \"@tutao/tutanota-utils\"\nimport { AssociationType, Cardinality, Type, ValueType } from \"../../common/EntityConstants.js\"\nimport { compress, uncompress } from \"../Compression\"\nimport type { ModelValue, TypeModel } from \"../../common/EntityTypes\"\nimport { assertWorkerOrNode } from \"../../common/Env\"\nimport { aesDecrypt, aesEncrypt, AesKey, ENABLE_MAC, IV_BYTE_LENGTH, random } from \"@tutao/tutanota-crypto\"\nimport { CryptoError } from \"@tutao/tutanota-crypto/error.js\"\n\nassertWorkerOrNode()\n\nexport class InstanceMapper {\n\t/**\n\t * Decrypts an object literal as received from the DB and maps it to an entity class (e.g. Mail)\n\t * @param model The TypeModel of the instance\n\t * @param instance The object literal as received from the DB\n\t * @param sk The session key, must be provided for encrypted instances\n\t * @returns The decrypted and mapped instance\n\t */\n\tdecryptAndMapToInstance<T>(model: TypeModel, instance: Record<string, any>, sk: AesKey | null): Promise<T> {\n\t\tlet decrypted: any = {\n\t\t\t_type: new TypeRef(model.app, model.name),\n\t\t}\n\n\t\tfor (let key of Object.keys(model.values)) {\n\t\t\tlet valueType = model.values[key]\n\t\t\tlet value = instance[key]\n\n\t\t\ttry {\n\t\t\t\tdecrypted[key] = decryptValue(key, valueType, value, sk)\n\t\t\t} catch (e) {\n\t\t\t\tif (decrypted._errors == null) {\n\t\t\t\t\tdecrypted._errors = {}\n\t\t\t\t}\n\n\t\t\t\tdecrypted._errors[key] = JSON.stringify(e)\n\t\t\t\tconsole.log(\"error when decrypting value on type:\", `[${model.app},${model.name}]`, \"key:\", key, e)\n\t\t\t} finally {\n\t\t\t\tif (valueType.encrypted) {\n\t\t\t\t\tif (valueType.final) {\n\t\t\t\t\t\t// we have to store the encrypted value to be able to restore it when updating the instance. this is not needed for data transfer types, but it does not hurt\n\t\t\t\t\t\tdecrypted[\"_finalEncrypted_\" + key] = value\n\t\t\t\t\t} else if (value === \"\") {\n\t\t\t\t\t\t// we have to store the default value to make sure that updates do not cause more storage use\n\t\t\t\t\t\tdecrypted[\"_defaultEncrypted_\" + key] = decrypted[key]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn promiseMap(Object.keys(model.associations), async (associationName) => {\n\t\t\tif (model.associations[associationName].type === AssociationType.Aggregation) {\n\t\t\t\tconst dependency = model.associations[associationName].dependency\n\t\t\t\tconst aggregateTypeModel = await resolveTypeReference(new TypeRef(dependency || model.app, model.associations[associationName].refType))\n\t\t\t\tlet aggregation = model.associations[associationName]\n\n\t\t\t\tif (aggregation.cardinality === Cardinality.ZeroOrOne && instance[associationName] == null) {\n\t\t\t\t\tdecrypted[associationName] = null\n\t\t\t\t} else if (instance[associationName] == null) {\n\t\t\t\t\tthrow new ProgrammingError(`Undefined aggregation ${model.name}:${associationName}`)\n\t\t\t\t} else if (aggregation.cardinality === Cardinality.Any) {\n\t\t\t\t\treturn promiseMap(instance[associationName], (aggregate) => {\n\t\t\t\t\t\treturn this.decryptAndMapToInstance(aggregateTypeModel, downcast<Record<string, any>>(aggregate), sk)\n\t\t\t\t\t}).then((decryptedAggregates) => {\n\t\t\t\t\t\tdecrypted[associationName] = decryptedAggregates\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\treturn this.decryptAndMapToInstance(aggregateTypeModel, instance[associationName], sk).then((decryptedAggregate) => {\n\t\t\t\t\t\tdecrypted[associationName] = decryptedAggregate\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdecrypted[associationName] = instance[associationName]\n\t\t\t}\n\t\t}).then(() => {\n\t\t\treturn decrypted\n\t\t})\n\t}\n\n\tencryptAndMapToLiteral<T>(model: TypeModel, instance: T, sk: AesKey | null): Promise<Record<string, unknown>> {\n\t\tif (model.encrypted && sk == null) {\n\t\t\tthrow new ProgrammingError(`Encrypting ${model.app}/${model.name} requires a session key!`)\n\t\t}\n\t\tlet encrypted: Record<string, unknown> = {}\n\t\tlet i = instance as any\n\n\t\tfor (let key of Object.keys(model.values)) {\n\t\t\tlet valueType = model.values[key]\n\t\t\tlet value = i[key]\n\n\t\t\tlet encryptedValue\n\t\t\t// restore the original encrypted value if it exists. it does not exist if this is a data transfer type or a newly created entity. check against null explicitely because \"\" is allowed\n\t\t\tif (valueType.encrypted && valueType.final && i[\"_finalEncrypted_\" + key] != null) {\n\t\t\t\tencryptedValue = i[\"_finalEncrypted_\" + key]\n\t\t\t} else if (valueType.encrypted && (i[\"_finalIvs\"]?.[key] as Uint8Array | null)?.length === 0 && isDefaultValue(valueType.type, value)) {\n\t\t\t\t// restore the default encrypted value because it has not changed\n\t\t\t\t// note: this brunch must be checked *before* the one which reuses IVs as this one checks\n\t\t\t\t// the length.\n\t\t\t\tencryptedValue = \"\"\n\t\t\t} else if (valueType.encrypted && valueType.final && i[\"_finalIvs\"]?.[key] != null) {\n\t\t\t\tconst finalIv = i[\"_finalIvs\"][key]\n\t\t\t\tencryptedValue = encryptValue(key, valueType, value, sk, finalIv)\n\t\t\t} else if (valueType.encrypted && i[\"_defaultEncrypted_\" + key] === value) {\n\t\t\t\t// restore the default encrypted value because it has not changed\n\t\t\t\tencryptedValue = \"\"\n\t\t\t} else {\n\t\t\t\tencryptedValue = encryptValue(key, valueType, value, sk)\n\t\t\t}\n\t\t\tencrypted[key] = encryptedValue\n\t\t}\n\n\t\tif (model.type === Type.Aggregated && !encrypted._id) {\n\t\t\tencrypted._id = base64ToBase64Url(uint8ArrayToBase64(random.generateRandomData(4)))\n\t\t}\n\n\t\treturn promiseMap(Object.keys(model.associations), async (associationName) => {\n\t\t\tif (model.associations[associationName].type === AssociationType.Aggregation) {\n\t\t\t\tconst dependency = model.associations[associationName].dependency\n\t\t\t\tconst aggregateTypeModel = await resolveTypeReference(new TypeRef(dependency || model.app, model.associations[associationName].refType))\n\t\t\t\tlet aggregation = model.associations[associationName]\n\t\t\t\tif (aggregation.cardinality === Cardinality.ZeroOrOne && i[associationName] == null) {\n\t\t\t\t\tencrypted[associationName] = null\n\t\t\t\t} else if (i[associationName] == null) {\n\t\t\t\t\tthrow new ProgrammingError(`Undefined attribute ${model.name}:${associationName}`)\n\t\t\t\t} else if (aggregation.cardinality === Cardinality.Any) {\n\t\t\t\t\treturn promiseMap(i[associationName], (aggregate) => {\n\t\t\t\t\t\treturn this.encryptAndMapToLiteral(aggregateTypeModel, aggregate, sk)\n\t\t\t\t\t}).then((encryptedAggregates) => {\n\t\t\t\t\t\tencrypted[associationName] = encryptedAggregates\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\treturn this.encryptAndMapToLiteral(aggregateTypeModel, i[associationName], sk).then((encryptedAggregate) => {\n\t\t\t\t\t\tencrypted[associationName] = encryptedAggregate\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tencrypted[associationName] = i[associationName]\n\t\t\t}\n\t\t}).then(() => {\n\t\t\treturn encrypted\n\t\t})\n\t}\n}\n\n// Exported for testing\nexport function encryptValue(\n\tvalueName: string,\n\tvalueType: ModelValue,\n\tvalue: any,\n\tsk: AesKey | null,\n\tiv: Uint8Array = random.generateRandomData(IV_BYTE_LENGTH),\n): string | Base64 | null {\n\tif (valueName === \"_id\" || valueName === \"_permissions\") {\n\t\treturn value\n\t} else if (value == null) {\n\t\tif (valueType.cardinality === Cardinality.ZeroOrOne) {\n\t\t\treturn null\n\t\t} else {\n\t\t\tthrow new ProgrammingError(`Value ${valueName} with cardinality ONE can not be null`)\n\t\t}\n\t} else if (valueType.encrypted) {\n\t\tlet bytes = value\n\n\t\tif (valueType.type !== ValueType.Bytes) {\n\t\t\tconst dbType = assertNotNull(convertJsToDbType(valueType.type, value))\n\t\t\tbytes = typeof dbType === \"string\" ? stringToUtf8Uint8Array(dbType) : dbType\n\t\t}\n\n\t\treturn uint8ArrayToBase64(aesEncrypt(assertNotNull(sk), bytes, iv, true, ENABLE_MAC))\n\t} else {\n\t\tconst dbType = convertJsToDbType(valueType.type, value)\n\n\t\tif (typeof dbType === \"string\") {\n\t\t\treturn dbType\n\t\t} else {\n\t\t\treturn uint8ArrayToBase64(dbType)\n\t\t}\n\t}\n}\n\n// Exported for testing\nexport function decryptValue(valueName: string, valueType: ModelValue, value: (Base64 | null) | string, sk: AesKey | null): any {\n\tif (value == null) {\n\t\tif (valueType.cardinality === Cardinality.ZeroOrOne) {\n\t\t\treturn null\n\t\t} else {\n\t\t\tthrow new ProgrammingError(`Value ${valueName} with cardinality ONE can not be null`)\n\t\t}\n\t} else if (valueType.cardinality === Cardinality.One && value === \"\") {\n\t\treturn valueToDefault(valueType.type) // Migration for values added after the Type has been defined initially\n\t} else if (valueType.encrypted) {\n\t\tif (sk == null) {\n\t\t\tthrow new CryptoError(\"session key is null, but value is encrypted. valueName: \" + valueName + \" valueType: \" + valueType)\n\t\t}\n\t\tlet decryptedBytes = aesDecrypt(sk, base64ToUint8Array(value))\n\n\t\tif (valueType.type === ValueType.Bytes) {\n\t\t\treturn decryptedBytes\n\t\t} else if (valueType.type === ValueType.CompressedString) {\n\t\t\treturn decompressString(decryptedBytes)\n\t\t} else {\n\t\t\treturn convertDbToJsType(valueType.type, utf8Uint8ArrayToString(decryptedBytes))\n\t\t}\n\t} else {\n\t\treturn convertDbToJsType(valueType.type, value)\n\t}\n}\n\n/**\n * Returns bytes when the type === Bytes or type === CompressedString, otherwise returns a string\n * @param type\n * @param value\n * @returns {string|string|NodeJS.Global.Uint8Array|*}\n */\nfunction convertJsToDbType(type: Values<typeof ValueType>, value: any): Uint8Array | string {\n\tif (type === ValueType.Bytes && value != null) {\n\t\treturn value\n\t} else if (type === ValueType.Boolean) {\n\t\treturn value ? \"1\" : \"0\"\n\t} else if (type === ValueType.Date) {\n\t\treturn value.getTime().toString()\n\t} else if (type === ValueType.CompressedString) {\n\t\treturn compressString(value)\n\t} else {\n\t\treturn value\n\t}\n}\n\nfunction convertDbToJsType(type: Values<typeof ValueType>, value: Base64 | string): any {\n\tif (type === ValueType.Bytes) {\n\t\treturn base64ToUint8Array(value as any)\n\t} else if (type === ValueType.Boolean) {\n\t\treturn value !== \"0\"\n\t} else if (type === ValueType.Date) {\n\t\treturn new Date(parseInt(value))\n\t} else if (type === ValueType.CompressedString) {\n\t\treturn decompressString(base64ToUint8Array(value))\n\t} else {\n\t\treturn value\n\t}\n}\n\nfunction compressString(uncompressed: string): Uint8Array {\n\treturn compress(stringToUtf8Uint8Array(uncompressed))\n}\n\nfunction decompressString(compressed: Uint8Array): string {\n\tif (compressed.length === 0) {\n\t\treturn \"\"\n\t}\n\n\tconst output = uncompress(compressed)\n\treturn utf8Uint8ArrayToString(output)\n}\n\nfunction valueToDefault(type: Values<typeof ValueType>): Date | Uint8Array | string | boolean {\n\tswitch (type) {\n\t\tcase ValueType.String:\n\t\t\treturn \"\"\n\n\t\tcase ValueType.Number:\n\t\t\treturn \"0\"\n\n\t\tcase ValueType.Bytes:\n\t\t\treturn new Uint8Array(0)\n\n\t\tcase ValueType.Date:\n\t\t\treturn new Date(0)\n\n\t\tcase ValueType.Boolean:\n\t\t\treturn false\n\n\t\tcase ValueType.CompressedString:\n\t\t\treturn \"\"\n\n\t\tdefault:\n\t\t\tthrow new ProgrammingError(`${type} is not a valid value type`)\n\t}\n}\n\nfunction isDefaultValue(type: Values<typeof ValueType>, value: unknown): boolean {\n\tswitch (type) {\n\t\tcase ValueType.String:\n\t\t\treturn value === \"\"\n\n\t\tcase ValueType.Number:\n\t\t\treturn value === \"0\"\n\n\t\tcase ValueType.Bytes:\n\t\t\treturn (value as Uint8Array).length === 0\n\n\t\tcase ValueType.Date:\n\t\t\treturn (value as Date).getTime() === 0\n\n\t\tcase ValueType.Boolean:\n\t\t\treturn value === false\n\n\t\tcase ValueType.CompressedString:\n\t\t\treturn value === \"\"\n\n\t\tdefault:\n\t\t\tthrow new ProgrammingError(`${type} is not a valid value type`)\n\t}\n}\n"]}