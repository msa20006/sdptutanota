{"version":3,"file":"DesktopIntegratorWin32.js","sourceRoot":"","sources":["../../../../../src/common/desktop/integration/DesktopIntegratorWin32.ts"],"names":[],"mappings":"AAMA,MAAM,OAAO,sBAAsB;IAClC,SAAS,CAAU;IACnB,SAAS,CAAc;IACvB,WAAW,CAAU;IAErB,YAAY,QAAkB,EAAE,QAAsB;QACrD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;QACzB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;QACzB,IAAI,CAAC,WAAW,GAAG,IAAI,QAAQ,CAAC;YAC/B,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,GAAG,EAAE,qDAAqD;SAC1D,CAAC,CAAA;IACH,CAAC;IAED,mBAAmB;QAClB,2EAA2E;QAC3E,OAAO,IAAI,OAAO,CAAC,CAAC,OAA6B,EAAE,MAAM,EAAE,EAAE;YAC5D,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;gBAC3D,IAAI,GAAG,EAAE,CAAC;oBACT,MAAM,CAAC,GAAG,CAAC,CAAA;gBACZ,CAAC;qBAAM,CAAC;oBACP,OAAO,CAAC,OAAO,IAAI,KAAK,WAAW,IAAI,IAAI,KAAK,IAAI,CAAC,CAAA;gBACtD,CAAC;YACF,CAAC,CAAC,CAAA;QACH,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAA;IACtB,CAAC;IAED,KAAK,CAAC,gBAAgB;QACrB,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC,EAAE,CAAC;YACzC,2EAA2E;YAC3E,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACtC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;oBACtG,IAAI,GAAG,EAAE,CAAC;wBACT,MAAM,CAAC,GAAG,CAAC,CAAA;oBACZ,CAAC;oBAED,OAAO,EAAE,CAAA;gBACV,CAAC,CAAC,CAAA;YACH,CAAC,CAAC,CAAA;QACH,CAAC;IACF,CAAC;IAED,KAAK,CAAC,iBAAiB;QACtB,2EAA2E;QAC3E,IAAI,MAAM,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC;YACtC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACtC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;oBACxD,IAAI,GAAG,EAAE,CAAC;wBACT,MAAM,CAAC,GAAG,CAAC,CAAA;oBACZ,CAAC;oBAED,OAAO,EAAE,CAAA;gBACV,CAAC,CAAC,CAAA;YACH,CAAC,CAAC,CAAA;QACH,CAAC;IACF,CAAC;IAED,cAAc,CAAC,EAAiB;QAC/B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IACzB,CAAC;IAED,YAAY;QACX,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC7B,CAAC;IAED,SAAS;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IACzB,CAAC;IAED,WAAW;QACV,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IACzB,CAAC;CACD","sourcesContent":["import type { WindowManager } from \"../DesktopWindowManager\"\nimport type { DesktopIntegrator } from \"./DesktopIntegrator\"\nimport { Registry } from \"winreg\"\n\ntype Electron = typeof Electron.CrossProcessExports\n\nexport class DesktopIntegratorWin32 implements DesktopIntegrator {\n\t_electron: Electron\n\t_registry: WinregStatic\n\t_autoRunKey: Registry\n\n\tconstructor(electron: Electron, registry: WinregStatic) {\n\t\tthis._electron = electron\n\t\tthis._registry = registry\n\t\tthis._autoRunKey = new registry({\n\t\t\thive: registry.HKCU,\n\t\t\tkey: \"\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\",\n\t\t})\n\t}\n\n\tisAutoLaunchEnabled(): Promise<boolean> {\n\t\t// can't promisify here because it screws with autoRunKeys 'this' semantics\n\t\treturn new Promise((resolve: (_: boolean) => void, reject) => {\n\t\t\tthis._autoRunKey.get(this._electron.app.name, (err, item) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err)\n\t\t\t\t} else {\n\t\t\t\t\tresolve(typeof item !== \"undefined\" && item !== null)\n\t\t\t\t}\n\t\t\t})\n\t\t}).catch(() => false)\n\t}\n\n\tasync enableAutoLaunch(): Promise<void> {\n\t\tif (!(await this.isAutoLaunchEnabled())) {\n\t\t\t// can't promisify here because it screws with autoRunKeys 'this' semantics\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._autoRunKey.set(this._electron.app.name, this._registry.REG_SZ, `${process.execPath} -a`, (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err)\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}\n\n\tasync disableAutoLaunch(): Promise<void> {\n\t\t// can't promisify here because it screws with autoRunKeys 'this' semantics\n\t\tif (await this.isAutoLaunchEnabled()) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._autoRunKey.remove(this._electron.app.name, (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err)\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}\n\n\trunIntegration(wm: WindowManager): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n\n\tisIntegrated(): Promise<boolean> {\n\t\treturn Promise.resolve(true)\n\t}\n\n\tintegrate(): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n\n\tunintegrate(): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n}\n"]}