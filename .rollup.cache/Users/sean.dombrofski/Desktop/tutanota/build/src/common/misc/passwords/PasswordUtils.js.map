{"version":3,"file":"PasswordUtils.js","sourceRoot":"","sources":["../../../../../src/common/misc/passwords/PasswordUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MailboxDetail } from \"../../mailFunctionality/MailboxModel.js\"\nimport type { LoginController } from \"../../api/main/LoginController\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { PartialRecipient } from \"../../api/common/recipients/Recipient\"\nimport { getEnabledMailAddressesWithUser, getMailboxName } from \"../../mailFunctionality/SharedMailUtils.js\"\n\nassertMainOrNode()\n/** password strength resulting in a full bar */\nexport const PASSWORD_MAX_VALUE = 80\nexport const PASSWORD_MIN_VALUE = 0\n/** the minimum password strength we accept, but the user can choose a stronger password */\nexport const PASSWORD_MIN_SECURE_VALUE = 64\nexport const _BAD_SEQUENCES = [\n\t\"^1234567890ß´\",\n\t'°!\"§$%&/()=?`',\n\t\"qwertzuiopü+\",\n\t\"asdfghjklöä#\",\n\t\"<yxcvbnm,.-\",\n\t\"`1234567890-=\",\n\t\"~!@#$%^&*()_+\",\n\t\"qwertyuiop[]\",\n\t\"asdfghjkl'\\\\\",\n\t\"\\\\zxcvbnm,./\",\n\t\"abcdefghijklmnopqrstuvwxyz\",\n]\nconst _BAD_STRINGS = [\"passwort\", \"password\", \"tutanota\", \"free\", \"test\", \"keemail\", \"tutamail\"]\n\n/**\n * Checks how secure the given password is. The following password characteristics decrease the password strength:\n * - irregular distribution of characters across the character classes lower case, upper case, digit, other\n * - consecutive characters of the same class\n * - same chars\n * - same consecutive chars\n * - keyboard (german/english) or alphabet sequences\n * - bad strings (statically defined and passed to function in badStrings)\n * @param password The password to check.\n * @param badStrings Strings that reduce the strength of the password.\n * @return A number from 0 to PASSWORD_MAX_VALUE.\n */\nexport function getPasswordStrength(password: string, badStrings: string[]): number {\n\tif (password.length === 0) return 0\n\n\t// calculate the characteristics of the password\n\tlet nbrOfLowerChars = _getNbrOfOccurrences(password, /[a-z ]/g)\n\n\tlet nbrOfConsecutiveLowerChars = Math.max(0, _getLongestResult(password, /[a-z ]*/g) - 2) // consecutive chars > 2\n\n\tlet nbrOfUpperChars = _getNbrOfOccurrences(password, /[A-Z]/g)\n\n\tlet nbrOfConsecutiveUpperChars = Math.max(0, _getLongestResult(password, /[A-Z]*/g) - 2)\n\n\tlet nbrOfDigits = _getNbrOfOccurrences(password, /[0-9]/g)\n\n\tlet nbrOfConsecutiveDigits = Math.max(0, _getLongestResult(password, /[0-9]*/g) - 2)\n\tlet nbrOfOtherChars = password.length - nbrOfDigits - nbrOfLowerChars - nbrOfUpperChars\n\tlet nbrOfConsecutiveOtherChars = Math.max(0, _getLongestResult(password, /[^a-z A-Z0-9]*/g) - 2)\n\tlet nbrOfConsecutiveSame = Math.max(0, _getLongestResult(password, /(.)\\1+/g) - 2)\n\tlet minNbrOfCharsPerType = password.length / 4 // best is 1/4 lower case, 1/4 upper case, 1/4 digits, 1/4 other chars\n\n\t// all these values decrease the strength\n\tlet nbrOfMissingLowerChars = Math.max(0, minNbrOfCharsPerType - nbrOfLowerChars)\n\tlet nbrOfMissingUpperChars = Math.max(0, minNbrOfCharsPerType - nbrOfUpperChars)\n\tlet nbrOfMissingDigits = Math.max(0, minNbrOfCharsPerType - nbrOfDigits)\n\tlet nbrOfMissingOtherChars = Math.max(0, minNbrOfCharsPerType - nbrOfOtherChars)\n\n\tlet nbrOfSameChars = _getNbrOfSameChars(password)\n\n\tlet nbrOfSequenceDigits = _getNbrOfSequenceChars(password.toLowerCase(), _BAD_SEQUENCES, true)\n\n\tlet nbrOfBadStringDigits = _getNbrOfSequenceChars(password.toLowerCase(), badStrings.map((s) => s.toLowerCase()).concat(_BAD_STRINGS), false)\n\n\tlet strength = password.length * 11 // 11 = strength per character without reduction\n\n\tstrength -= nbrOfMissingLowerChars * 3\n\tstrength -= nbrOfMissingUpperChars * 3\n\tstrength -= nbrOfMissingDigits * 3\n\tstrength -= nbrOfMissingOtherChars * 3\n\tstrength -= nbrOfConsecutiveLowerChars * 2\n\tstrength -= nbrOfConsecutiveUpperChars * 2\n\tstrength -= nbrOfConsecutiveDigits * 2\n\tstrength -= nbrOfConsecutiveOtherChars * 2\n\tstrength -= nbrOfConsecutiveSame * 2\n\tstrength -= nbrOfSameChars * 5\n\tstrength -= nbrOfSequenceDigits * 4\n\tstrength -= nbrOfBadStringDigits * 4\n\treturn Math.min(PASSWORD_MAX_VALUE, Math.max(PASSWORD_MIN_VALUE, Math.round(strength)))\n}\n\nexport function getPasswordStrengthForUser(password: string, recipientInfo: PartialRecipient, mailboxDetails: MailboxDetail, logins: LoginController): number {\n\tlet reserved = getEnabledMailAddressesWithUser(mailboxDetails, logins.getUserController().userGroupInfo).concat(\n\t\tgetMailboxName(logins, mailboxDetails),\n\t\trecipientInfo.address,\n\t\trecipientInfo.name ?? \"\",\n\t)\n\treturn Math.min(PASSWORD_MAX_VALUE, getPasswordStrength(password, reserved))\n}\n\n/**\n * Maps the password strength from the range 0 to PASSWORD_MAX_VALUE to the range 0% to 100%. Therefore, if a password reaches the PASSWORD_MIN_SECURE_VALUE it is not at 100% yet.\n * @return A value indicating the password strength between 0 and 100.\n */\nexport function scaleToVisualPasswordStrength(passwordStrength: number): number {\n\treturn Math.min(100, (passwordStrength / PASSWORD_MAX_VALUE) * 100)\n}\n\nexport function isSecurePassword(passwordStrength: number): boolean {\n\treturn passwordStrength >= PASSWORD_MIN_SECURE_VALUE\n}\n\n/**\n * Provides the number of repetitions of any characters in the given password at any position.\n * @param password The password to check.\n * @returns The number of same characters.\n */\nfunction _getNbrOfSameChars(password: string): number {\n\tconst characterObject = new Set<string>()\n\n\tfor (const c of password) {\n\t\tcharacterObject.add(c)\n\t}\n\n\treturn password.length - characterObject.size\n}\n\n/**\n * Provides the number of chars in the given password that contains parts (> 2 characters) of the given sequences.\n * @param password The password to check.\n * @param sequences The sequences to check.\n * @param reverseToo If true, also all reverse sequences are checked.\n * @returns The number of chars that match any sequences.\n */\nexport function _getNbrOfSequenceChars(password: string, sequences: string[], reverseToo: boolean): number {\n\t// all sequences to the list of checked sequences s. also add all reverse sequences if requested\n\tlet s = sequences\n\n\tif (reverseToo) {\n\t\ts = sequences.concat(sequences.map((s1) => s1.split(\"\").reverse().join(\"\")))\n\t}\n\n\tlet MIN_SEQUENCE_LEN = 4\n\tlet nbrOfSequenceDigits = 0\n\n\t// check the part of the password (substringToCheck) from i to i+sequenceLen in a loop\n\tfor (let i = 0; i <= password.length - MIN_SEQUENCE_LEN; i++) {\n\t\tlet maxFoundLen = 0\n\n\t\tfor (let sequenceLen = MIN_SEQUENCE_LEN; i + sequenceLen <= password.length; sequenceLen++) {\n\t\t\tlet substringToCheck = password.substring(i, i + sequenceLen)\n\n\t\t\tfor (let a = 0; a < s.length; a++) {\n\t\t\t\tif (s[a].indexOf(substringToCheck) !== -1) {\n\t\t\t\t\tmaxFoundLen = sequenceLen\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (maxFoundLen > 0) {\n\t\t\tnbrOfSequenceDigits += maxFoundLen\n\t\t\ti += maxFoundLen - 1 // skip the found sequence. -1 because the for loop also decreases by 1\n\t\t}\n\t}\n\n\treturn nbrOfSequenceDigits\n}\n\n/**\n * Gets the number of occurrences of the given regular expression in the given string.\n * @param string The string to check.\n * @param regexp The reqular expression to check against.\n * @return The number of occurrences.\n */\nfunction _getNbrOfOccurrences(string: string, regexp: RegExp): number {\n\tlet result = string.match(regexp)\n\treturn result ? result.length : 0\n}\n\n/**\n * Gets the number of characters in the longest result when checking the given string against the given regular expression.\n * @param string The string to check.\n * @param regexp The reqular expression to check against.\n * @returns The number of characters of the longest result.\n */\nfunction _getLongestResult(string: string, regexp: RegExp): number {\n\tlet result = string.match(regexp)\n\treturn result ? result.reduce((max, val) => Math.max(max, val.length), 0) : 0\n}\n"]}