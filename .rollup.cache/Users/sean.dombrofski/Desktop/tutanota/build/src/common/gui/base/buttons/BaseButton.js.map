{"version":3,"file":"BaseButton.js","sourceRoot":"","sources":["../../../../../../src/common/gui/base/buttons/BaseButton.ts"],"names":[],"mappings":"AAAA,OAAO,CAAgD,MAAM,SAAS,CAAA;AAEtE,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAA;AAGrD,OAAO,EAAE,IAAI,EAAiD,MAAM,oCAAoC,CAAA;AAqBxG,MAAM,OAAO,UAAU;IACd,GAAG,GAAuB,IAAI,CAAA;IAEtC,IAAI,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAgC;QACrD,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA;QAC7C,MAAM,OAAO,GAAG,uBAAuB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QACtD,MAAM,QAAQ,GAAG,uBAAuB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;QACxD,OAAO,CAAC,CACP,QAAQ,EACR;YACC,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,KAAK,CAAC;YAC3C,QAAQ;YACR,eAAe,EAAE,QAAQ;YACzB,OAAO;YACP,cAAc,EAAE,OAAO;YACvB,eAAe,EAAE,QAAQ;YACzB,OAAO,EAAE,CAAC,KAAiB,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC7E,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,aAAa,EAAE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;SACnD,EACD,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,CAAC,CAC1G,CAAA;IACF,CAAC;IAEO,UAAU,CAAC,IAAc,EAAE,QAAiB;QACnD,OAAO,CAAC,CAAC,QAAQ,IAAI,MAAM,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,kCAAuB,EAAE,EAAE,IAAI,CAAC,CAAA;IAC1F,CAAC;IAED,QAAQ,CAAC,KAAsC;QAC9C,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAkB,CAAA;IACpC,CAAC;CACD;AAED,SAAS,uBAAuB,CAAC,KAAiC;IACjE,OAAO,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;AAC5C,CAAC","sourcesContent":["import m, { Children, ClassComponent, Vnode, VnodeDOM } from \"mithril\"\nimport { ClickHandler } from \"../GuiUtils.js\"\nimport { assertNotNull } from \"@tutao/tutanota-utils\"\nimport { TabIndex } from \"../../../api/common/TutanotaConstants.js\"\nimport { AriaRole } from \"../../AriaUtils.js\"\nimport { lang, Translation, TranslationKey, MaybeTranslation } from \"../../../misc/LanguageViewModel.js\"\n\n// `staticRightText` to be passed as a child\nexport interface BaseButtonAttrs {\n\t/** accessibility & tooltip description */\n\tlabel: MaybeTranslation\n\t/** visible text inside button */\n\ttext?: Children\n\ticon?: Children\n\tdisabled?: boolean\n\tpressed?: boolean\n\t/** whether the button is visibly highlighted or not for screen readers */\n\tselected?: boolean\n\tonclick: ClickHandler\n\tonkeydown?: (event: KeyboardEvent) => unknown\n\tstyle?: Record<string, any>\n\tclass?: string\n\trole?: AriaRole\n\ticonWrapperSelector?: string\n}\n\nexport class BaseButton implements ClassComponent<BaseButtonAttrs> {\n\tprivate dom: HTMLElement | null = null\n\n\tview({ attrs, children }: Vnode<BaseButtonAttrs, this>): Children | void | null {\n\t\tconst disabled = attrs.disabled ? true : null\n\t\tconst pressed = booleanToAttributeValue(attrs.pressed)\n\t\tconst selected = booleanToAttributeValue(attrs.selected)\n\t\treturn m(\n\t\t\t\"button\",\n\t\t\t{\n\t\t\t\ttitle: lang.getTranslationText(attrs.label),\n\t\t\t\tdisabled,\n\t\t\t\t\"aria-disabled\": disabled,\n\t\t\t\tpressed,\n\t\t\t\t\"aria-pressed\": pressed,\n\t\t\t\t\"aria-selected\": selected,\n\t\t\t\tonclick: (event: MouseEvent) => attrs.onclick(event, assertNotNull(this.dom)),\n\t\t\t\tonkeydown: attrs.onkeydown,\n\t\t\t\tclass: attrs.class,\n\t\t\t\tstyle: attrs.style,\n\t\t\t\trole: attrs.role,\n\t\t\t\t\"data-testid\": `btn:${lang.getTestId(attrs.label)}`,\n\t\t\t},\n\t\t\t[attrs.icon ? this.renderIcon(attrs.icon, attrs.iconWrapperSelector) : null, attrs.text ?? null, children],\n\t\t)\n\t}\n\n\tprivate renderIcon(icon: Children, selector?: string): Children {\n\t\treturn m(selector ?? \"span\", { ariaHidden: true, tabindex: TabIndex.Programmatic }, icon)\n\t}\n\n\toncreate(vnode: VnodeDOM<BaseButtonAttrs, this>): any {\n\t\tthis.dom = vnode.dom as HTMLElement\n\t}\n}\n\nfunction booleanToAttributeValue(value: boolean | null | undefined): string | null {\n\treturn value != null ? String(value) : null\n}\n"]}