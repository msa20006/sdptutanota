{"version":3,"file":"PaymentDataDialog.js","sourceRoot":"","sources":["../../../../src/common/subscription/PaymentDataDialog.ts"],"names":[],"mappings":"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","sourcesContent":["import m from \"mithril\"\nimport stream from \"mithril/stream\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport { getByAbbreviation } from \"../api/common/CountryList\"\nimport { PaymentMethodInput } from \"./PaymentMethodInput\"\nimport { updatePaymentData } from \"./InvoiceAndPaymentDataPage\"\nimport { px } from \"../gui/size\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport { getDefaultPaymentMethod, PaymentMethodType } from \"../api/common/TutanotaConstants\"\nimport { assertNotNull, neverNull } from \"@tutao/tutanota-utils\"\nimport type { AccountingInfo, Customer } from \"../api/entities/sys/TypeRefs.js\"\nimport { DropDownSelector } from \"../gui/base/DropDownSelector.js\"\nimport { asPaymentInterval } from \"./PriceUtils.js\"\nimport { getLazyLoadedPayPalUrl } from \"./SubscriptionUtils.js\"\nimport { locator } from \"../api/main/CommonLocator.js\"\nimport { formatNameAndAddress } from \"../api/common/utils/CommonFormatter.js\"\n\n/**\n * @returns {boolean} true if the payment data update was successful\n */\nexport async function show(customer: Customer, accountingInfo: AccountingInfo, price: number, defaultPaymentMethod: PaymentMethodType): Promise<boolean> {\n\tconst payPalRequestUrl = getLazyLoadedPayPalUrl()\n\tconst invoiceData = {\n\t\tinvoiceAddress: formatNameAndAddress(accountingInfo.invoiceName, accountingInfo.invoiceAddress),\n\t\tcountry: accountingInfo.invoiceCountry ? getByAbbreviation(accountingInfo.invoiceCountry) : null,\n\t\tvatNumber: accountingInfo.invoiceVatIdNo,\n\t}\n\tconst subscriptionOptions = {\n\t\tbusinessUse: stream(assertNotNull(customer.businessUse)),\n\t\tpaymentInterval: stream(asPaymentInterval(accountingInfo.paymentInterval)),\n\t}\n\tconst paymentMethodInput = new PaymentMethodInput(\n\t\tsubscriptionOptions,\n\t\tstream(invoiceData.country),\n\t\tneverNull(accountingInfo),\n\t\tpayPalRequestUrl,\n\t\tdefaultPaymentMethod,\n\t)\n\tconst availablePaymentMethods = paymentMethodInput.getVisiblePaymentMethods()\n\n\tlet selectedPaymentMethod = accountingInfo.paymentMethod as PaymentMethodType\n\tpaymentMethodInput.updatePaymentMethod(selectedPaymentMethod)\n\tconst selectedPaymentMethodChangedHandler = async (value: PaymentMethodType) => {\n\t\tif (value === PaymentMethodType.Paypal && !payPalRequestUrl.isLoaded()) {\n\t\t\tawait showProgressDialog(\"pleaseWait_msg\", payPalRequestUrl.getAsync())\n\t\t}\n\t\tselectedPaymentMethod = value\n\t\tpaymentMethodInput.updatePaymentMethod(value)\n\t}\n\n\tconst didLinkPaypal = () => selectedPaymentMethod === PaymentMethodType.Paypal && paymentMethodInput.isPaypalAssigned()\n\n\treturn new Promise((resolve) => {\n\t\tconst confirmAction = () => {\n\t\t\tlet error = paymentMethodInput.validatePaymentData()\n\n\t\t\tif (error) {\n\t\t\t\tDialog.message(error)\n\t\t\t} else {\n\t\t\t\tconst finish = (success: boolean) => {\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t\tresolve(true)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// updatePaymentData gets done when the big paypal button is clicked\n\t\t\t\tif (didLinkPaypal()) {\n\t\t\t\t\tfinish(true)\n\t\t\t\t} else {\n\t\t\t\t\tshowProgressDialog(\n\t\t\t\t\t\t\"updatePaymentDataBusy_msg\",\n\t\t\t\t\t\tupdatePaymentData(\n\t\t\t\t\t\t\tsubscriptionOptions.paymentInterval(),\n\t\t\t\t\t\t\tinvoiceData,\n\t\t\t\t\t\t\tpaymentMethodInput.getPaymentData(),\n\t\t\t\t\t\t\tinvoiceData.country,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tprice + \"\",\n\t\t\t\t\t\t\taccountingInfo,\n\t\t\t\t\t\t),\n\t\t\t\t\t).then(finish)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst dialog = Dialog.showActionDialog({\n\t\t\ttitle: \"adminPayment_action\",\n\t\t\tchild: {\n\t\t\t\tview: () =>\n\t\t\t\t\tm(\n\t\t\t\t\t\t\"#changePaymentDataDialog\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\tminHeight: px(310),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tm(DropDownSelector, {\n\t\t\t\t\t\t\t\tlabel: \"paymentMethod_label\",\n\t\t\t\t\t\t\t\titems: availablePaymentMethods,\n\t\t\t\t\t\t\t\tselectedValue: selectedPaymentMethod,\n\t\t\t\t\t\t\t\tselectionChangedHandler: selectedPaymentMethodChangedHandler,\n\t\t\t\t\t\t\t\tdropdownWidth: 250,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tm(paymentMethodInput),\n\t\t\t\t\t\t],\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tokAction: confirmAction,\n\t\t\t// if they've just gone through the process of linking a paypal account, don't offer a cancel button\n\t\t\tallowCancel: () => !didLinkPaypal(),\n\t\t\tokActionTextId: didLinkPaypal() ? \"close_alt\" : \"save_action\",\n\t\t\tcancelAction: () => resolve(false),\n\t\t})\n\t})\n}\n"]}