{"version":3,"file":"MailAddressTableModel.js","sourceRoot":"","sources":["../../../../../src/common/settings/mailaddress/MailAddressTableModel.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,wBAAwB,EAAE,MAAM,yCAAyC,CAAA;AAKlF,OAAO,EAAmB,mBAAmB,EAAE,MAAM,yBAAyB,CAAA;AAC9E,OAAO,EAAa,gBAAgB,EAAiC,MAAM,oCAAoC,CAAA;AAC/G,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAA;AACnE,OAAO,EAAE,iBAAiB,EAAE,MAAM,qCAAqC,CAAA;AACvE,OAAO,EAAE,SAAS,EAAE,MAAM,6BAA6B,CAAA;AACvD,OAAO,EAAE,oBAAoB,EAAE,MAAM,wCAAwC,CAAA;AAE7E,OAAO,EAAE,yBAAyB,EAAE,MAAM,yCAAyC,CAAA;AACnF,OAAO,EAAoB,WAAW,EAAE,kBAAkB,EAAE,MAAM,6CAA6C,CAAA;AAC/G,OAAO,EAAE,iBAAiB,EAAE,MAAM,4CAA4C,CAAA;AAE9E,MAAM,CAAN,IAAY,aAKX;AALD,WAAY,aAAa;IACxB,uDAAO,CAAA;IACP,mDAAK,CAAA;IACL,mEAAa,CAAA;IACb,qDAAM,CAAA;AACP,CAAC,EALW,aAAa,KAAb,aAAa,QAKxB;AAmBD,0HAA0H;AAC1H,MAAM,OAAO,qBAAqB;IAmBf;IACA;IACA;IACA;IACA;IACT;IACS;IACA;IAzBV,YAAY,GAAyB,IAAI,CAAA;IACzC,YAAY,GAAY,KAAK,CAAA;IACrC,UAAU,GAAyC,IAAI,CAAA;IAEvD,IAAI,GAAwB,YAAY,CAAC,KAAK,IAAI,EAAE;QACnD,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;QAEjE,yDAAyD;QACzD,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAA;QACtD,IAAI,CAAC,YAAY,GAAG,cAAc,CAAC,YAAY,CAAC,MAAM,cAAc,CAAC,WAAW,EAAE,CAAC,CAAA;QAEnF,MAAM,IAAI,CAAC,SAAS,EAAE,CAAA;QACtB,IAAI,CAAC,MAAM,EAAE,CAAA;QACb,MAAM,IAAI,CAAC,cAAc,EAAE,CAAA;QAC3B,IAAI,CAAC,MAAM,EAAE,CAAA;IACd,CAAC,CAAC,CAAA;IAEF,YACkB,YAA0B,EAC1B,eAAiC,EACjC,iBAAoC,EACpC,MAAuB,EACvB,eAAgC,EACzC,aAAwB,EACf,WAAmC,EACnC,MAAqB;QAPrB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,oBAAe,GAAf,eAAe,CAAkB;QACjC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,WAAM,GAAN,MAAM,CAAiB;QACvB,oBAAe,GAAf,eAAe,CAAiB;QACzC,kBAAa,GAAb,aAAa,CAAW;QACf,gBAAW,GAAX,WAAW,CAAwB;QACnC,WAAM,GAAN,MAAM,CAAe;IACpC,CAAC;IAEJ,OAAO;QACN,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;IACrE,CAAC;IAED,oBAAoB;QACnB,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,aAAa,EAAE,CAAA;IACvD,CAAC;IAED,+BAA+B;QAC9B,OAAO,IAAI,CAAC,YAAY,CAAA;IACzB,CAAC;IAED,SAAS;QACR,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAA;QAC7B,IAAI,YAAY,IAAI,IAAI,EAAE,CAAC;YAC1B,OAAO,EAAE,CAAA;QACV,CAAC;QAED,MAAM,cAAc,GAAG,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAA;QACpE,MAAM,kBAAkB,GAAG;YAC1B,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE;YAC5C,OAAO,EAAE,cAAc;YACvB,MAAM,EAAE,aAAa,CAAC,OAAO;SAC7B,CAAA;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB;aACvD,KAAK,EAAE;aACP,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACxD,GAAG,CAAC,CAAC,EAAE,WAAW,EAAE,OAAO,EAAE,EAAE,EAAE;YACjC,MAAM,MAAM;YACX,yCAAyC;YACzC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAA;YAEtH,OAAO;gBACN,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE;gBACzC,OAAO,EAAE,WAAW;gBACpB,MAAM;aACN,CAAA;QACF,CAAC,CAAC,CAAA;QACH,OAAO,CAAC,kBAAkB,EAAE,GAAG,WAAW,CAAC,CAAA;IAC5C,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,OAAe,EAAE,UAAkB;QACrD,IAAI,CAAC,YAAY,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,OAAO,EAAE,UAAU,CAAC,CAAA;QAC7E,IAAI,CAAC,MAAM,EAAE,CAAA;IACd,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,QAAQ,CAAC,KAAa,EAAE,UAAkB;QAC/C,IAAI,CAAC;YACJ,MAAM,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;YAC1E,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QAC3C,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,IAAI,CAAC,YAAY,iBAAiB,EAAE,CAAC;gBACpC,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAA;YAClC,CAAC;YACD,MAAM,CAAC,CAAA;QACR,CAAC;IACF,CAAC;IAED,mBAAmB;QAClB,OAAO,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IACxC,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,OAAe,EAAE,OAAgB;QACrD,MAAM,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAA;QAC3F,IAAI,CAAC,MAAM,EAAE,CAAA;QACb,IAAI,CAAC,YAAY,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAA;QACpE,IAAI,CAAC,MAAM,EAAE,CAAA;IACd,CAAC;IAED,iBAAiB;QAChB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAA;IAC/B,CAAC;IAEO,oBAAoB,GAAG,KAAK,EAAE,OAAwC,EAAE,EAAE;QACjF,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;YAC9B,IAAI,kBAAkB,CAAC,wBAAwB,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,SAAS,mCAAyB,EAAE,CAAC;gBACvG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAA;YACvB,CAAC;iBAAM,IAAI,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,SAAS,mCAAyB,EAAE,CAAC;gBACjG,IAAI,CAAC,aAAa,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAA;gBAC3F,MAAM,IAAI,CAAC,cAAc,EAAE,CAAA;YAC5B,CAAC;QACF,CAAC;QACD,IAAI,CAAC,MAAM,EAAE,CAAA;IACd,CAAC,CAAA;IAEO,KAAK,CAAC,SAAS;QACtB,IAAI,CAAC,YAAY,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAA;IAC5D,CAAC;IAEO,KAAK,CAAC,cAAc;QAC3B,IAAI,CAAC,UAAU,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;IAC1F,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,oBAAoB;QAChC,iGAAiG;QACjG,6GAA6G;QAC7G,MAAM,oBAAoB,GAAG,MAAM,yBAAyB,CAC3D,IAAI,CAAC,eAAe,EACpB,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,MAAM,CACtF,CAAA;QACD,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACrC,MAAM,IAAI,oBAAoB,CAAC,yBAAyB,EAAE,oBAAoB,CAAC,CAAA;QAChF,CAAC;aAAM,CAAC;YACP,MAAM,IAAI,SAAS,CAAC,iCAAiC,CAAC,CAAA;QACvD,CAAC;IACF,CAAC;CACD","sourcesContent":["import { EntityClient } from \"../../api/common/EntityClient.js\"\nimport { MailboxPropertiesTypeRef } from \"../../api/entities/tutanota/TypeRefs.js\"\nimport { MailAddressFacade } from \"../../api/worker/facades/lazy/MailAddressFacade.js\"\nimport { LoginController } from \"../../api/main/LoginController.js\"\nimport { EventController } from \"../../api/main/EventController.js\"\nimport { OperationType } from \"../../api/common/TutanotaConstants.js\"\nimport { EmailDomainData, getAvailableDomains } from \"./MailAddressesUtils.js\"\nimport { GroupInfo, GroupInfoTypeRef, MailAddressAliasServiceReturn } from \"../../api/entities/sys/TypeRefs.js\"\nimport { assertNotNull, lazyMemoized } from \"@tutao/tutanota-utils\"\nimport { LimitReachedError } from \"../../api/common/error/RestError.js\"\nimport { UserError } from \"../../api/main/UserError.js\"\nimport { UpgradeRequiredError } from \"../../api/main/UpgradeRequiredError.js\"\nimport { IServiceExecutor } from \"../../api/common/ServiceRequest.js\"\nimport { getAvailableMatchingPlans } from \"../../subscription/SubscriptionUtils.js\"\nimport { EntityUpdateData, isUpdateFor, isUpdateForTypeRef } from \"../../api/common/utils/EntityUpdateUtils.js\"\nimport { isTutaMailAddress } from \"../../mailFunctionality/SharedMailUtils.js\"\n\nexport enum AddressStatus {\n\tPrimary,\n\tAlias,\n\tDisabledAlias,\n\tCustom,\n}\n\nexport interface AddressInfo {\n\tname: string\n\taddress: string\n\tstatus: AddressStatus\n}\n\nexport type AddressToName = Map<string, string>\n\n/** A strategy to change mail address to sender name mapping. */\nexport interface MailAddressNameChanger {\n\tgetSenderNames(): Promise<AddressToName>\n\n\tsetSenderName(address: string, name: string): Promise<AddressToName>\n\n\tremoveSenderName(address: string): Promise<AddressToName>\n}\n\n/** Model for showing the list of mail addresses and optionally adding more, enabling/disabling/setting names for them. */\nexport class MailAddressTableModel {\n\tprivate nameMappings: AddressToName | null = null\n\tprivate onLegacyPlan: boolean = false\n\taliasCount: MailAddressAliasServiceReturn | null = null\n\n\tinit: () => Promise<void> = lazyMemoized(async () => {\n\t\tthis.eventController.addEntityListener(this.entityEventsReceived)\n\n\t\t// important: \"not on legacy plan\" is true for free plans\n\t\tconst userController = this.logins.getUserController()\n\t\tthis.onLegacyPlan = userController.isLegacyPlan(await userController.getPlanType())\n\n\t\tawait this.loadNames()\n\t\tthis.redraw()\n\t\tawait this.loadAliasCount()\n\t\tthis.redraw()\n\t})\n\n\tconstructor(\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly mailAddressFacade: MailAddressFacade,\n\t\tprivate readonly logins: LoginController,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate userGroupInfo: GroupInfo,\n\t\tprivate readonly nameChanger: MailAddressNameChanger,\n\t\tprivate readonly redraw: () => unknown,\n\t) {}\n\n\tdispose() {\n\t\tthis.eventController.removeEntityListener(this.entityEventsReceived)\n\t}\n\n\tuserCanModifyAliases(): boolean {\n\t\treturn this.logins.getUserController().isGlobalAdmin()\n\t}\n\n\taliasLimitIncludesCustomDomains(): boolean {\n\t\treturn this.onLegacyPlan\n\t}\n\n\taddresses(): AddressInfo[] {\n\t\tconst { nameMappings } = this\n\t\tif (nameMappings == null) {\n\t\t\treturn []\n\t\t}\n\n\t\tconst primaryAddress = assertNotNull(this.userGroupInfo.mailAddress)\n\t\tconst primaryAddressInfo = {\n\t\t\tname: nameMappings.get(primaryAddress) ?? \"\",\n\t\t\taddress: primaryAddress,\n\t\t\tstatus: AddressStatus.Primary,\n\t\t}\n\n\t\tconst aliasesInfo = this.userGroupInfo.mailAddressAliases\n\t\t\t.slice()\n\t\t\t.sort((a, b) => (a.mailAddress > b.mailAddress ? 1 : -1))\n\t\t\t.map(({ mailAddress, enabled }) => {\n\t\t\t\tconst status =\n\t\t\t\t\t// O(aliases * TUTA_MAIL_ADDRESS_DOMAINS)\n\t\t\t\t\tisTutaMailAddress(mailAddress) ? (enabled ? AddressStatus.Alias : AddressStatus.DisabledAlias) : AddressStatus.Custom\n\n\t\t\t\treturn {\n\t\t\t\t\tname: nameMappings.get(mailAddress) ?? \"\",\n\t\t\t\t\taddress: mailAddress,\n\t\t\t\t\tstatus,\n\t\t\t\t}\n\t\t\t})\n\t\treturn [primaryAddressInfo, ...aliasesInfo]\n\t}\n\n\tasync setAliasName(address: string, senderName: string) {\n\t\tthis.nameMappings = await this.nameChanger.setSenderName(address, senderName)\n\t\tthis.redraw()\n\t}\n\n\t/**\n\t * Add an alias.\n\t * @throws if an error occurred, such as a LimitReachedError if too many aliases were added\n\t */\n\tasync addAlias(alias: string, senderName: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.mailAddressFacade.addMailAlias(this.userGroupInfo.group, alias)\n\t\t\tawait this.setAliasName(alias, senderName)\n\t\t} catch (e) {\n\t\t\tif (e instanceof LimitReachedError) {\n\t\t\t\tawait this.handleTooManyAliases()\n\t\t\t}\n\t\t\tthrow e\n\t\t}\n\t}\n\n\tgetAvailableDomains(): Promise<EmailDomainData[]> {\n\t\treturn getAvailableDomains(this.logins)\n\t}\n\n\tasync setAliasStatus(address: string, restore: boolean): Promise<void> {\n\t\tawait this.mailAddressFacade.setMailAliasStatus(this.userGroupInfo.group, address, restore)\n\t\tthis.redraw()\n\t\tthis.nameMappings = await this.nameChanger.removeSenderName(address)\n\t\tthis.redraw()\n\t}\n\n\tdefaultSenderName(): string {\n\t\treturn this.userGroupInfo.name\n\t}\n\n\tprivate entityEventsReceived = async (updates: ReadonlyArray<EntityUpdateData>) => {\n\t\tfor (const update of updates) {\n\t\t\tif (isUpdateForTypeRef(MailboxPropertiesTypeRef, update) && update.operation === OperationType.UPDATE) {\n\t\t\t\tawait this.loadNames()\n\t\t\t} else if (isUpdateFor(this.userGroupInfo, update) && update.operation === OperationType.UPDATE) {\n\t\t\t\tthis.userGroupInfo = await this.entityClient.load(GroupInfoTypeRef, this.userGroupInfo._id)\n\t\t\t\tawait this.loadAliasCount()\n\t\t\t}\n\t\t}\n\t\tthis.redraw()\n\t}\n\n\tprivate async loadNames() {\n\t\tthis.nameMappings = await this.nameChanger.getSenderNames()\n\t}\n\n\tprivate async loadAliasCount() {\n\t\tthis.aliasCount = await this.mailAddressFacade.getAliasCounters(this.userGroupInfo.group)\n\t}\n\n\t/**\n\t * Chooses the correct error to throw.\n\t * @throws UpgradeRequiredError if the customer can upgrade to a plan with more aliases\n\t * @throws UserError if the customer cannot add more aliases\n\t */\n\tpublic async handleTooManyAliases(): Promise<void> {\n\t\t// Determine if there is an available plan we can switch to that would let the user add an alias.\n\t\t// If so, show an upgrade dialog. Otherwise, inform the user that they reached the maximum number of aliases.\n\t\tconst plansWithMoreAliases = await getAvailableMatchingPlans(\n\t\t\tthis.serviceExecutor,\n\t\t\t(config) => Number(config.nbrOfAliases) > this.userGroupInfo.mailAddressAliases.length,\n\t\t)\n\t\tif (plansWithMoreAliases.length > 0) {\n\t\t\tthrow new UpgradeRequiredError(\"moreAliasesRequired_msg\", plansWithMoreAliases)\n\t\t} else {\n\t\t\tthrow new UserError(\"adminMaxNbrOfAliasesReached_msg\")\n\t\t}\n\t}\n}\n"]}