{"version":3,"file":"DesktopErrorHandler.js","sourceRoot":"","sources":["../../../../src/common/desktop/DesktopErrorHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { app, dialog } from \"electron\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport fs from \"node:fs\"\nimport path from \"node:path\"\nimport os from \"node:os\"\nimport type { WindowManager } from \"./DesktopWindowManager\"\nimport { log } from \"./DesktopLog\"\n\ntype ErrorLog = {\n\tname: string\n\tplatform: string\n\tmessage: string\n\tstack: string\n\tversion: string\n}\n\nexport class DesktopErrorHandler {\n\tprivate wm!: WindowManager\n\tprivate _errorLogPath: string\n\tlastErrorLog: ErrorLog | null = null\n\tprivate _showingErrorDialog: boolean\n\n\tconstructor() {\n\t\tthis._errorLogPath = path.join(app.getPath(\"userData\"), \"lasterror.log\")\n\t\tthis._showingErrorDialog = false\n\t}\n\n\t// these listeners can only be set after the app ready event\n\tinit(wm: WindowManager) {\n\t\tthis.wm = wm\n\t\tprocess\n\t\t\t.on(\"uncaughtException\", (error) => {\n\t\t\t\tconsole.log(\"unhandled exception\")\n\t\t\t\tthis.handleUnexpectedFailure(error)\n\t\t\t})\n\t\t\t.on(\"unhandledRejection\", (error: Error, p) => {\n\t\t\t\tconsole.log(\"unhandled rejection\")\n\t\t\t\tthis.handleUnexpectedFailure(error)\n\t\t\t})\n\n\t\t// check if there's an error log on disk\n\t\tif (fs.existsSync(this._errorLogPath)) {\n\t\t\ttry {\n\t\t\t\tthis.lastErrorLog = JSON.parse(fs.readFileSync(this._errorLogPath).toString())\n\n\t\t\t\tif (this.lastErrorLog) {\n\t\t\t\t\tlog.debug(\"found error log\")\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(\"Could not read error log:\", e)\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tfs.unlinkSync(this._errorLogPath)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(\"Could not delete error log:\", e)\n\t\t\t}\n\t\t}\n\t}\n\n\thandleUnexpectedFailure(error: Error) {\n\t\tif (this._showingErrorDialog) {\n\t\t\treturn\n\t\t}\n\n\t\tthis._showingErrorDialog = true\n\t\tconsole.error(\"unexpected error:\", error)\n\t\tthis.lastErrorLog = {\n\t\t\tname: error.name,\n\t\t\tplatform: process.platform + \" \" + os.release(),\n\t\t\tmessage: error.message,\n\t\t\tstack: this._betterStack(error.stack),\n\t\t\tversion: app.getVersion(),\n\t\t}\n\t\tdialog\n\t\t\t.showMessageBox({\n\t\t\t\ttitle: lang.get(\"errorReport_label\"),\n\t\t\t\tbuttons: [lang.get(\"cancel_action\"), lang.get(\"yes_label\")],\n\t\t\t\tdefaultId: 1,\n\t\t\t\tmessage: lang.get(\"wantToSendReport_msg\"),\n\t\t\t\tcheckboxLabel: lang.get(\"restartBefore_action\"),\n\t\t\t\tcheckboxChecked: false,\n\t\t\t\ttype: \"error\",\n\t\t\t})\n\t\t\t.then(async ({ response, checkboxChecked }) => {\n\t\t\t\tif (response === 1) {\n\t\t\t\t\t// clicked yes\n\t\t\t\t\tif (checkboxChecked) {\n\t\t\t\t\t\tlog.debug(\"writing error log to\", this._errorLogPath)\n\t\t\t\t\t\tfs.writeFileSync(this._errorLogPath, this.lastErrorLog ? JSON.stringify(this.lastErrorLog) : \"\")\n\t\t\t\t\t\tapp.relaunch({\n\t\t\t\t\t\t\targs: process.argv.slice(1),\n\t\t\t\t\t\t})\n\t\t\t\t\t\tapp.exit(0)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst loggedInWindow = this.wm.getAll().find((w) => w.getUserId() != null)\n\n\t\t\t\t\t\tif (loggedInWindow) {\n\t\t\t\t\t\t\treturn this.sendErrorReport(loggedInWindow.id)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst lastFocused = await this.wm.getLastFocused(true)\n\t\t\t\t\t\t\treturn this.sendErrorReport(lastFocused.id)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tthis._showingErrorDialog = false\n\t\t\t})\n\t}\n\n\tasync sendErrorReport(windowId: number): Promise<any> {\n\t\tif (!this.lastErrorLog) {\n\t\t\treturn Promise.resolve()\n\t\t}\n\t\tthis.wm.get(windowId)?.desktopFacade.reportError(this.lastErrorLog)\n\t\tthis.lastErrorLog = null\n\t}\n\n\t// replace absolute file paths in stack trace with nicer ones relative to the app\n\t_betterStack(stack: string | undefined): string {\n\t\tif (typeof stack !== \"string\") {\n\t\t\treturn \"\"\n\t\t}\n\n\t\treturn stack.replace(/^\\s*?at .*?\\((.*?):/gm, (match, pathGroup) => {\n\t\t\treturn match.replace(pathGroup, path.relative(app.getAppPath(), pathGroup))\n\t\t})\n\t}\n}\n\nexport const err: DesktopErrorHandler = new DesktopErrorHandler()\n"]}