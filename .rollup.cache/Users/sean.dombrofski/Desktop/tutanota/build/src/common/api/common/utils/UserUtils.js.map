{"version":3,"file":"UserUtils.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/utils/UserUtils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAA;AAGhE;;;GAGG;AACH,MAAM,UAAU,aAAa,CAAC,IAAU;IACvC,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;QAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,KAAK,CAAC,CAAA;IACrE,CAAC;SAAM,CAAC;QACP,OAAO,KAAK,CAAA;IACb,CAAC;AACF,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAC,IAAU;IACxC,OAAO,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC,QAAQ,CAAA;AACjD,CAAC","sourcesContent":["import { AccountType, GroupType } from \"../TutanotaConstants.js\"\nimport { User } from \"../../entities/sys/TypeRefs.js\"\n\n/**\n * Checks if the current user is an admin of the customer.\n * @return True if the user is an admin\n */\nexport function isGlobalAdmin(user: User): boolean {\n\tif (isInternalUser(user)) {\n\t\treturn user.memberships.some((m) => m.groupType === GroupType.Admin)\n\t} else {\n\t\treturn false\n\t}\n}\n\n/**\n * Provides the information if an internal user is logged in.\n * @return True if an internal user is logged in, false if no user or an external user is logged in.\n */\nexport function isInternalUser(user: User): boolean {\n\treturn user.accountType !== AccountType.EXTERNAL\n}\n"]}