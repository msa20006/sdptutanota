{"version":3,"file":"SwitchToBusinessInvoiceDataDialog.js","sourceRoot":"","sources":["../../../../src/common/subscription/SwitchToBusinessInvoiceDataDialog.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,SAAS,CAAA;AACvB,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAA;AAC3C,OAAO,EAAE,gBAAgB,EAAE,wBAAwB,EAAE,MAAM,oBAAoB,CAAA;AAC/E,OAAO,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAA;AAC/D,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAA;AAE/D,OAAO,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAA;AAElE,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAA;AACnD,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAA;AACtD,OAAO,EAAE,gBAAgB,EAAE,MAAM,yCAAyC,CAAA;AAE1E;;;;GAIG;AACH,MAAM,UAAU,qCAAqC,CAAC,QAAkB,EAAE,WAAwB,EAAE,cAA8B;IACjI,IAAI,QAAQ,CAAC,WAAW,EAAE,CAAC;QAC1B,MAAM,IAAI,gBAAgB,CAAC,gFAAgF,CAAC,CAAA;IAC7G,CAAC;IACD,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,IAAI,EAAE,WAAW,EAAE,wBAAwB,CAAC,QAAQ,CAAC,CAAA;IAEnG,MAAM,MAAM,GAAG,KAAK,EAAW,CAAA;IAC/B,MAAM,aAAa,GAAG,KAAK,IAAI,EAAE;QAChC,IAAI,KAAK,GAAG,gBAAgB,CAAC,mBAAmB,EAAE,CAAA;QAElD,IAAI,KAAK,EAAE,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QACtB,CAAC;aAAM,CAAC;YACP,kBAAkB,CAAC,gBAAgB,EAAE,MAAM,CAAC,OAAO,CAAC,CAAA;YAEpD,MAAM,OAAO,GAAG,MAAM,iBAAiB,CACtC,iBAAiB,CAAC,cAAc,CAAC,eAAe,CAAC,EACjD,gBAAgB,CAAC,cAAc,EAAE,EACjC,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,GAAG,EACH,cAAc,CACd;iBACC,KAAK,CACL,OAAO,CAAC,eAAe,EAAE,GAAG,EAAE;gBAC7B,MAAM,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAA;gBAC/C,OAAO,KAAK,CAAA;YACb,CAAC,CAAC,CACF;iBACA,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;gBACZ,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YACjB,CAAC,CAAC,CAAA;YACH,IAAI,OAAO,EAAE,CAAC;gBACb,MAAM,CAAC,KAAK,EAAE,CAAA;gBACd,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YACrB,CAAC;iBAAM,CAAC;gBACP,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;YACtB,CAAC;QACF,CAAC;IACF,CAAC,CAAA;IAED,MAAM,YAAY,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IAEhD,MAAM,MAAM,GAAG,MAAM,CAAC,gBAAgB,CAAC;QACtC,KAAK,EAAE,iBAAiB;QACxB,KAAK,EAAE;YACN,IAAI,EAAE,GAAG,EAAE,CACV,CAAC,CAAC,0BAA0B,EAAE;gBAC7B,4DAA4D;gBAC5D,CAAC,CAAC,gBAAgB,CAAC;aACnB,CAAC;SACH;QACD,QAAQ,EAAE,aAAa;QACvB,YAAY,EAAE,YAAY;QAC1B,WAAW,EAAE,IAAI;QACjB,cAAc,EAAE,aAAa;KAC7B,CAAC,CAAA;IAEF,OAAO,MAAM,CAAC,OAAO,CAAA;AACtB,CAAC","sourcesContent":["import m from \"mithril\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport { InvoiceDataInput, InvoiceDataInputLocation } from \"./InvoiceDataInput\"\nimport { updatePaymentData } from \"./InvoiceAndPaymentDataPage\"\nimport { BadRequestError } from \"../api/common/error/RestError\"\nimport type { AccountingInfo, Customer } from \"../api/entities/sys/TypeRefs.js\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport type { InvoiceData } from \"../api/common/TutanotaConstants\"\nimport { asPaymentInterval } from \"./PriceUtils.js\"\nimport { defer, ofClass } from \"@tutao/tutanota-utils\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\n\n/**\n * Shows a dialog to update the invoice data for business use. Switches the account to business use before actually saving the new invoice data\n * because only when the account is set to business use some payment data like vat id number may be saved.\n * @return true, if the business invoiceData was written successfully\n */\nexport function showSwitchToBusinessInvoiceDataDialog(customer: Customer, invoiceData: InvoiceData, accountingInfo: AccountingInfo): Promise<boolean> {\n\tif (customer.businessUse) {\n\t\tthrow new ProgrammingError(\"cannot show invoice data dialog if the customer is already a business customer\")\n\t}\n\tconst invoiceDataInput = new InvoiceDataInput(true, invoiceData, InvoiceDataInputLocation.InWizard)\n\n\tconst result = defer<boolean>()\n\tconst confirmAction = async () => {\n\t\tlet error = invoiceDataInput.validateInvoiceData()\n\n\t\tif (error) {\n\t\t\tDialog.message(error)\n\t\t} else {\n\t\t\tshowProgressDialog(\"pleaseWait_msg\", result.promise)\n\n\t\t\tconst success = await updatePaymentData(\n\t\t\t\tasPaymentInterval(accountingInfo.paymentInterval),\n\t\t\t\tinvoiceDataInput.getInvoiceData(),\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tfalse,\n\t\t\t\t\"0\",\n\t\t\t\taccountingInfo,\n\t\t\t)\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(BadRequestError, () => {\n\t\t\t\t\t\tDialog.message(\"paymentMethodNotAvailable_msg\")\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tresult.reject(e)\n\t\t\t\t})\n\t\t\tif (success) {\n\t\t\t\tdialog.close()\n\t\t\t\tresult.resolve(true)\n\t\t\t} else {\n\t\t\t\tresult.resolve(false)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst cancelAction = () => result.resolve(false)\n\n\tconst dialog = Dialog.showActionDialog({\n\t\ttitle: \"invoiceData_msg\",\n\t\tchild: {\n\t\t\tview: () =>\n\t\t\t\tm(\"#changeInvoiceDataDialog\", [\n\t\t\t\t\t// infoMessageId ? m(\".pt\", lang.get(infoMessageId)) : null,\n\t\t\t\t\tm(invoiceDataInput),\n\t\t\t\t]),\n\t\t},\n\t\tokAction: confirmAction,\n\t\tcancelAction: cancelAction,\n\t\tallowCancel: true,\n\t\tokActionTextId: \"save_action\",\n\t})\n\n\treturn result.promise\n}\n"]}