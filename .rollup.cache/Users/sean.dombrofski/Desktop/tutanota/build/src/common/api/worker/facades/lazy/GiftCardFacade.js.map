{"version":3,"file":"GiftCardFacade.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/facades/lazy/GiftCardFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { GroupType } from \"../../../common/TutanotaConstants.js\"\nimport {\n\tassertNotNull,\n\tBase64,\n\tbase64ExtToBase64,\n\tbase64ToBase64Ext,\n\tbase64ToBase64Url,\n\tbase64UrlToBase64,\n\tgetFirstOrThrow,\n\tisEmpty,\n\tuint8ArrayToBase64,\n} from \"@tutao/tutanota-utils\"\nimport type { GiftCardRedeemGetReturn } from \"../../../entities/sys/TypeRefs.js\"\nimport { createGiftCardCreateData, createGiftCardRedeemData, GiftCard } from \"../../../entities/sys/TypeRefs.js\"\nimport { aes256RandomKey, base64ToKey, bitArrayToUint8Array, sha256Hash } from \"@tutao/tutanota-crypto\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { GiftCardRedeemService, GiftCardService } from \"../../../entities/sys/Services.js\"\nimport { elementIdPart, GENERATED_MAX_ID } from \"../../../common/utils/EntityUtils.js\"\nimport { CryptoFacade } from \"../../crypto/CryptoFacade.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { ProgrammingError } from \"../../../common/error/ProgrammingError.js\"\nimport { CustomerFacade } from \"./CustomerFacade.js\"\nimport { KeyLoaderFacade } from \"../KeyLoaderFacade.js\"\nimport { encryptKeyWithVersionedKey } from \"../../crypto/CryptoWrapper.js\"\n\nconst ID_LENGTH = GENERATED_MAX_ID.length\nconst KEY_LENGTH_128_BIT_B64 = 24\nconst KEY_LENGTH_256_BIT_B64 = 44\n\nexport class GiftCardFacade {\n\tconstructor(\n\t\tprivate readonly user: UserFacade,\n\t\tprivate customer: CustomerFacade,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly cryptoFacade: CryptoFacade,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t) {}\n\n\tasync generateGiftCard(message: string, value: NumberString): Promise<IdTuple> {\n\t\tconst adminGroupIds = this.user.getGroupIds(GroupType.Admin)\n\n\t\tif (isEmpty(adminGroupIds)) {\n\t\t\tthrow new Error(\"missing admin membership\")\n\t\t}\n\n\t\tconst adminGroupId = getFirstOrThrow(adminGroupIds)\n\t\tconst ownerKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId)\n\n\t\tconst sessionKey = aes256RandomKey()\n\t\tconst ownerEncSessionKey = encryptKeyWithVersionedKey(ownerKey, sessionKey)\n\t\tconst { giftCard } = await this.serviceExecutor.post(\n\t\t\tGiftCardService,\n\t\t\tcreateGiftCardCreateData({\n\t\t\t\tmessage: message,\n\t\t\t\tkeyHash: sha256Hash(bitArrayToUint8Array(sessionKey)),\n\t\t\t\tvalue,\n\t\t\t\townerEncSessionKey: ownerEncSessionKey.key,\n\t\t\t\townerKeyVersion: ownerEncSessionKey.encryptingKeyVersion.toString(),\n\t\t\t}),\n\t\t\t{ sessionKey },\n\t\t)\n\n\t\treturn giftCard\n\t}\n\n\tgetGiftCardInfo(id: Id, key: string): Promise<GiftCardRedeemGetReturn> {\n\t\treturn this.serviceExecutor.get(\n\t\t\tGiftCardRedeemService,\n\t\t\tcreateGiftCardRedeemData({\n\t\t\t\tgiftCardInfo: id,\n\t\t\t\tkeyHash: sha256Hash(bitArrayToUint8Array(base64ToKey(key))),\n\t\t\t\tcountryCode: \"\",\n\t\t\t}),\n\t\t\t{\n\t\t\t\tsessionKey: base64ToKey(key),\n\t\t\t},\n\t\t)\n\t}\n\n\tasync redeemGiftCard(\n\t\tgiftCardInfoId: Id,\n\t\tkey: string,\n\t\t/** Country code to use if a free user is being upgraded to premium (required if accountType is free) */\n\t\tcountryCode: string,\n\t): Promise<void> {\n\t\tif ((await this.customer.loadAccountingInfo()).invoiceCountry == null && countryCode == null) {\n\t\t\tthrow new ProgrammingError(\"User must provide a country\")\n\t\t}\n\n\t\tawait this.serviceExecutor.post(\n\t\t\tGiftCardRedeemService,\n\t\t\tcreateGiftCardRedeemData({\n\t\t\t\tgiftCardInfo: giftCardInfoId,\n\t\t\t\tkeyHash: sha256Hash(bitArrayToUint8Array(base64ToKey(key))),\n\t\t\t\tcountryCode,\n\t\t\t}),\n\t\t)\n\t}\n\n\tasync encodeGiftCardToken(giftCard: GiftCard): Promise<string> {\n\t\tconst key = assertNotNull(await this.cryptoFacade.resolveSessionKeyForInstance(giftCard))\n\t\treturn this.encodeToken(elementIdPart(giftCard._id), bitArrayToUint8Array(key))\n\t}\n\n\tasync decodeGiftCardToken(token: string): Promise<{ id: Id; key: Base64 }> {\n\t\tconst id = base64ToBase64Ext(base64UrlToBase64(token.slice(0, ID_LENGTH)))\n\t\tconst key = base64UrlToBase64(token.slice(ID_LENGTH, token.length))\n\n\t\tif (id.length !== ID_LENGTH || (key.length !== KEY_LENGTH_128_BIT_B64 && key.length !== KEY_LENGTH_256_BIT_B64)) {\n\t\t\tthrow new Error(\"invalid token\")\n\t\t}\n\n\t\treturn { id, key }\n\t}\n\n\tprivate encodeToken(id: Id, key: Uint8Array): Base64 {\n\t\tif (id.length !== ID_LENGTH) {\n\t\t\tthrow new Error(\"Invalid gift card params\")\n\t\t}\n\t\tconst keyBase64 = uint8ArrayToBase64(key)\n\t\tif (keyBase64.length !== KEY_LENGTH_128_BIT_B64 && keyBase64.length !== KEY_LENGTH_256_BIT_B64) {\n\t\t\tthrow new Error(\"Invalid gift card key\")\n\t\t}\n\n\t\tconst idPart = base64ToBase64Url(base64ExtToBase64(id))\n\t\tconst keyPart = base64ToBase64Url(keyBase64)\n\t\treturn idPart + keyPart\n\t}\n}\n"]}