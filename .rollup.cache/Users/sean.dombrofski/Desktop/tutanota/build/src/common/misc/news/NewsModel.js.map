{"version":3,"file":"NewsModel.js","sourceRoot":"","sources":["../../../../../src/common/misc/news/NewsModel.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAmB,MAAM,yCAAyC,CAAA;AAEvF,OAAO,EAAE,WAAW,EAAE,MAAM,yCAAyC,CAAA;AACrE,OAAO,EAAE,aAAa,EAAE,MAAM,qCAAqC,CAAA;AAEnE,OAAO,EAAE,QAAQ,EAAE,MAAM,yBAAyB,CAAA;AAWlD;;GAEG;AACH,MAAM,OAAO,SAAS;IAKH;IACA;IACA;IANlB,WAAW,GAAa,EAAE,CAAA;IAC1B,iBAAiB,GAAiC,EAAE,CAAA;IAEpD,YACkB,eAAiC,EACjC,OAAwB,EACxB,mBAAmE;QAFnE,oBAAe,GAAf,eAAe,CAAkB;QACjC,YAAO,GAAP,OAAO,CAAiB;QACxB,wBAAmB,GAAnB,mBAAmB,CAAgD;IAClF,CAAC;IAEJ;;OAEG;IACH,KAAK,CAAC,WAAW;QAChB,MAAM,QAAQ,GAAY,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;QAE3E,IAAI,CAAC,WAAW,GAAG,EAAE,CAAA;QACrB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAA;QAE3B,KAAK,MAAM,UAAU,IAAI,QAAQ,CAAC,WAAW,EAAE,CAAC;YAC/C,MAAM,YAAY,GAAG,UAAU,CAAC,YAAY,CAAA;YAC5C,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAA;YAEjE,IAAI,CAAC,CAAC,YAAY,IAAI,CAAC,MAAM,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;gBAChE,mEAAmE;gBACnE,MAAM,sBAAsB,GAAG,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,CAAA;gBAClH,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBAC7B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;oBACjC,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,GAAG,YAAY,CAAA;gBACpD,CAAC;YACF,CAAC;QACF,CAAC;QAED,OAAO,IAAI,CAAC,WAAW,CAAA;IACxB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CAAC,UAAc;QACnC,MAAM,IAAI,GAAG,YAAY,CAAC,EAAE,UAAU,EAAE,CAAC,CAAA;QAEzC,IAAI,CAAC;YACJ,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;YAClD,OAAO,IAAI,CAAA;QACZ,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,IAAI,CAAC,YAAY,aAAa,EAAE,CAAC;gBAChC,mDAAmD;gBACnD,OAAO,CAAC,GAAG,CAAC,2CAA2C,UAAU,GAAG,CAAC,CAAA;gBACrE,OAAO,KAAK,CAAA;YACb,CAAC;iBAAM,CAAC;gBACP,MAAM,CAAC,CAAA;YACR,CAAC;QACF,CAAC;gBAAS,CAAC;YACV,MAAM,IAAI,CAAC,WAAW,EAAE,CAAA;QACzB,CAAC;IACF,CAAC;IAED,wBAAwB,CAAC,UAAc;QACtC,OAAO,IAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC,UAAU,CAAC,CAAA;IAC7D,CAAC;IAED,4BAA4B,CAAC,UAAc;QAC1C,OAAO,IAAI,CAAC,OAAO,CAAC,gCAAgC,CAAC,UAAU,CAAC,CAAA;IACjE,CAAC;CACD","sourcesContent":["import { createNewsIn, NewsId, NewsOut } from \"../../api/entities/tutanota/TypeRefs.js\"\nimport { IServiceExecutor } from \"../../api/common/ServiceRequest.js\"\nimport { NewsService } from \"../../api/entities/tutanota/Services.js\"\nimport { NotFoundError } from \"../../api/common/error/RestError.js\"\nimport { NewsListItem } from \"./NewsListItem.js\"\nimport { isIOSApp } from \"../../api/common/Env.js\"\n\n/**\n * Interface for storing information about displayed news items on the device.\n */\nexport interface NewsItemStorage {\n\tacknowledgeNewsItemForDevice(newsId: Id): void\n\n\thasAcknowledgedNewsItemForDevice(newsId: Id): boolean\n}\n\n/**\n * Makes calls to the NewsService in order to load the user's unacknowledged NewsItems and stores them.\n */\nexport class NewsModel {\n\tliveNewsIds: NewsId[] = []\n\tliveNewsListItems: Record<string, NewsListItem> = {}\n\n\tconstructor(\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly storage: NewsItemStorage,\n\t\tprivate readonly newsListItemFactory: (name: string) => Promise<NewsListItem | null>,\n\t) {}\n\n\t/**\n\t * Loads the user's unacknowledged NewsItems.\n\t */\n\tasync loadNewsIds(): Promise<NewsId[]> {\n\t\tconst response: NewsOut = await this.serviceExecutor.get(NewsService, null)\n\n\t\tthis.liveNewsIds = []\n\t\tthis.liveNewsListItems = {}\n\n\t\tfor (const newsItemId of response.newsItemIds) {\n\t\t\tconst newsItemName = newsItemId.newsItemName\n\t\t\tconst newsListItem = await this.newsListItemFactory(newsItemName)\n\n\t\t\tif (!!newsListItem && (await newsListItem.isShown(newsItemId))) {\n\t\t\t\t// we can't display those news items unless we allow apple payments\n\t\t\t\tconst unsupportedIosNewsItem = isIOSApp() && [\"newPlans\", \"newPlansOfferEnding\"].includes(newsItemId.newsItemName)\n\t\t\t\tif (!unsupportedIosNewsItem) {\n\t\t\t\t\tthis.liveNewsIds.push(newsItemId)\n\t\t\t\t\tthis.liveNewsListItems[newsItemName] = newsListItem\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.liveNewsIds\n\t}\n\n\t/**\n\t * Acknowledges the NewsItem with the given ID.\n\t */\n\tasync acknowledgeNews(newsItemId: Id): Promise<boolean> {\n\t\tconst data = createNewsIn({ newsItemId })\n\n\t\ttry {\n\t\t\tawait this.serviceExecutor.post(NewsService, data)\n\t\t\treturn true\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t// NewsItem not found, likely deleted on the server\n\t\t\t\tconsole.log(`Could not acknowledge newsItem with ID '${newsItemId}'`)\n\t\t\t\treturn false\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t} finally {\n\t\t\tawait this.loadNewsIds()\n\t\t}\n\t}\n\n\tacknowledgeNewsForDevice(newsItemId: Id) {\n\t\treturn this.storage.acknowledgeNewsItemForDevice(newsItemId)\n\t}\n\n\thasAcknowledgedNewsForDevice(newsItemId: Id): boolean {\n\t\treturn this.storage.hasAcknowledgedNewsItemForDevice(newsItemId)\n\t}\n}\n"]}