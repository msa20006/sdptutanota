{"version":3,"file":"RemoteBridge.js","sourceRoot":"","sources":["../../../../../src/common/desktop/ipc/RemoteBridge.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,4BAA4B,EAAa,MAAM,mCAAmC,CAAA;AAE3F,OAAO,EAAE,iBAAiB,EAAE,OAAO,EAAE,MAAM,iDAAiD,CAAA;AAC5F,OAAO,EAAE,2BAA2B,EAAE,MAAM,iEAAiE,CAAA;AAC7G,OAAO,EAAE,gCAAgC,EAAE,MAAM,sEAAsE,CAAA;AAEvH,OAAO,EAAE,oCAAoC,EAAE,MAAM,0EAA0E,CAAA;AAS/H,MAAM,gBAAgB,GAAwC;IAC7D,iBAAiB,EAAE,SAAS;IAC5B,iBAAiB,EAAE,aAAa;CACvB,CAAA;AAkBV,MAAM,OAAO,YAAY;IACK;IAAuD;IAApF,YAA6B,iBAAoC,EAAmB,oBAA0C;QAAjG,sBAAiB,GAAjB,iBAAiB,CAAmB;QAAmB,yBAAoB,GAApB,oBAAoB,CAAsB;IAAG,CAAC;IAElI,YAAY,CAAC,MAAyB;QACrC,MAAM,WAAW,GAAG,MAAM,CAAC,cAAc,CAAC,WAAW,CAAA;QACrD,MAAM,EAAE,yBAAyB,EAAE,aAAa,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;QAC/F,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAA;QAEvD,MAAM,SAAS,GAAG,IAAI,4BAA4B,CAA4D,WAAW,EAAE,gBAAgB,CAAC,CAAA;QAC5I,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAC9C,SAAS,EACT;YACC,MAAM,EAAE,aAAa;YACrB,GAAG,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;gBACvB,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC,GAAG,IAAI,CAAA;gBAC5C,OAAO,MAAM,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,CAAA;YAC7D,CAAC;SACD,EACD,WAAW,CACX,CAAA;QACD,MAAM,eAAe,GAAG;YACvB,YAAY,EAAE,KAAK,EAAE,WAAmB,EAAE,IAA4B,EAAgB,EAAE;gBACvF,MAAM,yBAAyB,CAAC,YAAY,EAAE,CAAA;gBAC9C,OAAO,iBAAiB,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,WAA4B,EAAE,IAAI,CAAC,CAAC,CAAA;YACtF,CAAC;SACD,CAAA;QACD,OAAO;YACN,aAAa,EAAE,IAAI,2BAA2B,CAAC,eAAe,CAAC;YAC/D,kBAAkB,EAAE,IAAI,gCAAgC,CAAC,eAAe,CAAC;YACzE,sBAAsB,EAAE,IAAI,oCAAoC,CAAC,eAAe,CAAC;YACjF,aAAa;SACb,CAAA;IACF,CAAC;IAED,WAAW,CAAC,GAAiD;QAC5D,GAAG,CAAC,aAAa,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAA;IACtD,CAAC;CACD","sourcesContent":["import { DesktopFacade } from \"../../native/common/generatedipc/DesktopFacade.js\"\nimport { CommonNativeFacade } from \"../../native/common/generatedipc/CommonNativeFacade.js\"\nimport { ApplicationWindow } from \"../ApplicationWindow.js\"\nimport { ElectronWebContentsTransport, IpcConfig } from \"./ElectronWebContentsTransport.js\"\nimport { DesktopGlobalDispatcher } from \"../../native/common/generatedipc/DesktopGlobalDispatcher.js\"\nimport { MessageDispatcher, Request } from \"../../api/common/threading/MessageDispatcher.js\"\nimport { DesktopFacadeSendDispatcher } from \"../../native/common/generatedipc/DesktopFacadeSendDispatcher.js\"\nimport { CommonNativeFacadeSendDispatcher } from \"../../native/common/generatedipc/CommonNativeFacadeSendDispatcher.js\"\nimport { DesktopCommonSystemFacade } from \"../DesktopCommonSystemFacade.js\"\nimport { InterWindowEventFacadeSendDispatcher } from \"../../native/common/generatedipc/InterWindowEventFacadeSendDispatcher.js\"\n\nexport interface SendingFacades {\n\tdesktopFacade: DesktopFacade\n\tcommonNativeFacade: CommonNativeFacade\n\tinterWindowEventSender: InterWindowEventFacadeSendDispatcher\n\twindowCleanup: WindowCleanup\n}\n\nconst primaryIpcConfig: IpcConfig<\"to-main\", \"to-renderer\"> = {\n\trenderToMainEvent: \"to-main\",\n\tmainToRenderEvent: \"to-renderer\",\n} as const\n\nexport type DispatcherFactory = (window: ApplicationWindow) => {\n\tdesktopCommonSystemFacade: DesktopCommonSystemFacade\n\tdispatcher: DesktopGlobalDispatcher\n\twindowCleanup: WindowCleanup\n}\nexport type FacadeHandler = (message: Request<\"facade\">) => Promise<any>\nexport type FacadeHandlerFactory = (window: ApplicationWindow) => FacadeHandler\n\n/**\n * An action that is invoked when the window is detached from a\n * user session e.g. when it's closed or reloaded.\n */\nexport interface WindowCleanup {\n\tonCleanup(userId: Id): Promise<void>\n}\n\nexport class RemoteBridge {\n\tconstructor(private readonly dispatcherFactory: DispatcherFactory, private readonly facadeHandlerFactory: FacadeHandlerFactory) {}\n\n\tcreateBridge(window: ApplicationWindow): SendingFacades {\n\t\tconst webContents = window._browserWindow.webContents\n\t\tconst { desktopCommonSystemFacade, windowCleanup, dispatcher } = this.dispatcherFactory(window)\n\t\tconst facadeHandler = this.facadeHandlerFactory(window)\n\n\t\tconst transport = new ElectronWebContentsTransport<typeof primaryIpcConfig, JsRequestType, NativeRequestType>(webContents, primaryIpcConfig)\n\t\tconst messageDispatcher = new MessageDispatcher<JsRequestType, NativeRequestType>(\n\t\t\ttransport,\n\t\t\t{\n\t\t\t\tfacade: facadeHandler,\n\t\t\t\tipc: async ({ args }) => {\n\t\t\t\t\tconst [facade, method, ...methodArgs] = args\n\t\t\t\t\treturn await dispatcher.dispatch(facade, method, methodArgs)\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"node-main\",\n\t\t)\n\t\tconst nativeInterface = {\n\t\t\tinvokeNative: async (requestType: string, args: ReadonlyArray<unknown>): Promise<any> => {\n\t\t\t\tawait desktopCommonSystemFacade.awaitForInit()\n\t\t\t\treturn messageDispatcher.postRequest(new Request(requestType as JsRequestType, args))\n\t\t\t},\n\t\t}\n\t\treturn {\n\t\t\tdesktopFacade: new DesktopFacadeSendDispatcher(nativeInterface),\n\t\t\tcommonNativeFacade: new CommonNativeFacadeSendDispatcher(nativeInterface),\n\t\t\tinterWindowEventSender: new InterWindowEventFacadeSendDispatcher(nativeInterface),\n\t\t\twindowCleanup,\n\t\t}\n\t}\n\n\tunsubscribe(ipc: { removeHandler: (channel: string) => void }) {\n\t\tipc.removeHandler(primaryIpcConfig.renderToMainEvent)\n\t}\n}\n"]}