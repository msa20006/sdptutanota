{"version":3,"file":"LoginUtils.js","sourceRoot":"","sources":["../../../../src/common/misc/LoginUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { LoginController } from \"../api/main/LoginController\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport { generatedIdToTimestamp } from \"../api/common/utils/EntityUtils\"\nimport type { MaybeTranslation } from \"./LanguageViewModel\"\nimport { lang } from \"./LanguageViewModel\"\nimport {\n\tAccessBlockedError,\n\tAccessDeactivatedError,\n\tAccessExpiredError,\n\tBadRequestError,\n\tConnectionError,\n\tNotAuthenticatedError,\n\tNotAuthorizedError,\n\tNotFoundError,\n\tTooManyRequestsError,\n} from \"../api/common/error/RestError\"\nimport { CancelledError } from \"../api/common/error/CancelledError\"\nimport {\n\tApprovalStatus,\n\tAvailablePlans,\n\tAvailablePlanType,\n\tgetCustomerApprovalStatus,\n\tKdfType,\n\tNewBusinessPlans,\n\tNewPaidPlans,\n\tNewPersonalPlans,\n\tSubscriptionType,\n} from \"../api/common/TutanotaConstants\"\nimport type { ResetAction } from \"../login/recover/RecoverLoginDialog\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport { UserError } from \"../api/main/UserError\"\nimport { noOp, ofClass } from \"@tutao/tutanota-utils\"\nimport { showUserError } from \"./ErrorHandlerImpl\"\nimport type { SubscriptionParameters } from \"../subscription/UpgradeSubscriptionWizard\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { CredentialAuthenticationError } from \"../api/common/error/CredentialAuthenticationError\"\nimport type { Params } from \"mithril\"\nimport { LoginState } from \"../login/LoginViewModel.js\"\n\n/**\n * Shows warnings if the invoices are not paid or the registration is not approved yet.\n * @param logins The `LoginController` used to retrieve the current users customer information from.\n * @param includeInvoiceNotPaidForAdmin If true, also shows a warning for an admin if the invoice is not paid (use at login), if false does not show this warning (use when sending an email).\n * @param defaultStatus This status is used if the actual status on the customer is \"0\"\n * @returns True if the user may still send emails, false otherwise.\n */\nexport function checkApprovalStatus(logins: LoginController, includeInvoiceNotPaidForAdmin: boolean, defaultStatus?: ApprovalStatus): Promise<boolean> {\n\tif (!logins.getUserController().isInternalUser()) {\n\t\t// external users are not authorized to load the customer\n\t\treturn Promise.resolve(true)\n\t}\n\n\treturn logins\n\t\t.getUserController()\n\t\t.loadCustomer()\n\t\t.then((customer) => {\n\t\t\tconst approvalStatus = getCustomerApprovalStatus(customer)\n\t\t\tconst status = approvalStatus === ApprovalStatus.REGISTRATION_APPROVED && defaultStatus != null ? defaultStatus : approvalStatus\n\t\t\tif (\n\t\t\t\tstatus === ApprovalStatus.REGISTRATION_APPROVAL_NEEDED ||\n\t\t\t\tstatus === ApprovalStatus.DELAYED ||\n\t\t\t\tstatus === ApprovalStatus.REGISTRATION_APPROVAL_NEEDED_AND_INITIALLY_ACCESSED\n\t\t\t) {\n\t\t\t\treturn Dialog.message(\"waitingForApproval_msg\").then(() => false)\n\t\t\t} else if (status === ApprovalStatus.DELAYED_AND_INITIALLY_ACCESSED) {\n\t\t\t\tif (new Date().getTime() - generatedIdToTimestamp(customer._id) > 2 * 24 * 60 * 60 * 1000) {\n\t\t\t\t\treturn Dialog.message(\"requestApproval_msg\").then(() => true)\n\t\t\t\t} else {\n\t\t\t\t\treturn Dialog.message(\"waitingForApproval_msg\").then(() => false)\n\t\t\t\t}\n\t\t\t} else if (status === ApprovalStatus.INVOICE_NOT_PAID) {\n\t\t\t\tif (logins.getUserController().isGlobalAdmin()) {\n\t\t\t\t\tif (includeInvoiceNotPaidForAdmin) {\n\t\t\t\t\t\treturn Dialog.message(\"invoiceNotPaid_msg\")\n\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t// TODO: navigate to payment site in settings\n\t\t\t\t\t\t\t\t//m.route.set(\"/settings\")\n\t\t\t\t\t\t\t\t//tutao.locator.settingsViewModel.show(tutao.tutanota.ctrl.SettingsViewModel.DISPLAY_ADMIN_PAYMENT);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then(() => true)\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst errorMessage = lang.makeTranslation(\"invoiceNotPaidUser_msg\", lang.get(\"invoiceNotPaidUser_msg\") + \" \" + lang.get(\"contactAdmin_msg\"))\n\n\t\t\t\t\treturn Dialog.message(errorMessage).then(() => false)\n\t\t\t\t}\n\t\t\t} else if (status === ApprovalStatus.SPAM_SENDER) {\n\t\t\t\tDialog.message(\"loginAbuseDetected_msg\") // do not logout to avoid that we try to reload with mail editor open\n\n\t\t\t\treturn false\n\t\t\t} else if (status === ApprovalStatus.PAID_SUBSCRIPTION_NEEDED) {\n\t\t\t\tconst message = lang.get(\"upgradeNeeded_msg\")\n\t\t\t\treturn Dialog.reminder(lang.get(\"upgradeReminderTitle_msg\"), message).then((confirmed) => {\n\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\timport(\"../subscription/UpgradeSubscriptionWizard\").then((m) => m.showUpgradeWizard(logins))\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\treturn true\n\t\t\t}\n\t\t})\n}\n\nexport function getLoginErrorMessage(error: Error, isExternalLogin: boolean): MaybeTranslation {\n\tswitch (error.constructor) {\n\t\tcase BadRequestError:\n\t\tcase NotAuthenticatedError:\n\t\tcase AccessDeactivatedError:\n\t\t\treturn \"loginFailed_msg\"\n\n\t\tcase AccessBlockedError:\n\t\t\treturn \"loginFailedOften_msg\"\n\n\t\tcase AccessExpiredError:\n\t\t\treturn isExternalLogin ? \"expiredLink_msg\" : \"inactiveAccount_msg\"\n\n\t\tcase TooManyRequestsError:\n\t\t\treturn \"tooManyAttempts_msg\"\n\n\t\tcase CancelledError:\n\t\t\treturn \"emptyString_msg\"\n\n\t\tcase CredentialAuthenticationError:\n\t\t\treturn lang.getTranslation(\"couldNotUnlockCredentials_msg\", {\n\t\t\t\t\"{reason}\": error.message,\n\t\t\t})\n\n\t\tcase ConnectionError:\n\t\t\treturn \"connectionLostLong_msg\"\n\n\t\tdefault:\n\t\t\treturn \"emptyString_msg\"\n\t}\n}\n\n/**\n * Handle expected login errors\n * Any unexpected errors will be rethrown\n */\nexport function handleExpectedLoginError<E extends Error>(error: E, handler: (error: E) => void) {\n\tif (\n\t\terror instanceof BadRequestError ||\n\t\terror instanceof NotAuthenticatedError ||\n\t\terror instanceof AccessExpiredError ||\n\t\terror instanceof AccessBlockedError ||\n\t\terror instanceof AccessDeactivatedError ||\n\t\terror instanceof TooManyRequestsError ||\n\t\terror instanceof CancelledError ||\n\t\terror instanceof CredentialAuthenticationError ||\n\t\terror instanceof ConnectionError\n\t) {\n\t\thandler(error)\n\t} else {\n\t\tthrow error\n\t}\n}\n\nexport function getLoginErrorStateAndMessage(error: Error): { errorMessage: MaybeTranslation; state: LoginState } {\n\tlet errorMessage = getLoginErrorMessage(error, false)\n\tlet state\n\tif (error instanceof BadRequestError || error instanceof NotAuthenticatedError) {\n\t\tstate = LoginState.InvalidCredentials\n\t} else if (error instanceof AccessExpiredError) {\n\t\tstate = LoginState.AccessExpired\n\t} else {\n\t\tstate = LoginState.UnknownError\n\t}\n\thandleExpectedLoginError(error, noOp)\n\treturn {\n\t\terrorMessage,\n\t\tstate,\n\t}\n}\n\nexport async function showSignupDialog(urlParams: Params) {\n\tconst subscriptionParams = getSubscriptionParameters(urlParams)\n\tconst registrationDataId = getRegistrationDataIdFromParams(urlParams)\n\tconst referralCode = getReferralCodeFromParams(urlParams)\n\tconst availablePlans = getAvailablePlansFromSubscriptionParameters(subscriptionParams)\n\tawait showProgressDialog(\n\t\t\"loading_msg\",\n\t\tlocator.worker.initialized.then(async () => {\n\t\t\tconst { loadSignupWizard } = await import(\"../subscription/UpgradeSubscriptionWizard\")\n\t\t\tawait loadSignupWizard(subscriptionParams, registrationDataId, referralCode, availablePlans)\n\t\t}),\n\t).catch(\n\t\tofClass(UserError, async (e) => {\n\t\t\tconst m = await import(\"mithril\")\n\t\t\tawait showUserError(e)\n\t\t\t// redirects if there were invalid parameters, e.g. for referral codes and campaignIds\n\t\t\tm.route.set(\"/signup\")\n\t\t}),\n\t)\n}\n\nfunction getAvailablePlansFromSubscriptionParameters(params: SubscriptionParameters | null): AvailablePlanType[] {\n\t// Default to all available plans if the params do not have the needed information\n\tif (params == null || params.type == null) return AvailablePlans\n\n\ttry {\n\t\tconst type = stringToSubscriptionType(params.type)\n\t\tswitch (type) {\n\t\t\tcase SubscriptionType.Business:\n\t\t\t\treturn NewBusinessPlans\n\t\t\tcase SubscriptionType.Personal:\n\t\t\t\treturn NewPersonalPlans\n\t\t\tcase SubscriptionType.PaidPersonal:\n\t\t\t\treturn NewPaidPlans.filter((paidPlan) => NewPersonalPlans.includes(paidPlan))\n\t\t}\n\t} catch (e) {\n\t\t// If params.type is not a valid subscription type, return the default value\n\t\treturn AvailablePlans\n\t}\n}\n\nexport function stringToSubscriptionType(string: string): SubscriptionType {\n\tswitch (string.toLowerCase()) {\n\t\tcase \"business\":\n\t\t\treturn SubscriptionType.Business\n\t\tcase \"private\":\n\t\t\treturn SubscriptionType.Personal\n\t\tcase \"privatepaid\":\n\t\t\treturn SubscriptionType.PaidPersonal\n\t\tdefault:\n\t\t\tthrow new Error(`Failed to get subscription type: ${string}`)\n\t}\n}\n\nfunction getSubscriptionParameters(hashParams: Params): SubscriptionParameters | null {\n\tconst { subscription, type, interval } = hashParams\n\tconst isSubscriptionString = typeof subscription === \"string\"\n\tconst isTypeString = typeof type === \"string\"\n\tconst isIntervalString = typeof interval === \"string\"\n\n\tif (!isSubscriptionString && !isTypeString && !isIntervalString) return null\n\n\treturn {\n\t\tsubscription: isSubscriptionString ? subscription : null,\n\t\ttype: isTypeString ? type : null,\n\t\tinterval: isIntervalString ? interval : null,\n\t}\n}\n\nexport function getReferralCodeFromParams(urlParams: Params): string | null {\n\tif (typeof urlParams.ref === \"string\") {\n\t\treturn urlParams.ref\n\t}\n\treturn null\n}\n\nexport function getRegistrationDataIdFromParams(hashParams: Params): string | null {\n\tif (typeof hashParams.token === \"string\") {\n\t\treturn hashParams.token\n\t}\n\treturn null\n}\n\nasync function loadRedeemGiftCardWizard(urlHash: string): Promise<Dialog> {\n\tconst wizard = await import(\"../subscription/giftcards/RedeemGiftCardWizard\")\n\treturn wizard.loadRedeemGiftCardWizard(urlHash)\n}\n\nexport async function showGiftCardDialog(urlHash: string) {\n\tshowProgressDialog(\"loading_msg\", loadRedeemGiftCardWizard(urlHash))\n\t\t.then((dialog) => dialog.show())\n\t\t.catch((e) => {\n\t\t\tif (e instanceof NotAuthorizedError || e instanceof NotFoundError) {\n\t\t\t\tthrow new UserError(\"invalidGiftCard_msg\")\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t})\n\t\t.catch(ofClass(UserError, showUserError))\n}\n\nexport async function showRecoverDialog(mailAddress: string, resetAction: ResetAction) {\n\tconst dialog = await import(\"../login/recover/RecoverLoginDialog\")\n\tdialog.show(mailAddress, resetAction)\n}\n\nexport type ExternalUserKeyDeriver = {\n\tkdfType: KdfType\n\tsalt: Uint8Array\n}\n"]}