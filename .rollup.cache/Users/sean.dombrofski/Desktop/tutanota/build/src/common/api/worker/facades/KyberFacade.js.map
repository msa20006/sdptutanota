{"version":3,"file":"KyberFacade.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/facades/KyberFacade.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAA;AAElD,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAA;AACxD,OAAO,EACN,gBAAgB,EAChB,gBAAgB,EAChB,oBAAoB,EACpB,6BAA6B,EAM7B,MAAM,GACN,MAAM,wBAAwB,CAAA;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AAEtC,kBAAkB,EAAE,CAAA;AA2BpB;;GAEG;AACH,MAAM,OAAO,eAAe;IACE;IAA7B,YAA6B,QAAwB;QAAxB,aAAQ,GAAR,QAAQ,CAAgB;IAAG,CAAC;IAEzD,oBAAoB;IACZ,MAAM,GAA8B,IAAI,UAAU,CAAC,KAAK,IAAI,EAAE;QACrE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,IAAI,CAAC,QAAQ,CAAA;QACrB,CAAC;QAED,OAAO,MAAM,QAAQ,EAAE,CAAA;IACxB,CAAC,CAAC,CAAA;IAEF,KAAK,CAAC,eAAe;QACpB,OAAO,oBAAoB,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,CAAA;IAClE,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,SAAyB;QAC1C,OAAO,gBAAgB,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,MAAM,CAAC,CAAA;IACzE,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,UAA2B,EAAE,UAAsB;QACpE,OAAO,gBAAgB,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,UAAU,CAAC,CAAA;IAC9E,CAAC;CACD;AAED;;GAEG;AACH,MAAM,OAAO,iBAAiB;IACA;IAA7B,YAA6B,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;IAAG,CAAC;IAEvE,eAAe;QACd,OAAO,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,MAAM,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,CAAC,CAAA;IAC9G,CAAC;IAED,WAAW,CAAC,SAAyB;QACpC,OAAO,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,SAAS,EAAE,MAAM,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,CAAC,CAAA;IACrH,CAAC;IAED,WAAW,CAAC,UAA2B,EAAE,UAAsB;QAC9D,OAAO,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAA;IACxE,CAAC;CACD","sourcesContent":["import { LazyLoaded } from \"@tutao/tutanota-utils\"\nimport { NativeCryptoFacade } from \"../../../native/common/generatedipc/NativeCryptoFacade.js\"\nimport { assertWorkerOrNode } from \"../../common/Env.js\"\nimport {\n\tdecapsulateKyber,\n\tencapsulateKyber,\n\tgenerateKeyPairKyber,\n\tML_KEM_RAND_AMOUNT_OF_ENTROPY,\n\tKyberEncapsulation,\n\tKyberKeyPair,\n\tKyberPrivateKey,\n\tKyberPublicKey,\n\tLibOQSExports,\n\trandom,\n} from \"@tutao/tutanota-crypto\"\nimport { loadWasm } from \"liboqs.wasm\"\n\nassertWorkerOrNode()\n\n/**\n * Abstract interface for the Liboqs crypto system.\n */\nexport interface KyberFacade {\n\t/**\n\t * Generate a key new random key pair\n\t */\n\tgenerateKeypair(): Promise<KyberKeyPair>\n\n\t/**\n\t *\n\t * @param publicKey the public key to encapsulate the secret with\n\t * @returns the ciphertext and the shared secret\n\t */\n\tencapsulate(publicKey: KyberPublicKey): Promise<KyberEncapsulation>\n\n\t/**\n\t *\n\t * @param privateKey the corresponding private key to the public key used to encapsulate the cipher text\n\t * @param ciphertext the encapsulated ciphertext\n\t * @returns the shared secret\n\t */\n\tdecapsulate(privateKey: KyberPrivateKey, ciphertext: Uint8Array): Promise<Uint8Array>\n}\n\n/**\n * WebAssembly implementation of Liboqs\n */\nexport class WASMKyberFacade implements KyberFacade {\n\tconstructor(private readonly testWASM?: LibOQSExports) {}\n\n\t// loads liboqs WASM\n\tprivate liboqs: LazyLoaded<LibOQSExports> = new LazyLoaded(async () => {\n\t\tif (this.testWASM) {\n\t\t\treturn this.testWASM\n\t\t}\n\n\t\treturn await loadWasm()\n\t})\n\n\tasync generateKeypair(): Promise<KyberKeyPair> {\n\t\treturn generateKeyPairKyber(await this.liboqs.getAsync(), random)\n\t}\n\n\tasync encapsulate(publicKey: KyberPublicKey): Promise<KyberEncapsulation> {\n\t\treturn encapsulateKyber(await this.liboqs.getAsync(), publicKey, random)\n\t}\n\n\tasync decapsulate(privateKey: KyberPrivateKey, ciphertext: Uint8Array): Promise<Uint8Array> {\n\t\treturn decapsulateKyber(await this.liboqs.getAsync(), privateKey, ciphertext)\n\t}\n}\n\n/**\n * Native implementation of Liboqs\n */\nexport class NativeKyberFacade implements KyberFacade {\n\tconstructor(private readonly nativeCryptoFacade: NativeCryptoFacade) {}\n\n\tgenerateKeypair(): Promise<KyberKeyPair> {\n\t\treturn this.nativeCryptoFacade.generateKyberKeypair(random.generateRandomData(ML_KEM_RAND_AMOUNT_OF_ENTROPY))\n\t}\n\n\tencapsulate(publicKey: KyberPublicKey): Promise<KyberEncapsulation> {\n\t\treturn this.nativeCryptoFacade.kyberEncapsulate(publicKey, random.generateRandomData(ML_KEM_RAND_AMOUNT_OF_ENTROPY))\n\t}\n\n\tdecapsulate(privateKey: KyberPrivateKey, ciphertext: Uint8Array): Promise<Uint8Array> {\n\t\treturn this.nativeCryptoFacade.kyberDecapsulate(privateKey, ciphertext)\n\t}\n}\n"]}