{"version":3,"file":"WebauthnNativeBridge.js","sourceRoot":"","sources":["../../../../../src/common/native/main/WebauthnNativeBridge.ts"],"names":[],"mappings":"AAAA,OAAO,EAAY,iBAAiB,EAAE,OAAO,EAAE,MAAM,iDAAiD,CAAA;AACtG,OAAO,EAAE,kBAAkB,EAAE,MAAM,8BAA8B,CAAA;AACjE,OAAO,EAAE,aAAa,EAAE,KAAK,EAAkB,MAAM,uBAAuB,CAAA;AAC5E,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAA;AAMpE;;GAEG;AACH,MAAM,OAAO,oBAAoB;IACf,UAAU,CAA2D;IACrE,IAAI,GAAoC,KAAK,EAAE,CAAA;IAEhE;QACC,MAAM,SAAS,GAAG,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAA;QAC1D,MAAM,SAAS,GAAmE,IAAI,sBAAsB,CAAC,SAAS,CAAC,CAAA;QACvH,MAAM,IAAI,GAAG,IAAI,CAAA;QACjB,MAAM,QAAQ,GAAiC;YAC9C,MAAM,EAAE,kBAAkB,CAAC;gBAC1B,cAAc;oBACb,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAA;gBACzB,CAAC;aACD,CAAC;SACF,CAAA;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,iBAAiB,CAAyC,SAAS,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAA;IACtH,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,IAAqB;QAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QACvB,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAA;IAC5D,CAAC;CACD","sourcesContent":["import { Commands, MessageDispatcher, Request } from \"../../api/common/threading/MessageDispatcher.js\"\nimport { exposeLocalDelayed } from \"../../api/common/WorkerProxy\"\nimport { assertNotNull, defer, DeferredObject } from \"@tutao/tutanota-utils\"\nimport { DesktopNativeTransport } from \"./DesktopNativeTransport.js\"\nimport { BrowserWebauthn } from \"../../misc/2fa/webauthn/BrowserWebauthn.js\"\n\nexport type WebToNativeRequest = \"init\"\nexport type NativeToWebRequest = \"facade\"\n\n/**\n * this is hosted on the server, but will only be used inside a WebDialog for the desktop client.\n */\nexport class WebauthnNativeBridge {\n\tprivate readonly dispatcher: MessageDispatcher<WebToNativeRequest, NativeToWebRequest>\n\tprivate readonly impl: DeferredObject<BrowserWebauthn> = defer()\n\n\tconstructor() {\n\t\tconst nativeApp = assertNotNull(window.nativeAppWebDialog)\n\t\tconst transport: DesktopNativeTransport<WebToNativeRequest, NativeToWebRequest> = new DesktopNativeTransport(nativeApp)\n\t\tconst that = this\n\t\tconst commands: Commands<NativeToWebRequest> = {\n\t\t\tfacade: exposeLocalDelayed({\n\t\t\t\tWebAuthnFacade(): Promise<BrowserWebauthn> {\n\t\t\t\t\treturn that.impl.promise\n\t\t\t\t},\n\t\t\t}),\n\t\t}\n\t\tthis.dispatcher = new MessageDispatcher<WebToNativeRequest, NativeToWebRequest>(transport, commands, \"webauthn-node\")\n\t}\n\n\tasync init(impl: BrowserWebauthn): Promise<void> {\n\t\tthis.impl.resolve(impl)\n\t\treturn this.dispatcher.postRequest(new Request(\"init\", []))\n\t}\n}\n"]}