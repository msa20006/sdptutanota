{"version":3,"file":"CommonCalendarUtils.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/utils/CommonCalendarUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { DAY_IN_MILLIS } from \"@tutao/tutanota-utils\"\nimport type { CalendarEvent } from \"../../entities/tutanota/TypeRefs.js\"\nimport { EncryptedMailAddress } from \"../../entities/tutanota/TypeRefs.js\"\nimport { stringToCustomId } from \"./EntityUtils\"\nimport type { AlarmInterval } from \"../../../calendar/date/CalendarUtils.js\"\n\nexport type CalendarEventTimes = Pick<CalendarEvent, \"startTime\" | \"endTime\">\n\n/**\n * the time in ms that element ids for calendar events and alarms  get randomized by\n */\nexport const DAYS_SHIFTED_MS = 15 * DAY_IN_MILLIS\n\n/*\n * convenience wrapper for isAllDayEventByTimes\n */\nexport function isAllDayEvent({ startTime, endTime }: CalendarEventTimes): boolean {\n\treturn isAllDayEventByTimes(startTime, endTime)\n}\n\n/**\n * determine if an event with the given start and end times would be an all-day event\n */\nexport function isAllDayEventByTimes(startTime: Date, endTime: Date): boolean {\n\treturn (\n\t\tstartTime.getUTCHours() === 0 &&\n\t\tstartTime.getUTCMinutes() === 0 &&\n\t\tstartTime.getUTCSeconds() === 0 &&\n\t\tendTime.getUTCHours() === 0 &&\n\t\tendTime.getUTCMinutes() === 0 &&\n\t\tendTime.getUTCSeconds() === 0\n\t)\n}\n\n/**\n * @param localDate\n * @returns {Date} a Date with a unix timestamp corresponding to 00:00 UTC for localDate's Day in the local time zone\n */\nexport function getAllDayDateUTC(localDate: Date): Date {\n\treturn new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), 0, 0, 0, 0))\n}\n\n/**\n * @param utcDate a Date with a unix timestamp corresponding to 00:00 UTC for a given Day\n * @returns {Date} a Date with a unix timestamp corresponding to 00:00 for that day in the local time zone\n */\nexport function getAllDayDateLocal(utcDate: Date): Date {\n\treturn new Date(utcDate.getUTCFullYear(), utcDate.getUTCMonth(), utcDate.getUTCDate())\n}\n\n/**\n * generate a semi-randomized element id for a calendar event or an alarm\n * @param timestamp the start time of the event or the creation time of the alarm\n */\nexport function generateEventElementId(timestamp: number): string {\n\t// the id is based on either the event start time or the alarm creation time\n\t// we add a random shift between -DAYS_SHIFTED_MS and +DAYS_SHIFTED_MS to the event\n\t// id to prevent the server from knowing the exact time but still being able to\n\t// approximately sort them.\n\tconst randomDay = Math.floor(Math.random() * DAYS_SHIFTED_MS) * 2\n\treturn createEventElementId(timestamp, randomDay - DAYS_SHIFTED_MS)\n}\n\n/**\n * USE THIS ONLY WITH LOCAL EVENTS\n * generate an element id for a local calendar event\n * @param timestamp the start time of the event or the creation time of the alarm\n * @param identifier identifier to differentiate between events occurring at same time\n */\nexport function generateLocalEventElementId(timestamp: number, identifier: string): string {\n\t// We don't have to shift the days because the event never leaves the client\n\treturn stringToCustomId(`${timestamp}${identifier}`)\n}\n\n/**\n * https://262.ecma-international.org/5.1/#sec-15.9.1.1\n * * ECMAScript Number values can represent all integers from â€“9,007,199,254,740,992 to 9,007,199,254,740,992\n * * The actual range of times supported by ECMAScript Date objects is slightly smaller: a range of +-8,640,000,000,000,000 milliseconds\n * -> this makes the element Id a string of between 1 and 17 number characters (the shiftDays are negligible)\n *\n * exported for testing\n * @param timestamp\n * @param shiftDays\n */\nexport function createEventElementId(timestamp: number, shiftDays: number): string {\n\treturn stringToCustomId(String(timestamp + shiftDays))\n}\n\n/**\n * the maximum id an event with a given start time could have based on its\n * randomization.\n * @param timestamp\n */\nexport function geEventElementMaxId(timestamp: number): string {\n\treturn createEventElementId(timestamp, DAYS_SHIFTED_MS)\n}\n\n/**\n * the minimum an event with a given start time could have based on its\n * randomization.\n * @param timestamp\n */\nexport function getEventElementMinId(timestamp: number): string {\n\treturn createEventElementId(timestamp, -DAYS_SHIFTED_MS)\n}\n\n/**\n * return a cleaned and comparable version of a mail address without leading/trailing whitespace or uppercase characters.\n */\nexport function cleanMailAddress(address: string): string {\n\treturn address.trim().toLowerCase()\n}\n\n/**\n * get the first attendee from the list of attendees/guests that corresponds to one of the given recipient addresses, if there is one\n */\nexport function findAttendeeInAddresses<T extends { address: EncryptedMailAddress }>(attendees: ReadonlyArray<T>, addresses: ReadonlyArray<string>): T | null {\n\t// the filters are necessary because of #5147\n\t// we may get passed addresses and attendees that could not be decrypted and don't have addresses.\n\tconst lowerCaseAddresses = addresses.filter(Boolean).map(cleanMailAddress)\n\treturn attendees.find((a) => a.address.address != null && lowerCaseAddresses.includes(cleanMailAddress(a.address.address))) ?? null\n}\n\n/**\n * find the first of a list of recipients that have the given address assigned\n */\nexport function findRecipientWithAddress<T extends { address: string }>(recipients: ReadonlyArray<T>, address: string): T | null {\n\tconst cleanAddress = cleanMailAddress(address)\n\treturn recipients.find((r) => cleanMailAddress(r.address) === cleanAddress) ?? null\n}\n\n/**\n * get a date with the time set to the start of the next full half hour from the time this is called at\n * */\nexport function getNextHalfHour(): Date {\n\tlet date: Date = new Date()\n\n\treturn setNextHalfHour(date)\n}\n\n/**\n * set the given date to the start of the next full half hour from the time this is called at\n * */\nexport function setNextHalfHour(date: Date): Date {\n\tconst timeNow = new Date()\n\n\tif (timeNow.getMinutes() > 30) {\n\t\tdate.setHours(timeNow.getHours() + 1, 0)\n\t} else {\n\t\tdate.setHours(timeNow.getHours(), 30)\n\t}\n\n\treturn date\n}\n\n/**\n * get a partial calendar event with start time set to the passed value\n * (year, day, hours and minutes. seconds and milliseconds are zeroed.)\n * and an end time 30 minutes later than that.\n * @param startDate the start time to use for the event (defaults to the next full half hour)\n */\nexport function getEventWithDefaultTimes(startDate: Date = getNextHalfHour()): CalendarEventTimes {\n\tlet endDate = new Date(startDate)\n\treturn {\n\t\tstartTime: new Date(startDate),\n\t\tendTime: new Date(endDate.setMinutes(endDate.getMinutes() + 30)),\n\t}\n}\n\n/**\n * Converts runtime representation of an alarm into a db one.\n */\nexport function serializeAlarmInterval(interval: AlarmInterval): string {\n\treturn `${interval.value}${interval.unit}`\n}\n\nexport enum CalendarViewType {\n\tDAY = \"day\",\n\tWEEK = \"week\",\n\tMONTH = \"month\",\n\tAGENDA = \"agenda\",\n}\n"]}