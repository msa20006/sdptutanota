{"version":3,"file":"ShareFacade.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/facades/lazy/ShareFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CryptoFacade } from \"../../crypto/CryptoFacade.js\"\nimport type { GroupInfo, ReceivedGroupInvitation } from \"../../../entities/sys/TypeRefs.js\"\nimport { GroupInfoTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport type { ShareCapability } from \"../../../common/TutanotaConstants.js\"\nimport type { GroupInvitationPostData, GroupInvitationPostReturn, InternalRecipientKeyData } from \"../../../entities/tutanota/TypeRefs.js\"\nimport {\n\tcreateGroupInvitationDeleteData,\n\tcreateGroupInvitationPostData,\n\tcreateGroupInvitationPutData,\n\tcreateSharedGroupData,\n\tInternalRecipientKeyDataTypeRef,\n} from \"../../../entities/tutanota/TypeRefs.js\"\nimport { isSameTypeRef, neverNull } from \"@tutao/tutanota-utils\"\nimport { RecipientsNotFoundError } from \"../../../common/error/RecipientsNotFoundError.js\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport { aes256RandomKey, bitArrayToUint8Array, encryptKey, uint8ArrayToBitArray } from \"@tutao/tutanota-crypto\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { GroupInvitationService } from \"../../../entities/tutanota/Services.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { EntityClient } from \"../../../common/EntityClient.js\"\nimport { KeyLoaderFacade, parseKeyVersion } from \"../KeyLoaderFacade.js\"\nimport { encryptBytes, encryptKeyWithVersionedKey, encryptString, VersionedKey } from \"../../crypto/CryptoWrapper.js\"\n\nassertWorkerOrNode()\n\nexport class ShareFacade {\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly cryptoFacade: CryptoFacade,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t) {}\n\n\tasync sendGroupInvitation(\n\t\tsharedGroupInfo: GroupInfo,\n\t\trecipientMailAddresses: Array<string>,\n\t\tshareCapability: ShareCapability,\n\t): Promise<GroupInvitationPostReturn> {\n\t\tconst sharedGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(sharedGroupInfo.group)\n\t\tconst invitationData = await this.prepareGroupInvitation(sharedGroupKey, sharedGroupInfo, recipientMailAddresses, shareCapability)\n\t\treturn this.sendGroupInvitationRequest(invitationData)\n\t}\n\n\tasync sendGroupInvitationRequest(invitationData: GroupInvitationPostData): Promise<GroupInvitationPostReturn> {\n\t\treturn this.serviceExecutor.post(GroupInvitationService, invitationData)\n\t}\n\n\tasync prepareGroupInvitation(\n\t\tsharedGroupKey: VersionedKey,\n\t\tsharedGroupInfo: GroupInfo,\n\t\trecipientMailAddresses: Array<string>,\n\t\tshareCapability: ShareCapability,\n\t): Promise<GroupInvitationPostData> {\n\t\tconst userGroupInfo = await this.entityClient.load(GroupInfoTypeRef, this.userFacade.getLoggedInUser().userGroup.groupInfo)\n\t\tconst userGroupInfoSessionKey = await this.cryptoFacade.resolveSessionKeyForInstance(userGroupInfo)\n\t\tconst sharedGroupInfoSessionKey = await this.cryptoFacade.resolveSessionKeyForInstance(sharedGroupInfo)\n\t\tconst bucketKey = aes256RandomKey()\n\t\tconst invitationSessionKey = aes256RandomKey()\n\t\tconst sharedGroupEncInviterGroupInfoKey = encryptKeyWithVersionedKey(sharedGroupKey, neverNull(userGroupInfoSessionKey))\n\t\tconst sharedGroupEncSharedGroupInfoKey = encryptKeyWithVersionedKey(sharedGroupKey, neverNull(sharedGroupInfoSessionKey))\n\t\tconst sharedGroupData = createSharedGroupData({\n\t\t\tsessionEncInviterName: encryptString(invitationSessionKey, userGroupInfo.name),\n\t\t\tsessionEncSharedGroupKey: encryptBytes(invitationSessionKey, bitArrayToUint8Array(sharedGroupKey.object)),\n\t\t\tsessionEncSharedGroupName: encryptString(invitationSessionKey, sharedGroupInfo.name),\n\t\t\tbucketEncInvitationSessionKey: encryptKey(bucketKey, invitationSessionKey),\n\t\t\tcapability: shareCapability,\n\t\t\tsharedGroup: sharedGroupInfo.group,\n\t\t\tsharedGroupEncInviterGroupInfoKey: sharedGroupEncInviterGroupInfoKey.key,\n\t\t\tsharedGroupEncSharedGroupInfoKey: sharedGroupEncSharedGroupInfoKey.key,\n\t\t\tsharedGroupKeyVersion: String(sharedGroupKey.version),\n\t\t})\n\t\tconst invitationData = createGroupInvitationPostData({\n\t\t\tsharedGroupData,\n\t\t\tinternalKeyData: [],\n\t\t})\n\t\tconst notFoundRecipients: Array<string> = []\n\n\t\tfor (let mailAddress of recipientMailAddresses) {\n\t\t\tconst keyData = await this.cryptoFacade.encryptBucketKeyForInternalRecipient(userGroupInfo.group, bucketKey, mailAddress, notFoundRecipients)\n\t\t\tif (keyData && isSameTypeRef(keyData._type, InternalRecipientKeyDataTypeRef)) {\n\t\t\t\tinvitationData.internalKeyData.push(keyData as InternalRecipientKeyData)\n\t\t\t}\n\t\t}\n\n\t\tif (notFoundRecipients.length > 0) {\n\t\t\tthrow new RecipientsNotFoundError(notFoundRecipients.join(\"\\n\"))\n\t\t}\n\t\treturn invitationData\n\t}\n\n\tasync acceptGroupInvitation(invitation: ReceivedGroupInvitation): Promise<void> {\n\t\tconst userGroupInfo = await this.entityClient.load(GroupInfoTypeRef, this.userFacade.getLoggedInUser().userGroup.groupInfo)\n\t\tconst userGroupInfoSessionKey = await this.cryptoFacade.resolveSessionKeyForInstance(userGroupInfo)\n\t\tconst sharedGroupKey = { object: uint8ArrayToBitArray(invitation.sharedGroupKey), version: parseKeyVersion(invitation.sharedGroupKeyVersion) }\n\t\tconst userGroupKey = this.userFacade.getCurrentUserGroupKey()\n\t\tconst userGroupEncGroupKey = encryptKeyWithVersionedKey(userGroupKey, sharedGroupKey.object)\n\t\tconst sharedGroupEncInviteeGroupInfoKey = encryptKeyWithVersionedKey(sharedGroupKey, neverNull(userGroupInfoSessionKey))\n\t\tconst serviceData = createGroupInvitationPutData({\n\t\t\treceivedInvitation: invitation._id,\n\t\t\tuserGroupEncGroupKey: userGroupEncGroupKey.key,\n\t\t\tsharedGroupEncInviteeGroupInfoKey: sharedGroupEncInviteeGroupInfoKey.key,\n\t\t\tuserGroupKeyVersion: userGroupEncGroupKey.encryptingKeyVersion.toString(),\n\t\t\tsharedGroupKeyVersion: sharedGroupEncInviteeGroupInfoKey.encryptingKeyVersion.toString(),\n\t\t})\n\t\tawait this.serviceExecutor.put(GroupInvitationService, serviceData)\n\t}\n\n\tasync rejectOrCancelGroupInvitation(receivedGroupInvitationId: IdTuple): Promise<void> {\n\t\tconst serviceData = createGroupInvitationDeleteData({\n\t\t\treceivedInvitation: receivedGroupInvitationId,\n\t\t})\n\t\tawait this.serviceExecutor.delete(GroupInvitationService, serviceData)\n\t}\n}\n"]}