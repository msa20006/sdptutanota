{"version":3,"file":"ListElementListModel.js","sourceRoot":"","sources":["../../../../src/common/misc/ListElementListModel.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,SAAS,EAAmB,MAAM,aAAa,CAAA;AACpE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAe,MAAM,iCAAiC,CAAA;AAuBrF;;;;GAIG;AACH,MAAM,OAAO,oBAAoB;IACf,SAAS,CAA4B;IACrC,MAAM,CAAyC;IAEhE,IAAI,KAAK;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAA;IAC5B,CAAC;IAED,IAAI,sBAAsB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAA;IAC7C,CAAC;IAED,IAAI,WAAW;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAA;IAClC,CAAC;IAED,YAAY,MAA+C;QAC1D,MAAM,aAAa,GAAG;YACrB,GAAG,MAAM;YACT,QAAQ;YACR,SAAS,EAAE,YAAY;SACvB,CAAA;QAED,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAkB,aAAa,CAAC,CAAA;QAC9D,IAAI,CAAC,MAAM,GAAG,aAAa,CAAA;IAC5B,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,MAAU,EAAE,SAAa,EAAE,SAAwB;QAC5E,IAAI,SAAS,mCAAyB,IAAI,SAAS,mCAAyB,EAAE,CAAC;YAC9E,gDAAgD;YAChD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,SAAS,CAAC,CAAA;YAC9D,IAAI,CAAC,MAAM,EAAE,CAAC;gBACb,OAAM;YACP,CAAC;YAED,+BAA+B;YAC/B,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE;gBACnC,IAAI,SAAS,mCAAyB,EAAE,CAAC;oBACxC,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC;wBAC1C,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAA;oBACxC,CAAC;gBACF,CAAC;qBAAM,IAAI,SAAS,mCAAyB,EAAE,CAAC;oBAC/C,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAA;gBACxC,CAAC;YACF,CAAC,CAAC,CAAA;QACH,CAAC;aAAM,IAAI,SAAS,mCAAyB,EAAE,CAAC;YAC/C,qCAAqC;YACrC,MAAM,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAA;QACjD,CAAC;IACF,CAAC;IAED,KAAK,CAAC,aAAa,CAClB,MAAU,EACV,UAAyB,EACzB,SAAsC,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC;QAEpF,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;IACxD,CAAC;IAED,cAAc,CAAC,MAAU;QACxB,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;IAC7C,CAAC;IAED,gBAAgB;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAA;IACzC,CAAC;IAED,WAAW;QACV,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAA;IACpC,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAA;IACvC,CAAC;IAED,gBAAgB;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAA;IACzC,CAAC;IAED,oBAAoB;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE,CAAA;IAC7C,CAAC;IAED,IAAI;QACH,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA;IAC7B,CAAC;IAED,KAAK,CAAC,QAAQ;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAA;IACjC,CAAC;IAED,KAAK,CAAC,OAAO;QACZ,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAA;IAChC,CAAC;IAED,KAAK,CAAC,YAAY;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAA;IACrC,CAAC;IAED,iBAAiB,CAAC,IAAiB;QAClC,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;IAC9C,CAAC;IAED,0BAA0B,CAAC,IAAiB,EAAE,gCAA0C;QACvF,OAAO,IAAI,CAAC,SAAS,CAAC,0BAA0B,CAAC,IAAI,EAAE,gCAAgC,CAAC,CAAA;IACzF,CAAC;IAED,0BAA0B,CAAC,IAAiB;QAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAA;IACvD,CAAC;IAED,kBAAkB,CAAC,IAAiB;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAA;IAC/C,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAA;IACvC,CAAC;IAED,UAAU;QACT,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAA;IACnC,CAAC;IAED,SAAS;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAA;IAClC,CAAC;IAED,cAAc,CAAC,WAAoB;QAClC,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;IAClD,CAAC;IAED,UAAU,CAAC,WAAoB;QAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,CAAA;IAC9C,CAAC;IAED,aAAa;QACZ,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAA;IACtC,CAAC;IAED,KAAK,CAAC,WAAW;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAA;IACpC,CAAC;IAED,aAAa;QACZ,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAA;IACtC,CAAC;IAED,SAAS,CAAC,MAAsC;QAC/C,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;IACxC,CAAC;IAED,kBAAkB;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAA;IAC3C,CAAC;IAED,kBAAkB;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAA;IAC3C,CAAC;IAED,mBAAmB,CAAC,MAAwB;QAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAA;IAClD,CAAC;CACD","sourcesContent":["import { ListFilter, ListModel, ListModelConfig } from \"./ListModel\"\nimport { getElementId, isSameId, ListElement } from \"../api/common/utils/EntityUtils\"\nimport { OperationType } from \"../api/common/TutanotaConstants\"\nimport Stream from \"mithril/stream\"\nimport { ListLoadingState, ListState } from \"../gui/base/List\"\n\n/**\n * Specifies methods for fetching and sorting list elements for a ListElementListModel.\n *\n * Unlike ListModelConfig, isSameId and getItemId are provided automatically. However, an additional method `loadSingle`\n * is needed.\n */\nexport interface ListElementListModelConfig<ElementType> {\n\t/**\n\t * Returns null if the given item could not be loaded\n\t */\n\tloadSingle(listId: Id, itemId: Id): Promise<ElementType | null>\n\n\t// See ListModelConfig\n\tfetch: ListModelConfig<ElementType, Id>[\"fetch\"]\n\tsortCompare: ListModelConfig<ElementType, Id>[\"sortCompare\"]\n\tautoSelectBehavior: ListModelConfig<ElementType, Id>[\"autoSelectBehavior\"]\n}\n\n/**\n * List model that provides ListElement functionality.\n *\n * Internally wraps around a ListModel<ElementType, Id>.\n */\nexport class ListElementListModel<ElementType extends ListElement> {\n\tprivate readonly listModel: ListModel<ElementType, Id>\n\tprivate readonly config: ListElementListModelConfig<ElementType>\n\n\tget state(): ListState<ElementType> {\n\t\treturn this.listModel.state\n\t}\n\n\tget differentItemsSelected(): Stream<ReadonlySet<ElementType>> {\n\t\treturn this.listModel.differentItemsSelected\n\t}\n\n\tget stateStream(): Stream<ListState<ElementType>> {\n\t\treturn this.listModel.stateStream\n\t}\n\n\tconstructor(config: ListElementListModelConfig<ElementType>) {\n\t\tconst theBestConfig = {\n\t\t\t...config,\n\t\t\tisSameId,\n\t\t\tgetItemId: getElementId,\n\t\t}\n\n\t\tthis.listModel = new ListModel<ElementType, Id>(theBestConfig)\n\t\tthis.config = theBestConfig\n\t}\n\n\tasync entityEventReceived(listId: Id, elementId: Id, operation: OperationType): Promise<void> {\n\t\tif (operation === OperationType.CREATE || operation === OperationType.UPDATE) {\n\t\t\t// load the element without range checks for now\n\t\t\tconst entity = await this.config.loadSingle(listId, elementId)\n\t\t\tif (!entity) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Wait for any pending loading\n\t\t\treturn this.listModel.waitLoad(() => {\n\t\t\t\tif (operation === OperationType.CREATE) {\n\t\t\t\t\tif (this.listModel.canInsertItem(entity)) {\n\t\t\t\t\t\tthis.listModel.insertLoadedItem(entity)\n\t\t\t\t\t}\n\t\t\t\t} else if (operation === OperationType.UPDATE) {\n\t\t\t\t\tthis.listModel.updateLoadedItem(entity)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (operation === OperationType.DELETE) {\n\t\t\t// await this.swipeHandler?.animating\n\t\t\tawait this.listModel.deleteLoadedItem(elementId)\n\t\t}\n\t}\n\n\tasync loadAndSelect(\n\t\titemId: Id,\n\t\tshouldStop: () => boolean,\n\t\tfinder: (a: ElementType) => boolean = (item) => isSameId(getElementId(item), itemId),\n\t): Promise<ElementType | null> {\n\t\treturn this.listModel.loadAndSelect(finder, shouldStop)\n\t}\n\n\tisItemSelected(itemId: Id): boolean {\n\t\treturn this.listModel.isItemSelected(itemId)\n\t}\n\n\tenterMultiselect() {\n\t\treturn this.listModel.enterMultiselect()\n\t}\n\n\tstopLoading(): void {\n\t\treturn this.listModel.stopLoading()\n\t}\n\n\tisEmptyAndDone(): boolean {\n\t\treturn this.listModel.isEmptyAndDone()\n\t}\n\n\tisSelectionEmpty(): boolean {\n\t\treturn this.listModel.isSelectionEmpty()\n\t}\n\n\tgetUnfilteredAsArray(): Array<ElementType> {\n\t\treturn this.listModel.getUnfilteredAsArray()\n\t}\n\n\tsort() {\n\t\treturn this.listModel.sort()\n\t}\n\n\tasync loadMore() {\n\t\treturn this.listModel.loadMore()\n\t}\n\n\tasync loadAll() {\n\t\treturn this.listModel.loadAll()\n\t}\n\n\tasync retryLoading() {\n\t\treturn this.listModel.retryLoading()\n\t}\n\n\tonSingleSelection(item: ElementType) {\n\t\treturn this.listModel.onSingleSelection(item)\n\t}\n\n\tonSingleInclusiveSelection(item: ElementType, clearSelectionOnMultiSelectStart?: boolean) {\n\t\treturn this.listModel.onSingleInclusiveSelection(item, clearSelectionOnMultiSelectStart)\n\t}\n\n\tonSingleExclusiveSelection(item: ElementType) {\n\t\treturn this.listModel.onSingleExclusiveSelection(item)\n\t}\n\n\tselectRangeTowards(item: ElementType) {\n\t\treturn this.listModel.selectRangeTowards(item)\n\t}\n\n\tareAllSelected(): boolean {\n\t\treturn this.listModel.areAllSelected()\n\t}\n\n\tselectNone() {\n\t\treturn this.listModel.selectNone()\n\t}\n\n\tselectAll() {\n\t\treturn this.listModel.selectAll()\n\t}\n\n\tselectPrevious(multiselect: boolean) {\n\t\treturn this.listModel.selectPrevious(multiselect)\n\t}\n\n\tselectNext(multiselect: boolean) {\n\t\treturn this.listModel.selectNext(multiselect)\n\t}\n\n\tcancelLoadAll() {\n\t\treturn this.listModel.cancelLoadAll()\n\t}\n\n\tasync loadInitial() {\n\t\treturn this.listModel.loadInitial()\n\t}\n\n\treapplyFilter() {\n\t\treturn this.listModel.reapplyFilter()\n\t}\n\n\tsetFilter(filter: ListFilter<ElementType> | null) {\n\t\treturn this.listModel.setFilter(filter)\n\t}\n\n\tgetSelectedAsArray(): Array<ElementType> {\n\t\treturn this.listModel.getSelectedAsArray()\n\t}\n\n\tisLoadedCompletely(): boolean {\n\t\treturn this.listModel.isLoadedCompletely()\n\t}\n\n\tupdateLoadingStatus(status: ListLoadingState) {\n\t\treturn this.listModel.updateLoadingStatus(status)\n\t}\n}\n"]}