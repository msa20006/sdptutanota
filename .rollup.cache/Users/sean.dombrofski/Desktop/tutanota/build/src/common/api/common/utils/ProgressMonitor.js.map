{"version":3,"file":"ProgressMonitor.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/utils/ProgressMonitor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAA;AAgBrD;;;;GAIG;AACH,MAAM,OAAO,eAAe;IAGN;IAAoC;IAFzD,aAAa,CAAQ;IAErB,YAAqB,SAAiB,EAAmB,OAAyB;QAA7D,cAAS,GAAT,SAAS,CAAQ;QAAmB,YAAO,GAAP,OAAO,CAAkB;QACjF,IAAI,CAAC,aAAa,GAAG,CAAC,CAAA;IACvB,CAAC;IAED,QAAQ,CAAC,MAAc;QACtB,IAAI,CAAC,aAAa,IAAI,MAAM,CAAA;QAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAA;IAChC,CAAC;IAED,aAAa,CAAC,WAAmB;QAChC,IAAI,CAAC,aAAa,GAAG,WAAW,CAAA;QAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAA;IAChC,CAAC;IAED,UAAU;QACT,MAAM,MAAM,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,SAAS,CAAA;QAC1D,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;IAC7B,CAAC;IAED,SAAS;QACR,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAA;QACnC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAClB,CAAC;CACD;AAED,MAAM,OAAO,mBAAmB;IAC/B,QAAQ,CAAC,MAAc,IAAG,CAAC;IAE3B,aAAa,CAAC,WAAmB,IAAG,CAAC;IAErC,SAAS,KAAI,CAAC;CACd;AAED,MAAM,UAAU,0BAA0B,CAAC,OAAwB,EAAE,SAAiB;IACrF,IAAI,SAAS,GAAG,CAAC;QAAE,OAAO,IAAI,mBAAmB,EAAE,CAAA;IACnD,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAA;IACrD,OAAO,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAA;AACjD,CAAC","sourcesContent":["import type { ProgressTracker } from \"../../main/ProgressTracker\"\nimport { assertNotNull } from \"@tutao/tutanota-utils\"\n\nexport type ProgressMonitorId = number\nexport type ProgressListener = (percentageCompleted: number) => unknown\n\nexport interface IProgressMonitor {\n\t/**\n\t * @param amount of work completed in current step\n\t */\n\tworkDone(amount: number): void\n\n\ttotalWorkDone(totalAmount: number): void\n\n\tcompleted(): void\n}\n\n/**\n * Class to calculate percentage of total work and report it back.\n * Call {@code workDone() or @code totalWorkDone()} for each work step and {@code completed()}\n * when you are done.\n */\nexport class ProgressMonitor implements IProgressMonitor {\n\tworkCompleted: number\n\n\tconstructor(readonly totalWork: number, private readonly updater: ProgressListener) {\n\t\tthis.workCompleted = 0\n\t}\n\n\tworkDone(amount: number) {\n\t\tthis.workCompleted += amount\n\t\tthis.updater(this.percentage())\n\t}\n\n\ttotalWorkDone(totalAmount: number) {\n\t\tthis.workCompleted = totalAmount\n\t\tthis.updater(this.percentage())\n\t}\n\n\tpercentage(): number {\n\t\tconst result = (100 * this.workCompleted) / this.totalWork\n\t\treturn Math.min(100, result)\n\t}\n\n\tcompleted() {\n\t\tthis.workCompleted = this.totalWork\n\t\tthis.updater(100)\n\t}\n}\n\nexport class NoopProgressMonitor implements IProgressMonitor {\n\tworkDone(amount: number) {}\n\n\ttotalWorkDone(totalAmount: number) {}\n\n\tcompleted() {}\n}\n\nexport function makeTrackedProgressMonitor(tracker: ProgressTracker, totalWork: number): IProgressMonitor {\n\tif (totalWork < 1) return new NoopProgressMonitor()\n\tconst handle = tracker.registerMonitorSync(totalWork)\n\treturn assertNotNull(tracker.getMonitor(handle))\n}\n"]}