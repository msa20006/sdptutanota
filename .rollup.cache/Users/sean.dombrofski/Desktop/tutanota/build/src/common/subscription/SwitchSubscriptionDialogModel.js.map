{"version":3,"file":"SwitchSubscriptionDialogModel.js","sourceRoot":"","sources":["../../../../src/common/subscription/SwitchSubscriptionDialogModel.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,WAAW,EAAE,WAAW,EAAY,MAAM,iCAAiC,CAAA;AAE5G,OAAO,EAAE,iBAAiB,EAAmB,MAAM,cAAc,CAAA;AACjE,OAAO,EAAE,iCAAiC,EAAE,MAAM,sCAAsC,CAAA;AAQxF,MAAM,OAAO,6BAA6B;IAIvB;IACA;IACA;IACA;IANlB,eAAe,CAAiB;IAEhC,YACkB,QAAkB,EAClB,cAA8B,EAC9B,QAAkB,EAClB,WAAoB;QAHpB,aAAQ,GAAR,QAAQ,CAAU;QAClB,mBAAc,GAAd,cAAc,CAAgB;QAC9B,aAAQ,GAAR,QAAQ,CAAU;QAClB,gBAAW,GAAX,WAAW,CAAS;QAErC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAA;IACnD,CAAC;IAED,oBAAoB;QACnB,MAAM,eAAe,GAAoB,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAA;QAC/F,OAAO;YACN,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW;YACtC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,eAAe;SACf,CAAA;IACF,CAAC;IAED;;;;OAIG;IACH,iCAAiC;QAChC,IAAI,iCAAiC,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,aAAa,CAAC,EAAE,CAAC;YACjF,OAAO,IAAI,CAAA;QACZ,CAAC;QAED,IAAI,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,KAAK,sBAAsB,CAAC,WAAW,CAAC,CAAA;YAC/G,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,KAAK,sBAAsB,CAAC,eAAe,CAAC,CAAA;YAEzH,wEAAwE;YACxE,MAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAA;YAEhD,sCAAsC;YACtC,MAAM,eAAe,GAAG,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAEhF,OAAO,SAAS,GAAG,eAAe,GAAG,CAAC,CAAA;QACvC,CAAC;QAED,OAAO,KAAK,CAAA;IACb,CAAC;CACD","sourcesContent":["import { BookingItemFeatureType, FeatureType, LegacyPlans, PlanType } from \"../api/common/TutanotaConstants\"\nimport type { AccountingInfo, Booking, Customer } from \"../api/entities/sys/TypeRefs.js\"\nimport { asPaymentInterval, PaymentInterval } from \"./PriceUtils\"\nimport { isCustomizationEnabledForCustomer } from \"../api/common/utils/CustomerUtils.js\"\n\nexport type CurrentPlanInfo = {\n\tbusinessUse: boolean\n\tplanType: PlanType\n\tpaymentInterval: PaymentInterval\n}\n\nexport class SwitchSubscriptionDialogModel {\n\tcurrentPlanInfo: CurrentPlanInfo\n\n\tconstructor(\n\t\tprivate readonly customer: Customer,\n\t\tprivate readonly accountingInfo: AccountingInfo,\n\t\tprivate readonly planType: PlanType,\n\t\tprivate readonly lastBooking: Booking,\n\t) {\n\t\tthis.currentPlanInfo = this._initCurrentPlanInfo()\n\t}\n\n\t_initCurrentPlanInfo(): CurrentPlanInfo {\n\t\tconst paymentInterval: PaymentInterval = asPaymentInterval(this.accountingInfo.paymentInterval)\n\t\treturn {\n\t\t\tbusinessUse: this.customer.businessUse,\n\t\t\tplanType: this.planType,\n\t\t\tpaymentInterval,\n\t\t}\n\t}\n\n\t/**\n\t * Check if the user's current plan has multiple users due to a legacy agreement and will continue to do so if the user switches plans.\n\t *\n\t * @return true if multiple users are supported due to legacy, false if not; note that returning false does not mean that the current plan does not actually support multiple users\n\t */\n\tmultipleUsersStillSupportedLegacy(): boolean {\n\t\tif (isCustomizationEnabledForCustomer(this.customer, FeatureType.MultipleUsers)) {\n\t\t\treturn true\n\t\t}\n\n\t\tif (LegacyPlans.includes(this.planType)) {\n\t\t\tconst userItem = this.lastBooking.items.find((item) => item.featureType === BookingItemFeatureType.LegacyUsers)\n\t\t\tconst sharedMailItem = this.lastBooking.items.find((item) => item.featureType === BookingItemFeatureType.SharedMailGroup)\n\n\t\t\t// A user that has PlanType.Premium will always have LegacyUsers booked.\n\t\t\tconst userCount = Number(userItem?.currentCount)\n\n\t\t\t// These may be booked but not always.\n\t\t\tconst sharedMailCount = sharedMailItem ? Number(sharedMailItem.currentCount) : 0\n\n\t\t\treturn userCount + sharedMailCount > 1\n\t\t}\n\n\t\treturn false\n\t}\n}\n"]}