{"version":3,"file":"InvoiceDataInput.js","sourceRoot":"","sources":["../../../../src/common/subscription/InvoiceDataInput.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Children, Component } from \"mithril\"\nimport type { TranslationKey } from \"../misc/LanguageViewModel\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport type { Country } from \"../api/common/CountryList\"\nimport { Countries, CountryType } from \"../api/common/CountryList\"\nimport { HtmlEditor, HtmlEditorMode } from \"../gui/editor/HtmlEditor\"\nimport type { LocationServiceGetReturn } from \"../api/entities/sys/TypeRefs.js\"\nimport { renderCountryDropdown } from \"../gui/base/GuiUtils\"\nimport { TextField } from \"../gui/base/TextField.js\"\nimport type { InvoiceData } from \"../api/common/TutanotaConstants\"\nimport { LocationService } from \"../api/entities/sys/Services\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport { UsageTest } from \"@tutao/tutanota-usagetests\"\n\nexport enum InvoiceDataInputLocation {\n\tInWizard = 0,\n\tOther = 1,\n}\n\nexport class InvoiceDataInput implements Component {\n\tprivate readonly invoiceAddressComponent: HtmlEditor\n\tpublic readonly selectedCountry: Stream<Country | null>\n\tprivate vatNumber: string = \"\"\n\tprivate __paymentPaypalTest?: UsageTest\n\n\tconstructor(private businessUse: boolean, invoiceData: InvoiceData, private readonly location = InvoiceDataInputLocation.Other) {\n\t\tthis.__paymentPaypalTest = locator.usageTestController.getTest(\"payment.paypal\")\n\n\t\tthis.invoiceAddressComponent = new HtmlEditor()\n\t\t\t.setStaticNumberOfLines(5)\n\t\t\t.showBorders()\n\t\t\t.setPlaceholderId(\"invoiceAddress_label\")\n\t\t\t.setMode(HtmlEditorMode.HTML)\n\t\t\t.setHtmlMonospace(false)\n\t\t\t.setValue(invoiceData.invoiceAddress)\n\n\t\tthis.selectedCountry = stream(invoiceData.country)\n\n\t\tthis.view = this.view.bind(this)\n\t\tthis.oncreate = this.oncreate.bind(this)\n\t}\n\n\tview(): Children {\n\t\treturn [\n\t\t\tthis.businessUse || this.location !== InvoiceDataInputLocation.InWizard\n\t\t\t\t? m(\"\", [\n\t\t\t\t\t\tm(\".pt\", m(this.invoiceAddressComponent)),\n\t\t\t\t\t\tm(\".small\", lang.get(this.businessUse ? \"invoiceAddressInfoBusiness_msg\" : \"invoiceAddressInfoPrivate_msg\")),\n\t\t\t\t  ])\n\t\t\t\t: null,\n\t\t\trenderCountryDropdown({\n\t\t\t\tselectedCountry: this.selectedCountry(),\n\t\t\t\tonSelectionChanged: this.selectedCountry,\n\t\t\t\thelpLabel: () => lang.get(\"invoiceCountryInfoConsumer_msg\"),\n\t\t\t}),\n\t\t\tthis.isVatIdFieldVisible()\n\t\t\t\t? m(TextField, {\n\t\t\t\t\t\tlabel: \"invoiceVatIdNo_label\",\n\t\t\t\t\t\tvalue: this.vatNumber,\n\t\t\t\t\t\toninput: (value) => (this.vatNumber = value),\n\t\t\t\t\t\thelpLabel: () => lang.get(\"invoiceVatIdNoInfoBusiness_msg\"),\n\t\t\t\t  })\n\t\t\t\t: null,\n\t\t]\n\t}\n\n\toncreate() {\n\t\tlocator.serviceExecutor.get(LocationService, null).then((location: LocationServiceGetReturn) => {\n\t\t\tif (!this.selectedCountry()) {\n\t\t\t\tconst country = Countries.find((c) => c.a === location.country)\n\n\t\t\t\tif (country) {\n\t\t\t\t\tthis.selectedCountry(country)\n\t\t\t\t\tm.redraw()\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tvalidateInvoiceData(): TranslationKey | null {\n\t\tconst address = this.getAddress()\n\t\tconst countrySelected = this.selectedCountry() != null\n\n\t\tif (this.businessUse) {\n\t\t\tif (address.trim() === \"\" || address.split(\"\\n\").length > 5) {\n\t\t\t\treturn \"invoiceAddressInfoBusiness_msg\"\n\t\t\t} else if (!countrySelected) {\n\t\t\t\treturn \"invoiceCountryInfoBusiness_msg\"\n\t\t\t}\n\t\t} else {\n\t\t\tif (!countrySelected) {\n\t\t\t\treturn \"invoiceCountryInfoBusiness_msg\" // use business text here because it fits better\n\t\t\t} else if (address.split(\"\\n\").length > 4) {\n\t\t\t\treturn \"invoiceAddressInfoBusiness_msg\"\n\t\t\t}\n\t\t}\n\t\tthis.__paymentPaypalTest?.getStage(3).complete()\n\t\t// no error\n\t\treturn null\n\t}\n\n\tgetInvoiceData(): InvoiceData {\n\t\tconst address = this.getAddress()\n\t\tconst selectedCountry = this.selectedCountry()\n\t\treturn {\n\t\t\tinvoiceAddress: address,\n\t\t\tcountry: selectedCountry,\n\t\t\tvatNumber: selectedCountry?.t === CountryType.EU && this.businessUse ? this.vatNumber : \"\",\n\t\t}\n\t}\n\n\tprivate isVatIdFieldVisible(): boolean {\n\t\tconst selectedCountry = this.selectedCountry()\n\t\treturn this.businessUse && selectedCountry != null && selectedCountry.t === CountryType.EU\n\t}\n\n\tprivate getAddress(): string {\n\t\treturn this.invoiceAddressComponent\n\t\t\t.getValue()\n\t\t\t.split(\"\\n\")\n\t\t\t.filter((line) => line.trim().length > 0)\n\t\t\t.join(\"\\n\")\n\t}\n}\n"]}