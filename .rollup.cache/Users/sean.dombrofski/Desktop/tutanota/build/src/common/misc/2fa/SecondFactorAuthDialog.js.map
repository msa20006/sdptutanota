{"version":3,"file":"SecondFactorAuthDialog.js","sourceRoot":"","sources":["../../../../../src/common/misc/2fa/SecondFactorAuthDialog.ts"],"names":[],"mappings":"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","sourcesContent":["import { SecondFactorType } from \"../../api/common/TutanotaConstants.js\"\nimport type { Thunk } from \"@tutao/tutanota-utils\"\nimport { assertNotNull, getFirstOrThrow } from \"@tutao/tutanota-utils\"\nimport type { TranslationKey } from \"../LanguageViewModel.js\"\nimport type { Challenge } from \"../../api/entities/sys/TypeRefs.js\"\nimport { createSecondFactorAuthData } from \"../../api/entities/sys/TypeRefs.js\"\nimport { AccessBlockedError, BadRequestError, LockedError, NotAuthenticatedError } from \"../../api/common/error/RestError.js\"\nimport { Dialog } from \"../../gui/base/Dialog.js\"\nimport m from \"mithril\"\nimport { SecondFactorAuthView } from \"./SecondFactorAuthView.js\"\nimport { WebauthnClient } from \"./webauthn/WebauthnClient.js\"\nimport type { LoginFacade } from \"../../api/worker/facades/LoginFacade.js\"\nimport { CancelledError } from \"../../api/common/error/CancelledError.js\"\nimport { WebauthnError } from \"../../api/common/error/WebauthnError.js\"\nimport { appIdToLoginUrl } from \"./SecondFactorUtils.js\"\n\nimport { DomainConfigProvider } from \"../../api/common/DomainConfigProvider.js\"\n\ntype AuthData = {\n\treadonly sessionId: IdTuple\n\treadonly challenges: ReadonlyArray<Challenge>\n\treadonly mailAddress: string | null\n}\ntype WebauthnState = { state: \"init\" } | { state: \"progress\" } | { state: \"error\"; error: TranslationKey }\n\ntype OtpState = {\n\tcode: string\n\tinProgress: boolean\n}\n\n/**\n * Dialog which allows user to use second factor authentication and allows to reset second factor.\n * It will show that the login can be approved form another session and depending on what is supported it\n * might display one or more of:\n *  - WebAuthentication\n *  - TOTP\n *  - login from another domain message\n *  - lost access button\n * */\nexport class SecondFactorAuthDialog {\n\tprivate waitingForSecondFactorDialog: Dialog | null = null\n\tprivate webauthnState: WebauthnState = { state: \"init\" }\n\tprivate otpState: OtpState = { code: \"\", inProgress: false }\n\n\t/** @private */\n\tprivate constructor(\n\t\tprivate readonly webauthnClient: WebauthnClient,\n\t\tprivate readonly loginFacade: LoginFacade,\n\t\tprivate readonly domainConfigProvider: DomainConfigProvider,\n\t\tprivate readonly authData: AuthData,\n\t\tprivate readonly onClose: Thunk,\n\t) {}\n\n\t/**\n\t * @param onClose will be called when the dialog is closed (one way or another).\n\t */\n\tstatic show(\n\t\twebauthnClient: WebauthnClient,\n\t\tloginFacade: LoginFacade,\n\t\tdomainConfigProvider: DomainConfigProvider,\n\t\tauthData: AuthData,\n\t\tonClose: Thunk,\n\t): SecondFactorAuthDialog {\n\t\tconst dialog = new SecondFactorAuthDialog(webauthnClient, loginFacade, domainConfigProvider, authData, onClose)\n\n\t\tdialog.show()\n\n\t\treturn dialog\n\t}\n\n\tclose() {\n\t\tif (this.waitingForSecondFactorDialog?.visible) {\n\t\t\tthis.waitingForSecondFactorDialog?.close()\n\t\t}\n\n\t\tthis.webauthnClient.abortCurrentOperation()\n\t\tthis.waitingForSecondFactorDialog = null\n\n\t\tthis.onClose()\n\t}\n\n\tprivate async show() {\n\t\tconst u2fChallenge = this.authData.challenges.find(\n\t\t\t(challenge) => challenge.type === SecondFactorType.u2f || challenge.type === SecondFactorType.webauthn,\n\t\t)\n\n\t\tconst otpChallenge = this.authData.challenges.find((challenge) => challenge.type === SecondFactorType.totp)\n\t\tconst u2fSupported = await this.webauthnClient.isSupported()\n\n\t\tconsole.log(\"webauthn supported: \", u2fSupported)\n\n\t\tlet canLoginWithU2f: boolean\n\t\tlet otherDomainLoginUrl: string | null\n\t\tif (u2fChallenge?.u2f != null && u2fSupported) {\n\t\t\tconst { canAttempt, cannotAttempt } = await this.webauthnClient.canAttemptChallenge(u2fChallenge.u2f)\n\t\t\tcanLoginWithU2f = canAttempt.length !== 0\n\t\t\t// If we don't have any key we can use to log in we need to show a message to attempt the login on another domain.\n\n\t\t\tif (cannotAttempt.length > 0) {\n\t\t\t\tconst loginUrlString = appIdToLoginUrl(getFirstOrThrow(cannotAttempt).appId, this.domainConfigProvider)\n\t\t\t\tconst loginUrl = new URL(loginUrlString)\n\t\t\t\tloginUrl.searchParams.set(\"noAutoLogin\", \"true\")\n\t\t\t\totherDomainLoginUrl = loginUrl.toString()\n\t\t\t} else {\n\t\t\t\totherDomainLoginUrl = null\n\t\t\t}\n\t\t} else {\n\t\t\tcanLoginWithU2f = false\n\t\t\totherDomainLoginUrl = null\n\t\t}\n\n\t\tconst { mailAddress } = this.authData\n\t\tthis.waitingForSecondFactorDialog = Dialog.showActionDialog({\n\t\t\ttitle: \"emptyString_msg\",\n\t\t\tallowOkWithReturn: true,\n\t\t\tchild: {\n\t\t\t\tview: () => {\n\t\t\t\t\treturn m(SecondFactorAuthView, {\n\t\t\t\t\t\twebauthn: canLoginWithU2f\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tcanLogin: true,\n\t\t\t\t\t\t\t\t\tstate: this.webauthnState,\n\t\t\t\t\t\t\t\t\tdoWebauthn: () => this.doWebauthn(assertNotNull(u2fChallenge)),\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: otherDomainLoginUrl\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tcanLogin: false,\n\t\t\t\t\t\t\t\t\totherDomainLoginUrl: otherDomainLoginUrl,\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\totp: otpChallenge\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tcodeFieldValue: this.otpState.code,\n\t\t\t\t\t\t\t\t\tinProgress: this.otpState.inProgress,\n\t\t\t\t\t\t\t\t\tonValueChanged: (newValue) => (this.otpState.code = newValue),\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\tonRecover: mailAddress ? () => this.recoverLogin(mailAddress) : null,\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t},\n\t\t\tokAction: otpChallenge ? () => this.onConfirmOtp() : null,\n\t\t\tcancelAction: () => this.cancel(),\n\t\t})\n\t}\n\n\tasync onConfirmOtp() {\n\t\tthis.otpState.inProgress = true\n\t\tconst authData = createSecondFactorAuthData({\n\t\t\ttype: SecondFactorType.totp,\n\t\t\tsession: this.authData.sessionId,\n\t\t\totpCode: this.otpState.code.replace(/ /g, \"\"),\n\t\t\tu2f: null,\n\t\t\twebauthn: null,\n\t\t})\n\n\t\ttry {\n\t\t\tawait this.loginFacade.authenticateWithSecondFactor(authData)\n\t\t\tthis.waitingForSecondFactorDialog?.close()\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotAuthenticatedError) {\n\t\t\t\tDialog.message(\"loginFailed_msg\")\n\t\t\t} else if (e instanceof BadRequestError) {\n\t\t\t\tDialog.message(\"loginFailed_msg\")\n\t\t\t} else if (e in AccessBlockedError) {\n\t\t\t\tDialog.message(\"loginFailedOften_msg\")\n\t\t\t\tthis.close()\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.otpState.inProgress = false\n\t\t}\n\t}\n\n\tprivate async cancel(): Promise<void> {\n\t\tthis.webauthnClient.abortCurrentOperation()\n\t\tawait this.loginFacade.cancelCreateSession(this.authData.sessionId)\n\t\tthis.close()\n\t}\n\n\tprivate async doWebauthn(u2fChallenge: Challenge) {\n\t\tthis.webauthnState = {\n\t\t\tstate: \"progress\",\n\t\t}\n\t\tconst sessionId = this.authData.sessionId\n\t\tconst challenge = assertNotNull(u2fChallenge.u2f)\n\n\t\ttry {\n\t\t\tconst { responseData, apiBaseUrl } = await this.webauthnClient.authenticate(challenge)\n\t\t\tconst authData = createSecondFactorAuthData({\n\t\t\t\ttype: SecondFactorType.webauthn,\n\t\t\t\tsession: sessionId,\n\t\t\t\twebauthn: responseData,\n\t\t\t\tu2f: null,\n\t\t\t\totpCode: null,\n\t\t\t})\n\t\t\tawait this.loginFacade.authenticateWithSecondFactor(authData, apiBaseUrl)\n\t\t} catch (e) {\n\t\t\tif (e instanceof CancelledError) {\n\t\t\t\tthis.webauthnState = {\n\t\t\t\t\tstate: \"init\",\n\t\t\t\t}\n\t\t\t} else if (e instanceof AccessBlockedError && this.waitingForSecondFactorDialog?.visible) {\n\t\t\t\tDialog.message(\"loginFailedOften_msg\")\n\t\t\t\tthis.close()\n\t\t\t} else if (e instanceof WebauthnError) {\n\t\t\t\tconsole.log(\"Error during webAuthn: \", e)\n\t\t\t\tthis.webauthnState = {\n\t\t\t\t\tstate: \"error\",\n\t\t\t\t\terror: \"couldNotAuthU2f_msg\",\n\t\t\t\t}\n\t\t\t} else if (e instanceof LockedError) {\n\t\t\t\tthis.webauthnState = {\n\t\t\t\t\tstate: \"init\",\n\t\t\t\t}\n\t\t\t\tDialog.message(\"serviceUnavailable_msg\")\n\t\t\t} else if (e instanceof NotAuthenticatedError) {\n\t\t\t\tthis.webauthnState = {\n\t\t\t\t\tstate: \"init\",\n\t\t\t\t}\n\t\t\t\tDialog.message(\"loginFailed_msg\")\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t} finally {\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\tprivate async recoverLogin(mailAddress: string) {\n\t\tthis.cancel()\n\t\tconst dialog = await import(\"../../login/recover/RecoverLoginDialog\")\n\t\tdialog.show(mailAddress, \"secondFactor\")\n\t}\n}\n"]}