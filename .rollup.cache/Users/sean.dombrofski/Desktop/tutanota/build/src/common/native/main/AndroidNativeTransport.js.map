{"version":3,"file":"AndroidNativeTransport.js","sourceRoot":"","sources":["../../../../../src/common/native/main/AndroidNativeTransport.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,mBAAmB,EAAmC,MAAM,iCAAiC,CAAA;AAC3H,OAAO,EAAE,KAAK,EAAkB,MAAM,uBAAuB,CAAA;AAC7D,OAAO,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAA;AAE1D,gBAAgB,EAAE,CAAA;AAElB;;;GAGG;AAEH,MAAM,OAAO,sBAAsB;IAIL;IAHrB,cAAc,GAA4B,IAAI,CAAA;IAC9C,YAAY,GAAgC,KAAK,EAAE,CAAA;IAE3D,YAA6B,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAE/C;;OAEG;IACH,KAAK;QACJ,0DAA0D;QAC1D,0CAA0C;QAC1C,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,CAAC,OAAqB,EAAE,EAAE;YACjD,gEAAgE;YAChE,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;YAE7B,IAAI,CAAC,SAAS,GAAG,CAAC,YAA0B,EAAE,EAAE;gBAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAA;gBAEnC,IAAI,OAAO,EAAE,CAAC;oBACb,gDAAgD;oBAChD,0DAA0D;oBAC1D,MAAM,QAAQ,GAAG,mBAAmB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;oBACvD,OAAO,CAAC,QAAQ,CAAC,CAAA;gBAClB,CAAC;YACF,CAAC,CAAA;YAED,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAChC,CAAC,CAAA;QAED,kFAAkF;QAClF,0DAA0D;QAC1D,kHAAkH;QAClH,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,sBAAsB,EAAE,CAAA;IAC/C,CAAC;IAED,WAAW,CAAC,OAAsB;QACjC,MAAM,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAA;QAC5C,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAA;IACpE,CAAC;IAED,iBAAiB,CAAC,OAAyB;QAC1C,IAAI,CAAC,cAAc,GAAG,OAAO,CAAA;IAC9B,CAAC;CACD","sourcesContent":["import { Transport } from \"../../api/common/threading/Transport.js\"\nimport { decodeNativeMessage, encodeNativeMessage, JsMessageHandler, NativeMessage } from \"../common/NativeLineProtocol.js\"\nimport { defer, DeferredObject } from \"@tutao/tutanota-utils\"\nimport { assertMainOrNode } from \"../../api/common/Env.js\"\n\nassertMainOrNode()\n\n/**\n * Transport for communication between android native and webview, using WebMessagePorts for two-way communication.\n * The interface `nativeApp.startWebMessageChannel` is defined in Native.java in order to initiate the setup of the port channel\n */\n\nexport class AndroidNativeTransport implements Transport<NativeRequestType, JsRequestType> {\n\tprivate messageHandler: JsMessageHandler | null = null\n\tprivate deferredPort: DeferredObject<MessagePort> = defer()\n\n\tconstructor(private readonly window: Window) {}\n\n\t/**\n\t * Creates a global `window.onmessage` handler, and then tells native to create the messageport channel\n\t */\n\tstart() {\n\t\t// We will receive a message from native after the call to\n\t\t// window.nativeApp.startWebMessageChannel\n\t\tthis.window.onmessage = (message: MessageEvent) => {\n\t\t\t// All further messages to and from native will be via this port\n\t\t\tconst port = message.ports[0]\n\n\t\t\tport.onmessage = (messageEvent: MessageEvent) => {\n\t\t\t\tconst handler = this.messageHandler\n\n\t\t\t\tif (handler) {\n\t\t\t\t\t// We can be sure we have a string here, because\n\t\t\t\t\t// Android only allows sending strings across MessagePorts\n\t\t\t\t\tconst response = decodeNativeMessage(messageEvent.data)\n\t\t\t\t\thandler(response)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.deferredPort.resolve(port)\n\t\t}\n\n\t\t// window.nativeApp is defined in Native.java using WebView.addJavaScriptInterface\n\t\t// The native side needs to initialize the WebMessagePorts\n\t\t// We have to tell it when we are ready, otherwise it will happen too early and we won't receive the message event\n\t\tthis.window.nativeApp.startWebMessageChannel()\n\t}\n\n\tpostMessage(message: NativeMessage): void {\n\t\tconst encoded = encodeNativeMessage(message)\n\t\tthis.deferredPort.promise.then((port) => port.postMessage(encoded))\n\t}\n\n\tsetMessageHandler(handler: JsMessageHandler): void {\n\t\tthis.messageHandler = handler\n\t}\n}\n"]}