{"version":3,"file":"WebAuthnFacade.js","sourceRoot":"","sources":["../../../../../../src/common/native/common/generatedipc/WebAuthnFacade.ts"],"names":[],"mappings":"AAAA,iCAAiC","sourcesContent":["/* generated file, don't edit. */\n\nimport { WebAuthnRegistrationChallenge } from \"./WebAuthnRegistrationChallenge.js\"\nimport { WebAuthnRegistrationResult } from \"./WebAuthnRegistrationResult.js\"\nimport { WebAuthnSignChallenge } from \"./WebAuthnSignChallenge.js\"\nimport { WebAuthnSignResult } from \"./WebAuthnSignResult.js\"\n/**\n * implementation of the WebAuthn protocol\n */\nexport interface WebAuthnFacade {\n\t/**\n\t * register for webauthn\n\t */\n\tregister(challenge: WebAuthnRegistrationChallenge): Promise<WebAuthnRegistrationResult>\n\n\t/**\n\t * sign a webauthn challenge\n\t */\n\tsign(challenge: WebAuthnSignChallenge): Promise<WebAuthnSignResult>\n\n\t/**\n\t * cancels the current sign/registration operation\n\t */\n\tabortCurrentOperation(): Promise<void>\n\n\t/**\n\t * return whether this platform supports webAuthn\n\t */\n\tisSupported(): Promise<boolean>\n\n\t/**\n\t * return whether we can attempt a challenge for a given RpId\n\t */\n\tcanAttemptChallengeForRpId(rpId: string): Promise<boolean>\n\n\t/**\n\t * return whether we can attempt a challenge for a given U2FAppId\n\t */\n\tcanAttemptChallengeForU2FAppId(appId: string): Promise<boolean>\n}\n"]}