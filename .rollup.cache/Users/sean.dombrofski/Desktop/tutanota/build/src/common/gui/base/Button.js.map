{"version":3,"file":"Button.js","sourceRoot":"","sources":["../../../../../src/common/gui/base/Button.ts"],"names":[],"mappings":"AAAA,OAAO,CAAuC,MAAM,SAAS,CAAA;AAE7D,OAAO,EAAE,IAAI,EAAE,MAAM,8BAA8B,CAAA;AACnD,OAAO,EAAE,qBAAqB,EAAE,KAAK,EAAE,MAAM,UAAU,CAAA;AAEvD,OAAO,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAA;AAE5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAA;AACvD,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAA;AAEpD,gBAAgB,EAAE,CAAA;AAelB,MAAM,UAAU,SAAS,CAAC,YAA4C;IAIrE,QAAQ,YAAY,EAAE,CAAC;QACtB;YACC,OAAO;gBACN,MAAM,EAAE,KAAK,CAAC,iBAAiB;gBAC/B,MAAM,EAAE,KAAK,CAAC,aAAa;aAC3B,CAAA;QAEF;YACC,OAAO;gBACN,MAAM,EAAE,KAAK,CAAC,cAAc;gBAC5B,MAAM,EAAE,qBAAqB,EAAE;aAC/B,CAAA;QAEF;YACC,OAAO;gBACN,MAAM,EAAE,KAAK,CAAC,cAAc;gBAC5B,MAAM,EAAE,qBAAqB,EAAE;aAC/B,CAAA;QAEF;YACC,OAAO;gBACN,MAAM,EAAE,KAAK,CAAC,4BAA4B;gBAC1C,MAAM,EAAE,qBAAqB,EAAE;aAC/B,CAAA;QAEF,yCAAyB;QACzB;YACC,OAAO;gBACN,MAAM,EAAE,KAAK,CAAC,cAAc;gBAC5B,MAAM,EAAE,KAAK,CAAC,UAAU;aACxB,CAAA;IACH,CAAC;AACF,CAAC;AAUD;;GAEG;AACH,MAAM,OAAO,MAAM;IAClB,IAAI,CAAC,EAAE,KAAK,EAAuB;QAClC,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAE7C,OAAO,CAAC,CAAC,UAAU,EAAE;YACpB,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK;YACtD,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,KAAK,CAAC;YAC1C,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;YACxB,KAAK,EAAE;gBACN,WAAW,EAAE,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM;aAC3C;YACD,OAAO,EAAE,KAAK,CAAC,KAAK,IAAI,IAAI;SAC5B,CAAC,CAAA;IACH,CAAC;IAEO,cAAc,CAAC,IAAgB;QACtC,IAAI,OAAO,GAAG;YACb,aAAa;YACb,UAAU;YACV,gBAAgB;YAChB,eAAe;YACf,eAAe;YACf,mBAAmB;YACnB,MAAM;YACN,cAAc;YACd,gBAAgB;YAChB,OAAO;SACP,CAAA;QAED,IAAI,IAAI,uCAAuB,EAAE,CAAC;YACjC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAClB,CAAC;aAAM,CAAC;YACP,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAA;QAC7C,CAAC;QAED,OAAO,OAAO,CAAA;IACf,CAAC;CACD","sourcesContent":["import m, { Children, ClassComponent, CVnode } from \"mithril\"\nimport type { Translation, TranslationKey, MaybeTranslation } from \"../../misc/LanguageViewModel\"\nimport { lang } from \"../../misc/LanguageViewModel\"\nimport { getElevatedBackground, theme } from \"../theme\"\nimport type { lazy } from \"@tutao/tutanota-utils\"\nimport { noOp } from \"@tutao/tutanota-utils\"\nimport type { ClickHandler } from \"./GuiUtils\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { BaseButton } from \"./buttons/BaseButton.js\"\n\nassertMainOrNode()\n\nexport const enum ButtonType {\n\tPrimary = \"primary\",\n\tSecondary = \"secondary\",\n}\n\nexport const enum ButtonColor {\n\tNav = \"nav\",\n\tContent = \"content\",\n\tElevated = \"elevated\",\n\tDrawerNav = \"drawernav\",\n\tFab = \"fab\",\n}\n\nexport function getColors(buttonColors: ButtonColor | null | undefined): {\n\tborder: string\n\tbutton: string\n} {\n\tswitch (buttonColors) {\n\t\tcase ButtonColor.Nav:\n\t\t\treturn {\n\t\t\t\tbutton: theme.navigation_button,\n\t\t\t\tborder: theme.navigation_bg,\n\t\t\t}\n\n\t\tcase ButtonColor.DrawerNav:\n\t\t\treturn {\n\t\t\t\tbutton: theme.content_button,\n\t\t\t\tborder: getElevatedBackground(),\n\t\t\t}\n\n\t\tcase ButtonColor.Elevated:\n\t\t\treturn {\n\t\t\t\tbutton: theme.content_button,\n\t\t\t\tborder: getElevatedBackground(),\n\t\t\t}\n\n\t\tcase ButtonColor.Fab:\n\t\t\treturn {\n\t\t\t\tbutton: theme.content_button_icon_selected,\n\t\t\t\tborder: getElevatedBackground(),\n\t\t\t}\n\n\t\tcase ButtonColor.Content:\n\t\tdefault:\n\t\t\treturn {\n\t\t\t\tbutton: theme.content_button,\n\t\t\t\tborder: theme.content_bg,\n\t\t\t}\n\t}\n}\n\nexport interface ButtonAttrs {\n\tlabel: MaybeTranslation\n\ttitle?: MaybeTranslation\n\tclick?: ClickHandler\n\ttype: ButtonType\n\tcolors?: ButtonColor\n}\n\n/**\n * A button.\n */\nexport class Button implements ClassComponent<ButtonAttrs> {\n\tview({ attrs }: CVnode<ButtonAttrs>): Children {\n\t\tlet classes = this.resolveClasses(attrs.type)\n\n\t\treturn m(BaseButton, {\n\t\t\tlabel: attrs.title == null ? attrs.label : attrs.title,\n\t\t\ttext: lang.getTranslationText(attrs.label),\n\t\t\tclass: classes.join(\" \"),\n\t\t\tstyle: {\n\t\t\t\tborderColor: getColors(attrs.colors).border,\n\t\t\t},\n\t\t\tonclick: attrs.click ?? noOp,\n\t\t})\n\t}\n\n\tprivate resolveClasses(type: ButtonType) {\n\t\tlet classes = [\n\t\t\t\"limit-width\",\n\t\t\t\"noselect\",\n\t\t\t\"bg-transparent\",\n\t\t\t\"button-height\",\n\t\t\t\"text-ellipsis\",\n\t\t\t\"content-accent-fg\",\n\t\t\t\"flex\",\n\t\t\t\"items-center\",\n\t\t\t\"justify-center\",\n\t\t\t\"flash\",\n\t\t]\n\n\t\tif (type === ButtonType.Primary) {\n\t\t\tclasses.push(\"b\")\n\t\t} else {\n\t\t\tclasses.push(\"plr-button\", \"button-content\")\n\t\t}\n\n\t\treturn classes\n\t}\n}\n"]}