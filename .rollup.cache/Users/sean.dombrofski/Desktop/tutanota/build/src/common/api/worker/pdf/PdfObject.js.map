{"version":3,"file":"PdfObject.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/pdf/PdfObject.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAgB,MAAM,mBAAmB,CAAA;AAE7E;;;GAGG;AACH,MAAM,OAAO,SAAS;IACF,YAAY,CAAQ;IAC7B,YAAY,GAAW,CAAC,CAAC,CAAA;IACzB,gBAAgB,GAA8B,IAAI,GAAG,EAAwB,CAAA;IAEvF,YAAY,YAAoB,EAAE,gBAA2C;QAC5E,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;QAChC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;IACzC,CAAC;IAEM,aAAa;QACnB,OAAO,IAAI,CAAC,gBAAgB,CAAA;IAC7B,CAAC;IAEM,eAAe;QACrB,OAAO,IAAI,CAAC,YAAY,CAAA;IACzB,CAAC;IAEM,eAAe;QACrB,OAAO,IAAI,CAAC,YAAY,CAAA;IACzB,CAAC;IAED;;OAEG;IACI,qBAAqB,CAAC,GAAwB;QACpD,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAA;IAC5B,CAAC;IAED;;OAEG;IACI,eAAe,CAAC,YAAoB;QAC1C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;IACjC,CAAC;IAED;;;OAGG;IACI,kBAAkB,CAAC,WAAwB;QACjD,OAAO,IAAI,UAAU,CAAC,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,EAAE,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAA;IACtH,CAAC;IAED;;OAEG;IACI,eAAe;QACrB,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,IAAI,iBAAiB,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAA;QAClF,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAChD,IAAI,OAAO,GAAG,KAAK,QAAQ;gBAC1B,MAAM,IAAI,KAAK,CACd,mCAAmC,IAAI,CAAC,YAAY,8CAA8C,GAAG,wEAAwE,CAC7K,CAAA;YACF,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,CAAA;QACzB,CAAC;QACD,IAAI,IAAI,GAAG,QAAQ,KAAK,QAAQ,EAAE,CAAA;QAClC,OAAO,IAAI,CAAA;IACZ,CAAC;IAED;;OAEG;IACI,eAAe;QACrB,OAAO,SAAS,QAAQ,EAAE,CAAA;IAC3B,CAAC;CACD","sourcesContent":["import { GENERATION_NUMBER, NEW_LINE, PdfDictValue } from \"./PdfConstants.js\"\n\n/**\n * Class representing objects in PDF.\n * Holds data in form of an associative array which mirror the actual PDF object's \"object dictionary\"\n */\nexport class PdfObject {\n\tprotected readonly objectNumber: number\n\tprotected bytePosition: number = -1\n\tprotected objectDictionary: Map<string, PdfDictValue> = new Map<string, PdfDictValue>()\n\n\tconstructor(objectNumber: number, objectDictionary: Map<string, PdfDictValue>) {\n\t\tthis.objectNumber = objectNumber\n\t\tthis.objectDictionary = objectDictionary\n\t}\n\n\tpublic getDictionary(): Map<string, PdfDictValue> {\n\t\treturn this.objectDictionary\n\t}\n\n\tpublic getObjectNumber() {\n\t\treturn this.objectNumber\n\t}\n\n\tpublic getBytePosition(): number {\n\t\treturn this.bytePosition\n\t}\n\n\t/**\n\t * Set the dictionary of the object to be one with all references resolved (string, string)\n\t */\n\tpublic setResolvedDictionary(map: Map<string, string>) {\n\t\tthis.objectDictionary = map\n\t}\n\n\t/**\n\t * Set the byte-position of the object which is the byte in the PDF file at which the object's declaration starts\n\t */\n\tpublic setBytePosition(bytePosition: number) {\n\t\tthis.bytePosition = bytePosition\n\t}\n\n\t/**\n\t * Encode the object into a Uint8Array to enable writing it into a buffer / file\n\t * @param textEncoder\n\t */\n\tpublic encodeToUInt8Array(textEncoder: TextEncoder): Uint8Array {\n\t\treturn new Uint8Array([...textEncoder.encode(this.parseObjectHead()), ...textEncoder.encode(this.parseObjectTail())])\n\t}\n\n\t/**\n\t * Convert the object's head data into PDF syntax\n\t */\n\tpublic parseObjectHead(): string {\n\t\tlet head = `${this.objectNumber} ${GENERATION_NUMBER} obj${NEW_LINE}<<${NEW_LINE}`\n\t\tfor (const [key, val] of this.objectDictionary) {\n\t\t\tif (typeof val !== \"string\")\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Unresolved reference in object: ${this.objectNumber}. Unresolved reference found as value of: \"${key}\". Cannot encode an object that has unresolved references, aborting...`,\n\t\t\t\t)\n\t\t\thead += `/${key} ${val}`\n\t\t}\n\t\thead += `${NEW_LINE}>>${NEW_LINE}`\n\t\treturn head\n\t}\n\n\t/**\n\t * Convert the object's tail data into PDF syntax\n\t */\n\tpublic parseObjectTail(): string {\n\t\treturn `endobj${NEW_LINE}`\n\t}\n}\n"]}