{"version":3,"file":"GroupSharingUtils.js","sourceRoot":"","sources":["../../../../src/common/sharing/GroupSharingUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { GroupInfo, ReceivedGroupInvitation } from \"../api/entities/sys/TypeRefs.js\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { MailMethod } from \"../api/common/TutanotaConstants\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog\"\nimport type { GroupSharingTexts } from \"./GroupGuiUtils\"\nimport { getDefaultGroupName, getInvitationGroupType, getSharedGroupName } from \"./GroupUtils\"\nimport { PartialRecipient, Recipients } from \"../api/common/recipients/Recipient\"\nimport { getDefaultSender, getEnabledMailAddressesWithUser, getMailAddressDisplayText, getSenderNameForUser } from \"../mailFunctionality/SharedMailUtils.js\"\n\nexport function sendShareNotificationEmail(sharedGroupInfo: GroupInfo, recipients: Array<PartialRecipient>, texts: GroupSharingTexts) {\n\tlocator.mailboxModel.getUserMailboxDetails().then((mailboxDetails) => {\n\t\tconst senderMailAddress = getDefaultSender(locator.logins, mailboxDetails)\n\t\tconst userName = getSenderNameForUser(mailboxDetails, locator.logins.getUserController())\n\t\t// Sending notifications as bcc so that invited people don't see each other\n\t\tconst bcc = recipients.map(({ name, address }) => ({\n\t\t\tname,\n\t\t\taddress,\n\t\t}))\n\n\t\tlet senderDisplayName\n\n\t\tif (!userName) {\n\t\t\tsenderDisplayName = senderMailAddress\n\t\t} else {\n\t\t\t// use html code for < > so that they (and the enclosed email address) do not get sanitized away\n\t\t\tsenderDisplayName = `${userName} &lt;${senderMailAddress}&gt;`\n\t\t}\n\n\t\t_sendNotificationEmail(\n\t\t\t{\n\t\t\t\tbcc,\n\t\t\t},\n\t\t\ttexts.shareEmailSubject,\n\t\t\ttexts.shareEmailBody(senderDisplayName, getSharedGroupName(sharedGroupInfo, locator.logins.getUserController(), true)),\n\t\t\tsenderMailAddress,\n\t\t)\n\t})\n}\n\nexport function sendAcceptNotificationEmail(invitation: ReceivedGroupInvitation, texts: GroupSharingTexts) {\n\tconst to = [\n\t\t{\n\t\t\tname: invitation.inviterName,\n\t\t\taddress: invitation.inviterMailAddress,\n\t\t},\n\t]\n\tconst userName = invitation.inviterMailAddress\n\tconst invitee = invitation.inviteeMailAddress\n\tconst groupName = invitation.sharedGroupName || getDefaultGroupName(getInvitationGroupType(invitation))\n\tconst senderMailAddress = invitation.inviteeMailAddress\n\n\t_sendNotificationEmail(\n\t\t{\n\t\t\tto,\n\t\t},\n\t\ttexts.acceptEmailSubject,\n\t\ttexts.acceptEmailBody(userName, invitee, groupName),\n\t\tsenderMailAddress,\n\t)\n}\n\nexport function sendRejectNotificationEmail(invitation: ReceivedGroupInvitation, texts: GroupSharingTexts) {\n\tconst to = [\n\t\t{\n\t\t\tname: invitation.inviterName,\n\t\t\taddress: invitation.inviterMailAddress,\n\t\t},\n\t]\n\tconst userName = invitation.inviterMailAddress\n\tconst invitee = invitation.inviteeMailAddress\n\tconst groupName = invitation.sharedGroupName || getDefaultGroupName(getInvitationGroupType(invitation))\n\tconst senderMailAddress = invitation.inviteeMailAddress\n\n\t_sendNotificationEmail(\n\t\t{\n\t\t\tto,\n\t\t},\n\t\ttexts.declineEmailSubject,\n\t\ttexts.declineEmailBody(userName, invitee, groupName),\n\t\tsenderMailAddress,\n\t)\n}\n\nfunction _sendNotificationEmail(recipients: Recipients, subject: string, body: string, senderMailAddress: string) {\n\timport(\"../misc/HtmlSanitizer\").then(({ htmlSanitizer }) => {\n\t\tconst sanitizedBody = htmlSanitizer.sanitizeHTML(body, {\n\t\t\tblockExternalContent: false,\n\t\t\tallowRelativeLinks: false,\n\t\t\tusePlaceholderForInlineImages: false,\n\t\t}).html\n\t\tlocator.mailboxModel.getUserMailboxDetails().then(async (mailboxDetails) => {\n\t\t\tconst sender = getEnabledMailAddressesWithUser(mailboxDetails, locator.logins.getUserController().userGroupInfo).includes(senderMailAddress)\n\t\t\t\t? senderMailAddress\n\t\t\t\t: getDefaultSender(locator.logins, mailboxDetails)\n\n\t\t\tconst confirm = () => Promise.resolve(true)\n\n\t\t\tconst wait = showProgressDialog\n\t\t\tconst mailboxProperties = await locator.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot)\n\t\t\tconst model = await locator.sendMailModel(mailboxDetails, mailboxProperties)\n\t\t\tawait model.initWithTemplate(recipients, subject, sanitizedBody, [], true, sender)\n\t\t\tawait model.send(MailMethod.NONE, confirm, wait, \"tooManyMailsAuto_msg\")\n\t\t})\n\t})\n}\n"]}