{"version":3,"file":"Socketeer.js","sourceRoot":"","sources":["../../../../src/common/desktop/Socketeer.ts"],"names":[],"mappings":"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","sourcesContent":["import type { App } from \"electron\"\nimport type { WindowManager } from \"./DesktopWindowManager\"\nimport { isMailAddress } from \"../misc/FormatValidator\"\nimport { log } from \"./DesktopLog\"\nimport type { TimeoutSetter } from \"@tutao/tutanota-utils\"\nimport { NetExports } from \"./ElectronExportTypes\"\nimport { Server, Socket } from \"node:net\"\n\nconst SOCKET_PATH = \"/tmp/tutadb.sock\"\n\n/**\n * this is used to control our administration tool\n */\nexport class Socketeer {\n\tprivate _server: Server | null = null\n\tprivate _connection: Socket | null = null\n\tprivate readonly _delayHandler: TimeoutSetter\n\tprivate readonly _net: NetExports\n\n\tconstructor(net: NetExports, app: App, delayHandler: TimeoutSetter = setTimeout) {\n\t\tthis._net = net\n\t\tthis._delayHandler = delayHandler\n\t\tapp.on(\"will-quit\", () => {\n\t\t\tif (this._server || this._connection) {\n\t\t\t\tif (this._connection) {\n\t\t\t\t\tthis._connection.end()\n\t\t\t\t}\n\n\t\t\t\tif (this._server) {\n\t\t\t\t\tthis._server.close()\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tattach(wm: WindowManager) {\n\t\tthis.startClient(async (msg) => {\n\t\t\tconst mailAddress = JSON.parse(msg)\n\n\t\t\tif (typeof mailAddress === \"string\" && isMailAddress(mailAddress, false)) {\n\t\t\t\tconst targetWindow = await wm.getLastFocused(false)\n\t\t\t\ttargetWindow.desktopFacade.openCustomer(mailAddress)\n\t\t\t}\n\t\t})\n\t}\n\n\tstartServer() {\n\t\tlog.debug(\"opening admin socket\")\n\n\t\tif (this._server) {\n\t\t\treturn\n\t\t}\n\n\t\tconst server = (this._server = this._net\n\t\t\t.createServer((c) => {\n\t\t\t\tlog.debug(\"got connection\")\n\t\t\t\tthis._connection = c\n\t\t\t\tc.on(\"data\", () => {\n\t\t\t\t\tconsole.warn(\"Data was pushed through admin socket, aborting connection\")\n\t\t\t\t\tc.destroy()\n\t\t\t\t}).on(\"end\", () => {\n\t\t\t\t\tthis._connection = null\n\t\t\t\t})\n\t\t\t})\n\t\t\t.on(\"listening\", () => {\n\t\t\t\tlog.debug(\"Socketeer: server is listening\")\n\t\t\t})\n\t\t\t.on(\"error\", (e) => {\n\t\t\t\tlog.warn(\"Socketeer: server error\", e)\n\n\t\t\t\t// @ts-ignore Should be name or message instead?\n\t\t\t\tif (e.code === \"EADDRINUSE\") {\n\t\t\t\t\tthis._delayHandler(() => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tserver.close()\n\t\t\t\t\t\t\tserver.listen(SOCKET_PATH)\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlog.error(\"Socketeer: restart error: \", e)\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1000)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on(\"close\", () => {\n\t\t\t\tlog.debug(\"Socketeer: server is closed\")\n\t\t\t\tthis._server = null\n\t\t\t}))\n\n\t\tthis._server.listen(SOCKET_PATH)\n\t}\n\n\tsendSocketMessage(msg: any) {\n\t\tif (this._connection) {\n\t\t\tthis._connection.write(JSON.stringify(msg), \"utf8\")\n\t\t}\n\t}\n\n\tstartClient(ondata: (arg0: string) => unknown) {\n\t\tif (this._connection) {\n\t\t\treturn\n\t\t}\n\n\t\tthis._connection = this._net\n\t\t\t.createConnection(SOCKET_PATH)\n\t\t\t.on(\"connect\", () => {\n\t\t\t\tlog.debug(\"socket connected\")\n\t\t\t})\n\t\t\t.on(\"close\", (hadError) => {\n\t\t\t\tif (hadError) {\n\t\t\t\t\tthis._tryReconnect(ondata)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on(\"end\", () => {\n\t\t\t\tlog.debug(\"socket disconnected\")\n\n\t\t\t\tthis._tryReconnect(ondata)\n\t\t\t})\n\t\t\t.on(\"error\", (e) => {\n\t\t\t\t// @ts-ignore Should be name or message instead?\n\t\t\t\tif (e.code !== \"ENOENT\") {\n\t\t\t\t\tconsole.error(\"Unexpected Socket Error:\", e)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on(\"data\", ondata)\n\t}\n\n\t_tryReconnect(ondata: (arg0: string) => unknown): void {\n\t\tthis._connection = null\n\n\t\tthis._delayHandler(() => {\n\t\t\tthis.startClient(ondata)\n\t\t}, 1000)\n\t}\n}\n"]}