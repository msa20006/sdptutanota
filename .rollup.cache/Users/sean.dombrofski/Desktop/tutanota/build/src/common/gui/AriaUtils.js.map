{"version":3,"file":"AriaUtils.js","sourceRoot":"","sources":["../../../../src/common/gui/AriaUtils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAA;AAaxD,oBAAoB,EAAE,CAAA;AAmCtB,MAAM,UAAU,aAAa;IAC5B,OAAO;QACN,WAAW,oCAAqB;QAChC,aAAa,EAAE,MAAM;KACrB,CAAA;AACF,CAAC;AAsBD;;;;GAIG;AACH,MAAM,UAAU,aAAa,CAAC,IAAmB,EAAE,KAAc;IAChE,OAAO;QACN,KAAK,EAAE,cAAc;QACrB,IAAI;QACJ,QAAQ,kCAAuB;QAC/B,YAAY,EAAE,KAAK;KACnB,CAAA;AACF,CAAC","sourcesContent":["import { assertMainOrNodeBoot } from \"../api/common/Env\"\n/**\n * Collections of utility functions to support Accessible Rich Internet Applications (ARIA).\n *\n * https://www.w3.org/TR/wai-aria-practices/\n * https://www.w3.org/TR/wai-aria-1.1/\n * https://webaim.org/techniques/aria/\n * https://www.w3.org/TR/wai-aria-1.1/\n *\n */\nimport { TabIndex } from \"../api/common/TutanotaConstants\"\nimport { lang, MaybeTranslation } from \"../misc/LanguageViewModel.js\"\n\nassertMainOrNodeBoot()\n\n// See: https://webaim.org/techniques/aria/#landmarks\nexport const enum AriaLandmarks {\n\tBanner = \"banner\",\n\tSearch = \"search\",\n\tNavigation = \"navigation\",\n\tMain = \"main\",\n\tComplementary = \"complementary\",\n\tContentinfo = \"contentinfo\",\n\tRegion = \"region\",\n}\n\nexport const enum AriaLiveRegions {\n\tAlert = \"alert\",\n\tLog = \"log\",\n\tMarquee = \"Marquee\",\n\tStatus = \"status\",\n\tTimer = \"timer\",\n}\n\nexport const enum AriaWindow {\n\tAlertDialog = \"alertdialog\",\n\tDialog = \"dialog\",\n}\n\nconst enum AriaLiveData {\n\t//default\n\tOff = \"off\",\n\t//\tIndicates that updates to the region should be presented at the next graceful opportunity\n\tPolite = \"polite\",\n\t//region has the highest priority\n\tAssertive = \"assertive\",\n}\n\nexport function liveDataAttrs(): Record<string, string> {\n\treturn {\n\t\t\"aria-live\": AriaLiveData.Polite,\n\t\t\"aria-atomic\": \"true\",\n\t}\n}\n\nexport const enum AriaPopupType {\n\tNone = \"false\",\n\tMenu = \"menu\",\n\tListBox = \"listbox\",\n\tTree = \"tree\",\n\tGrid = \"grid\",\n\tDialog = \"dialog\",\n}\n\nexport const enum AriaRole {\n\tMenu = \"Menu\",\n\tMenuItem = \"menuitem\",\n\tCombobox = \"combobox\",\n\tListbox = \"listbox\",\n\tOption = \"option\",\n\tSwitch = \"switch\",\n\tMenuItemCheckbox = \"menuitemcheckbox\",\n\tRadioGroup = \"radiogroup\",\n}\n\n/**\n * construct spreadable landmark attributes for screen readers.\n * return value includes a hide-outline class that will be overridden if the selector\n * used to construct the element contains other classes.\n */\nexport function landmarkAttrs(role: AriaLandmarks, label?: string): Record<string, string | undefined> {\n\treturn {\n\t\tclass: \"hide-outline\",\n\t\trole,\n\t\ttabindex: TabIndex.Programmatic,\n\t\t\"aria-label\": label,\n\t}\n}\n"]}