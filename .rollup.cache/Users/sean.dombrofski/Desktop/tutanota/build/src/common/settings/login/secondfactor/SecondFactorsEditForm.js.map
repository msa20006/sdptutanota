{"version":3,"file":"SecondFactorsEditForm.js","sourceRoot":"","sources":["../../../../../../src/common/settings/login/secondfactor/SecondFactorsEditForm.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Children } from \"mithril\"\nimport { assertMainOrNode } from \"../../../api/common/Env.js\"\nimport type { SecondFactor, User } from \"../../../api/entities/sys/TypeRefs.js\"\nimport { SecondFactorTypeRef } from \"../../../api/entities/sys/TypeRefs.js\"\nimport { assertNotNull, LazyLoaded, neverNull, noOp } from \"@tutao/tutanota-utils\"\nimport { Icons } from \"../../../gui/base/icons/Icons.js\"\nimport { InfoLink, lang } from \"../../../misc/LanguageViewModel.js\"\nimport { assertEnumValue, SecondFactorType } from \"../../../api/common/TutanotaConstants.js\"\nimport type { TableAttrs, TableLineAttrs } from \"../../../gui/base/Table.js\"\nimport { ColumnWidth, Table } from \"../../../gui/base/Table.js\"\nimport { NotAuthorizedError, NotFoundError } from \"../../../api/common/error/RestError.js\"\nimport { ifAllowedTutaLinks } from \"../../../gui/base/GuiUtils.js\"\nimport { locator } from \"../../../api/main/CommonLocator.js\"\nimport { SecondFactorEditDialog } from \"./SecondFactorEditDialog.js\"\nimport { SecondFactorTypeToNameTextId } from \"./SecondFactorEditModel.js\"\nimport { IconButtonAttrs } from \"../../../gui/base/IconButton.js\"\nimport { ButtonSize } from \"../../../gui/base/ButtonSize.js\"\nimport { appIdToLoginUrl } from \"../../../misc/2fa/SecondFactorUtils.js\"\nimport { DomainConfigProvider } from \"../../../api/common/DomainConfigProvider.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../api/common/utils/EntityUpdateUtils.js\"\nimport { MoreInfoLink } from \"../../../misc/news/MoreInfoLink.js\"\nimport { showRequestPasswordDialog } from \"../../../misc/passwords/PasswordRequestDialog\"\nimport { LoginFacade } from \"../../../api/worker/facades/LoginFacade\"\nimport { showProgressDialog } from \"../../../gui/dialogs/ProgressDialog\"\nimport { Dialog } from \"../../../gui/base/Dialog\"\n\nassertMainOrNode()\n\nexport class SecondFactorsEditForm {\n\t_2FALineAttrs: TableLineAttrs[]\n\n\tconstructor(\n\t\tprivate readonly user: LazyLoaded<User>,\n\t\tprivate readonly domainConfigProvider: DomainConfigProvider,\n\t\tprivate readonly loginFacade: LoginFacade,\n\t\tprivate askForPassword: boolean,\n\t\tprivate isDeactivated: boolean,\n\t) {\n\t\tthis._2FALineAttrs = []\n\n\t\tthis._updateSecondFactors()\n\n\t\tthis.view = this.view.bind(this)\n\t}\n\n\tview(): Children {\n\t\tconst secondFactorTableAttrs: TableAttrs = {\n\t\t\tcolumnHeading: [\"name_label\", \"type_label\"],\n\t\t\tcolumnWidths: [ColumnWidth.Largest, ColumnWidth.Largest],\n\t\t\tlines: this._2FALineAttrs,\n\t\t\tshowActionButtonColumn: true,\n\t\t\taddButtonAttrs: {\n\t\t\t\ttitle: \"addSecondFactor_action\",\n\t\t\t\tclick: () => {\n\t\t\t\t\tif (this.isDeactivated) {\n\t\t\t\t\t\tDialog.message(\"userAccountDeactivated_msg\")\n\t\t\t\t\t} else if (this.askForPassword) {\n\t\t\t\t\t\tthis.showAddSecondFactorDialogWithPasswordCheck()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showAddSecondFactorDialog()\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ticon: Icons.Add,\n\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t},\n\t\t}\n\t\treturn [\n\t\t\tm(\".h4.mt-l\", lang.get(\"secondFactorAuthentication_label\")),\n\t\t\tm(Table, secondFactorTableAttrs),\n\t\t\tthis.domainConfigProvider.getCurrentDomainConfig().firstPartyDomain\n\t\t\t\t? [\n\t\t\t\t\t\tifAllowedTutaLinks(locator.logins, InfoLink.SecondFactor, (link) =>\n\t\t\t\t\t\t\tm(MoreInfoLink, {\n\t\t\t\t\t\t\t\tlink: link,\n\t\t\t\t\t\t\t\tisSmall: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t),\n\t\t\t\t  ]\n\t\t\t\t: null,\n\t\t]\n\t}\n\n\tasync _updateSecondFactors(): Promise<void> {\n\t\tconst user = await this.user.getAsync()\n\t\tconst factors = await locator.entityClient.loadAll(SecondFactorTypeRef, neverNull(user.auth).secondFactors)\n\t\t// If we have keys registered on multiple domains (read: whitelabel) then we display domain for each\n\t\tconst loginDomains = new Set<string>()\n\n\t\tfor (const f of factors) {\n\t\t\tconst isU2F = f.type === SecondFactorType.u2f || f.type === SecondFactorType.webauthn\n\n\t\t\tif (isU2F) {\n\t\t\t\tconst loginDomain = appIdToLoginUrl(assertNotNull(f.u2f).appId, this.domainConfigProvider)\n\t\t\t\tloginDomains.add(loginDomain)\n\t\t\t}\n\t\t}\n\n\t\tthis._2FALineAttrs = factors.map((f) => {\n\t\t\tconst removeButtonAttrs: IconButtonAttrs = {\n\t\t\t\ttitle: \"remove_action\",\n\t\t\t\tclick: () => {\n\t\t\t\t\tif (this.isDeactivated) {\n\t\t\t\t\t\tDialog.message(\"userAccountDeactivated_msg\")\n\t\t\t\t\t} else if (this.askForPassword) {\n\t\t\t\t\t\tthis.removeSecondFactorWithPasswordCheck(f)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.removeSecondFactor(f)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ticon: Icons.Cancel,\n\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t}\n\n\t\t\tconst factorName = this.formatSecondFactorName(f, loginDomains)\n\t\t\tconst type = assertEnumValue(SecondFactorType, f.type)\n\t\t\treturn {\n\t\t\t\tcells: [factorName, lang.get(SecondFactorTypeToNameTextId[type])],\n\t\t\t\tactionButtonAttrs: locator.logins.getUserController().isGlobalAdmin() ? removeButtonAttrs : null,\n\t\t\t}\n\t\t})\n\t\tm.redraw()\n\t}\n\n\tprivate formatSecondFactorName(factor: SecondFactor, loginDomains: ReadonlySet<string>): string {\n\t\tconst isU2F = factor.type === SecondFactorType.u2f || factor.type === SecondFactorType.webauthn\n\t\t// we only show the domains when we have keys registered for different domains\n\t\tconst requiresDomainDisambiguation = isU2F && loginDomains.size > 1\n\n\t\tif (requiresDomainDisambiguation) {\n\t\t\tconst prefix = factor.name.length > 0 ? \" - \" : \"\"\n\t\t\tconst loginUrlString = appIdToLoginUrl(neverNull(factor.u2f).appId, this.domainConfigProvider)\n\t\t\tconst loginDomain = new URL(loginUrlString).hostname\n\t\t\treturn factor.name + prefix + loginDomain\n\t\t} else {\n\t\t\treturn factor.name\n\t\t}\n\t}\n\n\tprivate showAddSecondFactorDialogWithPasswordCheck() {\n\t\tconst dialog = showRequestPasswordDialog({\n\t\t\taction: async (passphrase) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst token = await this.loginFacade.getVerifierToken(passphrase)\n\t\t\t\t\tthis.showAddSecondFactorDialog(token)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof NotAuthorizedError) {\n\t\t\t\t\t\treturn lang.get(\"invalidPassword_msg\")\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdialog.close()\n\t\t\t\treturn \"\"\n\t\t\t},\n\t\t\tcancel: {\n\t\t\t\ttextId: \"cancel_action\",\n\t\t\t\taction: noOp,\n\t\t\t},\n\t\t})\n\t}\n\n\tprivate showAddSecondFactorDialog(token?: string) {\n\t\tSecondFactorEditDialog.loadAndShow(locator.entityClient, this.user, token)\n\t}\n\n\tprivate removeSecondFactorWithPasswordCheck(secondFactorToRemove: SecondFactor) {\n\t\tconst dialog = showRequestPasswordDialog({\n\t\t\taction: async (passphrase) => {\n\t\t\t\tlet token = undefined\n\t\t\t\ttry {\n\t\t\t\t\ttoken = await this.loginFacade.getVerifierToken(passphrase)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof NotAuthorizedError) {\n\t\t\t\t\t\treturn lang.get(\"invalidPassword_msg\")\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.removeSecondFactor(secondFactorToRemove, token)\n\t\t\t\tdialog.close()\n\t\t\t\treturn \"\"\n\t\t\t},\n\t\t\tmessageText: lang.get(\"confirmDeleteSecondFactor_msg\"),\n\t\t\tcancel: {\n\t\t\t\ttextId: \"cancel_action\",\n\t\t\t\taction: noOp,\n\t\t\t},\n\t\t})\n\t}\n\n\tprivate removeSecondFactor(secondFactorToRemove: SecondFactor, token?: string) {\n\t\ttry {\n\t\t\tlet options = undefined\n\t\t\tif (token) {\n\t\t\t\toptions = { extraHeaders: { token } }\n\t\t\t}\n\t\t\tshowProgressDialog(\"pleaseWait_msg\", locator.entityClient.erase(secondFactorToRemove, options))\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\tconsole.log(\"could not delete second factor (already deleted)\")\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\tentityEventReceived(update: EntityUpdateData): Promise<void> {\n\t\tif (isUpdateForTypeRef(SecondFactorTypeRef, update)) {\n\t\t\treturn this._updateSecondFactors()\n\t\t} else {\n\t\t\treturn Promise.resolve()\n\t\t}\n\t}\n}\n"]}