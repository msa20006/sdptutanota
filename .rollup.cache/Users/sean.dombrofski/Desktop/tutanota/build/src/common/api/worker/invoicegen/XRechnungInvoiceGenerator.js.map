{"version":3,"file":"XRechnungInvoiceGenerator.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/invoicegen/XRechnungInvoiceGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import { InvoiceDataGetOut, InvoiceDataItem } from \"../../entities/sys/TypeRefs.js\"\nimport XRechnungUBLTemplate from \"./XRechnungUBLTemplate.js\"\nimport InvoiceTexts from \"./InvoiceTexts.js\"\nimport { countryUsesGerman, getInvoiceItemTypeName, InvoiceType, PaymentMethod, VatType } from \"./InvoiceUtils.js\"\n\nconst DE_POSTAL_CODE_REGEX = new RegExp(/\\d{5}/)\nconst CITY_NAME_REGEX = new RegExp(/\\d{5}/)\n\nconst PaymentMethodTypeCodes: Record<PaymentMethod, NumberString> = Object.freeze({\n\t[PaymentMethod.INVOICE]: \"31\",\n\t[PaymentMethod.CREDIT_CARD]: \"97\",\n\t[PaymentMethod.SEPA_UNUSED]: \"59\",\n\t[PaymentMethod.PAYPAL]: \"68\",\n\t[PaymentMethod.ACCOUNT_BALANCE]: \"97\",\n})\n\nconst VatTypeCategoryCodes: Record<VatType, string> = Object.freeze({\n\t[VatType.NO_VAT]: \"E\",\n\t[VatType.ADD_VAT]: \"S\",\n\t[VatType.VAT_INCLUDED_SHOWN]: \"S\",\n\t[VatType.VAT_INCLUDED_HIDDEN]: \"S\",\n\t[VatType.NO_VAT_CHARGE_TUTAO]: \"AE\",\n})\n\n/**\n * Object for generating XRechnung invoices.\n * These are electronic invoices conforming to the European standard EN16931 and the German CIUS+Extension XRechnung standard.\n * They are a legal requirement and also improve the billing process for business users.\n * The resulting invoice is an XML file in UBL syntax.\n *\n * This generator is ONLY responsible for processing the data it gets and formatting it in a way that does not change anything about it.\n * If adjustments to the data must be made prior to generation, then these should take place within the RenderInvoice service.\n */\nexport class XRechnungInvoiceGenerator {\n\tprivate readonly languageCode: \"de\" | \"en\" = \"en\"\n\tprivate readonly invoiceNumber: string\n\tprivate readonly customerId: string\n\tprivate readonly buyerMailAddress: string\n\tprivate invoice: InvoiceDataGetOut\n\tprivate itemIndex: number = 0\n\tprivate discountItems: InvoiceDataItem[] = []\n\tprivate totalDiscountSum: number = -1\n\n\tconstructor(invoice: InvoiceDataGetOut, invoiceNumber: string, customerId: string, buyerMailAddress: string) {\n\t\tthis.invoice = invoice\n\t\tthis.invoiceNumber = invoiceNumber\n\t\tthis.customerId = customerId\n\t\tthis.languageCode = countryUsesGerman(this.invoice.country)\n\t\tthis.buyerMailAddress = buyerMailAddress\n\t}\n\n\t/**\n\t * Generate the XRechnung xml file\n\t */\n\tgenerate(): Uint8Array {\n\t\tlet stringTemplate =\n\t\t\t`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n` +\n\t\t\t(this.invoice.invoiceType === InvoiceType.INVOICE ? XRechnungUBLTemplate.RootInvoice : XRechnungUBLTemplate.RootCreditNote)\n\t\tstringTemplate = stringTemplate\n\t\t\t.replace(\"{slotMain}\", XRechnungUBLTemplate.Main)\n\t\t\t.replace(\"{slotInvoiceLines}\", this.resolveInvoiceLines()) // Must run first to calculate potential discounts\n\t\t\t.replace(\"{invoiceNumber}\", this.invoiceNumber)\n\t\t\t.replace(\"{issueDate}\", formatDate(this.invoice.date))\n\t\t\t.replace(\"{slotInvoiceType}\", this.resolveInvoiceType())\n\t\t\t.replace(\"{buyerId}\", this.customerId)\n\t\t\t.replace(\"{slotSeller}\", XRechnungUBLTemplate.Seller)\n\t\t\t.replace(\"{slotBuyer}\", this.resolveBuyer())\n\t\t\t.replace(\"{paymentMeansCode}\", PaymentMethodTypeCodes[this.invoice.paymentMethod as PaymentMethod])\n\t\t\t.replace(\"{slotPaymentTerms}\", this.resolvePaymentTerms())\n\t\t\t.replace(\"{slotAllowanceCharge}\", this.resolveAllowanceCharge())\n\t\t\t.replace(\"{slotTotalTax}\", this.resolveTotalTax())\n\t\t\t.replace(\"{slotDocumentTotals}\", this.resolveDocumentsTotal())\n\t\t\t.replaceAll(/^\\t\\t/gm, \"\")\n\t\treturn new TextEncoder().encode(stringTemplate)\n\t}\n\n\t/**\n\t * Resolves the root of the xml depending on invoice type (billing invoice or credit)\n\t * @private\n\t */\n\tprivate resolveInvoiceType(): string {\n\t\tif (this.invoice.invoiceType === InvoiceType.INVOICE) {\n\t\t\treturn `<cbc:InvoiceTypeCode>380</cbc:InvoiceTypeCode>`\n\t\t}\n\t\treturn `<cbc:CreditNoteTypeCode>381</cbc:CreditNoteTypeCode>`\n\t}\n\n\t/**\n\t * Resolves placeholders concerning the buyer (customer)\n\t * buyerMail - Electronic address of the customer\n\t * buyerStreetName - despite its name, also includes the street number\n\t * buyerCityName - self-explanatory\n\t * buyerPostalZone - despite its name, only refers to the postal code, not any associated city\n\t * buyerCountryCode - self-explanatory\n\t * buyerName - Legal name / company name of the customer -> The first line of the address field\n\t * @private\n\t */\n\tprivate resolveBuyer(): string {\n\t\tconst addressParts = this.invoice.address.split(\"\\n\")\n\t\treturn XRechnungUBLTemplate.Buyer.replace(\"{buyerMail}\", this.buyerMailAddress)\n\t\t\t.replace(\"{buyerStreetName}\", addressParts[1] ?? \"STREET NAME UNKNOWN\")\n\t\t\t.replace(\"{buyerCityName}\", extractCityName(addressParts[2] ?? \"\"))\n\t\t\t.replace(\"{buyerPostalZone}\", extractPostalCode(addressParts[2] ?? \"\"))\n\t\t\t.replace(\"{buyerCountryCode}\", this.invoice.country)\n\t\t\t.replace(\"{buyerAddressLine}\", this.invoice.address.replaceAll(\"\\n\", \" \"))\n\t\t\t.replace(\"{slotBuyerVatInfo}\", this.resolveBuyerVatInfo())\n\t\t\t.replace(\"{buyerName}\", addressParts[0] ?? \"BUYER NAME UNKNOWN\")\n\t}\n\n\t/**\n\t * Resolves tax info about the buyer (customer). Only resolved if the buyer has a vatIdNumber.\n\t * buyerVatId - Customer's vatIdNumber\n\t * @private\n\t */\n\tprivate resolveBuyerVatInfo(): string {\n\t\tif (this.invoice.vatIdNumber != null) {\n\t\t\treturn XRechnungUBLTemplate.BuyerVatInfo.replace(\"{buyerVatId}\", this.invoice.vatIdNumber)\n\t\t}\n\t\treturn \"\"\n\t}\n\n\t/**\n\t * Resolves the payment note, i.e. the instructions for the buyer\n\t * These are the same texts below the summary table of a PDF invoice\n\t * @private\n\t */\n\tprivate resolvePaymentNote(): string {\n\t\tlet paymentNote = \"\"\n\t\tif (this.invoice.invoiceType === InvoiceType.INVOICE) {\n\t\t\tswitch (this.invoice.paymentMethod) {\n\t\t\t\tcase PaymentMethod.INVOICE:\n\t\t\t\t\tpaymentNote += `${InvoiceTexts[this.languageCode].paymentInvoiceDue1} ${InvoiceTexts[this.languageCode].paymentInvoiceDue2} ${\n\t\t\t\t\t\tInvoiceTexts[this.languageCode].paymentInvoiceHolder\n\t\t\t\t\t} ${InvoiceTexts[this.languageCode].paymentInvoiceBank} ${InvoiceTexts[this.languageCode].paymentInvoiceIBAN} ${\n\t\t\t\t\t\tInvoiceTexts[this.languageCode].paymentInvoiceBIC\n\t\t\t\t\t} ${InvoiceTexts[this.languageCode].paymentInvoiceProvideNumber1} ${this.invoiceNumber} ${\n\t\t\t\t\t\tInvoiceTexts[this.languageCode].paymentInvoiceProvideNumber2\n\t\t\t\t\t}`\n\t\t\t\t\tbreak\n\t\t\t\tcase PaymentMethod.CREDIT_CARD:\n\t\t\t\t\tpaymentNote += `${InvoiceTexts[this.languageCode].paymentCreditCard}`\n\t\t\t\t\tbreak\n\t\t\t\tcase PaymentMethod.PAYPAL:\n\t\t\t\t\tpaymentNote += `${InvoiceTexts[this.languageCode].paymentPaypal}`\n\t\t\t\t\tbreak\n\t\t\t\tcase PaymentMethod.ACCOUNT_BALANCE:\n\t\t\t\t\tpaymentNote += `${InvoiceTexts[this.languageCode].paymentAccountBalance}`\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t\tpaymentNote += \" \" + InvoiceTexts[this.languageCode].thankYou\n\t\t}\n\t\treturn paymentNote\n\t}\n\n\t/**\n\t * Resolves the payment terms (supplementary note to customer) if the invoice is a billing invoice\n\t * @private\n\t */\n\tprivate resolvePaymentTerms(): string {\n\t\tif (this.invoice.invoiceType === InvoiceType.INVOICE) {\n\t\t\t// language=HTML\n\t\t\treturn `\n\t\t\t\t<cac:PaymentTerms>\n\t\t\t\t\t<cbc:Note>${this.resolvePaymentNote()}</cbc:Note>\n\t\t\t\t</cac:PaymentTerms>\n\t\t\t`\n\t\t}\n\t\treturn \"\"\n\t}\n\n\t/**\n\t * Resolves all information about potential discounts\n\t * totalDiscount - Inverted sum of all discount invoiceitems\n\t * vatType - Standardized VAT category code\n\t * vatPercent - Percentage of the vat applied. I.e. 19% -> vatPercent == 19\n\t * taxableAmount - Amount that is subject to the tax. Usually this is the entire amount, so the subTotal\n\t * vatAmount - The amount of the tax. This is equal to \"taxableAmount * vatPercent\"\n\t * @private\n\t */\n\tprivate resolveAllowanceCharge(): string {\n\t\treturn XRechnungUBLTemplate.AllowanceCharge.replace(\"{totalDiscount}\", this.calculateTotalDiscount().toFixed(2))\n\t\t\t.replace(\"{vatType}\", VatTypeCategoryCodes[this.invoice.vatType as VatType])\n\t\t\t.replace(\"{vatPercent}\", this.invoice.vatRate)\n\t\t\t.replace(\"{slotTaxExemptionReason}\", this.resolveTaxExemptionReason())\n\t\t\t.replace(\"{taxableAmount}\", this.getVatExcludedPrice(this.invoice.subTotal))\n\t\t\t.replaceAll(\"{vatAmount}\", this.invoice.vat)\n\t}\n\n\t/**\n\t * Resolves the total tax slot: summarized information of all applied taxes (vat)\n\t * vatType - Standardized VAT category code\n\t * vatPercent - Percentage of the vat applied. I.e. 19% -> vatPercent == 19\n\t * taxableAmount - Amount that is subject to the tax. Usually this is the entire amount, so the subTotal\n\t * vatAmount - The amount of the tax. This is equal to \"taxableAmount * vatPercent\"\n\t * @private\n\t */\n\tprivate resolveTotalTax(): string {\n\t\treturn XRechnungUBLTemplate.TaxTotal.replace(\"{vatType}\", VatTypeCategoryCodes[this.invoice.vatType as VatType])\n\t\t\t.replace(\"{vatPercent}\", this.invoice.vatRate)\n\t\t\t.replace(\"{slotTaxExemptionReason}\", this.resolveTaxExemptionReason())\n\t\t\t.replace(\"{taxableAmount}\", this.getVatExcludedPrice(this.invoice.subTotal))\n\t\t\t.replaceAll(\"{vatAmount}\", this.invoice.vat)\n\t}\n\n\t/**\n\t * Resolves the textual reason why taxes are exempt. Only resolved if the vat type is reverse-charge\n\t * @private\n\t */\n\tprivate resolveTaxExemptionReason(): string {\n\t\t// Needs fix @arm, @jug, @jop\n\t\tif (this.invoice.vatType === VatType.NO_VAT || this.invoice.vatType === VatType.NO_VAT_CHARGE_TUTAO) {\n\t\t\treturn `<cbc:TaxExemptionReason>Umkehrung der Steuerschuldnerschaft</cbc:TaxExemptionReason>`\n\t\t}\n\t\treturn \"\"\n\t}\n\n\t/**\n\t * Resolves the document total slot: summarized information of the pricing\n\t * sumOfInvoiceLines - The total amount of all invoice items summed up alongside their quantity (amount): subTotal\n\t * invoiceExclusiveVat - The total amount of the entire invoice without vat: subTotal\n\t * invoiceInclusiveVat - The total amount of the entire invoice with vat: grandTotal\n\t * amountDueForPayment - The final amount the buyer is billed with: grandTotal\n\t * @private\n\t */\n\tprivate resolveDocumentsTotal(): string {\n\t\treturn XRechnungUBLTemplate.DocumentTotals.replace(\n\t\t\t\"{sumOfInvoiceLines}\",\n\t\t\tthis.getVatExcludedPrice((parseFloat(this.invoice.subTotal) + this.calculateTotalDiscount()).toFixed(2)),\n\t\t)\n\t\t\t.replace(\"{invoiceExclusiveVat}\", this.getVatExcludedPrice(this.invoice.subTotal))\n\t\t\t.replace(\"{invoiceInclusiveVat}\", this.invoice.grandTotal)\n\t\t\t.replace(\"{amountDueForPayment}\", this.invoice.grandTotal)\n\t\t\t.replace(\"{totalDiscount}\", this.calculateTotalDiscount().toFixed(2))\n\t}\n\n\t/**\n\t * Resolves all invoice items (invoiceLines) by iterating over every invoice item and resolving a list for it\n\t * @private\n\t */\n\tprivate resolveInvoiceLines(): string {\n\t\tlet invoiceLines = \"\"\n\t\tif (this.invoice.invoiceType === InvoiceType.INVOICE) {\n\t\t\tfor (const invoiceItem of this.invoice.items) {\n\t\t\t\tinvoiceLines += this.resolveInvoiceLine(invoiceItem)\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const invoiceItem of this.invoice.items) {\n\t\t\t\tinvoiceLines += this.resolveCreditNoteLine(invoiceItem)\n\t\t\t}\n\t\t}\n\t\treturn invoiceLines\n\t}\n\n\t/**\n\t * Resolves a singular invoice item (invoiceLine): information about one row in an invoice table\n\t * invoiceLineQuantity - The amount (quantity) of the item in the invoice line, so the invoiceItem's amount\n\t * invoiceLineTotal - The total price of the invoice line. This is equal to \"itemPrice * quantity\" == totalPrice\n\t * invoiceLineStartDate - self-explanatory\n\t * invoiceLineEndDate - self-explanatory\n\t * invoiceLineItemName - self-explanatory\n\t * invoiceLineItemVatType - Standardized Vat category code for this item. Equal to the vat type of the entire invoice\n\t * invoiceLineItemVatPercent - Percentage of vat applied to this item. Equal to the vat percentage of the entire invoice\n\t * invoiceLineItemPrice - Price of the singular item: singlePrice\n\t * @param invoiceItem\n\t * @private\n\t */\n\tprivate resolveInvoiceLine(invoiceItem: InvoiceDataItem): string {\n\t\tthis.itemIndex++\n\t\t// If the invoice has a negative price it is some form of credit or discount.\n\t\t// This is not the definition of an \"invoice item\" in the traditional sense, and therefore we treat it as a discount later applied to the whole invoice.\n\t\tif (parseFloat(invoiceItem.totalPrice) < 0) {\n\t\t\tthis.discountItems.push(invoiceItem)\n\t\t\treturn \"\"\n\t\t}\n\t\treturn XRechnungUBLTemplate.InvoiceLine.replace(\"{invoiceLineId}\", this.itemIndex.toString())\n\t\t\t.replace(\"{invoiceLineQuantity}\", invoiceItem.amount)\n\t\t\t.replace(\"{invoiceLineTotal}\", this.getVatExcludedPrice(invoiceItem.totalPrice))\n\t\t\t.replace(\"{invoiceLineStartDate}\", formatDate(invoiceItem.startDate))\n\t\t\t.replace(\"{invoiceLineEndDate}\", formatDate(invoiceItem.endDate))\n\t\t\t.replace(\"{invoiceLineItemName}\", getInvoiceItemTypeName(invoiceItem.itemType, this.languageCode))\n\t\t\t.replace(\"{invoiceLineItemVatType}\", VatTypeCategoryCodes[this.invoice.vatType as VatType])\n\t\t\t.replace(\"{invoiceLineItemVatPercent}\", this.invoice.vatRate)\n\t\t\t.replace(\"{invoiceLineItemPrice}\", this.getVatExcludedPrice(getInvoiceItemPrice(invoiceItem)))\n\t}\n\n\t/**\n\t * Same as resolveInvoiceLine but for CreditNotes\n\t * @param invoiceItem\n\t * @private\n\t */\n\tprivate resolveCreditNoteLine(invoiceItem: InvoiceDataItem): string {\n\t\tthis.itemIndex++\n\t\treturn XRechnungUBLTemplate.CreditNoteLine.replace(\"{invoiceLineId}\", this.itemIndex.toString())\n\t\t\t.replace(\"{invoiceLineQuantity}\", invoiceItem.amount)\n\t\t\t.replace(\"{invoiceLineTotal}\", this.getVatExcludedPrice(invoiceItem.totalPrice))\n\t\t\t.replace(\"{invoiceLineStartDate}\", formatDate(invoiceItem.startDate))\n\t\t\t.replace(\"{invoiceLineEndDate}\", formatDate(invoiceItem.endDate))\n\t\t\t.replace(\"{invoiceLineItemName}\", getInvoiceItemTypeName(invoiceItem.itemType, this.languageCode))\n\t\t\t.replace(\"{invoiceLineItemVatType}\", VatTypeCategoryCodes[this.invoice.vatType as VatType])\n\t\t\t.replace(\"{invoiceLineItemVatPercent}\", this.invoice.vatRate)\n\t\t\t.replace(\"{invoiceLineItemPrice}\", this.getVatExcludedPrice(getInvoiceItemPrice(invoiceItem)))\n\t}\n\n\t/**\n\t * Calculates the total discount applied to the entire invoice. The discount is a positive number that is to be subtracted from the invoice total\n\t * The discount is calculated by iterating over every invoiceItem that is of type \"discount\" and adding it up.\n\t * @private\n\t */\n\tprivate calculateTotalDiscount(): number {\n\t\tif (this.totalDiscountSum !== -1) {\n\t\t\treturn this.totalDiscountSum\n\t\t}\n\t\tthis.totalDiscountSum = 0\n\t\tfor (const discountItem of this.discountItems) {\n\t\t\tthis.totalDiscountSum += parseFloat(discountItem.totalPrice)\n\t\t}\n\t\tthis.totalDiscountSum *= -1\n\t\treturn this.totalDiscountSum\n\t}\n\n\t/**\n\t * Recalculates a price if the vat is already included. I.e. subtracts the applied vat\n\t * Returns the price with vat excluded\n\t * @param priceValue\n\t * @private\n\t */\n\tprivate getVatExcludedPrice(priceValue: NumberString): NumberString {\n\t\tswitch (this.invoice.vatType) {\n\t\t\tcase VatType.VAT_INCLUDED_SHOWN:\n\t\t\tcase VatType.VAT_INCLUDED_HIDDEN: {\n\t\t\t\tconst nPriceValue = parseFloat(priceValue)\n\t\t\t\tconst nVat = parseFloat(this.invoice.vat)\n\t\t\t\treturn (nPriceValue - nVat).toFixed(2)\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t\treturn priceValue\n\t}\n}\n\n/**\n * Formats a date to be of the pattern \"yyyy-mm-dd\"\n * @param date\n */\nfunction formatDate(date: Date | null): string {\n\tif (date != null) {\n\t\treturn date.toISOString().split(\"T\")[0]\n\t}\n\treturn \"No date given.\"\n}\n\n/**\n * Returns the price of an invoice item.\n * This is singlePrice if the amount of item is 1 or totalPrice if not.\n * @param invoiceItem\n */\nfunction getInvoiceItemPrice(invoiceItem: InvoiceDataItem): string {\n\tif (invoiceItem.singlePrice != null) {\n\t\treturn invoiceItem.singlePrice\n\t}\n\treturn invoiceItem.totalPrice\n}\n\n/**\n * Naively tries to extract a German postal code.\n * If this extraction fails, returns a string notifying the user to consult their full address line\n * @param addressLine\n */\nexport function extractPostalCode(addressLine: string): string {\n\tconst match = addressLine.match(DE_POSTAL_CODE_REGEX)\n\tif (match && match[0]) {\n\t\treturn match[0].trim()\n\t}\n\treturn \"Could not extract postal code. Please refer to full address line.\"\n}\n\n/**\n * Naively tries to extract the city name from the third line.\n * If this extraction fails, then we accept that the city field of the customer is filled incorrectly and must be manually changed by them\n * @param addressLine\n */\nexport function extractCityName(addressLine: string): string {\n\tconst cityName = addressLine.replace(CITY_NAME_REGEX, \"\").replace(\",\", \"\").trim()\n\tif (cityName === \"\") {\n\t\treturn \"Could not extract city name. Please refer to full address line.\"\n\t}\n\treturn cityName\n}\n"]}