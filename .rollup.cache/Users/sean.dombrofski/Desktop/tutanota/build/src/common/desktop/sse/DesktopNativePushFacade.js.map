{"version":3,"file":"DesktopNativePushFacade.js","sourceRoot":"","sources":["../../../../../src/common/desktop/sse/DesktopNativePushFacade.ts"],"names":[],"mappings":"AAQA,MAAM,OAAO,uBAAuB;IAEjB;IACA;IACA;IACA;IAJlB,YACkB,GAAkB,EAClB,cAAoC,EACpC,YAAiC,EACjC,UAAsB;QAHtB,QAAG,GAAH,GAAG,CAAe;QAClB,mBAAc,GAAd,cAAc,CAAsB;QACpC,iBAAY,GAAZ,YAAY,CAAqB;QACjC,eAAU,GAAV,UAAU,CAAY;IACrC,CAAC;IAEJ,oCAAoC,CAAC,MAAc,EAAE,KAAc;QAClE,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAA;IAChE,CAAC;IAED,oCAAoC,CAAC,MAAc;QAClD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC7B,CAAC;IAED,6BAA6B,CAAC,MAAc;QAC3C,OAAO,IAAI,CAAC,UAAU,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAA;IAC7D,CAAC;IAED,6BAA6B,CAAC,MAAc,EAAE,IAA8B;QAC3E,OAAO,IAAI,CAAC,UAAU,CAAC,6BAA6B,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;IACnE,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,cAAqC;QACjE,8BAA8B;QAC9B,0DAA0D;IAC3D,CAAC;IAED,KAAK,CAAC,iBAAiB;QACtB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAA;QAClD,OAAO,OAAO,EAAE,UAAU,IAAI,IAAI,CAAA;IACnC,CAAC;IAED,KAAK,CAAC,qBAAqB;QAC1B,qEAAqE;QACrE,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAA;IACzB,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,MAAiD;QACrE,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC5B,MAAM,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAA;QACzD,CAAC;IACF,CAAC;IAED,KAAK,CAAC,0BAA0B,CAC/B,UAAkB,EAClB,MAAc,EACd,SAAiB,EACjB,gBAAwB,EACxB,wBAAoC;QAEpC,MAAM,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,UAAU,EAAE,MAAM,EAAE,SAAS,CAAC,CAAA;QACxE,MAAM,IAAI,CAAC,YAAY,CAAC,6BAA6B,CAAC,gBAAgB,EAAE,wBAAwB,CAAC,CAAA;IAClG,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,MAAc;QAC9B,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;IAClC,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,MAAc;QAC3C,MAAM,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAA;IACtD,CAAC;IAED,KAAK,CAAC,gBAAgB;QACrB,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAA;QAC3B,MAAM,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAA;QAC/C,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAA;IAC9B,CAAC;CACD","sourcesContent":["import { NativePushFacade } from \"../../native/common/generatedipc/NativePushFacade.js\"\nimport { EncryptedAlarmNotification } from \"../../native/common/EncryptedAlarmNotification.js\"\nimport { NativeAlarmScheduler } from \"./DesktopAlarmScheduler.js\"\nimport { DesktopAlarmStorage } from \"./DesktopAlarmStorage.js\"\nimport { ExtendedNotificationMode } from \"../../native/common/generatedipc/ExtendedNotificationMode.js\"\nimport { SseStorage } from \"./SseStorage.js\"\nimport { TutaSseFacade } from \"./TutaSseFacade.js\"\n\nexport class DesktopNativePushFacade implements NativePushFacade {\n\tconstructor(\n\t\tprivate readonly sse: TutaSseFacade,\n\t\tprivate readonly alarmScheduler: NativeAlarmScheduler,\n\t\tprivate readonly alarmStorage: DesktopAlarmStorage,\n\t\tprivate readonly sseStorage: SseStorage,\n\t) {}\n\n\tsetReceiveCalendarNotificationConfig(userId: string, value: boolean): Promise<void> {\n\t\tthrow new Error(\"Desktop App should NOT deal with this config\")\n\t}\n\n\tgetReceiveCalendarNotificationConfig(userId: string): Promise<boolean> {\n\t\treturn Promise.resolve(true)\n\t}\n\n\tgetExtendedNotificationConfig(userId: string): Promise<ExtendedNotificationMode> {\n\t\treturn this.sseStorage.getExtendedNotificationConfig(userId)\n\t}\n\n\tsetExtendedNotificationConfig(userId: string, mode: ExtendedNotificationMode): Promise<void> {\n\t\treturn this.sseStorage.setExtendedNotificationConfig(userId, mode)\n\t}\n\n\tasync closePushNotifications(addressesArray: ReadonlyArray<string>): Promise<void> {\n\t\t// only gets called in the app\n\t\t// the desktop client closes notifications on window focus\n\t}\n\n\tasync getPushIdentifier(): Promise<string | null> {\n\t\tconst sseInfo = await this.sseStorage.getSseInfo()\n\t\treturn sseInfo?.identifier ?? null\n\t}\n\n\tasync initPushNotifications(): Promise<void> {\n\t\t// make sure that we are connected if we just received new push datap\n\t\tawait this.sse.connect()\n\t}\n\n\tasync scheduleAlarms(alarms: ReadonlyArray<EncryptedAlarmNotification>): Promise<void> {\n\t\tfor (const alarm of alarms) {\n\t\t\tawait this.alarmScheduler.handleAlarmNotification(alarm)\n\t\t}\n\t}\n\n\tasync storePushIdentifierLocally(\n\t\tidentifier: string,\n\t\tuserId: string,\n\t\tsseOrigin: string,\n\t\tpushIdentifierId: string,\n\t\tpushIdentifierSessionKey: Uint8Array,\n\t): Promise<void> {\n\t\tawait this.sseStorage.storePushIdentifier(identifier, userId, sseOrigin)\n\t\tawait this.alarmStorage.storePushIdentifierSessionKey(pushIdentifierId, pushIdentifierSessionKey)\n\t}\n\n\tasync removeUser(userId: string): Promise<void> {\n\t\tawait this.sse.removeUser(userId)\n\t}\n\n\tasync invalidateAlarmsForUser(userId: string): Promise<void> {\n\t\tawait this.alarmScheduler.unscheduleAllAlarms(userId)\n\t}\n\n\tasync resetStoredState() {\n\t\tawait this.sse.disconnect()\n\t\tawait this.alarmScheduler.unscheduleAllAlarms()\n\t\tawait this.sseStorage.clear()\n\t}\n}\n"]}