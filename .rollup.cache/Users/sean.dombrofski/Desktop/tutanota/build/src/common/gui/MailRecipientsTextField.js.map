{"version":3,"file":"MailRecipientsTextField.js","sourceRoot":"","sources":["../../../../src/common/gui/MailRecipientsTextField.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Children, ClassComponent, Vnode } from \"mithril\"\nimport { BubbleTextField } from \"./base/BubbleTextField.js\"\nimport { Recipient } from \"../api/common/recipients/Recipient.js\"\nimport { px, size } from \"./size.js\"\nimport { Icon, progressIcon } from \"./base/Icon.js\"\nimport { lang, TranslationKey } from \"../misc/LanguageViewModel.js\"\nimport { stringToNameAndMailAddress } from \"../misc/parsing/MailAddressParser.js\"\nimport { DropdownChildAttrs } from \"./base/Dropdown.js\"\nimport { Contact } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { RecipientsSearchModel } from \"../misc/RecipientsSearchModel.js\"\nimport { getFirstOrThrow, lazy } from \"@tutao/tutanota-utils\"\nimport { Dialog } from \"./base/Dialog.js\"\nimport { SearchDropDown } from \"./SearchDropDown.js\"\nimport { findRecipientWithAddress } from \"../api/common/utils/CommonCalendarUtils.js\"\nimport { Icons } from \"./base/icons/Icons.js\"\nimport { theme } from \"./theme.js\"\nimport { getMailAddressDisplayText } from \"../mailFunctionality/SharedMailUtils.js\"\n\nexport interface MailRecipientsTextFieldAttrs {\n\tlabel: TranslationKey\n\ttext: string\n\tonTextChanged: (text: string) => void\n\trecipients: ReadonlyArray<Recipient>\n\tonRecipientAdded: (address: string, name: string | null, contact: Contact | null) => void\n\tonRecipientRemoved: (address: string) => void\n\tgetRecipientClickedDropdownAttrs?: (address: string) => Promise<DropdownChildAttrs[]>\n\tinjectionsRight?: Children | null\n\tdisabled: boolean\n\tsearch: RecipientsSearchModel\n\t/** Limit the search dropdown to this number of suggestions before starting to scroll */\n\tmaxSuggestionsToShow?: number\n\thelpLabel?: lazy<Children> | null\n}\n\n/**\n * A component for inputting a list of recipients\n * recipients are represented as bubbles, and a contact search dropdown is shown as the user types\n */\nexport class MailRecipientsTextField implements ClassComponent<MailRecipientsTextFieldAttrs> {\n\t// don't access me directly, use getter and setter\n\tprivate selectedSuggestionIdx = 0\n\tprivate focused = false\n\n\tview({ attrs }: Vnode<MailRecipientsTextFieldAttrs>): Children {\n\t\treturn [this.renderTextField(attrs), this.focused ? this.renderSuggestions(attrs) : null]\n\t}\n\n\tprivate renderTextField(attrs: MailRecipientsTextFieldAttrs): Children {\n\t\treturn m(BubbleTextField, {\n\t\t\tlabel: attrs.label,\n\t\t\ttext: attrs.text,\n\t\t\thelpLabel: attrs.helpLabel,\n\t\t\tonInput: (text) => {\n\t\t\t\tattrs.search.search(text).then(() => m.redraw())\n\n\t\t\t\t// if the new text length is more than one character longer,\n\t\t\t\t// it means the user pasted the text in, so we want to try and resolve a list of contacts\n\t\t\t\tconst { remainingText, newRecipients, errors } = text.length - attrs.text.length > 1 ? parsePastedInput(text) : parseTypedInput(text)\n\n\t\t\t\tfor (const { address, name } of newRecipients) {\n\t\t\t\t\tattrs.onRecipientAdded(address, name, null)\n\t\t\t\t}\n\n\t\t\t\tif (errors.length === 1 && newRecipients.length === 0) {\n\t\t\t\t\t// if there was a single recipient and it was invalid then just pretend nothing happened\n\t\t\t\t\tattrs.onTextChanged(getFirstOrThrow(errors))\n\t\t\t\t} else {\n\t\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\t\tDialog.message(\n\t\t\t\t\t\t\tlang.makeTranslation(\"invalidPastedRecipients_msg\", `${lang.get(\"invalidPastedRecipients_msg\")}\\n\\n${errors.join(\"\\n\")}`),\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\tattrs.onTextChanged(remainingText)\n\t\t\t\t}\n\t\t\t},\n\t\t\titems: attrs.recipients.map((recipient) => recipient.address),\n\t\t\trenderBubbleText: (address: string) => {\n\t\t\t\tconst name = findRecipientWithAddress(attrs.recipients, address)?.name ?? null\n\t\t\t\treturn lang.makeTranslation(address, getMailAddressDisplayText(name, address, false))\n\t\t\t},\n\t\t\tgetBubbleDropdownAttrs: async (address) => (await attrs.getRecipientClickedDropdownAttrs?.(address)) ?? [],\n\t\t\tonBackspace: () => {\n\t\t\t\tif (attrs.text === \"\" && attrs.recipients.length > 0) {\n\t\t\t\t\tconst { address } = attrs.recipients.slice().pop()!\n\t\t\t\t\tattrs.onTextChanged(address)\n\t\t\t\t\tattrs.onRecipientRemoved(address)\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t},\n\t\t\tonEnterKey: () => {\n\t\t\t\tthis.resolveInput(attrs, true)\n\t\t\t\treturn true\n\t\t\t},\n\t\t\tonUpKey: () => {\n\t\t\t\tthis.setSelectedSuggestionIdx(this.getSelectedSuggestionIdx(attrs) + 1)\n\t\t\t\treturn false\n\t\t\t},\n\t\t\tonDownKey: () => {\n\t\t\t\tthis.setSelectedSuggestionIdx(this.getSelectedSuggestionIdx(attrs) - 1)\n\t\t\t\treturn false\n\t\t\t},\n\t\t\tonFocus: () => {\n\t\t\t\tthis.focused = true\n\t\t\t},\n\t\t\tonBlur: () => {\n\t\t\t\tthis.focused = false\n\t\t\t\tthis.resolveInput(attrs, false)\n\t\t\t\treturn true\n\t\t\t},\n\t\t\tdisabled: attrs.disabled,\n\t\t\tinjectionsRight: m(\".flex.items-center\", [\n\t\t\t\t// Placeholder element for the suggestion progress icon with a fixed width and height to avoid flickering.\n\t\t\t\t// when reaching the end of the input line and when entering a text into the second line.\n\t\t\t\tm(\n\t\t\t\t\t\".flex.align-right.mr-s.flex.items-end.pb-s\",\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\twidth: px(20), // in case the progress icon is not shown we reserve the width of the progress icon\n\t\t\t\t\t\t\theight: px(size.button_height_compact),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tattrs.search.isLoading() ? progressIcon() : null,\n\t\t\t\t),\n\t\t\t\tattrs.injectionsRight,\n\t\t\t]),\n\t\t})\n\t}\n\n\tprivate renderSuggestions(attrs: MailRecipientsTextFieldAttrs): Children {\n\t\treturn m(\n\t\t\t\".rel\",\n\t\t\tm(SearchDropDown, {\n\t\t\t\tsuggestions: attrs.search.results().map((suggestion) => {\n\t\t\t\t\tif (suggestion.type === \"recipient\") {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tfirstRow: suggestion.value.name,\n\t\t\t\t\t\t\tsecondRow: suggestion.value.address,\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tfirstRow: m(Icon, {\n\t\t\t\t\t\t\t\ticon: Icons.People,\n\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\tfill: theme.content_fg,\n\t\t\t\t\t\t\t\t\t\"aria-describedby\": lang.get(\"contactListName_label\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tsecondRow: suggestion.value.name,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tselectedSuggestionIndex: this.getSelectedSuggestionIdx(attrs),\n\t\t\t\tonSuggestionSelected: (idx) => this.selectSuggestion(attrs, idx),\n\t\t\t\tmaxHeight: attrs.maxSuggestionsToShow ?? null,\n\t\t\t}),\n\t\t)\n\t}\n\n\t/**\n\t * Resolves a typed in mail address or one of the suggested ones.\n\t * @param selectSuggestion boolean value indicating whether a suggestion should be selected or not. Should be true if a suggestion is explicitly selected by\n\t * for example hitting the enter key and false e.g. if the dialog is closed\n\t */\n\tprivate resolveInput(attrs: MailRecipientsTextFieldAttrs, selectSuggestion: boolean) {\n\t\tconst suggestions = attrs.search.results()\n\t\tif (suggestions.length > 0 && selectSuggestion) {\n\t\t\tthis.selectSuggestion(attrs, this.getSelectedSuggestionIdx(attrs))\n\t\t} else {\n\t\t\tconst parsed = parseMailAddress(attrs.text)\n\t\t\tif (parsed != null) {\n\t\t\t\tattrs.onRecipientAdded(parsed.address, parsed.name, null)\n\t\t\t\tattrs.onTextChanged(\"\")\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async selectSuggestion(attrs: MailRecipientsTextFieldAttrs, index: number) {\n\t\tconst selection = attrs.search.results()[index]\n\t\tif (selection == null) {\n\t\t\treturn\n\t\t}\n\n\t\tif (selection.type === \"recipient\") {\n\t\t\tconst { address, name, contact } = selection.value\n\t\t\tattrs.onRecipientAdded(address, name, contact)\n\t\t\tattrs.search.clear()\n\t\t\tattrs.onTextChanged(\"\")\n\t\t} else {\n\t\t\tattrs.search.clear()\n\t\t\tattrs.onTextChanged(\"\")\n\t\t\tconst recipients = await attrs.search.resolveContactList(selection.value)\n\t\t\tfor (const { address, name, contact } of recipients) {\n\t\t\t\tattrs.onRecipientAdded(address, name, contact)\n\t\t\t}\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\tprivate getSelectedSuggestionIdx(attrs: MailRecipientsTextFieldAttrs): number {\n\t\treturn Math.min(Math.max(this.selectedSuggestionIdx, 0), attrs.search.results().length - 1)\n\t}\n\n\tprivate setSelectedSuggestionIdx(idx: number) {\n\t\tthis.selectedSuggestionIdx = idx\n\t}\n}\n\ninterface ParsedInput {\n\tremainingText: string\n\tnewRecipients: Array<{ address: string; name: string | null }>\n\terrors: Array<string>\n}\n\n/**\n * Parse a list of valid mail addresses separated by either a semicolon or a comma.\n * Invalid addresses will be returned as a separate list\n */\nexport function parsePastedInput(text: string): ParsedInput {\n\tconst separator = text.indexOf(\";\") !== -1 ? \";\" : \",\"\n\tconst textParts = text.split(separator).map((part) => part.trim())\n\n\tconst result: ParsedInput = {\n\t\tremainingText: \"\",\n\t\tnewRecipients: [],\n\t\terrors: [],\n\t}\n\n\tfor (let part of textParts) {\n\t\tpart = part.trim()\n\n\t\tif (part.length !== 0) {\n\t\t\tconst parsed = parseMailAddress(part)\n\n\t\t\tif (!parsed) {\n\t\t\t\tresult.errors.push(part)\n\t\t\t} else {\n\t\t\t\tresult.newRecipients.push(parsed)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result\n}\n\n/**\n * Parse text when it is typed by the user\n * When the final character is an expected delimiter (';', ',', ' '),\n * then we attempt to parse the preceding text. If it is a valid mail address,\n * it is successfully parsed\n * invalid input gets returned in `remainingText`, `errors` is always empty\n * @param text\n */\nexport function parseTypedInput(text: string): ParsedInput {\n\tconst lastCharacter = text.slice(-1)\n\n\t// on semicolon, comman or space we want to try to resolve the input text\n\tif (lastCharacter === \";\" || lastCharacter === \",\" || lastCharacter === \" \") {\n\t\tconst textMinusLast = text.slice(0, -1)\n\n\t\tconst result = parseMailAddress(textMinusLast)\n\t\tconst remainingText = result != null ? \"\" : textMinusLast\n\n\t\treturn {\n\t\t\tremainingText,\n\t\t\tnewRecipients: result ? [result] : [],\n\t\t\terrors: [],\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tremainingText: text,\n\t\t\tnewRecipients: [],\n\t\t\terrors: [],\n\t\t}\n\t}\n}\n\nexport function parseMailAddress(text: string): { address: string; name: string | null } | null {\n\ttext = text.trim()\n\n\tif (text === \"\") return null\n\n\tconst nameAndMailAddress = stringToNameAndMailAddress(text)\n\n\tif (nameAndMailAddress) {\n\t\tconst name = nameAndMailAddress.name ? nameAndMailAddress.name : null\n\n\t\treturn { name, address: nameAndMailAddress.mailAddress }\n\t} else {\n\t\treturn null\n\t}\n}\n"]}