{"version":3,"file":"DesktopSettingsFacade.js","sourceRoot":"","sources":["../../../../../src/common/desktop/config/DesktopSettingsFacade.ts"],"names":[],"mappings":"AAOA,OAAO,KAAK,QAAQ,MAAM,UAAU,CAAA;AAIpC,MAAM,OAAO,qBAAqB;IAEf;IACA;IACA;IACA;IACA;IALlB,YACkB,IAAmB,EACnB,KAAmB,EACnB,UAA6B,EAC7B,OAA+B,EAC/B,IAAuB;QAJvB,SAAI,GAAJ,IAAI,CAAe;QACnB,UAAK,GAAL,KAAK,CAAc;QACnB,eAAU,GAAV,UAAU,CAAmB;QAC7B,YAAO,GAAP,OAAO,CAAwB;QAC/B,SAAI,GAAJ,IAAI,CAAmB;IACtC,CAAC;IAEJ,KAAK,CAAC,cAAc,CAAC,IAAY,EAAE,WAAmB;QACrD,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAA;IACpD,CAAC;IAED,KAAK,CAAC,YAAY;QACjB,OAAO,IAAI,CAAC,OAAQ,CAAC,YAAY,EAAE,CAAA;IACpC,CAAC;IAED,KAAK,CAAC,gBAAgB;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAA;IAC1C,CAAC;IAED,KAAK,CAAC,iBAAiB;QACtB,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAA;IAC3C,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,IAAsB;QACjD,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC9B,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,IAAsB;QAChD,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC9B,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,IAAsB,EAAE,KAAc;QACjE,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;IACpC,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,IAAsB,EAAE,KAAoB;QACtE,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;IACpC,CAAC;IAED,KAAK,CAAC,kBAAkB;QACvB,MAAM,CAAC,mBAAmB,EAAE,YAAY,EAAE,iBAAiB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAChF,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE;YACrC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;YAC9B,IAAI,CAAC,OAAQ,CAAC,UAAU,IAAI,IAAI;SAChC,CAAC,CAAA;QACF,OAAO;YACN,YAAY;YACZ,mBAAmB;YACnB,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE;YAClD,iBAAiB;SACjB,CAAA;IACF,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC3B,OAAO,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,8BAA8B,CAAA;IACtE,CAAC;IAED,KAAK,CAAC,aAAa;QAClB,OAAO,IAAI,CAAC,OAAQ,CAAC,UAAU,CAAA;IAChC,CAAC;IAED,KAAK,CAAC,gBAAgB;QACrB,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAA;IAClC,CAAC;IAED,KAAK,CAAC,kBAAkB;QACvB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAA;IACpC,CAAC;IAED,KAAK,CAAC,cAAc;QACnB,MAAM,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAA;IAC3C,CAAC;IAED,KAAK,CAAC,gBAAgB;QACrB,MAAM,IAAI,CAAC,KAAK,CAAC,yBAAyB,EAAE,CAAA;IAC7C,CAAC;CACD","sourcesContent":["import { SettingsFacade } from \"../../native/common/generatedipc/SettingsFacade.js\"\nimport { DesktopConfig } from \"./DesktopConfig.js\"\nimport { IntegrationInfo } from \"../../native/common/generatedipc/IntegrationInfo.js\"\nimport { DesktopConfigKey } from \"./ConfigKeys.js\"\nimport { DesktopUtils } from \"../DesktopUtils.js\"\nimport { DesktopIntegrator } from \"../integration/DesktopIntegrator.js\"\nimport { ElectronUpdater } from \"../ElectronUpdater.js\"\nimport * as electron from \"electron\"\nimport { UpdateInfo } from \"electron-updater\"\nimport { LanguageViewModel } from \"../../misc/LanguageViewModel.js\"\n\nexport class DesktopSettingsFacade implements SettingsFacade {\n\tconstructor(\n\t\tprivate readonly conf: DesktopConfig,\n\t\tprivate readonly utils: DesktopUtils,\n\t\tprivate readonly integrator: DesktopIntegrator,\n\t\tprivate readonly updater: ElectronUpdater | null,\n\t\tprivate readonly lang: LanguageViewModel,\n\t) {}\n\n\tasync changeLanguage(code: string, languageTag: string): Promise<void> {\n\t\treturn this.lang.setLanguage({ code, languageTag })\n\t}\n\n\tasync manualUpdate(): Promise<boolean> {\n\t\treturn this.updater!.manualUpdate()\n\t}\n\n\tasync enableAutoLaunch(): Promise<void> {\n\t\treturn this.integrator.enableAutoLaunch()\n\t}\n\n\tasync disableAutoLaunch(): Promise<void> {\n\t\treturn this.integrator.disableAutoLaunch()\n\t}\n\n\tasync getBooleanConfigValue(name: DesktopConfigKey): Promise<boolean> {\n\t\treturn this.conf.getVar(name)\n\t}\n\n\tasync getStringConfigValue(name: DesktopConfigKey): Promise<string | null> {\n\t\treturn this.conf.getVar(name)\n\t}\n\n\tasync setBooleanConfigValue(name: DesktopConfigKey, value: boolean): Promise<void> {\n\t\tawait this.conf.setVar(name, value)\n\t}\n\n\tasync setStringConfigValue(name: DesktopConfigKey, value: string | null): Promise<void> {\n\t\tawait this.conf.setVar(name, value)\n\t}\n\n\tasync getIntegrationInfo(): Promise<IntegrationInfo> {\n\t\tconst [isAutoLaunchEnabled, isIntegrated, isUpdateAvailable] = await Promise.all([\n\t\t\tthis.integrator.isAutoLaunchEnabled(),\n\t\t\tthis.integrator.isIntegrated(),\n\t\t\tthis.updater!.updateInfo != null,\n\t\t])\n\t\treturn {\n\t\t\tisIntegrated,\n\t\t\tisAutoLaunchEnabled,\n\t\t\tisMailtoHandler: this.utils.checkIsMailtoHandler(),\n\t\t\tisUpdateAvailable,\n\t\t}\n\t}\n\n\tasync getSpellcheckLanguages(): Promise<ReadonlyArray<string>> {\n\t\treturn electron.session.defaultSession.availableSpellCheckerLanguages\n\t}\n\n\tasync getUpdateInfo(): Promise<UpdateInfo | null> {\n\t\treturn this.updater!.updateInfo\n\t}\n\n\tasync integrateDesktop(): Promise<void> {\n\t\tawait this.integrator.integrate()\n\t}\n\n\tasync unIntegrateDesktop(): Promise<void> {\n\t\tawait this.integrator.unintegrate()\n\t}\n\n\tasync registerMailto(): Promise<void> {\n\t\tawait this.utils.registerAsMailtoHandler()\n\t}\n\n\tasync unregisterMailto(): Promise<void> {\n\t\tawait this.utils.unregisterAsMailtoHandler()\n\t}\n}\n"]}