{"version":3,"file":"PasswordForm.js","sourceRoot":"","sources":["../../../../src/common/settings/PasswordForm.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Children, Component, Vnode } from \"mithril\"\nimport { Autocomplete } from \"../gui/base/TextField.js\"\nimport { getPasswordStrength, isSecurePassword } from \"../misc/passwords/PasswordUtils.js\"\nimport type { TranslationKey } from \"../misc/LanguageViewModel.js\"\nimport { lang } from \"../misc/LanguageViewModel.js\"\nimport type { Status } from \"../gui/base/StatusField.js\"\nimport { LoginController } from \"../api/main/LoginController.js\"\nimport { assertMainOrNode } from \"../api/common/Env.js\"\nimport { getEnabledMailAddressesForGroupInfo } from \"../api/common/utils/GroupUtils.js\"\nimport { showPasswordGeneratorDialog } from \"../misc/passwords/PasswordGeneratorDialog.js\"\nimport { theme } from \"../gui/theme.js\"\nimport { px, size } from \"../gui/size.js\"\nimport { UsageTest, UsageTestController } from \"@tutao/tutanota-usagetests\"\nimport Stream from \"mithril/stream\"\nimport { PasswordField, PasswordFieldAttrs } from \"../misc/passwords/PasswordField.js\"\n\nassertMainOrNode()\n\nexport interface PasswordFormAttrs {\n\tmodel: PasswordModel\n\tpasswordInfoKey?: TranslationKey\n}\n\nexport interface PasswordModelConfig {\n\treadonly checkOldPassword: boolean\n\treadonly enforceStrength: boolean\n\t/** if set to true the second password field won't be rendered. If not set at all or false the second password field is rendered */\n\treadonly hideConfirmation?: boolean\n\treadonly reservedStrings?: () => string[]\n}\n\nconst enum PasswordFieldType {\n\tOld,\n\tNew,\n\tConfirm,\n}\n\nexport class PasswordModel {\n\tprivate newPassword = \"\"\n\tprivate oldPassword = \"\"\n\tprivate repeatedPassword = \"\"\n\tprivate passwordStrength: number\n\tprivate readonly __mailValid?: Stream<boolean>\n\tprivate __signupFreeTest?: UsageTest\n\tprivate __signupPaidTest?: UsageTest\n\n\tconstructor(\n\t\tprivate readonly usageTestController: UsageTestController,\n\t\tprivate readonly logins: LoginController,\n\t\treadonly config: PasswordModelConfig,\n\t\tmailValid?: Stream<boolean>,\n\t) {\n\t\tthis.passwordStrength = this.calculatePasswordStrength()\n\n\t\tthis.__mailValid = mailValid\n\t\tthis.__signupFreeTest = this.usageTestController.getTest(\"signup.free\")\n\t\tthis.__signupPaidTest = this.usageTestController.getTest(\"signup.paid\")\n\t}\n\n\t_checkBothValidAndSendPing() {\n\t\tif (this.getNewPasswordStatus().type === \"valid\" && this.getRepeatedPasswordStatus().type === \"valid\") {\n\t\t\t// Password entry (both passwords entered and valid)\n\t\t\t// Only the started test's (either free or paid clicked) stage is completed here\n\t\t\tthis.__signupFreeTest?.getStage(3).complete()\n\t\t\tthis.__signupPaidTest?.getStage(2).complete()\n\t\t}\n\t}\n\n\tgetNewPassword(): string {\n\t\treturn this.newPassword\n\t}\n\n\tsetNewPassword(newPassword: string) {\n\t\tif (this.__mailValid && this.__mailValid()) {\n\t\t\t// Email address selection finished (email address is available and clicked in password field)\n\t\t\t// Only the started test's (either free or paid clicked) stage is completed here\n\t\t\tthis.__signupFreeTest?.getStage(2).complete()\n\t\t\tthis.__signupPaidTest?.getStage(1).complete()\n\t\t}\n\n\t\tthis.newPassword = newPassword\n\t\tthis.recalculatePasswordStrength()\n\t}\n\n\t/**\n\t * Might be needed when reserved strings change in the config\n\t */\n\trecalculatePasswordStrength() {\n\t\tthis.passwordStrength = this.calculatePasswordStrength()\n\t\tthis._checkBothValidAndSendPing()\n\t}\n\n\tgetOldPassword(): string {\n\t\treturn this.oldPassword\n\t}\n\n\tsetOldPassword(oldPassword: string) {\n\t\tthis.oldPassword = oldPassword\n\t\tthis.passwordStrength = this.calculatePasswordStrength()\n\t}\n\n\tgetRepeatedPassword(): string {\n\t\treturn this.repeatedPassword\n\t}\n\n\tsetRepeatedPassword(repeatedPassword: string) {\n\t\tthis.repeatedPassword = repeatedPassword\n\t\tthis.passwordStrength = this.calculatePasswordStrength()\n\n\t\tthis._checkBothValidAndSendPing()\n\t}\n\n\tclear() {\n\t\tthis.newPassword = \"\"\n\t\tthis.oldPassword = \"\"\n\t\tthis.repeatedPassword = \"\"\n\t\tthis.passwordStrength = this.calculatePasswordStrength()\n\t}\n\n\tgetErrorMessageId(): TranslationKey | null {\n\t\treturn (\n\t\t\tthis.getErrorFromStatus(this.getOldPasswordStatus()) ??\n\t\t\tthis.getErrorFromStatus(this.getNewPasswordStatus()) ??\n\t\t\tthis.getErrorFromStatus(this.getRepeatedPasswordStatus())\n\t\t)\n\t}\n\n\tgetOldPasswordStatus(): Status {\n\t\tif (this.config.checkOldPassword && this.oldPassword === \"\") {\n\t\t\treturn {\n\t\t\t\ttype: \"neutral\",\n\t\t\t\ttext: \"oldPasswordNeutral_msg\",\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\ttype: \"valid\",\n\t\t\t\ttext: \"emptyString_msg\",\n\t\t\t}\n\t\t}\n\t}\n\n\tgetNewPasswordStatus(): Status {\n\t\tif (this.newPassword === \"\") {\n\t\t\treturn {\n\t\t\t\ttype: \"neutral\",\n\t\t\t\ttext: \"password1Neutral_msg\",\n\t\t\t}\n\t\t} else if (this.config.checkOldPassword && this.oldPassword === this.newPassword) {\n\t\t\treturn {\n\t\t\t\ttype: \"invalid\",\n\t\t\t\ttext: \"password1InvalidSame_msg\",\n\t\t\t}\n\t\t} else if (this.isPasswordInsecure()) {\n\t\t\tif (this.config.enforceStrength) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"invalid\",\n\t\t\t\t\ttext: \"password1InvalidUnsecure_msg\",\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"valid\",\n\t\t\t\t\ttext: \"password1InvalidUnsecure_msg\",\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\ttype: \"valid\",\n\t\t\t\ttext: \"passwordValid_msg\",\n\t\t\t}\n\t\t}\n\t}\n\n\tgetRepeatedPasswordStatus(): Status {\n\t\tif (this.config.hideConfirmation) {\n\t\t\treturn {\n\t\t\t\ttype: \"valid\",\n\t\t\t\ttext: \"passwordValid_msg\",\n\t\t\t}\n\t\t}\n\t\tconst repeatedPassword = this.repeatedPassword\n\t\tconst newPassword = this.newPassword\n\n\t\tif (repeatedPassword === \"\") {\n\t\t\treturn {\n\t\t\t\ttype: \"neutral\",\n\t\t\t\ttext: \"password2Neutral_msg\",\n\t\t\t}\n\t\t} else if (repeatedPassword !== newPassword) {\n\t\t\treturn {\n\t\t\t\ttype: \"invalid\",\n\t\t\t\ttext: \"password2Invalid_msg\",\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\ttype: \"valid\",\n\t\t\t\ttext: \"passwordValid_msg\",\n\t\t\t}\n\t\t}\n\t}\n\n\tisPasswordInsecure(): boolean {\n\t\treturn !isSecurePassword(this.getPasswordStrength())\n\t}\n\n\tgetPasswordStrength(): number {\n\t\treturn this.passwordStrength\n\t}\n\n\tprivate getErrorFromStatus(status: Status): TranslationKey | null {\n\t\tif (!status) return null\n\t\treturn status.type !== \"valid\" ? status.text : null\n\t}\n\n\tprivate calculatePasswordStrength(): number {\n\t\tlet reserved: string[] = this.config.reservedStrings ? this.config.reservedStrings() : []\n\n\t\tif (this.logins.isUserLoggedIn()) {\n\t\t\treserved = reserved\n\t\t\t\t.concat(getEnabledMailAddressesForGroupInfo(this.logins.getUserController().userGroupInfo))\n\t\t\t\t.concat(this.logins.getUserController().userGroupInfo.name)\n\t\t}\n\n\t\t// 80% strength is minimum. we expand it to 100%, so the password indicator if completely filled when the password is strong enough\n\t\treturn getPasswordStrength(this.newPassword, reserved)\n\t}\n}\n\n/**\n * A form for entering a new password. Optionally it allows to enter the old password for validation and/or to repeat the new password.\n * showChangeOwnPasswordDialog() and showChangeUserPasswordAsAdminDialog() show this form as dialog.\n */\nexport class PasswordForm implements Component<PasswordFormAttrs> {\n\tview({ attrs }: Vnode<PasswordFormAttrs>): Children {\n\t\treturn m(\n\t\t\t\"\",\n\t\t\t{\n\t\t\t\tonremove: () => attrs.model.clear(),\n\t\t\t},\n\t\t\t[\n\t\t\t\tattrs.model.config.checkOldPassword\n\t\t\t\t\t? m(PasswordField, {\n\t\t\t\t\t\t\tlabel: \"oldPassword_label\",\n\t\t\t\t\t\t\tvalue: attrs.model.getOldPassword(),\n\t\t\t\t\t\t\tstatus: attrs.model.getOldPasswordStatus(),\n\t\t\t\t\t\t\toninput: (input) => attrs.model.setOldPassword(input),\n\t\t\t\t\t\t\tautocompleteAs: Autocomplete.currentPassword,\n\t\t\t\t\t\t\tfontSize: px(size.font_size_smaller),\n\t\t\t\t\t  } satisfies PasswordFieldAttrs)\n\t\t\t\t\t: null,\n\t\t\t\tm(PasswordField, {\n\t\t\t\t\tlabel: \"newPassword_label\",\n\t\t\t\t\tvalue: attrs.model.getNewPassword(),\n\t\t\t\t\tpasswordStrength: attrs.model.getPasswordStrength(),\n\t\t\t\t\thelpLabel: () => this.renderPasswordGeneratorHelp(attrs),\n\t\t\t\t\tstatus: attrs.model.getNewPasswordStatus(),\n\t\t\t\t\toninput: (input) => attrs.model.setNewPassword(input),\n\t\t\t\t\tautocompleteAs: Autocomplete.newPassword,\n\t\t\t\t\tfontSize: px(size.font_size_smaller),\n\t\t\t\t}),\n\t\t\t\tattrs.model.config.hideConfirmation\n\t\t\t\t\t? null\n\t\t\t\t\t: m(PasswordField, {\n\t\t\t\t\t\t\tlabel: \"repeatedPassword_label\",\n\t\t\t\t\t\t\tvalue: attrs.model.getRepeatedPassword(),\n\t\t\t\t\t\t\tautocompleteAs: Autocomplete.newPassword,\n\t\t\t\t\t\t\tstatus: attrs.model.getRepeatedPasswordStatus(),\n\t\t\t\t\t\t\toninput: (input) => attrs.model.setRepeatedPassword(input),\n\t\t\t\t\t\t\tfontSize: px(size.font_size_smaller),\n\t\t\t\t\t  }),\n\t\t\t\tattrs.passwordInfoKey ? m(\".small.mt-s\", lang.get(attrs.passwordInfoKey)) : null,\n\t\t\t],\n\t\t)\n\t}\n\n\tprivate renderPasswordGeneratorHelp(attrs: PasswordFormAttrs): Children {\n\t\treturn m(\n\t\t\t\"button.b.mr-xs.hover.click.darkest-hover.mt-xs\",\n\t\t\t{\n\t\t\t\tstyle: { display: \"inline-block\", color: theme.navigation_button_selected },\n\t\t\t\tonclick: async () => {\n\t\t\t\t\tattrs.model.setNewPassword(await showPasswordGeneratorDialog())\n\t\t\t\t\tm.redraw()\n\t\t\t\t},\n\t\t\t},\n\t\t\tlang.get(\"generatePassphrase_action\"),\n\t\t)\n\t}\n}\n"]}