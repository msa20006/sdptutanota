{"version":3,"file":"PinchZoom.js","sourceRoot":"","sources":["../../../../src/common/gui/PinchZoom.ts"],"names":[],"mappings":"AAKA;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,OAAO,SAAS;IA2DH;IACA;IACA;IACA;IA7DlB,YAAY;IACK,kBAAkB,GAAyB,IAAI,CAAA;IAC/C,oBAAoB,GAAyB,IAAI,CAAA;IACjD,qBAAqB,GAAyB,IAAI,CAAA;IAClD,mBAAmB,GAAyB,IAAI,CAAA;IAEjE,0EAA0E;IAClE,iBAAiB,GAAY,KAAK,CAAA;IAClC,iBAAiB,GAIrB,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAA;IAChC,sEAAsE;IACtE,MAAM,CAAC,cAAc,GAAG,EAAE,CAAA;IAE1B,WAAW;IACH,aAAa,GAAgB,IAAI,GAAG,EAAU,CAAA;IAC9C,uBAAuB,GAA2D,EAAE,QAAQ,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAA;IACxI,uBAAuB,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAA;IACxC,uBAAuB,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAA;IACxC,uBAAuB,GAAmB,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAA;IACxD,mBAAmB,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAA;IAC7C,cAAc,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAA;IAC3C,6MAA6M;IACrM,YAAY,GAAG,CAAC,CAAA;IAExB,YAAY;IACZ,mEAAmE;IAC3D,qBAAqB,GAA0B,IAAI,CAAA;IAE3D,iEAAiE;IACjE,+BAA+B;IAC/B,4GAA4G;IAC5G,mHAAmH;IAClG,iBAAiB,GAAG,GAAG,CAAA;IAExC,cAAc;IACd,wFAAwF;IAChF,kBAAkB,GAAG,GAAG,CAAA;IAChC,+EAA+E;IACvE,oBAAoB,GAAG,EAAE,CAAA;IACzB,uBAAuB,GAG3B,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAA;IACV,YAAY,GAAG,CAAC,CAAA;IAExB;;;;;;;;OAQG;IACH,YACkB,QAAqB,EACrB,QAAqB,EACrB,4BAAqC,EACrC,iBAAiE;QAHjE,aAAQ,GAAR,QAAQ,CAAa;QACrB,aAAQ,GAAR,QAAQ,CAAa;QACrB,iCAA4B,GAA5B,4BAA4B,CAAS;QACrC,sBAAiB,GAAjB,iBAAiB,CAAgD;QAElF,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAA,CAAC,kCAAkC;QAC1E,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA,CAAC,4FAA4F;QACxH,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,GAAG,aAAa,CAAA,CAAC,uBAAuB;QACvE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAA,CAAC,qFAAqF;QAC3H,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,aAAa,CAAA,CAAC,8BAA8B;QAExE,MAAM,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC,+BAA+B;QAC3F,sFAAsF;QACtF,IAAI,CAAC,mBAAmB,GAAG;YAC1B,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW;YAChC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY;SAClC,CAAA;QACD,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC,EAAE,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,qBAAqB,CAAC,CAAC,EAAE,CAAA;QAEzF,MAAM,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAC3D,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC,EAAE,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,qBAAqB,CAAC,CAAC,EAAE,CAAA;QAEzF,qBAAqB;QACrB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC,EAAE,EAAE;YAC1D,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA;YACrB,MAAM,WAAW,GAAG,CAAC,CAAC,MAAM,CAAA,CAAC,uHAAuH;YACpJ,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC7D,4KAA4K;gBAC5K,IAAI,CAAC,eAAe,CACnB,CAAC,EACD,WAAW,EACX,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,EAAE,MAAM,CAAC,EAC3C,CAAC,CAAC,EAAE,EAAE;oBACL,IAAI,KAAK,GAAG,CAAC,CAAA;oBACb,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;wBACjD,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAA,CAAC,WAAW;oBAC5C,CAAC;yBAAM,CAAC;wBACP,KAAK,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;oBAChE,CAAC;oBACD,MAAM,oBAAoB,GAAG,IAAI,CAAC,8CAA8C,CAAC;wBAChF,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,OAAO;wBAC9B,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,OAAO;qBAC9B,CAAC,CAAA;oBAEF,MAAM,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CACrD,oBAAoB,CAAC,kBAAkB,EACvC,oBAAoB,CAAC,kBAAkB,EACvC,IAAI,CAAC,+CAA+C,EAAE,EACtD,KAAK,CACL,CAAC,kBAAkB,CAAA;oBACpB,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAA;gBAChC,CAAC,CACD,CAAA;YACF,CAAC;QACF,CAAC,CAAA;QACD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,GAAG,CAAC,CAAC,EAAE,EAAE;YAC9D,MAAM,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;YAE1B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAA;YAEtF,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;gBAC3B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAA;YAC9B,CAAC;YAED,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC5B,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,CAAA;YACpE,CAAC;iBAAM,CAAC;gBACP,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAA;YAClC,CAAC;QACF,CAAC,CAAA;QACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE,EAAE;YAC5D,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;QAC1B,CAAC,CAAA;QACD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,CAAC,CAAC,EAAE,EAAE;YAChE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA;QACtB,CAAC,CAAA;QAED,IAAI,IAAI,CAAC,4BAA4B,EAAE,CAAC;YACvC,IAAI,CAAC,OAAO,EAAE,CAAA;QACf,CAAC;IACF,CAAC;IAED,WAAW;QACV,OAAO,IAAI,CAAC,QAAQ,CAAA;IACrB,CAAC;IAED,WAAW;QACV,OAAO,IAAI,CAAC,QAAQ,CAAA;IACrB,CAAC;IAED,mBAAmB;QAClB,OAAO,IAAI,CAAC,iBAAiB,CAAA;IAC9B,CAAC;IAED;;;OAGG;IACH,MAAM;QACL,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC7B,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAA;QACzE,CAAC;QACD,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC/B,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAA;QAC7E,CAAC;QACD,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAChC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,eAAe,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAA;QAC/E,CAAC;QACD,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC9B,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAA;QAC3E,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAA;QAC3C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA;QAC3B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAA;IACpC,CAAC;IAEO,iBAAiB,CAAC,EAAc;QACvC,QAAQ,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YAC3B,KAAK,CAAC;gBACL,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;gBACrB,MAAK;YACN,KAAK,CAAC;gBACL,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAA;gBACtB,MAAK;YACN;gBACC,MAAK;QACP,CAAC;IACF,CAAC;IAEO,aAAa,CAAC,EAAc;QACnC,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7B,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAA;QAC/B,CAAC;QACD,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAA;IAC3B,CAAC;IAEO,aAAa,CAAC,MAAsB,EAAE,MAAsB;QACnE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;IAClG,CAAC;IAEO,cAAc,CAAC,GAAG,MAAwB;QACjD,IAAI,CAAC,GAAG,CAAC,CAAA;QACT,IAAI,CAAC,GAAG,CAAC,CAAA;QACT,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC;YAC1B,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA;YACZ,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA;QACb,CAAC;QACD,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAA;IAC9E,CAAC;IAED;;OAEG;IACK,SAAS,CAAC,IAAiB;QAClC,uBAAuB;QACvB,IAAI,GAAG,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAA;QAEtC,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAA;QACxB,IAAI,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAA;QAEpC,IAAI,SAAS,GAAG,MAAM,CAAC,WAAW,IAAI,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAA;QACvE,IAAI,UAAU,GAAG,MAAM,CAAC,WAAW,IAAI,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAA;QAE1E,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,CAAA;QACtD,IAAI,UAAU,GAAG,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,CAAA;QAEzD,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,SAAS,GAAG,SAAS,CAAA;QACzC,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,UAAU,GAAG,UAAU,CAAA;QAC7C,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,GAAG,SAAS,GAAG,SAAS,CAAA;QAC/C,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,UAAU,GAAG,UAAU,CAAA;QAE/C,oGAAoG;QACpG,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,CAAA;IAClD,CAAC;IAEO,4CAA4C;QACnD,MAAM,aAAa,GAAG,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACrD,IAAI,eAAe,GAAG,aAAa,CAAC,eAAe,CAAA;QAEnD,IAAI,aAAa,GAAG,cAAc,CAAA;QAClC,IAAI,qBAAqB,GAAG,eAAe,CAAC,KAAK,CAAC,aAAa,CAAC,CAAA,CAAC,UAAU;QAC3E,IAAI,qBAAqB,EAAE,CAAC;YAC3B,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;QACpF,CAAC;QACD,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAA;IACtB,CAAC;IAED;;;OAGG;IACK,+CAA+C;QACtD,IAAI,mBAAmB,GAAG,IAAI,CAAC,6CAA6C,EAAE,CAAA;QAC9E,OAAO;YACN,CAAC,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC,GAAG,mBAAmB,CAAC,CAAC;YACzD,CAAC,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC,GAAG,mBAAmB,CAAC,CAAC;SACzD,CAAA;IACF,CAAC;IAED;;QAEI;IACI,6CAA6C;QACpD,IAAI,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACnD,OAAO;YACN,CAAC,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC;YACrD,CAAC,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC;SACrD,CAAA;IACF,CAAC;IAED,WAAW;IAEX;;OAEG;IACK,OAAO;QACd,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAA;QAEhD,IAAI,cAAc,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;YACjD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,GAAG,EAAE,CAAA;YAClC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,YAAY,GAAG,EAAE,CAAA;QACtC,CAAC;aAAM,CAAC;YACP,6BAA6B;YAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAA;YACvC,MAAM,KAAK,GAAG,cAAc,GAAG,KAAK,CAAA;YAEpC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,GAAG,KAAK,IAAI,CAAA;YAEtE,IAAI,CAAC,cAAc,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAA,CAAC,mCAAmC;YACtG,MAAM,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CACrD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EACd;gBACC,CAAC,EAAE,CAAC;gBACJ,CAAC,EAAE,CAAC;aACJ,EACD,IAAI,CAAC,+CAA+C,EAAE,EACtD,KAAK,CACL,CAAC,kBAAkB,CAAA;YACpB,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAA;QAChC,CAAC;IACF,CAAC;IAED;;;;;;;OAOG;IACK,8CAA8C,CAAC,oBAAoC;QAI1F,IAAI,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACnD,IAAI,YAAY,GAAG,IAAI,CAAC,6CAA6C,EAAE,CAAA;QAEvE,wHAAwH;QACxH,mIAAmI;QACnI,mCAAmC;QACnC,oBAAoB;QACpB,wHAAwH;QACxH,8HAA8H;QAC9H,EAAE;QACF,2GAA2G;QAC3G,IAAI,0BAA0B,GAAG;YAChC,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,GAAG,oBAAoB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY;YAC7F,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,GAAG,oBAAoB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY;SAC7F,CAAA;QAED,2EAA2E;QAC3E,iCAAiC;QACjC,IAAI,kBAAkB,GAAG;YACxB,CAAC,EAAE,0BAA0B,CAAC,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC;YACjF,CAAC,EAAE,0BAA0B,CAAC,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC;SACjF,CAAA;QAED,mBAAmB;QACnB,8CAA8C;QAC9C,IAAI,eAAe,GAAG;YACrB,CAAC,EAAE,oBAAoB,CAAC,CAAC,GAAG,0BAA0B,CAAC,CAAC;YACxD,CAAC,EAAE,oBAAoB,CAAC,CAAC,GAAG,0BAA0B,CAAC,CAAC;SACxD,CAAA;QAED,OAAO,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,eAAe,EAAE,CAAA;IACvF,CAAC;IAED;;OAEG;IACK,kCAAkC,CACzC,iBAAiC,EACjC,4CAA4D,EAC5D,kBAAkC,EAClC,KAAa;QAEb,OAAO;YACN,CAAC,EAAE,CAAC,4CAA4C,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;YAC9G,CAAC,EAAE,CAAC,4CAA4C,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;SAC9G,CAAA;IACF,CAAC;IAEO,aAAa,CAAC,EAAc;QACnC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAA;QAE7B,qBAAqB;QACrB,IAAI,eAAe,GAAG,IAAI,CAAC,4CAA4C,EAAE,CAAA;QACzE,IAAI,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAA;QAE1D,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAA;QAE1H,IAAI,UAAU,EAAE,CAAC;YAChB,IAAI,CAAC,uBAAuB,GAAG;gBAC9B,QAAQ,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;gBAChE,QAAQ,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;aAChE,CAAA;QACF,CAAC;QAED,wIAAwI;QACxI,MAAM,eAAe,GACpB,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAClI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAA;QACjG,MAAM,gBAAgB,GAAG,IAAI,CAAC,YAAY,GAAG,CAAC,eAAe,GAAG,CAAC,CAAC,CAAA;QAElE,IAAI,CAAC,uBAAuB,GAAG;YAC9B,QAAQ,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;YAChE,QAAQ,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;SAChE,CAAA;QAED,4IAA4I;QAC5I,6DAA6D;QAC7D,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAA;QACvJ,MAAM,mBAAmB,GAAG,IAAI,CAAC,8CAA8C,CAAC,WAAW,CAAC,CAAA;QAC5F,eAAe,GAAG,mBAAmB,CAAC,kBAAkB,CAAA;QACxD,uBAAuB,GAAG,mBAAmB,CAAC,kBAAkB,CAAA;QAEhE,wBAAwB;QACxB,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,CAAS,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAA;QAE1F,MAAM,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CACrD,eAAe,EACf,uBAAuB,EACvB,IAAI,CAAC,+CAA+C,EAAE,EACtD,gBAAgB,CAChB,CAAC,kBAAkB,CAAA;QACpB,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAA;IAChC,CAAC;IAEO,YAAY,CAAC,EAAc;QAClC,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC/E,IACC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,cAAc;gBACtF,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,cAAc,EACrF,CAAC;gBACF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAA;YAC9B,CAAC;YACD,IAAI,KAAK,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAA;YAChI,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;YAEnF,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YAC/C,IAAI,mBAAmB,GAAG,IAAI,CAAC,+CAA+C,EAAE,CAAA;YAEhF,qBAAqB;YACrB,gHAAgH;YAChH,gLAAgL;YAChL,EAAE;YACF,sIAAsI;YACtI,IAAI,kBAAkB,GAAG;gBACxB,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,kBAAkB;gBACrI,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;aACjH,CAAA;YACD,IAAI,0BAA0B,GAAG,IAAI,CAAC,uBAAuB,CAAA;YAC7D,oGAAoG;YACpG,wEAAwE;YACxE,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC,EAAE,CAAC;gBAC7B,kBAAkB,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAA,CAAC,uDAAuD;gBAC3F,0BAA0B,GAAG,EAAE,CAAC,EAAE,0BAA0B,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,0BAA0B,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAA;YACtH,CAAC;YAED,IAAI,MAAM,GAAG,IAAI,CAAC,sBAAsB,CACvC,kBAAkB,EAClB,0BAA0B,EAC1B,IAAI,CAAC,+CAA+C,EAAE,EACtD,IAAI,CAAC,YAAY,CACjB,CAAA;YACD,6EAA6E;YAC7E,iCAAiC;YACjC,IAAI,EAAE,CAAC,UAAU,IAAI,MAAM,CAAC,6BAA6B,EAAE,CAAC;gBAC3D,EAAE,CAAC,cAAc,EAAE,CAAA,CAAC,8EAA8E;YACnG,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAA;QACvC,CAAC;IACF,CAAC;IAEO,eAAe,CACtB,KAAiB,EACjB,MAA0B,EAC1B,iBAAsE,EACtE,iBAA0C;QAE1C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QACtB,MAAM,KAAK,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAA;QAErC,sEAAsE;QACtE,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;YACjC,OAAM;QACP,CAAC;QAED,KAAK,CAAC,cAAc,EAAE,CAAA;QAEtB,IACC,GAAG,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB;YACjD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,oBAAoB,IAAI,8DAA8D;YACtJ,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,oBAAoB,EACnF,CAAC;YACF,IAAI,CAAC,YAAY,GAAG,CAAC,CAAA;YACrB,iBAAiB,CAAC,KAAK,CAAC,CAAA;QACzB,CAAC;aAAM,CAAC;YACP,UAAU,CAAC,GAAG,EAAE;gBACf,IACC,IAAI,CAAC,YAAY,KAAK,GAAG,IAAI,oEAAoE;oBACjG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,oBAAoB,IAAI,sDAAsD;oBACxI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,oBAAoB,EAC7E,CAAC;oBACF,yEAAyE;oBAEzE,8FAA8F;oBAC9F,IAAI,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB;wBAAE,MAAM,CAAC,YAAY,EAAE,EAAE,KAAK,EAAE,CAAA,CAAC,6BAA6B;oBAEjI,iBAAiB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;gBACjC,CAAC;YACF,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAA;QAC5B,CAAC;QACD,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,iBAAiB,CAAA;QACrD,IAAI,CAAC,YAAY,GAAG,GAAG,CAAA;IACxB,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,kBAAkC;QAChD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,eAAe,GAAG,GAAG,kBAAkB,CAAC,CAAC,MAAM,kBAAkB,CAAC,CAAC,IAAI,CAAA;QAC3F,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,GAAG,eAAe,IAAI,CAAC,uBAAuB,CAAC,CAAC,OAAO,IAAI,CAAC,uBAAuB,CAAC,CAAC,gBAAgB,IAAI,CAAC,YAAY,GAAG,CAAA;IACvJ,CAAC;IAED;;;;OAIG;IACK,sBAAsB,CAC7B,kBAAkC,EAClC,0BAA0C,EAC1C,4CAA4D,EAC5D,QAAgB;QAEhB,IAAI,CAAC,6CAA6C,EAAE,CAAA;QACpD,IAAI,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACnD,4JAA4J;QAC5J,IAAI,OAAO,GAAG;YACb,CAAC,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC;YACxB,CAAC,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC;YACxB,EAAE,EAAE,eAAe,CAAC,EAAE,GAAG,CAAC;YAC1B,EAAE,EAAE,eAAe,CAAC,EAAE,GAAG,CAAC;SAC1B,CAAA;QAED,wDAAwD;QACxD,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAA;QACzF,MAAM,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAClD,4CAA4C,EAC5C,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAC9B,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAC/B,kBAAkB,EAClB,0BAA0B,EAC1B,QAAQ,CACR,CAAA;QACD,MAAM,cAAc,GAAG,eAAe,CAAC,EAAE,GAAG,eAAe,CAAC,CAAC,CAAA;QAC7D,MAAM,aAAa,GAAG,eAAe,CAAC,EAAE,GAAG,eAAe,CAAC,CAAC,CAAA;QAE5D,MAAM,kBAAkB,GAAG,eAAe,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAA;QACzD,MAAM,kBAAkB,GAAG,eAAe,CAAC,EAAE,IAAI,OAAO,CAAC,EAAE,CAAA;QAE3D,MAAM,gBAAgB,GAAG,eAAe,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAA;QACvD,MAAM,gBAAgB,GAAG,eAAe,CAAC,EAAE,IAAI,OAAO,CAAC,EAAE,CAAA;QAEzD,MAAM,+BAA+B,GAAG,kBAAkB,IAAI,kBAAkB,CAAA;QAChF,MAAM,6BAA6B,GAAG,gBAAgB,IAAI,gBAAgB,CAAA;QAE1E,uFAAuF;QACvF,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,GAAG,aAAa,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAA;QACtH,MAAM,OAAO,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,GAAG,cAAc,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAA;QACnH,IAAI,OAAO,KAAK,eAAe,CAAC,CAAC,IAAI,OAAO,KAAK,eAAe,CAAC,CAAC,EAAE,CAAC;YACpE,kBAAkB,GAAG,IAAI,CAAC,kCAAkC,CAC3D;gBACC,CAAC,EAAE,OAAO;gBACV,CAAC,EAAE,OAAO;aACV,EACD,4CAA4C,EAC5C,0BAA0B,EAC1B,QAAQ,CACR,CAAA;QACF,CAAC;QACD,IAAI,QAAQ,KAAK,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;YACrD,2DAA2D;YAC3D,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAA;QAC9C,CAAC;aAAM,CAAC;YACP,IAAI,CAAC,uBAAuB,GAAG,0BAA0B,CAAA;QAC1D,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAA;QAE5B,OAAO;YACN,6BAA6B;YAC7B,+BAA+B;YAC/B,kBAAkB;SAClB,CAAA;IACF,CAAC;IAED;;;OAGG;IACK,sBAAsB,CAC7B,uBAAuC,EACvC,aAAqB,EACrB,cAAsB,EACtB,eAA+B,EAC/B,WAA2B,EAC3B,KAAa;QAEb,OAAO;YACN,CAAC,EAAE,uBAAuB,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC,CAAC;YAC5F,CAAC,EAAE,uBAAuB,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC,CAAC;YAC5F,EAAE,EAAE,uBAAuB,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,aAAa,GAAG,eAAe,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC,CAAC;YAC/G,EAAE,EAAE,uBAAuB,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,cAAc,GAAG,eAAe,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC,CAAC;SAChH,CAAA;IACF,CAAC","sourcesContent":["type CoordinatePair = {\n\tx: number\n\ty: number\n}\n\n/**\n * This class handles pinch of a given HTMLElement (zoomable) inside another HTMLElement (viewport). If that zoomable HTMLElement is zoomed in it is possible to drag it (with a new finger gesture)\n * up to the viewport borders.\n * Center of the zoom is always the center of the fingers, even when these are moved during zooming.\n * The maximum zoom factor is 3.\n *\n * This class also supports:\n * * Initially zooming out to match the viewport width\n * * Double tap to zoom in (when not zoomed in) to half of the possible zoom factor\n * * Double tap to zoom out (when zoomed in by some factor) to the minimal zoom factor\n *\n * Not supported:\n * * Dragging while pinch zooming\n * * Resizing of the zoomable HTMLElement. If the size changes it is required to create a new PinchZoom object.\n *\n * __Important__:\n * * call remove() before creating a new PinchZoom object and throwing away the reference of the old one to deregister the listeners!\n */\nexport class PinchZoom {\n\t/// listener\n\tprivate readonly onTouchEndListener: EventListener | null = null\n\tprivate readonly onTouchStartListener: EventListener | null = null\n\tprivate readonly onTouchCancelListener: EventListener | null = null\n\tprivate readonly onTouchMoveListener: EventListener | null = null\n\n\t/// provide the current state of the pinch zoom object for external access\n\tprivate draggingOrZooming: boolean = false\n\tprivate currentTouchStart: {\n\t\tx: number\n\t\ty: number\n\t\tstartTime: number\n\t} = { x: 0, y: 0, startTime: 0 }\n\t// dragging below this threshold is not considered dragging, but noise\n\tstatic DRAG_THRESHOLD = 10\n\n\t/// zooming\n\tprivate pinchTouchIDs: Set<number> = new Set<number>()\n\tprivate lastPinchTouchPositions: { pointer1: CoordinatePair; pointer2: CoordinatePair } = { pointer1: { x: 0, y: 0 }, pointer2: { x: 0, y: 0 } }\n\tprivate initialZoomablePosition = { x: 0, y: 0 }\n\tprivate initialViewportPosition = { x: 0, y: 0 }\n\tprivate pinchSessionTranslation: CoordinatePair = { x: 0, y: 0 }\n\tprivate initialZoomableSize = { width: 0, height: 0 }\n\tprivate zoomBoundaries = { min: 1, max: 3 }\n\t// values of this variable should only be the result of the calculateSafeScaleValue function (except from the initial value the value must never be 1 due to division by 1-scale). Never set values directly!\n\tprivate currentScale = 1\n\n\t/// dragging\n\t// null if there was no previous touch position related to dragging\n\tprivate lastDragTouchPosition: CoordinatePair | null = null\n\n\t// Apple considers that a press event is a long press after 500ms\n\t// Google considers after 400ms\n\t// https://developer.apple.com/documentation/uikit/uilongpressgesturerecognizer/1616423-minimumpressduration\n\t// https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/ViewConfiguration.java\n\tprivate readonly LONG_PRESS_MIN_MS = 400\n\n\t/// double tap\n\t// Two consecutive taps are recognized as double tap if they occur within this time span\n\tprivate DOUBLE_TAP_TIME_MS = 350\n\t// the radius in which we recognize a second tap or single click (and not drag)\n\tprivate SAME_POSITION_RADIUS = 40\n\tprivate lastDoubleTapTouchStart: {\n\t\tx: number\n\t\ty: number\n\t} = { x: 0, y: 0 }\n\tprivate firstTapTime = 0\n\n\t/**\n\t * Creates a PinchZoom object and immediately starts recognizing and reacting to zoom, drag and tab gestures.\n\t * @precondition zoomable.x <= viewport.x && zoomable.y <= viewport.y && zoomable.x2 >= viewport.x2 && zoomable.y2 >= viewport.y2\n\t * @precondition zoomable must have been rendered already at least once.\n\t * @param zoomable The HTMLElement that shall be zoomed inside the viewport.\n\t * @param viewport The HTMLElement in which the zoomable is zoomed and dragged.\n\t * @param initiallyZoomToViewportWidth If true and the width of the zoomable is bigger than the viewport width, the zoomable is zoomed out to match the viewport __width__ and not the height! the viewport height is adapted to match the zoomed zoomable height (calling PinchZoom.remove() resets the height)\n\t * @param singleClickAction This function is called whenever a single click on the zoomable is detected, e.g. on a link. Since the PinchZoom class prevents all default actions these clicks need to be handled outside of this class.\n\t */\n\tconstructor(\n\t\tprivate readonly zoomable: HTMLElement,\n\t\tprivate readonly viewport: HTMLElement,\n\t\tprivate readonly initiallyZoomToViewportWidth: boolean,\n\t\tprivate readonly singleClickAction: (e: Event, target: EventTarget | null) => void,\n\t) {\n\t\tthis.viewport.style.overflow = \"hidden\" // disable default scroll behavior\n\t\tthis.update({ x: 0, y: 0 }) // transform origin needs to be initially set. can lead to wrong transform origins otherwise\n\t\tthis.zoomable.style.touchAction = \"pan-y pan-x\" // makes zooming smooth\n\t\tthis.zoomable.style.minWidth = \"100%\" // for correct zooming behavior the content of the zoomable should match the zoomable\n\t\tthis.zoomable.style.width = \"fit-content\" // prevents overflowing issues\n\n\t\tconst initialZoomableCoords = this.getCoords(this.zoomable) // already needs to be rendered\n\t\t// the content of the zoomable rect can be bigger than the rect itself due to overflow\n\t\tthis.initialZoomableSize = {\n\t\t\twidth: this.zoomable.scrollWidth,\n\t\t\theight: this.zoomable.scrollHeight,\n\t\t}\n\t\tthis.initialZoomablePosition = { x: initialZoomableCoords.x, y: initialZoomableCoords.y }\n\n\t\tconst initialViewportCoords = this.getCoords(this.viewport)\n\t\tthis.initialViewportPosition = { x: initialViewportCoords.x, y: initialViewportCoords.y }\n\n\t\t// for the double tap\n\t\tthis.onTouchEndListener = this.zoomable.ontouchend = (e) => {\n\t\t\tthis.removeTouches(e)\n\t\t\tconst eventTarget = e.target // it is necessary to save the target because otherwise it changes and is not accurate anymore after the bubbling phase\n\t\t\tif (e.touches.length === 0 && e.changedTouches.length === 1) {\n\t\t\t\t//LATER: when pinching and then right after leaving the display tap again -> double tap (if evaluates to true because of the last finger leaving the display after pinching)\n\t\t\t\tthis.handleDoubleTap(\n\t\t\t\t\te,\n\t\t\t\t\teventTarget,\n\t\t\t\t\t(e, target) => singleClickAction(e, target),\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\tlet scale = 1\n\t\t\t\t\t\tif (this.currentScale > this.zoomBoundaries.min) {\n\t\t\t\t\t\t\tscale = this.zoomBoundaries.min // zoom out\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscale = (this.zoomBoundaries.min + this.zoomBoundaries.max) / 2\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst translationAndOrigin = this.calculateSessionsTranslationAndTransformOrigin({\n\t\t\t\t\t\t\tx: e.changedTouches[0].clientX,\n\t\t\t\t\t\t\ty: e.changedTouches[0].clientY,\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tconst newTransformOrigin = this.setCurrentSafePosition(\n\t\t\t\t\t\t\ttranslationAndOrigin.newTransformOrigin,\n\t\t\t\t\t\t\ttranslationAndOrigin.sessionTranslation,\n\t\t\t\t\t\t\tthis.getCurrentZoomablePositionWithoutTransformation(),\n\t\t\t\t\t\t\tscale,\n\t\t\t\t\t\t).newTransformOrigin\n\t\t\t\t\t\tthis.update(newTransformOrigin)\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tthis.onTouchStartListener = this.zoomable.ontouchstart = (e) => {\n\t\t\tconst touch = e.touches[0]\n\n\t\t\tthis.currentTouchStart = { x: touch.clientX, y: touch.clientY, startTime: Date.now() }\n\n\t\t\tif (e.touches.length >= 2) {\n\t\t\t\tthis.draggingOrZooming = true\n\t\t\t}\n\n\t\t\tif (e.touches.length === 1) {\n\t\t\t\tthis.lastDragTouchPosition = { x: touch.clientX, y: touch.clientY }\n\t\t\t} else {\n\t\t\t\tthis.lastDragTouchPosition = null\n\t\t\t}\n\t\t}\n\t\tthis.onTouchMoveListener = this.zoomable.ontouchmove = (e) => {\n\t\t\tthis.touchmove_handler(e)\n\t\t}\n\t\tthis.onTouchCancelListener = this.zoomable.ontouchcancel = (e) => {\n\t\t\tthis.removeTouches(e)\n\t\t}\n\n\t\tif (this.initiallyZoomToViewportWidth) {\n\t\t\tthis.rescale()\n\t\t}\n\t}\n\n\tgetViewport() {\n\t\treturn this.viewport\n\t}\n\n\tgetZoomable() {\n\t\treturn this.zoomable\n\t}\n\n\tisDraggingOrZooming() {\n\t\treturn this.draggingOrZooming\n\t}\n\n\t/**\n\t * call this method before throwing away the reference to the pinch zoom object\n\t * changes to the viewport needs to be reverted. Otherwise, future operations would be influenced\n\t */\n\tremove() {\n\t\tif (this.onTouchEndListener) {\n\t\t\tthis.zoomable.removeEventListener(\"ontouchend\", this.onTouchEndListener)\n\t\t}\n\t\tif (this.onTouchStartListener) {\n\t\t\tthis.zoomable.removeEventListener(\"ontouchstart\", this.onTouchStartListener)\n\t\t}\n\t\tif (this.onTouchCancelListener) {\n\t\t\tthis.zoomable.removeEventListener(\"ontouchcancel\", this.onTouchCancelListener)\n\t\t}\n\t\tif (this.onTouchMoveListener) {\n\t\t\tthis.zoomable.removeEventListener(\"ontouchmove\", this.onTouchMoveListener)\n\t\t}\n\t\tthis.currentScale = this.zoomBoundaries.min\n\t\tthis.update({ x: 0, y: 0 })\n\t\tthis.viewport.style.height = \"auto\"\n\t}\n\n\tprivate touchmove_handler(ev: TouchEvent) {\n\t\tswitch (ev.touches.length) {\n\t\t\tcase 1:\n\t\t\t\tthis.dragHandling(ev)\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\tthis.pinchHandling(ev)\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\tprivate removeTouches(ev: TouchEvent) {\n\t\tif (ev.touches.length === 0) {\n\t\t\tthis.draggingOrZooming = false\n\t\t}\n\t\tthis.pinchTouchIDs.clear()\n\t}\n\n\tprivate pointDistance(point1: CoordinatePair, point2: CoordinatePair): number {\n\t\treturn Math.round(Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2)))\n\t}\n\n\tprivate centerOfPoints(...points: CoordinatePair[]): CoordinatePair {\n\t\tlet x = 0\n\t\tlet y = 0\n\t\tfor (let point of points) {\n\t\t\tx += point.x\n\t\t\ty += point.y\n\t\t}\n\t\treturn { x: Math.round(x / points.length), y: Math.round(y / points.length) }\n\t}\n\n\t/**\n\t * returns the absolute coordinates of the rendered object (includes CSS transformations)\n\t */\n\tprivate getCoords(elem: HTMLElement) {\n\t\t// crossbrowser version\n\t\tlet box = elem.getBoundingClientRect()\n\n\t\tlet body = document.body\n\t\tlet docEl = document.documentElement\n\n\t\tlet scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop\n\t\tlet scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft\n\n\t\tlet clientTop = docEl.clientTop || body.clientTop || 0\n\t\tlet clientLeft = docEl.clientLeft || body.clientLeft || 0\n\n\t\tlet top = box.top + scrollTop - clientTop\n\t\tlet left = box.left + scrollLeft - clientLeft\n\t\tlet bottom = box.bottom + scrollTop - clientTop\n\t\tlet right = box.right + scrollLeft - clientLeft\n\n\t\t// return { x: Math.round(left), y: Math.round(top), x2: Math.round(right), y2: Math.round(bottom) }\n\t\treturn { x: left, y: top, x2: right, y2: bottom }\n\t}\n\n\tprivate getCurrentlyAppliedTransformOriginOfZoomable(): CoordinatePair {\n\t\tconst computedStyle = getComputedStyle(this.zoomable)\n\t\tlet transformOrigin = computedStyle.transformOrigin\n\n\t\tlet numberPattern = /-?\\d+\\.?\\d*/g\n\t\tlet transformOriginValues = transformOrigin.match(numberPattern) //relative\n\t\tif (transformOriginValues) {\n\t\t\treturn { x: Number(transformOriginValues[0]), y: Number(transformOriginValues[1]) }\n\t\t}\n\t\treturn { x: 0, y: 0 }\n\t}\n\n\t/**\n\t * Returns the current position of the original (without CSS transformation) zoomable\n\t * the transformOrigin is relative to this point\n\t */\n\tprivate getCurrentZoomablePositionWithoutTransformation() {\n\t\tlet currentScrollOffset = this.getOffsetFromInitialToCurrentViewportPosition()\n\t\treturn {\n\t\t\tx: this.initialZoomablePosition.x - currentScrollOffset.x,\n\t\t\ty: this.initialZoomablePosition.y - currentScrollOffset.y,\n\t\t}\n\t}\n\n\t/**\n\t * Returns the current offset of the viewport compared to the original position. E.g. if the viewport was scrolled this scroll offset is returned.\n\t **/\n\tprivate getOffsetFromInitialToCurrentViewportPosition() {\n\t\tlet currentViewport = this.getCoords(this.viewport)\n\t\treturn {\n\t\t\tx: this.initialViewportPosition.x - currentViewport.x,\n\t\t\ty: this.initialViewportPosition.y - currentViewport.y,\n\t\t}\n\t}\n\n\t/// zooming\n\n\t/**\n\t * Scales the zoomable to match the viewport width if the zoomable width is bigger.\n\t */\n\tprivate rescale() {\n\t\tconst containerWidth = this.viewport.offsetWidth\n\n\t\tif (containerWidth >= this.zoomable.scrollWidth) {\n\t\t\tthis.zoomable.style.transform = \"\"\n\t\t\tthis.zoomable.style.marginBottom = \"\"\n\t\t} else {\n\t\t\t// zoom out to match the size\n\t\t\tconst width = this.zoomable.scrollWidth\n\t\t\tconst scale = containerWidth / width\n\n\t\t\tthis.viewport.style.height = `${this.viewport.scrollHeight * scale}px`\n\n\t\t\tthis.zoomBoundaries = { min: scale, max: this.zoomBoundaries.max } // allow value <1 for minimum scale\n\t\t\tconst newTransformOrigin = this.setCurrentSafePosition(\n\t\t\t\t{ x: 0, y: 0 },\n\t\t\t\t{\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t},\n\t\t\t\tthis.getCurrentZoomablePositionWithoutTransformation(),\n\t\t\t\tscale,\n\t\t\t).newTransformOrigin\n\t\t\tthis.update(newTransformOrigin)\n\t\t}\n\t}\n\n\t/**\n\t * Calculate the nw sessionTranslation and transformOrigin dependent on the new finger position for flawless zooming behavior.\n\t * Dependent on the new position of the fingers the sessionTranslation is calculated so that the transformOrigin is in the center of the touch points\n\t * The session translation is the offset by which the original/initial zoomable is moved inside the viewport in a non-scaled state, so that when scaling to the current scale factor (this.currentScale) at the\n\t * calculated transform origin we get the current position and size of the zoomable inside the viewport.\n\t * The transform origin is the position relative to the original/initial zoomable position (non-scaled) at which we need to zoom in so that we get the current  position and size of the zoomable inside the viewport (with applied session translation).\n\t * @param absoluteZoomPosition The position in which the user wants to zoom, i.e. the center between the two fingers. This position is relative to the screen coordinates.\n\t */\n\tprivate calculateSessionsTranslationAndTransformOrigin(absoluteZoomPosition: CoordinatePair): {\n\t\tsessionTranslation: CoordinatePair\n\t\tnewTransformOrigin: CoordinatePair\n\t} {\n\t\tlet currentZoomable = this.getCoords(this.zoomable)\n\t\tlet scrollOffset = this.getOffsetFromInitialToCurrentViewportPosition()\n\n\t\t// We want to use the new absoluteZoomPosition as the new transformOrigin. This is needed for expected zooming behavior.\n\t\t// Since we know the current position and the new desired transformOrigin we can calculate the new zoomable position from which the\n\t\t// transformation would be correct.\n\t\t// intuitive formula\n\t\t// currentZoomable = absoluteTransformOrigin - (relativeTransformOrigin * this.currentScale)\t| substitute unknown values\n\t\t// currentZoomable = absoluteZoomPosition - ((absoluteZoomPosition - newPosition) * this.currentScale)\t| solve for newPosition\n\t\t//\n\t\t// newPosition = (currentZoomable.x + absoluteZoomPosition.x * (this.currentScale - 1)) / this.currentScale\n\t\tlet transformedInitialZoomable = {\n\t\t\tx: (currentZoomable.x + absoluteZoomPosition.x * (this.currentScale - 1)) / this.currentScale,\n\t\t\ty: (currentZoomable.y + absoluteZoomPosition.y * (this.currentScale - 1)) / this.currentScale,\n\t\t}\n\n\t\t// the vector to get to the desired new position from the original position\n\t\t// newPosition - originalPosition\n\t\tlet sessionTranslation = {\n\t\t\tx: transformedInitialZoomable.x - this.initialZoomablePosition.x + scrollOffset.x,\n\t\t\ty: transformedInitialZoomable.y - this.initialZoomablePosition.y + scrollOffset.y,\n\t\t}\n\n\t\t// transform origin\n\t\t// is relative to the new transformed zoomable\n\t\tlet transformOrigin = {\n\t\t\tx: absoluteZoomPosition.x - transformedInitialZoomable.x,\n\t\t\ty: absoluteZoomPosition.y - transformedInitialZoomable.y,\n\t\t}\n\n\t\treturn { sessionTranslation: sessionTranslation, newTransformOrigin: transformOrigin }\n\t}\n\n\t/**\n\t * Calculate the transform origin that is needed to the desired targetCoordinates of the zoomable, given the session translation, the targetCoordinates and the scale\n\t */\n\tprivate calculateTransformOriginFromTarget(\n\t\ttargetCoordinates: CoordinatePair,\n\t\tcurrentZoomablePositionWithoutTransformation: CoordinatePair,\n\t\tsessionTranslation: CoordinatePair,\n\t\tscale: number,\n\t): CoordinatePair {\n\t\treturn {\n\t\t\tx: (currentZoomablePositionWithoutTransformation.x + sessionTranslation.x - targetCoordinates.x) / (scale - 1),\n\t\t\ty: (currentZoomablePositionWithoutTransformation.y + sessionTranslation.y - targetCoordinates.y) / (scale - 1),\n\t\t}\n\t}\n\n\tprivate pinchHandling(ev: TouchEvent) {\n\t\tthis.draggingOrZooming = true\n\n\t\t// new pinch gesture?\n\t\tlet transformOrigin = this.getCurrentlyAppliedTransformOriginOfZoomable()\n\t\tlet pinchSessionTranslation = this.pinchSessionTranslation\n\n\t\tconst newTouches = !(this.pinchTouchIDs.has(ev.touches[0].identifier) && this.pinchTouchIDs.has(ev.touches[1].identifier))\n\n\t\tif (newTouches) {\n\t\t\tthis.lastPinchTouchPositions = {\n\t\t\t\tpointer1: { x: ev.touches[0].clientX, y: ev.touches[0].clientY },\n\t\t\t\tpointer2: { x: ev.touches[1].clientX, y: ev.touches[1].clientY },\n\t\t\t}\n\t\t}\n\n\t\t// Calculate the scaleDifference (1 = no scaleDifference, 0 = maximum pinched in, <1 pinching in -> zoom out, >1 pinching out -> zoom in\n\t\tconst scaleDifference =\n\t\t\tthis.pointDistance({ x: ev.touches[0].clientX, y: ev.touches[0].clientY }, { x: ev.touches[1].clientX, y: ev.touches[1].clientY }) /\n\t\t\tthis.pointDistance(this.lastPinchTouchPositions.pointer1, this.lastPinchTouchPositions.pointer2)\n\t\tconst newAbsoluteScale = this.currentScale + (scaleDifference - 1)\n\n\t\tthis.lastPinchTouchPositions = {\n\t\t\tpointer1: { x: ev.touches[0].clientX, y: ev.touches[0].clientY },\n\t\t\tpointer2: { x: ev.touches[1].clientX, y: ev.touches[1].clientY },\n\t\t}\n\n\t\t// calculate new session (in theory it is not necessary to calculate a new sessionsTranslation every time, but there are a few edge cases ->\n\t\t// since it doesn't hurt we decided to recalculate it always)\n\t\tconst pinchCenter = this.centerOfPoints({ x: ev.touches[0].clientX, y: ev.touches[0].clientY }, { x: ev.touches[1].clientX, y: ev.touches[1].clientY })\n\t\tconst startedPinchSession = this.calculateSessionsTranslationAndTransformOrigin(pinchCenter)\n\t\ttransformOrigin = startedPinchSession.newTransformOrigin\n\t\tpinchSessionTranslation = startedPinchSession.sessionTranslation\n\n\t\t//update current touches\n\t\tthis.pinchTouchIDs = new Set<number>([ev.touches[0].identifier, ev.touches[1].identifier])\n\n\t\tconst newTransformOrigin = this.setCurrentSafePosition(\n\t\t\ttransformOrigin,\n\t\t\tpinchSessionTranslation,\n\t\t\tthis.getCurrentZoomablePositionWithoutTransformation(),\n\t\t\tnewAbsoluteScale,\n\t\t).newTransformOrigin\n\t\tthis.update(newTransformOrigin)\n\t}\n\n\tprivate dragHandling(ev: TouchEvent) {\n\t\tif (this.currentScale > this.zoomBoundaries.min && this.lastDragTouchPosition) {\n\t\t\tif (\n\t\t\t\tMath.abs(ev.touches[0].clientX - this.currentTouchStart.x) >= PinchZoom.DRAG_THRESHOLD ||\n\t\t\t\tMath.abs(ev.touches[0].clientY - this.currentTouchStart.y) >= PinchZoom.DRAG_THRESHOLD\n\t\t\t) {\n\t\t\t\tthis.draggingOrZooming = true\n\t\t\t}\n\t\t\tlet delta = { x: ev.touches[0].clientX - this.lastDragTouchPosition.x, y: ev.touches[0].clientY - this.lastDragTouchPosition.y }\n\t\t\tthis.lastDragTouchPosition = { x: ev.touches[0].clientX, y: ev.touches[0].clientY }\n\n\t\t\tlet currentRect = this.getCoords(this.zoomable)\n\t\t\tlet currentOriginalRect = this.getCurrentZoomablePositionWithoutTransformation()\n\n\t\t\t// intuitive formula:\n\t\t\t// newPosition = transformOriginAbsolutePosition - relativeTransformOrigin * scaling\t| substitute unknown values\n\t\t\t// currentRect.x + delta.x = (currentOriginalRect + this.pinchSessionTranslation + newTransformOrigin) - (newTransformOrigin * this.currentScale)\t| solve for newTransformOrigin\n\t\t\t//\n\t\t\t// newTransformOrigin = (currentRect.x + delta.x - (currentOriginalRect.x + this.pinchSessionTranslation.x)) / (1 - this.currentScale)\n\t\t\tlet newTransformOrigin = {\n\t\t\t\tx: (currentRect.x + delta.x - (currentOriginalRect.x + this.pinchSessionTranslation.x)) / (1 - this.currentScale), // zoom is never 1\n\t\t\t\ty: (currentRect.y + delta.y - (currentOriginalRect.y + this.pinchSessionTranslation.y)) / (1 - this.currentScale),\n\t\t\t}\n\t\t\tlet newPinchSessionTranslation = this.pinchSessionTranslation\n\t\t\t// for too large emails and scale 1 we manually need to set the sessionTranslation to allow dragging\n\t\t\t// dragging via adjusting the transform origin does not work for scale=1\n\t\t\tif (this.currentScale === 1) {\n\t\t\t\tnewTransformOrigin = { x: 0, y: 0 } // otherwise NaN but the value does not have any impact\n\t\t\t\tnewPinchSessionTranslation = { x: newPinchSessionTranslation.x + delta.x, y: newPinchSessionTranslation.y + delta.y }\n\t\t\t}\n\n\t\t\tlet result = this.setCurrentSafePosition(\n\t\t\t\tnewTransformOrigin,\n\t\t\t\tnewPinchSessionTranslation,\n\t\t\t\tthis.getCurrentZoomablePositionWithoutTransformation(),\n\t\t\t\tthis.currentScale,\n\t\t\t)\n\t\t\t// default behavior is allowed if vertical dragging is not detected/ possible\n\t\t\t// horizontal behavior is ignored\n\t\t\tif (ev.cancelable && result.verticalTransformationAllowed) {\n\t\t\t\tev.preventDefault() // should prevent the default behavior of the parent elements (e.g. scrolling)\n\t\t\t}\n\n\t\t\tthis.update(result.newTransformOrigin)\n\t\t}\n\t}\n\n\tprivate handleDoubleTap(\n\t\tevent: TouchEvent,\n\t\ttarget: EventTarget | null,\n\t\tsingleClickAction: (e: TouchEvent, target: EventTarget | null) => void,\n\t\tdoubleClickAction: (e: TouchEvent) => void,\n\t) {\n\t\tconst now = Date.now()\n\t\tconst touch = event.changedTouches[0]\n\n\t\t// If there are no touches or it's not cancellable event (e.g. scroll)\n\t\tif (!touch || !event.cancelable) {\n\t\t\treturn\n\t\t}\n\n\t\tevent.preventDefault()\n\n\t\tif (\n\t\t\tnow - this.firstTapTime < this.DOUBLE_TAP_TIME_MS &&\n\t\t\tMath.abs(touch.clientX - this.lastDoubleTapTouchStart.x) < this.SAME_POSITION_RADIUS && // make sure that the double tap stays within the right radius\n\t\t\tMath.abs(touch.clientY - this.lastDoubleTapTouchStart.y) < this.SAME_POSITION_RADIUS\n\t\t) {\n\t\t\tthis.firstTapTime = 0\n\t\t\tdoubleClickAction(event)\n\t\t} else {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (\n\t\t\t\t\tthis.firstTapTime === now && // same touch, if a second tap was performed this condition is false\n\t\t\t\t\tMath.abs(touch.clientX - this.currentTouchStart.x) < this.SAME_POSITION_RADIUS && // otherwise single fast drag is recognized as a click\n\t\t\t\t\tMath.abs(touch.clientY - this.currentTouchStart.y) < this.SAME_POSITION_RADIUS\n\t\t\t\t) {\n\t\t\t\t\t// at this point we are sure that there is no second tap for a double tap\n\n\t\t\t\t\t// We need to verify if it was a long press, so we don't clear the text selection in this case\n\t\t\t\t\tif (now - this.currentTouchStart.startTime < this.LONG_PRESS_MIN_MS) window.getSelection()?.empty() // deselect any selected text\n\n\t\t\t\t\tsingleClickAction(event, target)\n\t\t\t\t}\n\t\t\t}, this.DOUBLE_TAP_TIME_MS)\n\t\t}\n\t\tthis.lastDoubleTapTouchStart = this.currentTouchStart\n\t\tthis.firstTapTime = now\n\t}\n\n\t/**\n\t * Applies the current session translation and scale to the zoomable, so it becomes visible.\n\t */\n\tprivate update(newTransformOrigin: CoordinatePair) {\n\t\tthis.zoomable.style.transformOrigin = `${newTransformOrigin.x}px ${newTransformOrigin.y}px`\n\t\tthis.zoomable.style.transform = `translate3d(${this.pinchSessionTranslation.x}px, ${this.pinchSessionTranslation.y}px, 0) scale(${this.currentScale})`\n\t}\n\n\t/**\n\t * Checks whether the zoomable is still in the allowed are (viewport) after applying the transformations\n\t * if not allowed -> adjust the transformOrigin to keep the transformed zoomable in an allowed state\n\t * apply changes to sessionTranslation, zoom and transformOrigin\n\t */\n\tprivate setCurrentSafePosition(\n\t\tnewTransformOrigin: CoordinatePair,\n\t\tnewPinchSessionTranslation: CoordinatePair,\n\t\tcurrentZoomablePositionWithoutTransformation: CoordinatePair,\n\t\tnewScale: number,\n\t) {\n\t\tthis.getOffsetFromInitialToCurrentViewportPosition()\n\t\tlet currentViewport = this.getCoords(this.viewport)\n\t\t// Since we don't round the screen coordinates, without adding a small tolerance (+-1) unwanted behavior shows up (e.g. tiny differences in the coordinates)\n\t\tlet borders = {\n\t\t\tx: currentViewport.x + 1,\n\t\t\ty: currentViewport.y + 1,\n\t\t\tx2: currentViewport.x2 - 1,\n\t\t\ty2: currentViewport.y2 - 1,\n\t\t}\n\n\t\t// keep the zooming factor within the defined boundaries\n\t\tnewScale = Math.max(this.zoomBoundaries.min, Math.min(this.zoomBoundaries.max, newScale))\n\t\tconst targetedOutcome = this.simulateTransformation(\n\t\t\tcurrentZoomablePositionWithoutTransformation,\n\t\t\tthis.initialZoomableSize.width,\n\t\t\tthis.initialZoomableSize.height,\n\t\t\tnewTransformOrigin,\n\t\t\tnewPinchSessionTranslation,\n\t\t\tnewScale,\n\t\t)\n\t\tconst targetedHeight = targetedOutcome.y2 - targetedOutcome.y\n\t\tconst targetedWidth = targetedOutcome.x2 - targetedOutcome.x\n\n\t\tconst horizontal1Allowed = targetedOutcome.x <= borders.x\n\t\tconst horizontal2Allowed = targetedOutcome.x2 >= borders.x2\n\n\t\tconst vertical1Allowed = targetedOutcome.y <= borders.y\n\t\tconst vertical2Allowed = targetedOutcome.y2 >= borders.y2\n\n\t\tconst horizontalTransformationAllowed = horizontal1Allowed && horizontal2Allowed\n\t\tconst verticalTransformationAllowed = vertical1Allowed && vertical2Allowed\n\n\t\t// find out which operation would be illegal and calculate the adjusted transformOrigin\n\t\tconst targetX = !horizontal1Allowed ? borders.x : !horizontal2Allowed ? borders.x2 - targetedWidth : targetedOutcome.x\n\t\tconst targetY = !vertical1Allowed ? borders.y : !vertical2Allowed ? borders.y2 - targetedHeight : targetedOutcome.y\n\t\tif (targetX !== targetedOutcome.x || targetY !== targetedOutcome.y) {\n\t\t\tnewTransformOrigin = this.calculateTransformOriginFromTarget(\n\t\t\t\t{\n\t\t\t\t\tx: targetX,\n\t\t\t\t\ty: targetY,\n\t\t\t\t},\n\t\t\t\tcurrentZoomablePositionWithoutTransformation,\n\t\t\t\tnewPinchSessionTranslation,\n\t\t\t\tnewScale,\n\t\t\t)\n\t\t}\n\t\tif (newScale === 1 && this.zoomBoundaries.min === 1) {\n\t\t\t// not initially scaled email is back in the original state\n\t\t\tthis.pinchSessionTranslation = { x: 0, y: 0 }\n\t\t} else {\n\t\t\tthis.pinchSessionTranslation = newPinchSessionTranslation\n\t\t}\n\t\tthis.currentScale = newScale\n\n\t\treturn {\n\t\t\tverticalTransformationAllowed,\n\t\t\thorizontalTransformationAllowed,\n\t\t\tnewTransformOrigin,\n\t\t}\n\t}\n\n\t/**\n\t * calculate the outcome of the css transformation\n\t * this is used to check the boundaries before actually applying the transformation\n\t */\n\tprivate simulateTransformation(\n\t\tcurrentOriginalPosition: CoordinatePair,\n\t\toriginalWidth: number,\n\t\toriginalHeight: number,\n\t\ttransformOrigin: CoordinatePair,\n\t\ttranslation: CoordinatePair,\n\t\tscale: number,\n\t): { x: number; y: number; x2: number; y2: number } {\n\t\treturn {\n\t\t\tx: currentOriginalPosition.x + transformOrigin.x - transformOrigin.x * scale + translation.x,\n\t\t\ty: currentOriginalPosition.y + transformOrigin.y - transformOrigin.y * scale + translation.y,\n\t\t\tx2: currentOriginalPosition.x + transformOrigin.x + (originalWidth - transformOrigin.x) * scale + translation.x,\n\t\t\ty2: currentOriginalPosition.y + transformOrigin.y + (originalHeight - transformOrigin.y) * scale + translation.y,\n\t\t}\n\t}\n}\n"]}