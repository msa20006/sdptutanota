{"version":3,"file":"WorkerSqlCipher.js","sourceRoot":"","sources":["../../../../../src/common/desktop/db/WorkerSqlCipher.ts"],"names":[],"mappings":"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","sourcesContent":["import { SqlCipherFacade } from \"../../native/common/generatedipc/SqlCipherFacade.js\"\nimport { TaggedSqlValue } from \"../../api/worker/offline/SqlValue.js\"\nimport { Worker } from \"node:worker_threads\"\nimport { MessageDispatcher, Request } from \"../../api/common/threading/MessageDispatcher.js\"\nimport { SqlCipherCommandNames, WorkerLogCommandNames } from \"../sqlworker.js\"\nimport { NodeWorkerTransport } from \"../../api/common/threading/NodeWorkerTransport.js\"\nimport { createRequire } from \"node:module\"\n\nconst TAG = \"[WorkerSqlCipher]\"\n\n/** impl for SqlCipherFacade that passes any requests to a node worker thread that's running the sqlite db for the given user id\n * this code is running in the main thread of the node process. */\nexport class WorkerSqlCipher implements SqlCipherFacade {\n\tprivate readonly dispatcher: MessageDispatcher<SqlCipherCommandNames, WorkerLogCommandNames>\n\tprivate readonly worker: Worker\n\n\tconstructor(private readonly nativeBindingPath: string, private readonly dbPath: string, private readonly integrityCheck: boolean) {\n\t\t// All entry points are bundled into the same directory\n\t\tconst require = createRequire(import.meta.url)\n\t\tconst worker = new Worker(require.resolve(\"./sqlworker.js\"), {\n\t\t\tworkerData: { nativeBindingPath, dbPath, integrityCheck },\n\t\t}).on(\"error\", (error) => {\n\t\t\t// this is where uncaught errors in the worker end up.\n\t\t\tconsole.log(TAG, `error in sqlcipher-worker-${worker.threadId}:`, error)\n\t\t\tworker.unref()\n\t\t\tthrow error\n\t\t})\n\t\tconsole.log(TAG, `started sqlcipher-worker-${worker.threadId}`)\n\t\tthis.dispatcher = new MessageDispatcher<SqlCipherCommandNames, WorkerLogCommandNames>(\n\t\t\tnew NodeWorkerTransport<SqlCipherCommandNames, never>(worker),\n\t\t\t{\n\t\t\t\tinfo: async (msg: Request<\"info\">) => console.info(`[sqlcipher-worker-${worker.threadId}]`, ...msg.args),\n\t\t\t\tlog: async (msg: Request<\"log\">) => console.log(`[sqlcipher-worker-${worker.threadId}]`, ...msg.args),\n\t\t\t\terror: async (msg: Request<\"error\">) => console.error(`[sqlcipher-worker-${worker.threadId}]`, ...msg.args),\n\t\t\t\twarn: async (msg: Request<\"warn\">) => console.warn(`[sqlcipher-worker-${worker.threadId}]`, ...msg.args),\n\t\t\t\ttrace: async (msg: Request<\"trace\">) => console.trace(`[sqlcipher-worker-${worker.threadId}]`, ...msg.args),\n\t\t\t},\n\t\t\t\"node-nodeworker\",\n\t\t)\n\n\t\tthis.worker = worker\n\t}\n\n\tasync all(query: string, params: ReadonlyArray<TaggedSqlValue>): Promise<ReadonlyArray<Record<string, TaggedSqlValue>>> {\n\t\treturn this.dispatcher.postRequest(new Request(\"all\", [query, params]))\n\t}\n\n\tasync closeDb(): Promise<void> {\n\t\treturn this.dispatcher.postRequest(new Request(\"closeDb\", []))\n\t}\n\n\tasync deleteDb(userId: string): Promise<void> {\n\t\treturn this.dispatcher.postRequest(new Request(\"deleteDb\", []))\n\t}\n\n\tasync get(query: string, params: ReadonlyArray<TaggedSqlValue>): Promise<Record<string, TaggedSqlValue> | null> {\n\t\treturn this.dispatcher.postRequest(new Request(\"get\", [query, params]))\n\t}\n\n\tasync lockRangesDbAccess(listId: string): Promise<void> {\n\t\treturn this.dispatcher.postRequest(new Request(\"lockRangesDbAccess\", [listId]))\n\t}\n\n\tasync openDb(userId: string, dbKey: Uint8Array): Promise<void> {\n\t\treturn this.dispatcher.postRequest(new Request(\"openDb\", [userId, dbKey]))\n\t}\n\n\tasync run(query: string, params: ReadonlyArray<TaggedSqlValue>): Promise<void> {\n\t\treturn this.dispatcher.postRequest(new Request(\"run\", [query, params]))\n\t}\n\n\tasync unlockRangesDbAccess(listId: string): Promise<void> {\n\t\treturn this.dispatcher.postRequest(new Request(\"unlockRangesDbAccess\", [listId]))\n\t}\n}\n"]}