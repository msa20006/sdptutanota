{"version":3,"file":"Deflater.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/pdf/Deflater.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAA;AAEhD,MAAM,OAAO,QAAQ;IACpB,gBAAe,CAAC;IAEhB,KAAK,CAAC,OAAO,CAAC,KAAkB;QAC/B,mEAAmE;QACnE,MAAM,EAAE,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAA;QAC3C,MAAM,MAAM,GAAG,EAAE,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAA;QACtC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QACnB,MAAM,CAAC,KAAK,EAAE,CAAA;QACd,MAAM,MAAM,GAAe,EAAE,CAAA;QAC7B,MAAM,MAAM,GAAG,EAAE,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAA;QACtC,IAAI,SAAS,GAAG,CAAC,CAAA;QACjB,OAAO,IAAI,EAAE,CAAC;YACb,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAA;YAC3C,IAAI,IAAI;gBAAE,MAAK;YACf,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAA;YAC5B,SAAS,IAAI,KAAK,CAAC,UAAU,CAAA;QAC9B,CAAC;QACD,MAAM,YAAY,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,CAAA;QAC9C,IAAI,MAAM,GAAG,CAAC,CAAA;QACd,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC5B,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;YAC/B,MAAM,IAAI,KAAK,CAAC,UAAU,CAAA;QAC3B,CAAC;QACD,OAAO,YAAY,CAAA;IACpB,CAAC;CACD","sourcesContent":["import { downcast } from \"@tutao/tutanota-utils\"\n\nexport class Deflater {\n\tconstructor() {}\n\n\tasync deflate(input: ArrayBuffer): Promise<Uint8Array> {\n\t\t// see https://wicg.github.io/compression/#example-deflate-compress\n\t\tconst cs = new CompressionStream(\"deflate\")\n\t\tconst writer = cs.writable.getWriter()\n\t\twriter.write(input)\n\t\twriter.close()\n\t\tconst output: Array<any> = []\n\t\tconst reader = cs.readable.getReader()\n\t\tlet totalSize = 0\n\t\twhile (true) {\n\t\t\tconst { value, done } = await reader.read()\n\t\t\tif (done) break\n\t\t\toutput.push(downcast(value))\n\t\t\ttotalSize += value.byteLength\n\t\t}\n\t\tconst concatenated = new Uint8Array(totalSize)\n\t\tlet offset = 0\n\t\tfor (const array of output) {\n\t\t\tconcatenated.set(array, offset)\n\t\t\toffset += array.byteLength\n\t\t}\n\t\treturn concatenated\n\t}\n}\n"]}