{"version":3,"file":"DesktopMonkeyPatch.js","sourceRoot":"","sources":["../../../../src/common/desktop/DesktopMonkeyPatch.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"node:fs\"\nimport path from \"node:path\"\nimport { app } from \"electron\"\nimport { execSync } from \"node:child_process\"\nimport { last, neverNull } from \"@tutao/tutanota-utils\"\nimport { Logger, replaceNativeLogger } from \"../api/common/Logger\"\nimport { log, rebindDesktopLog } from \"./DesktopLog\"\n\nconst logger = new Logger()\nreplaceNativeLogger(global, logger, true)\n// we need to bind to a new logger\nrebindDesktopLog()\nprocess.on(\"exit\", () => {\n\tconst logDir = path.join(app.getPath(\"userData\"), \"logs\")\n\tconst logFilePath = path.join(logDir, \"tutanota_desktop.log\")\n\tconst oldLogFilePath = path.join(logDir, \"tutanota_desktop_old.log\")\n\tconst entries = logger.getEntries()\n\tfs.mkdirSync(logDir, {\n\t\trecursive: true,\n\t})\n\n\ttry {\n\t\tfs.renameSync(logFilePath, oldLogFilePath)\n\t} catch (e) {\n\t\t// If the old log was not found, ignore it\n\t\tif (e.code !== \"ENOENT\") {\n\t\t\tconsole.error(\"could not rename old log file: \", e.message)\n\t\t}\n\t}\n\n\ttry {\n\t\tfs.writeFileSync(logFilePath, entries.join(\"\\n\"))\n\t} catch (e) {\n\t\tconsole.error(\"could not write log file: \", e.message)\n\t}\n})\n\nconst oldInfo = console.info\nconst oldLog = console.log\nconst oldError = console.error\nconst oldWarn = console.warn\nconst oldTrace = console.trace\n\n;(console as any).info = (...args: any[]) => oldInfo(`[${new Date().toISOString()}]`, ...args)\n;(console as any).log = (...args: any[]) => oldLog(`[${new Date().toISOString()}]`, ...args)\n;(console as any).error = (...args: any[]) => oldError(`[${new Date().toISOString()}]`, ...args)\n;(console as any).warn = (...args: any[]) => oldWarn(`[${new Date().toISOString()}]`, ...args)\n;(console as any).trace = (...args: any[]) => oldTrace(`[${new Date().toISOString()}]`, ...args)\n\nif (process.platform === \"win32\") {\n\ttry {\n\t\tconst stdout = execSync('reg query \"HKCU\\\\Control Panel\\\\Desktop\" /v PreferredUILanguages', {\n\t\t\tencoding: \"utf8\",\n\t\t})\n\t\tconst parts = stdout.split(\" \")\n\n\t\tif (parts.length > 0) {\n\t\t\tconst locale = neverNull(last(parts)).trim()\n\t\t\tlog.debug(\"detected locale\", locale)\n\t\t\tprocess.env.LC_ALL = locale\n\t\t}\n\t} catch (e) {\n\t\tlog.debug(\"failed to detect locale\")\n\t}\n}\n\nglobal.btoa = (str) => Buffer.from(str, \"binary\").toString(\"base64\")\n\nglobal.atob = (b64) => Buffer.from(b64, \"base64\").toString(\"binary\")\n\n/** this file is only imported for its side effects, which some IDEs do not like.\n * having this available keeps the imports around. */\nexport function mp() {\n\tlog.debug(\"the monkey has been patched pid:\", process.pid)\n}\n"]}