{"version":3,"file":"Transport.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/threading/Transport.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAA;AAchD;;GAEG;AACH,MAAM,OAAO,kBAAkB;IACD;IAA7B,YAA6B,MAA2C;QAA3C,WAAM,GAAN,MAAM,CAAqC;IAAG,CAAC;IAE5E,WAAW,CAAC,OAAqC;QAChD,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;IACxC,CAAC;IAED,iBAAiB,CAAC,OAA2D;QAC5E,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,CAAC,EAAO,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;IAChE,CAAC;CACD","sourcesContent":["import { Message } from \"./MessageDispatcher.js\"\nimport { downcast } from \"@tutao/tutanota-utils\"\n\nexport interface Transport<OutgoingCommandType, IncomingCommandType> {\n\t/**\n\t * Post a message to the other side of the transport\n\t */\n\tpostMessage(message: Message<OutgoingCommandType>): void\n\n\t/**\n\t * Set the handler for messages coming from the other end of the transport\n\t */\n\tsetMessageHandler(handler: (message: Message<IncomingCommandType>) => unknown): unknown\n}\n\n/**\n * Queue transport for both WorkerClient and WorkerImpl\n */\nexport class WebWorkerTransport<OutgoingCommandType, IncomingCommandType> implements Transport<OutgoingCommandType, IncomingCommandType> {\n\tconstructor(private readonly worker: Worker | DedicatedWorkerGlobalScope) {}\n\n\tpostMessage(message: Message<OutgoingCommandType>): void {\n\t\treturn this.worker.postMessage(message)\n\t}\n\n\tsetMessageHandler(handler: (message: Message<IncomingCommandType>) => unknown) {\n\t\tthis.worker.onmessage = (ev: any) => handler(downcast(ev.data))\n\t}\n}\n"]}