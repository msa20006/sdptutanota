{"version":3,"file":"DesktopThemeFacade.js","sourceRoot":"","sources":["../../../../src/common/desktop/DesktopThemeFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Theme, ThemeId, ThemePreference } from \"../gui/theme\"\nimport { DesktopConfig } from \"./config/DesktopConfig\"\nimport { DesktopConfigKey } from \"./config/ConfigKeys\"\nimport { ThemeFacade } from \"../native/common/generatedipc/ThemeFacade\"\nimport { WindowManager } from \"./DesktopWindowManager\"\nimport electron from \"electron\"\n\nconst LIGHT_FALLBACK_THEME: Partial<Theme> = {\n\tthemeId: \"light-fallback\",\n\tcontent_bg: \"#ffffff\",\n\theader_bg: \"#ffffff\",\n\tnavigation_bg: \"#f6f6f6\",\n}\n\n/**\n * ThemeManager impl like in other native parts.\n * 4 methods correspond to ThemeFacade from web plus two convenience methods getCurrentTheme() and getCurrentThemeWithFallback().\n */\nexport class DesktopThemeFacade implements ThemeFacade {\n\tconstructor(private readonly config: DesktopConfig, private readonly wm: WindowManager, private readonly nativeTheme: Electron.NativeTheme) {}\n\n\tinit() {\n\t\telectron.nativeTheme.on(\"updated\", () => {\n\t\t\tfor (const window of this.wm.getAll()) {\n\t\t\t\twindow.commonNativeFacade.updateTheme()\n\t\t\t\twindow.updateBackgroundColor()\n\t\t\t}\n\t\t})\n\t}\n\n\tgetThemePreference(): Promise<ThemePreference | null> {\n\t\treturn this.config.getVar(DesktopConfigKey.selectedTheme)\n\t}\n\n\tasync setThemePreference(themeId: ThemePreference) {\n\t\tawait this.config.setVar(DesktopConfigKey.selectedTheme, themeId)\n\t\tawait this.applyTheme()\n\t}\n\n\tasync getThemes(): Promise<Array<Theme>> {\n\t\treturn (await this.config.getVar(DesktopConfigKey.themes)) || []\n\t}\n\n\tasync setThemes(themes: Array<Theme>) {\n\t\tawait this.config.setVar(DesktopConfigKey.themes, themes)\n\t\tawait this.applyTheme()\n\t}\n\n\tasync getCurrentTheme(): Promise<Theme | null> {\n\t\tconst themeId = await this.resolveThemePreference()\n\t\tconst themes = await this.getThemes()\n\t\treturn themes.find((t) => t.themeId === themeId) ?? null\n\t}\n\n\tasync getCurrentThemeWithFallback(): Promise<Theme> {\n\t\tconst theme = await this.getCurrentTheme()\n\t\treturn theme ? { ...LIGHT_FALLBACK_THEME, ...theme } : (LIGHT_FALLBACK_THEME as Theme)\n\t}\n\n\tasync prefersDark(): Promise<boolean> {\n\t\treturn this.nativeTheme.shouldUseDarkColors\n\t}\n\n\tprivate async applyTheme() {\n\t\tfor (const window of this.wm.getAll()) {\n\t\t\tawait window.updateBackgroundColor()\n\t\t}\n\t}\n\n\tprivate async resolveThemePreference(): Promise<ThemeId> {\n\t\tconst pref = await this.getThemePreference()\n\t\tif (pref === \"auto:light|dark\") {\n\t\t\treturn this.nativeTheme.shouldUseDarkColors ? \"dark\" : \"light\"\n\t\t} else {\n\t\t\treturn pref ?? \"light\"\n\t\t}\n\t}\n}\n"]}