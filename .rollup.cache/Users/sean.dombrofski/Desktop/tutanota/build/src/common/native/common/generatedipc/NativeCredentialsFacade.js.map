{"version":3,"file":"NativeCredentialsFacade.js","sourceRoot":"","sources":["../../../../../../src/common/native/common/generatedipc/NativeCredentialsFacade.ts"],"names":[],"mappings":"AAAA,iCAAiC","sourcesContent":["/* generated file, don't edit. */\n\nimport { CredentialEncryptionMode } from \"./CredentialEncryptionMode.js\"\nimport { PersistedCredentials } from \"./PersistedCredentials.js\"\nimport { UnencryptedCredentials } from \"./UnencryptedCredentials.js\"\n/**\n * Operations for credential encryption operations using OS keychain.\n */\nexport interface NativeCredentialsFacade {\n\tgetSupportedEncryptionModes(): Promise<ReadonlyArray<CredentialEncryptionMode>>\n\n\tloadAll(): Promise<ReadonlyArray<PersistedCredentials>>\n\n\t/**\n\t * Encrypt and store credentials\n\t */\n\tstore(credentials: UnencryptedCredentials): Promise<void>\n\n\t/**\n\t * Store already encrypted credentials\n\t */\n\tstoreEncrypted(credentials: PersistedCredentials): Promise<void>\n\n\tloadByUserId(id: string): Promise<UnencryptedCredentials | null>\n\n\tdeleteByUserId(id: string): Promise<void>\n\n\tgetCredentialEncryptionMode(): Promise<CredentialEncryptionMode | null>\n\n\tsetCredentialEncryptionMode(encryptionMode: CredentialEncryptionMode): Promise<void>\n\n\tclear(): Promise<void>\n\n\t/**\n\t * Migrate existing credentials to native db\n\t */\n\tmigrateToNativeCredentials(\n\t\tcredentials: ReadonlyArray<PersistedCredentials>,\n\t\tencryptionMode: CredentialEncryptionMode,\n\t\tcredentialsKey: Uint8Array,\n\t): Promise<void>\n}\n"]}