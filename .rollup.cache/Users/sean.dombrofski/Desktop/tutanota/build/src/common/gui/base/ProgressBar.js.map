{"version":3,"file":"ProgressBar.js","sourceRoot":"","sources":["../../../../../src/common/gui/base/ProgressBar.ts"],"names":[],"mappings":"AAAA,OAAO,CAAuB,MAAM,SAAS,CAAA;AAO7C,MAAM,CAAN,IAAY,eAGX;AAHD,WAAY,eAAe;IAC1B,uDAAK,CAAA;IACL,uDAAK,CAAA;AACN,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,CAAA;AAE9B;;;GAGG;AACH,MAAM,OAAO,WAAW;IACf,YAAY,GAAkB,IAAI,CAAA;IAE1C,IAAI,CAAC,KAA8B;QAClC,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAA;QACrB,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,IAAI,CAAC,CAAC,QAAQ,IAAI,aAAa,EAAE,CAAC;YAC/D,+DAA+D;YAC/D,OAAO,IAAI,CAAA;QACZ,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,IAAI,IAAI,CAAC,YAAY,IAAI,aAAa,EAAE,CAAC;YACtE,mCAAmC;YACnC,gCAAgC;YAChC,OAAO,IAAI,CAAA;QACZ,CAAC;QACD,IAAI,CAAC,CAAC,QAAQ,IAAI,aAAa,EAAE,CAAC;YACjC,0CAA0C;YAC1C,8CAA8C;YAC9C,qCAAqC;YACrC,CAAC,CAAC,MAAM,EAAE,CAAA;QACX,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,QAAQ,CAAA;QAC9B,IAAI,mBAAmB,GAAG,CAAC,CAAC,IAAI,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC,CAAC,gBAAgB,CAAA;QACjH,OAAO,CAAC,CAAC,mBAAmB,EAAE;YAC7B,cAAc,EAAE,CAAC,EAAE,EAAE,EAAE,CACtB,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;gBAC7B,EAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC,eAAe,EAAE,GAAG,EAAE;oBAC7C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAA;oBACxB,OAAO,EAAE,CAAA;gBACV,CAAC,CAAC,CAAA;gBACF,UAAU,CAAC,GAAG,EAAE;oBACf,IAAI,CAAC,YAAY,GAAG,IAAI,CAAA;oBACxB,OAAO,EAAE,CAAA;gBACV,CAAC,EAAE,GAAG,CAAC,CAAA;YACR,CAAC,CAAC;YACH,KAAK,EAAE;gBACN,GAAG,EAAE,CAAC;gBACN,IAAI,EAAE,CAAC;gBACP,UAAU,EAAE,aAAa;gBACzB,KAAK,EAAE,CAAC,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG;gBAC7B,MAAM,EAAE,CAAC,CAAC,IAAI,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK;aACxD;SACD,CAAC,CAAA;IACH,CAAC;CACD","sourcesContent":["import m, { Component, Vnode } from \"mithril\"\n\nexport type ProgressBarAttrs = {\n\tprogress: number\n\ttype?: ProgressBarType\n}\n\nexport enum ProgressBarType {\n\tSmall,\n\tLarge,\n}\n\nexport const PROGRESS_DONE = 1\n\n/**\n * a progress bar that takes a progress value and displays it as\n * a portion of its containers width\n */\nexport class ProgressBar implements Component<ProgressBarAttrs> {\n\tprivate lastProgress: number | null = null\n\n\tview(vnode: Vnode<ProgressBarAttrs>) {\n\t\tconst a = vnode.attrs\n\t\tif (this.lastProgress === null && a.progress >= PROGRESS_DONE) {\n\t\t\t// no need to draw anything if we went from 0 to 100 real quick\n\t\t\treturn null\n\t\t}\n\n\t\tif (this.lastProgress !== null && this.lastProgress >= PROGRESS_DONE) {\n\t\t\t// on the last redraw, we were done\n\t\t\t// so we can start to remove now\n\t\t\treturn null\n\t\t}\n\t\tif (a.progress >= PROGRESS_DONE) {\n\t\t\t// schedule the removal redraw now because\n\t\t\t// we might not get another redraw for a while\n\t\t\t// otherwise (since progress is done)\n\t\t\tm.redraw()\n\t\t}\n\n\t\tthis.lastProgress = a.progress\n\t\tlet progressBarSelector = a.type == ProgressBarType.Large ? \".abs.accent-bg.border-radius-big\" : \".abs.accent-bg\"\n\t\treturn m(progressBarSelector, {\n\t\t\tonbeforeremove: (vn) =>\n\t\t\t\tnew Promise<void>((resolve) => {\n\t\t\t\t\tvn.dom.addEventListener(\"transitionend\", () => {\n\t\t\t\t\t\tthis.lastProgress = null\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t})\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.lastProgress = null\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t}, 500)\n\t\t\t\t}),\n\t\t\tstyle: {\n\t\t\t\ttop: 0,\n\t\t\t\tleft: 0,\n\t\t\t\ttransition: \"width 500ms\",\n\t\t\t\twidth: a.progress * 100 + \"%\",\n\t\t\t\theight: a.type == ProgressBarType.Large ? \"100%\" : \"2px\",\n\t\t\t},\n\t\t})\n\t}\n}\n"]}