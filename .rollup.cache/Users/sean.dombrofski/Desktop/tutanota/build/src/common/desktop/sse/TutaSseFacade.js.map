{"version":3,"file":"TutaSseFacade.js","sourceRoot":"","sources":["../../../../../src/common/desktop/sse/TutaSseFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { SseClient, SseEventHandler } from \"./SseClient.js\"\nimport { TutaNotificationHandler } from \"./TutaNotificationHandler.js\"\nimport { DesktopNativeCryptoFacade } from \"../DesktopNativeCryptoFacade.js\"\nimport { makeTaggedLogger } from \"../DesktopLog.js\"\nimport { typeModels } from \"../../api/entities/sys/TypeModels.js\"\nimport { assertNotNull, base64ToBase64Url, filterInt, neverNull, stringToUtf8Uint8Array, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport { handleRestError } from \"../../api/common/error/RestError.js\"\nimport { MissedNotification } from \"../../api/entities/sys/TypeRefs.js\"\nimport { EncryptedAlarmNotification } from \"../../native/common/EncryptedAlarmNotification.js\"\nimport { SseStorage } from \"./SseStorage.js\"\nimport { DateProvider } from \"../../api/common/DateProvider.js\"\nimport { SseInfo } from \"./SseInfo.js\"\nimport { FetchImpl } from \"../net/NetAgent\"\n\nconst log = makeTaggedLogger(\"[SSEFacade]\")\n\nexport const MISSED_NOTIFICATION_TTL = 30 * 24 * 60 * 60 * 1000 // 30 days\nexport type EncryptedMissedNotification = MissedNotification & { alarmNotifications: readonly EncryptedAlarmNotification[] }\n\nexport class TutaSseFacade implements SseEventHandler {\n\tprivate currentSseInfo: SseInfo | null = null\n\n\tconstructor(\n\t\tprivate readonly sseStorage: SseStorage,\n\t\tprivate readonly notificationHandler: TutaNotificationHandler,\n\t\tprivate readonly sseClient: SseClient,\n\t\tprivate readonly crypto: DesktopNativeCryptoFacade,\n\t\tprivate readonly appVersion: string,\n\t\tprivate readonly fetch: FetchImpl,\n\t\tprivate readonly date: DateProvider,\n\t) {\n\t\tsseClient.setEventListener(this)\n\t}\n\n\tasync connect() {\n\t\tif (await this.hasNotificationTTLExpired()) {\n\t\t\tawait this.notificationHandler.onLocalDataInvalidated()\n\t\t\tawait this.sseStorage.clear()\n\t\t\treturn\n\t\t}\n\t\tif (this.currentSseInfo != null) {\n\t\t\tawait this.disconnect()\n\t\t}\n\t\tconst sseInfo = await this.sseStorage.getSseInfo()\n\t\tif (sseInfo == null) {\n\t\t\tlog.debug(\"No SSE info\")\n\t\t\treturn\n\t\t}\n\t\tconst url = this.getSseUrl(sseInfo, sseInfo.userIds[0])\n\t\tconst headers = {\n\t\t\tv: typeModels.MissedNotification.version,\n\t\t\tcv: this.appVersion,\n\t\t}\n\t\tconst timeout = await this.sseStorage.getHeartbeatTimeoutSec()\n\t\tif (timeout != null) {\n\t\t\tthis.sseClient.setReadTimeout(timeout)\n\t\t}\n\n\t\tawait this.sseClient.connect({ url, headers })\n\t\tthis.currentSseInfo = sseInfo\n\t}\n\n\t/**\n\t * We remember the last time we connected or fetched missed notification and if since the last time we did the the TTL time has\n\t * expired, we certainly missed some updates.\n\t * We need to unschedule all alarms and to tell web part that we would like alarms to be scheduled all over.\n\t */\n\tprivate async hasNotificationTTLExpired(): Promise<boolean> {\n\t\tconst lastMissedNotificationCheckTime = await this.sseStorage.getMissedNotificationCheckTime()\n\t\tlog.debug(\"last missed notification check:\", {\n\t\t\tlastMissedNotificationCheckTime,\n\t\t})\n\t\treturn lastMissedNotificationCheckTime != null && this.date.now() - lastMissedNotificationCheckTime > MISSED_NOTIFICATION_TTL\n\t}\n\n\tprivate getSseUrl(sseInfo: SseInfo, userId: string): URL {\n\t\tconst url = new URL(sseInfo.sseOrigin)\n\t\turl.pathname = \"sse\"\n\t\turl.searchParams.append(\"_body\", this.requestJson(sseInfo.identifier, userId))\n\t\treturn url\n\t}\n\n\tprivate requestJson(identifier: string, userId: string): string {\n\t\treturn JSON.stringify({\n\t\t\t_format: \"0\",\n\t\t\tidentifier: identifier,\n\t\t\tuserIds: [\n\t\t\t\t{\n\t\t\t\t\t_id: this.crypto.generateId(4),\n\t\t\t\t\tvalue: userId,\n\t\t\t\t},\n\t\t\t],\n\t\t})\n\t}\n\n\tprivate async onNotification() {\n\t\tif ((await this.sseStorage.getMissedNotificationCheckTime()) == null) {\n\t\t\t// We set default value for  the case when Push identifier was added but no notifications were received. Then more than\n\t\t\t// MISSED_NOTIFICATION_TTL has passed and notifications has expired\n\t\t\tawait this.sseStorage.recordMissedNotificationCheckTime()\n\t\t}\n\t\tif (await this.hasNotificationTTLExpired()) {\n\t\t\tawait this.notificationHandler.onLocalDataInvalidated()\n\t\t\treturn\n\t\t}\n\t\tlet missedNotification\n\t\ttry {\n\t\t\tmissedNotification = await this.downloadMissedNotification()\n\t\t} catch (e) {\n\t\t\tlog.warn(\"Failed to download missed notification\", e)\n\t\t\treturn\n\t\t}\n\n\t\tawait this.sseStorage.setLastProcessedNotificationId(assertNotNull(missedNotification.lastProcessedNotificationId))\n\t\tawait this.sseStorage.recordMissedNotificationCheckTime()\n\t\tconst sseInfo = this.currentSseInfo\n\t\tif (sseInfo == null) return\n\t\tfor (const notificationInfo of missedNotification.notificationInfos) {\n\t\t\tawait this.notificationHandler.onMailNotification(sseInfo, notificationInfo)\n\t\t}\n\t\tfor (const alarmNotification of missedNotification.alarmNotifications) {\n\t\t\tawait this.notificationHandler.onAlarmNotification(alarmNotification)\n\t\t}\n\t}\n\n\tprivate async downloadMissedNotification(): Promise<EncryptedMissedNotification> {\n\t\tconst sseInfo = assertNotNull(this.currentSseInfo)\n\t\tconst url = this.makeMissedNotificationUrl(sseInfo)\n\n\t\tlog.debug(\"downloading missed notification\")\n\t\tconst headers: Record<string, string> = {\n\t\t\tuserIds: sseInfo.userIds[0],\n\t\t\tv: typeModels.MissedNotification.version,\n\t\t\tcv: this.appVersion,\n\t\t}\n\t\tconst lastProcessedId = await this.sseStorage.getLastProcessedNotificationId()\n\n\t\tif (lastProcessedId) {\n\t\t\theaders[\"lastProcessedNotificationId\"] = lastProcessedId\n\t\t}\n\n\t\tconst res = await this.fetch(url, { headers })\n\n\t\tif (!res.ok) {\n\t\t\tthrow handleRestError(neverNull(res.status), url, res.headers.get(\"error-id\") as string, null)\n\t\t} else {\n\t\t\tconst json = await res.json()\n\t\t\tlog.debug(\"downloaded missed notification\")\n\t\t\treturn json as EncryptedMissedNotification\n\t\t}\n\t}\n\n\tprivate makeMissedNotificationUrl(sseInfo: SseInfo): string {\n\t\tconst { identifier, sseOrigin } = sseInfo\n\t\tconst customId = uint8ArrayToBase64(stringToUtf8Uint8Array(identifier))\n\t\tconst url = new URL(sseOrigin)\n\t\turl.pathname = \"rest/sys/missednotification/\" + base64ToBase64Url(customId)\n\t\treturn url.toString()\n\t}\n\n\tasync onNewMessage(message: string) {\n\t\tif (message === \"data: notification\") {\n\t\t\tlog.debug(\"notification\")\n\t\t\tawait this.onNotification()\n\t\t\t// deal with it\n\t\t} else if (message.startsWith(\"data: heartbeatTimeout:\")) {\n\t\t\tconst timeoutString = message.split(\":\").at(2)\n\t\t\tlog.debug(\"heartbeatTimeout\", timeoutString)\n\t\t\tconst timeout = timeoutString == null ? null : filterInt(timeoutString)\n\t\t\tif (timeout != null && !isNaN(timeout)) {\n\t\t\t\tawait this.sseStorage.setHeartbeatTimeoutSec(timeout)\n\t\t\t\tthis.sseClient.setReadTimeout(timeout)\n\t\t\t}\n\t\t}\n\t}\n\n\tasync onNotAuthenticated() {\n\t\t// invalid userids\n\t\tlog.debug(\"got NotAuthenticated, deleting userId\")\n\t\tlet lastSseInfo = this.currentSseInfo\n\t\tthis.currentSseInfo = null\n\t\tif (lastSseInfo == null) {\n\t\t\tlog.warn(\"NotAuthorized while not connected?\")\n\t\t\treturn\n\t\t}\n\t\tconst firstUser = lastSseInfo.userIds.at(0)\n\t\tawait this.removeUserIdInternal(firstUser)\n\t}\n\n\tasync removeUser(userId: Id) {\n\t\tawait this.removeUserIdInternal(userId)\n\t\tawait this.connect()\n\t}\n\n\tprivate async removeUserIdInternal(userId: string | undefined) {\n\t\tlet sseInfo\n\t\tif (userId != null) {\n\t\t\tsseInfo = await this.sseStorage.removeUser(userId)\n\t\t\tawait this.notificationHandler.onUserRemoved(userId)\n\t\t} else {\n\t\t\tsseInfo = await this.sseStorage.getSseInfo()\n\t\t}\n\t\tif (sseInfo?.userIds.length === 0) {\n\t\t\tlog.debug(\"No user ids, skipping reconnect\")\n\t\t\tawait this.notificationHandler.onLocalDataInvalidated()\n\t\t\tawait this.sseStorage.clear()\n\t\t}\n\t}\n\n\tasync reconnect() {\n\t\tawait this.disconnect()\n\t\tawait this.connect()\n\t}\n\n\tasync disconnect() {\n\t\tthis.currentSseInfo = null\n\t\tawait this.sseClient.disconnect()\n\t}\n}\n"]}