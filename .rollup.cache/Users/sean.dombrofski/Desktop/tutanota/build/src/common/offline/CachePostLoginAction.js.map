{"version":3,"file":"CachePostLoginAction.js","sourceRoot":"","sources":["../../../../src/common/offline/CachePostLoginAction.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,oBAAoB,EAAE,MAAM,sCAAsC,CAAA;AAC3E,OAAO,EAAE,aAAa,EAAE,MAAM,oCAAoC,CAAA;AAGlE,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAA;AAClD,OAAO,EAAE,mBAAmB,EAAE,MAAM,wCAAwC,CAAA;AAI5E,MAAM,OAAO,oBAAoB;IAEd;IACA;IACA;IACA;IACA;IALlB,YACkB,aAA4B,EAC5B,YAA0B,EAC1B,eAAgC,EAChC,YAAiC,EACjC,MAAuB;QAJvB,kBAAa,GAAb,aAAa,CAAe;QAC5B,iBAAY,GAAZ,YAAY,CAAc;QAC1B,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAqB;QACjC,WAAM,GAAN,MAAM,CAAiB;IACtC,CAAC;IAEJ,KAAK,CAAC,kBAAkB,CAAC,aAA4B;QACpD,sEAAsE;QACtE,sEAAsE;QACtE,IAAI,aAAa,CAAC,WAAW,mCAA2B;YAAE,OAAM;QAChE,EAAE;QACF,qEAAqE;QACrE,MAAM,eAAe,GAAG,CAAC,GAAG,CAAC,CAAA;QAC7B,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,sBAAsB,EAAE,CAAC,MAAM,GAAG,eAAe,CAAA;QACnG,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,SAAS,CAAC,CAAA;QAC3E,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,IAAI,mBAAmB,EAAE,CAAA;QACnG,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAA;QAEjE,MAAM,UAAU,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;YAChE,MAAM,OAAO,CAAC,GAAG,CAAC;gBACjB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,oBAAoB,EAAE,SAAS,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC5H,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,oBAAoB,EAAE,SAAS,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;aAC7H,CAAC,CAAA;QACH,CAAC,CAAC,CAAA;QACF,eAAe,CAAC,SAAS,EAAE,CAAA;QAE3B,wFAAwF;QACxF,MAAM,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAA;IAC5C,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,aAA4B;QACvD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IACzB,CAAC;CACD","sourcesContent":["import { PostLoginAction, LoggedInEvent, LoginController } from \"../api/main/LoginController.js\"\nimport { CalendarModel } from \"../../calendar-app/calendar/model/CalendarModel.js\"\nimport { CalendarEventTypeRef } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { CUSTOM_MIN_ID } from \"../api/common/utils/EntityUtils.js\"\nimport { EntityClient } from \"../api/common/EntityClient.js\"\nimport { ProgressTracker } from \"../api/main/ProgressTracker.js\"\nimport { promiseMap } from \"@tutao/tutanota-utils\"\nimport { NoopProgressMonitor } from \"../api/common/utils/ProgressMonitor.js\"\nimport { SessionType } from \"../api/common/SessionType.js\"\nimport { ExposedCacheStorage } from \"../api/worker/rest/DefaultEntityRestCache.js\"\n\nexport class CachePostLoginAction implements PostLoginAction {\n\tconstructor(\n\t\tprivate readonly calendarModel: CalendarModel,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly progressTracker: ProgressTracker,\n\t\tprivate readonly cacheStorage: ExposedCacheStorage,\n\t\tprivate readonly logins: LoginController,\n\t) {}\n\n\tasync onFullLoginSuccess(loggedInEvent: LoggedInEvent): Promise<void> {\n\t\t// we use an ephemeral cache for non-persistent sessions which doesn't\n\t\t// support or save calendar events, so it's pointless to preload them.\n\t\tif (loggedInEvent.sessionType !== SessionType.Persistent) return\n\t\t//\n\t\t// 3 work to load calendar info, 2 work to load short and long events\n\t\tconst workPerCalendar = 3 + 2\n\t\tconst totalWork = this.logins.getUserController().getCalendarMemberships().length * workPerCalendar\n\t\tconst monitorHandle = await this.progressTracker.registerMonitor(totalWork)\n\t\tconst progressMonitor = this.progressTracker.getMonitor(monitorHandle) ?? new NoopProgressMonitor()\n\t\tconst calendarInfos = await this.calendarModel.getCalendarInfos()\n\n\t\tawait promiseMap(calendarInfos.values(), async ({ groupRoot }) => {\n\t\t\tawait Promise.all([\n\t\t\t\tthis.entityClient.loadAll(CalendarEventTypeRef, groupRoot.longEvents, CUSTOM_MIN_ID).then(() => progressMonitor.workDone(1)),\n\t\t\t\tthis.entityClient.loadAll(CalendarEventTypeRef, groupRoot.shortEvents, CUSTOM_MIN_ID).then(() => progressMonitor.workDone(1)),\n\t\t\t])\n\t\t})\n\t\tprogressMonitor.completed()\n\n\t\t// Clear the excluded data (i.e. trash and spam lists, old data) in the offline storage.\n\t\tawait this.cacheStorage.clearExcludedData()\n\t}\n\n\tasync onPartialLoginSuccess(loggedInEvent: LoggedInEvent): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n}\n"]}