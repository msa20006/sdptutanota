{"version":3,"file":"HtmlSanitizer.js","sourceRoot":"","sources":["../../../../src/common/misc/HtmlSanitizer.ts"],"names":[],"mappings":"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","sourcesContent":["import { ReplacementImage } from \"../gui/base/icons/Icons\"\nimport { downcast, stringToUtf8Uint8Array, utf8Uint8ArrayToString } from \"@tutao/tutanota-utils\"\nimport { DataFile } from \"../api/common/DataFile\"\nimport { encodeSVG } from \"../gui/base/GuiUtils.js\"\nimport DOMPurify, { Config } from \"dompurify\"\n\n/** Data url for an SVG image that will be shown in place of external content. */\nexport const PREVENT_EXTERNAL_IMAGE_LOADING_ICON: string = encodeSVG(ReplacementImage)\n\n// background attribute is deprecated but still used in common browsers\nconst EXTERNAL_CONTENT_ATTRS = Object.freeze([\n\t\"src\",\n\t\"poster\",\n\t\"srcset\",\n\t\"background\",\n\t\"draft-src\",\n\t\"draft-srcset\",\n\t\"draft-xlink:href\",\n\t\"draft-href\",\n\t\"xlink:href\",\n\t\"href\",\n])\n\nconst DRAFT_ATTRIBUTES = [\"draft-src\", \"draft-srcset\", \"draft-xlink:href\", \"draft-href\"]\n\ntype SanitizeConfigExtra = {\n\tblockExternalContent: boolean\n\tallowRelativeLinks: boolean\n\tusePlaceholderForInlineImages: boolean\n}\n\nconst DEFAULT_CONFIG_EXTRA: SanitizeConfigExtra = Object.freeze({\n\tblockExternalContent: true,\n\tallowRelativeLinks: false,\n\tusePlaceholderForInlineImages: true,\n})\n\n/** Result of sanitization operation with result in a string form */\nexport type SanitizedHTML = {\n\t/** Clean HTML text */\n\thtml: string\n\t/** Number of blocked external content that was encountered */\n\tblockedExternalContent: number\n\t/** Collected cid: URLs, normally used for inline content */\n\tinlineImageCids: Array<string>\n\t/** Collected href link elements */\n\tlinks: Array<HTMLElement>\n}\n\ntype SanitizeConfig = SanitizeConfigExtra & Config\n\nexport type Link = HTMLElement\n\n/** Result of sanitization operation with result in a form of a DocumentFragment */\nexport type SanitizedFragment = {\n\t/** Clean HTML fragment */\n\tfragment: DocumentFragment\n\t/** Number of blocked external content that was encountered */\n\tblockedExternalContent: number\n\t/** Collected cid: URLs, normally used for inline content */\n\tinlineImageCids: Array<string>\n\t/** Collected href link elements */\n\tlinks: Array<Link>\n}\n\n/** Allowing additional HTML attributes */\nconst ADD_ATTR = Object.freeze([\n\t// for target=_blank\n\t\"target\",\n\t// for audio element\n\t\"controls\",\n\t// for embedded images\n\t\"cid\",\n\t// to persist not loaded images\n\t\"draft-src\",\n\t\"draft-srcset\",\n] as const)\n\n/** These must be safe for URI-like values */\nconst ADD_URI_SAFE_ATTR = Object.freeze([\n\t// for video element\n\t\"poster\",\n] as const)\n\n/** Complete disallow some HTML tags. */\nconst FORBID_TAGS = Object.freeze([\n\t// prevent loading of external stylesheets and fonts by blocking the whole <style> tag\n\t\"style\",\n] as const)\n\n/** restricts the allowed protocols to some standard ones + our tutatemplate protocol that allows the knowledge base to link to email templates. */\nconst ALLOWED_URI_REGEXP = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|tutatemplate):|[^a-z]|[a-z+.-]+(?:[^a-z+.\\-:]|$))/i\n\nconst HTML_CONFIG: Config & { RETURN_DOM_FRAGMENT?: undefined; RETURN_DOM?: undefined } = Object.freeze({\n\tADD_ATTR: ADD_ATTR.slice(),\n\tADD_URI_SAFE_ATTR: ADD_URI_SAFE_ATTR.slice(),\n\tFORBID_TAGS: FORBID_TAGS.slice(),\n\tALLOWED_URI_REGEXP,\n} as const)\nconst SVG_CONFIG: Config & { RETURN_DOM_FRAGMENT?: undefined; RETURN_DOM?: undefined } = Object.freeze({\n\tADD_ATTR: ADD_ATTR.slice(),\n\tADD_URI_SAFE_ATTR: ADD_URI_SAFE_ATTR.slice(),\n\tFORBID_TAGS: FORBID_TAGS.slice(),\n\tNAMESPACE: \"http://www.w3.org/2000/svg\",\n} as const)\nconst FRAGMENT_CONFIG: Config & { RETURN_DOM_FRAGMENT: true } = Object.freeze({\n\tADD_ATTR: ADD_ATTR.slice(),\n\tADD_URI_SAFE_ATTR: ADD_URI_SAFE_ATTR.slice(),\n\tFORBID_TAGS: FORBID_TAGS.slice(),\n\tRETURN_DOM_FRAGMENT: true,\n\tALLOWED_URI_REGEXP,\n} as const)\n\ntype BaseConfig = typeof HTML_CONFIG | typeof SVG_CONFIG | typeof FRAGMENT_CONFIG\n\n/** Class to pre-process HTML/SVG content. */\nexport class HtmlSanitizer {\n\tprivate externalContent!: number\n\tprivate inlineImageCids!: Array<string>\n\tprivate links!: Array<Link>\n\tprivate purifier!: typeof DOMPurify\n\n\tconstructor() {\n\t\tif (DOMPurify.isSupported) {\n\t\t\tthis.purifier = DOMPurify\n\t\t\t// Do changes in afterSanitizeAttributes and not afterSanitizeElements so that images are not removed again because of the SVGs.\n\t\t\tthis.purifier.addHook(\"afterSanitizeAttributes\", this.afterSanitizeAttributes.bind(this))\n\t\t}\n\t}\n\n\t/**\n\t * Sanitizes the given html. Returns as HTML\n\t */\n\tsanitizeHTML(html: string, configExtra?: Partial<SanitizeConfigExtra>): SanitizedHTML {\n\t\tconst config = this.init(HTML_CONFIG, configExtra ?? {})\n\t\tconst cleanHtml = this.purifier.sanitize(html, config)\n\t\treturn {\n\t\t\thtml: cleanHtml,\n\t\t\tblockedExternalContent: this.externalContent,\n\t\t\tinlineImageCids: this.inlineImageCids,\n\t\t\tlinks: this.links,\n\t\t}\n\t}\n\n\t/**\n\t * Sanitizes the given SVG. Returns as SVG\n\t */\n\tsanitizeSVG(svg: string, configExtra?: Partial<SanitizeConfigExtra>): SanitizedHTML {\n\t\tconst config = this.init(SVG_CONFIG, configExtra ?? {})\n\t\tconst cleanSvg = this.purifier.sanitize(svg, config)\n\t\treturn {\n\t\t\thtml: cleanSvg,\n\t\t\tblockedExternalContent: this.externalContent,\n\t\t\tinlineImageCids: this.inlineImageCids,\n\t\t\tlinks: this.links,\n\t\t}\n\t}\n\n\t/**\n\t * inline images are attachments that are rendered as part of an <img> tag with a blob URL in the\n\t * mail body when it's displayed\n\t *\n\t * svg images can contain malicious code, so we need to sanitize them before we display them.\n\t * DOMPurify can do that, but can't handle the xml declaration at the start of well-formed svg documents.\n\t *\n\t * 1. parse the document as xml\n\t * 2. strip the declaration\n\t * 3. sanitize\n\t * 4. add the declaration back on\n\t *\n\t * NOTE: currently, we only allow UTF-8 inline SVG.\n\t * NOTE: SVG with incompatible encodings will be replaced with an empty file.\n\t *\n\t * @param dirtyFile the svg DataFile as received in the mail\n\t * @returns clean a sanitized svg document as a DataFile\n\t */\n\tsanitizeInlineAttachment(dirtyFile: DataFile): DataFile {\n\t\tif (dirtyFile.mimeType === \"image/svg+xml\") {\n\t\t\tlet cleanedData = Uint8Array.from([])\n\t\t\ttry {\n\t\t\t\tconst dirtySVG = utf8Uint8ArrayToString(dirtyFile.data)\n\t\t\t\tconst parser = new DOMParser()\n\t\t\t\tconst dirtyTree = parser.parseFromString(dirtySVG, \"image/svg+xml\")\n\t\t\t\tconst errs = dirtyTree.getElementsByTagName(\"parsererror\")\n\t\t\t\tif (errs.length === 0) {\n\t\t\t\t\tconst svgElement = dirtyTree.getElementsByTagName(\"svg\")[0]\n\t\t\t\t\tif (svgElement != null) {\n\t\t\t\t\t\tconst config = this.init(SVG_CONFIG, {})\n\t\t\t\t\t\tconst cleanText = this.purifier.sanitize(svgElement.outerHTML, config)\n\t\t\t\t\t\tcleanedData = stringToUtf8Uint8Array('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n' + cleanText)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"svg sanitization failed, possibly due to wrong input encoding.\")\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"svg sanitization failed\")\n\t\t\t}\n\t\t\tdirtyFile.data = cleanedData\n\t\t}\n\t\treturn dirtyFile\n\t}\n\n\t/**\n\t * Sanitizes given HTML. Returns a DocumentFragment instead of an HTML string\n\t */\n\tsanitizeFragment(html: string, configExtra?: Partial<SanitizeConfigExtra>): SanitizedFragment {\n\t\tconst config = this.init(FRAGMENT_CONFIG, configExtra ?? {})\n\t\tconst cleanFragment = this.purifier.sanitize(html, config)\n\t\treturn {\n\t\t\tfragment: cleanFragment,\n\t\t\tblockedExternalContent: this.externalContent,\n\t\t\tinlineImageCids: this.inlineImageCids,\n\t\t\tlinks: this.links,\n\t\t}\n\t}\n\n\tprivate init<T extends BaseConfig>(config: T, configExtra: Partial<SanitizeConfigExtra>): SanitizeConfigExtra & T {\n\t\tthis.externalContent = 0\n\t\tthis.inlineImageCids = []\n\t\tthis.links = []\n\t\treturn Object.assign({}, config, DEFAULT_CONFIG_EXTRA, configExtra)\n\t}\n\n\tprivate afterSanitizeAttributes(currentNode: Element, data: null, config: Config) {\n\t\tconst typedConfig = config as SanitizeConfig\n\t\t// remove custom css classes as we do not allow style definitions. custom css classes can be in conflict to our self defined classes.\n\t\t// just allow our own \"tutanota_quote\" class and MsoListParagraph classes for compatibility with Outlook 2010/2013 emails. see main-styles.js\n\t\tlet allowedClasses = [\n\t\t\t\"tutanota_indented\",\n\t\t\t\"tutanota_quote\",\n\t\t\t\"MsoListParagraph\",\n\t\t\t\"MsoListParagraphCxSpFirst\",\n\t\t\t\"MsoListParagraphCxSpMiddle\",\n\t\t\t\"MsoListParagraphCxSpLast\",\n\t\t]\n\n\t\tif (currentNode.classList) {\n\t\t\tlet cl = currentNode.classList\n\n\t\t\tfor (let i = cl.length - 1; i >= 0; i--) {\n\t\t\t\tconst item = cl.item(i)\n\n\t\t\t\tif (item && allowedClasses.indexOf(item) === -1) {\n\t\t\t\t\tcl.remove(item)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.replaceAttributes(currentNode as HTMLElement, typedConfig)\n\n\t\tthis.processLink(currentNode as HTMLElement, typedConfig)\n\n\t\treturn currentNode\n\t}\n\n\tprivate replaceAttributes(htmlNode: HTMLElement, config: SanitizeConfig) {\n\t\t// Don't allow inline images to have a bigger width than the email itself\n\t\t// Otherwise this would lead to weird rendering with very large images and pinch zoom\n\t\t// The order of the replacement should not be changed since maxWidth=100% is replaced with 100px in case of\n\t\t// placeholder images further below in the code\n\t\tif (htmlNode.tagName === \"IMG\") {\n\t\t\thtmlNode.style.maxWidth = \"100%\"\n\t\t}\n\n\t\tif (htmlNode.attributes) {\n\t\t\tthis.replaceAttributeValue(htmlNode, config)\n\t\t}\n\n\t\tif (htmlNode.style) {\n\t\t\tif (config.blockExternalContent) {\n\t\t\t\t// for a decent table of where <image> CSS type can occur see https://developer.mozilla.org/en-US/docs/Web/CSS/image\n\t\t\t\tif (htmlNode.style.backgroundImage) {\n\t\t\t\t\tthis.replaceStyleImage(htmlNode, \"backgroundImage\", false)\n\n\t\t\t\t\thtmlNode.style.backgroundRepeat = \"no-repeat\"\n\t\t\t\t}\n\n\t\t\t\tif (htmlNode.style.listStyleImage) {\n\t\t\t\t\tthis.replaceStyleImage(htmlNode, \"listStyleImage\", true)\n\t\t\t\t}\n\n\t\t\t\tif (htmlNode.style.content) {\n\t\t\t\t\tthis.replaceStyleImage(htmlNode, \"content\", true)\n\t\t\t\t}\n\n\t\t\t\tif (htmlNode.style.cursor) {\n\t\t\t\t\tthis.removeStyleImage(htmlNode, \"cursor\")\n\t\t\t\t}\n\n\t\t\t\tif (htmlNode.style.filter) {\n\t\t\t\t\tthis.removeStyleImage(htmlNode, \"filter\")\n\t\t\t\t}\n\n\t\t\t\tif (htmlNode.style.borderImageSource) {\n\t\t\t\t\tthis.removeStyleImage(htmlNode, \"border-image-source\")\n\t\t\t\t}\n\n\t\t\t\tif (htmlNode.style.maskImage || htmlNode.style.webkitMaskImage) {\n\t\t\t\t\tthis.removeStyleImage(htmlNode, \"mask-image\")\n\t\t\t\t\tthis.removeStyleImage(htmlNode, \"-webkit-mask-image\")\n\t\t\t\t}\n\n\t\t\t\tif (htmlNode.style.shapeOutside) {\n\t\t\t\t\tthis.removeStyleImage(htmlNode, \"shape-outside\")\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Disallow position because you can do bad things with it and it also messes up layout\n\t\t\t// Do this unconditionally, independent from the external content blocking.\n\t\t\tif (htmlNode.style.position) {\n\t\t\t\thtmlNode.style.removeProperty(\"position\")\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate replaceAttributeValue(htmlNode: HTMLElement, config: SanitizeConfig) {\n\t\tconst nodeName = htmlNode.tagName.toLowerCase()\n\n\t\tfor (const attrName of EXTERNAL_CONTENT_ATTRS) {\n\t\t\tlet attribute = htmlNode.attributes.getNamedItem(attrName)\n\n\t\t\tif (attribute) {\n\t\t\t\tif (config.usePlaceholderForInlineImages && attribute.value.startsWith(\"cid:\")) {\n\t\t\t\t\t// replace embedded image with local image until the embedded image is loaded and ready to be shown.\n\t\t\t\t\tconst cid = attribute.value.substring(4)\n\n\t\t\t\t\tthis.inlineImageCids.push(cid)\n\n\t\t\t\t\tattribute.value = PREVENT_EXTERNAL_IMAGE_LOADING_ICON\n\t\t\t\t\thtmlNode.setAttribute(\"cid\", cid)\n\t\t\t\t\thtmlNode.classList.add(\"tutanota-placeholder\")\n\t\t\t\t} else if (config.blockExternalContent && attribute.name === \"srcset\") {\n\t\t\t\t\tthis.externalContent++\n\n\t\t\t\t\thtmlNode.setAttribute(\"draft-srcset\", attribute.value)\n\t\t\t\t\thtmlNode.removeAttribute(\"srcset\")\n\t\t\t\t\thtmlNode.setAttribute(\"src\", PREVENT_EXTERNAL_IMAGE_LOADING_ICON)\n\t\t\t\t\thtmlNode.style.maxWidth = \"100px\"\n\t\t\t\t} else if (\n\t\t\t\t\tconfig.blockExternalContent &&\n\t\t\t\t\t!attribute.value.startsWith(\"data:\") &&\n\t\t\t\t\t!attribute.value.startsWith(\"cid:\") &&\n\t\t\t\t\t!attribute.name.startsWith(\"draft-\") &&\n\t\t\t\t\t!(nodeName === \"a\") &&\n\t\t\t\t\t!(nodeName === \"area\") &&\n\t\t\t\t\t!(nodeName === \"base\") &&\n\t\t\t\t\t!(nodeName === \"link\")\n\t\t\t\t) {\n\t\t\t\t\t// Since we are blocking href now we need to check if the attr isn't\n\t\t\t\t\t// being used by a valid tag (a, area, base, link)\n\t\t\t\t\tthis.externalContent++\n\n\t\t\t\t\thtmlNode.setAttribute(\"draft-\" + attribute.name, attribute.value)\n\t\t\t\t\tattribute.value = PREVENT_EXTERNAL_IMAGE_LOADING_ICON\n\t\t\t\t\thtmlNode.attributes.setNamedItem(attribute)\n\t\t\t\t\thtmlNode.style.maxWidth = \"100px\"\n\t\t\t\t} else if (!config.blockExternalContent && DRAFT_ATTRIBUTES.includes(attribute.name)) {\n\t\t\t\t\tif (attribute.name === \"draft-src\") {\n\t\t\t\t\t\thtmlNode.setAttribute(\"src\", attribute.value)\n\t\t\t\t\t\thtmlNode.removeAttribute(attribute.name)\n\t\t\t\t\t} else if (attribute.name === \"draft-href\" || attribute.name === \"draft-xlink:href\") {\n\t\t\t\t\t\tconst hrefTag = attribute.name === \"draft-href\" ? \"href\" : \"xlink:href\"\n\t\t\t\t\t\thtmlNode.setAttribute(hrefTag, attribute.value)\n\t\t\t\t\t\thtmlNode.removeAttribute(attribute.name)\n\t\t\t\t\t} else {\n\t\t\t\t\t\thtmlNode.setAttribute(\"srcset\", attribute.value)\n\t\t\t\t\t\thtmlNode.removeAttribute(attribute.name)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/** NB! {@param cssStyleAttributeName} is a *CSS* name (\"border-image-source\" as opposed to \"borderImageSource\"). */\n\tprivate removeStyleImage(htmlNode: HTMLElement, cssStyleAttributeName: string) {\n\t\tlet value = htmlNode.style.getPropertyValue(cssStyleAttributeName)\n\n\t\tif (value.match(/url\\(/)) {\n\t\t\tthis.externalContent++\n\n\t\t\thtmlNode.style.removeProperty(cssStyleAttributeName)\n\t\t}\n\t}\n\n\t/** {@param styleAttributeName} is a JS name for the style */\n\tprivate replaceStyleImage(htmlNode: HTMLElement, styleAttributeName: string, limitWidth: boolean) {\n\t\tlet value: string = (htmlNode.style as any)[styleAttributeName]\n\n\t\t// if there's a `url(` anywhere in the value and if *the whole* value is not just data URL then replace the whole value with replacement URL\n\t\t// see tests for treacherous example but also\n\t\t//\n\t\t// ```css\n\t\t// background-image: linear-gradient(\n\t\t//     to bottom,\n\t\t//     rgba(255, 255, 0, 0.5),\n\t\t//     rgba(0, 0, 255, 0.5)\n\t\t//   ), url(\"catfront.png\");\n\t\t// ```\n\t\t// in this case background-image can have multiple values but it's safe to just block the whole thing\n\t\t//\n\t\t// some examples where it can be inside a single <image> value:\n\t\t//\n\t\t// cross-fade(20% url(twenty.png), url(eighty.png))\n\t\t// image-set('test.jpg' 1x, 'test-2x.jpg' 2x)\n\t\tif (value.includes(\"url(\") && value.match(/url\\(/g)?.length !== value.match(/url\\([\"']?data:/g)?.length) {\n\t\t\tthis.externalContent++\n\t\t\t;(htmlNode.style as any)[styleAttributeName] = `url(\"${PREVENT_EXTERNAL_IMAGE_LOADING_ICON}\")`\n\n\t\t\tif (limitWidth) {\n\t\t\t\thtmlNode.style.maxWidth = \"100px\"\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate processLink(currentNode: HTMLElement, config: SanitizeConfig) {\n\t\t// set target=\"_blank\" for all links\n\t\t// collect them\n\t\tif (\n\t\t\tcurrentNode.tagName &&\n\t\t\t(currentNode.tagName.toLowerCase() === \"a\" || currentNode.tagName.toLowerCase() === \"area\" || currentNode.tagName.toLowerCase() === \"form\")\n\t\t) {\n\t\t\tconst href = currentNode.getAttribute(\"href\")\n\t\t\tif (href) this.links.push(currentNode)\n\n\t\t\tif (config.allowRelativeLinks || !href || isAllowedLink(href)) {\n\t\t\t\tcurrentNode.setAttribute(\"rel\", \"noopener noreferrer\")\n\t\t\t\tcurrentNode.setAttribute(\"target\", \"_blank\")\n\t\t\t} else if (href.trim() === \"{link}\") {\n\t\t\t\t// notification mail template\n\t\t\t\tdowncast(currentNode).href = \"{link}\"\n\t\t\t\tcurrentNode.setAttribute(\"rel\", \"noopener noreferrer\")\n\t\t\t\tcurrentNode.setAttribute(\"target\", \"_blank\")\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Relative/invalid URL\", currentNode, href)\n\t\t\t\tdowncast(currentNode).href = \"javascript:void(0)\"\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction isAllowedLink(link: string): boolean {\n\ttry {\n\t\t// We create URL without explicit base (second argument). It is an error for relative links\n\t\treturn new URL(link).protocol !== \"file:\"\n\t} catch (e) {\n\t\treturn false\n\t}\n}\n\nexport const htmlSanitizer: HtmlSanitizer = new HtmlSanitizer()\n"]}