{"version":3,"file":"FileApp.js","sourceRoot":"","sources":["../../../../../src/common/native/common/FileApp.ts"],"names":[],"mappings":"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","sourcesContent":["import { promiseMap } from \"@tutao/tutanota-utils\"\nimport { FileReference } from \"../../api/common/utils/FileUtils\"\nimport { DataFile } from \"../../api/common/DataFile\"\nimport { HttpMethod } from \"../../api/common/EntityFunctions\"\nimport { FileFacade } from \"./generatedipc/FileFacade.js\"\nimport { ExportFacade } from \"./generatedipc/ExportFacade.js\"\nimport { DownloadTaskResponse } from \"./generatedipc/DownloadTaskResponse\"\nimport { UploadTaskResponse } from \"./generatedipc/UploadTaskResponse\"\nimport { MailBundle } from \"../../mailFunctionality/SharedMailUtils.js\"\n\nexport type FileUri = string\n\nexport class NativeFileApp {\n\tconstructor(private readonly fileFacade: FileFacade, private readonly exportFacade: ExportFacade) {}\n\n\t/**\n\t * Open the file\n\t * @param file The uri of the file\n\t */\n\topen(file: FileReference): Promise<void> {\n\t\treturn this.fileFacade.open(file.location, file.mimeType)\n\t}\n\n\t/**\n\t * Opens a file chooser to select a file.\n\t * @param boundingRect The file chooser is opened next to the rectangle.\n\t * @param filter an optional list of allowed file extensions\n\t */\n\tasync openFileChooser(boundingRect: DOMRect, filter?: ReadonlyArray<string>, isFileOnly: boolean = false): Promise<Array<FileReference>> {\n\t\t/* The file chooser opens next to a location specified by srcRect on larger devices (iPad).\n\t\t * The rectangle must be specifed using values for x, y, height and width.\n\t\t */\n\t\tconst srcRect = {\n\t\t\tx: Math.round(boundingRect.left),\n\t\t\ty: Math.round(boundingRect.top),\n\t\t\twidth: Math.round(boundingRect.width),\n\t\t\theight: Math.round(boundingRect.height),\n\t\t}\n\t\tconst files = await this.fileFacade.openFileChooser(srcRect, filter ?? null, isFileOnly)\n\t\treturn promiseMap(files, this.uriToFileRef.bind(this))\n\t}\n\n\topenFolderChooser(): Promise<string | null> {\n\t\treturn this.fileFacade.openFolderChooser()\n\t}\n\n\t/**\n\t * Deletes the file.\n\t * @param  file The uri of the file to delete.\n\t */\n\tdeleteFile(file: FileUri): Promise<void> {\n\t\treturn this.fileFacade.deleteFile(file)\n\t}\n\n\t/**\n\t * Returns the name of the file\n\t * @param file The uri of the file\n\t */\n\tgetName(file: FileUri): Promise<string> {\n\t\treturn this.fileFacade.getName(file)\n\t}\n\n\t/**\n\t * Returns the mime type of the file\n\t * @param file The uri of the file\n\t */\n\tgetMimeType(file: FileUri): Promise<string> {\n\t\treturn this.fileFacade.getMimeType(file)\n\t}\n\n\t/**\n\t * Returns the byte size of a file\n\t * @param file The uri of the file\n\t */\n\tgetSize(file: FileUri): Promise<number> {\n\t\treturn this.fileFacade.getSize(file)\n\t}\n\n\t/**\n\t * Copies the file into downloads folder and notifies system and user about that\n\t * @param localFileUri URI for the source file\n\t * @returns {*} absolute path of the destination file\n\t */\n\tputFileIntoDownloadsFolder(localFileUri: FileUri, fileNameToUse: string): Promise<string> {\n\t\treturn this.fileFacade.putFileIntoDownloadsFolder(localFileUri, fileNameToUse)\n\t}\n\n\tasync writeDataFile(data: DataFile): Promise<FileReference> {\n\t\tconst fileUri = await this.fileFacade.writeDataFile(data)\n\t\treturn {\n\t\t\t_type: \"FileReference\",\n\t\t\tname: data.name,\n\t\t\tmimeType: data.mimeType,\n\t\t\tsize: data.size,\n\t\t\tlocation: fileUri,\n\t\t}\n\t}\n\n\t/**\n\t * Uploads the binary data of a file to tutadb\n\t */\n\tupload(fileUrl: string, targetUrl: string, method: HttpMethod, headers: Dict): Promise<UploadTaskResponse> {\n\t\treturn this.fileFacade.upload(fileUrl, targetUrl, method, headers)\n\t}\n\n\t/**\n\t * Downloads the binary data of a file from tutadb and stores it in the internal memory.\n\t * @returns Resolves to the URI of the downloaded file\n\t */\n\tdownload(sourceUrl: FileUri, filename: string, headers: Dict): Promise<DownloadTaskResponse> {\n\t\treturn this.fileFacade.download(sourceUrl, filename, headers)\n\t}\n\n\t/**\n\t * Get the shortened (first six bytes) of the SHA256 of the file.\n\t * @param fileUri\n\t * @return Base64 encoded, shortened SHA256 hash of the file\n\t */\n\thashFile(fileUri: FileUri): Promise<string> {\n\t\treturn this.fileFacade.hashFile(fileUri)\n\t}\n\n\tclearFileData(): Promise<any> {\n\t\treturn this.fileFacade.clearFileData()\n\t}\n\n\t/**\n\t * take a file location in the form of\n\t *   - a uri like file:///home/user/cat.jpg\n\t *   - an absolute file path like C:\\Users\\cat.jpg\n\t * and return a DataFile populated\n\t * with data and metadata of that file on disk.\n\t *\n\t * returns null\n\t *   - if invoked in apps, because they use FileRef, not DataFile\n\t *   - if file can't be opened for any reason\n\t *   - if path is not absolute\n\t */\n\tasync readDataFile(uriOrPath: string): Promise<DataFile | null> {\n\t\treturn this.fileFacade.readDataFile(uriOrPath)\n\t}\n\n\t/**\n\t * Generate an MSG file from the mail bundle and save it in the temp export directory\n\t * @param bundle\n\t * @param fileName\n\t * @returns {Promise<*>}\n\t */\n\tmailToMsg(bundle: MailBundle, fileName: string): Promise<DataFile> {\n\t\treturn this.exportFacade.mailToMsg(bundle, fileName)\n\t}\n\n\t/**\n\t * drag given file names from the temp directory\n\t * @returns {Promise<*>}\n\t * @param fileNames: relative paths to files from the export directory\n\t */\n\tstartNativeDrag(fileNames: Array<string>): Promise<void> {\n\t\treturn this.exportFacade.startNativeDrag(fileNames)\n\t}\n\n\tsaveToExportDir(file: DataFile): Promise<void> {\n\t\treturn this.exportFacade.saveToExportDir(file)\n\t}\n\n\tcheckFileExistsInExportDir(path: string): Promise<boolean> {\n\t\treturn this.exportFacade.checkFileExistsInExportDir(path)\n\t}\n\n\tgetFilesMetaData(filesUris: ReadonlyArray<string>): Promise<Array<FileReference>> {\n\t\treturn promiseMap(filesUris, async (uri) => {\n\t\t\tconst [name, mimeType, size] = await Promise.all([this.getName(uri), this.getMimeType(uri), this.getSize(uri)])\n\t\t\treturn {\n\t\t\t\t_type: \"FileReference\",\n\t\t\t\tname,\n\t\t\t\tmimeType,\n\t\t\t\tsize,\n\t\t\t\tlocation: uri,\n\t\t\t}\n\t\t})\n\t}\n\n\turiToFileRef(uri: string): Promise<FileReference> {\n\t\treturn Promise.all([this.getName(uri), this.getMimeType(uri), this.getSize(uri)]).then(([name, mimeType, size]) => ({\n\t\t\t_type: \"FileReference\",\n\t\t\tname,\n\t\t\tmimeType,\n\t\t\tsize,\n\t\t\tlocation: uri,\n\t\t}))\n\t}\n\n\t/**\n\t * Joins the given files into one single file with a given name. The file is place in the app's temporary decrypted directory.\n\t * @param filename the resulting filename\n\t * @param files The files to join.\n\t *\n\t */\n\tjoinFiles(filename: string, files: Array<FileUri>): Promise<FileUri> {\n\t\treturn this.fileFacade.joinFiles(filename, files)\n\t}\n\n\t/**\n\t * Splits the given file into chunks of the given maximum size. The chunks will be placed in the temporary decrypted directory.\n\t * @param fileUri\n\t * @param maxChunkSizeBytes\n\t */\n\tasync splitFile(fileUri: FileUri, maxChunkSizeBytes: number): Promise<ReadonlyArray<FileUri>> {\n\t\treturn this.fileFacade.splitFile(fileUri, maxChunkSizeBytes)\n\t}\n}\n"]}