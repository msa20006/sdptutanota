{"version":3,"file":"DesktopLog.js","sourceRoot":"","sources":["../../../../src/common/desktop/DesktopLog.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAA;AAC5C,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAA;AAGxC,MAAM,CAAC,MAAM,GAAG,GAMf,OAAO,GAAG,KAAK,WAAW,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;IACnD,CAAC,CAAC;QACA,KAAK,EAAE,IAAI;QACX,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,IAAI;QACX,IAAI,EAAE,IAAI;KACT;IACH,CAAC,CAAC,OAAO,EAAE,CAAA;AAEb,MAAM,UAAU,gBAAgB;IAC/B,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC,CAAA;AAC9B,CAAC;AAED,SAAS,OAAO;IACf,OAAO;QACN,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;QAChC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QAChC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;QAClC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;KAChC,CAAA;AACF,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,GAAW;IAC3C,OAAO;QACN,KAAK,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QAC3C,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QACzC,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QACzC,KAAK,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;KAC3C,CAAA;AACF,CAAC","sourcesContent":["import { noOp } from \"@tutao/tutanota-utils\"\nimport { Mode } from \"../api/common/Env\"\n\ntype LogFn = (...args: any) => void\nexport const log: {\n\tdebug: LogFn\n\twarn: LogFn\n\terror: LogFn\n\tinfo: LogFn\n} =\n\ttypeof env !== \"undefined\" && env.mode === Mode.Test\n\t\t? {\n\t\t\t\tdebug: noOp,\n\t\t\t\twarn: noOp,\n\t\t\t\terror: noOp,\n\t\t\t\tinfo: noOp,\n\t\t  }\n\t\t: makeLog()\n\nexport function rebindDesktopLog() {\n\tObject.assign(log, makeLog())\n}\n\nfunction makeLog() {\n\treturn {\n\t\tdebug: console.log.bind(console),\n\t\twarn: console.warn.bind(console),\n\t\terror: console.error.bind(console),\n\t\tinfo: console.info.bind(console),\n\t}\n}\n\nexport function makeTaggedLogger(tag: string): typeof log {\n\treturn {\n\t\tdebug: (...args) => log.debug(tag, ...args),\n\t\tinfo: (...args) => log.info(tag, ...args),\n\t\twarn: (...args) => log.warn(tag, ...args),\n\t\terror: (...args) => log.error(tag, ...args),\n\t}\n}\n"]}