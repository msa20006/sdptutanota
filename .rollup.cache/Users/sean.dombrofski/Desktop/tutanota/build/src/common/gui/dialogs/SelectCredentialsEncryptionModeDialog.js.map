{"version":3,"file":"SelectCredentialsEncryptionModeDialog.js","sourceRoot":"","sources":["../../../../../src/common/gui/dialogs/SelectCredentialsEncryptionModeDialog.ts"],"names":[],"mappings":"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","sourcesContent":["import { CredentialEncryptionMode } from \"../../misc/credentials/CredentialEncryptionMode.js\"\nimport { Dialog, DialogType } from \"../base/Dialog\"\nimport type { CredentialsProvider } from \"../../misc/credentials/CredentialsProvider.js\"\nimport m, { Children, Component, Vnode } from \"mithril\"\nimport { lang, TranslationKey } from \"../../misc/LanguageViewModel\"\nimport { DialogHeaderBar } from \"../base/DialogHeaderBar\"\nimport type { RadioSelectorAttrs, RadioSelectorOption } from \"../base/RadioSelector\"\nimport { RadioSelector } from \"../base/RadioSelector\"\nimport { ButtonType } from \"../base/Button.js\"\nimport { CredentialAuthenticationError } from \"../../api/common/error/CredentialAuthenticationError\"\nimport { KeyPermanentlyInvalidatedError } from \"../../api/common/error/KeyPermanentlyInvalidatedError\"\nimport { liveDataAttrs } from \"../AriaUtils\"\nimport type { DeferredObject } from \"@tutao/tutanota-utils\"\nimport { defer } from \"@tutao/tutanota-utils\"\nimport { windowFacade } from \"../../misc/WindowFacade\"\nimport { CancelledError } from \"../../api/common/error/CancelledError.js\"\nimport { Keys } from \"../../api/common/TutanotaConstants.js\"\nimport { BaseButton } from \"../base/buttons/BaseButton.js\"\n\nexport const DEFAULT_CREDENTIAL_ENCRYPTION_MODE = CredentialEncryptionMode.DEVICE_LOCK\n\nexport async function showCredentialsEncryptionModeDialog(credentialsProvider: CredentialsProvider): Promise<void> {\n\tawait CredentialEncryptionMethodDialog.showAndWaitForSelection(credentialsProvider)\n}\n\nclass CredentialEncryptionMethodDialog {\n\tprivate error: string | null\n\tprivate readonly finished: DeferredObject<void>\n\tprivate readonly dialog: Dialog\n\n\tprivate constructor(\n\t\tprivate readonly credentialsProvider: CredentialsProvider,\n\t\tprivate readonly supportedModes: ReadonlyArray<CredentialEncryptionMode>,\n\t\tprivate readonly previousSelection: CredentialEncryptionMode | null,\n\t) {\n\t\tthis.error = null\n\t\tthis.finished = defer()\n\t\tthis.dialog = new Dialog(DialogType.EditMedium, {\n\t\t\tview: () => {\n\t\t\t\t// We need custom dialog because:\n\t\t\t\t// - We don't need large dialog\n\t\t\t\t// - We want our selector button in the body and not in the header and it must stick to the bottom of the dialog\n\t\t\t\t//   (large dialog scrolls its contents and that's *not* what we want for that button).\n\t\t\t\treturn m(\"\", [\n\t\t\t\t\t// Only allow skipping if it's first time user selects mode (not from settings)\n\t\t\t\t\tpreviousSelection == null\n\t\t\t\t\t\t? m(DialogHeaderBar, {\n\t\t\t\t\t\t\t\tleft: () => [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: \"skip_action\",\n\t\t\t\t\t\t\t\t\t\tclick: () => this.onModeSelected(DEFAULT_CREDENTIAL_ENCRYPTION_MODE),\n\t\t\t\t\t\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\t\t\t\t\t} as const,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t  })\n\t\t\t\t\t\t: null,\n\t\t\t\t\tm(SelectCredentialsEncryptionModeView, {\n\t\t\t\t\t\tclass: \"scroll pt plr-l height-100p\",\n\t\t\t\t\t\terror: this.error,\n\t\t\t\t\t\tonConfirm: (mode) => this.onModeSelected(mode),\n\t\t\t\t\t\tsupportedModes: this.supportedModes,\n\t\t\t\t\t\tpreviousSelection: this.previousSelection ?? DEFAULT_CREDENTIAL_ENCRYPTION_MODE,\n\t\t\t\t\t}),\n\t\t\t\t])\n\t\t\t},\n\t\t}).addShortcut({\n\t\t\thelp: \"close_alt\",\n\t\t\tkey: Keys.ESC,\n\t\t\texec: () => this.dialog.close(),\n\t\t})\n\t\tthis.dialog.setCloseHandler(() => {\n\t\t\tthis.finished.resolve()\n\t\t\tthis.dialog.close()\n\t\t})\n\t}\n\n\tstatic async showAndWaitForSelection(credentialsProvider: CredentialsProvider) {\n\t\tconst supportedModes = await credentialsProvider.getSupportedEncryptionModes()\n\t\tconst previousSelection = await credentialsProvider.getCredentialEncryptionMode()\n\t\tconst credentialsDialog = new CredentialEncryptionMethodDialog(credentialsProvider, supportedModes, previousSelection)\n\n\t\tcredentialsDialog.dialog.show()\n\n\t\tawait credentialsDialog.finished.promise\n\t}\n\n\tprivate async onModeSelected(mode: CredentialEncryptionMode) {\n\t\ttry {\n\t\t\tawait this.credentialsProvider.setCredentialEncryptionMode(mode)\n\n\t\t\tthis.dialog.close()\n\n\t\t\tthis.finished.resolve()\n\t\t} catch (e) {\n\t\t\tif (e instanceof CredentialAuthenticationError) {\n\t\t\t\tthis.error = e.message\n\t\t\t\tm.redraw()\n\t\t\t} else if (e instanceof KeyPermanentlyInvalidatedError) {\n\t\t\t\tawait this.credentialsProvider.clearCredentials(e)\n\n\t\t\t\tthis.dialog.close()\n\n\t\t\t\tawait Dialog.message(\"credentialsKeyInvalidated_msg\")\n\t\t\t\twindowFacade.reload({})\n\t\t\t} else if (e instanceof CancelledError) {\n\t\t\t\t// if the user cancels, is unrecognized by Face ID, enters an incorrect device password, etc., we should not close the dialog\n\t\t\t\t// and instead let them try again or choose a different encryption mode\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n}\n\ntype SelectCredentialEncryptionModeDialogAttrs = {\n\tclass?: string\n\tpreviousSelection: CredentialEncryptionMode\n\tonConfirm: ((encryptionMode: CredentialEncryptionMode) => unknown) | null\n\tsupportedModes: ReadonlyArray<CredentialEncryptionMode>\n\terror: string | null\n\tonModeSelected?: (mode: CredentialEncryptionMode) => unknown\n}\n\nexport class SelectCredentialsEncryptionModeView implements Component<SelectCredentialEncryptionModeDialogAttrs> {\n\tprivate currentMode: CredentialEncryptionMode\n\n\tconstructor({ attrs }: Vnode<SelectCredentialEncryptionModeDialogAttrs>) {\n\t\tthis.currentMode = attrs.previousSelection\n\t}\n\n\tview({ attrs }: Vnode<SelectCredentialEncryptionModeDialogAttrs>): Children {\n\t\tconst options = this.getSupportedOptions(attrs)\n\n\t\tconst { onConfirm } = attrs\n\t\treturn [\n\t\t\tm(\n\t\t\t\t\".flex.col\",\n\t\t\t\t{\n\t\t\t\t\tclass: attrs.class,\n\t\t\t\t},\n\t\t\t\t[\n\t\t\t\t\tattrs.error ? m(\".small.center.statusTextColor.pb-s\", liveDataAttrs(), attrs.error) : null,\n\t\t\t\t\tm(\"\", lang.get(\"credentialsEncryptionModeSelection_msg\")),\n\t\t\t\t\tm(\n\t\t\t\t\t\t\".mt\",\n\t\t\t\t\t\tm(RadioSelector, {\n\t\t\t\t\t\t\tname: \"credentialsEncryptionMode_label\",\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tselectedOption: this.currentMode,\n\t\t\t\t\t\t\tonOptionSelected: (mode: CredentialEncryptionMode) => {\n\t\t\t\t\t\t\t\tthis.currentMode = mode\n\t\t\t\t\t\t\t\tattrs.onModeSelected?.(mode)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} satisfies RadioSelectorAttrs<CredentialEncryptionMode>),\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t),\n\t\t\tonConfirm ? this.renderSelectButton(() => onConfirm(this.currentMode)) : null,\n\t\t]\n\t}\n\n\tprivate getSupportedOptions(attrs: SelectCredentialEncryptionModeDialogAttrs): Array<RadioSelectorOption<CredentialEncryptionMode>> {\n\t\tconst generateOption = (name: TranslationKey, value: CredentialEncryptionMode): RadioSelectorOption<CredentialEncryptionMode> => ({\n\t\t\tname,\n\t\t\tvalue,\n\t\t})\n\n\t\tconst options = [\n\t\t\tgenerateOption(\"credentialsEncryptionModeDeviceLock_label\", CredentialEncryptionMode.DEVICE_LOCK),\n\t\t\tgenerateOption(\"credentialsEncryptionModeDeviceCredentials_label\", CredentialEncryptionMode.SYSTEM_PASSWORD),\n\t\t\tgenerateOption(\"credentialsEncryptionModeBiometrics_label\", CredentialEncryptionMode.BIOMETRICS),\n\t\t\tgenerateOption(\"credentialsEncryptionModeAppPassword_label\", CredentialEncryptionMode.APP_PASSWORD),\n\t\t] as const\n\t\treturn options.filter((option) => attrs.supportedModes.includes(option.value))\n\t}\n\n\tprivate renderSelectButton(onclick: () => unknown) {\n\t\treturn m(BaseButton, {\n\t\t\tlabel: \"ok_action\",\n\t\t\ttext: lang.get(\"ok_action\"),\n\t\t\tclass: \"uppercase accent-bg full-width center b content-fg flash\",\n\t\t\tstyle: {\n\t\t\t\theight: \"60px\",\n\t\t\t},\n\t\t\tonclick,\n\t\t})\n\t}\n}\n"]}