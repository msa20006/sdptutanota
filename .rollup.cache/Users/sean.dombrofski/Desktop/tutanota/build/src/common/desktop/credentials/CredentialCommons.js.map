{"version":3,"file":"CredentialCommons.js","sourceRoot":"","sources":["../../../../../src/common/desktop/credentials/CredentialCommons.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAA;AAC9C,OAAO,EAAE,wBAAwB,EAAE,MAAM,oDAAoD,CAAA;AAE7F,wDAAwD;AACxD,MAAM,CAAC,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,wBAAwB,CAAC,WAAW,EAAE,wBAAwB,CAAC,YAAY,CAAU,CAAC,CAAA;AAGpI,MAAM,UAAU,6BAA6B,CAAC,cAAsC;IACnF,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,8CAA8C,cAAc,EAAE,CAAC,CAAA;AACjH,CAAC;AAED,MAAM,UAAU,2BAA2B,CAAC,cAAwC;IACnF,6BAA6B,CAAC,cAAwC,CAAC,CAAA;AACxE,CAAC","sourcesContent":["import { assert } from \"@tutao/tutanota-utils\"\nimport { CredentialEncryptionMode } from \"../../misc/credentials/CredentialEncryptionMode.js\"\n\n/** the single source of truth for this configuration */\nexport const SUPPORTED_MODES = Object.freeze([CredentialEncryptionMode.DEVICE_LOCK, CredentialEncryptionMode.APP_PASSWORD] as const)\nexport type DesktopCredentialsMode = (typeof SUPPORTED_MODES)[number]\n\nexport function assertSupportedEncryptionMode(encryptionMode: DesktopCredentialsMode) {\n\tassert(SUPPORTED_MODES.includes(encryptionMode), `should not use unsupported encryption mode ${encryptionMode}`)\n}\n\nexport function assertDesktopEncryptionMode(encryptionMode: CredentialEncryptionMode): asserts encryptionMode is DesktopCredentialsMode {\n\tassertSupportedEncryptionMode(encryptionMode as DesktopCredentialsMode)\n}\n"]}