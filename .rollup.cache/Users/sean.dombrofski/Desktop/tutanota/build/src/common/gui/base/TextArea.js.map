{"version":3,"file":"TextArea.js","sourceRoot":"","sources":["../../../../../src/common/gui/base/TextArea.ts"],"names":[],"mappings":"AAAA,OAAO,CAAgD,MAAM,SAAS,CAAA;AAyBtE;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,OAAO,QAAQ;IACpB,QAAQ,CAAmB;IAE3B,QAAQ,CAAC,KAAoC;QAC5C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAuB,CAAA;IAC9C,CAAC;IAED,IAAI,CAAC,EAAE,KAAK,EAA8B;QACzC,OAAO,CAAC,CAAC,4BAA4B,EAAE;YACtC,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,IAAI,EAAE,KAAK,CAAC,QAAQ,IAAI,CAAC;YACzB,QAAQ,EAAE,KAAK,CAAC,QAAQ,IAAI,KAAK;YACjC,OAAO,EAAE,GAAG,EAAE;gBACb,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;oBACpB,OAAO,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAA;oBACzD,OAAM;gBACP,CAAC;gBACD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;YACnC,CAAC;YACD,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,QAAQ,CAAC;YACzD,KAAK,EAAE;gBACN,GAAG,KAAK,CAAC,KAAK;gBACd,MAAM,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU;aAC9C;SAC8B,CAAC,CAAA;IAClC,CAAC;IAEO,cAAc,CAAC,UAAyB,EAAE,EAAE,WAAoB,KAAK;QAC5E,MAAM,SAAS,GAAG,CAAC,GAAG,OAAO,CAAC,CAAA;QAC9B,IAAI,QAAQ,EAAE,CAAC;YACd,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAC3B,CAAC;QAED,OAAO,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC3B,CAAC;CACD","sourcesContent":["import m, { Children, ClassComponent, Vnode, VnodeDOM } from \"mithril\"\n\nexport interface TextAreaAttrs {\n\tvalue: string\n\tmaxLines?: number\n\tresizable?: boolean\n\tdisabled?: boolean\n\t/**\n\t * Callback fired whenever the textarea is interacted with.\n\t * This property is mandatory if the textarea is interactive (disabled = false).\n\t * @example\n\t * // Save the typed value to a model object\n\t * const callback = (typedValue: string) => model.value = typedValue;\n\t * m(TextArea, {oninput: callback})\n\t * @param {string} newValue - String value typed on the textarea field\n\t * @returns {unknown} Return type depends on the callback provided\n\t */\n\toninput?: (newValue: string) => unknown\n\tplaceholder?: string\n\tclasses?: Array<string>\n\tstyle?: Partial<Pick<CSSStyleDeclaration, \"padding\" | \"fontSize\">>\n}\n\ntype HTMLElementWithAttrs = Partial<Pick<m.Attributes, \"class\"> & Omit<HTMLTextAreaElement, \"style\"> & TextAreaAttrs & { style: { resize: string } }>\n\n/**\n * Simple single line input field component\n * @see Component attributes: {TextAreaAttrs}\n * @example\n * m(TextArea, {\n *     value: model.value,\n *     oninput: (newValue: string) => {\n *         model.value = newValue\n *     },\n *     placeholder: \"placeholder\",\n *     disabled: model.isReadonly,\n *     classes: [\"custom-font-size\"], // Adding new styles\n *     style: {\n *         \"font-size\": px(size.font_size_base * 1.25) // Overriding the component style\n *     }\n * }),\n */\nexport class TextArea implements ClassComponent<TextAreaAttrs> {\n\tdomInput!: HTMLInputElement\n\n\toncreate(vnode: VnodeDOM<TextAreaAttrs, this>): any {\n\t\tthis.domInput = vnode.dom as HTMLInputElement\n\t}\n\n\tview({ attrs }: Vnode<TextAreaAttrs, this>): Children | void | null {\n\t\treturn m(\"textarea.tutaui-text-field\", {\n\t\t\tvalue: attrs.value,\n\t\t\trows: attrs.maxLines ?? 3,\n\t\t\tdisabled: attrs.disabled ?? false,\n\t\t\toninput: () => {\n\t\t\t\tif (!attrs.oninput) {\n\t\t\t\t\tconsole.error(\"oninput fired without a handler function\")\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tattrs.oninput(this.domInput.value)\n\t\t\t},\n\t\t\tplaceholder: attrs.placeholder,\n\t\t\tclass: this.resolveClasses(attrs.classes, attrs.disabled),\n\t\t\tstyle: {\n\t\t\t\t...attrs.style,\n\t\t\t\tresize: !attrs.resizable ? \"none\" : \"vertical\",\n\t\t\t},\n\t\t} satisfies HTMLElementWithAttrs)\n\t}\n\n\tprivate resolveClasses(classes: Array<string> = [], disabled: boolean = false): string {\n\t\tconst classList = [...classes]\n\t\tif (disabled) {\n\t\t\tclassList.push(\"disabled\")\n\t\t}\n\n\t\treturn classList.join(\" \")\n\t}\n}\n"]}