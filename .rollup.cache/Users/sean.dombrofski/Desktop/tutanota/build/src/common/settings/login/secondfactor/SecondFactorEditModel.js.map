{"version":3,"file":"SecondFactorEditModel.js","sourceRoot":"","sources":["../../../../../../src/common/settings/login/secondfactor/SecondFactorEditModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { EntityClient } from \"../../../api/common/EntityClient.js\"\nimport { createSecondFactor, GroupInfoTypeRef, U2fRegisteredDevice, User } from \"../../../api/entities/sys/TypeRefs.js\"\nimport { validateWebauthnDisplayName, WebauthnClient } from \"../../../misc/2fa/webauthn/WebauthnClient.js\"\nimport { TotpSecret } from \"@tutao/tutanota-crypto\"\nimport { assertNotNull, LazyLoaded, neverNull } from \"@tutao/tutanota-utils\"\nimport { isApp } from \"../../../api/common/Env.js\"\nimport { LanguageViewModel, TranslationKey } from \"../../../misc/LanguageViewModel.js\"\nimport { SecondFactorType } from \"../../../api/common/TutanotaConstants.js\"\nimport { ProgrammingError } from \"../../../api/common/error/ProgrammingError.js\"\nimport { LoginFacade } from \"../../../api/worker/facades/LoginFacade.js\"\nimport { UserError } from \"../../../api/main/UserError.js\"\nimport { htmlSanitizer } from \"../../../misc/HtmlSanitizer.js\"\nimport QRCode from \"qrcode-svg\"\n\nexport const enum VerificationStatus {\n\tInitial = \"Initial\",\n\tProgress = \"Progress\",\n\tFailed = \"Failed\",\n\tSuccess = \"Success\",\n}\n\nexport const DEFAULT_U2F_NAME = \"U2F\"\nexport const DEFAULT_TOTP_NAME = \"TOTP\"\n\nexport enum NameValidationStatus {\n\tValid,\n\tInvalid,\n}\n\nexport const SecondFactorTypeToNameTextId: Record<SecondFactorType, TranslationKey> = Object.freeze({\n\t[SecondFactorType.totp]: \"totpAuthenticator_label\",\n\t[SecondFactorType.u2f]: \"u2fSecurityKey_label\",\n\t[SecondFactorType.webauthn]: \"u2fSecurityKey_label\",\n})\n\nexport class SecondFactorEditModel {\n\ttotpCode: string = \"\"\n\tselectedType: SecondFactorType\n\tname: string = \"\"\n\tnameValidationStatus: NameValidationStatus = NameValidationStatus.Valid\n\tverificationStatus: VerificationStatus = VerificationStatus.Initial\n\treadonly otpInfo: LazyLoaded<{\n\t\tqrCodeSvg: string | null\n\t\turl: string\n\t}>\n\tprivate u2fRegistrationData: U2fRegisteredDevice | null = null\n\n\tconstructor(\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly user: User,\n\t\tprivate readonly webauthnClient: WebauthnClient,\n\t\treadonly totpKeys: TotpSecret,\n\t\tprivate readonly webauthnSupported: boolean,\n\t\tprivate readonly loginFacade: LoginFacade,\n\t\tprivate readonly hostname: string,\n\t\tprivate readonly domainConfig: DomainConfig,\n\t\tprivate readonly updateViewCallback: () => void,\n\t\tprivate readonly token?: string,\n\t) {\n\t\tthis.selectedType = webauthnSupported ? SecondFactorType.webauthn : SecondFactorType.totp\n\t\tthis.setDefaultNameIfNeeded()\n\t\tthis.otpInfo = new LazyLoaded(async () => {\n\t\t\tconst url = await this.getOtpAuthUrl(this.totpKeys.readableKey)\n\n\t\t\tconst totpQRCodeSvg = isApp()\n\t\t\t\t? null\n\t\t\t\t: htmlSanitizer.sanitizeSVG(\n\t\t\t\t\t\tnew QRCode({\n\t\t\t\t\t\t\theight: 150,\n\t\t\t\t\t\t\twidth: 150,\n\t\t\t\t\t\t\tcontent: url,\n\t\t\t\t\t\t\tpadding: 2,\n\t\t\t\t\t\t\t// We don't want <xml> around the content, we actually enforce <svg> namespace, and we want it to be parsed as such.\n\t\t\t\t\t\t\txmlDeclaration: false,\n\t\t\t\t\t\t}).svg(),\n\t\t\t\t  ).html\n\n\t\t\treturn {\n\t\t\t\tqrCodeSvg: totpQRCodeSvg,\n\t\t\t\turl,\n\t\t\t}\n\t\t})\n\n\t\tthis.otpInfo.getAsync().then(() => this.updateViewCallback())\n\t}\n\n\t/**\n\t * if the user cancels the second factor creation while it's already talking to webAuthn, we want to cancel that\n\t * process before closing the dialog.\n\t */\n\tabort() {\n\t\t// noinspection JSIgnoredPromiseFromCall\n\t\tthis.webauthnClient.abortCurrentOperation()\n\t}\n\n\t/**\n\t * validation message for use in dialog validators\n\t */\n\tvalidationMessage(): TranslationKey | null {\n\t\treturn this.nameValidationStatus === NameValidationStatus.Valid ? null : \"textTooLong_msg\"\n\t}\n\n\t/**\n\t * get a list of supported second factor types\n\t */\n\tgetFactorTypesOptions(): Array<SecondFactorType> {\n\t\tconst options: Array<SecondFactorType> = []\n\t\toptions.push(SecondFactorType.totp)\n\n\t\tif (this.webauthnSupported) {\n\t\t\toptions.push(SecondFactorType.webauthn)\n\t\t}\n\t\treturn options\n\t}\n\n\t/**\n\t * call when the selected second factor type changes\n\t */\n\tonTypeSelected(newValue: SecondFactorType) {\n\t\tthis.selectedType = newValue\n\t\tthis.verificationStatus = newValue === SecondFactorType.webauthn ? VerificationStatus.Initial : VerificationStatus.Progress\n\n\t\tthis.setDefaultNameIfNeeded()\n\t\tthis.updateNameValidation()\n\n\t\tif (newValue !== SecondFactorType.webauthn) {\n\t\t\t// noinspection JSIgnoredPromiseFromCall\n\t\t\tthis.webauthnClient.abortCurrentOperation()\n\t\t}\n\t}\n\n\t/**\n\t * call when the display name of the second factor instance changes\n\t */\n\tonNameChange(newValue: string): void {\n\t\tthis.name = newValue\n\t\tthis.updateNameValidation()\n\t}\n\n\t/**\n\t * call when the validation code for setting up TOTP changes\n\t */\n\tasync onTotpValueChange(newValue: string) {\n\t\tthis.totpCode = newValue\n\t\tlet cleanedValue = newValue.replace(/ /g, \"\")\n\n\t\tif (cleanedValue.length === 6) {\n\t\t\tconst expectedCode = Number(cleanedValue)\n\t\t\tthis.verificationStatus = await this.tryCodes(expectedCode, this.totpKeys.key)\n\t\t} else {\n\t\t\tthis.verificationStatus = VerificationStatus.Progress\n\t\t}\n\t\tthis.updateViewCallback()\n\t}\n\n\t/**\n\t * re-validates the input and makes the server calls to actually create a second factor\n\t * returns the user that the second factor was created in case any follow-up operations\n\t * are needed\n\t */\n\tasync save(): Promise<User | null> {\n\t\tthis.setDefaultNameIfNeeded()\n\t\tif (this.selectedType === SecondFactorType.webauthn) {\n\t\t\t// Prevent starting in parallel\n\t\t\tif (this.verificationStatus === VerificationStatus.Progress) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis.u2fRegistrationData = await this.webauthnClient.register(this.user._id, this.name)\n\t\t\t\tthis.verificationStatus = VerificationStatus.Success\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"Webauthn registration failed: \", e)\n\t\t\t\tthis.u2fRegistrationData = null\n\t\t\t\tthis.verificationStatus = VerificationStatus.Failed\n\t\t\t\treturn null\n\t\t\t}\n\t\t}\n\n\t\tthis.updateViewCallback()\n\n\t\tif (this.selectedType === SecondFactorType.u2f) {\n\t\t\tthrow new ProgrammingError(`invalid factor type: ${this.selectedType}`)\n\t\t}\n\n\t\tconst sf = createSecondFactor({\n\t\t\t_ownerGroup: this.user._ownerGroup!,\n\t\t\tname: this.name,\n\t\t\ttype: this.selectedType,\n\t\t\totpSecret: null,\n\t\t\tu2f: null,\n\t\t})\n\n\t\tif (this.selectedType === SecondFactorType.webauthn) {\n\t\t\tif (this.verificationStatus !== VerificationStatus.Success) {\n\t\t\t\tthrow new UserError(\"unrecognizedU2fDevice_msg\")\n\t\t\t} else {\n\t\t\t\tsf.u2f = this.u2fRegistrationData\n\t\t\t}\n\t\t} else if (this.selectedType === SecondFactorType.totp) {\n\t\t\tif (this.verificationStatus === VerificationStatus.Failed) {\n\t\t\t\tthrow new UserError(\"totpCodeWrong_msg\")\n\t\t\t} else if (this.verificationStatus === VerificationStatus.Initial || this.verificationStatus === VerificationStatus.Progress) {\n\t\t\t\tthrow new UserError(\"totpCodeEnter_msg\")\n\t\t\t} else {\n\t\t\t\tsf.otpSecret = this.totpKeys.key\n\t\t\t}\n\t\t}\n\t\tawait this.entityClient.setup(assertNotNull(this.user.auth).secondFactors, sf, this.token ? { token: this.token } : undefined)\n\t\treturn this.user\n\t}\n\n\t/** see https://github.com/google/google-authenticator/wiki/Key-Uri-Format */\n\tprivate async getOtpAuthUrl(secret: string): Promise<string> {\n\t\tconst userGroupInfo = await this.entityClient.load(GroupInfoTypeRef, this.user.userGroup.groupInfo)\n\t\tconst issuer = this.domainConfig.firstPartyDomain ? \"Tutanota\" : this.hostname\n\t\tconst account = encodeURI(issuer + \":\" + neverNull(userGroupInfo.mailAddress))\n\t\tconst url = new URL(\"otpauth://totp/\" + account)\n\t\turl.searchParams.set(\"issuer\", issuer)\n\t\turl.searchParams.set(\"secret\", secret.replace(/ /g, \"\"))\n\t\turl.searchParams.set(\"algorithm\", \"SHA1\")\n\t\turl.searchParams.set(\"digits\", \"6\")\n\t\turl.searchParams.set(\"period\", \"30\")\n\t\treturn url.toString()\n\t}\n\n\t/**\n\t * re-check if the given display name is valid for the current second factor type\n\t */\n\tprivate updateNameValidation(): void {\n\t\tthis.nameValidationStatus =\n\t\t\tthis.selectedType !== SecondFactorType.webauthn || validateWebauthnDisplayName(this.name)\n\t\t\t\t? NameValidationStatus.Valid\n\t\t\t\t: NameValidationStatus.Invalid\n\t}\n\n\t/**\n\t * empty names sometimes lead to errors, so we make sure we have something semi-sensible set in the field.\n\t */\n\tprivate setDefaultNameIfNeeded() {\n\t\tconst trimmed = this.name.trim()\n\t\tif (this.selectedType === SecondFactorType.webauthn && (trimmed === DEFAULT_TOTP_NAME || trimmed.length === 0)) {\n\t\t\tthis.name = DEFAULT_U2F_NAME\n\t\t} else if (this.selectedType === SecondFactorType.totp && (trimmed === DEFAULT_U2F_NAME || trimmed.length === 0)) {\n\t\t\tthis.name = DEFAULT_TOTP_NAME\n\t\t}\n\t}\n\n\t/**\n\t * check if the given validation code is the current, next or last code for the TOTP\n\t */\n\tprivate async tryCodes(expectedCode: number, key: Uint8Array): Promise<VerificationStatus> {\n\t\tconst time = Math.floor(new Date().getTime() / 1000 / 30)\n\t\t// We try out 3 codes: current minute, 30 seconds before and 30 seconds after.\n\t\t// If at least one of them works, we accept it.\n\t\tconst number = await this.loginFacade.generateTotpCode(time, key)\n\n\t\tif (number === expectedCode) {\n\t\t\treturn VerificationStatus.Success\n\t\t}\n\n\t\tconst number2 = await this.loginFacade.generateTotpCode(time - 1, key)\n\n\t\tif (number2 === expectedCode) {\n\t\t\treturn VerificationStatus.Success\n\t\t}\n\n\t\tconst number3 = await this.loginFacade.generateTotpCode(time + 1, key)\n\n\t\tif (number3 === expectedCode) {\n\t\t\treturn VerificationStatus.Success\n\t\t}\n\n\t\treturn VerificationStatus.Failed\n\t}\n}\n"]}