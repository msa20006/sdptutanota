{"version":3,"file":"GroupUtils.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/utils/GroupUtils.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;AAGhD,MAAM,UAAU,mCAAmC,CAAC,SAAoB;IACvE,IAAI,OAAO,GAAG,SAAS,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAA;IAC7G,IAAI,SAAS,CAAC,WAAW;QAAE,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAA;IACjE,OAAO,OAAO,CAAA;AACf,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,uBAAuB,CAAC,IAAU,EAAE,SAAoB;IACvE,IAAI,SAAS,KAAK,SAAS,CAAC,IAAI,EAAE,CAAC;QAClC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IACxB,CAAC;SAAM,CAAC;QACP,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,CAAA;IACjE,CAAC;AACF,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,uBAAuB,CAAC,SAAoB;IAC3D,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC;QACpB,OAAO,SAAS,CAAC,IAAI,CAAA;IACtB,CAAC;SAAM,IAAI,SAAS,CAAC,WAAW,EAAE,CAAC;QAClC,OAAO,SAAS,CAAC,WAAW,CAAA;IAC7B,CAAC;SAAM,CAAC;QACP,OAAO,EAAE,CAAA;IACV,CAAC;AACF,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,CAAY,EAAE,CAAY;IAC3D,OAAO,uBAAuB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAA;AAC5E,CAAC","sourcesContent":["import type { GroupInfo, GroupMembership, User } from \"../../entities/sys/TypeRefs.js\"\nimport { GroupType } from \"../TutanotaConstants\"\nimport { lang, Translation } from \"../../../misc/LanguageViewModel.js\"\n\nexport function getEnabledMailAddressesForGroupInfo(groupInfo: GroupInfo): string[] {\n\tlet aliases = groupInfo.mailAddressAliases.filter((alias) => alias.enabled).map((alias) => alias.mailAddress)\n\tif (groupInfo.mailAddress) aliases.unshift(groupInfo.mailAddress)\n\treturn aliases\n}\n\n/**\n * Provides the memberships of the user with the given type. In case of area groups all groups are returned.\n */\nexport function getUserGroupMemberships(user: User, groupType: GroupType): GroupMembership[] {\n\tif (groupType === GroupType.User) {\n\t\treturn [user.userGroup]\n\t} else {\n\t\treturn user.memberships.filter((m) => m.groupType === groupType)\n\t}\n}\n\n/**\n * Provides the name if available, otherwise the email address if available, otherwise an empty string.\n */\nexport function getGroupInfoDisplayName(groupInfo: GroupInfo): string {\n\tif (groupInfo.name) {\n\t\treturn groupInfo.name\n\t} else if (groupInfo.mailAddress) {\n\t\treturn groupInfo.mailAddress\n\t} else {\n\t\treturn \"\"\n\t}\n}\n\nexport function compareGroupInfos(a: GroupInfo, b: GroupInfo): number {\n\treturn getGroupInfoDisplayName(a).localeCompare(getGroupInfoDisplayName(b))\n}\n"]}