{"version":3,"file":"ExportFacade.js","sourceRoot":"","sources":["../../../../../../src/common/native/common/generatedipc/ExportFacade.ts"],"names":[],"mappings":"AAAA,iCAAiC","sourcesContent":["/* generated file, don't edit. */\n\nimport { MailBundle } from \"./MailBundle.js\"\nimport { DataFile } from \"./DataFile.js\"\nimport { MailboxExportState } from \"./MailboxExportState.js\"\nexport interface ExportFacade {\n\t/**\n\t * Convert mail to .msg format.\n\t */\n\tmailToMsg(bundle: MailBundle, fileName: string): Promise<DataFile>\n\n\tsaveToExportDir(file: DataFile): Promise<void>\n\n\t/**\n\t * Sets specified fileNames as the current 'drag' items.\n\t */\n\tstartNativeDrag(fileNames: ReadonlyArray<string>): Promise<void>\n\n\tcheckFileExistsInExportDir(fileName: string): Promise<boolean>\n\n\tgetMailboxExportState(userId: string): Promise<MailboxExportState | null>\n\n\tendMailboxExport(userId: string): Promise<void>\n\n\t/**\n\t * Pick a directory for storing the export data and persist the export state\n\t */\n\tstartMailboxExport(userId: string, mailboxId: string, mailBagId: string, mailId: string): Promise<void>\n\n\t/**\n\t * Save current state of the export and write export data to the export directory\n\t */\n\tsaveMailboxExport(bundle: MailBundle, userId: string, mailBagId: string, mailId: string): Promise<void>\n\n\tclearExportState(userId: string): Promise<void>\n\n\topenExportDirectory(userId: string): Promise<void>\n}\n"]}