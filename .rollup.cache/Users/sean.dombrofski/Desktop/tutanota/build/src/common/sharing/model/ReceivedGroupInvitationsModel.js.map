{"version":3,"file":"ReceivedGroupInvitationsModel.js","sourceRoot":"","sources":["../../../../../src/common/sharing/model/ReceivedGroupInvitationsModel.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,gBAAgB,CAAA;AAGnC,OAAO,EAAE,8BAA8B,EAAE,MAAM,oCAAoC,CAAA;AAGnF,OAAO,EAAE,sBAAsB,EAAE,4BAA4B,EAAsB,MAAM,eAAe,CAAA;AAGxG,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,oCAAoC,CAAA;AACvE,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAA;AAClD,OAAO,EAAoB,kBAAkB,EAAE,MAAM,6CAA6C,CAAA;AAElG,MAAM,OAAO,6BAA6B;IAIvB;IACA;IACA;IACA;IANT,WAAW,CAAwC;IAE5D,YACkB,SAAsB,EACtB,eAAgC,EAChC,YAA0B,EAC1B,MAAuB;QAHvB,cAAS,GAAT,SAAS,CAAa;QACtB,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,WAAM,GAAN,MAAM,CAAiB;QAExC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAiC,EAAE,CAAC,CAAA;IAC9D,CAAC;IAED,IAAI;QACH,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;QACjE,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE,CACrH,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC,CAC3F,CAAA;IACF,CAAC;IAED,OAAO;QACN,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;QACpE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IAC3B,CAAC;IAEgB,oBAAoB,GAAG,CAAC,OAAwC,EAAE,EAAE;QACpF,OAAO,UAAU,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE;YACrC,IAAI,kBAAkB,CAAC,8BAA8B,EAAE,MAAM,CAAC,EAAE,CAAC;gBAChE,MAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,UAAU,CAAU,CAAA;gBAEpE,IAAI,MAAM,CAAC,SAAS,mCAAyB,EAAE,CAAC;oBAC/C,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,8BAA8B,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;wBAC3F,IAAI,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE,CAAC;4BAC3C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;wBACxD,CAAC;oBACF,CAAC,CAAC,CAAA;gBACH,CAAC;qBAAM,IAAI,MAAM,CAAC,SAAS,mCAAyB,EAAE,CAAC;oBACtD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAA;gBACvG,CAAC;YACF,CAAC;QACF,CAAC,CAAC,CAAA;IACH,CAAC,CAAA;IAEO,oBAAoB,CAAC,UAAmC;QAC/D,OAAO,sBAAsB,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,SAAS,CAAA;IAC7D,CAAC;CACD","sourcesContent":["import stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport type { ReceivedGroupInvitation } from \"../../api/entities/sys/TypeRefs.js\"\nimport { ReceivedGroupInvitationTypeRef } from \"../../api/entities/sys/TypeRefs.js\"\nimport { EntityClient } from \"../../api/common/EntityClient\"\nimport { EventController } from \"../../api/main/EventController\"\nimport { getInvitationGroupType, loadReceivedGroupInvitations, ShareableGroupType } from \"../GroupUtils\"\nimport { OperationType } from \"../../api/common/TutanotaConstants\"\nimport type { LoginController } from \"../../api/main/LoginController\"\nimport { getLetId, isSameId } from \"../../api/common/utils/EntityUtils\"\nimport { promiseMap } from \"@tutao/tutanota-utils\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../api/common/utils/EntityUpdateUtils.js\"\n\nexport class ReceivedGroupInvitationsModel<TypeOfGroup extends ShareableGroupType> {\n\treadonly invitations: Stream<Array<ReceivedGroupInvitation>>\n\n\tconstructor(\n\t\tprivate readonly groupType: TypeOfGroup,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly logins: LoginController,\n\t) {\n\t\tthis.invitations = stream<Array<ReceivedGroupInvitation>>([])\n\t}\n\n\tinit() {\n\t\tthis.eventController.addEntityListener(this.entityEventsReceived)\n\t\tloadReceivedGroupInvitations(this.logins.getUserController(), this.entityClient, this.groupType).then((invitations) =>\n\t\t\tthis.invitations(invitations.filter((invitation) => this.hasMatchingGroupType(invitation))),\n\t\t)\n\t}\n\n\tdispose() {\n\t\tthis.eventController.removeEntityListener(this.entityEventsReceived)\n\t\tthis.invitations.end(true)\n\t}\n\n\tprivate readonly entityEventsReceived = (updates: ReadonlyArray<EntityUpdateData>) => {\n\t\treturn promiseMap(updates, (update) => {\n\t\t\tif (isUpdateForTypeRef(ReceivedGroupInvitationTypeRef, update)) {\n\t\t\t\tconst updateId = [update.instanceListId, update.instanceId] as const\n\n\t\t\t\tif (update.operation === OperationType.CREATE) {\n\t\t\t\t\treturn this.entityClient.load(ReceivedGroupInvitationTypeRef, updateId).then((invitation) => {\n\t\t\t\t\t\tif (this.hasMatchingGroupType(invitation)) {\n\t\t\t\t\t\t\tthis.invitations(this.invitations().concat(invitation))\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t} else if (update.operation === OperationType.DELETE) {\n\t\t\t\t\tthis.invitations(this.invitations().filter((invitation) => !isSameId(getLetId(invitation), updateId)))\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate hasMatchingGroupType(invitation: ReceivedGroupInvitation): boolean {\n\t\treturn getInvitationGroupType(invitation) === this.groupType\n\t}\n}\n"]}