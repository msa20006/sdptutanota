{"version":3,"file":"SuspensionAwareFetch.js","sourceRoot":"","sources":["../../../../../src/common/desktop/net/SuspensionAwareFetch.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,uBAAuB,EAAE,oBAAoB,EAAE,MAAM,qCAAqC,CAAA;AACnG,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAA;AACjD,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AACtC,OAAO,EAAE,WAAW,EAAE,MAAM,YAAY,CAAA;AAExC,MAAM,GAAG,GAAG,oBAAoB,CAAA;AAEhC,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,KAAmB,EAAE,IAAkB;IACjF,MAAM,GAAG,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;IAC1C,IAAI,CAAC,GAAG,CAAC,MAAM,KAAK,uBAAuB,CAAC,IAAI,IAAI,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC;QAC1J,oFAAoF;QACpF,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAW,CAAC,CAAA;QACxG,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,oEAAoE,IAAI,GAAG,CAAC,CAAA;QAE3F,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,UAAU,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,CAAA;QACvF,CAAC,CAAC,CAAA;IACH,CAAC;SAAM,CAAC;QACP,OAAO,GAAG,CAAA;IACX,CAAC;AACF,CAAC","sourcesContent":["import { fetch, RequestInfo, RequestInit, Response } from \"undici\"\nimport { ServiceUnavailableError, TooManyRequestsError } from \"../../api/common/error/RestError.js\"\nimport { filterInt } from \"@tutao/tutanota-utils\"\nimport { log } from \"../DesktopLog.js\"\nimport { customFetch } from \"./NetAgent\"\n\nconst TAG = \"[suspending-fetch]\"\n\nexport async function suspensionAwareFetch(input: string | URL, init?: RequestInit): Promise<Response> {\n\tconst res = await customFetch(input, init)\n\tif ((res.status === ServiceUnavailableError.CODE || TooManyRequestsError.CODE) && (res.headers.get(\"retry-after\") || res.headers.get(\"suspension-time\"))) {\n\t\t// headers are lowercased, see https://nodejs.org/api/http.html#http_message_headers\n\t\tconst time = filterInt((res.headers.get(\"retry-after\") ?? res.headers.get(\"suspension-time\")) as string)\n\t\tlog.debug(TAG, `ServiceUnavailable when downloading missed notification, waiting ${time}s`)\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(() => suspensionAwareFetch(input, init).then(resolve, reject), time * 1000)\n\t\t})\n\t} else {\n\t\treturn res\n\t}\n}\n"]}