{"version":3,"file":"AppPassHandler.js","sourceRoot":"","sources":["../../../../../src/common/desktop/credentials/AppPassHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { CredentialEncryptionMode } from \"../../misc/credentials/CredentialEncryptionMode.js\"\nimport { DesktopConfigKey } from \"../config/ConfigKeys.js\"\nimport { Aes256Key, Argon2IDExports, generateKeyFromPassphraseArgon2id, KEY_LENGTH_BYTES_AES_256 } from \"@tutao/tutanota-crypto\"\nimport { base64ToUint8Array, Thunk, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport { KeyPermanentlyInvalidatedError } from \"../../api/common/error/KeyPermanentlyInvalidatedError.js\"\nimport { CryptoError } from \"@tutao/tutanota-crypto/error.js\"\nimport { CancelledError } from \"../../api/common/error/CancelledError.js\"\nimport { DesktopNativeCryptoFacade } from \"../DesktopNativeCryptoFacade.js\"\nimport { DesktopConfig } from \"../config/DesktopConfig.js\"\nimport { CommonNativeFacade } from \"../../native/common/generatedipc/CommonNativeFacade.js\"\nimport { LanguageViewModel } from \"../../misc/LanguageViewModel.js\"\nimport { DesktopCredentialsMode } from \"./CredentialCommons.js\"\n\nexport class AppPassHandler {\n\tconstructor(\n\t\tprivate readonly crypto: DesktopNativeCryptoFacade,\n\t\tprivate readonly conf: DesktopConfig,\n\t\tprivate readonly argon2idFacade: Promise<Argon2IDExports>,\n\t\tprivate readonly lang: LanguageViewModel,\n\t\tprivate readonly getCurrentCommonNativeFacade: () => Promise<CommonNativeFacade>,\n\t) {}\n\n\tasync addAppPassWrapper(dataWithoutAppPassWrapper: Uint8Array, encryptionMode: DesktopCredentialsMode): Promise<Uint8Array> {\n\t\tif (encryptionMode === CredentialEncryptionMode.APP_PASSWORD) {\n\t\t\tconst appPassKey = (await this.deriveKeyFromAppPass()) ?? (await this.enrollForAppPass())\n\t\t\treturn this.crypto.aesEncryptBytes(appPassKey, dataWithoutAppPassWrapper)\n\t\t} else {\n\t\t\t// our mode is not app Pass, so the app Pass salt should not be set\n\t\t\tawait this.conf.setVar(DesktopConfigKey.appPassSalt, null)\n\t\t\treturn dataWithoutAppPassWrapper\n\t\t}\n\t}\n\n\tasync removeAppPassWrapper(dataWithAppPassWrapper: Uint8Array, encryptionMode: DesktopCredentialsMode): Promise<Uint8Array> {\n\t\t// our mode is not app Pass, so there is no wrapper to remove\n\t\tif (encryptionMode !== CredentialEncryptionMode.APP_PASSWORD) return dataWithAppPassWrapper\n\t\tconst appPassKey = await this.deriveKeyFromAppPass()\n\t\tif (appPassKey == null) throw new KeyPermanentlyInvalidatedError(\"can't remove app pass wrapper without salt\")\n\n\t\ttry {\n\t\t\treturn this.crypto.aesDecryptBytes(appPassKey, dataWithAppPassWrapper)\n\t\t} catch (e) {\n\t\t\tif (e instanceof CryptoError) {\n\t\t\t\tconst nativeFacade = await this.getCurrentCommonNativeFacade()\n\t\t\t\t//noinspection ES6MissingAwait\n\t\t\t\tnativeFacade.showAlertDialog(\"invalidPassword_msg\")\n\t\t\t\tthrow new CancelledError(\"app Pass verification failed\")\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * if there is a salt stored, use it and a password prompt to derive the app Pass key.\n\t * if there isn't, ask for a new password, generate a salt & store it, then derive the key.\n\t * @return the derived 256-bit key or null if none is found\n\t */\n\tprivate async deriveKeyFromAppPass(): Promise<Aes256Key | null> {\n\t\tconst storedAppPassSaltB64 = await this.conf.getVar(DesktopConfigKey.appPassSalt)\n\t\tif (storedAppPassSaltB64 == null) return null\n\t\tconst commonNativeFacade = await this.getCurrentCommonNativeFacade()\n\t\tconst pw = await this.tryWhileSaltNotChanged(commonNativeFacade.promptForPassword(this.lang.get(\"credentialsEncryptionModeAppPassword_label\")))\n\t\tconst salt = base64ToUint8Array(storedAppPassSaltB64)\n\t\treturn generateKeyFromPassphraseArgon2id(await this.argon2idFacade, pw, salt)\n\t}\n\n\tprivate async enrollForAppPass(): Promise<Aes256Key> {\n\t\tconst newSalt = this.crypto.randomBytes(KEY_LENGTH_BYTES_AES_256)\n\t\tconst commonNativeFacade = await this.getCurrentCommonNativeFacade()\n\t\tconst newPw = await this.tryWhileSaltNotChanged(\n\t\t\tcommonNativeFacade.promptForNewPassword(this.lang.get(\"credentialsEncryptionModeAppPassword_label\"), null),\n\t\t)\n\t\tconst newAppPassSaltB64 = uint8ArrayToBase64(newSalt)\n\t\tawait this.conf.setVar(DesktopConfigKey.appPassSalt, newAppPassSaltB64)\n\t\treturn generateKeyFromPassphraseArgon2id(await this.argon2idFacade, newPw, newSalt)\n\t}\n\n\tprivate async tryWhileSaltNotChanged(pwPromise: Promise<string>): Promise<string> {\n\t\tconst commonNativeFacade = await this.getCurrentCommonNativeFacade()\n\t\treturn resolveChecked<string>(\n\t\t\tpwPromise,\n\t\t\tnew Promise((_, reject) =>\n\t\t\t\tthis.conf.once(DesktopConfigKey.appPassSalt, () => {\n\t\t\t\t\treject(new CancelledError(\"salt changed during pw prompt\"))\n\t\t\t\t}),\n\t\t\t),\n\t\t\t() => commonNativeFacade.showAlertDialog(\"retry_action\"),\n\t\t)\n\t}\n}\n\n/**\n * resolve a promise, but inject another action if whileNot did reject in the meantime.\n * if whileNot did reject, the returned promise will reject as well.\n */\nexport async function resolveChecked<R>(promise: Promise<R>, whileNotRejected: Promise<never>, otherWiseAlso: Thunk): Promise<R> {\n\tlet cancelled = false\n\treturn await Promise.race<R>([\n\t\tpromise.then((value) => {\n\t\t\tif (cancelled) otherWiseAlso()\n\t\t\treturn value\n\t\t}),\n\t\twhileNotRejected.catch((e) => {\n\t\t\tcancelled = true\n\t\t\tthrow e\n\t\t}),\n\t])\n}\n"]}