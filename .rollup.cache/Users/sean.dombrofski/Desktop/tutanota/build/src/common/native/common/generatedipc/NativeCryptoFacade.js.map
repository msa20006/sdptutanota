{"version":3,"file":"NativeCryptoFacade.js","sourceRoot":"","sources":["../../../../../../src/common/native/common/generatedipc/NativeCryptoFacade.ts"],"names":[],"mappings":"AAAA,iCAAiC","sourcesContent":["/* generated file, don't edit. */\n\nimport { RsaPublicKey } from \"./RsaPublicKey.js\"\nimport { RsaPrivateKey } from \"./RsaPrivateKey.js\"\nimport { EncryptedFileInfo } from \"./EncryptedFileInfo.js\"\nimport { KyberKeyPair } from \"./KyberKeyPair.js\"\nimport { KyberPublicKey } from \"./KyberPublicKey.js\"\nimport { KyberEncapsulation } from \"./KyberEncapsulation.js\"\nimport { KyberPrivateKey } from \"./KyberPrivateKey.js\"\nexport interface NativeCryptoFacade {\n\trsaEncrypt(publicKey: RsaPublicKey, data: Uint8Array, seed: Uint8Array): Promise<Uint8Array>\n\n\trsaDecrypt(privateKey: RsaPrivateKey, data: Uint8Array): Promise<Uint8Array>\n\n\t/**\n\t * Encrypt file specified by the `fileUri`. Returns URI of the encrypted file.\n\t */\n\taesEncryptFile(key: Uint8Array, fileUri: string, iv: Uint8Array): Promise<EncryptedFileInfo>\n\n\t/**\n\t * Decrypt file specified by the `fileUri`. Returns URI of the decrypted file.\n\t */\n\taesDecryptFile(key: Uint8Array, fileUri: string): Promise<string>\n\n\targon2idGeneratePassphraseKey(passphrase: string, salt: Uint8Array): Promise<Uint8Array>\n\n\tgenerateKyberKeypair(seed: Uint8Array): Promise<KyberKeyPair>\n\n\tkyberEncapsulate(publicKey: KyberPublicKey, seed: Uint8Array): Promise<KyberEncapsulation>\n\n\tkyberDecapsulate(privateKey: KyberPrivateKey, ciphertext: Uint8Array): Promise<Uint8Array>\n}\n"]}