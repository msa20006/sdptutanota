{"version":3,"file":"Notifications.js","sourceRoot":"","sources":["../../../../src/common/gui/Notifications.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAA;AAC5C,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAA;AACpD,OAAO,EAAE,wBAAwB,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAA;AAOtF,MAAM,OAAO,aAAa;IACzB,gBAAgB,CAAC,IAAsB,EAAE,KAAa,EAAE,OAA6B,EAAE,UAAmC,IAAI;QAC7H,IAAI,CAAC,KAAK,EAAE,IAAI,OAAO,MAAM,CAAC,YAAY,KAAK,WAAW,IAAI,MAAM,CAAC,YAAY,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;YAC5G,IAAI,CAAC;gBACJ,MAAM,aAAa,GAAwB,MAAM,CAAC,MAAM,CACvD,EAAE,EACF;oBACC,IAAI,EAAE,IAAI,sCAAyB,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,wBAAwB;iBACrF,EACD,OAAO,CACP,CAAA;gBACD,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,aAAa,CAAC,CAAA;gBAClE,YAAY,CAAC,OAAO,GAAG,OAAO,CAAA;gBAC9B,OAAO,YAAY,CAAA;YACpB,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACZ,gFAAgF;gBAChF,sGAAsG;gBACtG,sFAAsF;gBACtF,4GAA4G;gBAC5G,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAA;YACtC,CAAC;QACF,CAAC;QAED,OAAO,IAAI,CAAA;IACZ,CAAC;IAED;;;OAGG;IACH,iBAAiB;QAChB,IAAI,SAAS,EAAE,IAAI,KAAK,EAAE,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE,CAAC;YACnE,OAAM;QACP,CAAC;QAED,IAAI,CAAC;YACJ,IAAI,MAAM,CAAC,YAAY,CAAC,UAAU,KAAK,QAAQ,EAAE,CAAC;gBACjD,MAAM,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAA;YACxC,CAAC;QACF,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,OAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,CAAC,CAAC,CAAA;QACxD,CAAC;IACF,CAAC;CACD;AAED,MAAM,CAAC,MAAM,aAAa,GAAkB,IAAI,aAAa,EAAE,CAAA","sourcesContent":["import { noOp } from \"@tutao/tutanota-utils\"\nimport { isApp, isDesktop } from \"../api/common/Env\"\nimport { CalendarNotificationIcon, MailNotificationIcon } from \"./base/icons/Icons.js\"\n\nexport const enum NotificationType {\n\tMail = \"Mail\",\n\tCalendar = \"Calendar\",\n}\n\nexport class Notifications {\n\tshowNotification(type: NotificationType, title: string, options?: NotificationOptions, onclick: Notification[\"onclick\"] = noOp): Notification | null {\n\t\tif (!isApp() && typeof window.Notification !== \"undefined\" && window.Notification.permission === \"granted\") {\n\t\t\ttry {\n\t\t\t\tconst actualOptions: NotificationOptions = Object.assign(\n\t\t\t\t\t{},\n\t\t\t\t\t{\n\t\t\t\t\t\ticon: type == NotificationType.Mail ? MailNotificationIcon : CalendarNotificationIcon,\n\t\t\t\t\t},\n\t\t\t\t\toptions,\n\t\t\t\t)\n\t\t\t\tconst notification = new window.Notification(title, actualOptions)\n\t\t\t\tnotification.onclick = onclick\n\t\t\t\treturn notification\n\t\t\t} catch (e) {\n\t\t\t\t// new Notification() throws an error in new chrome browsers on android devices.\n\t\t\t\t// According to the error message ServiceWorkerRegistration.showNotification() should be used instead.\n\t\t\t\t// This is currently not available on our test devices, so ignore notification errors.\n\t\t\t\t// Setails: http://stackoverflow.com/questions/29774836/failed-to-construct-notification-illegal-constructor\n\t\t\t\tconsole.warn(\"notification error\", e)\n\t\t\t}\n\t\t}\n\n\t\treturn null\n\t}\n\n\t/**\n\t * Requests user permission if notifications are supported\n\t * @returns {Promise<boolean>} resolves to \"true\" if we can send notifications.\n\t */\n\trequestPermission(): void {\n\t\tif (isDesktop() || isApp() || typeof Notification === \"undefined\") {\n\t\t\treturn\n\t\t}\n\n\t\ttry {\n\t\t\tif (window.Notification.permission !== \"denied\") {\n\t\t\t\twindow.Notification.requestPermission()\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(\"request notification permission error\", e)\n\t\t}\n\t}\n}\n\nexport const notifications: Notifications = new Notifications()\n"]}