{"version":3,"file":"AddAliasDialog.js","sourceRoot":"","sources":["../../../../../src/common/settings/mailaddress/AddAliasDialog.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAkB,MAAM,iCAAiC,CAAA;AACtE,OAAO,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAA;AACjD,OAAO,EAAE,uCAAuC,EAAE,YAAY,EAAE,yBAAyB,EAAE,MAAM,uCAAuC,CAAA;AACxI,OAAO,CAAC,MAAM,SAAS,CAAA;AACvB,OAAO,EAAE,qBAAqB,EAAE,MAAM,6BAA6B,CAAA;AACnE,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAA;AAC1D,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAA;AAC3E,OAAO,EAAE,kBAAkB,EAAE,MAAM,qCAAqC,CAAA;AACxE,OAAO,EAAE,gBAAgB,EAAE,uBAAuB,EAAE,MAAM,qCAAqC,CAAA;AAE/F,OAAO,EAAgB,SAAS,EAAE,MAAM,6BAA6B,CAAA;AACrE,OAAO,EAAE,oBAAoB,EAAE,MAAM,wCAAwC,CAAA;AAC7E,OAAO,EAAE,6BAA6B,EAAE,MAAM,mCAAmC,CAAA;AAEjF,MAAM,qBAAqB,GAAG,wCAAwC,CAAA;AAEtE,MAAM,UAAU,kBAAkB,CAAC,KAA4B,EAAE,aAAsB;IACtF,KAAK,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;QAC5C,MAAM,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,yBAAyB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;QACrG,IAAI,KAAK,CAAC,UAAU,IAAI,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC;YAC7G,IAAI,CAAC,CAAC,aAAa,IAAI,gBAAgB,CAAC,EAAE,CAAC;gBAC1C,KAAK,CAAC,oBAAoB,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,6BAA6B,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;gBAC3H,OAAM;YACP,CAAC;QACF,CAAC;QAED,IAAI,kBAAkB,GAAG,KAAK,CAAA;QAC9B,IAAI,WAAmB,CAAA;QACvB,IAAI,WAAW,GAA0B,wBAAwB,CAAA;QACjE,IAAI,UAAU,GAAG,eAAe,CAAC,OAAO,CAAC,CAAA;QACzC,IAAI,CAAC,aAAa,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACzC,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,uCAAuC,CAAC,IAAI,UAAU,CAAA;QAC/G,CAAC;QACD,IAAI,UAAU,GAAG,KAAK,CAAC,iBAAiB,EAAE,CAAA;QAE1C,MAAM,qBAAqB,GAAG,CAAC,MAAc,EAAE,EAAE;YAChD,IAAI,kBAAkB;gBAAE,OAAM;YAE9B,IAAI,WAAW,EAAE,CAAC;gBACjB,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;gBAC3B,OAAM;YACP,CAAC;YAED,QAAQ,CAAC,KAAK,EAAE,WAAW,EAAE,UAAU,CAAC,CAAA;YACxC,yCAAyC;YACzC,MAAM,CAAC,KAAK,EAAE,CAAA;QACf,CAAC,CAAA;QAED,MAAM,CAAC,gBAAgB,CAAC;YACvB,KAAK,EAAE,qBAAqB;YAC5B,KAAK,EAAE;gBACN,IAAI,EAAE,GAAG,EAAE;oBACV,OAAO;wBACN,CAAC,CAAC,qBAAqB,EAAE;4BACxB,cAAc,EAAE,UAAU;4BAC1B,gBAAgB,EAAE,OAAO;4BACzB,kBAAkB,EAAE,CAAC,KAAK,EAAE,gBAAgB,EAAE,EAAE;gCAC/C,IAAI,gBAAgB,CAAC,OAAO,EAAE,CAAC;oCAC9B,WAAW,GAAG,KAAK,CAAA;oCACnB,WAAW,GAAG,IAAI,CAAA;gCACnB,CAAC;qCAAM,CAAC;oCACP,WAAW,GAAG,gBAAgB,CAAC,OAAO,CAAA;gCACvC,CAAC;4BACF,CAAC;4BACD,kBAAkB,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,kBAAkB,GAAG,MAAM,CAAC;4BAC7D,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE;gCAC3B,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,aAAa,EAAE,CAAC;oCACrC,UAAU,GAAG,MAAM,CAAA;gCACpB,CAAC;qCAAM,CAAC;oCACP,MAAM,CAAC,OAAO,CACb,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,2BAA2B,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAClH,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE;wCAC1B,IAAI,SAAS,EAAE,CAAC;4CACf,aAAa,GAAG,MAAM,6BAA6B,CAAC,YAAY,CAAC,CAAA;wCAClE,CAAC;oCACF,CAAC,CAAC,CAAA;gCACH,CAAC;4BACF,CAAC;yBACD,CAAC;wBACF,CAAC,CACA,aAAa,EACb;4BACC,QAAQ,EAAE,yBAAyB,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;yBAC/D,EACD,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAC/C;wBACD,CAAC,CAAC,SAAS,EAAE;4BACZ,KAAK,EAAE,gBAAgB;4BACvB,KAAK,EAAE,UAAU;4BACjB,cAAc,wCAAuB;4BACrC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC;yBACtC,CAAC;qBACF,CAAA;gBACF,CAAC;aACD;YACD,iBAAiB,EAAE,IAAI;YACvB,QAAQ,EAAE,qBAAqB;SAC/B,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;AACH,CAAC;AAED,KAAK,UAAU,QAAQ,CAAC,KAA4B,EAAE,KAAa,EAAE,UAAkB;IACtF,IAAI,CAAC;QACJ,MAAM,kBAAkB,CAAC,gBAAgB,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAA;IAC9E,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QAChB,IAAI,KAAK,YAAY,gBAAgB,EAAE,CAAC;YACvC,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA;QACpC,CAAC;aAAM,IAAI,KAAK,YAAY,uBAAuB,EAAE,CAAC;YACrD,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAA;YAE/B,IAAI,KAAK,CAAC,IAAI,KAAK,qBAAqB,EAAE,CAAC;gBAC1C,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAA;YAChD,CAAC;YAED,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAA;QACrE,CAAC;aAAM,IAAI,KAAK,YAAY,oBAAoB,EAAE,CAAC;YAClD,6BAA6B,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,CAAA;QAC1D,CAAC;aAAM,CAAC;YACP,MAAM,KAAK,CAAA;QACZ,CAAC;IACF,CAAC;AACF,CAAC","sourcesContent":["import { lang, TranslationKey } from \"../../misc/LanguageViewModel.js\"\nimport { Dialog } from \"../../gui/base/Dialog.js\"\nimport { DEFAULT_FREE_MAIL_ADDRESS_SIGNUP_DOMAIN, NewPaidPlans, TUTA_MAIL_ADDRESS_DOMAINS } from \"../../api/common/TutanotaConstants.js\"\nimport m from \"mithril\"\nimport { SelectMailAddressForm } from \"../SelectMailAddressForm.js\"\nimport { ExpanderPanel } from \"../../gui/base/Expander.js\"\nimport { filterInt, getFirstOrThrow, ofClass } from \"@tutao/tutanota-utils\"\nimport { showProgressDialog } from \"../../gui/dialogs/ProgressDialog.js\"\nimport { InvalidDataError, PreconditionFailedError } from \"../../api/common/error/RestError.js\"\nimport { MailAddressTableModel } from \"./MailAddressTableModel.js\"\nimport { Autocomplete, TextField } from \"../../gui/base/TextField.js\"\nimport { UpgradeRequiredError } from \"../../api/main/UpgradeRequiredError.js\"\nimport { showPlanUpgradeRequiredDialog } from \"../../misc/SubscriptionDialogs.js\"\n\nconst FAILURE_USER_DISABLED = \"mailaddressaliasservice.group_disabled\"\n\nexport function showAddAliasDialog(model: MailAddressTableModel, isNewPaidPlan: boolean) {\n\tmodel.getAvailableDomains().then((domains) => {\n\t\tconst hasCustomDomains = domains.some((domain) => !TUTA_MAIL_ADDRESS_DOMAINS.includes(domain.domain))\n\t\tif (model.aliasCount && filterInt(model.aliasCount.usedAliases) >= filterInt(model.aliasCount.totalAliases)) {\n\t\t\tif (!(isNewPaidPlan && hasCustomDomains)) {\n\t\t\t\tmodel.handleTooManyAliases().catch(ofClass(UpgradeRequiredError, (e) => showPlanUpgradeRequiredDialog(e.plans, e.message)))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tlet isVerificationBusy = false\n\t\tlet mailAddress: string\n\t\tlet formErrorId: TranslationKey | null = \"mailAddressNeutral_msg\"\n\t\tlet formDomain = getFirstOrThrow(domains)\n\t\tif (!isNewPaidPlan && !hasCustomDomains) {\n\t\t\tformDomain = domains.find((domain) => domain.domain === DEFAULT_FREE_MAIL_ADDRESS_SIGNUP_DOMAIN) ?? formDomain\n\t\t}\n\t\tlet senderName = model.defaultSenderName()\n\n\t\tconst addEmailAliasOkAction = (dialog: Dialog) => {\n\t\t\tif (isVerificationBusy) return\n\n\t\t\tif (formErrorId) {\n\t\t\t\tDialog.message(formErrorId)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\taddAlias(model, mailAddress, senderName)\n\t\t\t// close the add alias dialog immediately\n\t\t\tdialog.close()\n\t\t}\n\n\t\tDialog.showActionDialog({\n\t\t\ttitle: \"addEmailAlias_label\",\n\t\t\tchild: {\n\t\t\t\tview: () => {\n\t\t\t\t\treturn [\n\t\t\t\t\t\tm(SelectMailAddressForm, {\n\t\t\t\t\t\t\tselectedDomain: formDomain,\n\t\t\t\t\t\t\tavailableDomains: domains,\n\t\t\t\t\t\t\tonValidationResult: (email, validationResult) => {\n\t\t\t\t\t\t\t\tif (validationResult.isValid) {\n\t\t\t\t\t\t\t\t\tmailAddress = email\n\t\t\t\t\t\t\t\t\tformErrorId = null\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tformErrorId = validationResult.errorId\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonBusyStateChanged: (isBusy) => (isVerificationBusy = isBusy),\n\t\t\t\t\t\t\tonDomainChanged: (domain) => {\n\t\t\t\t\t\t\t\tif (!domain.isPaid || isNewPaidPlan) {\n\t\t\t\t\t\t\t\t\tformDomain = domain\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tDialog.confirm(\n\t\t\t\t\t\t\t\t\t\tlang.makeTranslation(\"confirm_msg\", `${lang.get(\"paidEmailDomainLegacy_msg\")}\\n${lang.get(\"changePaidPlan_msg\")}`),\n\t\t\t\t\t\t\t\t\t).then(async (confirmed) => {\n\t\t\t\t\t\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\t\t\t\t\t\tisNewPaidPlan = await showPlanUpgradeRequiredDialog(NewPaidPlans)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tm(\n\t\t\t\t\t\t\tExpanderPanel,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\texpanded: TUTA_MAIL_ADDRESS_DOMAINS.includes(formDomain.domain),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tm(\".pt\", lang.get(\"permanentAliasWarning_msg\")),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\tlabel: \"mailName_label\",\n\t\t\t\t\t\t\tvalue: senderName,\n\t\t\t\t\t\t\tautocompleteAs: Autocomplete.username,\n\t\t\t\t\t\t\toninput: (name) => (senderName = name),\n\t\t\t\t\t\t}),\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t},\n\t\t\tallowOkWithReturn: true,\n\t\t\tokAction: addEmailAliasOkAction,\n\t\t})\n\t})\n}\n\nasync function addAlias(model: MailAddressTableModel, alias: string, senderName: string): Promise<void> {\n\ttry {\n\t\tawait showProgressDialog(\"pleaseWait_msg\", model.addAlias(alias, senderName))\n\t} catch (error) {\n\t\tif (error instanceof InvalidDataError) {\n\t\t\tDialog.message(\"mailAddressNA_msg\")\n\t\t} else if (error instanceof PreconditionFailedError) {\n\t\t\tlet errorMsg = error.toString()\n\n\t\t\tif (error.data === FAILURE_USER_DISABLED) {\n\t\t\t\terrorMsg = lang.get(\"addAliasUserDisabled_msg\")\n\t\t\t}\n\n\t\t\treturn Dialog.message(lang.makeTranslation(\"confirm_msg\", errorMsg))\n\t\t} else if (error instanceof UpgradeRequiredError) {\n\t\t\tshowPlanUpgradeRequiredDialog(error.plans, error.message)\n\t\t} else {\n\t\t\tthrow error\n\t\t}\n\t}\n}\n"]}