{"version":3,"file":"DataFile.js","sourceRoot":"","sources":["../../../../../src/common/api/common/DataFile.ts"],"names":[],"mappings":"AAeA,MAAM,UAAU,cAAc,CAAC,IAAY,EAAE,QAAgB,EAAE,IAAgB,EAAE,GAAY;IAC5F,OAAO;QACN,KAAK,EAAE,UAAU;QACjB,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,kBAAkB,CAAC,QAAQ,CAAC;QACtC,IAAI,EAAE,IAAI;QACV,IAAI,EAAE,IAAI,CAAC,UAAU;QACrB,EAAE,EAAE,SAAS;QACb,GAAG;KACH,CAAA;AACF,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,IAAyB,EAAE,IAAgB;IAC5E,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;QACrB,OAAO;YACN,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC3C,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI,CAAC,UAAU;YACrB,EAAE,EAAE,IAAI,CAAC,GAAG;YACZ,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;SAC1B,CAAA;IACF,CAAC;SAAM,CAAC;QACP,OAAO;YACN,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;YACvC,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI,CAAC,UAAU;YACrB,EAAE,EAAE,SAAS,EAAE,6FAA6F;SAC5G,CAAA;IACF,CAAC;AACF,CAAC;AAED;6CAC6C;AAC7C,MAAM,UAAU,kBAAkB,CAAC,QAAuB;IACzD,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;QACzC,OAAO,0BAA0B,CAAA;IAClC,CAAC;SAAM,CAAC;QACP,OAAO,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;IACpD,CAAC;AACF,CAAC","sourcesContent":["import type { File as TutanotaFile } from \"../entities/tutanota/TypeRefs.js\"\n\n/**\n * a structure containing file content and metadata\n */\nexport interface DataFile {\n\treadonly _type: \"DataFile\"\n\tname: string\n\tmimeType: string\n\tdata: Uint8Array\n\tsize: number\n\tid?: IdTuple\n\tcid?: string\n}\n\nexport function createDataFile(name: string, mimeType: string, data: Uint8Array, cid?: string): DataFile {\n\treturn {\n\t\t_type: \"DataFile\",\n\t\tname: name,\n\t\tmimeType: getCleanedMimeType(mimeType),\n\t\tdata: data,\n\t\tsize: data.byteLength,\n\t\tid: undefined,\n\t\tcid,\n\t}\n}\n\nexport function convertToDataFile(file: File | TutanotaFile, data: Uint8Array): DataFile {\n\tif (\"_type\" in file) {\n\t\treturn {\n\t\t\t_type: \"DataFile\",\n\t\t\tname: file.name,\n\t\t\tmimeType: getCleanedMimeType(file.mimeType),\n\t\t\tdata: data,\n\t\t\tsize: data.byteLength,\n\t\t\tid: file._id,\n\t\t\tcid: file.cid ?? undefined,\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\t_type: \"DataFile\",\n\t\t\tname: file.name,\n\t\t\tmimeType: getCleanedMimeType(file.type),\n\t\t\tdata: data,\n\t\t\tsize: data.byteLength,\n\t\t\tid: undefined, // file read from filesystem, does not have an id because it has not been stored in tutanota.\n\t\t}\n\t}\n}\n\n/** make sure we have a valid mime type by replacing empty ones with \"application/octet-stream\" and\n * removing double quotes and single quotes*/\nexport function getCleanedMimeType(mimeType: string | null): string {\n\tif (!mimeType || mimeType.trim() === \"\") {\n\t\treturn \"application/octet-stream\"\n\t} else {\n\t\treturn mimeType.replace(/\"/g, \"\").replace(/'/g, \"\")\n\t}\n}\n"]}