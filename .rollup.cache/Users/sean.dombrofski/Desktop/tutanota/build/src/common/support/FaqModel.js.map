{"version":3,"file":"FaqModel.js","sourceRoot":"","sources":["../../../../src/common/support/FaqModel.ts"],"names":[],"mappings":"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","sourcesContent":["import type { LanguageViewModelType } from \"../misc/LanguageViewModel\"\nimport { lang, LanguageViewModel } from \"../misc/LanguageViewModel\"\nimport { delay, downcast, LazyLoaded } from \"@tutao/tutanota-utils\"\nimport { search } from \"../api/common/utils/PlainTextSearch\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\nimport { htmlSanitizer } from \"../misc/HtmlSanitizer.js\"\n\nexport type FaqEntry = {\n\tid: string\n\ttitle: string\n\ttext: string\n\ttags: string[]\n}\n\ntype SearchableFaqEntry = Omit<FaqEntry, \"tags\"> & { tags: string }\n\ntype Translation = {\n\tcode: string\n\tkeys: Record<string, string>\n}\nconst FAQ_PREFIX = \"faq.\"\nconst MARKDOWN_SUFFIX = \"_markdown\"\n\n/**\n * Loads FAQ entries from tuta.com for different languages and allows searching\n *\n * NOTE: it's only exported for testing!\n */\nexport class FaqModel {\n\tprivate list: Array<FaqEntry> | null = null\n\tprivate currentLanguageCode: string | null = null\n\tprivate faqLanguages: LanguageViewModelType | null = null\n\tprivate lazyLoaded: LazyLoaded<void>\n\tprivate websiteBaseUrl: string = \"https://tuta.com\"\n\n\tprivate get faqLang(): LanguageViewModel {\n\t\tif (this.faqLanguages == null) {\n\t\t\tthrow new ProgrammingError(\"faq not initialized!\")\n\t\t}\n\t\treturn this.faqLanguages\n\t}\n\n\tconstructor() {\n\t\tthis.lazyLoaded = new LazyLoaded(() => {\n\t\t\treturn Promise.all([this.fetchFAQ(\"en\"), this.fetchFAQ(lang.code)]).then(([defaultTranslations, currentLanguageTranslations]) => {\n\t\t\t\tif (defaultTranslations != null || currentLanguageTranslations != null) {\n\t\t\t\t\tconst faqLanguageViewModel = new LanguageViewModel()\n\t\t\t\t\tfaqLanguageViewModel.initWithTranslations(lang.code, lang.languageTag, defaultTranslations, currentLanguageTranslations)\n\t\t\t\t\tthis.faqLanguages = faqLanguageViewModel\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\tasync init(websiteBaseUrl: string): Promise<void> {\n\t\t//resetting the lazy reload whenever the language preference change to clear caching.\n\t\tif (this.currentLanguageCode !== lang.code) {\n\t\t\tthis.lazyLoaded.reset()\n\t\t}\n\t\tthis.websiteBaseUrl = websiteBaseUrl\n\t\tawait this.lazyLoaded.getAsync()\n\t\tthis.getList()\n\t}\n\n\t/**\n\t * will return an AsyncGenerator yielding faq entries that contain the given query and mark the query occurrences\n\t * with <mark> tags. it is safe to insert the results of this call into the DOM.\n\t *\n\t */\n\tasync *search(query: string): AsyncGenerator<FaqEntry> {\n\t\tconst cleanQuery = query.trim()\n\n\t\tif (cleanQuery === \"\") {\n\t\t\treturn []\n\t\t} else {\n\t\t\tconst searchableList: readonly SearchableFaqEntry[] = this.getList().map((item) => {\n\t\t\t\treturn {\n\t\t\t\t\t...item,\n\t\t\t\t\t// join tags to search with plaintext search\n\t\t\t\t\ttags: item.tags.join(\", \"),\n\t\t\t\t}\n\t\t\t})\n\t\t\t// we could probably convert this to an AsyncGenerator to spread the load of searching the entries as well, but it's pretty snappy atm.\n\t\t\tconst markedResults: ReadonlyArray<SearchableFaqEntry> = search(cleanQuery, searchableList, [\"tags\", \"title\", \"text\"], true)\n\t\t\tfor (const result of markedResults) {\n\t\t\t\t// this delay is needed to make the next iteration be scheduled on the next macro task.\n\t\t\t\t// just yielding/awaiting creates a micro task that doesn't let the event loop run.\n\t\t\t\tawait delay(1)\n\t\t\t\tyield this.sanitizeEntry(result)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate sanitizeEntry(result: SearchableFaqEntry): FaqEntry {\n\t\treturn {\n\t\t\tid: result.id,\n\t\t\ttitle: htmlSanitizer.sanitizeHTML(result.title).html,\n\t\t\ttags: result.tags.split(\", \").map((tag) => htmlSanitizer.sanitizeHTML(tag).html),\n\t\t\ttext: htmlSanitizer.sanitizeHTML(result.text, { blockExternalContent: false }).html,\n\t\t}\n\t}\n\n\t/**\n\t * fetch the entries for the given lang code from the web site\n\t */\n\tprivate async fetchFAQ(langCode: string): Promise<Translation> {\n\t\tconst faqPath = `${this.websiteBaseUrl}/faq-entries/${langCode}.json`\n\t\tconst translations: Record<string, string> = await fetch(faqPath)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((language) => language.keys)\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(\"Failed to fetch FAQ entries\", error)\n\t\t\t\treturn {}\n\t\t\t})\n\n\t\treturn {\n\t\t\tcode: langCode,\n\t\t\tkeys: translations,\n\t\t}\n\t}\n\n\t/**\n\t * return the current faqEntry list if it fits the current language code\n\t * otherwise, recreate the list for current lang and then return it\n\t */\n\tprivate getList(): Array<FaqEntry> {\n\t\tif (this.list == null && this.faqLanguages == null) {\n\t\t\treturn []\n\t\t}\n\n\t\tif (this.list == null || this.currentLanguageCode !== lang.code) {\n\t\t\tthis.currentLanguageCode = lang.code\n\t\t\tconst faqNames = Object.keys(this.faqLang.fallback.keys)\n\t\t\tthis.list = faqNames\n\t\t\t\t.filter((key) => key.startsWith(FAQ_PREFIX) && key.endsWith(MARKDOWN_SUFFIX))\n\t\t\t\t.map((titleKey: string) => titleKey.substring(FAQ_PREFIX.length, titleKey.indexOf(MARKDOWN_SUFFIX)))\n\t\t\t\t.map((name: string) => this.createFAQ(name))\n\t\t}\n\n\t\treturn this.list\n\t}\n\n\t/**\n\t * convert the raw translations for an id to a structured FaqEntry\n\t */\n\tprivate createFAQ(id: string): FaqEntry {\n\t\treturn {\n\t\t\tid: id,\n\t\t\ttitle: this.faqLang.get(downcast(`faq.${id}_title`)),\n\t\t\ttext: this.faqLang.get(downcast(`faq.${id}_markdown`)),\n\t\t\ttags: this.getTags(`faq.${id}_tags`).split(\", \"),\n\t\t}\n\t}\n\n\tprivate getTags(id: string): string {\n\t\ttry {\n\t\t\treturn this.faqLang.get(downcast(id))\n\t\t} catch (e) {\n\t\t\treturn \"\"\n\t\t}\n\t}\n}\n\nexport const faq: FaqModel = new FaqModel()\n"]}