{"version":3,"file":"SnackBar.js","sourceRoot":"","sources":["../../../../../src/common/gui/base/SnackBar.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Component, Vnode } from \"mithril\"\nimport { px, size } from \"../size\"\nimport { DefaultAnimationTime } from \"../animation/Animations\"\nimport { displayOverlay } from \"./Overlay\"\nimport type { ButtonAttrs } from \"./Button.js\"\nimport { Button, ButtonType } from \"./Button.js\"\nimport { lang, MaybeTranslation } from \"../../misc/LanguageViewModel\"\nimport { styles } from \"../styles\"\nimport { LayerType } from \"../../../RootView\"\nimport type { ClickHandler } from \"./GuiUtils\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { debounce, delay } from \"@tutao/tutanota-utils\"\n\nassertMainOrNode()\nexport const SNACKBAR_SHOW_TIME = 6000\nconst MAX_SNACKBAR_WIDTH = 400\nexport type SnackBarButtonAttrs = {\n\tlabel: MaybeTranslation\n\tclick: ClickHandler\n}\ntype SnackBarAttrs = {\n\tmessage: MaybeTranslation\n\tbutton: ButtonAttrs | null\n}\ntype QueueItem = SnackBarAttrs & { onClose: (() => void) | null }\nconst notificationQueue: QueueItem[] = []\nlet currentAnimationTimeout: TimeoutID | null = null\n\nclass SnackBar implements Component<SnackBarAttrs> {\n\tview(vnode: Vnode<SnackBarAttrs>) {\n\t\t// use same padding as MinimizedEditor\n\t\treturn m(\".snackbar-content.flex.flex-space-between.border-radius.plr.pb-xs.pt-xs\", [\n\t\t\tm(\".flex.center-vertically.smaller\", lang.getTranslationText(vnode.attrs.message)),\n\t\t\tvnode.attrs.button ? m(\".flex-end.center-vertically.pl\", m(Button, vnode.attrs.button)) : null,\n\t\t])\n\t}\n}\n\nfunction makeButtonAttrsForSnackBar(button: SnackBarButtonAttrs): ButtonAttrs {\n\treturn {\n\t\tlabel: button.label,\n\t\tclick: button.click,\n\t\ttype: ButtonType.Secondary,\n\t}\n}\n\n/**\n * Shows a SnackBar overlay at the bottom for low priority notifications that do not require (but might allow) user interaction and disappear after 6 seconds.\n * @param message The message to be shown. It must be short enough to ensure it is always shown in 2 lines of text at max in any language.\n * @param snackBarButton will close the snackbar if it is clicked (onClose() will be called)\n * @param onClose called when the snackbar is closed (either by timeout or button click)\n * @param waitingTime number of milliseconds to wait before showing the snackbar\n */\nexport async function showSnackBar(args: { message: MaybeTranslation; button: SnackBarButtonAttrs; onClose?: () => void; waitingTime?: number }) {\n\tconst { message, button, onClose, waitingTime } = args\n\tconst triggerSnackbar = () => {\n\t\tconst buttonAttrs = makeButtonAttrsForSnackBar(button)\n\t\tnotificationQueue.push({\n\t\t\tmessage: message,\n\t\t\tbutton: buttonAttrs,\n\t\t\tonClose: onClose ?? null,\n\t\t})\n\n\t\tif (notificationQueue.length > 1) {\n\t\t\t//Next notification will be shown when closing current notification\n\t\t\treturn\n\t\t}\n\n\t\tshowNextNotification()\n\t}\n\n\tif (waitingTime) {\n\t\tdebounce(waitingTime, triggerSnackbar)()\n\t\treturn\n\t} else {\n\t\ttriggerSnackbar()\n\t}\n}\n\nfunction getSnackBarPosition() {\n\t// The snackbar will be moved up from off the bottom of the viewport by the transformation animation.\n\tconst snackBarMargin = styles.isUsingBottomNavigation() ? size.hpad : size.hpad_medium\n\tconst leftOffset = styles.isDesktopLayout() ? size.drawer_menu_width : 0\n\tconst snackBarWidth = Math.min(window.innerWidth - leftOffset - 2 * snackBarMargin, MAX_SNACKBAR_WIDTH)\n\treturn {\n\t\tbottom: px(snackBarMargin),\n\t\t// The SnackBar is only shown at the right in single column layout\n\t\tleft: styles.isSingleColumnLayout() ? px(window.innerWidth - snackBarMargin - snackBarWidth) : px(leftOffset + snackBarMargin),\n\t\twidth: px(snackBarWidth),\n\t\tzIndex: LayerType.Overlay,\n\t}\n}\n\nfunction showNextNotification() {\n\tconst { message, button, onClose } = notificationQueue[0] //we shift later because it is still shown\n\tcurrentAnimationTimeout = null\n\tconst closeFunction = displayOverlay(\n\t\t() => getSnackBarPosition(),\n\t\t{\n\t\t\tview: () =>\n\t\t\t\tm(SnackBar, {\n\t\t\t\t\tmessage,\n\t\t\t\t\tbutton,\n\t\t\t\t}),\n\t\t},\n\t\t\"slide-bottom\",\n\t\tundefined,\n\t\t\"minimized-shadow\",\n\t)\n\n\tconst closeAndOpenNext = () => {\n\t\tif (currentAnimationTimeout !== null) {\n\t\t\treturn\n\t\t}\n\n\t\tcloseFunction()\n\n\t\tif (onClose) {\n\t\t\tonClose()\n\t\t}\n\n\t\tnotificationQueue.shift()\n\n\t\tif (notificationQueue.length > 0) {\n\t\t\tcurrentAnimationTimeout = setTimeout(showNextNotification, 2 * DefaultAnimationTime)\n\t\t}\n\t}\n\n\t// close the notification by default when pressing the button\n\tif (button) {\n\t\tconst originClickHandler: ClickHandler | undefined = button.click\n\n\t\tbutton.click = (e, dom) => {\n\t\t\tclearTimeout(autoRemoveTimer)\n\t\t\toriginClickHandler?.(e, dom)\n\t\t\tcloseAndOpenNext()\n\t\t}\n\t}\n\n\tconst autoRemoveTimer = setTimeout(closeAndOpenNext, SNACKBAR_SHOW_TIME)\n\tm.redraw()\n}\n"]}