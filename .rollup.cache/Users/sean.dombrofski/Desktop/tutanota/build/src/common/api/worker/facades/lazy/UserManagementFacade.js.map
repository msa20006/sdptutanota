{"version":3,"file":"UserManagementFacade.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/facades/lazy/UserManagementFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { AccountType, Const, CounterType, DEFAULT_KDF_TYPE, GroupType } from \"../../../common/TutanotaConstants.js\"\nimport { createMembershipAddData, createResetPasswordPostIn, createUserDataDelete, GroupTypeRef, User } from \"../../../entities/sys/TypeRefs.js\"\nimport { getFirstOrThrow, neverNull } from \"@tutao/tutanota-utils\"\nimport type { UserAccountUserData } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { createUserAccountCreateData, createUserAccountUserData } from \"../../../entities/tutanota/TypeRefs.js\"\nimport type { GroupManagementFacade } from \"./GroupManagementFacade.js\"\nimport { LoginFacade } from \"../LoginFacade.js\"\nimport { CounterFacade } from \"./CounterFacade.js\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport { aes256RandomKey, AesKey, createAuthVerifier, encryptKey, generateRandomSalt, random, uint8ArrayToKey } from \"@tutao/tutanota-crypto\"\nimport { EntityClient } from \"../../../common/EntityClient.js\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { MembershipService, ResetPasswordService, SystemKeysService, UserService } from \"../../../entities/sys/Services.js\"\nimport { UserAccountService } from \"../../../entities/tutanota/Services.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { ExposedOperationProgressTracker, OperationId } from \"../../../main/OperationProgressTracker.js\"\nimport { PQFacade } from \"../PQFacade.js\"\nimport { freshVersioned } from \"@tutao/tutanota-utils/dist/Utils.js\"\nimport { KeyLoaderFacade } from \"../KeyLoaderFacade.js\"\nimport { RecoverCodeFacade, RecoverData } from \"./RecoverCodeFacade.js\"\nimport { encryptBytes, encryptKeyWithVersionedKey, encryptString, VersionedKey } from \"../../crypto/CryptoWrapper.js\"\n\nassertWorkerOrNode()\n\nexport class UserManagementFacade {\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly groupManagement: GroupManagementFacade,\n\t\tprivate readonly counters: CounterFacade,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly operationProgressTracker: ExposedOperationProgressTracker,\n\t\tprivate readonly loginFacade: LoginFacade,\n\t\tprivate readonly pqFacade: PQFacade,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t\tprivate readonly recoverCodeFacade: RecoverCodeFacade,\n\t) {}\n\n\tasync changeUserPassword(user: User, newPassword: string): Promise<void> {\n\t\tconst userGroupKey = await this.groupManagement.getCurrentGroupKeyViaAdminEncGKey(user.userGroup.group)\n\t\tconst salt = generateRandomSalt()\n\t\tconst kdfType = DEFAULT_KDF_TYPE\n\t\tconst passwordKey = await this.loginFacade.deriveUserPassphraseKey({ kdfType, passphrase: newPassword, salt })\n\t\tconst pwEncUserGroupKey = encryptKey(passwordKey, userGroupKey.object)\n\t\tconst passwordVerifier = createAuthVerifier(passwordKey)\n\t\tconst data = createResetPasswordPostIn({\n\t\t\tuser: user._id,\n\t\t\tsalt,\n\t\t\tverifier: passwordVerifier,\n\t\t\tpwEncUserGroupKey,\n\t\t\tkdfVersion: kdfType,\n\t\t\tuserGroupKeyVersion: String(userGroupKey.version),\n\t\t})\n\t\tawait this.serviceExecutor.post(ResetPasswordService, data)\n\t}\n\n\tasync changeAdminFlag(user: User, admin: boolean): Promise<void> {\n\t\tconst adminGroupId = this.userFacade.getGroupId(GroupType.Admin)\n\t\tconst userGroup = await this.entityClient.load(GroupTypeRef, user.userGroup.group)\n\t\tconst userGroupKey = await this.groupManagement.getCurrentGroupKeyViaAdminEncGKey(userGroup._id)\n\n\t\tif (admin) {\n\t\t\tawait this.groupManagement.addUserToGroup(user, adminGroupId)\n\n\t\t\tif (user.accountType !== AccountType.SYSTEM) {\n\t\t\t\tconst keyData = await this._getAccountKeyData()\n\t\t\t\tconst userEncAccountGroupKey = encryptKeyWithVersionedKey(userGroupKey, keyData.accountGroupKey)\n\n\t\t\t\t// we can not use addUserToGroup here because the admin is not admin of the account group\n\t\t\t\tconst addAccountGroup = createMembershipAddData({\n\t\t\t\t\tuser: user._id,\n\t\t\t\t\tgroup: keyData.accountGroup,\n\t\t\t\t\tsymEncGKey: userEncAccountGroupKey.key,\n\t\t\t\t\tsymKeyVersion: userEncAccountGroupKey.encryptingKeyVersion.toString(),\n\t\t\t\t\tgroupKeyVersion: keyData.accountGroupKeyVersion,\n\t\t\t\t})\n\t\t\t\tawait this.serviceExecutor.post(MembershipService, addAccountGroup)\n\t\t\t}\n\t\t} else {\n\t\t\tawait this.groupManagement.removeUserFromGroup(user._id, adminGroupId)\n\n\t\t\tif (user.accountType !== AccountType.SYSTEM) {\n\t\t\t\tconst keyData = await this._getAccountKeyData()\n\t\t\t\treturn this.groupManagement.removeUserFromGroup(user._id, keyData.accountGroup)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get key and id of premium group.\n\t * @throws Error if account type is not paid\n\t *\n\t * @private\n\t */\n\tasync _getAccountKeyData(): Promise<{ accountGroup: Id; accountGroupKeyVersion: string; accountGroupKey: AesKey }> {\n\t\tconst keysReturn = await this.serviceExecutor.get(SystemKeysService, null)\n\t\tconst user = this.userFacade.getLoggedInUser()\n\n\t\tif (user.accountType === AccountType.PAID) {\n\t\t\treturn {\n\t\t\t\taccountGroup: neverNull(keysReturn.premiumGroup),\n\t\t\t\taccountGroupKey: uint8ArrayToKey(keysReturn.premiumGroupKey),\n\t\t\t\taccountGroupKeyVersion: keysReturn.premiumGroupKeyVersion,\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(`Trying to get keyData for user with account type ${user.accountType}`)\n\t\t}\n\t}\n\n\tasync readUsedUserStorage(user: User): Promise<number> {\n\t\tconst counterValue = await this.counters.readCounterValue(CounterType.UserStorageLegacy, neverNull(user.customer), user.userGroup.group)\n\t\treturn Number(counterValue)\n\t}\n\n\tasync deleteUser(user: User, restore: boolean): Promise<void> {\n\t\tconst data = createUserDataDelete({\n\t\t\tuser: user._id,\n\t\t\trestore,\n\t\t\tdate: Const.CURRENT_DATE,\n\t\t})\n\t\tawait this.serviceExecutor.delete(UserService, data)\n\t}\n\n\tasync createUser(\n\t\tname: string,\n\t\tmailAddress: string,\n\t\tpassword: string,\n\t\tuserIndex: number,\n\t\toverallNbrOfUsersToCreate: number,\n\t\toperationId: OperationId,\n\t): Promise<void> {\n\t\tlet adminGroupIds = this.userFacade.getGroupIds(GroupType.Admin)\n\t\tconst adminGroupId = getFirstOrThrow(adminGroupIds)\n\n\t\tconst adminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId)\n\n\t\tconst customerGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(this.userFacade.getGroupId(GroupType.Customer))\n\n\t\tconst userGroupKey = freshVersioned(aes256RandomKey())\n\t\tconst userGroupInfoSessionKey = aes256RandomKey()\n\t\tconst keyPair = await this.pqFacade.generateKeyPairs()\n\t\tconst userGroupData = this.groupManagement.generateInternalGroupData(\n\t\t\tkeyPair,\n\t\t\tuserGroupKey.object,\n\t\t\tuserGroupInfoSessionKey,\n\t\t\tadminGroupId,\n\t\t\tadminGroupKey,\n\t\t\tcustomerGroupKey,\n\t\t)\n\t\tawait this.operationProgressTracker.onProgress(operationId, ((userIndex + 0.8) / overallNbrOfUsersToCreate) * 100)\n\n\t\tlet data = createUserAccountCreateData({\n\t\t\tdate: Const.CURRENT_DATE,\n\t\t\tuserGroupData: userGroupData,\n\t\t\tuserData: await this.generateUserAccountData(\n\t\t\t\tuserGroupKey,\n\t\t\t\tuserGroupInfoSessionKey,\n\t\t\t\tcustomerGroupKey,\n\t\t\t\tmailAddress,\n\t\t\t\tpassword,\n\t\t\t\tname,\n\t\t\t\tthis.recoverCodeFacade.generateRecoveryCode(userGroupKey),\n\t\t\t),\n\t\t})\n\t\tawait this.serviceExecutor.post(UserAccountService, data)\n\t\treturn this.operationProgressTracker.onProgress(operationId, ((userIndex + 1) / overallNbrOfUsersToCreate) * 100)\n\t}\n\n\tasync generateUserAccountData(\n\t\tuserGroupKey: VersionedKey,\n\t\tuserGroupInfoSessionKey: AesKey,\n\t\tcustomerGroupKey: VersionedKey,\n\t\tmailAddress: string,\n\t\tpassphrase: string,\n\t\tuserName: string,\n\t\trecoverData: RecoverData,\n\t): Promise<UserAccountUserData> {\n\t\tconst kdfType = DEFAULT_KDF_TYPE\n\t\tconst salt = generateRandomSalt()\n\t\tconst userPassphraseKey = await this.loginFacade.deriveUserPassphraseKey({ kdfType, passphrase, salt })\n\t\tconst mailGroupKey = freshVersioned(aes256RandomKey())\n\t\tconst contactGroupKey = freshVersioned(aes256RandomKey())\n\t\tconst fileGroupKey = freshVersioned(aes256RandomKey())\n\t\tconst mailboxSessionKey = aes256RandomKey()\n\t\tconst contactListSessionKey = aes256RandomKey()\n\t\tconst fileSystemSessionKey = aes256RandomKey()\n\t\tconst mailGroupInfoSessionKey = aes256RandomKey()\n\t\tconst contactGroupInfoSessionKey = aes256RandomKey()\n\t\tconst fileGroupInfoSessionKey = aes256RandomKey()\n\t\tconst tutanotaPropertiesSessionKey = aes256RandomKey()\n\n\t\tconst userEncCustomerGroupKey = encryptKeyWithVersionedKey(userGroupKey, customerGroupKey.object)\n\t\tconst userEncMailGroupKey = encryptKeyWithVersionedKey(userGroupKey, mailGroupKey.object)\n\t\tconst userEncContactGroupKey = encryptKeyWithVersionedKey(userGroupKey, contactGroupKey.object)\n\t\tconst userEncFileGroupKey = encryptKeyWithVersionedKey(userGroupKey, fileGroupKey.object)\n\t\tconst userEncTutanotaPropertiesSessionKey = encryptKeyWithVersionedKey(userGroupKey, tutanotaPropertiesSessionKey)\n\t\tconst userEncEntropy = encryptBytes(userGroupKey.object, random.generateRandomData(32))\n\n\t\tconst customerEncMailGroupInfoSessionKey = encryptKeyWithVersionedKey(customerGroupKey, mailGroupInfoSessionKey)\n\t\tconst customerEncContactGroupInfoSessionKey = encryptKeyWithVersionedKey(customerGroupKey, contactGroupInfoSessionKey)\n\t\tconst customerEncFileGroupInfoSessionKey = encryptKeyWithVersionedKey(customerGroupKey, fileGroupInfoSessionKey)\n\n\t\tconst contactEncContactListSessionKey = encryptKeyWithVersionedKey(contactGroupKey, contactListSessionKey)\n\t\tconst fileEncFileSystemSessionKey = encryptKeyWithVersionedKey(fileGroupKey, fileSystemSessionKey)\n\t\tconst mailEncMailBoxSessionKey = encryptKeyWithVersionedKey(mailGroupKey, mailboxSessionKey)\n\n\t\treturn createUserAccountUserData({\n\t\t\tmailAddress: mailAddress,\n\t\t\tencryptedName: encryptString(userGroupInfoSessionKey, userName),\n\t\t\tsalt: salt,\n\t\t\tkdfVersion: kdfType,\n\n\t\t\tverifier: createAuthVerifier(userPassphraseKey),\n\t\t\tpwEncUserGroupKey: encryptKey(userPassphraseKey, userGroupKey.object),\n\n\t\t\tuserEncCustomerGroupKey: userEncCustomerGroupKey.key,\n\t\t\tuserEncMailGroupKey: userEncMailGroupKey.key,\n\t\t\tuserEncContactGroupKey: userEncContactGroupKey.key,\n\t\t\tuserEncFileGroupKey: userEncFileGroupKey.key,\n\t\t\tuserEncEntropy: userEncEntropy,\n\t\t\tuserEncTutanotaPropertiesSessionKey: userEncTutanotaPropertiesSessionKey.key,\n\n\t\t\tcontactEncContactListSessionKey: contactEncContactListSessionKey.key,\n\n\t\t\tfileEncFileSystemSessionKey: fileEncFileSystemSessionKey.key,\n\n\t\t\tmailEncMailBoxSessionKey: mailEncMailBoxSessionKey.key,\n\n\t\t\tcustomerEncMailGroupInfoSessionKey: customerEncMailGroupInfoSessionKey.key,\n\t\t\tcustomerEncContactGroupInfoSessionKey: customerEncContactGroupInfoSessionKey.key,\n\t\t\tcustomerEncFileGroupInfoSessionKey: customerEncFileGroupInfoSessionKey.key,\n\t\t\tcustomerKeyVersion: customerEncContactGroupInfoSessionKey.encryptingKeyVersion.toString(),\n\n\t\t\trecoverCodeEncUserGroupKey: recoverData.recoverCodeEncUserGroupKey,\n\t\t\trecoverCodeVerifier: recoverData.recoveryCodeVerifier,\n\t\t\tuserEncRecoverCode: recoverData.userEncRecoverCode,\n\t\t})\n\t}\n}\n"]}