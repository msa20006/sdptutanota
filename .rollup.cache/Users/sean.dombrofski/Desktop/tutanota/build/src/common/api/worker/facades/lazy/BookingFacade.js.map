{"version":3,"file":"BookingFacade.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/facades/lazy/BookingFacade.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,sCAAsC,CAAA;AAE5D,OAAO,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,MAAM,mCAAmC,CAAA;AAClG,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAA;AACjD,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAA;AAE3D,OAAO,EAAE,YAAY,EAAE,MAAM,mCAAmC,CAAA;AAEhE,kBAAkB,EAAE,CAAA;AAEpB,MAAM,OAAO,aAAa;IACI;IAA7B,YAA6B,eAAiC;QAAjC,oBAAe,GAAf,eAAe,CAAkB;IAAG,CAAC;IAElE;;;;;;OAMG;IACH,QAAQ,CAAC,IAA4B,EAAE,KAAa,EAAE,UAAmB;QACxE,MAAM,gBAAgB,GAAG,sBAAsB,CAAC;YAC/C,WAAW,EAAE,IAAI;YACjB,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;YACpB,UAAU;YACV,eAAe,EAAE,IAAI;YACrB,WAAW,EAAE,IAAI;YACjB,QAAQ,EAAE,IAAI;SACd,CAAC,CAAA;QACF,MAAM,WAAW,GAAG,sBAAsB,CAAC;YAC1C,IAAI,EAAE,KAAK,CAAC,YAAY;YACxB,YAAY,EAAE,gBAAgB;SAC9B,CAAC,CAAA;QACF,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,CAAA;IAC3D,CAAC;IAED;;;OAGG;IACH,eAAe;QACd,MAAM,WAAW,GAAG,sBAAsB,CAAC;YAC1C,IAAI,EAAE,IAAI;YACV,YAAY,EAAE,IAAI;SAClB,CAAC,CAAA;QACF,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,CAAA;IAC3D,CAAC;IAED;;;;;OAKG;IACH,YAAY,CAAC,SAA2B,EAAE,WAAyB;QAClE,IAAI,SAAS,IAAI,IAAI,EAAE,CAAC;YACvB,OAAO,SAAS,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,IAAI,IAAI,CAAA;QACrF,CAAC;QAED,OAAO,IAAI,CAAA;IACZ,CAAC;CACD","sourcesContent":["import type { BookingItemFeatureType } from \"../../../common/TutanotaConstants.js\"\nimport { Const } from \"../../../common/TutanotaConstants.js\"\nimport type { PriceData, PriceItemData, PriceServiceReturn } from \"../../../entities/sys/TypeRefs.js\"\nimport { createPriceRequestData, createPriceServiceData } from \"../../../entities/sys/TypeRefs.js\"\nimport { neverNull } from \"@tutao/tutanota-utils\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { PriceService } from \"../../../entities/sys/Services.js\"\n\nassertWorkerOrNode()\n\nexport class BookingFacade {\n\tconstructor(private readonly serviceExecutor: IServiceExecutor) {}\n\n\t/**\n\t * Provides the price for a given feature type and count.\n\t * @param  type The booking feature type, one of tutao.entity.tutanota.TutanotaConstants.BOOKING_ITEM_FEATURE_TYPE_*.\n\t * @param  count Number of items, may be negative.\n\t * @param  reactivate  If true a user or group is reactivated instead of created - not used for aliases, storage or branding\n\t * @return Resolves to PriceServiceReturn or an exception if the loading failed.\n\t */\n\tgetPrice(type: BookingItemFeatureType, count: number, reactivate: boolean): Promise<PriceServiceReturn> {\n\t\tconst priceRequestData = createPriceRequestData({\n\t\t\tfeatureType: type,\n\t\t\tcount: String(count),\n\t\t\treactivate,\n\t\t\tpaymentInterval: null,\n\t\t\taccountType: null,\n\t\t\tbusiness: null,\n\t\t})\n\t\tconst serviceData = createPriceServiceData({\n\t\t\tdate: Const.CURRENT_DATE,\n\t\t\tpriceRequest: priceRequestData,\n\t\t})\n\t\treturn this.serviceExecutor.get(PriceService, serviceData)\n\t}\n\n\t/**\n\t * Provides the price for a given feature type and count.\n\t * @return Resolves to PriceServiceReturn or an exception if the loading failed.\n\t */\n\tgetCurrentPrice(): Promise<PriceServiceReturn> {\n\t\tconst serviceData = createPriceServiceData({\n\t\t\tdate: null,\n\t\t\tpriceRequest: null,\n\t\t})\n\t\treturn this.serviceExecutor.get(PriceService, serviceData)\n\t}\n\n\t/**\n\t * Provides the price item from the given priceData for the given featureType. Returns null if no such item is available.\n\t * @param  priceData The given price data.\n\t * @param  featureType The booking item feature type\n\t * @return The price item or null\n\t */\n\tgetPriceItem(priceData: PriceData | null, featureType: NumberString): PriceItemData | null {\n\t\tif (priceData != null) {\n\t\t\treturn neverNull(priceData).items.find((p) => p.featureType === featureType) ?? null\n\t\t}\n\n\t\treturn null\n\t}\n}\n"]}