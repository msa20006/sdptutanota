{"version":3,"file":"Color.js","sourceRoot":"","sources":["../../../../../src/common/gui/base/Color.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from \"@tutao/tutanota-utils\"\nimport { assertMainOrNodeBoot } from \"../../api/common/Env\"\n\nassertMainOrNodeBoot()\n// 3 or 6 digit hex color codes\nexport const VALID_HEX_CODE_FORMAT: RegExp = new RegExp(\"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\")\n\nexport const MAX_HUE_ANGLE = 360\n\n/**\n * Returns true if the color code is a valid hex color code.\n *\n * The format can be #RGB or #RRGGBB, and it is not case-sensitive, but the digits must be hexadecimal,\n * with 1 or 2 digits per color channel, and the code must be prefixed with an octothorpe character (`#`).\n */\nexport function isValidColorCode(colorCode: string): boolean {\n\treturn VALID_HEX_CODE_FORMAT.test(colorCode)\n}\n\nexport function isValidCSSHexColor(colorCode: string): boolean {\n\treturn isValidColorCode(colorCode) && CSS.supports(\"color\", colorCode)\n}\n\nexport function getColorLuminance(c: string): number {\n\tconst { r, g, b } = hexToRgb(c)\n\t// Counting the perceptive luminance\n\t// human eye favors green color...\n\treturn (0.299 * r + 0.587 * g + 0.114 * b) / 255\n}\n\nexport function isMonochrome(c: string): boolean {\n\tconst { r, g, b } = hexToRgb(c)\n\treturn r == g && g == b\n}\n\nexport function isColorLight(c: string): boolean {\n\treturn getColorLuminance(c) > 0.5\n}\n\nexport function normalizeHueAngle(hue: number): number {\n\treturn ((hue % MAX_HUE_ANGLE) + MAX_HUE_ANGLE) % MAX_HUE_ANGLE\n}\n\nexport function hexToHSL(hex: string): { h: number; s: number; l: number } {\n\treturn rgbToHSL(hexToRgb(hex))\n}\n\nexport function hslToHex(color: { h: number; s: number; l: number }): string {\n\treturn rgbToHex(hslToRGB(color))\n}\n\n/*\n * Source: https://www.w3.org/TR/2011/REC-css3-color-20110607/#hsl-color\n */\nexport function hslToRGB(color: { h: number; s: number; l: number }): { r: number; g: number; b: number } {\n\tlet { h, s, l } = color\n\n\th = h % MAX_HUE_ANGLE\n\n\tif (h < 0) {\n\t\th += MAX_HUE_ANGLE\n\t}\n\n\ts /= 100\n\tl /= 100\n\n\tfunction f(n: number) {\n\t\tlet k = (n + h / 30) % 12\n\t\tlet a = s * Math.min(l, 1 - l)\n\t\treturn l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1))\n\t}\n\n\treturn {\n\t\tr: Math.round(f(0) * 255),\n\t\tg: Math.round(f(8) * 255),\n\t\tb: Math.round(f(4) * 255),\n\t}\n}\n\n/*\n * CC0-1.0 license from MDN\n * Source: https://github.com/mdn/css-examples/blob/main/modules/colors.html\n */\nexport function rgbToHSL(color: { r: number; g: number; b: number }): { h: number; s: number; l: number } {\n\tlet { r, g, b } = color\n\n\t// Let's have r, g, b in the range [0, 1]\n\tr = r / 255\n\tg = g / 255\n\tb = b / 255\n\tconst cmin = Math.min(r, g, b)\n\tconst cmax = Math.max(r, g, b)\n\tconst delta = cmax - cmin\n\tlet h = 0,\n\t\ts = 0,\n\t\tl = 0\n\n\tif (delta === 0) {\n\t\th = 0\n\t} else if (cmax === r) {\n\t\th = ((g - b) / delta) % 6\n\t} else if (cmax === g) {\n\t\th = (b - r) / delta + 2\n\t} else h = (r - g) / delta + 4\n\n\th = Math.round(h * 60)\n\n\t// We want an angle between 0 and MAX_HUE_ANGLE (360Â°)\n\tif (h < 0) {\n\t\th += MAX_HUE_ANGLE\n\t}\n\n\tl = (cmax + cmin) / 2\n\ts = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1))\n\ts = Number((s * 100).toFixed(1))\n\tl = Number((l * 100).toFixed(1))\n\n\treturn { h: Math.round(h), s: Math.round(s), l: Math.round(l) }\n}\n\nexport function hexToRgb(colorCode: string): {\n\tr: number\n\tg: number\n\tb: number\n} {\n\tassert(isValidColorCode(colorCode), \"Invalid color code: \" + colorCode)\n\tlet hexWithoutHash = colorCode.slice(1)\n\n\tif (hexWithoutHash.length === 3) {\n\t\thexWithoutHash = expandHexTriplet(hexWithoutHash) // convert from 3 to 6 digits by duplicating each digit\n\t}\n\n\tconst rgb = parseInt(hexWithoutHash, 16) // convert rrggbb to decimal\n\n\tconst r = (rgb >> 16) & 0xff // extract red\n\n\tconst g = (rgb >> 8) & 0xff // extract green\n\n\tconst b = (rgb >> 0) & 0xff // extract blue\n\n\treturn {\n\t\tr,\n\t\tg,\n\t\tb,\n\t}\n}\n\nexport function rgbToHex(color: { r: number; g: number; b: number }): string {\n\treturn \"#\" + ((1 << 24) + (color.r << 16) + (color.g << 8) + color.b).toString(16).slice(1)\n}\n\nexport function hexToRGBAString(color: string, alpha: number) {\n\tconst { r, g, b } = hexToRgb(color)\n\treturn `rgba(${r}, ${g}, ${b}, ${alpha})`\n}\n\n/**\n * Convert RGB to RRGGBB\n */\nexport function expandHexTriplet(triplet: string): string {\n\tassert(triplet.length === 3, \"Provided invalid value for triplet: \" + triplet)\n\treturn Array.from(triplet).reduce((acc, cur) => `${acc}${cur}${cur}`, \"\")\n}\n"]}