{"version":3,"file":"WebsocketConnectivityModel.js","sourceRoot":"","sources":["../../../../src/common/misc/WebsocketConnectivityModel.ts"],"names":[],"mappings":"AACA,OAAO,MAAM,MAAM,gBAAgB,CAAA;AACnC,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAA;AAUhD,qDAAqD;AACrD,MAAM,OAAO,0BAA0B;IAIT;IAHZ,OAAO,GAAG,MAAM,sCAAiD,CAAA;IAC1E,YAAY,GAAY,KAAK,CAAA;IAErC,YAA6B,QAAyB;QAAzB,aAAQ,GAAR,QAAQ,CAAiB;IAAG,CAAC;IAE1D,KAAK,CAAC,oBAAoB,CAAC,iBAAoC;QAC9D,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAA;IAChC,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,YAAmC;QAC9D,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,YAAY,CAAA;IAC9C,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,YAAY,CAAA;IACzB,CAAC;IAED,YAAY;QACX,kCAAkC;QAClC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAClC,CAAC;IAED,YAAY,CAAC,WAAoB,EAAE,oBAA6B,EAAE,QAAuB,IAAI;QAC5F,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,EAAE,oBAAoB,EAAE,KAAK,CAAC,CAAA;IAC5E,CAAC;IAED,KAAK,CAAC,MAA2B;QAChC,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;IACnC,CAAC;CACD","sourcesContent":["import { WsConnectionState } from \"../api/main/WorkerClient.js\"\nimport stream from \"mithril/stream\"\nimport { identity } from \"@tutao/tutanota-utils\"\nimport { CloseEventBusOption } from \"../api/common/TutanotaConstants.js\"\nimport { WebsocketLeaderStatus } from \"../api/entities/sys/TypeRefs.js\"\nimport { ExposedEventBus } from \"../api/worker/workerInterfaces.js\"\n\nexport interface WebsocketConnectivityListener {\n\tupdateWebSocketState(wsConnectionState: WsConnectionState): Promise<void>\n\tonLeaderStatusChanged(leaderStatus: WebsocketLeaderStatus): Promise<void>\n}\n\n/** A web page thread view on websocket/event bus. */\nexport class WebsocketConnectivityModel implements WebsocketConnectivityListener {\n\tprivate readonly wsState = stream<WsConnectionState>(WsConnectionState.terminated)\n\tprivate leaderStatus: boolean = false\n\n\tconstructor(private readonly eventBus: ExposedEventBus) {}\n\n\tasync updateWebSocketState(wsConnectionState: WsConnectionState): Promise<void> {\n\t\tthis.wsState(wsConnectionState)\n\t}\n\n\tasync onLeaderStatusChanged(leaderStatus: WebsocketLeaderStatus): Promise<void> {\n\t\tthis.leaderStatus = leaderStatus.leaderStatus\n\t}\n\n\tisLeader(): boolean {\n\t\treturn this.leaderStatus\n\t}\n\n\twsConnection(): stream<WsConnectionState> {\n\t\t// .map() to make a defensive copy\n\t\treturn this.wsState.map(identity)\n\t}\n\n\ttryReconnect(closeIfOpen: boolean, enableAutomaticState: boolean, delay: number | null = null): Promise<void> {\n\t\treturn this.eventBus.tryReconnect(closeIfOpen, enableAutomaticState, delay)\n\t}\n\n\tclose(option: CloseEventBusOption) {\n\t\treturn this.eventBus.close(option)\n\t}\n}\n"]}