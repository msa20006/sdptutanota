{"version":3,"file":"SqlCipherFacade.js","sourceRoot":"","sources":["../../../../../../src/common/native/common/generatedipc/SqlCipherFacade.ts"],"names":[],"mappings":"AAAA,iCAAiC","sourcesContent":["/* generated file, don't edit. */\n\nimport { TaggedSqlValue } from \"./TaggedSqlValue.js\"\nexport interface SqlCipherFacade {\n\topenDb(userId: string, dbKey: Uint8Array): Promise<void>\n\n\tcloseDb(): Promise<void>\n\n\tdeleteDb(userId: string): Promise<void>\n\n\trun(query: string, params: ReadonlyArray<TaggedSqlValue>): Promise<void>\n\n\t/**\n\t * get a single object or null if the query returns nothing\n\t */\n\tget(query: string, params: ReadonlyArray<TaggedSqlValue>): Promise<Record<string, TaggedSqlValue> | null>\n\n\t/**\n\t * return a list of objects or an empty list if the query returns nothing\n\t */\n\tall(query: string, params: ReadonlyArray<TaggedSqlValue>): Promise<ReadonlyArray<Record<string, TaggedSqlValue>>>\n\n\t/**\n\t * We want to lock the access to the \"ranges\" db when updating / reading the offline available mail list ranges for each mail list (referenced using the listId)\n\t */\n\tlockRangesDbAccess(listId: string): Promise<void>\n\n\t/**\n\t * This is the counterpart to the function \"lockRangesDbAccess(listId)\"\n\t */\n\tunlockRangesDbAccess(listId: string): Promise<void>\n}\n"]}