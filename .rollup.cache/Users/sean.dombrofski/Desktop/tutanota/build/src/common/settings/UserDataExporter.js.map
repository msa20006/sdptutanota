{"version":3,"file":"UserDataExporter.js","sourceRoot":"","sources":["../../../../src/common/settings/UserDataExporter.ts"],"names":[],"mappings":"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","sourcesContent":["import { LoginController } from \"../api/main/LoginController.js\"\nimport { CustomerTypeRef, GroupInfoTypeRef, GroupTypeRef } from \"../api/entities/sys/TypeRefs.js\"\nimport { assertNotNull, mapNullable, neverNull, pad, promiseMap, renderCsv, stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\nimport { EntityClient } from \"../api/common/EntityClient.js\"\nimport { FileController } from \"../file/FileController.js\"\nimport { createDataFile } from \"../api/common/DataFile.js\"\nimport { CounterFacade } from \"../api/worker/facades/lazy/CounterFacade.js\"\nimport { CounterType } from \"../api/common/TutanotaConstants.js\"\n\nexport const CSV_MIMETYPE = \"text/csv\"\nexport const USER_CSV_FILENAME = \"users.csv\"\n\ninterface UserExportData {\n\tname: string\n\tmailAddress: string\n\tcreated: Date\n\tdeleted: Date | null\n\tusedStorage: number\n\taliases: Array<string>\n}\n\nexport async function exportUserCsv(entityClient: EntityClient, logins: LoginController, fileController: FileController, counterFacade: CounterFacade) {\n\tconst data = await loadUserExportData(entityClient, logins, counterFacade)\n\tconst csv = renderCsv(\n\t\t[\"name\", \"mail address\", \"date created\", \"date deleted\", \"storage used (in bytes)\", \"aliases\"],\n\t\tdata.map((user) => [\n\t\t\tuser.name,\n\t\t\tuser.mailAddress,\n\t\t\tformatDate(user.created),\n\t\t\tmapNullable(user.deleted, formatDate) ?? \"\",\n\t\t\t`${user.usedStorage}`,\n\t\t\tuser.aliases.join(\" \"),\n\t\t]),\n\t)\n\tconst dataFile = createDataFile(USER_CSV_FILENAME, CSV_MIMETYPE, stringToUtf8Uint8Array(csv))\n\tawait fileController.saveDataFile(dataFile)\n}\n\nfunction formatDate(date: Date): string {\n\treturn `${date.getFullYear()}-${pad(date.getMonth() + 1, 2)}-${pad(date.getDate(), 2)}`\n}\n\n/**\n * Load data for each user administrated by the logged in user, in order to be exported\n */\nexport async function loadUserExportData(entityClient: EntityClient, logins: LoginController, counterFacade: CounterFacade): Promise<Array<UserExportData>> {\n\tconst { user } = logins.getUserController()\n\tconst { userGroups } = await entityClient.load(CustomerTypeRef, assertNotNull(user.customer))\n\n\tconst groupsAdministeredByUser = await entityClient.loadAll(GroupInfoTypeRef, userGroups)\n\n\tconst usedCustomerStorageCounterValues = await counterFacade.readAllCustomerCounterValues(CounterType.UserStorageLegacy, neverNull(user.customer))\n\treturn promiseMap(groupsAdministeredByUser, async (info) => {\n\t\tconst group = await entityClient.load(GroupTypeRef, info.group)\n\t\tconst userStorageCounterValue = usedCustomerStorageCounterValues.find((counterValue) => counterValue.counterId === group.storageCounter)\n\t\tconst usedStorage = userStorageCounterValue != null ? Number(userStorageCounterValue.value) : 0\n\n\t\treturn {\n\t\t\tname: info.name,\n\t\t\tmailAddress: info.mailAddress ?? \"\",\n\t\t\tcreated: info.created,\n\t\t\tdeleted: info.deleted,\n\t\t\tusedStorage,\n\t\t\taliases: info.mailAddressAliases.map((alias) => alias.mailAddress),\n\t\t}\n\t})\n}\n"]}