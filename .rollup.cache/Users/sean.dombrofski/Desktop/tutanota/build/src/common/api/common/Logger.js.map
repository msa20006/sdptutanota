{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../../../../src/common/api/common/Logger.ts"],"names":[],"mappings":"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","sourcesContent":["//@bundleInto:common-min\n\nimport { errorToString, stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\nimport { DataFile } from \"./DataFile\"\n\nexport const LOG_SIZE = 1000\n\nexport class Logger {\n\t// Circular buffer with next writable position pointed by _index\n\t_entries: Array<Array<any>>\n\t_index: number\n\t_dateProvider: () => Date\n\n\tconstructor(dateProvider: () => Date = () => new Date()) {\n\t\tthis._entries = new Array(LOG_SIZE)\n\t\tthis._index = 0\n\t\tthis._dateProvider = dateProvider\n\t}\n\n\tlogInfo(...args: Array<any>) {\n\t\tthis.log(\"I\", args)\n\t}\n\n\tlogError(...args: Array<any>) {\n\t\tthis.log(\"E\", args)\n\t}\n\n\tlogWarn(...args: Array<any>) {\n\t\tthis.log(\"W\", args)\n\t}\n\n\tlog(level: string, args: Array<any>) {\n\t\tconst entry = [this._dateProvider(), level]\n\t\tentry.push(...args)\n\t\tthis._entries[this._index] = entry\n\t\tthis._index++\n\n\t\tif (this._index === LOG_SIZE) {\n\t\t\tthis._index = 0\n\t\t}\n\t}\n\n\tformatLogEntry(date: Date, level: string, ...rest: Array<any>): string {\n\t\tconst formattedArgs = rest.map((obj) => {\n\t\t\ttry {\n\t\t\t\treturn obj instanceof Error ? errorToString(Object.assign({ stack: null }, obj)) : JSON.stringify(obj)\n\t\t\t} catch (e) {\n\t\t\t\treturn \"[cyclic object]\"\n\t\t\t}\n\t\t})\n\t\tconst message = formattedArgs.join(\",\")\n\t\treturn `${date.toISOString()} ${level} ${message}`\n\t}\n\n\tgetEntries(): Array<string> {\n\t\tconst newerPart = this._entries.slice(0, this._index)\n\n\t\tconst olderPart = this._entries.slice(this._index)\n\n\t\treturn olderPart\n\t\t\t.concat(newerPart)\n\t\t\t.filter(Boolean)\n\t\t\t.map(([date, level, ...rest]) => {\n\t\t\t\treturn this.formatLogEntry(date, level, ...rest)\n\t\t\t})\n\t}\n}\n\nexport function createLogFile(content: string, scope: string, timestamp?: number): DataFile {\n\tconst data = stringToUtf8Uint8Array(content)\n\tconst timestampString = timestamp ? timestamp + \"_\" : \"\"\n\treturn {\n\t\t_type: \"DataFile\",\n\t\tname: timestampString + scope + \"_tutanota.log\",\n\t\tmimeType: \"text/plain\",\n\t\tdata,\n\t\tsize: data.byteLength,\n\t\tid: undefined,\n\t}\n}\n\nexport function replaceNativeLogger(global: any, loggerInstance: Logger, force: boolean = false) {\n\t// Replace native logger only when enabled because we lose line numbers\n\tif (force || global.env.dist || global.debug) {\n\t\tglobal.logger = loggerInstance\n\t\tconst globalConsole = global.console\n\t\tglobal.console = {\n\t\t\tlog(...args: any[]) {\n\t\t\t\tglobalConsole.log(...args)\n\t\t\t\tloggerInstance.logInfo(...args)\n\t\t\t},\n\n\t\t\twarn(...args: any[]) {\n\t\t\t\tglobalConsole.warn(...args)\n\t\t\t\tloggerInstance.logWarn(...args)\n\t\t\t},\n\n\t\t\terror(...args: any[]) {\n\t\t\t\tglobalConsole.error(...args)\n\t\t\t\tloggerInstance.logError(...args)\n\t\t\t},\n\n\t\t\ttrace(...args: any[]) {\n\t\t\t\tglobalConsole.trace(...args)\n\t\t\t},\n\t\t\tinfo(...args: any[]) {\n\t\t\t\tglobalConsole.info(...args)\n\t\t\t},\n\t\t}\n\t}\n}\n"]}