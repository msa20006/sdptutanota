{"version":3,"file":"FileFacadeReceiveDispatcher.js","sourceRoot":"","sources":["../../../../../../src/common/native/common/generatedipc/FileFacadeReceiveDispatcher.ts"],"names":[],"mappings":"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","sourcesContent":["/* generated file, don't edit. */\n\nimport { IpcClientRect } from \"./IpcClientRect.js\"\nimport { DataFile } from \"./DataFile.js\"\nimport { FileFacade } from \"./FileFacade.js\"\n\nexport class FileFacadeReceiveDispatcher {\n\tconstructor(private readonly facade: FileFacade) {}\n\tasync dispatch(method: string, arg: Array<any>): Promise<any> {\n\t\tswitch (method) {\n\t\t\tcase \"open\": {\n\t\t\t\tconst location: string = arg[0]\n\t\t\t\tconst mimeType: string = arg[1]\n\t\t\t\treturn this.facade.open(location, mimeType)\n\t\t\t}\n\t\t\tcase \"openFileChooser\": {\n\t\t\t\tconst boundingRect: IpcClientRect = arg[0]\n\t\t\t\tconst filter: ReadonlyArray<string> | null = arg[1]\n\t\t\t\tconst isFileOnly: boolean | null = arg[2]\n\t\t\t\treturn this.facade.openFileChooser(boundingRect, filter, isFileOnly)\n\t\t\t}\n\t\t\tcase \"openFolderChooser\": {\n\t\t\t\treturn this.facade.openFolderChooser()\n\t\t\t}\n\t\t\tcase \"deleteFile\": {\n\t\t\t\tconst file: string = arg[0]\n\t\t\t\treturn this.facade.deleteFile(file)\n\t\t\t}\n\t\t\tcase \"getName\": {\n\t\t\t\tconst file: string = arg[0]\n\t\t\t\treturn this.facade.getName(file)\n\t\t\t}\n\t\t\tcase \"getMimeType\": {\n\t\t\t\tconst file: string = arg[0]\n\t\t\t\treturn this.facade.getMimeType(file)\n\t\t\t}\n\t\t\tcase \"getSize\": {\n\t\t\t\tconst file: string = arg[0]\n\t\t\t\treturn this.facade.getSize(file)\n\t\t\t}\n\t\t\tcase \"putFileIntoDownloadsFolder\": {\n\t\t\t\tconst localFileUri: string = arg[0]\n\t\t\t\tconst fileNameToUse: string = arg[1]\n\t\t\t\treturn this.facade.putFileIntoDownloadsFolder(localFileUri, fileNameToUse)\n\t\t\t}\n\t\t\tcase \"upload\": {\n\t\t\t\tconst fileUrl: string = arg[0]\n\t\t\t\tconst targetUrl: string = arg[1]\n\t\t\t\tconst method: string = arg[2]\n\t\t\t\tconst headers: Record<string, string> = arg[3]\n\t\t\t\treturn this.facade.upload(fileUrl, targetUrl, method, headers)\n\t\t\t}\n\t\t\tcase \"download\": {\n\t\t\t\tconst sourceUrl: string = arg[0]\n\t\t\t\tconst filename: string = arg[1]\n\t\t\t\tconst headers: Record<string, string> = arg[2]\n\t\t\t\treturn this.facade.download(sourceUrl, filename, headers)\n\t\t\t}\n\t\t\tcase \"hashFile\": {\n\t\t\t\tconst fileUri: string = arg[0]\n\t\t\t\treturn this.facade.hashFile(fileUri)\n\t\t\t}\n\t\t\tcase \"clearFileData\": {\n\t\t\t\treturn this.facade.clearFileData()\n\t\t\t}\n\t\t\tcase \"joinFiles\": {\n\t\t\t\tconst filename: string = arg[0]\n\t\t\t\tconst files: ReadonlyArray<string> = arg[1]\n\t\t\t\treturn this.facade.joinFiles(filename, files)\n\t\t\t}\n\t\t\tcase \"splitFile\": {\n\t\t\t\tconst fileUri: string = arg[0]\n\t\t\t\tconst maxChunkSizeBytes: number = arg[1]\n\t\t\t\treturn this.facade.splitFile(fileUri, maxChunkSizeBytes)\n\t\t\t}\n\t\t\tcase \"writeDataFile\": {\n\t\t\t\tconst file: DataFile = arg[0]\n\t\t\t\treturn this.facade.writeDataFile(file)\n\t\t\t}\n\t\t\tcase \"readDataFile\": {\n\t\t\t\tconst filePath: string = arg[0]\n\t\t\t\treturn this.facade.readDataFile(filePath)\n\t\t\t}\n\t\t}\n\t}\n}\n"]}