{"version":3,"file":"FileControllerNative.js","sourceRoot":"","sources":["../../../../src/common/file/FileControllerNative.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dialog } from \"../gui/base/Dialog.js\"\nimport { DataFile } from \"../api/common/DataFile\"\nimport { assertMainOrNode, isAndroidApp, isApp, isDesktop, isElectronClient, isIOSApp, isTest } from \"../api/common/Env\"\nimport { assert, assertNotNull, promiseMap, sortableTimestamp } from \"@tutao/tutanota-utils\"\nimport { File as TutanotaFile } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { assertOnlyFileReferences, FileReference } from \"../api/common/utils/FileUtils\"\nimport { CancelledError } from \"../api/common/error/CancelledError\"\nimport type { NativeFileApp } from \"../native/common/FileApp.js\"\nimport { ArchiveDataType } from \"../api/common/TutanotaConstants\"\nimport { BlobFacade } from \"../api/worker/facades/lazy/BlobFacade.js\"\nimport { FileController, ProgressObserver, zipDataFiles } from \"./FileController.js\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\nimport { createReferencingInstance } from \"../api/common/utils/BlobUtils.js\"\n\nassertMainOrNode()\n\n/**\n * coordinates downloads when we have access to native functionality\n */\nexport class FileControllerNative extends FileController {\n\tconstructor(blobFacade: BlobFacade, guiDownload: ProgressObserver, private readonly fileApp: NativeFileApp) {\n\t\tassert(isElectronClient() || isApp() || isTest(), \"Don't make native file controller when not in native\")\n\t\tsuper(blobFacade, guiDownload)\n\t}\n\n\tprotected async cleanUp(files: Array<FileReference | DataFile>) {\n\t\tassertOnlyFileReferences(files)\n\t\tif (files.length > 0) {\n\t\t\tfor (const file of files) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.fileApp.deleteFile(file.location)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(\"failed to delete file\", file.location, e)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Does not delete temporary file in app.\n\t */\n\tasync saveDataFile(file: DataFile): Promise<void> {\n\t\t// For apps \"opening\" DataFile currently means saving and opening it.\n\t\ttry {\n\t\t\tconst fileReference = await this.fileApp.writeDataFile(file)\n\t\t\tif (isAndroidApp() || isDesktop()) {\n\t\t\t\tawait this.fileApp.putFileIntoDownloadsFolder(fileReference.location, fileReference.name)\n\t\t\t\treturn\n\t\t\t} else if (isIOSApp()) {\n\t\t\t\treturn this.fileApp.open(fileReference)\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (e instanceof CancelledError) {\n\t\t\t\t// no-op. User cancelled file dialog\n\t\t\t\tconsole.log(\"saveDataFile cancelled\")\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"openDataFile failed\", e)\n\t\t\t\tawait Dialog.message(\"canNotOpenFileOnDevice_msg\")\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Public for testing */\n\tasync downloadAndDecrypt(tutanotaFile: TutanotaFile): Promise<FileReference> {\n\t\treturn await this.blobFacade.downloadAndDecryptNative(\n\t\t\tArchiveDataType.Attachments,\n\t\t\tcreateReferencingInstance(tutanotaFile),\n\t\t\ttutanotaFile.name,\n\t\t\tassertNotNull(tutanotaFile.mimeType, \"tried to call blobfacade.downloadAndDecryptNative with null mimeType\"),\n\t\t)\n\t}\n\n\tasync writeDownloadedFiles(downloadedFiles: FileReference[]): Promise<void> {\n\t\tif (isIOSApp()) {\n\t\t\tawait this.processDownloadedFilesIOS(downloadedFiles)\n\t\t} else if (isDesktop()) {\n\t\t\tawait this.processDownloadedFilesDesktop(downloadedFiles)\n\t\t} else if (isAndroidApp()) {\n\t\t\tawait promiseMap(downloadedFiles, (file) => this.fileApp.putFileIntoDownloadsFolder(file.location, file.name))\n\t\t} else {\n\t\t\tthrow new ProgrammingError(\"in filecontroller native but not in ios, android or desktop? - tried to write\")\n\t\t}\n\t}\n\n\tasync openDownloadedFiles(downloadedFiles: FileReference[]): Promise<void> {\n\t\tif (isIOSApp()) {\n\t\t\tawait this.processDownloadedFilesIOS(downloadedFiles)\n\t\t} else if (isDesktop() || isAndroidApp()) {\n\t\t\tawait this.openFiles(downloadedFiles)\n\t\t} else {\n\t\t\tthrow new ProgrammingError(\"in filecontroller native but not in ios, android or desktop? - tried to open\")\n\t\t}\n\t}\n\n\t/**\n\t * for downloading multiple files on desktop. multiple files are bundled in a zip file, single files\n\t *\n\t * we could use the same strategy as on android, but\n\t * if the user doesn't have a default dl path selected on desktop,\n\t * the client will ask for a location for each file separately, so we zip them for now.\n\t */\n\tprivate async processDownloadedFilesDesktop(downloadedFiles: FileReference[]): Promise<void> {\n\t\tif (downloadedFiles.length < 1) {\n\t\t\treturn\n\t\t}\n\t\tconsole.log(\"downloaded files in processing\", downloadedFiles)\n\t\tconst dataFiles = (await promiseMap(downloadedFiles, (f) => this.fileApp.readDataFile(f.location))).filter(Boolean)\n\t\tconst fileInTemp =\n\t\t\tdataFiles.length === 1\n\t\t\t\t? downloadedFiles[0]\n\t\t\t\t: await this.fileApp.writeDataFile(await zipDataFiles(dataFiles as Array<DataFile>, `${sortableTimestamp()}-attachments.zip`))\n\t\tawait this.fileApp.putFileIntoDownloadsFolder(fileInTemp.location, fileInTemp.name)\n\t}\n\n\t// on iOS, we don't actually show downloadAll and open the attachment immediately\n\t// the user is presented with an option to save the file to their file system by the OS\n\tprivate async processDownloadedFilesIOS(downloadedFiles: FileReference[]): Promise<void> {\n\t\tawait promiseMap(downloadedFiles, async (file) => {\n\t\t\ttry {\n\t\t\t\tawait this.fileApp.open(file)\n\t\t\t} finally {\n\t\t\t\tawait this.fileApp.deleteFile(file.location).catch((e: any) => console.log(\"failed to delete file\", file.location, e))\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate async openFiles(downloadedFiles: FileReference[]): Promise<void[]> {\n\t\treturn promiseMap(downloadedFiles, async (file) => {\n\t\t\ttry {\n\t\t\t\tawait this.fileApp.open(file)\n\t\t\t} finally {\n\t\t\t\t// on desktop, we don't get to know when the other app is done with the file, so we leave cleanup to the OS\n\t\t\t\tif (isApp()) await this.fileApp.deleteFile(file.location).catch((e: any) => console.log(\"failed to delete file\", file.location, e))\n\t\t\t}\n\t\t})\n\t}\n}\n"]}