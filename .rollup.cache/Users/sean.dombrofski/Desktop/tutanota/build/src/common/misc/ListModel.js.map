{"version":3,"file":"ListModel.js","sourceRoot":"","sources":["../../../../src/common/misc/ListModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { ListLoadingState, ListState } from \"../gui/base/List.js\"\nimport {\n\tassertNonNull,\n\tbinarySearch,\n\tdefer,\n\tfindBy,\n\tfindLast,\n\tfirst,\n\tgetFirstOrThrow,\n\tlast,\n\tlastThrow,\n\tmemoizedWithHiddenArgument,\n\tremove,\n\tsetAddAll,\n\tsetEquals,\n\tsetMap,\n\tsettledThen,\n} from \"@tutao/tutanota-utils\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport { ListFetchResult, PageSize } from \"../gui/base/ListUtils.js\"\nimport { isOfflineError } from \"../api/common/utils/ErrorUtils.js\"\nimport { ListAutoSelectBehavior } from \"./DeviceConfig.js\"\n\n/**\n * Specifies methods for retrieving items, fetching items, and comparing items for a ListModel.\n */\nexport interface ListModelConfig<ItemType, IdType> {\n\t/**\n\t * Get the given number of entities starting after the given id. May return more items than requested, e.g. if all items are available on first fetch.\n\t */\n\tfetch(lastFetchedItem: ItemType | null | undefined, count: number): Promise<ListFetchResult<ItemType>>\n\n\t/**\n\t * Compare the items\n\t * @return 0 if equal, less than 0 if less and greater than 0 if greater\n\t */\n\tsortCompare(item1: ItemType, item2: ItemType): number\n\n\t/**\n\t * @return the ID of the item\n\t */\n\tgetItemId(item: ItemType): IdType\n\n\t/**\n\t * @return true if the IDs are the same\n\t */\n\tisSameId(id1: IdType, id2: IdType): boolean\n\n\tautoSelectBehavior: () => ListAutoSelectBehavior\n}\n\nexport type ListFilter<ItemType> = (item: ItemType) => boolean\n\ntype PrivateListState<ItemType> = Omit<ListState<ItemType>, \"items\" | \"activeIndex\"> & {\n\tunfilteredItems: ItemType[]\n\tfilteredItems: ItemType[]\n\tactiveItem: ItemType | null\n}\n\n/** ListModel that does the state upkeep for the List, including loading state, loaded items, selection and filters*/\nexport class ListModel<ItemType, IdType> {\n\tconstructor(private readonly config: ListModelConfig<ItemType, IdType>) {}\n\n\tprivate loadState: \"created\" | \"initialized\" = \"created\"\n\tprivate loading: Promise<unknown> = Promise.resolve()\n\tprivate filter: ListFilter<ItemType> | null = null\n\tprivate rangeSelectionAnchorItem: ItemType | null = null\n\n\tget state(): ListState<ItemType> {\n\t\treturn this.stateStream()\n\t}\n\n\tprivate get rawState(): PrivateListState<ItemType> {\n\t\treturn this.rawStateStream()\n\t}\n\n\tprivate defaultRawStateStream: PrivateListState<ItemType> = {\n\t\tunfilteredItems: [],\n\t\tfilteredItems: [],\n\t\tinMultiselect: false,\n\t\tloadingStatus: ListLoadingState.Idle,\n\t\tloadingAll: false,\n\t\tselectedItems: new Set(),\n\t\tactiveItem: null,\n\t}\n\tprivate rawStateStream: Stream<PrivateListState<ItemType>> = stream(this.defaultRawStateStream)\n\n\treadonly stateStream: Stream<ListState<ItemType>> = this.rawStateStream.map((state) => {\n\t\tconst activeItem = state.activeItem\n\t\tconst foundIndex = activeItem ? binarySearch(state.filteredItems, activeItem, (l, r) => this.config.sortCompare(l, r)) : -1\n\t\tconst activeIndex = foundIndex < 0 ? null : foundIndex\n\t\treturn { ...state, items: state.filteredItems, activeIndex }\n\t})\n\n\treadonly differentItemsSelected: Stream<ReadonlySet<ItemType>> = Stream.scan(\n\t\t(acc: ReadonlySet<ItemType>, state: ListState<ItemType>) => {\n\t\t\tconst newSelectedIds = setMap(state.selectedItems, (item) => this.config.getItemId(item))\n\t\t\tconst oldSelectedIds = setMap(acc, (item) => this.config.getItemId(item))\n\t\t\tif (setEquals(oldSelectedIds, newSelectedIds)) {\n\t\t\t\t// Stream.scan type definitions does not take it into account\n\t\t\t\treturn Stream.SKIP as unknown as ReadonlySet<ItemType>\n\t\t\t} else {\n\t\t\t\treturn state.selectedItems\n\t\t\t}\n\t\t},\n\t\tnew Set(),\n\t\tthis.stateStream,\n\t)\n\n\tprivate updateState(newStatePart: Partial<PrivateListState<ItemType>>) {\n\t\tthis.rawStateStream({ ...this.rawState, ...newStatePart })\n\t}\n\n\tprivate waitUtilInit(): Promise<unknown> {\n\t\tconst deferred = defer()\n\t\tconst subscription = this.rawStateStream.map(() => {\n\t\t\tif (this.loadState === \"initialized\") {\n\t\t\t\tPromise.resolve().then(() => {\n\t\t\t\t\tsubscription.end(true)\n\t\t\t\t\tdeferred.resolve(undefined)\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\treturn deferred.promise\n\t}\n\n\tasync loadInitial() {\n\t\tif (this.loadState !== \"created\") {\n\t\t\treturn\n\t\t}\n\t\tthis.loadState = \"initialized\"\n\t\tawait this.doLoad()\n\t}\n\n\tasync loadMore() {\n\t\tif (this.rawState.loadingStatus === ListLoadingState.Loading) {\n\t\t\treturn this.loading\n\t\t}\n\t\tif (this.loadState !== \"initialized\" || this.rawState.loadingStatus !== ListLoadingState.Idle) {\n\t\t\treturn\n\t\t}\n\t\tawait this.doLoad()\n\t}\n\n\tasync retryLoading() {\n\t\tif (this.loadState !== \"initialized\" || this.rawState.loadingStatus !== ListLoadingState.ConnectionLost) {\n\t\t\treturn\n\t\t}\n\t\tawait this.doLoad()\n\t}\n\n\tupdateLoadingStatus(status: ListLoadingState) {\n\t\tif (this.rawState.loadingStatus === status) return\n\n\t\tthis.updateState({ loadingStatus: status })\n\t}\n\n\tprivate async doLoad() {\n\t\tthis.updateLoadingStatus(ListLoadingState.Loading)\n\t\tthis.loading = Promise.resolve().then(async () => {\n\t\t\tconst lastFetchedItem = last(this.rawState.unfilteredItems)\n\t\t\ttry {\n\t\t\t\tconst { items: newItems, complete } = await this.config.fetch(lastFetchedItem, PageSize)\n\t\t\t\t// if the loading was cancelled in the meantime, don't insert anything so that it's not confusing\n\t\t\t\tif (this.state.loadingStatus === ListLoadingState.ConnectionLost) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tconst newUnfilteredItems = [...this.rawState.unfilteredItems, ...newItems]\n\t\t\t\tnewUnfilteredItems.sort(this.config.sortCompare)\n\n\t\t\t\tconst newFilteredItems = [...this.rawState.filteredItems, ...this.applyFilter(newItems)]\n\t\t\t\tnewFilteredItems.sort(this.config.sortCompare)\n\n\t\t\t\tconst loadingStatus = complete ? ListLoadingState.Done : ListLoadingState.Idle\n\t\t\t\tthis.updateState({ loadingStatus, unfilteredItems: newUnfilteredItems, filteredItems: newFilteredItems })\n\t\t\t} catch (e) {\n\t\t\t\tthis.updateLoadingStatus(ListLoadingState.ConnectionLost)\n\t\t\t\tif (!isOfflineError(e)) {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\treturn this.loading\n\t}\n\n\tprivate applyFilter(newItems: ReadonlyArray<ItemType>): Array<ItemType> {\n\t\treturn newItems.filter(this.filter ?? (() => true))\n\t}\n\n\tsetFilter(filter: ListFilter<ItemType> | null) {\n\t\tthis.filter = filter\n\t\tthis.reapplyFilter()\n\t}\n\n\treapplyFilter() {\n\t\tconst newFilteredItems = this.applyFilter(this.rawState.unfilteredItems)\n\n\t\tconst newSelectedItems = new Set(this.applyFilter([...this.state.selectedItems]))\n\n\t\tthis.updateState({ filteredItems: newFilteredItems, selectedItems: newSelectedItems })\n\t}\n\n\tonSingleSelection(item: ItemType): void {\n\t\tthis.updateState({ selectedItems: new Set([item]), inMultiselect: false, activeItem: item })\n\t\tthis.rangeSelectionAnchorItem = item\n\t}\n\n\t/** An item was added to the selection. If multiselect was not on, discard previous single selection and only added selected item to the selection. */\n\tonSingleExclusiveSelection(item: ItemType): void {\n\t\tif (!this.rawState.inMultiselect) {\n\t\t\tthis.updateState({ selectedItems: new Set([item]), inMultiselect: true, activeItem: item })\n\t\t\tthis.rangeSelectionAnchorItem = item\n\t\t} else {\n\t\t\tconst selectedItems = new Set(this.state.selectedItems)\n\t\t\tif (selectedItems.has(item)) {\n\t\t\t\tselectedItems.delete(item)\n\t\t\t} else {\n\t\t\t\tselectedItems.add(item)\n\t\t\t}\n\t\t\tif (selectedItems.size === 0) {\n\t\t\t\tthis.updateState({ selectedItems, inMultiselect: false, activeItem: null })\n\t\t\t\tthis.rangeSelectionAnchorItem = null\n\t\t\t} else {\n\t\t\t\tthis.updateState({ selectedItems, inMultiselect: true, activeItem: item })\n\t\t\t\tthis.rangeSelectionAnchorItem = item\n\t\t\t}\n\t\t}\n\t}\n\n\t/** An item was added to the selection. If multiselect was not on, add previous single selection and newly added selected item to the selection. */\n\tonSingleInclusiveSelection(item: ItemType, clearSelectionOnMultiSelectStart?: boolean): void {\n\t\t// If it isn't in MultiSelect, we discard all previous items\n\t\t// and start a new set of selected items in MultiSelect mode\n\t\t// we do it only if the user is on singleColumnMode, because\n\t\t// there are different expected behaviors there\n\t\tif (!this.state.inMultiselect && clearSelectionOnMultiSelectStart) {\n\t\t\tthis.selectNone()\n\t\t}\n\n\t\tconst selectedItems = new Set(this.state.selectedItems)\n\n\t\tif (this.state.inMultiselect && selectedItems.has(item)) {\n\t\t\tselectedItems.delete(item)\n\t\t} else {\n\t\t\tselectedItems.add(item)\n\t\t}\n\n\t\tif (selectedItems.size === 0) {\n\t\t\tthis.updateState({ selectedItems, inMultiselect: false, activeItem: null })\n\t\t\tthis.rangeSelectionAnchorItem = null\n\t\t} else {\n\t\t\tthis.updateState({ selectedItems, inMultiselect: true, activeItem: item })\n\t\t\tthis.rangeSelectionAnchorItem = item\n\t\t}\n\t}\n\n\tasync loadAndSelect(finder: (item: ItemType) => boolean, shouldStop: () => boolean): Promise<ItemType | null> {\n\t\tawait this.waitUtilInit()\n\t\tlet foundItem: ItemType | undefined = undefined\n\t\twhile (\n\t\t\t// if we did find the target mail, stop\n\t\t\t// make sure to call this before shouldStop or we might stop before trying to find an item\n\t\t\t// this can probably be optimized to be binary search in most (all?) cases\n\t\t\t!(foundItem = this.rawState.unfilteredItems.find(finder)) &&\n\t\t\t!shouldStop() &&\n\t\t\t// if we are done loading, stop\n\t\t\tthis.rawState.loadingStatus !== ListLoadingState.Done &&\n\t\t\t// if we are offline, stop\n\t\t\tthis.rawState.loadingStatus !== ListLoadingState.ConnectionLost\n\t\t) {\n\t\t\tawait this.loadMore()\n\t\t}\n\t\tif (foundItem) {\n\t\t\tthis.onSingleSelection(foundItem)\n\t\t}\n\t\treturn foundItem ?? null\n\t}\n\n\tselectRangeTowards(item: ItemType): void {\n\t\tconst selectedItems = new Set(this.state.selectedItems)\n\t\tif (selectedItems.size === 0) {\n\t\t\tselectedItems.add(item)\n\t\t} else {\n\t\t\t// we are trying to find the item that's closest to the clicked one\n\t\t\t// and after that we will select everything between the closest and the clicked one\n\n\t\t\tconst clickedItemIndex: number = this.state.items.indexOf(item)\n\t\t\tlet nearestSelectedIndex: number | null = null\n\n\t\t\t// find absolute min based on the distance (closest)\n\t\t\tfor (const selectedItem of selectedItems) {\n\t\t\t\tconst currentSelectedItemIndex = this.state.items.indexOf(selectedItem)\n\n\t\t\t\tif (nearestSelectedIndex == null || Math.abs(clickedItemIndex - currentSelectedItemIndex) < Math.abs(clickedItemIndex - nearestSelectedIndex)) {\n\t\t\t\t\tnearestSelectedIndex = currentSelectedItemIndex\n\t\t\t\t}\n\t\t\t}\n\t\t\tassertNonNull(nearestSelectedIndex)\n\n\t\t\tconst itemsToAddToSelection: ItemType[] = []\n\n\t\t\tif (nearestSelectedIndex < clickedItemIndex) {\n\t\t\t\tfor (let i = nearestSelectedIndex + 1; i <= clickedItemIndex; i++) {\n\t\t\t\t\titemsToAddToSelection.push(this.state.items[i])\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let i = clickedItemIndex; i < nearestSelectedIndex; i++) {\n\t\t\t\t\titemsToAddToSelection.push(this.state.items[i])\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsetAddAll(selectedItems, itemsToAddToSelection)\n\t\t}\n\t\tthis.updateState({ selectedItems, inMultiselect: true, activeItem: item })\n\t\tthis.rangeSelectionAnchorItem = item\n\t}\n\n\tselectPrevious(multiselect: boolean) {\n\t\tconst oldActiveItem = this.rawState.activeItem\n\t\tconst newActiveItem = this.getPreviousItem(oldActiveItem)\n\n\t\tif (newActiveItem != null) {\n\t\t\tif (!multiselect) {\n\t\t\t\tthis.onSingleSelection(newActiveItem)\n\t\t\t} else {\n\t\t\t\tconst selectedItems = new Set(this.state.selectedItems)\n\t\t\t\tthis.rangeSelectionAnchorItem = this.rangeSelectionAnchorItem ?? first(this.state.items)\n\t\t\t\tif (!this.rangeSelectionAnchorItem) return\n\n\t\t\t\tconst previousActiveIndex = this.state.activeIndex ?? 0\n\t\t\t\tconst towardsAnchor = this.config.sortCompare(oldActiveItem ?? getFirstOrThrow(this.state.items), this.rangeSelectionAnchorItem) > 0\n\t\t\t\tif (towardsAnchor) {\n\t\t\t\t\t// remove\n\t\t\t\t\tselectedItems.delete(this.state.items[previousActiveIndex])\n\t\t\t\t} else {\n\t\t\t\t\t// add\n\t\t\t\t\tselectedItems.add(newActiveItem)\n\t\t\t\t}\n\n\t\t\t\tthis.updateState({ activeItem: newActiveItem, selectedItems, inMultiselect: true })\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getPreviousItem(oldActiveItem: ItemType | null) {\n\t\treturn oldActiveItem == null\n\t\t\t? first(this.state.items)\n\t\t\t: findLast(this.state.items, (item) => this.config.sortCompare(item, oldActiveItem) < 0) ?? first(this.state.items)\n\t}\n\n\tselectNext(multiselect: boolean) {\n\t\tconst oldActiveItem = this.rawState.activeItem\n\t\tconst lastItem = last(this.state.items)\n\t\tconst newActiveItem = this.getNextItem(oldActiveItem, lastItem)\n\n\t\tif (newActiveItem != null) {\n\t\t\tif (!multiselect) {\n\t\t\t\tthis.onSingleSelection(newActiveItem)\n\t\t\t} else {\n\t\t\t\tconst selectedItems = new Set(this.state.selectedItems)\n\t\t\t\tthis.rangeSelectionAnchorItem = this.rangeSelectionAnchorItem ?? first(this.state.items)\n\t\t\t\tif (!this.rangeSelectionAnchorItem) return\n\n\t\t\t\tconst previousActiveIndex = this.state.activeIndex ?? 0\n\t\t\t\tconst towardsAnchor = this.config.sortCompare(oldActiveItem ?? getFirstOrThrow(this.state.items), this.rangeSelectionAnchorItem) < 0\n\t\t\t\tif (towardsAnchor) {\n\t\t\t\t\tselectedItems.delete(this.state.items[previousActiveIndex])\n\t\t\t\t} else {\n\t\t\t\t\tselectedItems.add(newActiveItem)\n\t\t\t\t}\n\t\t\t\tthis.updateState({ selectedItems, inMultiselect: true, activeItem: newActiveItem })\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getNextItem(oldActiveItem: ItemType | null, lastItem: ItemType | null | undefined) {\n\t\treturn oldActiveItem == null\n\t\t\t? first(this.state.items)\n\t\t\t: lastItem && this.config.sortCompare(lastItem, oldActiveItem) <= 0\n\t\t\t? lastItem\n\t\t\t: this.state.items.find((item) => this.config.sortCompare(item, oldActiveItem) > 0) ?? first(this.state.items)\n\t}\n\n\tareAllSelected(): boolean {\n\t\treturn this.rawState.inMultiselect && this.state.selectedItems.size === this.state.items.length\n\t}\n\n\tselectAll() {\n\t\tthis.updateState({ selectedItems: new Set(this.state.items), activeItem: null, inMultiselect: true })\n\t\tthis.rangeSelectionAnchorItem = null\n\t}\n\n\tselectNone() {\n\t\tthis.rangeSelectionAnchorItem = null\n\t\tthis.updateState({ selectedItems: new Set<ItemType>(), inMultiselect: false })\n\t}\n\n\tisItemSelected(itemId: IdType): boolean {\n\t\treturn findBy(this.state.selectedItems, (item: ItemType) => this.config.isSameId(this.config.getItemId(item), itemId)) != null\n\t}\n\n\treadonly getSelectedAsArray: () => Array<ItemType> = memoizedWithHiddenArgument(\n\t\t() => this.state,\n\t\t(state: ListState<ItemType>) => [...state.selectedItems],\n\t)\n\n\treadonly isSelectionEmpty: () => boolean = memoizedWithHiddenArgument(\n\t\t() => this.state,\n\t\t(state: ListState<ItemType>) => state.selectedItems.size === 0,\n\t)\n\n\treadonly getUnfilteredAsArray: () => Array<ItemType> = memoizedWithHiddenArgument(\n\t\t() => this.rawState,\n\t\t(state: PrivateListState<ItemType>) => [...state.unfilteredItems],\n\t)\n\n\tenterMultiselect() {\n\t\t// avoid having the viewed item as a preselected one which might be confusing.\n\t\tthis.selectNone()\n\t\tthis.updateState({ inMultiselect: true })\n\t}\n\n\tsort() {\n\t\tconst filteredItems = this.rawState.filteredItems.slice().sort(this.config.sortCompare)\n\t\tconst unfilteredItems = this.rawState.filteredItems.slice().sort(this.config.sortCompare)\n\t\tthis.updateState({ filteredItems, unfilteredItems })\n\t}\n\n\tisLoadedCompletely(): boolean {\n\t\treturn this.rawState.loadingStatus === ListLoadingState.Done\n\t}\n\n\tcancelLoadAll() {\n\t\tif (this.state.loadingAll) {\n\t\t\tthis.updateState({ loadingAll: false })\n\t\t}\n\t}\n\n\tasync loadAll() {\n\t\tif (this.rawState.loadingAll) return\n\n\t\tthis.updateState({ loadingAll: true })\n\n\t\ttry {\n\t\t\twhile (this.rawState.loadingAll && !this.isLoadedCompletely()) {\n\t\t\t\tawait this.loadMore()\n\t\t\t\tthis.selectAll()\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.cancelLoadAll()\n\t\t}\n\t}\n\n\tisEmptyAndDone(): boolean {\n\t\treturn this.state.items.length === 0 && this.state.loadingStatus === ListLoadingState.Done\n\t}\n\n\tstopLoading() {\n\t\tif (this.state.loadingStatus === ListLoadingState.Loading) {\n\t\t\t// We can't really cancel ongoing requests, but we can prevent more requests from happening\n\t\t\tthis.updateState({ loadingStatus: ListLoadingState.ConnectionLost })\n\t\t}\n\t}\n\n\twaitLoad(what: () => any): Promise<any> {\n\t\treturn settledThen(this.loading, what)\n\t}\n\n\tinsertLoadedItem(item: ItemType) {\n\t\tif (this.rawState.unfilteredItems.some((unfilteredItem) => this.hasSameId(unfilteredItem, item))) {\n\t\t\treturn\n\t\t}\n\n\t\t// can we do something like binary search?\n\t\tconst unfilteredItems = this.rawState.unfilteredItems.concat(item).sort(this.config.sortCompare)\n\t\tconst filteredItems = this.rawState.filteredItems.concat(this.applyFilter([item])).sort(this.config.sortCompare)\n\t\tthis.updateState({ filteredItems, unfilteredItems })\n\t}\n\n\tupdateLoadedItem(item: ItemType) {\n\t\t// We cannot use binary search here because the sort order of items can change based on an entity update, and we need to find the position of the\n\t\t// old entity by id in order to remove it.\n\n\t\t// Since every item id is unique and there's no scenario where the same item appears twice but in different lists, we can safely sort just\n\t\t// by the item id, ignoring the list id\n\n\t\t// update unfiltered list: find the position, take out the old item and put the updated one\n\t\tconst positionToUpdateUnfiltered = this.rawState.unfilteredItems.findIndex((unfilteredItem) => this.hasSameId(unfilteredItem, item))\n\t\tconst unfilteredItems = this.rawState.unfilteredItems.slice()\n\t\tif (positionToUpdateUnfiltered >= 0) {\n\t\t\tunfilteredItems.splice(positionToUpdateUnfiltered, 1, item)\n\t\t\tunfilteredItems.sort(this.config.sortCompare)\n\t\t}\n\n\t\t// update filtered list & selected items\n\t\tconst positionToUpdateFiltered = this.rawState.filteredItems.findIndex((filteredItem) => this.hasSameId(filteredItem, item))\n\t\tconst filteredItems = this.rawState.filteredItems.slice()\n\t\tconst selectedItems = new Set(this.rawState.selectedItems)\n\t\tif (positionToUpdateFiltered >= 0) {\n\t\t\tconst [oldItem] = filteredItems.splice(positionToUpdateFiltered, 1, item)\n\t\t\tfilteredItems.sort(this.config.sortCompare)\n\t\t\tif (selectedItems.delete(oldItem)) {\n\t\t\t\tselectedItems.add(item)\n\t\t\t}\n\t\t}\n\n\t\t// keep active item up-to-date\n\t\tconst activeItemUpdated = this.rawState.activeItem != null && this.hasSameId(this.rawState.activeItem, item)\n\t\tconst newActiveItem = this.rawState.activeItem\n\n\t\tif (positionToUpdateUnfiltered !== -1 || positionToUpdateFiltered !== -1 || activeItemUpdated) {\n\t\t\tthis.updateState({ unfilteredItems, filteredItems, selectedItems, activeItem: newActiveItem })\n\t\t}\n\n\t\t// keep anchor up-to-date\n\t\tif (this.rangeSelectionAnchorItem != null && this.hasSameId(this.rangeSelectionAnchorItem, item)) {\n\t\t\tthis.rangeSelectionAnchorItem = item\n\t\t}\n\t}\n\n\tdeleteLoadedItem(itemId: IdType): Promise<void> {\n\t\treturn settledThen(this.loading, () => {\n\t\t\tconst item = this.rawState.filteredItems.find((e) => this.config.isSameId(this.config.getItemId(e), itemId))\n\n\t\t\tconst selectedItems = new Set(this.rawState.selectedItems)\n\n\t\t\tlet newActiveItem\n\n\t\t\tif (item) {\n\t\t\t\tconst wasRemoved = selectedItems.delete(item)\n\n\t\t\t\tif (this.rawState.filteredItems.length > 1) {\n\t\t\t\t\tconst desiredBehavior = this.config.autoSelectBehavior?.() ?? null\n\t\t\t\t\tif (wasRemoved) {\n\t\t\t\t\t\tif (desiredBehavior === ListAutoSelectBehavior.NONE || this.state.inMultiselect) {\n\t\t\t\t\t\t\tselectedItems.clear()\n\t\t\t\t\t\t} else if (desiredBehavior === ListAutoSelectBehavior.NEWER) {\n\t\t\t\t\t\t\tnewActiveItem = this.getPreviousItem(item)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewActiveItem = item === last(this.state.items) ? this.getPreviousItem(item) : this.getNextItem(item, null)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newActiveItem) {\n\t\t\t\t\t\tselectedItems.add(newActiveItem)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewActiveItem = this.rawState.activeItem\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst filteredItems = this.rawState.filteredItems.slice()\n\t\t\t\tremove(filteredItems, item)\n\t\t\t\tconst unfilteredItems = this.rawState.unfilteredItems.slice()\n\t\t\t\tremove(unfilteredItems, item)\n\t\t\t\tthis.updateState({ filteredItems, selectedItems, unfilteredItems, activeItem: newActiveItem })\n\t\t\t}\n\t\t})\n\t}\n\n\tgetLastItem(): ItemType | null {\n\t\tif (this.rawState.unfilteredItems.length > 0) {\n\t\t\treturn lastThrow(this.rawState.unfilteredItems)\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\tprivate hasSameId(item1: ItemType, item2: ItemType): boolean {\n\t\tconst id1 = this.config.getItemId(item1)\n\t\tconst id2 = this.config.getItemId(item2)\n\t\treturn this.config.isSameId(id1, id2)\n\t}\n\n\tcanInsertItem(entity: ItemType): boolean {\n\t\tif (this.state.loadingStatus === ListLoadingState.Done) {\n\t\t\treturn true\n\t\t}\n\n\t\t// new element is in the loaded range or newer than the first element\n\t\tconst lastElement = this.getLastItem()\n\t\treturn lastElement != null && this.config.sortCompare(entity, lastElement) < 0\n\t}\n}\n\nexport function selectionAttrsForList<ItemType, IdType>(listModel: Pick<ListModel<ItemType, IdType>, \"areAllSelected\" | \"selectNone\" | \"selectAll\"> | null) {\n\treturn {\n\t\tselected: listModel?.areAllSelected() ?? false,\n\t\tselectNone: () => listModel?.selectNone(),\n\t\tselectAll: () => listModel?.selectAll(),\n\t}\n}\n"]}