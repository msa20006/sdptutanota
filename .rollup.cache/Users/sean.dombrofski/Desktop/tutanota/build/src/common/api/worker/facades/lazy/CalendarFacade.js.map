{"version":3,"file":"CalendarFacade.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/facades/lazy/CalendarFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport type { AlarmInfo, AlarmNotification, Group, PushIdentifier, RepeatRule, User, UserAlarmInfo } from \"../../../entities/sys/TypeRefs.js\"\nimport {\n\tAlarmServicePostTypeRef,\n\tcreateAlarmInfo,\n\tcreateAlarmNotification,\n\tcreateAlarmServicePost,\n\tcreateCalendarEventRef,\n\tcreateDateWrapper,\n\tcreateNotificationSessionKey,\n\tcreateRepeatRule,\n\tcreateUserAlarmInfo,\n\tPushIdentifierTypeRef,\n\tUserAlarmInfoTypeRef,\n} from \"../../../entities/sys/TypeRefs.js\"\nimport {\n\tassertNotNull,\n\tDAY_IN_MILLIS,\n\tdowncast,\n\tflatMap,\n\tgetFromMap,\n\tgroupBy,\n\tgroupByAndMap,\n\tgroupByAndMapUniquely,\n\tisNotNull,\n\tneverNull,\n\tofClass,\n\tpromiseMap,\n\tRequire,\n\tstringToUtf8Uint8Array,\n} from \"@tutao/tutanota-utils\"\nimport { CryptoFacade } from \"../../crypto/CryptoFacade.js\"\nimport { GroupType, OperationType } from \"../../../common/TutanotaConstants.js\"\nimport type { CalendarEvent, CalendarEventUidIndex, CalendarRepeatRule } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { CalendarEventTypeRef, CalendarEventUidIndexTypeRef, CalendarGroupRootTypeRef, createCalendarDeleteData } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { DefaultEntityRestCache } from \"../../rest/DefaultEntityRestCache.js\"\nimport { ConnectionError, NotAuthorizedError, NotFoundError, PayloadTooLargeError } from \"../../../common/error/RestError.js\"\nimport { EntityClient, loadMultipleFromLists } from \"../../../common/EntityClient.js\"\nimport { elementIdPart, getLetId, getListId, isSameId, listIdPart, uint8arrayToCustomId } from \"../../../common/utils/EntityUtils.js\"\nimport { GroupManagementFacade } from \"./GroupManagementFacade.js\"\nimport { SetupMultipleError } from \"../../../common/error/SetupMultipleError.js\"\nimport { ImportError } from \"../../../common/error/ImportError.js\"\nimport { aes256RandomKey, AesKey, encryptKey, sha256Hash } from \"@tutao/tutanota-crypto\"\nimport { InstanceMapper } from \"../../crypto/InstanceMapper.js\"\nimport { TutanotaError } from \"@tutao/tutanota-error\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { AlarmService } from \"../../../entities/sys/Services.js\"\nimport { CalendarService } from \"../../../entities/tutanota/Services.js\"\nimport { resolveTypeReference } from \"../../../common/EntityFunctions.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { EncryptedAlarmNotification } from \"../../../../native/common/EncryptedAlarmNotification.js\"\nimport { NativePushFacade } from \"../../../../native/common/generatedipc/NativePushFacade.js\"\nimport { ExposedOperationProgressTracker, OperationId } from \"../../../main/OperationProgressTracker.js\"\nimport { InfoMessageHandler } from \"../../../../gui/InfoMessageHandler.js\"\nimport { ProgrammingError } from \"../../../common/error/ProgrammingError.js\"\nimport {\n\taddDaysForEventInstance,\n\taddDaysForRecurringEvent,\n\tCalendarTimeRange,\n\tgenerateCalendarInstancesInRange,\n\tisClientOnlyCalendar,\n} from \"../../../../calendar/date/CalendarUtils.js\"\nimport { CalendarInfo } from \"../../../../../calendar-app/calendar/model/CalendarModel.js\"\nimport { geEventElementMaxId, getEventElementMinId } from \"../../../common/utils/CommonCalendarUtils.js\"\nimport { DaysToEvents } from \"../../../../calendar/date/CalendarEventsRepository.js\"\nimport { isOfflineError } from \"../../../common/utils/ErrorUtils.js\"\nimport type { EventWrapper } from \"../../../../calendar/import/ImportExportUtils.js\"\n\nassertWorkerOrNode()\n\ntype AlarmNotificationsPerEvent = {\n\tevent: CalendarEvent\n\talarmInfoIds: IdTuple[]\n\talarmNotifications: AlarmNotification[]\n}\n\n/** event that is a part of an event series and references another event via its recurrenceId and uid */\nexport type CalendarEventAlteredInstance = Require<\"recurrenceId\" | \"uid\", CalendarEvent> & { repeatRule: null }\n/** events that has a uid, but no recurrenceId exist on their own and may define a series. events that do not repeat are also progenitors. */\nexport type CalendarEventProgenitor = Require<\"uid\", CalendarEvent> & { recurrenceId: null }\nexport type CalendarEventInstance = CalendarEventAlteredInstance | CalendarEventProgenitor\n/** index entry that bundles all the events with the same uid in the ownerGroup. */\nexport type CalendarEventUidIndexEntry = {\n\townerGroup: NonNullable<CalendarEvent[\"_ownerGroup\"]>\n\tprogenitor: CalendarEventProgenitor | null\n\talteredInstances: Array<CalendarEventAlteredInstance>\n}\n\nexport class CalendarFacade {\n\t// visible for testing\n\treadonly cachingEntityClient: EntityClient\n\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly groupManagementFacade: GroupManagementFacade,\n\t\t// We inject cache directly because we need to delete user from it for a hack\n\t\tprivate readonly entityRestCache: DefaultEntityRestCache,\n\t\tprivate readonly noncachingEntityClient: EntityClient,\n\t\tprivate readonly nativePushFacade: NativePushFacade,\n\t\tprivate readonly operationProgressTracker: ExposedOperationProgressTracker,\n\t\tprivate readonly instanceMapper: InstanceMapper,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly cryptoFacade: CryptoFacade,\n\t\tprivate readonly infoMessageHandler: InfoMessageHandler,\n\t) {\n\t\tthis.cachingEntityClient = new EntityClient(this.entityRestCache)\n\t}\n\n\tasync saveImportedCalendarEvents(eventWrappers: Array<EventWrapper>, operationId: OperationId): Promise<void> {\n\t\t// it is safe to assume that all event uids are set at this time\n\t\treturn this.saveCalendarEvents(eventWrappers, (percent) => this.operationProgressTracker.onProgress(operationId, percent))\n\t}\n\n\t/**\n\t * extend or one month of the given daysToEvents map\n\t *\n\t * @param month only update events that intersect days in this month\n\t * @param calendarInfos update events contained in these calendars\n\t * @param daysToEvents the old version of the map\n\t * @param zone the time zone to consider the event times under\n\t * @returns a new daysToEventsMap where the given month is updated.\n\t */\n\tasync updateEventMap(\n\t\tmonth: CalendarTimeRange,\n\t\tcalendarInfos: ReadonlyMap<Id, CalendarInfo>,\n\t\tdaysToEvents: DaysToEvents,\n\t\tzone: string,\n\t): Promise<DaysToEvents> {\n\t\t// Because of the timezones and all day events, we might not load an event which we need to display.\n\t\t// So we add a margin on 24 hours to be sure we load everything we need. We will filter matching\n\t\t// events anyway.\n\t\tconst startId = getEventElementMinId(month.start - DAY_IN_MILLIS)\n\t\tconst endId = geEventElementMaxId(month.end + DAY_IN_MILLIS)\n\n\t\t// We collect events from all calendars together and then replace map synchronously.\n\t\t// This is important to replace the map synchronously to not get race conditions because we load different months in parallel.\n\t\t// We could replace map more often instead of aggregating events but this would mean creating even more (cals * months) maps.\n\t\t//\n\t\t// Note: there may be issues if we get entity update before other calendars finish loading but the chance is low and we do not\n\t\t// take care of this now.\n\n\t\tconst calendars: Array<{ long: CalendarEvent[]; short: CalendarEvent[] }> = []\n\n\t\tfor (const { groupRoot } of calendarInfos.values()) {\n\t\t\tconst [shortEventsResult, longEventsResult] = await Promise.all([\n\t\t\t\tthis.cachingEntityClient.loadReverseRangeBetween(CalendarEventTypeRef, groupRoot.shortEvents, endId, startId, 200),\n\t\t\t\tthis.cachingEntityClient.loadAll(CalendarEventTypeRef, groupRoot.longEvents),\n\t\t\t])\n\n\t\t\tcalendars.push({\n\t\t\t\tshort: shortEventsResult.elements,\n\t\t\t\tlong: longEventsResult,\n\t\t\t})\n\t\t}\n\t\tconst newEvents = new Map<number, Array<CalendarEvent>>(Array.from(daysToEvents.entries()).map(([day, events]) => [day, events.slice()]))\n\n\t\t// Generate events occurrences per calendar to avoid calendars flashing in the screen\n\t\tfor (const calendar of calendars) {\n\t\t\tthis.generateEventOccurences(newEvents, calendar.short, month, zone, true)\n\t\t\tthis.generateEventOccurences(newEvents, calendar.long, month, zone, false)\n\t\t}\n\n\t\treturn newEvents\n\t}\n\n\tprivate generateEventOccurences(\n\t\teventMap: Map<number, CalendarEvent[]>,\n\t\tevents: CalendarEvent[],\n\t\trange: CalendarTimeRange,\n\t\tzone: string,\n\t\toverwriteRange: boolean,\n\t) {\n\t\tfor (const e of events) {\n\t\t\t// Overrides end of range to prevent events from being truncated. Generating them until the end of the event\n\t\t\t// instead of the original end guarantees that the event will be fully displayed. This WILL NOT end in an\n\t\t\t// endless loop, because short events last a maximum of two weeks.\n\t\t\tconst generationRange = overwriteRange ? { ...range, end: e.endTime.getTime() } : range\n\n\t\t\tif (e.repeatRule) {\n\t\t\t\taddDaysForRecurringEvent(eventMap, e, generationRange, zone)\n\t\t\t} else {\n\t\t\t\taddDaysForEventInstance(eventMap, e, generationRange, zone)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * We try to create as many events as possible and only throw the error at the end.\n\t * If alarmNotifications are created for an event that will later fail to be created we ignore them.\n\t * This function does not perform any checks on the event so it should only be called internally when\n\t * we can be sure that those checks have already been performed.\n\t * @param eventsWrapper the events and alarmNotifications to be created.\n\t * @param onProgress\n\t */\n\tprivate async saveCalendarEvents(eventsWrapper: Array<EventWrapper>, onProgress: (percent: number) => Promise<void>): Promise<void> {\n\t\tlet currentProgress = 10\n\t\tawait onProgress(currentProgress)\n\n\t\tfor (const { event } of eventsWrapper) {\n\t\t\tevent.hashedUid = hashUid(assertNotNull(event.uid, \"tried to save calendar event without uid.\"))\n\t\t}\n\n\t\tconst user = this.userFacade.getLoggedInUser()\n\n\t\tconst numEvents = eventsWrapper.length\n\t\tlet eventsWithAlarms: Array<AlarmNotificationsPerEvent>\n\t\ttry {\n\t\t\teventsWithAlarms = await this.saveMultipleAlarms(user, eventsWrapper)\n\t\t} catch (e) {\n\t\t\tif (e instanceof SetupMultipleError) {\n\t\t\t\tconsole.log(\"Saving alarms failed.\", e)\n\t\t\t\tthrow new ImportError(e.errors[0], \"Could not save alarms.\", numEvents)\n\t\t\t}\n\t\t\tthrow e\n\t\t}\n\t\tfor (const { event, alarmInfoIds } of eventsWithAlarms) {\n\t\t\tevent.alarmInfos = alarmInfoIds\n\t\t}\n\t\tcurrentProgress = 33\n\t\tawait onProgress(currentProgress)\n\t\tconst eventsWithAlarmsByEventListId = groupBy(eventsWithAlarms, (eventWrapper) => getListId(eventWrapper.event))\n\t\tlet collectedAlarmNotifications: AlarmNotification[] = []\n\t\t//we have different lists for short and long events so this is 1 or 2\n\t\tconst size = eventsWithAlarmsByEventListId.size\n\t\tlet failed = 0\n\t\tlet errors = [] as Array<TutanotaError>\n\n\t\tfor (const [listId, eventsWithAlarmsOfOneList] of eventsWithAlarmsByEventListId) {\n\t\t\tlet successfulEvents = eventsWithAlarmsOfOneList\n\t\t\tawait this.cachingEntityClient\n\t\t\t\t.setupMultipleEntities(\n\t\t\t\t\tlistId,\n\t\t\t\t\teventsWithAlarmsOfOneList.map((e) => e.event),\n\t\t\t\t)\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(SetupMultipleError, (e) => {\n\t\t\t\t\t\tfailed += e.failedInstances.length\n\t\t\t\t\t\terrors = errors.concat(e.errors)\n\t\t\t\t\t\tconsole.log(e.errors)\n\t\t\t\t\t\tsuccessfulEvents = eventsWithAlarmsOfOneList.filter(({ event }) => !e.failedInstances.includes(event))\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\tconst allAlarmNotificationsOfListId = successfulEvents.map((event) => event.alarmNotifications).flat()\n\t\t\tcollectedAlarmNotifications = collectedAlarmNotifications.concat(allAlarmNotificationsOfListId)\n\t\t\tcurrentProgress += Math.floor(56 / size)\n\t\t\tawait onProgress(currentProgress)\n\t\t}\n\n\t\tconst pushIdentifierList = await this.cachingEntityClient.loadAll(\n\t\t\tPushIdentifierTypeRef,\n\t\t\tneverNull(this.userFacade.getLoggedInUser().pushIdentifierList).list,\n\t\t)\n\n\t\tif (collectedAlarmNotifications.length > 0 && pushIdentifierList.length > 0) {\n\t\t\tawait this.sendAlarmNotifications(collectedAlarmNotifications, pushIdentifierList)\n\t\t}\n\n\t\tawait onProgress(100)\n\n\t\tif (failed !== 0) {\n\t\t\tif (errors.some(isOfflineError)) {\n\t\t\t\t//In this case the user will not be informed about the number of failed events. We considered this is okay because it is not actionable anyways.\n\t\t\t\tthrow new ConnectionError(\"Connection lost while saving events\")\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Could not save events. Number of failed imports: \", failed)\n\t\t\t\tthrow new ImportError(errors[0], \"Could not save events.\", failed)\n\t\t\t}\n\t\t}\n\t}\n\n\tasync saveCalendarEvent(event: CalendarEvent, alarmInfos: ReadonlyArray<AlarmInfoTemplate>, oldEvent: CalendarEvent | null): Promise<void> {\n\t\tif (event._id == null) throw new Error(\"No id set on the event\")\n\t\tif (event._ownerGroup == null) throw new Error(\"No _ownerGroup is set on the event\")\n\t\tif (event.uid == null) throw new Error(\"no uid set on the event\")\n\t\tevent.hashedUid = hashUid(event.uid)\n\n\t\tif (oldEvent) {\n\t\t\tawait this.cachingEntityClient.erase(oldEvent).catch(ofClass(NotFoundError, () => console.log(\"could not delete old event when saving new one\")))\n\t\t}\n\n\t\treturn await this.saveCalendarEvents(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tevent,\n\t\t\t\t\talarms: alarmInfos,\n\t\t\t\t},\n\t\t\t],\n\t\t\t() => Promise.resolve(),\n\t\t)\n\t}\n\n\tasync updateCalendarEvent(event: CalendarEvent, newAlarms: ReadonlyArray<AlarmInfoTemplate>, existingEvent: CalendarEvent): Promise<void> {\n\t\tevent._id = existingEvent._id\n\t\tevent._ownerEncSessionKey = existingEvent._ownerEncSessionKey\n\t\tevent._ownerKeyVersion = existingEvent._ownerKeyVersion\n\t\tevent._permissions = existingEvent._permissions\n\t\tif (existingEvent.uid == null) throw new Error(\"no uid set on the existing event\")\n\t\tevent.uid = existingEvent.uid\n\t\tevent.hashedUid = hashUid(existingEvent.uid)\n\n\t\tconst user = this.userFacade.getLoggedInUser()\n\n\t\tconst userAlarmIdsWithAlarmNotificationsPerEvent = await this.saveMultipleAlarms(user, [\n\t\t\t{\n\t\t\t\tevent,\n\t\t\t\talarms: newAlarms,\n\t\t\t},\n\t\t])\n\t\tconst { alarmInfoIds, alarmNotifications } = userAlarmIdsWithAlarmNotificationsPerEvent[0]\n\t\tconst userAlarmInfoListId = neverNull(user.alarmInfoList).alarms\n\t\t// Remove all alarms which belongs to the current user. We need to be careful about other users' alarms.\n\t\t// Server takes care of the removed alarms,\n\t\tevent.alarmInfos = existingEvent.alarmInfos.filter((a) => !isSameId(listIdPart(a), userAlarmInfoListId)).concat(alarmInfoIds)\n\t\tawait this.cachingEntityClient.update(event)\n\n\t\tif (alarmNotifications.length > 0) {\n\t\t\tconst pushIdentifierList = await this.cachingEntityClient.loadAll(\n\t\t\t\tPushIdentifierTypeRef,\n\t\t\t\tneverNull(this.userFacade.getLoggedInUser().pushIdentifierList).list,\n\t\t\t)\n\t\t\tawait this.sendAlarmNotifications(alarmNotifications, pushIdentifierList)\n\t\t}\n\t}\n\n\t/**\n\t * get all the calendar event instances in the given time range that are generated by the given progenitor Ids\n\t */\n\tasync reifyCalendarSearchResult(start: number, end: number, results: Array<IdTuple>): Promise<Array<CalendarEvent>> {\n\t\tconst filteredEvents = results.filter(([calendarId, eventId]) => !isClientOnlyCalendar(calendarId))\n\t\tconst progenitors = await loadMultipleFromLists(CalendarEventTypeRef, this.cachingEntityClient, filteredEvents)\n\t\tconst range: CalendarTimeRange = { start, end }\n\t\treturn generateCalendarInstancesInRange(progenitors, range)\n\t}\n\n\tasync addCalendar(name: string): Promise<{ user: User; group: Group }> {\n\t\treturn await this.groupManagementFacade.createCalendar(name)\n\t}\n\n\tasync deleteCalendar(groupRootId: Id): Promise<void> {\n\t\tawait this.serviceExecutor.delete(CalendarService, createCalendarDeleteData({ groupRootId }))\n\t}\n\n\tasync scheduleAlarmsForNewDevice(pushIdentifier: PushIdentifier): Promise<void> {\n\t\tconst user = this.userFacade.getLoggedInUser()\n\n\t\tconst eventsWithAlarmInfos = await this.loadAlarmEvents()\n\t\tconst alarmNotifications = flatMap(eventsWithAlarmInfos, ({ event, userAlarmInfos }) =>\n\t\t\tuserAlarmInfos.map((userAlarmInfo) => createAlarmNotificationForEvent(event, userAlarmInfo.alarmInfo, user._id)),\n\t\t)\n\t\t// Theoretically we don't need to encrypt anything if we are sending things locally but we use already encrypted data on the client\n\t\t// to store alarms securely.\n\t\tconst notificationKey = aes256RandomKey()\n\t\tawait this.encryptNotificationKeyForDevices(notificationKey, alarmNotifications, [pushIdentifier])\n\t\tconst requestEntity = createAlarmServicePost({\n\t\t\talarmNotifications,\n\t\t})\n\t\tconst AlarmServicePostTypeModel = await resolveTypeReference(AlarmServicePostTypeRef)\n\t\tconst encEntity = await this.instanceMapper.encryptAndMapToLiteral(AlarmServicePostTypeModel, requestEntity, notificationKey)\n\t\tconst encryptedAlarms: EncryptedAlarmNotification[] = downcast(encEntity).alarmNotifications\n\t\tawait this.nativePushFacade.scheduleAlarms(encryptedAlarms)\n\t}\n\n\t/**\n\t * Load all events that have an alarm assigned.\n\t * @return: Map from concatenated ListId of an event to list of UserAlarmInfos for that event\n\t */\n\tasync loadAlarmEvents(): Promise<Array<EventWithUserAlarmInfos>> {\n\t\tconst alarmInfoList = this.userFacade.getLoggedInUser().alarmInfoList\n\n\t\tif (!alarmInfoList) {\n\t\t\tconsole.warn(\"No alarmInfo list on user\")\n\t\t\treturn []\n\t\t}\n\n\t\tconst userAlarmInfos = await this.cachingEntityClient.loadAll(UserAlarmInfoTypeRef, alarmInfoList.alarms)\n\t\t// Group referenced event ids by list id so we can load events of one list in one request.\n\t\tconst listIdToElementIds = groupByAndMapUniquely(\n\t\t\tuserAlarmInfos,\n\t\t\t(userAlarmInfo) => userAlarmInfo.alarmInfo.calendarRef.listId,\n\t\t\t(userAlarmInfo) => userAlarmInfo.alarmInfo.calendarRef.elementId,\n\t\t)\n\t\t// we group by the full concatenated list id\n\t\t// because there might be collisions between event element ids due to being custom ids\n\t\tconst eventIdToAlarmInfos = groupBy(userAlarmInfos, (userAlarmInfo) => getEventIdFromUserAlarmInfo(userAlarmInfo).join(\"\"))\n\t\tconst calendarEvents = await promiseMap(listIdToElementIds.entries(), ([listId, elementIds]) => {\n\t\t\treturn this.cachingEntityClient.loadMultiple(CalendarEventTypeRef, listId, Array.from(elementIds)).catch((error) => {\n\t\t\t\t// handle NotAuthorized here because user could have been removed from group.\n\t\t\t\tif (error instanceof NotAuthorizedError) {\n\t\t\t\t\tconsole.warn(\"NotAuthorized when downloading alarm events\", error)\n\t\t\t\t\treturn []\n\t\t\t\t}\n\n\t\t\t\tthrow error\n\t\t\t})\n\t\t})\n\t\treturn calendarEvents.flat().map((event) => {\n\t\t\treturn {\n\t\t\t\tevent,\n\t\t\t\tuserAlarmInfos: getFromMap(eventIdToAlarmInfos, getLetId(event).join(\"\"), () => []),\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Queries the events using the uid index. The index is stored per calendar, so we have to go through all calendars\n\t * to find the matching events. We currently only need this for calendar event updates and for that we don't want to\n\t * look into shared calendars.\n\t *\n\t * @returns {CalendarEventUidIndexEntry}\n\t */\n\tasync getEventsByUid(uid: string, cacheMode: CachingMode = CachingMode.Cached): Promise<CalendarEventUidIndexEntry | null> {\n\t\tconst { memberships } = this.userFacade.getLoggedInUser()\n\t\tconst entityClient = this.getEntityClient(cacheMode)\n\t\tfor (const membership of memberships) {\n\t\t\tif (membership.groupType !== GroupType.Calendar) continue\n\t\t\ttry {\n\t\t\t\tconst groupRoot = await this.cachingEntityClient.load(CalendarGroupRootTypeRef, membership.group)\n\t\t\t\tif (groupRoot.index == null) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tconst indexEntry: CalendarEventUidIndex = await entityClient.load<CalendarEventUidIndex>(CalendarEventUidIndexTypeRef, [\n\t\t\t\t\tgroupRoot.index.list,\n\t\t\t\t\tuint8arrayToCustomId(hashUid(uid)),\n\t\t\t\t])\n\n\t\t\t\tconst progenitor: CalendarEventProgenitor | null = await loadProgenitorFromIndexEntry(entityClient, indexEntry)\n\t\t\t\tconst alteredInstances: Array<CalendarEventAlteredInstance> = await loadAlteredInstancesFromIndexEntry(entityClient, indexEntry)\n\t\t\t\treturn { progenitor, alteredInstances, ownerGroup: assertNotNull(indexEntry._ownerGroup, \"ownergroup on index entry was null!\") }\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof NotFoundError || e instanceof NotAuthorizedError) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\n\t\treturn null\n\t}\n\n\tprivate async sendAlarmNotifications(alarmNotifications: Array<AlarmNotification>, pushIdentifierList: Array<PushIdentifier>): Promise<void> {\n\t\tconst notificationSessionKey = aes256RandomKey()\n\t\treturn this.encryptNotificationKeyForDevices(notificationSessionKey, alarmNotifications, pushIdentifierList).then(async () => {\n\t\t\tconst requestEntity = createAlarmServicePost({\n\t\t\t\talarmNotifications,\n\t\t\t})\n\t\t\ttry {\n\t\t\t\tawait this.serviceExecutor.post(AlarmService, requestEntity, { sessionKey: notificationSessionKey })\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof PayloadTooLargeError) {\n\t\t\t\t\treturn this.infoMessageHandler.onInfoMessage({\n\t\t\t\t\t\ttranslationKey: \"calendarAlarmsTooBigError_msg\",\n\t\t\t\t\t\targs: {},\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate async encryptNotificationKeyForDevices(\n\t\tnotificationSessionKey: AesKey,\n\t\talarmNotifications: Array<AlarmNotification>,\n\t\tpushIdentifierList: Array<PushIdentifier>,\n\t): Promise<void> {\n\t\t// PushID SK ->* Notification SK -> alarm fields\n\t\tconst maybeEncSessionKeys = await promiseMap(pushIdentifierList, async (identifier) => {\n\t\t\tconst pushIdentifierSk = await this.cryptoFacade.resolveSessionKeyForInstance(identifier)\n\t\t\tif (pushIdentifierSk) {\n\t\t\t\tconst pushIdentifierSessionEncSessionKey = encryptKey(pushIdentifierSk, notificationSessionKey)\n\t\t\t\treturn {\n\t\t\t\t\tidentifierId: identifier._id,\n\t\t\t\t\tpushIdentifierSessionEncSessionKey,\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t}) // rate limiting against blocking while resolving session keys (neccessary)\n\t\tconst encSessionKeys = maybeEncSessionKeys.filter(isNotNull)\n\n\t\tfor (let notification of alarmNotifications) {\n\t\t\tnotification.notificationSessionKeys = encSessionKeys.map((esk) => {\n\t\t\t\treturn createNotificationSessionKey({\n\t\t\t\t\tpushIdentifier: esk.identifierId,\n\t\t\t\t\tpushIdentifierSessionEncSessionKey: esk.pushIdentifierSessionEncSessionKey,\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}\n\n\tprivate async saveMultipleAlarms(\n\t\tuser: User,\n\t\teventsWrapper: Array<{\n\t\t\tevent: CalendarEvent\n\t\t\talarms: ReadonlyArray<AlarmInfoTemplate>\n\t\t}>,\n\t): Promise<Array<AlarmNotificationsPerEvent>> {\n\t\tconst userAlarmInfosAndNotificationsPerEvent: Array<{\n\t\t\tevent: CalendarEvent\n\t\t\tuserAlarmInfoAndNotification: Array<{\n\t\t\t\talarm: UserAlarmInfo\n\t\t\t\talarmNotification: AlarmNotification\n\t\t\t}>\n\t\t}> = []\n\t\tconst userAlarmInfoListId = neverNull(user.alarmInfoList).alarms\n\t\tconst ownerGroup = user.userGroup.group\n\n\t\tfor (const { event, alarms } of eventsWrapper) {\n\t\t\tconst userAlarmInfoAndNotification: Array<{\n\t\t\t\talarm: UserAlarmInfo\n\t\t\t\talarmNotification: AlarmNotification\n\t\t\t}> = []\n\t\t\tconst calendarRef = createCalendarEventRef({\n\t\t\t\tlistId: listIdPart(event._id),\n\t\t\t\telementId: elementIdPart(event._id),\n\t\t\t})\n\n\t\t\tfor (const alarmInfo of alarms) {\n\t\t\t\tconst userAlarmInfo = createUserAlarmInfo({\n\t\t\t\t\t_ownerGroup: ownerGroup,\n\t\t\t\t\talarmInfo: createAlarmInfo({\n\t\t\t\t\t\talarmIdentifier: alarmInfo.alarmIdentifier,\n\t\t\t\t\t\ttrigger: alarmInfo.trigger,\n\t\t\t\t\t\tcalendarRef: calendarRef,\n\t\t\t\t\t}),\n\t\t\t\t})\n\n\t\t\t\tconst alarmNotification = createAlarmNotificationForEvent(event, userAlarmInfo.alarmInfo, user._id)\n\t\t\t\tuserAlarmInfoAndNotification.push({\n\t\t\t\t\talarm: userAlarmInfo,\n\t\t\t\t\talarmNotification,\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tuserAlarmInfosAndNotificationsPerEvent.push({\n\t\t\t\tevent,\n\t\t\t\tuserAlarmInfoAndNotification,\n\t\t\t})\n\t\t}\n\n\t\tconst allAlarms = userAlarmInfosAndNotificationsPerEvent.flatMap(({ userAlarmInfoAndNotification }) =>\n\t\t\tuserAlarmInfoAndNotification.map(({ alarm }) => alarm),\n\t\t)\n\n\t\tconst alarmIds: Array<Id> = await this.cachingEntityClient.setupMultipleEntities(userAlarmInfoListId, allAlarms)\n\t\tlet currentIndex = 0\n\t\treturn userAlarmInfosAndNotificationsPerEvent.map(({ event, userAlarmInfoAndNotification }) => {\n\t\t\treturn {\n\t\t\t\tevent,\n\t\t\t\talarmInfoIds: userAlarmInfoAndNotification.map(() => [userAlarmInfoListId, alarmIds[currentIndex++]]),\n\t\t\t\talarmNotifications: userAlarmInfoAndNotification.map(({ alarmNotification }) => alarmNotification),\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate getEntityClient(cacheMode: CachingMode): EntityClient {\n\t\tif (cacheMode === CachingMode.Cached) {\n\t\t\treturn this.cachingEntityClient\n\t\t} else {\n\t\t\treturn this.noncachingEntityClient\n\t\t}\n\t}\n}\n\nexport type EventWithUserAlarmInfos = {\n\tevent: CalendarEvent\n\tuserAlarmInfos: Array<UserAlarmInfo>\n}\n\nfunction createAlarmNotificationForEvent(event: CalendarEvent, alarmInfo: AlarmInfo, userId: Id): AlarmNotification {\n\treturn createAlarmNotification({\n\t\talarmInfo: createAlarmInfoForAlarmInfo(alarmInfo),\n\t\trepeatRule: event.repeatRule && createRepeatRuleForCalendarRepeatRule(event.repeatRule),\n\t\tnotificationSessionKeys: [],\n\t\toperation: OperationType.CREATE,\n\t\tsummary: event.summary,\n\t\teventStart: event.startTime,\n\t\teventEnd: event.endTime,\n\t\tuser: userId,\n\t})\n}\n\nfunction createAlarmInfoForAlarmInfo(alarmInfo: AlarmInfo): AlarmInfo {\n\tconst calendarRef = createCalendarEventRef({\n\t\telementId: alarmInfo.calendarRef.elementId,\n\t\tlistId: alarmInfo.calendarRef.listId,\n\t})\n\treturn createAlarmInfo({\n\t\talarmIdentifier: alarmInfo.alarmIdentifier,\n\t\ttrigger: alarmInfo.trigger,\n\t\tcalendarRef,\n\t})\n}\n\nfunction createRepeatRuleForCalendarRepeatRule(calendarRepeatRule: CalendarRepeatRule): RepeatRule {\n\treturn createRepeatRule({\n\t\tendType: calendarRepeatRule.endType,\n\t\tendValue: calendarRepeatRule.endValue,\n\t\tfrequency: calendarRepeatRule.frequency,\n\t\tinterval: calendarRepeatRule.interval,\n\t\ttimeZone: calendarRepeatRule.timeZone,\n\t\texcludedDates: calendarRepeatRule.excludedDates.map(({ date }) => createDateWrapper({ date })),\n\t\tadvancedRules: calendarRepeatRule.advancedRules,\n\t})\n}\n\nfunction getEventIdFromUserAlarmInfo(userAlarmInfo: UserAlarmInfo): IdTuple {\n\treturn [userAlarmInfo.alarmInfo.calendarRef.listId, userAlarmInfo.alarmInfo.calendarRef.elementId]\n}\n\n/** to make lookup on the encrypted event uid possible, we hash it and use that value as a key. */\nfunction hashUid(uid: string): Uint8Array {\n\treturn sha256Hash(stringToUtf8Uint8Array(uid))\n}\n\n/**\n * sort a list of events by recurrence id, sorting events without a recurrence id to the front.\n * @param arr the array of events to sort\n * exported for testing.\n */\nexport function sortByRecurrenceId(arr: Array<CalendarEventAlteredInstance>): void {\n\tarr.sort((a, b) => (a.recurrenceId.getTime() < b.recurrenceId.getTime() ? -1 : 1))\n}\n\nasync function loadAlteredInstancesFromIndexEntry(entityClient: EntityClient, indexEntry: CalendarEventUidIndex): Promise<Array<CalendarEventAlteredInstance>> {\n\tif (indexEntry.alteredInstances.length === 0) return []\n\tconst indexedEventIds: Map<Id, Array<Id>> = groupByAndMap<IdTuple, Id, Id>(\n\t\tindexEntry.alteredInstances,\n\t\t(e: IdTuple) => listIdPart(e),\n\t\t(e: IdTuple) => elementIdPart(e),\n\t)\n\n\tconst isAlteredInstance = (e: CalendarEventAlteredInstance): e is CalendarEventAlteredInstance => e.recurrenceId != null && e.uid != null\n\tconst indexedEvents = await loadMultipleFromLists(CalendarEventTypeRef, entityClient, indexEntry.alteredInstances)\n\tconst alteredInstances: Array<CalendarEventAlteredInstance> = indexedEvents.filter(isAlteredInstance)\n\tif (indexedEvents.length > alteredInstances.length) {\n\t\tconsole.warn(\"there were altered instances indexed that do not have a recurrence Id or uid!\")\n\t}\n\tsortByRecurrenceId(alteredInstances)\n\treturn alteredInstances\n}\n\nasync function loadProgenitorFromIndexEntry(entityClient: EntityClient, indexEntry: CalendarEventUidIndex): Promise<CalendarEventProgenitor | null> {\n\tif (indexEntry.progenitor == null) return null\n\tconst loadedProgenitor = await entityClient.load<CalendarEvent>(CalendarEventTypeRef, indexEntry.progenitor)\n\tif (loadedProgenitor.recurrenceId != null) {\n\t\tthrow new ProgrammingError(`loaded progenitor has a recurrence Id! ${loadedProgenitor.recurrenceId.toISOString()}`)\n\t}\n\tassertNotNull(loadedProgenitor.uid, \"loaded progenitor has no UID\")\n\treturn loadedProgenitor as CalendarEventProgenitor\n}\n\nexport const enum CachingMode {\n\tCached,\n\tBypass,\n}\n\nexport type AlarmInfoTemplate = Pick<AlarmInfo, \"alarmIdentifier\" | \"trigger\">\n"]}