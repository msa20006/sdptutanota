{"version":3,"file":"RowButton.js","sourceRoot":"","sources":["../../../../../../src/common/gui/base/buttons/RowButton.ts"],"names":[],"mappings":"AAAA,OAAO,CAAuB,MAAM,SAAS,CAAA;AAC7C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAC5C,OAAO,EAAY,IAAI,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAA;AAGrD,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAA;AACtC,OAAO,EAAE,IAAI,EAAoB,MAAM,oCAAoC,CAAA;AAe3E,yDAAyD;AACzD,MAAM,OAAO,SAAS;IACrB,IAAI,CAAC,KAA4B;QAChC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAA;QACzB,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAClD,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,CAAA;QAC/D,MAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,KAAK,CAAC,cAAc,CAAA;QACnF,OAAO,CAAC,CAAC,UAAU,EAAE;YACpB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,IAAI,EAAE,CAAC,CACN,2BAA2B,EAC3B;gBACC,KAAK,EAAE,EAAE,KAAK,EAAE;gBAChB,iEAAiE;gBACjE,UAAU,EAAE,KAAK,KAAK,IAAI,EAAE,qBAAqB;aACjD,EACD,IAAI,CACJ;YACD,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,IAAI,EACH,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM;gBAClC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;oBACR,IAAI,EAAE,KAAK,CAAC,IAAI;oBAChB,SAAS,EAAE,KAAK;oBAChB,KAAK,EAAE,WAAW;oBAClB,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;oBACtB,IAAI,EAAE,QAAQ,CAAC,MAAM;iBACpB,CAAC;gBACJ,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,MAAM;oBACvB,CAAC,CAAC,CAAC,CAAC,uBAAuB,CAAC;oBAC5B,CAAC,CAAC,IAAI;YACR,KAAK,EAAE,uDAAuD,GAAG,KAAK,CAAC,KAAK;YAC5E,KAAK,EAAE;gBACN,GAAG,KAAK,CAAC,KAAK;gBACd,KAAK;aACL;YACD,OAAO,EAAE,KAAK,CAAC,OAAO;SACtB,CAAC,CAAA;IACH,CAAC;CACD","sourcesContent":["import m, { Component, Vnode } from \"mithril\"\nimport { BaseButton } from \"./BaseButton.js\"\nimport { AllIcons, Icon, IconSize } from \"../Icon.js\"\nimport { ClickHandler } from \"../GuiUtils.js\"\nimport { AriaRole } from \"../../AriaUtils.js\"\nimport { theme } from \"../../theme.js\"\nimport { lang, MaybeTranslation } from \"../../../misc/LanguageViewModel.js\"\n\nexport interface RowButtonAttrs {\n\t/** accessibility & tooltip description */\n\tlabel: MaybeTranslation\n\t/** visible text inside button */\n\ttext?: MaybeTranslation\n\ticon?: AllIcons | \"none\"\n\tselected?: boolean\n\tonclick: ClickHandler\n\tstyle?: Record<string, any>\n\tclass?: string\n\trole?: AriaRole\n}\n\n/** A button that is styled the same as a `NavButton`. */\nexport class RowButton implements Component<RowButtonAttrs> {\n\tview(vnode: Vnode<RowButtonAttrs>) {\n\t\tconst attrs = vnode.attrs\n\t\tconst label = lang.getTranslationText(attrs.label)\n\t\tconst text = lang.getTranslationText(attrs.text ?? attrs.label)\n\t\tconst color = attrs.selected ? theme.content_button_selected : theme.content_button\n\t\treturn m(BaseButton, {\n\t\t\tlabel: attrs.label,\n\t\t\ttext: m(\n\t\t\t\t\".plr-button.text-ellipsis\",\n\t\t\t\t{\n\t\t\t\t\tstyle: { color },\n\t\t\t\t\t// When the label doesn't match content, screen readers read both\n\t\t\t\t\tariaHidden: label !== text, // this prevents that\n\t\t\t\t},\n\t\t\t\ttext,\n\t\t\t),\n\t\t\trole: attrs.role,\n\t\t\tselected: attrs.selected,\n\t\t\ticon:\n\t\t\t\tattrs.icon && attrs.icon !== \"none\"\n\t\t\t\t\t? m(Icon, {\n\t\t\t\t\t\t\ticon: attrs.icon,\n\t\t\t\t\t\t\tcontainer: \"div\",\n\t\t\t\t\t\t\tclass: \"mr-button\",\n\t\t\t\t\t\t\tstyle: { fill: color },\n\t\t\t\t\t\t\tsize: IconSize.Medium,\n\t\t\t\t\t  })\n\t\t\t\t\t: attrs.icon === \"none\"\n\t\t\t\t\t? m(\".icon-large.mr-button\")\n\t\t\t\t\t: null,\n\t\t\tclass: \"flex items-center state-bg button-content plr-button \" + attrs.class,\n\t\t\tstyle: {\n\t\t\t\t...attrs.style,\n\t\t\t\tcolor,\n\t\t\t},\n\t\t\tonclick: attrs.onclick,\n\t\t})\n\t}\n}\n"]}