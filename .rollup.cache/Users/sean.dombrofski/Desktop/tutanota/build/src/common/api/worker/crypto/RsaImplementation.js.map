{"version":3,"file":"RsaImplementation.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/crypto/RsaImplementation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAA;AAExC,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAA;AACvE,OAAO,EAAE,gCAAgC,EAAE,MAAM,sEAAsE,CAAA;AAEvH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,MAAuB;IACpE,IAAI,KAAK,EAAE,EAAE,CAAC;QACb,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,+BAA+B,CAAC,CAAA;QAChE,OAAO,IAAI,MAAM,CAAC,IAAI,gCAAgC,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAA;IACxE,CAAC;SAAM,CAAC;QACP,OAAO,IAAI,MAAM,EAAE,CAAA;IACpB,CAAC;AACF,CAAC;AAQD,MAAM,OAAO,MAAM;IAClB,KAAK,CAAC,OAAO,CAAC,SAAuB,EAAE,KAAiB;QACvD,MAAM,IAAI,GAAG,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAA;QAC1C,OAAO,UAAU,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;IAC1C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,UAAyB,EAAE,KAAiB;QACzD,OAAO,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAA;IACrC,CAAC;CACD","sourcesContent":["import type { NativeInterface } from \"../../../native/common/NativeInterface\"\nimport { isApp } from \"../../common/Env\"\nimport type { RsaPrivateKey, RsaPublicKey } from \"@tutao/tutanota-crypto\"\nimport { random, rsaDecrypt, rsaEncrypt } from \"@tutao/tutanota-crypto\"\nimport { NativeCryptoFacadeSendDispatcher } from \"../../../native/common/generatedipc/NativeCryptoFacadeSendDispatcher\"\n\nexport async function createRsaImplementation(native: NativeInterface): Promise<RsaImplementation> {\n\tif (isApp()) {\n\t\tconst { RsaApp } = await import(\"../../../native/worker/RsaApp\")\n\t\treturn new RsaApp(new NativeCryptoFacadeSendDispatcher(native), random)\n\t} else {\n\t\treturn new RsaWeb()\n\t}\n}\n\nexport interface RsaImplementation {\n\tencrypt(publicKey: RsaPublicKey, bytes: Uint8Array): Promise<Uint8Array>\n\n\tdecrypt(privateKey: RsaPrivateKey, bytes: Uint8Array): Promise<Uint8Array>\n}\n\nexport class RsaWeb implements RsaImplementation {\n\tasync encrypt(publicKey: RsaPublicKey, bytes: Uint8Array): Promise<Uint8Array> {\n\t\tconst seed = random.generateRandomData(32)\n\t\treturn rsaEncrypt(publicKey, bytes, seed)\n\t}\n\n\tasync decrypt(privateKey: RsaPrivateKey, bytes: Uint8Array): Promise<Uint8Array> {\n\t\treturn rsaDecrypt(privateKey, bytes)\n\t}\n}\n"]}