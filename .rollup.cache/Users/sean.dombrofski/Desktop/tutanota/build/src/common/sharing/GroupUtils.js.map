{"version":3,"file":"GroupUtils.js","sourceRoot":"","sources":["../../../../src/common/sharing/GroupUtils.ts"],"names":[],"mappings":"AAAA,OAAO,EAGN,gBAAgB,EAGhB,kBAAkB,EAElB,8BAA8B,EAE9B,oBAAoB,GACpB,MAAM,iCAAiC,CAAA;AACxC,OAAO,EAAE,SAAS,EAAE,mBAAmB,EAAmB,MAAM,iCAAiC,CAAA;AACjG,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,iCAAiC,CAAA;AACnE,OAAO,EAAE,IAAI,EAAE,MAAM,2BAA2B,CAAA;AAChD,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAA;AAErE,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAA;AAI7D;;;;;;GAMG;AACH,MAAM,UAAU,oBAAoB,CAAC,IAAU,EAAE,KAAY,EAAE,kBAAmC;IACjG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;QACjD,OAAO,KAAK,CAAA;IACb,CAAC;IAED,IAAI,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QACzC,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAmB,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAA;IAEhG,IAAI,UAAU,EAAE,CAAC;QAChB,OAAO,UAAU,CAAC,UAAU,IAAI,IAAI,IAAI,MAAM,CAAC,kBAAkB,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAA;IACpG,CAAC;IAED,OAAO,KAAK,CAAA;AACb,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,WAAkB,EAAE,IAAe;IACrE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,IAAI,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AAC3G,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,UAA2B;IAC5D,QAAQ,UAAU,EAAE,CAAC;QACpB;YACC,OAAO,IAAI,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAA;QAE/C;YACC,OAAO,IAAI,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAA;QAE9C;YACC,OAAO,IAAI,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAA;QAE7C;YACC,OAAO,IAAI,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAA;IAC9C,CAAC;AACF,CAAC;AAOD,MAAM,UAAU,mBAAmB,CAAC,UAA2B,EAAE,KAAY;IAC5E,IAAI,kBAAkB,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;QACvD,wCAA6B;IAC9B,CAAC;IAED,OAAO,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;AAC9C,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,KAAY,EAAE,YAA0B;IACxE,OAAO,YAAY;SACjB,OAAO,CAAC,kBAAkB,EAAE,KAAK,CAAC,OAAO,CAAC;SAC1C,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,sBAAsB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAA;AACnG,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,WAAwB,EAAE,YAA0B;IAC1F,OAAO,YAAY,CAAC,IAAI,CAAC,gBAAgB,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE;QAC5F,OAAO;YACN,MAAM,EAAE,WAAW;YACnB,IAAI,EAAE,aAAa;SACnB,CAAA;IACF,CAAC,CAAC,CAAA;AACH,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,SAAoB;IACvD,QAAQ,SAAS,EAAE,CAAC;QACnB,KAAK,SAAS,CAAC,QAAQ;YACtB,OAAO,IAAI,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAA;QACzC,KAAK,SAAS,CAAC,QAAQ;YACtB,OAAO,IAAI,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAA;QAClD;YACC,OAAO,mBAAmB,CAAC,SAAS,CAAC,CAAA;IACvC,CAAC;AACF,CAAC;AAED,MAAM,UAAU,4BAA4B,CAC3C,cAA8B,EAC9B,YAA0B,EAC1B,IAAe;IAEf,OAAO,YAAY;SACjB,IAAI,CAAC,oBAAoB,EAAE,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC;SAC9D,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,8BAA8B,EAAE,aAAa,CAAC,WAAW,CAAC,CAAC;SACxG,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,sBAAsB,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,CAAC;SACtG,KAAK,CAAC,OAAO,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AAC1C,CAAC;AAED,2GAA2G;AAC3G,MAAM,kBAAkB,GAAG,SAAS,CAAC,QAAQ,CAAA;AAE7C,MAAM,UAAU,sBAAsB,CAAC,UAAmC;IACzE,OAAO,UAAU,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAE,UAAU,CAAC,SAAgC,CAAA;AACzG,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,SAAoB;IACnD,OAAO,SAAS,KAAK,SAAS,CAAC,QAAQ,CAAA;AACxC,CAAC;AAID,MAAM,UAAU,oBAAoB,CAAC,SAAoB;IACxD,oEAAoE;IACpE,OAAO,SAAS,KAAK,SAAS,CAAC,QAAQ,IAAI,SAAS,KAAK,SAAS,CAAC,QAAQ,IAAI,SAAS,KAAK,SAAS,CAAC,WAAW,CAAA;AACnH,CAAC;AAED,MAAM,CAAC,MAAM,qCAAqC,GAAG,MAAM,CAAC,MAAM,CAAC;IAClE,yBAAyB,EAAE,yCAAyC;IACpE,kBAAkB,EAAE,kCAAkC;CACtD,CAAC,CAAA;AAEF,MAAM,UAAU,kBAAkB,CAAC,SAAoB,EAAE,EAAE,qBAAqB,EAAkB,EAAE,sBAA+B;IAClI,OAAO,0BAA0B,CAAC,SAAS,EAAE,qBAAqB,EAAE,sBAAsB,CAAC,IAAI,mBAAmB,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAA;AAClJ,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,0BAA0B,CAAC,SAAoB,EAAE,qBAA4C,EAAE,sBAA+B;IAC7I,MAAM,aAAa,GAAG,qBAAqB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,CAAC,CAAA;IACpG,iJAAiJ;IACjJ,OAAO,CAAC,sBAAsB,IAAI,aAAa,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,IAAI,IAAI,IAAI,CAAA;AACjG,CAAC","sourcesContent":["import {\n\tGroup,\n\tGroupInfo,\n\tGroupInfoTypeRef,\n\tGroupMember,\n\tGroupMembership,\n\tGroupMemberTypeRef,\n\tReceivedGroupInvitation,\n\tReceivedGroupInvitationTypeRef,\n\tUser,\n\tUserGroupRootTypeRef,\n} from \"../api/entities/sys/TypeRefs.js\"\nimport { GroupType, GroupTypeNameByCode, ShareCapability } from \"../api/common/TutanotaConstants\"\nimport { getEtId, isSameId } from \"../api/common/utils/EntityUtils\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport { downcast, ofClass, promiseMap } from \"@tutao/tutanota-utils\"\nimport type { EntityClient } from \"../api/common/EntityClient\"\nimport { NotFoundError } from \"../api/common/error/RestError\"\nimport { UserController } from \"../api/main/UserController\"\nimport { UserSettingsGroupRoot } from \"../api/entities/tutanota/TypeRefs.js\"\n\n/**\n * Whether or not a user has a given capability for a shared group. If the group type is not shareable, this will always return false\n * @param user\n * @param group\n * @param requiredCapability\n * @returns {boolean}\n */\nexport function hasCapabilityOnGroup(user: User, group: Group, requiredCapability: ShareCapability): boolean {\n\tif (!isShareableGroupType(downcast(group.type))) {\n\t\treturn false\n\t}\n\n\tif (isSharedGroupOwner(group, user._id)) {\n\t\treturn true\n\t}\n\n\tconst membership = user.memberships.find((gm: GroupMembership) => isSameId(gm.group, group._id))\n\n\tif (membership) {\n\t\treturn membership.capability != null && Number(requiredCapability) <= Number(membership.capability)\n\t}\n\n\treturn false\n}\n\nexport function isSharedGroupOwner(sharedGroup: Group, user: Id | User): boolean {\n\treturn !!(sharedGroup.user && isSameId(sharedGroup.user, typeof user === \"string\" ? user : getEtId(user)))\n}\n\nexport function getCapabilityText(capability: ShareCapability): string {\n\tswitch (capability) {\n\t\tcase ShareCapability.Invite:\n\t\t\treturn lang.get(\"groupCapabilityInvite_label\")\n\n\t\tcase ShareCapability.Write:\n\t\t\treturn lang.get(\"groupCapabilityWrite_label\")\n\n\t\tcase ShareCapability.Read:\n\t\t\treturn lang.get(\"groupCapabilityRead_label\")\n\n\t\tdefault:\n\t\t\treturn lang.get(\"comboBoxSelectionNone_msg\")\n\t}\n}\n\nexport type GroupMemberInfo = {\n\tmember: GroupMember\n\tinfo: GroupInfo\n}\n\nexport function getMemberCapability(memberInfo: GroupMemberInfo, group: Group): ShareCapability {\n\tif (isSharedGroupOwner(group, memberInfo.member.user)) {\n\t\treturn ShareCapability.Invite\n\t}\n\n\treturn downcast(memberInfo.member.capability)\n}\n\nexport function loadGroupMembers(group: Group, entityClient: EntityClient): Promise<Array<GroupMemberInfo>> {\n\treturn entityClient\n\t\t.loadAll(GroupMemberTypeRef, group.members)\n\t\t.then((members) => promiseMap(members, (member) => loadGroupInfoForMember(member, entityClient)))\n}\n\nexport function loadGroupInfoForMember(groupMember: GroupMember, entityClient: EntityClient): Promise<GroupMemberInfo> {\n\treturn entityClient.load(GroupInfoTypeRef, groupMember.userGroupInfo).then((userGroupInfo) => {\n\t\treturn {\n\t\t\tmember: groupMember,\n\t\t\tinfo: userGroupInfo,\n\t\t}\n\t})\n}\n\nexport function getDefaultGroupName(groupType: GroupType): string {\n\tswitch (groupType) {\n\t\tcase GroupType.Calendar:\n\t\t\treturn lang.get(\"privateCalendar_label\")\n\t\tcase GroupType.Template:\n\t\t\treturn lang.get(\"templateGroupDefaultName_label\")\n\t\tdefault:\n\t\t\treturn GroupTypeNameByCode[groupType]\n\t}\n}\n\nexport function loadReceivedGroupInvitations(\n\tuserController: UserController,\n\tentityClient: EntityClient,\n\ttype: GroupType,\n): Promise<Array<ReceivedGroupInvitation>> {\n\treturn entityClient\n\t\t.load(UserGroupRootTypeRef, userController.userGroupInfo.group)\n\t\t.then((userGroupRoot) => entityClient.loadAll(ReceivedGroupInvitationTypeRef, userGroupRoot.invitations))\n\t\t.then((invitations) => invitations.filter((invitation) => getInvitationGroupType(invitation) === type))\n\t\t.catch(ofClass(NotFoundError, () => []))\n}\n\n// Group invitations without a type set were sent when Calendars were the only shareable kind of user group\nconst DEFAULT_GROUP_TYPE = GroupType.Calendar\n\nexport function getInvitationGroupType(invitation: ReceivedGroupInvitation): ShareableGroupType {\n\treturn invitation.groupType === null ? DEFAULT_GROUP_TYPE : (invitation.groupType as ShareableGroupType)\n}\n\nexport function isTemplateGroup(groupType: GroupType): boolean {\n\treturn groupType === GroupType.Template\n}\n\nexport type ShareableGroupType = GroupType.Calendar | GroupType.Template | GroupType.ContactList\n\nexport function isShareableGroupType(groupType: GroupType): groupType is ShareableGroupType {\n\t// Should be synchronised with GroupType::isShareableGroup in tutadb\n\treturn groupType === GroupType.Calendar || groupType === GroupType.Template || groupType === GroupType.ContactList\n}\n\nexport const TemplateGroupPreconditionFailedReason = Object.freeze({\n\tBUSINESS_FEATURE_REQUIRED: \"templategroup.business_feature_required\",\n\tUNLIMITED_REQUIRED: \"templategroup.unlimited_required\",\n})\n\nexport function getSharedGroupName(groupInfo: GroupInfo, { userSettingsGroupRoot }: UserController, allowGroupNameOverride: boolean): string {\n\treturn getNullableSharedGroupName(groupInfo, userSettingsGroupRoot, allowGroupNameOverride) ?? getDefaultGroupName(downcast(groupInfo.groupType))\n}\n\n/**\n * Get shared group name or default to null.\n * Needed in order to make translations of default template group names work in SettingsView\n */\nexport function getNullableSharedGroupName(groupInfo: GroupInfo, userSettingsGroupRoot: UserSettingsGroupRoot, allowGroupNameOverride: boolean): string | null {\n\tconst groupSettings = userSettingsGroupRoot.groupSettings.find((gc) => gc.group === groupInfo.group)\n\t// return (allowGroupNameOverride && groupSettings && groupSettings.name) || groupInfo.name || getDefaultGroupName(downcast(groupInfo.groupType))\n\treturn (allowGroupNameOverride && groupSettings && groupSettings.name) || groupInfo.name || null\n}\n"]}