{"version":3,"file":"ProgressDialog.js","sourceRoot":"","sources":["../../../../../src/common/gui/dialogs/ProgressDialog.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,SAAS,CAAA;AACvB,OAAO,EAAE,gBAAgB,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AACtE,OAAO,EAAE,MAAM,EAAc,MAAM,gBAAgB,CAAA;AACnD,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAA;AAE9D,OAAO,EAAE,IAAI,EAAE,MAAM,8BAA8B,CAAA;AACnD,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAA;AAC3C,OAAO,EAAE,qBAAqB,EAAE,MAAM,6BAA6B,CAAA;AAGnE,OAAO,EAAE,KAAK,EAAa,gBAAgB,EAAE,MAAM,uBAAuB,CAAA;AAC1E,OAAO,EAAE,eAAe,EAAwB,MAAM,4BAA4B,CAAA;AAElF,gBAAgB,EAAE,CAAA;AAElB,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACvC,0BAAuD,EACvD,MAAkB,EAClB,cAA+B,EAC/B,YAAsB,EACtB,cAAqC;IAErC,IAAI,cAAc,IAAI,IAAI,EAAE,CAAC;QAC5B,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE;YACvB,CAAC,CAAC,MAAM,EAAE,CAAA;QACX,CAAC,CAAC,CAAA;IACH,CAAC;IAED,MAAM,cAAc,GAAG,IAAI,MAAM,uCAAsB;QACtD,IAAI,EAAE,GAAG,EAAE;YACV,IAAI,KAAK,GAAG,gBAAgB,CAAC,0BAA0B,CAAC,CAAA;YACxD,OAAO,CAAC,CAAC,EAAE,EAAE;gBACZ,YAAY,IAAI,cAAc;oBAC7B,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE;wBACnB,GAAG,cAAc;wBACjB,KAAK,EAAE,gDAAgD;qBACtD,CAAC;oBACJ,CAAC,CAAC,IAAI;gBACP,CAAC,CACA,eAAe,EACf;oBACC,gFAAgF;oBAChF,QAAQ,4BAAkB;oBAE1B,QAAQ,CAAC,KAAK;wBACb,kEAAkE;wBAClE,UAAU,CAAC,GAAG,EAAE;4BACf,CAAC;4BAAC,KAAK,CAAC,GAAmB,CAAC,KAAK,EAAE,CAAA;wBACpC,CAAC,EAAE,EAAE,CAAC,CAAA;oBACP,CAAC;iBACD,EACD;oBACC,CAAC,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,qBAAqB,EAAE,EAAE,mBAAmB,EAAE,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;oBACxH,CAAC,CAAC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;iBACnD,CACD;aACD,CAAC,CAAA;QACH,CAAC;KACD,CAAC,CAAC,eAAe,CAAC,GAAG,EAAE;QACvB,yCAAyC;IAC1C,CAAC,CAAC,CAAA;IACF,cAAc,CAAC,IAAI,EAAE,CAAA;IACrB,IAAI,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAA;IAChC,IAAI,yBAAyB,GAAG,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;IAC1D,IAAI,CAAC;QACJ,OAAO,MAAM,MAAM,CAAA;IACpB,CAAC;YAAS,CAAC;QACV,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAA;QAC/B,MAAM,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,yBAAyB,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;QAC1D,cAAc,CAAC,KAAK,EAAE,CAAA;QACtB,MAAM,KAAK,CAAC,oBAAoB,CAAC,CAAA;IAClC,CAAC;AACF,CAAC","sourcesContent":["import m from \"mithril\"\nimport { assertMainOrNode, isAdminClient } from \"../../api/common/Env\"\nimport { Dialog, DialogType } from \"../base/Dialog\"\nimport { DefaultAnimationTime } from \"../animation/Animations\"\nimport type { MaybeTranslation } from \"../../misc/LanguageViewModel\"\nimport { lang } from \"../../misc/LanguageViewModel\"\nimport { progressIcon } from \"../base/Icon\"\nimport { CompletenessIndicator } from \"../CompletenessIndicator.js\"\nimport Stream from \"mithril/stream\"\nimport { TabIndex } from \"../../api/common/TutanotaConstants\"\nimport { delay, MaybeLazy, resolveMaybeLazy } from \"@tutao/tutanota-utils\"\nimport { DialogHeaderBar, DialogHeaderBarAttrs } from \"../base/DialogHeaderBar.js\"\n\nassertMainOrNode()\n\nexport async function showProgressDialog<T>(\n\tmessageIdOrMessageFunction: MaybeLazy<MaybeTranslation>,\n\taction: Promise<T>,\n\tprogressStream?: Stream<number>,\n\tisCancelable?: boolean,\n\theaderBarAttrs?: DialogHeaderBarAttrs,\n): Promise<T> {\n\tif (progressStream != null) {\n\t\tprogressStream.map(() => {\n\t\t\tm.redraw()\n\t\t})\n\t}\n\n\tconst progressDialog = new Dialog(DialogType.Progress, {\n\t\tview: () => {\n\t\t\tlet title = resolveMaybeLazy(messageIdOrMessageFunction)\n\t\t\treturn m(\"\", [\n\t\t\t\tisCancelable && headerBarAttrs\n\t\t\t\t\t? m(DialogHeaderBar, {\n\t\t\t\t\t\t\t...headerBarAttrs,\n\t\t\t\t\t\t\tclass: \"mb-l mt-negative-l mr-negative-l ml-negative-l\",\n\t\t\t\t\t  })\n\t\t\t\t\t: null,\n\t\t\t\tm(\n\t\t\t\t\t\".hide-outline\",\n\t\t\t\t\t{\n\t\t\t\t\t\t// We make this element focusable so that the screen reader announces the dialog\n\t\t\t\t\t\ttabindex: TabIndex.Default,\n\n\t\t\t\t\t\toncreate(vnode) {\n\t\t\t\t\t\t\t// We need to delay so that the eelement is attached to the parent\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t;(vnode.dom as HTMLElement).focus()\n\t\t\t\t\t\t\t}, 10)\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t[\n\t\t\t\t\t\tm(\".flex-center\", progressStream ? m(CompletenessIndicator, { percentageCompleted: progressStream() }) : progressIcon()),\n\t\t\t\t\t\tm(\"p#dialog-title\", lang.getTranslationText(title)),\n\t\t\t\t\t],\n\t\t\t\t),\n\t\t\t])\n\t\t},\n\t}).setCloseHandler(() => {\n\t\t// do not close progress on onClose event\n\t})\n\tprogressDialog.show()\n\tlet start = new Date().getTime()\n\tlet minDialogVisibilityMillis = isAdminClient() ? 0 : 1000\n\ttry {\n\t\treturn await action\n\t} finally {\n\t\tconst diff = Date.now() - start\n\t\tawait delay(Math.max(minDialogVisibilityMillis - diff, 0))\n\t\tprogressDialog.close()\n\t\tawait delay(DefaultAnimationTime)\n\t}\n}\n"]}