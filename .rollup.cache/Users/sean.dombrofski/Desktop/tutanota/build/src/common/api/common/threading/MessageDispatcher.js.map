{"version":3,"file":"MessageDispatcher.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/threading/MessageDispatcher.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * <ul>\n *   <li>The client sends {WorkerRequest}s to the worker and the worker answers with either an {WorkerResponse} or a {WorkerError}.\n *   <li>The worker sends {ClientCommands}s to the client. The commands are executed by the client (without any response to the worker).\n * </ul>\n */\nimport { isWorker } from \"../Env.js\"\nimport { Transport } from \"./Transport.js\"\nimport { objToError } from \"../utils/ErrorUtils.js\"\n\nexport type Command<T> = (msg: Request<T>) => Promise<any>\nexport type Commands<T extends string> = Record<T, Command<T>>\nexport type Message<Type> = Request<Type> | Response<Type> | RequestError<Type>\n\nexport class Request<T> {\n\treadonly type: \"request\"\n\treadonly requestType: T\n\t/** should be selected and assigned by the message dispatcher or on deserialization only. */\n\tid: string | null = null\n\n\treadonly args: any[]\n\n\tconstructor(type: T, args: ReadonlyArray<unknown>) {\n\t\tthis.type = \"request\"\n\t\tthis.requestType = type\n\t\tthis.id = null\n\t\tthis.args = args.slice()\n\t}\n}\n\nexport class Response<T> {\n\treadonly type: \"response\"\n\treadonly id: string\n\treadonly value: any\n\n\tconstructor(id: string, value: any) {\n\t\tthis.type = \"response\"\n\t\tthis.id = id\n\t\tthis.value = value\n\t}\n}\n\nexport class RequestError<T> {\n\treadonly type: \"requestError\"\n\treadonly id: string\n\treadonly error: Record<string, any>\n\n\tconstructor(id: string, error: Error) {\n\t\tthis.type = \"requestError\"\n\t\tthis.id = id\n\t\tthis.error = errorToObj(error) // the structured clone algorithm is not able to clone errors\n\t}\n}\n\ntype MessageCallbacks = {\n\tresolve: (value: any) => void\n\treject: (error: Error) => void\n}\n\n/**\n * Handles remote invocations (e.g. worker or native calls).\n */\nexport class MessageDispatcher<OutgoingRequestType extends string, IncomingRequestType extends string> {\n\t/**\n\t * Map from request id that have been sent to the callback that will be\n\t * executed on the results sent by the worker.\n\t */\n\tprivate readonly _messages: Record<string, MessageCallbacks>\n\tprivate readonly nextId: () => string\n\n\tconstructor(\n\t\tprivate readonly transport: Transport<OutgoingRequestType, IncomingRequestType>,\n\t\tprivate readonly commands: Commands<IncomingRequestType>,\n\t\tprivate idPrefix: string,\n\t) {\n\t\tthis._messages = {}\n\t\tthis.nextId = makeRequestIdGenerator(idPrefix)\n\t\tthis.transport.setMessageHandler((msg) => this.handleMessage(msg))\n\t}\n\n\tpostRequest(msg: Request<OutgoingRequestType>): Promise<any> {\n\t\tmsg.id = this.nextId()\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._messages[msg.id!] = {\n\t\t\t\tresolve,\n\t\t\t\treject,\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis.transport.postMessage(msg)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"error payload:\", msg)\n\t\t\t\tthrow e\n\t\t\t}\n\t\t})\n\t}\n\n\thandleMessage(message: Message<IncomingRequestType>) {\n\t\tif (message.type === \"response\") {\n\t\t\tconst pendingRequest = this._messages[message.id]\n\t\t\tif (pendingRequest != null) {\n\t\t\t\tpendingRequest.resolve(message.value)\n\t\t\t\tdelete this._messages[message.id]\n\t\t\t} else {\n\t\t\t\tconsole.warn(`Unexpected response: ${message.id} (was the page reloaded?)`)\n\t\t\t}\n\t\t} else if (message.type === \"requestError\") {\n\t\t\tconst pendingRequest = this._messages[message.id]\n\t\t\tif (pendingRequest != null) {\n\t\t\t\tpendingRequest.reject(objToError(message.error))\n\t\t\t\tdelete this._messages[message.id]\n\t\t\t} else {\n\t\t\t\tconsole.warn(`Unexpected error response: ${message.id} (was the page reloaded?)`)\n\t\t\t}\n\t\t} else if (message.type === \"request\") {\n\t\t\tconst command = this.commands[message.requestType]\n\n\t\t\tif (command != null) {\n\t\t\t\tconst commandResult = command(message)\n\n\t\t\t\t// Every method exposed via worker protocol must return a promise. Failure to do so is a violation of contract so we\n\t\t\t\t// try to catch it early and throw an error.\n\t\t\t\tif (commandResult == null || typeof commandResult.then !== \"function\") {\n\t\t\t\t\tthrow new Error(`Handler returned non-promise result: ${message.requestType}`)\n\t\t\t\t}\n\n\t\t\t\tcommandResult.then(\n\t\t\t\t\t(value) => {\n\t\t\t\t\t\tthis.transport.postMessage(new Response(message.id!, value))\n\t\t\t\t\t},\n\t\t\t\t\t(error) => {\n\t\t\t\t\t\tthis.transport.postMessage(new RequestError(message.id!, error))\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tlet error = new Error(`unexpected request: ${message.id}, ${message.requestType}`)\n\n\t\t\t\tif (isWorker()) {\n\t\t\t\t\tthis.transport.postMessage(new RequestError(message.id!, error))\n\t\t\t\t} else {\n\t\t\t\t\tthrow error\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(`Unexpected request type: ${JSON.stringify(message)}`)\n\t\t}\n\t}\n}\n\nexport function makeRequestIdGenerator(prefix: string): () => string {\n\tlet requestId = 0\n\treturn () => {\n\t\tif (requestId >= Number.MAX_SAFE_INTEGER) {\n\t\t\trequestId = 0\n\t\t}\n\t\treturn prefix + requestId++\n\t}\n}\n\n// Serialize error stack traces, when they are sent via the websocket.\nexport function errorToObj(error: Error): {\n\tdata: any\n\tmessage: any\n\tname: any\n\tstack: any\n} {\n\tconst errorErased = error as any\n\treturn {\n\t\tname: errorErased.name,\n\t\tmessage: errorErased.message,\n\t\tstack: errorErased.stack,\n\t\tdata: errorErased.data,\n\t}\n}\n"]}