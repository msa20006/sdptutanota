{"version":3,"file":"UpdaterWrapper.js","sourceRoot":"","sources":["../../../../src/common/desktop/UpdaterWrapper.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAA;AACtD,OAAO,IAAI,MAAM,WAAW,CAAA;AAC5B,OAAO,EAAE,MAAM,SAAS,CAAA;AACxB,OAAO,EAAE,GAAG,EAAE,MAAM,UAAU,CAAA;AAC9B,OAAO,eAA+B,MAAM,kBAAkB,CAAA;AAE9D,MAAM,EAAE,WAAW,EAAE,GAAG,eAAe,CAAA;AAEvC,MAAM,OAAO,cAAc;IAC1B,qBAAqB;QACpB,IAAI,CAAC;YACJ,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;YACrI,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAAA;YAC3E,EAAE,CAAC,UAAU,CAAC,gBAAgB,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;YAClD,OAAO,IAAI,CAAA;QACZ,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,OAAO,KAAK,CAAA;QACb,CAAC;IACF,CAAC;IAED,eAAe,GAAe,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAa,eAAe,CAAC,CAAA;CAC5F;AAED,MAAM,eAAe,GAAG,IAAI,CAAC;IAC5B,EAAE;QACD,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,IAAI;QACH,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,cAAc;QACb,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;IAC3B,CAAC;IAED,cAAc,KAAI,CAAC;IAEnB,eAAe;QACd,6CAA6C;QAC7C,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAA;IACzB,CAAC;CACD,CAAC,EAAE,CAAA","sourcesContent":["/**\n * This is a little wrapper around electron-updater to decouple logic.\n */\nimport { downcast, noOp } from \"@tutao/tutanota-utils\"\nimport path from \"node:path\"\nimport fs from \"node:fs\"\nimport { app } from \"electron\"\nimport electronUpdater, { AppUpdater } from \"electron-updater\"\n\nconst { autoUpdater } = electronUpdater\n\nexport class UpdaterWrapper {\n\tupdatesEnabledInBuild(): boolean {\n\t\ttry {\n\t\t\tconst basepath = process.platform === \"darwin\" ? path.join(path.dirname(app.getPath(\"exe\")), \"..\") : path.dirname(app.getPath(\"exe\"))\n\t\t\tconst appUpdateYmlPath = path.join(basepath, \"resources\", \"app-update.yml\")\n\t\t\tfs.accessSync(appUpdateYmlPath, fs.constants.R_OK)\n\t\t\treturn true\n\t\t} catch (e) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\telectronUpdater: AppUpdater = env.dist ? autoUpdater : downcast<AppUpdater>(fakeAutoUpdater)\n}\n\nconst fakeAutoUpdater = new (class {\n\ton(): this {\n\t\treturn this\n\t}\n\n\tonce(): this {\n\t\treturn this\n\t}\n\n\tremoveListener(): this {\n\t\treturn this\n\t}\n\n\tdownloadUpdate() {\n\t\treturn Promise.resolve([])\n\t}\n\n\tquitAndInstall() {}\n\n\tcheckForUpdates() {\n\t\t// Never resolved, return type is too complex\n\t\treturn new Promise(noOp)\n\t}\n})()\n"]}