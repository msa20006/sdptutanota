{"version":3,"file":"DeviceConfig.js","sourceRoot":"","sources":["../../../../src/common/misc/DeviceConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import { Base64, base64ToUint8Array, typedEntries, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport type { LanguageCode } from \"./LanguageViewModel\"\nimport type { ThemePreference } from \"../gui/theme\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError\"\nimport type { CredentialEncryptionMode } from \"./credentials/CredentialEncryptionMode.js\"\nimport { assertMainOrNodeBoot, isApp } from \"../api/common/Env\"\nimport { PersistedAssignmentData, UsageTestStorage } from \"./UsageTestModel\"\nimport { client } from \"./ClientDetector\"\nimport { NewsItemStorage } from \"./news/NewsModel.js\"\nimport { CredentialsInfo } from \"../native/common/generatedipc/CredentialsInfo.js\"\nimport { CalendarViewType } from \"../api/common/utils/CommonCalendarUtils.js\"\nimport { SyncStatus } from \"../calendar/import/ImportExportUtils.js\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport type { GroupSettings } from \"../api/entities/tutanota/TypeRefs.js\"\n\nassertMainOrNodeBoot()\nexport const defaultThemePreference: ThemePreference = \"auto:light|dark\"\n\nexport enum ListAutoSelectBehavior {\n\tNONE,\n\tOLDER,\n\tNEWER,\n}\n\nexport type LastExternalCalendarSyncEntry = {\n\tlastSuccessfulSync: number | undefined | null\n\tlastSyncStatus: SyncStatus\n}\n\nexport type ClientOnlyCalendarsInfo = Pick<GroupSettings, \"name\" | \"color\">\n\n/**\n * Definition of the config object that will be saved to local storage\n */\ninterface ConfigObject {\n\t_version: number\n\t_credentials: Map<Id, DeviceConfigCredentials>\n\tscheduledAlarmModelVersionPerUser: Record<Id, number>\n\t_themeId: ThemePreference\n\t_language: LanguageCode | null\n\t_defaultCalendarView: Record<Id, CalendarViewType | null>\n\t/** map from user id to a list of calendar grouproots*/\n\t_hiddenCalendars: Record<Id, Id[]>\n\t/** map from user id to a list of expanded folders (elementId)*/\n\texpandedMailFolders: Record<Id, Id[]>\n\t_signupToken: string\n\t_credentialEncryptionMode: CredentialEncryptionMode | null\n\t_encryptedCredentialsKey: Base64 | null\n\t/** list of acknowledged news item ids for this device */\n\tacknowledgedNewsItems: Id[]\n\t_testDeviceId: string | null\n\t_testAssignments: PersistedAssignmentData | null\n\tofflineTimeRangeDaysByUser: Record<Id, number>\n\tconversationViewShowOnlySelectedMail: boolean\n\t/** Stores each users' definition about contact synchronization */\n\tsyncContactsWithPhonePreference: Record<Id, boolean>\n\t/** Whether mobile calendar navigation is in the \"per week\" or \"per month\" mode */\n\tisCalendarDaySelectorExpanded: boolean\n\t/** Stores user's desired behavior to the view when an email is removed from the list */\n\tmailAutoSelectBehavior: ListAutoSelectBehavior\n\t// True if the app has already been run after install\n\tisSetupComplete: boolean\n\t// True if the credentials have been migrated to native\n\tisCredentialsMigratedToNative: boolean\n\tlastExternalCalendarSync: Record<Id, LastExternalCalendarSyncEntry>\n\tclientOnlyCalendars: Map<Id, ClientOnlyCalendarsInfo>\n\n\t/**\n\t * A list of dates on which a user has sent an e-mail or created a calendar event. Each date is represented as the date's timestamp.\n\t */\n\tevents: Array<number>\n\n\t/**\n\t * The last date on which the user was prompted to rate the app as a timestamp.\n\t */\n\tlastRatingPromptedDate?: number\n\n\t/**\n\t * The date of the earliest possible next date from which another rating can be requested from the user.\n\t * This is only for the case the user does not want to rate right now or completely opts out of the in-app ratings.\n\t */\n\tretryRatingPromptAfter?: number\n}\n\n/**\n * Device config for internal user auto login. Only one config per device is stored.\n */\nexport class DeviceConfig implements UsageTestStorage, NewsItemStorage {\n\tpublic static Version = 4\n\tpublic static LocalStorageKey = \"tutanotaConfig\"\n\n\tprivate config!: ConfigObject\n\tprivate lastSyncStream: Stream<Map<Id, LastExternalCalendarSyncEntry>> = stream(new Map())\n\n\tconstructor(private readonly _version: number, private readonly localStorage: Storage | null) {\n\t\tthis.init()\n\t}\n\n\tinit() {\n\t\tconst loadedConfig = this.loadConfigFromLocalStorage() ?? {}\n\n\t\tlet doSave = false\n\t\tif (loadedConfig._version != null && loadedConfig._version !== DeviceConfig.Version) {\n\t\t\tmigrateConfig(loadedConfig)\n\t\t\tdoSave = true\n\t\t}\n\n\t\tlet signupToken\n\t\tif (loadedConfig._signupToken) {\n\t\t\tsignupToken = loadedConfig._signupToken\n\t\t} else {\n\t\t\tlet bytes = new Uint8Array(6)\n\t\t\tlet crypto = window.crypto\n\t\t\tcrypto.getRandomValues(bytes)\n\t\t\tsignupToken = uint8ArrayToBase64(bytes)\n\t\t\tdoSave = true\n\t\t}\n\n\t\tthis.config = {\n\t\t\t_version: DeviceConfig.Version,\n\t\t\t_credentials: loadedConfig._credentials ? new Map(typedEntries(loadedConfig._credentials)) : new Map(),\n\t\t\t_credentialEncryptionMode: loadedConfig._credentialEncryptionMode ?? null,\n\t\t\t_encryptedCredentialsKey: loadedConfig._encryptedCredentialsKey ?? null,\n\t\t\tacknowledgedNewsItems: loadedConfig.acknowledgedNewsItems ?? [],\n\t\t\t_themeId: loadedConfig._themeId ?? defaultThemePreference,\n\t\t\tscheduledAlarmModelVersionPerUser: loadedConfig.scheduledAlarmModelVersionPerUser ?? {},\n\t\t\t_language: loadedConfig._language ?? null,\n\t\t\t_defaultCalendarView: loadedConfig._defaultCalendarView ?? {},\n\t\t\t_hiddenCalendars: loadedConfig._hiddenCalendars ?? {},\n\t\t\texpandedMailFolders: loadedConfig.expandedMailFolders ?? {},\n\t\t\t_testDeviceId: loadedConfig._testDeviceId ?? null,\n\t\t\t_testAssignments: loadedConfig._testAssignments ?? null,\n\t\t\t_signupToken: signupToken,\n\t\t\tofflineTimeRangeDaysByUser: loadedConfig.offlineTimeRangeDaysByUser ?? {},\n\t\t\tconversationViewShowOnlySelectedMail: loadedConfig.conversationViewShowOnlySelectedMail ?? false,\n\t\t\tsyncContactsWithPhonePreference: loadedConfig.syncContactsWithPhonePreference ?? {},\n\t\t\tisCalendarDaySelectorExpanded: loadedConfig.isCalendarDaySelectorExpanded ?? false,\n\t\t\tmailAutoSelectBehavior: loadedConfig.mailAutoSelectBehavior ?? (isApp() ? ListAutoSelectBehavior.NONE : ListAutoSelectBehavior.OLDER),\n\t\t\tisSetupComplete: loadedConfig.isSetupComplete ?? false,\n\t\t\tisCredentialsMigratedToNative: loadedConfig.isCredentialsMigratedToNative ?? false,\n\t\t\tlastExternalCalendarSync: loadedConfig.lastExternalCalendarSync ?? {},\n\t\t\tclientOnlyCalendars: loadedConfig.clientOnlyCalendars ? new Map(typedEntries(loadedConfig.clientOnlyCalendars)) : new Map(),\n\t\t\tevents: loadedConfig.events ?? [],\n\t\t\tlastRatingPromptedDate: loadedConfig.lastRatingPromptedDate ?? null,\n\t\t\tretryRatingPromptAfter: loadedConfig.retryRatingPromptAfter ?? null,\n\t\t}\n\n\t\tthis.lastSyncStream(new Map(Object.entries(this.config.lastExternalCalendarSync)))\n\n\t\t// We need to write the config if there was a migration and if we generate the signup token and if.\n\t\t// We do not save the config if there was no config. The config is stored when some value changes.\n\t\tif (doSave) {\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\tprivate loadConfigFromLocalStorage(): any | null {\n\t\tif (this.localStorage == null) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst loadedConfigString = this.localStorage.getItem(DeviceConfig.LocalStorageKey)\n\t\tif (loadedConfigString == null) {\n\t\t\treturn null\n\t\t}\n\n\t\ttry {\n\t\t\treturn JSON.parse(loadedConfigString)\n\t\t} catch (e) {\n\t\t\tconsole.warn(\"Could not parse device config\")\n\t\t\treturn null\n\t\t}\n\t}\n\n\tstoreCredentials(credentials: DeviceConfigCredentials) {\n\t\tthis.config._credentials.set(credentials.credentialInfo.userId, credentials)\n\n\t\tthis.writeToStorage()\n\t}\n\n\tgetCredentialsByUserId(userId: Id): DeviceConfigCredentials | null {\n\t\treturn this.config._credentials.get(userId) ?? null\n\t}\n\n\tgetCredentials(): Array<DeviceConfigCredentials> {\n\t\treturn Array.from(this.config._credentials.values())\n\t}\n\n\tasync deleteByUserId(userId: Id): Promise<void> {\n\t\tthis.config._credentials.delete(userId)\n\n\t\tthis.writeToStorage()\n\t}\n\n\tasync clearCredentialsData(): Promise<void> {\n\t\tthis.config._credentials.clear()\n\t\tthis.config._encryptedCredentialsKey = null\n\t\tthis.config._credentialEncryptionMode = null\n\n\t\tthis.writeToStorage()\n\t}\n\n\tgetSignupToken(): string {\n\t\treturn this.config._signupToken\n\t}\n\n\tgetScheduledAlarmsModelVersion(userId: Id): number | null {\n\t\treturn this.config.scheduledAlarmModelVersionPerUser[userId] ?? null\n\t}\n\n\tsetScheduledAlarmsModelVersion(userId: Id, version: number): void {\n\t\tthis.config.scheduledAlarmModelVersionPerUser[userId] = version\n\t\tthis.writeToStorage()\n\t}\n\n\tsetNoAlarmsScheduled() {\n\t\tthis.config.scheduledAlarmModelVersionPerUser = {}\n\t\tthis.writeToStorage()\n\t}\n\n\tgetIsSetupComplete(): boolean {\n\t\treturn this.config.isSetupComplete ?? false\n\t}\n\n\tsetIsSetupComplete(value: boolean): void {\n\t\tthis.config.isSetupComplete = value\n\t\tthis.writeToStorage()\n\t}\n\n\tgetIsCredentialsMigratedToNative(): boolean {\n\t\treturn this.config.isCredentialsMigratedToNative ?? false\n\t}\n\n\tsetIsCredentialsMigratedToNative(value: boolean): void {\n\t\tthis.config.isCredentialsMigratedToNative = value\n\t\tthis.writeToStorage()\n\t}\n\n\tgetLastExternalCalendarSync(): Map<Id, LastExternalCalendarSyncEntry> {\n\t\treturn this.lastSyncStream()\n\t}\n\n\tsetLastExternalCalendarSync(value: Map<Id, LastExternalCalendarSyncEntry>): void {\n\t\tthis.config.lastExternalCalendarSync = Object.fromEntries(value)\n\t\tthis.writeToStorage()\n\t\tthis.lastSyncStream(value)\n\t}\n\n\tupdateLastSync(groupId: Id, lastSyncStatus: SyncStatus = SyncStatus.Success) {\n\t\tconst lastExternalCalendarSync = this.getLastExternalCalendarSync()\n\t\tconst lastSuccessfulSync = lastSyncStatus === SyncStatus.Success ? Date.now() : lastExternalCalendarSync.get(groupId)?.lastSuccessfulSync\n\t\tlastExternalCalendarSync.set(groupId, { lastSuccessfulSync, lastSyncStatus })\n\t\tthis.setLastExternalCalendarSync(lastExternalCalendarSync)\n\t}\n\n\tgetLastSyncStream() {\n\t\treturn this.lastSyncStream\n\t}\n\n\tremoveLastSync(groupId: Id) {\n\t\tconst lastExternalCalendarSync = this.getLastExternalCalendarSync()\n\t\tif (lastExternalCalendarSync.delete(groupId)) this.setLastExternalCalendarSync(lastExternalCalendarSync)\n\t}\n\n\tgetLanguage(): LanguageCode | null {\n\t\treturn this.config._language\n\t}\n\n\tsetLanguage(language: LanguageCode | null) {\n\t\tthis.config._language = language\n\t\tthis.writeToStorage()\n\t}\n\n\tprivate writeToStorage() {\n\t\ttry {\n\t\t\tif (this.localStorage != null) {\n\t\t\t\tthis.localStorage.setItem(\n\t\t\t\t\tDeviceConfig.LocalStorageKey,\n\t\t\t\t\tJSON.stringify(this.config, (key, value) => {\n\t\t\t\t\t\tif (key === \"_credentials\") {\n\t\t\t\t\t\t\treturn Object.fromEntries(this.config._credentials.entries())\n\t\t\t\t\t\t} else if (key === \"clientOnlyCalendars\") {\n\t\t\t\t\t\t\treturn Object.fromEntries(this.config.clientOnlyCalendars.entries())\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// may occur in Safari < 11 in incognito mode because it throws a QuotaExceededError\n\t\t\t// DOMException will occurr if all cookies are disabled\n\t\t\tconsole.log(\"could not store config\", e)\n\t\t}\n\t}\n\n\tgetTheme(): ThemePreference {\n\t\treturn this.config._themeId\n\t}\n\n\tsetTheme(theme: ThemePreference) {\n\t\tif (this.config._themeId !== theme) {\n\t\t\tthis.config._themeId = theme\n\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\tgetDefaultCalendarView(userId: Id): CalendarViewType | null {\n\t\treturn this.config._defaultCalendarView[userId]\n\t}\n\n\tsetDefaultCalendarView(userId: Id, defaultView: CalendarViewType) {\n\t\tif (this.config._defaultCalendarView[userId] !== defaultView) {\n\t\t\tthis.config._defaultCalendarView[userId] = defaultView\n\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\tgetHiddenCalendars(user: Id): Id[] {\n\t\treturn this.config._hiddenCalendars[user] ?? []\n\t}\n\n\tsetHiddenCalendars(user: Id, calendars: Id[]) {\n\t\tif (this.config._hiddenCalendars[user] !== calendars) {\n\t\t\tthis.config._hiddenCalendars[user] = calendars\n\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\tgetExpandedFolders(user: Id): Id[] {\n\t\treturn this.config.expandedMailFolders[user] ?? []\n\t}\n\n\tsetExpandedFolders(user: Id, folders: Id[]) {\n\t\tif (this.config.expandedMailFolders[user] !== folders) {\n\t\t\tthis.config.expandedMailFolders[user] = folders\n\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\thasAcknowledgedNewsItemForDevice(newsItemId: Id): boolean {\n\t\treturn this.config.acknowledgedNewsItems.includes(newsItemId)\n\t}\n\n\tacknowledgeNewsItemForDevice(newsItemId: Id) {\n\t\tif (!this.config.acknowledgedNewsItems.includes(newsItemId)) {\n\t\t\tthis.config.acknowledgedNewsItems.push(newsItemId)\n\t\t\tthis.writeToStorage()\n\t\t}\n\t}\n\n\tasync getCredentialEncryptionMode(): Promise<CredentialEncryptionMode | null> {\n\t\treturn this.config._credentialEncryptionMode\n\t}\n\n\tasync getCredentialsEncryptionKey(): Promise<Uint8Array | null> {\n\t\treturn this.config._encryptedCredentialsKey ? base64ToUint8Array(this.config._encryptedCredentialsKey) : null\n\t}\n\n\tasync getTestDeviceId(): Promise<string | null> {\n\t\treturn this.config._testDeviceId\n\t}\n\n\tasync storeTestDeviceId(testDeviceId: string): Promise<void> {\n\t\tthis.config._testDeviceId = testDeviceId\n\t\tthis.writeToStorage()\n\t}\n\n\tasync getAssignments(): Promise<PersistedAssignmentData | null> {\n\t\treturn this.config._testAssignments\n\t}\n\n\tasync storeAssignments(persistedAssignmentData: PersistedAssignmentData): Promise<void> {\n\t\tthis.config._testAssignments = persistedAssignmentData\n\t\tthis.writeToStorage()\n\t}\n\n\tgetOfflineTimeRangeDays(userId: Id): number | null {\n\t\treturn this.config.offlineTimeRangeDaysByUser[userId]\n\t}\n\n\tsetOfflineTimeRangeDays(userId: Id, days: number) {\n\t\tthis.config.offlineTimeRangeDaysByUser[userId] = days\n\t\tthis.writeToStorage()\n\t}\n\n\tgetConversationViewShowOnlySelectedMail(): boolean {\n\t\treturn this.config.conversationViewShowOnlySelectedMail\n\t}\n\n\tsetConversationViewShowOnlySelectedMail(setting: boolean) {\n\t\tthis.config.conversationViewShowOnlySelectedMail = setting\n\t\tthis.writeToStorage()\n\t}\n\n\tgetUserSyncContactsWithPhonePreference(id: Id): boolean | null {\n\t\treturn this.config.syncContactsWithPhonePreference[id] ?? null\n\t}\n\n\tsetUserSyncContactsWithPhonePreference(user: Id, value: boolean) {\n\t\tthis.config.syncContactsWithPhonePreference[user] = value\n\t\tthis.writeToStorage()\n\t}\n\n\tisCalendarDaySelectorExpanded(): boolean {\n\t\treturn this.config.isCalendarDaySelectorExpanded\n\t}\n\n\tsetCalendarDaySelectorExpanded(expanded: boolean) {\n\t\tthis.config.isCalendarDaySelectorExpanded = expanded\n\t\tthis.writeToStorage()\n\t}\n\n\tgetMailAutoSelectBehavior(): ListAutoSelectBehavior {\n\t\treturn this.config.mailAutoSelectBehavior\n\t}\n\n\tsetMailAutoSelectBehavior(action: ListAutoSelectBehavior) {\n\t\tthis.config.mailAutoSelectBehavior = action\n\t\tthis.writeToStorage()\n\t}\n\n\tgetClientOnlyCalendars() {\n\t\treturn this.config.clientOnlyCalendars\n\t}\n\n\tupdateClientOnlyCalendars(calendarId: Id, clientOnlyCalendarConfig: ClientOnlyCalendarsInfo): void {\n\t\tthis.config.clientOnlyCalendars.set(calendarId, clientOnlyCalendarConfig)\n\t\tthis.writeToStorage()\n\t}\n\n\tpublic writeEvents(events: Date[]): void {\n\t\tthis.config.events = events.map((date) => date.getTime())\n\t\tthis.writeToStorage()\n\t}\n\n\t/**\n\t * Gets a list of dates on which a certain event has occurred. Could be email sent, replied, contact created etc.\n\t *\n\t * Only present on iOS.\n\t */\n\tpublic getEvents(): Date[] {\n\t\treturn (this.config.events ?? []).flatMap((timestamp) => {\n\t\t\ttry {\n\t\t\t\treturn new Date(timestamp)\n\t\t\t} catch (e) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic setLastRatingPromptedDate(date: Date): void {\n\t\tthis.config.lastRatingPromptedDate = date.getTime()\n\t\tthis.writeToStorage()\n\t}\n\n\t/**\n\t * Gets the last date on which the user was prompted to rate the app.\n\t */\n\tpublic getLastRatingPromptedDate(): Date | null {\n\t\tif (this.config.lastRatingPromptedDate == null) {\n\t\t\treturn null\n\t\t}\n\n\t\ttry {\n\t\t\treturn new Date(this.config.lastRatingPromptedDate)\n\t\t} catch (e) {\n\t\t\treturn null\n\t\t}\n\t}\n\n\t/**\n\t * Sets the date of the earliest possible next date from which another rating can be requested from the user.\n\t */\n\tpublic setRetryRatingPromptAfter(date: Date): void {\n\t\tthis.config.retryRatingPromptAfter = date.getTime()\n\t\tthis.writeToStorage()\n\t}\n\n\t/**\n\t * Gets the date of the earliest possible next date from which another rating can be requested from the user.\n\t */\n\tpublic getRetryRatingPromptAfter(): Date | null {\n\t\tif (this.config.retryRatingPromptAfter == null) {\n\t\t\treturn null\n\t\t}\n\n\t\ttry {\n\t\t\treturn new Date(this.config.retryRatingPromptAfter)\n\t\t} catch (e) {\n\t\t\treturn null\n\t\t}\n\t}\n}\n\nexport function migrateConfig(loadedConfig: any) {\n\tif (loadedConfig === DeviceConfig.Version) {\n\t\tthrow new ProgrammingError(\"Should not migrate credentials, current version\")\n\t}\n\n\tif (loadedConfig._version < 2) {\n\t\tloadedConfig._credentials = []\n\t}\n\n\tif (loadedConfig._version < 3) {\n\t\tmigrateConfigV2to3(loadedConfig)\n\t}\n}\n\n/**\n * Migrate from V2 of the config to V3\n *\n * Exported for testing\n */\nexport function migrateConfigV2to3(loadedConfig: any) {\n\tconst oldCredentialsArray = loadedConfig._credentials\n\tloadedConfig._credentials = {}\n\n\tfor (let credential of oldCredentialsArray) {\n\t\tlet login, type\n\t\tif (credential.mailAddress.includes(\"@\")) {\n\t\t\tlogin = credential.mailAddress\n\t\t\ttype = \"internal\"\n\t\t} else {\n\t\t\t// in version 2 external users had userId as their email address\n\t\t\t// We use encryption stub in this version\n\t\t\tlogin = credential.userId\n\t\t\ttype = \"external\"\n\t\t}\n\n\t\tloadedConfig._credentials[credential.userId] = {\n\t\t\tcredentialInfo: {\n\t\t\t\tlogin,\n\t\t\t\tuserId: credential.userId,\n\t\t\t\ttype,\n\t\t\t},\n\t\t\tencryptedPassword: credential.encryptedPassword,\n\t\t\taccessToken: credential.accessToken,\n\t\t\tencryptedPassphraseKey: null, // should not be present\n\t\t}\n\t}\n}\n\n/**\n * Credentials as they are stored in DeviceConfig (byte arrays replaced with strings as DeviceConfig can only deal with strings).\n * @private visibleForTesting\n */\nexport interface DeviceConfigCredentials {\n\treadonly credentialInfo: CredentialsInfo\n\treadonly accessToken: string\n\treadonly databaseKey: Base64 | null\n\treadonly encryptedPassword: string\n\treadonly encryptedPassphraseKey: Base64 | null\n}\n\nexport const deviceConfig: DeviceConfig = new DeviceConfig(DeviceConfig.Version, client.localStorage() ? localStorage : null)\n"]}