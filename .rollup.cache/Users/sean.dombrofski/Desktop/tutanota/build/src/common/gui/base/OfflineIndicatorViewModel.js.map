{"version":3,"file":"OfflineIndicatorViewModel.js","sourceRoot":"","sources":["../../../../../src/common/gui/base/OfflineIndicatorViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { PROGRESS_DONE } from \"./ProgressBar.js\"\nimport Stream from \"mithril/stream\"\nimport { WsConnectionState } from \"../../api/main/WorkerClient.js\"\nimport { ExposedCacheStorage } from \"../../api/worker/rest/DefaultEntityRestCache.js\"\nimport { PageContextLoginListener } from \"../../api/main/PageContextLoginListener.js\"\nimport { LoginController } from \"../../api/main/LoginController.js\"\nimport { OfflineIndicatorAttrs, OfflineIndicatorState } from \"./OfflineIndicator.js\"\nimport { WebsocketConnectivityModel } from \"../../misc/WebsocketConnectivityModel.js\"\nimport { ProgressTracker } from \"../../api/main/ProgressTracker.js\"\nimport { styles } from \"../styles.js\"\n\n/**\n * the offline indicator must take into account information\n * from multiple different sources:\n * * ws connection state (connected, not connected) from the worker\n * * login state (logged out, partial login, full login)\n * * sync progress\n * * last sync time\n *\n * the state necessary to determine the right indicator state from\n * previous updates from these information sources\n * is maintained in this class\n */\nexport class OfflineIndicatorViewModel {\n\tprivate lastProgress: number = PROGRESS_DONE\n\tprivate lastWsState: WsConnectionState = WsConnectionState.connecting\n\tprivate lastUpdate: Date | null = null\n\t/**\n\t * keeping this prevents flashing misleading states during login when\n\t * the full login succeeded but the ws connection attempt didn't\n\t * succeed or fail yet.\n\t * wsState is \"connecting\" both during first connect attempt and after we\n\t * disconnected.\n\t **/\n\tprivate wsWasConnectedBefore: boolean = false\n\n\tconstructor(\n\t\tprivate readonly cacheStorage: ExposedCacheStorage,\n\t\tprivate readonly loginListener: PageContextLoginListener,\n\t\tprivate readonly connectivityModel: WebsocketConnectivityModel,\n\t\tprivate readonly logins: LoginController,\n\t\tprogressTracker: ProgressTracker,\n\t\tprivate readonly cb: () => void,\n\t) {\n\t\tlogins.waitForFullLogin().then(() => this.cb())\n\t\tthis.setProgressUpdateStream(progressTracker.onProgressUpdate)\n\t\tthis.setWsStateStream(this.connectivityModel.wsConnection())\n\t}\n\n\tprivate setProgressUpdateStream(progressStream: Stream<number>): void {\n\t\tprogressStream.map((progress) => this.onProgressUpdate(progress))\n\t\tthis.onProgressUpdate(progressStream())\n\t}\n\n\tprivate setWsStateStream(wsStream: Stream<WsConnectionState>): void {\n\t\twsStream.map((state) => {\n\t\t\tthis.onWsStateChange(state)\n\t\t})\n\t\tthis.onWsStateChange(wsStream()).then()\n\t}\n\n\tprivate onProgressUpdate(progress: number): void {\n\t\tthis.lastProgress = progress\n\t\tthis.cb()\n\t}\n\n\tprivate async onWsStateChange(newState: WsConnectionState): Promise<void> {\n\t\tthis.lastWsState = newState\n\t\tif (newState !== WsConnectionState.connected) {\n\t\t\tconst lastUpdate = await this.cacheStorage!.getLastUpdateTime()\n\t\t\tswitch (lastUpdate.type) {\n\t\t\t\tcase \"recorded\":\n\t\t\t\t\tthis.lastUpdate = new Date(lastUpdate.time)\n\t\t\t\t\tbreak\n\t\t\t\tcase \"never\":\n\t\t\t\t// We can get into uninitialized state after temporary login e.g. during signup\n\t\t\t\t// falls through\n\t\t\t\tcase \"uninitialized\":\n\t\t\t\t\tthis.lastUpdate = null\n\t\t\t\t\tthis.wsWasConnectedBefore = false\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tthis.wsWasConnectedBefore = true\n\t\t}\n\t\tthis.cb()\n\t}\n\n\tgetCurrentAttrs(): OfflineIndicatorAttrs {\n\t\tconst isSingleColumn = styles.isUsingBottomNavigation()\n\t\tif (this.logins.isFullyLoggedIn() && this.wsWasConnectedBefore) {\n\t\t\tif (this.lastWsState === WsConnectionState.connected) {\n\t\t\t\t// normal, full login with a connected websocket\n\t\t\t\tif (this.lastProgress < PROGRESS_DONE) {\n\t\t\t\t\treturn { state: OfflineIndicatorState.Synchronizing, progress: this.lastProgress, isSingleColumn }\n\t\t\t\t} else {\n\t\t\t\t\treturn { state: OfflineIndicatorState.Online, isSingleColumn }\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// normal, full login with a disconnected websocket\n\t\t\t\treturn {\n\t\t\t\t\tstate: OfflineIndicatorState.Offline,\n\t\t\t\t\tlastUpdate: this.lastUpdate,\n\t\t\t\t\treconnectAction: () => {\n\t\t\t\t\t\tconsole.log(\"try reconnect ws\")\n\t\t\t\t\t\tthis.connectivityModel!.tryReconnect(true, true, 2000)\n\t\t\t\t\t},\n\t\t\t\t\tisSingleColumn,\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// either not fully logged in or the websocket was not connected before\n\t\t\t// in cases where the indicator is visible, this is just offline login.\n\t\t\tif (this.loginListener.getFullLoginFailed()) {\n\t\t\t\treturn {\n\t\t\t\t\tstate: OfflineIndicatorState.Offline,\n\t\t\t\t\tlastUpdate: this.lastUpdate,\n\t\t\t\t\treconnectAction: () => {\n\t\t\t\t\t\tconsole.log(\"try full login\")\n\t\t\t\t\t\tthis.logins!.retryAsyncLogin().finally(() => this.cb())\n\t\t\t\t\t},\n\t\t\t\t\tisSingleColumn,\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// partially logged in, but the last login attempt didn't fail yet\n\t\t\t\treturn { state: OfflineIndicatorState.Connecting, isSingleColumn }\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * get the current progress for sync operations\n\t */\n\tgetProgress(): number {\n\t\t//getting the progress like this ensures that\n\t\t// the progress bar and sync percentage are consistent\n\t\tconst a = this.getCurrentAttrs()\n\t\treturn a.state === OfflineIndicatorState.Synchronizing && this.logins?.isUserLoggedIn() ? a.progress : 1\n\t}\n}\n"]}