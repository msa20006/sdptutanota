{"version":3,"file":"DesktopAlarmScheduler.js","sourceRoot":"","sources":["../../../../../src/common/desktop/sse/DesktopAlarmScheduler.ts"],"names":[],"mappings":"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","sourcesContent":["import { OperationType } from \"../../api/common/TutanotaConstants\"\nimport type { AlarmNotification } from \"../../api/entities/sys/TypeRefs.js\"\nimport { AlarmNotificationTypeRef } from \"../../api/entities/sys/TypeRefs.js\"\nimport type { DesktopNotifier } from \"../DesktopNotifier\"\nimport { NotificationResult } from \"../DesktopNotifier\"\nimport type { WindowManager } from \"../DesktopWindowManager\"\nimport type { DesktopAlarmStorage } from \"./DesktopAlarmStorage\"\nimport type { DesktopNativeCryptoFacade } from \"../DesktopNativeCryptoFacade\"\nimport { log } from \"../DesktopLog\"\nimport type { AlarmScheduler } from \"../../calendar/date/AlarmScheduler.js\"\nimport { elementIdPart } from \"../../api/common/utils/EntityUtils\"\nimport { resolveTypeReference } from \"../../api/common/EntityFunctions\"\nimport { EncryptedAlarmNotification } from \"../../native/common/EncryptedAlarmNotification.js\"\nimport { base64ToUint8Array, isSameDay } from \"@tutao/tutanota-utils\"\nimport { CryptoError } from \"@tutao/tutanota-crypto/error.js\"\nimport { hasError } from \"../../api/common/utils/ErrorUtils.js\"\nimport { formatDateWithWeekdayAndTime, formatTime } from \"../../misc/Formatter\"\n\nexport interface NativeAlarmScheduler {\n\thandleAlarmNotification(an: EncryptedAlarmNotification): Promise<void>\n\n\tunscheduleAllAlarms(userId?: Id | null): Promise<void>\n\n\trescheduleAll(): Promise<void>\n}\n\nexport class DesktopAlarmScheduler implements NativeAlarmScheduler {\n\tconstructor(\n\t\tprivate readonly wm: WindowManager,\n\t\tprivate readonly notifier: DesktopNotifier,\n\t\tprivate readonly alarmStorage: DesktopAlarmStorage,\n\t\tprivate readonly desktopCrypto: DesktopNativeCryptoFacade,\n\t\tprivate readonly alarmScheduler: AlarmScheduler,\n\t) {}\n\n\t/**\n\t * stores, deletes and schedules alarm notifications\n\t * @param an the AlarmNotification to handle\n\t */\n\tasync handleAlarmNotification(an: EncryptedAlarmNotification): Promise<void> {\n\t\tif (an.operation === OperationType.CREATE) {\n\t\t\tawait this.handleCreateAlarm(an)\n\t\t} else if (an.operation === OperationType.DELETE) {\n\t\t\tlog.debug(`deleting alarm notifications for ${an.alarmInfo.alarmIdentifier}!`)\n\n\t\t\tthis.handleDeleteAlarm(an)\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t`received AlarmNotification (alarmInfo identifier ${an.alarmInfo.alarmIdentifier}) with unsupported operation ${an.operation}, ignoring`,\n\t\t\t)\n\t\t}\n\t}\n\n\tasync unscheduleAllAlarms(userId: Id | null = null): Promise<void> {\n\t\tconst alarms = await this.alarmStorage.getScheduledAlarms()\n\t\tfor (const alarm of alarms) {\n\t\t\tif (userId == null || alarm.user === userId) {\n\t\t\t\tthis.cancelAlarms(alarm)\n\t\t\t}\n\t\t}\n\t\treturn this.alarmStorage.deleteAllAlarms(userId)\n\t}\n\n\t/**\n\t * read all stored alarms and reschedule the notifications\n\t */\n\tasync rescheduleAll(): Promise<void> {\n\t\tconst alarms = await this.alarmStorage.getScheduledAlarms()\n\n\t\tfor (const alarm of alarms) {\n\t\t\tawait this.decryptAndSchedule(alarm)\n\t\t}\n\t}\n\n\tprivate async decryptAndSchedule(an: EncryptedAlarmNotification): Promise<void> {\n\t\tfor (const currentKey of an.notificationSessionKeys) {\n\t\t\tconst pushIdentifierSessionKey = await this.alarmStorage.getPushIdentifierSessionKey(currentKey)\n\n\t\t\tif (!pushIdentifierSessionKey) {\n\t\t\t\t// this key is either not for us (we don't have the right PushIdentifierSessionKey in our local storage)\n\t\t\t\t// or we couldn't decrypt the NotificationSessionKey for some reason\n\t\t\t\t// either way, we probably can't use it.\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tconst decAn: AlarmNotification = await this.desktopCrypto.decryptAndMapToInstance(\n\t\t\t\tawait resolveTypeReference(AlarmNotificationTypeRef),\n\t\t\t\tan,\n\t\t\t\tpushIdentifierSessionKey,\n\t\t\t\tbase64ToUint8Array(currentKey.pushIdentifierSessionEncSessionKey),\n\t\t\t)\n\n\t\t\tif (hasError(decAn)) {\n\t\t\t\t// some property of the AlarmNotification couldn't be decrypted with the selected key\n\t\t\t\t// throw away the key that caused the error and try the next one\n\t\t\t\tawait this.alarmStorage.removePushIdentifierKey(elementIdPart(currentKey.pushIdentifier))\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// we just want to keep the key that can decrypt the AlarmNotification\n\t\t\tan.notificationSessionKeys = [currentKey]\n\t\t\treturn this.scheduleAlarms(decAn)\n\t\t}\n\n\t\t// none of the NotificationSessionKeys in the AlarmNotification worked.\n\t\t// this is indicative of a serious problem with the stored keys.\n\t\t// therefore, we should invalidate the sseInfo and throw away\n\t\t// our pushEncSessionKeys.\n\t\tthrow new CryptoError(\"could not decrypt alarmNotification\")\n\t}\n\n\tprivate handleDeleteAlarm(an: EncryptedAlarmNotification) {\n\t\tthis.cancelAlarms(an)\n\n\t\tthis.alarmStorage.deleteAlarm(an.alarmInfo.alarmIdentifier)\n\t}\n\n\tprivate async handleCreateAlarm(an: EncryptedAlarmNotification) {\n\t\tlog.debug(\"creating alarm notification!\")\n\t\tawait this.decryptAndSchedule(an)\n\t\tawait this.alarmStorage.storeAlarm(an)\n\t}\n\n\tprivate cancelAlarms(an: AlarmNotification | EncryptedAlarmNotification): void {\n\t\tthis.alarmScheduler.cancelAlarm(an.alarmInfo.alarmIdentifier)\n\t}\n\n\tprivate scheduleAlarms(decAn: AlarmNotification): void {\n\t\tconst eventInfo = {\n\t\t\tstartTime: decAn.eventStart,\n\t\t\tendTime: decAn.eventEnd,\n\t\t\tsummary: decAn.summary,\n\t\t}\n\n\t\tthis.alarmScheduler.scheduleAlarm(eventInfo, decAn.alarmInfo, decAn.repeatRule, (eventTime, summary) => {\n\t\t\tconst { title, body } = formatNotificationForDisplay(eventTime, summary)\n\t\t\tthis.notifier.submitGroupedNotification(title, body, decAn.alarmInfo.alarmIdentifier, (res) => {\n\t\t\t\tif (res === NotificationResult.Click) {\n\t\t\t\t\tthis.wm.openCalendar({\n\t\t\t\t\t\tuserId: decAn.user,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n}\n\nexport function formatNotificationForDisplay(eventTime: Date, summary: string): { title: string; body: string } {\n\tlet dateString: string\n\n\tif (isSameDay(eventTime, new Date())) {\n\t\tdateString = formatTime(eventTime)\n\t} else {\n\t\tdateString = formatDateWithWeekdayAndTime(eventTime)\n\t}\n\n\tconst body = `${dateString} ${summary}`\n\n\treturn { body, title: body }\n}\n"]}