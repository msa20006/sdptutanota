{"version":3,"file":"DesktopNetworkClient.js","sourceRoot":"","sources":["../../../../../src/common/desktop/net/DesktopNetworkClient.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,WAAW,CAAA;AAC5B,OAAO,KAAK,MAAM,YAAY,CAAA;AAC9B,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAA;AACrE,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAGtC,MAAM,GAAG,GAAG,wBAAwB,CAAA;AAsBpC,MAAM,OAAO,oBAAoB;IAChC,OAAO,CAAC,GAAQ,EAAE,IAA0B;QAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;IAC9C,CAAC;IAED;;;;;OAKG;IACH,cAAc,CAAC,GAAQ,EAAE,IAA0B,EAAE,YAAyB;QAC7E,OAAO,IAAI,OAAO,CAAuB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC5D,IAAI,IAAI,GAAgC,IAAI,CAAA;YAE5C,SAAS,OAAO,CAAC,CAAQ;gBACxB,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,yBAAyB,EAAE,CAAC,CAAC,CAAA;gBAC5C,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;oBAClB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;oBACf,OAAM;gBACP,CAAC;gBACD,MAAM,CAAC,CAAC,CAAC,CAAA;YACV,CAAC;YAED,MAAM,GAAG,GAAuB,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC;iBACrD,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE;gBACrB,IAAI,GAAG,CAAC,CAAA;gBACR,OAAO,CAAC,CAAC,CAAC,CAAA;YACX,CAAC,CAAC;iBACD,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;iBACpB,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;gBACnB,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,eAAe,CAAC,CAAA;gBAC/B,GAAG,CAAC,OAAO,CAAC,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC,CAAA;YAC9C,CAAC,CAAC,CAAA;YACH,IAAI,YAAY,EAAE,CAAC;gBAClB,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YAC5C,CAAC;iBAAM,CAAC;gBACP,GAAG,CAAC,GAAG,EAAE,CAAA;YACV,CAAC;QACF,CAAC,CAAC,CAAA;IACH,CAAC;IAEO,SAAS,CAAC,GAAQ;QACzB,IAAI,GAAG,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAC/B,OAAO,KAAK,CAAA;QACb,CAAC;aAAM,CAAC;YACP,OAAO,IAAI,CAAA;QACZ,CAAC;IACF,CAAC;CACD","sourcesContent":["import http from \"node:http\"\nimport https from \"node:https\"\nimport { ConnectionError } from \"../../api/common/error/RestError.js\"\nimport { log } from \"../DesktopLog.js\"\nimport type { ReadStream } from \"node:fs\"\n\nconst TAG = \"[DesktopNetworkClient]\"\n\n/**\n * Manually re-doing http$requestOptions because built-in definition is crap.\n */\nexport type ClientRequestOptions = {\n\tauth?: string\n\tdefaultPort?: number\n\tfamily?: number\n\theaders?: Record<string, string>\n\thost?: string\n\thostname?: string\n\tlocalAddress?: string\n\tmethod?: string\n\tpath?: string\n\tport?: number\n\tprotocol?: string\n\tsetHost?: boolean\n\tsocketPath?: string\n\ttimeout?: number\n}\n\nexport class DesktopNetworkClient {\n\trequest(url: URL, opts: ClientRequestOptions): http.ClientRequest {\n\t\treturn this.getModule(url).request(url, opts)\n\t}\n\n\t/**\n\t * resolves when we get the first part of the response\n\t * rejects on errors that happen before that point\n\t *\n\t * later errors must be handled on the response onerror handler\n\t */\n\texecuteRequest(url: URL, opts: ClientRequestOptions, uploadStream?: ReadStream): Promise<http.IncomingMessage> {\n\t\treturn new Promise<http.IncomingMessage>((resolve, reject) => {\n\t\t\tlet resp: http.IncomingMessage | null = null\n\n\t\t\tfunction onerror(e: Error) {\n\t\t\t\tlog.debug(TAG, `aborting req due to err`, e)\n\t\t\t\tif (resp != null) {\n\t\t\t\t\tresp.destroy(e)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treject(e)\n\t\t\t}\n\n\t\t\tconst req: http.ClientRequest = this.request(url, opts)\n\t\t\t\t.on(\"response\", (r) => {\n\t\t\t\t\tresp = r\n\t\t\t\t\tresolve(r)\n\t\t\t\t})\n\t\t\t\t.on(\"error\", onerror)\n\t\t\t\t.on(\"timeout\", () => {\n\t\t\t\t\tlog.debug(TAG, \"timed out req\")\n\t\t\t\t\treq.destroy(new ConnectionError(\"timed out\"))\n\t\t\t\t})\n\t\t\tif (uploadStream) {\n\t\t\t\tuploadStream.on(\"error\", onerror).pipe(req)\n\t\t\t} else {\n\t\t\t\treq.end()\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate getModule(url: URL): typeof import(\"http\") | typeof import(\"https\") {\n\t\tif (url.protocol === \"https:\") {\n\t\t\treturn https\n\t\t} else {\n\t\t\treturn http\n\t\t}\n\t}\n}\n"]}