{"version":3,"file":"AdminClientDummyEntityRestCache.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/rest/AdminClientDummyEntityRestCache.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,gBAAgB,EAAE,MAAM,qCAAqC,CAAA;AAKtE,MAAM,OAAO,+BAA+B;IAC3C,KAAK,CAAC,oBAAoB,CAAC,KAAkB;QAC5C,OAAO,KAAK,CAAC,MAAM,CAAA;IACpB,CAAC;IAED,KAAK,CAAC,KAAK,CAAuB,QAAW;QAC5C,MAAM,IAAI,gBAAgB,CAAC,uBAAuB,CAAC,CAAA;IACpD,CAAC;IAED,KAAK,CAAC,IAAI,CAAuB,QAAoB,EAAE,GAA2B,EAAE,KAAkC;QACrH,MAAM,IAAI,gBAAgB,CAAC,sBAAsB,CAAC,CAAA;IACnD,CAAC;IAED,KAAK,CAAC,YAAY,CAAuB,OAAmB,EAAE,MAAiB,EAAE,UAAqB;QACrG,MAAM,IAAI,gBAAgB,CAAC,8BAA8B,CAAC,CAAA;IAC3D,CAAC;IAED,KAAK,CAAC,SAAS,CAA8B,OAAmB,EAAE,MAAU,EAAE,KAAS,EAAE,KAAa,EAAE,OAAgB;QACvH,MAAM,IAAI,gBAAgB,CAAC,2BAA2B,CAAC,CAAA;IACxD,CAAC;IAED,KAAK,CAAC,YAAY;QACjB,OAAM;IACP,CAAC;IAED,KAAK,CAAC,KAAK,CAAuB,MAAiB,EAAE,QAAW,EAAE,YAAmB;QACpF,MAAM,IAAI,gBAAgB,CAAC,uBAAuB,CAAC,CAAA;IACpD,CAAC;IAED,KAAK,CAAC,aAAa,CAAuB,MAAiB,EAAE,SAAmB;QAC/E,MAAM,IAAI,gBAAgB,CAAC,+BAA+B,CAAC,CAAA;IAC5D,CAAC;IAED,KAAK,CAAC,MAAM,CAAuB,QAAW;QAC7C,MAAM,IAAI,gBAAgB,CAAC,wBAAwB,CAAC,CAAA;IACrD,CAAC;IAED,KAAK,CAAC,+BAA+B,CAAC,OAAW;QAChD,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,KAAK,CAAC,+BAA+B,CAAC,OAAW,EAAE,OAAW;QAC7D,OAAM;IACP,CAAC;IAED,KAAK,CAAC,cAAc;QACnB,OAAM;IACP,CAAC;IAED,KAAK,CAAC,mBAAmB;QACxB,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,KAAK,CAAC,WAAW;QAChB,OAAO,KAAK,CAAA;IACb,CAAC;CACD","sourcesContent":["import { QueuedBatch } from \"../EventQueue.js\"\nimport { EntityUpdate } from \"../../entities/sys/TypeRefs.js\"\nimport { ListElementEntity, SomeEntity } from \"../../common/EntityTypes\"\nimport { ProgrammingError } from \"../../common/error/ProgrammingError\"\nimport { TypeRef } from \"@tutao/tutanota-utils\"\nimport { EntityRestCache } from \"./DefaultEntityRestCache.js\"\nimport { EntityRestClientLoadOptions } from \"./EntityRestClient.js\"\n\nexport class AdminClientDummyEntityRestCache implements EntityRestCache {\n\tasync entityEventsReceived(batch: QueuedBatch): Promise<Array<EntityUpdate>> {\n\t\treturn batch.events\n\t}\n\n\tasync erase<T extends SomeEntity>(instance: T): Promise<void> {\n\t\tthrow new ProgrammingError(\"erase not implemented\")\n\t}\n\n\tasync load<T extends SomeEntity>(_typeRef: TypeRef<T>, _id: PropertyType<T, \"_id\">, _opts: EntityRestClientLoadOptions): Promise<T> {\n\t\tthrow new ProgrammingError(\"load not implemented\")\n\t}\n\n\tasync loadMultiple<T extends SomeEntity>(typeRef: TypeRef<T>, listId: Id | null, elementIds: Array<Id>): Promise<Array<T>> {\n\t\tthrow new ProgrammingError(\"loadMultiple not implemented\")\n\t}\n\n\tasync loadRange<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id, start: Id, count: number, reverse: boolean): Promise<T[]> {\n\t\tthrow new ProgrammingError(\"loadRange not implemented\")\n\t}\n\n\tasync purgeStorage(): Promise<void> {\n\t\treturn\n\t}\n\n\tasync setup<T extends SomeEntity>(listId: Id | null, instance: T, extraHeaders?: Dict): Promise<Id> {\n\t\tthrow new ProgrammingError(\"setup not implemented\")\n\t}\n\n\tasync setupMultiple<T extends SomeEntity>(listId: Id | null, instances: Array<T>): Promise<Array<Id>> {\n\t\tthrow new ProgrammingError(\"setupMultiple not implemented\")\n\t}\n\n\tasync update<T extends SomeEntity>(instance: T): Promise<void> {\n\t\tthrow new ProgrammingError(\"update not implemented\")\n\t}\n\n\tasync getLastEntityEventBatchForGroup(groupId: Id): Promise<Id | null> {\n\t\treturn null\n\t}\n\n\tasync setLastEntityEventBatchForGroup(groupId: Id, batchId: Id): Promise<void> {\n\t\treturn\n\t}\n\n\tasync recordSyncTime(): Promise<void> {\n\t\treturn\n\t}\n\n\tasync timeSinceLastSyncMs(): Promise<number | null> {\n\t\treturn null\n\t}\n\n\tasync isOutOfSync(): Promise<boolean> {\n\t\treturn false\n\t}\n}\n"]}