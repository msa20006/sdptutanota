{"version":3,"file":"KeyManager.js","sourceRoot":"","sources":["../../../../src/common/misc/KeyManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TranslationKey } from \"./LanguageViewModel\"\nimport { Keys } from \"../api/common/TutanotaConstants\"\nimport { lazy, mod } from \"@tutao/tutanota-utils\"\nimport { assertMainOrNodeBoot, isAppleDevice } from \"../api/common/Env\"\nimport m from \"mithril\"\n\nassertMainOrNodeBoot()\nexport const TABBABLE = \"button, input, textarea, div[contenteditable='true'], [tabindex='0'], a, [role=button], [role=input]\"\nexport type KeyPress = {\n\tkey: string\n\n\t/** On Apple devices, this is command; on all other platforms, this is control */\n\tctrlOrCmd: boolean\n\n\t/** Control on all platforms; should not be combined with ctrlOrCmd */\n\tctrl: boolean\n\n\t/** Shift on all platforms */\n\tshift: boolean\n\n\t/** Alt on all platforms */\n\talt: boolean\n\n\t/** Meta is the Windows, Command, or a dedicated meta key depending on platform; should not be combined with ctrlOrCmd */\n\tmeta: boolean\n}\nexport type Key = {\n\tcode: string\n\tname: string\n}\n\n/**\n * Convert the keyboard event into a key press\n * @param event event to convert\n */\nexport function keyboardEventToKeyPress(event: KeyboardEvent): KeyPress {\n\tconst ctrlOrCmd = isAppleDevice() ? event.metaKey : event.ctrlKey\n\n\treturn {\n\t\tkey: event.key,\n\t\tctrlOrCmd,\n\t\tshift: event.shiftKey,\n\t\talt: event.altKey,\n\n\t\t// Ignore these modifiers if ctrlOrCmd is set, as it will otherwise cause either both ctrl/ctrlOrCmd to be set or meta/ctrlOrCmd to be set, which will\n\t\t// make the shortcut not fire\n\t\tctrl: !ctrlOrCmd && event.ctrlKey,\n\t\tmeta: !ctrlOrCmd && event.metaKey,\n\t}\n}\n\n/**\n * @return false, if the default action should be aborted\n */\nexport type keyHandler = (key: KeyPress) => boolean\n\nexport function useKeyHandler(e: KeyboardEvent, onKey: keyHandler | undefined): boolean {\n\t// keydown is used to cancel certain keypresses of the user (mainly needed for the BubbleTextField)\n\tconst key = keyboardEventToKeyPress(e)\n\treturn onKey != null ? onKey(key) : true\n}\n\nexport interface Shortcut {\n\t// key to use (the code/name is important here)\n\tkey: Key\n\n\t// set to true to include a modifier, false or undefined to not\n\tctrlOrCmd?: boolean\n\tctrl?: boolean\n\talt?: boolean\n\tshift?: boolean\n\tmeta?: boolean\n\tenabled?: lazy<boolean>\n\n\t// must return true, if preventDefault should not be invoked\n\texec(key: KeyPress, e?: Event): boolean | void\n\n\t// displayed to the user in the help screen\n\thelp: TranslationKey\n}\n\nfunction isFocusable(e: HTMLElement) {\n\tif (\"disabled\" in e && !!e.disabled) {\n\t\treturn false\n\t}\n\tif (e.tabIndex === -1) {\n\t\t// also filter for tabIndex here to restrict tabbing to invisible inputs\n\t\treturn false\n\t}\n\treturn (\n\t\te.style.display !== \"none\" &&\n\t\t// check that none of the parents have hidden=true or aria-hidden=true\n\t\te.closest(\"[hidden]:not([hidden=false]), [aria-hidden]:not([aria-hidden=false]), [inert]:not([inert=false])\") == null\n\t)\n}\n\nexport function focusPrevious(dom: HTMLElement): boolean {\n\tconst tabbable = Array.from(dom.querySelectorAll(TABBABLE)).filter(isFocusable) as HTMLElement[]\n\n\tconst selected = tabbable.find((e) => document.activeElement === e)\n\n\tif (selected) {\n\t\t//work around for squire so tabulator actions are executed properly\n\t\t//squire makes a list which can be indented and manages this with tab and shift tab\n\t\tconst selection = window.getSelection()\n\n\t\tif (\n\t\t\tselection &&\n\t\t\tselection.focusNode &&\n\t\t\t(selection.focusNode.nodeName === \"LI\" || (selection.focusNode.parentNode && selection.focusNode.parentNode.nodeName === \"LI\"))\n\t\t) {\n\t\t\treturn true //dont change selection if selection is in list\n\t\t} else {\n\t\t\ttabbable[mod(tabbable.indexOf(selected) - 1, tabbable.length)].focus()\n\t\t\treturn false\n\t\t}\n\t} else if (tabbable.length > 0) {\n\t\ttabbable[tabbable.length - 1].focus()\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nexport function focusNext(dom: HTMLElement): boolean {\n\tconst tabbable = Array.from(dom.querySelectorAll(TABBABLE)).filter(isFocusable) as HTMLElement[]\n\n\tconst selected = tabbable.find((e) => document.activeElement === e)\n\n\tif (selected) {\n\t\t//work around for squire so tabulator actions are executed properly\n\t\t//squire makes a list which can be indented and manages this with tab and shift tab\n\t\tconst selection = window.getSelection()\n\n\t\tif (\n\t\t\tselection &&\n\t\t\tselection.focusNode &&\n\t\t\t(selection.focusNode.nodeName === \"LI\" || (selection.focusNode.parentNode && selection.focusNode.parentNode.nodeName === \"LI\"))\n\t\t) {\n\t\t\treturn true //dont change selection\n\t\t} else {\n\t\t\ttabbable[mod(tabbable.indexOf(selected) + 1, tabbable.length)].focus()\n\t\t\treturn false\n\t\t}\n\t} else if (tabbable.length > 0) {\n\t\ttabbable[0].focus()\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nfunction createKeyIdentifier(key: string, modifiers?: { ctrlOrCmd?: boolean; ctrl?: boolean; alt?: boolean; shift?: boolean; meta?: boolean }): string {\n\treturn (\n\t\tkey +\n\t\t(modifiers?.ctrlOrCmd ? \"X\" : \"\") +\n\t\t(modifiers?.ctrl ? \"C\" : \"\") +\n\t\t(modifiers?.alt ? \"A\" : \"\") +\n\t\t(modifiers?.shift ? \"S\" : \"\") +\n\t\t(modifiers?.meta ? \"M\" : \"\")\n\t)\n}\n\n/**\n * KeyManager offers the API for (un)registration of all keyboard shortcuts and routes\n * key presses to the correct handler.\n *\n * Shortcuts that are registered by a modal always take precedence.\n */\n\nclass KeyManager {\n\tprivate keyToShortcut: Map<string, Shortcut>\n\t// override for shortcuts: If a modal is visible, only modal-shortcuts should be active\n\tprivate keyToModalShortcut: Map<string, Shortcut>\n\tprivate desktopShortcuts: Shortcut[]\n\tprivate isHelpOpen: boolean = false\n\n\tconstructor() {\n\t\tconst helpShortcut: Shortcut = {\n\t\t\tkey: Keys.F1,\n\t\t\texec: () => this.openF1Help(),\n\t\t\thelp: \"showHelp_action\",\n\t\t}\n\t\tconst helpId = createKeyIdentifier(helpShortcut.key.code)\n\t\tthis.keyToShortcut = new Map([[helpId, helpShortcut]])\n\t\t// override for _shortcuts: If a modal is visible, only modal-shortcuts should be active\n\t\tthis.keyToModalShortcut = new Map([[helpId, helpShortcut]])\n\t\tthis.desktopShortcuts = []\n\t\tif (!window.document.addEventListener) return\n\t\twindow.document.addEventListener(\"keydown\", (e) => this.handleKeydown(e), false)\n\t}\n\n\tprivate handleKeydown(e: KeyboardEvent): void {\n\t\t// If we get a keyboard event while in a composition system (such as an input method editor),\n\t\t// it should be ignored (since the system should be handling key commands for that).\n\t\tif (!e.isComposing) {\n\t\t\tconst keysToShortcuts = this.keyToModalShortcut.size > 1 ? this.keyToModalShortcut : this.keyToShortcut\n\t\t\tconst keyPress = keyboardEventToKeyPress(e)\n\t\t\tconst shortcut = keyPress.key ? keysToShortcuts.get(createKeyIdentifier(e.key.toLowerCase(), keyPress)) : null\n\n\t\t\tif (shortcut != null && (shortcut.enabled == null || shortcut.enabled())) {\n\t\t\t\tif (shortcut.exec(keyPress) !== true) {\n\t\t\t\t\te.preventDefault()\n\t\t\t\t}\n\t\t\t}\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\t/**\n\t * open a dialog listing all currently active shortcuts\n\t * @param forceBaseShortcuts set to true for the special case where the dialog is opened\n\t * from the support dropdown (which registers its own shortcuts as modal shortcuts)\n\t */\n\topenF1Help(forceBaseShortcuts: boolean = false): void {\n\t\tif (this.isHelpOpen) return\n\t\tthis.isHelpOpen = true\n\t\t// we decide which shortcuts to show right now.\n\t\t//\n\t\t// the help dialog will register its own shortcuts which would override the\n\t\t// standard shortcuts if we did this later\n\t\t//\n\t\t// we can't do this in the register/unregister method because the modal\n\t\t// unregisters the old dialog shortcuts and then registers the new ones\n\t\t// when the top dialog changes, leading to a situation where\n\t\t// modalshortcuts is empty.\n\t\tconst shortcutsToShow =\n\t\t\tthis.keyToModalShortcut.size > 1 && !forceBaseShortcuts\n\t\t\t\t? Array.from(this.keyToModalShortcut.values()) // copy values, they will change\n\t\t\t\t: [...this.keyToShortcut.values(), ...this.desktopShortcuts]\n\t\timport(\"../gui/dialogs/ShortcutDialog.js\").then(({ showShortcutDialog }) => showShortcutDialog(shortcutsToShow)).then(() => (this.isHelpOpen = false))\n\t}\n\n\tregisterShortcuts(shortcuts: ReadonlyArray<Shortcut>) {\n\t\tthis.applyOperation(shortcuts, (id, s) => this.keyToShortcut.set(id, s))\n\t}\n\n\tunregisterShortcuts(shortcuts: ReadonlyArray<Shortcut>) {\n\t\tthis.applyOperation(shortcuts, (id, _) => this.keyToShortcut.delete(id))\n\t}\n\n\tregisterDesktopShortcuts(shortcuts: ReadonlyArray<Shortcut>) {\n\t\tthis.applyOperation(shortcuts, (_, s) => this.desktopShortcuts.push(s))\n\t}\n\n\tregisterModalShortcuts(shortcuts: Array<Shortcut>) {\n\t\tthis.applyOperation(shortcuts, (id, s) => this.keyToModalShortcut.set(id, s))\n\t}\n\n\tunregisterModalShortcuts(shortcuts: Array<Shortcut>) {\n\t\tthis.applyOperation(shortcuts, (id, _) => this.keyToModalShortcut.delete(id))\n\t}\n\n\t/**\n\t *\n\t * @param shortcuts list of shortcuts to operate on\n\t * @param operation operation to execute for every shortcut and its ID\n\t * @private\n\t */\n\tprivate applyOperation(shortcuts: ReadonlyArray<Shortcut>, operation: (id: string, s: Shortcut) => unknown) {\n\t\tfor (const s of shortcuts) {\n\t\t\toperation(createKeyIdentifier(s.key.code, s), s)\n\t\t}\n\t}\n}\n\n/**\n *\n * @param key The key to be checked, should correspond to KeyEvent.key\n * @param keys Keys to be checked against, type of Keys\n */\nexport function isKeyPressed(key: string | undefined, ...keys: Array<Key>): boolean {\n\tif (key != null) {\n\t\treturn keys.some((k) => k.code === key.toLowerCase())\n\t}\n\treturn false\n}\n\nexport const keyManager: KeyManager = new KeyManager()\n"]}