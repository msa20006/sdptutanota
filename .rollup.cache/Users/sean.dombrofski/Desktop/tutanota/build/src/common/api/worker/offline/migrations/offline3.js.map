{"version":3,"file":"offline3.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/offline/migrations/offline3.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,cAAc,EAAE,4BAA4B,EAAE,MAAM,qCAAqC,CAAA;AAClG,OAAO,EAAE,gBAAgB,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,mCAAmC,CAAA;AAC7F,OAAO,EAAE,gBAAgB,EAAE,MAAM,gCAAgC,CAAA;AACjE,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAA;AAC7D,OAAO,EAAE,SAAS,EAAE,MAAM,mCAAmC,CAAA;AAE7D;;;GAGG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAqB;IACzC,GAAG,EAAE,SAAS;IACd,OAAO,EAAE,CAAC;IACV,KAAK,CAAC,OAAO,CAAC,OAAuB,EAAE,CAAkB;QACxD,IAAI,SAAS,GAAG,MAAM,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAA;QAC/D,IAAI,mBAAmB,GAAG,KAAK,CAAA;QAC/B,KAAK,MAAM,OAAO,IAAI,SAAS,EAAE,CAAC;YACjC,IAAI,OAAO,CAAC,mBAAmB,KAAK,gBAAgB,IAAI,OAAO,CAAC,gBAAgB,KAAK,gBAAgB,EAAE,CAAC;gBACvG,SAAQ;YACT,CAAC;YACD,gCAAgC;YAChC,MAAM,OAAO,CAAC,cAAc,CAAC,cAAc,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA;YAC/D,mBAAmB,GAAG,IAAI,CAAA;QAC3B,CAAC;QAED,IAAI,mBAAmB,EAAE,CAAC;YACzB,oEAAoE;YACpE,8BAA8B;YAC9B,MAAM,qBAAqB,CAAC,OAAO,EAAE,4BAA4B,CAAC,CAAA;YAClE,qEAAqE;YACrE,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAA;YAC3E,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;gBACpC,IAAK,SAAiB,CAAC,SAAS,KAAK,SAAS,CAAC,IAAI;oBAAE,SAAQ;gBAC7D,MAAM,OAAO,CAAC,cAAc,CAAC,gBAAgB,EAAE,SAAS,CAAC,SAAS,CAAC,EAAE,YAAY,CAAC,SAAS,CAAC,CAAC,CAAA;YAC9F,CAAC;QACF,CAAC;IACF,CAAC;CACD,CAAA","sourcesContent":["import { OfflineStorage } from \"../OfflineStorage.js\"\nimport { SqlCipherFacade } from \"../../../../native/common/generatedipc/SqlCipherFacade.js\"\nimport { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { MailBoxTypeRef, UserSettingsGroupRootTypeRef } from \"../../../entities/tutanota/TypeRefs\"\nimport { GENERATED_MIN_ID, getElementId, getListId } from \"../../../common/utils/EntityUtils\"\nimport { GroupInfoTypeRef } from \"../../../entities/sys/TypeRefs\"\nimport { deleteInstancesOfType } from \"../StandardMigrations\"\nimport { GroupType } from \"../../../common/TutanotaConstants\"\n\n/**\n * Migration to re-download mailboxes with importMailStates and importedAttachment\n * lists pointing to a wrong value.\n */\nexport const offline3: OfflineMigration = {\n\tapp: \"offline\",\n\tversion: 3,\n\tasync migrate(storage: OfflineStorage, _: SqlCipherFacade): Promise<void> {\n\t\tlet mailboxes = await storage.getElementsOfType(MailBoxTypeRef)\n\t\tlet needsOfflineDisable = false\n\t\tfor (const mailbox of mailboxes) {\n\t\t\tif (mailbox.importedAttachments !== GENERATED_MIN_ID && mailbox.mailImportStates !== GENERATED_MIN_ID) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// delete the offending instance\n\t\t\tawait storage.deleteIfExists(MailBoxTypeRef, null, mailbox._id)\n\t\t\tneedsOfflineDisable = true\n\t\t}\n\n\t\tif (needsOfflineDisable) {\n\t\t\t// also prevent the user's offline login from requesting the mailbox\n\t\t\t// before it's fully logged in\n\t\t\tawait deleteInstancesOfType(storage, UserSettingsGroupRootTypeRef)\n\t\t\t// required to throw the LoginIncompleteError when trying async login\n\t\t\tconst groupInfos = await storage.getRawListElementsOfType(GroupInfoTypeRef)\n\t\t\tfor (const groupInfo of groupInfos) {\n\t\t\t\tif ((groupInfo as any).groupType !== GroupType.User) continue\n\t\t\t\tawait storage.deleteIfExists(GroupInfoTypeRef, getListId(groupInfo), getElementId(groupInfo))\n\t\t\t}\n\t\t}\n\t},\n}\n"]}