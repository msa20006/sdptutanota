{"version":3,"file":"SendMailModel.js","sourceRoot":"","sources":["../../../../src/common/mailFunctionality/SendMailModel.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAA;AAGvD,OAAO,EACN,cAAc,EACd,wBAAwB,EACxB,WAAW,EAGX,wBAAwB,EAExB,WAAW,GACX,MAAM,sCAAsC,CAAA;AAC7C,OAAO,EAAE,cAAc,EAA6C,mBAAmB,EAA4B,MAAM,oCAAoC,CAAA;AAE7J,OAAO,EACN,aAAa,EACb,UAAU,EACV,WAAW,EACX,KAAK,EAEL,QAAQ,EACR,aAAa,EACb,UAAU,EACV,UAAU,EACV,SAAS,EACT,IAAI,EACJ,OAAO,EACP,UAAU,EACV,MAAM,EACN,WAAW,GACX,MAAM,uBAAuB,CAAA;AAE9B,OAAO,MAAM,MAAM,gBAAgB,CAAA;AAEnC,OAAO,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAA;AAC/H,OAAO,EAAE,iBAAiB,EAAgB,kBAAkB,EAAE,MAAM,wBAAwB,CAAA;AAC5F,OAAO,EAAwC,WAAW,EAAE,MAAM,gCAAgC,CAAA;AAClG,OAAO,EAAE,wBAAwB,EAAE,0BAA0B,EAAE,IAAI,EAAY,SAAS,EAAoC,MAAM,8BAA8B,CAAA;AAMhK,OAAO,EAAoB,kBAAkB,EAAE,MAAM,0CAA0C,CAAA;AAE/F,OAAO,EAAE,gBAAgB,EAAE,wBAAwB,EAAE,MAAM,4CAA4C,CAAA;AACvG,OAAO,EAAE,0BAA0B,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,MAAM,oCAAoC,CAAA;AAC5H,OAAO,EACN,kBAAkB,EAClB,WAAW,EACX,kBAAkB,EAClB,aAAa,EACb,oBAAoB,EACpB,uBAAuB,EACvB,oBAAoB,GACpB,MAAM,kCAAkC,CAAA;AACzC,OAAO,EAAE,gBAAgB,EAAE,MAAM,yCAAyC,CAAA;AAC1E,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAA;AACpD,OAAO,EAAE,aAAa,EAAE,MAAM,mCAAmC,CAAA;AACjE,OAAO,EAAE,yBAAyB,EAAE,MAAM,kDAAkD,CAAA;AAC5F,OAAO,EAAE,uBAAuB,EAAE,MAAM,gDAAgD,CAAA;AACxF,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAA;AAC3D,OAAO,EAAE,iBAAiB,EAAE,MAAM,0CAA0C,CAAA;AAC5E,OAAO,EAAa,QAAQ,EAAE,gBAAgB,EAAE,MAAM,oCAAoC,CAAA;AAC1F,OAAO,EAAE,qBAAqB,EAAE,MAAM,8CAA8C,CAAA;AACpF,OAAO,EAAE,kBAAkB,EAAE,MAAM,qCAAqC,CAAA;AACxE,OAAO,EAAE,yBAAyB,EAAE,MAAM,iCAAiC,CAAA;AAC3E,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAA;AAG1D,OAAO,EAAE,qBAAqB,EAAE,MAAM,0CAA0C,CAAA;AAChF,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAA;AAElE,gBAAgB,EAAE,CAAA;AAElB,MAAM,CAAC,MAAM,2BAA2B,GAAG,EAAE,CAAA;AA8B7C;;GAEG;AACH,MAAM,OAAO,aAAa;IA0CR;IACA;IACA;IACA;IACA;IACC;IACD;IACC;IACA;IACT;IACS;IAnDV,WAAW,GAAgC,IAAI,CAAA;IACvD,aAAa,GAAiB,MAAM,CAAC,IAAI,CAAC,CAAA;IAC1C,kBAAkB,GAAmE,MAAM,CAAC,IAAI,CAAC,CAAA;IACjG,YAAY,GAAe,IAAI,CAAA;IAC/B,kBAAkB,GAAiB,IAAI,GAAG,EAAE,CAAA;IAE5C,kEAAkE;IAClE,KAAK,GAAgB,IAAI,CAAA;IACjB,gBAAgB,kCAAyC;IACzD,OAAO,GAAW,EAAE,CAAA;IACpB,IAAI,GAAW,EAAE,CAAA;IACjB,UAAU,GAAoD,IAAI,GAAG,EAAE,CAAA;IACvE,aAAa,CAAQ;IACrB,YAAY,CAAS;IAE7B,oHAAoH;IAC5G,WAAW,GAAsB,EAAE,CAAA;IAEnC,QAAQ,GAA+B,EAAE,CAAA;IAEjD,qHAAqH;IAC7G,iBAAiB,GAAc,IAAI,CAAA;IAEnC,YAAY,GAAgB,IAAI,CAAA;IAChC,4BAA4B,CAAQ;IACpC,sCAAsC,GAAoB,EAAE,CAAA;IAC5D,aAAa,GAAW,CAAC,CAAA;IACzB,WAAW,GAAW,CAAC,CAAA;IACvB,SAAS,GAAwB,IAAI,GAAG,EAAE,CAAA;IAElD,kDAAkD;IAC1C,kBAAkB,GAAyB,IAAI,CAAA;IAEvD,sGAAsG;IAC9F,WAAW,GAAY,KAAK,CAAA;IAC5B,kBAAkB,GAAG,IAAI,UAAU,CAAO,KAAK,IAAI,EAAE,GAAE,CAAC,CAAC,CAAA;IAEjE;;OAEG;IACH,YACiB,UAAsB,EACtB,MAAoB,EACpB,MAAuB,EACvB,YAA0B,EAC1B,YAA0B,EACzB,eAAgC,EACjC,cAA6B,EAC5B,eAAgC,EAChC,YAA0B,EACnC,iBAAoC,EAC3B,YAA8C;QAV/C,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAc;QACpB,WAAM,GAAN,MAAM,CAAiB;QACvB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,iBAAY,GAAZ,YAAY,CAAc;QACzB,oBAAe,GAAf,eAAe,CAAiB;QACjC,mBAAc,GAAd,cAAc,CAAe;QAC5B,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAc;QACnC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAC3B,iBAAY,GAAZ,YAAY,CAAkC;QAE/D,MAAM,SAAS,GAAG,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAK,CAAA;QAClD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAC5C,IAAI,CAAC,YAAY,GAAG,CAAC,SAAS,CAAC,qBAAqB,CAAA;QAEpD,IAAI,CAAC,4BAA4B,GAAG,wBAAwB,CAAC,SAAS,CAAC,wBAAwB,IAAI,IAAI,CAAC,IAAI,CAAC,CAAA;QAC7G,IAAI,CAAC,4CAA4C,EAAE,CAAA;QAEnD,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;IACjE,CAAC;IAEgB,mBAAmB,GAAG,KAAK,EAAE,OAAwC,EAAE,EAAE;QACzF,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;YAC9B,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;QACrC,CAAC;IACF,CAAC,CAAA;IAED;;;;OAIG;IACK,KAAK,CAAC,4CAA4C;QACzD,IAAI,CAAC,sCAAsC,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QACpI,MAAM,iBAAiB,GAAG,MAAM,oBAAoB,CAAC,IAAI,CAAC,sCAAsC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAC3H,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAClC,MAAM,aAAa,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAW,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;YACpE,IAAI,CAAC,4BAA4B;gBAChC,0BAA0B,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAK,CAAC,wBAAwB,IAAI,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC,CAAA;YAC3I,IAAI,CAAC,sCAAsC,GAAG,iBAAiB,CAAA;QAChE,CAAC;IACF,CAAC;IAED,IAAI;QACH,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAA;IACvC,CAAC;IAED,eAAe;QACd,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAA;IAC3C,CAAC;IAED,eAAe;QACd,OAAO,IAAI,CAAC,YAAY,CAAA;IACzB,CAAC;IAED,mBAAmB;QAClB,OAAO,IAAI,CAAC,gBAAgB,CAAA;IAC7B,CAAC;IAED,WAAW,CAAC,WAAmB,EAAE,QAAgB;QAChD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;QACxB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAA;IAC1C,CAAC;IAED,WAAW,CAAC,WAAmB;QAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,CAAA;IAC7C,CAAC;IAED,UAAU;QACT,OAAO,IAAI,CAAC,OAAO,CAAA;IACpB,CAAC;IAED,UAAU,CAAC,OAAe;QACzB,IAAI,CAAC,wBAAwB,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,CAAA;QACvD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACvB,CAAC;IAED,OAAO;QACN,OAAO,IAAI,CAAC,IAAI,CAAA;IACjB,CAAC;IAED,OAAO,CAAC,IAAY;QACnB,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,CAAA;QACjD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IACjB,CAAC;IAED;;;OAGG;IACH,SAAS,CAAC,aAAqB;QAC9B,sGAAsG;QACtG,aAAa,GAAG,gBAAgB,CAAC,aAAa,CAAC,CAAA;QAC/C,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,aAAa,KAAK,aAAa,CAAC,CAAA;QACnE,IAAI,CAAC,aAAa,GAAG,aAAa,CAAA;IACnC,CAAC;IAED,SAAS;QACR,OAAO,IAAI,CAAC,aAAa,CAAA;IAC1B,CAAC;IAED;;;OAGG;IACH,mBAAmB,CAAC,SAA2B;QAC9C,OAAO,0BAA0B,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;IACpH,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAA;IAC7C,CAAC;IAED;;;OAGG;IACH,wBAAwB,CAAC,UAAmB;QAC3C,IAAI,CAAC,UAAU;YAAE,OAAM;QACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAA;QAC5C,+FAA+F;QAC/F,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;IACzB,CAAC;IAED;;;;;;;;;;OAUG;IACH,gBAAgB,CACf,UAAsB,EACtB,OAAe,EACf,QAAgB,EAChB,WAAuC,EACvC,YAAsB,EACtB,iBAA0B,EAC1B,mBAA6B;QAE7B,IAAI,CAAC,SAAS,EAAE,CAAA;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC;YAChB,gBAAgB,gCAAsB;YACtC,OAAO;YACP,QAAQ;YACR,UAAU;YACV,WAAW;YACX,YAAY,EAAE,YAAY,IAAI,IAAI;YAClC,iBAAiB;YACjB,mBAAmB,EAAE,mBAAmB,IAAI,IAAI;SAChD,CAAC,CAAA;IACH,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAAwB,EAAE,YAA0B;QACxE,IAAI,CAAC,SAAS,EAAE,CAAA;QAEhB,MAAM,EAAE,YAAY,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAA;QACxH,IAAI,iBAAiB,GAAkB,IAAI,CAAA;QAC3C,MAAM,IAAI,CAAC,MAAM;aACf,IAAI,CAAC,wBAAwB,EAAE,YAAY,CAAC,iBAAiB,CAAC;aAC9D,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE;YACZ,iBAAiB,GAAG,EAAE,CAAC,SAAS,CAAA;QACjC,CAAC,CAAC;aACD,KAAK,CACL,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,EAAE;YAC5B,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,CAAC,CAAC,CAAA;QACpD,CAAC,CAAC,CACF,CAAA;QACF,yHAAyH;QACzH,6CAA6C;QAC7C,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,YAAY,CAAC,CAAA;QAEzD,OAAO,IAAI,CAAC,IAAI,CAAC;YAChB,gBAAgB;YAChB,OAAO;YACP,QAAQ;YACR,UAAU;YACV,iBAAiB;YACjB,YAAY,EAAE,YAAY,CAAC,YAAY;YACvC,WAAW;YACX,QAAQ;YACR,YAAY;YACZ,iBAAiB;YACjB,mBAAmB,EAAE,KAAK;SAC1B,CAAC,CAAA;IACH,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,KAAW,EAAE,YAAyB,EAAE,WAA2B,EAAE,YAA0B;QAClH,IAAI,CAAC,SAAS,EAAE,CAAA;QAEhB,IAAI,iBAAiB,GAAkB,IAAI,CAAA;QAC3C,IAAI,YAAY,GAAgB,IAAI,CAAA;QAEpC,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE,KAAK,CAAC,iBAAiB,CAAC,CAAA;QACnG,MAAM,gBAAgB,GAAG,QAAQ,CAAmB,iBAAiB,CAAC,gBAAgB,CAAC,CAAA;QAEvF,IAAI,iBAAiB,CAAC,QAAQ,EAAE,CAAC;YAChC,IAAI,CAAC;gBACJ,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE,iBAAiB,CAAC,QAAQ,CAAC,CAAA;gBAClG,iBAAiB,GAAG,aAAa,CAAC,SAAS,CAAA;gBAC3C,IAAI,aAAa,CAAC,IAAI,EAAE,CAAC;oBACxB,YAAY,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,IAAI,CAAC,CAAA;gBACvE,CAAC;YACF,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACZ,IAAI,CAAC,YAAY,aAAa,EAAE,CAAC;oBAChC,SAAS;gBACV,CAAC;qBAAM,CAAC;oBACP,MAAM,CAAC,CAAA;gBACR,CAAC;YACF,CAAC;QACF,CAAC;QAED,yHAAyH;QACzH,6CAA6C;QAC7C,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,YAAY,CAAC,CAAA;QACzD,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAA;QAC/C,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,YAAY,CAAC,UAAU,CAAA;QAC7E,MAAM,UAAU,GAAe;YAC9B,EAAE,EAAE,YAAY;YAChB,EAAE,EAAE,YAAY;YAChB,GAAG,EAAE,aAAa;SAClB,CAAA;QAED,MAAM,QAAQ,GAAG,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;QACnD,OAAO,IAAI,CAAC,IAAI,CAAC;YAChB,gBAAgB,EAAE,gBAAgB;YAClC,OAAO;YACP,QAAQ;YACR,UAAU;YACV,KAAK;YACL,iBAAiB,EAAE,MAAM,CAAC,OAAO;YACjC,YAAY;YACZ,WAAW;YACX,QAAQ,EAAE,YAAY,CAAC,QAAQ;YAC/B,YAAY;YACZ,iBAAiB;YACjB,mBAAmB,EAAE,KAAK;SAC1B,CAAC,CAAA;IACH,CAAC;IAEO,SAAS;QAChB,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,MAAM,IAAI,gBAAgB,CAAC,0CAA0C,CAAC,CAAA;QACvE,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,KAAK,EAAE,CAAA;IAC3B,CAAC;IAEO,KAAK,CAAC,IAAI,CAAC,EAClB,gBAAgB,EAChB,OAAO,EACP,QAAQ,EACR,KAAK,EACL,UAAU,EACV,iBAAiB,EACjB,YAAY,EACZ,WAAW,EACX,QAAQ,EACR,YAAY,EACZ,iBAAiB,EACjB,mBAAmB,GACT;QACV,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;QACxC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAA;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,IAAI,CAAA;QAE1B,IAAI,EAAiB,CAAA;QACrB,IAAI,EAAiB,CAAA;QACrB,IAAI,GAAkB,CAAA;QAEtB,IAAI,UAAU,YAAY,KAAK,EAAE,CAAC;YACjC,EAAE,GAAG,UAAU,CAAA;YACf,EAAE,GAAG,EAAE,CAAA;YACP,GAAG,GAAG,EAAE,CAAA;QACT,CAAC;aAAM,CAAC;YACP,EAAE,GAAG,UAAU,CAAC,EAAE,IAAI,EAAE,CAAA;YACxB,EAAE,GAAG,UAAU,CAAC,EAAE,IAAI,EAAE,CAAA;YACxB,GAAG,GAAG,UAAU,CAAC,GAAG,IAAI,EAAE,CAAA;QAC3B,CAAC;QAED,qFAAqF;QACrF,kGAAkG;QAClG,0BAA0B;QAC1B,uGAAuG;QACvG,qEAAqE;QACrE,oJAAoJ;QACpJ,2CAA2C;QAC3C,IAAI,CAAC,kBAAkB,GAAG,IAAI,UAAU,CAAC,KAAK,IAAI,EAAE;YACnD,MAAM,OAAO,CAAC,GAAG,CAAC;gBACjB,gBAAgB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC3E,gBAAgB,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC3E,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;aAC7E,CAAC,CAAA;QACH,CAAC,CAAC,CAAA;QACF,+BAA+B;QAC/B,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAA;QAElC,+EAA+E;QAC/E,IAAI,CAAC,aAAa,GAAG,iBAAiB,EAAE,WAAW,EAAE,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAChF,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,qBAAqB,CAAA;QAC5E,IAAI,CAAC,WAAW,GAAG,EAAE,CAAA;QAErB,IAAI,WAAW,EAAE,CAAC;YACjB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QAC9B,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC,CAAA;QAC/H,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,IAAI,CAAA;QACxC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,CAAA;QAClD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAA;QAE5C,qFAAqF;QACrF,IAAI,mBAAmB,EAAE,CAAC;YACzB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;YACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAA;QAC1C,CAAC;aAAM,CAAC;YACP,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAA;QAC1C,CAAC;QAED,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,yDAAyD,CAAC,CAAC,OAAO,EAAE,CAAA;QAEpG,OAAO,IAAI,CAAA;IACZ,CAAC;IAEO,gBAAgB;QACvB,OAAO,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,CAAA;IAC1D,CAAC;IAED,gBAAgB,CAAC,IAAoB;QACpC,OAAO,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAA;IACnD,CAAC;IAED,YAAY;QACX,OAAO,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAA;IAChD,CAAC;IAED,oBAAoB;QACnB,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;IACjF,CAAC;IAED,YAAY;QACX,OAAO,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAA;IAChD,CAAC;IAED,oBAAoB;QACnB,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;IACjF,CAAC;IAED,aAAa;QACZ,OAAO,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,GAAG,CAAC,CAAA;IACjD,CAAC;IAED,qBAAqB;QACpB,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;IAClF,CAAC;IAED,gBAAgB;QACf,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;IAC3D,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,eAAe,CAC5B,SAAyB,EACzB,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAoB,EAClD,cAA2B,WAAW,CAAC,KAAK;QAE5C,IAAI,SAAS,GAAG,wBAAwB,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC,CAAA;QACnF,2CAA2C;QAC3C,IAAI,CAAC,SAAS,EAAE,CAAC;YAChB,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CACvC;gBACC,OAAO;gBACP,IAAI;gBACJ,IAAI;gBACJ,OAAO;aACP,EACD,WAAW,CACX,CAAA;YAED,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YAEhD,SAAS,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE;gBAClD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;oBACrD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAA;gBAC3D,CAAC;qBAAM,CAAC;oBACP,wGAAwG;oBACxG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;gBACzB,CAAC;YACF,CAAC,CAAC,CAAA;YACF,MAAM,SAAS,CAAC,QAAQ,EAAE,CAAA;YAC1B,OAAO,IAAI,CAAA;QACZ,CAAC;QACD,MAAM,SAAS,CAAC,QAAQ,EAAE,CAAA;QAC1B,OAAO,KAAK,CAAA;IACb,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,YAAY,CAAC,SAAyB,EAAE,gBAAkC,EAAE,cAA2B,WAAW,CAAC,KAAK;QAC7H,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,gBAAgB,EAAE,WAAW,CAAC,CAAA;QACrF,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAA;IACxC,CAAC;IAED,YAAY,CAAC,IAAoB,EAAE,OAAe;QACjD,OAAO,wBAAwB,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAA;IACtE,CAAC;IAED,wBAAwB,CAAC,OAAe,EAAE,IAAoB,EAAE,SAAkB,IAAI;QACrF,MAAM,SAAS,GAAG,wBAAwB,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAA;QAChF,IAAI,SAAS,EAAE,CAAC;YACf,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;QAC9C,CAAC;IACF,CAAC;IAED;;;OAGG;IACH,eAAe,CAAC,SAAoB,EAAE,IAAoB,EAAE,SAAkB,IAAI;QACjF,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;QAClD,MAAM,qBAAqB,GAAG,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;QACjE,MAAM,SAAS,GAAG,aAAa,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,qBAAqB,CAAC,CAAA;QACzG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAA;QAExC,IAAI,SAAS,IAAI,MAAM,EAAE,CAAC;YACzB,IAAI,CAAC,kBAAkB,CAAC;gBACvB,KAAK,EAAE,IAAI;gBACX,SAAS;aACT,CAAC,CAAA;QACH,CAAC;QAED,OAAO,SAAS,CAAA;IACjB,CAAC;IAED,OAAO;QACN,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;QAEnE,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;IAC5C,CAAC;IAED;;OAEG;IACH,cAAc;QACb,OAAO,IAAI,CAAC,WAAW,CAAA;IACxB,CAAC;IAED,yDAAyD;IACzD,WAAW,CAAC,KAAgC;QAC3C,IAAI,QAAQ,GAAG,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;QAE3G,MAAM,eAAe,GAAG,mBAAmB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;QAE5D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,eAAe,CAAC,CAAA;QACzD,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QAEzE,IAAI,eAAe,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5C,MAAM,IAAI,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,GAAG,IAAI,GAAG,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACpJ,CAAC;IACF,CAAC;IAED,gBAAgB,CAAC,IAAgB;QAChC,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAA;IAC9D,CAAC;IAED,aAAa;QACZ,OAAO,aAAa,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAA;IACvE,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,KAAK,CAAA;IAClB,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,IAAY,EAAE,WAA6C,EAAE,KAAW;QACjG,OAAO,IAAI,CAAC,UAAU;aACpB,WAAW,CAAC;YACZ,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;YAC1B,IAAI,EAAE,IAAI;YACV,iBAAiB,EAAE,IAAI,CAAC,aAAa;YACrC,UAAU,EAAE,IAAI,CAAC,aAAa,EAAE;YAChC,YAAY,EAAE,MAAM,IAAI,CAAC,oBAAoB,EAAE;YAC/C,YAAY,EAAE,MAAM,IAAI,CAAC,oBAAoB,EAAE;YAC/C,aAAa,EAAE,MAAM,IAAI,CAAC,qBAAqB,EAAE;YACjD,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,IAAI,CAAC,cAAc,EAAE;YACnC,KAAK,EAAE,KAAK;SACZ,CAAC;aACD,KAAK,CACL,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,EAAE;YAC1B,OAAO,CAAC,GAAG,CAAC,wCAAwC,EAAE,CAAC,CAAC,CAAA;YACxD,MAAM,IAAI,SAAS,CAAC,0BAA0B,CAAC,CAAA;QAChD,CAAC,CAAC,CACF;aACA,KAAK,CACL,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,EAAE;YAC5B,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAA;YACvD,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;QACnE,CAAC,CAAC,CACF,CAAA;IACH,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,IAAY,EAAE,WAA6C,EAAE,UAAsB;QAC5G,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;YAClC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;YAC1B,QAAQ,EAAE,IAAI;YACd,iBAAiB,EAAE,IAAI,CAAC,aAAa;YACrC,UAAU,EAAE,IAAI,CAAC,aAAa,EAAE;YAChC,YAAY,EAAE,MAAM,IAAI,CAAC,oBAAoB,EAAE;YAC/C,YAAY,EAAE,MAAM,IAAI,CAAC,oBAAoB,EAAE;YAC/C,aAAa,EAAE,MAAM,IAAI,CAAC,qBAAqB,EAAE;YACjD,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,IAAI,CAAC,cAAc,EAAE;YACnC,QAAQ,EAAE,MAAM,IAAI,CAAC,gBAAgB,EAAE;YACvC,MAAM,EAAE,UAAU;SAClB,CAAC,CAAA;IACH,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE,CAAA;IAC/D,CAAC;IAED,sBAAsB;QACrB,OAAO,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,0BAA0B,EAAE,CAAA;IAC9D,CAAC;IAED,eAAe,CAAC,YAAqB;QACpC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,YAAY,KAAK,YAAY,CAAC,CAAA;QACjE,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;IACjC,CAAC;IAED,0BAA0B;QACzB,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,4CAA2B,CAAC,CAAA;IAC3E,CAAC;IAED,qBAAqB;QACpB,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,4CAA2B,CAAC,CAAA;IAC7E,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,KAAK,CAAC,IAAI,CACT,UAAsB,EACtB,kBAAgE,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAC5F,cAA4E,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EACvF,uBAAuC,kBAAkB;QAEzD,oGAAoG;QACpG,yHAAyH;QACzH,iEAAiE;QACjE,EAAE;QACF,yGAAyG;QACzG,IAAI,CAAC,YAAY,EAAE,CAAA;QAEnB,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,KAAK,mBAAmB,EAAE,CAAC;YACvH,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAA;YAC3C,OAAO,IAAI,CAAA;QACZ,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/G,MAAM,IAAI,SAAS,CAAC,kBAAkB,CAAC,CAAA;QACxC,CAAC;QAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,MAAM,CAAA;QAEpF,+BAA+B;QAC/B,IAAI,oBAAoB,IAAI,2BAA2B,IAAI,CAAC,CAAC,MAAM,eAAe,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC;YAC3G,OAAO,KAAK,CAAA;QACb,CAAC;QAED,6BAA6B;QAC7B,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,eAAe,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC;YACjF,OAAO,KAAK,CAAA;QACb,CAAC;QAED,MAAM,SAAS,GAAG,KAAK,IAAI,EAAE;YAC5B,qDAAqD;YACrD,6CAA6C;YAC7C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAA;YAEzD,wDAAwD;YACxD,IAAI,IAAI,CAAC,sBAAsB,EAAE,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;gBAC7G,MAAM,IAAI,SAAS,CAAC,yBAAyB,CAAC,CAAA;YAC/C,CAAC;YAED,6BAA6B;YAC7B,IAAI,IAAI,CAAC,sBAAsB,EAAE,IAAI,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC,MAAM,eAAe,CAAC,sCAAsC,CAAC,CAAC,EAAE,CAAC;gBACtI,OAAO,KAAK,CAAA;YACb,CAAC;YAED,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA;YACtC,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;YACrC,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,iBAAiB,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,4BAA4B,CAAC,CAAA;YAC5H,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;YAC/B,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAA;YACnC,OAAO,IAAI,CAAA;QACZ,CAAC,CAAA;QAED,OAAO,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,wBAAwB,EAAE,SAAS,EAAE,CAAC;aAC/F,KAAK,CACL,OAAO,CAAC,WAAW,EAAE,GAAG,EAAE;YACzB,MAAM,IAAI,SAAS,CAAC,0BAA0B,CAAC,CAAA;QAChD,CAAC,CAAC,CACF,CAAC,2BAA2B;aAC5B,KAAK,CACL,OAAO,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACvC,MAAM,IAAI,SAAS,CAAC,qBAAqB,CAAC,CAAA;QAC3C,CAAC,CAAC,CACF;aACA,KAAK,CACL,OAAO,CAAC,uBAAuB,EAAE,CAAC,CAAC,EAAE,EAAE;YACtC,IAAI,UAAU,qCAA2B,EAAE,CAAC;gBAC3C,4HAA4H;gBAC5H,MAAM,CAAC,CAAA;YACR,CAAC;iBAAM,CAAC;gBACP,IAAI,iBAAiB,GAAG,CAAC,CAAC,OAAO,CAAA;gBACjC,MAAM,IAAI,SAAS,CAClB,IAAI,CAAC,eAAe,CACnB,WAAW,EACX,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,uBAAuB,CAAC,GAAG,IAAI,GAAG,iBAAiB,CAChH,CACD,CAAA;YACF,CAAC;QACF,CAAC,CAAC,CACF;aACA,KAAK,CACL,OAAO,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAClC,MAAM,IAAI,SAAS,CAAC,oBAAoB,CAAC,CAAA;QAC1C,CAAC,CAAC,CACF;aACA,KAAK,CACL,OAAO,CAAC,kBAAkB,EAAE,CAAC,CAAC,EAAE,EAAE;YACjC,iIAAiI;YACjI,OAAO,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBACnF,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,CAAC,CAAC,CAAA;gBACtD,OAAO,KAAK,CAAA;YACb,CAAC,CAAC,CAAA;QACH,CAAC,CAAC,CACF;aACA,KAAK,CACL,OAAO,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC/B,MAAM,IAAI,SAAS,CAAC,wBAAwB,CAAC,CAAA;QAC9C,CAAC,CAAC,CACF;aACA,KAAK,CACL,OAAO,CAAC,uBAAuB,EAAE,GAAG,EAAE;YACrC,MAAM,IAAI,SAAS,CAAC,0BAA0B,CAAC,CAAA;QAChD,CAAC,CAAC,CACF,CAAA;IACH,CAAC;IAED;;;;;OAKG;IACH,oBAAoB;QACnB,MAAM,uBAAuB,GAAG,IAAI,CAAC,aAAa,EAAE;aAClD,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;aACjD,MAAM,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,EAAE,yBAAyB,CAAC,CAAA;QAC3G,OAAO,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CAAA;IAClD,CAAC;IAED,SAAS,CAAC,eAAwB,EAAE,UAAsB;QACzD,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,EAAE,CAAC;YACrC,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;gBAC3D,IAAI,CAAC;oBACJ,MAAM,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,UAAU,CAAC,CAAA;gBACpD,CAAC;wBAAS,CAAC;oBACV,kEAAkE;oBAClE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAA;gBAC/B,CAAC;gBACD,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;oBAC/C,IAAI,CAAC,WAAW,GAAG,KAAK,CAAA;oBACxB,MAAM,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,UAAU,CAAC,CAAA;gBAClD,CAAC;YACF,CAAC,CAAC,CAAA;QACH,CAAC;aAAM,CAAC;YACP,IAAI,CAAC,WAAW,GAAG,IAAI,CAAA;QACxB,CAAC;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAA;IAC/B,CAAC;IAED;;;;;;;OAOG;IACK,KAAK,CAAC,WAAW,CAAC,eAAwB,EAAE,UAAsB;QACzE,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,EAAE,CAAC;YAC9B,MAAM,IAAI,gBAAgB,CAAC,uCAAuC,CAAC,CAAA;QACpE,CAAC;QACD,MAAM,IAAI,CAAC,WAAW,CAAA;QACtB,IAAI,CAAC;YACJ,MAAM,WAAW,GAAG,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAA;YAE7D,gFAAgF;YAChF,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC,CAAA;YAClE,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,EAAE,CAAA;YACvC,MAAM,IAAI,GAAG,aAAa,CAAC,YAAY,CAAC,gBAAgB,EAAE;gBACzD,qEAAqE;gBACrE,iDAAiD;gBACjD,oBAAoB,EAAE,KAAK;gBAC3B,iDAAiD;gBACjD,kBAAkB,EAAE,IAAI;gBACxB,0DAA0D;gBAC1D,6BAA6B,EAAE,KAAK;aACpC,CAAC,CAAC,IAAI,CAAA;YAEP,IAAI,CAAC,KAAK;gBACT,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC1D,CAAC,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,EAAE,UAAU,CAAC;oBACvD,CAAC,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;YAEzD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACxE,MAAM,cAAc,GAAG,MAAM,UAAU,CAAC,aAAa,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAe,WAAW,EAAE,MAAM,CAAC,EAAE;gBACvH,WAAW,EAAE,CAAC;aACd,CAAC,CAAA;YAEF,IAAI,CAAC,WAAW,GAAG,EAAE,CAAA,CAAC,wEAAwE;YAC9F,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAA;YAEhC,uFAAuF;YACvF,+CAA+C;YAC/C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAA;QAC3C,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,IAAI,CAAC,YAAY,oBAAoB,EAAE,CAAC;gBACvC,MAAM,IAAI,SAAS,CAAC,qBAAqB,CAAC,CAAA;YAC3C,CAAC;iBAAM,IAAI,CAAC,YAAY,qBAAqB,EAAE,CAAC;gBAC/C,MAAM,IAAI,SAAS,CAAC,sBAAsB,CAAC,CAAA;YAC5C,CAAC;iBAAM,IAAI,CAAC,YAAY,iBAAiB,EAAE,CAAC;gBAC3C,MAAM,IAAI,SAAS,CAAC,wBAAwB,CAAC,CAAA;YAC9C,CAAC;iBAAM,IAAI,CAAC,YAAY,uBAAuB,EAAE,CAAC;gBACjD,MAAM,IAAI,SAAS,CAAC,0BAA0B,CAAC,CAAA;YAChD,CAAC;iBAAM,CAAC;gBACP,MAAM,CAAC,CAAA;YACR,CAAC;QACF,CAAC;IACF,CAAC;IAEO,gBAAgB,CAAC,IAAY;QACpC,MAAM,MAAM,GAAG,cAAc,CAAA;QAC7B,MAAM,CAAC,GAAG,kBAAkB,CAAC;YAC5B,GAAG,EAAE,CAAC,MAAM,EAAE,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACnD,WAAW,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK;YAC7C,IAAI,EAAE,YAAY,IAAI,CAAC,UAAU,EAAE,OAAO,IAAI,EAAE;YAChD,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,IAAI;YACX,QAAQ,EAAE,IAAI;SACd,CAAC,CAAA;QACF,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC,CAAC,CAAA;IAClI,CAAC;IAED,yCAAyC;QACxC,OAAO,IAAI,CAAC,sCAAsC,CAAA;IACnD,CAAC;IAED,mCAAmC;QAClC,OAAO,IAAI,CAAC,4BAA4B,CAAA;IACzC,CAAC;IAED,mCAAmC,CAAC,IAAY;QAC/C,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,4BAA4B,KAAK,IAAI,CAAC,CAAA;QACzE,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAA;QACxC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAA;IACpC,CAAC;IAEO,sBAAsB;QAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAA;QAE7B,IAAI,KAAK,CAAC,wBAAwB,KAAK,IAAI,CAAC,4BAA4B,EAAE,CAAC;YAC1E,KAAK,CAAC,wBAAwB,GAAG,IAAI,CAAC,4BAA4B,CAAA;YAElE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;QAC1B,CAAC;IACF,CAAC;IAEO,kBAAkB;QACzB,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,6BAAmB,IAAI,IAAI,CAAC,gBAAgB,qCAA2B,EAAE,CAAC;gBACxG,IAAI,CAAC,YAAY,CAAC,SAAS,4BAAkB,CAAA;YAC9C,CAAC;iBAAM,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,6BAAmB,IAAI,IAAI,CAAC,gBAAgB,uCAA6B,EAAE,CAAC;gBACjH,IAAI,CAAC,YAAY,CAAC,SAAS,8BAAoB,CAAA;YAChD,CAAC;iBAAM,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,gCAAsB,IAAI,IAAI,CAAC,gBAAgB,qCAA2B,EAAE,CAAC;gBAClH,IAAI,CAAC,YAAY,CAAC,SAAS,oCAA0B,CAAA;YACtD,CAAC;iBAAM,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,8BAAoB,IAAI,IAAI,CAAC,gBAAgB,uCAA6B,EAAE,CAAC;gBAClH,IAAI,CAAC,YAAY,CAAC,SAAS,oCAA0B,CAAA;YACtD,CAAC;iBAAM,CAAC;gBACP,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;YACzB,CAAC;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAA;QACjF,CAAC;aAAM,CAAC;YACP,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;QACzB,CAAC;IACF,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc,CAAC,kBAA+B;QAC3D,KAAK,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,kBAAkB,EAAE,CAAC;YAC7D,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;gBACrB,SAAQ;YACT,CAAC;YAED,MAAM,yBAAyB,GAAG,IAAI,4CAA2B,IAAI,IAAI,CAAC,cAAc,EAAE,CAAA;YAE1F,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,mBAAmB,IAAI,yBAAyB,CAAC,EAAE,CAAC;gBAC3F,IAAI,yBAAyB,EAAE,CAAC;oBAC/B,OAAO,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAA;gBAC7D,CAAC;gBAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAA;gBACzD,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;YACzC,CAAC;iBAAM,IAAI,OAAO,CAAC,GAAG,IAAI,yBAAyB,IAAI,OAAO,CAAC,iBAAiB,KAAK,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC;gBACvH,OAAO,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAA;gBAC5D,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;YAClC,CAAC;QACF,CAAC;IACF,CAAC;IAED,aAAa;QACZ,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAA;IACpF,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,yBAAyB;QAC9B,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAA;QACxC,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,KAAK,CACtF,OAAO,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAClC,MAAM,IAAI,yBAAyB,CAAC,EAAE,CAAC,CAAA;QACxC,CAAC,CAAC,CACF,CAAA;IACF,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,MAAwB;QAC/C,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,MAAM,CAAA;QACxD,IAAI,SAAS,GAAY,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,UAAU,CAAC,CAAA;QAChE,IAAI,OAAO,GAAG,KAAK,CAAA;QAEnB,IAAI,kBAAkB,CAAC,cAAc,EAAE,MAAM,CAAC,EAAE,CAAC;YAChD,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAA;YAExC,IAAI,SAAS,mCAAyB,EAAE,CAAC;gBACxC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;oBAC5D,KAAK,MAAM,SAAS,IAAI,WAAW,CAAC,cAAc,CAAC,EAAE,CAAC;wBACrD,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,MAAM,CACvD,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,IAAI,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAChF,CAAA;wBACD,KAAK,MAAM,SAAS,IAAI,QAAQ,EAAE,CAAC;4BAClC,gFAAgF;4BAChF,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;gCACpF,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,CAAA;4BACtE,CAAC;iCAAM,CAAC;gCACP,iCAAiC;gCACjC,SAAS,CAAC,OAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAA;gCACjD,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;gCAC7B,OAAO,GAAG,IAAI,CAAA;4BACf,CAAC;wBACF,CAAC;oBACF,CAAC;gBACF,CAAC,CAAC,CAAA;YACH,CAAC;iBAAM,IAAI,SAAS,mCAAyB,EAAE,CAAC;gBAC/C,KAAK,MAAM,SAAS,IAAI,WAAW,CAAC,cAAc,CAAC,EAAE,CAAC;oBACrD,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAA;oBAEnD,MAAM,QAAQ,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,IAAI,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,IAAI,KAAK,CAAC,CAAA;oBAE7H,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE,CAAC;wBAC1B,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAA;oBAC9D,CAAC;gBACF,CAAC;YACF,CAAC;YAED,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAA;QACpC,CAAC;aAAM,IAAI,kBAAkB,CAAC,yBAAyB,EAAE,MAAM,CAAC,EAAE,CAAC;YAClE,IAAI,CAAC,4CAA4C,EAAE,CAAA;QACpD,CAAC;aAAM,IAAI,kBAAkB,CAAC,wBAAwB,EAAE,MAAM,CAAC,IAAI,SAAS,mCAAyB,EAAE,CAAC;YACvG,IAAI,CAAC,iBAAiB,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE,MAAM,CAAC,UAAU,CAAC,CAAA;QAC7F,CAAC;QACD,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAA;QACtC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IACzB,CAAC;IAED,uBAAuB,CAAC,GAAkB;QACzC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAA;IACxB,CAAC;IAED,oBAAoB;QACnB,IAAI,CAAC,IAAI,CAAC,YAAY;YAAE,OAAO,KAAK,CAAA;QAEpC,OAAO,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;IACvF,CAAC;CACD;AAED;;;;;;;;;;GAUG;AACH,SAAS,gBAAgB,CAAC,aAA8C;IACvE,2IAA2I;IAC3I,8HAA8H;IAC9H,MAAM,WAAW,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAA;IACrJ,OAAO,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;AAC3F,CAAC","sourcesContent":["import { assertMainOrNode } from \"../api/common/Env.js\"\nimport { DataFile } from \"../api/common/DataFile.js\"\nimport { FileReference } from \"../api/common/utils/FileUtils.js\"\nimport {\n\tContactTypeRef,\n\tConversationEntryTypeRef,\n\tFileTypeRef,\n\tMail,\n\tMailboxProperties,\n\tMailboxPropertiesTypeRef,\n\tMailDetails,\n\tMailTypeRef,\n} from \"../api/entities/tutanota/TypeRefs.js\"\nimport { ApprovalStatus, ConversationType, MailSetKind, MailMethod, MAX_ATTACHMENT_SIZE, OperationType, ReplyType } from \"../api/common/TutanotaConstants.js\"\nimport { PartialRecipient, Recipient, RecipientList, Recipients, RecipientType } from \"../api/common/recipients/Recipient.js\"\nimport {\n\tassertNotNull,\n\tcleanMatch,\n\tdeduplicate,\n\tdefer,\n\tDeferredObject,\n\tdowncast,\n\tfindAndRemove,\n\tgetFromMap,\n\tLazyLoaded,\n\tneverNull,\n\tnoOp,\n\tofClass,\n\tpromiseMap,\n\tremove,\n\ttypedValues,\n} from \"@tutao/tutanota-utils\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport type { File as TutanotaFile } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { checkAttachmentSize, getDefaultSender, getTemplateLanguages, isUserEmail, RecipientField } from \"./SharedMailUtils.js\"\nimport { cloneInlineImages, InlineImages, revokeInlineImages } from \"./inlineImagesUtils.js\"\nimport { RecipientsModel, ResolvableRecipient, ResolveMode } from \"../api/main/RecipientsModel.js\"\nimport { getAvailableLanguageCode, getSubstitutedLanguageCode, lang, Language, languages, TranslationKey, MaybeTranslation } from \"../misc/LanguageViewModel.js\"\nimport { MailFacade } from \"../api/worker/facades/lazy/MailFacade.js\"\nimport { EntityClient } from \"../api/common/EntityClient.js\"\nimport { LoginController } from \"../api/main/LoginController.js\"\nimport { EventController } from \"../api/main/EventController.js\"\nimport { DateProvider } from \"../api/common/DateProvider.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../api/common/utils/EntityUpdateUtils.js\"\nimport { UserController } from \"../api/main/UserController.js\"\nimport { cleanMailAddress, findRecipientWithAddress } from \"../api/common/utils/CommonCalendarUtils.js\"\nimport { getPasswordStrengthForUser, isSecurePassword, PASSWORD_MIN_SECURE_VALUE } from \"../misc/passwords/PasswordUtils.js\"\nimport {\n\tAccessBlockedError,\n\tLockedError,\n\tNotAuthorizedError,\n\tNotFoundError,\n\tPayloadTooLargeError,\n\tPreconditionFailedError,\n\tTooManyRequestsError,\n} from \"../api/common/error/RestError.js\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\nimport { UserError } from \"../api/main/UserError.js\"\nimport { getSenderName } from \"../misc/MailboxPropertiesUtils.js\"\nimport { RecipientNotResolvedError } from \"../api/common/error/RecipientNotResolvedError.js\"\nimport { RecipientsNotFoundError } from \"../api/common/error/RecipientsNotFoundError.js\"\nimport { checkApprovalStatus } from \"../misc/LoginUtils.js\"\nimport { FileNotFoundError } from \"../api/common/error/FileNotFoundError.js\"\nimport { getListId, isSameId, stringToCustomId } from \"../api/common/utils/EntityUtils.js\"\nimport { MailBodyTooLargeError } from \"../api/common/error/MailBodyTooLargeError.js\"\nimport { createApprovalMail } from \"../api/entities/monitor/TypeRefs.js\"\nimport { CustomerPropertiesTypeRef } from \"../api/entities/sys/TypeRefs.js\"\nimport { isMailAddress } from \"../misc/FormatValidator.js\"\nimport { MailboxDetail, MailboxModel } from \"./MailboxModel.js\"\nimport { ContactModel } from \"../contactsFunctionality/ContactModel.js\"\nimport { getContactDisplayName } from \"../contactsFunctionality/ContactUtils.js\"\nimport { getMailBodyText } from \"../api/common/CommonMailUtils.js\"\n\nassertMainOrNode()\n\nexport const TOO_MANY_VISIBLE_RECIPIENTS = 10\n\nexport type Attachment = TutanotaFile | DataFile | FileReference\n\nexport type InitAsResponseArgs = {\n\tpreviousMail: Mail\n\tconversationType: ConversationType\n\tsenderMailAddress: string\n\trecipients: Recipients\n\tattachments: TutanotaFile[]\n\tsubject: string\n\tbodyText: string\n\treplyTos: RecipientList\n}\n\ntype InitArgs = {\n\tconversationType: ConversationType\n\tsubject: string\n\tbodyText: string\n\trecipients: Recipients\n\tconfidential: boolean | null\n\tdraft?: Mail | null\n\tsenderMailAddress?: string\n\tattachments?: ReadonlyArray<Attachment>\n\treplyTos?: RecipientList\n\tpreviousMail?: Mail | null\n\tpreviousMessageId?: string | null\n\tinitialChangedState: boolean | null\n}\n\n/**\n * Model which allows sending mails interactively - including resolving of recipients and handling of drafts.\n */\nexport class SendMailModel {\n\tprivate initialized: DeferredObject<void> | null = null\n\tonMailChanged: Stream<null> = stream(null)\n\tonRecipientDeleted: Stream<{ field: RecipientField; recipient: Recipient } | null> = stream(null)\n\tonBeforeSend: () => void = noOp\n\tloadedInlineImages: InlineImages = new Map()\n\n\t// Isn't private because used by MinimizedEditorOverlay, refactor?\n\tdraft: Mail | null = null\n\tprivate conversationType: ConversationType = ConversationType.NEW\n\tprivate subject: string = \"\"\n\tprivate body: string = \"\"\n\tprivate recipients: Map<RecipientField, Array<ResolvableRecipient>> = new Map()\n\tprivate senderAddress: string\n\tprivate confidential: boolean\n\n\t// contains either Files from Tutanota or DataFiles of locally loaded files. these map 1:1 to the _attachmentButtons\n\tprivate attachments: Array<Attachment> = []\n\n\tprivate replyTos: Array<ResolvableRecipient> = []\n\n\t// only needs to be the correct value if this is a new email. if we are editing a draft, conversationType is not used\n\tprivate previousMessageId: Id | null = null\n\n\tprivate previousMail: Mail | null = null\n\tprivate selectedNotificationLanguage: string\n\tprivate availableNotificationTemplateLanguages: Array<Language> = []\n\tprivate mailChangedAt: number = 0\n\tprivate mailSavedAt: number = 1\n\tprivate passwords: Map<string, string> = new Map()\n\n\t// The promise for the draft currently being saved\n\tprivate currentSavePromise: Promise<void> | null = null\n\n\t// If saveDraft is called while the previous call is still running, then flag to call again afterwards\n\tprivate doSaveAgain: boolean = false\n\tprivate recipientsResolved = new LazyLoaded<void>(async () => {})\n\n\t/**\n\t * creates a new empty draft message. calling an init method will fill in all the blank data\n\t */\n\tconstructor(\n\t\tpublic readonly mailFacade: MailFacade,\n\t\tpublic readonly entity: EntityClient,\n\t\tpublic readonly logins: LoginController,\n\t\tpublic readonly mailboxModel: MailboxModel,\n\t\tpublic readonly contactModel: ContactModel,\n\t\tprivate readonly eventController: EventController,\n\t\tpublic readonly mailboxDetails: MailboxDetail,\n\t\tprivate readonly recipientsModel: RecipientsModel,\n\t\tprivate readonly dateProvider: DateProvider,\n\t\tprivate mailboxProperties: MailboxProperties,\n\t\tprivate readonly needNewDraft: (mail: Mail) => Promise<boolean>,\n\t) {\n\t\tconst userProps = logins.getUserController().props\n\t\tthis.senderAddress = this.getDefaultSender()\n\t\tthis.confidential = !userProps.defaultUnconfidential\n\n\t\tthis.selectedNotificationLanguage = getAvailableLanguageCode(userProps.notificationMailLanguage || lang.code)\n\t\tthis.updateAvailableNotificationTemplateLanguages()\n\n\t\tthis.eventController.addEntityListener(this.entityEventReceived)\n\t}\n\n\tprivate readonly entityEventReceived = async (updates: ReadonlyArray<EntityUpdateData>) => {\n\t\tfor (const update of updates) {\n\t\t\tawait this.handleEntityEvent(update)\n\t\t}\n\t}\n\n\t/**\n\t * Sort list of all languages alphabetically\n\t * then we see if the user has custom notification templates\n\t * in which case we replace the list with just the templates that the user has specified\n\t */\n\tprivate async updateAvailableNotificationTemplateLanguages(): Promise<void> {\n\t\tthis.availableNotificationTemplateLanguages = languages.slice().sort((a, b) => lang.get(a.textId).localeCompare(lang.get(b.textId)))\n\t\tconst filteredLanguages = await getTemplateLanguages(this.availableNotificationTemplateLanguages, this.entity, this.logins)\n\t\tif (filteredLanguages.length > 0) {\n\t\t\tconst languageCodes = filteredLanguages.map((l: Language) => l.code)\n\t\t\tthis.selectedNotificationLanguage =\n\t\t\t\tgetSubstitutedLanguageCode(this.logins.getUserController().props.notificationMailLanguage || lang.code, languageCodes) || languageCodes[0]\n\t\t\tthis.availableNotificationTemplateLanguages = filteredLanguages\n\t\t}\n\t}\n\n\tuser(): UserController {\n\t\treturn this.logins.getUserController()\n\t}\n\n\tisSharedMailbox(): boolean {\n\t\treturn !this.mailboxDetails.mailGroup.user\n\t}\n\n\tgetPreviousMail(): Mail | null {\n\t\treturn this.previousMail\n\t}\n\n\tgetConversationType(): ConversationType {\n\t\treturn this.conversationType\n\t}\n\n\tsetPassword(mailAddress: string, password: string) {\n\t\tthis.onMailChanged(null)\n\t\tthis.passwords.set(mailAddress, password)\n\t}\n\n\tgetPassword(mailAddress: string): string {\n\t\treturn this.passwords.get(mailAddress) || \"\"\n\t}\n\n\tgetSubject(): string {\n\t\treturn this.subject\n\t}\n\n\tsetSubject(subject: string) {\n\t\tthis.markAsChangedIfNecessary(subject !== this.subject)\n\t\tthis.subject = subject\n\t}\n\n\tgetBody(): string {\n\t\treturn this.body\n\t}\n\n\tsetBody(body: string) {\n\t\tthis.markAsChangedIfNecessary(this.body !== body)\n\t\tthis.body = body\n\t}\n\n\t/**\n\t * set the mail address used to send the mail.\n\t * @param senderAddress the mail address that will show up lowercased in the sender field of the sent mail.\n\t */\n\tsetSender(senderAddress: string) {\n\t\t// we can (and should) do this because we lowercase all addresses on signup and when creating aliases.\n\t\tsenderAddress = cleanMailAddress(senderAddress)\n\t\tthis.markAsChangedIfNecessary(this.senderAddress !== senderAddress)\n\t\tthis.senderAddress = senderAddress\n\t}\n\n\tgetSender(): string {\n\t\treturn this.senderAddress\n\t}\n\n\t/**\n\t * Returns the strength indicator for the recipients password\n\t * @returns value between 0 and 100\n\t */\n\tgetPasswordStrength(recipient: PartialRecipient): number {\n\t\treturn getPasswordStrengthForUser(this.getPassword(recipient.address), recipient, this.mailboxDetails, this.logins)\n\t}\n\n\thasMailChanged(): boolean {\n\t\treturn this.mailChangedAt > this.mailSavedAt\n\t}\n\n\t/**\n\t * update the changed state of the mail.\n\t * will only be reset when saving.\n\t */\n\tmarkAsChangedIfNecessary(hasChanged: boolean) {\n\t\tif (!hasChanged) return\n\t\tthis.mailChangedAt = this.dateProvider.now()\n\t\t// if this method is called wherever state gets changed, onMailChanged should function properly\n\t\tthis.onMailChanged(null)\n\t}\n\n\t/**\n\t *\n\t * @param recipients\n\t * @param subject\n\t * @param bodyText\n\t * @param attachments\n\t * @param confidential\n\t * @param senderMailAddress\n\t * @param initialChangedState\n\t * @returns {Promise<SendMailModel>}\n\t */\n\tinitWithTemplate(\n\t\trecipients: Recipients,\n\t\tsubject: string,\n\t\tbodyText: string,\n\t\tattachments?: ReadonlyArray<Attachment>,\n\t\tconfidential?: boolean,\n\t\tsenderMailAddress?: string,\n\t\tinitialChangedState?: boolean,\n\t): Promise<SendMailModel> {\n\t\tthis.startInit()\n\t\treturn this.init({\n\t\t\tconversationType: ConversationType.NEW,\n\t\t\tsubject,\n\t\t\tbodyText,\n\t\t\trecipients,\n\t\t\tattachments,\n\t\t\tconfidential: confidential ?? null,\n\t\t\tsenderMailAddress,\n\t\t\tinitialChangedState: initialChangedState ?? null,\n\t\t})\n\t}\n\n\tasync initAsResponse(args: InitAsResponseArgs, inlineImages: InlineImages): Promise<SendMailModel> {\n\t\tthis.startInit()\n\n\t\tconst { previousMail, conversationType, senderMailAddress, recipients, attachments, subject, bodyText, replyTos } = args\n\t\tlet previousMessageId: string | null = null\n\t\tawait this.entity\n\t\t\t.load(ConversationEntryTypeRef, previousMail.conversationEntry)\n\t\t\t.then((ce) => {\n\t\t\t\tpreviousMessageId = ce.messageId\n\t\t\t})\n\t\t\t.catch(\n\t\t\t\tofClass(NotFoundError, (e) => {\n\t\t\t\t\tconsole.log(\"could not load conversation entry\", e)\n\t\t\t\t}),\n\t\t\t)\n\t\t// if we reuse the same image references, changing the displayed mail in mail view will cause the minimized draft to lose\n\t\t// that reference, because it will be revoked\n\t\tthis.loadedInlineImages = cloneInlineImages(inlineImages)\n\n\t\treturn this.init({\n\t\t\tconversationType,\n\t\t\tsubject,\n\t\t\tbodyText,\n\t\t\trecipients,\n\t\t\tsenderMailAddress,\n\t\t\tconfidential: previousMail.confidential,\n\t\t\tattachments,\n\t\t\treplyTos,\n\t\t\tpreviousMail,\n\t\t\tpreviousMessageId,\n\t\t\tinitialChangedState: false,\n\t\t})\n\t}\n\n\tasync initWithDraft(draft: Mail, draftDetails: MailDetails, attachments: TutanotaFile[], inlineImages: InlineImages): Promise<SendMailModel> {\n\t\tthis.startInit()\n\n\t\tlet previousMessageId: string | null = null\n\t\tlet previousMail: Mail | null = null\n\n\t\tconst conversationEntry = await this.entity.load(ConversationEntryTypeRef, draft.conversationEntry)\n\t\tconst conversationType = downcast<ConversationType>(conversationEntry.conversationType)\n\n\t\tif (conversationEntry.previous) {\n\t\t\ttry {\n\t\t\t\tconst previousEntry = await this.entity.load(ConversationEntryTypeRef, conversationEntry.previous)\n\t\t\t\tpreviousMessageId = previousEntry.messageId\n\t\t\t\tif (previousEntry.mail) {\n\t\t\t\t\tpreviousMail = await this.entity.load(MailTypeRef, previousEntry.mail)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t// ignore\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if we reuse the same image references, changing the displayed mail in mail view will cause the minimized draft to lose\n\t\t// that reference, because it will be revoked\n\t\tthis.loadedInlineImages = cloneInlineImages(inlineImages)\n\t\tconst { confidential, sender, subject } = draft\n\t\tconst { toRecipients, ccRecipients, bccRecipients } = draftDetails.recipients\n\t\tconst recipients: Recipients = {\n\t\t\tto: toRecipients,\n\t\t\tcc: ccRecipients,\n\t\t\tbcc: bccRecipients,\n\t\t}\n\n\t\tconst bodyText = getMailBodyText(draftDetails.body)\n\t\treturn this.init({\n\t\t\tconversationType: conversationType,\n\t\t\tsubject,\n\t\t\tbodyText,\n\t\t\trecipients,\n\t\t\tdraft,\n\t\t\tsenderMailAddress: sender.address,\n\t\t\tconfidential,\n\t\t\tattachments,\n\t\t\treplyTos: draftDetails.replyTos,\n\t\t\tpreviousMail,\n\t\t\tpreviousMessageId,\n\t\t\tinitialChangedState: false,\n\t\t})\n\t}\n\n\tprivate startInit() {\n\t\tif (this.initialized) {\n\t\t\tthrow new ProgrammingError(\"trying to initialize SendMailModel twice\")\n\t\t}\n\t\tthis.initialized = defer()\n\t}\n\n\tprivate async init({\n\t\tconversationType,\n\t\tsubject,\n\t\tbodyText,\n\t\tdraft,\n\t\trecipients,\n\t\tsenderMailAddress,\n\t\tconfidential,\n\t\tattachments,\n\t\treplyTos,\n\t\tpreviousMail,\n\t\tpreviousMessageId,\n\t\tinitialChangedState,\n\t}: InitArgs): Promise<SendMailModel> {\n\t\tthis.conversationType = conversationType\n\t\tthis.subject = subject\n\t\tthis.body = bodyText\n\t\tthis.draft = draft || null\n\n\t\tlet to: RecipientList\n\t\tlet cc: RecipientList\n\t\tlet bcc: RecipientList\n\n\t\tif (recipients instanceof Array) {\n\t\t\tto = recipients\n\t\t\tcc = []\n\t\t\tbcc = []\n\t\t} else {\n\t\t\tto = recipients.to ?? []\n\t\t\tcc = recipients.cc ?? []\n\t\t\tbcc = recipients.bcc ?? []\n\t\t}\n\n\t\t// We deliberately use .map() and not promiseMap() here because we want to insert all\n\t\t// the recipients right away, we count on it in some checks in send() and we also want all of them\n\t\t// to show up immediately.\n\t\t// If we want to limit recipient resolution at some point we need to build a queue in some other place.\n\t\t// Making it LazyLoaded() will allow us to retry it in case it fails.\n\t\t// It is very important that we insert the recipients here synchronously. Even though it is inside the async function it will call insertRecipient()\n\t\t// right away when we call getAsync() below\n\t\tthis.recipientsResolved = new LazyLoaded(async () => {\n\t\t\tawait Promise.all([\n\t\t\t\trecipientsFilter(to).map((r) => this.insertRecipient(RecipientField.TO, r)),\n\t\t\t\trecipientsFilter(cc).map((r) => this.insertRecipient(RecipientField.CC, r)),\n\t\t\t\trecipientsFilter(bcc).map((r) => this.insertRecipient(RecipientField.BCC, r)),\n\t\t\t])\n\t\t})\n\t\t// noinspection ES6MissingAwait\n\t\tthis.recipientsResolved.getAsync()\n\n\t\t// .toLowerCase because all our aliases and accounts are lowercased on creation\n\t\tthis.senderAddress = senderMailAddress?.toLowerCase() || this.getDefaultSender()\n\t\tthis.confidential = confidential ?? !this.user().props.defaultUnconfidential\n\t\tthis.attachments = []\n\n\t\tif (attachments) {\n\t\t\tthis.attachFiles(attachments)\n\t\t}\n\n\t\tthis.replyTos = recipientsFilter(replyTos ?? []).map((recipient) => this.recipientsModel.resolve(recipient, ResolveMode.Eager))\n\t\tthis.previousMail = previousMail || null\n\t\tthis.previousMessageId = previousMessageId || null\n\t\tthis.mailChangedAt = this.dateProvider.now()\n\n\t\t// Determine if we should have this mail already be detected as modified so it saves.\n\t\tif (initialChangedState) {\n\t\t\tthis.onMailChanged(null)\n\t\t\tthis.mailSavedAt = this.mailChangedAt - 1\n\t\t} else {\n\t\t\tthis.mailSavedAt = this.mailChangedAt + 1\n\t\t}\n\n\t\tassertNotNull(this.initialized, \"somehow got to the end of init without startInit called\").resolve()\n\n\t\treturn this\n\t}\n\n\tprivate getDefaultSender(): string {\n\t\treturn getDefaultSender(this.logins, this.mailboxDetails)\n\t}\n\n\tgetRecipientList(type: RecipientField): Array<ResolvableRecipient> {\n\t\treturn getFromMap(this.recipients, type, () => [])\n\t}\n\n\ttoRecipients(): Array<ResolvableRecipient> {\n\t\treturn this.getRecipientList(RecipientField.TO)\n\t}\n\n\ttoRecipientsResolved(): Promise<Array<Recipient>> {\n\t\treturn Promise.all(this.toRecipients().map((recipient) => recipient.resolved()))\n\t}\n\n\tccRecipients(): Array<ResolvableRecipient> {\n\t\treturn this.getRecipientList(RecipientField.CC)\n\t}\n\n\tccRecipientsResolved(): Promise<Array<Recipient>> {\n\t\treturn Promise.all(this.ccRecipients().map((recipient) => recipient.resolved()))\n\t}\n\n\tbccRecipients(): Array<ResolvableRecipient> {\n\t\treturn this.getRecipientList(RecipientField.BCC)\n\t}\n\n\tbccRecipientsResolved(): Promise<Array<Recipient>> {\n\t\treturn Promise.all(this.bccRecipients().map((recipient) => recipient.resolved()))\n\t}\n\n\treplyTosResolved(): Promise<Array<Recipient>> {\n\t\treturn Promise.all(this.replyTos.map((r) => r.resolved()))\n\t}\n\n\t/**\n\t * add a recipient to the recipient list without updating the saved state of the draft.\n\t * if the recipient is already inserted, it will wait for it to resolve before returning.\n\t *\n\t * @returns whether the list was actually changed.\n\t */\n\tprivate async insertRecipient(\n\t\tfieldType: RecipientField,\n\t\t{ address, name, type, contact }: PartialRecipient,\n\t\tresolveMode: ResolveMode = ResolveMode.Eager,\n\t): Promise<boolean> {\n\t\tlet recipient = findRecipientWithAddress(this.getRecipientList(fieldType), address)\n\t\t// Only add a recipient if it doesn't exist\n\t\tif (!recipient) {\n\t\t\trecipient = this.recipientsModel.resolve(\n\t\t\t\t{\n\t\t\t\t\taddress,\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t\tcontact,\n\t\t\t\t},\n\t\t\t\tresolveMode,\n\t\t\t)\n\n\t\t\tthis.getRecipientList(fieldType).push(recipient)\n\n\t\t\trecipient.resolved().then(({ address, contact }) => {\n\t\t\t\tif (!this.passwords.has(address) && contact != null) {\n\t\t\t\t\tthis.setPassword(address, contact.presharedPassword ?? \"\")\n\t\t\t\t} else {\n\t\t\t\t\t// always notify listeners after we finished resolving the recipient, even if email itself didn't change\n\t\t\t\t\tthis.onMailChanged(null)\n\t\t\t\t}\n\t\t\t})\n\t\t\tawait recipient.resolved()\n\t\t\treturn true\n\t\t}\n\t\tawait recipient.resolved()\n\t\treturn false\n\t}\n\n\t/**\n\t * Add a new recipient, this method resolves when the recipient resolves.\n\t * will notify of a changed draft state after the recipient was inserted\n\t */\n\tasync addRecipient(fieldType: RecipientField, partialRecipient: PartialRecipient, resolveMode: ResolveMode = ResolveMode.Eager): Promise<void> {\n\t\tconst wasAdded = await this.insertRecipient(fieldType, partialRecipient, resolveMode)\n\t\tthis.markAsChangedIfNecessary(wasAdded)\n\t}\n\n\tgetRecipient(type: RecipientField, address: string): ResolvableRecipient | null {\n\t\treturn findRecipientWithAddress(this.getRecipientList(type), address)\n\t}\n\n\tremoveRecipientByAddress(address: string, type: RecipientField, notify: boolean = true) {\n\t\tconst recipient = findRecipientWithAddress(this.getRecipientList(type), address)\n\t\tif (recipient) {\n\t\t\tthis.removeRecipient(recipient, type, notify)\n\t\t}\n\t}\n\n\t/**\n\t * remove recipient from the recipient list\n\t * @return true if the recipient was removed\n\t */\n\tremoveRecipient(recipient: Recipient, type: RecipientField, notify: boolean = true): boolean {\n\t\tconst recipients = this.recipients.get(type) ?? []\n\t\tconst cleanRecipientAddress = cleanMailAddress(recipient.address)\n\t\tconst didRemove = findAndRemove(recipients, (r) => cleanMailAddress(r.address) === cleanRecipientAddress)\n\t\tthis.markAsChangedIfNecessary(didRemove)\n\n\t\tif (didRemove && notify) {\n\t\t\tthis.onRecipientDeleted({\n\t\t\t\tfield: type,\n\t\t\t\trecipient,\n\t\t\t})\n\t\t}\n\n\t\treturn didRemove\n\t}\n\n\tdispose() {\n\t\tthis.eventController.removeEntityListener(this.entityEventReceived)\n\n\t\trevokeInlineImages(this.loadedInlineImages)\n\t}\n\n\t/**\n\t * @throws UserError in the case that any files were too big to attach. Small enough files will still have been attached\n\t */\n\tgetAttachments(): Array<Attachment> {\n\t\treturn this.attachments\n\t}\n\n\t/** @throws UserError in case files are too big to add */\n\tattachFiles(files: ReadonlyArray<Attachment>): void {\n\t\tlet sizeLeft = MAX_ATTACHMENT_SIZE - this.attachments.reduce((total, file) => total + Number(file.size), 0)\n\n\t\tconst sizeCheckResult = checkAttachmentSize(files, sizeLeft)\n\n\t\tthis.attachments.push(...sizeCheckResult.attachableFiles)\n\t\tthis.markAsChangedIfNecessary(sizeCheckResult.attachableFiles.length > 0)\n\n\t\tif (sizeCheckResult.tooBigFiles.length > 0) {\n\t\t\tthrow new UserError(lang.makeTranslation(\"tooBigAttachment_msg\", lang.get(\"tooBigAttachment_msg\") + \"\\n\" + sizeCheckResult.tooBigFiles.join(\"\\n\")))\n\t\t}\n\t}\n\n\tremoveAttachment(file: Attachment): void {\n\t\tthis.markAsChangedIfNecessary(remove(this.attachments, file))\n\t}\n\n\tgetSenderName(): string {\n\t\treturn getSenderName(this.mailboxProperties, this.senderAddress) ?? \"\"\n\t}\n\n\tgetDraft(): Readonly<Mail> | null {\n\t\treturn this.draft\n\t}\n\n\tprivate async updateDraft(body: string, attachments: ReadonlyArray<Attachment> | null, draft: Mail): Promise<Mail> {\n\t\treturn this.mailFacade\n\t\t\t.updateDraft({\n\t\t\t\tsubject: this.getSubject(),\n\t\t\t\tbody: body,\n\t\t\t\tsenderMailAddress: this.senderAddress,\n\t\t\t\tsenderName: this.getSenderName(),\n\t\t\t\ttoRecipients: await this.toRecipientsResolved(),\n\t\t\t\tccRecipients: await this.ccRecipientsResolved(),\n\t\t\t\tbccRecipients: await this.bccRecipientsResolved(),\n\t\t\t\tattachments: attachments,\n\t\t\t\tconfidential: this.isConfidential(),\n\t\t\t\tdraft: draft,\n\t\t\t})\n\t\t\t.catch(\n\t\t\t\tofClass(LockedError, (e) => {\n\t\t\t\t\tconsole.log(\"updateDraft: operation is still active\", e)\n\t\t\t\t\tthrow new UserError(\"operationStillActive_msg\")\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(NotFoundError, (e) => {\n\t\t\t\t\tconsole.log(\"draft has been deleted, creating new one\")\n\t\t\t\t\treturn this.createDraft(body, attachments, downcast(draft.method))\n\t\t\t\t}),\n\t\t\t)\n\t}\n\n\tprivate async createDraft(body: string, attachments: ReadonlyArray<Attachment> | null, mailMethod: MailMethod): Promise<Mail> {\n\t\treturn this.mailFacade.createDraft({\n\t\t\tsubject: this.getSubject(),\n\t\t\tbodyText: body,\n\t\t\tsenderMailAddress: this.senderAddress,\n\t\t\tsenderName: this.getSenderName(),\n\t\t\ttoRecipients: await this.toRecipientsResolved(),\n\t\t\tccRecipients: await this.ccRecipientsResolved(),\n\t\t\tbccRecipients: await this.bccRecipientsResolved(),\n\t\t\tconversationType: this.conversationType,\n\t\t\tpreviousMessageId: this.previousMessageId,\n\t\t\tattachments: attachments,\n\t\t\tconfidential: this.isConfidential(),\n\t\t\treplyTos: await this.replyTosResolved(),\n\t\t\tmethod: mailMethod,\n\t\t})\n\t}\n\n\tisConfidential(): boolean {\n\t\treturn this.confidential || !this.containsExternalRecipients()\n\t}\n\n\tisConfidentialExternal(): boolean {\n\t\treturn this.confidential && this.containsExternalRecipients()\n\t}\n\n\tsetConfidential(confidential: boolean): void {\n\t\tthis.markAsChangedIfNecessary(this.confidential !== confidential)\n\t\tthis.confidential = confidential\n\t}\n\n\tcontainsExternalRecipients(): boolean {\n\t\treturn this.allRecipients().some((r) => r.type === RecipientType.EXTERNAL)\n\t}\n\n\tgetExternalRecipients(): Array<Recipient> {\n\t\treturn this.allRecipients().filter((r) => r.type === RecipientType.EXTERNAL)\n\t}\n\n\t/**\n\t * @reject {RecipientsNotFoundError}\n\t * @reject {TooManyRequestsError}\n\t * @reject {AccessBlockedError}\n\t * @reject {FileNotFoundError}\n\t * @reject {PreconditionFailedError}\n\t * @reject {LockedError}\n\t * @reject {UserError}\n\t * @param mailMethod\n\t * @param getConfirmation: A callback to get user confirmation\n\t * @param waitHandler: A callback to allow UI blocking while the mail is being sent. it seems like wrapping the send call in showProgressDialog causes the confirmation dialogs not to be shown. We should fix this, but this works for now\n\t * @param tooManyRequestsError\n\t * @return true if the send was completed, false if it was aborted (by getConfirmation returning false\n\t */\n\tasync send(\n\t\tmailMethod: MailMethod,\n\t\tgetConfirmation: (arg0: MaybeTranslation) => Promise<boolean> = (_) => Promise.resolve(true),\n\t\twaitHandler: (arg0: MaybeTranslation, arg1: Promise<any>) => Promise<any> = (_, p) => p,\n\t\ttooManyRequestsError: TranslationKey = \"tooManyMails_msg\",\n\t): Promise<boolean> {\n\t\t// To avoid parallel invocations do not do anything async here that would later execute the sending.\n\t\t// It is fine to wait for getConfirmation() because it is modal and will prevent the user from triggering multiple sends.\n\t\t// If you need to do something async here put it into `asyncSend`\n\t\t//\n\t\t// You can't rely on resolved recipients here, only after waitForResolvedRecipients() inside asyncSend()!\n\t\tthis.onBeforeSend()\n\n\t\tif (this.allRecipients().length === 1 && this.allRecipients()[0].address.toLowerCase().trim() === \"approval@tutao.de\") {\n\t\t\tawait this.sendApprovalMail(this.getBody())\n\t\t\treturn true\n\t\t}\n\n\t\tif (this.toRecipients().length === 0 && this.ccRecipients().length === 0 && this.bccRecipients().length === 0) {\n\t\t\tthrow new UserError(\"noRecipients_msg\")\n\t\t}\n\n\t\tconst numVisibleRecipients = this.toRecipients().length + this.ccRecipients().length\n\n\t\t// Many recipients is a warning\n\t\tif (numVisibleRecipients >= TOO_MANY_VISIBLE_RECIPIENTS && !(await getConfirmation(\"manyRecipients_msg\"))) {\n\t\t\treturn false\n\t\t}\n\n\t\t// Empty subject is a warning\n\t\tif (this.getSubject().length === 0 && !(await getConfirmation(\"noSubject_msg\"))) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst asyncSend = async () => {\n\t\t\t// The next check depends on contacts being available\n\t\t\t// So we need to wait for our recipients here\n\t\t\tconst recipients = await this.waitForResolvedRecipients()\n\n\t\t\t// No password in external confidential mail is an error\n\t\t\tif (this.isConfidentialExternal() && this.getExternalRecipients().some((r) => !this.getPassword(r.address))) {\n\t\t\t\tthrow new UserError(\"noPreSharedPassword_msg\")\n\t\t\t}\n\n\t\t\t// Weak password is a warning\n\t\t\tif (this.isConfidentialExternal() && this.hasInsecurePasswords() && !(await getConfirmation(\"presharedPasswordNotStrongEnough_msg\"))) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tawait this.saveDraft(true, mailMethod)\n\t\t\tawait this.updateContacts(recipients)\n\t\t\tawait this.mailFacade.sendDraft(assertNotNull(this.draft, \"draft was null?\"), recipients, this.selectedNotificationLanguage)\n\t\t\tawait this.updatePreviousMail()\n\t\t\tawait this.updateExternalLanguage()\n\t\t\treturn true\n\t\t}\n\n\t\treturn waitHandler(this.isConfidential() ? \"sending_msg\" : \"sendingUnencrypted_msg\", asyncSend())\n\t\t\t.catch(\n\t\t\t\tofClass(LockedError, () => {\n\t\t\t\t\tthrow new UserError(\"operationStillActive_msg\")\n\t\t\t\t}),\n\t\t\t) // catch all of the badness\n\t\t\t.catch(\n\t\t\t\tofClass(RecipientNotResolvedError, () => {\n\t\t\t\t\tthrow new UserError(\"tooManyAttempts_msg\")\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(RecipientsNotFoundError, (e) => {\n\t\t\t\t\tif (mailMethod === MailMethod.ICAL_CANCEL) {\n\t\t\t\t\t\t// in case of calendar event termination we will remove invalid recipients and then delete the event without sending updates\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet invalidRecipients = e.message\n\t\t\t\t\t\tthrow new UserError(\n\t\t\t\t\t\t\tlang.makeTranslation(\n\t\t\t\t\t\t\t\t\"error_msg\",\n\t\t\t\t\t\t\t\tlang.get(\"tutanotaAddressDoesNotExist_msg\") + \" \" + lang.get(\"invalidRecipients_msg\") + \"\\n\" + invalidRecipients,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(TooManyRequestsError, () => {\n\t\t\t\t\tthrow new UserError(tooManyRequestsError)\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(AccessBlockedError, (e) => {\n\t\t\t\t\t// special case: the approval status is set to SpamSender, but the update has not been received yet, so use SpamSender as default\n\t\t\t\t\treturn checkApprovalStatus(this.logins, true, ApprovalStatus.SPAM_SENDER).then(() => {\n\t\t\t\t\t\tconsole.log(\"could not send mail (blocked access)\", e)\n\t\t\t\t\t\treturn false\n\t\t\t\t\t})\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(FileNotFoundError, () => {\n\t\t\t\t\tthrow new UserError(\"couldNotAttachFile_msg\")\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(PreconditionFailedError, () => {\n\t\t\t\t\tthrow new UserError(\"operationStillActive_msg\")\n\t\t\t\t}),\n\t\t\t)\n\t}\n\n\t/**\n\t * Whether any of the external recipients have an insecure password.\n\t * We don't consider empty passwords, because an empty password will disallow and encrypted email from sending, whereas an insecure password\n\t * can still be used\n\t * @returns {boolean}\n\t */\n\thasInsecurePasswords(): boolean {\n\t\tconst minimalPasswordStrength = this.allRecipients()\n\t\t\t.filter((r) => this.getPassword(r.address) !== \"\")\n\t\t\t.reduce((min, recipient) => Math.min(min, this.getPasswordStrength(recipient)), PASSWORD_MIN_SECURE_VALUE)\n\t\treturn !isSecurePassword(minimalPasswordStrength)\n\t}\n\n\tsaveDraft(saveAttachments: boolean, mailMethod: MailMethod): Promise<void> {\n\t\tif (this.currentSavePromise == null) {\n\t\t\tthis.currentSavePromise = Promise.resolve().then(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.doSaveDraft(saveAttachments, mailMethod)\n\t\t\t\t} finally {\n\t\t\t\t\t// If there is an error, we still need to reset currentSavePromise\n\t\t\t\t\tthis.currentSavePromise = null\n\t\t\t\t}\n\t\t\t\tif (this.hasMailChanged() && this.doSaveAgain) {\n\t\t\t\t\tthis.doSaveAgain = false\n\t\t\t\t\tawait this.saveDraft(saveAttachments, mailMethod)\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\tthis.doSaveAgain = true\n\t\t}\n\n\t\treturn this.currentSavePromise\n\t}\n\n\t/**\n\t * Saves the draft.\n\t * @param saveAttachments True if also the attachments shall be saved, false otherwise.\n\t * @param mailMethod\n\t * @returns {Promise} When finished.\n\t * @throws FileNotFoundError when one of the attachments could not be opened\n\t * @throws PreconditionFailedError when the draft is locked\n\t */\n\tprivate async doSaveDraft(saveAttachments: boolean, mailMethod: MailMethod): Promise<void> {\n\t\tif (this.initialized == null) {\n\t\t\tthrow new ProgrammingError(\"init for SendMailModel was not called\")\n\t\t}\n\t\tawait this.initialized\n\t\ttry {\n\t\t\tconst attachments = saveAttachments ? this.attachments : null\n\n\t\t\t// We also want to create new drafts for drafts edited from trash or spam folder\n\t\t\tconst { htmlSanitizer } = await import(\"../misc/HtmlSanitizer.js\")\n\t\t\tconst unsanitized_body = this.getBody()\n\t\t\tconst body = htmlSanitizer.sanitizeHTML(unsanitized_body, {\n\t\t\t\t// store the draft always with external links preserved. this reverts\n\t\t\t\t// the draft-src and draft-srcset attribute stow.\n\t\t\t\tblockExternalContent: false,\n\t\t\t\t// since we're not displaying this, this is fine.\n\t\t\t\tallowRelativeLinks: true,\n\t\t\t\t// do not touch inline images, we just want to store this.\n\t\t\t\tusePlaceholderForInlineImages: false,\n\t\t\t}).html\n\n\t\t\tthis.draft =\n\t\t\t\tthis.draft == null || (await this.needNewDraft(this.draft))\n\t\t\t\t\t? await this.createDraft(body, attachments, mailMethod)\n\t\t\t\t\t: await this.updateDraft(body, attachments, this.draft)\n\n\t\t\tconst attachmentIds = await this.mailFacade.getAttachmentIds(this.draft)\n\t\t\tconst newAttachments = await promiseMap(attachmentIds, (fileId) => this.entity.load<TutanotaFile>(FileTypeRef, fileId), {\n\t\t\t\tconcurrency: 5,\n\t\t\t})\n\n\t\t\tthis.attachments = [] // attachFiles will push to existing files but we want to overwrite them\n\t\t\tthis.attachFiles(newAttachments)\n\n\t\t\t// Allow any changes that might occur while the mail is being saved to be accounted for\n\t\t\t// if saved is called before this has completed\n\t\t\tthis.mailSavedAt = this.dateProvider.now()\n\t\t} catch (e) {\n\t\t\tif (e instanceof PayloadTooLargeError) {\n\t\t\t\tthrow new UserError(\"requestTooLarge_msg\")\n\t\t\t} else if (e instanceof MailBodyTooLargeError) {\n\t\t\t\tthrow new UserError(\"mailBodyTooLarge_msg\")\n\t\t\t} else if (e instanceof FileNotFoundError) {\n\t\t\t\tthrow new UserError(\"couldNotAttachFile_msg\")\n\t\t\t} else if (e instanceof PreconditionFailedError) {\n\t\t\t\tthrow new UserError(\"operationStillActive_msg\")\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate sendApprovalMail(body: string): Promise<unknown> {\n\t\tconst listId = \"---------c--\"\n\t\tconst m = createApprovalMail({\n\t\t\t_id: [listId, stringToCustomId(this.senderAddress)],\n\t\t\t_ownerGroup: this.user().user.userGroup.group,\n\t\t\ttext: `Subject: ${this.getSubject()}<br>${body}`,\n\t\t\tdate: null,\n\t\t\trange: null,\n\t\t\tcustomer: null,\n\t\t})\n\t\treturn this.entity.setup(listId, m).catch(ofClass(NotAuthorizedError, (e) => console.log(\"not authorized for approval message\")))\n\t}\n\n\tgetAvailableNotificationTemplateLanguages(): Array<Language> {\n\t\treturn this.availableNotificationTemplateLanguages\n\t}\n\n\tgetSelectedNotificationLanguageCode(): string {\n\t\treturn this.selectedNotificationLanguage\n\t}\n\n\tsetSelectedNotificationLanguageCode(code: string) {\n\t\tthis.markAsChangedIfNecessary(this.selectedNotificationLanguage !== code)\n\t\tthis.selectedNotificationLanguage = code\n\t\tthis.markAsChangedIfNecessary(true)\n\t}\n\n\tprivate updateExternalLanguage() {\n\t\tlet props = this.user().props\n\n\t\tif (props.notificationMailLanguage !== this.selectedNotificationLanguage) {\n\t\t\tprops.notificationMailLanguage = this.selectedNotificationLanguage\n\n\t\t\tthis.entity.update(props)\n\t\t}\n\t}\n\n\tprivate updatePreviousMail(): Promise<void> {\n\t\tif (this.previousMail) {\n\t\t\tif (this.previousMail.replyType === ReplyType.NONE && this.conversationType === ConversationType.REPLY) {\n\t\t\t\tthis.previousMail.replyType = ReplyType.REPLY\n\t\t\t} else if (this.previousMail.replyType === ReplyType.NONE && this.conversationType === ConversationType.FORWARD) {\n\t\t\t\tthis.previousMail.replyType = ReplyType.FORWARD\n\t\t\t} else if (this.previousMail.replyType === ReplyType.FORWARD && this.conversationType === ConversationType.REPLY) {\n\t\t\t\tthis.previousMail.replyType = ReplyType.REPLY_FORWARD\n\t\t\t} else if (this.previousMail.replyType === ReplyType.REPLY && this.conversationType === ConversationType.FORWARD) {\n\t\t\t\tthis.previousMail.replyType = ReplyType.REPLY_FORWARD\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve()\n\t\t\t}\n\n\t\t\treturn this.entity.update(this.previousMail).catch(ofClass(NotFoundError, noOp))\n\t\t} else {\n\t\t\treturn Promise.resolve()\n\t\t}\n\t}\n\n\t/**\n\t * If contacts have had their passwords changed, we update them before sending\n\t */\n\tprivate async updateContacts(resolvedRecipients: Recipient[]): Promise<any> {\n\t\tfor (const { address, contact, type } of resolvedRecipients) {\n\t\t\tif (contact == null) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tconst isExternalAndConfidential = type === RecipientType.EXTERNAL && this.isConfidential()\n\n\t\t\tif (!contact._id && (!this.user().props.noAutomaticContacts || isExternalAndConfidential)) {\n\t\t\t\tif (isExternalAndConfidential) {\n\t\t\t\t\tcontact.presharedPassword = this.getPassword(address).trim()\n\t\t\t\t}\n\n\t\t\t\tconst listId = await this.contactModel.getContactListId()\n\t\t\t\tawait this.entity.setup(listId, contact)\n\t\t\t} else if (contact._id && isExternalAndConfidential && contact.presharedPassword !== this.getPassword(address).trim()) {\n\t\t\t\tcontact.presharedPassword = this.getPassword(address).trim()\n\t\t\t\tawait this.entity.update(contact)\n\t\t\t}\n\t\t}\n\t}\n\n\tallRecipients(): ReadonlyArray<ResolvableRecipient> {\n\t\treturn this.toRecipients().concat(this.ccRecipients()).concat(this.bccRecipients())\n\t}\n\n\t/**\n\t * Makes sure the recipient type and contact are resolved.\n\t */\n\tasync waitForResolvedRecipients(): Promise<Recipient[]> {\n\t\tawait this.recipientsResolved.getAsync()\n\t\treturn Promise.all(this.allRecipients().map((recipient) => recipient.resolved())).catch(\n\t\t\tofClass(TooManyRequestsError, () => {\n\t\t\t\tthrow new RecipientNotResolvedError(\"\")\n\t\t\t}),\n\t\t)\n\t}\n\n\tasync handleEntityEvent(update: EntityUpdateData): Promise<void> {\n\t\tconst { operation, instanceId, instanceListId } = update\n\t\tlet contactId: IdTuple = [neverNull(instanceListId), instanceId]\n\t\tlet changed = false\n\n\t\tif (isUpdateForTypeRef(ContactTypeRef, update)) {\n\t\t\tawait this.recipientsResolved.getAsync()\n\n\t\t\tif (operation === OperationType.UPDATE) {\n\t\t\t\tthis.entity.load(ContactTypeRef, contactId).then((contact) => {\n\t\t\t\t\tfor (const fieldType of typedValues(RecipientField)) {\n\t\t\t\t\t\tconst matching = this.getRecipientList(fieldType).filter(\n\t\t\t\t\t\t\t(recipient) => recipient.contact && isSameId(recipient.contact._id, contact._id),\n\t\t\t\t\t\t)\n\t\t\t\t\t\tfor (const recipient of matching) {\n\t\t\t\t\t\t\t// if the mail address no longer exists on the contact then delete the recipient\n\t\t\t\t\t\t\tif (!contact.mailAddresses.some((ma) => cleanMatch(ma.address, recipient.address))) {\n\t\t\t\t\t\t\t\tchanged = changed || this.removeRecipient(recipient, fieldType, true)\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// else just modify the recipient\n\t\t\t\t\t\t\t\trecipient.setName(getContactDisplayName(contact))\n\t\t\t\t\t\t\t\trecipient.setContact(contact)\n\t\t\t\t\t\t\t\tchanged = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else if (operation === OperationType.DELETE) {\n\t\t\t\tfor (const fieldType of typedValues(RecipientField)) {\n\t\t\t\t\tconst recipients = this.getRecipientList(fieldType)\n\n\t\t\t\t\tconst toDelete = recipients.filter((recipient) => (recipient.contact && isSameId(recipient.contact._id, contactId)) || false)\n\n\t\t\t\t\tfor (const r of toDelete) {\n\t\t\t\t\t\tchanged = changed || this.removeRecipient(r, fieldType, true)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.markAsChangedIfNecessary(true)\n\t\t} else if (isUpdateForTypeRef(CustomerPropertiesTypeRef, update)) {\n\t\t\tthis.updateAvailableNotificationTemplateLanguages()\n\t\t} else if (isUpdateForTypeRef(MailboxPropertiesTypeRef, update) && operation === OperationType.UPDATE) {\n\t\t\tthis.mailboxProperties = await this.entity.load(MailboxPropertiesTypeRef, update.instanceId)\n\t\t}\n\t\tthis.markAsChangedIfNecessary(changed)\n\t\treturn Promise.resolve()\n\t}\n\n\tsetOnBeforeSendFunction(fun: () => unknown) {\n\t\tthis.onBeforeSend = fun\n\t}\n\n\tisUserPreviousSender(): boolean {\n\t\tif (!this.previousMail) return false\n\n\t\treturn isUserEmail(this.logins, this.mailboxDetails, this.previousMail.sender.address)\n\t}\n}\n\n/**\n * deduplicate a list of recipients for insertion in any of the recipient fields\n * recipients are considered equal when their cleanMailAddress() is the same\n * returns the recipients with their original mail address\n *\n * unhandled edge case: it's possible to lose recipients that should be kept when\n * * the mail contains several recipients that have the same clean address (Bob@e.de and bob@e.de)\n * * the e.de mail server considers these distinct\n * * we hit \"reply all\"\n *\n */\nfunction recipientsFilter(recipientList: ReadonlyArray<PartialRecipient>): Array<PartialRecipient> {\n\t// we pack each recipient along with its cleaned address, deduplicate the array by comparing cleaned and then unpack the original recipient\n\t// this prevents us from changing the values contained in the array and still keeps the cleanAddress calls out of the n^2 loop\n\tconst cleanedList = recipientList.filter((r) => isMailAddress(r.address, false)).map((a) => ({ recipient: a, cleaned: cleanMailAddress(a.address) }))\n\treturn deduplicate(cleanedList, (a, b) => a.cleaned === b.cleaned).map((a) => a.recipient)\n}\n"]}