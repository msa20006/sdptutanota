{"version":3,"file":"DbError.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/error/DbError.ts"],"names":[],"mappings":"AAAA,wBAAwB;AAExB,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAA;AAErD,MAAM,OAAO,OAAQ,SAAQ,aAAa;IACzC,KAAK,CAAc;IAEnB;;;;OAIG;IACH,YAAY,OAAe,EAAE,KAAa;QACzC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,GAAG,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,OAAO,IAAI,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;QACjI,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,IAAI,CAAA;IAC3B,CAAC;CACD","sourcesContent":["//@bundleInto:common-min\n\nimport { TutanotaError } from \"@tutao/tutanota-error\"\n\nexport class DbError extends TutanotaError {\n\terror: Error | null\n\n\t/**\n\t * A db error is thrown from indexeddb\n\t * @param message An information about the exception.\n\t * @param error The original error that was thrown.\n\t */\n\tconstructor(message: string, error?: Error) {\n\t\tsuper(\"DbError\", error ? message + `: ${error.name}, ${error.message}> ` + (error.stack ? error.stack : error.message) : message)\n\t\tthis.error = error ?? null\n\t}\n}\n"]}