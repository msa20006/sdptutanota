{"version":3,"file":"DesktopIntegrator.js","sourceRoot":"","sources":["../../../../../src/common/desktop/integration/DesktopIntegrator.ts"],"names":[],"mappings":"AAaA,MAAM,CAAC,KAAK,UAAU,+BAA+B,CACpD,QAAyB,EACzB,EAAa,EACb,YAAiC,EACjC,OAAqC;IAErC,QAAQ,OAAO,CAAC,QAAQ,EAAE,CAAC;QAC1B,KAAK,OAAO,CAAC,CAAC,CAAC;YACd,MAAM,EAAE,sBAAsB,EAAE,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC,CAAA;YAC3E,MAAM,MAAM,GAAG,MAAM,OAAO,EAAE,CAAA;YAC9B,OAAO,IAAI,sBAAsB,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAA;QAC5D,CAAC;QAED,KAAK,QAAQ,CAAC,CAAC,CAAC;YACf,MAAM,EAAE,uBAAuB,EAAE,GAAG,MAAM,MAAM,CAAC,8BAA8B,CAAC,CAAA;YAChF,OAAO,IAAI,uBAAuB,CAAC,QAAQ,CAAC,CAAA;QAC7C,CAAC;QAED,KAAK,OAAO,CAAC,CAAC,CAAC;YACd,MAAM,EAAE,sBAAsB,EAAE,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC,CAAA;YAC3E,OAAO,IAAI,sBAAsB,CAAC,QAAQ,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;QAC9D,CAAC;QAED;YACC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAA;IACtD,CAAC;AACF,CAAC","sourcesContent":["import type { WindowManager } from \"../DesktopWindowManager\"\nimport type { ChildProcessExports, ElectronExports, FsExports, WinregExports } from \"../ElectronExportTypes\"\n\nexport interface DesktopIntegrator {\n\treadonly enableAutoLaunch: () => Promise<void>\n\treadonly disableAutoLaunch: () => Promise<void>\n\treadonly isAutoLaunchEnabled: () => Promise<boolean>\n\treadonly runIntegration: (wm: WindowManager) => Promise<void>\n\treadonly isIntegrated: () => Promise<boolean>\n\treadonly integrate: () => Promise<void>\n\treadonly unintegrate: () => Promise<void>\n}\n\nexport async function getDesktopIntegratorForPlatform(\n\telectron: ElectronExports,\n\tfs: FsExports,\n\tchildProcess: ChildProcessExports,\n\t_winreg: () => Promise<WinregExports>,\n): Promise<DesktopIntegrator> {\n\tswitch (process.platform) {\n\t\tcase \"win32\": {\n\t\t\tconst { DesktopIntegratorWin32 } = await import(\"./DesktopIntegratorWin32\")\n\t\t\tconst winreg = await _winreg()\n\t\t\treturn new DesktopIntegratorWin32(electron, winreg.default)\n\t\t}\n\n\t\tcase \"darwin\": {\n\t\t\tconst { DesktopIntegratorDarwin } = await import(\"./DesktopIntegratorDarwin.js\")\n\t\t\treturn new DesktopIntegratorDarwin(electron)\n\t\t}\n\n\t\tcase \"linux\": {\n\t\t\tconst { DesktopIntegratorLinux } = await import(\"./DesktopIntegratorLinux\")\n\t\t\treturn new DesktopIntegratorLinux(electron, fs, childProcess)\n\t\t}\n\n\t\tdefault:\n\t\t\treturn Promise.reject(new Error(\"Invalid Platform\"))\n\t}\n}\n"]}