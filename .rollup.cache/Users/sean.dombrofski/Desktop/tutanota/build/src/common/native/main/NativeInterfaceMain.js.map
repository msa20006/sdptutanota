{"version":3,"file":"NativeInterfaceMain.js","sourceRoot":"","sources":["../../../../../src/common/native/main/NativeInterfaceMain.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,YAAY,EAAE,gBAAgB,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAA;AAEjG,OAAO,EAAE,iBAAiB,EAAE,OAAO,EAAE,MAAM,iDAAiD,CAAA;AAE5F,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAA;AAE7C,OAAO,EAAE,gBAAgB,EAAE,MAAM,yCAAyC,CAAA;AAC1E,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAA;AAC5D,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAA;AACpE,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAA;AAGpE,gBAAgB,EAAE,CAAA;AAElB,sGAAsG;AACtG,MAAM,OAAO,mBAAmB;IAIF;IAHZ,iBAAiB,GAAwE,KAAK,EAAE,CAAA;IACzG,kBAAkB,GAAwB,IAAI,CAAA;IAEtD,YAA6B,gBAAqC;QAArC,qBAAgB,GAAhB,gBAAgB,CAAqB;IAAG,CAAC;IAEtE,KAAK,CAAC,IAAI;QACT,IAAI,SAAsD,CAAA;QAE1D,IAAI,YAAY,EAAE,EAAE,CAAC;YACpB,MAAM,gBAAgB,GAAG,IAAI,sBAAsB,CAAC,MAAM,CAAC,CAAA;YAC3D,gBAAgB,CAAC,KAAK,EAAE,CAAA;YACxB,SAAS,GAAG,gBAAgB,CAAA;QAC7B,CAAC;aAAM,IAAI,QAAQ,EAAE,EAAE,CAAC;YACvB,SAAS,GAAG,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAA;QAC3C,CAAC;aAAM,IAAI,gBAAgB,EAAE,EAAE,CAAC;YAC/B,SAAS,GAAG,IAAI,sBAAsB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;QACzD,CAAC;aAAM,CAAC;YACP,MAAM,IAAI,gBAAgB,CAAC,mDAAmD,CAAC,CAAA;QAChF,CAAC;QAED,sGAAsG;QACtG,MAAM,KAAK,GAAG,IAAI,iBAAiB,CAClC,SAAS,EACT;YACC,GAAG,EAAE,CAAC,OAA+B,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACjI,EACD,aAAa,CACb,CAAA;QACD,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC,oBAAoB,EAAE,wBAAwB,CAAC,CAAC,CAAC,CAAA;QAC7F,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IACtC,CAAC;IAED,cAAc;IACd,KAAK,CAAC,aAAa,CAAC,KAA0D;QAC7E,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IACtC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,WAA8B,EAAE,IAA4B;QAC9E,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAA;QACrD,OAAO,QAAQ,CAAC,WAAW,CAAC,IAAI,OAAO,CAAoB,WAAW,EAAE,IAAI,CAAC,CAAC,CAAA;IAC/E,CAAC;IAED;;OAEG;IACH,oBAAoB,CAAC,QAAoB;QACxC,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAA;IACnC,CAAC;IAED;;OAEG;IACH,oBAAoB;QACnB,IAAI,CAAC,kBAAkB,EAAE,EAAE,CAAA;IAC5B,CAAC;CACD","sourcesContent":["import { assertMainOrNode, isAndroidApp, isElectronClient, isIOSApp } from \"../../api/common/Env\"\nimport type { Transport } from \"../../api/common/threading/Transport.js\"\nimport { MessageDispatcher, Request } from \"../../api/common/threading/MessageDispatcher.js\"\nimport type { DeferredObject } from \"@tutao/tutanota-utils\"\nimport { defer } from \"@tutao/tutanota-utils\"\nimport type { NativeInterface } from \"../common/NativeInterface\"\nimport { ProgrammingError } from \"../../api/common/error/ProgrammingError\"\nimport { IosNativeTransport } from \"./IosNativeTransport.js\"\nimport { AndroidNativeTransport } from \"./AndroidNativeTransport.js\"\nimport { DesktopNativeTransport } from \"./DesktopNativeTransport.js\"\nimport { WebGlobalDispatcher } from \"../common/generatedipc/WebGlobalDispatcher.js\"\n\nassertMainOrNode()\n\n/** the side of the node-main interface that's running in the browser windows renderer/main thread. */\nexport class NativeInterfaceMain implements NativeInterface {\n\tprivate readonly _dispatchDeferred: DeferredObject<MessageDispatcher<NativeRequestType, JsRequestType>> = defer()\n\tprivate _appUpdateListener: (() => void) | null = null\n\n\tconstructor(private readonly globalDispatcher: WebGlobalDispatcher) {}\n\n\tasync init() {\n\t\tlet transport: Transport<NativeRequestType, JsRequestType>\n\n\t\tif (isAndroidApp()) {\n\t\t\tconst androidTransport = new AndroidNativeTransport(window)\n\t\t\tandroidTransport.start()\n\t\t\ttransport = androidTransport\n\t\t} else if (isIOSApp()) {\n\t\t\ttransport = new IosNativeTransport(window)\n\t\t} else if (isElectronClient()) {\n\t\t\ttransport = new DesktopNativeTransport(window.nativeApp)\n\t\t} else {\n\t\t\tthrow new ProgrammingError(\"Tried to create a native interface in the browser\")\n\t\t}\n\n\t\t// Ensure that we have messaged native with \"init\" before we allow anyone else to make native requests\n\t\tconst queue = new MessageDispatcher<NativeRequestType, JsRequestType>(\n\t\t\ttransport,\n\t\t\t{\n\t\t\t\tipc: (request: Request<JsRequestType>) => this.globalDispatcher.dispatch(request.args[0], request.args[1], request.args.slice(2)),\n\t\t\t},\n\t\t\t\"main-worker\",\n\t\t)\n\t\tawait queue.postRequest(new Request(\"ipc\", [\"CommonSystemFacade\", \"initializeRemoteBridge\"]))\n\t\tthis._dispatchDeferred.resolve(queue)\n\t}\n\n\t// for testing\n\tasync initWithQueue(queue: MessageDispatcher<NativeRequestType, JsRequestType>) {\n\t\tthis._dispatchDeferred.resolve(queue)\n\t}\n\n\t/**\n\t * Send a request to the native side.\n\t */\n\tasync invokeNative(requestType: NativeRequestType, args: ReadonlyArray<unknown>): Promise<any> {\n\t\tconst dispatch = await this._dispatchDeferred.promise\n\t\treturn dispatch.postRequest(new Request<NativeRequestType>(requestType, args))\n\t}\n\n\t/**\n\t * Saves a listener method to be called when an app update has been downloaded on the native side.\n\t */\n\tsetAppUpdateListener(listener: () => void): void {\n\t\tthis._appUpdateListener = listener\n\t}\n\n\t/**\n\t * Call the update listener if set.\n\t */\n\thandleUpdateDownload(): void {\n\t\tthis._appUpdateListener?.()\n\t}\n}\n"]}