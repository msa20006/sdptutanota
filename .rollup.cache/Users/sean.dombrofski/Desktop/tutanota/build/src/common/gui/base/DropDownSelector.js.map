{"version":3,"file":"DropDownSelector.js","sourceRoot":"","sources":["../../../../../src/common/gui/base/DropDownSelector.ts"],"names":[],"mappings":"AAAA,OAAO,CAAsC,MAAM,SAAS,CAAA;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAC1C,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAA;AAG9C,OAAO,EAAmB,IAAI,EAAE,MAAM,uBAAuB,CAAA;AAC7D,OAAO,EAAE,IAAI,EAAoC,MAAM,8BAA8B,CAAA;AAErF,OAAO,EAAgB,mBAAmB,EAAE,MAAM,YAAY,CAAA;AAC9D,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAA;AACvD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAG5C,gBAAgB,EAAE,CAAA;AA8BlB,MAAM,OAAO,gBAAgB;IAC5B,IAAI,CAAC,KAAsC;QAC1C,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAA;QACrB,OAAO,CAAC,CAAC,SAAS,EAAE;YACnB,KAAK,EAAE,CAAC,CAAC,KAAK;YACd,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,EAAE;YACjD,SAAS,EAAE,CAAC,CAAC,SAAS;YACtB,UAAU,EAAE,IAAI;YAChB,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACnD,KAAK,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,mBAAmB,CAAC,CAAC,CAAC,QAAQ,CAAC;YAC5F,KAAK,EAAE,CAAC,CAAC,KAAK;YACd,eAAe,EAAE,GAAG,EAAE,CACrB,CAAC,CAAC,QAAQ;gBACT,CAAC,CAAC,IAAI;gBACN,CAAC,CAAC,sIAAsI;oBACtI,0IAA0I;oBAC1I,+BAA+B;oBAC/B,0IAA0I;oBAC1I,iHAAiH;oBACjH,CAAC,CACD,mCAAmC,EACnC;wBACC,KAAK,EAAE;4BACN,KAAK,EAAE,MAAM;4BACb,MAAM,EAAE,MAAM;yBACd;qBACD,EACD,CAAC,CAAC,UAAU,EAAE;wBACb,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,gCAAiB;wBACxC,KAAK,EAAE,aAAa;wBACpB,KAAK,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;wBACjD,IAAI,4BAAoB;qBACxB,CAAC,CACD;YACL,YAAY,EAAE,CAAC,CAAC,YAAY;SAC5B,CAAC,CAAA;IACH,CAAC;IAED,cAAc,CAAC,CAA2B;QACzC,OAAO,cAAc,CAAC;YACrB,WAAW,EAAE,GAAG,EAAE;gBACjB,OAAO,CAAC,CAAC,KAAK;qBACZ,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC;qBAC3C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;oBACb,OAAO;wBACN,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC;wBACjD,KAAK,EAAE,GAAG,EAAE;4BACX,CAAC,CAAC,uBAAuB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;4BACvC,CAAC,CAAC,MAAM,EAAE,CAAA;wBACX,CAAC;wBACD,QAAQ,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,CAAC,KAAK;qBACxC,CAAA;gBACF,CAAC,CAAC,CAAA;YACJ,CAAC;YACD,KAAK,EAAE,CAAC,CAAC,aAAa;SACtB,CAAC,CAAA;IACH,CAAC;IAED,WAAW,CAAC,CAA2B,EAAE,KAAe;QACvD,IAAI,CAAC,CAAC,oBAAoB,EAAE,CAAC;YAC5B,OAAO,CAAC,CAAC,oBAAoB,CAAA;QAC9B,CAAC;QAED,MAAM,YAAY,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,aAAa,CAAC,CAAA;QAC3E,IAAI,YAAY,EAAE,CAAC;YAClB,OAAO,YAAY,CAAC,IAAI,CAAA;QACzB,CAAC;aAAM,CAAC;YACP,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,KAAK,CAAC,qCAAqC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA;YAC7H,OAAO,IAAI,CAAA;QACZ,CAAC;IACF,CAAC;CACD","sourcesContent":["import m, { Children, ClassComponent, Vnode } from \"mithril\"\nimport { TextField } from \"./TextField.js\"\nimport { createDropdown } from \"./Dropdown.js\"\nimport type { AllIcons } from \"./Icon\"\nimport type { lazy } from \"@tutao/tutanota-utils\"\nimport { lazyStringValue, noOp } from \"@tutao/tutanota-utils\"\nimport { lang, TranslationKey, MaybeTranslation } from \"../../misc/LanguageViewModel\"\nimport { BootIcons } from \"./icons/BootIcons\"\nimport { ClickHandler, getOperatingClasses } from \"./GuiUtils\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { IconButton } from \"./IconButton.js\"\nimport { ButtonSize } from \"./ButtonSize.js\"\n\nassertMainOrNode()\nexport type SelectorItem<T> = {\n\tname: string\n\tvalue: T\n\tselectable?: boolean\n\ticon?: AllIcons\n\tindentationLevel?: number\n}\nexport type SelectorItemList<T> = ReadonlyArray<SelectorItem<T>>\n\nexport interface DropDownSelectorAttrs<T> {\n\tlabel: MaybeTranslation\n\titems: SelectorItemList<T>\n\tselectedValue: T | null\n\t/** Override what is displayed for the selected value in the text field (but not in the dropdown) */\n\tselectedValueDisplay?: string\n\t/**\n\t * The handler is invoked with the new selected value. The displayed selected value is not changed automatically,\n\t * but the handler is responsible for updating this DropDownSelector. The value is updated immediately, if no selectionChangedHandler is provided\n\t */\n\tselectionChangedHandler?: ((newValue: T) => unknown) | null\n\thelpLabel?: lazy<Children>\n\tdropdownWidth?: number\n\ticon?: AllIcons\n\tdisabled?: boolean\n\tclass?: string\n\tstyle?: Record<string, any> // Temporary, do not use\n\tdoShowBorder?: boolean | null\n}\n\nexport class DropDownSelector<T> implements ClassComponent<DropDownSelectorAttrs<T>> {\n\tview(vnode: Vnode<DropDownSelectorAttrs<T>>): Children {\n\t\tconst a = vnode.attrs\n\t\treturn m(TextField, {\n\t\t\tlabel: a.label,\n\t\t\tvalue: this.valueToText(a, a.selectedValue) || \"\",\n\t\t\thelpLabel: a.helpLabel,\n\t\t\tisReadOnly: true,\n\t\t\tonclick: a.disabled ? noOp : this.createDropdown(a),\n\t\t\tclass: \"click \" + (a.class == null ? \"mt\" : a.class) + \" \" + getOperatingClasses(a.disabled),\n\t\t\tstyle: a.style,\n\t\t\tinjectionsRight: () =>\n\t\t\t\ta.disabled\n\t\t\t\t\t? null\n\t\t\t\t\t: // This whole thing with the button is not ideal. We shouldn't have a proper button with its own state layer, we should have the whole\n\t\t\t\t\t  // selector be interactive. Just putting an icon here doesn't work either because the selector disappears from tabindex even if you set it\n\t\t\t\t\t  // explicitly (at least in FF).\n\t\t\t\t\t  // Ideally we should also set correct role (\"option\") and highlight only parts of what is not text field (without help text in the bottom.\n\t\t\t\t\t  // We could hack some of this in here, but we should probably redo it from scratch with the right HTML structure.\n\t\t\t\t\t  m(\n\t\t\t\t\t\t\t\".flex.items-center.justify-center\",\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\twidth: \"30px\",\n\t\t\t\t\t\t\t\t\theight: \"30px\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tm(IconButton, {\n\t\t\t\t\t\t\t\ticon: a.icon ? a.icon : BootIcons.Expand,\n\t\t\t\t\t\t\t\ttitle: \"show_action\",\n\t\t\t\t\t\t\t\tclick: a.disabled ? noOp : this.createDropdown(a),\n\t\t\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t  ),\n\t\t\tdoShowBorder: a.doShowBorder,\n\t\t})\n\t}\n\n\tcreateDropdown(a: DropDownSelectorAttrs<T>): ClickHandler {\n\t\treturn createDropdown({\n\t\t\tlazyButtons: () => {\n\t\t\t\treturn a.items\n\t\t\t\t\t.filter((item) => item.selectable !== false)\n\t\t\t\t\t.map((item) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tlabel: lang.makeTranslation(item.name, item.name),\n\t\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\t\ta.selectionChangedHandler?.(item.value)\n\t\t\t\t\t\t\t\tm.redraw()\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tselected: a.selectedValue === item.value,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t},\n\t\t\twidth: a.dropdownWidth,\n\t\t})\n\t}\n\n\tvalueToText(a: DropDownSelectorAttrs<T>, value: T | null): string | null {\n\t\tif (a.selectedValueDisplay) {\n\t\t\treturn a.selectedValueDisplay\n\t\t}\n\n\t\tconst selectedItem = a.items.find((item) => item.value === a.selectedValue)\n\t\tif (selectedItem) {\n\t\t\treturn selectedItem.name\n\t\t} else {\n\t\t\tconsole.log(`Dropdown ${lang.getTranslationText(a.label)} couldn't find element for value: ${String(JSON.stringify(value))}`)\n\t\t\treturn null\n\t\t}\n\t}\n}\n"]}