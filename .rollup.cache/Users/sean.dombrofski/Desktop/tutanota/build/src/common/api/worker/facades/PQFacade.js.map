{"version":3,"file":"PQFacade.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/facades/PQFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { KyberFacade } from \"./KyberFacade.js\"\nimport {\n\tAes256Key,\n\taesEncrypt,\n\tauthenticatedAesDecrypt,\n\teccDecapsulate,\n\teccEncapsulate,\n\tEccKeyPair,\n\tEccPublicKey,\n\tEccSharedSecrets,\n\tgenerateEccKeyPair,\n\thkdf,\n\tKEY_LENGTH_BYTES_AES_256,\n\tKeyPairType,\n\tkyberPublicKeyToBytes,\n\tPQKeyPairs,\n\tpqKeyPairsToPublicKeys,\n\tPQPublicKeys,\n\tuint8ArrayToKey,\n} from \"@tutao/tutanota-crypto\"\nimport { concat, stringToUtf8Uint8Array } from \"@tutao/tutanota-utils\"\nimport { decodePQMessage, encodePQMessage, PQMessage } from \"./PQMessage.js\"\nimport { CryptoProtocolVersion } from \"../../common/TutanotaConstants.js\"\n\nexport type DecapsulatedSymKey = {\n\tsenderIdentityPubKey: EccPublicKey\n\tdecryptedSymKeyBytes: Uint8Array\n}\n\nexport class PQFacade {\n\tconstructor(private readonly kyberFacade: KyberFacade) {}\n\n\tpublic async generateKeyPairs(): Promise<PQKeyPairs> {\n\t\treturn {\n\t\t\tkeyPairType: KeyPairType.TUTA_CRYPT,\n\t\t\teccKeyPair: generateEccKeyPair(),\n\t\t\tkyberKeyPair: await this.kyberFacade.generateKeypair(),\n\t\t}\n\t}\n\n\tpublic async encapsulateAndEncode(\n\t\tsenderIdentityKeyPair: EccKeyPair,\n\t\tephemeralKeyPair: EccKeyPair,\n\t\trecipientPublicKeys: PQPublicKeys,\n\t\tbucketKey: Uint8Array,\n\t): Promise<Uint8Array> {\n\t\tconst encapsulated = await this.encapsulate(senderIdentityKeyPair, ephemeralKeyPair, recipientPublicKeys, bucketKey)\n\t\treturn encodePQMessage(encapsulated)\n\t}\n\n\t/**\n\t * @VisibleForTesting\n\t */\n\tasync encapsulate(\n\t\tsenderIdentityKeyPair: EccKeyPair,\n\t\tephemeralKeyPair: EccKeyPair,\n\t\trecipientPublicKeys: PQPublicKeys,\n\t\tbucketKey: Uint8Array,\n\t): Promise<PQMessage> {\n\t\tconst eccSharedSecret = eccEncapsulate(senderIdentityKeyPair.privateKey, ephemeralKeyPair.privateKey, recipientPublicKeys.eccPublicKey)\n\t\tconst kyberEncapsulation = await this.kyberFacade.encapsulate(recipientPublicKeys.kyberPublicKey)\n\t\tconst kyberCipherText = kyberEncapsulation.ciphertext\n\n\t\tconst kek = this.derivePQKEK(\n\t\t\tsenderIdentityKeyPair.publicKey,\n\t\t\tephemeralKeyPair.publicKey,\n\t\t\trecipientPublicKeys,\n\t\t\tkyberCipherText,\n\t\t\tkyberEncapsulation.sharedSecret,\n\t\t\teccSharedSecret,\n\t\t\tCryptoProtocolVersion.TUTA_CRYPT,\n\t\t)\n\n\t\tconst kekEncBucketKey = aesEncrypt(kek, bucketKey)\n\t\treturn {\n\t\t\tsenderIdentityPubKey: senderIdentityKeyPair.publicKey,\n\t\t\tephemeralPubKey: ephemeralKeyPair.publicKey,\n\t\t\tencapsulation: {\n\t\t\t\tkyberCipherText,\n\t\t\t\tkekEncBucketKey: kekEncBucketKey,\n\t\t\t},\n\t\t}\n\t}\n\n\tpublic async decapsulateEncoded(encodedPQMessage: Uint8Array, recipientKeys: PQKeyPairs): Promise<DecapsulatedSymKey> {\n\t\tconst decoded = decodePQMessage(encodedPQMessage)\n\t\treturn { decryptedSymKeyBytes: await this.decapsulate(decoded, recipientKeys), senderIdentityPubKey: decoded.senderIdentityPubKey }\n\t}\n\n\t/**\n\t * @VisibleForTesting\n\t */\n\tasync decapsulate(message: PQMessage, recipientKeys: PQKeyPairs): Promise<Uint8Array> {\n\t\tconst kyberCipherText = message.encapsulation.kyberCipherText\n\t\tconst eccSharedSecret = eccDecapsulate(message.senderIdentityPubKey, message.ephemeralPubKey, recipientKeys.eccKeyPair.privateKey)\n\t\tconst kyberSharedSecret = await this.kyberFacade.decapsulate(recipientKeys.kyberKeyPair.privateKey, kyberCipherText)\n\n\t\tconst kek = this.derivePQKEK(\n\t\t\tmessage.senderIdentityPubKey,\n\t\t\tmessage.ephemeralPubKey,\n\t\t\tpqKeyPairsToPublicKeys(recipientKeys),\n\t\t\tkyberCipherText,\n\t\t\tkyberSharedSecret,\n\t\t\teccSharedSecret,\n\t\t\tCryptoProtocolVersion.TUTA_CRYPT,\n\t\t)\n\n\t\treturn authenticatedAesDecrypt(kek, message.encapsulation.kekEncBucketKey)\n\t}\n\n\tprivate derivePQKEK(\n\t\tsenderIdentityPublicKey: EccPublicKey,\n\t\tephemeralPublicKey: EccPublicKey,\n\t\trecipientPublicKeys: PQPublicKeys,\n\t\tkyberCipherText: Uint8Array,\n\t\tkyberSharedSecret: Uint8Array,\n\t\teccSharedSecret: EccSharedSecrets,\n\t\tcryptoProtocolVersion: CryptoProtocolVersion,\n\t): Aes256Key {\n\t\tconst context = concat(\n\t\t\tsenderIdentityPublicKey,\n\t\t\tephemeralPublicKey,\n\t\t\trecipientPublicKeys.eccPublicKey,\n\t\t\tkyberPublicKeyToBytes(recipientPublicKeys.kyberPublicKey),\n\t\t\tkyberCipherText,\n\t\t\tnew Uint8Array([Number(cryptoProtocolVersion)]),\n\t\t)\n\n\t\tconst inputKeyMaterial = concat(eccSharedSecret.ephemeralSharedSecret, eccSharedSecret.authSharedSecret, kyberSharedSecret)\n\n\t\tconst kekBytes = hkdf(context, inputKeyMaterial, stringToUtf8Uint8Array(\"kek\"), KEY_LENGTH_BYTES_AES_256)\n\t\treturn uint8ArrayToKey(kekBytes)\n\t}\n}\n"]}