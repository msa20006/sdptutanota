{"version":3,"file":"EntropyFacade.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/facades/EntropyFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { authenticatedAesDecrypt, EntropySource, random, Randomizer } from \"@tutao/tutanota-crypto\"\nimport { UserFacade } from \"./UserFacade.js\"\nimport { createEntropyData, TutanotaProperties } from \"../../entities/tutanota/TypeRefs.js\"\nimport { EntropyService } from \"../../entities/tutanota/Services.js\"\nimport { lazy, noOp, ofClass } from \"@tutao/tutanota-utils\"\nimport { ConnectionError, LockedError, ServiceUnavailableError } from \"../../common/error/RestError.js\"\nimport { IServiceExecutor } from \"../../common/ServiceRequest.js\"\nimport { KeyLoaderFacade, parseKeyVersion } from \"./KeyLoaderFacade.js\"\nimport { encryptBytes } from \"../crypto/CryptoWrapper.js\"\n\nexport interface EntropyDataChunk {\n\tsource: EntropySource\n\tentropy: number\n\tdata: number | Array<number>\n}\n\n/** A class which accumulates the entropy and stores it on the server. */\nexport class EntropyFacade {\n\tprivate newEntropy: number = -1\n\tprivate lastEntropyUpdate: number = Date.now()\n\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly random: Randomizer,\n\t\tprivate readonly lazyKeyLoaderFacade: lazy<KeyLoaderFacade>,\n\t) {}\n\n\t/**\n\t * Adds entropy to the randomizer. Updated the stored entropy for a user when enough entropy has been collected.\n\t */\n\taddEntropy(entropy: EntropyDataChunk[]): Promise<void> {\n\t\ttry {\n\t\t\treturn this.random.addEntropy(entropy)\n\t\t} finally {\n\t\t\tthis.newEntropy = this.newEntropy + entropy.reduce((sum, value) => value.entropy + sum, 0)\n\t\t\tconst now = new Date().getTime()\n\n\t\t\tif (this.newEntropy > 5000 && now - this.lastEntropyUpdate > 1000 * 60 * 5) {\n\t\t\t\tthis.lastEntropyUpdate = now\n\t\t\t\tthis.newEntropy = 0\n\t\t\t\tthis.storeEntropy()\n\t\t\t}\n\t\t}\n\t}\n\n\tstoreEntropy(): Promise<void> {\n\t\t// We only store entropy to the server if we are the leader\n\t\tif (!this.userFacade.isFullyLoggedIn() || !this.userFacade.isLeader()) return Promise.resolve()\n\t\tconst userGroupKey = this.userFacade.getCurrentUserGroupKey()\n\t\tconst entropyData = createEntropyData({\n\t\t\tuserEncEntropy: encryptBytes(userGroupKey.object, this.random.generateRandomData(32)),\n\t\t\tuserKeyVersion: userGroupKey.version.toString(),\n\t\t})\n\t\treturn this.serviceExecutor\n\t\t\t.put(EntropyService, entropyData)\n\t\t\t.catch(ofClass(LockedError, noOp))\n\t\t\t.catch(\n\t\t\t\tofClass(ConnectionError, (e) => {\n\t\t\t\t\tconsole.log(\"could not store entropy\", e)\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(ServiceUnavailableError, (e) => {\n\t\t\t\t\tconsole.log(\"could not store entropy\", e)\n\t\t\t\t}),\n\t\t\t)\n\t}\n\n\t/**\n\t * Loads entropy from the last logout.\n\t */\n\tpublic async loadEntropy(tutanotaProperties: TutanotaProperties): Promise<void> {\n\t\tif (tutanotaProperties.userEncEntropy) {\n\t\t\ttry {\n\t\t\t\tconst keyLoaderFacade = this.lazyKeyLoaderFacade()\n\t\t\t\tconst userGroupKey = await keyLoaderFacade.loadSymUserGroupKey(parseKeyVersion(tutanotaProperties.userKeyVersion ?? \"0\"))\n\t\t\t\tconst entropy = authenticatedAesDecrypt(userGroupKey, tutanotaProperties.userEncEntropy)\n\t\t\t\trandom.addStaticEntropy(entropy)\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(\"could not decrypt entropy\", error)\n\t\t\t}\n\t\t}\n\t}\n}\n"]}