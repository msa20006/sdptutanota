{"version":3,"file":"ShortcutDialog.js","sourceRoot":"","sources":["../../../../../src/common/gui/dialogs/ShortcutDialog.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAe,MAAM,8BAA8B,CAAA;AAChE,OAAO,CAAuB,MAAM,SAAS,CAAA;AAC7C,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAA;AACvC,OAAO,EAAE,IAAI,EAAE,MAAM,oCAAoC,CAAA;AACzD,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;AAIhD,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAA;AAEvD,SAAS,gBAAgB,CAAC,QAAkB;IAC3C,MAAM,YAAY,GAAG,aAAa,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAA;IAEtE,OAAO,IAAI,CAAC,eAAe,CAC1B,QAAQ,CAAC,IAAI,EACb,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5C,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;QAChD,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;QAC7C,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/C,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;QAC3C,QAAQ,CAAC,GAAG,CAAC,IAAI,CAClB,CAAA;AACF,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,kBAAkB,CAAC,SAA0B;IAC5D,OAAO,MAAM,CAAC,YAAY,CAAC,yBAAyB,EAAE,cAAc,EAAE;QACrE,SAAS;KACT,CAAC,CAAA;AACH,CAAC;AAMD;;;;GAIG;AAEH,MAAM,cAAc;IACnB,IAAI,CAAC,KAAiC;QACrC,MAAM,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC,KAAK,CAAA;QACjC,MAAM,cAAc,GAAG,SAAS;aAC9B,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,IAAI,IAAI,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC;aACpE,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACnB,KAAK,EAAE,gBAAgB,CAAC,QAAQ,CAAC;YACjC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;YAC9B,UAAU,EAAE,IAAI;SAChB,CAAC,CAAC,CAAA;QACJ,OAAO,CAAC,CACP,QAAQ,EACR,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAC1C,CAAA;IACF,CAAC;CACD","sourcesContent":["import { lang, Translation } from \"../../misc/LanguageViewModel\"\nimport m, { Component, Vnode } from \"mithril\"\nimport { Dialog } from \"../base/Dialog\"\nimport { Keys } from \"../../api/common/TutanotaConstants\"\nimport { TextField } from \"../base/TextField.js\"\nimport type { Shortcut } from \"../../misc/KeyManager\"\nimport { ButtonType } from \"../base/Button.js\"\nimport { DialogHeaderBarAttrs } from \"../base/DialogHeaderBar\"\nimport { isAppleDevice } from \"../../api/common/Env.js\"\n\nfunction makeShortcutName(shortcut: Shortcut): Translation {\n\tconst mainModifier = isAppleDevice() ? Keys.META.name : Keys.CTRL.name\n\n\treturn lang.makeTranslation(\n\t\tshortcut.help,\n\t\t(shortcut.meta ? Keys.META.name + \" + \" : \"\") +\n\t\t\t(shortcut.ctrlOrCmd ? mainModifier + \" + \" : \"\") +\n\t\t\t(shortcut.ctrl ? Keys.CTRL.name + \" + \" : \"\") +\n\t\t\t(shortcut.shift ? Keys.SHIFT.name + \" + \" : \"\") +\n\t\t\t(shortcut.alt ? Keys.ALT.name + \" + \" : \"\") +\n\t\t\tshortcut.key.name,\n\t)\n}\n\n/**\n * return a promise that resolves when the dialog is closed\n */\nexport function showShortcutDialog(shortcuts: Array<Shortcut>): Promise<void> {\n\treturn Dialog.viewerDialog(\"keyboardShortcuts_title\", ShortcutDialog, {\n\t\tshortcuts,\n\t})\n}\n\ntype ShortcutDialogAttrs = {\n\tshortcuts: Array<Shortcut>\n}\n\n/**\n * The Dialog that shows the currently active Keyboard shortcuts when you press F1\n *\n *\n */\n\nclass ShortcutDialog implements Component<ShortcutDialogAttrs> {\n\tview(vnode: Vnode<ShortcutDialogAttrs>) {\n\t\tconst { shortcuts } = vnode.attrs\n\t\tconst textFieldAttrs = shortcuts\n\t\t\t.filter((shortcut) => shortcut.enabled == null || shortcut.enabled())\n\t\t\t.map((shortcut) => ({\n\t\t\t\tlabel: makeShortcutName(shortcut),\n\t\t\t\tvalue: lang.get(shortcut.help),\n\t\t\t\tisReadOnly: true,\n\t\t\t}))\n\t\treturn m(\n\t\t\t\"div.pb\",\n\t\t\ttextFieldAttrs.map((t) => m(TextField, t)),\n\t\t)\n\t}\n}\n"]}