{"version":3,"file":"DesktopWindowManager.js","sourceRoot":"","sources":["../../../../src/common/desktop/DesktopWindowManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NativeImage, Rectangle } from \"electron\"\nimport { app, screen } from \"electron\"\nimport type { UserInfo } from \"./ApplicationWindow\"\nimport { ApplicationWindow } from \"./ApplicationWindow\"\nimport type { DesktopConfig } from \"./config/DesktopConfig\"\nimport { DesktopTray } from \"./tray/DesktopTray\"\nimport type { DesktopNotifier } from \"./DesktopNotifier\"\nimport { DesktopContextMenu } from \"./DesktopContextMenu\"\nimport { log } from \"./DesktopLog\"\nimport type { LocalShortcutManager } from \"./electron-localshortcut/LocalShortcut\"\nimport { DesktopConfigEncKey, DesktopConfigKey } from \"./config/ConfigKeys\"\nimport { isRectContainedInRect } from \"./DesktopUtils\"\nimport { DesktopThemeFacade } from \"./DesktopThemeFacade\"\nimport { ElectronExports } from \"./ElectronExportTypes\"\nimport { RemoteBridge } from \"./ipc/RemoteBridge.js\"\nimport { ASSET_PROTOCOL } from \"./net/ProtocolProxy.js\"\n\nimport { SseInfo } from \"./sse/SseInfo.js\"\n\nconst TAG = \"[DesktopWindowManager]\"\n\n/**\n * this must be called before electron.app.ready event to be useful\n */\nexport function setupAssetProtocol(electron: ElectronExports) {\n\telectron.protocol.registerSchemesAsPrivileged([\n\t\t{\n\t\t\tscheme: ASSET_PROTOCOL,\n\t\t\tprivileges: { standard: true, supportFetchAPI: true, secure: true },\n\t\t},\n\t])\n}\n\nexport type WindowBounds = {\n\trect: Rectangle\n\tfullscreen: boolean\n\tscale: number\n}\nconst windows: ApplicationWindow[] = []\n\nexport class WindowManager {\n\tprivate readonly _conf: DesktopConfig\n\tprivate readonly _tray: DesktopTray\n\tprivate readonly _notifier: DesktopNotifier\n\tprivate _contextMenu!: DesktopContextMenu\n\tprivate readonly _electron: ElectronExports\n\tprivate themeFacade!: DesktopThemeFacade\n\tprivate readonly _newWindowFactory: (noAutoLogin?: boolean) => Promise<ApplicationWindow>\n\tprivate _currentBounds: WindowBounds\n\tprivate remoteBridge!: RemoteBridge\n\n\t/**\n\t *\n\t * @param conf\n\t * @param tray\n\t * @param notifier\n\t * @param electron\n\t * @param localShortcut\n\t * @param icon\n\t * @param preloadOverride the path to a replacement of the default preload script\n\t */\n\tconstructor(\n\t\tconf: DesktopConfig,\n\t\ttray: DesktopTray,\n\t\tnotifier: DesktopNotifier,\n\t\telectron: ElectronExports,\n\t\tlocalShortcut: LocalShortcutManager,\n\t\tprivate readonly icon: NativeImage,\n\t\tprivate readonly preloadOverride?: string,\n\t) {\n\t\tthis._conf = conf\n\n\t\tif (process.platform !== \"darwin\") {\n\t\t\tconf.getVar(DesktopConfigKey.spellcheck).then((l) => this._setSpellcheckLang(l))\n\t\t\tconf.on(DesktopConfigKey.spellcheck, (l) => this._setSpellcheckLang(l))\n\t\t}\n\n\t\tthis._tray = tray\n\t\tthis._notifier = notifier\n\t\tthis._electron = electron\n\n\t\tthis._newWindowFactory = (noAutoLogin) => this._newWindow(electron, localShortcut, noAutoLogin ?? null)\n\t\t// this is the old default for window placement & scale\n\t\t// should never be used because the config now contains\n\t\t// a new default value.\n\t\tthis._currentBounds = {\n\t\t\tscale: 1,\n\t\t\tfullscreen: false,\n\t\t\trect: {\n\t\t\t\theight: 600,\n\t\t\t\twidth: 800,\n\t\t\t\tx: 200,\n\t\t\t\ty: 200,\n\t\t\t},\n\t\t}\n\t}\n\n\t/**\n\t * Late initialization to break the dependency cycle.\n\t */\n\tlateInit(contextMenu: DesktopContextMenu, themeFacade: DesktopThemeFacade, remoteBridge: RemoteBridge) {\n\t\tthis.themeFacade = themeFacade\n\t\tthis._contextMenu = contextMenu\n\t\tthis.remoteBridge = remoteBridge\n\t}\n\n\tasync newWindow(showWhenReady: boolean, noAutoLogin?: boolean): Promise<ApplicationWindow> {\n\t\tawait this.loadStartingBounds()\n\t\tconst w: ApplicationWindow = await this._newWindowFactory(noAutoLogin)\n\t\twindows.unshift(w)\n\t\tw.on(\"close\", () => {\n\t\t\tthis.saveBounds(w.getBounds())\n\t\t\tw.setUserId(null)\n\t\t})\n\t\t\t.on(\"closed\", () => {\n\t\t\t\tw.setUserId(null)\n\t\t\t\twindows.splice(windows.indexOf(w), 1)\n\t\t\t\tthis._tray.update(this._notifier)\n\t\t\t})\n\t\t\t.on(\"focus\", () => {\n\t\t\t\twindows.splice(windows.indexOf(w), 1)\n\t\t\t\twindows.push(w)\n\n\t\t\t\tthis._tray.clearBadge()\n\n\t\t\t\tthis._notifier.resolveGroupedNotification(w.getUserId())\n\t\t\t})\n\t\t\t.on(\"page-title-updated\", (ev) => {\n\t\t\t\tthis._tray.update(this._notifier)\n\t\t\t})\n\t\t\t.once(\"ready-to-show\", async () => {\n\t\t\t\tthis._tray.update(this._notifier)\n\n\t\t\t\tw.setBounds(this._currentBounds)\n\t\t\t\tif (showWhenReady) w.show()\n\t\t\t})\n\t\t\t.webContents.on(\"did-start-navigation\", () => {\n\t\t\t\tthis._tray.clearBadge()\n\t\t\t})\n\t\t\t.on(\"zoom-changed\", (ev: Event, direction: \"in\" | \"out\") => {\n\t\t\t\tlet scale = (this._currentBounds.scale * 100 + (direction === \"out\" ? -5 : 5)) / 100\n\t\t\t\tthis.changeZoom(scale)\n\t\t\t\tthis.saveBounds(w.getBounds())\n\t\t\t})\n\t\t\t.on(\"did-navigate\", () => {\n\t\t\t\t// electron likes to override the zoom factor when the URL changes.\n\t\t\t\tfor (const w of windows) {\n\t\t\t\t\tw.setZoomFactor(this._currentBounds.scale)\n\t\t\t\t}\n\t\t\t})\n\n\t\tw.setContextMenuHandler((params) => this._contextMenu.open(params))\n\n\t\tthis._registerUserListener(w.id)\n\n\t\treturn w\n\t}\n\n\t_registerUserListener(windowId: number) {\n\t\tconst sseValueListener = (value: SseInfo | null) => {\n\t\t\tif (value && value.userIds.length === 0) {\n\t\t\t\tthis.invalidateAlarms(windowId).catch((e) => {\n\t\t\t\t\tlog.debug(TAG, \"Could not invalidate alarms for window \", windowId, e)\n\n\t\t\t\t\tthis._conf.removeListener(DesktopConfigEncKey.sseInfo, sseValueListener)\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tthis._conf.on(DesktopConfigEncKey.sseInfo, sseValueListener)\n\n\t\t// call with value initially\n\t\tthis._conf.getVar(DesktopConfigEncKey.sseInfo).then(sseValueListener, (e) => log.error(TAG, \"Failed to get sseInfo\", e))\n\t}\n\n\t/**\n\t * invalidates the alarms for a specific window or all windows if no windowId is given.\n\t * @param windowId {number | undefined}\n\t * @returns {Promise<void>}\n\t */\n\tasync invalidateAlarms(windowId?: number): Promise<void> {\n\t\tif (windowId != null) {\n\t\t\tlog.debug(TAG, \"invalidating alarms for window\", windowId)\n\t\t\tawait this.get(windowId)?.commonNativeFacade.invalidateAlarms()\n\t\t} else {\n\t\t\tlog.debug(TAG, \"invalidating alarms for all windows\")\n\t\t\tawait Promise.all(\n\t\t\t\tthis.getAll().map((w) => this.invalidateAlarms(w.id).catch((e) => log.debug(TAG, \"couldn't invalidate alarms for window\", w.id, e))),\n\t\t\t)\n\t\t}\n\t}\n\n\thide() {\n\t\tif (process.platform === \"darwin\") {\n\t\t\tapp.hide() // hide all windows & give active app status to previous app\n\t\t} else {\n\t\t\tfor (const w of windows) {\n\t\t\t\tw.hide()\n\t\t\t}\n\t\t}\n\t}\n\n\tminimize() {\n\t\tfor (const w of windows) {\n\t\t\tw.minimize()\n\t\t}\n\t}\n\n\tchangeZoom(scale: number) {\n\t\tif (scale > 3) {\n\t\t\tscale = 3\n\t\t} else if (scale < 0.5) scale = 0.5\n\n\t\tthis._currentBounds.scale = scale\n\t\tfor (const w of windows) {\n\t\t\tw.setZoomFactor(scale)\n\t\t}\n\t}\n\n\tget(id: number): ApplicationWindow | null {\n\t\tconst w = windows.find((w) => w.id === id)\n\t\treturn w ? w : null\n\t}\n\n\tgetAll(): ApplicationWindow[] {\n\t\treturn windows\n\t}\n\n\tasync getLastFocused(show: boolean): Promise<ApplicationWindow> {\n\t\tlet w = windows[windows.length - 1]\n\n\t\tif (!w) {\n\t\t\tw = await this.newWindow(show)\n\t\t} else if (show) {\n\t\t\tw.show()\n\t\t}\n\n\t\treturn w\n\t}\n\n\tasync openMailBox(info: UserInfo, path?: string | null): Promise<void> {\n\t\treturn (await this.findWindowWithUserId(info.userId)).openMailBox(info, path)\n\t}\n\n\tasync openCalendar(info: UserInfo): Promise<void> {\n\t\treturn (await this.findWindowWithUserId(info.userId)).openCalendar(info)\n\t}\n\n\tasync findWindowWithUserId(userId: string): Promise<ApplicationWindow> {\n\t\treturn windows.find((w) => w.getUserId() === userId) ?? windows.find((w) => w.getUserId() === null) ?? this.newWindow(true, true)\n\t}\n\n\t/**\n\t * Set window size & location in the WindowManager and save them and the manager's window scale to config.\n\t * The WindowManagers scale will be retained even if passed bounds has a different scale.\n\t * @param bounds {WindowBounds} the bounds containing the size & location to save\n\t */\n\tsaveBounds(bounds: WindowBounds): void {\n\t\tconst displayRect = screen.getDisplayMatching(bounds.rect).bounds\n\t\tif (!isRectContainedInRect(displayRect, bounds.rect)) return\n\t\tthis._currentBounds.fullscreen = bounds.fullscreen\n\t\tthis._currentBounds.rect = bounds.rect\n\n\t\tthis._conf.setVar(DesktopConfigKey.lastBounds, this._currentBounds)\n\t}\n\n\t_setSpellcheckLang(l: string): void {\n\t\tthis._electron.session.defaultSession.setSpellCheckerLanguages(l === \"\" ? [] : [l])\n\t}\n\n\t/**\n\t * load lastBounds from config.\n\t * if there are none or they don't match a screen, save default bounds to config\n\t */\n\tasync loadStartingBounds(): Promise<void> {\n\t\tconst loadedBounds: WindowBounds = await this._conf.getVar(DesktopConfigKey.lastBounds)\n\t\tif (!loadedBounds) this.saveBounds(this._currentBounds)\n\t\tconst lastBounds = loadedBounds || this._currentBounds\n\t\tconst displayRect = screen.getDisplayMatching(lastBounds.rect).bounds\n\t\t// we may have loaded bounds that are not in bounds of the screen\n\t\t// if ie the resolution changed, more/less screens, ...\n\t\tconst result = isRectContainedInRect(displayRect, lastBounds.rect) ? Object.assign(this._currentBounds, lastBounds) : this._currentBounds\n\t\tthis.saveBounds(result)\n\t}\n\n\tprivate async _newWindow(electron: ElectronExports, localShortcut: LocalShortcutManager, noAutoLogin: boolean | null): Promise<ApplicationWindow> {\n\t\tconst absoluteWebAssetsPath = this._electron.app.getAppPath()\n\t\t// custom builds get the dicts from us as well\n\t\treturn new ApplicationWindow(\n\t\t\tthis,\n\t\t\tabsoluteWebAssetsPath,\n\t\t\tthis.icon,\n\t\t\telectron,\n\t\t\tlocalShortcut,\n\t\t\tthis.themeFacade,\n\t\t\tthis.remoteBridge,\n\t\t\tnoAutoLogin,\n\t\t\tthis.preloadOverride,\n\t\t)\n\t}\n}\n"]}