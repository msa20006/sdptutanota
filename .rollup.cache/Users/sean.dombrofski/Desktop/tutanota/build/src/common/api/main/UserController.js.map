{"version":3,"file":"UserController.js","sourceRoot":"","sources":["../../../../../src/common/api/main/UserController.ts"],"names":[],"mappings":"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","sourcesContent":["import { AccountType, FeatureType, GroupType, LegacyPlans, OperationType, PlanType } from \"../common/TutanotaConstants\"\nimport type { Base64Url } from \"@tutao/tutanota-utils\"\nimport { assertNotNull, downcast, first, mapAndFilterNull, neverNull, ofClass } from \"@tutao/tutanota-utils\"\nimport { MediaType } from \"../common/EntityFunctions\"\nimport { assertMainOrNode, getApiBaseUrl, isDesktop } from \"../common/Env\"\n\nimport { NotFoundError } from \"../common/error/RestError\"\nimport { locator } from \"./CommonLocator\"\nimport { elementIdPart, isSameId, listIdPart } from \"../common/utils/EntityUtils\"\nimport { getWhitelabelCustomizations } from \"../../misc/WhitelabelCustomizations\"\nimport { EntityClient } from \"../common/EntityClient\"\nimport { CloseSessionService, PlanService } from \"../entities/sys/Services\"\nimport {\n\tAccountingInfo,\n\tAccountingInfoTypeRef,\n\tcreateCloseSessionServicePost,\n\tCustomer,\n\tCustomerInfo,\n\tCustomerInfoTypeRef,\n\tCustomerProperties,\n\tCustomerPropertiesTypeRef,\n\tCustomerTypeRef,\n\tDomainInfo,\n\tGroupInfo,\n\tGroupInfoTypeRef,\n\tGroupMembership,\n\tPlanConfiguration,\n\tUser,\n\tUserTypeRef,\n\tWhitelabelConfig,\n\tWhitelabelConfigTypeRef,\n} from \"../entities/sys/TypeRefs\"\nimport {\n\tcreateUserSettingsGroupRoot,\n\tTutanotaProperties,\n\tTutanotaPropertiesTypeRef,\n\tUserSettingsGroupRoot,\n\tUserSettingsGroupRootTypeRef,\n} from \"../entities/tutanota/TypeRefs\"\nimport { typeModels as sysTypeModels } from \"../entities/sys/TypeModels\"\nimport { SessionType } from \"../common/SessionType\"\nimport { IServiceExecutor } from \"../common/ServiceRequest.js\"\nimport { isCustomizationEnabledForCustomer } from \"../common/utils/CustomerUtils.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../common/utils/EntityUpdateUtils.js\"\nimport { isGlobalAdmin, isInternalUser } from \"../common/utils/UserUtils.js\"\nimport { CacheMode } from \"../worker/rest/EntityRestClient.js\"\n\nassertMainOrNode()\n\nexport class UserController {\n\tprivate planConfig: PlanConfiguration | null\n\n\tconstructor(\n\t\t// should be readonly but is needed for a workaround in CalendarModel\n\t\tpublic user: User,\n\t\tprivate _userGroupInfo: GroupInfo,\n\t\tpublic readonly sessionId: IdTuple,\n\t\tprivate _props: TutanotaProperties,\n\t\tpublic readonly accessToken: Base64Url,\n\t\tprivate _userSettingsGroupRoot: UserSettingsGroupRoot,\n\t\tpublic readonly sessionType: SessionType,\n\t\t/** Which identifier (e.g. email address) was used to create the session. */\n\t\tpublic readonly loginUsername: string,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t) {\n\t\tthis.planConfig = null\n\t}\n\n\tget userId(): Id {\n\t\treturn this.user._id\n\t}\n\n\tget props(): TutanotaProperties {\n\t\treturn this._props\n\t}\n\n\tget userGroupInfo(): GroupInfo {\n\t\treturn this._userGroupInfo\n\t}\n\n\tget userSettingsGroupRoot(): UserSettingsGroupRoot {\n\t\treturn this._userSettingsGroupRoot\n\t}\n\n\t/**\n\t * Checks if the current user is an admin of the customer.\n\t * @return True if the user is an admin\n\t */\n\tisGlobalAdmin(): boolean {\n\t\treturn isGlobalAdmin(this.user)\n\t}\n\n\t/**\n\t * Checks if the account type of the logged-in user is FREE.\n\t * @returns True if the account type is FREE otherwise false\n\t */\n\tisFreeAccount(): boolean {\n\t\treturn this.user.accountType === AccountType.FREE\n\t}\n\n\tisPaidAccount(): boolean {\n\t\treturn this.user.accountType === AccountType.PAID\n\t}\n\n\t/**\n\t * Provides the information if an internal user is logged in.\n\t * @return True if an internal user is logged in, false if no user or an external user is logged in.\n\t */\n\tisInternalUser(): boolean {\n\t\treturn isInternalUser(this.user)\n\t}\n\n\tloadCustomer(cacheMode: CacheMode = CacheMode.ReadAndWrite): Promise<Customer> {\n\t\treturn this.entityClient.load(CustomerTypeRef, assertNotNull(this.user.customer), { cacheMode })\n\t}\n\n\tasync loadCustomerInfo(): Promise<CustomerInfo> {\n\t\tconst customer = await this.loadCustomer()\n\t\treturn await this.entityClient.load(CustomerInfoTypeRef, customer.customerInfo)\n\t}\n\n\tasync loadCustomerProperties(): Promise<CustomerProperties> {\n\t\tconst customer = await this.loadCustomer()\n\t\treturn await this.entityClient.load(CustomerPropertiesTypeRef, assertNotNull(customer.properties))\n\t}\n\n\tasync getPlanType(): Promise<PlanType> {\n\t\tconst customerInfo = await this.loadCustomerInfo()\n\t\treturn downcast(customerInfo.plan)\n\t}\n\n\tasync getPlanConfig(): Promise<PlanConfiguration> {\n\t\tif (this.planConfig === null) {\n\t\t\tconst planServiceGetOut = await this.serviceExecutor.get(PlanService, null)\n\t\t\tthis.planConfig = planServiceGetOut.config\n\t\t}\n\t\treturn downcast(this.planConfig)\n\t}\n\n\tisLegacyPlan(type: PlanType): boolean {\n\t\treturn LegacyPlans.includes(type)\n\t}\n\n\tasync isNewPaidPlan(): Promise<boolean> {\n\t\tconst type = await this.getPlanType()\n\t\treturn !this.isLegacyPlan(type) && type !== PlanType.Free\n\t}\n\n\tasync useLegacyBookingItem(): Promise<boolean> {\n\t\tconst customerInfo = await this.loadCustomerInfo()\n\t\tconst type: PlanType = downcast(customerInfo.plan)\n\t\treturn !(this.isLegacyPlan(type) && customerInfo.customPlan == null) && type !== PlanType.Free\n\t}\n\n\t/**\n\t * Checks if the current plan allows adding users and groups.\n\t */\n\tasync canHaveUsers(): Promise<boolean> {\n\t\tconst customer = await this.loadCustomer()\n\t\tconst planType = await this.getPlanType()\n\t\tconst planConfig = await this.getPlanConfig()\n\n\t\treturn this.isLegacyPlan(planType) || planConfig.multiUser || isCustomizationEnabledForCustomer(customer, FeatureType.MultipleUsers)\n\t}\n\n\tasync loadAccountingInfo(): Promise<AccountingInfo> {\n\t\tconst customerInfo = await this.loadCustomerInfo()\n\t\treturn await this.entityClient.load(AccountingInfoTypeRef, customerInfo.accountingInfo)\n\t}\n\n\tgetMailGroupMemberships(): GroupMembership[] {\n\t\treturn this.user.memberships.filter((membership) => membership.groupType === GroupType.Mail)\n\t}\n\n\tgetContactGroupMemberships(): GroupMembership[] {\n\t\treturn this.user.memberships.filter((membership) => membership.groupType === GroupType.Contact)\n\t}\n\n\tgetCalendarMemberships(): GroupMembership[] {\n\t\treturn this.user.memberships.filter((membership) => membership.groupType === GroupType.Calendar)\n\t}\n\n\tgetUserMailGroupMembership(): GroupMembership {\n\t\treturn this.getMailGroupMemberships()[0]\n\t}\n\n\tgetTemplateMemberships(): GroupMembership[] {\n\t\treturn this.user.memberships.filter((membership) => membership.groupType === GroupType.Template)\n\t}\n\n\tgetContactListMemberships(): GroupMembership[] {\n\t\treturn this.user.memberships.filter((membership) => membership.groupType === GroupType.ContactList)\n\t}\n\n\t/**\n\t * Returns true if the given update is an update on the user instance of the logged in user and the update event is sent for the user group.\n\t * There are two updates for the user instance sent if the logged in user is an admin:, one for the user group and one for the admin group.\n\t * We only want to process it once, so we skip the admin group update\n\t *\n\t * Attention: Modules that act on user updates, e.g. for changed group memberships, need to use this function in their entityEventsReceived listener.\n\t * Only then it is guaranteed that the user in the user controller has been updated. The update event for the admin group might come first, so if a module\n\t * reacts on that one the user controller is not updated yet.\n\t */\n\tisUpdateForLoggedInUserInstance(update: EntityUpdateData, eventOwnerGroupId: Id): boolean {\n\t\treturn (\n\t\t\tupdate.operation === OperationType.UPDATE &&\n\t\t\tisUpdateForTypeRef(UserTypeRef, update) &&\n\t\t\tisSameId(this.user._id, update.instanceId) &&\n\t\t\tisSameId(this.user.userGroup.group, eventOwnerGroupId)\n\t\t) // only include updates for the user group here\n\t}\n\n\tasync entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>, eventOwnerGroupId: Id): Promise<void> {\n\t\tfor (const update of updates) {\n\t\t\tconst { instanceListId, instanceId, operation } = update\n\t\t\tif (this.isUpdateForLoggedInUserInstance(update, eventOwnerGroupId)) {\n\t\t\t\tthis.user = await this.entityClient.load(UserTypeRef, this.user._id)\n\t\t\t} else if (\n\t\t\t\toperation === OperationType.UPDATE &&\n\t\t\t\tisUpdateForTypeRef(GroupInfoTypeRef, update) &&\n\t\t\t\tisSameId(this.userGroupInfo._id, [neverNull(instanceListId), instanceId])\n\t\t\t) {\n\t\t\t\tthis._userGroupInfo = await this.entityClient.load(GroupInfoTypeRef, this._userGroupInfo._id)\n\t\t\t} else if (isUpdateForTypeRef(TutanotaPropertiesTypeRef, update) && operation === OperationType.UPDATE) {\n\t\t\t\tthis._props = await this.entityClient.loadRoot(TutanotaPropertiesTypeRef, this.user.userGroup.group)\n\t\t\t} else if (isUpdateForTypeRef(UserSettingsGroupRootTypeRef, update)) {\n\t\t\t\tthis._userSettingsGroupRoot = await this.entityClient.load(UserSettingsGroupRootTypeRef, this.user.userGroup.group)\n\t\t\t} else if (isUpdateForTypeRef(CustomerInfoTypeRef, update)) {\n\t\t\t\tif (operation === OperationType.CREATE) {\n\t\t\t\t\t// After premium upgrade customer info is deleted and created with new id. We want to make sure that it's cached for offline login.\n\t\t\t\t\tawait this.entityClient.load(CustomerInfoTypeRef, [update.instanceListId, update.instanceId])\n\t\t\t\t}\n\t\t\t\t// cached plan config might be outdated now\n\t\t\t\tthis.planConfig = null\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Delete the session (only if it's a non-persistent session\n\t * @param sync whether or not to delete in the main thread. For example, will be true when logging out due to closing the tab\n\t */\n\tasync deleteSession(sync: boolean): Promise<void> {\n\t\t// in case the tab is closed we need to delete the session in the main thread (synchronous rest request)\n\t\tif (sync) {\n\t\t\tif (this.sessionType !== SessionType.Persistent) {\n\t\t\t\tawait this.deleteSessionSync()\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.sessionType !== SessionType.Persistent) {\n\t\t\t\tawait locator.loginFacade.deleteSession(this.accessToken).catch((e) => console.log(\"Error ignored on Logout:\", e))\n\t\t\t}\n\t\t}\n\t}\n\n\tdeleteSessionSync(): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst sendBeacon = navigator.sendBeacon // Save sendBeacon to variable to satisfy type checker\n\n\t\t\tif (sendBeacon) {\n\t\t\t\ttry {\n\t\t\t\t\tconst apiUrl = new URL(getApiBaseUrl(locator.domainConfigProvider().getCurrentDomainConfig()))\n\t\t\t\t\tapiUrl.pathname += `/rest/sys/${CloseSessionService.name.toLowerCase()}`\n\t\t\t\t\tconst requestObject = createCloseSessionServicePost({\n\t\t\t\t\t\taccessToken: this.accessToken,\n\t\t\t\t\t\tsessionId: this.sessionId,\n\t\t\t\t\t})\n\t\t\t\t\tdelete downcast(requestObject)[\"_type\"] // Remove extra field which is not part of the data model\n\n\t\t\t\t\t// Send as Blob to be able to set content type otherwise sends 'text/plain'\n\t\t\t\t\tconst queued = sendBeacon.call(\n\t\t\t\t\t\tnavigator,\n\t\t\t\t\t\tapiUrl,\n\t\t\t\t\t\tnew Blob([JSON.stringify(requestObject)], {\n\t\t\t\t\t\t\ttype: MediaType.Json,\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t\tconsole.log(\"queued closing session: \", queued)\n\t\t\t\t\tresolve()\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(\"Failed to send beacon\", e)\n\t\t\t\t\treject(e)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Fall back to sync XHR if Beacon API is not available (which it should be everywhere by now but maybe it is suppressed somehow)\n\t\t\t\tconst apiUrl = new URL(getApiBaseUrl(locator.domainConfigProvider().getCurrentDomainConfig()))\n\t\t\t\tapiUrl.pathname += `/rest/sys/session/${listIdPart(this.sessionId)}/${elementIdPart(this.sessionId)}`\n\t\t\t\tconst xhr = new XMLHttpRequest()\n\t\t\t\txhr.open(\"DELETE\", apiUrl, false) // sync requests increase reliability when invoked in onunload\n\n\t\t\t\txhr.setRequestHeader(\"accessToken\", this.accessToken)\n\t\t\t\txhr.setRequestHeader(\"v\", sysTypeModels.Session.version)\n\n\t\t\t\txhr.onload = function () {\n\t\t\t\t\t// XMLHttpRequestProgressEvent, but not needed\n\t\t\t\t\tif (xhr.status === 200) {\n\t\t\t\t\t\tconsole.log(\"deleted session\")\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t} else if (xhr.status === 401) {\n\t\t\t\t\t\tconsole.log(\"authentication failed => session is already deleted\")\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(\"could not delete session \" + xhr.status)\n\t\t\t\t\t\treject(new Error(\"could not delete session \" + xhr.status))\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\txhr.onerror = function () {\n\t\t\t\t\tconsole.error(\"failed to request delete session\")\n\t\t\t\t\treject(new Error(\"failed to request delete session\"))\n\t\t\t\t}\n\n\t\t\t\txhr.send()\n\t\t\t}\n\t\t})\n\t}\n\n\tasync isWhitelabelAccount(): Promise<boolean> {\n\t\t// isTutanotaDomain always returns true on desktop\n\t\tif (!isDesktop()) {\n\t\t\treturn !!getWhitelabelCustomizations(window)\n\t\t}\n\n\t\tconst customerInfo = await this.loadCustomerInfo()\n\t\treturn customerInfo.domainInfos.some((domainInfo) => domainInfo.whitelabelConfig)\n\t}\n\n\tasync loadWhitelabelConfig(): Promise<\n\t\t| {\n\t\t\t\twhitelabelConfig: WhitelabelConfig\n\t\t\t\tdomainInfo: DomainInfo\n\t\t  }\n\t\t| null\n\t\t| undefined\n\t> {\n\t\t// The model allows for multiple domainInfos to have whitelabel configs\n\t\t// but in reality on the server only a single custom configuration is allowed\n\t\t// therefore the result of the filtering all domainInfos with no whitelabelConfig\n\t\t// can only be an array of length 0 or 1\n\t\tconst customerInfo = await this.loadCustomerInfo()\n\t\tconst domainInfoAndConfig = first(\n\t\t\tmapAndFilterNull(\n\t\t\t\tcustomerInfo.domainInfos,\n\t\t\t\t(domainInfo) =>\n\t\t\t\t\tdomainInfo.whitelabelConfig && {\n\t\t\t\t\t\tdomainInfo,\n\t\t\t\t\t\twhitelabelConfig: domainInfo.whitelabelConfig,\n\t\t\t\t\t},\n\t\t\t),\n\t\t)\n\n\t\tif (domainInfoAndConfig) {\n\t\t\tconst whitelabelConfig = await locator.entityClient.load(WhitelabelConfigTypeRef, domainInfoAndConfig.whitelabelConfig)\n\t\t\treturn {\n\t\t\t\tdomainInfo: domainInfoAndConfig.domainInfo,\n\t\t\t\twhitelabelConfig,\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport type UserControllerInitData = {\n\tuser: User\n\tuserGroupInfo: GroupInfo\n\tsessionId: IdTuple\n\taccessToken: Base64Url\n\tsessionType: SessionType\n\tloginUsername: string\n}\n// noinspection JSUnusedGlobalSymbols\n// dynamically imported\nexport async function initUserController({\n\tuser,\n\tuserGroupInfo,\n\tsessionId,\n\taccessToken,\n\tsessionType,\n\tloginUsername,\n}: UserControllerInitData): Promise<UserController> {\n\tconst entityClient = locator.entityClient\n\tconst [props, userSettingsGroupRoot] = await Promise.all([\n\t\tentityClient.loadRoot(TutanotaPropertiesTypeRef, user.userGroup.group),\n\t\tentityClient.load(UserSettingsGroupRootTypeRef, user.userGroup.group).catch(\n\t\t\tofClass(NotFoundError, () =>\n\t\t\t\tentityClient\n\t\t\t\t\t.setup(\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tcreateUserSettingsGroupRoot({\n\t\t\t\t\t\t\t_ownerGroup: user.userGroup.group,\n\t\t\t\t\t\t\tstartOfTheWeek: \"0\",\n\t\t\t\t\t\t\ttimeFormat: \"0\",\n\t\t\t\t\t\t\tgroupSettings: [],\n\t\t\t\t\t\t\tusageDataOptedIn: null,\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t\t.then(() => entityClient.load(UserSettingsGroupRootTypeRef, user.userGroup.group)),\n\t\t\t),\n\t\t),\n\t])\n\treturn new UserController(\n\t\tuser,\n\t\tuserGroupInfo,\n\t\tsessionId,\n\t\tprops,\n\t\taccessToken,\n\t\tuserSettingsGroupRoot,\n\t\tsessionType,\n\t\tloginUsername,\n\t\tentityClient,\n\t\tlocator.serviceExecutor,\n\t)\n}\n"]}