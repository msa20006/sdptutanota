{"version":3,"file":"CryptoWrapper.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/crypto/CryptoWrapper.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tAes256Key,\n\taes256RandomKey,\n\taesDecrypt,\n\taesEncrypt,\n\tAesKey,\n\tAsymmetricKeyPair,\n\tbytesToKyberPublicKey,\n\tdecryptKey,\n\tdecryptKeyPair,\n\tEccKeyPair,\n\tEccPrivateKey,\n\tENABLE_MAC,\n\tencryptEccKey,\n\tEncryptedKeyPairs,\n\tEncryptedPqKeyPairs,\n\tEncryptedRsaEccKeyPairs,\n\tEncryptedRsaKeyPairs,\n\tencryptKey,\n\tencryptKyberKey,\n\tgenerateEccKeyPair,\n\thkdf,\n\tHkdfKeyDerivationDomains,\n\thmacSha256,\n\tIV_BYTE_LENGTH,\n\tKEY_LENGTH_BYTES_AES_256,\n\tkeyToUint8Array,\n\tKyberPrivateKey,\n\tKyberPublicKey,\n\tkyberPublicKeyToBytes,\n\tMacTag,\n\ttype PQKeyPairs,\n\trandom,\n\ttype RsaEccKeyPair,\n\ttype RsaKeyPair,\n\tsha256Hash,\n\tuint8ArrayToKey,\n\tverifyHmacSha256,\n} from \"@tutao/tutanota-crypto\"\nimport { stringToUtf8Uint8Array, Versioned } from \"@tutao/tutanota-utils\"\nimport { KeyVersion } from \"@tutao/tutanota-utils/dist/Utils.js\"\n\n/**\n * An AesKey (usually a group key) and its version.\n */\nexport type VersionedKey = Versioned<AesKey>\n/**\n * A key that is encrypted with a given version of some other key.\n */\nexport type VersionedEncryptedKey = {\n\tencryptingKeyVersion: KeyVersion // the version of the encryption key NOT the encrypted key\n\tkey: Uint8Array // encrypted key\n}\n\n/**\n * This class is useful to bundle all the crypto primitives and make the code testable without using the real crypto implementations.\n */\nexport class CryptoWrapper {\n\taes256RandomKey(): Aes256Key {\n\t\treturn aes256RandomKey()\n\t}\n\n\taesDecrypt(key: AesKey, encryptedBytes: Uint8Array, usePadding: boolean): Uint8Array {\n\t\treturn aesDecrypt(key, encryptedBytes, usePadding)\n\t}\n\n\taesEncrypt(key: AesKey, bytes: Uint8Array, iv?: Uint8Array, usePadding?: boolean, useMac?: boolean): Uint8Array {\n\t\treturn aesEncrypt(key, bytes, iv, usePadding, useMac)\n\t}\n\n\tdecryptKey(encryptionKey: AesKey, key: Uint8Array): AesKey {\n\t\treturn decryptKey(encryptionKey, key)\n\t}\n\n\tencryptEccKey(encryptionKey: AesKey, privateKey: EccPrivateKey): Uint8Array {\n\t\treturn encryptEccKey(encryptionKey, privateKey)\n\t}\n\n\tencryptKey(encryptingKey: AesKey, keyToBeEncrypted: AesKey): Uint8Array {\n\t\treturn encryptKey(encryptingKey, keyToBeEncrypted)\n\t}\n\n\tencryptKeyWithVersionedKey(encryptingKey: VersionedKey, key: AesKey): VersionedEncryptedKey {\n\t\treturn encryptKeyWithVersionedKey(encryptingKey, key)\n\t}\n\n\tgenerateEccKeyPair(): EccKeyPair {\n\t\treturn generateEccKeyPair()\n\t}\n\n\tencryptKyberKey(encryptionKey: AesKey, privateKey: KyberPrivateKey): Uint8Array {\n\t\treturn encryptKyberKey(encryptionKey, privateKey)\n\t}\n\n\tkyberPublicKeyToBytes(kyberPublicKey: KyberPublicKey): Uint8Array {\n\t\treturn kyberPublicKeyToBytes(kyberPublicKey)\n\t}\n\n\tbytesToKyberPublicKey(encodedPublicKey: Uint8Array): KyberPublicKey {\n\t\treturn bytesToKyberPublicKey(encodedPublicKey)\n\t}\n\n\tencryptBytes(sk: AesKey, value: Uint8Array): Uint8Array {\n\t\treturn encryptBytes(sk, value)\n\t}\n\n\tencryptString(sk: AesKey, value: string): Uint8Array {\n\t\treturn encryptString(sk, value)\n\t}\n\n\tdecryptKeyPair(encryptionKey: AesKey, keyPair: EncryptedPqKeyPairs): PQKeyPairs\n\tdecryptKeyPair(encryptionKey: AesKey, keyPair: EncryptedRsaKeyPairs): RsaKeyPair\n\tdecryptKeyPair(encryptionKey: AesKey, keyPair: EncryptedRsaEccKeyPairs): RsaEccKeyPair\n\tdecryptKeyPair(encryptionKey: AesKey, keyPair: EncryptedKeyPairs): AsymmetricKeyPair\n\tdecryptKeyPair(encryptionKey: AesKey, keyPair: EncryptedKeyPairs): AsymmetricKeyPair {\n\t\treturn decryptKeyPair(encryptionKey, keyPair)\n\t}\n\n\tsha256Hash(data: Uint8Array): Uint8Array {\n\t\treturn sha256Hash(data)\n\t}\n\n\tderiveKeyWithHkdf({ key, salt, context }: { key: AesKey; salt: string; context: HkdfKeyDerivationDomains }): Aes256Key {\n\t\treturn deriveKey({\n\t\t\tsalt,\n\t\t\tkey,\n\t\t\tinfo: context,\n\t\t\tlength: KEY_LENGTH_BYTES_AES_256,\n\t\t})\n\t}\n\n\thmacSha256(key: AesKey, data: Uint8Array): MacTag {\n\t\treturn hmacSha256(key, data)\n\t}\n\n\tverifyHmacSha256(key: AesKey, data: Uint8Array, tag: MacTag) {\n\t\treturn verifyHmacSha256(key, data, tag)\n\t}\n}\n\nfunction deriveKey({ salt, key, info, length }: { salt: string; key: number[]; info: string; length: number }) {\n\treturn uint8ArrayToKey(hkdf(sha256Hash(stringToUtf8Uint8Array(salt)), keyToUint8Array(key), stringToUtf8Uint8Array(info), length))\n}\n\nexport function encryptBytes(sk: AesKey, value: Uint8Array): Uint8Array {\n\treturn aesEncrypt(sk, value, random.generateRandomData(IV_BYTE_LENGTH), true, ENABLE_MAC)\n}\n\nexport function encryptString(sk: AesKey, value: string): Uint8Array {\n\treturn aesEncrypt(sk, stringToUtf8Uint8Array(value), random.generateRandomData(IV_BYTE_LENGTH), true, ENABLE_MAC)\n}\n\n/**\n * Encrypts the key with the encryptingKey and return the encrypted key and the version of the encryptingKey.\n * @param encryptingKey the encrypting key.\n * @param key the key to be encrypted.\n */\nexport function encryptKeyWithVersionedKey(encryptingKey: VersionedKey, key: AesKey): VersionedEncryptedKey {\n\treturn {\n\t\tencryptingKeyVersion: encryptingKey.version,\n\t\tkey: encryptKey(encryptingKey.object, key),\n\t}\n}\n"]}