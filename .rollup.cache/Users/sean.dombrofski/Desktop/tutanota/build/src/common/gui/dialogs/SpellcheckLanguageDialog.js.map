{"version":3,"file":"SpellcheckLanguageDialog.js","sourceRoot":"","sources":["../../../../../src/common/gui/dialogs/SpellcheckLanguageDialog.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAE,MAAM,8BAA8B,CAAA;AAEtD,MAAM,CAAC,KAAK,UAAU,4BAA4B;IACjD,MAAM,EAAE,gBAAgB,EAAE,GAAG,MAAM,MAAM,CAAC,2CAA2C,CAAC,CAAA;IACtF,MAAM,OAAO,GAAG,MAAM,4BAA4B,EAAE,CAAA;IACpD,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,mBAAmB,CAAC,CAAA;IACpD,MAAM,KAAK,GAAG,MAAM,QAAQ,EAAE,CAAA;IAC9B,0BAA0B;IAC1B,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,2BAA2B,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,CAAA;IAClH,MAAM,OAAO,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;IAC9F,mCAAmC;IACnC,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,CAAA;IAC3D,OAAO,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;AACxD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iCAAiC;IACtD,MAAM,OAAO,GAAG,MAAM,4BAA4B,EAAE,CAAA;IACpD,MAAM,KAAK,GAAG,MAAM,QAAQ,EAAE,CAAA;IAC9B,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,CAAA;IAC3D,OAAO,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;AACxD,CAAC;AAED,KAAK,UAAU,4BAA4B;IAC1C,MAAM,EAAE,gBAAgB,EAAE,GAAG,MAAM,MAAM,CAAC,2CAA2C,CAAC,CAAA;IACtF,OAAO,CAAC,MAAM,OAAO,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,CAAA;AACrG,CAAC;AAED,KAAK,UAAU,QAAQ;IACtB,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,iCAAiC,CAAC,CAAA;IAC3E,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAA;IAC5E,OAAO;QACN;YACC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,2BAA2B,CAAC;YAC3C,KAAK,EAAE,EAAE;SACT;QACD,GAAG,OAAO;aACR,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACb,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YAC1C,0EAA0E;YAC1E,MAAM,QAAQ,GACb,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,MAAM,IAAI,QAAQ,CAAC,IAAI,KAAK,GAAG,QAAQ,IAAI,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,IAAI,sEAAsE;gBACzK,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,4CAA4C;gBACxG,kBAAkB,CAAC,QAAQ,CAAC,IAAI,sEAAsE;gBACtG,yFAAyF;gBACzF,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAA;YACrE,MAAM,MAAM,GAAG,QAAQ,EAAE,MAAM,CAAA;YAC/B,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAA;YAC5D,OAAO;gBACN,IAAI;gBACJ,KAAK,EAAE,IAAI;aACX,CAAA;QACF,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;KAC9C,CAAA;AACF,CAAC;AAED;;;GAGG;AACH,SAAS,kBAAkB,CAAC,IAAY;IACvC,MAAM,OAAO,GAAmC;QAC/C,EAAE,EAAE,yBAAyB;QAC7B,EAAE,EAAE,qBAAqB;QACzB,EAAE,EAAE,uBAAuB;QAC3B,EAAE,EAAE,wBAAwB;QAC5B,EAAE,EAAE,+BAA+B;QACnC,EAAE,EAAE,6BAA6B;QACjC,EAAE,EAAE,wBAAwB;QAC5B,EAAE,EAAE,qBAAqB;QACzB,EAAE,EAAE,qBAAqB;QACzB,EAAE,EAAE,yBAAyB;KAC7B,CAAA;IACD,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;IACxB,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;AACxC,CAAC","sourcesContent":["import type { SelectorItem } from \"../base/DropDownSelector.js\"\nimport type { TranslationKey } from \"../../misc/LanguageViewModel\"\nimport { locator } from \"../../api/main/CommonLocator\"\n\nexport async function showSpellcheckLanguageDialog(): Promise<string> {\n\tconst { DesktopConfigKey } = await import(\"../../../common/desktop/config/ConfigKeys\")\n\tconst current = await getCurrentSpellcheckLanguage()\n\tconst { Dialog } = await import(\"../base/Dialog.js\")\n\tconst items = await getItems()\n\t// this is a language code\n\tconst newLang = await Dialog.showDropDownSelectionDialog(\"spelling_label\", \"language_label\", null, items, current)\n\tawait locator.desktopSettingsFacade.setStringConfigValue(DesktopConfigKey.spellcheck, newLang)\n\t// return displayable language name\n\tconst selectedItem = items.find((i) => i.value === newLang)\n\treturn selectedItem ? selectedItem.name : items[0].name\n}\n\nexport async function getCurrentSpellcheckLanguageLabel(): Promise<string> {\n\tconst current = await getCurrentSpellcheckLanguage()\n\tconst items = await getItems()\n\tconst selectedItem = items.find((i) => i.value === current)\n\treturn selectedItem ? selectedItem.name : items[0].name\n}\n\nasync function getCurrentSpellcheckLanguage(): Promise<string> {\n\tconst { DesktopConfigKey } = await import(\"../../../common/desktop/config/ConfigKeys\")\n\treturn (await locator.desktopSettingsFacade.getStringConfigValue(DesktopConfigKey.spellcheck)) ?? \"\"\n}\n\nasync function getItems(): Promise<Array<SelectorItem<string>>> {\n\tconst { languages, lang } = await import(\"../../misc/LanguageViewModel.js\")\n\tconst options = await locator.desktopSettingsFacade.getSpellcheckLanguages()\n\treturn [\n\t\t{\n\t\t\tname: lang.get(\"comboBoxSelectionNone_msg\"),\n\t\t\tvalue: \"\",\n\t\t},\n\t\t...options\n\t\t\t.map((code) => {\n\t\t\t\tconst [langCode, locale] = code.split(\"-\")\n\t\t\t\t// first, find the name for a language given a locale with a perfect match\n\t\t\t\tconst language =\n\t\t\t\t\tlanguages.find((language) => locale && language.code === `${langCode}_${locale.toLowerCase()}`) || // find the name for a language without a locale, with a perfect match\n\t\t\t\t\tlanguages.find((language) => language.code === langCode) || // try to get a missing one before splitting\n\t\t\t\t\tgetMissingLanguage(langCode) || // the code given by electron doesn't always have a locale when we do,\n\t\t\t\t\t// e.g. for Persian we have \"fa_ir\" in LanguageViewModel, but electron only gives us \"fa\"\n\t\t\t\t\tlanguages.find((language) => language.code.slice(0, 2) === langCode)\n\t\t\t\tconst textId = language?.textId\n\t\t\t\tconst name = textId ? lang.get(textId) + ` (${code})` : code\n\t\t\t\treturn {\n\t\t\t\t\tname,\n\t\t\t\t\tvalue: code,\n\t\t\t\t}\n\t\t\t})\n\t\t\t.sort((a, b) => a.name.localeCompare(b.name)),\n\t]\n}\n\n/**\n * Electron has a different selection of spellchecker languages from what our client supports,\n * so we can't get all of the names from the LanguageViewModel\n */\nfunction getMissingLanguage(code: string): { textId: TranslationKey; code: string } | null {\n\tconst mapping: Record<string, TranslationKey> = {\n\t\taf: \"languageAfrikaans_label\",\n\t\tcy: \"languageWelsh_label\",\n\t\tfo: \"languageFaroese_label\",\n\t\thy: \"languageArmenian_label\",\n\t\tnb: \"languageNorwegianBokmal_label\",\n\t\tsh: \"languageSerboCroatian_label\",\n\t\tsq: \"languageAlbanian_label\",\n\t\tta: \"languageTamil_label\",\n\t\ttg: \"languageTajik_label\",\n\t\tpt: \"languagePortugese_label\",\n\t}\n\tconst id = mapping[code]\n\treturn id ? { textId: id, code } : null\n}\n"]}