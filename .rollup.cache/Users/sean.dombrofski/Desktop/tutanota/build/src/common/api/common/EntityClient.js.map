{"version":3,"file":"EntityClient.js","sourceRoot":"","sources":["../../../../../src/common/api/common/EntityClient.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tEntityRestClientEraseOptions,\n\tEntityRestClientLoadOptions,\n\tEntityRestClientSetupOptions,\n\tEntityRestClientUpdateOptions,\n\tEntityRestInterface,\n\tOwnerEncSessionKeyProvider,\n} from \"../worker/rest/EntityRestClient\"\nimport type { RootInstance } from \"../entities/sys/TypeRefs.js\"\nimport { RootInstanceTypeRef } from \"../entities/sys/TypeRefs.js\"\nimport {\n\tCUSTOM_MIN_ID,\n\telementIdPart,\n\tfirstBiggerThanSecond,\n\tGENERATED_MIN_ID,\n\tgetElementId,\n\tgetLetId,\n\tlistIdPart,\n\tRANGE_ITEM_LIMIT,\n} from \"./utils/EntityUtils\"\nimport { Type, ValueType } from \"./EntityConstants.js\"\nimport { downcast, groupByAndMap, last, promiseMap, TypeRef } from \"@tutao/tutanota-utils\"\nimport { resolveTypeReference } from \"./EntityFunctions\"\nimport type { ElementEntity, ListElementEntity, SomeEntity } from \"./EntityTypes\"\nimport { NotAuthorizedError, NotFoundError } from \"./error/RestError.js\"\n\nexport class EntityClient {\n\t_target: EntityRestInterface\n\n\tconstructor(target: EntityRestInterface) {\n\t\tthis._target = target\n\t}\n\n\t/**\n\t * Important: we can't pass functions through the bridge, so we can't pass ownerKeyProvider from the page context.\n\t */\n\tload<T extends SomeEntity>(typeRef: TypeRef<T>, id: PropertyType<T, \"_id\">, opts: EntityRestClientLoadOptions = {}): Promise<T> {\n\t\treturn this._target.load(typeRef, id, opts)\n\t}\n\n\tasync loadAll<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id, start?: Id): Promise<T[]> {\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\n\t\tif (!start) {\n\t\t\tstart = typeModel.values[\"_id\"].type === ValueType.GeneratedId ? GENERATED_MIN_ID : CUSTOM_MIN_ID\n\t\t}\n\n\t\tconst elements = await this.loadRange<T>(typeRef, listId, start, RANGE_ITEM_LIMIT, false)\n\t\tif (elements.length === RANGE_ITEM_LIMIT) {\n\t\t\tlet lastElementId = getLetId(elements[elements.length - 1])[1]\n\t\t\tconst nextElements = await this.loadAll<T>(typeRef, listId, lastElementId)\n\t\t\treturn elements.concat(nextElements)\n\t\t} else {\n\t\t\treturn elements\n\t\t}\n\t}\n\n\tasync loadReverseRangeBetween<T extends ListElementEntity>(\n\t\ttypeRef: TypeRef<T>,\n\t\tlistId: Id,\n\t\tstart: Id,\n\t\tend: Id,\n\t\trangeItemLimit: number = RANGE_ITEM_LIMIT,\n\t): Promise<{\n\t\telements: T[]\n\t\tloadedCompletely: boolean\n\t}> {\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\tif (typeModel.type !== Type.ListElement) throw new Error(\"only ListElement types are permitted\")\n\t\tconst loadedEntities = await this._target.loadRange<T>(typeRef, listId, start, rangeItemLimit, true)\n\t\tconst filteredEntities = loadedEntities.filter((entity) => firstBiggerThanSecond(getElementId(entity), end, typeModel))\n\n\t\tif (filteredEntities.length === rangeItemLimit) {\n\t\t\tconst lastElementId = getElementId(filteredEntities[loadedEntities.length - 1])\n\t\t\tconst { elements: remainingEntities, loadedCompletely } = await this.loadReverseRangeBetween<T>(typeRef, listId, lastElementId, end, rangeItemLimit)\n\t\t\treturn {\n\t\t\t\telements: filteredEntities.concat(remainingEntities),\n\t\t\t\tloadedCompletely,\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\telements: filteredEntities,\n\t\t\t\tloadedCompletely: wasReverseRangeCompletelyLoaded(rangeItemLimit, loadedEntities, filteredEntities),\n\t\t\t}\n\t\t}\n\t}\n\n\tloadRange<T extends ListElementEntity>(\n\t\ttypeRef: TypeRef<T>,\n\t\tlistId: Id,\n\t\tstart: Id,\n\t\tcount: number,\n\t\treverse: boolean,\n\t\topts: EntityRestClientLoadOptions = {},\n\t): Promise<T[]> {\n\t\treturn this._target.loadRange(typeRef, listId, start, count, reverse, opts)\n\t}\n\n\t/**\n\t * load multiple does not guarantee order or completeness of returned elements.\n\t */\n\tloadMultiple<T extends SomeEntity>(\n\t\ttypeRef: TypeRef<T>,\n\t\tlistId: Id | null,\n\t\telementIds: Id[],\n\t\townerEncSessionKeyProvider?: OwnerEncSessionKeyProvider,\n\t\topts: EntityRestClientLoadOptions = {},\n\t): Promise<T[]> {\n\t\treturn this._target.loadMultiple(typeRef, listId, elementIds, ownerEncSessionKeyProvider, opts)\n\t}\n\n\tsetup<T extends SomeEntity>(listId: Id | null, instance: T, extraHeaders?: Dict, options?: EntityRestClientSetupOptions): Promise<Id> {\n\t\treturn this._target.setup(listId, instance, extraHeaders, options)\n\t}\n\n\tsetupMultipleEntities<T extends SomeEntity>(listId: Id | null, instances: ReadonlyArray<T>): Promise<Array<Id>> {\n\t\treturn this._target.setupMultiple(listId, instances)\n\t}\n\n\tupdate<T extends SomeEntity>(instance: T, options?: EntityRestClientUpdateOptions): Promise<void> {\n\t\treturn this._target.update(instance, options)\n\t}\n\n\terase<T extends SomeEntity>(instance: T, options?: EntityRestClientEraseOptions): Promise<void> {\n\t\treturn this._target.erase(instance, options)\n\t}\n\n\tasync loadRoot<T extends ElementEntity>(typeRef: TypeRef<T>, groupId: Id, opts: EntityRestClientLoadOptions = {}): Promise<T> {\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\tconst rootId = [groupId, typeModel.rootId] as const\n\t\tconst root = await this.load<RootInstance>(RootInstanceTypeRef, rootId, opts)\n\t\treturn this.load<T>(typeRef, downcast(root.reference), opts)\n\t}\n}\n\nfunction wasReverseRangeCompletelyLoaded<T extends ListElementEntity>(rangeItemLimit: number, loadedEntities: Array<T>, filteredEntities: Array<T>): boolean {\n\tif (loadedEntities.length < rangeItemLimit) {\n\t\tconst lastLoaded = last(loadedEntities)\n\t\tconst lastFiltered = last(filteredEntities)\n\n\t\tif (!lastLoaded) {\n\t\t\treturn true\n\t\t}\n\n\t\treturn lastLoaded === lastFiltered\n\t}\n\n\treturn false\n}\n\n/**\n * load multiple instances of the same type concurrently from multiple lists using\n * one request per list if possible\n *\n * @returns an array of all the instances excluding the ones throwing NotFoundError or NotAuthorizedError, in arbitrary order.\n */\nexport async function loadMultipleFromLists<T extends ListElementEntity>(\n\ttype: TypeRef<T>,\n\tentityClient: EntityClient,\n\ttoLoad: Array<IdTuple>,\n): Promise<Array<T>> {\n\tif (toLoad.length === 0) {\n\t\treturn []\n\t}\n\tconst indexedEventIds = groupByAndMap<IdTuple, Id, Id>(toLoad, listIdPart, elementIdPart)\n\n\treturn (\n\t\tawait promiseMap(\n\t\t\tindexedEventIds,\n\t\t\tasync ([listId, elementIds]) => {\n\t\t\t\ttry {\n\t\t\t\t\treturn await entityClient.loadMultiple(type, listId, elementIds)\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// these are thrown if the list itself is inaccessible. elements will just be missing\n\t\t\t\t\t// in the loadMultiple result.\n\t\t\t\t\tif (e instanceof NotFoundError || e instanceof NotAuthorizedError) {\n\t\t\t\t\t\tconsole.log(`could not load entities of type ${type} from list ${listId}: ${e.name}`)\n\t\t\t\t\t\treturn []\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ concurrency: 3 },\n\t\t)\n\t).flat()\n}\n"]}