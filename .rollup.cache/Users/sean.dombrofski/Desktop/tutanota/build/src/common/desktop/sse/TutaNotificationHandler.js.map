{"version":3,"file":"TutaNotificationHandler.js","sourceRoot":"","sources":["../../../../../src/common/desktop/sse/TutaNotificationHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import type { WindowManager } from \"../DesktopWindowManager\"\nimport { NativeCredentialsFacade } from \"../../native/common/generatedipc/NativeCredentialsFacade\"\nimport { DesktopNotifier, NotificationResult } from \"../DesktopNotifier\"\nimport { LanguageViewModel } from \"../../misc/LanguageViewModel\"\nimport { IdTupleWrapper, NotificationInfo } from \"../../api/entities/sys/TypeRefs\"\nimport { CredentialEncryptionMode } from \"../../misc/credentials/CredentialEncryptionMode.js\"\nimport { ExtendedNotificationMode } from \"../../native/common/generatedipc/ExtendedNotificationMode\"\nimport { assertNotNull, base64ToBase64Url, neverNull } from \"@tutao/tutanota-utils\"\nimport { log } from \"../DesktopLog\"\nimport tutanotaModelInfo from \"../../api/entities/tutanota/ModelInfo\"\nimport { handleRestError } from \"../../api/common/error/RestError\"\nimport { EncryptedAlarmNotification } from \"../../native/common/EncryptedAlarmNotification\"\nimport { Mail } from \"../../api/entities/tutanota/TypeRefs.js\"\nimport { NativeAlarmScheduler } from \"./DesktopAlarmScheduler.js\"\nimport { DesktopAlarmStorage } from \"./DesktopAlarmStorage.js\"\nimport { SseInfo } from \"./SseInfo.js\"\nimport { SseStorage } from \"./SseStorage.js\"\nimport { FetchImpl } from \"../net/NetAgent\"\n\nconst TAG = \"[notifications]\"\n\nexport type MailMetadata = Pick<Mail, \"sender\" | \"firstRecipient\" | \"_id\">\n\nexport class TutaNotificationHandler {\n\tconstructor(\n\t\tprivate readonly windowManager: WindowManager,\n\t\tprivate readonly nativeCredentialFacade: NativeCredentialsFacade,\n\t\tprivate readonly sseStorage: SseStorage,\n\t\tprivate readonly notifier: DesktopNotifier,\n\t\tprivate readonly alarmScheduler: NativeAlarmScheduler,\n\t\tprivate readonly alarmStorage: DesktopAlarmStorage,\n\t\tprivate readonly lang: LanguageViewModel,\n\t\tprivate readonly fetch: FetchImpl,\n\t\tprivate readonly appVersion: string,\n\t) {}\n\n\tasync onMailNotification(sseInfo: SseInfo, notificationInfo: NotificationInfo) {\n\t\tconst appWindow = this.windowManager.getAll().find((window) => window.getUserId() === notificationInfo.userId)\n\n\t\tif (appWindow && appWindow.isFocused()) {\n\t\t\t// no need for notification if user is looking right at the window\n\t\t\treturn\n\t\t}\n\n\t\t// we can't download the email if we don't have access to credentials\n\t\tconst canShowExtendedNotification =\n\t\t\t(await this.nativeCredentialFacade.getCredentialEncryptionMode()) === CredentialEncryptionMode.DEVICE_LOCK &&\n\t\t\t(await this.sseStorage.getExtendedNotificationConfig(notificationInfo.userId)) !== ExtendedNotificationMode.NoSenderOrSubject\n\t\tif (!canShowExtendedNotification) {\n\t\t\tconst notificationId = notificationInfo.mailId\n\t\t\t\t? `${notificationInfo.mailId.listId},${notificationInfo.mailId?.listElementId}`\n\t\t\t\t: notificationInfo.userId\n\t\t\tthis.notifier.submitGroupedNotification(this.lang.get(\"pushNewMail_msg\"), notificationInfo.mailAddress, notificationId, (res) =>\n\t\t\t\tthis.onMailNotificationClick(res, notificationInfo),\n\t\t\t)\n\t\t\treturn\n\t\t}\n\t\tconst mailMetadata = await this.downloadMailMetadata(sseInfo, notificationInfo)\n\t\tif (mailMetadata == null) return\n\t\tthis.notifier.submitGroupedNotification(mailMetadata.sender.address, mailMetadata.firstRecipient?.address ?? \"\", mailMetadata._id.join(\",\"), (res) =>\n\t\t\tthis.onMailNotificationClick(res, notificationInfo),\n\t\t)\n\t}\n\n\tprivate onMailNotificationClick(res: NotificationResult, notificationInfo: NotificationInfo) {\n\t\tif (res === NotificationResult.Click) {\n\t\t\tlet requestedPath: string | null\n\t\t\tif (notificationInfo.mailId) {\n\t\t\t\tconst mailIdParam = encodeURIComponent(`${notificationInfo.mailId.listId},${notificationInfo.mailId.listElementId}`)\n\t\t\t\trequestedPath = `?mail=${mailIdParam}`\n\t\t\t} else {\n\t\t\t\trequestedPath = null\n\t\t\t}\n\t\t\tthis.windowManager.openMailBox(\n\t\t\t\t{\n\t\t\t\t\tuserId: notificationInfo.userId,\n\t\t\t\t\tmailAddress: notificationInfo.mailAddress,\n\t\t\t\t},\n\t\t\t\trequestedPath,\n\t\t\t)\n\t\t}\n\t}\n\n\tprivate async downloadMailMetadata(sseInfo: SseInfo, ni: NotificationInfo): Promise<MailMetadata | null> {\n\t\tconst url = this.makeMailMetadataUrl(sseInfo, assertNotNull(ni.mailId))\n\n\t\t// decrypt access token\n\t\tconst credentials = await this.nativeCredentialFacade.loadByUserId(ni.userId)\n\t\tif (credentials == null) {\n\t\t\tlog.warn(`Not found credentials to download notification, userId ${ni.userId}`)\n\t\t\treturn null\n\t\t}\n\n\t\tlog.debug(TAG, \"downloading mail notification metadata\")\n\t\tconst headers: Record<string, string> = {\n\t\t\tv: tutanotaModelInfo.version.toString(),\n\t\t\tcv: this.appVersion,\n\t\t\taccessToken: credentials.accessToken,\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await this.fetch(url, { headers })\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow handleRestError(neverNull(response.status), url.toString(), response.headers.get(\"Error-Id\"), null)\n\t\t\t}\n\n\t\t\tconst parsedResponse = await response.json()\n\t\t\treturn parsedResponse as MailMetadata\n\t\t} catch (e) {\n\t\t\tlog.debug(TAG, \"Error fetching mail metadata, \" + (e as Error).message)\n\t\t\treturn null\n\t\t}\n\t}\n\n\tprivate makeMailMetadataUrl(sseInfo: SseInfo, mailId: IdTupleWrapper): URL {\n\t\tconst url = new URL(sseInfo.sseOrigin)\n\t\turl.pathname = `rest/tutanota/mail/${base64ToBase64Url(mailId.listId)}/${base64ToBase64Url(mailId.listElementId)}`\n\t\treturn url\n\t}\n\n\tasync onAlarmNotification(alarmNotification: EncryptedAlarmNotification) {\n\t\tawait this.alarmScheduler.handleAlarmNotification(alarmNotification)\n\t}\n\n\tasync onUserRemoved(userId: Id) {\n\t\tawait this.alarmScheduler.unscheduleAllAlarms(userId)\n\t}\n\n\tasync onLocalDataInvalidated() {\n\t\tawait this.alarmScheduler.unscheduleAllAlarms()\n\t\tawait this.alarmStorage.removePushIdentifierKeys()\n\t\tawait this.windowManager.invalidateAlarms()\n\t}\n}\n"]}