{"version":3,"file":"DesktopTray.js","sourceRoot":"","sources":["../../../../../src/common/desktop/tray/DesktopTray.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NativeImage } from \"electron\"\nimport { app, Menu, MenuItem, nativeImage, Tray } from \"electron\"\nimport type { DesktopConfig } from \"../config/DesktopConfig\"\nimport type { WindowManager } from \"../DesktopWindowManager\"\nimport type { DesktopNotifier } from \"../DesktopNotifier\"\nimport { lang } from \"../../misc/LanguageViewModel\"\nimport { MacTray } from \"./MacTray\"\nimport { NonMacTray } from \"./NonMacTray\"\nimport { BuildConfigKey, DesktopConfigKey } from \"../config/ConfigKeys\"\nimport { log } from \"../DesktopLog.js\"\n\nexport interface PlatformTray {\n\tsetBadge(): void\n\n\tclearBadge(): void\n\n\tgetTray(arg0: WindowManager, arg1: NativeImage): Tray | null\n\n\tgetPlatformMenuItems(): Array<MenuItem>\n\n\tattachMenuToTray(arg0: Menu, arg1: Tray | null): void\n\n\tgetAppIconPathFromName(arg0: string): string\n\n\tneedsWindowListInMenu(): boolean\n}\n\nconst platformTray: PlatformTray = process.platform === \"darwin\" ? new MacTray() : new NonMacTray()\n\nexport class DesktopTray {\n\tprivate readonly _conf: DesktopConfig\n\tprivate _wm!: WindowManager\n\tprivate _tray: Tray | null = null\n\tprivate _icon: NativeImage | null = null\n\n\tconstructor(config: DesktopConfig) {\n\t\tthis._conf = config\n\t\tthis.getAppIcon()\n\t\tapp.on(\"will-quit\", this.destroy)\n\t\t\t.whenReady()\n\t\t\t.then(async () => {\n\t\t\t\t// Need this wrapper so that `create()` will be called\n\t\t\t\tawait this.create()\n\t\t\t})\n\t}\n\n\tasync create() {\n\t\tif (!this._wm) log.warn(\"Tray: No WM set before 'ready'!\")\n\t\tconst runAsTrayApp = await this._conf.getVar(DesktopConfigKey.runAsTrayApp)\n\t\tconsole.log(\"Create tray:\" + runAsTrayApp)\n\t\tif (runAsTrayApp) {\n\t\t\tthis._tray = platformTray.getTray(this._wm, await this.getAppIcon())\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tif (this._tray) {\n\t\t\tthis._tray.destroy()\n\t\t\tconsole.log(\"Tray destroyed\")\n\t\t\tthis._tray = null\n\t\t}\n\t}\n\n\tasync update(notifier: DesktopNotifier): Promise<void> {\n\t\tconst runAsTrayApp = await this._conf.getVar(DesktopConfigKey.runAsTrayApp)\n\t\tif (!runAsTrayApp) return\n\t\tconst m = new Menu()\n\t\tm.append(\n\t\t\tnew MenuItem({\n\t\t\t\tlabel: lang.get(\"openNewWindow_action\"),\n\t\t\t\tclick: () => {\n\t\t\t\t\tthis._wm.newWindow(true)\n\t\t\t\t},\n\t\t\t}),\n\t\t)\n\n\t\tif (platformTray.needsWindowListInMenu() && this._wm.getAll().length > 0) {\n\t\t\tm.append(\n\t\t\t\tnew MenuItem({\n\t\t\t\t\ttype: \"separator\",\n\t\t\t\t}),\n\t\t\t)\n\n\t\t\tfor (const w of this._wm.getAll()) {\n\t\t\t\tlet label = w.getTitle()\n\n\t\t\t\tif (notifier.hasNotificationsForWindow(w)) {\n\t\t\t\t\tlabel = \"â€¢ \" + label\n\t\t\t\t} else {\n\t\t\t\t\tlabel = label + \"  \"\n\t\t\t\t}\n\n\t\t\t\tm.append(\n\t\t\t\t\tnew MenuItem({\n\t\t\t\t\t\tlabel: label,\n\t\t\t\t\t\tclick: () => w.show(),\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\tfor (const mi of platformTray.getPlatformMenuItems()) {\n\t\t\tm.append(mi)\n\t\t}\n\t\tplatformTray.attachMenuToTray(m, this._tray)\n\t}\n\n\tsetBadge() {\n\t\tplatformTray.setBadge()\n\t}\n\n\tclearBadge() {\n\t\tplatformTray.clearBadge()\n\t}\n\n\tasync getAppIcon(): Promise<NativeImage> {\n\t\tif (!this._icon) {\n\t\t\tconst iconName = await this._conf.getConst(BuildConfigKey.iconName)\n\t\t\tconst iconPath = platformTray.getAppIconPathFromName(iconName)\n\t\t\tthis._icon = nativeImage.createFromPath(iconPath)\n\t\t}\n\n\t\treturn this._icon\n\t}\n\n\tsetWindowManager(wm: WindowManager) {\n\t\tthis._wm = wm\n\t}\n}\n"]}