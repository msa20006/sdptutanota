{"version":3,"file":"Credentials.js","sourceRoot":"","sources":["../../../../../src/common/misc/credentials/Credentials.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,gBAAgB,EAAE,MAAM,4CAA4C,CAAA;AAkB7E,MAAM,UAAU,wBAAwB,CAAC,WAAwB,EAAE,WAA8B;IAChG,IAAI,WAAW,CAAC,iBAAiB,IAAI,IAAI,EAAE,CAAC;QAC3C,MAAM,IAAI,gBAAgB,CAAC,iGAAiG,CAAC,CAAA;IAC9H,CAAC;IAED,OAAO;QACN,cAAc,EAAE;YACf,KAAK,EAAE,WAAW,CAAC,KAAK;YACxB,IAAI,EAAE,WAAW,CAAC,IAAI;YACtB,MAAM,EAAE,WAAW,CAAC,MAAM;SAC1B;QACD,iBAAiB,EAAE,WAAW,CAAC,iBAAiB;QAChD,sBAAsB,EAAE,WAAW,CAAC,sBAAsB;QAC1D,WAAW,EAAE,WAAW,CAAC,WAAW;QACpC,WAAW,EAAE,WAAW;KACxB,CAAA;AACF,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,sBAA8C;IACtF,OAAO;QACN,KAAK,EAAE,sBAAsB,CAAC,cAAc,CAAC,KAAK;QAClD,MAAM,EAAE,sBAAsB,CAAC,cAAc,CAAC,MAAM;QACpD,IAAI,EAAE,sBAAsB,CAAC,cAAc,CAAC,IAAI;QAChD,WAAW,EAAE,sBAAsB,CAAC,WAAW;QAC/C,iBAAiB,EAAE,sBAAsB,CAAC,iBAAiB;QAC3D,sBAAsB,EAAE,sBAAsB,CAAC,sBAAsB;KACrE,CAAA;AACF,CAAC","sourcesContent":["import { Base64, Base64Url } from \"@tutao/tutanota-utils\"\nimport { CredentialType } from \"./CredentialType.js\"\nimport { UnencryptedCredentials } from \"../../native/common/generatedipc/UnencryptedCredentials.js\"\nimport { ProgrammingError } from \"../../api/common/error/ProgrammingError.js\"\n\n/** Data obtained after logging in. */\nexport interface Credentials {\n\t/**\n\t * Identifier which we use for logging in.\n\t * Email address used to log in for internal users, userId for external users.\n\t * */\n\tlogin: string\n\n\t/** Session#accessKey encrypted password. Is set when session is persisted. */\n\tencryptedPassword: Base64 | null\n\tencryptedPassphraseKey: Uint8Array | null\n\taccessToken: Base64Url\n\tuserId: Id\n\ttype: CredentialType\n}\n\nexport function credentialsToUnencrypted(credentials: Credentials, databaseKey: Uint8Array | null): UnencryptedCredentials {\n\tif (credentials.encryptedPassword == null) {\n\t\tthrow new ProgrammingError(\"Credentials->UnencryptedCredentials encryptedPassword and encryptedPassphraseKey are both null!\")\n\t}\n\n\treturn {\n\t\tcredentialInfo: {\n\t\t\tlogin: credentials.login,\n\t\t\ttype: credentials.type,\n\t\t\tuserId: credentials.userId,\n\t\t},\n\t\tencryptedPassword: credentials.encryptedPassword,\n\t\tencryptedPassphraseKey: credentials.encryptedPassphraseKey,\n\t\taccessToken: credentials.accessToken,\n\t\tdatabaseKey: databaseKey,\n\t}\n}\n\nexport function unencryptedToCredentials(unencryptedCredentials: UnencryptedCredentials): Credentials {\n\treturn {\n\t\tlogin: unencryptedCredentials.credentialInfo.login,\n\t\tuserId: unencryptedCredentials.credentialInfo.userId,\n\t\ttype: unencryptedCredentials.credentialInfo.type,\n\t\taccessToken: unencryptedCredentials.accessToken,\n\t\tencryptedPassword: unencryptedCredentials.encryptedPassword,\n\t\tencryptedPassphraseKey: unencryptedCredentials.encryptedPassphraseKey,\n\t}\n}\n"]}