{"version":3,"file":"FileUtils.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/utils/FileUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { downcast, intersection, isSameTypeRef, toLowerCase } from \"@tutao/tutanota-utils\"\nimport type { File as TutanotaFile } from \"../../entities/tutanota/TypeRefs.js\"\nimport { FileTypeRef as TutanotaFileTypeRef } from \"../../entities/tutanota/TypeRefs.js\"\nimport { DataFile } from \"../DataFile\"\nimport type { Attachment } from \"../../../mailFunctionality/SendMailModel.js\"\n\ntype StringPredicate = (arg0: string) => boolean\n\n/**\n * a reference by path to a file on disk\n */\nexport interface FileReference {\n\treadonly _type: \"FileReference\"\n\tname: string\n\tmimeType: string\n\tlocation: string\n\tsize: number\n\tcid?: string\n}\n\nconst _false: StringPredicate = () => false\n\n/**\n * Get the file extension of a filename\n * so\n *  file.txt -> .txt\n *  archive.tar.gz -> .tar.gz\n * @param fileName\n */\nexport function getFileExtension(fileName: string): string {\n\treturn (fileName.match(/\\..+$/) || [\"\"])[0]\n}\n\n/**\n * The inverse of getTrailingFileExtension\n * @param fileName\n */\nexport function getFileBaseName(fileName: string): string {\n\tconst extension = getFileExtension(fileName)\n\treturn fileName.substring(0, extension ? fileName.lastIndexOf(extension) : fileName.length)\n}\n\nexport function unreserveFileName(fileName: string): string {\n\tif (fileName === \".\" || fileName === \"..\") {\n\t\treturn `${fileName}_`\n\t}\n\n\t// CON, CON.txt, COM0 etc. (windows device files)\n\tconst winReservedRe = /^(CON|PRN|LPT[0-9]|COM[0-9]|AUX|NUL)($|\\..*$)/i\n\tconst extension = getFileExtension(fileName)\n\tconst baseName = getFileBaseName(fileName)\n\treturn env.platformId === \"win32\" && winReservedRe.test(baseName) ? `${baseName}_${extension}` : fileName\n}\n\n/**\n * removes invalid characters from the given filename\n * by replacing them with underscores (non-platform-specific)\n */\nexport function sanitizeFilename(filename: string): string {\n\t// / ? < > \\ : * | \"\n\tconst illegalRe = /[/?<>\\\\:*|\"]/g\n\t// unicode control codes\n\tconst controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g\n\t// trailing period in windows file names\n\t// this is valid in linux but can't be checked from the browser\n\tconst windowsTrailingRe = /[. ]+$/\n\treturn unreserveFileName(filename).replace(illegalRe, \"_\").replace(controlRe, \"_\").replace(windowsTrailingRe, \"_\")\n}\n\n/**\n * Uniqueify all the names in fileNames, case-insensitively\n * @param filenames\n * @param _taken: file names that are taken but won't be included in the output\n */\nexport function deduplicateFilenames(filenames: Array<string>, _taken: ReadonlySet<string> = new Set()): Record<string, Array<string>> {\n\t// make taken lowercase aswell for case insensitivity\n\tconst taken = new Set(Array.from(_taken).map(toLowerCase))\n\t// Check first if we need to do a deduplication\n\tconst deduplicatedNames = new Set(filenames.map(toLowerCase))\n\n\t// None of the filenames were duplicated or taken\n\tif (deduplicatedNames.size === filenames.length && intersection(deduplicatedNames, taken).size === 0) {\n\t\t// if all file names are good then just return an identity map\n\t\treturn Object.fromEntries(filenames.map((f) => [f, [f]])) // convert into map oldname -> [newname]\n\t}\n\n\tconst suffix = (name: string, number: number) => {\n\t\tconst basename = name.substring(0, name.indexOf(\".\")) || name\n\t\t// get the file extension or an empty string\n\t\tconst ext = (name.match(/\\..+$/) || [\"\"])[0]\n\t\treturn `${basename} (${number})${ext}`\n\t}\n\n\t// do the deduplication\n\tconst out: Record<string, string[]> = {}\n\tconst duplicateCounts: Record<string, number> = {}\n\n\tfor (let name of filenames) {\n\t\tconst lower = name.toLowerCase()\n\t\tlet dedupName\n\n\t\tif (duplicateCounts[lower] === undefined) {\n\t\t\tduplicateCounts[lower] = 0\n\t\t\tdedupName = taken.has(lower) ? suffix(name, ++duplicateCounts[lower]) : name\n\t\t} else {\n\t\t\tdedupName = suffix(name, ++duplicateCounts[lower])\n\t\t}\n\n\t\tif (!out[name]) {\n\t\t\tout[name] = []\n\t\t}\n\n\t\tout[name].push(dedupName)\n\t}\n\n\treturn out\n}\n\n/**\n * checks if the given filename is a reserved filename on the current platform\n * @param filename\n * @returns {boolean}\n * @private\n */\nexport function isReservedFilename(filename: string): boolean {\n\t// CON, CON.txt, COM0 etc. (windows device files)\n\tconst winReservedRe = /^(CON|PRN|LPT[0-9]|COM[0-9]|AUX|NUL)($|\\..*$)/i\n\t// .. and .\n\tconst reservedRe = /^\\.{1,2}$/\n\treturn (env.platformId === \"win32\" && winReservedRe.test(filename)) || reservedRe.test(filename)\n}\n\nexport function isTutanotaFile(file: Attachment): file is TutanotaFile {\n\treturn (\n\t\tfile._type &&\n\t\ttypeof file._type === \"object\" &&\n\t\tObject.hasOwn(file._type, \"app\") &&\n\t\tObject.hasOwn(file._type, \"type\") &&\n\t\tisSameTypeRef(downcast(file._type), TutanotaFileTypeRef)\n\t)\n}\n\nexport function isDataFile(file: Attachment): file is DataFile {\n\treturn file._type === \"DataFile\"\n}\n\nexport function isFileReference(file: Attachment): file is FileReference {\n\treturn file._type === \"FileReference\"\n}\n\nexport function assertOnlyFileReferences(files: Array<Attachment>): asserts files is Array<FileReference> {\n\tif (files.some((f) => !isFileReference(f))) throw new TypeError(\"not only FileReference\")\n}\n\nexport function assertOnlyDataFiles(files: Array<Attachment>): asserts files is Array<DataFile> {\n\tif (files.some((f) => !isDataFile(f))) throw new TypeError(\"not only DataFiles\")\n}\n\nexport function fileListToArray(fileList: FileList): Array<File> {\n\t// create an array of files form the FileList because we can not iterate the FileList directly\n\tlet nativeFiles: File[] = []\n\n\tfor (let i = 0; i < fileList.length; i++) {\n\t\tnativeFiles.push(fileList[i])\n\t}\n\n\treturn nativeFiles\n}\n"]}