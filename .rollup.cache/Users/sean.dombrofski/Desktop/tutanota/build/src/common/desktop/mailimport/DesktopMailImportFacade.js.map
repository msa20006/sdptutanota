{"version":3,"file":"DesktopMailImportFacade.js","sourceRoot":"","sources":["../../../../../src/common/desktop/mailimport/DesktopMailImportFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { ImporterApi, ImportErrorKind, ImportOkKind, MailImportErrorMessage, MailImportMessage, PreparationError, TutaCredentials } from \"@tutao/node-mimimi\"\nimport { UnencryptedCredentials } from \"../../native/common/generatedipc/UnencryptedCredentials.js\"\nimport { CredentialType } from \"../../misc/credentials/CredentialType.js\"\nimport { NativeMailImportFacade } from \"../../native/common/generatedipc/NativeMailImportFacade\"\nimport { assertNotNull, clear, defer, DeferredObject } from \"@tutao/tutanota-utils\"\nimport { ElectronExports } from \"../ElectronExportTypes.js\"\nimport { ImportErrorCategories, MailImportError } from \"../../api/common/error/MailImportError.js\"\nimport { ProgrammingError } from \"../../api/common/error/ProgrammingError.js\"\nimport { DesktopNotifier, NotificationResult } from \"../DesktopNotifier.js\"\nimport { LanguageViewModel } from \"../../misc/LanguageViewModel.js\"\nimport path from \"node:path\"\n\nconst TAG = \"[DesktopMailImportFacade]\"\ntype Listener = DeferredObject<MailImportErrorMessage>[\"reject\"]\n\nexport type ImportErrorData =\n\t| { category: ImportErrorCategories.ImportFeatureDisabled }\n\t| { category: ImportErrorCategories.ConcurrentImport }\n\t| { category: ImportErrorCategories.LocalSdkError; source: string }\n\t| { category: ImportErrorCategories.ServerCommunicationError; source: string }\n\t| { category: ImportErrorCategories.InvalidImportFilesErrors; source: string }\n\t| { category: ImportErrorCategories.ImportIncomplete; source: string }\n\nfunction asyncImportErrorToMailImportErrorData(message: MailImportErrorMessage): ImportErrorData {\n\tconst { kind } = message\n\tswitch (kind) {\n\t\tcase ImportErrorKind.FileDeletionError:\n\t\t\treturn { category: ImportErrorCategories.InvalidImportFilesErrors, source: kind }\n\n\t\tcase ImportErrorKind.SdkError:\n\t\tcase ImportErrorKind.EmptyBlobServerList:\n\t\t\treturn { category: ImportErrorCategories.LocalSdkError, source: kind }\n\n\t\tcase ImportErrorKind.ImportFeatureDisabled:\n\t\t\treturn { category: ImportErrorCategories.ImportFeatureDisabled }\n\n\t\tcase ImportErrorKind.TooBigChunk:\n\t\tcase ImportErrorKind.SourceExhaustedSomeError:\n\t\t\treturn { category: ImportErrorCategories.ImportIncomplete, source: kind }\n\t}\n}\n\nfunction mimimiErrorToImportErrorData(error: { message: string }): ImportErrorData {\n\tconst { message: source } = error\n\tswitch (source) {\n\t\t// errors related to the files we use to track the import progress.\n\t\t// might require manual intervention due to misconfiguration or leftover files.\n\t\tcase PreparationError.FailedToReadEmls:\n\t\tcase PreparationError.StateFileWriteFailed:\n\t\tcase PreparationError.CanNotCreateImportDir:\n\t\tcase PreparationError.CanNotDeleteImportDir:\n\t\tcase PreparationError.FileReadError:\n\t\tcase PreparationError.EmlFileWriteFailure:\n\t\t\treturn { category: ImportErrorCategories.InvalidImportFilesErrors, source }\n\n\t\t// errors due to problems communicating with the server (network, auth,...)\n\t\tcase PreparationError.LoginError:\n\t\tcase PreparationError.NoMailGroupKey:\n\t\tcase PreparationError.CannotLoadRemoteState:\n\t\t\treturn { category: ImportErrorCategories.ServerCommunicationError, source }\n\n\t\tcase PreparationError.ImportFeatureDisabled:\n\t\t\treturn { category: ImportErrorCategories.ImportFeatureDisabled }\n\n\t\t// errors that happen before we even talk to the server. usually not actionable.\n\t\tcase PreparationError.NoNativeRestClient:\n\t\t\treturn { category: ImportErrorCategories.LocalSdkError, source }\n\n\t\t// this one is very actionable, but we don't have associated data currently to show the user which file is bad.\n\t\tcase PreparationError.NotAValidEmailFile:\n\t\t\treturn { category: ImportErrorCategories.ImportIncomplete, source }\n\n\t\tdefault:\n\t\t\t// we'd like ts to check we considered all variants, but we can't do that without checking the type\n\t\t\t// before passing it into this function. removing the default case would cause us to lose error\n\t\t\t// types we didn't account for.\n\t\t\tthrow new ProgrammingError(`unknown mimimi error ${error}`)\n\t}\n}\n\n/**\n * This is the persistent part of the importer running in the node main process. as long as the client is running, this will stay around.\n * windows can subscribe to events and control the importer, but are considered \"disposable\" and are not required for the importer to do work.\n */\nexport class DesktopMailImportFacade implements NativeMailImportFacade {\n\tprivate readonly configDirectory: string\n\t// map from mailbox id to its importer Api\n\tprivate readonly importerApis: Map<string, Promise<ImporterApi>> = new Map()\n\tprivate readonly currentListeners: Map<string, Array<Listener>> = new Map()\n\n\tconstructor(private readonly electron: ElectronExports, private readonly notifier: DesktopNotifier, private readonly lang: LanguageViewModel) {\n\t\tImporterApi.initLog()\n\t\telectron.app.on(\"before-quit\", () => ImporterApi.deinitLog())\n\t\tthis.configDirectory = electron.app.getPath(\"userData\")\n\t}\n\n\tasync getResumableImport(\n\t\tmailboxId: string,\n\t\ttargetOwnerGroup: string,\n\t\tunencryptedTutaCredentials: UnencryptedCredentials,\n\t\tapiUrl: string,\n\t): Promise<readonly [string, string] | null> {\n\t\tconst existingImporterApi = this.importerApis.get(mailboxId)\n\t\tif (existingImporterApi) {\n\t\t\tconst { listId, elementId } = await existingImporterApi.then((importerApi) => importerApi.getImportStateId())\n\t\t\treturn [listId, elementId]\n\t\t} else {\n\t\t\tconst tutaCredentials = this.createTutaCredentials(unencryptedTutaCredentials, apiUrl)\n\t\t\tlet importerApi\n\t\t\ttry {\n\t\t\t\timporterApi = await ImporterApi.getResumableImport(mailboxId, this.configDirectory, targetOwnerGroup, tutaCredentials)\n\t\t\t} catch (e) {\n\t\t\t\tthrow new MailImportError(mimimiErrorToImportErrorData(e))\n\t\t\t}\n\t\t\tif (importerApi != null) {\n\t\t\t\timporterApi.setMessageHook((message: MailImportMessage) => this.processMimimiMessage(mailboxId, message))\n\t\t\t\tthis.importerApis.set(mailboxId, Promise.resolve(importerApi))\n\n\t\t\t\tconst { listId, elementId } = importerApi.getImportStateId()\n\t\t\t\treturn [listId, elementId]\n\t\t\t}\n\t\t}\n\n\t\treturn null\n\t}\n\n\tasync prepareNewImport(\n\t\tmailboxId: string,\n\t\ttargetOwnerGroup: string,\n\t\ttargetMailset: readonly string[],\n\t\tfilePaths: readonly string[],\n\t\tunencryptedTutaCredentials: UnencryptedCredentials,\n\t\tapiUrl: string,\n\t): Promise<readonly [string, string]> {\n\t\tconst tutaCredentials = this.createTutaCredentials(unencryptedTutaCredentials, apiUrl)\n\n\t\tlet hasOngoingImport = this.importerApis.has(mailboxId)\n\t\tif (hasOngoingImport) {\n\t\t\tthrow new MailImportError({ category: ImportErrorCategories.ConcurrentImport })\n\t\t}\n\n\t\tlet importerApiPromise = ImporterApi.prepareNewImport(\n\t\t\tmailboxId,\n\t\t\ttutaCredentials,\n\t\t\ttargetOwnerGroup,\n\t\t\t[targetMailset[0], targetMailset[1]],\n\t\t\tfilePaths.slice(),\n\t\t\tthis.configDirectory,\n\t\t)\n\t\t// we want an unconditional error handler, but also don't want to change the type of the promise.\n\t\timporterApiPromise.catch((_) => this.importerApis.delete(mailboxId))\n\t\tthis.importerApis.set(mailboxId, importerApiPromise)\n\t\tlet importerApi: ImporterApi | null = null\n\t\ttry {\n\t\t\timporterApi = await importerApiPromise\n\t\t} catch (e) {\n\t\t\tthis.showImportFailNotification(null)\n\t\t\tthrow new MailImportError(mimimiErrorToImportErrorData(e))\n\t\t}\n\t\timporterApi.setMessageHook((message: MailImportMessage) => this.processMimimiMessage(mailboxId, message))\n\t\tthis.importerApis.set(mailboxId, Promise.resolve(importerApi))\n\t\tconst { listId, elementId } = importerApi.getImportStateId()\n\t\treturn [listId, elementId]\n\t}\n\n\tasync setProgressAction(mailboxId: string, progressAction: number): Promise<void> {\n\t\tlet importerApiPromise = this.importerApis.get(mailboxId)\n\t\tif (importerApiPromise) {\n\t\t\tconst importerApi = await importerApiPromise\n\t\t\tawait importerApi.setProgressAction(progressAction)\n\t\t} else {\n\t\t\tconsole.warn(TAG, \"received progress action for nonexistent import\")\n\t\t\t// we can ignore this - the worst that can happen is that we have an unresponsive button.\n\t\t\t// import was probably finished, but UI didn't get the entity event yet\n\t\t\treturn\n\t\t}\n\t}\n\n\tasync setAsyncErrorHook(mailboxId: string): Promise<void> {\n\t\tconst { promise, reject } = defer<void>()\n\t\tconst listeners = this.currentListeners.get(mailboxId)\n\t\tif (listeners != null) {\n\t\t\tlisteners.push(reject)\n\t\t} else {\n\t\t\tconst newListeners = [reject]\n\t\t\tthis.currentListeners.set(mailboxId, newListeners)\n\t\t}\n\t\treturn promise\n\t}\n\n\tprivate processMimimiMessage(mailboxId: string, message: MailImportMessage) {\n\t\tconst haveOkMessage = message.okMessage != null\n\t\tconst haveErrMessage = message.errorMessage != null\n\n\t\tif (haveErrMessage == haveOkMessage) {\n\t\t\tthrow new ProgrammingError(\"Mail import message can either only be error or only be ok\")\n\t\t} else if (haveErrMessage) {\n\t\t\treturn this.processMimimiErrMessage(mailboxId, assertNotNull(message.errorMessage))\n\t\t}\n\n\t\tconst okMessage = assertNotNull(message.okMessage)\n\t\tswitch (okMessage) {\n\t\t\tcase ImportOkKind.UserCancelInterruption:\n\t\t\t\tthis.importerApis.delete(mailboxId)\n\t\t\t\tbreak\n\t\t\tcase ImportOkKind.SourceExhaustedNoError:\n\t\t\t\tthis.importerApis.delete(mailboxId)\n\t\t\t\tthis.notifier\n\t\t\t\t\t.showOneShot({\n\t\t\t\t\t\ttitle: this.lang.get(\"importComplete_title\"),\n\t\t\t\t\t\tbody: this.lang.get(\"importComplete_msg\"),\n\t\t\t\t\t})\n\t\t\t\t\t.catch()\n\t\t\t\tbreak\n\t\t\tcase ImportOkKind.UserPauseInterruption:\n\t\t\t\tconsole.log(\"User pause request was complete.\")\n\t\t\t\t// have to do nothing for pause\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\tprivate processMimimiErrMessage(mailboxId: string, error: MailImportErrorMessage) {\n\t\tif (error.kind === ImportErrorKind.SourceExhaustedSomeError) {\n\t\t\tthis.importerApis.delete(mailboxId)\n\t\t}\n\t\tlet errorData = asyncImportErrorToMailImportErrorData(error)\n\n\t\t// this is the only category where it does not make sense for user to retry\n\t\t// because we would have already cleaned up the local state and all the files will be renamed to failed.eml\n\t\tif (errorData.category === ImportErrorCategories.ImportIncomplete) {\n\t\t\tthis.importerApis.delete(mailboxId)\n\t\t}\n\t\tthis.showImportFailNotification(mailboxId)\n\n\t\tlet listeners = this.currentListeners.get(mailboxId)\n\t\tif (listeners != null) {\n\t\t\tfor (const listener of listeners) {\n\t\t\t\tconst mailImportError = new MailImportError(errorData)\n\t\t\t\tlistener(mailImportError)\n\t\t\t}\n\t\t\tclear(listeners)\n\t\t}\n\t}\n\n\t/**\n\t * show a system notification (even if there are currently no windows)\n\t *\n\t * @param mailboxId this is the name of the import  subdirectory we show on click. if null, the notification does nothing,\n\t * for example if the directory hasn't been created yet.\n\t */\n\tprivate showImportFailNotification(mailboxId: string | null) {\n\t\tthis.notifier\n\t\t\t.showOneShot({\n\t\t\t\ttitle: this.lang.get(\"importIncomplete_title\"),\n\t\t\t\tbody: this.lang.get(\"importIncomplete_msg\"),\n\t\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tif (res === NotificationResult.Click && mailboxId != null) {\n\t\t\t\t\tthis.electron.shell.showItemInFolder(path.join(this.configDirectory, \"current_imports\", mailboxId, \"dummy.eml\"))\n\t\t\t\t}\n\t\t\t})\n\t}\n\n\tprivate createTutaCredentials(unencTutaCredentials: UnencryptedCredentials, apiUrl: string) {\n\t\tconst tutaCredentials: TutaCredentials = {\n\t\t\taccessToken: unencTutaCredentials?.accessToken,\n\t\t\tisInternalCredential: unencTutaCredentials.credentialInfo.type === CredentialType.Internal,\n\t\t\tencryptedPassphraseKey: unencTutaCredentials.encryptedPassphraseKey ? Array.from(unencTutaCredentials.encryptedPassphraseKey) : [],\n\t\t\tlogin: unencTutaCredentials.credentialInfo.login,\n\t\t\tuserId: unencTutaCredentials.credentialInfo.userId,\n\t\t\tapiUrl,\n\t\t\tclientVersion: env.versionNumber,\n\t\t}\n\t\treturn tutaCredentials\n\t}\n}\n"]}