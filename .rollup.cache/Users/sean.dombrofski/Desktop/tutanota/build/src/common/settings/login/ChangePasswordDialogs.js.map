{"version":3,"file":"ChangePasswordDialogs.js","sourceRoot":"","sources":["../../../../../src/common/settings/login/ChangePasswordDialogs.ts"],"names":[],"mappings":"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","sourcesContent":["import { User } from \"../../api/entities/sys/TypeRefs.js\"\nimport { Dialog } from \"../../gui/base/Dialog.js\"\nimport { locator } from \"../../api/main/CommonLocator.js\"\nimport { showProgressDialog } from \"../../gui/dialogs/ProgressDialog.js\"\nimport { lang } from \"../../misc/LanguageViewModel.js\"\nimport m from \"mithril\"\nimport { NotAuthenticatedError } from \"../../api/common/error/RestError.js\"\nimport { PasswordForm, PasswordModel } from \"../PasswordForm.js\"\nimport { assertNonNull, assertNotNull, Base64, ofClass } from \"@tutao/tutanota-utils\"\nimport { asKdfType, DEFAULT_KDF_TYPE } from \"../../api/common/TutanotaConstants.js\"\n\n/**\n *The admin does not have to enter the old password in addition to the new password (twice). The password strength is not enforced.\n */\nexport async function showChangeUserPasswordAsAdminDialog(user: User) {\n\tconst model = new PasswordModel(locator.usageTestController, locator.logins, { checkOldPassword: false, enforceStrength: false, hideConfirmation: true })\n\n\tconst changeUserPasswordAsAdminOkAction = async (dialog: Dialog) => {\n\t\tshowProgressDialog(\"pleaseWait_msg\", locator.userManagementFacade.changeUserPassword(user, model.getNewPassword())).then(\n\t\t\t() => {\n\t\t\t\tDialog.message(\"pwChangeValid_msg\")\n\t\t\t\tdialog.close()\n\t\t\t},\n\t\t\t(e) => {\n\t\t\t\tconsole.error(e)\n\t\t\t\tDialog.message(\"passwordResetFailed_msg\")\n\t\t\t},\n\t\t)\n\t}\n\n\tDialog.showActionDialog({\n\t\ttitle: \"changePassword_label\",\n\t\tchild: () => m(PasswordForm, { model }),\n\t\tvalidator: () => model.getErrorMessageId(),\n\t\tokAction: changeUserPasswordAsAdminOkAction,\n\t})\n}\n\nasync function storeNewPassword(\n\tcurrentUser: User,\n\tnewPasswordData: {\n\t\tnewEncryptedPassphrase: Base64\n\t\tnewEncryptedPassphraseKey: Uint8Array\n\t} | null,\n) {\n\tconst credentialsProvider = locator.credentialsProvider\n\tconst storedCredentials = await credentialsProvider.getCredentialsInfoByUserId(currentUser._id)\n\tif (storedCredentials != null) {\n\t\tassertNonNull(newPasswordData, \"encrypted password data is not provided\")\n\t\tawait credentialsProvider.replacePassword(storedCredentials, newPasswordData.newEncryptedPassphrase, newPasswordData.newEncryptedPassphraseKey)\n\t}\n}\n\n/**\n * The user must enter the old password in addition to the new password (twice). The password strength is enforced.\n */\nexport async function showChangeOwnPasswordDialog(allowCancel: boolean = true) {\n\tconst model = new PasswordModel(locator.usageTestController, locator.logins, { checkOldPassword: true, enforceStrength: true })\n\n\tconst changeOwnPasswordOkAction = async (dialog: Dialog) => {\n\t\tconst error = model.getErrorMessageId()\n\n\t\tif (error) {\n\t\t\tDialog.message(error)\n\t\t} else {\n\t\t\tconst currentUser = locator.logins.getUserController().user\n\t\t\tconst currentKdfType = asKdfType(currentUser.kdfVersion)\n\t\t\tconst currentPasswordKeyData = {\n\t\t\t\tkdfType: currentKdfType,\n\t\t\t\tsalt: assertNotNull(currentUser.salt),\n\t\t\t\tpassphrase: model.getOldPassword(),\n\t\t\t}\n\n\t\t\tconst newPasswordKeyData = {\n\t\t\t\tkdfType: DEFAULT_KDF_TYPE,\n\t\t\t\tpassphrase: model.getNewPassword(),\n\t\t\t}\n\n\t\t\tshowProgressDialog(\"pleaseWait_msg\", locator.loginFacade.changePassword(currentPasswordKeyData, newPasswordKeyData))\n\t\t\t\t.then((newPasswordData) => {\n\t\t\t\t\tDialog.message(\"pwChangeValid_msg\")\n\t\t\t\t\tdialog.close()\n\t\t\t\t\t// do not wait for it or catch the errors, we do not want to confuse the user with the password change if anything goes wrong\n\t\t\t\t\tstoreNewPassword(currentUser, newPasswordData)\n\t\t\t\t})\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(NotAuthenticatedError, (e) => {\n\t\t\t\t\t\tDialog.message(\"oldPasswordInvalid_msg\")\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tDialog.message(\"passwordResetFailed_msg\")\n\t\t\t\t})\n\t\t}\n\t}\n\n\tDialog.showActionDialog({\n\t\ttitle: \"changePassword_label\",\n\t\tchild: () => m(PasswordForm, { model }),\n\t\tvalidator: () => model.getErrorMessageId(),\n\t\tokAction: changeOwnPasswordOkAction,\n\t\tallowCancel: allowCancel,\n\t})\n}\n"]}