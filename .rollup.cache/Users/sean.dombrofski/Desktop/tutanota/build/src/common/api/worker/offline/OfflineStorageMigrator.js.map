{"version":3,"file":"OfflineStorageMigrator.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/offline/OfflineStorageMigrator.ts"],"names":[],"mappings":"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","sourcesContent":["import { OfflineDbMeta, OfflineStorage, VersionMetadataBaseKey } from \"./OfflineStorage.js\"\nimport { ModelInfos } from \"../../common/EntityFunctions.js\"\nimport { assertNotNull, typedEntries, typedKeys } from \"@tutao/tutanota-utils\"\nimport { ProgrammingError } from \"../../common/error/ProgrammingError.js\"\nimport { SqlCipherFacade } from \"../../../native/common/generatedipc/SqlCipherFacade.js\"\nimport { OutOfSyncError } from \"../../common/error/OutOfSyncError.js\"\nimport { sys94 } from \"./migrations/sys-v94.js\"\nimport { tutanota66 } from \"./migrations/tutanota-v66.js\"\nimport { sys92 } from \"./migrations/sys-v92.js\"\nimport { tutanota65 } from \"./migrations/tutanota-v65.js\"\nimport { sys91 } from \"./migrations/sys-v91.js\"\nimport { sys90 } from \"./migrations/sys-v90.js\"\nimport { tutanota64 } from \"./migrations/tutanota-v64.js\"\nimport { tutanota67 } from \"./migrations/tutanota-v67.js\"\nimport { sys96 } from \"./migrations/sys-v96.js\"\nimport { tutanota69 } from \"./migrations/tutanota-v69.js\"\nimport { sys97 } from \"./migrations/sys-v97.js\"\nimport { tutanota71 } from \"./migrations/tutanota-v71.js\"\nimport { sys99 } from \"./migrations/sys-v99.js\"\nimport { sys101 } from \"./migrations/sys-v101.js\"\nimport { sys102 } from \"./migrations/sys-v102.js\"\nimport { tutanota72 } from \"./migrations/tutanota-v72.js\"\nimport { sys103 } from \"./migrations/sys-v103.js\"\nimport { tutanota73 } from \"./migrations/tutanota-v73.js\"\nimport { sys104 } from \"./migrations/sys-v104.js\"\nimport { sys105 } from \"./migrations/sys-v105.js\"\nimport { sys106 } from \"./migrations/sys-v106.js\"\nimport { tutanota74 } from \"./migrations/tutanota-v74.js\"\nimport { sys107 } from \"./migrations/sys-v107.js\"\nimport { tutanota75 } from \"./migrations/tutanota-v75.js\"\nimport { sys111 } from \"./migrations/sys-v111.js\"\nimport { tutanota76 } from \"./migrations/tutanota-v76.js\"\nimport { sys112 } from \"./migrations/sys-v112.js\"\nimport { tutanota77 } from \"./migrations/tutanota-v77.js\"\nimport { sys114 } from \"./migrations/sys-v114.js\"\nimport { offline2 } from \"./migrations/offline2.js\"\nimport { sys115 } from \"./migrations/sys-v115.js\"\nimport { tutanota78 } from \"./migrations/tutanota-v78.js\"\nimport { sys116 } from \"./migrations/sys-v116.js\"\nimport { tutanota79 } from \"./migrations/tutanota-v79.js\"\nimport { offline3 } from \"./migrations/offline3\"\nimport { sys118 } from \"./migrations/sys-v118.js\"\nimport { tutanota80 } from \"./migrations/tutanota-v80.js\"\nimport { storage11 } from \"./migrations/storage-v11.js\"\nimport { sys119 } from \"./migrations/sys-v119.js\"\nimport { sys120 } from \"./migrations/sys-v120.js\"\nimport { tutanota83 } from \"./migrations/tutanota-v83.js\"\nimport { sys121 } from \"./migrations/sys-v121.js\"\n\nexport interface OfflineMigration {\n\treadonly app: VersionMetadataBaseKey\n\treadonly version: number\n\n\tmigrate(storage: OfflineStorage, sqlCipherFacade: SqlCipherFacade): Promise<void>\n}\n\n/**\n * List of migrations that will be run when needed. Please add your migrations to the list.\n *\n * Normally you should only add them to the end of the list but with offline ones it can be a bit tricky since they change the db structure itself so sometimes\n * they should rather be in the beginning.\n */\nexport const OFFLINE_STORAGE_MIGRATIONS: ReadonlyArray<OfflineMigration> = [\n\tsys90,\n\ttutanota64,\n\tsys91,\n\ttutanota65,\n\tsys92,\n\ttutanota66,\n\tsys94,\n\ttutanota67,\n\tsys96,\n\ttutanota69,\n\tsys97,\n\ttutanota71,\n\tsys99,\n\tsys101,\n\tsys102,\n\ttutanota72,\n\tsys103,\n\ttutanota73,\n\tsys104,\n\tsys105,\n\tsys106,\n\ttutanota74,\n\ttutanota75,\n\tsys107,\n\ttutanota75,\n\tsys111,\n\ttutanota76,\n\tsys112,\n\ttutanota77,\n\tsys114,\n\toffline2,\n\tsys115,\n\ttutanota78,\n\tsys116,\n\ttutanota79,\n\toffline3,\n\tsys118,\n\ttutanota80,\n\tstorage11,\n\tsys119,\n\tsys120,\n\ttutanota83,\n\tsys121,\n]\n\n// in cases where the actual migration is not there anymore (we clean up old migrations no client would apply anymore)\n// and we create a new offline database, we still need to set the offline version to the current value.\nconst CURRENT_OFFLINE_VERSION = 3\n\n/**\n * Migrator for the offline storage between different versions of model. It is tightly couples to the versions of API entities: every time we make an\n * \"incompatible\" change to the API model we need to update offline database somehow.\n *\n * Migrations are done manually but there are a few checks done:\n *  - compile time check that migration exists and is used in this file\n *  - runtime check that runtime model is compatible to the stored one after all the migrations are done.\n *\n *  To add a new migration create a migration with the filename matching ./migrations/{app}-v{version}.ts and use it in the `migrations` field on this\n *  migrator.\n *\n *  Migrations might read and write to the database and they should use StandardMigrations when needed.\n */\nexport class OfflineStorageMigrator {\n\tconstructor(private readonly migrations: ReadonlyArray<OfflineMigration>, private readonly modelInfos: ModelInfos) {}\n\n\tasync migrate(storage: OfflineStorage, sqlCipherFacade: SqlCipherFacade) {\n\t\tconst meta = await storage.dumpMetadata()\n\n\t\t// We did not write down the \"offline\" version from the beginning, so we need to figure out if we need to run the migration for the db structure or\n\t\t// not. Previously we've been checking that there's something in the meta table which is a pretty decent check. Unfortunately we had multiple bugs\n\t\t// which resulted in a state where we would re-create the offline db but not populate the meta table with the versions, the only thing that would be\n\t\t// written is lastUpdateTime.\n\t\t// {}                                                               -> new db, do not migrate offline\n\t\t// {\"base-version\": 1, \"lastUpdateTime\": 123, \"offline-version\": 1} -> up-to-date db, do not migrate offline\n\t\t// {\"lastUpdateTime\": 123}                                          -> broken state after the buggy recreation of db, delete the db\n\t\t// {\"base-version\": 1, \"lastUpdateTime\": 123}                       -> some very old state where we would actually have to migrate offline\n\t\tif (Object.keys(meta).length === 1 && meta.lastUpdateTime != null) {\n\t\t\tthrow new OutOfSyncError(\"Invalid DB state, missing model versions\")\n\t\t}\n\n\t\tconst populatedMeta = await this.populateModelVersions(meta, storage)\n\n\t\tif (this.isDbNewerThanCurrentClient(populatedMeta)) {\n\t\t\tthrow new OutOfSyncError(`offline database has newer schema than client`)\n\t\t}\n\n\t\tawait this.runMigrations(meta, storage, sqlCipherFacade)\n\t\tawait this.checkStateAfterMigrations(storage)\n\t}\n\n\tprivate async checkStateAfterMigrations(storage: OfflineStorage) {\n\t\t// Check that all the necessary migrations have been run, at least to the point where we are compatible.\n\t\tconst meta = await storage.dumpMetadata()\n\t\tfor (const app of typedKeys(this.modelInfos)) {\n\t\t\tconst compatibleSince = this.modelInfos[app].compatibleSince\n\t\t\tlet metaVersion = meta[`${app}-version`]!\n\t\t\tif (metaVersion < compatibleSince) {\n\t\t\t\tthrow new ProgrammingError(\n\t\t\t\t\t`You forgot to migrate your databases! ${app}.version should be >= ${this.modelInfos[app].compatibleSince} but in db it is ${metaVersion}`,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async runMigrations(meta: Partial<OfflineDbMeta>, storage: OfflineStorage, sqlCipherFacade: SqlCipherFacade) {\n\t\tfor (const { app, version, migrate } of this.migrations) {\n\t\t\tconst storedVersion = meta[`${app}-version`]!\n\t\t\tif (storedVersion < version) {\n\t\t\t\tconsole.log(`running offline db migration for ${app} from ${storedVersion} to ${version}`)\n\t\t\t\tawait migrate(storage, sqlCipherFacade)\n\t\t\t\tconsole.log(\"migration finished\")\n\t\t\t\tawait storage.setStoredModelVersion(app, version)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async populateModelVersions(meta: Readonly<Partial<OfflineDbMeta>>, storage: OfflineStorage): Promise<Partial<OfflineDbMeta>> {\n\t\t// copy metadata because it's going to be mutated\n\t\tconst newMeta = { ...meta }\n\t\t// Populate model versions if they haven't been written already\n\t\tfor (const app of typedKeys(this.modelInfos)) {\n\t\t\tawait this.prepopulateVersionIfAbsent(app, this.modelInfos[app].version, newMeta, storage)\n\t\t}\n\n\t\tawait this.prepopulateVersionIfAbsent(\"offline\", CURRENT_OFFLINE_VERSION, newMeta, storage)\n\t\treturn newMeta\n\t}\n\n\t/**\n\t * update the metadata table to initialize the row of the app with the given model version\n\t *\n\t * NB: mutates meta\n\t */\n\tprivate async prepopulateVersionIfAbsent(app: VersionMetadataBaseKey, version: number, meta: Partial<OfflineDbMeta>, storage: OfflineStorage) {\n\t\tconst key = `${app}-version` as const\n\t\tconst storedVersion = meta[key]\n\t\tif (storedVersion == null) {\n\t\t\tmeta[key] = version\n\t\t\tawait storage.setStoredModelVersion(app, version)\n\t\t}\n\t}\n\n\t/**\n\t * it's possible that the user installed an older client over a newer one, and we don't have backwards migrations.\n\t * in that case, it's likely that the client can't even understand the contents of the db.\n\t * we're going to delete it and not migrate at all.\n\t * @private\n\t *\n\t * @returns true if the database we're supposed to migrate has any higher model versions than our highest migration for that model, false otherwise\n\t */\n\tprivate isDbNewerThanCurrentClient(meta: Partial<OfflineDbMeta>): boolean {\n\t\tfor (const [app, { version }] of typedEntries(this.modelInfos)) {\n\t\t\tconst storedVersion = meta[`${app}-version`]!\n\t\t\tif (storedVersion > version) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\treturn assertNotNull(meta[`offline-version`]) > CURRENT_OFFLINE_VERSION\n\t}\n}\n"]}