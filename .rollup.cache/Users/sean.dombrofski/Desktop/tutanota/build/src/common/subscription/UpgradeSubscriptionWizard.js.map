{"version":3,"file":"UpgradeSubscriptionWizard.js","sourceRoot":"","sources":["../../../../src/common/subscription/UpgradeSubscriptionWizard.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Hex } from \"@tutao/tutanota-utils\"\nimport { defer } from \"@tutao/tutanota-utils\"\nimport { AccountingInfo, Customer } from \"../api/entities/sys/TypeRefs.js\"\nimport {\n\tAvailablePlans,\n\tAvailablePlanType,\n\tgetDefaultPaymentMethod,\n\tgetPaymentMethodType,\n\tInvoiceData,\n\tNewPaidPlans,\n\tPaymentData,\n\tPlanType,\n} from \"../api/common/TutanotaConstants\"\nimport { getByAbbreviation } from \"../api/common/CountryList\"\nimport { UpgradeSubscriptionPage, UpgradeSubscriptionPageAttrs } from \"./UpgradeSubscriptionPage\"\nimport m from \"mithril\"\nimport stream from \"mithril/stream\"\nimport { InfoLink, lang, TranslationKey, MaybeTranslation } from \"../misc/LanguageViewModel\"\nimport { createWizardDialog, wizardPageWrapper } from \"../gui/base/WizardDialog.js\"\nimport { InvoiceAndPaymentDataPage, InvoiceAndPaymentDataPageAttrs } from \"./InvoiceAndPaymentDataPage\"\nimport { UpgradeCongratulationsPage, UpgradeCongratulationsPageAttrs } from \"./UpgradeCongratulationsPage.js\"\nimport { SignupPage, SignupPageAttrs } from \"./SignupPage\"\nimport { assertMainOrNode, isIOSApp } from \"../api/common/Env\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { StorageBehavior } from \"../misc/UsageTestModel\"\nimport { FeatureListProvider, SelectedSubscriptionOptions } from \"./FeatureListProvider\"\nimport { queryAppStoreSubscriptionOwnership, UpgradeType } from \"./SubscriptionUtils\"\nimport { UpgradeConfirmSubscriptionPage } from \"./UpgradeConfirmSubscriptionPage.js\"\nimport { asPaymentInterval, PaymentInterval, PriceAndConfigProvider, SubscriptionPrice } from \"./PriceUtils\"\nimport { formatNameAndAddress } from \"../api/common/utils/CommonFormatter.js\"\nimport { LoginController } from \"../api/main/LoginController.js\"\nimport { MobilePaymentSubscriptionOwnership } from \"../native/common/generatedipc/MobilePaymentSubscriptionOwnership.js\"\nimport { DialogType } from \"../gui/base/Dialog.js\"\n\nassertMainOrNode()\nexport type SubscriptionParameters = {\n\tsubscription: string | null\n\ttype: string | null\n\tinterval: string | null // typed as string because m.parseQueryString returns an object with strings\n}\n\nexport type NewAccountData = {\n\tmailAddress: string\n\trecoverCode: Hex\n\tpassword: string\n}\nexport type UpgradeSubscriptionData = {\n\toptions: SelectedSubscriptionOptions\n\tinvoiceData: InvoiceData\n\tpaymentData: PaymentData\n\ttype: PlanType\n\tprice: SubscriptionPrice | null\n\tnextYearPrice: SubscriptionPrice | null\n\taccountingInfo: AccountingInfo | null\n\t// not initially set for signup but loaded in InvoiceAndPaymentDataPage\n\tcustomer: Customer | null\n\t// not initially set for signup but loaded in InvoiceAndPaymentDataPage\n\tnewAccountData: NewAccountData | null\n\tregistrationDataId: string | null\n\tpriceInfoTextId: TranslationKey | null\n\tupgradeType: UpgradeType\n\tplanPrices: PriceAndConfigProvider\n\tcurrentPlan: PlanType | null\n\tsubscriptionParameters: SubscriptionParameters | null\n\tfeatureListProvider: FeatureListProvider\n\treferralCode: string | null\n\tmultipleUsersAllowed: boolean\n\tacceptedPlans: AvailablePlanType[]\n\tmsg: MaybeTranslation | null\n}\n\nexport async function showUpgradeWizard(logins: LoginController, acceptedPlans: AvailablePlanType[] = NewPaidPlans, msg?: MaybeTranslation): Promise<void> {\n\tconst [customer, accountingInfo] = await Promise.all([logins.getUserController().loadCustomer(), logins.getUserController().loadAccountingInfo()])\n\n\tconst priceDataProvider = await PriceAndConfigProvider.getInitializedInstance(null, locator.serviceExecutor, null)\n\n\tconst prices = priceDataProvider.getRawPricingData()\n\tconst domainConfig = locator.domainConfigProvider().getCurrentDomainConfig()\n\tconst featureListProvider = await FeatureListProvider.getInitializedInstance(domainConfig)\n\tconst upgradeData: UpgradeSubscriptionData = {\n\t\toptions: {\n\t\t\tbusinessUse: stream(prices.business),\n\t\t\tpaymentInterval: stream(asPaymentInterval(accountingInfo.paymentInterval)),\n\t\t},\n\t\tinvoiceData: {\n\t\t\tinvoiceAddress: formatNameAndAddress(accountingInfo.invoiceName, accountingInfo.invoiceAddress),\n\t\t\tcountry: accountingInfo.invoiceCountry ? getByAbbreviation(accountingInfo.invoiceCountry) : null,\n\t\t\tvatNumber: accountingInfo.invoiceVatIdNo, // only for EU countries otherwise empty\n\t\t},\n\t\tpaymentData: {\n\t\t\tpaymentMethod: getPaymentMethodType(accountingInfo) || (await getDefaultPaymentMethod()),\n\t\t\tcreditCardData: null,\n\t\t},\n\t\tprice: null,\n\t\ttype: PlanType.Revolutionary,\n\t\tnextYearPrice: null,\n\t\taccountingInfo: accountingInfo,\n\t\tcustomer: customer,\n\t\tnewAccountData: null,\n\t\tregistrationDataId: null,\n\t\tpriceInfoTextId: priceDataProvider.getPriceInfoMessage(),\n\t\tupgradeType: UpgradeType.Initial,\n\t\t// Free used to be always selected here for current plan, but resulted in it displaying \"free\" as current plan for legacy users\n\t\tcurrentPlan: logins.getUserController().isFreeAccount() ? PlanType.Free : null,\n\t\tsubscriptionParameters: null,\n\t\tplanPrices: priceDataProvider,\n\t\tfeatureListProvider: featureListProvider,\n\t\treferralCode: null,\n\t\tmultipleUsersAllowed: false,\n\t\tacceptedPlans,\n\t\tmsg: msg != null ? msg : null,\n\t}\n\n\tconst wizardPages = [\n\t\twizardPageWrapper(UpgradeSubscriptionPage, new UpgradeSubscriptionPageAttrs(upgradeData)),\n\t\twizardPageWrapper(InvoiceAndPaymentDataPage, new InvoiceAndPaymentDataPageAttrs(upgradeData)),\n\t\twizardPageWrapper(UpgradeConfirmSubscriptionPage, new InvoiceAndPaymentDataPageAttrs(upgradeData)),\n\t]\n\tif (isIOSApp()) {\n\t\twizardPages.splice(1, 1) // do not show this page on AppStore payment since we are only able to show this single payment method on iOS\n\t}\n\n\tconst deferred = defer<void>()\n\tconst wizardBuilder = createWizardDialog(\n\t\tupgradeData,\n\t\twizardPages,\n\t\tasync () => {\n\t\t\tdeferred.resolve()\n\t\t},\n\t\tDialogType.EditLarge,\n\t)\n\twizardBuilder.dialog.show()\n\treturn deferred.promise\n}\n\nexport async function loadSignupWizard(\n\tsubscriptionParameters: SubscriptionParameters | null,\n\tregistrationDataId: string | null,\n\treferralCode: string | null,\n\tacceptedPlans: AvailablePlanType[] = AvailablePlans,\n): Promise<void> {\n\tconst usageTestModel = locator.usageTestModel\n\n\tusageTestModel.setStorageBehavior(StorageBehavior.Ephemeral)\n\tlocator.usageTestController.setTests(await usageTestModel.loadActiveUsageTests())\n\n\tconst priceDataProvider = await PriceAndConfigProvider.getInitializedInstance(registrationDataId, locator.serviceExecutor, referralCode)\n\tconst prices = priceDataProvider.getRawPricingData()\n\tconst domainConfig = locator.domainConfigProvider().getCurrentDomainConfig()\n\tconst featureListProvider = await FeatureListProvider.getInitializedInstance(domainConfig)\n\n\tlet message: MaybeTranslation | null\n\tif (isIOSApp()) {\n\t\tconst appstoreSubscriptionOwnership = await queryAppStoreSubscriptionOwnership(null)\n\t\t// if we are on iOS app we only show other plans if AppStore payments are enabled and there's no subscription for this Apple ID.\n\t\tif (appstoreSubscriptionOwnership !== MobilePaymentSubscriptionOwnership.NoSubscription) {\n\t\t\tacceptedPlans = acceptedPlans.filter((plan) => plan === PlanType.Free)\n\t\t}\n\t\tmessage =\n\t\t\tappstoreSubscriptionOwnership != MobilePaymentSubscriptionOwnership.NoSubscription\n\t\t\t\t? lang.getTranslation(\"storeMultiSubscriptionError_msg\", { \"{AppStorePayment}\": InfoLink.AppStorePayment })\n\t\t\t\t: null\n\t} else {\n\t\tmessage = null\n\t}\n\n\tconst signupData: UpgradeSubscriptionData = {\n\t\toptions: {\n\t\t\tbusinessUse: stream(prices.business),\n\t\t\tpaymentInterval: stream(PaymentInterval.Yearly),\n\t\t},\n\t\tinvoiceData: {\n\t\t\tinvoiceAddress: \"\",\n\t\t\tcountry: null,\n\t\t\tvatNumber: \"\", // only for EU countries otherwise empty\n\t\t},\n\t\tpaymentData: {\n\t\t\tpaymentMethod: await getDefaultPaymentMethod(),\n\t\t\tcreditCardData: null,\n\t\t},\n\t\tprice: null,\n\t\tnextYearPrice: null,\n\t\ttype: PlanType.Free,\n\t\taccountingInfo: null,\n\t\tcustomer: null,\n\t\tnewAccountData: null,\n\t\tregistrationDataId,\n\t\tpriceInfoTextId: priceDataProvider.getPriceInfoMessage(),\n\t\tupgradeType: UpgradeType.Signup,\n\t\tplanPrices: priceDataProvider,\n\t\tcurrentPlan: null,\n\t\tsubscriptionParameters: subscriptionParameters,\n\t\tfeatureListProvider: featureListProvider,\n\t\treferralCode,\n\t\tmultipleUsersAllowed: false,\n\t\tacceptedPlans,\n\t\tmsg: message,\n\t}\n\n\tconst invoiceAttrs = new InvoiceAndPaymentDataPageAttrs(signupData)\n\n\tconst wizardPages = [\n\t\twizardPageWrapper(UpgradeSubscriptionPage, new UpgradeSubscriptionPageAttrs(signupData)),\n\t\twizardPageWrapper(SignupPage, new SignupPageAttrs(signupData)),\n\t\twizardPageWrapper(InvoiceAndPaymentDataPage, invoiceAttrs), // this page will login the user after signing up with newaccount data\n\t\twizardPageWrapper(UpgradeConfirmSubscriptionPage, invoiceAttrs), // this page will login the user if they are not login for iOS payment through AppStore\n\t\twizardPageWrapper(UpgradeCongratulationsPage, new UpgradeCongratulationsPageAttrs(signupData)),\n\t]\n\n\tif (isIOSApp()) {\n\t\twizardPages.splice(2, 1) // do not show this page on AppStore payment since we are only able to show this single payment method on iOS\n\t}\n\n\tconst wizardBuilder = createWizardDialog(\n\t\tsignupData,\n\t\twizardPages,\n\t\tasync () => {\n\t\t\tif (locator.logins.isUserLoggedIn()) {\n\t\t\t\t// this ensures that all created sessions during signup process are closed\n\t\t\t\t// either by clicking on `cancel`, closing the window, or confirm on the UpgradeCongratulationsPage\n\t\t\t\tawait locator.logins.logout(false)\n\t\t\t}\n\n\t\t\tif (signupData.newAccountData) {\n\t\t\t\tm.route.set(\"/login\", {\n\t\t\t\t\tnoAutoLogin: true,\n\t\t\t\t\tloginWith: signupData.newAccountData.mailAddress,\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tm.route.set(\"/login\", {\n\t\t\t\t\tnoAutoLogin: true,\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tDialogType.EditLarge,\n\t)\n\n\t// for signup specifically, we only want the invoice and payment page as well as the confirmation page to show up if signing up for a paid account (and the user did not go back to the first page!)\n\tinvoiceAttrs.setEnabledFunction(() => signupData.type !== PlanType.Free && wizardBuilder.attrs.currentPage !== wizardPages[0])\n\n\twizardBuilder.dialog.show()\n}\n"]}