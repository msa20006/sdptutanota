{"version":3,"file":"sqlworker.js","sourceRoot":"","sources":["../../../../src/common/desktop/sqlworker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * entry point to the sqlite worker threads. one is created for each user's offline database.\n * it's possible for multiple windows to access the same sqlite database through the same thread.\n * it must be ensured that there is never more than one thread accessing the same database.\n *\n * its purpose is\n * * to trap console.log calls when it is created\n * * then create an instance of DesktopSqlCipher\n * * then wait for commands, pass them to the DesktopSqlCihper and return the results\n *\n * trapping the console.log is necessary for the output to be spliced into our logging system. using\n * the default console.log from a worker writes directly to stdout.\n * */\nimport { parentPort, workerData } from \"node:worker_threads\"\nimport { DesktopSqlCipher } from \"./db/DesktopSqlCipher.js\"\nimport { Command, MessageDispatcher, Request } from \"../api/common/threading/MessageDispatcher.js\"\nimport { SqlCipherFacade } from \"../native/common/generatedipc/SqlCipherFacade.js\"\nimport { NodeWorkerTransport } from \"../api/common/threading/NodeWorkerTransport.js\"\n\n/** make this generic over all possible facades? The generic parameter needs some constraint to not expand this to any */\nexport type SqlCipherCommandNames = keyof SqlCipherFacade\ntype SqlCipherCommandObject = { [K in SqlCipherCommandNames]: Command<K> }\n\nexport type WorkerLogCommandNames = \"log\" | \"info\" | \"error\" | \"warn\" | \"trace\"\n\nif (parentPort != null) {\n\ttry {\n\t\tconst sqlCipherFacade = new DesktopSqlCipher(workerData.nativeBindingPath, workerData.dbPath, workerData.integrityCheck)\n\t\tconst commands: SqlCipherCommandObject = {\n\t\t\tall: (msg: Request<\"all\">) => sqlCipherFacade.all(msg.args[0], msg.args[1]),\n\t\t\tcloseDb: async () => {\n\t\t\t\tawait sqlCipherFacade.closeDb()\n\t\t\t\t// this lets the thread exit once the port is the only thing on the event loop\n\t\t\t\tparentPort?.unref()\n\t\t\t},\n\t\t\tdeleteDb: (msg: Request<\"deleteDb\">) => sqlCipherFacade.deleteDb(msg.args[0]),\n\t\t\tget: (msg: Request<\"get\">) => sqlCipherFacade.get(msg.args[0], msg.args[1]),\n\t\t\tlockRangesDbAccess: (msg: Request<\"lockRangesDbAccess\">) => sqlCipherFacade.lockRangesDbAccess(msg.args[0]),\n\t\t\topenDb: (msg: Request<\"openDb\">) => sqlCipherFacade.openDb(msg.args[0], msg.args[1]),\n\t\t\trun: (msg: Request<\"run\">) => sqlCipherFacade.run(msg.args[0], msg.args[1]),\n\t\t\tunlockRangesDbAccess: (msg: Request<\"unlockRangesDbAccess\">) => sqlCipherFacade.unlockRangesDbAccess(msg.args[0]),\n\t\t}\n\n\t\tconst workerTransport = new MessageDispatcher(\n\t\t\tnew NodeWorkerTransport<WorkerLogCommandNames, SqlCipherCommandNames>(parentPort),\n\t\t\tcommands,\n\t\t\t\"nodeworker-node\",\n\t\t)\n\n\t\t;(console as any).info = (...args: any[]) => workerTransport.postRequest(new Request(\"info\", args))\n\t\t;(console as any).log = (...args: any[]) => workerTransport.postRequest(new Request(\"log\", args))\n\t\t;(console as any).error = (...args: any[]) => workerTransport.postRequest(new Request(\"error\", args))\n\t\t;(console as any).warn = (...args: any[]) => workerTransport.postRequest(new Request(\"warn\", args))\n\t\t;(console as any).trace = (...args: any[]) => workerTransport.postRequest(new Request(\"trace\", args))\n\t\tconsole.log(\"set up sql cipher done\")\n\t} catch (e) {\n\t\tparentPort.unref()\n\t}\n} else {\n\t// if there's no parent port, there's nothing we can do really\n\tprocess.exit(1)\n}\n"]}