{"version":3,"file":"SelectAppLockMethodDialog.js","sourceRoot":"","sources":["../../../../../src/common/native/main/SelectAppLockMethodDialog.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dialog, DialogType } from \"../../gui/base/Dialog.js\"\nimport m, { Children, Component, Vnode } from \"mithril\"\nimport { lang, TranslationKey } from \"../../misc/LanguageViewModel.js\"\nimport type { RadioSelectorAttrs, RadioSelectorOption } from \"../../gui/base/RadioSelector.js\"\nimport { RadioSelector } from \"../../gui/base/RadioSelector.js\"\nimport { CredentialAuthenticationError } from \"../../api/common/error/CredentialAuthenticationError.js\"\nimport { liveDataAttrs } from \"../../gui/AriaUtils.js\"\nimport type { DeferredObject } from \"@tutao/tutanota-utils\"\nimport { defer } from \"@tutao/tutanota-utils\"\nimport { CancelledError } from \"../../api/common/error/CancelledError.js\"\nimport { Keys } from \"../../api/common/TutanotaConstants.js\"\nimport { BaseButton } from \"../../gui/base/buttons/BaseButton.js\"\nimport { MobileSystemFacade } from \"../common/generatedipc/MobileSystemFacade.js\"\nimport { AppLockMethod } from \"../common/generatedipc/AppLockMethod.js\"\n\nexport async function showAppLockMethodDialog(mobileSystemFacade: MobileSystemFacade): Promise<void> {\n\tawait AppLockMethodDialog.showAndWaitForSelection(mobileSystemFacade)\n}\n\nclass AppLockMethodDialog {\n\tprivate error: string | null\n\tprivate readonly finished: DeferredObject<void>\n\tprivate readonly dialog: Dialog\n\n\t/** @private */\n\tconstructor(\n\t\tprivate readonly mobileSystemFacade: MobileSystemFacade,\n\t\tprivate readonly supportedModes: ReadonlyArray<AppLockMethod>,\n\t\tprivate readonly previousSelection: AppLockMethod,\n\t) {\n\t\tthis.error = null\n\t\tthis.finished = defer()\n\t\tthis.dialog = new Dialog(DialogType.EditMedium, {\n\t\t\tview: () => {\n\t\t\t\t// We need custom dialog because:\n\t\t\t\t// - We don't need large dialog\n\t\t\t\t// - We want our selector button in the body and not in the header and it must stick to the bottom of the dialog\n\t\t\t\t//   (large dialog scrolls its contents and that's *not* what we want for that button).\n\t\t\t\treturn m(\"\", [\n\t\t\t\t\tnull,\n\t\t\t\t\tm(SelectAppLockMethodView, {\n\t\t\t\t\t\tclass: \"scroll pt plr-l height-100p\",\n\t\t\t\t\t\terror: this.error,\n\t\t\t\t\t\tonConfirm: (mode) => this.onMethodSelected(mode),\n\t\t\t\t\t\tsupportedModes: this.supportedModes,\n\t\t\t\t\t\tpreviousSelection: this.previousSelection,\n\t\t\t\t\t}),\n\t\t\t\t])\n\t\t\t},\n\t\t}).addShortcut({\n\t\t\thelp: \"close_alt\",\n\t\t\tkey: Keys.ESC,\n\t\t\texec: () => this.dialog.close(),\n\t\t})\n\t\tthis.dialog.setCloseHandler(() => {\n\t\t\tthis.finished.resolve()\n\t\t\tthis.dialog.close()\n\t\t})\n\t}\n\n\tstatic async showAndWaitForSelection(mobileSystemFacade: MobileSystemFacade) {\n\t\tconst supportedModes = await mobileSystemFacade.getSupportedAppLockMethods()\n\t\tconst previousSelection = await mobileSystemFacade.getAppLockMethod()\n\t\tconst credentialsDialog = new AppLockMethodDialog(mobileSystemFacade, supportedModes, previousSelection)\n\n\t\tcredentialsDialog.dialog.show()\n\n\t\tawait credentialsDialog.finished.promise\n\t}\n\n\tprivate async onMethodSelected(mode: AppLockMethod) {\n\t\ttry {\n\t\t\t// Make sure that the user can actually use the method before we save it.\n\t\t\t// Example: on iOS Biometrics will be supported but before the first use the user must give the permission anyway.\n\t\t\tawait this.mobileSystemFacade.enforceAppLock(mode)\n\t\t\tawait this.mobileSystemFacade.setAppLockMethod(mode)\n\n\t\t\tthis.dialog.close()\n\n\t\t\tthis.finished.resolve()\n\t\t} catch (e) {\n\t\t\tif (e instanceof CredentialAuthenticationError) {\n\t\t\t\tthis.error = e.message\n\t\t\t\tm.redraw()\n\t\t\t} else if (e instanceof CancelledError) {\n\t\t\t\t// ignore. this can happen if we switch app pin -> device lock and the user cancels the pin prompt.\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n}\n\ninterface SelectAppLockMethodDialogAttrs {\n\tclass?: string\n\tpreviousSelection: AppLockMethod\n\tonConfirm: ((appLockMethod: AppLockMethod) => unknown) | null\n\tsupportedModes: ReadonlyArray<AppLockMethod>\n\terror: string | null\n\tonModeSelected?: (mode: AppLockMethod) => unknown\n}\n\nexport class SelectAppLockMethodView implements Component<SelectAppLockMethodDialogAttrs> {\n\tprivate currentMethod: AppLockMethod\n\n\tconstructor({ attrs }: Vnode<SelectAppLockMethodDialogAttrs>) {\n\t\tthis.currentMethod = attrs.previousSelection\n\t}\n\n\tview({ attrs }: Vnode<SelectAppLockMethodDialogAttrs>): Children {\n\t\tconst options = this.getSupportedOptions(attrs)\n\n\t\tconst { onConfirm } = attrs\n\t\treturn [\n\t\t\tm(\n\t\t\t\t\".flex.col\",\n\t\t\t\t{\n\t\t\t\t\tclass: attrs.class,\n\t\t\t\t},\n\t\t\t\t[\n\t\t\t\t\tattrs.error ? m(\".small.center.statusTextColor.pb-s\", liveDataAttrs(), attrs.error) : null,\n\t\t\t\t\tm(\"\", lang.get(\"credentialsEncryptionModeSelection_msg\")),\n\t\t\t\t\tm(\n\t\t\t\t\t\t\".mt\",\n\t\t\t\t\t\tm(RadioSelector, {\n\t\t\t\t\t\t\tname: \"credentialsEncryptionMode_label\",\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tselectedOption: this.currentMethod,\n\t\t\t\t\t\t\tonOptionSelected: (mode: AppLockMethod) => {\n\t\t\t\t\t\t\t\tthis.currentMethod = mode\n\t\t\t\t\t\t\t\tattrs.onModeSelected?.(mode)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} satisfies RadioSelectorAttrs<AppLockMethod>),\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t),\n\t\t\tonConfirm ? this.renderSelectButton(() => onConfirm(this.currentMethod)) : null,\n\t\t]\n\t}\n\n\tprivate getSupportedOptions(attrs: SelectAppLockMethodDialogAttrs): Array<RadioSelectorOption<AppLockMethod>> {\n\t\tconst generateOption = (name: TranslationKey, value: AppLockMethod): RadioSelectorOption<AppLockMethod> => ({\n\t\t\tname,\n\t\t\tvalue,\n\t\t})\n\n\t\tconst options = [\n\t\t\tgenerateOption(\"credentialsEncryptionModeDeviceLock_label\", AppLockMethod.None),\n\t\t\tgenerateOption(\"credentialsEncryptionModeDeviceCredentials_label\", AppLockMethod.SystemPassOrBiometrics),\n\t\t\tgenerateOption(\"credentialsEncryptionModeBiometrics_label\", AppLockMethod.Biometrics),\n\t\t] as const\n\t\treturn options.filter((option) => attrs.supportedModes.includes(option.value))\n\t}\n\n\tprivate renderSelectButton(onclick: () => unknown) {\n\t\treturn m(BaseButton, {\n\t\t\tlabel: \"ok_action\",\n\t\t\ttext: lang.get(\"ok_action\"),\n\t\t\tclass: \"uppercase accent-bg full-width center b content-fg flash\",\n\t\t\tstyle: {\n\t\t\t\theight: \"60px\",\n\t\t\t},\n\t\t\tonclick,\n\t\t})\n\t}\n}\n"]}