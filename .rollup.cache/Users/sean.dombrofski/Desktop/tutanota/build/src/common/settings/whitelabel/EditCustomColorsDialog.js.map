{"version":3,"file":"EditCustomColorsDialog.js","sourceRoot":"","sources":["../../../../../src/common/settings/whitelabel/EditCustomColorsDialog.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,SAAS,CAAA;AAEvB,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAA;AACvD,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAA;AAG9C,OAAO,EAAE,IAAI,EAAE,MAAM,oCAAoC,CAAA;AACzD,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAA;AAGvD,gBAAgB,EAAE,CAAA;AAElB,MAAM,UAAU,IAAI,CAAC,KAAkC;IACtD,KAAK,CAAC,IAAI,EAAE,CAAA;IACZ,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAA;IACtC,MAAM,IAAI,GAAG;QACZ,IAAI,EAAE,GAAG,EAAE;YACV,OAAO,CAAC,CAAC,KAAK,EAAE;gBACf,CAAC,CAAC,iBAAiB,EAAE;oBACpB,KAAK,EAAE,KAAK;iBACZ,CAAC;aACF,CAAC,CAAA;QACH,CAAC;KACD,CAAA;IAED,MAAM,YAAY,GAAG,GAAG,EAAE;QACzB,KAAK,CAAC,sBAAsB,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;IAC1D,CAAC,CAAA;IAED,MAAM,QAAQ,GAAG,KAAK,IAAI,EAAE;QAC3B,IAAI,MAAM,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC;YACxB,MAAM,CAAC,KAAK,EAAE,CAAA;QACf,CAAC;aAAM,CAAC;YACP,OAAO,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA;QAC3C,CAAC;IACF,CAAC,CAAA;IAED,IAAI,cAAc,GAAyB;QAC1C,IAAI,EAAE;YACL;gBACC,KAAK,EAAE,eAAe;gBACtB,KAAK,EAAE,YAAY;gBACnB,IAAI,wCAAsB;aAC1B;SACD;QACD,KAAK,EAAE;YACN;gBACC,KAAK,EAAE,WAAW;gBAClB,KAAK,EAAE,QAAQ;gBACf,IAAI,oCAAoB;aACxB;SACD;QACD,MAAM,EAAE,oBAAoB;KAC5B,CAAA;IACD,IAAI,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,cAAc,EAAE,IAAI,CAAC;SACnD,WAAW,CAAC;QACZ,GAAG,EAAE,IAAI,CAAC,GAAG;QACb,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,WAAW;KACjB,CAAC;SACD,eAAe,CAAC,YAAY,CAAC;SAC7B,IAAI,EAAE,CAAA;AACT,CAAC","sourcesContent":["import m from \"mithril\"\nimport { lang } from \"../../misc/LanguageViewModel\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { Dialog } from \"../../gui/base/Dialog\"\nimport { ButtonType } from \"../../gui/base/Button.js\"\nimport type { DialogHeaderBarAttrs } from \"../../gui/base/DialogHeaderBar\"\nimport { Keys } from \"../../api/common/TutanotaConstants\"\nimport { CustomColorEditor } from \"./CustomColorEditor\"\nimport { CustomColorsEditorViewModel } from \"./CustomColorsEditorViewModel\"\n\nassertMainOrNode()\n\nexport function show(model: CustomColorsEditorViewModel) {\n\tmodel.init()\n\tmodel.builtTheme.map(() => m.redraw())\n\tconst form = {\n\t\tview: () => {\n\t\t\treturn m(\".pb\", [\n\t\t\t\tm(CustomColorEditor, {\n\t\t\t\t\tmodel: model,\n\t\t\t\t}),\n\t\t\t])\n\t\t},\n\t}\n\n\tconst cancelAction = () => {\n\t\tmodel.resetActiveClientTheme().then(() => dialog.close())\n\t}\n\n\tconst okAction = async () => {\n\t\tif (await model.save()) {\n\t\t\tdialog.close()\n\t\t} else {\n\t\t\treturn Dialog.message(\"correctValues_msg\")\n\t\t}\n\t}\n\n\tlet actionBarAttrs: DialogHeaderBarAttrs = {\n\t\tleft: [\n\t\t\t{\n\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\tclick: cancelAction,\n\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t},\n\t\t],\n\t\tright: [\n\t\t\t{\n\t\t\t\tlabel: \"ok_action\",\n\t\t\t\tclick: okAction,\n\t\t\t\ttype: ButtonType.Primary,\n\t\t\t},\n\t\t],\n\t\tmiddle: \"customColors_label\",\n\t}\n\tlet dialog = Dialog.largeDialog(actionBarAttrs, form)\n\t\t.addShortcut({\n\t\t\tkey: Keys.ESC,\n\t\t\texec: cancelAction,\n\t\t\thelp: \"close_alt\",\n\t\t})\n\t\t.setCloseHandler(cancelAction)\n\t\t.show()\n}\n"]}