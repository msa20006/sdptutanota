{"version":3,"file":"SqlCipherFacadeReceiveDispatcher.js","sourceRoot":"","sources":["../../../../../../src/common/native/common/generatedipc/SqlCipherFacadeReceiveDispatcher.ts"],"names":[],"mappings":"AAAA,iCAAiC;AAKjC,MAAM,OAAO,gCAAgC;IACf;IAA7B,YAA6B,MAAuB;QAAvB,WAAM,GAAN,MAAM,CAAiB;IAAG,CAAC;IACxD,KAAK,CAAC,QAAQ,CAAC,MAAc,EAAE,GAAe;QAC7C,QAAQ,MAAM,EAAE,CAAC;YAChB,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACf,MAAM,MAAM,GAAW,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC7B,MAAM,KAAK,GAAe,GAAG,CAAC,CAAC,CAAC,CAAA;gBAChC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;YACzC,CAAC;YACD,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChB,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAA;YAC7B,CAAC;YACD,KAAK,UAAU,CAAC,CAAC,CAAC;gBACjB,MAAM,MAAM,GAAW,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;YACpC,CAAC;YACD,KAAK,KAAK,CAAC,CAAC,CAAC;gBACZ,MAAM,KAAK,GAAW,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC5B,MAAM,MAAM,GAAkC,GAAG,CAAC,CAAC,CAAC,CAAA;gBACpD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;YACtC,CAAC;YACD,KAAK,KAAK,CAAC,CAAC,CAAC;gBACZ,MAAM,KAAK,GAAW,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC5B,MAAM,MAAM,GAAkC,GAAG,CAAC,CAAC,CAAC,CAAA;gBACpD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;YACtC,CAAC;YACD,KAAK,KAAK,CAAC,CAAC,CAAC;gBACZ,MAAM,KAAK,GAAW,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC5B,MAAM,MAAM,GAAkC,GAAG,CAAC,CAAC,CAAC,CAAA;gBACpD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;YACtC,CAAC;YACD,KAAK,oBAAoB,CAAC,CAAC,CAAC;gBAC3B,MAAM,MAAM,GAAW,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAA;YAC9C,CAAC;YACD,KAAK,sBAAsB,CAAC,CAAC,CAAC;gBAC7B,MAAM,MAAM,GAAW,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAA;YAChD,CAAC;QACF,CAAC;IACF,CAAC;CACD","sourcesContent":["/* generated file, don't edit. */\n\nimport { TaggedSqlValue } from \"./TaggedSqlValue.js\"\nimport { SqlCipherFacade } from \"./SqlCipherFacade.js\"\n\nexport class SqlCipherFacadeReceiveDispatcher {\n\tconstructor(private readonly facade: SqlCipherFacade) {}\n\tasync dispatch(method: string, arg: Array<any>): Promise<any> {\n\t\tswitch (method) {\n\t\t\tcase \"openDb\": {\n\t\t\t\tconst userId: string = arg[0]\n\t\t\t\tconst dbKey: Uint8Array = arg[1]\n\t\t\t\treturn this.facade.openDb(userId, dbKey)\n\t\t\t}\n\t\t\tcase \"closeDb\": {\n\t\t\t\treturn this.facade.closeDb()\n\t\t\t}\n\t\t\tcase \"deleteDb\": {\n\t\t\t\tconst userId: string = arg[0]\n\t\t\t\treturn this.facade.deleteDb(userId)\n\t\t\t}\n\t\t\tcase \"run\": {\n\t\t\t\tconst query: string = arg[0]\n\t\t\t\tconst params: ReadonlyArray<TaggedSqlValue> = arg[1]\n\t\t\t\treturn this.facade.run(query, params)\n\t\t\t}\n\t\t\tcase \"get\": {\n\t\t\t\tconst query: string = arg[0]\n\t\t\t\tconst params: ReadonlyArray<TaggedSqlValue> = arg[1]\n\t\t\t\treturn this.facade.get(query, params)\n\t\t\t}\n\t\t\tcase \"all\": {\n\t\t\t\tconst query: string = arg[0]\n\t\t\t\tconst params: ReadonlyArray<TaggedSqlValue> = arg[1]\n\t\t\t\treturn this.facade.all(query, params)\n\t\t\t}\n\t\t\tcase \"lockRangesDbAccess\": {\n\t\t\t\tconst listId: string = arg[0]\n\t\t\t\treturn this.facade.lockRangesDbAccess(listId)\n\t\t\t}\n\t\t\tcase \"unlockRangesDbAccess\": {\n\t\t\t\tconst listId: string = arg[0]\n\t\t\t\treturn this.facade.unlockRangesDbAccess(listId)\n\t\t\t}\n\t\t}\n\t}\n}\n"]}