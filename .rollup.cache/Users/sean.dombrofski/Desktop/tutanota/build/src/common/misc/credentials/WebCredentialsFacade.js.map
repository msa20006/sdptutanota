{"version":3,"file":"WebCredentialsFacade.js","sourceRoot":"","sources":["../../../../../src/common/misc/credentials/WebCredentialsFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { PersistedCredentials } from \"../../native/common/generatedipc/PersistedCredentials.js\"\nimport { NativeCredentialsFacade } from \"../../native/common/generatedipc/NativeCredentialsFacade.js\"\nimport { DeviceConfig, DeviceConfigCredentials } from \"../DeviceConfig.js\"\nimport { CredentialEncryptionMode } from \"./CredentialEncryptionMode.js\"\nimport { UnencryptedCredentials } from \"../../native/common/generatedipc/UnencryptedCredentials.js\"\nimport { base64ToUint8Array, mapNullable, stringToUtf8Uint8Array, uint8ArrayToBase64, utf8Uint8ArrayToString } from \"@tutao/tutanota-utils\"\n\n/**\n * This is a temporary stub that we will replace soon by some mechanism that will be able to utilize fingerprint/pin on mobile devices\n * for encryption of login data. Using this implementation does not mean we do not encrypt credentials currently since there is an\n * additional mechanism for credentials encryption using an access key stored server side. This is done in LoginFacade.\n */\n\nexport class WebCredentialsFacade implements NativeCredentialsFacade {\n\tconstructor(private readonly deviceConfig: DeviceConfig) {}\n\n\tasync clear(): Promise<void> {\n\t\tconst allCredentials = this.deviceConfig.getCredentials()\n\t\tfor (const credentials of allCredentials) {\n\t\t\tawait this.deviceConfig.deleteByUserId(credentials.credentialInfo.userId)\n\t\t}\n\t}\n\n\tdeleteByUserId(id: string): Promise<void> {\n\t\treturn this.deviceConfig.deleteByUserId(id)\n\t}\n\n\tasync getCredentialEncryptionMode(): Promise<CredentialEncryptionMode | null> {\n\t\treturn null\n\t}\n\n\tasync loadAll(): Promise<ReadonlyArray<PersistedCredentials>> {\n\t\treturn this.deviceConfig.getCredentials().map(deviceConfigCredentialsToPersisted)\n\t}\n\n\tasync loadByUserId(id: string): Promise<UnencryptedCredentials | null> {\n\t\tconst deviceConfigCredentials = this.deviceConfig.getCredentialsByUserId(id)\n\t\tif (deviceConfigCredentials == null) return null\n\t\treturn {\n\t\t\tcredentialInfo: deviceConfigCredentials.credentialInfo,\n\t\t\tencryptedPassword: deviceConfigCredentials.encryptedPassword,\n\t\t\tencryptedPassphraseKey: mapNullable(deviceConfigCredentials.encryptedPassphraseKey, base64ToUint8Array),\n\t\t\taccessToken: deviceConfigCredentials.accessToken,\n\t\t\tdatabaseKey: null,\n\t\t}\n\t}\n\n\tasync setCredentialEncryptionMode(_: CredentialEncryptionMode): Promise<void> {}\n\n\tasync store(credentials: UnencryptedCredentials): Promise<void> {\n\t\tconst deviceConfigCredentials: DeviceConfigCredentials = {\n\t\t\tcredentialInfo: credentials.credentialInfo,\n\t\t\tencryptedPassphraseKey: mapNullable(credentials.encryptedPassphraseKey, uint8ArrayToBase64),\n\t\t\taccessToken: credentials.accessToken,\n\t\t\tdatabaseKey: null,\n\t\t\tencryptedPassword: credentials.encryptedPassword,\n\t\t}\n\t\tthis.deviceConfig.storeCredentials(deviceConfigCredentials)\n\t}\n\n\tasync storeEncrypted(credentials: PersistedCredentials): Promise<void> {\n\t\tthis.deviceConfig.storeCredentials(persistedCredentialsToDeviceConfig(credentials))\n\t}\n\n\tasync getSupportedEncryptionModes() {\n\t\treturn []\n\t}\n\n\tmigrateToNativeCredentials(\n\t\tcredentials: ReadonlyArray<PersistedCredentials>,\n\t\tencryptionMode: CredentialEncryptionMode | null,\n\t\tcredentialsKey: Uint8Array | null,\n\t): Promise<void> {\n\t\tthrow new Error(\"Method not implemented.\")\n\t}\n}\n\nfunction persistedCredentialsToDeviceConfig(persistentCredentials: PersistedCredentials): DeviceConfigCredentials {\n\treturn {\n\t\tcredentialInfo: persistentCredentials.credentialInfo,\n\t\tencryptedPassword: persistentCredentials.encryptedPassword,\n\t\tencryptedPassphraseKey: mapNullable(persistentCredentials.encryptedPassphraseKey, uint8ArrayToBase64),\n\t\taccessToken: utf8Uint8ArrayToString(persistentCredentials.accessToken),\n\t\tdatabaseKey: mapNullable(persistentCredentials.databaseKey, uint8ArrayToBase64),\n\t}\n}\n\nfunction deviceConfigCredentialsToPersisted(deviceConfigCredentials: DeviceConfigCredentials): PersistedCredentials {\n\treturn {\n\t\tcredentialInfo: deviceConfigCredentials.credentialInfo,\n\t\tencryptedPassword: deviceConfigCredentials.encryptedPassword,\n\t\tencryptedPassphraseKey: mapNullable(deviceConfigCredentials.encryptedPassphraseKey, base64ToUint8Array),\n\t\taccessToken: stringToUtf8Uint8Array(deviceConfigCredentials.accessToken),\n\t\tdatabaseKey: mapNullable(deviceConfigCredentials.databaseKey, base64ToUint8Array),\n\t}\n}\n"]}