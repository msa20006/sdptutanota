{"version":3,"file":"DesktopConfig.js","sourceRoot":"","sources":["../../../../../src/common/desktop/config/DesktopConfig.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAA;AAIvD,OAAO,EAAkB,mBAAmB,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAA;AAGpF,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAA;AACnC,OAAO,EAAE,gBAAgB,EAAE,MAAM,yCAAyC,CAAA;AAG1E,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAA;AAS7D;;GAEG;AACH,MAAM,OAAO,aAAa;IAOP;IACA;IACA;IARD,WAAW,CAAwB;IACnC,aAAa,CAAwB,CAAC,gDAAgD;IAC/F,iBAAiB,CAAiB;IAC1C,mBAAmB,GAAwB,EAAyB,CAAA;IAEpE,YACkB,QAA+B,EAC/B,cAAqC,EACrC,YAAuC;QAFvC,aAAQ,GAAR,QAAQ,CAAuB;QAC/B,mBAAc,GAAd,cAAc,CAAuB;QACrC,iBAAY,GAAZ,YAAY,CAA2B;QAExD,IAAI,CAAC,WAAW,GAAG,KAAK,EAAE,CAAA;QAC1B,IAAI,CAAC,aAAa,GAAG,KAAK,EAAE,CAAA;IAC7B,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,eAA2B,EAAE,iBAA6B;QACpE,MAAM,WAAW,GAAG,MAAM,eAAe,CAAC,QAAQ,EAAE,CAAA;QACpD,MAAM,WAAW,GAAG,WAAW,CAAC,cAAc,CAAC,CAAA;QAC/C,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;QAErC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAA;QAE1C,MAAM,WAAW,GAAG,WAAW,CAAC,sBAAsB,CAAW,CAAA;QAEjE,uCAAuC;QACvC,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QACxD,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,IAAI,WAAW,CAAA;QACzE,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAA;QAEhE,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAgB,WAAW,CAAC,yBAAyB,CAAC,CAAC,EAAE,eAAe,CAAC,CAAA;QAE3I,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAA;QACrD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,CAAA;IAC1C,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,GAAoB;QAClC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAA;QAC7C,OAAO,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAA;IAClC,CAAC;IAED,KAAK,CAAC,MAAM,CAA0B,GAAM;QAC3C,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAA;QAEtD,IAAI,GAAG,IAAI,gBAAgB,EAAE,CAAC;YAC7B,OAAO,aAAa,CAAC,GAAG,CAAC,CAAA;QAC1B,CAAC;aAAM,IAAI,GAAG,IAAI,mBAAmB,EAAE,CAAC;YACvC,OAAO,IAAI,CAAC,eAAe,CAAC,GAA0B,CAAC,CAAA;QACxD,CAAC;IACF,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,GAAwB;QACrD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAA;QACtD,MAAM,cAAc,GAAG,aAAa,CAAC,GAAG,CAAC,CAAA;QAEzC,IAAI,CAAC,cAAc,EAAE,CAAC;YACrB,OAAO,IAAI,CAAA;QACZ,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAA;QAC1D,IAAI,CAAC;YACJ,OAAO,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAS,cAAc,CAAC,CAAC,CAAA;QACvF,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,IAAI,CAAC,YAAY,WAAW,EAAE,CAAC;gBAC9B,GAAG,CAAC,KAAK,CAAC,mCAAmC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAA;gBACtD,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;gBAC5B,OAAO,IAAI,CAAA;YACZ,CAAC;QACF,CAAC;IACF,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,GAAwB,EAAE,KAAyB;QAChF,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAA;QAC1D,IAAI,cAAc,CAAA;QAClB,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC;YACnB,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAA;QACtE,CAAC;aAAM,CAAC;YACP,cAAc,GAAG,IAAI,CAAA;QACtB,CAAC;QACD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAA;QACtD,aAAa,CAAC,GAAG,CAAC,GAAG,cAAc,CAAA;IACpC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CAAC,GAA2C,EAAE,KAAyB;QAClF,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAA;QAEtD,IAAI,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;YAC7D,aAAa,CAAC,GAAG,CAAC,GAAG,KAAK,CAAA;QAC3B,CAAC;aAAM,IAAI,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;YACvE,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC;gBACnB,aAAa,CAAC,GAAG,CAAC,GAAG,KAAK,CAAA;YAC3B,CAAC;iBAAM,CAAC;gBACP,MAAM,IAAI,CAAC,eAAe,CAAC,GAA0B,EAAE,KAAK,CAAC,CAAA;YAC9D,CAAC;QACF,CAAC;aAAM,CAAC;YACP,MAAM,IAAI,gBAAgB,CAAC,sBAAsB,GAAG,GAAG,CAAC,CAAA;QACzD,CAAC;QAED,MAAM,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IACrC,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,GAAkB,EAAE,KAAyB;QACxE,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAA;QACtD,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAA;QACrD,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IACvC,CAAC;IAED;;;;;OAKG;IACH,EAAE,CAAC,GAAkB,EAAE,EAAsB;QAC5C,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAA;IAClD,CAAC;IAED,IAAI,CAAC,GAAkB,EAAE,EAAsB;QAC9C,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAA;IACjD,CAAC;IAEO,WAAW,CAAC,GAAkB,EAAE,QAAkB;QACzD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,EAAE,CAAC;YACpC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QAC3C,CAAC;aAAM,CAAC;YACP,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAC7C,CAAC;QACD,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,kBAAkB,CAAC,GAAsB;QACxC,IAAI,GAAG,EAAE,CAAC;YACT,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;QACnC,CAAC;aAAM,CAAC;YACP,IAAI,CAAC,mBAAmB,GAAG,EAAyB,CAAA;QACrD,CAAC;QAED,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,cAAc,CAAC,GAAkB,EAAE,EAAsB;QACxD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC;YAAE,OAAO,IAAI,CAAA;QAC/C,MAAM,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;QACjG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAA;QACxD,OAAO,IAAI,CAAA;IACZ,CAAC;IAEO,qBAAqB,CAAC,GAAkB,EAAE,KAAyB;QAC1E,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAA;QAC/C,IAAI,SAAS,IAAI,IAAI;YAAE,OAAM;QAC7B,KAAK,MAAM,EAAE,EAAE,EAAE,IAAI,SAAS;YAAE,EAAE,CAAC,KAAK,CAAC,CAAA;QACzC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;IAC/E,CAAC;CACD","sourcesContent":["import type { DeferredObject } from \"@tutao/tutanota-utils\"\nimport { defer, downcast } from \"@tutao/tutanota-utils\"\nimport type { MigrationKind } from \"./migrations/DesktopConfigMigrator\"\nimport { DesktopConfigMigrator } from \"./migrations/DesktopConfigMigrator\"\nimport type { Config } from \"./ConfigCommon\"\nimport { BuildConfigKey, DesktopConfigEncKey, DesktopConfigKey } from \"./ConfigKeys\"\nimport type { DesktopKeyStoreFacade } from \"../DesktopKeyStoreFacade.js\"\nimport { DesktopNativeCryptoFacade } from \"../DesktopNativeCryptoFacade\"\nimport { log } from \"../DesktopLog\"\nimport { ProgrammingError } from \"../../api/common/error/ProgrammingError\"\nimport type { ConfigFileType } from \"./ConfigFile\"\nimport { ConfigFile } from \"./ConfigFile\"\nimport { CryptoError } from \"@tutao/tutanota-crypto/error.js\"\n\nexport type AllConfigKeys = DesktopConfigKey | DesktopConfigEncKey\n\ntype ConfigValue = string | number | object | boolean | ReadonlyArray<ConfigValue>\n// a callback function and a note marking if it should be called more than once\ntype Listener = { cb: (val: ConfigValue | null) => void; once: boolean }\ntype OnValueSetListeners = { [k in AllConfigKeys]: Array<Listener> }\n\n/**\n * manages build and user config\n */\nexport class DesktopConfig {\n\tprivate readonly buildConfig: DeferredObject<Config>\n\tprivate readonly desktopConfig: DeferredObject<Config> // user preferences as set for this installation\n\tprivate desktopConfigFile!: ConfigFileType\n\tonValueSetListeners: OnValueSetListeners = {} as OnValueSetListeners\n\n\tconstructor(\n\t\tprivate readonly migrator: DesktopConfigMigrator,\n\t\tprivate readonly keyStoreFacade: DesktopKeyStoreFacade,\n\t\tprivate readonly cryptoFacade: DesktopNativeCryptoFacade,\n\t) {\n\t\tthis.buildConfig = defer()\n\t\tthis.desktopConfig = defer()\n\t}\n\n\tasync init(buildConfigFile: ConfigFile, desktopConfigFile: ConfigFile) {\n\t\tconst packageJson = await buildConfigFile.readJSON()\n\t\tconst buildConfig = packageJson[\"tutao-config\"]\n\t\tthis.buildConfig.resolve(buildConfig)\n\n\t\tthis.desktopConfigFile = desktopConfigFile\n\n\t\tconst defaultConf = buildConfig[\"defaultDesktopConfig\"] as Config\n\n\t\t// create default config if none exists\n\t\tawait this.desktopConfigFile.ensurePresence(defaultConf)\n\t\tconst userConf = (await this.desktopConfigFile.readJSON()) || defaultConf\n\t\tconst populatedConfig = Object.assign({}, defaultConf, userConf)\n\n\t\tconst desktopConfig = await this.migrator.applyMigrations(downcast<MigrationKind>(buildConfig[\"configMigrationFunction\"]), populatedConfig)\n\n\t\tawait this.desktopConfigFile.writeJSON(desktopConfig)\n\t\tthis.desktopConfig.resolve(desktopConfig)\n\t}\n\n\tasync getConst(key?: BuildConfigKey): Promise<any> {\n\t\tconst config = await this.buildConfig.promise\n\t\treturn key ? config[key] : config\n\t}\n\n\tasync getVar<K extends AllConfigKeys>(key: K): Promise<any> {\n\t\tconst desktopConfig = await this.desktopConfig.promise\n\n\t\tif (key in DesktopConfigKey) {\n\t\t\treturn desktopConfig[key]\n\t\t} else if (key in DesktopConfigEncKey) {\n\t\t\treturn this.getEncryptedVar(key as DesktopConfigEncKey)\n\t\t}\n\t}\n\n\tprivate async getEncryptedVar(key: DesktopConfigEncKey): Promise<any> {\n\t\tconst desktopConfig = await this.desktopConfig.promise\n\t\tconst encryptedValue = desktopConfig[key]\n\n\t\tif (!encryptedValue) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst deviceKey = await this.keyStoreFacade.getDeviceKey()\n\t\ttry {\n\t\t\treturn this.cryptoFacade.aesDecryptObject(deviceKey, downcast<string>(encryptedValue))\n\t\t} catch (e) {\n\t\t\tif (e instanceof CryptoError) {\n\t\t\t\tlog.error(`Could not decrypt encrypted var ${key}`, e)\n\t\t\t\tawait this.setVar(key, null)\n\t\t\t\treturn null\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async setEncryptedVar(key: DesktopConfigEncKey, value: ConfigValue | null) {\n\t\tconst deviceKey = await this.keyStoreFacade.getDeviceKey()\n\t\tlet encryptedValue\n\t\tif (value != null) {\n\t\t\tencryptedValue = this.cryptoFacade.aesEncryptObject(deviceKey, value)\n\t\t} else {\n\t\t\tencryptedValue = null\n\t\t}\n\t\tconst desktopConfig = await this.desktopConfig.promise\n\t\tdesktopConfig[key] = encryptedValue\n\t}\n\n\t/**\n\t * change the runtime-defined config and write it to disk\n\t * @param key value to change. a key of \"any\" will replace the conf object with value.\n\t * @param value the new value\n\t * @returns {never|Promise<any>|Promise<void>|*}\n\t */\n\tasync setVar(key: DesktopConfigKey | DesktopConfigEncKey, value: ConfigValue | null): Promise<void> {\n\t\tconst desktopConfig = await this.desktopConfig.promise\n\n\t\tif (Object.values(DesktopConfigKey).includes(downcast(key))) {\n\t\t\tdesktopConfig[key] = value\n\t\t} else if (Object.values(DesktopConfigEncKey).includes(downcast(key))) {\n\t\t\tif (value == null) {\n\t\t\t\tdesktopConfig[key] = value\n\t\t\t} else {\n\t\t\t\tawait this.setEncryptedVar(key as DesktopConfigEncKey, value)\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new ProgrammingError(\"Unknown config key: \" + key)\n\t\t}\n\n\t\tawait this.saveAndNotify(key, value)\n\t}\n\n\tprivate async saveAndNotify(key: AllConfigKeys, value: ConfigValue | null): Promise<void> {\n\t\tconst desktopConfig = await this.desktopConfig.promise\n\t\tawait this.desktopConfigFile.writeJSON(desktopConfig)\n\t\tthis.notifyChangeListeners(key, value)\n\t}\n\n\t/**\n\t * listen to changes in the config\n\t * @param key the value you want to listen for. a key of \"any\" will be called with the complete config for any changes to the config.\n\t * @param cb a function that's called when the config changes. argument is the new value or the entire config object in case of the \"any\" event.\n\t * @returns {DesktopConfig}\n\t */\n\ton(key: AllConfigKeys, cb: (val: any) => void): DesktopConfig {\n\t\treturn this.addListener(key, { cb, once: false })\n\t}\n\n\tonce(key: AllConfigKeys, cb: (val: any) => void): DesktopConfig {\n\t\treturn this.addListener(key, { cb, once: true })\n\t}\n\n\tprivate addListener(key: AllConfigKeys, callback: Listener) {\n\t\tif (!this.onValueSetListeners[key]) {\n\t\t\tthis.onValueSetListeners[key] = [callback]\n\t\t} else {\n\t\t\tthis.onValueSetListeners[key].push(callback)\n\t\t}\n\t\treturn this\n\t}\n\n\tremoveAllListeners(key?: DesktopConfigKey): this {\n\t\tif (key) {\n\t\t\tthis.onValueSetListeners[key] = []\n\t\t} else {\n\t\t\tthis.onValueSetListeners = {} as OnValueSetListeners\n\t\t}\n\n\t\treturn this\n\t}\n\n\tremoveListener(key: AllConfigKeys, cb: (val: any) => void): this {\n\t\tif (!this.onValueSetListeners[key]) return this\n\t\tconst indexOfListener = this.onValueSetListeners[key].findIndex((listener) => listener.cb === cb)\n\t\tthis.onValueSetListeners[key].splice(indexOfListener, 1)\n\t\treturn this\n\t}\n\n\tprivate notifyChangeListeners(key: AllConfigKeys, value: ConfigValue | null) {\n\t\tconst listeners = this.onValueSetListeners[key]\n\t\tif (listeners == null) return\n\t\tfor (const { cb } of listeners) cb(value)\n\t\tthis.onValueSetListeners[key] = listeners.filter((listener) => !listener.once)\n\t}\n}\n"]}