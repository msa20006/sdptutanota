{"version":3,"file":"WorkerClient.js","sourceRoot":"","sources":["../../../../../src/common/api/main/WorkerClient.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Commands } from \"../common/threading/MessageDispatcher.js\"\nimport { MessageDispatcher, Request } from \"../common/threading/MessageDispatcher.js\"\nimport { Transport, WebWorkerTransport } from \"../common/threading/Transport.js\"\nimport { assertMainOrNode } from \"../common/Env\"\nimport { client } from \"../../misc/ClientDetector\"\nimport type { DeferredObject } from \"@tutao/tutanota-utils\"\nimport { defer, downcast } from \"@tutao/tutanota-utils\"\nimport { handleUncaughtError } from \"../../misc/ErrorHandler\"\nimport { DelayedImpls, exposeLocalDelayed, exposeRemote } from \"../common/WorkerProxy\"\nimport type { RestClient } from \"../worker/rest/RestClient\"\nimport { EntropyDataChunk } from \"../worker/facades/EntropyFacade.js\"\nimport { objToError } from \"../common/utils/ErrorUtils.js\"\nimport { CommonLocator } from \"./CommonLocator.js\"\nimport { CommonWorkerInterface, MainInterface } from \"../worker/workerInterfaces.js\"\n\nassertMainOrNode()\n\ntype ProgressUpdater = (progress: number) => unknown\ntype MainRequest = Request<MainRequestType>\n\nexport const enum WsConnectionState {\n\tconnecting,\n\tconnected,\n\tterminated,\n}\n\nexport class WorkerClient {\n\tprivate _deferredInitialized: DeferredObject<void> = defer()\n\tprivate _isInitialized: boolean = false\n\n\tprivate _dispatcher!: MessageDispatcher<WorkerRequestType, MainRequestType>\n\n\tconstructor() {\n\t\tthis.initialized.then(() => {\n\t\t\tthis._isInitialized = true\n\t\t})\n\t}\n\n\tget initialized(): Promise<void> {\n\t\treturn this._deferredInitialized.promise\n\t}\n\n\tasync init(locator: CommonLocator): Promise<void> {\n\t\tif (env.mode !== \"Test\") {\n\t\t\tconst { prefixWithoutFile } = window.tutao.appState\n\t\t\t// In apps/desktop we load HTML file and url ends on path/index.html so we want to load path/WorkerBootstrap.js.\n\t\t\t// In browser we load at domain.com or localhost/path (locally) and we want to load domain.com/WorkerBootstrap.js or\n\t\t\t// localhost/path/WorkerBootstrap.js respectively.\n\t\t\t// Service worker has similar logic but it has luxury of knowing that it's served as sw.js.\n\t\t\tconst workerUrl = prefixWithoutFile + \"/worker-bootstrap.js\"\n\t\t\tconst worker = new Worker(workerUrl, { type: \"module\" })\n\t\t\tthis._dispatcher = new MessageDispatcher(new WebWorkerTransport(worker), this.queueCommands(locator), \"main-worker\")\n\t\t\tawait this._dispatcher.postRequest(new Request(\"setup\", [window.env, this.getInitialEntropy(), client.browserData()]))\n\n\t\t\tworker.onerror = (e: any) => {\n\t\t\t\tthrow new Error(`could not setup worker: ${e.name} ${e.stack} ${e.message} ${e}`)\n\t\t\t}\n\t\t} else {\n\t\t\t// node: we do not use workers but connect the client and the worker queues directly with each other\n\t\t\t// attention: do not load directly with require() here because in the browser SystemJS would load the WorkerImpl in the client although this code is not executed\n\t\t\t// @ts-ignore\n\t\t\tconst WorkerImpl = globalThis.testWorker\n\t\t\tconst workerImpl = new WorkerImpl(this, true)\n\t\t\tawait workerImpl.init(client.browserData())\n\t\t\tworkerImpl._queue._transport = {\n\t\t\t\tpostMessage: (msg: any) => this._dispatcher.handleMessage(msg),\n\t\t\t}\n\t\t\tthis._dispatcher = new MessageDispatcher(\n\t\t\t\t{\n\t\t\t\t\tpostMessage: function (msg: any) {\n\t\t\t\t\t\tworkerImpl._queue.handleMessage(msg)\n\t\t\t\t\t},\n\t\t\t\t} as Transport<WorkerRequestType, MainRequestType>,\n\t\t\t\tthis.queueCommands(locator),\n\t\t\t\t\"main-worker\",\n\t\t\t)\n\t\t}\n\n\t\tthis._deferredInitialized.resolve()\n\t}\n\n\tqueueCommands(locator: CommonLocator): Commands<MainRequestType> {\n\t\treturn {\n\t\t\texecNative: (message: MainRequest) => locator.native.invokeNative(downcast(message.args[0]), downcast(message.args[1])),\n\t\t\terror: (message: MainRequest) => {\n\t\t\t\thandleUncaughtError(objToError(message.args[0]))\n\t\t\t\treturn Promise.resolve()\n\t\t\t},\n\t\t\tfacade: exposeLocalDelayed<DelayedImpls<MainInterface>, MainRequestType>({\n\t\t\t\tasync loginListener() {\n\t\t\t\t\treturn locator.loginListener\n\t\t\t\t},\n\t\t\t\tasync wsConnectivityListener() {\n\t\t\t\t\treturn locator.connectivityModel\n\t\t\t\t},\n\t\t\t\tasync progressTracker() {\n\t\t\t\t\treturn locator.progressTracker\n\t\t\t\t},\n\t\t\t\tasync eventController() {\n\t\t\t\t\treturn locator.eventController\n\t\t\t\t},\n\t\t\t\tasync operationProgressTracker() {\n\t\t\t\t\treturn locator.operationProgressTracker\n\t\t\t\t},\n\t\t\t\tasync infoMessageHandler() {\n\t\t\t\t\treturn locator.infoMessageHandler\n\t\t\t\t},\n\t\t\t}),\n\t\t}\n\t}\n\n\tgetWorkerInterface(): CommonWorkerInterface {\n\t\treturn exposeRemote<CommonWorkerInterface>(async (request) => this._postRequest(request))\n\t}\n\n\trestRequest(...args: Parameters<RestClient[\"request\"]>): Promise<any | null> {\n\t\treturn this._postRequest(new Request(\"restRequest\", args))\n\t}\n\n\t/** @private visible for tests */\n\tasync _postRequest(msg: Request<WorkerRequestType>): Promise<any> {\n\t\tawait this.initialized\n\t\treturn this._dispatcher.postRequest(msg)\n\t}\n\n\treset(): Promise<void> {\n\t\treturn this._postRequest(new Request(\"reset\", []))\n\t}\n\n\t/**\n\t * Add data from either secure random source or Math.random as entropy.\n\t */\n\tprivate getInitialEntropy(): Array<EntropyDataChunk> {\n\t\tconst valueList = new Uint32Array(16)\n\t\tcrypto.getRandomValues(valueList)\n\t\tconst entropy: Array<EntropyDataChunk> = []\n\n\t\tfor (let i = 0; i < valueList.length; i++) {\n\t\t\t// 32 because we have 32-bit values Uint32Array\n\t\t\tentropy.push({\n\t\t\t\tsource: \"random\",\n\t\t\t\tentropy: 32,\n\t\t\t\tdata: valueList[i],\n\t\t\t})\n\t\t}\n\n\t\treturn entropy\n\t}\n}\n\nexport function bootstrapWorker(locator: CommonLocator): WorkerClient {\n\tconst worker = new WorkerClient()\n\tconst start = Date.now()\n\tworker.init(locator).then(() => console.log(\"worker init time (ms):\", Date.now() - start))\n\treturn worker\n}\n"]}