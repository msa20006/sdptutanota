{"version":3,"file":"RecipientsSearchModel.js","sourceRoot":"","sources":["../../../../src/common/misc/RecipientsSearchModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { PartialRecipient, Recipient } from \"../api/common/recipients/Recipient.js\"\nimport { RecipientsModel, ResolveMode } from \"../api/main/RecipientsModel.js\"\nimport { ContactListInfo, ContactModel } from \"../contactsFunctionality/ContactModel.js\"\nimport { isMailAddress } from \"./FormatValidator.js\"\nimport { ofClass } from \"@tutao/tutanota-utils\"\nimport { DbError } from \"../api/common/error/DbError.js\"\nimport { locator } from \"../api/main/CommonLocator.js\"\nimport { ContactListEntryTypeRef, ContactTypeRef } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { LoginIncompleteError } from \"../api/common/error/LoginIncompleteError.js\"\nimport { findRecipientWithAddress } from \"../api/common/utils/CommonCalendarUtils.js\"\nimport { EntityClient } from \"../api/common/EntityClient.js\"\nimport { ContactSuggestion } from \"../native/common/generatedipc/ContactSuggestion.js\"\n\nconst MaxNativeSuggestions = 10\n\nexport type RecipientSearchResultItem =\n\t| { type: \"recipient\"; value: Recipient }\n\t| {\n\t\t\ttype: \"contactlist\"\n\t\t\tvalue: ContactListInfo\n\t  }\nexport type RecipientSearchResultFilter = (item: RecipientSearchResultItem) => boolean\n\nexport interface ContactSuggestionProvider {\n\tgetContactSuggestions(query: string): Promise<readonly ContactSuggestion[]>\n}\n\nexport class RecipientsSearchModel {\n\tprivate searchResults: Array<RecipientSearchResultItem> = []\n\tprivate loading: Promise<void> | null = null\n\n\tprivate currentQuery = \"\"\n\tprivate previousQuery = \"\"\n\tprivate filter: RecipientSearchResultFilter | null = null\n\n\tconstructor(\n\t\tprivate readonly recipientsModel: RecipientsModel,\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly suggestionsProvider: ContactSuggestionProvider,\n\t\tprivate readonly entityClient: EntityClient,\n\t) {}\n\n\tresults(): ReadonlyArray<RecipientSearchResultItem> {\n\t\treturn this.searchResults\n\t}\n\n\tisLoading(): boolean {\n\t\treturn this.loading != null\n\t}\n\n\tclear() {\n\t\tthis.searchResults = []\n\t\tthis.loading = null\n\t\tthis.currentQuery = \"\"\n\t\tthis.previousQuery = \"\"\n\t}\n\n\tasync search(value: string): Promise<void> {\n\t\tconst query = value.trim()\n\n\t\tthis.currentQuery = query\n\n\t\tif (this.loading != null) {\n\t\t\t// fall through and await below\n\t\t} else if (query.length > 0 && !(this.previousQuery.length > 0 && query.indexOf(this.previousQuery) === 0 && this.searchResults.length === 0)) {\n\t\t\tconst [newContactListSuggestions, newContactSuggestions] = await Promise.all([\n\t\t\t\tthis.findContactLists(query.toLowerCase()),\n\t\t\t\tthis.findContacts(query.toLowerCase()),\n\t\t\t])\n\t\t\tif (query === this.currentQuery) {\n\t\t\t\tthis.searchResults = [\n\t\t\t\t\t...newContactListSuggestions.map(\n\t\t\t\t\t\t(value) =>\n\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\ttype: \"contactlist\",\n\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t} satisfies RecipientSearchResultItem),\n\t\t\t\t\t),\n\t\t\t\t\t...newContactSuggestions.map(\n\t\t\t\t\t\t(value) =>\n\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\ttype: \"recipient\",\n\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t} satisfies RecipientSearchResultItem),\n\t\t\t\t\t),\n\t\t\t\t].filter(this.filter ?? ((_) => true))\n\t\t\t\tthis.previousQuery = query\n\t\t\t}\n\t\t\tthis.loading = null\n\t\t} else if (query.length === 0 && query !== this.previousQuery) {\n\t\t\tthis.searchResults = []\n\t\t\tthis.previousQuery = query\n\t\t}\n\n\t\tawait this.loading\n\t}\n\n\tasync resolveContactList(contactList: ContactListInfo): Promise<Array<Recipient>> {\n\t\tconst entries = await this.entityClient.loadAll(ContactListEntryTypeRef, contactList.groupRoot.entries)\n\t\treturn entries.map((entry) => {\n\t\t\t// it's okay to be lazy sometimes\n\t\t\t// all the places anyway resolve the recipients when they need to\n\t\t\treturn this.recipientsModel.resolve({ address: entry.emailAddress }, ResolveMode.Lazy)\n\t\t})\n\t}\n\n\tsetFilter(filter: RecipientSearchResultFilter | null) {\n\t\tthis.filter = filter\n\t}\n\n\tprivate async findContacts(query: string): Promise<Array<Recipient>> {\n\t\tif (isMailAddress(query, false)) {\n\t\t\treturn []\n\t\t}\n\n\t\t// ensure match word order for email addresses mainly\n\t\tconst contacts = await this.contactModel\n\t\t\t.searchForContacts(`\"${query}\"`, \"recipient\", 10)\n\t\t\t.catch(\n\t\t\t\tofClass(DbError, async () => {\n\t\t\t\t\tconst listId = await this.contactModel.getContactListId()\n\t\t\t\t\tif (listId) {\n\t\t\t\t\t\treturn locator.entityClient.loadAll(ContactTypeRef, listId)\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn []\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(ofClass(LoginIncompleteError, () => []))\n\n\t\tlet suggestedRecipients: Array<Recipient> = []\n\t\tfor (const contact of contacts) {\n\t\t\tconst name = `${contact.firstName} ${contact.lastName}`.trim()\n\n\t\t\tconst filter =\n\t\t\t\tname.toLowerCase().indexOf(query) !== -1\n\t\t\t\t\t? (address: string) => isMailAddress(address.trim(), false)\n\t\t\t\t\t: (address: string) => isMailAddress(address.trim(), false) && address.toLowerCase().indexOf(query) !== -1\n\n\t\t\tconst recipientsOfContact = contact.mailAddresses\n\t\t\t\t.map(({ address }) => address)\n\t\t\t\t.filter(filter)\n\t\t\t\t.map((address) => this.recipientsModel.resolve({ name, address, contact }, ResolveMode.Lazy))\n\n\t\t\tsuggestedRecipients = suggestedRecipients.concat(recipientsOfContact)\n\t\t}\n\n\t\tconst additionalSuggestions = await this.findAdditionalSuggestions(query)\n\n\t\tconst contactSuggestions = additionalSuggestions\n\t\t\t.filter((contact) => isMailAddress(contact.address, false) && !findRecipientWithAddress(suggestedRecipients, contact.address))\n\t\t\t.slice(0, MaxNativeSuggestions)\n\t\t\t.map((recipient) => this.recipientsModel.resolve(recipient, ResolveMode.Lazy))\n\n\t\tsuggestedRecipients.push(...contactSuggestions)\n\n\t\treturn suggestedRecipients.sort((suggestion1, suggestion2) => suggestion1.name.localeCompare(suggestion2.name))\n\t}\n\n\tprivate async findAdditionalSuggestions(text: string): Promise<Array<PartialRecipient>> {\n\t\tif (!this.suggestionsProvider) {\n\t\t\treturn []\n\t\t}\n\t\tconst recipients = await this.suggestionsProvider.getContactSuggestions(text)\n\t\treturn recipients.map(({ name, mailAddress }) => ({ name, address: mailAddress }))\n\t}\n\n\tprivate async findContactLists(text: string): Promise<ContactListInfo[]> {\n\t\treturn this.contactModel.searchForContactLists(text)\n\t}\n}\n"]}