{"version":3,"file":"NativeCryptoFacadeReceiveDispatcher.js","sourceRoot":"","sources":["../../../../../../src/common/native/common/generatedipc/NativeCryptoFacadeReceiveDispatcher.ts"],"names":[],"mappings":"AAAA,iCAAiC;AAQjC,MAAM,OAAO,mCAAmC;IAClB;IAA7B,YAA6B,MAA0B;QAA1B,WAAM,GAAN,MAAM,CAAoB;IAAG,CAAC;IAC3D,KAAK,CAAC,QAAQ,CAAC,MAAc,EAAE,GAAe;QAC7C,QAAQ,MAAM,EAAE,CAAC;YAChB,KAAK,YAAY,CAAC,CAAC,CAAC;gBACnB,MAAM,SAAS,GAAiB,GAAG,CAAC,CAAC,CAAC,CAAA;gBACtC,MAAM,IAAI,GAAe,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC/B,MAAM,IAAI,GAAe,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;YACrD,CAAC;YACD,KAAK,YAAY,CAAC,CAAC,CAAC;gBACnB,MAAM,UAAU,GAAkB,GAAG,CAAC,CAAC,CAAC,CAAA;gBACxC,MAAM,IAAI,GAAe,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;YAChD,CAAC;YACD,KAAK,gBAAgB,CAAC,CAAC,CAAC;gBACvB,MAAM,GAAG,GAAe,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC9B,MAAM,OAAO,GAAW,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC9B,MAAM,EAAE,GAAe,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,CAAA;YACpD,CAAC;YACD,KAAK,gBAAgB,CAAC,CAAC,CAAC;gBACvB,MAAM,GAAG,GAAe,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC9B,MAAM,OAAO,GAAW,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;YAChD,CAAC;YACD,KAAK,+BAA+B,CAAC,CAAC,CAAC;gBACtC,MAAM,UAAU,GAAW,GAAG,CAAC,CAAC,CAAC,CAAA;gBACjC,MAAM,IAAI,GAAe,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,6BAA6B,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;YACnE,CAAC;YACD,KAAK,sBAAsB,CAAC,CAAC,CAAC;gBAC7B,MAAM,IAAI,GAAe,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;YAC9C,CAAC;YACD,KAAK,kBAAkB,CAAC,CAAC,CAAC;gBACzB,MAAM,SAAS,GAAmB,GAAG,CAAC,CAAC,CAAC,CAAA;gBACxC,MAAM,IAAI,GAAe,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;YACrD,CAAC;YACD,KAAK,kBAAkB,CAAC,CAAC,CAAC;gBACzB,MAAM,UAAU,GAAoB,GAAG,CAAC,CAAC,CAAC,CAAA;gBAC1C,MAAM,UAAU,GAAe,GAAG,CAAC,CAAC,CAAC,CAAA;gBACrC,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAA;YAC5D,CAAC;QACF,CAAC;IACF,CAAC;CACD","sourcesContent":["/* generated file, don't edit. */\n\nimport { RsaPublicKey } from \"./RsaPublicKey.js\"\nimport { RsaPrivateKey } from \"./RsaPrivateKey.js\"\nimport { KyberPublicKey } from \"./KyberPublicKey.js\"\nimport { KyberPrivateKey } from \"./KyberPrivateKey.js\"\nimport { NativeCryptoFacade } from \"./NativeCryptoFacade.js\"\n\nexport class NativeCryptoFacadeReceiveDispatcher {\n\tconstructor(private readonly facade: NativeCryptoFacade) {}\n\tasync dispatch(method: string, arg: Array<any>): Promise<any> {\n\t\tswitch (method) {\n\t\t\tcase \"rsaEncrypt\": {\n\t\t\t\tconst publicKey: RsaPublicKey = arg[0]\n\t\t\t\tconst data: Uint8Array = arg[1]\n\t\t\t\tconst seed: Uint8Array = arg[2]\n\t\t\t\treturn this.facade.rsaEncrypt(publicKey, data, seed)\n\t\t\t}\n\t\t\tcase \"rsaDecrypt\": {\n\t\t\t\tconst privateKey: RsaPrivateKey = arg[0]\n\t\t\t\tconst data: Uint8Array = arg[1]\n\t\t\t\treturn this.facade.rsaDecrypt(privateKey, data)\n\t\t\t}\n\t\t\tcase \"aesEncryptFile\": {\n\t\t\t\tconst key: Uint8Array = arg[0]\n\t\t\t\tconst fileUri: string = arg[1]\n\t\t\t\tconst iv: Uint8Array = arg[2]\n\t\t\t\treturn this.facade.aesEncryptFile(key, fileUri, iv)\n\t\t\t}\n\t\t\tcase \"aesDecryptFile\": {\n\t\t\t\tconst key: Uint8Array = arg[0]\n\t\t\t\tconst fileUri: string = arg[1]\n\t\t\t\treturn this.facade.aesDecryptFile(key, fileUri)\n\t\t\t}\n\t\t\tcase \"argon2idGeneratePassphraseKey\": {\n\t\t\t\tconst passphrase: string = arg[0]\n\t\t\t\tconst salt: Uint8Array = arg[1]\n\t\t\t\treturn this.facade.argon2idGeneratePassphraseKey(passphrase, salt)\n\t\t\t}\n\t\t\tcase \"generateKyberKeypair\": {\n\t\t\t\tconst seed: Uint8Array = arg[0]\n\t\t\t\treturn this.facade.generateKyberKeypair(seed)\n\t\t\t}\n\t\t\tcase \"kyberEncapsulate\": {\n\t\t\t\tconst publicKey: KyberPublicKey = arg[0]\n\t\t\t\tconst seed: Uint8Array = arg[1]\n\t\t\t\treturn this.facade.kyberEncapsulate(publicKey, seed)\n\t\t\t}\n\t\t\tcase \"kyberDecapsulate\": {\n\t\t\t\tconst privateKey: KyberPrivateKey = arg[0]\n\t\t\t\tconst ciphertext: Uint8Array = arg[1]\n\t\t\t\treturn this.facade.kyberDecapsulate(privateKey, ciphertext)\n\t\t\t}\n\t\t}\n\t}\n}\n"]}