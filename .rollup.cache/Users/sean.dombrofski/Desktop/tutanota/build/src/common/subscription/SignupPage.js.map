{"version":3,"file":"SignupPage.js","sourceRoot":"","sources":["../../../../src/common/subscription/SignupPage.ts"],"names":[],"mappings":"AAAA,OAAO,CAAgC,MAAM,SAAS,CAAA;AAGtD,OAAO,EAAE,eAAe,EAAmB,MAAM,6BAA6B,CAAA;AAC9E,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAA;AACzC,OAAO,EAAE,wBAAwB,EAAE,MAAM,uBAAuB,CAAA;AAChE,OAAO,EAAE,QAAQ,EAAE,MAAM,oCAAoC,CAAA;AAC7D,OAAO,EAAE,IAAI,EAA+B,MAAM,8BAA8B,CAAA;AAEhF,MAAM,OAAO,UAAU;IACd,GAAG,CAAc;IAEzB,QAAQ,CAAC,KAAyD;QACjE,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAkB,CAAA;IACpC,CAAC;IAED,IAAI,CAAC,KAAsD;QAC1D,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAA;QAC7B,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAA;QAC1C,IAAI,WAAW,GAAuB,SAAS,CAAA;QAC/C,IAAI,cAAc;YAAE,WAAW,GAAG,cAAc,CAAC,WAAW,CAAA;QAC5D,OAAO,CAAC,CAAC,UAAU,EAAE;YACpB,UAAU,EAAE,CAAC,cAAc,EAAE,EAAE;gBAC9B,IAAI,cAAc;oBAAE,IAAI,CAAC,cAAc,GAAG,cAAc,CAAA;gBACxD,eAAe,CAAC,IAAI,CAAC,GAAG,kEAAiC,CAAA;YAC1D,CAAC;YACD,YAAY,EAAE,GAAG,EAAE;gBAClB,eAAe,CAAC,IAAI,CAAC,GAAG,0EAAqC,CAAA;YAC9D,CAAC;YACD,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;YACvC,kBAAkB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI;YACrD,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB;YACvC,oBAAoB,EAAE,WAAW;YACjC,QAAQ,EAAE,CAAC,CAAC,cAAc;SAC1B,CAAC,CAAA;IACH,CAAC;CACD;AAED,MAAM,OAAO,eAAe;IAC3B,IAAI,CAAyB;IAE7B,YAAY,UAAmC;QAC9C,IAAI,CAAC,IAAI,GAAG,UAAU,CAAA;IACvB,CAAC;IAED,WAAW;QACV,MAAM,KAAK,GAAG,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAEtD,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACnF,OAAO,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,KAAK,GAAG,WAAW,CAAC,CAAA;QACpE,CAAC;aAAM,CAAC;YACP,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,KAAK,CAAC,CAAA;QACnD,CAAC;IACF,CAAC;IAED,UAAU,CAAC,eAAwB;QAClC,0CAA0C;QAC1C,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC7B,CAAC;IAED,eAAe;QACd,OAAO,KAAK,CAAA;IACb,CAAC;IAED,SAAS;QACR,OAAO,IAAI,CAAA;IACZ,CAAC;CACD","sourcesContent":["import m, { Children, Vnode, VnodeDOM } from \"mithril\"\nimport type { UpgradeSubscriptionData } from \"./UpgradeSubscriptionWizard\"\nimport type { WizardPageAttrs, WizardPageN } from \"../gui/base/WizardDialog.js\"\nimport { emitWizardEvent, WizardEventType } from \"../gui/base/WizardDialog.js\"\nimport { SignupForm } from \"./SignupForm\"\nimport { getDisplayNameOfPlanType } from \"./FeatureListProvider\"\nimport { PlanType } from \"../api/common/TutanotaConstants.js\"\nimport { lang, Translation, TranslationKey } from \"../misc/LanguageViewModel.js\"\n\nexport class SignupPage implements WizardPageN<UpgradeSubscriptionData> {\n\tprivate dom!: HTMLElement\n\n\toncreate(vnode: VnodeDOM<WizardPageAttrs<UpgradeSubscriptionData>>) {\n\t\tthis.dom = vnode.dom as HTMLElement\n\t}\n\n\tview(vnode: Vnode<WizardPageAttrs<UpgradeSubscriptionData>>): Children {\n\t\tconst data = vnode.attrs.data\n\t\tconst newAccountData = data.newAccountData\n\t\tlet mailAddress: undefined | string = undefined\n\t\tif (newAccountData) mailAddress = newAccountData.mailAddress\n\t\treturn m(SignupForm, {\n\t\t\tonComplete: (newAccountData) => {\n\t\t\t\tif (newAccountData) data.newAccountData = newAccountData\n\t\t\t\temitWizardEvent(this.dom, WizardEventType.SHOW_NEXT_PAGE)\n\t\t\t},\n\t\t\tonChangePlan: () => {\n\t\t\t\temitWizardEvent(this.dom, WizardEventType.SHOW_PREVIOUS_PAGE)\n\t\t\t},\n\t\t\tisBusinessUse: data.options.businessUse,\n\t\t\tisPaidSubscription: () => data.type !== PlanType.Free,\n\t\t\tcampaign: () => data.registrationDataId,\n\t\t\tprefilledMailAddress: mailAddress,\n\t\t\treadonly: !!newAccountData,\n\t\t})\n\t}\n}\n\nexport class SignupPageAttrs implements WizardPageAttrs<UpgradeSubscriptionData> {\n\tdata: UpgradeSubscriptionData\n\n\tconstructor(signupData: UpgradeSubscriptionData) {\n\t\tthis.data = signupData\n\t}\n\n\theaderTitle(): Translation {\n\t\tconst title = getDisplayNameOfPlanType(this.data.type)\n\n\t\tif (this.data.type === PlanType.Essential || this.data.type === PlanType.Advanced) {\n\t\t\treturn lang.makeTranslation(\"signup_business\", title + \" Business\")\n\t\t} else {\n\t\t\treturn lang.makeTranslation(\"signup_title\", title)\n\t\t}\n\t}\n\n\tnextAction(showErrorDialog: boolean): Promise<boolean> {\n\t\t// next action not available for this page\n\t\treturn Promise.resolve(true)\n\t}\n\n\tisSkipAvailable(): boolean {\n\t\treturn false\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn true\n\t}\n}\n"]}