{"version":3,"file":"ConfigurationDatabase.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/facades/lazy/ConfigurationDatabase.ts"],"names":[],"mappings":"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","sourcesContent":["import { b64UserIdHash, DbFacade } from \"../../search/DbFacade.js\"\nimport { assertNotNull, concat, downcast, isSameTypeRefByAttr, LazyLoaded, stringToUtf8Uint8Array, utf8Uint8ArrayToString } from \"@tutao/tutanota-utils\"\nimport { User, UserTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport { ExternalImageRule, OperationType } from \"../../../common/TutanotaConstants.js\"\nimport {\n\tAes128Key,\n\tAes256Key,\n\taes256RandomKey,\n\taesEncrypt,\n\tAesKey,\n\tdecryptKey,\n\tIV_BYTE_LENGTH,\n\trandom,\n\tunauthenticatedAesDecrypt,\n} from \"@tutao/tutanota-crypto\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { EncryptedDbKeyBaseMetaData, EncryptedIndexerMetaData, Metadata, ObjectStoreName } from \"../../search/IndexTables.js\"\nimport { DbError } from \"../../../common/error/DbError.js\"\nimport { checkKeyVersionConstraints, KeyLoaderFacade } from \"../KeyLoaderFacade.js\"\nimport type { QueuedBatch } from \"../../EventQueue.js\"\nimport { encryptKeyWithVersionedKey, VersionedKey } from \"../../crypto/CryptoWrapper.js\"\n\nconst VERSION: number = 2\nconst DB_KEY_PREFIX: string = \"ConfigStorage\"\nconst ExternalImageListOS: ObjectStoreName = \"ExternalAllowListOS\"\nexport const ConfigurationMetaDataOS: ObjectStoreName = \"MetaDataOS\"\ntype EncryptionMetadata = {\n\treadonly key: Aes128Key\n\treadonly iv: Uint8Array\n}\ntype ConfigDb = {\n\treadonly db: DbFacade\n\treadonly metaData: EncryptionMetadata\n}\n\n/** @PublicForTesting */\nexport async function encryptItem(item: string, key: Aes256Key, iv: Uint8Array): Promise<Uint8Array> {\n\treturn aesEncrypt(key, stringToUtf8Uint8Array(item), iv, true)\n}\n\nexport async function decryptLegacyItem(encryptedAddress: Uint8Array, key: Aes256Key, iv: Uint8Array): Promise<string> {\n\treturn utf8Uint8ArrayToString(unauthenticatedAesDecrypt(key, concat(iv, encryptedAddress)))\n}\n\n/**\n * A local configuration database that can be used as an alternative to DeviceConfig:\n * Ideal for cases where the configuration values should be stored encrypted,\n * Or when the configuration is a growing list or object, which would be unsuitable for localStorage\n * Or when the configuration is only required in the Worker\n */\nexport class ConfigurationDatabase {\n\t// visible for testing\n\treadonly db: LazyLoaded<ConfigDb>\n\n\tconstructor(\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t\tuserFacade: UserFacade,\n\t\tdbLoadFn: (arg0: User, arg1: KeyLoaderFacade) => Promise<ConfigDb> = (user: User, keyLoaderFacade: KeyLoaderFacade) =>\n\t\t\tthis.loadConfigDb(user, keyLoaderFacade),\n\t) {\n\t\tthis.db = new LazyLoaded(() => {\n\t\t\tconst user = assertNotNull(userFacade.getLoggedInUser())\n\t\t\treturn dbLoadFn(user, keyLoaderFacade)\n\t\t})\n\t}\n\n\tasync addExternalImageRule(address: string, rule: ExternalImageRule): Promise<void> {\n\t\tconst { db, metaData } = await this.db.getAsync()\n\t\tif (!db.indexingSupported) return\n\t\tconst encryptedAddress = await encryptItem(address, metaData.key, metaData.iv)\n\t\treturn addAddressToImageList(db, encryptedAddress, rule)\n\t}\n\n\tasync getExternalImageRule(address: string): Promise<ExternalImageRule> {\n\t\tconst { db, metaData } = await this.db.getAsync()\n\t\tif (!db.indexingSupported) return ExternalImageRule.None\n\t\tconst encryptedAddress = await encryptItem(address, metaData.key, metaData.iv)\n\t\tconst transaction = await db.createTransaction(true, [ExternalImageListOS])\n\t\tconst entry = await transaction.get(ExternalImageListOS, encryptedAddress)\n\t\tlet rule = ExternalImageRule.None\n\n\t\tif (entry != null) {\n\t\t\tif (entry.rule != null) {\n\t\t\t\trule = entry.rule\n\t\t\t} else {\n\t\t\t\t// No rule set from earlier version means Allow\n\t\t\t\tawait addAddressToImageList(db, encryptedAddress, ExternalImageRule.Allow)\n\t\t\t\trule = ExternalImageRule.Allow\n\t\t\t}\n\t\t}\n\n\t\treturn rule\n\t}\n\n\tasync loadConfigDb(user: User, keyLoaderFacade: KeyLoaderFacade): Promise<ConfigDb> {\n\t\tconst id = this.getDbId(user._id)\n\t\tconst db = new DbFacade(VERSION, async (event, db, dbFacade) => {\n\t\t\tif (event.oldVersion === 0) {\n\t\t\t\tdb.createObjectStore(ConfigurationMetaDataOS)\n\t\t\t\tdb.createObjectStore(ExternalImageListOS, {\n\t\t\t\t\tkeyPath: \"address\",\n\t\t\t\t})\n\t\t\t}\n\t\t\tconst metaData =\n\t\t\t\t(await loadEncryptionMetadata(dbFacade, id, keyLoaderFacade, ConfigurationMetaDataOS)) ||\n\t\t\t\t(await initializeDb(dbFacade, id, keyLoaderFacade, ConfigurationMetaDataOS))\n\n\t\t\tif (event.oldVersion === 1) {\n\t\t\t\t// migrate from plain, mac-and-static-iv aes256 to aes256 with mac\n\t\t\t\tconst transaction = await dbFacade.createTransaction(true, [ExternalImageListOS])\n\t\t\t\tconst entries = await transaction.getAll(ExternalImageListOS)\n\t\t\t\tconst { key, iv } = metaData\n\t\t\t\tfor (const entry of entries) {\n\t\t\t\t\tconst address = await decryptLegacyItem(new Uint8Array(downcast(entry.key)), key, iv)\n\t\t\t\t\tawait this.addExternalImageRule(address, entry.value.rule)\n\t\t\t\t\tconst deleteTransaction = await dbFacade.createTransaction(false, [ExternalImageListOS])\n\t\t\t\t\tawait deleteTransaction.delete(ExternalImageListOS, entry.key)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tconst metaData =\n\t\t\t(await loadEncryptionMetadata(db, id, keyLoaderFacade, ConfigurationMetaDataOS)) ||\n\t\t\t(await initializeDb(db, id, keyLoaderFacade, ConfigurationMetaDataOS))\n\t\treturn {\n\t\t\tdb,\n\t\t\tmetaData,\n\t\t}\n\t}\n\n\tasync onEntityEventsReceived(batch: QueuedBatch): Promise<any> {\n\t\tconst { events, groupId, batchId } = batch\n\t\tfor (const event of events) {\n\t\t\tif (!(event.operation === OperationType.UPDATE && isSameTypeRefByAttr(UserTypeRef, event.application, event.type))) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tconst configDb = await this.db.getAsync()\n\t\t\tif (configDb.db.isSameDbId(this.getDbId(event.instanceId))) {\n\t\t\t\treturn updateEncryptionMetadata(configDb.db, this.keyLoaderFacade, ConfigurationMetaDataOS)\n\t\t\t}\n\t\t}\n\t}\n\n\tasync delete(userId: Id): Promise<void> {\n\t\tconst dbId = this.getDbId(userId)\n\t\tif (this.db.isLoadedOrLoading()) {\n\t\t\tconst { db } = await this.db.getAsync()\n\t\t\tawait db.deleteDatabase(dbId)\n\t\t} else {\n\t\t\tawait DbFacade.deleteDb(dbId)\n\t\t}\n\t}\n\n\tprivate getDbId(userId: Id): string {\n\t\treturn `${DB_KEY_PREFIX}_${b64UserIdHash(userId)}`\n\t}\n}\n\nasync function decryptMetaData(keyLoaderFacade: KeyLoaderFacade, metaData: EncryptedDbKeyBaseMetaData): Promise<EncryptionMetadata> {\n\tconst userGroupKey = await keyLoaderFacade.loadSymUserGroupKey(metaData.userGroupKeyVersion)\n\tconst key = decryptKey(userGroupKey, metaData.userEncDbKey)\n\tconst iv = unauthenticatedAesDecrypt(key, metaData.encDbIv)\n\treturn {\n\t\tkey,\n\t\tiv,\n\t}\n}\n\n/**\n * Load the encryption key and iv from the db\n * @return { key, iv } or null if one or both don't exist\n * @VisibleForTesting\n */\nexport async function loadEncryptionMetadata(\n\tdb: DbFacade,\n\tid: string,\n\tkeyLoaderFacade: KeyLoaderFacade,\n\tobjectStoreName: ObjectStoreName,\n): Promise<EncryptionMetadata | null> {\n\tawait db.open(id)\n\tconst metaData = await getMetaData(db, objectStoreName)\n\tif (metaData != null) {\n\t\treturn await decryptMetaData(keyLoaderFacade, metaData)\n\t} else {\n\t\treturn null\n\t}\n}\n\n/**\n * Reencrypt the DB key and IV if there is a new userGroupKey\n * @VisibleForTesting\n */\nexport async function updateEncryptionMetadata(db: DbFacade, keyLoaderFacade: KeyLoaderFacade, objectStoreName: ObjectStoreName): Promise<void> {\n\tconst metaData = await getMetaData(db, objectStoreName)\n\tconst currentUserGroupKey = keyLoaderFacade.getCurrentSymUserGroupKey()\n\n\tif (metaData == null || currentUserGroupKey.version === metaData.userGroupKeyVersion) return\n\n\tconst encryptionMetadata = await decryptMetaData(keyLoaderFacade, metaData)\n\tif (encryptionMetadata == null) return\n\tconst { key, iv } = encryptionMetadata\n\tawait encryptAndSaveDbKey(currentUserGroupKey, key, iv, db, objectStoreName)\n}\n\n/**\n * Helper function to get the group key version for the group key that was used to encrypt the db key. In case the version has not been written to the db we assume 0.\n * @param db the dbFacade corresponding to the object store\n * @param objectStoreName the objectStore to get the metadata from\n */\nexport async function getMetaData(db: DbFacade, objectStoreName: ObjectStoreName): Promise<EncryptedDbKeyBaseMetaData | null> {\n\tconst transaction = await db.createTransaction(true, [objectStoreName])\n\tconst userEncDbKey = (await transaction.get(objectStoreName, Metadata.userEncDbKey)) as Uint8Array\n\tconst encDbIv = (await transaction.get(objectStoreName, Metadata.encDbIv)) as Uint8Array\n\tconst userGroupKeyVersion = checkKeyVersionConstraints((await transaction.get<number>(objectStoreName, Metadata.userGroupKeyVersion)) ?? 0) // was not written for old dbs\n\tif (userEncDbKey == null || encDbIv == null) {\n\t\treturn null\n\t} else {\n\t\treturn {\n\t\t\tuserEncDbKey,\n\t\t\tencDbIv,\n\t\t\tuserGroupKeyVersion,\n\t\t}\n\t}\n}\n\n/**\n * Helper function to get the group key version for the group key that was used to encrypt the db key. In case the version has not been written to the db we assume 0.\n * @param db the dbFacade corresponding to the object store\n * @param objectStoreName the objectStore to get the metadata from\n */\nexport async function getIndexerMetaData(db: DbFacade, objectStoreName: ObjectStoreName): Promise<EncryptedIndexerMetaData | null> {\n\tconst transaction = await db.createTransaction(true, [objectStoreName])\n\tconst userEncDbKey = (await transaction.get(objectStoreName, Metadata.userEncDbKey)) as Uint8Array\n\tconst encDbIv = (await transaction.get(objectStoreName, Metadata.encDbIv)) as Uint8Array\n\tconst userGroupKeyVersion = checkKeyVersionConstraints((await transaction.get<number>(objectStoreName, Metadata.userGroupKeyVersion)) ?? 0) // was not written for old dbs\n\tconst mailIndexingEnabled = (await transaction.get(objectStoreName, Metadata.mailIndexingEnabled)) as boolean\n\tconst excludedListIds = (await transaction.get(objectStoreName, Metadata.excludedListIds)) as Id[]\n\tconst lastEventIndexTimeMs = (await transaction.get(objectStoreName, Metadata.lastEventIndexTimeMs)) as number\n\tif (userEncDbKey == null || encDbIv == null) {\n\t\treturn null\n\t} else {\n\t\treturn {\n\t\t\tuserEncDbKey,\n\t\t\tencDbIv,\n\t\t\tuserGroupKeyVersion,\n\t\t\tmailIndexingEnabled,\n\t\t\texcludedListIds,\n\t\t\tlastEventIndexTimeMs,\n\t\t}\n\t}\n}\n\nasync function encryptAndSaveDbKey(userGroupKey: VersionedKey, dbKey: AesKey, dbIv: Uint8Array, db: DbFacade, objectStoreName: string) {\n\tconst transaction = await db.createTransaction(false, [objectStoreName]) // create a new transaction to avoid timeouts and for writing\n\tconst groupEncSessionKey = encryptKeyWithVersionedKey(userGroupKey, dbKey)\n\tawait transaction.put(objectStoreName, Metadata.userEncDbKey, groupEncSessionKey.key)\n\tawait transaction.put(objectStoreName, Metadata.userGroupKeyVersion, groupEncSessionKey.encryptingKeyVersion)\n\tawait transaction.put(objectStoreName, Metadata.encDbIv, aesEncrypt(dbKey, dbIv))\n}\n\n/**\n * @caution This will clear any existing data in the database, because they key and IV will be regenerated\n * @return the newly generated key and iv for the database contents\n * @VisibleForTesting\n *\n */\nexport async function initializeDb(db: DbFacade, id: string, keyLoaderFacade: KeyLoaderFacade, objectStoreName: ObjectStoreName): Promise<EncryptionMetadata> {\n\tawait db.deleteDatabase(id).then(() => db.open(id))\n\tconst key = aes256RandomKey()\n\tconst iv = random.generateRandomData(IV_BYTE_LENGTH)\n\tconst userGroupKey = keyLoaderFacade.getCurrentSymUserGroupKey()\n\tawait encryptAndSaveDbKey(userGroupKey, key, iv, db, objectStoreName)\n\treturn {\n\t\tkey,\n\t\tiv,\n\t}\n}\n\nasync function addAddressToImageList(db: DbFacade, encryptedAddress: Uint8Array, rule: ExternalImageRule): Promise<void> {\n\ttry {\n\t\tconst transaction = await db.createTransaction(false, [ExternalImageListOS])\n\t\tawait transaction.put(ExternalImageListOS, null, {\n\t\t\taddress: encryptedAddress,\n\t\t\trule: rule,\n\t\t})\n\t} catch (e) {\n\t\tif (e instanceof DbError) {\n\t\t\tconsole.error(\"failed to add address to image list:\", e.message)\n\t\t\treturn\n\t\t}\n\t\tthrow e\n\t}\n}\n"]}