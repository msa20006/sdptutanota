{"version":3,"file":"SingleLineTextField.js","sourceRoot":"","sources":["../../../../../src/common/gui/base/SingleLineTextField.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Children, ClassComponent, Component, Vnode, VnodeDOM } from \"mithril\"\nimport { TextFieldType } from \"./TextField.js\"\nimport { AllIcons, Icon, IconSize } from \"./Icon.js\"\nimport { px, size } from \"../size.js\"\nimport { filterInt } from \"@tutao/tutanota-utils\"\n\nexport enum InputMode {\n\tNONE = \"none\",\n\tNUMERIC = \"numeric\",\n\tTEXT = \"text\",\n}\n\nexport interface SingleLineTextFieldAttrs<T extends TextFieldType> extends Pick<Component, \"oncreate\"> {\n\tvalue: string | number\n\tariaLabel: string\n\tdisabled?: boolean\n\t/**\n\t * Callback fired whenever the input is interacted with.\n\t * This property is mandatory if the input is interactive (disabled = false).\n\t * @example\n\t * // Save the typed value to a model object\n\t * const callback = (typedValue: string) => model.value = typedValue;\n\t * m(SingleLineTextField, {oninput: callback})\n\t * @param {string} newValue - String value typed on the input field\n\t * @returns {unknown} Return type depends on the callback provided\n\t */\n\toninput?: (newValue: string) => unknown\n\tplaceholder?: string\n\tclasses?: Array<string>\n\tstyle?: Partial<Pick<CSSStyleDeclaration, \"padding\" | \"fontSize\" | \"textAlign\">>\n\tonclick?: (...args: unknown[]) => unknown\n\tonfocus?: (...args: unknown[]) => unknown\n\tonblur?: (...args: unknown[]) => unknown\n\tonkeydown?: (...args: unknown[]) => unknown\n\ttype: T\n\tleadingIcon?: {\n\t\ticon: AllIcons\n\t\tcolor: string\n\t}\n\tinputMode?: InputMode\n\treadonly?: boolean\n}\n\nexport interface SingleLineNumberFieldAttrs<T extends TextFieldType> extends SingleLineTextFieldAttrs<T> {\n\tmax?: number\n\tmin?: number\n}\n\nexport type InputAttrs<T extends TextFieldType> = T extends TextFieldType.Number ? SingleLineNumberFieldAttrs<T> : SingleLineTextFieldAttrs<T>\n\n/**\n * Simple single line input field component\n * @see Component attributes: {SingleLineTextFieldAttrs}\n * @example\n * m(SingleLineTextField, {\n *     value: model.value,\n *     ariaLabel: lange.get(\"placeholder\"),\n *     oninput: (newValue: string) => {\n *         model.value = newValue\n *     },\n *     placeholder: lang.get(\"placeholder\"),\n *     disabled: model.isReadonly,\n *     classes: [\"custom-text-color\"], // Adding new styles\n *     style: {\n *         \"font-size\": px(size.font_size_base * 1.25) // Overriding the component style\n *     }\n * }),\n */\nexport class SingleLineTextField<T extends TextFieldType> implements ClassComponent<InputAttrs<T>> {\n\tdomInput!: HTMLInputElement\n\n\tview({ attrs }: Vnode<InputAttrs<T>, this>): Children | void | null {\n\t\treturn attrs.leadingIcon ? this.renderInputWithIcon(attrs) : this.renderInput(attrs)\n\t}\n\n\tprivate renderInputWithIcon(attrs: InputAttrs<T>) {\n\t\tif (!attrs.leadingIcon) {\n\t\t\treturn\n\t\t}\n\n\t\tconst fontSizeString = attrs.style?.fontSize\n\t\tconst fontSizeNumber = fontSizeString ? filterInt(fontSizeString.replace(\"px\", \"\")) : NaN\n\t\tconst fontSize = isNaN(fontSizeNumber) ? 16 : fontSizeNumber\n\t\tlet iconSize\n\t\tlet padding\n\n\t\tif (fontSize > 16 && fontSize < 32) {\n\t\t\ticonSize = IconSize.Large\n\t\t\tpadding = size.icon_size_large\n\t\t} else if (fontSize > 32) {\n\t\t\ticonSize = IconSize.XL\n\t\t\tpadding = size.icon_size_xl\n\t\t} else {\n\t\t\ticonSize = IconSize.Medium\n\t\t\tpadding = size.icon_size_medium_large\n\t\t}\n\n\t\treturn m(\".rel.flex.flex-grow\", [\n\t\t\tm(\n\t\t\t\t\".abs.pl-vpad-s.flex.items-center\",\n\t\t\t\t{ style: { top: 0, bottom: 0 } },\n\t\t\t\tm(Icon, {\n\t\t\t\t\tsize: iconSize,\n\t\t\t\t\ticon: attrs.leadingIcon.icon,\n\t\t\t\t\tstyle: { fill: attrs.leadingIcon.color },\n\t\t\t\t}),\n\t\t\t),\n\t\t\tthis.renderInput(attrs, px(padding + size.vpad)),\n\t\t])\n\t}\n\n\tprivate renderInput(attrs: InputAttrs<T>, inputPadding?: string) {\n\t\treturn m(\"input.tutaui-text-field\", {\n\t\t\tariaLabel: attrs.ariaLabel,\n\t\t\tvalue: attrs.value,\n\t\t\tdisabled: attrs.disabled ?? false,\n\t\t\tonblur: attrs.onblur,\n\t\t\tonfocus: attrs.onfocus,\n\t\t\tonkeydown: attrs.onkeydown,\n\t\t\tonclick: attrs.onclick,\n\t\t\toninput: () => {\n\t\t\t\tif (!attrs.oninput) {\n\t\t\t\t\tconsole.error(\"oninput fired without a handler function\")\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tattrs.oninput(this.domInput.value)\n\t\t\t},\n\t\t\toncreate: (vnode: VnodeDOM<InputAttrs<T>>) => {\n\t\t\t\tthis.domInput = vnode.dom as HTMLInputElement\n\t\t\t\tif (attrs.oncreate) {\n\t\t\t\t\tattrs.oncreate(vnode)\n\t\t\t\t}\n\t\t\t},\n\t\t\tplaceholder: attrs.placeholder,\n\t\t\tclass: this.resolveClasses(attrs.classes, attrs.disabled),\n\t\t\tstyle: {\n\t\t\t\t...(inputPadding ? { paddingLeft: inputPadding } : {}),\n\t\t\t\t...attrs.style,\n\t\t\t},\n\t\t\ttype: attrs.inputMode === InputMode.NONE ? undefined : attrs.type,\n\t\t\tinputMode: attrs.inputMode,\n\t\t\treadonly: attrs.readonly,\n\t\t\t...this.getInputProperties(attrs),\n\t\t})\n\t}\n\n\tprivate getInputProperties(attrs: InputAttrs<T>): Pick<SingleLineNumberFieldAttrs<TextFieldType.Number>, \"min\" | \"max\"> | undefined {\n\t\tif (attrs.type === TextFieldType.Number) {\n\t\t\tconst numberAttrs = attrs as SingleLineNumberFieldAttrs<TextFieldType.Number>\n\t\t\treturn { min: numberAttrs.min, max: numberAttrs.max }\n\t\t}\n\n\t\treturn undefined\n\t}\n\n\tprivate resolveClasses(classes: Array<string> = [], disabled: boolean = false): string {\n\t\tconst classList = [...classes]\n\t\tif (disabled) {\n\t\t\tclassList.push(\"disabled\")\n\t\t}\n\n\t\treturn classList.join(\" \")\n\t}\n}\n"]}