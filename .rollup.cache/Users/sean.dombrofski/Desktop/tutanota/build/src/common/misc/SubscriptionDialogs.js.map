{"version":3,"file":"SubscriptionDialogs.js","sourceRoot":"","sources":["../../../../src/common/misc/SubscriptionDialogs.ts"],"names":[],"mappings":"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","sourcesContent":["import { assertNotNull, downcast, isEmpty, neverNull } from \"@tutao/tutanota-utils\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport type { TranslationKey, MaybeTranslation } from \"./LanguageViewModel\"\nimport { lang } from \"./LanguageViewModel\"\nimport type { ClickHandler } from \"../gui/base/GuiUtils\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport type { UserController } from \"../api/main/UserController.js\"\nimport { BookingTypeRef } from \"../api/entities/sys/TypeRefs.js\"\nimport { GENERATED_MAX_ID } from \"../api/common/utils/EntityUtils.js\"\nimport { AvailablePlanType, Const, NewBusinessPlans, NewPaidPlans, NewPersonalPlans, PlanType } from \"../api/common/TutanotaConstants.js\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\n\n/**\n * Opens a dialog which states that the function is not available in the Free subscription and provides an option to upgrade.\n */\nexport async function showNotAvailableForFreeDialog(acceptedPlans: AvailablePlanType[] = NewPaidPlans) {\n\tconst wizard = await import(\"../subscription/UpgradeSubscriptionWizard\")\n\tconst customerInfo = await locator.logins.getUserController().loadCustomerInfo()\n\n\tconst businessPlanRequired =\n\t\tacceptedPlans.filter((plan) => NewBusinessPlans.includes(plan)).length === acceptedPlans.length &&\n\t\tNewPersonalPlans.includes(downcast(customerInfo.plan))\n\tconst msg = businessPlanRequired ? \"pricing.notSupportedByPersonalPlan_msg\" : \"newPaidPlanRequired_msg\"\n\n\tawait wizard.showUpgradeWizard(locator.logins, acceptedPlans, msg)\n}\n\nexport function createNotAvailableForFreeClickHandler(acceptedPlans: AvailablePlanType[], click: ClickHandler, available: () => boolean): ClickHandler {\n\treturn (e, dom) => {\n\t\tif (!available()) {\n\t\t\tshowNotAvailableForFreeDialog(acceptedPlans)\n\t\t} else {\n\t\t\tclick(e, dom)\n\t\t}\n\t}\n}\n\n/**\n * Returns whether a paid subscriptino is active and shows one of the showNotAvailableForFreeDialog or subscription cancelled dialogs if needed.\n */\nexport async function checkPaidSubscription(): Promise<boolean> {\n\tif (locator.logins.getUserController().isFreeAccount()) {\n\t\tshowNotAvailableForFreeDialog()\n\t\treturn false\n\t}\n\treturn true\n}\n\nexport async function showMoreStorageNeededOrderDialog(messageIdOrMessageFunction: TranslationKey): Promise<PlanType | void> {\n\tconst userController = locator.logins.getUserController()\n\tif (!userController.isGlobalAdmin()) {\n\t\treturn Dialog.message(\"insufficientStorageWarning_msg\")\n\t}\n\tconst confirmed = await Dialog.confirm(messageIdOrMessageFunction, \"upgrade_action\")\n\tif (confirmed) {\n\t\tif (userController.isFreeAccount()) {\n\t\t\tconst wizard = await import(\"../subscription/UpgradeSubscriptionWizard\")\n\t\t\treturn wizard.showUpgradeWizard(locator.logins)\n\t\t} else {\n\t\t\tconst usedStorage = Number(await locator.userManagementFacade.readUsedUserStorage(userController.user))\n\t\t\tconst { getAvailableMatchingPlans } = await import(\"../subscription/SubscriptionUtils.js\")\n\t\t\tconst plansWithMoreStorage = await getAvailableMatchingPlans(\n\t\t\t\tlocator.serviceExecutor,\n\t\t\t\t(config) => Number(config.storageGb) * Const.MEMORY_GB_FACTOR > usedStorage,\n\t\t\t)\n\t\t\tif (isEmpty(plansWithMoreStorage)) {\n\t\t\t\tawait Dialog.message(userController.isGlobalAdmin() ? \"insufficientStorageAdmin_msg\" : \"insufficientStorageUser_msg\")\n\t\t\t} else {\n\t\t\t\tawait showPlanUpgradeRequiredDialog(plansWithMoreStorage)\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @returns true if the needed plan has been ordered\n */\nexport async function showPlanUpgradeRequiredDialog(acceptedPlans: AvailablePlanType[], reason?: MaybeTranslation): Promise<boolean> {\n\tif (isEmpty(acceptedPlans)) {\n\t\tthrow new ProgrammingError(\"no plans specified\")\n\t}\n\tconst userController = locator.logins.getUserController()\n\tif (userController.isFreeAccount()) {\n\t\tshowNotAvailableForFreeDialog(acceptedPlans)\n\t\treturn false\n\t} else if (!userController.isGlobalAdmin()) {\n\t\tDialog.message(\"contactAdmin_msg\")\n\t\treturn false\n\t} else {\n\t\tif (reason == null) {\n\t\t\t// show generic reason if not supplied\n\t\t\tlet customerInfo = await userController.loadCustomerInfo()\n\t\t\tconst businessPlanRequired =\n\t\t\t\tacceptedPlans.filter((plan) => NewBusinessPlans.includes(plan)).length === acceptedPlans.length &&\n\t\t\t\t!NewBusinessPlans.includes(downcast(customerInfo.plan))\n\t\t\treason = businessPlanRequired ? \"pricing.notSupportedByPersonalPlan_msg\" : \"newPaidPlanRequired_msg\"\n\t\t}\n\t\tawait showSwitchPlanDialog(userController, acceptedPlans, reason)\n\t\treturn acceptedPlans.includes(downcast<AvailablePlanType>(await userController.getPlanType()))\n\t}\n}\n\nexport async function showUpgradeWizardOrSwitchSubscriptionDialog(userController: UserController): Promise<void> {\n\tif (userController.isFreeAccount()) {\n\t\tconst { showUpgradeWizard } = await import(\"../subscription/UpgradeSubscriptionWizard\")\n\t\tawait showUpgradeWizard(locator.logins)\n\t} else {\n\t\tawait showSwitchPlanDialog(userController, NewPaidPlans)\n\t}\n}\n\nasync function showSwitchPlanDialog(userController: UserController, acceptedPlans: AvailablePlanType[], reason?: MaybeTranslation): Promise<void> {\n\tlet customerInfo = await userController.loadCustomerInfo()\n\tconst bookings = await locator.entityClient.loadRange(BookingTypeRef, neverNull(customerInfo.bookings).items, GENERATED_MAX_ID, 1, true)\n\tconst { showSwitchDialog } = await import(\"../subscription/SwitchSubscriptionDialog\")\n\treturn showSwitchDialog(\n\t\tawait userController.loadCustomer(),\n\t\tcustomerInfo,\n\t\tawait userController.loadAccountingInfo(),\n\t\tassertNotNull(bookings[0]),\n\t\tacceptedPlans,\n\t\treason ?? null,\n\t)\n}\n"]}