{"version":3,"file":"DesktopAlarmStorage.js","sourceRoot":"","sources":["../../../../../src/common/desktop/sse/DesktopAlarmStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DesktopConfig } from \"../config/DesktopConfig\"\nimport { DesktopNativeCryptoFacade } from \"../DesktopNativeCryptoFacade\"\nimport { elementIdPart } from \"../../api/common/utils/EntityUtils\"\nimport { DesktopConfigKey } from \"../config/ConfigKeys\"\nimport type { DesktopKeyStoreFacade } from \"../DesktopKeyStoreFacade.js\"\nimport type { Base64 } from \"@tutao/tutanota-utils\"\nimport { base64ToUint8Array, findAllAndRemove, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport { log } from \"../DesktopLog\"\nimport { EncryptedAlarmNotification, NotificationSessionKey } from \"../../native/common/EncryptedAlarmNotification.js\"\n\n/**\n * manages session keys used for decrypting alarm notifications, encrypting & persisting them to disk\n */\nexport class DesktopAlarmStorage {\n\t/** push identifier id to key */\n\tprivate sessionKeys: Record<string, string>\n\n\tconstructor(\n\t\tprivate readonly conf: DesktopConfig,\n\t\tprivate readonly cryptoFacade: DesktopNativeCryptoFacade,\n\t\tprivate readonly keyStoreFacade: DesktopKeyStoreFacade,\n\t) {\n\t\tthis.sessionKeys = {}\n\t}\n\n\t/**\n\t * encrypt & store a session key to disk\n\t * @param pushIdentifierId pushIdentifier the key belongs to\n\t * @param pushIdentifierSessionKey unencrypted B64 encoded key to store\n\t * @returns {*}\n\t */\n\tasync storePushIdentifierSessionKey(pushIdentifierId: string, pushIdentifierSessionKey: Uint8Array): Promise<void> {\n\t\tconst keys: Record<string, Base64> = (await this.conf.getVar(DesktopConfigKey.pushEncSessionKeys)) || {}\n\n\t\tif (!keys[pushIdentifierId]) {\n\t\t\tthis.sessionKeys[pushIdentifierId] = uint8ArrayToBase64(pushIdentifierSessionKey)\n\t\t\treturn this.keyStoreFacade.getDeviceKey().then((pw) => {\n\t\t\t\tkeys[pushIdentifierId] = uint8ArrayToBase64(this.cryptoFacade.aes256EncryptKey(pw, pushIdentifierSessionKey))\n\t\t\t\treturn this.conf.setVar(DesktopConfigKey.pushEncSessionKeys, keys)\n\t\t\t})\n\t\t}\n\n\t\treturn Promise.resolve()\n\t}\n\n\tremovePushIdentifierKeys(): Promise<void> {\n\t\tthis.sessionKeys = {}\n\t\treturn this.conf.setVar(DesktopConfigKey.pushEncSessionKeys, null)\n\t}\n\n\tremovePushIdentifierKey(piId: string): Promise<void> {\n\t\tlog.debug(\"Remove push identifier key. elementId=\" + piId)\n\t\tdelete this.sessionKeys[piId]\n\t\treturn this.conf.setVar(DesktopConfigKey.pushEncSessionKeys, this.sessionKeys)\n\t}\n\n\t/**\n\t * try to get a B64 encoded PushIdentifierSessionKey that can decrypt a notificationSessionKey from memory or decrypt it from disk storage\n\t * @param notificationSessionKey one notificationSessionKey from an alarmNotification.\n\t * @return {Promise<?Base64>} a stored pushIdentifierSessionKey that should be able to decrypt the given notificationSessionKey\n\t */\n\tasync getPushIdentifierSessionKey(notificationSessionKey: NotificationSessionKey): Promise<Uint8Array | null> {\n\t\tconst pw = await this.keyStoreFacade.getDeviceKey()\n\t\tconst pushIdentifierId = elementIdPart(notificationSessionKey.pushIdentifier)\n\n\t\tif (this.sessionKeys[pushIdentifierId]) {\n\t\t\treturn base64ToUint8Array(this.sessionKeys[pushIdentifierId])\n\t\t} else {\n\t\t\tconst keys: Record<string, Base64> = (await this.conf.getVar(DesktopConfigKey.pushEncSessionKeys)) || {}\n\t\t\tconst sessionKeyFromConf = keys[pushIdentifierId]\n\n\t\t\tif (sessionKeyFromConf == null) {\n\t\t\t\t// key with this id is not saved in local conf, so we can't resolve it\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst decryptedKey = this.cryptoFacade.unauthenticatedAes256DecryptKey(pw, base64ToUint8Array(sessionKeyFromConf))\n\t\t\t\tthis.sessionKeys[pushIdentifierId] = uint8ArrayToBase64(decryptedKey)\n\t\t\t\treturn decryptedKey\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(\"could not decrypt pushIdentifierSessionKey\")\n\t\t\t\treturn null\n\t\t\t}\n\t\t}\n\t}\n\n\tasync storeAlarm(alarm: EncryptedAlarmNotification): Promise<void> {\n\t\tconst allAlarms = await this.getScheduledAlarms()\n\t\tfindAllAndRemove(allAlarms, (an) => an.alarmInfo.alarmIdentifier === alarm.alarmInfo.alarmIdentifier)\n\t\tallAlarms.push(alarm)\n\t\tawait this._saveAlarms(allAlarms)\n\t}\n\n\tasync deleteAlarm(identifier: string): Promise<void> {\n\t\tconst allAlarms = await this.getScheduledAlarms()\n\t\tfindAllAndRemove(allAlarms, (an) => an.alarmInfo.alarmIdentifier === identifier)\n\t\tawait this._saveAlarms(allAlarms)\n\t}\n\n\t/**\n\t * If userId is null then we delete alarms for all users\n\t */\n\tasync deleteAllAlarms(userId: Id | null): Promise<void> {\n\t\tif (userId == null) {\n\t\t\treturn this._saveAlarms([])\n\t\t} else {\n\t\t\tconst allScheduledAlarms = await this.getScheduledAlarms()\n\t\t\tfindAllAndRemove(allScheduledAlarms, (alarm) => alarm.user === userId)\n\t\t\treturn this._saveAlarms(allScheduledAlarms)\n\t\t}\n\t}\n\n\tasync getScheduledAlarms(): Promise<Array<EncryptedAlarmNotification>> {\n\t\t// the model for alarm notifications changed and we may have stored some that are missing the\n\t\t// excludedDates field.\n\t\t// to be able to decrypt & map these we need to at least add a plausible value there\n\t\t// we'll unschedule, redownload and reschedule the fixed instances after login.\n\t\tconst alarms: Array<EncryptedAlarmNotification & { repeatRule?: Record<string, unknown> }> = await this.conf.getVar(DesktopConfigKey.scheduledAlarms)\n\t\treturn (\n\t\t\talarms?.map((a) => {\n\t\t\t\tif (!a.repeatRule) return a\n\t\t\t\ta.repeatRule = { excludedDates: [], ...a.repeatRule }\n\t\t\t\treturn a\n\t\t\t}) || []\n\t\t)\n\t}\n\n\t_saveAlarms(alarms: ReadonlyArray<EncryptedAlarmNotification>): Promise<void> {\n\t\treturn this.conf.setVar(DesktopConfigKey.scheduledAlarms, alarms)\n\t}\n}\n"]}