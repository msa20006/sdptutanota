{"version":3,"file":"DatabaseKeyFactory.js","sourceRoot":"","sources":["../../../../../src/common/misc/credentials/DatabaseKeyFactory.ts"],"names":[],"mappings":"AAAA,oBAAoB;AAGpB,OAAO,EAAE,yBAAyB,EAAE,MAAM,sBAAsB,CAAA;AAEhE;;;GAGG;AACH,MAAM,OAAO,kBAAkB;IACV;IAApB,YAAoB,MAA8B;QAA9B,WAAM,GAAN,MAAM,CAAwB;IAAG,CAAC;IAEtD,KAAK,CAAC,WAAW;QAChB,OAAO,yBAAyB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;IACtE,CAAC;CACD","sourcesContent":["//@bundleInto:common\n\nimport type { DeviceEncryptionFacade } from \"../../api/worker/facades/DeviceEncryptionFacade\"\nimport { isOfflineStorageAvailable } from \"../../api/common/Env\"\n\n/**\n * Factory for generating an offline storage database key\n * Will return null whenever offline storage is not available\n */\nexport class DatabaseKeyFactory {\n\tconstructor(private crypto: DeviceEncryptionFacade) {}\n\n\tasync generateKey(): Promise<Uint8Array | null> {\n\t\treturn isOfflineStorageAvailable() ? this.crypto.generateKey() : null\n\t}\n}\n"]}