{"version":3,"file":"SharedMailUtils.js","sourceRoot":"","sources":["../../../../src/common/mailFunctionality/SharedMailUtils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAA;AACvD,OAAO,EAAE,yBAAyB,EAAmB,MAAM,iCAAiC,CAAA;AAC5F,OAAO,EAAW,aAAa,EAAE,wBAAwB,EAAQ,MAAM,sCAAsC,CAAA;AAC7G,OAAO,EAAE,0BAA0B,EAAE,6BAA6B,EAAE,MAAM,sCAAsC,CAAA;AAChH,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAA;AAC9F,OAAO,EACN,qBAAqB,EAGrB,oBAAoB,EACpB,SAAS,EAET,mBAAmB,EACnB,qBAAqB,EACrB,yBAAyB,EACzB,yBAAyB,GACzB,MAAM,oCAAoC,CAAA;AAE3C,OAAO,EAAE,mCAAmC,EAAE,uBAAuB,EAAE,MAAM,mCAAmC,CAAA;AAChH,OAAO,EAAE,IAAI,EAAyC,MAAM,8BAA8B,CAAA;AAK1F,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAA;AAE3D,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAA;AAE9C,gBAAgB,EAAE,CAAA;AAClB,MAAM,CAAC,MAAM,UAAU,GAAG,MAAM,CAAA;AAEhC;;;;;GAKG;AACH,MAAM,UAAU,gBAAgB,CAAC,IAAU,EAAE,WAAmB,EAAE,IAAY;IAC7E,kFAAkF;IAClF,8HAA8H;IAC9H,IAAI,gBAAgB,GAAG,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,6BAA6B,CAAC,WAAW,CAAC,CAAA;IACzH,IAAI,OAAO,GAAG,aAAa,CAAC;QAC3B,WAAW,EAAE,aAAa,CACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,OAAO,CAAC,EAC/D,6DAA6D,CAC7D,CAAC,KAAK;QACP,SAAS,EAAE,gBAAgB,CAAC,SAAS;QACrC,QAAQ,EAAE,gBAAgB,CAAC,QAAQ;QACnC,aAAa,EAAE;YACd,wBAAwB,CAAC;gBACxB,OAAO,EAAE,WAAW;gBACpB,IAAI,oCAA0B;gBAC9B,cAAc,EAAE,EAAE;aAClB,CAAC;SACF;QACD,WAAW,EAAE,IAAI;QACjB,OAAO,EAAE,EAAE;QACX,OAAO,EAAE,EAAE;QACX,QAAQ,EAAE,IAAI;QACd,eAAe,EAAE,IAAI;QACrB,iBAAiB,EAAE,IAAI;QACvB,IAAI,EAAE,EAAE;QACR,KAAK,EAAE,IAAI;QACX,SAAS,EAAE,EAAE;QACb,oBAAoB,EAAE,IAAI;QAC1B,YAAY,EAAE,EAAE;QAChB,KAAK,EAAE,IAAI;QACX,SAAS,EAAE,EAAE;QACb,UAAU,EAAE,IAAI;QAChB,UAAU,EAAE,IAAI;QAChB,UAAU,EAAE,IAAI;QAChB,aAAa,EAAE,IAAI;QACnB,YAAY,EAAE,IAAI;QAClB,cAAc,EAAE,IAAI;QACpB,UAAU,EAAE,EAAE;QACd,gBAAgB,EAAE,EAAE;QACpB,QAAQ,EAAE,EAAE;QACZ,aAAa,EAAE,EAAE;QACjB,QAAQ,EAAE,EAAE;KACZ,CAAC,CAAA;IACF,OAAO,OAAO,CAAA;AACf,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,IAAmB,EAAE,WAAmB,EAAE,cAAuB;IAC1G,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO,WAAW,CAAA;IACnB,CAAC;SAAM,IAAI,cAAc,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAA;IACZ,CAAC;SAAM,CAAC;QACP,OAAO,IAAI,GAAG,IAAI,GAAG,WAAW,GAAG,GAAG,CAAA;IACvC,CAAC;AACF,CAAC;AAED,MAAM,UAAU,+BAA+B,CAAC,aAA4B,EAAE,aAAwB;IACrG,IAAI,aAAa,CAAC,aAAa,CAAC,EAAE,CAAC;QAClC,OAAO,mCAAmC,CAAC,aAAa,CAAC,CAAA;IAC1D,CAAC;SAAM,CAAC;QACP,OAAO,mCAAmC,CAAC,aAAa,CAAC,aAAa,CAAC,CAAA;IACxE,CAAC;AACF,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,cAA6B;IAC1D,OAAO,cAAc,CAAC,SAAS,IAAI,IAAI,IAAI,cAAc,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,CAAA;AACjF,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,MAAuB,EAAE,cAA6B;IACtF,IAAI,aAAa,CAAC,cAAc,CAAC,EAAE,CAAC;QACnC,IAAI,KAAK,GAAG,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAK,CAAA;QAC5C,OAAO,KAAK,CAAC,aAAa,IAAI,QAAQ,CAAC,+BAA+B,CAAC,cAAc,EAAE,MAAM,CAAC,iBAAiB,EAAE,CAAC,aAAa,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC;YACrJ,CAAC,CAAC,KAAK,CAAC,aAAa;YACrB,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,CAAA;IACvE,CAAC;SAAM,CAAC;QACP,OAAO,aAAa,CAAC,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,CAAA;IAC/D,CAAC;AACF,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,MAAuB,EAAE,cAA6B,EAAE,OAAe;IAClG,IAAI,aAAa,CAAC,cAAc,CAAC,EAAE,CAAC;QACnC,OAAO,CACN,QAAQ,CAAC,+BAA+B,CAAC,cAAc,EAAE,MAAM,CAAC,iBAAiB,EAAE,CAAC,aAAa,CAAC,EAAE,OAAO,CAAC;YAC5G,MAAM,CAAC,iBAAiB,EAAE,CAAC,aAAa,CAAC,WAAW,KAAK,OAAO,CAChE,CAAA;IACF,CAAC;SAAM,CAAC;QACP,OAAO,cAAc,CAAC,aAAa,CAAC,WAAW,KAAK,OAAO,CAAA;IAC5D,CAAC;AACF,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,cAA6B,EAAE,cAA8B;IACjG,IAAI,aAAa,CAAC,cAAc,CAAC,EAAE,CAAC;QACnC,2DAA2D;QAC3D,OAAO,cAAc,CAAC,aAAa,CAAC,IAAI,CAAA;IACzC,CAAC;SAAM,CAAC;QACP,OAAO,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAA;IAC7E,CAAC;AACF,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,MAAuB,EAAE,cAA6B;IACpF,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,EAAE,CAAC;QACtC,OAAO,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;IACjC,CAAC;SAAM,IAAI,aAAa,CAAC,cAAc,CAAC,EAAE,CAAC;QAC1C,OAAO,gBAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAA;IAChD,CAAC;SAAM,CAAC;QACP,OAAO,uBAAuB,CAAC,aAAa,CAAC,cAAc,CAAC,aAAa,EAAE,uCAAuC,CAAC,CAAC,CAAA;IACrH,CAAC;AACF,CAAC;AAMD,MAAM,UAAU,oBAAoB,CAAC,eAAgC,EAAE,YAA0B,EAAE,eAAgC;IAClI,OAAO,eAAe;SACpB,iBAAiB,EAAE;SACnB,YAAY,EAAE;SACd,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,yBAAyB,EAAE,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;SAChG,IAAI,CAAC,CAAC,kBAAkB,EAAE,EAAE;QAC5B,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;IAC5H,CAAC,CAAC;SACD,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAA;AAClB,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,gBAAkC;IAC3E,IAAI,GAAmB,CAAA;IAEvB,QAAQ,gBAAgB,EAAE,CAAC;QAC1B;YACC,GAAG,GAAG,gBAAgB,CAAA;YACtB,MAAK;QAEN;YACC,GAAG,GAAG,cAAc,CAAA;YACpB,MAAK;QAEN;YACC,GAAG,GAAG,gBAAgB,CAAA;YACtB,MAAK;QAEN;YACC,GAAG,GAAG,iBAAiB,CAAA;IACzB,CAAC;IAED,OAAO,GAAG,CAAA;AACX,CAAC;AAOD;;;GAGG;AACH,MAAM,UAAU,mBAAmB,CAAC,KAAgC,EAAE,oBAA4B,mBAAmB;IACpH,IAAI,SAAS,GAAG,CAAC,CAAA;IACjB,MAAM,eAAe,GAAsB,EAAE,CAAA;IAC7C,MAAM,WAAW,GAAkB,EAAE,CAAA;IACrC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QAC1B,IAAI,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,iBAAiB,EAAE,CAAC;YACvD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC5B,CAAC;aAAM,CAAC;YACP,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAC9B,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC3B,CAAC;IACF,CAAC;IACD,OAAO;QACN,eAAe;QACf,WAAW;KACX,CAAA;AACF,CAAC;AAED,MAAM,CAAN,IAAY,cAIX;AAJD,WAAY,cAAc;IACzB,2BAAS,CAAA;IACT,2BAAS,CAAA;IACT,6BAAW,CAAA;AACZ,CAAC,EAJW,cAAc,KAAd,cAAc,QAIzB;AAED,MAAM,UAAU,iBAAiB,CAAC,WAAmB;IACpD,OAAO,yBAAyB,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAA;AAC9F,CAAC;AAED,MAAM,UAAU,yCAAyC,CAAC,EAAE,oBAAoB,EAAQ;IACvF,QAAQ,oBAAoB,EAAE,CAAC;QAC9B,uDAAuD;QACvD,KAAK,IAAI,CAAC;QACV,KAAK,SAAS,CAAC;QACf,KAAK,oBAAoB,CAAC,qBAAqB,CAAC;QAChD,KAAK,oBAAoB,CAAC,kCAAkC,CAAC;QAC7D,KAAK,oBAAoB,CAAC,gBAAgB,EAAE,iDAAiD;YAC5F,OAAO,IAAI,CAAA;QACZ,KAAK,oBAAoB,CAAC,qBAAqB,CAAC;QAChD,KAAK,oBAAoB,CAAC,+BAA+B,CAAC;QAC1D;YACC,sGAAsG;YACtG,OAAO,KAAK,CAAA;IACd,CAAC;AACF,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAAC,IAAU;IAC9C,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAA;IAC5C,OAAO,CACN,KAAK,iCAAuB;QAC5B,YAAY;QACZ,yCAAyC,CAAC,IAAI,CAAC;QAC/C,CAAC,MAAM,CAAC,OAAO,KAAK,yBAAyB;YAC5C,uFAAuF;YACvF,sDAAsD;YACtD,oBAAoB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CACtC,CAAA;AACF,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,OAAe;IACnD,OAAO,OAAO,KAAK,mBAAmB,IAAI,OAAO,KAAK,sBAAsB,CAAA;AAC7E,CAAC;AAED,MAAM,UAAU,gCAAgC,CAAC,EAAS,EAAE,OAAqB;IAChF,eAAe,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC3D,MAAM,MAAM,GAAe,EAAE,CAAA;QAE7B,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC;YACxB,IAAI,IAAI,CAAC,IAAI,GAAG,qBAAqB,EAAE,CAAC;gBACvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAClB,CAAC;iBAAM,CAAC;gBACP,MAAM,GAAG,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACzC,MAAM,aAAa,GAAG,QAAQ,IAAI,CAAC,QAAQ,WAAW,GAAG,EAAE,CAAA;gBAC3D,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE;oBAClC,KAAK,EAAE,iBAAiB;iBACxB,CAAC,CAAA;YACH,CAAC;QACF,CAAC;QAED,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACvB,MAAM,CAAC,OAAO,CACb,IAAI,CAAC,cAAc,CAAC,wBAAwB,EAAE;gBAC7C,QAAQ,EAAE,qBAAqB,GAAG,IAAI;aACtC,CAAC,CACF,CAAA;QACF,CAAC;IACF,CAAC,CAAC,CAAA;AACH,CAAC","sourcesContent":["import { assertMainOrNode } from \"../api/common/Env.js\"\nimport { CustomerPropertiesTypeRef, GroupInfo, User } from \"../api/entities/sys/TypeRefs.js\"\nimport { Contact, createContact, createContactMailAddress, Mail } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { fullNameToFirstAndLastName, mailAddressToFirstAndLastName } from \"../misc/parsing/MailAddressParser.js\"\nimport { assertNotNull, contains, neverNull, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport {\n\tALLOWED_IMAGE_FORMATS,\n\tContactAddressType,\n\tConversationType,\n\tEncryptionAuthStatus,\n\tGroupType,\n\tMailState,\n\tMAX_ATTACHMENT_SIZE,\n\tMAX_BASE64_IMAGE_SIZE,\n\tSYSTEM_GROUP_MAIL_ADDRESS,\n\tTUTA_MAIL_ADDRESS_DOMAINS,\n} from \"../api/common/TutanotaConstants.js\"\nimport { UserController } from \"../api/main/UserController.js\"\nimport { getEnabledMailAddressesForGroupInfo, getGroupInfoDisplayName } from \"../api/common/utils/GroupUtils.js\"\nimport { lang, Language, Translation, TranslationKey } from \"../misc/LanguageViewModel.js\"\nimport { MailboxDetail } from \"./MailboxModel.js\"\nimport { LoginController } from \"../api/main/LoginController.js\"\nimport { EntityClient } from \"../api/common/EntityClient.js\"\nimport { Attachment } from \"./SendMailModel.js\"\nimport { showFileChooser } from \"../file/FileController.js\"\nimport { DataFile } from \"../api/common/DataFile.js\"\nimport { Dialog } from \"../gui/base/Dialog.js\"\n\nassertMainOrNode()\nexport const LINE_BREAK = \"<br>\"\n\n/**\n * Creates a contact with an email address and a name.\n * @param mailAddress The mail address of the contact. Type is OTHER.\n * @param name The name of the contact. If an empty string is provided, the name is parsed from the mail address.\n * @return The contact.\n */\nexport function createNewContact(user: User, mailAddress: string, name: string): Contact {\n\t// prepare some contact information. it is only saved if the mail is sent securely\n\t// use the name or mail address to extract first and last name. first part is used as first name, all other parts as last name\n\tlet firstAndLastName = name.trim() !== \"\" ? fullNameToFirstAndLastName(name) : mailAddressToFirstAndLastName(mailAddress)\n\tlet contact = createContact({\n\t\t_ownerGroup: assertNotNull(\n\t\t\tuser.memberships.find((m) => m.groupType === GroupType.Contact),\n\t\t\t\"called createNewContact as user without contact group mship\",\n\t\t).group,\n\t\tfirstName: firstAndLastName.firstName,\n\t\tlastName: firstAndLastName.lastName,\n\t\tmailAddresses: [\n\t\t\tcreateContactMailAddress({\n\t\t\t\taddress: mailAddress,\n\t\t\t\ttype: ContactAddressType.OTHER,\n\t\t\t\tcustomTypeName: \"\",\n\t\t\t}),\n\t\t],\n\t\tbirthdayIso: null,\n\t\tcomment: \"\",\n\t\tcompany: \"\",\n\t\tnickname: null,\n\t\toldBirthdayDate: null,\n\t\tpresharedPassword: null,\n\t\trole: \"\",\n\t\ttitle: null,\n\t\taddresses: [],\n\t\toldBirthdayAggregate: null,\n\t\tphoneNumbers: [],\n\t\tphoto: null,\n\t\tsocialIds: [],\n\t\tdepartment: null,\n\t\tmiddleName: null,\n\t\tnameSuffix: null,\n\t\tphoneticFirst: null,\n\t\tphoneticLast: null,\n\t\tphoneticMiddle: null,\n\t\tcustomDate: [],\n\t\tmessengerHandles: [],\n\t\tpronouns: [],\n\t\trelationships: [],\n\t\twebsites: [],\n\t})\n\treturn contact\n}\n\nexport function getMailAddressDisplayText(name: string | null, mailAddress: string, preferNameOnly: boolean): string {\n\tif (!name) {\n\t\treturn mailAddress\n\t} else if (preferNameOnly) {\n\t\treturn name\n\t} else {\n\t\treturn name + \" <\" + mailAddress + \">\"\n\t}\n}\n\nexport function getEnabledMailAddressesWithUser(mailboxDetail: MailboxDetail, userGroupInfo: GroupInfo): Array<string> {\n\tif (isUserMailbox(mailboxDetail)) {\n\t\treturn getEnabledMailAddressesForGroupInfo(userGroupInfo)\n\t} else {\n\t\treturn getEnabledMailAddressesForGroupInfo(mailboxDetail.mailGroupInfo)\n\t}\n}\n\nexport function isUserMailbox(mailboxDetails: MailboxDetail): boolean {\n\treturn mailboxDetails.mailGroup != null && mailboxDetails.mailGroup.user != null\n}\n\nexport function getDefaultSender(logins: LoginController, mailboxDetails: MailboxDetail): string {\n\tif (isUserMailbox(mailboxDetails)) {\n\t\tlet props = logins.getUserController().props\n\t\treturn props.defaultSender && contains(getEnabledMailAddressesWithUser(mailboxDetails, logins.getUserController().userGroupInfo), props.defaultSender)\n\t\t\t? props.defaultSender\n\t\t\t: assertNotNull(logins.getUserController().userGroupInfo.mailAddress)\n\t} else {\n\t\treturn assertNotNull(mailboxDetails.mailGroupInfo.mailAddress)\n\t}\n}\n\nexport function isUserEmail(logins: LoginController, mailboxDetails: MailboxDetail, address: string): boolean {\n\tif (isUserMailbox(mailboxDetails)) {\n\t\treturn (\n\t\t\tcontains(getEnabledMailAddressesWithUser(mailboxDetails, logins.getUserController().userGroupInfo), address) ||\n\t\t\tlogins.getUserController().userGroupInfo.mailAddress === address\n\t\t)\n\t} else {\n\t\treturn mailboxDetails.mailGroupInfo.mailAddress === address\n\t}\n}\n\nexport function getSenderNameForUser(mailboxDetails: MailboxDetail, userController: UserController): string {\n\tif (isUserMailbox(mailboxDetails)) {\n\t\t// external users do not have access to the user group info\n\t\treturn userController.userGroupInfo.name\n\t} else {\n\t\treturn mailboxDetails.mailGroupInfo ? mailboxDetails.mailGroupInfo.name : \"\"\n\t}\n}\n\nexport function getMailboxName(logins: LoginController, mailboxDetails: MailboxDetail): string {\n\tif (!logins.isInternalUserLoggedIn()) {\n\t\treturn lang.get(\"mailbox_label\")\n\t} else if (isUserMailbox(mailboxDetails)) {\n\t\treturn getDefaultSender(logins, mailboxDetails)\n\t} else {\n\t\treturn getGroupInfoDisplayName(assertNotNull(mailboxDetails.mailGroupInfo, \"mailboxDetails without mailGroupInfo?\"))\n\t}\n}\n\nexport interface ImageHandler {\n\tinsertImage(srcAttr: string, attrs?: Record<string, string>): HTMLElement\n}\n\nexport function getTemplateLanguages(sortedLanguages: Array<Language>, entityClient: EntityClient, loginController: LoginController): Promise<Array<Language>> {\n\treturn loginController\n\t\t.getUserController()\n\t\t.loadCustomer()\n\t\t.then((customer) => entityClient.load(CustomerPropertiesTypeRef, neverNull(customer.properties)))\n\t\t.then((customerProperties) => {\n\t\t\treturn sortedLanguages.filter((sL) => customerProperties.notificationMailTemplates.find((nmt) => nmt.language === sL.code))\n\t\t})\n\t\t.catch(() => [])\n}\n\nexport function dialogTitleTranslationKey(conversationType: ConversationType): TranslationKey {\n\tlet key: TranslationKey\n\n\tswitch (conversationType) {\n\t\tcase ConversationType.NEW:\n\t\t\tkey = \"newMail_action\"\n\t\t\tbreak\n\n\t\tcase ConversationType.REPLY:\n\t\t\tkey = \"reply_action\"\n\t\t\tbreak\n\n\t\tcase ConversationType.FORWARD:\n\t\t\tkey = \"forward_action\"\n\t\t\tbreak\n\n\t\tdefault:\n\t\t\tkey = \"emptyString_msg\"\n\t}\n\n\treturn key\n}\n\ntype AttachmentSizeCheckResult = {\n\tattachableFiles: Array<Attachment>\n\ttooBigFiles: Array<string>\n}\n\n/**\n * @param files the files that shall be attached.\n * @param maxAttachmentSize the maximum size the new files may have in total to be attached successfully.\n */\nexport function checkAttachmentSize(files: ReadonlyArray<Attachment>, maxAttachmentSize: number = MAX_ATTACHMENT_SIZE): AttachmentSizeCheckResult {\n\tlet totalSize = 0\n\tconst attachableFiles: Array<Attachment> = []\n\tconst tooBigFiles: Array<string> = []\n\tfor (const file of files) {\n\t\tif (totalSize + Number(file.size) > maxAttachmentSize) {\n\t\t\ttooBigFiles.push(file.name)\n\t\t} else {\n\t\t\ttotalSize += Number(file.size)\n\t\t\tattachableFiles.push(file)\n\t\t}\n\t}\n\treturn {\n\t\tattachableFiles,\n\t\ttooBigFiles,\n\t}\n}\n\nexport enum RecipientField {\n\tTO = \"to\",\n\tCC = \"cc\",\n\tBCC = \"bcc\",\n}\n\nexport function isTutaMailAddress(mailAddress: string): boolean {\n\treturn TUTA_MAIL_ADDRESS_DOMAINS.some((tutaDomain) => mailAddress.endsWith(\"@\" + tutaDomain))\n}\n\nexport function hasValidEncryptionAuthForTeamOrSystemMail({ encryptionAuthStatus }: Mail): boolean {\n\tswitch (encryptionAuthStatus) {\n\t\t// emails before tuta-crypt had no encryptionAuthStatus\n\t\tcase null:\n\t\tcase undefined:\n\t\tcase EncryptionAuthStatus.RSA_NO_AUTHENTICATION:\n\t\tcase EncryptionAuthStatus.TUTACRYPT_AUTHENTICATION_SUCCEEDED:\n\t\tcase EncryptionAuthStatus.TUTACRYPT_SENDER: // should only be set for sent NOT received mails\n\t\t\treturn true\n\t\tcase EncryptionAuthStatus.AES_NO_AUTHENTICATION:\n\t\tcase EncryptionAuthStatus.TUTACRYPT_AUTHENTICATION_FAILED:\n\t\tdefault:\n\t\t\t// we have to be able to handle future cases, to be safe we say that they are not valid encryptionAuth\n\t\t\treturn false\n\t}\n}\n\n/**\n * Is this a system notification?\n */\nexport function isSystemNotification(mail: Mail): boolean {\n\tconst { confidential, sender, state } = mail\n\treturn (\n\t\tstate === MailState.RECEIVED &&\n\t\tconfidential &&\n\t\thasValidEncryptionAuthForTeamOrSystemMail(mail) &&\n\t\t(sender.address === SYSTEM_GROUP_MAIL_ADDRESS ||\n\t\t\t// New emails will have sender set to system and will only have replyTo set to no-reply\n\t\t\t// but we should keep displaying old emails correctly.\n\t\t\tisNoReplyTeamAddress(sender.address))\n\t)\n}\n\nexport function isNoReplyTeamAddress(address: string): boolean {\n\treturn address === \"no-reply@tutao.de\" || address === \"no-reply@tutanota.de\"\n}\n\nexport function insertInlineImageB64ClickHandler(ev: Event, handler: ImageHandler) {\n\tshowFileChooser(true, ALLOWED_IMAGE_FORMATS).then((files) => {\n\t\tconst tooBig: DataFile[] = []\n\n\t\tfor (let file of files) {\n\t\t\tif (file.size > MAX_BASE64_IMAGE_SIZE) {\n\t\t\t\ttooBig.push(file)\n\t\t\t} else {\n\t\t\t\tconst b64 = uint8ArrayToBase64(file.data)\n\t\t\t\tconst dataUrlString = `data:${file.mimeType};base64,${b64}`\n\t\t\t\thandler.insertImage(dataUrlString, {\n\t\t\t\t\tstyle: \"max-width: 100%\",\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tif (tooBig.length > 0) {\n\t\t\tDialog.message(\n\t\t\t\tlang.getTranslation(\"tooBigInlineImages_msg\", {\n\t\t\t\t\t\"{size}\": MAX_BASE64_IMAGE_SIZE / 1024,\n\t\t\t\t}),\n\t\t\t)\n\t\t}\n\t})\n}\n\n// .msg export is handled in DesktopFileExport because it uses APIs that can't be loaded web side\nexport type MailExportMode = \"msg\" | \"eml\"\n/**\n * Used to pass all downloaded mail stuff to the desktop side to be exported as a file\n * Ideally this would just be {Mail, Headers, Body, FileReference[]}\n * but we can't send Dates over to the native side, so we may as well just extract everything here\n */\nexport type MailBundleRecipient = {\n\taddress: string\n\tname?: string\n}\n\nexport type MailBundle = {\n\tmailId: IdTuple\n\tsubject: string\n\tbody: string\n\tsender: MailBundleRecipient\n\tto: MailBundleRecipient[]\n\tcc: MailBundleRecipient[]\n\tbcc: MailBundleRecipient[]\n\treplyTo: MailBundleRecipient[]\n\tisDraft: boolean\n\tisRead: boolean\n\tsentOn: number\n\t// UNIX timestamp\n\treceivedOn: number // UNIX timestamp,\n\theaders: string | null\n\tattachments: DataFile[]\n}\n"]}