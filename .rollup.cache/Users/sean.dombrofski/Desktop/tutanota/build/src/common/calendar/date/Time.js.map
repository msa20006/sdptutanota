{"version":3,"file":"Time.js","sourceRoot":"","sources":["../../../../../src/common/calendar/date/Time.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,uBAAuB,CAAA;AAC3C,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAEhC;;GAEG;AACH,MAAM,OAAO,IAAI;IACP,IAAI,CAAQ;IACZ,MAAM,CAAQ;IAEvB,YAAY,IAAY,EAAE,MAAc;QACvC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA;QACjC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAA;IACtC,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,QAAQ,CAAC,IAAU;QACzB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAA;IACpD,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,MAAM,EAAY;QAC7C,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;IAC9B,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,eAAe,CAAC,UAAkB;QACxC,IAAI,MAAM,CAAA,CAAC,+BAA+B;QAE1C,IAAI,KAAK,CAAA,CAAC,gBAAgB;QAE1B,IAAI,OAAO,CAAA,CAAC,kBAAkB;QAE9B,oDAAoD;QACpD,IAAI,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAA;QAE5E,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC;YAChB,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;YACd,KAAK,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;YAC3B,OAAO,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;QAC9B,CAAC;aAAM,CAAC;YACP,qDAAqD;YACrD,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAA;YAE9D,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC;gBAChB,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;gBACd,MAAM,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;gBAEpB,cAAc;gBACd,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;oBACxB,KAAK,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;oBAC5B,OAAO,GAAG,CAAC,CAAA;gBACZ,CAAC;qBAAM,CAAC;oBACP,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;oBAC5D,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;gBACzC,CAAC;YACF,CAAC;iBAAM,CAAC;gBACP,OAAO,IAAI,CAAA;YACZ,CAAC;QACF,CAAC;QAED,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,OAAO,GAAG,EAAE,EAAE,CAAC;YACpD,OAAO,IAAI,CAAA;QACZ,CAAC;QAED,IAAI,MAAM,EAAE,CAAC;YACZ,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAA;QAC9B,CAAC;QAED,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,MAAM,EAAE,CAAC;YAC1C,IAAI,KAAK,GAAG,EAAE;gBAAE,OAAO,IAAI,CAAA;YAC3B,IAAI,KAAK,KAAK,EAAE;gBAAE,KAAK,GAAG,KAAK,GAAG,EAAE,CAAA;QACrC,CAAC;aAAM,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,MAAM,EAAE,CAAC;YACjD,IAAI,KAAK,GAAG,EAAE;gBAAE,OAAO,IAAI,CAAA;YAC3B,IAAI,KAAK,KAAK,EAAE;gBAAE,KAAK,GAAG,CAAC,CAAA;QAC5B,CAAC;aAAM,IAAI,KAAK,GAAG,EAAE,EAAE,CAAC;YACvB,OAAO,IAAI,CAAA;QACZ,CAAC;QAED,OAAO,IAAI,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;IAChC,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,QAAe;QACrB,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAA;QACvD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAC5B,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;QAClB,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;QACvB,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,UAAU,CAAC,QAAc,EAAE,IAAY;QACtC,OAAO,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACzD,CAAC;IAED,MAAM,CAAC,SAAe;QACrB,OAAO,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,CAAA;IACxE,CAAC;IAED,QAAQ,CAAC,UAAmB;QAC3B,OAAO,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAA;IAClE,CAAC;IAED,cAAc;QACb,MAAM,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;QAEzC,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;YACrB,OAAO,MAAM,aAAa,KAAK,CAAA;QAChC,CAAC;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE,CAAC;YAC7B,OAAO,MAAM,aAAa,KAAK,CAAA;QAChC,CAAC;aAAM,IAAI,IAAI,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC;YAC3B,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,aAAa,KAAK,CAAA;QAC/C,CAAC;aAAM,CAAC;YACP,OAAO,GAAG,IAAI,CAAC,IAAI,IAAI,aAAa,KAAK,CAAA;QAC1C,CAAC;IACF,CAAC;IAED,cAAc;QACb,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;QAC/B,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;QACnC,OAAO,GAAG,KAAK,IAAI,OAAO,EAAE,CAAA;IAC7B,CAAC;IAED,QAAQ;QAIP,OAAO;YACN,KAAK,EAAE,IAAI,CAAC,IAAI;YAChB,OAAO,EAAE,IAAI,CAAC,MAAM;SACpB,CAAA;IACF,CAAC;CACD","sourcesContent":["import { pad } from \"@tutao/tutanota-utils\"\nimport { DateTime } from \"luxon\"\n\n/**\n * A wrapper around time handling for the calendar stuff, mostly for the CalendarEventWhenModel\n */\nexport class Time {\n\treadonly hour: number\n\treadonly minute: number\n\n\tconstructor(hour: number, minute: number) {\n\t\tthis.hour = Math.floor(hour) % 24\n\t\tthis.minute = Math.floor(minute) % 60\n\t}\n\n\t/**\n\t * create a time by extracting hour and minute from a date object.\n\t * @param date the date to extract the time from\n\t * NOTE: all calculations are done in local time.\n\t */\n\tstatic fromDate(date: Date): Time {\n\t\treturn new Time(date.getHours(), date.getMinutes())\n\t}\n\n\tstatic fromDateTime({ hour, minute }: DateTime): Time {\n\t\treturn new Time(hour, minute)\n\t}\n\n\t/**\n\t * Accepts 2, 2:30, 2:5, 02:05, 02:30, 24:30, 2430, 12:30pm, 12:30 p.m.\n\t */\n\tstatic parseFromString(timeString: string): Time | null {\n\t\tlet suffix // am/pm indicator or undefined\n\n\t\tlet hours // numeric hours\n\n\t\tlet minutes // numeric minutes\n\n\t\t// See if the time includes a colon separating hh:mm\n\t\tlet mt = timeString.match(/^(\\d{1,2}):(\\d{1,2})\\s*(am|pm|a\\.m\\.|p\\.m\\.)?$/i)\n\n\t\tif (mt != null) {\n\t\t\tsuffix = mt[3]\n\t\t\thours = parseInt(mt[1], 10)\n\t\t\tminutes = parseInt(mt[2], 10)\n\t\t} else {\n\t\t\t// Interpret 127am as 1:27am or 2311 as 11:11pm, e.g.\n\t\t\tmt = timeString.match(/^(\\d{1,4})\\s*(am|pm|a\\.m\\.|p\\.m\\.)?$/i)\n\n\t\t\tif (mt != null) {\n\t\t\t\tsuffix = mt[2]\n\t\t\t\tconst digits = mt[1]\n\n\t\t\t\t// Hours only?\n\t\t\t\tif (digits.length <= 2) {\n\t\t\t\t\thours = parseInt(digits, 10)\n\t\t\t\t\tminutes = 0\n\t\t\t\t} else {\n\t\t\t\t\thours = parseInt(digits.substring(0, digits.length - 2), 10)\n\t\t\t\t\tminutes = parseInt(digits.slice(-2), 10)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t}\n\n\t\tif (isNaN(hours) || isNaN(minutes) || minutes > 59) {\n\t\t\treturn null\n\t\t}\n\n\t\tif (suffix) {\n\t\t\tsuffix = suffix.toUpperCase()\n\t\t}\n\n\t\tif (suffix === \"PM\" || suffix === \"P.M.\") {\n\t\t\tif (hours > 12) return null\n\t\t\tif (hours !== 12) hours = hours + 12\n\t\t} else if (suffix === \"AM\" || suffix === \"A.M.\") {\n\t\t\tif (hours > 12) return null\n\t\t\tif (hours === 12) hours = 0\n\t\t} else if (hours > 23) {\n\t\t\treturn null\n\t\t}\n\n\t\treturn new Time(hours, minutes)\n\t}\n\n\t/**\n\t * convert into a date\n\t * if base date is set it will use the date values from that,\n\t * otherwise it will use the current date.\n\t *\n\t * NOTE: calculations are done in the local time.\n\t */\n\ttoDate(baseDate?: Date): Date {\n\t\tconst date = baseDate ? new Date(baseDate) : new Date()\n\t\tdate.setHours(this.hour)\n\t\tdate.setMinutes(this.minute)\n\t\tdate.setSeconds(0)\n\t\tdate.setMilliseconds(0)\n\t\treturn date\n\t}\n\n\ttoDateTime(baseDate: Date, zone: string): DateTime {\n\t\treturn DateTime.fromJSDate(baseDate, { zone }).set(this)\n\t}\n\n\tequals(otherTime: Time): boolean {\n\t\treturn this.hour === otherTime.hour && this.minute === otherTime.minute\n\t}\n\n\ttoString(amPmFormat: boolean): string {\n\t\treturn amPmFormat ? this.to12HourString() : this.to24HourString()\n\t}\n\n\tto12HourString(): string {\n\t\tconst minutesString = pad(this.minute, 2)\n\n\t\tif (this.hour === 0) {\n\t\t\treturn `12:${minutesString} am`\n\t\t} else if (this.hour === 12) {\n\t\t\treturn `12:${minutesString} pm`\n\t\t} else if (this.hour > 12) {\n\t\t\treturn `${this.hour - 12}:${minutesString} pm`\n\t\t} else {\n\t\t\treturn `${this.hour}:${minutesString} am`\n\t\t}\n\t}\n\n\tto24HourString(): string {\n\t\tconst hours = pad(this.hour, 2)\n\t\tconst minutes = pad(this.minute, 2)\n\t\treturn `${hours}:${minutes}`\n\t}\n\n\ttoObject(): {\n\t\thours: number\n\t\tminutes: number\n\t} {\n\t\treturn {\n\t\t\thours: this.hour,\n\t\t\tminutes: this.minute,\n\t\t}\n\t}\n}\n"]}