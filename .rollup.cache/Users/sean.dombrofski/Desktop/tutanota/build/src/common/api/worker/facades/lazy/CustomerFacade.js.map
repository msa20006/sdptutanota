{"version":3,"file":"CustomerFacade.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/facades/lazy/CustomerFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tAccountType,\n\tBookingItemFeatureType,\n\tConst,\n\tCounterType,\n\tCryptoProtocolVersion,\n\tGroupType,\n\tInvoiceData,\n\tPaymentData,\n\tSpamRuleFieldType,\n\tSpamRuleType,\n} from \"../../../common/TutanotaConstants.js\"\nimport {\n\tAccountingInfo,\n\tAccountingInfoTypeRef,\n\tcreateBrandingDomainData,\n\tcreateBrandingDomainDeleteData,\n\tcreateCreateCustomerServerPropertiesData,\n\tcreateCustomDomainData,\n\tcreateEmailSenderListElement,\n\tcreateInvoiceDataGetIn,\n\tcreateMembershipAddData,\n\tcreateMembershipRemoveData,\n\tcreatePaymentDataServicePutData,\n\tCustomDomainReturn,\n\tCustomerInfoTypeRef,\n\tCustomerServerProperties,\n\tCustomerServerPropertiesTypeRef,\n\tCustomerTypeRef,\n\tEmailSenderListElement,\n\tPaymentDataServicePutReturn,\n} from \"../../../entities/sys/TypeRefs.js\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport type { Hex, lazyAsync } from \"@tutao/tutanota-utils\"\nimport { assertNotNull, neverNull, noOp, ofClass, stringToUtf8Uint8Array, uint8ArrayToBase64, uint8ArrayToHex } from \"@tutao/tutanota-utils\"\nimport { CryptoFacade } from \"../../crypto/CryptoFacade.js\"\nimport {\n\tBrandingDomainService,\n\tCreateCustomerServerProperties,\n\tCustomDomainService,\n\tInvoiceDataService,\n\tMembershipService,\n\tPaymentDataService,\n\tSystemKeysService,\n} from \"../../../entities/sys/Services.js\"\nimport type { UserManagementFacade } from \"./UserManagementFacade.js\"\nimport type { GroupManagementFacade } from \"./GroupManagementFacade.js\"\nimport { CounterFacade } from \"./CounterFacade.js\"\nimport type { Country } from \"../../../common/CountryList.js\"\nimport { getByAbbreviation } from \"../../../common/CountryList.js\"\nimport { LockedError } from \"../../../common/error/RestError.js\"\nimport type { PQKeyPairs } from \"@tutao/tutanota-crypto\"\nimport { aes256RandomKey, bitArrayToUint8Array, hexToRsaPublicKey, sha256Hash, uint8ArrayToBitArray } from \"@tutao/tutanota-crypto\"\nimport type { RsaImplementation } from \"../../crypto/RsaImplementation.js\"\nimport { EntityClient } from \"../../../common/EntityClient.js\"\nimport { DataFile } from \"../../../common/DataFile.js\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { CustomerAccountService } from \"../../../entities/tutanota/Services.js\"\nimport { BookingFacade } from \"./BookingFacade.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { PaymentInterval } from \"../../../../subscription/PriceUtils.js\"\nimport { ExposedOperationProgressTracker, OperationId } from \"../../../main/OperationProgressTracker.js\"\nimport { formatNameAndAddress } from \"../../../common/utils/CommonFormatter.js\"\nimport { PQFacade } from \"../PQFacade.js\"\nimport { ProgrammingError } from \"../../../common/error/ProgrammingError.js\"\nimport { getWhitelabelDomainInfo } from \"../../../common/utils/CustomerUtils.js\"\nimport type { PdfWriter } from \"../../pdf/PdfWriter.js\"\nimport { createCustomerAccountCreateData } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { KeyLoaderFacade, parseKeyVersion } from \"../KeyLoaderFacade.js\"\nimport { RecoverCodeFacade } from \"./RecoverCodeFacade.js\"\nimport { encryptKeyWithVersionedKey, VersionedEncryptedKey, VersionedKey } from \"../../crypto/CryptoWrapper.js\"\nimport { AsymmetricCryptoFacade } from \"../../crypto/AsymmetricCryptoFacade.js\"\nimport { XRechnungInvoiceGenerator } from \"../../invoicegen/XRechnungInvoiceGenerator.js\"\nimport type { SubscriptionApp } from \"../../../../subscription/SubscriptionViewer.js\"\n\nassertWorkerOrNode()\n\nexport class CustomerFacade {\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly groupManagement: GroupManagementFacade,\n\t\tprivate readonly userManagement: UserManagementFacade,\n\t\tprivate readonly counters: CounterFacade,\n\t\tprivate readonly rsa: RsaImplementation,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly bookingFacade: BookingFacade,\n\t\tprivate readonly cryptoFacade: CryptoFacade,\n\t\tprivate readonly operationProgressTracker: ExposedOperationProgressTracker,\n\t\tprivate readonly pdfWriter: lazyAsync<PdfWriter>,\n\t\tprivate readonly pqFacade: PQFacade,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t\tprivate readonly recoverCodeFacade: RecoverCodeFacade,\n\t\tprivate readonly asymmetricCryptoFacade: AsymmetricCryptoFacade,\n\t) {}\n\n\tasync getDomainValidationRecord(domainName: string): Promise<string> {\n\t\tconst customer = this.getCustomerId()\n\t\tconst baseString = domainName.trim().toLowerCase() + customer\n\t\tconst hash = sha256Hash(stringToUtf8Uint8Array(baseString)).slice(0, 16)\n\t\treturn \"t-verify=\" + uint8ArrayToHex(hash)\n\t}\n\n\taddDomain(domainName: string): Promise<CustomDomainReturn> {\n\t\tconst data = createCustomDomainData({\n\t\t\tdomain: domainName.trim().toLowerCase(),\n\t\t\tcatchAllMailGroup: null,\n\t\t})\n\t\treturn this.serviceExecutor.post(CustomDomainService, data)\n\t}\n\n\tasync removeDomain(domainName: string): Promise<void> {\n\t\tconst data = createCustomDomainData({\n\t\t\tdomain: domainName.trim().toLowerCase(),\n\t\t\tcatchAllMailGroup: null,\n\t\t})\n\t\tawait this.serviceExecutor.delete(CustomDomainService, data)\n\t}\n\n\tasync setCatchAllGroup(domainName: string, mailGroupId: Id | null): Promise<void> {\n\t\tconst data = createCustomDomainData({\n\t\t\tdomain: domainName.trim().toLowerCase(),\n\t\t\tcatchAllMailGroup: mailGroupId,\n\t\t})\n\t\tawait this.serviceExecutor.put(CustomDomainService, data)\n\t}\n\n\tasync orderWhitelabelCertificate(domainName: string): Promise<void> {\n\t\tconst customerId = this.getCustomerId()\n\t\tconst customer = await this.entityClient.load(CustomerTypeRef, customerId)\n\t\tconst customerInfo = await this.entityClient.load(CustomerInfoTypeRef, customer.customerInfo)\n\t\tlet existingBrandingDomain = getWhitelabelDomainInfo(customerInfo, domainName)\n\t\tlet sessionKey = aes256RandomKey()\n\n\t\tconst keyData = await this.serviceExecutor.get(SystemKeysService, null)\n\t\tconst pubRsaKey = keyData.systemAdminPubRsaKey\n\t\tconst pubEccKey = keyData.systemAdminPubEccKey\n\t\tconst pubKyberKey = keyData.systemAdminPubKyberKey\n\t\tconst systemAdminPubKeys = {\n\t\t\tobject: {\n\t\t\t\tpubEccKey,\n\t\t\t\tpubKyberKey,\n\t\t\t\tpubRsaKey,\n\t\t\t},\n\t\t\tversion: parseKeyVersion(keyData.systemAdminPubKeyVersion),\n\t\t}\n\t\tconst { pubEncSymKeyBytes, cryptoProtocolVersion } = await this.asymmetricCryptoFacade.asymEncryptSymKey(\n\t\t\tsessionKey,\n\t\t\tsystemAdminPubKeys,\n\t\t\tthis.userFacade.getUserGroupId(),\n\t\t)\n\n\t\tconst data = createBrandingDomainData({\n\t\t\tdomain: domainName,\n\t\t\tsystemAdminPubEncSessionKey: pubEncSymKeyBytes,\n\t\t\tsystemAdminPubKeyVersion: String(systemAdminPubKeys.version),\n\t\t\tsystemAdminPublicProtocolVersion: cryptoProtocolVersion,\n\t\t\tsessionEncPemPrivateKey: null,\n\t\t\tsessionEncPemCertificateChain: null,\n\t\t})\n\t\tif (existingBrandingDomain) {\n\t\t\tawait this.serviceExecutor.put(BrandingDomainService, data)\n\t\t} else {\n\t\t\tawait this.serviceExecutor.post(BrandingDomainService, data)\n\t\t}\n\t}\n\n\tprivate getCustomerId() {\n\t\treturn assertNotNull(this.userFacade.getLoggedInUser().customer)\n\t}\n\n\tasync deleteCertificate(domainName: string): Promise<void> {\n\t\tconst data = createBrandingDomainDeleteData({\n\t\t\tdomain: domainName,\n\t\t})\n\t\tawait this.serviceExecutor.delete(BrandingDomainService, data)\n\t}\n\n\t/**\n\t * Reads the used storage of a customer in bytes.\n\t * @return The amount of used storage in byte.\n\t */\n\tasync readUsedCustomerStorage(customerId: Id): Promise<number> {\n\t\tconst customerCounters = await this.counters.readAllCustomerCounterValues(CounterType.UserStorageLegacy, customerId)\n\t\treturn customerCounters.reduce((sum, counterValue) => sum + Number(counterValue.value), 0)\n\t}\n\n\t/**\n\t * Reads the available storage capacity of a customer in bytes.\n\t * @return The amount of available storage capacity in byte.\n\t */\n\treadAvailableCustomerStorage(customerId: Id): Promise<number> {\n\t\treturn this.entityClient.load(CustomerTypeRef, customerId).then((customer) => {\n\t\t\treturn this.entityClient.load(CustomerInfoTypeRef, customer.customerInfo).then((customerInfo) => {\n\t\t\t\tlet includedStorage = Number(customerInfo.includedStorageCapacity)\n\t\t\t\tlet promotionStorage = Number(customerInfo.promotionStorageCapacity)\n\t\t\t\tlet availableStorage = Math.max(includedStorage, promotionStorage)\n\t\t\t\tlet bookedStorage = 0\n\n\t\t\t\tif (customer.type === AccountType.PAID) {\n\t\t\t\t\treturn this.bookingFacade.getCurrentPrice().then((price) => {\n\t\t\t\t\t\tlet currentStorageItem = this.bookingFacade.getPriceItem(price.currentPriceNextPeriod, BookingItemFeatureType.Storage)\n\n\t\t\t\t\t\tif (currentStorageItem != null) {\n\t\t\t\t\t\t\tbookedStorage = Number(currentStorageItem.count)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tavailableStorage = Math.max(bookedStorage, availableStorage)\n\t\t\t\t\t\treturn availableStorage * Const.MEMORY_GB_FACTOR\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\treturn availableStorage * Const.MEMORY_GB_FACTOR\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\tasync loadCustomerServerProperties(): Promise<CustomerServerProperties> {\n\t\tconst customer = await this.entityClient.load(CustomerTypeRef, this.getCustomerId())\n\t\tlet cspId\n\t\tif (customer.serverProperties) {\n\t\t\tcspId = customer.serverProperties\n\t\t} else {\n\t\t\t// create properties\n\t\t\tconst sessionKey = aes256RandomKey()\n\t\t\tconst adminGroupId = this.userFacade.getGroupId(GroupType.Admin)\n\t\t\tconst adminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId)\n\n\t\t\tconst adminGroupEncSessionKey = encryptKeyWithVersionedKey(adminGroupKey, sessionKey)\n\t\t\tconst data = createCreateCustomerServerPropertiesData({\n\t\t\t\tadminGroupEncSessionKey: adminGroupEncSessionKey.key,\n\t\t\t\tadminGroupKeyVersion: adminGroupEncSessionKey.encryptingKeyVersion.toString(),\n\t\t\t})\n\t\t\tconst returnData = await this.serviceExecutor.post(CreateCustomerServerProperties, data)\n\t\t\tcspId = returnData.id\n\t\t}\n\t\treturn this.entityClient.load(CustomerServerPropertiesTypeRef, cspId)\n\t}\n\n\taddSpamRule(field: SpamRuleFieldType, type: SpamRuleType, value: string): Promise<void> {\n\t\treturn this.loadCustomerServerProperties().then((props) => {\n\t\t\tvalue = value.toLowerCase().trim()\n\t\t\tlet newListEntry = createEmailSenderListElement({\n\t\t\t\tvalue,\n\t\t\t\thashedValue: uint8ArrayToBase64(sha256Hash(stringToUtf8Uint8Array(value))),\n\t\t\t\ttype,\n\t\t\t\tfield,\n\t\t\t})\n\t\t\tprops.emailSenderList.push(newListEntry)\n\t\t\treturn this.entityClient.update(props).catch(ofClass(LockedError, noOp))\n\t\t})\n\t}\n\n\teditSpamRule(spamRule: EmailSenderListElement): Promise<void> {\n\t\treturn this.loadCustomerServerProperties().then((props) => {\n\t\t\tspamRule.value = spamRule.value.toLowerCase().trim()\n\t\t\tconst index = props.emailSenderList.findIndex((item) => spamRule._id === item._id)\n\n\t\t\tif (index === -1) {\n\t\t\t\tthrow new Error(\"spam rule does not exist \" + JSON.stringify(spamRule))\n\t\t\t}\n\n\t\t\tprops.emailSenderList[index] = spamRule\n\t\t\treturn this.entityClient.update(props).catch(ofClass(LockedError, noOp))\n\t\t})\n\t}\n\n\tasync generateSignupKeys(operationId: OperationId): Promise<[PQKeyPairs, PQKeyPairs, PQKeyPairs]> {\n\t\tconst key1 = await this.pqFacade.generateKeyPairs()\n\t\tawait this.operationProgressTracker.onProgress(operationId, 33)\n\t\tconst key2 = await this.pqFacade.generateKeyPairs()\n\t\tawait this.operationProgressTracker.onProgress(operationId, 66)\n\t\tconst key3 = await this.pqFacade.generateKeyPairs()\n\t\tawait this.operationProgressTracker.onProgress(operationId, 100)\n\t\treturn [key1, key2, key3]\n\t}\n\n\tasync signup(\n\t\tkeyPairs: [PQKeyPairs, PQKeyPairs, PQKeyPairs],\n\t\taccountType: AccountType,\n\t\tauthToken: string,\n\t\tmailAddress: string,\n\t\tpassword: string,\n\t\tregistrationCode: string,\n\t\tcurrentLanguage: string,\n\t\tapp: SubscriptionApp,\n\t): Promise<Hex> {\n\t\tconst userGroupKey: VersionedKey = { object: aes256RandomKey(), version: 0 }\n\t\tconst adminGroupKey: VersionedKey = { object: aes256RandomKey(), version: 0 }\n\t\tconst customerGroupKey: VersionedKey = { object: aes256RandomKey(), version: 0 }\n\t\tconst userGroupInfoSessionKey = aes256RandomKey()\n\t\tconst adminGroupInfoSessionKey = aes256RandomKey()\n\t\tconst customerGroupInfoSessionKey = aes256RandomKey()\n\t\tconst accountingInfoSessionKey = aes256RandomKey()\n\t\tconst customerServerPropertiesSessionKey = aes256RandomKey()\n\n\t\tconst keyData = await this.serviceExecutor.get(SystemKeysService, null)\n\t\tconst pubRsaKey = keyData.systemAdminPubRsaKey\n\t\tlet systemAdminPubEncAccountingInfoSessionKey: VersionedEncryptedKey\n\t\tlet systemAdminPublicProtocolVersion: CryptoProtocolVersion\n\n\t\tif (pubRsaKey) {\n\t\t\tconst rsaPublicKey = hexToRsaPublicKey(uint8ArrayToHex(pubRsaKey))\n\t\t\tconst systemAdminPubEncAccountingInfoSessionKeyBytes = await this.rsa.encrypt(rsaPublicKey, bitArrayToUint8Array(accountingInfoSessionKey))\n\t\t\tsystemAdminPubEncAccountingInfoSessionKey = {\n\t\t\t\tkey: systemAdminPubEncAccountingInfoSessionKeyBytes,\n\t\t\t\tencryptingKeyVersion: parseKeyVersion(keyData.systemAdminPubKeyVersion),\n\t\t\t}\n\t\t\tsystemAdminPublicProtocolVersion = CryptoProtocolVersion.RSA\n\t\t} else {\n\t\t\t// we need to release tuta-crypt by default first before we can encrypt keys for the system admin with PQ public keys.\n\t\t\tthrow new ProgrammingError(\"system admin having pq key pair is not supported\")\n\t\t}\n\n\t\tconst userGroupData = this.groupManagement.generateInternalGroupData(\n\t\t\tkeyPairs[0],\n\t\t\tuserGroupKey.object,\n\t\t\tuserGroupInfoSessionKey,\n\t\t\tnull,\n\t\t\tadminGroupKey,\n\t\t\tcustomerGroupKey,\n\t\t)\n\n\t\tconst adminGroupData = this.groupManagement.generateInternalGroupData(\n\t\t\tkeyPairs[1],\n\t\t\tadminGroupKey.object,\n\t\t\tadminGroupInfoSessionKey,\n\t\t\tnull,\n\t\t\tadminGroupKey,\n\t\t\tcustomerGroupKey,\n\t\t)\n\n\t\tconst customerGroupData = this.groupManagement.generateInternalGroupData(\n\t\t\tkeyPairs[2],\n\t\t\tcustomerGroupKey.object,\n\t\t\tcustomerGroupInfoSessionKey,\n\t\t\tnull,\n\t\t\tadminGroupKey,\n\t\t\tcustomerGroupKey,\n\t\t)\n\n\t\tconst recoverData = this.recoverCodeFacade.generateRecoveryCode(userGroupKey)\n\n\t\tconst userEncAdminGroupKey = encryptKeyWithVersionedKey(userGroupKey, adminGroupKey.object)\n\t\tconst adminEncAccountingInfoSessionKey = encryptKeyWithVersionedKey(adminGroupKey, accountingInfoSessionKey)\n\t\tconst adminEncCustomerServerPropertiesSessionKey = encryptKeyWithVersionedKey(adminGroupKey, customerServerPropertiesSessionKey)\n\n\t\tconst data = createCustomerAccountCreateData({\n\t\t\tauthToken,\n\t\t\tdate: Const.CURRENT_DATE,\n\t\t\tlang: currentLanguage,\n\t\t\tcode: registrationCode,\n\t\t\tuserData: await this.userManagement.generateUserAccountData(\n\t\t\t\tuserGroupKey,\n\t\t\t\tuserGroupInfoSessionKey,\n\t\t\t\tcustomerGroupKey,\n\t\t\t\tmailAddress,\n\t\t\t\tpassword,\n\t\t\t\t\"\",\n\t\t\t\trecoverData,\n\t\t\t),\n\t\t\tuserEncAdminGroupKey: userEncAdminGroupKey.key,\n\t\t\tuserGroupData,\n\t\t\tadminGroupData,\n\t\t\tcustomerGroupData,\n\t\t\tadminEncAccountingInfoSessionKey: adminEncAccountingInfoSessionKey.key,\n\t\t\tsystemAdminPubEncAccountingInfoSessionKey: systemAdminPubEncAccountingInfoSessionKey.key,\n\t\t\tsystemAdminPubKeyVersion: String(systemAdminPubEncAccountingInfoSessionKey.encryptingKeyVersion),\n\t\t\tsystemAdminPublicProtocolVersion,\n\t\t\tadminEncCustomerServerPropertiesSessionKey: adminEncCustomerServerPropertiesSessionKey.key,\n\t\t\tuserEncAccountGroupKey: new Uint8Array(0), // if we some day start passing the right key here, we'll also need to pass the right version\n\t\t\taccountGroupKeyVersion: \"0\",\n\t\t\tapp,\n\t\t})\n\t\tawait this.serviceExecutor.post(CustomerAccountService, data)\n\t\treturn recoverData.hexCode\n\t}\n\n\tasync switchFreeToPremiumGroup(): Promise<void> {\n\t\ttry {\n\t\t\tconst keyData = await this.serviceExecutor.get(SystemKeysService, null)\n\t\t\tawait this.switchAccountGroup(neverNull(keyData.freeGroup), neverNull(keyData.premiumGroup), {\n\t\t\t\tobject: uint8ArrayToBitArray(keyData.premiumGroupKey),\n\t\t\t\tversion: parseKeyVersion(keyData.premiumGroupKeyVersion),\n\t\t\t})\n\t\t} catch (e) {\n\t\t\te.message = e.message + \" error switching free to premium group\"\n\t\t\tconsole.log(e)\n\t\t\tthrow e\n\t\t}\n\t}\n\n\tasync switchPremiumToFreeGroup(): Promise<void> {\n\t\ttry {\n\t\t\tconst keyData = await this.serviceExecutor.get(SystemKeysService, null)\n\t\t\tawait this.switchAccountGroup(neverNull(keyData.premiumGroup), neverNull(keyData.freeGroup), {\n\t\t\t\tobject: uint8ArrayToBitArray(keyData.freeGroupKey),\n\t\t\t\tversion: parseKeyVersion(keyData.freeGroupKeyVersion),\n\t\t\t})\n\t\t} catch (e) {\n\t\t\te.message = e.message + \" error switching premium to free group\"\n\t\t\tconsole.log(e)\n\t\t\tthrow e\n\t\t}\n\t}\n\n\tasync updatePaymentData(\n\t\tpaymentInterval: PaymentInterval,\n\t\tinvoiceData: InvoiceData,\n\t\tpaymentData: PaymentData | null,\n\t\tconfirmedInvoiceCountry: Country | null,\n\t): Promise<PaymentDataServicePutReturn> {\n\t\tlet customer = await this.entityClient.load(CustomerTypeRef, assertNotNull(this.userFacade.getLoggedInUser().customer))\n\t\tlet customerInfo = await this.entityClient.load(CustomerInfoTypeRef, customer.customerInfo)\n\t\tlet accountingInfo = await this.entityClient.load(AccountingInfoTypeRef, customerInfo.accountingInfo)\n\t\tlet accountingInfoSessionKey = await this.cryptoFacade.resolveSessionKeyForInstance(accountingInfo)\n\t\tconst service = createPaymentDataServicePutData({\n\t\t\tpaymentInterval: paymentInterval.toString(),\n\t\t\tinvoiceName: \"\",\n\t\t\tinvoiceAddress: invoiceData.invoiceAddress,\n\t\t\tinvoiceCountry: invoiceData.country ? invoiceData.country.a : \"\",\n\t\t\tinvoiceVatIdNo: invoiceData.vatNumber ? invoiceData.vatNumber : \"\",\n\t\t\tpaymentMethod: paymentData ? paymentData.paymentMethod : accountingInfo.paymentMethod ? accountingInfo.paymentMethod : \"\",\n\t\t\tpaymentMethodInfo: null,\n\t\t\tpaymentToken: null,\n\t\t\tcreditCard: paymentData && paymentData.creditCardData ? paymentData.creditCardData : null,\n\t\t\tconfirmedCountry: confirmedInvoiceCountry ? confirmedInvoiceCountry.a : null,\n\t\t})\n\t\treturn this.serviceExecutor.put(PaymentDataService, service, { sessionKey: accountingInfoSessionKey ?? undefined })\n\t}\n\n\t/**\n\t * Convenience function to change the payment interval for the current subscription\n\t * @param accountingInfo accounting info\n\t * @param newPaymentInterval new payment interval\n\t */\n\tasync changePaymentInterval(accountingInfo: AccountingInfo, newPaymentInterval: PaymentInterval): Promise<PaymentDataServicePutReturn> {\n\t\tconst invoiceCountry = neverNull(getByAbbreviation(neverNull(accountingInfo.invoiceCountry)))\n\n\t\treturn this.updatePaymentData(\n\t\t\tnewPaymentInterval,\n\t\t\t{\n\t\t\t\tinvoiceAddress: formatNameAndAddress(accountingInfo.invoiceName, accountingInfo.invoiceAddress),\n\t\t\t\tcountry: invoiceCountry,\n\t\t\t\tvatNumber: accountingInfo.invoiceVatIdNo,\n\t\t\t},\n\t\t\tnull,\n\t\t\tinvoiceCountry,\n\t\t)\n\t}\n\n\tasync generatePdfInvoice(invoiceNumber: string): Promise<DataFile> {\n\t\tconst invoiceData = await this.serviceExecutor.get(InvoiceDataService, createInvoiceDataGetIn({ invoiceNumber }))\n\t\tconst writer = await this.pdfWriter()\n\t\tconst { PdfInvoiceGenerator } = await import(\"../../invoicegen/PdfInvoiceGenerator.js\")\n\t\tconst pdfGenerator = new PdfInvoiceGenerator(writer, invoiceData, invoiceNumber, this.getCustomerId())\n\t\tconst pdfFile = await pdfGenerator.generate()\n\t\treturn {\n\t\t\t_type: \"DataFile\",\n\t\t\tname: String(invoiceNumber) + \".pdf\",\n\t\t\tmimeType: \"application/pdf\",\n\t\t\tdata: pdfFile,\n\t\t\tsize: pdfFile.byteLength,\n\t\t\tid: undefined,\n\t\t}\n\t}\n\n\tasync generateXRechnungInvoice(invoiceNumber: string): Promise<DataFile> {\n\t\tconst customer = await this.entityClient.load(CustomerTypeRef, assertNotNull(this.userFacade.getUser()?.customer))\n\t\tconst customerInfo = await this.entityClient.load(CustomerInfoTypeRef, customer.customerInfo)\n\t\tconst invoiceData = await this.serviceExecutor.get(InvoiceDataService, createInvoiceDataGetIn({ invoiceNumber }))\n\t\tconst { XRechnungInvoiceGenerator } = await import(\"../../invoicegen/XRechnungInvoiceGenerator.js\")\n\t\tconst xRechnungGenerator = new XRechnungInvoiceGenerator(invoiceData, invoiceNumber, this.getCustomerId(), customerInfo.registrationMailAddress)\n\t\tconst xRechnungFile = xRechnungGenerator.generate()\n\t\treturn {\n\t\t\t_type: \"DataFile\",\n\t\t\tname: String(invoiceNumber) + \".xml\",\n\t\t\tmimeType: \"application/xml\",\n\t\t\tdata: xRechnungFile,\n\t\t\tsize: xRechnungFile.byteLength,\n\t\t\tid: undefined,\n\t\t}\n\t}\n\n\tasync loadAccountingInfo(): Promise<AccountingInfo> {\n\t\tconst customer = await this.entityClient.load(CustomerTypeRef, assertNotNull(this.userFacade.getUser()?.customer))\n\t\tconst customerInfo = await this.entityClient.load(CustomerInfoTypeRef, customer.customerInfo)\n\t\treturn this.entityClient.load(AccountingInfoTypeRef, customerInfo.accountingInfo)\n\t}\n\n\tprivate async switchAccountGroup(oldGroup: Id, newGroup: Id, newGroupKey: VersionedKey): Promise<void> {\n\t\tconst loggedInUser = this.userFacade.getLoggedInUser()\n\t\tconst symEncGKey = encryptKeyWithVersionedKey(this.userFacade.getCurrentUserGroupKey(), newGroupKey.object)\n\t\tconst membershipAddData = createMembershipAddData({\n\t\t\tuser: loggedInUser._id,\n\t\t\tgroup: newGroup,\n\t\t\tsymEncGKey: symEncGKey.key,\n\t\t\tgroupKeyVersion: newGroupKey.version.toString(),\n\t\t\tsymKeyVersion: symEncGKey.encryptingKeyVersion.toString(),\n\t\t})\n\t\tawait this.serviceExecutor.post(MembershipService, membershipAddData)\n\t\tconst membershipRemoveData = createMembershipRemoveData({\n\t\t\tuser: loggedInUser._id,\n\t\t\tgroup: oldGroup,\n\t\t})\n\t\treturn this.serviceExecutor.delete(MembershipService, membershipRemoveData)\n\t}\n}\n"]}