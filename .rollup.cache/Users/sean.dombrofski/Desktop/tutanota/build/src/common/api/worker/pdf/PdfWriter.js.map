{"version":3,"file":"PdfWriter.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/pdf/PdfWriter.ts"],"names":[],"mappings":"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","sourcesContent":["import { PdfObject } from \"./PdfObject.js\"\nimport { GENERATION_NUMBER, NEW_LINE, PDF_DEFAULT_OBJECTS, PDF_METADATA, PdfDictValue, PdfObjectRef, PdfStreamEncoding } from \"./PdfConstants.js\"\nimport { PdfStreamObject } from \"./PdfStreamObject.js\"\nimport { concat, hexToUint8Array } from \"@tutao/tutanota-utils\"\nimport { Deflater } from \"./Deflater.js\"\nimport { ProgrammingError } from \"../../common/error/ProgrammingError.js\"\n\n// Binary header specifying the PDF version (2.0 = \"322e30\") and the fact that binary data is present in the file\nconst PDF_HEADER = hexToUint8Array(\"255044462d322e300a25e2e3cfd30a\")\n// Special PDF object with number 0. Only appears in xref table\nconst ZERO_OBJECT_ENTRY = \"0000000000 65535 f\"\n\ntype GlobalFetch = typeof global.fetch\n\n/**\n * Object which manages the low-level building of a PDF document by managing objects and their relation to each other.\n * For high-level functionality see \"PdfDocument\" class\n */\nexport class PdfWriter {\n\tprivate readonly textEncoder: TextEncoder\n\tprivate readonly customFetch: GlobalFetch | undefined\n\tprivate readonly deflater: Deflater\n\tprivate byteLengthPosition = PDF_HEADER.byteLength\n\tprivate pdfObjectList: PdfObject[] = []\n\tprivate referenceTable: Map<string, PdfObject> = new Map<string, PdfObject>()\n\tprivate cachedResources: ArrayBuffer[] | undefined\n\n\tconstructor(textEncoder: TextEncoder, customFetch: GlobalFetch | undefined) {\n\t\tthis.textEncoder = textEncoder\n\t\tthis.customFetch = customFetch\n\t\tthis.deflater = new Deflater()\n\t\tthis.cachedResources = undefined\n\t}\n\n\t/**\n\t * Add all PDF default objects to this writer that are necessary for any functioning document, see \"PdfConstants\"\n\t */\n\tsetupDefaultObjects() {\n\t\tfor (const object of PDF_DEFAULT_OBJECTS) {\n\t\t\tthis.createObject(object.dictionary, object.refId)\n\t\t}\n\t}\n\n\t/**\n\t * Create a new PDF object\n\t * @param objectDictionary Map of the object dictionary\n\t * @param refId ID by which other objects can reference this object\n\t */\n\tcreateObject(objectDictionary: Map<string, PdfDictValue>, refId: string = \"\"): void {\n\t\tif (this.referenceTable.has(refId)) {\n\t\t\tthrow new ProgrammingError(`already defined object refId ${refId}`)\n\t\t}\n\t\tconst obj = new PdfObject(this.pdfObjectList.length + 1, objectDictionary)\n\t\tif (refId.length > 0) {\n\t\t\tthis.referenceTable.set(refId, obj)\n\t\t}\n\t\tthis.pdfObjectList.push(obj)\n\t}\n\n\t/**\n\t * Create a new PDF object with stream data\n\t * @param objectDictionary Map of the object dictionary. Must not provide stream-specific data\n\t * @param stream The stream of the object\n\t * @param streamEncoding The encoding of the stream\n\t * @param refId ID by which other objects can reference this object\n\t */\n\tcreateStreamObject(objectDictionary: Map<string, PdfDictValue>, stream: Uint8Array, streamEncoding: PdfStreamEncoding, refId: string = \"\"): void {\n\t\tif (this.referenceTable.has(refId)) {\n\t\t\tthrow new ProgrammingError(`already defined stream refId ${refId}`)\n\t\t}\n\t\tconst obj = new PdfStreamObject(this.pdfObjectList.length + 1, objectDictionary, stream, streamEncoding)\n\t\tif (refId.length > 0) {\n\t\t\tthis.referenceTable.set(refId, obj)\n\t\t}\n\t\tthis.pdfObjectList.push(obj)\n\t}\n\n\t/**\n\t * Get a PDF object added to this writer by its ID\n\t * @param refId The id of the desired object\n\t */\n\tgetObjectByRefId(refId: string): PdfObject {\n\t\tconst obj = this.referenceTable.get(refId)\n\t\tif (obj != null) {\n\t\t\treturn obj\n\t\t} else {\n\t\t\tthrow new Error(`Invalid ReferenceId: ${refId}. No object was found that has this refId. Reference can't be resolved, aborting...`)\n\t\t}\n\t}\n\n\t/**\n\t * Write the cross-reference table of the PDF which is a special object lookup table for PDF readers\n\t */\n\tmakeXRefTable(): string {\n\t\tlet xref = `xref${NEW_LINE}0 ${this.pdfObjectList.length + 1}${NEW_LINE}${ZERO_OBJECT_ENTRY} ${NEW_LINE}`\n\t\tfor (const pdfObject of this.pdfObjectList) {\n\t\t\tif (pdfObject.getBytePosition() === -1) throw new Error(`Found an object with invalid byte-position! ${pdfObject.getObjectNumber()}`)\n\t\t\t// Replace the \"0000000000\" value with the byte-position but keep all leading zeros\n\t\t\txref += `${(\"0000000000\" + pdfObject.getBytePosition()).slice(-10)} 00000 n ${NEW_LINE}`\n\t\t}\n\t\treturn xref\n\t}\n\n\t/**\n\t * Write the trailer of the PDF which is a special object pointing at the \"Catalog object\" and additional metadata\n\t * @param identifier A preferably unique string\n\t */\n\tmakeTrailer(identifier: string): string {\n\t\tlet trailer = `trailer${NEW_LINE}<<${NEW_LINE}`\n\t\ttrailer += `/Size ${this.pdfObjectList.length + 1}`\n\t\ttrailer += `/Root ${this.pdfReferenceToString({ refId: \"CATALOG\" })}`\n\t\ttrailer += `/ID [(${identifier})(${identifier})]`\n\t\ttrailer += `${NEW_LINE}>>${NEW_LINE}startxref${NEW_LINE}${this.byteLengthPosition}${NEW_LINE}%%EOF`\n\t\treturn trailer\n\t}\n\n\t/**\n\t * Resolve all references to other objects in a PDF dictionary\n\t * This replaces every refId with the string \"objNumber 0 R\" which is PDF syntax for referencing other objects\n\t * Returns the PDF dictionary as Map of <string, string> allowing it to be encoded\n\t * @param objDictionary The dictionary t\n\t */\n\tresolveReferences(objDictionary: Map<string, PdfDictValue>): Map<string, string> {\n\t\tconst newMap = new Map<string, string>()\n\t\tfor (const [key, value] of objDictionary) {\n\t\t\tnewMap.set(key, this.resolveDictValue(value))\n\t\t}\n\t\treturn newMap\n\t}\n\n\t/**\n\t * Resolve a PdfDictValue into its string equivalent\n\t * @param value Value to resolve\n\t */\n\tresolveDictValue(value: PdfDictValue): string {\n\t\tif (typeof value !== \"string\") {\n\t\t\tif (value instanceof Map) {\n\t\t\t\t// Value is a nested directory, recursively resolve all references in the nested directory and convert to string\n\t\t\t\treturn this.pdfDictionaryToString(value)\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t// Value is a list, iterate over all elements, resolve them if necessary and convert to string\n\t\t\t\treturn this.pdfListToString(value)\n\t\t\t} else {\n\t\t\t\t// Value is a singular reference, resolve it into a string\n\t\t\t\treturn this.pdfReferenceToString(value)\n\t\t\t}\n\t\t} else {\n\t\t\t// Value is a string, keep it\n\t\t\treturn value\n\t\t}\n\t}\n\n\tpdfReferenceToString(objectReference: PdfObjectRef): string {\n\t\tconst referencedObject = this.getObjectByRefId(objectReference.refId)\n\t\treturn `${referencedObject.getObjectNumber()} ${GENERATION_NUMBER} R`\n\t}\n\n\tpdfListToString(objectReferences: PdfDictValue[]): string {\n\t\tlet referenceString = \"[\" + \" \"\n\t\tfor (const objRef of objectReferences) {\n\t\t\treferenceString += this.resolveDictValue(objRef) + \" \"\n\t\t}\n\t\treferenceString += \"]\"\n\t\treturn referenceString\n\t}\n\n\tpdfDictionaryToString(objectReferenceDict: Map<string, PdfDictValue>): string {\n\t\tlet referenceString = \"<<\" + \" \"\n\t\tfor (const [key, value] of objectReferenceDict) {\n\t\t\treferenceString += `/${key} ${this.resolveDictValue(value)} `\n\t\t}\n\t\treferenceString += \">>\"\n\t\treturn referenceString\n\t}\n\n\t/**\n\t * Calculate the byte-position for a given object\n\t * @param object The object that should have its byte-position be calculated\n\t * @param encodedObject The provided object in encoded format to allow calculation for the next object\n\t */\n\tcalculateBytePositions(object: PdfObject, encodedObject: Uint8Array) {\n\t\tobject.setBytePosition(this.byteLengthPosition)\n\t\tthis.byteLengthPosition += encodedObject.byteLength\n\t}\n\n\t/**\n\t * Add all resource objects (stream objects) to the PDF. These are referenced by the \"default objects\" but need to be dynamically generated because they\n\t * include a huge amount of stream data / need to read their stream data in from external resources (base64 encoded)\n\t */\n\tasync setupResourceObjects() {\n\t\tconst baseUrl = typeof location === \"undefined\" ? \"\" : location.protocol + \"//\" + location.hostname + (location.port ? \":\" + location.port : \"\")\n\t\tif (!this.cachedResources) {\n\t\t\tthis.cachedResources = await Promise.all(\n\t\t\t\t[\"/pdf/SourceSans3-Regular.ttf\", \"/pdf/SourceSans3-Bold.ttf\", \"/pdf/sRGB2014.icc\", \"/pdf/identity_h.cmap\", \"/pdf/tutanota_logo_en.jpg\"].map(\n\t\t\t\t\t(url) =>\n\t\t\t\t\t\ttypeof this.customFetch !== \"undefined\"\n\t\t\t\t\t\t\t? this.customFetch(baseUrl + url).then((r) => r.arrayBuffer())\n\t\t\t\t\t\t\t: fetch(baseUrl + url).then((r) => r.arrayBuffer()),\n\t\t\t\t),\n\t\t\t)\n\t\t}\n\t\tconst [fontRegular, fontBold, colorProfile, cmap, tutaImage] = this.cachedResources\n\n\t\t// Regular font file\n\t\tthis.createStreamObject(\n\t\t\tnew Map([[\"Length1\", fontRegular.byteLength.toString()]]),\n\t\t\tawait this.deflater.deflate(fontRegular),\n\t\t\tPdfStreamEncoding.FLATE,\n\t\t\t\"FONT_REGULAR_FILE\",\n\t\t)\n\t\t// Bold font file\n\t\tthis.createStreamObject(\n\t\t\tnew Map([[\"Length1\", fontBold.byteLength.toString()]]),\n\t\t\tawait this.deflater.deflate(fontBold),\n\t\t\tPdfStreamEncoding.FLATE,\n\t\t\t\"FONT_BOLD_FILE\",\n\t\t)\n\t\t// Identity CMap\n\t\tthis.createStreamObject(\n\t\t\tnew Map([\n\t\t\t\t[\"Type\", \"/CMap\"],\n\t\t\t\t[\"CMapName\", \"/Identity-H \"],\n\t\t\t\t[\"CIDSystemInfo\", \"<< /Registry (Adobe) /Ordering (Identity) /Supplement 0 >>\"],\n\t\t\t]),\n\t\t\tawait this.deflater.deflate(cmap),\n\t\t\tPdfStreamEncoding.FLATE,\n\t\t\t\"CMAP\",\n\t\t)\n\t\t// Color profile\n\t\tthis.createStreamObject(\n\t\t\tnew Map([\n\t\t\t\t[\"Length1\", colorProfile.byteLength.toString()],\n\t\t\t\t[\"N\", \"3\"],\n\t\t\t]),\n\t\t\tawait this.deflater.deflate(colorProfile),\n\t\t\tPdfStreamEncoding.FLATE,\n\t\t\t\"DEST_OUTPUT_PROFILE\",\n\t\t)\n\t\t// Tuta logo as raster image\n\t\tthis.createStreamObject(\n\t\t\tnew Map([\n\t\t\t\t[\"Name\", \"/Im1\"],\n\t\t\t\t[\"Type\", \"/XObject\"],\n\t\t\t\t[\"Subtype\", \"/Image\"],\n\t\t\t\t[\"Width\", \"600\"],\n\t\t\t\t[\"Height\", \"209\"],\n\t\t\t\t[\"BitsPerComponent\", \"8\"],\n\t\t\t\t[\"ColorSpace\", \"/DeviceRGB\"],\n\t\t\t]),\n\t\t\tnew Uint8Array(tutaImage),\n\t\t\tPdfStreamEncoding.DCT,\n\t\t\t\"IMG_TUTA_LOGO\",\n\t\t)\n\t\t// Metadata\n\t\tconst todayDate = new Date()\n\t\tconst metaData = PDF_METADATA.replace(\"{slotCreateDate}\", todayDate.toISOString()).replace(\"{slotModifyDate}\", todayDate.toISOString())\n\t\tthis.createStreamObject(\n\t\t\tnew Map([\n\t\t\t\t[\"Type\", \"/Metadata\"],\n\t\t\t\t[\"Subtype\", \"/XML\"],\n\t\t\t]),\n\t\t\tnew Uint8Array(this.textEncoder.encode(metaData)),\n\t\t\tPdfStreamEncoding.NONE,\n\t\t\t\"METADATA\",\n\t\t)\n\t}\n\n\t/**\n\t * Writes the PDF file and return its entire data as a Uint8Array\n\t * @pre baseUrl must be defined\n\t */\n\tasync writePdfFile(): Promise<Uint8Array> {\n\t\t// Set up the objects requiring external resources last\n\t\tawait this.setupResourceObjects()\n\n\t\t// Encode all components of the file into uint8arrays for writing\n\t\tconst encodedObjects: Uint8Array[] = []\n\t\tencodedObjects.push(PDF_HEADER) // Header is written at the top of the file\n\t\tfor (const obj of this.pdfObjectList) {\n\t\t\t// Body includes all objects and streams\n\t\t\tobj.setResolvedDictionary(this.resolveReferences(obj.getDictionary())) // With all objects present, resolve all their references\n\t\t\tconst encodedObject = obj.encodeToUInt8Array(this.textEncoder) // Encode the object to uint8array\n\t\t\tthis.calculateBytePositions(obj, encodedObject) // Calculate the objects byte-position by considering its encoded form\n\t\t\tencodedObjects.push(encodedObject)\n\t\t}\n\t\tencodedObjects.push(this.textEncoder.encode(this.makeXRefTable())) // Make xref table which requires all object's calculated byte-positions\n\t\tencodedObjects.push(this.textEncoder.encode(this.makeTrailer(Date.now().toString()))) // Make trailer\n\n\t\treturn concat(...encodedObjects)\n\t}\n}\n"]}