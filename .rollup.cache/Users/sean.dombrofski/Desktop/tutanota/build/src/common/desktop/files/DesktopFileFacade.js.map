{"version":3,"file":"DesktopFileFacade.js","sourceRoot":"","sources":["../../../../../src/common/desktop/files/DesktopFileFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { FileFacade } from \"../../native/common/generatedipc/FileFacade.js\"\nimport { DownloadTaskResponse } from \"../../native/common/generatedipc/DownloadTaskResponse.js\"\nimport { IpcClientRect } from \"../../native/common/generatedipc/IpcClientRect.js\"\nimport { ElectronExports, FsExports } from \"../ElectronExportTypes.js\"\nimport { UploadTaskResponse } from \"../../native/common/generatedipc/UploadTaskResponse.js\"\nimport { DataFile } from \"../../api/common/DataFile.js\"\nimport { FileUri } from \"../../native/common/FileApp.js\"\nimport path from \"node:path\"\nimport { ApplicationWindow } from \"../ApplicationWindow.js\"\nimport { sha256Hash } from \"@tutao/tutanota-crypto\"\nimport { assertNotNull, splitUint8ArrayInChunks, stringToUtf8Uint8Array, uint8ArrayToBase64, uint8ArrayToHex } from \"@tutao/tutanota-utils\"\nimport { looksExecutable, nonClobberingFilename } from \"../PathUtils.js\"\nimport url from \"node:url\"\nimport FsModule from \"node:fs\"\nimport { Buffer } from \"node:buffer\"\nimport { default as stream } from \"node:stream\"\nimport type { ReadableStream } from \"node:stream/web\"\nimport { FileOpenError } from \"../../api/common/error/FileOpenError.js\"\nimport { lang } from \"../../misc/LanguageViewModel.js\"\nimport { log } from \"../DesktopLog.js\"\nimport { WriteStream } from \"fs-extra\"\nimport { BuildConfigKey, DesktopConfigKey } from \"../config/ConfigKeys.js\"\nimport { CancelledError } from \"../../api/common/error/CancelledError.js\"\nimport { DesktopConfig } from \"../config/DesktopConfig.js\"\nimport { DateProvider } from \"../../api/common/DateProvider.js\"\nimport { TempFs } from \"./TempFs.js\"\nimport { HttpMethod } from \"../../api/common/EntityFunctions\"\nimport { FetchImpl } from \"../net/NetAgent\"\nimport { OpenDialogOptions } from \"electron\"\n\nconst TAG = \"[DesktopFileFacade]\"\n\nexport class DesktopFileFacade implements FileFacade {\n\t/** We don't want to spam opening file manager all the time so we throttle it. This field is set to the last time we opened it. */\n\tprivate lastOpenedFileManagerAt: number | null\n\n\tconstructor(\n\t\tprivate readonly win: ApplicationWindow,\n\t\tprivate readonly conf: DesktopConfig,\n\t\tprivate readonly dateProvider: DateProvider,\n\t\tprivate readonly fetch: FetchImpl,\n\t\tprivate readonly electron: ElectronExports,\n\t\tprivate readonly tfs: TempFs,\n\t\tprivate readonly fs: FsExports,\n\t) {\n\t\tthis.lastOpenedFileManagerAt = null\n\t}\n\n\tclearFileData(): Promise<void> {\n\t\tthis.tfs.clear()\n\t\treturn Promise.resolve()\n\t}\n\n\tasync deleteFile(filename: string): Promise<void> {\n\t\treturn await this.fs.promises.unlink(filename)\n\t}\n\n\tasync download(sourceUrl: string, fileName: string, headers: Record<string, string>): Promise<DownloadTaskResponse> {\n\t\tconst { status, headers: headersIncoming, body } = await this.fetch(sourceUrl, { method: \"GET\", headers })\n\t\tlet encryptedFilePath\n\t\tif (status == 200 && body != null) {\n\t\t\tconst downloadDirectory = await this.tfs.ensureEncryptedDir()\n\t\t\tencryptedFilePath = path.join(downloadDirectory, fileName)\n\t\t\tconst readable: stream.Readable = bodyToReadable(body)\n\t\t\tawait this.pipeIntoFile(readable, encryptedFilePath)\n\t\t} else {\n\t\t\tencryptedFilePath = null\n\t\t}\n\n\t\tconst result = {\n\t\t\tstatusCode: status,\n\t\t\tencryptedFileUri: encryptedFilePath,\n\t\t\terrorId: getHttpHeader(headersIncoming, \"error-id\"),\n\t\t\tprecondition: getHttpHeader(headersIncoming, \"precondition\"),\n\t\t\tsuspensionTime: getHttpHeader(headersIncoming, \"suspension-time\") ?? getHttpHeader(headersIncoming, \"retry-after\"),\n\t\t}\n\n\t\tlog.info(TAG, \"Download finished\", result.statusCode, result.suspensionTime)\n\t\treturn result\n\t}\n\n\tprivate async pipeIntoFile(response: stream.Readable, encryptedFilePath: string) {\n\t\tconst fileStream: WriteStream = this.fs.createWriteStream(encryptedFilePath, { emitClose: true })\n\t\ttry {\n\t\t\tawait pipeStream(response, fileStream)\n\t\t\tawait closeFileStream(fileStream)\n\t\t} catch (e) {\n\t\t\t// Close first, delete second\n\t\t\t// Also yes, we do need to close it manually:\n\t\t\t// > One important caveat is that if the Readable stream emits an error during processing, the Writable destination is not closed automatically.\n\t\t\t// > If an error occurs, it will be necessary to manually close each stream in order to prevent memory leaks.\n\t\t\t// see https://nodejs.org/api/stream.html#readablepipedestination-options\n\t\t\tawait closeFileStream(fileStream)\n\t\t\tawait this.fs.promises.unlink(encryptedFilePath)\n\t\t\tthrow e\n\t\t}\n\t}\n\n\tasync getMimeType(file: string): Promise<string> {\n\t\treturn await getMimeTypeForFile(file)\n\t}\n\n\tasync getName(file: string): Promise<string> {\n\t\treturn path.basename(file)\n\t}\n\n\tasync getSize(fileUri: string): Promise<number> {\n\t\tconst stats = await this.fs.promises.stat(fileUri)\n\t\treturn stats.size\n\t}\n\n\tasync hashFile(fileUri: string): Promise<string> {\n\t\tconst data = await this.fs.promises.readFile(fileUri)\n\t\tconst checksum = sha256Hash(data).slice(0, 6)\n\t\treturn uint8ArrayToBase64(checksum)\n\t}\n\n\tasync joinFiles(filename: string, files: Array<string>): Promise<string> {\n\t\tconst downloadDirectory = await this.tfs.ensureUnencrytpedDir()\n\n\t\tconst filesInDirectory = await this.fs.promises.readdir(downloadDirectory)\n\t\tconst newFilename = nonClobberingFilename(filesInDirectory, filename)\n\t\tconst fileUri = path.join(downloadDirectory, newFilename)\n\t\tconst outStream = this.fs.createWriteStream(fileUri, { autoClose: false })\n\n\t\tfor (const infile of files) {\n\t\t\tawait new Promise<void>((resolve, reject) => {\n\t\t\t\tconst readStream = this.fs.createReadStream(infile)\n\t\t\t\treadStream.on(\"end\", resolve)\n\t\t\t\treadStream.on(\"error\", reject)\n\t\t\t\treadStream.pipe(outStream, { end: false })\n\t\t\t})\n\t\t}\n\t\tawait closeFileStream(outStream)\n\t\treturn fileUri\n\t}\n\n\topen(location: string /* , mimeType: string omitted */): Promise<void> {\n\t\tconst tryOpen = () =>\n\t\t\tthis.electron.shell\n\t\t\t\t.openPath(location) // may resolve with \"\" or an error message\n\t\t\t\t.catch(() => \"failed to open path.\")\n\t\t\t\t.then((errMsg) => (errMsg === \"\" ? Promise.resolve() : Promise.reject(new FileOpenError(\"Could not open \" + location + \", \" + errMsg))))\n\n\t\t// only windows will happily execute a just downloaded program\n\t\tif (process.platform === \"win32\" && looksExecutable(location)) {\n\t\t\treturn this.electron.dialog\n\t\t\t\t.showMessageBox({\n\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\tbuttons: [lang.get(\"yes_label\"), lang.get(\"no_label\")],\n\t\t\t\t\ttitle: lang.get(\"executableOpen_label\"),\n\t\t\t\t\tmessage: lang.get(\"executableOpen_msg\"),\n\t\t\t\t\tdefaultId: 1, // default button\n\t\t\t\t})\n\t\t\t\t.then(({ response }) => {\n\t\t\t\t\tif (response === 0) {\n\t\t\t\t\t\treturn tryOpen()\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Promise.resolve()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t} else {\n\t\t\treturn tryOpen()\n\t\t}\n\t}\n\n\tasync openFileChooser(boundingRect: IpcClientRect, filter: ReadonlyArray<string> | null): Promise<Array<string>> {\n\t\tconst opts: OpenDialogOptions = { properties: [\"openFile\", \"multiSelections\"] }\n\t\tif (filter != null) {\n\t\t\topts.filters = [{ name: \"Filter\", extensions: filter.slice() }]\n\t\t}\n\t\tconst { filePaths } = await this.electron.dialog.showOpenDialog(this.win._browserWindow, opts)\n\t\treturn filePaths\n\t}\n\n\topenFolderChooser(): Promise<string | null> {\n\t\t// open folder dialog\n\t\treturn this.electron.dialog\n\t\t\t.showOpenDialog(this.win._browserWindow, {\n\t\t\t\tproperties: [\"openDirectory\"],\n\t\t\t})\n\t\t\t.then(({ filePaths }) => filePaths[0] ?? null)\n\t}\n\n\tasync putFileIntoDownloadsFolder(localFileUri: string, fileNameToUse: string): Promise<string> {\n\t\tconst savePath = await this.pickSavePath(fileNameToUse)\n\t\tawait this.fs.promises.mkdir(path.dirname(savePath), {\n\t\t\trecursive: true,\n\t\t})\n\t\tawait this.fs.promises.copyFile(localFileUri, savePath)\n\t\tawait this.showInFileExplorer(savePath)\n\t\treturn savePath\n\t}\n\n\tasync splitFile(fileUri: string, maxChunkSizeBytes: number): Promise<Array<string>> {\n\t\tconst tempDir = await this.tfs.ensureUnencrytpedDir()\n\t\tconst fullBytes = await this.fs.promises.readFile(fileUri)\n\t\tconst chunks = splitUint8ArrayInChunks(maxChunkSizeBytes, fullBytes)\n\t\t// this could just be randomized, we don't seem to care about the blob file names\n\t\tconst filenameHash = uint8ArrayToHex(sha256Hash(stringToUtf8Uint8Array(fileUri)))\n\t\tconst chunkPaths: string[] = []\n\n\t\tfor (let i = 0; i < chunks.length; i++) {\n\t\t\tconst chunk = chunks[i]\n\t\t\tconst fileName = `${filenameHash}.${i}.blob`\n\t\t\tconst chunkPath = path.join(tempDir, fileName)\n\t\t\tawait this.fs.promises.writeFile(chunkPath, chunk)\n\t\t\tchunkPaths.push(chunkPath)\n\t\t}\n\n\t\treturn chunkPaths\n\t}\n\n\tasync upload(fileUri: string, targetUrl: string, method: HttpMethod, headers: Record<string, string>): Promise<UploadTaskResponse> {\n\t\tconst fileStream = this.fs.createReadStream(fileUri)\n\t\tconst stat = await this.fs.promises.stat(fileUri)\n\t\theaders[\"Content-Length\"] = `${stat.size}`\n\t\tconst response = await this.fetch(targetUrl, { method, headers, body: fileStream })\n\n\t\tlet responseBody: Uint8Array\n\t\tif ((response.status == 200 || response.status == 201) && response.body != null) {\n\t\t\tconst readable: stream.Readable = bodyToReadable(response.body)\n\t\t\tresponseBody = await readStreamToBuffer(readable)\n\t\t} else {\n\t\t\t// this is questionable, should probably change the type\n\t\t\tresponseBody = new Uint8Array([])\n\t\t}\n\t\treturn {\n\t\t\tstatusCode: assertNotNull(response.status),\n\t\t\terrorId: getHttpHeader(response.headers, \"error-id\"),\n\t\t\tprecondition: getHttpHeader(response.headers, \"precondition\"),\n\t\t\tsuspensionTime: getHttpHeader(response.headers, \"suspension-time\") ?? getHttpHeader(response.headers, \"retry-after\"),\n\t\t\tresponseBody,\n\t\t}\n\t}\n\n\t// this is only used to write decrypted data into our tmp\n\tasync writeDataFile(file: DataFile): Promise<string> {\n\t\treturn await this.tfs.writeToDisk(file.data, \"decrypted\")\n\t}\n\n\tasync writeDataFileToDirectory(file: DataFile, directory: string): Promise<string> {\n\t\tconst filePath = path.join(directory, file.name)\n\t\tawait this.fs.promises.writeFile(filePath, file.data)\n\t\treturn filePath\n\t}\n\n\t// this is used to read unencrypted data from arbitrary locations\n\tasync readDataFile(uriOrPath: FileUri): Promise<DataFile | null> {\n\t\ttry {\n\t\t\turiOrPath = url.fileURLToPath(uriOrPath)\n\t\t} catch (e) {\n\t\t\t// the thing already was a path, or at least not an URI\n\t\t}\n\t\tconst name = path.basename(uriOrPath)\n\t\ttry {\n\t\t\tconst [data, mimeType] = await Promise.all([this.fs.promises.readFile(uriOrPath), this.getMimeType(uriOrPath)])\n\t\t\tif (data == null) return null\n\t\t\treturn {\n\t\t\t\t_type: \"DataFile\",\n\t\t\t\tdata,\n\t\t\t\tname,\n\t\t\t\tmimeType,\n\t\t\t\tsize: data.length,\n\t\t\t\tid: undefined,\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn null\n\t\t}\n\t}\n\n\t/** select a non-colliding name in the configured downloadPath, preferably with the given file name\n\t * public for testing */\n\tasync pickSavePath(filename: string): Promise<string> {\n\t\tconst defaultDownloadPath = await this.conf.getVar(DesktopConfigKey.defaultDownloadPath)\n\n\t\tif (defaultDownloadPath != null) {\n\t\t\tconst fileName = path.basename(filename)\n\t\t\treturn path.join(defaultDownloadPath, nonClobberingFilename(await this.fs.promises.readdir(defaultDownloadPath), fileName))\n\t\t} else {\n\t\t\tconst { canceled, filePath } = await this.electron.dialog.showSaveDialog({\n\t\t\t\tdefaultPath: path.join(this.electron.app.getPath(\"downloads\"), filename),\n\t\t\t})\n\n\t\t\tif (canceled) {\n\t\t\t\tthrow new CancelledError(\"Path selection cancelled\")\n\t\t\t} else {\n\t\t\t\treturn assertNotNull(filePath)\n\t\t\t}\n\t\t}\n\t}\n\n\t/** public for testing */\n\tasync showInFileExplorer(savePath: string): Promise<void> {\n\t\t// See doc for _lastOpenedFileManagerAt on why we do this throttling.\n\t\tconst lastOpenedFileManagerAt = this.lastOpenedFileManagerAt\n\t\tconst fileManagerTimeout = await this.conf.getConst(BuildConfigKey.fileManagerTimeout)\n\n\t\tif (lastOpenedFileManagerAt == null || this.dateProvider.now() - lastOpenedFileManagerAt > fileManagerTimeout) {\n\t\t\tthis.lastOpenedFileManagerAt = this.dateProvider.now()\n\t\t\tawait this.electron.shell.openPath(path.dirname(savePath))\n\t\t}\n\t}\n}\n\nexport async function getMimeTypeForFile(file: string): Promise<string> {\n\tconst ext = path.extname(file).slice(1)\n\tconst { mimes } = await import(\"../flat-mimes.js\")\n\tconst candidates = mimes[ext]\n\t// sometimes there are multiple options, but we'll take the first and reorder if issues arise.\n\treturn candidates != null ? candidates[0] : \"application/octet-stream\"\n}\n\nfunction closeFileStream(stream: FsModule.WriteStream): Promise<void> {\n\treturn new Promise((resolve) => {\n\t\tstream.on(\"close\", resolve)\n\t\tstream.close()\n\t})\n}\n\nexport async function readStreamToBuffer(stream: stream.Readable): Promise<Uint8Array> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst data: Buffer[] = []\n\n\t\tstream.on(\"data\", (chunk) => {\n\t\t\tdata.push(chunk as Buffer)\n\t\t})\n\n\t\tstream.on(\"end\", () => {\n\t\t\tresolve(Buffer.concat(data))\n\t\t})\n\n\t\tstream.on(\"error\", (err) => {\n\t\t\treject(err)\n\t\t})\n\t})\n}\n\nfunction getHttpHeader(headers: Headers, name: string): string | null {\n\t// All headers are in lowercase. Lowercase them just to be sure\n\treturn headers.get(name.toLowerCase())\n}\n\nfunction pipeStream(stream: stream.Readable, into: stream.Writable): Promise<void> {\n\treturn new Promise((resolve, reject) => {\n\t\tstream.on(\"error\", reject)\n\t\tstream.pipe(into)\n\t\tinto.on(\"finish\", resolve)\n\t\tinto.on(\"error\", reject)\n\t})\n}\n\nfunction bodyToReadable(body: ReadableStream<unknown>): stream.Readable {\n\t// https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/65542\n\treturn stream.Readable.fromWeb(body)\n}\n"]}