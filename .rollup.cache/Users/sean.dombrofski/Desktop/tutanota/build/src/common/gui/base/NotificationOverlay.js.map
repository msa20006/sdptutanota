{"version":3,"file":"NotificationOverlay.js","sourceRoot":"","sources":["../../../../../src/common/gui/base/NotificationOverlay.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Children, Component, Vnode } from \"mithril\"\nimport { px } from \"../size\"\nimport { DefaultAnimationTime } from \"../animation/Animations\"\nimport { displayOverlay } from \"./Overlay\"\nimport type { ButtonAttrs } from \"./Button.js\"\nimport { Button, ButtonType } from \"./Button.js\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { ClickHandler } from \"./GuiUtils\"\n\nassertMainOrNode()\n\ninterface NotificationOverlayAttrs {\n\tmessage: Component\n\tbuttons: Array<ButtonAttrs>\n}\n\ninterface QueueItem extends NotificationOverlayAttrs {\n\tcloseButtonAttrs: Partial<ButtonAttrs>\n}\n\nconst notificationQueue: QueueItem[] = []\nlet currentAnimationTimeout: TimeoutID | null = null\n\nclass NotificationOverlay implements Component<NotificationOverlayAttrs> {\n\tview(vnode: Vnode<NotificationOverlayAttrs>): Children {\n\t\treturn m(\".notification-overlay-content.flex.flex-column.flex-space-between\", [\n\t\t\tm(vnode.attrs.message),\n\t\t\tm(\n\t\t\t\t\".flex.justify-end.flex-wrap\",\n\t\t\t\tvnode.attrs.buttons.map((b) => m(Button, b)),\n\t\t\t),\n\t\t])\n\t}\n}\n\n/**\n * @param message What will be shown inside notification\n * @param closeButtonAttrs To define the close button in the notification\n * @param buttons The postpone button is automatically added and does not have to be passed from outside\n */\n\nexport function show(message: Component, closeButtonAttrs: Partial<ButtonAttrs>, buttons: Array<ButtonAttrs>) {\n\tnotificationQueue.push({\n\t\tmessage,\n\t\tbuttons,\n\t\tcloseButtonAttrs,\n\t})\n\n\tif (notificationQueue.length > 1) {\n\t\t// another notification is already visible. Next notification will be shown when closing current notification\n\t\treturn\n\t}\n\n\tshowNextNotification()\n}\n\nfunction showNextNotification() {\n\tconst { message, buttons, closeButtonAttrs } = notificationQueue[0]\n\tcurrentAnimationTimeout = null\n\tconst width = window.innerWidth\n\tconst margin = (width - Math.min(400, width)) / 2\n\tconst allButtons = buttons.slice()\n\tconst overlayRect = {\n\t\twidth: \"fit-content\",\n\t\ttop: px(0),\n\t\tleft: px(0),\n\t\tright: px(0),\n\t}\n\tconst closeFunction = displayOverlay(\n\t\t() => overlayRect,\n\t\t{\n\t\t\tview: () =>\n\t\t\t\tm(NotificationOverlay, {\n\t\t\t\t\tmessage,\n\t\t\t\t\tbuttons: allButtons,\n\t\t\t\t}),\n\t\t},\n\t\t\"slide-top\",\n\t\tundefined,\n\t\t\"dropdown-shadow center-h notification-min-width\",\n\t)\n\n\tconst closeAndOpenNext = () => {\n\t\tif (currentAnimationTimeout !== null) {\n\t\t\treturn\n\t\t}\n\n\t\tcloseFunction()\n\t\tnotificationQueue.shift()\n\n\t\tif (notificationQueue.length > 0) {\n\t\t\tcurrentAnimationTimeout = setTimeout(showNextNotification, 2 * DefaultAnimationTime)\n\t\t}\n\t}\n\n\t// close the notification by default when pressing any button\n\tfor (const b of allButtons) {\n\t\tconst originClickHandler: ClickHandler | undefined = b.click\n\n\t\tb.click = (e, dom) => {\n\t\t\toriginClickHandler?.(e, dom)\n\t\t\tcloseAndOpenNext()\n\t\t}\n\t}\n\t// add the postpone button\n\tconst closeFinalAttrs: ButtonAttrs = Object.assign(\n\t\t{},\n\t\t{\n\t\t\tlabel: \"close_alt\",\n\t\t\tclick: closeAndOpenNext,\n\t\t\ttype: ButtonType.Secondary,\n\t\t},\n\t\tcloseButtonAttrs,\n\t)\n\n\tcloseFinalAttrs.click = (e, dom) => {\n\t\tcloseButtonAttrs.click?.(e, dom)\n\t\tcloseAndOpenNext()\n\t}\n\n\tallButtons.unshift(closeFinalAttrs)\n\tm.redraw()\n}\n"]}