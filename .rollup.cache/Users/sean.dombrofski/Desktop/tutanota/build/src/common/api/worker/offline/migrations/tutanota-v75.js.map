{"version":3,"file":"tutanota-v75.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/offline/migrations/tutanota-v75.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,qBAAqB,EAAE,MAAM,0BAA0B,CAAA;AAChE,OAAO,EAAE,4BAA4B,EAAE,MAAM,wCAAwC,CAAA;AACrF,OAAO,EAAE,oBAAoB,EAAE,gBAAgB,EAAE,MAAM,mCAAmC,CAAA;AAC1F,OAAO,EAAE,SAAS,EAAE,MAAM,sCAAsC,CAAA;AAChE,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,sCAAsC,CAAA;AAE9E,MAAM,CAAC,MAAM,UAAU,GAAqB;IAC3C,GAAG,EAAE,UAAU;IACf,OAAO,EAAE,EAAE;IACX,KAAK,CAAC,OAAO,CAAC,OAAuB;QACpC,MAAM,qBAAqB,CAAC,OAAO,EAAE,4BAA4B,CAAC,CAAA;QAClE,qEAAqE;QACrE,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAA;QAC3E,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;YACpC,IAAK,SAAiB,CAAC,SAAS,KAAK,SAAS,CAAC,IAAI;gBAAE,SAAQ;YAC7D,MAAM,OAAO,CAAC,cAAc,CAAC,gBAAgB,EAAE,SAAS,CAAC,SAAS,CAAC,EAAE,YAAY,CAAC,SAAS,CAAC,CAAC,CAAA;QAC9F,CAAC;QACD,MAAM,qBAAqB,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAA;IAC3D,CAAC;CACD,CAAA","sourcesContent":["import { OfflineMigration } from \"../OfflineStorageMigrator.js\"\nimport { OfflineStorage } from \"../OfflineStorage.js\"\nimport { deleteInstancesOfType } from \"../StandardMigrations.js\"\nimport { UserSettingsGroupRootTypeRef } from \"../../../entities/tutanota/TypeRefs.js\"\nimport { AuditLogEntryTypeRef, GroupInfoTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport { GroupType } from \"../../../common/TutanotaConstants.js\"\nimport { getElementId, getListId } from \"../../../common/utils/EntityUtils.js\"\n\nexport const tutanota75: OfflineMigration = {\n\tapp: \"tutanota\",\n\tversion: 75,\n\tasync migrate(storage: OfflineStorage) {\n\t\tawait deleteInstancesOfType(storage, UserSettingsGroupRootTypeRef)\n\t\t// required to throw the LoginIncompleteError when trying async login\n\t\tconst groupInfos = await storage.getRawListElementsOfType(GroupInfoTypeRef)\n\t\tfor (const groupInfo of groupInfos) {\n\t\t\tif ((groupInfo as any).groupType !== GroupType.User) continue\n\t\t\tawait storage.deleteIfExists(GroupInfoTypeRef, getListId(groupInfo), getElementId(groupInfo))\n\t\t}\n\t\tawait deleteInstancesOfType(storage, AuditLogEntryTypeRef)\n\t},\n}\n"]}