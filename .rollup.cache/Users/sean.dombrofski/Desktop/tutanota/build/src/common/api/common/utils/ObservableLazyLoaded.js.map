{"version":3,"file":"ObservableLazyLoaded.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/utils/ObservableLazyLoaded.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,UAAU,EAAE,MAAM,uBAAuB,CAAA;AAE7D,OAAO,MAAM,MAAM,gBAAgB,CAAA;AAEnC,MAAM,OAAO,oBAAoB;IAIyB;IAHjD,UAAU,CAAe;IACxB,MAAM,GAAc,MAAM,EAAE,CAAA;IAErC,YAAY,YAA0B,EAAmB,YAAe;QAAf,iBAAY,GAAZ,YAAY,CAAG;QACvE,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAI,KAAK,IAAI,EAAE;YAC9C,MAAM,KAAK,GAAG,MAAM,YAAY,EAAE,CAAA;YAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;YAClB,OAAO,KAAK,CAAA;QACb,CAAC,EAAE,YAAY,CAAC,CAAA;QAEhB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;IAC1B,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAA;IAClC,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAA;IAClC,CAAC;IAED,SAAS;QACR,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAA;IACnC,CAAC;IAED,mGAAmG;IACnG,KAAK,CAAC,MAAM;QACX,IAAI,CAAC;YACJ,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAA;QACtC,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAA;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;YAC9B,OAAO,IAAI,CAAC,YAAY,CAAA;QACzB,CAAC;IACF,CAAC;IAED,KAAK;QACJ,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAA;QACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;IAC/B,CAAC;CACD","sourcesContent":["import { lazyAsync, LazyLoaded } from \"@tutao/tutanota-utils\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\n\nexport class ObservableLazyLoaded<T> {\n\tprivate lazyLoaded: LazyLoaded<T>\n\treadonly stream: Stream<T> = stream()\n\n\tconstructor(loadFunction: lazyAsync<T>, private readonly defaultValue: T) {\n\t\tthis.lazyLoaded = new LazyLoaded<T>(async () => {\n\t\t\tconst value = await loadFunction()\n\t\t\tthis.stream(value)\n\t\t\treturn value\n\t\t}, defaultValue)\n\n\t\tthis.stream(defaultValue)\n\t}\n\n\tgetAsync(): Promise<T> {\n\t\treturn this.lazyLoaded.getAsync()\n\t}\n\n\tisLoaded(): boolean {\n\t\treturn this.lazyLoaded.isLoaded()\n\t}\n\n\tgetLoaded(): T {\n\t\treturn this.lazyLoaded.getLoaded()\n\t}\n\n\t/** reset & reload the inner lazyLoaded without an observable default state unless loading fails */\n\tasync reload(): Promise<T> {\n\t\ttry {\n\t\t\treturn await this.lazyLoaded.reload()\n\t\t} catch (e) {\n\t\t\tthis.lazyLoaded.reset()\n\t\t\tthis.stream(this.defaultValue)\n\t\t\treturn this.defaultValue\n\t\t}\n\t}\n\n\treset() {\n\t\tthis.lazyLoaded.reset()\n\t\tthis.stream(this.defaultValue)\n\t}\n}\n"]}