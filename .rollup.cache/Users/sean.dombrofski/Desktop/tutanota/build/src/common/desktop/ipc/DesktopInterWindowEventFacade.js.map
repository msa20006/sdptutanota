{"version":3,"file":"DesktopInterWindowEventFacade.js","sourceRoot":"","sources":["../../../../../src/common/desktop/ipc/DesktopInterWindowEventFacade.ts"],"names":[],"mappings":"AAIA;;GAEG;AACH,MAAM,OAAO,6BAA6B;IACZ;IAA4C;IAAzE,YAA6B,MAAyB,EAAmB,EAAiB;QAA7D,WAAM,GAAN,MAAM,CAAmB;QAAmB,OAAE,GAAF,EAAE,CAAe;IAAG,CAAC;IAE9F,KAAK,CAAC,wBAAwB,CAAC,MAAc;QAC5C,MAAM,IAAI,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC,CAAA;IACrG,CAAC;IAED,KAAK,CAAC,kBAAkB;QACvB,MAAM,IAAI,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,kBAAkB,EAAE,CAAC,CAAA;IACzF,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,CAA8C;QAC3E,MAAM,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QACrE,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC5B,MAAM,CAAC,CAAC,KAAK,CAAC,CAAA;QACf,CAAC;QACD,OAAM;IACP,CAAC;CACD","sourcesContent":["import { InterWindowEventFacade } from \"../../native/common/generatedipc/InterWindowEventFacade.js\"\nimport { ApplicationWindow } from \"../ApplicationWindow.js\"\nimport { WindowManager } from \"../DesktopWindowManager.js\"\n\n/**\n * this receives inter window events and dispatches them to all other windows\n */\nexport class DesktopInterWindowEventFacade implements InterWindowEventFacade {\n\tconstructor(private readonly window: ApplicationWindow, private readonly wm: WindowManager) {}\n\n\tasync localUserDataInvalidated(userId: string): Promise<void> {\n\t\tawait this.executeOnOthers((other) => other.interWindowEventSender.localUserDataInvalidated(userId))\n\t}\n\n\tasync reloadDeviceConfig(): Promise<void> {\n\t\tawait this.executeOnOthers((other) => other.interWindowEventSender.reloadDeviceConfig())\n\t}\n\n\tprivate async executeOnOthers(f: (other: ApplicationWindow) => Promise<void>): Promise<void> {\n\t\tconst others = this.wm.getAll().filter((w) => w.id != this.window.id)\n\t\tfor (const other of others) {\n\t\t\tawait f(other)\n\t\t}\n\t\treturn\n\t}\n}\n"]}