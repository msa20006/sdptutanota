{"version":3,"file":"DesktopExportFacade.js","sourceRoot":"","sources":["../../../../../src/common/desktop/export/DesktopExportFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExportFacade } from \"../../native/common/generatedipc/ExportFacade.js\"\nimport { createDataFile, DataFile } from \"../../api/common/DataFile.js\"\nimport { fileExists } from \"../PathUtils.js\"\nimport path from \"node:path\"\nimport { DesktopConfigKey } from \"../config/ConfigKeys.js\"\nimport { DesktopConfig } from \"../config/DesktopConfig.js\"\nimport { NativeImage } from \"electron\"\nimport { ApplicationWindow } from \"../ApplicationWindow.js\"\nimport { Attachment, Email, MessageEditorFormat } from \"@tutao/oxmsg\"\nimport { sanitizeFilename } from \"../../api/common/utils/FileUtils.js\"\nimport type * as FsModule from \"node:fs\"\nimport { promises as fs } from \"node:fs\"\nimport { TempFs } from \"../files/TempFs.js\"\nimport { MailBundle, MailExportMode } from \"../../mailFunctionality/SharedMailUtils.js\"\nimport { ElectronExports } from \"../ElectronExportTypes.js\"\nimport { CancelledError } from \"../../api/common/error/CancelledError.js\"\nimport { ProgrammingError } from \"../../api/common/error/ProgrammingError.js\"\nimport { generateExportFileName, mailToEmlFile } from \"../../../mail-app/mail/export/emlUtils.js\"\nimport { MailboxExportPersistence, MailboxExportState } from \"./MailboxExportPersistence.js\"\nimport { DateProvider } from \"../../api/common/DateProvider.js\"\nimport { formatSortableDate } from \"@tutao/tutanota-utils\"\nimport { FileOpenError } from \"../../api/common/error/FileOpenError.js\"\nimport { ExportError, ExportErrorReason } from \"../../api/common/error/ExportError\"\nimport { DesktopExportLock, LockResult } from \"./DesktopExportLock\"\nimport { elementIdPart } from \"../../api/common/utils/EntityUtils\"\n\nconst EXPORT_DIR = \"export\"\n\nexport class DesktopExportFacade implements ExportFacade {\n\tconstructor(\n\t\tprivate readonly tfs: TempFs,\n\t\tprivate readonly electron: ElectronExports,\n\t\tprivate readonly conf: DesktopConfig,\n\t\tprivate readonly window: ApplicationWindow,\n\t\tprivate readonly dragIcons: Record<MailExportMode, NativeImage>,\n\t\tprivate readonly mailboxExportPersistence: MailboxExportPersistence,\n\t\tprivate readonly fs: typeof FsModule,\n\t\tprivate readonly dateProvider: DateProvider,\n\t\tprivate readonly desktopExportLock: DesktopExportLock,\n\t) {}\n\n\tasync checkFileExistsInExportDir(fileName: string): Promise<boolean> {\n\t\treturn fileExists(path.join(await this.getExportDirectoryPath(), fileName))\n\t}\n\n\tasync mailToMsg(bundle: MailBundle, fileName: string): Promise<DataFile> {\n\t\tconst subject = `[Tuta Mail] ${bundle.subject}`\n\t\tconst email = new Email(bundle.isDraft, bundle.isRead)\n\t\t\t.subject(subject)\n\t\t\t.bodyHtml(bundle.body)\n\t\t\t.bodyFormat(MessageEditorFormat.EDITOR_FORMAT_HTML)\n\t\t\t.sender(bundle.sender.address, bundle.sender.name)\n\t\t\t.tos(bundle.to)\n\t\t\t.ccs(bundle.cc)\n\t\t\t.bccs(bundle.bcc)\n\t\t\t.replyTos(bundle.replyTo)\n\t\t\t.sentOn(new Date(bundle.sentOn))\n\t\t\t.receivedOn(new Date(bundle.receivedOn))\n\t\t\t.headers(bundle.headers || \"\")\n\n\t\tfor (let attachment of bundle.attachments) {\n\t\t\t// When the MailBundle gets passed over via the IPC it loses some of it's type information. the Uint8Arrays stored in the\n\t\t\t// attachment DataFiles cease to be Uint8Arrays and just because regular arrays, thus we have to remake them here.\n\t\t\t// Oxmsg currently doesn't accept regular arrays for binary data, only Uint8Arrays, strings and booleans\n\t\t\t// we could change the Oxmsg behaviour, it's kind of nice for it to be strict though.\n\t\t\temail.attach(new Attachment(new Uint8Array(attachment.data), attachment.name, attachment.cid || \"\"))\n\t\t}\n\n\t\treturn createDataFile(fileName, \"application/vnd.ms-outlook\", email.msg())\n\t}\n\n\tasync saveToExportDir(file: DataFile): Promise<void> {\n\t\tconst exportDir = await this.getExportDirectoryPath()\n\t\tconst fullPath = path.join(exportDir, sanitizeFilename(file.name))\n\t\treturn fs.writeFile(fullPath, file.data)\n\t}\n\n\tasync startNativeDrag(fileNames: ReadonlyArray<string>): Promise<void> {\n\t\tconst exportDir = await this.getExportDirectoryPath()\n\t\tconst files = fileNames.map((fileName) => path.join(exportDir, fileName)).filter(fileExists)\n\t\tconst exportMode: MailExportMode = await this.conf.getVar(DesktopConfigKey.mailExportMode)\n\t\tconst icon = this.dragIcons[exportMode]\n\t\tthis.window._browserWindow.webContents.startDrag({\n\t\t\tfile: \"\",\n\t\t\tfiles,\n\t\t\ticon,\n\t\t})\n\t}\n\n\tasync startMailboxExport(userId: string, mailboxId: string, mailBagId: string, mailId: string): Promise<void> {\n\t\tif (this.desktopExportLock.acquireLock(userId) === LockResult.AlreadyLocked) {\n\t\t\tthrow new ExportError(`Export is locked for user: ${userId}`, ExportErrorReason.LockedForUser)\n\t\t}\n\t\tconst previousExportState = await this.mailboxExportPersistence.getStateForUser(userId)\n\t\tif (previousExportState != null && previousExportState.type !== \"finished\") {\n\t\t\tthrow new ExportError(`Export is already running for user: ${userId}`, ExportErrorReason.RunningForUser)\n\t\t}\n\t\tconst directory = await this.electron.dialog\n\t\t\t.showOpenDialog(this.window._browserWindow, {\n\t\t\t\tproperties: [\"openDirectory\"],\n\t\t\t})\n\t\t\t.then(({ filePaths }) => filePaths[0] ?? null)\n\t\tif (directory == null) {\n\t\t\tthis.desktopExportLock.unlock(userId)\n\t\t\tthrow new CancelledError(\"Directory picking canceled\")\n\t\t}\n\t\tconst folderName = `TutaExport-${formatSortableDate(new Date(this.dateProvider.now()))}`\n\t\tconst fullPath = await this.pickUniqueFileName(path.join(directory, folderName))\n\t\tawait this.fs.promises.mkdir(fullPath)\n\t\tawait this.mailboxExportPersistence.setStateForUser({\n\t\t\ttype: \"running\",\n\t\t\tuserId,\n\t\t\tmailboxId,\n\t\t\texportDirectoryPath: fullPath,\n\t\t\tmailBagId,\n\t\t\tmailId,\n\t\t\texportedMails: 0,\n\t\t})\n\t}\n\n\tprivate async pickUniqueFileName(path: string): Promise<string> {\n\t\tlet counter = 0\n\t\tlet currentCandidate = path\n\t\twhile (await this.fileExists(currentCandidate)) {\n\t\t\tcounter += 1\n\t\t\tcurrentCandidate = path + `-${counter}`\n\t\t}\n\t\treturn currentCandidate\n\t}\n\n\tprivate async fileExists(path: string): Promise<boolean> {\n\t\ttry {\n\t\t\tawait this.fs.promises.stat(path)\n\t\t} catch (e) {\n\t\t\tif (e.code === \"ENOENT\") {\n\t\t\t\treturn false\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tasync getMailboxExportState(userId: string): Promise<MailboxExportState | null> {\n\t\tconst state = await this.mailboxExportPersistence.getStateForUser(userId)\n\t\tif (state && state.type === \"running\") {\n\t\t\tif (this.desktopExportLock.acquireLock(userId) === LockResult.AlreadyLocked) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"locked\",\n\t\t\t\t\tuserId,\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn state\n\t}\n\n\tasync endMailboxExport(userId: string): Promise<void> {\n\t\tconst previousExportState = await this.mailboxExportPersistence.getStateForUser(userId)\n\t\tif (previousExportState && previousExportState.type === \"running\") {\n\t\t\tawait this.mailboxExportPersistence.setStateForUser({\n\t\t\t\ttype: \"finished\",\n\t\t\t\tuserId,\n\t\t\t\texportDirectoryPath: previousExportState.exportDirectoryPath,\n\t\t\t\tmailboxId: previousExportState.mailboxId,\n\t\t\t})\n\t\t} else {\n\t\t\tthrow new ProgrammingError(\"An Export was not previously running\")\n\t\t}\n\t}\n\n\tasync saveMailboxExport(bundle: MailBundle, userId: string, mailBagId: string, mailId: string): Promise<void> {\n\t\tconst exportState = await this.mailboxExportPersistence.getStateForUser(userId)\n\t\tif (exportState == null || exportState.type !== \"running\") {\n\t\t\tthrow new ProgrammingError(\"Export is not running\")\n\t\t}\n\t\tconst filename = generateExportFileName(elementIdPart(bundle.mailId), bundle.subject, new Date(bundle.sentOn), \"eml\")\n\t\tconst fullPath = path.join(exportState.exportDirectoryPath, filename)\n\t\tconst file = mailToEmlFile(bundle, filename)\n\t\ttry {\n\t\t\tawait this.fs.promises.writeFile(fullPath, file.data)\n\t\t} catch (e) {\n\t\t\tif (e.code === \"ENOENT\" || e.code === \"EPERM\") {\n\t\t\t\tthrow new FileOpenError(`Could not write ${fullPath}`)\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t\tawait this.mailboxExportPersistence.setStateForUser({\n\t\t\ttype: \"running\",\n\t\t\tuserId,\n\t\t\tmailBagId,\n\t\t\tmailId,\n\t\t\texportDirectoryPath: exportState.exportDirectoryPath,\n\t\t\tmailboxId: exportState.mailboxId,\n\t\t\texportedMails: exportState.exportedMails + 1,\n\t\t})\n\t}\n\n\tasync clearExportState(userId: string): Promise<void> {\n\t\tawait this.mailboxExportPersistence.clearStateForUser(userId)\n\t\tthis.desktopExportLock.unlock(userId)\n\t}\n\n\tasync openExportDirectory(userId: string): Promise<void> {\n\t\tconst exportState = await this.mailboxExportPersistence.getStateForUser(userId)\n\t\tif (exportState == null || exportState.type !== \"finished\") {\n\t\t\tthrow new ProgrammingError(\"Export is not finished\")\n\t\t}\n\t\tawait this.electron.shell.openPath(exportState.exportDirectoryPath)\n\t}\n\n\tprivate async getExportDirectoryPath(): Promise<string> {\n\t\tconst directory = path.join(this.tfs.getTutanotaTempPath(), EXPORT_DIR)\n\t\tawait fs.mkdir(directory, { recursive: true })\n\t\treturn directory\n\t}\n}\n"]}