{"version":3,"file":"ImportUsersViewer.js","sourceRoot":"","sources":["../../../../src/common/settings/ImportUsersViewer.ts"],"names":[],"mappings":"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","sourcesContent":["import m from \"mithril\"\nimport { Dialog } from \"../gui/base/Dialog.js\"\nimport { lang, TranslationKey } from \"../misc/LanguageViewModel.js\"\nimport { isMailAddress } from \"../misc/FormatValidator.js\"\nimport { BookingItemFeatureType } from \"../api/common/TutanotaConstants.js\"\nimport { contains, delay, ofClass, promiseMap } from \"@tutao/tutanota-utils\"\nimport { PreconditionFailedError } from \"../api/common/error/RestError.js\"\nimport { showBuyDialog } from \"../subscription/BuyDialog.js\"\nimport { locator } from \"../api/main/CommonLocator.js\"\nimport { showProgressDialog } from \"../gui/dialogs/ProgressDialog.js\"\nimport { OperationId } from \"../api/main/OperationProgressTracker.js\"\nimport { toFeatureType } from \"../subscription/SubscriptionUtils.js\"\n\nconst delayTime = 900\ntype UserImportDetails = {\n\tusername: string | null\n\tmailAddress: string\n\tpassword: string\n}\nexport const CSV_USER_FORMAT = \"username;user@domain.com;password\"\n\nexport function checkAndImportUserData(userDetailsInputCsv: string, availableDomains: string[]): boolean {\n\tlet userData = csvToUserDetails(userDetailsInputCsv)\n\n\tif (!userData) {\n\t\tDialog.message(\n\t\t\tlang.getTranslation(\"wrongUserCsvFormat_msg\", {\n\t\t\t\t\"{format}\": CSV_USER_FORMAT,\n\t\t\t}),\n\t\t)\n\t\treturn false\n\t} else {\n\t\tconst errorMessage = checkAndGetErrorMessage(userData, availableDomains)\n\n\t\tif (!errorMessage) {\n\t\t\tif (userData.length > 0) {\n\t\t\t\tshowBookingDialog(userData)\n\t\t\t}\n\n\t\t\treturn true\n\t\t} else {\n\t\t\tDialog.message(lang.makeTranslation(\"error_msg\", errorMessage))\n\t\t\treturn false\n\t\t}\n\t}\n}\n\n/**\n * Returns the user data from the given csv string or null if the scv string is not valid\n */\nfunction csvToUserDetails(csvString: string): UserImportDetails[] | null {\n\tlet lines = csvString\n\t\t.replace(\"\\r\", \"\")\n\t\t.split(\"\\n\")\n\t\t.filter((l) => \"\" !== l.trim())\n\tlet error = false\n\tlet userData = lines.map((a) => {\n\t\tlet parts = a.trim().split(\";\")\n\n\t\tif (parts.length !== 3) {\n\t\t\terror = true\n\t\t\treturn null\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tusername: parts[0],\n\t\t\t\tmailAddress: parts[1],\n\t\t\t\tpassword: parts[2],\n\t\t\t}\n\t\t}\n\t})\n\n\tif (error) {\n\t\treturn null\n\t} else {\n\t\treturn userData as any\n\t}\n}\n\n/**\n * Check the user data for validity. Returns an error message for the first user with invalid data, otherwise null.\n */\nfunction checkAndGetErrorMessage(userData: UserImportDetails[], availableDomains: string[]): string | null {\n\tif (userData.length === 0) {\n\t\treturn lang.get(\"noInputWasMade_msg\")\n\t} else {\n\t\tlet errorMessageArray: TranslationKey[] = []\n\t\tlet errorMessage: string | null = null\n\t\tuserData.find((u, index) => {\n\t\t\tlet mailAddress = u.mailAddress\n\t\t\tlet domain = u.mailAddress.split(\"@\")[1].toLowerCase().trim()\n\n\t\t\tif (!isMailAddress(u.mailAddress, true)) {\n\t\t\t\terrorMessageArray.push(\"mailAddressInvalid_msg\")\n\t\t\t}\n\n\t\t\tif (!contains(availableDomains, domain)) {\n\t\t\t\terrorMessageArray.push(\"customDomainErrorDomainNotAvailable_msg\")\n\t\t\t}\n\n\t\t\tif (u.password.trim() === \"\") {\n\t\t\t\terrorMessageArray.push(\"enterMissingPassword_msg\")\n\t\t\t}\n\n\t\t\tif (userData.some((otherUser) => otherUser.mailAddress === mailAddress && otherUser !== u)) {\n\t\t\t\terrorMessageArray.push(\"duplicatedMailAddressInUserList_msg\")\n\t\t\t}\n\n\t\t\t// create error msg from all errors for this user\n\t\t\tif (errorMessageArray.length > 0) {\n\t\t\t\terrorMessage =\n\t\t\t\t\terrorMessageArray.map((e) => lang.get(e)).join(\"\\n\") +\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\tlang.get(\"errorAtLine_msg\", {\n\t\t\t\t\t\t\"{index}\": index + 1,\n\t\t\t\t\t\t\"{error}\": `\"${u.username || \"\"};${u.mailAddress || \"\"};${u.password || \"\"}\"`,\n\t\t\t\t\t})\n\t\t\t\treturn true\n\t\t\t}\n\t\t})\n\t\treturn errorMessage\n\t}\n}\n\nasync function showBookingDialog(userDetailsArray: UserImportDetails[]) {\n\t// We send index to worker and then worker calculates the progress based on the index of the user\n\tconst userController = locator.logins.getUserController()\n\tconst planType = await userController.getPlanType()\n\n\tconst accepted = await showBuyDialog({\n\t\tfeatureType: (await userController.isNewPaidPlan()) ? toFeatureType(planType) : BookingItemFeatureType.LegacyUsers,\n\t\tbookingText: \"bookingItemUsersIncluding_label\",\n\t\tcount: userDetailsArray.length,\n\t\tfreeAmount: 0,\n\t\treactivate: false,\n\t})\n\tif (!accepted) {\n\t\treturn\n\t}\n\tlet nbrOfCreatedUsers = 0\n\tlet notAvailableUsers: UserImportDetails[] = []\n\tconst operation = locator.operationProgressTracker.startNewOperation()\n\tawait showProgressDialog(\n\t\tlang.getTranslation(\"createActionStatus_msg\", {\n\t\t\t\"{index}\": nbrOfCreatedUsers,\n\t\t\t\"{count}\": userDetailsArray.length,\n\t\t}),\n\t\tpromiseMap(userDetailsArray, (user, userIndex) => {\n\t\t\treturn createUserIfMailAddressAvailable(user, userIndex, userDetailsArray.length, operation.id).then((created) => {\n\t\t\t\tif (created) {\n\t\t\t\t\tnbrOfCreatedUsers++\n\t\t\t\t\tm.redraw()\n\t\t\t\t} else {\n\t\t\t\t\tnotAvailableUsers.push(user)\n\t\t\t\t}\n\t\t\t})\n\t\t}),\n\t\toperation.progress,\n\t)\n\t\t.catch(ofClass(PreconditionFailedError, () => Dialog.message(\"createUserFailed_msg\")))\n\t\t.finally(() => operation.done)\n\n\tif (notAvailableUsers.length > 0) {\n\t\tawait Dialog.message(\n\t\t\tlang.makeTranslation(\n\t\t\t\t\"addressesAlreadyInUse_msg\",\n\t\t\t\tlang.get(\"addressesAlreadyInUse_msg\") + \" \" + notAvailableUsers.map((u) => u.mailAddress).join(\", \"),\n\t\t\t),\n\t\t)\n\t}\n\n\tawait Dialog.message(\n\t\tlang.getTranslation(\"createdUsersCount_msg\", {\n\t\t\t\"{1}\": nbrOfCreatedUsers,\n\t\t}),\n\t)\n}\n\n/**\n * @returns True if the user was created, false if the email address is not available.\n */\nfunction createUserIfMailAddressAvailable(user: UserImportDetails, index: number, overallNumberOfUsers: number, operationId: OperationId): Promise<boolean> {\n\tlet cleanMailAddress = user.mailAddress.trim().toLowerCase()\n\treturn locator.mailAddressFacade.isMailAddressAvailable(cleanMailAddress).then(async (available) => {\n\t\tif (available) {\n\t\t\t// we don't use it currently\n\n\t\t\treturn locator.userManagementFacade\n\t\t\t\t.createUser(user.username ? user.username : \"\", cleanMailAddress, user.password, index, overallNumberOfUsers, operationId)\n\t\t\t\t.then(() => {\n\t\t\t\t\t// delay is needed so that there are not too many requests from isMailAddressAvailable service if users ar not available (are not created)\n\t\t\t\t\treturn delay(delayTime).then(() => true)\n\t\t\t\t})\n\t\t} else {\n\t\t\treturn delay(delayTime).then(() => false)\n\t\t}\n\t})\n}\n"]}