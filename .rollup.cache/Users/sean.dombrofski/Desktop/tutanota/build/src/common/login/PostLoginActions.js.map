{"version":3,"file":"PostLoginActions.js","sourceRoot":"","sources":["../../../../src/common/login/PostLoginActions.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Component } from \"mithril\"\nimport type { LoggedInEvent, PostLoginAction } from \"../api/main/LoginController\"\nimport { LoginController } from \"../api/main/LoginController\"\nimport { isAdminClient, isApp, isDesktop, LOGIN_TITLE } from \"../api/common/Env\"\nimport { assertNotNull, defer, delay, neverNull, noOp, ofClass } from \"@tutao/tutanota-utils\"\nimport { windowFacade } from \"../misc/WindowFacade.js\"\nimport { checkApprovalStatus } from \"../misc/LoginUtils.js\"\nimport { locator } from \"../api/main/CommonLocator\"\nimport { ReceiveInfoService } from \"../api/entities/tutanota/Services\"\nimport { lang } from \"../misc/LanguageViewModel.js\"\nimport { getHourCycle } from \"../misc/Formatter.js\"\nimport { createReceiveInfoServiceData, OutOfOfficeNotification } from \"../api/entities/tutanota/TypeRefs.js\"\nimport { isNotificationCurrentlyActive, loadOutOfOfficeNotification } from \"../misc/OutOfOfficeNotificationUtils.js\"\nimport * as notificationOverlay from \"../gui/base/NotificationOverlay\"\nimport { ButtonType } from \"../gui/base/Button.js\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport { CloseEventBusOption, Const, SecondFactorType } from \"../api/common/TutanotaConstants\"\nimport { showMoreStorageNeededOrderDialog } from \"../misc/SubscriptionDialogs.js\"\nimport { notifications } from \"../gui/Notifications\"\nimport { LockedError } from \"../api/common/error/RestError\"\nimport { CredentialsProvider, usingKeychainAuthenticationWithOptions } from \"../misc/credentials/CredentialsProvider.js\"\nimport type { ThemeCustomizations } from \"../misc/WhitelabelCustomizations.js\"\nimport { getThemeCustomizations } from \"../misc/WhitelabelCustomizations.js\"\nimport { CredentialEncryptionMode } from \"../misc/credentials/CredentialEncryptionMode.js\"\nimport { SecondFactorHandler } from \"../misc/2fa/SecondFactorHandler.js\"\nimport { SessionType } from \"../api/common/SessionType\"\nimport { StorageBehavior } from \"../misc/UsageTestModel.js\"\nimport type { WebsocketConnectivityModel } from \"../misc/WebsocketConnectivityModel.js\"\nimport { DateProvider } from \"../api/common/DateProvider.js\"\nimport { createCustomerProperties, CustomerTypeRef, SecondFactorTypeRef } from \"../api/entities/sys/TypeRefs.js\"\nimport { EntityClient } from \"../api/common/EntityClient.js\"\nimport { shouldShowStorageWarning, shouldShowUpgradeReminder } from \"./PostLoginUtils.js\"\nimport { UserManagementFacade } from \"../api/worker/facades/lazy/UserManagementFacade.js\"\nimport { CustomerFacade } from \"../api/worker/facades/lazy/CustomerFacade.js\"\nimport { deviceConfig } from \"../misc/DeviceConfig.js\"\nimport { ThemeController } from \"../gui/ThemeController.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../api/common/utils/EntityUpdateUtils.js\"\n\n/**\n * This is a collection of all things that need to be initialized/global state to be set after a user has logged in successfully.\n */\n\nexport class PostLoginActions implements PostLoginAction {\n\tconstructor(\n\t\tprivate readonly credentialsProvider: CredentialsProvider,\n\t\tpublic secondFactorHandler: SecondFactorHandler,\n\t\tprivate readonly connectivityModel: WebsocketConnectivityModel,\n\t\tprivate readonly logins: LoginController,\n\t\tprivate readonly dateProvider: DateProvider,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly userManagementFacade: UserManagementFacade,\n\t\tprivate readonly customerFacade: CustomerFacade,\n\t\tprivate readonly themeController: ThemeController,\n\t\tprivate readonly showSetupWizard: () => unknown,\n\t\tprivate readonly syncExternalCalendars: () => unknown,\n\t\tprivate readonly setUpClientOnlyCalendars: () => unknown,\n\t) {}\n\n\tasync onPartialLoginSuccess(loggedInEvent: LoggedInEvent): Promise<void> {\n\t\t// We establish websocket connection even for temporary sessions because we need to get updates e.g. during signup\n\t\twindowFacade.addOnlineListener(() => {\n\t\t\tconsole.log(new Date().toISOString(), \"online - try reconnect\")\n\t\t\tif (this.logins.isFullyLoggedIn()) {\n\t\t\t\t// When we try to connect after receiving online event it might not succeed so we delay reconnect attempt by 2s\n\t\t\t\tthis.connectivityModel.tryReconnect(true, true, 2000)\n\t\t\t} else {\n\t\t\t\t// log in user\n\t\t\t\tthis.logins.retryAsyncLogin()\n\t\t\t}\n\t\t})\n\t\twindowFacade.addOfflineListener(() => {\n\t\t\tconsole.log(new Date().toISOString(), \"offline - pause event bus\")\n\t\t\tthis.connectivityModel.close(CloseEventBusOption.Pause)\n\t\t})\n\n\t\t// only show \"Tuta Mail\" after login if there is no custom title set\n\t\tif (!this.logins.getUserController().isInternalUser()) {\n\t\t\tif (document.title === LOGIN_TITLE) {\n\t\t\t\tdocument.title = \"Tuta Mail\"\n\t\t\t}\n\n\t\t\treturn\n\t\t} else {\n\t\t\tlet postLoginTitle = document.title === LOGIN_TITLE ? \"Tuta Mail\" : document.title\n\t\t\tdocument.title = neverNull(this.logins.getUserController().userGroupInfo.mailAddress) + \" - \" + postLoginTitle\n\t\t}\n\t\tnotifications.requestPermission()\n\n\t\tif (\n\t\t\tloggedInEvent.sessionType === SessionType.Persistent &&\n\t\t\tusingKeychainAuthenticationWithOptions() &&\n\t\t\t(await this.credentialsProvider.getCredentialEncryptionMode()) == null\n\t\t) {\n\t\t\t// If the encryption mode is not selected, we opt user into automatic mode.\n\t\t\t// We keep doing it here for now to have some flexibility if we want to show some other option here in the future.\n\t\t\tawait this.credentialsProvider.setCredentialEncryptionMode(CredentialEncryptionMode.DEVICE_LOCK)\n\t\t}\n\n\t\tlang.updateFormats({\n\t\t\t// partial\n\t\t\thourCycle: getHourCycle(this.logins.getUserController().userSettingsGroupRoot),\n\t\t})\n\n\t\t// We already have user data to load themes\n\t\tif (isApp() || isDesktop()) {\n\t\t\tawait this.storeNewCustomThemes()\n\t\t}\n\t}\n\n\tasync onFullLoginSuccess(loggedInEvent: LoggedInEvent): Promise<void> {\n\t\tif (loggedInEvent.sessionType === SessionType.Temporary || !this.logins.getUserController().isInternalUser()) {\n\t\t\treturn\n\t\t}\n\n\t\t// Do not wait\n\t\tthis.fullLoginAsyncActions()\n\n\t\tthis.showSetupWizardIfNeeded()\n\t}\n\n\t// Runs the user approval check after the user has been updated or after a timeout\n\tprivate checkApprovalAfterSync(): Promise<void> {\n\t\t// Create a promise we will use to track the completion of the below listener\n\t\tconst listenerDeferral = defer<void>()\n\t\t// Add an event listener to run the check after any customer entity update\n\t\tconst listener = async (updates: ReadonlyArray<EntityUpdateData>) => {\n\t\t\t// Get whether the entity update contains the customer\n\t\t\tconst customer = this.logins.getUserController().user.customer\n\t\t\tconst isCustomerUpdate: boolean = updates.some((update) => isUpdateForTypeRef(CustomerTypeRef, update) && update.instanceId === customer)\n\t\t\tif (customer != null && isCustomerUpdate) {\n\t\t\t\tlistenerDeferral.resolve()\n\t\t\t}\n\t\t}\n\t\tlocator.eventController.addEntityListener(listener)\n\n\t\t// Timeout if the entity update does not arrive or takes too long to arrive\n\t\tconst timeoutPromise = delay(2000)\n\n\t\t// Remove the listener and start the approval check depending on whether a customer update or the timeout resolves first.\n\t\treturn Promise.race([listenerDeferral.promise, timeoutPromise]).then(() => {\n\t\t\tlocator.eventController.removeEntityListener(listener)\n\t\t\tcheckApprovalStatus(this.logins, true)\n\t\t})\n\t}\n\n\tprivate async fullLoginAsyncActions() {\n\t\tthis.checkApprovalAfterSync() // Not awaiting so this is run in parallel\n\t\tawait this.showUpgradeReminderIfNeeded()\n\t\tawait this.checkStorageLimit()\n\n\t\tthis.secondFactorHandler.setupAcceptOtherClientLoginListener()\n\n\t\tif (!isAdminClient()) {\n\t\t\t// If it failed during the partial login due to missing cache entries we will give it another spin here. If it didn't fail then it's just a noop\n\t\t\tawait locator.mailboxModel.init()\n\t\t\tconst calendarModel = await locator.calendarModel()\n\t\t\tawait calendarModel.init()\n\t\t\tawait this.remindActiveOutOfOfficeNotification()\n\t\t}\n\n\t\tif (isApp() || isDesktop()) {\n\t\t\t// Do not try to register for notifications while the setup dialog\n\t\t\t// is being shown because we might not have a permission yet and\n\t\t\t// we don't want to ask for it while dialog is shown, we will ask in\n\t\t\t// the dialog anyway.\n\t\t\t// After dialog is finished or dismissed the setup is \"complete\".\n\t\t\tif ((isApp() && deviceConfig.getIsSetupComplete()) || isDesktop()) {\n\t\t\t\t// Await the push service registration so `storePushIdentifierLocally()` can set the extended notification mode on Android\n\t\t\t\t// before `loadNewsIds()` runs the `isShown()` check of the `RichNotificationsNews` news item\n\t\t\t\tawait locator.pushService.register()\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Skipping registering for notifications while setup dialog is shown\")\n\t\t\t}\n\n\t\t\tthis.syncExternalCalendars()\n\t\t}\n\n\t\tthis.setUpClientOnlyCalendars()\n\n\t\tif (this.logins.isGlobalAdminUserLoggedIn() && !isAdminClient()) {\n\t\t\tconst receiveInfoData = createReceiveInfoServiceData({\n\t\t\t\tlanguage: lang.code,\n\t\t\t})\n\t\t\tlocator.serviceExecutor.post(ReceiveInfoService, receiveInfoData)\n\t\t}\n\n\t\tthis.enforcePasswordChange()\n\n\t\tconst usageTestModel = locator.usageTestModel\n\t\tawait usageTestModel.init()\n\n\t\tusageTestModel.setStorageBehavior(StorageBehavior.Persist)\n\t\t// Load only up-to-date (not older than 1h) assignments here and make a request for that.\n\t\t// There should not be a lot of re-rendering at this point since assignments for new tests are usually fetched right after a client version update.\n\t\tlocator.usageTestController.setTests(await usageTestModel.loadActiveUsageTests())\n\n\t\t// Needs to be called after UsageTestModel.init() if the UsageOptInNews is live! (its isShown() requires an initialized UsageTestModel)\n\t\tawait locator.newsModel.loadNewsIds()\n\n\t\t// Redraw to render usage tests and news, among other things that may have changed.\n\t\tm.redraw()\n\t}\n\n\tprivate deactivateOutOfOfficeNotification(notification: OutOfOfficeNotification): Promise<void> {\n\t\tnotification.enabled = false\n\t\treturn this.entityClient.update(notification)\n\t}\n\n\tprivate remindActiveOutOfOfficeNotification(): Promise<void> {\n\t\treturn loadOutOfOfficeNotification().then((notification) => {\n\t\t\tif (notification && isNotificationCurrentlyActive(notification, new Date())) {\n\t\t\t\tconst notificationMessage: Component = {\n\t\t\t\t\tview: () => {\n\t\t\t\t\t\treturn m(\"\", lang.get(\"outOfOfficeReminder_label\"))\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tnotificationOverlay.show(\n\t\t\t\t\tnotificationMessage,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"close_alt\",\n\t\t\t\t\t},\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: \"deactivate_action\",\n\t\t\t\t\t\t\tclick: () => this.deactivateOutOfOfficeNotification(notification),\n\t\t\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate async storeNewCustomThemes(): Promise<void> {\n\t\tconst domainInfoAndConfig = await this.logins.getUserController().loadWhitelabelConfig()\n\t\tif (domainInfoAndConfig && domainInfoAndConfig.whitelabelConfig.jsonTheme) {\n\t\t\tconst customizations: ThemeCustomizations = getThemeCustomizations(domainInfoAndConfig.whitelabelConfig)\n\t\t\t// jsonTheme is stored on WhitelabelConfig as an empty json string (\"{}\", or whatever JSON.stringify({}) gives you)\n\t\t\t// so we can't just check `!whitelabelConfig.jsonTheme`\n\t\t\tif (Object.keys(customizations).length > 0) {\n\t\t\t\t// Custom theme is missing themeId, so we update it with the whitelabel domain\n\t\t\t\tif (!customizations.themeId) {\n\t\t\t\t\tcustomizations.themeId = domainInfoAndConfig.domainInfo.domain\n\t\t\t\t}\n\n\t\t\t\tawait this.themeController.storeCustomThemeForCustomizations(customizations)\n\n\t\t\t\t// Update the already loaded custom themes to their latest version\n\t\t\t\tconst previouslySavedThemes = await this.themeController.getCustomThemes()\n\t\t\t\tconst isExistingTheme = previouslySavedThemes.includes(domainInfoAndConfig.domainInfo.domain)\n\t\t\t\tif (isExistingTheme) {\n\t\t\t\t\tawait this.themeController.reloadTheme()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async checkStorageLimit(): Promise<void> {\n\t\tif (await shouldShowStorageWarning(this.logins.getUserController(), this.userManagementFacade, this.customerFacade)) {\n\t\t\tawait showMoreStorageNeededOrderDialog(\"insufficientStorageWarning_msg\")\n\t\t}\n\t}\n\n\tprivate async showUpgradeReminderIfNeeded(): Promise<void> {\n\t\tif (await shouldShowUpgradeReminder(this.logins.getUserController(), new Date(this.dateProvider.now()))) {\n\t\t\tconst confirmed = await Dialog.reminder(lang.get(\"upgradeReminderTitle_msg\"), lang.get(\"premiumOffer_msg\"))\n\t\t\tif (confirmed) {\n\t\t\t\tconst wizard = await import(\"../subscription/UpgradeSubscriptionWizard.js\")\n\t\t\t\tawait wizard.showUpgradeWizard(this.logins)\n\t\t\t}\n\n\t\t\tconst newCustomerProperties = createCustomerProperties(await this.logins.getUserController().loadCustomerProperties())\n\t\t\tnewCustomerProperties.lastUpgradeReminder = new Date(this.dateProvider.now())\n\t\t\tthis.entityClient.update(newCustomerProperties).catch(ofClass(LockedError, noOp))\n\t\t}\n\t}\n\n\tprivate async enforcePasswordChange(): Promise<void> {\n\t\tif (this.logins.getUserController().user.requirePasswordUpdate) {\n\t\t\tconst { showChangeOwnPasswordDialog } = await import(\"../settings/login/ChangePasswordDialogs.js\")\n\t\t\tawait showChangeOwnPasswordDialog(false)\n\t\t}\n\n\t\tif (location.hostname === Const.DEFAULT_APP_DOMAIN) {\n\t\t\tconst user = this.logins.getUserController().user\n\t\t\tconst secondFactors = await this.entityClient.loadAll(SecondFactorTypeRef, assertNotNull(user.auth).secondFactors)\n\t\t\tconst webauthnFactors = secondFactors.filter((f) => f.type === SecondFactorType.webauthn || f.type === SecondFactorType.u2f)\n\t\t\t// If there are webauthn factors but none of them are for the default domain, show a message\n\t\t\tif (webauthnFactors.length > 0 && !webauthnFactors.some((f) => f.u2f && f.u2f?.appId == Const.WEBAUTHN_RP_ID)) {\n\t\t\t\tconst dialog = Dialog.confirmMultiple(\"noKeysForThisDomain_msg\", [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"skip_action\",\n\t\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\t\tclick: () => dialog.close(),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"settings_label\",\n\t\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t\t\tm.route.set(\"/settings/login\")\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t}\n\t\t}\n\t}\n\n\t// Show the onboarding wizard if this is the first time the app has been opened since install\n\tprivate async showSetupWizardIfNeeded(): Promise<void> {\n\t\tconst isSetupComplete = deviceConfig.getIsSetupComplete()\n\t\tif (isApp() && !isSetupComplete) {\n\t\t\tawait this.showSetupWizard()\n\t\t}\n\t}\n}\n"]}