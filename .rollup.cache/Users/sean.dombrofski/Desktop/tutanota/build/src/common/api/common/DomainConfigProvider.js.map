{"version":3,"file":"DomainConfigProvider.js","sourceRoot":"","sources":["../../../../../src/common/api/common/DomainConfigProvider.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,oBAAoB;IAChC,6FAA6F;IAC7F,sBAAsB;QACrB,+FAA+F;QAC/F,0CAA0C;QAC1C,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,SAAS,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAA;QACnD,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAA;QACrB,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAA;QAC7B,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAA;QAC7B,OAAO,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAA;IACjE,CAAC;IAED,0BAA0B,CAAC,QAAgB,EAAE,WAAmB,QAAQ,EAAE,IAAa;QACtF,MAAM,YAAY,GAAG,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;QAChD,IAAI,YAAY,EAAE,CAAC;YAClB,OAAO,YAAY,CAAA;QACpB,CAAC;aAAM,CAAC;YACP,MAAM,YAAY,GAAG,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;YACxD,MAAM,aAAa,GAAG,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,CAAA;YACrD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;gBAClE,MAAM,aAAa,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;gBACnI,OAAO,CAAC,GAAG,EAAE,aAAa,CAAC,CAAA;YAC5B,CAAC,CAAC,CAAA;YACF,OAAO,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;QACnC,CAAC;IACF,CAAC;CACD","sourcesContent":["export class DomainConfigProvider {\n\t/** Get domain config for the current domain (staticUrl or the one the app is running on). */\n\tgetCurrentDomainConfig(): DomainConfig {\n\t\t// It is ambiguous what to do when we run website on one domain but have static URL for another\n\t\t// one but this actually shouldn't happen.\n\t\tconst url = new URL(env.staticUrl ?? location.href)\n\t\tconst port = url.port\n\t\tconst hostname = url.hostname\n\t\tconst protocol = url.protocol\n\t\treturn this.getDomainConfigForHostname(hostname, protocol, port)\n\t}\n\n\tgetDomainConfigForHostname(hostname: string, protocol: string = \"https:\", port?: string): DomainConfig {\n\t\tconst staticConfig = env.domainConfigs[hostname]\n\t\tif (staticConfig) {\n\t\t\treturn staticConfig\n\t\t} else {\n\t\t\tconst fullHostName = hostname + (port ? `:${port}` : \"\")\n\t\t\tconst dynamicConfig = env.domainConfigs[\"{hostname}\"]\n\t\t\tconst entries = Object.entries(dynamicConfig).map(([key, value]) => {\n\t\t\t\tconst replacedValue = typeof value === \"string\" ? value.replace(\"{hostname}\", fullHostName).replace(\"{protocol}\", protocol) : value\n\t\t\t\treturn [key, replacedValue]\n\t\t\t})\n\t\t\treturn Object.fromEntries(entries)\n\t\t}\n\t}\n}\n"]}