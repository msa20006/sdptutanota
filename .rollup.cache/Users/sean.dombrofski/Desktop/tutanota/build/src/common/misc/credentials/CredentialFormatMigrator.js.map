{"version":3,"file":"CredentialFormatMigrator.js","sourceRoot":"","sources":["../../../../../src/common/misc/credentials/CredentialFormatMigrator.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeviceConfig, DeviceConfigCredentials } from \"../DeviceConfig.js\"\nimport type { NativeCredentialsFacade } from \"../../native/common/generatedipc/NativeCredentialsFacade.js\"\nimport { Dialog } from \"../../gui/base/Dialog.js\"\nimport { PersistedCredentials } from \"../../native/common/generatedipc/PersistedCredentials.js\"\nimport { base64ToUint8Array, mapNullable } from \"@tutao/tutanota-utils\"\nimport { MobileSystemFacade } from \"../../native/common/generatedipc/MobileSystemFacade.js\"\nimport { CredentialEncryptionMode } from \"./CredentialEncryptionMode.js\"\nimport { AppLockMethod } from \"../../native/common/generatedipc/AppLockMethod.js\"\nimport { lang } from \"../LanguageViewModel.js\"\n\nfunction credentialEncryptionModeToAppLockMethod(mode: CredentialEncryptionMode): AppLockMethod {\n\tswitch (mode) {\n\t\tcase CredentialEncryptionMode.APP_PASSWORD:\n\t\tcase CredentialEncryptionMode.DEVICE_LOCK:\n\t\t\treturn AppLockMethod.None\n\t\tcase CredentialEncryptionMode.BIOMETRICS:\n\t\t\treturn AppLockMethod.Biometrics\n\t\tcase CredentialEncryptionMode.SYSTEM_PASSWORD:\n\t\t\treturn AppLockMethod.SystemPassOrBiometrics\n\t}\n}\n\nexport class CredentialFormatMigrator {\n\tconstructor(\n\t\tprivate readonly deviceConfig: DeviceConfig,\n\t\tprivate readonly nativeCredentialFacade: NativeCredentialsFacade | null,\n\t\tprivate readonly mobileSystemFacade: MobileSystemFacade | null,\n\t) {}\n\n\tasync migrate(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.migrateToNativeCredentials()\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t\tawait Dialog.message(\n\t\t\t\tlang.makeTranslation(\"confirm_msg\", \"Could not migrate credentials\"),\n\t\t\t\t`${e.name} ${e.message}\n${e.stack}`,\n\t\t\t).then(() => this.migrate())\n\t\t}\n\t}\n\n\t/**\n\t * Migrate existing credentials to native db if the migration haven't happened once. Also generate database key if missing.\n\t */\n\tprivate async migrateToNativeCredentials() {\n\t\tif (this.nativeCredentialFacade != null && !this.deviceConfig.getIsCredentialsMigratedToNative()) {\n\t\t\tconsole.log(\"Migrating credentials to native\")\n\t\t\tconst allPersistedCredentials = this.deviceConfig.getCredentials().map(deviceConfigCredentialsToPersisted)\n\t\t\tconst encryptionMode = await this.deviceConfig.getCredentialEncryptionMode()\n\t\t\tconst credentialsKey = await this.deviceConfig.getCredentialsEncryptionKey()\n\t\t\tif (encryptionMode != null && credentialsKey != null) {\n\t\t\t\tif (this.mobileSystemFacade != null) {\n\t\t\t\t\tawait this.mobileSystemFacade.setAppLockMethod(credentialEncryptionModeToAppLockMethod(encryptionMode))\n\t\t\t\t}\n\t\t\t\tconsole.log(\"migrating credentials\", allPersistedCredentials)\n\t\t\t\tawait this.nativeCredentialFacade.migrateToNativeCredentials(allPersistedCredentials, encryptionMode, credentialsKey)\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Skipping migration as encryption data is not there\")\n\t\t\t}\n\t\t\tconsole.log(\"Stored credentials in native\")\n\n\t\t\tawait this.deviceConfig.clearCredentialsData()\n\n\t\t\tconsole.log(\"Cleared credentials in deviceConfig\")\n\n\t\t\tthis.deviceConfig.setIsCredentialsMigratedToNative(true)\n\t\t}\n\t}\n}\n\nfunction deviceConfigCredentialsToPersisted(deviceConfigCredentials: DeviceConfigCredentials): PersistedCredentials {\n\treturn {\n\t\tcredentialInfo: deviceConfigCredentials.credentialInfo,\n\t\tencryptedPassword: deviceConfigCredentials.encryptedPassword,\n\t\tencryptedPassphraseKey: mapNullable(deviceConfigCredentials.encryptedPassphraseKey, base64ToUint8Array),\n\t\taccessToken: base64ToUint8Array(deviceConfigCredentials.accessToken),\n\t\tdatabaseKey: mapNullable(deviceConfigCredentials.databaseKey, base64ToUint8Array),\n\t}\n}\n"]}