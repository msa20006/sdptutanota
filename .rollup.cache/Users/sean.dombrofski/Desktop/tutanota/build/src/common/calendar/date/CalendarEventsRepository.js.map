{"version":3,"file":"CalendarEventsRepository.js","sourceRoot":"","sources":["../../../../../src/common/calendar/date/CalendarEventsRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport { CalendarInfo, CalendarModel } from \"../../../calendar-app/calendar/model/CalendarModel.js\"\nimport { IProgressMonitor } from \"../../api/common/utils/ProgressMonitor.js\"\nimport {\n\taddDaysForRecurringEvent,\n\tcalculateContactsAge,\n\tCalendarTimeRange,\n\tcreateRepeatRuleWithValues,\n\textractYearFromBirthday,\n\tgenerateUid,\n\tgetEventEnd,\n\tgetEventStart,\n\tgetMonthRange,\n\tisBirthdayEvent,\n\tisClientOnlyCalendar,\n} from \"./CalendarUtils.js\"\nimport { CalendarEvent, CalendarEventTypeRef, Contact, ContactTypeRef, createCalendarEvent } from \"../../api/entities/tutanota/TypeRefs.js\"\nimport { getListId, isSameId, listIdPart } from \"../../api/common/utils/EntityUtils.js\"\nimport { DateTime } from \"luxon\"\nimport { CalendarFacade } from \"../../api/worker/facades/lazy/CalendarFacade.js\"\nimport { EntityClient } from \"../../api/common/EntityClient.js\"\nimport { findAllAndRemove, incrementDate, isNotNull, stringToBase64 } from \"@tutao/tutanota-utils\"\nimport { CLIENT_ONLY_CALENDAR_BIRTHDAYS_BASE_ID, OperationType, RepeatPeriod } from \"../../api/common/TutanotaConstants.js\"\nimport { NotAuthorizedError, NotFoundError } from \"../../api/common/error/RestError.js\"\nimport { EventController } from \"../../api/main/EventController.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../api/common/utils/EntityUpdateUtils.js\"\nimport { generateLocalEventElementId, getAllDayDateUTC } from \"../../api/common/utils/CommonCalendarUtils.js\"\nimport { ContactModel } from \"../../contactsFunctionality/ContactModel.js\"\nimport { LoginController } from \"../../api/main/LoginController.js\"\nimport { isoDateToBirthday } from \"../../api/common/utils/BirthdayUtils.js\"\n\nconst LIMIT_PAST_EVENTS_YEARS = 100\n\nconst TAG = \"[CalendarEventRepository]\"\n\n/** Map from timestamp of beginnings of days to events that occur on those days. */\nexport type DaysToEvents = ReadonlyMap<number, ReadonlyArray<CalendarEvent>>\n\n/** Object holding the year of birth if available and the corresponding event */\nexport type BirthdayEventRegistry = {\n\tbaseYear: number | null\n\tevent: CalendarEvent\n}\n\n/**\n * Loads and keeps calendar events up to date.\n *\n * If you need to load calendar events there's a good chance you should just use this\n */\nexport class CalendarEventsRepository {\n\t/** timestamps of the beginning of months that we already loaded */\n\tprivate readonly loadedMonths = new Set<number>()\n\tprivate daysToEvents: Stream<DaysToEvents> = stream(new Map())\n\tprivate pendingLoadRequest: Promise<void> = Promise.resolve()\n\n\tprivate clientOnlyEvents: Map<number, BirthdayEventRegistry[]> = new Map()\n\n\tconstructor(\n\t\tprivate readonly calendarModel: CalendarModel,\n\t\tprivate readonly calendarFacade: CalendarFacade,\n\t\tprivate readonly zone: string,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly logins: LoginController,\n\t) {\n\t\teventController.addEntityListener((updates, eventOwnerGroupId) => this.entityEventsReceived(updates, eventOwnerGroupId))\n\n\t\t// Detect when group infos has been reset and reset our data in turn.\n\t\t// There is probably another way, we could reduce and also compute symmetric difference.\n\t\t// This might fire right away but it should be harmless then.\n\t\tthis.calendarModel.getCalendarInfosStream().map((infos) => {\n\t\t\tif (infos.size === 0) {\n\t\t\t\tthis.loadedMonths.clear()\n\t\t\t\tthis.daysToEvents(new Map())\n\t\t\t}\n\t\t})\n\t}\n\n\tgetEventsForMonths(): Stream<DaysToEvents> {\n\t\treturn this.daysToEvents\n\t}\n\n\tgetBirthdayEvents(): Map<number, BirthdayEventRegistry[]> {\n\t\treturn this.clientOnlyEvents\n\t}\n\n\tasync canLoadBirthdaysCalendar(): Promise<boolean> {\n\t\treturn await this.logins.getUserController().isNewPaidPlan()\n\t}\n\n\tasync loadMonthsIfNeeded(daysInMonths: Array<Date>, progressMonitor: IProgressMonitor, canceled: Stream<boolean>): Promise<void> {\n\t\tconst promiseForThisLoadRequest = this.pendingLoadRequest.then(async () => {\n\t\t\tfor (const dayInMonth of daysInMonths) {\n\t\t\t\tif (canceled()) return\n\n\t\t\t\tconst monthRange = getMonthRange(dayInMonth, this.zone)\n\n\t\t\t\tif (!this.loadedMonths.has(monthRange.start)) {\n\t\t\t\t\tthis.loadedMonths.add(monthRange.start)\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst calendarInfos = await this.calendarModel.getCalendarInfos()\n\t\t\t\t\t\tconst eventsMap = await this.calendarFacade.updateEventMap(monthRange, calendarInfos, this.daysToEvents(), this.zone)\n\t\t\t\t\t\tthis.replaceEvents(eventsMap)\n\t\t\t\t\t\tthis.addBirthdaysEventsIfNeeded(dayInMonth, monthRange)\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthis.loadedMonths.delete(monthRange.start)\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprogressMonitor.workDone(1)\n\t\t\t}\n\t\t})\n\t\tthis.pendingLoadRequest = promiseForThisLoadRequest\n\t\tawait promiseForThisLoadRequest\n\t}\n\n\tprivate async addOrUpdateEvent(calendarInfo: CalendarInfo | null, event: CalendarEvent) {\n\t\tif (calendarInfo == null) {\n\t\t\treturn\n\t\t}\n\t\tconst eventListId = getListId(event)\n\t\tif (isSameId(calendarInfo.groupRoot.shortEvents, eventListId)) {\n\t\t\t// to prevent unnecessary churn, we only add the event if we have the months it covers loaded.\n\t\t\tconst eventStartMonth = getMonthRange(getEventStart(event, this.zone), this.zone)\n\t\t\tconst eventEndMonth = getMonthRange(getEventEnd(event, this.zone), this.zone)\n\t\t\tif (this.loadedMonths.has(eventStartMonth.start)) await this.addDaysForEvent(event, eventStartMonth)\n\t\t\t// no short event covers more than two months, so this should cover everything.\n\t\t\tif (eventEndMonth.start != eventStartMonth.start && this.loadedMonths.has(eventEndMonth.start)) await this.addDaysForEvent(event, eventEndMonth)\n\t\t} else if (isSameId(calendarInfo.groupRoot.longEvents, eventListId)) {\n\t\t\tthis.removeExistingEvent(event)\n\n\t\t\tfor (const firstDayTimestamp of this.loadedMonths) {\n\t\t\t\tconst loadedMonth = getMonthRange(new Date(firstDayTimestamp), this.zone)\n\n\t\t\t\tif (event.repeatRule != null) {\n\t\t\t\t\tawait this.addDaysForRecurringEvent(event, loadedMonth)\n\t\t\t\t} else {\n\t\t\t\t\tawait this.addDaysForEvent(event, loadedMonth)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate replaceEvents(newMap: DaysToEvents): void {\n\t\t// We rely on typescript ReadonlyMap type because freezing\n\t\t// this map throws \"The object can not be cloned\" on iOS\n\t\t// when the source of newMap is updateEventMap\n\t\tthis.daysToEvents(newMap)\n\t}\n\n\tprivate cloneEvents(): Map<number, Array<CalendarEvent>> {\n\t\treturn new Map(Array.from(this.daysToEvents().entries()).map(([day, events]) => [day, events.slice()]))\n\t}\n\n\tprivate addDaysForRecurringEvent(event: CalendarEvent, month: CalendarTimeRange): void {\n\t\tif (!isClientOnlyCalendar(listIdPart(event._id)) && -DateTime.fromJSDate(event.startTime).diffNow(\"year\").years > LIMIT_PAST_EVENTS_YEARS) {\n\t\t\tconsole.log(\"repeating event is too far into the past\", event)\n\t\t\treturn\n\t\t}\n\n\t\tconst newMap = this.cloneEvents()\n\n\t\taddDaysForRecurringEvent(newMap, event, month, this.zone)\n\n\t\tthis.replaceEvents(newMap)\n\t}\n\n\tprivate removeDaysForEvent(id: IdTuple): void {\n\t\tconst newMap = this.cloneEvents()\n\n\t\tfor (const dayEvents of newMap.values()) {\n\t\t\tfindAllAndRemove(dayEvents, (e) => isSameId(e._id, id))\n\t\t}\n\n\t\tthis.replaceEvents(newMap)\n\t}\n\n\t/**\n\t * Removes {@param eventToRemove} from {@param events} using isSameEvent()\n\t */\n\tprivate removeExistingEvent(eventToRemove: CalendarEvent) {\n\t\tconst newMap = this.cloneEvents()\n\n\t\tfor (const dayEvents of newMap.values()) {\n\t\t\tfindAllAndRemove(dayEvents, (e) => isSameId(e._id, eventToRemove._id))\n\t\t}\n\n\t\tthis.replaceEvents(newMap)\n\t}\n\n\tprivate async addDaysForEvent(event: CalendarEvent, month: CalendarTimeRange) {\n\t\tconst { addDaysForEventInstance } = await import(\"./CalendarUtils.js\")\n\t\tconst newMap = this.cloneEvents()\n\t\taddDaysForEventInstance(newMap, event, month, this.zone)\n\t\tthis.replaceEvents(newMap)\n\t}\n\n\tprivate async entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>, eventOwnerGroupId: string) {\n\t\tconst calendarInfos = await this.calendarModel.getCalendarInfos()\n\t\tfor (const update of updates) {\n\t\t\tif (isUpdateForTypeRef(CalendarEventTypeRef, update)) {\n\t\t\t\tif (update.operation === OperationType.CREATE || update.operation === OperationType.UPDATE) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst event = await this.entityClient.load(CalendarEventTypeRef, [update.instanceListId, update.instanceId])\n\t\t\t\t\t\tawait this.addOrUpdateEvent(calendarInfos.get(eventOwnerGroupId) ?? null, event)\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof NotFoundError || e instanceof NotAuthorizedError) {\n\t\t\t\t\t\t\tconsole.log(TAG, e.name, \"updated event is not accessible anymore\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t} else if (update.operation === OperationType.DELETE) {\n\t\t\t\t\tthis.removeDaysForEvent([update.instanceListId, update.instanceId])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic pushClientOnlyEvent(month: number, newEvent: CalendarEvent, baseYear: number | null) {\n\t\tlet clientOnlyEventsOfThisMonth = this.clientOnlyEvents.get(month) ?? []\n\t\tclientOnlyEventsOfThisMonth.push({ baseYear, event: newEvent })\n\t\tthis.clientOnlyEvents.set(month, clientOnlyEventsOfThisMonth)\n\t}\n\n\tprivate createClientOnlyBirthdayEvent(contact: Contact, userId: Id) {\n\t\tconst encodedContactId = stringToBase64(contact._id.join(\"/\"))\n\t\tconst calendarId = `${userId}#${CLIENT_ONLY_CALENDAR_BIRTHDAYS_BASE_ID}`\n\t\tconst uid = generateUid(calendarId, Date.now())\n\n\t\tconst eventTitle = this.calendarModel.getBirthdayEventTitle(contact.firstName)\n\n\t\tlet fullDateIso = contact.birthdayIso!\n\t\t// Set the year because we can have birthdays without year\n\t\tif (contact.birthdayIso?.startsWith(\"--\")) {\n\t\t\tfullDateIso = contact.birthdayIso.replace(\"-\", \"1970\")\n\t\t}\n\n\t\tconst birthday = new Date(fullDateIso!)\n\n\t\t// Set up start and end date base on UTC.\n\t\t// Also increments a copy of startDate by one day and set it as endDate\n\t\tconst startDate = getAllDayDateUTC(new Date(birthday))\n\t\tconst endDate = getAllDayDateUTC(incrementDate(new Date(startDate), 1))\n\n\t\tconst newEvent = createCalendarEvent({\n\t\t\tsequence: \"0\",\n\t\t\trecurrenceId: null,\n\t\t\thashedUid: null,\n\t\t\tsummary: eventTitle,\n\t\t\tstartTime: startDate,\n\t\t\tendTime: endDate,\n\t\t\tlocation: \"\",\n\t\t\tdescription: \"\", // The only visible part of the event will be the title\n\t\t\talarmInfos: [],\n\t\t\torganizer: null,\n\t\t\tattendees: [],\n\t\t\tinvitedConfidentially: null,\n\t\t\trepeatRule: createRepeatRuleWithValues(RepeatPeriod.ANNUALLY, 1),\n\t\t\tuid,\n\t\t})\n\n\t\tnewEvent._id = [calendarId, `${generateLocalEventElementId(newEvent.startTime.getTime(), contact._id.join(\"/\"))}#${encodedContactId}`]\n\t\tnewEvent._ownerGroup = calendarId\n\t\treturn newEvent\n\t}\n\n\tasync loadContactsBirthdays(forceReload: boolean = false) {\n\t\t// Do not reload birthdays\n\t\tif (this.clientOnlyEvents.size > 0 && !forceReload) {\n\t\t\treturn\n\t\t}\n\n\t\t// Always work with an empty map of birthdays\n\t\tthis.clientOnlyEvents.clear()\n\n\t\tconst listId = await this.contactModel.getContactListId()\n\t\tif (listId == null) return []\n\n\t\tconst contacts = await this.entityClient.loadAll(ContactTypeRef, listId)\n\t\tconst filteredContacts = contacts\n\t\t\t.filter((contact) => contact.birthdayIso)\n\t\t\t.sort((a, b) => {\n\t\t\t\tconst birthdayContactA = isoDateToBirthday(a.birthdayIso!)\n\t\t\t\tconst birthdayContactB = isoDateToBirthday(b.birthdayIso!)\n\t\t\t\treturn (\n\t\t\t\t\tnew Date(`${birthdayContactA.month}/${birthdayContactA.day}`).getTime() -\n\t\t\t\t\tnew Date(`${birthdayContactB.month}/${birthdayContactB.day}`).getTime()\n\t\t\t\t)\n\t\t\t})\n\n\t\tfor (const contact of filteredContacts) {\n\t\t\tconst newEvent = this.createClientOnlyBirthdayEvent(contact, this.logins.getUserController().userId)\n\t\t\tthis.pushClientOnlyEvent(newEvent.startTime.getMonth(), newEvent, extractYearFromBirthday(contact.birthdayIso))\n\t\t}\n\n\t\treturn filteredContacts\n\t}\n\n\trefreshBirthdayCalendar(date: Date) {\n\t\tconst month = getMonthRange(date, this.zone)\n\t\tthis.addBirthdaysEventsIfNeeded(date, month, true)\n\t}\n\n\taddBirthdaysEventsIfNeeded(selectedDate: Date, monthRangeForRecurrence: CalendarTimeRange, removeEventOccurrences = false) {\n\t\tconst clientOnlyEventsThisMonth = this.clientOnlyEvents.get(selectedDate.getMonth())\n\t\tconst birthdaysOfThisMonth = clientOnlyEventsThisMonth?.filter((birthdayEvent) => isBirthdayEvent(birthdayEvent.event.uid))\n\t\tif (birthdaysOfThisMonth) {\n\t\t\tfor (const calendarEvent of birthdaysOfThisMonth) {\n\t\t\t\tconst age = calculateContactsAge(calendarEvent.baseYear, selectedDate.getFullYear())\n\t\t\t\tconst ageString = age ? `(${this.calendarModel.getAgeString(age)})` : \"\"\n\n\t\t\t\tif (removeEventOccurrences) {\n\t\t\t\t\tthis.removeDaysForEvent(calendarEvent.event._id)\n\t\t\t\t}\n\t\t\t\tthis.addDaysForRecurringEvent(\n\t\t\t\t\t{\n\t\t\t\t\t\t...calendarEvent.event,\n\t\t\t\t\t\tsummary: `${calendarEvent.event.summary} ${ageString}`,\n\t\t\t\t\t},\n\t\t\t\t\tmonthRangeForRecurrence,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n}\n"]}