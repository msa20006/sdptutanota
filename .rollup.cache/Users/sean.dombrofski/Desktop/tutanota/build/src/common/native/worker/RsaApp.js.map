{"version":3,"file":"RsaApp.js","sourceRoot":"","sources":["../../../../../src/common/native/worker/RsaApp.ts"],"names":[],"mappings":"AAIA,MAAM,OAAO,MAAM;IACW;IAAyD;IAAtF,YAA6B,kBAAsC,EAAmB,GAAe;QAAxE,uBAAkB,GAAlB,kBAAkB,CAAoB;QAAmB,QAAG,GAAH,GAAG,CAAY;IAAG,CAAC;IAEzG;;OAEG;IACH,KAAK,CAAC,OAAO,CAAC,SAAuB,EAAE,KAAiB;QACvD,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAA;QAE5C,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;IACxE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO,CAAC,UAAyB,EAAE,KAAiB;QACzD,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAA;IACnE,CAAC;CACD","sourcesContent":["import type { Randomizer, RsaPrivateKey, RsaPublicKey } from \"@tutao/tutanota-crypto\"\nimport type { RsaImplementation } from \"../../api/worker/crypto/RsaImplementation\"\nimport { NativeCryptoFacade } from \"../common/generatedipc/NativeCryptoFacade\"\n\nexport class RsaApp implements RsaImplementation {\n\tconstructor(private readonly nativeCryptoFacade: NativeCryptoFacade, private readonly rng: Randomizer) {}\n\n\t/**\n\t * Encrypt bytes with the provided publicKey\n\t */\n\tasync encrypt(publicKey: RsaPublicKey, bytes: Uint8Array): Promise<Uint8Array> {\n\t\tconst seed = this.rng.generateRandomData(32)\n\n\t\treturn await this.nativeCryptoFacade.rsaEncrypt(publicKey, bytes, seed)\n\t}\n\n\t/**\n\t * Decrypt bytes with the provided privateKey\n\t */\n\tasync decrypt(privateKey: RsaPrivateKey, bytes: Uint8Array): Promise<Uint8Array> {\n\t\treturn await this.nativeCryptoFacade.rsaDecrypt(privateKey, bytes)\n\t}\n}\n"]}