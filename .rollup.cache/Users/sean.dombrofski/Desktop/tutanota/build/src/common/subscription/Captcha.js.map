{"version":3,"file":"Captcha.js","sourceRoot":"","sources":["../../../../src/common/subscription/Captcha.ts"],"names":[],"mappings":"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","sourcesContent":["import { locator } from \"../api/main/CommonLocator.js\"\nimport { RegistrationCaptchaService } from \"../api/entities/sys/Services.js\"\nimport { createRegistrationCaptchaServiceData, createRegistrationCaptchaServiceGetData } from \"../api/entities/sys/TypeRefs.js\"\nimport { deviceConfig } from \"../misc/DeviceConfig.js\"\nimport { AccessDeactivatedError, AccessExpiredError, InvalidDataError } from \"../api/common/error/RestError.js\"\nimport { Dialog, DialogType } from \"../gui/base/Dialog.js\"\nimport { DialogHeaderBar, DialogHeaderBarAttrs } from \"../gui/base/DialogHeaderBar.js\"\nimport { ButtonType } from \"../gui/base/Button.js\"\nimport { lang } from \"../misc/LanguageViewModel.js\"\nimport m, { Children } from \"mithril\"\nimport { TextField } from \"../gui/base/TextField.js\"\nimport { uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport { theme } from \"../gui/theme\"\nimport { getColorLuminance, isMonochrome } from \"../gui/base/Color\"\n\n/**\n * Accepts multiple formats for a time of day and always returns 12h-format with leading zeros.\n * @param captchaInput\n * @returns {string} HH:MM if parsed, null otherwise\n */\nexport function parseCaptchaInput(captchaInput: string): string | null {\n\tif (captchaInput.match(/^[0-2]?[0-9]:[0-5]?[0-9]$/)) {\n\t\tlet [h, m] = captchaInput\n\t\t\t.trim()\n\t\t\t.split(\":\")\n\t\t\t.map((t) => Number(t))\n\n\t\t// regex correctly matches 0-59 minutes, but matches hours 0-29, so we need to make sure hours is 0-24\n\t\tif (h > 24) {\n\t\t\treturn null\n\t\t}\n\n\t\treturn [h % 12, m].map((a) => String(a).padStart(2, \"0\")).join(\":\")\n\t} else {\n\t\treturn null\n\t}\n}\n\n/**\n * @returns the auth token for the signup if the captcha was solved or no captcha was necessary, null otherwise\n *\n * TODO:\n *  * Refactor token usage\n */\nexport async function runCaptchaFlow(\n\tmailAddress: string,\n\tisBusinessUse: boolean,\n\tisPaidSubscription: boolean,\n\tcampaignToken: string | null,\n): Promise<string | null> {\n\ttry {\n\t\tconst captchaReturn = await locator.serviceExecutor.get(\n\t\t\tRegistrationCaptchaService,\n\t\t\tcreateRegistrationCaptchaServiceGetData({\n\t\t\t\ttoken: campaignToken,\n\t\t\t\tmailAddress,\n\t\t\t\tsignupToken: deviceConfig.getSignupToken(),\n\t\t\t\tbusinessUseSelected: isBusinessUse,\n\t\t\t\tpaidSubscriptionSelected: isPaidSubscription,\n\t\t\t}),\n\t\t)\n\t\tif (captchaReturn.challenge) {\n\t\t\ttry {\n\t\t\t\treturn await showCaptchaDialog(captchaReturn.challenge, captchaReturn.token)\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof InvalidDataError) {\n\t\t\t\t\tawait Dialog.message(\"createAccountInvalidCaptcha_msg\")\n\t\t\t\t\treturn runCaptchaFlow(mailAddress, isBusinessUse, isPaidSubscription, campaignToken)\n\t\t\t\t} else if (e instanceof AccessExpiredError) {\n\t\t\t\t\tawait Dialog.message(\"createAccountAccessDeactivated_msg\")\n\t\t\t\t\treturn null\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn captchaReturn.token\n\t\t}\n\t} catch (e) {\n\t\tif (e instanceof AccessDeactivatedError) {\n\t\t\tawait Dialog.message(\"createAccountAccessDeactivated_msg\")\n\t\t\treturn null\n\t\t} else {\n\t\t\tthrow e\n\t\t}\n\t}\n}\n\nfunction showCaptchaDialog(challenge: Uint8Array, token: string): Promise<string | null> {\n\treturn new Promise<string | null>((resolve, reject) => {\n\t\tlet dialog: Dialog\n\t\tlet captchaInput = \"\"\n\n\t\tconst cancelAction = () => {\n\t\t\tdialog.close()\n\t\t\tresolve(null)\n\t\t}\n\n\t\tconst okAction = () => {\n\t\t\tlet parsedInput = parseCaptchaInput(captchaInput)\n\n\t\t\t// User entered an incorrectly formatted time\n\t\t\tif (parsedInput == null) {\n\t\t\t\tDialog.message(\"captchaEnter_msg\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// The user entered a correctly formatted time, but not one that our captcha will ever give out (i.e. not *0 or *5)\n\t\t\tconst minuteOnesPlace = parsedInput[parsedInput.length - 1]\n\t\t\tif (minuteOnesPlace !== \"0\" && minuteOnesPlace !== \"5\") {\n\t\t\t\tDialog.message(\"createAccountInvalidCaptcha_msg\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tdialog.close()\n\t\t\tlocator.serviceExecutor\n\t\t\t\t.post(RegistrationCaptchaService, createRegistrationCaptchaServiceData({ token, response: parsedInput }))\n\t\t\t\t.then(() => {\n\t\t\t\t\tresolve(token)\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\treject(e)\n\t\t\t\t})\n\t\t}\n\n\t\tlet actionBarAttrs: DialogHeaderBarAttrs = {\n\t\t\tleft: [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\t\tclick: cancelAction,\n\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t},\n\t\t\t],\n\t\t\tright: [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"ok_action\",\n\t\t\t\t\tclick: okAction,\n\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t},\n\t\t\t],\n\t\t\tmiddle: \"captchaDisplay_label\",\n\t\t}\n\t\tconst imageData = `data:image/png;base64,${uint8ArrayToBase64(challenge)}`\n\n\t\tdialog = new Dialog(DialogType.EditSmall, {\n\t\t\tview: (): Children => {\n\t\t\t\t// The captcha is black-on-white, which will not look correct on anything where the background is not\n\t\t\t\t// white. We can use CSS filters to fix this.\n\t\t\t\tlet captchaFilter = {}\n\t\t\t\tif (theme.elevated_bg != null && isMonochrome(theme.elevated_bg)) {\n\t\t\t\t\tcaptchaFilter = {\n\t\t\t\t\t\tfilter: `invert(${1.0 - getColorLuminance(theme.elevated_bg)}`,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [\n\t\t\t\t\tm(DialogHeaderBar, actionBarAttrs),\n\t\t\t\t\tm(\".plr-l.pb\", [\n\t\t\t\t\t\tm(\"img.pt-ml.center-h.block\", {\n\t\t\t\t\t\t\tsrc: imageData,\n\t\t\t\t\t\t\talt: lang.get(\"captchaDisplay_label\"),\n\t\t\t\t\t\t\tstyle: captchaFilter,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\tlabel: lang.makeTranslation(\"captcha_input\", lang.get(\"captchaInput_label\") + \" (hh:mm)\"),\n\t\t\t\t\t\t\thelpLabel: () => lang.get(\"captchaInfo_msg\"),\n\t\t\t\t\t\t\tvalue: captchaInput,\n\t\t\t\t\t\t\toninput: (value) => (captchaInput = value),\n\t\t\t\t\t\t}),\n\t\t\t\t\t]),\n\t\t\t\t]\n\t\t\t},\n\t\t})\n\t\t\t.setCloseHandler(cancelAction)\n\t\t\t.show()\n\t})\n}\n"]}