{"version":3,"file":"GroupManagementFacade.js","sourceRoot":"","sources":["../../../../../../../src/common/api/worker/facades/lazy/GroupManagementFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { CounterType, GroupType, PublicKeyIdentifierType } from \"../../../common/TutanotaConstants.js\"\nimport type { ContactListGroupRoot, InternalGroupData, UserAreaGroupData } from \"../../../entities/tutanota/TypeRefs.js\"\nimport {\n\tcreateCreateMailGroupData,\n\tcreateDeleteGroupData,\n\tcreateInternalGroupData,\n\tcreateUserAreaGroupData,\n\tcreateUserAreaGroupDeleteData,\n\tcreateUserAreaGroupPostData,\n} from \"../../../entities/tutanota/TypeRefs.js\"\nimport { assertNotNull, freshVersioned, getFirstOrThrow, neverNull } from \"@tutao/tutanota-utils\"\nimport { createMembershipAddData, createMembershipRemoveData, Group, GroupTypeRef, PubEncKeyData, User, UserTypeRef } from \"../../../entities/sys/TypeRefs.js\"\nimport { CounterFacade } from \"./CounterFacade.js\"\nimport { EntityClient } from \"../../../common/EntityClient.js\"\nimport { assertWorkerOrNode } from \"../../../common/Env.js\"\nimport { IServiceExecutor } from \"../../../common/ServiceRequest.js\"\nimport { CalendarService, ContactListGroupService, MailGroupService, TemplateGroupService } from \"../../../entities/tutanota/Services.js\"\nimport { MembershipService } from \"../../../entities/sys/Services.js\"\nimport { UserFacade } from \"../UserFacade.js\"\nimport { ProgrammingError } from \"../../../common/error/ProgrammingError.js\"\nimport { PQFacade } from \"../PQFacade.js\"\nimport { KeyLoaderFacade, parseKeyVersion } from \"../KeyLoaderFacade.js\"\nimport { CacheManagementFacade } from \"./CacheManagementFacade.js\"\nimport { CryptoWrapper, encryptKeyWithVersionedKey, encryptString, VersionedEncryptedKey, VersionedKey } from \"../../crypto/CryptoWrapper.js\"\nimport { AsymmetricCryptoFacade } from \"../../crypto/AsymmetricCryptoFacade.js\"\nimport { AesKey, PQKeyPairs } from \"@tutao/tutanota-crypto\"\nimport { brandKeyMac, KeyAuthenticationFacade } from \"../KeyAuthenticationFacade.js\"\nimport { TutanotaError } from \"@tutao/tutanota-error\"\nimport { KeyVersion } from \"@tutao/tutanota-utils/dist/Utils.js\"\n\nassertWorkerOrNode()\n\nexport class GroupManagementFacade {\n\tconstructor(\n\t\tprivate readonly userFacade: UserFacade,\n\t\tprivate readonly counters: CounterFacade,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly pqFacade: PQFacade,\n\t\tprivate readonly keyLoaderFacade: KeyLoaderFacade,\n\t\tprivate readonly cacheManagementFacade: CacheManagementFacade,\n\t\tprivate readonly asymmetricCryptoFacade: AsymmetricCryptoFacade,\n\t\tprivate readonly cryptoWrapper: CryptoWrapper,\n\t\tprivate readonly keyAuthenticationFacade: KeyAuthenticationFacade,\n\t) {}\n\n\tasync readUsedSharedMailGroupStorage(group: Group): Promise<number> {\n\t\treturn this.counters.readCounterValue(CounterType.UserStorageLegacy, neverNull(group.customer), group._id)\n\t}\n\n\tasync createMailGroup(name: string, mailAddress: string): Promise<void> {\n\t\tconst adminGroupIds = this.userFacade.getGroupIds(GroupType.Admin)\n\t\tconst adminGroupId = getFirstOrThrow(adminGroupIds)\n\n\t\tlet adminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId)\n\t\tlet customerGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(this.userFacade.getGroupId(GroupType.Customer))\n\t\tlet mailGroupKey = freshVersioned(this.cryptoWrapper.aes256RandomKey())\n\n\t\tlet mailGroupInfoSessionKey = this.cryptoWrapper.aes256RandomKey()\n\t\tlet mailboxSessionKey = this.cryptoWrapper.aes256RandomKey()\n\t\tconst keyPair = await this.pqFacade.generateKeyPairs()\n\t\tconst mailGroupData = this.generateInternalGroupData(\n\t\t\tkeyPair,\n\t\t\tmailGroupKey.object,\n\t\t\tmailGroupInfoSessionKey,\n\t\t\tadminGroupId,\n\t\t\tadminGroupKey,\n\t\t\tcustomerGroupKey,\n\t\t)\n\n\t\tconst mailEncMailboxSessionKey = encryptKeyWithVersionedKey(mailGroupKey, mailboxSessionKey)\n\n\t\tconst data = createCreateMailGroupData({\n\t\t\tmailAddress,\n\t\t\tencryptedName: encryptString(mailGroupInfoSessionKey, name),\n\t\t\tmailEncMailboxSessionKey: mailEncMailboxSessionKey.key,\n\t\t\tgroupData: mailGroupData,\n\t\t})\n\t\tawait this.serviceExecutor.post(MailGroupService, data)\n\t}\n\n\t/**\n\t * Generates keys for the new group and prepares the group data object to create the group.\n\t *\n\t * @param name Name of the group\n\t */\n\tasync generateUserAreaGroupData(name: string): Promise<UserAreaGroupData> {\n\t\t// adminGroup Is not set when generating new customer, then the admin group will be the admin of the customer\n\t\t// adminGroupKey Is not set when generating calendar as normal user\n\t\tconst userGroup = await this.entityClient.load(GroupTypeRef, this.userFacade.getUserGroupId())\n\t\tconst adminGroupId = neverNull(userGroup.admin) // user group has always admin group\n\n\t\tlet adminGroupKey: VersionedKey | null = null\n\n\t\tif (this.userFacade.getAllGroupIds().indexOf(adminGroupId) !== -1) {\n\t\t\t// getGroupKey throws an error if user is not member of that group - so check first\n\t\t\tadminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId)\n\t\t}\n\n\t\tconst customerGroupId = this.userFacade.getGroupId(GroupType.Customer)\n\t\tconst customerGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(customerGroupId)\n\t\tconst userGroupKey = this.userFacade.getCurrentUserGroupKey()\n\t\tconst groupKey = freshVersioned(this.cryptoWrapper.aes256RandomKey())\n\n\t\tconst groupRootSessionKey = this.cryptoWrapper.aes256RandomKey()\n\t\tconst groupInfoSessionKey = this.cryptoWrapper.aes256RandomKey()\n\n\t\tconst userEncGroupKey = encryptKeyWithVersionedKey(userGroupKey, groupKey.object)\n\t\tconst adminEncGroupKey = adminGroupKey ? encryptKeyWithVersionedKey(adminGroupKey, groupKey.object) : null\n\t\tconst customerEncGroupInfoSessionKey = encryptKeyWithVersionedKey(customerGroupKey, groupInfoSessionKey)\n\t\tconst groupEncGroupRootSessionKey = encryptKeyWithVersionedKey(groupKey, groupRootSessionKey)\n\n\t\treturn createUserAreaGroupData({\n\t\t\tgroupEncGroupRootSessionKey: groupEncGroupRootSessionKey.key,\n\t\t\tcustomerEncGroupInfoSessionKey: customerEncGroupInfoSessionKey.key,\n\t\t\tuserEncGroupKey: userEncGroupKey.key,\n\t\t\tgroupInfoEncName: encryptString(groupInfoSessionKey, name),\n\t\t\tadminEncGroupKey: adminEncGroupKey?.key ?? null,\n\t\t\tadminGroup: adminGroupId,\n\t\t\tcustomerKeyVersion: customerEncGroupInfoSessionKey.encryptingKeyVersion.toString(),\n\t\t\tuserKeyVersion: userGroupKey.version.toString(),\n\t\t\tadminKeyVersion: adminEncGroupKey?.encryptingKeyVersion.toString() ?? null,\n\t\t})\n\t}\n\n\tasync createCalendar(name: string): Promise<{ user: User; group: Group }> {\n\t\tconst groupData = await this.generateUserAreaGroupData(name)\n\t\tconst postData = createUserAreaGroupPostData({\n\t\t\tgroupData,\n\t\t})\n\t\tconst postGroupData = await this.serviceExecutor.post(CalendarService, postData, { sessionKey: this.cryptoWrapper.aes256RandomKey() }) // we expect a session key to be defined as the entity is marked encrypted\n\t\tconst group = await this.entityClient.load(GroupTypeRef, postGroupData.group)\n\t\tconst user = await this.cacheManagementFacade.reloadUser()\n\n\t\treturn { user, group }\n\t}\n\n\tasync createTemplateGroup(name: string): Promise<Id> {\n\t\tconst groupData = await this.generateUserAreaGroupData(name)\n\t\tconst serviceData = createUserAreaGroupPostData({\n\t\t\tgroupData,\n\t\t})\n\n\t\tconst postGroupData = await this.serviceExecutor.post(TemplateGroupService, serviceData, { sessionKey: this.cryptoWrapper.aes256RandomKey() }) // we expect a session key to be defined as the entity is marked encrypted\n\n\t\tawait this.cacheManagementFacade.reloadUser()\n\n\t\treturn postGroupData.group\n\t}\n\n\tasync createContactListGroup(name: string): Promise<Group> {\n\t\tconst groupData = await this.generateUserAreaGroupData(name)\n\t\tconst serviceData = createUserAreaGroupPostData({\n\t\t\tgroupData,\n\t\t})\n\t\tconst postGroupData = await this.serviceExecutor.post(ContactListGroupService, serviceData, { sessionKey: this.cryptoWrapper.aes256RandomKey() }) // we expect a session key to be defined as the entity is marked encrypted\n\t\tconst group = await this.entityClient.load(GroupTypeRef, postGroupData.group)\n\t\tawait this.cacheManagementFacade.reloadUser()\n\n\t\treturn group\n\t}\n\n\tasync deleteContactListGroup(groupRoot: ContactListGroupRoot) {\n\t\tconst serviceData = createUserAreaGroupDeleteData({\n\t\t\tgroup: groupRoot._id,\n\t\t})\n\t\tawait this.serviceExecutor.delete(ContactListGroupService, serviceData)\n\t}\n\n\t/**\n\t * Assemble the data transfer type to create a new internal group on the server.\n\t * The group key version is not needed because it is always zero.\n\t */\n\tgenerateInternalGroupData(\n\t\tkeyPair: PQKeyPairs,\n\t\tgroupKey: AesKey,\n\t\tgroupInfoSessionKey: AesKey,\n\t\tadminGroupId: Id | null,\n\t\tadminGroupKey: VersionedKey,\n\t\townerGroupKey: VersionedKey,\n\t): InternalGroupData {\n\t\tconst adminEncGroupKey = encryptKeyWithVersionedKey(adminGroupKey, groupKey)\n\t\tconst ownerEncGroupInfoSessionKey = encryptKeyWithVersionedKey(ownerGroupKey, groupInfoSessionKey)\n\n\t\treturn createInternalGroupData({\n\t\t\tpubRsaKey: null,\n\t\t\tgroupEncPrivRsaKey: null,\n\t\t\tpubEccKey: keyPair.eccKeyPair.publicKey,\n\t\t\tgroupEncPrivEccKey: this.cryptoWrapper.encryptEccKey(groupKey, keyPair.eccKeyPair.privateKey),\n\t\t\tpubKyberKey: this.cryptoWrapper.kyberPublicKeyToBytes(keyPair.kyberKeyPair.publicKey),\n\t\t\tgroupEncPrivKyberKey: this.cryptoWrapper.encryptKyberKey(groupKey, keyPair.kyberKeyPair.privateKey),\n\t\t\tadminGroup: adminGroupId,\n\t\t\tadminEncGroupKey: adminEncGroupKey.key,\n\t\t\townerEncGroupInfoSessionKey: ownerEncGroupInfoSessionKey.key,\n\t\t\tadminKeyVersion: adminEncGroupKey.encryptingKeyVersion.toString(),\n\t\t\townerKeyVersion: ownerEncGroupInfoSessionKey.encryptingKeyVersion.toString(),\n\t\t})\n\t}\n\n\tasync addUserToGroup(user: User, groupId: Id): Promise<void> {\n\t\tconst userGroupKey = await this.getCurrentGroupKeyViaAdminEncGKey(user.userGroup.group)\n\t\tconst groupKey = await this.getCurrentGroupKeyViaAdminEncGKey(groupId)\n\t\tconst symEncGKey = encryptKeyWithVersionedKey(userGroupKey, groupKey.object)\n\t\tconst data = createMembershipAddData({\n\t\t\tuser: user._id,\n\t\t\tgroup: groupId,\n\t\t\tsymEncGKey: symEncGKey.key,\n\t\t\tgroupKeyVersion: String(groupKey.version),\n\t\t\tsymKeyVersion: symEncGKey.encryptingKeyVersion.toString(),\n\t\t})\n\t\tawait this.serviceExecutor.post(MembershipService, data)\n\t}\n\n\tasync removeUserFromGroup(userId: Id, groupId: Id): Promise<void> {\n\t\tconst data = createMembershipRemoveData({\n\t\t\tuser: userId,\n\t\t\tgroup: groupId,\n\t\t})\n\t\tawait this.serviceExecutor.delete(MembershipService, data)\n\t}\n\n\tasync deactivateGroup(group: Group, restore: boolean): Promise<void> {\n\t\tconst data = createDeleteGroupData({\n\t\t\tgroup: group._id,\n\t\t\trestore,\n\t\t})\n\n\t\tif (group.type === GroupType.Mail) {\n\t\t\tawait this.serviceExecutor.delete(MailGroupService, data)\n\t\t} else {\n\t\t\tthrow new Error(\"invalid group type for deactivation\")\n\t\t}\n\t}\n\n\tasync getGroupKeyViaUser(groupId: Id, version: KeyVersion, viaUser: Id): Promise<AesKey> {\n\t\tconst currentGroupKey = await this.getCurrentGroupKeyViaUser(groupId, viaUser)\n\t\treturn this.keyLoaderFacade.loadSymGroupKey(groupId, version, currentGroupKey)\n\t}\n\n\t/**\n\t * Get a group key for any group we are admin and know some member of.\n\t *\n\t * Unlike {@link getCurrentGroupKeyViaAdminEncGKey} this should work for any group because we will actually go a \"long\" route of decrypting userGroupKey of the\n\t * member and decrypting group key with that.\n\t */\n\tasync getCurrentGroupKeyViaUser(groupId: Id, viaUser: Id): Promise<VersionedKey> {\n\t\tconst user = await this.entityClient.load(UserTypeRef, viaUser)\n\t\tconst membership = user.memberships.find((m) => m.group === groupId)\n\t\tif (membership == null) {\n\t\t\tthrow new Error(`User doesn't have this group membership! User: ${viaUser} groupId: ${groupId}`)\n\t\t}\n\t\tconst requiredUserGroupKeyVersion = membership.symKeyVersion\n\t\tconst requiredUserGroupKey = await this.getGroupKeyViaAdminEncGKey(user.userGroup.group, parseKeyVersion(requiredUserGroupKeyVersion))\n\n\t\tconst key = this.cryptoWrapper.decryptKey(requiredUserGroupKey, membership.symEncGKey)\n\t\tconst version = parseKeyVersion(membership.groupKeyVersion)\n\n\t\treturn { object: key, version }\n\t}\n\n\tasync getGroupKeyViaAdminEncGKey(groupId: Id, version: KeyVersion): Promise<AesKey> {\n\t\tif (this.userFacade.hasGroup(groupId)) {\n\t\t\t// e.g. I am a global admin and want to add another user to the global admin group\n\t\t\treturn this.keyLoaderFacade.loadSymGroupKey(groupId, version)\n\t\t} else {\n\t\t\tconst currentGroupKey = await this.getCurrentGroupKeyViaAdminEncGKey(groupId)\n\t\t\treturn this.keyLoaderFacade.loadSymGroupKey(groupId, version, currentGroupKey)\n\t\t}\n\t}\n\n\t/**\n\t * @returns true if the group currently has an adminEncGKey. This may be an asymmetrically encrypted one.\n\t */\n\thasAdminEncGKey(group: Group) {\n\t\treturn (group.adminGroupEncGKey != null && group.adminGroupEncGKey.length !== 0) || group.pubAdminGroupEncGKey != null\n\t}\n\n\t/**\n\t * Get a group key for certain group types.\n\t *\n\t * Some groups (e.g. user groups or shared mailboxes) have adminGroupEncGKey set on creation. For those groups we can fairly easily get a group key without\n\t * decrypting userGroupKey of some member of that group.\n\t */\n\tasync getCurrentGroupKeyViaAdminEncGKey(groupId: Id): Promise<VersionedKey> {\n\t\tif (this.userFacade.hasGroup(groupId)) {\n\t\t\t// e.g. I am a global admin and want to add another user to the global admin group\n\t\t\t// or I am an admin and I am a member of the target group (eg: shared mailboxes)\n\t\t\treturn this.keyLoaderFacade.getCurrentSymGroupKey(groupId)\n\t\t} else {\n\t\t\tconst group = await this.cacheManagementFacade.reloadGroup(groupId)\n\t\t\tif (!this.hasAdminEncGKey(group)) {\n\t\t\t\tthrow new ProgrammingError(\"Group doesn't have adminGroupEncGKey, you can't get group key this way\")\n\t\t\t}\n\t\t\tif (!(group.admin && this.userFacade.hasGroup(group.admin))) {\n\t\t\t\tthrow new Error(`The user is not a member of the admin group ${group.admin} when trying to get the group key for group ${groupId}`)\n\t\t\t}\n\n\t\t\t// e.g. I am a member of the group that administrates group G and want to add a new member to G\n\t\t\tconst requiredAdminKeyVersion = parseKeyVersion(group.adminGroupKeyVersion ?? \"0\")\n\t\t\tif (group.adminGroupEncGKey != null) {\n\t\t\t\treturn await this.decryptViaSymmetricAdminGKey(\n\t\t\t\t\tgroup,\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: group.adminGroupEncGKey,\n\t\t\t\t\t\tencryptingKeyVersion: requiredAdminKeyVersion,\n\t\t\t\t\t},\n\t\t\t\t\tparseKeyVersion(group.groupKeyVersion),\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\t// assume that the group is a userGroup. otherwise pubAdminGroupEncGKey cannot be set\n\t\t\t\treturn await this.decryptViaAsymmetricAdminGKey(group, assertNotNull(group.pubAdminGroupEncGKey))\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async decryptViaSymmetricAdminGKey(group: Group, encryptedGroupKey: VersionedEncryptedKey, encryptedKeyVersion: KeyVersion): Promise<VersionedKey> {\n\t\tconst requiredAdminGroupKey = await this.keyLoaderFacade.loadSymGroupKey(assertNotNull(group.admin), encryptedGroupKey.encryptingKeyVersion)\n\t\tconst decryptedKey = this.cryptoWrapper.decryptKey(requiredAdminGroupKey, encryptedGroupKey.key)\n\t\treturn { object: decryptedKey, version: encryptedKeyVersion }\n\t}\n\n\t/**\n\t * @param userGroup the group for which we are trying to get the key\n\t * @param pubAdminEncUserKeyData some version of the group key encrypted with some version of the public admin group key. This can be the current one from the group or one of the former group keys.\n\t * @private\n\t */\n\tprivate async decryptViaAsymmetricAdminGKey(userGroup: Group, pubAdminEncUserKeyData: PubEncKeyData): Promise<VersionedKey> {\n\t\tconst requiredAdminGroupKeyPair = await this.keyLoaderFacade.loadKeypair(\n\t\t\tassertNotNull(userGroup.admin),\n\t\t\tparseKeyVersion(pubAdminEncUserKeyData.recipientKeyVersion),\n\t\t)\n\t\tconst decryptedUserGroupKey = (\n\t\t\tawait this.asymmetricCryptoFacade.decryptSymKeyWithKeyPairAndAuthenticate(requiredAdminGroupKeyPair, pubAdminEncUserKeyData, {\n\t\t\t\tidentifier: userGroup._id,\n\t\t\t\tidentifierType: PublicKeyIdentifierType.GROUP_ID,\n\t\t\t})\n\t\t).decryptedAesKey\n\n\t\t// this function is called recursively. therefore we must not return the group key version from the group but from the pubAdminEncUserKeyData\n\t\tconst versionedDecryptedUserGroupKey = {\n\t\t\tobject: decryptedUserGroupKey,\n\t\t\tversion: parseKeyVersion(assertNotNull(pubAdminEncUserKeyData.symKeyMac).taggedKeyVersion),\n\t\t}\n\n\t\tawait this.verifyUserGroupKeyMac(pubAdminEncUserKeyData, userGroup, versionedDecryptedUserGroupKey)\n\n\t\treturn versionedDecryptedUserGroupKey\n\t}\n\n\tprivate async verifyUserGroupKeyMac(pubEncKeyData: PubEncKeyData, userGroup: Group, receivedUserGroupKey: VersionedKey) {\n\t\tconst givenUserGroupKeyMac = brandKeyMac(assertNotNull(pubEncKeyData.symKeyMac))\n\n\t\t// The given mac is authenticated by the previous user group key, so we can get the version from there.\n\t\tconst previousUserGroupKeyVersion = parseKeyVersion(givenUserGroupKeyMac.taggingKeyVersion)\n\t\tconst recipientAdminGroupKeyVersion = parseKeyVersion(pubEncKeyData.recipientKeyVersion)\n\n\t\t// get previous user group key: ag1 -> ag0 -> ug0\n\t\tconst formerGroupKey = await this.keyLoaderFacade.loadFormerGroupKeyInstance(userGroup, previousUserGroupKeyVersion)\n\t\tlet previousUserGroupKey: VersionedKey\n\t\tif (formerGroupKey.adminGroupEncGKey != null) {\n\t\t\tpreviousUserGroupKey = await this.decryptViaSymmetricAdminGKey(\n\t\t\t\tuserGroup,\n\t\t\t\t{\n\t\t\t\t\tkey: formerGroupKey.adminGroupEncGKey,\n\t\t\t\t\tencryptingKeyVersion: parseKeyVersion(assertNotNull(formerGroupKey.adminGroupKeyVersion)),\n\t\t\t\t},\n\t\t\t\tpreviousUserGroupKeyVersion,\n\t\t\t)\n\t\t} else if (formerGroupKey.pubAdminGroupEncGKey != null) {\n\t\t\tconst userGroupKeyMac = assertNotNull(formerGroupKey.pubAdminGroupEncGKey.symKeyMac)\n\t\t\t// recurse, but expect to hit the end _before_ version 0, which should always be symmetrically encrypted\n\t\t\tif (userGroupKeyMac.taggedKeyVersion === \"0\") {\n\t\t\t\tthrow new TutanotaError(\"UserGroupKeyNotTrustedError\", \"cannot establish trust on the user group key\")\n\t\t\t}\n\t\t\tpreviousUserGroupKey = await this.decryptViaAsymmetricAdminGKey(userGroup, formerGroupKey.pubAdminGroupEncGKey)\n\t\t} else {\n\t\t\tthrow new TutanotaError(\"MissingAdminEncGroupKeyError\", \"cannot verify user group key\")\n\t\t}\n\n\t\tthis.keyAuthenticationFacade.verifyTag(\n\t\t\t{\n\t\t\t\ttagType: \"USER_GROUP_KEY_TAG\",\n\t\t\t\tsourceOfTrust: { currentUserGroupKey: previousUserGroupKey.object },\n\t\t\t\tuntrustedKey: { newUserGroupKey: receivedUserGroupKey.object },\n\t\t\t\tbindingData: {\n\t\t\t\t\tuserGroupId: userGroup._id,\n\t\t\t\t\tadminGroupId: assertNotNull(userGroup.admin),\n\t\t\t\t\tcurrentUserGroupKeyVersion: previousUserGroupKey.version,\n\t\t\t\t\tnewUserGroupKeyVersion: receivedUserGroupKey.version,\n\t\t\t\t\tnewAdminGroupKeyVersion: recipientAdminGroupKeyVersion,\n\t\t\t\t},\n\t\t\t},\n\t\t\tgivenUserGroupKeyMac.tag,\n\t\t)\n\t}\n}\n"]}