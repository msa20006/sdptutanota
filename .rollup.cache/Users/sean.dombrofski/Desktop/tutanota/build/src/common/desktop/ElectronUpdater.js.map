{"version":3,"file":"ElectronUpdater.js","sourceRoot":"","sources":["../../../../src/common/desktop/ElectronUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DesktopNotifier } from \"./DesktopNotifier\"\nimport { NotificationResult } from \"./DesktopNotifier\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport type { DesktopConfig } from \"./config/DesktopConfig\"\nimport { assertNotNull, delay, downcast, neverNull } from \"@tutao/tutanota-utils\"\nimport { DesktopNativeCryptoFacade } from \"./DesktopNativeCryptoFacade\"\nimport type { App, NativeImage } from \"electron\"\nimport type { UpdaterWrapper } from \"./UpdaterWrapper\"\nimport type { UpdateDownloadedEvent, UpdateInfo } from \"electron-updater\"\nimport { BuildConfigKey, DesktopConfigKey } from \"./config/ConfigKeys\"\nimport { FsExports } from \"./ElectronExportTypes.js\"\n\n/**\n * Wraps electron-updater for Tutanota Desktop\n *\n * To test:\n * run local server to serve updates\n * run 'node dist -l local' to build initial client\n * run 'cp ./build/desktop-snapshot/tutanota-desktop-snapshot-linux.AppImage ~/tutanota-desktop-snapshot-linux.AppImage'\n * run '~/tutanota-desktop-snapshot-linux.AppImage'\n * run 'node dist -el local' to build an update when it's needed (takes about 20s)\n *\n */\n\nconst TAG = \"[ElectronUpdater]\"\n\ntype LoggerFn = (_: string, ...args: any) => void\ntype UpdaterLogger = { debug: LoggerFn; info: LoggerFn; warn: LoggerFn; error: LoggerFn; silly: LoggerFn; verbose: LoggerFn }\n/** we add the signature to the UpdateInfo when building the client */\ntype TutanotaUpdateInfo = UpdateInfo & { signature: string }\ntype IntervalID = ReturnType<typeof setTimeout>\n\n// re-do the type as opposed to doing typeof because it doesn't work otherwise\nexport type IntervalSetter = (fn: (...arr: Array<unknown>) => unknown, time?: number) => IntervalID\n\nexport class ElectronUpdater {\n\tprivate updatePollInterval: IntervalID | null = null\n\tprivate checkUpdateSignature: boolean = false\n\tprivate errorCount: number = 0\n\tprivate readonly logger: UpdaterLogger\n\tprivate _updateInfo: TutanotaUpdateInfo | null = null\n\n\treadonly enableAutoUpdateListener = () => {\n\t\tthis.start()\n\t}\n\n\tget updateInfo(): TutanotaUpdateInfo | null {\n\t\treturn this._updateInfo\n\t}\n\n\tconstructor(\n\t\tprivate readonly conf: DesktopConfig,\n\t\tprivate readonly notifier: DesktopNotifier,\n\t\tprivate readonly crypto: DesktopNativeCryptoFacade,\n\t\tprivate readonly app: App,\n\t\tprivate readonly icon: NativeImage,\n\t\tprivate readonly updater: UpdaterWrapper,\n\t\tprivate readonly fs: FsExports,\n\t\tprivate readonly scheduler: IntervalSetter = setInterval,\n\t) {\n\t\tthis.logger = {\n\t\t\tinfo: (m: string, ...args: any) => console.log.apply(console, [TAG, \"INFO:\", m].concat(args)),\n\t\t\twarn: (m: string, ...args: any) => console.warn.apply(console, [TAG, \"WARN:\", m].concat(args)),\n\t\t\terror: (m: string, ...args: any) => console.error.apply(console, [TAG, \"ERROR:\", m].concat(args)),\n\t\t\tverbose: (m: string, ...args: any) => console.log.apply(console, [TAG, \":\", m].concat(args)),\n\t\t\tdebug: (m: string, ...args: any) => console.log.apply(console, [TAG, \"DEBUG:\", m].concat(args)),\n\t\t\tsilly: (m: string, ...args: any) => console.log.apply(console, [TAG, \"DEBUG:\", m].concat(args)),\n\t\t}\n\t\tconst autoUpdater = this.updater.electronUpdater\n\t\tautoUpdater.logger = this.logger\n\t\t// default behaviour is to just dl the update as soon as found, but we want to check the signature\n\t\t// before telling the updater to get the file.\n\t\tautoUpdater.autoDownload = false\n\t\tautoUpdater.autoInstallOnAppQuit = false\n\t\tautoUpdater\n\t\t\t.on(\"checking-for-update\", () => {\n\t\t\t\tthis.logger.info(\"checking-for-update\")\n\t\t\t})\n\t\t\t.on(\"update-available\", () => {\n\t\t\t\tthis.logger.info(\"update-available\")\n\t\t\t\tthis.stopPolling()\n\t\t\t\tthis.downloadUpdate()\n\t\t\t})\n\t\t\t.on(\"update-not-available\", (info) => {\n\t\t\t\tthis.logger.info(\"update not available:\", info)\n\t\t\t})\n\t\t\t.on(\"download-progress\", (prg) => {\n\t\t\t\tthis.logger.debug(\"update dl progress:\", prg)\n\t\t\t})\n\t\t\t.on(\"update-downloaded\", async (info: UpdateDownloadedEvent & { signature: string }) => {\n\t\t\t\tthis._updateInfo = info\n\t\t\t\tthis.logger.info(`update-downloaded: ${JSON.stringify(info)}`)\n\t\t\t\tthis.stopPolling()\n\n\t\t\t\tconst data = await this.fs.promises.readFile(info.downloadedFile)\n\t\t\t\tconst publicKeys: string[] = await this.conf.getConst(BuildConfigKey.pubKeys)\n\t\t\t\tconst verified = publicKeys.some((pk) => this.verifySignature(pk, assertNotNull(info), data))\n\n\t\t\t\tif (verified) {\n\t\t\t\t\tthis.notifyAndInstall(info)\n\t\t\t\t} else {\n\t\t\t\t\tthis._updateInfo = null\n\t\t\t\t\tthis.logger.warn(`all signatures invalid, could not update. Deleting ${info.downloadedFile}.`)\n\t\t\t\t\tthis.fs.promises.unlink(info.downloadedFile)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on(\"error\", (e) => {\n\t\t\t\tthis.stopPolling()\n\t\t\t\tthis.errorCount += 1\n\t\t\t\tconst messageEvent: { message: string } = downcast(e)\n\t\t\t\tif (this.errorCount >= 5) {\n\t\t\t\t\tthis.logger.error(`Auto Update Error ${this.errorCount}, polling is stopped:\\n${messageEvent.message}`)\n\n\t\t\t\t\t// Avoid spamming the notification to the user\n\t\t\t\t\tif (this.errorCount === 5) this.notifyUpdateError()\n\n\t\t\t\t\tthis.logger.error(`Update failed multiple times. Last error:\\n${messageEvent.message}`)\n\t\t\t\t} else {\n\t\t\t\t\tthis.logger.error(`Auto Update Error ${this.errorCount}, continuing polling:\\n${messageEvent.message}`)\n\t\t\t\t\tthis.startPolling()\n\t\t\t\t}\n\t\t\t})\n\n\t\t/**\n\t\t * this replaces the autoInstallOnAppQuit feature of autoUpdater,\n\t\t * which causes the app to uninstall itself if it is installed for\n\t\t * all users on a windows system.\n\t\t *\n\t\t * should be removed once https://github.com/electron-userland/electron-builder/issues/4815\n\t\t * is resolved.\n\t\t */\n\t\tthis.app.once(\"before-quit\", (ev) => {\n\t\t\tif (this._updateInfo) {\n\t\t\t\tev.preventDefault()\n\t\t\t\tthis._updateInfo = null\n\t\t\t\tif (process.platform !== \"win32\") {\n\t\t\t\t\t// We don't do auto-update on close on Windows because it launches the installer which is pretty annoying.\n\t\t\t\t\t// We have to start the installer wizard (first argument to install being \"false\") because without it update for\n\t\t\t\t\t// system-wide installation does not work.\n\t\t\t\t\t// see https://github.com/tutao/tutanota/issues/1413#issuecomment-796737959\n\t\t\t\t\t// see c4b12e9\n\n\t\t\t\t\t// quitAndInstall takes two arguments which are only used for windows and linux updater.\n\t\t\t\t\t// isSilent and isForceRunAfter. If the first one is set to false then the second one is set to true implicitly.\n\t\t\t\t\t// we want a silent install on quit anyway (as we disabled update on quit for windows) and no restart of the application.\n\t\t\t\t\tthis.updater.electronUpdater.quitAndInstall(true, false)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tasync start() {\n\t\tif (!this.updater.updatesEnabledInBuild()) {\n\t\t\tthis.logger.debug(\"no update info on disk, disabling updater.\")\n\t\t\tthis.conf.setVar(DesktopConfigKey.showAutoUpdateOption, false)\n\t\t\treturn\n\t\t}\n\n\t\t// if we got here, we could theoretically download updates.\n\t\t// show the option in the settings menu\n\t\tthis.conf.setVar(DesktopConfigKey.showAutoUpdateOption, true)\n\n\t\t// if user changes auto update setting, we want to know\n\t\tthis.conf\n\t\t\t.removeListener(DesktopConfigKey.enableAutoUpdate, this.enableAutoUpdateListener)\n\t\t\t.on(DesktopConfigKey.enableAutoUpdate, this.enableAutoUpdateListener)\n\n\t\tif (!(await this.conf.getVar(DesktopConfigKey.enableAutoUpdate))) {\n\t\t\tthis.stopPolling()\n\t\t\treturn\n\t\t}\n\t\tif (this.updatePollInterval) {\n\t\t\t//already running\n\t\t\t// TODO: reset any other fields?\n\t\t\treturn\n\t\t}\n\n\t\tthis.checkUpdateSignature = await this.conf.getConst(BuildConfigKey.checkUpdateSignature)\n\t\tthis.startPolling()\n\t\t// the first check is immediate, all others are done with a delay\n\t\t// and random exponential backoff\n\t\tthis.checkUpdate()\n\t}\n\n\tprivate verifySignature(pubKey: string, updateInfo: TutanotaUpdateInfo, data: Uint8Array): boolean {\n\t\tif (!this.checkUpdateSignature) {\n\t\t\treturn true\n\t\t}\n\t\ttry {\n\t\t\tconst signature = Buffer.from(updateInfo.signature, \"base64\")\n\n\t\t\tif (this.crypto.verifySignature(pubKey, data, signature)) {\n\t\t\t\tthis.logger.info(\"Signature verification successful, installing update\")\n\t\t\t\treturn true\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.logger.error(\"Failed to verify update signature\", e)\n\t\t\treturn false\n\t\t}\n\t\treturn false\n\t}\n\n\tsetUpdateDownloadedListener(listener: () => void): void {\n\t\tthis.updater.electronUpdater.on(\"update-downloaded\", listener)\n\t}\n\n\tprivate async startPolling() {\n\t\tif (!this.updatePollInterval) {\n\t\t\t// sets the poll interval at a random multiple of (base value)\n\t\t\t// between (base value) and (base value) * 2^(errorCount)\n\t\t\tconst multiplier = Math.floor(Math.random() * Math.pow(2, this.errorCount)) + 1\n\t\t\tconst interval = await this.conf.getConst(BuildConfigKey.pollingInterval)\n\t\t\tthis.updatePollInterval = this.scheduler(() => this.checkUpdate(), interval * multiplier)\n\t\t}\n\t}\n\n\tprivate async checkUpdateThrottleTime() {\n\t\t// After 5 unsuccessful attempts to update, we start throttling the user\n\t\t// to avoid too many calls to our servers\n\t\tif (this.errorCount >= 5) {\n\t\t\t// Half of a second * errorCount\n\t\t\tconst throttleTime = 500 * this.errorCount\n\t\t\tthis.logger.debug(`Auto Update: throttling manual update attempt # ${this.errorCount} by ${throttleTime}`)\n\t\t\tawait delay(throttleTime)\n\t\t}\n\t}\n\n\tprivate stopPolling() {\n\t\tclearInterval(neverNull(this.updatePollInterval))\n\t\tthis.updatePollInterval = null\n\t}\n\n\t/**\n\t * try to get the update:\n\t * check update availability,\n\t * check signatures\n\t * try to download\n\t *\n\t * if the signature check is successful, further handling of the update\n\t * will be done by the 'update-downloaded' callback set up in the constructor\n\t * @returns {Promise} true if an update was downloaded, false otherwise\n\t */\n\tprivate async checkUpdate(): Promise<boolean> {\n\t\tconst autoUpdater = await this.updater.electronUpdater\n\t\treturn new Promise((resolve) => {\n\t\t\tlet cleanup = (hasUpdate: boolean) => {\n\t\t\t\tcleanup = (hasUpdate) => {}\n\t\t\t\tresolve(hasUpdate)\n\t\t\t\tautoUpdater.removeListener(\"update-not-available\", updateNotAvailable)\n\t\t\t\tautoUpdater.removeListener(\"update-downloaded\", updateDownloaded)\n\t\t\t\tautoUpdater.removeListener(\"error\", updateNotAvailable)\n\t\t\t}\n\t\t\tconst updateNotAvailable = () => cleanup(false)\n\t\t\tconst updateDownloaded = () => cleanup(true)\n\t\t\tautoUpdater.checkForUpdates().catch((e: Error) => {\n\t\t\t\tthis.logger.error(\"Update check failed,\", e.message)\n\t\t\t\tcleanup(false)\n\t\t\t})\n\n\t\t\tautoUpdater.once(\"update-not-available\", updateNotAvailable).once(\"update-downloaded\", updateDownloaded).once(\"error\", updateNotAvailable)\n\t\t})\n\t}\n\n\t/**\n\t * check for update if none is currently available,\n\t * quit and install otherwise\n\t * @returns {Promise<boolean>} True if an update is available and the next call will install it, false otherwise.\n\t */\n\tmanualUpdate(): Promise<boolean> {\n\t\treturn this.checkUpdateThrottleTime().then(() => {\n\t\t\tif (!this.updateInfo) {\n\t\t\t\treturn this.checkUpdate()\n\t\t\t}\n\t\t\tthis.installUpdate()\n\t\t\treturn Promise.resolve(false)\n\t\t})\n\t}\n\n\tprivate async downloadUpdate(): Promise<Array<string>> {\n\t\tthis.logger.debug(\"downloading\")\n\t\ttry {\n\t\t\treturn await this.updater.electronUpdater.downloadUpdate()\n\t\t} catch (e) {\n\t\t\tthis.logger.error(\"Update Download failed,\", e.message)\n\t\t\t// no files have been dl'd\n\t\t\treturn []\n\t\t}\n\t}\n\n\tprivate async notifyAndInstall(info: TutanotaUpdateInfo): Promise<void> {\n\t\tthis.logger.debug(\"notifying for update\")\n\t\tthis.notifier\n\t\t\t.showOneShot({\n\t\t\t\ttitle: lang.get(\"updateAvailable_label\", { \"{version}\": info.version }),\n\t\t\t\tbody: lang.get(\"clickToUpdate_msg\"),\n\t\t\t\ticon: this.icon,\n\t\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tif (res === NotificationResult.Click) {\n\t\t\t\t\tthis.installUpdate()\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e: Error) => this.logger.error(\"Notification failed, error message:\", e?.message))\n\t}\n\n\tinstallUpdate() {\n\t\tthis.logger.debug(\"installing update\")\n\t\t//the window manager enables force-quit on the app-quit event,\n\t\t// which is not emitted for quitAndInstall\n\t\t// so we enable force-quit manually with a custom event\n\t\tthis.app.emit(\"enable-force-quit\")\n\t\tthis._updateInfo = null\n\t\t// first argument: isSilent Boolean - windows-only Runs the installer in silent mode. Defaults to false.\n\t\t// second argument: isForceRunAfter Boolean - Run the app after finish even on silent install. Not applicable for macOS.\n\t\t//  Ignored if isSilent is set to false.\n\t\t// https://www.electron.build/auto-update#appupdater-eventemitter\n\t\t// As this is triggered by user we want to restart afterwards and don't mind showing the wizard either.\n\t\tthis.updater.electronUpdater.quitAndInstall(false, true)\n\t}\n\n\tprivate async notifyUpdateError() {\n\t\tthis.notifier\n\t\t\t.showOneShot({\n\t\t\t\ttitle: lang.get(\"errorReport_label\"),\n\t\t\t\tbody: lang.get(\"errorDuringUpdate_msg\"),\n\t\t\t\ticon: this.icon,\n\t\t\t})\n\t\t\t.catch((e) => this.logger.error(\"Error Notification failed, error message:\", e?.message))\n\t}\n}\n"]}