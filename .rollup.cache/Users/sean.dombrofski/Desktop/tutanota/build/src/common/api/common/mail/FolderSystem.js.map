{"version":3,"file":"FolderSystem.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/mail/FolderSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import { groupBy, partition } from \"@tutao/tutanota-utils\"\nimport { Mail, MailFolder } from \"../../entities/tutanota/TypeRefs.js\"\nimport { isFolder, MailSetKind } from \"../TutanotaConstants.js\"\nimport { elementIdPart, getElementId, isSameId } from \"../utils/EntityUtils.js\"\n\nexport interface IndentedFolder {\n\tlevel: number\n\tfolder: MailFolder\n}\n\n/** Accessor for the folder trees. */\nexport class FolderSystem {\n\treadonly systemSubtrees: ReadonlyArray<FolderSubtree>\n\treadonly customSubtrees: ReadonlyArray<FolderSubtree>\n\treadonly importedMailSet: Readonly<MailFolder | null>\n\n\tconstructor(mailSets: readonly MailFolder[]) {\n\t\tconst [folders, nonFolders] = partition(mailSets, (f) => isFolder(f))\n\t\tconst folderByParent = groupBy(folders, (folder) => (folder.parentFolder ? elementIdPart(folder.parentFolder) : null))\n\t\tconst topLevelFolders = folders.filter((f) => f.parentFolder == null)\n\n\t\tconst [systemFolders, customFolders] = partition(topLevelFolders, (f) => f.folderType !== MailSetKind.CUSTOM)\n\n\t\tthis.importedMailSet = nonFolders.find((f) => f.folderType === MailSetKind.Imported) || null\n\t\tthis.systemSubtrees = systemFolders.sort(compareSystem).map((f) => this.makeSubtree(folderByParent, f, compareCustom))\n\t\tthis.customSubtrees = customFolders.sort(compareCustom).map((f) => this.makeSubtree(folderByParent, f, compareCustom))\n\t}\n\n\tgetIndentedList(excludeFolder: MailFolder | null = null): IndentedFolder[] {\n\t\treturn [...this.getIndentedFolderList(this.systemSubtrees, excludeFolder), ...this.getIndentedFolderList(this.customSubtrees, excludeFolder)]\n\t}\n\n\t/** Search for a specific folder type. Some mailboxes might not have some system folders! */\n\tgetSystemFolderByType(type: Omit<MailSetKind, MailSetKind.CUSTOM>): MailFolder | null {\n\t\treturn this.systemSubtrees.find((f) => f.folder.folderType === type)?.folder ?? null\n\t}\n\n\tgetFolderById(folderId: Id): MailFolder | null {\n\t\tconst subtree = this.getFolderByIdInSubtrees(this.systemSubtrees, folderId) ?? this.getFolderByIdInSubtrees(this.customSubtrees, folderId)\n\t\treturn subtree?.folder ?? null\n\t}\n\n\tgetFolderByMail(mail: Mail): MailFolder | null {\n\t\tconst sets = mail.sets\n\t\tfor (const setId of sets) {\n\t\t\tconst folder = this.getFolderById(elementIdPart(setId))\n\t\t\tif (folder != null) {\n\t\t\t\treturn folder\n\t\t\t}\n\t\t}\n\t\treturn null\n\t}\n\n\t/**\n\t * Returns the children of a parent (applies only to custom folders)\n\t * if no parent is given, the top level custom folders are returned\n\t */\n\tgetCustomFoldersOfParent(parent: IdTuple | null): MailFolder[] {\n\t\tif (parent) {\n\t\t\tconst parentFolder = this.getFolderByIdInSubtrees([...this.customSubtrees, ...this.systemSubtrees], elementIdPart(parent))\n\t\t\treturn parentFolder ? parentFolder.children.map((child) => child.folder) : []\n\t\t} else {\n\t\t\treturn this.customSubtrees.map((subtree) => subtree.folder)\n\t\t}\n\t}\n\n\tgetDescendantFoldersOfParent(parent: IdTuple): IndentedFolder[] {\n\t\tconst parentFolder = this.getFolderByIdInSubtrees([...this.customSubtrees, ...this.systemSubtrees], elementIdPart(parent))\n\t\tif (parentFolder) {\n\t\t\treturn this.getIndentedFolderList([parentFolder]).slice(1)\n\t\t} else {\n\t\t\treturn []\n\t\t}\n\t}\n\n\t/** returns all parents of the folder, including the folder itself */\n\tgetPathToFolder(folderId: IdTuple): MailFolder[] {\n\t\treturn this.getPathToFolderInSubtrees(this.systemSubtrees, folderId) ?? this.getPathToFolderInSubtrees(this.customSubtrees, folderId) ?? []\n\t}\n\n\tcheckFolderForAncestor(folder: MailFolder, potentialAncestorId: IdTuple): boolean {\n\t\tlet currentFolderPointer: MailFolder | null = folder\n\t\twhile (true) {\n\t\t\tif (currentFolderPointer?.parentFolder == null) {\n\t\t\t\treturn false\n\t\t\t} else if (isSameId(currentFolderPointer.parentFolder, potentialAncestorId)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tcurrentFolderPointer = this.getFolderById(elementIdPart(currentFolderPointer.parentFolder))\n\t\t}\n\t}\n\n\tprivate getIndentedFolderList(subtrees: ReadonlyArray<FolderSubtree>, excludeFolder: MailFolder | null = null, currentLevel: number = 0): IndentedFolder[] {\n\t\tconst plainList: IndentedFolder[] = []\n\t\tfor (const subtree of subtrees) {\n\t\t\tif (!excludeFolder || !isSameId(subtree.folder._id, excludeFolder._id)) {\n\t\t\t\tplainList.push({ level: currentLevel, folder: subtree.folder })\n\t\t\t\tplainList.push(...this.getIndentedFolderList(subtree.children, excludeFolder, currentLevel + 1))\n\t\t\t}\n\t\t}\n\t\treturn plainList\n\t}\n\n\tprivate getIndentedSystemList(): IndentedFolder[] {\n\t\treturn this.systemSubtrees.map((subtree) => {\n\t\t\treturn { level: 0, folder: subtree.folder }\n\t\t})\n\t}\n\n\tprivate getFolderByIdInSubtrees(systems: ReadonlyArray<FolderSubtree>, folderId: Id): FolderSubtree | null {\n\t\treturn this.getFolderBy(systems, (system) => isSameId(getElementId(system.folder), folderId))\n\t}\n\n\tprivate getFolderBy(systems: ReadonlyArray<FolderSubtree>, predicate: (subtree: FolderSubtree) => boolean): FolderSubtree | null {\n\t\tconst topLevel = systems.find(predicate)\n\t\tif (topLevel) {\n\t\t\treturn topLevel\n\t\t} else {\n\t\t\tfor (const topLevelSystem of systems) {\n\t\t\t\tconst found = this.getFolderBy(topLevelSystem.children, predicate)\n\t\t\t\tif (found) {\n\t\t\t\t\treturn found\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null\n\t}\n\n\tprivate getPathToFolderInSubtrees(systems: readonly FolderSubtree[], folderId: IdTuple): MailFolder[] | null {\n\t\tfor (const system of systems) {\n\t\t\tif (isSameId(system.folder._id, folderId)) {\n\t\t\t\treturn [system.folder]\n\t\t\t}\n\t\t\tconst subpath = this.getPathToFolderInSubtrees(system.children, folderId)\n\t\t\tif (subpath) {\n\t\t\t\treturn [system.folder].concat(...subpath)\n\t\t\t}\n\t\t}\n\t\treturn null\n\t}\n\n\tprivate makeSubtree(folderByParent: Map<Id | null, readonly MailFolder[]>, parent: MailFolder, comparator: FolderComparator): FolderSubtree {\n\t\tconst childrenFolders = folderByParent.get(getElementId(parent))\n\t\tif (childrenFolders) {\n\t\t\tconst childSystems = childrenFolders\n\t\t\t\t.slice()\n\t\t\t\t.sort(comparator)\n\t\t\t\t.map((child) => this.makeSubtree(folderByParent, child, comparator))\n\t\t\treturn { folder: parent, children: childSystems }\n\t\t} else {\n\t\t\treturn { folder: parent, children: [] }\n\t\t}\n\t}\n}\n\ntype FolderComparator = (folder1: MailFolder, folder2: MailFolder) => number\n\nfunction compareCustom(folder1: MailFolder, folder2: MailFolder): number {\n\treturn folder1.name.localeCompare(folder2.name)\n}\n\ntype SystemMailFolderTypes = Exclude<MailSetKind, MailSetKind.CUSTOM | MailSetKind.LABEL | MailSetKind.Imported>\n\nconst folderTypeToOrder: Record<SystemMailFolderTypes, number> = {\n\t[MailSetKind.INBOX]: 0,\n\t[MailSetKind.DRAFT]: 1,\n\t[MailSetKind.SENT]: 2,\n\t[MailSetKind.TRASH]: 4,\n\t[MailSetKind.ARCHIVE]: 5,\n\t[MailSetKind.SPAM]: 6,\n\t[MailSetKind.ALL]: 7,\n}\n\nfunction compareSystem(folder1: MailFolder, folder2: MailFolder): number {\n\tconst order1 = folderTypeToOrder[folder1.folderType as SystemMailFolderTypes] ?? 7\n\tconst order2 = folderTypeToOrder[folder2.folderType as SystemMailFolderTypes] ?? 7\n\treturn order1 - order2\n}\n\n/**\n * an array of FolderSystems represent all folders.\n * the top folders are the toplevel folders in with their respective subfolders.\n */\nexport interface FolderSubtree {\n\treadonly folder: MailFolder\n\treadonly children: readonly FolderSubtree[]\n}\n"]}