{"version":3,"file":"EphemeralCacheStorage.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/rest/EphemeralCacheStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import { BlobElementEntity, ElementEntity, ListElementEntity, SomeEntity, TypeModel } from \"../../common/EntityTypes.js\"\nimport { EntityRestClient, typeRefToPath } from \"./EntityRestClient.js\"\nimport { firstBiggerThanSecond } from \"../../common/utils/EntityUtils.js\"\nimport { CacheStorage, expandId, ExposedCacheStorage, LastUpdateTime } from \"./DefaultEntityRestCache.js\"\nimport { assertNotNull, clone, getFromMap, remove, TypeRef } from \"@tutao/tutanota-utils\"\nimport { CustomCacheHandlerMap } from \"./CustomCacheHandler.js\"\nimport { resolveTypeReference } from \"../../common/EntityFunctions.js\"\nimport { Type as TypeId } from \"../../common/EntityConstants.js\"\nimport { ProgrammingError } from \"../../common/error/ProgrammingError.js\"\nimport { customIdToBase64Url, ensureBase64Ext } from \"../offline/OfflineStorage.js\"\n\n/** Cache for a single list. */\ntype ListCache = {\n\t/** All entities loaded inside the range. */\n\tallRange: Id[]\n\tlowerRangeId: Id\n\tupperRangeId: Id\n\t/** All the entities loaded, inside or outside the range (e.g. load for a single entity). */\n\telements: Map<Id, ListElementEntity>\n}\n\n/** Map from list id to list cache. */\ntype ListTypeCache = Map<Id, ListCache>\n\ntype BlobElementCache = {\n\t/** All the entities loaded, inside or outside the range (e.g. load for a single entity). */\n\telements: Map<Id, BlobElementEntity>\n}\n\n/** Map from list id to list cache. */\ntype BlobElementTypeCache = Map<Id, BlobElementCache>\n\nexport interface EphemeralStorageInitArgs {\n\tuserId: Id\n}\n\nexport class EphemeralCacheStorage implements CacheStorage {\n\t/** Path to id to entity map. */\n\tprivate readonly entities: Map<string, Map<Id, ElementEntity>> = new Map()\n\tprivate readonly lists: Map<string, ListTypeCache> = new Map()\n\tprivate readonly blobEntities: Map<string, BlobElementTypeCache> = new Map()\n\tprivate readonly customCacheHandlerMap: CustomCacheHandlerMap = new CustomCacheHandlerMap()\n\tprivate lastUpdateTime: number | null = null\n\tprivate userId: Id | null = null\n\tprivate lastBatchIdPerGroup = new Map<Id, Id>()\n\n\tinit({ userId }: EphemeralStorageInitArgs) {\n\t\tthis.userId = userId\n\t}\n\n\tdeinit() {\n\t\tthis.userId = null\n\t\tthis.entities.clear()\n\t\tthis.lists.clear()\n\t\tthis.blobEntities.clear()\n\t\tthis.lastUpdateTime = null\n\t\tthis.lastBatchIdPerGroup.clear()\n\t}\n\n\t/**\n\t * Get a given entity from the cache, expects that you have already checked for existence\n\t */\n\tasync get<T extends SomeEntity>(typeRef: TypeRef<T>, listId: Id | null, elementId: Id): Promise<T | null> {\n\t\t// We downcast because we can't prove that map has correct entity on the type level\n\t\tconst path = typeRefToPath(typeRef)\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\telementId = ensureBase64Ext(typeModel, elementId)\n\t\tswitch (typeModel.type) {\n\t\t\tcase TypeId.Element:\n\t\t\t\treturn clone((this.entities.get(path)?.get(elementId) as T | undefined) ?? null)\n\t\t\tcase TypeId.ListElement:\n\t\t\t\treturn clone((this.lists.get(path)?.get(assertNotNull(listId))?.elements.get(elementId) as T | undefined) ?? null)\n\t\t\tcase TypeId.BlobElement:\n\t\t\t\treturn clone((this.blobEntities.get(path)?.get(assertNotNull(listId))?.elements.get(elementId) as T | undefined) ?? null)\n\t\t\tdefault:\n\t\t\t\tthrow new ProgrammingError(\"must be a persistent type\")\n\t\t}\n\t}\n\n\tasync deleteIfExists<T>(typeRef: TypeRef<T>, listId: Id | null, elementId: Id): Promise<void> {\n\t\tconst path = typeRefToPath(typeRef)\n\t\tlet typeModel: TypeModel\n\t\ttypeModel = await resolveTypeReference(typeRef)\n\t\telementId = ensureBase64Ext(typeModel, elementId)\n\t\tswitch (typeModel.type) {\n\t\t\tcase TypeId.Element:\n\t\t\t\tthis.entities.get(path)?.delete(elementId)\n\t\t\t\tbreak\n\t\t\tcase TypeId.ListElement: {\n\t\t\t\tconst cache = this.lists.get(path)?.get(assertNotNull(listId))\n\t\t\t\tif (cache != null) {\n\t\t\t\t\tcache.elements.delete(elementId)\n\t\t\t\t\tremove(cache.allRange, elementId)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase TypeId.BlobElement:\n\t\t\t\tthis.blobEntities.get(path)?.get(assertNotNull(listId))?.elements.delete(elementId)\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new ProgrammingError(\"must be a persistent type\")\n\t\t}\n\t}\n\n\tprivate addElementEntity<T extends ElementEntity>(typeRef: TypeRef<T>, id: Id, entity: T) {\n\t\tgetFromMap(this.entities, typeRefToPath(typeRef), () => new Map()).set(id, entity)\n\t}\n\n\tasync isElementIdInCacheRange<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id, elementId: Id): Promise<boolean> {\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\telementId = ensureBase64Ext(typeModel, elementId)\n\n\t\tconst cache = this.lists.get(typeRefToPath(typeRef))?.get(listId)\n\t\treturn cache != null && !firstBiggerThanSecond(elementId, cache.upperRangeId) && !firstBiggerThanSecond(cache.lowerRangeId, elementId)\n\t}\n\n\tasync put(originalEntity: SomeEntity): Promise<void> {\n\t\tconst entity = clone(originalEntity)\n\t\tconst typeRef = entity._type\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\tlet { listId, elementId } = expandId(originalEntity._id)\n\t\telementId = ensureBase64Ext(typeModel, elementId)\n\t\tswitch (typeModel.type) {\n\t\t\tcase TypeId.Element: {\n\t\t\t\tconst elementEntity = entity as ElementEntity\n\t\t\t\tthis.addElementEntity(elementEntity._type, elementId, elementEntity)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase TypeId.ListElement: {\n\t\t\t\tconst listElementEntity = entity as ListElementEntity\n\t\t\t\tconst listElementTypeRef = typeRef as TypeRef<ListElementEntity>\n\t\t\t\tlistId = listId as Id\n\t\t\t\tawait this.putListElement(listElementTypeRef, listId, elementId, listElementEntity)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase TypeId.BlobElement: {\n\t\t\t\tconst blobElementEntity = entity as BlobElementEntity\n\t\t\t\tconst blobTypeRef = typeRef as TypeRef<BlobElementEntity>\n\t\t\t\tlistId = listId as Id\n\t\t\t\tawait this.putBlobElement(blobTypeRef, listId, elementId, blobElementEntity)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new ProgrammingError(\"must be a persistent type\")\n\t\t}\n\t}\n\n\tprivate async putBlobElement(typeRef: TypeRef<BlobElementEntity>, listId: Id, elementId: Id, entity: BlobElementEntity) {\n\t\tconst cache = this.blobEntities.get(typeRefToPath(typeRef))?.get(listId)\n\t\tif (cache == null) {\n\t\t\t// first element in this list\n\t\t\tconst newCache = {\n\t\t\t\telements: new Map([[elementId, entity]]),\n\t\t\t}\n\t\t\tgetFromMap(this.blobEntities, typeRefToPath(typeRef), () => new Map()).set(listId, newCache)\n\t\t} else {\n\t\t\t// if the element already exists in the cache, overwrite it\n\t\t\tcache.elements.set(elementId, entity)\n\t\t}\n\t}\n\n\t/** prcondition: elementId is converted to base64ext if necessary */\n\tprivate async putListElement(typeRef: TypeRef<ListElementEntity>, listId: Id, elementId: Id, entity: ListElementEntity) {\n\t\tconst cache = this.lists.get(typeRefToPath(typeRef))?.get(listId)\n\t\tif (cache == null) {\n\t\t\t// first element in this list\n\t\t\tconst newCache = {\n\t\t\t\tallRange: [elementId],\n\t\t\t\tlowerRangeId: elementId,\n\t\t\t\tupperRangeId: elementId,\n\t\t\t\telements: new Map([[elementId, entity]]),\n\t\t\t}\n\t\t\tgetFromMap(this.lists, typeRefToPath(typeRef), () => new Map()).set(listId, newCache)\n\t\t} else {\n\t\t\t// if the element already exists in the cache, overwrite it\n\t\t\t// add new element to existing list if necessary\n\t\t\tcache.elements.set(elementId, entity)\n\t\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\t\tif (await this.isElementIdInCacheRange(typeRef, listId, customIdToBase64Url(typeModel, elementId))) {\n\t\t\t\tthis.insertIntoRange(cache.allRange, elementId)\n\t\t\t}\n\t\t}\n\t}\n\n\t/** precondition: elementId is converted to base64ext if necessary */\n\tprivate insertIntoRange(allRange: Array<Id>, elementId: Id) {\n\t\tfor (let i = 0; i < allRange.length; i++) {\n\t\t\tconst rangeElement = allRange[i]\n\t\t\tif (firstBiggerThanSecond(rangeElement, elementId)) {\n\t\t\t\tallRange.splice(i, 0, elementId)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (rangeElement === elementId) {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tallRange.push(elementId)\n\t}\n\n\tasync provideFromRange<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id, startElementId: Id, count: number, reverse: boolean): Promise<T[]> {\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\tstartElementId = ensureBase64Ext(typeModel, startElementId)\n\n\t\tconst listCache = this.lists.get(typeRefToPath(typeRef))?.get(listId)\n\n\t\tif (listCache == null) {\n\t\t\treturn []\n\t\t}\n\n\t\tlet range = listCache.allRange\n\t\tlet ids: Id[] = []\n\t\tif (reverse) {\n\t\t\tlet i\n\t\t\tfor (i = range.length - 1; i >= 0; i--) {\n\t\t\t\tif (firstBiggerThanSecond(startElementId, range[i])) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i >= 0) {\n\t\t\t\tlet startIndex = i + 1 - count\n\t\t\t\tif (startIndex < 0) {\n\t\t\t\t\t// startElementId index may be negative if more elements have been requested than available when getting elements reverse.\n\t\t\t\t\tstartIndex = 0\n\t\t\t\t}\n\t\t\t\tids = range.slice(startIndex, i + 1)\n\t\t\t\tids.reverse()\n\t\t\t} else {\n\t\t\t\tids = []\n\t\t\t}\n\t\t} else {\n\t\t\tconst i = range.findIndex((id) => firstBiggerThanSecond(id, startElementId))\n\t\t\tids = range.slice(i, i + count)\n\t\t}\n\t\tlet result: T[] = []\n\t\tfor (let a = 0; a < ids.length; a++) {\n\t\t\tresult.push(clone(listCache.elements.get(ids[a]) as T))\n\t\t}\n\t\treturn result\n\t}\n\n\tasync provideMultiple<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id, elementIds: Id[]): Promise<Array<T>> {\n\t\tconst listCache = this.lists.get(typeRefToPath(typeRef))?.get(listId)\n\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\telementIds = elementIds.map((el) => ensureBase64Ext(typeModel, el))\n\n\t\tif (listCache == null) {\n\t\t\treturn []\n\t\t}\n\t\tlet result: T[] = []\n\t\tfor (let a = 0; a < elementIds.length; a++) {\n\t\t\tresult.push(clone(listCache.elements.get(elementIds[a]) as T))\n\t\t}\n\t\treturn result\n\t}\n\n\tasync getRangeForList<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id): Promise<{ lower: Id; upper: Id } | null> {\n\t\tconst listCache = this.lists.get(typeRefToPath(typeRef))?.get(listId)\n\n\t\tif (listCache == null) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\treturn {\n\t\t\tlower: customIdToBase64Url(typeModel, listCache.lowerRangeId),\n\t\t\tupper: customIdToBase64Url(typeModel, listCache.upperRangeId),\n\t\t}\n\t}\n\n\tasync setUpperRangeForList<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id, upperId: Id): Promise<void> {\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\tupperId = ensureBase64Ext(typeModel, upperId)\n\t\tconst listCache = this.lists.get(typeRefToPath(typeRef))?.get(listId)\n\t\tif (listCache == null) {\n\t\t\tthrow new Error(\"list does not exist\")\n\t\t}\n\t\tlistCache.upperRangeId = upperId\n\t}\n\n\tasync setLowerRangeForList<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id, lowerId: Id): Promise<void> {\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\tlowerId = ensureBase64Ext(typeModel, lowerId)\n\t\tconst listCache = this.lists.get(typeRefToPath(typeRef))?.get(listId)\n\t\tif (listCache == null) {\n\t\t\tthrow new Error(\"list does not exist\")\n\t\t}\n\t\tlistCache.lowerRangeId = lowerId\n\t}\n\n\t/**\n\t * Creates a new list cache if there is none. Resets everything but elements.\n\t * @param typeRef\n\t * @param listId\n\t * @param lower\n\t * @param upper\n\t */\n\tasync setNewRangeForList<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id, lower: Id, upper: Id): Promise<void> {\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\tlower = ensureBase64Ext(typeModel, lower)\n\t\tupper = ensureBase64Ext(typeModel, upper)\n\n\t\tconst listCache = this.lists.get(typeRefToPath(typeRef))?.get(listId)\n\t\tif (listCache == null) {\n\t\t\tgetFromMap(this.lists, typeRefToPath(typeRef), () => new Map()).set(listId, {\n\t\t\t\tallRange: [],\n\t\t\t\tlowerRangeId: lower,\n\t\t\t\tupperRangeId: upper,\n\t\t\t\telements: new Map(),\n\t\t\t})\n\t\t} else {\n\t\t\tlistCache.lowerRangeId = lower\n\t\t\tlistCache.upperRangeId = upper\n\t\t\tlistCache.allRange = []\n\t\t}\n\t}\n\n\tasync getIdsInRange<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id): Promise<Array<Id>> {\n\t\tconst typeModel = await resolveTypeReference(typeRef)\n\t\treturn (\n\t\t\tthis.lists\n\t\t\t\t.get(typeRefToPath(typeRef))\n\t\t\t\t?.get(listId)\n\t\t\t\t?.allRange.map((elementId) => {\n\t\t\t\t\treturn customIdToBase64Url(typeModel, elementId)\n\t\t\t\t}) ?? []\n\t\t)\n\t}\n\n\tasync getLastBatchIdForGroup(groupId: Id): Promise<Id | null> {\n\t\treturn this.lastBatchIdPerGroup.get(groupId) ?? null\n\t}\n\n\tasync putLastBatchIdForGroup(groupId: Id, batchId: Id): Promise<void> {\n\t\tthis.lastBatchIdPerGroup.set(groupId, batchId)\n\t}\n\n\tpurgeStorage(): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n\n\tasync getLastUpdateTime(): Promise<LastUpdateTime> {\n\t\treturn this.lastUpdateTime ? { type: \"recorded\", time: this.lastUpdateTime } : { type: \"never\" }\n\t}\n\n\tasync putLastUpdateTime(value: number): Promise<void> {\n\t\tthis.lastUpdateTime = value\n\t}\n\n\tasync getWholeList<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id): Promise<Array<T>> {\n\t\tconst listCache = this.lists.get(typeRefToPath(typeRef))?.get(listId)\n\n\t\tif (listCache == null) {\n\t\t\treturn []\n\t\t}\n\n\t\treturn listCache.allRange.map((id) => clone(listCache.elements.get(id) as T))\n\t}\n\n\tgetCustomCacheHandlerMap(entityRestClient: EntityRestClient): CustomCacheHandlerMap {\n\t\treturn this.customCacheHandlerMap\n\t}\n\n\tgetUserId(): Id {\n\t\treturn assertNotNull(this.userId, \"No user id, not initialized?\")\n\t}\n\n\tasync deleteAllOwnedBy(owner: Id): Promise<void> {\n\t\tfor (const typeMap of this.entities.values()) {\n\t\t\tfor (const [id, entity] of typeMap.entries()) {\n\t\t\t\tif (entity._ownerGroup === owner) {\n\t\t\t\t\ttypeMap.delete(id)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const cacheForType of this.lists.values()) {\n\t\t\tthis.deleteAllOwnedByFromCache(cacheForType, owner)\n\t\t}\n\t\tfor (const cacheForType of this.blobEntities.values()) {\n\t\t\tthis.deleteAllOwnedByFromCache(cacheForType, owner)\n\t\t}\n\t\tthis.lastBatchIdPerGroup.delete(owner)\n\t}\n\n\tasync deleteWholeList<T extends ListElementEntity>(typeRef: TypeRef<T>, listId: Id): Promise<void> {\n\t\tthis.lists.get(typeRef.type)?.delete(listId)\n\t}\n\n\tprivate deleteAllOwnedByFromCache(cacheForType: Map<Id, ListCache | BlobElementCache>, owner: string) {\n\t\t// If we find at least one element in the list that is owned by our target owner, we delete the entire list.\n\t\t// This is OK in most cases because the vast majority of lists are single owner.\n\t\t// For the other cases, we are just clearing the cache a bit sooner than needed.\n\t\tconst listIdsToDelete: string[] = []\n\t\tfor (const [listId, listCache] of cacheForType.entries()) {\n\t\t\tfor (const [id, element] of listCache.elements.entries()) {\n\t\t\t\tif (element._ownerGroup === owner) {\n\t\t\t\t\tlistIdsToDelete.push(listId)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const listId of listIdsToDelete) {\n\t\t\tcacheForType.delete(listId)\n\t\t}\n\t}\n\n\tclearExcludedData(): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n\n\t/**\n\t * We want to lock the access to the \"ranges\" db when updating / reading the\n\t * offline available mail list ranges for each mail list (referenced using the listId)\n\t * @param listId the mail list that we want to lock\n\t */\n\tlockRangesDbAccess(listId: string): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n\n\t/**\n\t * This is the counterpart to the function \"lockRangesDbAccess(listId)\"\n\t * @param listId the mail list that we want to unlock\n\t */\n\tunlockRangesDbAccess(listId: string): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n}\n"]}