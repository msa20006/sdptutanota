{"version":3,"file":"LoadingState.js","sourceRoot":"","sources":["../../../../src/common/offline/LoadingState.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,gBAAgB,CAAA;AACnC,OAAO,EAAE,cAAc,EAAE,MAAM,mCAAmC,CAAA;AAElE,MAAM,CAAN,IAAY,YAOX;AAPD,WAAY,YAAY;IACvB,qEAAqE;IACrE,+CAAI,CAAA;IACJ,4CAA4C;IAC5C,qDAAO,CAAA;IACP,mDAAmD;IACnD,mEAAc,CAAA;AACf,CAAC,EAPW,YAAY,KAAZ,YAAY,QAOvB;AAED;;;GAGG;AACH,MAAM,OAAO,mBAAmB;IACd,KAAK,CAAsB;IACpC,oBAAoB,GAAwB,IAAI,CAAA;IAExD,YAAY,eAA6B,YAAY,CAAC,IAAI;QACzD,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,YAAY,CAAC,CAAA;IAClC,CAAC;IAED,GAAG;QACF,OAAO,IAAI,CAAC,KAAK,EAAE,CAAA;IACpB,CAAC;IAED,MAAM;QACL,OAAO,IAAI,CAAC,GAAG,EAAE,KAAK,YAAY,CAAC,IAAI,CAAA;IACxC,CAAC;IAED,SAAS;QACR,OAAO,IAAI,CAAC,GAAG,EAAE,KAAK,YAAY,CAAC,OAAO,CAAA;IAC3C,CAAC;IAED,gBAAgB;QACf,OAAO,IAAI,CAAC,GAAG,EAAE,KAAK,YAAY,CAAC,cAAc,CAAA;IAClD,CAAC;IAED,GAAG,CAAC,KAAmB;QACtB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IAClB,CAAC;IAED,OAAO;QACN,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;IAC5B,CAAC;IAED,UAAU;QACT,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAA;IAC/B,CAAC;IAED,iBAAiB;QAChB,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,cAAc,CAAC,CAAA;IACtC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,YAAY,CAAI,OAAmB;QACxC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAA;QAE9B,IAAI,cAAc,GAAG,KAAK,CAAA;QAC1B,IAAI,CAAC;YACJ,OAAO,MAAM,OAAO,CAAA;QACrB,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,IAAI,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;gBACvB,cAAc,GAAG,IAAI,CAAA;YACtB,CAAC;YACD,MAAM,CAAC,CAAA;QACR,CAAC;gBAAS,CAAC;YACV,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;QAC3E,CAAC;IACF,CAAC;IAED,uBAAuB,CAAC,QAA0C;QACjE,IAAI,CAAC,yBAAyB,EAAE,CAAA;QAChC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IACrD,CAAC;IAED,yBAAyB;QACxB,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,EAAE,CAAC;YACvC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACnC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAA;QACjC,CAAC;IACF,CAAC;CACD","sourcesContent":["import stream from \"mithril/stream\"\nimport { isOfflineError } from \"../api/common/utils/ErrorUtils.js\"\n\nexport enum LoadingState {\n\t/** We have not tried to load anything, or the loading is complete */\n\tIdle,\n\t/** We are waiting for a resource to load */\n\tLoading,\n\t/** We tried to load and got a `ConnectionError` */\n\tConnectionLost,\n}\n\n/**\n * A utility to track the loaded state of some resource\n * Provides listeners for handling state changes\n */\nexport class LoadingStateTracker {\n\tprivate readonly state: stream<LoadingState>\n\tprivate loadingStateListener: stream<void> | null = null\n\n\tconstructor(initialState: LoadingState = LoadingState.Idle) {\n\t\tthis.state = stream(initialState)\n\t}\n\n\tget(): LoadingState {\n\t\treturn this.state()\n\t}\n\n\tisIdle(): boolean {\n\t\treturn this.get() === LoadingState.Idle\n\t}\n\n\tisLoading(): boolean {\n\t\treturn this.get() === LoadingState.Loading\n\t}\n\n\tisConnectionLost(): boolean {\n\t\treturn this.get() === LoadingState.ConnectionLost\n\t}\n\n\tset(state: LoadingState) {\n\t\tthis.state(state)\n\t}\n\n\tsetIdle() {\n\t\tthis.set(LoadingState.Idle)\n\t}\n\n\tsetLoading() {\n\t\tthis.set(LoadingState.Loading)\n\t}\n\n\tsetConnectionLost() {\n\t\tthis.set(LoadingState.ConnectionLost)\n\t}\n\n\t/**\n\t * Follow the state of a promise.\n\t * While the promise is not resolved, this will be in `Loading` state\n\t * If the promise rejects with a `ConnectionError`, then it will finish in `ConnectionLost` state\n\t * Otherwise it will finish in `Idle` state\n\t */\n\tasync trackPromise<T>(promise: Promise<T>): Promise<T> {\n\t\tthis.set(LoadingState.Loading)\n\n\t\tlet connectionLost = false\n\t\ttry {\n\t\t\treturn await promise\n\t\t} catch (e) {\n\t\t\tif (isOfflineError(e)) {\n\t\t\t\tconnectionLost = true\n\t\t\t}\n\t\t\tthrow e\n\t\t} finally {\n\t\t\tthis.set(connectionLost ? LoadingState.ConnectionLost : LoadingState.Idle)\n\t\t}\n\t}\n\n\tsetStateChangedListener(listener: (newState: LoadingState) => void) {\n\t\tthis.clearStateChangedListener()\n\t\tthis.loadingStateListener = this.state.map(listener)\n\t}\n\n\tclearStateChangedListener() {\n\t\tif (this.loadingStateListener != null) {\n\t\t\tthis.loadingStateListener.end(true)\n\t\t\tthis.loadingStateListener = null\n\t\t}\n\t}\n}\n"]}