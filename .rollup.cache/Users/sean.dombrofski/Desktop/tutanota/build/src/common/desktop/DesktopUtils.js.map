{"version":3,"file":"DesktopUtils.js","sourceRoot":"","sources":["../../../../src/common/desktop/DesktopUtils.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,WAAW,CAAA;AAC5B,OAAO,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAA;AAE1C,OAAO,EAAE,GAAG,EAAe,MAAM,UAAU,CAAA;AAC3C,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAA;AACpD,OAAO,EAAE,GAAG,EAAE,MAAM,cAAc,CAAA;AAClC,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAA;AAC1C,OAAO,EAAE,sBAAsB,EAAE,wBAAwB,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAA;AAChG,OAAO,EAAE,gBAAgB,EAAE,MAAM,sCAAsC,CAAA;AACvE,OAAO,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAA;AAKhD,MAAM,OAAO,YAAY;IAG0B;IAA8B;IAFxE,SAAS,CAAe;IAEhC,YAAY,IAAmB,EAAmB,GAAW,EAAmB,QAAyB;QAAvD,QAAG,GAAH,GAAG,CAAQ;QAAmB,aAAQ,GAAR,QAAQ,CAAiB;QACxG,IAAI,CAAC,SAAS,GAAG,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IACnD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,kBAAkB;QACvB,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAAE,OAAO,KAAK,CAAA;QACpD,wBAAwB;QACxB,yFAAyF;QACzF,iFAAiF;QACjF,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI;YAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAA;QAC5C,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,oBAAoB;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAA;IAC3D,CAAC;IAED,KAAK,CAAC,uBAAuB;QAC5B,GAAG,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAA;QAEzC,QAAQ,OAAO,CAAC,QAAQ,EAAE,CAAC;YAC1B,KAAK,OAAO;gBACX,MAAM,IAAI,CAAC,sCAAsC,EAAE,CAAA;gBACnD,MAAK;YACN,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACf,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAA;gBAC1E,IAAI,CAAC,WAAW,EAAE,CAAC;oBAClB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAA;gBACxD,CAAC;gBACD,MAAK;YACN,CAAC;YACD,KAAK,OAAO;gBACX,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAA;YAChE;gBACC,MAAM,IAAI,KAAK,CAAC,6BAA6B,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAA;QAClE,CAAC;IACF,CAAC;IAED,KAAK,CAAC,yBAAyB;QAC9B,GAAG,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAA;QAC3C,QAAQ,OAAO,CAAC,QAAQ,EAAE,CAAC;YAC1B,KAAK,OAAO;gBACX,MAAM,IAAI,CAAC,wCAAwC,EAAE,CAAA;gBACrD,MAAK;YACN,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACf,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAA;gBAC/E,IAAI,CAAC,aAAa,EAAE,CAAC;oBACpB,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAA;gBAC1D,CAAC;gBACD,MAAK;YACN,CAAC;YACD,KAAK,OAAO;gBACX,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAA;YAChE;gBACC,MAAM,IAAI,KAAK,CAAC,6BAA6B,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAA;QAClE,CAAC;IACF,CAAC;IAED;;;;;;;;;;OAUG;IACH,KAAK,CAAC,kBAAkB;QACvB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,yBAAyB,EAAE,CAAA;QACjE,IAAI,cAAc,EAAE,CAAC;YACpB,OAAO,IAAI,CAAA;QACZ,CAAC;QACD,yEAAyE;QACzE,+BAA+B;QAC/B,MAAM,KAAK,CAAC,IAAI,CAAC,CAAA;QACjB,MAAM,0BAA0B,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,4BAA4B,EAAE,CAAA;QAChF,IAAI,0BAA0B,EAAE,CAAC;YAChC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,yBAAyB,EAAE,CAAA;QAC9C,CAAC;aAAM,CAAC;YACP,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAA;QACzB,CAAC;QAED,OAAO,0BAA0B,CAAA;IAClC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,oBAAoB,CAAC,EAAiB,EAAE,IAAmB;QAChE,MAAM,sBAAsB,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAA;QACxD,IAAI,MAAM,IAAI,CAAC,GAAG,CAAC,4BAA4B,EAAE,EAAE,CAAC;YACnD,GAAG,CAAC,IAAI,EAAE,CAAA;QACX,CAAC;aAAM,CAAC;YACP,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC9B,MAAM,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;YACzB,CAAC;iBAAM,CAAC;gBACP,KAAK,MAAM,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE;oBAAE,CAAC,CAAC,IAAI,EAAE,CAAA;YACtC,CAAC;YAED,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,sBAAsB,CAAC,CAAA;QACpD,CAAC;IACF,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,qBAAqB,CAAC,MAAc;QACjD,MAAM,QAAQ,GAAG,KAAK,EAAQ,CAAA;QAE9B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE;YACtD,QAAQ,EAAE,OAAO;YACjB,gEAAgE;YAChE,2CAA2C;YAC3C,IAAI,EAAE,KAAK;SACX,CAAC,CAAA;QAEF,KAAK,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE;YAClC,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC;YACvC,QAAQ,EAAE,KAAK;SACf,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE;YAC/B,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;YAE3B,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC;gBAChB,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;YAC5B,CAAC;iBAAM,CAAC;gBACP,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAA;YAC/D,CAAC;QACF,CAAC,CAAC,CAAA;QACF,OAAO,QAAQ,CAAC,OAAO,CAAA;IACxB,CAAC;IAED,KAAK,CAAC,sCAAsC;QAC3C,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE,CAAC;YAClC,MAAM,IAAI,gBAAgB,CAAC,WAAW,CAAC,CAAA;QACxC,CAAC;QACD,gFAAgF;QAChF,sCAAsC;QACtC,oFAAoF;QACpF,qEAAqE;QACrE,iDAAiD;QACjD,wCAAwC;QACxC,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;QACjC,MAAM,OAAO,GAAG,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAA;QACpD,4GAA4G;QAC5G,6CAA6C;QAC7C,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,SAAS,CAAC,CAAA;QACrD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,CAAA;QAClF,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,EAAE,QAAQ,CAAC,CAAA;QACnE,MAAM,YAAY,GAAG,sBAAsB,CAAC,YAAY,CAAC,YAAY,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAA;QAC/G,MAAM,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAA;QAC9C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAA;QACtD,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAA;IACtC,CAAC;IAED,KAAK,CAAC,wCAAwC;QAC7C,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE,CAAC;YAClC,MAAM,IAAI,gBAAgB,CAAC,WAAW,CAAC,CAAA;QACxC,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAA;QACzD,MAAM,YAAY,GAAG,wBAAwB,CAAC,YAAY,CAAC,YAAY,CAAC,CAAA;QACxE,MAAM,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAA;QAC9C,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAA;IACtC,CAAC;IAEO,KAAK,CAAC,wBAAwB;QACrC,IAAI,CAAC;YACJ,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,yBAAyB,CAAC,CAAA;QAClE,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,oDAAoD;YACpD,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,CAAC,CAAC,OAAO,CAAC,CAAA;QACvE,CAAC;IACF,CAAC;IAED,aAAa,CAAC,QAAgB;QAC7B,MAAM,QAAQ,GAAG,eAAe,CAAC,SAAS,QAAQ,EAAE,CAAC,CAAA;QACrD,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAA;IAC1D,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,EAAiB,EAAE,SAAS,GAAG,IAAI,CAAC,SAAS;QAC/D,IAAI,SAAS,EAAE,CAAC;YACf,MAAM,CAAC,GAAG,MAAM,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YACvC,OAAO,CAAC,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,eAAe,CAAC,EAAE,EAAE,UAAU,CAAC,EAAE,EAAE,eAAe,CAAC,EAAE,EAAE,aAAa,CAAC,EAAE,EAAE,eAAe,CAAC,SAAS,CAAC,CAAA;QACjJ,CAAC;IACF,CAAC;CACD;AAED,MAAM,UAAU,qBAAqB,CAAC,WAAsB,EAAE,UAAqB;IAClF,OAAO,CACN,UAAU,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC,GAAG,EAAE;QAClC,UAAU,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC,GAAG,EAAE;QAClC,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,IAAI,WAAW,CAAC,KAAK,GAAG,EAAE;QACzD,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,CAAC,IAAI,WAAW,CAAC,MAAM,GAAG,EAAE,CAC3D,CAAA;AACF,CAAC;AAED,SAAS,mBAAmB,CAAC,IAAc;IAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAA;AAC5D,CAAC","sourcesContent":["import path from \"node:path\"\nimport { spawn } from \"node:child_process\"\nimport type { Rectangle } from \"electron\"\nimport { app, NativeImage } from \"electron\"\nimport { defer, delay } from \"@tutao/tutanota-utils\"\nimport { log } from \"./DesktopLog\"\nimport { swapFilename } from \"./PathUtils\"\nimport { makeRegisterKeysScript, makeUnregisterKeysScript, RegistryRoot } from \"./reg-templater\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError\"\nimport { getResourcePath } from \"./resources.js\"\nimport { TempFs } from \"./files/TempFs.js\"\nimport { ElectronExports } from \"./ElectronExportTypes.js\"\nimport { WindowManager } from \"./DesktopWindowManager.js\"\n\nexport class DesktopUtils {\n\tprivate mailtoArg: string | null\n\n\tconstructor(argv: Array<string>, private readonly tfs: TempFs, private readonly electron: ElectronExports) {\n\t\tthis.mailtoArg = findMailToUrlInArgv(process.argv)\n\t}\n\n\t/**\n\t * make sure we are allowed to take single-instance lock and clear up remaining tmp data\n\t * from previous runs if so.\n\t *\n\t * @returns true if there is no other instance or we managed to steal the lock\n\t */\n\tasync cleanupOldInstance(): Promise<boolean> {\n\t\tif (!(await this.makeSingleInstance())) return false\n\t\t// doesn't clear tmp if:\n\t\t// * we're a second instance, the main instance may be using the tmp (we returned by now)\n\t\t// * there's a mailto link in the cli args, attachments may be located in the tmp\n\t\tif (this.mailtoArg == null) this.tfs.clear()\n\t\treturn true\n\t}\n\n\tcheckIsMailtoHandler(): boolean {\n\t\treturn this.electron.app.isDefaultProtocolClient(\"mailto\")\n\t}\n\n\tasync registerAsMailtoHandler(): Promise<void> {\n\t\tlog.debug(\"trying to register mailto...\")\n\n\t\tswitch (process.platform) {\n\t\t\tcase \"win32\":\n\t\t\t\tawait this.doRegisterMailtoOnWin32WithCurrentUser()\n\t\t\t\tbreak\n\t\t\tcase \"darwin\": {\n\t\t\t\tconst didRegister = this.electron.app.setAsDefaultProtocolClient(\"mailto\")\n\t\t\t\tif (!didRegister) {\n\t\t\t\t\tthrow new Error(\"Could not register as mailto handler\")\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase \"linux\":\n\t\t\t\tthrow new Error(\"Registering protocols on Linux does not work\")\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid process.platform: ${process.platform}`)\n\t\t}\n\t}\n\n\tasync unregisterAsMailtoHandler(): Promise<void> {\n\t\tlog.debug(\"trying to unregister mailto...\")\n\t\tswitch (process.platform) {\n\t\t\tcase \"win32\":\n\t\t\t\tawait this.doUnregisterMailtoOnWin32WithCurrentUser()\n\t\t\t\tbreak\n\t\t\tcase \"darwin\": {\n\t\t\t\tconst didUnregister = this.electron.app.removeAsDefaultProtocolClient(\"mailto\")\n\t\t\t\tif (!didUnregister) {\n\t\t\t\t\tthrow new Error(\"Could not unregister as mailto handler\")\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase \"linux\":\n\t\t\t\tthrow new Error(\"Registering protocols on Linux does not work\")\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid process.platform: ${process.platform}`)\n\t\t}\n\t}\n\n\t/**\n\t * checks that there's only one instance running while\n\t * allowing different versions to steal the single instance lock\n\t * from each other.\n\t *\n\t * should the lock file be unwritable/unreadable, behaves as if all\n\t * running instances have the same version, effectively restoring the\n\t * default single instance lock behaviour.\n\t *\n\t * @returns {Promise<boolean>} whether the app was successful in getting the lock\n\t */\n\tasync makeSingleInstance(): Promise<boolean> {\n\t\tconst isOnlyInstance = await this.tfs.acquireSingleInstanceLock()\n\t\tif (isOnlyInstance) {\n\t\t\treturn true\n\t\t}\n\t\t// the other instance will decide if it's going to terminate and override\n\t\t// the lock again in this time.\n\t\tawait delay(1500)\n\t\tconst otherInstanceWillTerminate = await this.tfs.singleInstanceLockOverridden()\n\t\tif (otherInstanceWillTerminate) {\n\t\t\tthis.electron.app.requestSingleInstanceLock()\n\t\t} else {\n\t\t\tthis.electron.app.quit()\n\t\t}\n\n\t\treturn otherInstanceWillTerminate\n\t}\n\n\t/**\n\t * after we receive notification about another app instance being started, we need to decide\n\t * whether to quit or continue and if we do the latter, handle that instance's cli args and/or\n\t * create a new window.\n\t */\n\tasync handleSecondInstance(wm: WindowManager, args: Array<string>): Promise<void> {\n\t\tconst otherInstanceMailToArg = findMailToUrlInArgv(args)\n\t\tif (await this.tfs.singleInstanceLockOverridden()) {\n\t\t\tapp.quit()\n\t\t} else {\n\t\t\tif (wm.getAll().length === 0) {\n\t\t\t\tawait wm.newWindow(true)\n\t\t\t} else {\n\t\t\t\tfor (const w of wm.getAll()) w.show()\n\t\t\t}\n\n\t\t\tawait this.handleMailto(wm, otherInstanceMailToArg)\n\t\t}\n\t}\n\n\t/**\n\t * this will silently fail if we're not admin.\n\t * @param script: source of the registry script\n\t * @private\n\t */\n\tprivate async executeRegistryScript(script: string): Promise<void> {\n\t\tconst deferred = defer<void>()\n\n\t\tconst file = await this.tfs.writeToDisk(script, \"reg\", {\n\t\t\tencoding: \"utf-8\",\n\t\t\t// read only by owner, because the most we're doing with this is\n\t\t\t// passing it to reg.exe and then delete it\n\t\t\tmode: 0o400,\n\t\t})\n\n\t\tspawn(\"reg.exe\", [\"import\", file], {\n\t\t\tstdio: [\"ignore\", \"inherit\", \"inherit\"],\n\t\t\tdetached: false,\n\t\t}).on(\"exit\", (code, _signal) => {\n\t\t\tthis.tfs.clearTmpSub(\"reg\")\n\n\t\t\tif (code === 0) {\n\t\t\t\tdeferred.resolve(undefined)\n\t\t\t} else {\n\t\t\t\tdeferred.reject(new Error(\"couldn't execute registry script\"))\n\t\t\t}\n\t\t})\n\t\treturn deferred.promise\n\t}\n\n\tasync doRegisterMailtoOnWin32WithCurrentUser(): Promise<void> {\n\t\tif (process.platform !== \"win32\") {\n\t\t\tthrow new ProgrammingError(\"Not win32\")\n\t\t}\n\t\t// any app that wants to use tutanota over MAPI needs to know which dll to load.\n\t\t// additionally, the DLL needs to know\n\t\t// * which tutanota executable to start (per-user/per-machine/snapshot/test/release)\n\t\t// * where to log (this depends on the current user -> %USERPROFILE%)\n\t\t// * where to put tmp files (also user-dependent)\n\t\t// all these must be set in the registry\n\t\tconst execPath = process.execPath\n\t\tconst dllPath = swapFilename(execPath, \"mapirs.dll\")\n\t\t// we may be a per-machine installation that's used by multiple users, so the dll will replace %USERPROFILE%\n\t\t// with the value of the USERPROFILE env var.\n\t\tconst appData = path.join(\"%USERPROFILE%\", \"AppData\")\n\t\tconst logPath = path.join(appData, \"Roaming\", this.electron.app.getName(), \"logs\")\n\t\tconst tmpPath = path.join(this.tfs.getTutanotaTempPath(), \"attach\")\n\t\tconst tmpRegScript = makeRegisterKeysScript(RegistryRoot.CURRENT_USER, { execPath, dllPath, logPath, tmpPath })\n\t\tawait this.executeRegistryScript(tmpRegScript)\n\t\tthis.electron.app.setAsDefaultProtocolClient(\"mailto\")\n\t\tawait this._openDefaultAppsSettings()\n\t}\n\n\tasync doUnregisterMailtoOnWin32WithCurrentUser(): Promise<void> {\n\t\tif (process.platform !== \"win32\") {\n\t\t\tthrow new ProgrammingError(\"Not win32\")\n\t\t}\n\t\tthis.electron.app.removeAsDefaultProtocolClient(\"mailto\")\n\t\tconst tmpRegScript = makeUnregisterKeysScript(RegistryRoot.CURRENT_USER)\n\t\tawait this.executeRegistryScript(tmpRegScript)\n\t\tawait this._openDefaultAppsSettings()\n\t}\n\n\tprivate async _openDefaultAppsSettings(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.electron.shell.openExternal(\"ms-settings:defaultapps\")\n\t\t} catch (e) {\n\t\t\t// ignoring, this is just a convenience for the user\n\t\t\tconsole.error(\"failed to open default apps settings page:\", e.message)\n\t\t}\n\t}\n\n\tgetIconByName(iconName: string): NativeImage {\n\t\tconst iconPath = getResourcePath(`icons/${iconName}`)\n\t\treturn this.electron.nativeImage.createFromPath(iconPath)\n\t}\n\n\tasync handleMailto(wm: WindowManager, mailToArg = this.mailtoArg) {\n\t\tif (mailToArg) {\n\t\t\tconst w = await wm.getLastFocused(true)\n\t\t\treturn w.commonNativeFacade.createMailEditor(/* filesUris */ [], /* text */ \"\", /* addresses */ [], /* subject */ \"\", /* mailtoURL */ mailToArg)\n\t\t}\n\t}\n}\n\nexport function isRectContainedInRect(closestRect: Rectangle, lastBounds: Rectangle): boolean {\n\treturn (\n\t\tlastBounds.x >= closestRect.x - 10 &&\n\t\tlastBounds.y >= closestRect.y - 10 &&\n\t\tlastBounds.width + lastBounds.x <= closestRect.width + 10 &&\n\t\tlastBounds.height + lastBounds.y <= closestRect.height + 10\n\t)\n}\n\nfunction findMailToUrlInArgv(argv: string[]): string | null {\n\treturn argv.find((arg) => arg.startsWith(\"mailto\")) ?? null\n}\n"]}