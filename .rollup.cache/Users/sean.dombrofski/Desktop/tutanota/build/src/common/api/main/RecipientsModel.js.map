{"version":3,"file":"RecipientsModel.js","sourceRoot":"","sources":["../../../../../src/common/api/main/RecipientsModel.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,qBAAqB,EAAE,MAAM,6CAA6C,CAAA;AAEnF,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAA;AACnE,OAAO,EAAW,cAAc,EAAE,MAAM,+BAA+B,CAAA;AACvE,OAAO,EAAE,gBAAgB,EAAE,MAAM,wCAAwC,CAAA;AACzE,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,4CAA4C,CAAA;AAwBhG,MAAM,CAAN,IAAY,WAGX;AAHD,WAAY,WAAW;IACtB,6CAAI,CAAA;IACJ,+CAAK,CAAA;AACN,CAAC,EAHW,WAAW,KAAX,WAAW,QAGtB;AAED,MAAM,OAAO,eAAe;IAIT;IACA;IACA;IACA;IANV,QAAQ,GAAG,IAAI,eAAe,CAAC,CAAC,CAAC,CAAA;IAEzC,YACkB,YAA0B,EAC1B,eAAgC,EAChC,UAAsB,EACtB,YAA0B;QAH1B,iBAAY,GAAZ,YAAY,CAAc;QAC1B,oBAAe,GAAf,eAAe,CAAiB;QAChC,eAAU,GAAV,UAAU,CAAY;QACtB,iBAAY,GAAZ,YAAY,CAAc;IACzC,CAAC;IAEJ;;;OAGG;IACH,OAAO,CAAC,SAA2B,EAAE,WAAwB;QAC5D,OAAO,IAAI,uBAAuB,CACjC,SAAS,EACT,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,eAAe,EACpB,CAAC,WAAW,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,EAC1E,IAAI,CAAC,YAAY,EACjB,WAAW,CACX,CAAA;IACF,CAAC;IAEgB,oBAAoB,GAAG,CAAC,WAAmB,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE;QAC3E,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAA;QACtE,OAAO,OAAO,IAAI,IAAI,CAAC,CAAC,yCAAwB,CAAC,wCAAuB,CAAA;IACzE,CAAC,CAAA;CACD;AAED,MAAM,uBAAuB;IA6BV;IACA;IACA;IACA;IA/BV,QAAQ,CAAQ;IAChB,KAAK,CAAe;IACX,QAAQ,CAA2B;IACnC,WAAW,CAA4B;IAEvC,WAAW,yCAAuC;IAClD,cAAc,GAAmB,IAAI,CAAA;IAE9C,eAAe,GAAmB,IAAI,CAAA;IAE9C,IAAI,OAAO;QACV,OAAO,IAAI,CAAC,QAAQ,CAAA;IACrB,CAAC;IAED,IAAI,IAAI;QACP,OAAO,IAAI,CAAC,KAAK,IAAI,EAAE,CAAA;IACxB,CAAC;IAED,IAAI,IAAI;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,WAAW,CAAA;IACnD,CAAC;IAED,IAAI,OAAO;QACV,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,cAAc,CAAA;IACzD,CAAC;IAED,YACC,GAAqB,EACJ,YAA0B,EAC1B,eAAgC,EAChC,YAA6D,EAC7D,YAA0B,EAC3C,WAAwB;QAJP,iBAAY,GAAZ,YAAY,CAAc;QAC1B,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAiD;QAC7D,iBAAY,GAAZ,YAAY,CAAc;QAG3C,IAAI,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,IAAI,4CAA2B,EAAE,CAAC;YAC3E,IAAI,CAAC,WAAW,0CAAyB,CAAA;YACzC,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QAC9C,CAAC;aAAM,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,IAAI,CAAA;YAC3B,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAA;QAC5B,CAAC;aAAM,CAAC;YACP,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAA;QAC5B,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,IAAI,IAAI,CAAA;QAE7B,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,YAAY,KAAK,CAAC,EAAE,CAAC;YACrC,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,OAAO,IAAI,IAAI,CAAA;QAC1C,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;QACxD,IAAI,CAAC,WAAW,GAAG,IAAI,UAAU,CAAC,KAAK,IAAI,EAAE;YAC5C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;YACtD,4IAA4I;YAC5I,+DAA+D;YAC/D,IAAI,OAAO,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,CAAC,EAAE,CAAC;gBAClE,IAAI,CAAC,KAAK,GAAG,qBAAqB,CAAC,OAAO,CAAC,CAAA;YAC5C,CAAC;YACD,OAAO,OAAO,CAAA;QACf,CAAC,CAAC,CAAA;QAEF,IAAI,WAAW,KAAK,WAAW,CAAC,KAAK,EAAE,CAAC;YACvC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;YACpB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAA;QACxB,CAAC;IACF,CAAC;IAED,OAAO,CAAC,OAAe;QACtB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAA;IACrB,CAAC;IAED,UAAU,CAAC,UAAmB;QAC7B,IAAI,CAAC,eAAe,GAAG,UAAU,CAAA;QACjC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAA;IAC1B,CAAC;IAED,KAAK,CAAC,QAAQ;QACb,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;QAC1E,OAAO;YACN,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;SACrB,CAAA;IACF,CAAC;IAED,UAAU;QACT,4EAA4E;QAC5E,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAA;IAC/D,CAAC;IAED,YAAY,CAAC,OAA+C;QAC3D,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC7B,OAAO,IAAI,CAAA;IACZ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,WAAW;QACxB,IAAI,IAAI,CAAC,WAAW,0CAA0B,EAAE,CAAC;YAChD,MAAM,cAAc,GAAG,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YACrD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAA;YAC7D,IAAI,aAAa,4CAA2B,EAAE,CAAC;gBAC9C,2DAA2D;gBAC3D,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAA;YAC/B,CAAC;YACD,OAAO,aAAa,CAAA;QACrB,CAAC;aAAM,CAAC;YACP,OAAO,IAAI,CAAC,WAAW,CAAA;QACxB,CAAC;IACF,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,cAAc,CAAC,OAAiC;QAC7D,IAAI,CAAC;YACJ,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;gBAC1B,OAAO,IAAI,CAAC,eAAe,CAAA;YAC5B,CAAC;iBAAM,IAAI,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;gBACjE,OAAO,CAAC,GAAG,CAAC,0DAA0D,CAAC,CAAA;gBACvE,OAAO,IAAI,CAAA;YACZ,CAAC;iBAAM,IAAI,OAAO,YAAY,KAAK,EAAE,CAAC;gBACrC,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAA;YAC7D,CAAC;iBAAM,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;gBAC5B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;gBAC3E,IAAI,YAAY,EAAE,CAAC;oBAClB,OAAO,YAAY,CAAA;gBACpB,CAAC;qBAAM,CAAC;oBACP,kFAAkF;oBAClF,kFAAkF;oBAClF,mCAAmC;oBACnC,MAAM,IAAI,CAAC,QAAQ,CAAA;oBACnB,OAAO,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAA;gBAChG,CAAC;YACF,CAAC;iBAAM,CAAC;gBACP,OAAO,OAAO,CAAA;YACf,CAAC;QACF,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAA;YACzC,OAAO,IAAI,CAAA;QACZ,CAAC;IACF,CAAC;CACD","sourcesContent":["import type { ContactModel } from \"../../contactsFunctionality/ContactModel.js\"\nimport type { LoginController } from \"./LoginController.js\"\nimport type { MailFacade } from \"../worker/facades/lazy/MailFacade.js\"\nimport type { EntityClient } from \"../common/EntityClient.js\"\nimport { getContactDisplayName } from \"../../contactsFunctionality/ContactUtils.js\"\nimport { PartialRecipient, Recipient, RecipientType } from \"../common/recipients/Recipient.js\"\nimport { BoundedExecutor, LazyLoaded } from \"@tutao/tutanota-utils\"\nimport { Contact, ContactTypeRef } from \"../entities/tutanota/TypeRefs\"\nimport { cleanMailAddress } from \"../common/utils/CommonCalendarUtils.js\"\nimport { createNewContact, isTutaMailAddress } from \"../../mailFunctionality/SharedMailUtils.js\"\n\n/**\n * A recipient that can be resolved to obtain contact and recipient type\n * It is defined as an interface, because it should only be created using RecipientsModel.resolve\n * rather than directly constructing one\n */\nexport interface ResolvableRecipient extends Recipient {\n\t/** get the resolved value of the recipient, when it's ready */\n\tresolved(): Promise<Recipient>\n\n\t/** check if resolution is complete */\n\tisResolved(): boolean\n\n\t/** provide a handler to run when resolution is done, handy for chaining */\n\twhenResolved(onResolved: (resolvedRecipient: Recipient) => void): this\n\n\t/** update the contact. will override whatever contact gets resolved */\n\tsetContact(contact: Contact): void\n\n\t/** update the name. will override whatever the name has resolved to */\n\tsetName(name: string): void\n}\n\nexport enum ResolveMode {\n\tLazy,\n\tEager,\n}\n\nexport class RecipientsModel {\n\tprivate executor = new BoundedExecutor(5)\n\n\tconstructor(\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly loginController: LoginController,\n\t\tprivate readonly mailFacade: MailFacade,\n\t\tprivate readonly entityClient: EntityClient,\n\t) {}\n\n\t/**\n\t * Start resolving a recipient\n\t * If resolveLazily === true, Then resolution will not be initiated (i.e. no server calls will be made) until the first call to `resolved`\n\t */\n\tresolve(recipient: PartialRecipient, resolveMode: ResolveMode): ResolvableRecipient {\n\t\treturn new ResolvableRecipientImpl(\n\t\t\trecipient,\n\t\t\tthis.contactModel,\n\t\t\tthis.loginController,\n\t\t\t(mailAddress) => this.executor.run(this.resolveRecipientType(mailAddress)),\n\t\t\tthis.entityClient,\n\t\t\tresolveMode,\n\t\t)\n\t}\n\n\tprivate readonly resolveRecipientType = (mailAddress: string) => async () => {\n\t\tconst keyData = await this.mailFacade.getRecipientKeyData(mailAddress)\n\t\treturn keyData == null ? RecipientType.EXTERNAL : RecipientType.INTERNAL\n\t}\n}\n\nclass ResolvableRecipientImpl implements ResolvableRecipient {\n\tprivate _address: string\n\tprivate _name: string | null\n\tprivate readonly lazyType: LazyLoaded<RecipientType>\n\tprivate readonly lazyContact: LazyLoaded<Contact | null>\n\n\tprivate readonly initialType: RecipientType = RecipientType.UNKNOWN\n\tprivate readonly initialContact: Contact | null = null\n\n\tprivate overrideContact: Contact | null = null\n\n\tget address(): string {\n\t\treturn this._address\n\t}\n\n\tget name(): string {\n\t\treturn this._name ?? \"\"\n\t}\n\n\tget type(): RecipientType {\n\t\treturn this.lazyType.getSync() ?? this.initialType\n\t}\n\n\tget contact(): Contact | null {\n\t\treturn this.lazyContact.getSync() ?? this.initialContact\n\t}\n\n\tconstructor(\n\t\targ: PartialRecipient,\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly loginController: LoginController,\n\t\tprivate readonly typeResolver: (mailAddress: string) => Promise<RecipientType>,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tresolveMode: ResolveMode,\n\t) {\n\t\tif (isTutaMailAddress(arg.address) || arg.type === RecipientType.INTERNAL) {\n\t\t\tthis.initialType = RecipientType.INTERNAL\n\t\t\tthis._address = cleanMailAddress(arg.address)\n\t\t} else if (arg.type) {\n\t\t\tthis.initialType = arg.type\n\t\t\tthis._address = arg.address\n\t\t} else {\n\t\t\tthis._address = arg.address\n\t\t}\n\n\t\tthis._name = arg.name ?? null\n\n\t\tif (!(arg.contact instanceof Array)) {\n\t\t\tthis.initialContact = arg.contact ?? null\n\t\t}\n\n\t\tthis.lazyType = new LazyLoaded(() => this.resolveType())\n\t\tthis.lazyContact = new LazyLoaded(async () => {\n\t\t\tconst contact = await this.resolveContact(arg.contact)\n\t\t\t// sometimes we create resolvable contact and then dissect it into parts and resolve it again in which case we will default to an empty name\n\t\t\t// (see the getter) but we actually want the name from contact.\n\t\t\tif (contact != null && (this._name == null || this._name === \"\")) {\n\t\t\t\tthis._name = getContactDisplayName(contact)\n\t\t\t}\n\t\t\treturn contact\n\t\t})\n\n\t\tif (resolveMode === ResolveMode.Eager) {\n\t\t\tthis.lazyType.load()\n\t\t\tthis.lazyContact.load()\n\t\t}\n\t}\n\n\tsetName(newName: string) {\n\t\tthis._name = newName\n\t}\n\n\tsetContact(newContact: Contact) {\n\t\tthis.overrideContact = newContact\n\t\tthis.lazyContact.reload()\n\t}\n\n\tasync resolved(): Promise<Recipient> {\n\t\tawait Promise.all([this.lazyType.getAsync(), this.lazyContact.getAsync()])\n\t\treturn {\n\t\t\taddress: this.address,\n\t\t\tname: this.name,\n\t\t\ttype: this.type,\n\t\t\tcontact: this.contact,\n\t\t}\n\t}\n\n\tisResolved(): boolean {\n\t\t// We are only resolved when both type and contact are non-null and finished\n\t\treturn this.lazyType.isLoaded() && this.lazyContact.isLoaded()\n\t}\n\n\twhenResolved(handler: (resolvedRecipient: Recipient) => void): this {\n\t\tthis.resolved().then(handler)\n\t\treturn this\n\t}\n\n\t/**\n\t * Determine whether recipient is INTERNAL or EXTERNAL based on the existence of key data (external recipients don't have any)\n\t */\n\tprivate async resolveType(): Promise<RecipientType> {\n\t\tif (this.initialType === RecipientType.UNKNOWN) {\n\t\t\tconst cleanedAddress = cleanMailAddress(this.address)\n\t\t\tconst recipientType = await this.typeResolver(cleanedAddress)\n\t\t\tif (recipientType === RecipientType.INTERNAL) {\n\t\t\t\t// we know this is one of ours, so it's safe to clean it up\n\t\t\t\tthis._address = cleanedAddress\n\t\t\t}\n\t\t\treturn recipientType\n\t\t} else {\n\t\t\treturn this.initialType\n\t\t}\n\t}\n\n\t/**\n\t * Resolve the recipients contact.\n\t * If {@param contact} is an Id, the contact will be loaded directly\n\t * Otherwise, the contact will be searched for in the ContactModel\n\t */\n\tprivate async resolveContact(contact: Contact | IdTuple | None): Promise<Contact | null> {\n\t\ttry {\n\t\t\tif (this.overrideContact) {\n\t\t\t\treturn this.overrideContact\n\t\t\t} else if ((await this.contactModel.getContactListId()) == null) {\n\t\t\t\tconsole.log(\"can't resolve contacts for users with no contact list id\")\n\t\t\t\treturn null\n\t\t\t} else if (contact instanceof Array) {\n\t\t\t\treturn await this.entityClient.load(ContactTypeRef, contact)\n\t\t\t} else if (contact == null) {\n\t\t\t\tconst foundContact = await this.contactModel.searchForContact(this.address)\n\t\t\t\tif (foundContact) {\n\t\t\t\t\treturn foundContact\n\t\t\t\t} else {\n\t\t\t\t\t// we don't want to create a mixed-case contact if the address is an internal one.\n\t\t\t\t\t// after lazyType is loaded, if it resolves to RecipientType.INTERNAL, we have the\n\t\t\t\t\t// cleaned address in this.address.\n\t\t\t\t\tawait this.lazyType\n\t\t\t\t\treturn createNewContact(this.loginController.getUserController().user, this.address, this.name)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn contact\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(\"error resolving contact\", e)\n\t\t\treturn null\n\t\t}\n\t}\n}\n"]}