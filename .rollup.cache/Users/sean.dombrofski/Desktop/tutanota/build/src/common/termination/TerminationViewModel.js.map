{"version":3,"file":"TerminationViewModel.js","sourceRoot":"","sources":["../../../../src/common/termination/TerminationViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { SessionType } from \"../api/common/SessionType.js\"\nimport { LoginState } from \"../login/LoginViewModel.js\"\nimport { InfoLink, lang, MaybeTranslation } from \"../misc/LanguageViewModel.js\"\nimport { LoginController } from \"../api/main/LoginController.js\"\nimport { getLoginErrorStateAndMessage } from \"../misc/LoginUtils.js\"\nimport { SecondFactorHandler } from \"../misc/2fa/SecondFactorHandler.js\"\nimport { TerminationPeriodOptions } from \"../api/common/TutanotaConstants.js\"\nimport { IServiceExecutor } from \"../api/common/ServiceRequest.js\"\nimport { CustomerAccountTerminationService } from \"../api/entities/sys/Services.js\"\nimport {\n\tcreateCustomerAccountTerminationPostIn,\n\tCustomerAccountTerminationRequest,\n\tCustomerAccountTerminationRequestTypeRef,\n\tSurveyData,\n} from \"../api/entities/sys/TypeRefs.js\"\nimport { EntityClient } from \"../api/common/EntityClient.js\"\nimport { PreconditionFailedError } from \"../api/common/error/RestError.js\"\nimport { incrementDate } from \"@tutao/tutanota-utils\"\n\nexport class TerminationViewModel {\n\tmailAddress: string\n\tpassword: string\n\tdate: Date\n\tterminationPeriodOption: TerminationPeriodOptions\n\tacceptedTerminationRequest: CustomerAccountTerminationRequest | null\n\thelpText: MaybeTranslation\n\tloginState: LoginState\n\n\tconstructor(\n\t\tprivate readonly loginController: LoginController,\n\t\tprivate readonly secondFactorHandler: SecondFactorHandler,\n\t\tprivate readonly serviceExecutor: IServiceExecutor,\n\t\tprivate readonly entityClient: EntityClient,\n\t) {\n\t\tthis.mailAddress = \"\"\n\t\tthis.password = \"\"\n\t\tthis.date = incrementDate(new Date(), 1)\n\t\tthis.acceptedTerminationRequest = null\n\t\tthis.terminationPeriodOption = TerminationPeriodOptions.EndOfCurrentPeriod\n\t\tthis.helpText = \"emptyString_msg\"\n\t\tthis.loginState = LoginState.NotAuthenticated\n\t}\n\n\tasync createAccountTerminationRequest(surveyData: SurveyData | null = null): Promise<void> {\n\t\tawait this.authenticate()\n\t\tif (this.loginState == LoginState.LoggedIn) {\n\t\t\tawait this.createTerminationRequest(surveyData)\n\t\t}\n\t}\n\n\t/**\n\t * Creates the termination request based on the date option selected by the user and assument that the authentication was successfull.\n\t */\n\tprivate async createTerminationRequest(surveyData: SurveyData | null) {\n\t\ttry {\n\t\t\tconst inputData = createCustomerAccountTerminationPostIn({\n\t\t\t\tterminationDate: this.getTerminationDate(),\n\t\t\t\tsurveyData: surveyData,\n\t\t\t})\n\t\t\tlet serviceResponse = await this.serviceExecutor.post(CustomerAccountTerminationService, inputData)\n\t\t\tthis.acceptedTerminationRequest = await this.entityClient.load(CustomerAccountTerminationRequestTypeRef, serviceResponse.terminationRequest)\n\t\t} catch (e) {\n\t\t\tif (e instanceof PreconditionFailedError) {\n\t\t\t\tswitch (e.data) {\n\t\t\t\t\tcase \"invalidTerminationDate\":\n\t\t\t\t\t\tthis.onTerminationRequestFailed(\"terminationInvalidDate_msg\")\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"alreadyCancelled\":\n\t\t\t\t\t\tthis.onTerminationRequestFailed(\"terminationAlreadyCancelled_msg\")\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"noActiveSubscription\":\n\t\t\t\t\t\tthis.onTerminationRequestFailed(\"terminationNoActiveSubscription_msg\")\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase \"hasAppStoreSubscription\":\n\t\t\t\t\t\tthis.onTerminationRequestFailed(\n\t\t\t\t\t\t\tlang.getTranslation(\"deleteAccountWithAppStoreSubscription_msg\", { \"{AppStorePayment}\": InfoLink.AppStorePayment }),\n\t\t\t\t\t\t)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t} finally {\n\t\t\tawait this.loginController.logout(false)\n\t\t\tthis.loginState = LoginState.NotAuthenticated\n\t\t}\n\t}\n\n\tprivate onTerminationRequestFailed(errorMessage: MaybeTranslation) {\n\t\tthis.helpText = errorMessage\n\t}\n\n\tprivate onAuthentication() {\n\t\tthis.helpText = \"emptyString_msg\"\n\t\tthis.loginState = LoginState.LoggedIn\n\t}\n\n\tprivate onError(helpText: MaybeTranslation, state: LoginState) {\n\t\tthis.helpText = helpText\n\t\tthis.loginState = state\n\t}\n\n\tprivate getTerminationDate(): Date | null {\n\t\treturn this.terminationPeriodOption === TerminationPeriodOptions.EndOfCurrentPeriod\n\t\t\t? // The server will use the end of the current subscription period to cancel the account if the terminationDate is null.\n\t\t\t  null\n\t\t\t: this.date\n\t}\n\n\tasync authenticate(): Promise<void> {\n\t\tconst mailAddress = this.mailAddress\n\t\tconst password = this.password\n\n\t\tif (mailAddress === \"\" || password === \"\") {\n\t\t\tthis.onError(\"loginFailed_msg\", LoginState.InvalidCredentials)\n\t\t\treturn\n\t\t}\n\t\tthis.helpText = \"emptyString_msg\"\n\t\ttry {\n\t\t\tawait this.loginController.createSession(mailAddress, password, SessionType.Temporary)\n\t\t\tthis.onAuthentication()\n\t\t} catch (e) {\n\t\t\tconst { errorMessage, state } = getLoginErrorStateAndMessage(e)\n\t\t\tthis.onError(errorMessage, state)\n\t\t} finally {\n\t\t\tawait this.secondFactorHandler.closeWaitingForSecondFactorDialog()\n\t\t}\n\t}\n}\n"]}