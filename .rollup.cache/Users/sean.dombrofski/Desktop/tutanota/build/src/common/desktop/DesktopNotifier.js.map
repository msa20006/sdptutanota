{"version":3,"file":"DesktopNotifier.js","sourceRoot":"","sources":["../../../../src/common/desktop/DesktopNotifier.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NativeImage } from \"electron\"\nimport type { DesktopTray } from \"./tray/DesktopTray\"\nimport type { ApplicationWindow } from \"./ApplicationWindow\"\nimport type { ElectronNotificationFactory } from \"./NotificatonFactory\"\n\nexport const enum NotificationResult {\n\tClick = \"click\",\n\tClose = \"close\",\n}\n\nexport class DesktopNotifier {\n\t_tray: DesktopTray\n\t_canShow: boolean = false\n\tpendingNotifications: Array<(...args: Array<any>) => any> = []\n\t_notificationCloseFunctions: { [userId in string]?: () => void } = {}\n\t_notificationFactory: ElectronNotificationFactory\n\n\tconstructor(tray: DesktopTray, notificationFactory: ElectronNotificationFactory) {\n\t\tthis._tray = tray\n\t\tthis._notificationFactory = notificationFactory\n\t}\n\n\t/**\n\t * signal that notifications can now be shown. also start showing notifications that came\n\t * in before this point\n\t */\n\tstart(delay: number): void {\n\t\tsetTimeout(() => {\n\t\t\tthis._canShow = true\n\n\t\t\twhile (this.pendingNotifications.length > 0) {\n\t\t\t\tthis.pendingNotifications.shift()?.()\n\t\t\t}\n\t\t}, delay)\n\t}\n\n\tisAvailable(): boolean {\n\t\treturn this._notificationFactory.isSupported()\n\t}\n\n\t/**\n\t * Shows a simple Desktop Notification to the user, once.\n\t * @param props.title title of the notification\n\t * @param props.body body message. keep to less than 200 bytes for maximum compatibility.\n\t * @param props.clickHandler Called when the user clicks the notification\n\t * @param props.closeHandler Called when the notification was closed (by timeout or user action).\n\t */\n\tasync showOneShot(props: { title: string; body?: string; icon?: NativeImage }): Promise<NotificationResult> {\n\t\tconst withIcon = {\n\t\t\ttitle: props.title,\n\t\t\tbody: props.body,\n\t\t\ticon: props.icon || (await this._tray.getAppIcon()),\n\t\t}\n\n\t\tif (!this.isAvailable()) {\n\t\t\treturn Promise.reject()\n\t\t}\n\n\t\treturn this._canShow\n\t\t\t? new Promise((resolve) => this._notificationFactory.makeNotification(withIcon, (res) => resolve(res)))\n\t\t\t: new Promise((resolve) =>\n\t\t\t\t\tthis.pendingNotifications.push(() => {\n\t\t\t\t\t\tthis._notificationFactory.makeNotification(withIcon, (res) => resolve(res))\n\t\t\t\t\t}),\n\t\t\t  )\n\t}\n\n\tsubmitGroupedNotification(title: string, message: string, id: string, onClick: (arg0: NotificationResult) => void): void {\n\t\tif (\"function\" === typeof this._notificationCloseFunctions[id]) {\n\t\t\t// close previous notification for this id\n\t\t\tthis._notificationCloseFunctions[id]?.()\n\t\t}\n\n\t\tconst showIt = async () => {\n\t\t\tif (!this.isAvailable()) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis._notificationCloseFunctions[id] = this._notificationFactory.makeNotification(\n\t\t\t\t{\n\t\t\t\t\ttitle: title,\n\t\t\t\t\tbody: message,\n\t\t\t\t\ticon: await this._tray.getAppIcon(),\n\t\t\t\t},\n\t\t\t\tonClick,\n\t\t\t)\n\n\t\t\tthis._tray.setBadge()\n\n\t\t\tthis._tray.update(this)\n\t\t}\n\n\t\tif (this._canShow) {\n\t\t\tshowIt()\n\t\t} else {\n\t\t\tthis.pendingNotifications.push(showIt)\n\t\t}\n\t}\n\n\tresolveGroupedNotification(userId: string | null) {\n\t\tif (userId && \"function\" === typeof this._notificationCloseFunctions[userId]) {\n\t\t\tthis._notificationCloseFunctions[userId]?.()\n\n\t\t\tthis._tray.update(this)\n\n\t\t\tdelete this._notificationCloseFunctions[userId]\n\t\t}\n\t}\n\n\thasNotificationsForWindow(w: ApplicationWindow): boolean {\n\t\tconst userId = w.getUserId()\n\t\treturn userId != null && this.hasNotificationForId(userId)\n\t}\n\n\thasNotificationForId(id: string): boolean {\n\t\treturn \"function\" === typeof this._notificationCloseFunctions[id]\n\t}\n}\n"]}