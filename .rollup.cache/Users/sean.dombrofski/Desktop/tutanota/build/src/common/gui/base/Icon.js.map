{"version":3,"file":"Icon.js","sourceRoot":"","sources":["../../../../../src/common/gui/base/Icon.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Children, Component, Vnode, VnodeDOM } from \"mithril\"\nimport { theme } from \"../theme\"\nimport type { lazy } from \"@tutao/tutanota-utils\"\nimport { memoized } from \"@tutao/tutanota-utils\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport { BootIcons, BootIconsSvg } from \"./icons/BootIcons\"\nimport { Icons } from \"./icons/Icons\"\nimport { px, size } from \"../size.js\"\n\nassertMainOrNode()\n\nexport type AllIcons = BootIcons | Icons\n\nexport enum IconSize {\n\tNormal,\n\tMedium,\n\tLarge,\n\tXL,\n\tXXL,\n}\n\nexport type IconAttrs = {\n\ticon: AllIcons\n\tsvgParameters?: Record<string, string>\n\tclass?: string\n\tsize?: IconSize\n\tstyle?: Record<string, any>\n\thoverText?: string | null\n\tcontainer?: \"span\" | \"div\" // defaults to \"span\"\n\ttitle?: string // if you want to use native tooltip\n}\n\nexport type lazyIcon = lazy<AllIcons>\n\nlet IconsSvg = {}\n\nimport(\"./icons/Icons.js\").then((IconsModule) => {\n\tIconsSvg = IconsModule.IconsSvg\n})\n\nexport class Icon implements Component<IconAttrs> {\n\tprivate root: HTMLElement | null = null\n\tprivate tooltip?: HTMLElement\n\n\toncreate(vnode: VnodeDOM<IconAttrs>): any {\n\t\tthis.root = vnode.dom as HTMLElement\n\t}\n\n\tview(vnode: Vnode<IconAttrs>): Children {\n\t\t// @ts-ignore\n\t\tconst icon = this.getIcon({ icon: vnode.attrs.icon, parameters: vnode.attrs.svgParameters })\n\t\tconst containerClasses = this.getContainerClasses(vnode.attrs)\n\n\t\treturn m(\n\t\t\tcontainerClasses,\n\t\t\t{\n\t\t\t\ttitle: vnode.attrs.title ?? null,\n\t\t\t\t\"aria-hidden\": \"true\",\n\t\t\t\tclass: this.getClass(vnode.attrs),\n\t\t\t\tstyle: this.getStyle(vnode.attrs.style ?? null),\n\t\t\t\t// mithril lets us mute the normal redraw that occurs after\n\t\t\t\t// event callbacks, but TS doesn't know\n\t\t\t\tonmouseenter: (e: MouseEvent & { redraw: boolean }) => {\n\t\t\t\t\tif (this.root && this.tooltip) {\n\t\t\t\t\t\tthis.moveElementIfOffscreen(this.root, this.tooltip)\n\t\t\t\t\t} else {\n\t\t\t\t\t\te.redraw = false\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ticon ? m.trust(icon) : null,\n\t\t\tvnode.attrs.hoverText &&\n\t\t\t\tm(\n\t\t\t\t\t\"span.tooltiptext.max-width-m.break-word\",\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle: { marginRight: \"-100vmax\" },\n\t\t\t\t\t\toncreate: (vnode) => {\n\t\t\t\t\t\t\tthis.tooltip = vnode.dom as HTMLElement\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tvnode.attrs.hoverText,\n\t\t\t\t),\n\t\t) // icon is typed, so we may not embed untrusted data\n\t}\n\n\tprivate moveElementIfOffscreen(root: HTMLElement, tooltip: HTMLElement): void {\n\t\ttooltip.style.removeProperty(\"left\")\n\t\tconst tooltipRect = tooltip.getBoundingClientRect()\n\t\t// Get the width of the area in pixels that the tooltip penetrates the viewport\n\t\tconst distanceOver = tooltipRect.x + tooltipRect.width + size.hpad_large - window.innerWidth\n\t\tif (distanceOver > 0) {\n\t\t\tconst parentRect = root.getBoundingClientRect()\n\t\t\t// Chromium based browsers return a different value for tooltipRect\n\t\t\t// Compensate by shifting further to the right\n\t\t\tconst chromeShift = 20\n\t\t\ttooltip.style.left = px(-distanceOver - parentRect.width - chromeShift)\n\t\t}\n\t}\n\n\tprivate getIcon = memoized((args: { icon: AllIcons; parameters?: Record<string, string> }) => {\n\t\t// @ts-ignore\n\t\tlet rawIcon = BootIconsSvg[args.icon] ?? IconsSvg[args.icon]\n\t\tif (typeof rawIcon !== \"string\") return null\n\t\tfor (const parameter in args.parameters) {\n\t\t\trawIcon = rawIcon.replace(`{${parameter}}`, args.parameters[parameter])\n\t\t}\n\t\treturn rawIcon as string\n\t})\n\n\tgetStyle(style: Record<string, any> | null): {\n\t\tfill: string\n\t} {\n\t\tstyle = style ? style : {}\n\n\t\tif (!style.fill) {\n\t\t\tstyle.fill = theme.content_accent\n\t\t}\n\n\t\treturn style as { fill: string }\n\t}\n\n\tgetClass(attrs: IconAttrs): string {\n\t\tlet cls = \"\"\n\t\tswitch (attrs.size) {\n\t\t\tcase IconSize.Medium:\n\t\t\t\tcls += \"icon-large \"\n\t\t\t\tbreak\n\t\t\tcase IconSize.Large:\n\t\t\t\tcls += \"icon-medium-large \"\n\t\t\t\tbreak\n\t\t\tcase IconSize.XL:\n\t\t\t\tcls += \"icon-xl \"\n\t\t\t\tbreak\n\t\t\tcase IconSize.XXL:\n\t\t\t\tcls += \"icon-xxl \"\n\t\t\t\tbreak\n\n\t\t\tcase IconSize.Normal:\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\n\t\tif (attrs.class) {\n\t\t\tcls += attrs.class\n\t\t}\n\t\treturn cls\n\t}\n\n\tgetContainerClasses(attrs: IconAttrs): string {\n\t\tconst container = attrs.container || \"span\"\n\t\tlet classes = container + \".icon\"\n\t\tif (attrs.hoverText) {\n\t\t\tclasses += \".tooltip\"\n\t\t}\n\t\treturn classes\n\t}\n}\n\nexport function progressIcon(): Vnode<IconAttrs> {\n\treturn m(Icon, {\n\t\ticon: BootIcons.Progress,\n\t\tclass: \"icon-large icon-progress\",\n\t})\n}\n"]}