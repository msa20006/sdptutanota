{"version":3,"file":"FileFacade.js","sourceRoot":"","sources":["../../../../../../src/common/native/common/generatedipc/FileFacade.ts"],"names":[],"mappings":"AAAA,iCAAiC","sourcesContent":["/* generated file, don't edit. */\n\nimport { IpcClientRect } from \"./IpcClientRect.js\"\nimport { UploadTaskResponse } from \"./UploadTaskResponse.js\"\nimport { DownloadTaskResponse } from \"./DownloadTaskResponse.js\"\nimport { DataFile } from \"./DataFile.js\"\n/**\n * filesystem-related operations. none of the methods writing files to disk guarantee a fixed file name or location, except for putFileIntoDownloadsFolder.\n */\nexport interface FileFacade {\n\t/**\n\t * Opens the file with the built-in viewer or external program.\n\t */\n\topen(location: string, mimeType: string): Promise<void>\n\n\t/**\n\t * Opens OS file picker. Returns the list of URIs for the selected files. add a list of extensions (without dot) to filter the options.\n\t */\n\topenFileChooser(boundingRect: IpcClientRect, filter: ReadonlyArray<string> | null, isFileOnly: boolean | null): Promise<ReadonlyArray<string>>\n\n\t/**\n\t * Opens OS file picker for selecting a folder. Only on desktop.\n\t */\n\topenFolderChooser(): Promise<string | null>\n\n\tdeleteFile(file: string): Promise<void>\n\n\tgetName(file: string): Promise<string>\n\n\tgetMimeType(file: string): Promise<string>\n\n\t/**\n\t * get the absolute size in bytes of the file at the given location\n\t */\n\tgetSize(file: string): Promise<number>\n\n\t/**\n\t * move and rename a decrypted file from the decryption location to the download location preferred by the user and return the absolute path to the moved file\n\t */\n\tputFileIntoDownloadsFolder(localFileUri: string, fileNameToUse: string): Promise<string>\n\n\tupload(fileUrl: string, targetUrl: string, method: string, headers: Record<string, string>): Promise<UploadTaskResponse>\n\n\t/**\n\t * download an encrypted file to the file system and return the location of the data\n\t */\n\tdownload(sourceUrl: string, filename: string, headers: Record<string, string>): Promise<DownloadTaskResponse>\n\n\t/**\n\t * Calculates specified file hash (with SHA-256). Returns first 6 bytes of it as Base64.\n\t */\n\thashFile(fileUri: string): Promise<string>\n\n\tclearFileData(): Promise<void>\n\n\t/**\n\t * given a list of chunk file locations, will re-join them in order to reconstruct a single file and returns the location of that file on disk.\n\t */\n\tjoinFiles(filename: string, files: ReadonlyArray<string>): Promise<string>\n\n\t/**\n\t * split a given file on disk into as many chunks as necessary to limit their size to the max byte size. returns the list of chunk file locations.\n\t */\n\tsplitFile(fileUri: string, maxChunkSizeBytes: number): Promise<ReadonlyArray<string>>\n\n\t/**\n\t * Save the unencrypted data file to the disk into a fixed temporary location, not the user's preferred download dir.\n\t */\n\twriteDataFile(file: DataFile): Promise<string>\n\n\t/**\n\t * read the file at the given location into a DataFile. Returns null if reading fails for any reason.\n\t */\n\treadDataFile(filePath: string): Promise<DataFile | null>\n}\n"]}