{"version":3,"file":"PdfStreamObject.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/pdf/PdfStreamObject.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAC1C,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAmC,MAAM,mBAAmB,CAAA;AAEhG;;;GAGG;AACH,MAAM,OAAO,eAAgB,SAAQ,SAAS;IAC5B,MAAM,CAAY;IAEnC,YAAY,YAAoB,EAAE,gBAA2C,EAAE,MAAkB,EAAE,cAAiC;QACnI,KAAK,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAA;QACrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,cAAc,KAAK,MAAM,EAAE,CAAC;YAC/B,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAA;QACpD,CAAC;QACD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAA;IAClE,CAAC;IAEM,kBAAkB,CAAC,WAAwB;QACjD,OAAO,IAAI,UAAU,CAAC,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAA;IACtI,CAAC;IAEM,eAAe;QACrB,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,IAAI,iBAAiB,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAA;QAClF,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAChD,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,CAAA;QACzB,CAAC;QACD,IAAI,IAAI,GAAG,QAAQ,KAAK,QAAQ,SAAS,QAAQ,EAAE,CAAA;QACnD,OAAO,IAAI,CAAA;IACZ,CAAC;IAEM,eAAe;QACrB,OAAO,GAAG,QAAQ,YAAY,QAAQ,SAAS,QAAQ,EAAE,CAAA;IAC1D,CAAC;CACD","sourcesContent":["import { PdfObject } from \"./PdfObject.js\"\nimport { GENERATION_NUMBER, NEW_LINE, PdfDictValue, PdfStreamEncoding } from \"./PdfConstants.js\"\n\n/**\n * PDF object with an additional stream.\n * The stream requires different encoding syntax\n */\nexport class PdfStreamObject extends PdfObject {\n\tprivate readonly stream: Uint8Array\n\n\tconstructor(objectNumber: number, objectDictionary: Map<string, PdfDictValue>, stream: Uint8Array, streamEncoding: PdfStreamEncoding) {\n\t\tsuper(objectNumber, objectDictionary)\n\t\tthis.stream = stream\n\t\tif (streamEncoding !== \"NONE\") {\n\t\t\tthis.objectDictionary.set(\"Filter\", streamEncoding)\n\t\t}\n\t\tthis.objectDictionary.set(\"Length\", stream.byteLength.toString())\n\t}\n\n\tpublic encodeToUInt8Array(textEncoder: TextEncoder): Uint8Array {\n\t\treturn new Uint8Array([...textEncoder.encode(this.parseObjectHead()), ...this.stream, ...textEncoder.encode(this.parseObjectTail())])\n\t}\n\n\tpublic parseObjectHead(): string {\n\t\tlet head = `${this.objectNumber} ${GENERATION_NUMBER} obj${NEW_LINE}<<${NEW_LINE}`\n\t\tfor (const [key, val] of this.objectDictionary) {\n\t\t\thead += `/${key} ${val}`\n\t\t}\n\t\thead += `${NEW_LINE}>>${NEW_LINE}stream${NEW_LINE}`\n\t\treturn head\n\t}\n\n\tpublic parseObjectTail(): string {\n\t\treturn `${NEW_LINE}endstream${NEW_LINE}endobj${NEW_LINE}`\n\t}\n}\n"]}