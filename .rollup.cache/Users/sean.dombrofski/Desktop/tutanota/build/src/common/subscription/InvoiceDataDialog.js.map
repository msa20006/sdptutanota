{"version":3,"file":"InvoiceDataDialog.js","sourceRoot":"","sources":["../../../../src/common/subscription/InvoiceDataDialog.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,SAAS,CAAA;AACvB,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAA;AAE3C,OAAO,EAAE,IAAI,EAAE,MAAM,2BAA2B,CAAA;AAChD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAA;AACrD,OAAO,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAA;AAC/D,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAA;AAG/D,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAA;AAC/C,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAA;AAEnD,MAAM,UAAU,IAAI,CACnB,WAAoB,EACpB,WAAwB,EACxB,cAA8B,EAC9B,SAA0B,EAC1B,aAA8B;IAE9B,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAA;IAEvE,MAAM,aAAa,GAAG,GAAG,EAAE;QAC1B,IAAI,KAAK,GAAG,gBAAgB,CAAC,mBAAmB,EAAE,CAAA;QAElD,IAAI,KAAK,EAAE,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QACtB,CAAC;aAAM,CAAC;YACP,iBAAiB,CAAC,iBAAiB,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE,gBAAgB,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,cAAc,CAAC;iBAC7I,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;gBACjB,IAAI,OAAO,EAAE,CAAC;oBACb,MAAM,CAAC,KAAK,EAAE,CAAA;gBACf,CAAC;YACF,CAAC,CAAC;iBACD,KAAK,CACL,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,EAAE,EAAE;gBAC9B,MAAM,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAA;YAChD,CAAC,CAAC,CACF,CAAA;QACH,CAAC;IACF,CAAC,CAAA;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,gBAAgB,CAAC;QACtC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,iBAAiB;QAChD,KAAK,EAAE;YACN,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,0BAA0B,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;SAC1H;QACD,QAAQ,EAAE,aAAa;QACvB,WAAW,EAAE,IAAI;QACjB,cAAc,EAAE,aAAa;KAC7B,CAAC,CAAA;IACF,OAAO,MAAM,CAAA;AACd,CAAC","sourcesContent":["import m from \"mithril\"\nimport { Dialog } from \"../gui/base/Dialog\"\nimport type { TranslationKey } from \"../misc/LanguageViewModel\"\nimport { lang } from \"../misc/LanguageViewModel\"\nimport { InvoiceDataInput } from \"./InvoiceDataInput\"\nimport { updatePaymentData } from \"./InvoiceAndPaymentDataPage\"\nimport { BadRequestError } from \"../api/common/error/RestError\"\nimport type { AccountingInfo } from \"../api/entities/sys/TypeRefs.js\"\nimport type { InvoiceData } from \"../api/common/TutanotaConstants\"\nimport { ofClass } from \"@tutao/tutanota-utils\"\nimport { asPaymentInterval } from \"./PriceUtils.js\"\n\nexport function show(\n\tbusinessUse: boolean,\n\tinvoiceData: InvoiceData,\n\taccountingInfo: AccountingInfo,\n\theadingId?: TranslationKey,\n\tinfoMessageId?: TranslationKey,\n): Dialog {\n\tconst invoiceDataInput = new InvoiceDataInput(businessUse, invoiceData)\n\n\tconst confirmAction = () => {\n\t\tlet error = invoiceDataInput.validateInvoiceData()\n\n\t\tif (error) {\n\t\t\tDialog.message(error)\n\t\t} else {\n\t\t\tupdatePaymentData(asPaymentInterval(accountingInfo.paymentInterval), invoiceDataInput.getInvoiceData(), null, null, false, \"0\", accountingInfo)\n\t\t\t\t.then((success) => {\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(BadRequestError, (e) => {\n\t\t\t\t\t\tDialog.message(\"paymentMethodNotAvailable_msg\")\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t}\n\t}\n\n\tconst dialog = Dialog.showActionDialog({\n\t\ttitle: headingId ? headingId : \"invoiceData_msg\",\n\t\tchild: {\n\t\t\tview: () => m(\"#changeInvoiceDataDialog\", [infoMessageId ? m(\".pt\", lang.get(infoMessageId)) : null, m(invoiceDataInput)]),\n\t\t},\n\t\tokAction: confirmAction,\n\t\tallowCancel: true,\n\t\tokActionTextId: \"save_action\",\n\t})\n\treturn dialog\n}\n"]}