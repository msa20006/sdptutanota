{"version":3,"file":"ScopedRouter.js","sourceRoot":"","sources":["../../../../src/common/gui/ScopedRouter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAA;AACtD,OAAO,CAAC,MAAM,SAAS,CAAA;AACvB,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAA;AACrD,OAAO,EAAE,gBAAgB,EAAE,MAAM,yCAAyC,CAAA;AAU1E,MAAM,OAAO,eAAe;IACV,cAAc,GAAG,aAAa,CAAC,EAAE,EAAE,aAAa,EAAE,CAAC,CAAA;IAEpE,WAAW;QACV,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAA;IACrB,CAAC;IAED,OAAO,CAAC,IAAY,EAAE,MAA2B;QAChD,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;IAClC,CAAC;CACD;AAED,gGAAgG;AAChG,MAAM,OAAO,YAAY;IAGK;IAFZ,KAAK,CAAQ;IAE9B,YAA6B,MAAc,EAAE,KAAY;QAA5B,WAAM,GAAN,MAAM,CAAQ;QAC1C,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,gBAAgB,CAAC,+CAA+C,KAAK,EAAE,CAAC,CAAA;QACnF,CAAC;QACD,IAAI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,gBAAgB,CAAC,wDAAwD,KAAK,EAAE,CAAC,CAAA;QAC5F,CAAC;QACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;IAChC,CAAC;IAED,WAAW;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAA;IACjC,CAAC;IAED,OAAO,CAAC,IAAY,EAAE,MAA2B;QAChD,IAAI,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC;YAC/D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;QAClC,CAAC;IACF,CAAC;CACD;AAED,MAAM,UAAU,kBAAkB,CAAC,yBAAiC,EAAE,KAAa;IAClF,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;IACvC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,yBAAyB,CAAA;AACxD,CAAC","sourcesContent":["import { throttleRoute } from \"../misc/RouteChange.js\"\nimport m from \"mithril\"\nimport { debounceStart } from \"@tutao/tutanota-utils\"\nimport { ProgrammingError } from \"../api/common/error/ProgrammingError.js\"\n\n/** URL-related functions */\nexport interface Router {\n\tgetFullPath(): string\n\n\t/** will do parameter substitution like mithril route */\n\trouteTo(path: string, params: Record<string, any>): void\n}\n\nexport class ThrottledRouter implements Router {\n\tprivate readonly throttledRoute = debounceStart(32, throttleRoute())\n\n\tgetFullPath(): string {\n\t\treturn m.route.get()\n\t}\n\n\trouteTo(path: string, params: Record<string, any>) {\n\t\tthis.throttledRoute(path, params)\n\t}\n}\n\n/** router that is scoped to a specific prefix and will ignore the path changes outside of it */\nexport class ScopedRouter<Scope extends string> implements Router {\n\tprivate readonly scope: string\n\n\tconstructor(private readonly router: Router, scope: Scope) {\n\t\tif (!scope.startsWith(\"/\")) {\n\t\t\tthrow new ProgrammingError(`Scope must start with a forward slash! got: ${scope}`)\n\t\t}\n\t\tif (scope.split(\"/\").length > 2) {\n\t\t\tthrow new ProgrammingError(`Does not support nested scopes yet. Easter egg! got: ${scope}`)\n\t\t}\n\t\tthis.scope = scope.substring(1)\n\t}\n\n\tgetFullPath(): string {\n\t\treturn this.router.getFullPath()\n\t}\n\n\trouteTo(path: string, params: Record<string, any>) {\n\t\tif (routeMatchesPrefix(this.scope, this.router.getFullPath())) {\n\t\t\tthis.router.routeTo(path, params)\n\t\t}\n\t}\n}\n\nexport function routeMatchesPrefix(prefixWithoutLeadingSlash: string, route: string): boolean {\n\tconst { path } = m.parsePathname(route)\n\treturn path.split(\"/\")[1] === prefixWithoutLeadingSlash\n}\n"]}