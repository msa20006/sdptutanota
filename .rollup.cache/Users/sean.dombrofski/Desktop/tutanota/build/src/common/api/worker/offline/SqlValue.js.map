{"version":3,"file":"SqlValue.js","sourceRoot":"","sources":["../../../../../../src/common/api/worker/offline/SqlValue.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAA;AAqBjD,MAAM,UAAU,YAAY,CAAC,MAAgC;IAC5D,OAAO,SAAS,CAAC,CAAC,CAAW,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA;AAC1D,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,KAAe;IAC1C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC/B,OAAO,EAAE,IAAI,+BAAgB,EAAE,KAAK,EAAE,KAAK,EAAE,CAAA;IAC9C,CAAC;SAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QACtC,OAAO,EAAE,IAAI,+BAAgB,EAAE,KAAK,EAAE,KAAK,EAAE,CAAA;IAC9C,CAAC;SAAM,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC;QAC1B,OAAO,EAAE,IAAI,8BAAc,EAAE,KAAK,EAAE,IAAI,EAAE,CAAA;IAC3C,CAAC;SAAM,CAAC;QACP,OAAO,EAAE,IAAI,gCAAe,EAAE,KAAK,EAAE,KAAK,EAAE,CAAA;IAC7C,CAAC;AACF,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,MAAsB;IACnD,OAAO,MAAM,CAAC,KAAK,CAAA;AACpB,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,MAAsC;IACpE,OAAO,SAAS,CAAC,CAAC,CAAiB,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;AACzD,CAAC","sourcesContent":["import { mapObject } from \"@tutao/tutanota-utils\"\n\nexport type SqlValue = null | string | number | Uint8Array\n\n/**\n * Type tag for values being passed to SQL statements\n */\nexport const enum SqlType {\n\tNull = \"SqlNull\",\n\tNumber = \"SqlNum\",\n\tString = \"SqlStr\",\n\tBytes = \"SqlBytes\",\n}\n\nexport type FormattedQuery = { query: string; params: TaggedSqlValue[] }\nexport type TaggedSqlValue =\n\t| { type: SqlType.Null; value: null }\n\t| { type: SqlType.String; value: string }\n\t| { type: SqlType.Number; value: number }\n\t| { type: SqlType.Bytes; value: Uint8Array }\n\nexport function tagSqlObject(params: Record<string, SqlValue>): Record<string, TaggedSqlValue> {\n\treturn mapObject((p: SqlValue) => tagSqlValue(p), params)\n}\n\nexport function tagSqlValue(param: SqlValue): TaggedSqlValue {\n\tif (typeof param === \"string\") {\n\t\treturn { type: SqlType.String, value: param }\n\t} else if (typeof param === \"number\") {\n\t\treturn { type: SqlType.Number, value: param }\n\t} else if (param == null) {\n\t\treturn { type: SqlType.Null, value: null }\n\t} else {\n\t\treturn { type: SqlType.Bytes, value: param }\n\t}\n}\n\nexport function untagSqlValue(tagged: TaggedSqlValue): SqlValue {\n\treturn tagged.value\n}\n\nexport function untagSqlObject(tagged: Record<string, TaggedSqlValue>): Record<string, SqlValue> {\n\treturn mapObject((p: TaggedSqlValue) => p.value, tagged)\n}\n"]}