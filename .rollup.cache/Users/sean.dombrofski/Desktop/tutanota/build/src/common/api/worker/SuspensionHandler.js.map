{"version":3,"file":"SuspensionHandler.js","sourceRoot":"","sources":["../../../../../src/common/api/worker/SuspensionHandler.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAA;AAInD,MAAM,OAAO,iBAAiB;IAOA;IAN7B,YAAY,CAAS;IACrB,eAAe,CAAQ;IACvB,iBAAiB,CAA4B;IAC7C,mBAAmB,CAAS;IAC5B,QAAQ,CAAe;IAEvB,YAA6B,kBAAsC,EAAE,aAA4B;QAApE,uBAAkB,GAAlB,kBAAkB,CAAoB;QAClE,IAAI,CAAC,YAAY,GAAG,KAAK,CAAA;QACzB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAA;QACxB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAA;QAC3B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAA;QAChC,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAA;IAC9B,CAAC;IAED;;OAEG;IACH,kEAAkE;IAClE,4BAA4B,CAAC,yBAAiC,EAAE,WAAgB;QAC/E,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;YACzB,OAAO,CAAC,GAAG,CAAC,0BAA0B,WAAW,OAAO,yBAAyB,GAAG,CAAC,CAAA;YACrF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAA;YACxB,MAAM,mBAAmB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;YAEtC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE;gBACnC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAA;gBACzB,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,mBAAmB,CAAC,GAAG,IAAI,GAAG,CAAC,CAAA;gBACtF,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAA;YACnC,CAAC,EAAE,yBAAyB,GAAG,IAAI,CAAC,CAAA;YAEpC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBAC/B,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC;oBACrC,cAAc,EAAE,4BAA4B;oBAC5C,IAAI,EAAE,EAAE;iBACR,CAAC,CAAA;gBAEF,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAA;YAChC,CAAC;QACF,CAAC;IACF,CAAC;IAED,WAAW;QACV,OAAO,IAAI,CAAC,YAAY,CAAA;IACzB,CAAC;IAED;;;;OAIG;IACH,YAAY,CAAC,OAA2B;QACvC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,MAAM,cAAc,GAAG,KAAK,EAAE,CAAA;YAE9B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;YAE3C,4CAA4C;YAC5C,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAA;YACrE,OAAO,cAAc,CAAC,OAAO,CAAA;QAC9B,CAAC;aAAM,CAAC;YACP,sEAAsE;YACtE,OAAO,OAAO,EAAE,CAAA;QACjB,CAAC;IACF,CAAC;IAED,KAAK,CAAC,qBAAqB;QAC1B,MAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAA;QAC/C,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAA;QAE3B,uCAAuC;QACvC,KAAK,IAAI,eAAe,IAAI,gBAAgB,EAAE,CAAC;YAC9C,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YAC7B,kGAAkG;YAClG,MAAM,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAC1C,CAAC;IACF,CAAC;CACD","sourcesContent":["import type { DeferredObject } from \"@tutao/tutanota-utils\"\nimport { defer, noOp } from \"@tutao/tutanota-utils\"\nimport type { SystemTimeout } from \"../common/utils/Scheduler.js\"\nimport { InfoMessageHandler } from \"../../gui/InfoMessageHandler.js\"\n\nexport class SuspensionHandler {\n\t_isSuspended: boolean\n\t_suspendedUntil: number\n\t_deferredRequests: Array<DeferredObject<any>>\n\t_hasSentInfoMessage: boolean\n\t_timeout: SystemTimeout\n\n\tconstructor(private readonly infoMessageHandler: InfoMessageHandler, systemTimeout: SystemTimeout) {\n\t\tthis._isSuspended = false\n\t\tthis._suspendedUntil = 0\n\t\tthis._deferredRequests = []\n\t\tthis._hasSentInfoMessage = false\n\t\tthis._timeout = systemTimeout\n\t}\n\n\t/**\n\t * Activates suspension states for the given amount of seconds. After the end of the suspension time all deferred requests are executed.\n\t */\n\t// if already suspended do we want to ignore incoming suspensions?\n\tactivateSuspensionIfInactive(suspensionDurationSeconds: number, resourceURL: URL) {\n\t\tif (!this.isSuspended()) {\n\t\t\tconsole.log(`Activating suspension (${resourceURL}):  ${suspensionDurationSeconds}s`)\n\t\t\tthis._isSuspended = true\n\t\t\tconst suspensionStartTime = Date.now()\n\n\t\t\tthis._timeout.setTimeout(async () => {\n\t\t\t\tthis._isSuspended = false\n\t\t\t\tconsole.log(`Suspension released after ${(Date.now() - suspensionStartTime) / 1000}s`)\n\t\t\t\tawait this._onSuspensionComplete()\n\t\t\t}, suspensionDurationSeconds * 1000)\n\n\t\t\tif (!this._hasSentInfoMessage) {\n\t\t\t\tthis.infoMessageHandler.onInfoMessage({\n\t\t\t\t\ttranslationKey: \"clientSuspensionWait_label\",\n\t\t\t\t\targs: {},\n\t\t\t\t})\n\n\t\t\t\tthis._hasSentInfoMessage = true\n\t\t\t}\n\t\t}\n\t}\n\n\tisSuspended(): boolean {\n\t\treturn this._isSuspended\n\t}\n\n\t/**\n\t * Adds a request to the deferred queue.\n\t * @param request\n\t * @returns {Promise<T>}\n\t */\n\tdeferRequest(request: () => Promise<any>): Promise<any> {\n\t\tif (this._isSuspended) {\n\t\t\tconst deferredObject = defer()\n\n\t\t\tthis._deferredRequests.push(deferredObject)\n\n\t\t\t// assign request promise to deferred object\n\t\t\tdeferredObject.promise = deferredObject.promise.then(() => request())\n\t\t\treturn deferredObject.promise\n\t\t} else {\n\t\t\t// if suspension is not activated then immediately execute the request\n\t\t\treturn request()\n\t\t}\n\t}\n\n\tasync _onSuspensionComplete() {\n\t\tconst deferredRequests = this._deferredRequests\n\t\tthis._deferredRequests = []\n\n\t\t// do wee need to delay those requests?\n\t\tfor (let deferredRequest of deferredRequests) {\n\t\t\tdeferredRequest.resolve(null)\n\t\t\t// Ignore all errors here, any errors should be caught by whoever is handling the deferred request\n\t\t\tawait deferredRequest.promise.catch(noOp)\n\t\t}\n\t}\n}\n"]}