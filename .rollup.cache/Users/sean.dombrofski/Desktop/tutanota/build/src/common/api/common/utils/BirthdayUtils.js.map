{"version":3,"file":"BirthdayUtils.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/utils/BirthdayUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Birthday } from \"../../entities/tutanota/TypeRefs.js\"\nimport { createBirthday } from \"../../entities/tutanota/TypeRefs.js\"\nimport { formatSortableDate } from \"@tutao/tutanota-utils\"\nimport { ParsingError } from \"../error/ParsingError\"\n\n/**\n * Converts the birthday object to iso Date format (yyyy-mm-dd) or iso Date without year (--mm-dd)\n */\nexport function birthdayToIsoDate(birthday: Birthday): string {\n\tconst month = (\"0\" + birthday.month).slice(-2)\n\tconst day = (\"0\" + birthday.day).slice(-2)\n\tconst year = birthday.year ? (\"0000\" + birthday.year).slice(-4) : \"-\"\n\treturn `${year}-${month}-${day}`\n}\n\n/**\n * Converts iso Date (yyyy-mm-dd) or Date without year (--mm-dd) into Birthday object.\n */\nexport function isoDateToBirthday(birthdayIso: string): Birthday {\n\t//return new Date(Number(newBirthday.year), Number(newBirthday.month) - 1, Number(newBirthday.day))\n\tconst birthdayInitializer: Partial<Birthday> = {}\n\tif (birthdayIso.startsWith(\"--\")) {\n\t\tconst monthAndDay = birthdayIso.substring(2).split(\"-\")\n\n\t\tif (monthAndDay.length !== 2) {\n\t\t\tthrow new ParsingError(\"invalid birthday without year: \" + birthdayIso)\n\t\t}\n\n\t\tbirthdayInitializer.month = monthAndDay[0]\n\t\tbirthdayInitializer.day = monthAndDay[1]\n\t\tbirthdayInitializer.year = null\n\t} else {\n\t\tconst yearMonthAndDay = birthdayIso.split(\"-\")\n\n\t\tif (yearMonthAndDay.length !== 3) {\n\t\t\tthrow new ParsingError(\"invalid birthday: \" + birthdayIso)\n\t\t}\n\n\t\tbirthdayInitializer.year = yearMonthAndDay[0]\n\t\tbirthdayInitializer.month = yearMonthAndDay[1]\n\t\tbirthdayInitializer.day = yearMonthAndDay[2]\n\t}\n\n\tif (!isValidBirthday(birthdayInitializer)) {\n\t\tthrow new ParsingError(\"Invalid birthday format: \" + birthdayIso)\n\t}\n\n\treturn createBirthday(birthdayInitializer)\n}\n\nexport function isValidBirthday(birthday: Partial<Birthday>): birthday is Birthday {\n\tconst day = Number(birthday.day)\n\tconst month = Number(birthday.month)\n\tconst year = birthday.year ? Number(birthday.year) : null\n\treturn day > 0 && day < 32 && month > 0 && month < 13 && (year === null || (year > 0 && year < 10000))\n}\n\n/**\n * returns new birthday format from old birthday format\n * Export for testing\n */\nexport function oldBirthdayToBirthday(oldBirthday: Date): Birthday {\n\tlet birthdayString = formatSortableDate(oldBirthday).split(\"-\")\n\treturn createBirthday({\n\t\tday: String(Number(birthdayString[2])),\n\t\tmonth: String(Number(birthdayString[1])),\n\t\tyear: String(Number(birthdayString[0])),\n\t})\n}\n"]}