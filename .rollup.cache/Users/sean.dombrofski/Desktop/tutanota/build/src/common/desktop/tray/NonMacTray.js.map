{"version":3,"file":"NonMacTray.js","sourceRoot":"","sources":["../../../../../src/common/desktop/tray/NonMacTray.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAQ,QAAQ,EAAE,IAAI,EAAE,MAAM,UAAU,CAAA;AAEpD,OAAO,EAAE,IAAI,EAAE,MAAM,8BAA8B,CAAA;AAEnD,OAAO,EAAE,eAAe,EAAE,MAAM,cAAc,CAAA;AAE9C;;GAEG;AACH,MAAM,OAAO,UAAU;IACtB,gBAAgB,CAAC,CAAO,EAAE,IAAiB;QAC1C,IAAI,IAAI;YAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAA;IACjC,CAAC;IAED,qBAAqB;QACpB,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,oBAAoB;QACnB,OAAO;YACN,IAAI,QAAQ,CAAC;gBACZ,IAAI,EAAE,WAAW;aACjB,CAAC;YACF,IAAI,QAAQ,CAAC;gBACZ,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC;gBAC9B,WAAW,EAAE,mBAAmB;gBAChC,KAAK,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE;aACvB,CAAC;SACF,CAAA;IACF,CAAC;IAED,OAAO,CAAC,EAAiB,EAAE,IAAiB;QAC3C,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAA;QAE3B;;;;OAIE;QACF,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QACzB,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE;YACvB,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QACxB,CAAC,CAAC,CAAA;QACF,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,QAAQ,KAAI,CAAC;IAEb,UAAU,KAAI,CAAC;IAEf,sBAAsB,CAAC,QAAgB;QACtC,OAAO,eAAe,CAAC,SAAS,QAAQ,EAAE,CAAC,CAAA;IAC5C,CAAC;CACD","sourcesContent":["import type { NativeImage } from \"electron\"\nimport { app, Menu, MenuItem, Tray } from \"electron\"\nimport type { WindowManager } from \"../DesktopWindowManager\"\nimport { lang } from \"../../misc/LanguageViewModel\"\nimport type { PlatformTray } from \"./DesktopTray\"\nimport { getResourcePath } from \"../resources\"\n\n/**\n * This file provides the functionality used by DesktopTray on windows & linux.\n */\nexport class NonMacTray implements PlatformTray {\n\tattachMenuToTray(m: Menu, tray: Tray | null): void {\n\t\tif (tray) tray.setContextMenu(m)\n\t}\n\n\tneedsWindowListInMenu(): boolean {\n\t\treturn true\n\t}\n\n\tgetPlatformMenuItems(): Array<MenuItem> {\n\t\treturn [\n\t\t\tnew MenuItem({\n\t\t\t\ttype: \"separator\",\n\t\t\t}),\n\t\t\tnew MenuItem({\n\t\t\t\tlabel: lang.get(\"quit_action\"),\n\t\t\t\taccelerator: \"CmdOrCtrl+Shift+Q\",\n\t\t\t\tclick: () => app.quit(),\n\t\t\t}),\n\t\t]\n\t}\n\n\tgetTray(wm: WindowManager, icon: NativeImage): Tray {\n\t\tconst tray = new Tray(icon)\n\n\t\t/*\n\t\tsetting the context menu is necessary to prevent electron from segfaulting shortly after creating the tray.\n\t\tworkaround from: https://github.com/electron/electron/issues/22137#issuecomment-586105622\n\t\tissue: https://github.com/electron/electron/issues/22215\n\t */\n\t\ttray.setContextMenu(null)\n\t\ttray.on(\"click\", (ev) => {\n\t\t\twm.getLastFocused(true)\n\t\t})\n\t\treturn tray\n\t}\n\n\tsetBadge() {}\n\n\tclearBadge() {}\n\n\tgetAppIconPathFromName(iconName: string): string {\n\t\treturn getResourcePath(`icons/${iconName}`)\n\t}\n}\n"]}