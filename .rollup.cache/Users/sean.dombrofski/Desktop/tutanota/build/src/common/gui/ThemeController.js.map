{"version":3,"file":"ThemeController.js","sourceRoot":"","sources":["../../../../src/common/gui/ThemeController.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeviceConfig } from \"../misc/DeviceConfig\"\nimport type { HtmlSanitizer } from \"../misc/HtmlSanitizer\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { assertMainOrNodeBoot, isApp, isDesktop } from \"../api/common/Env\"\nimport { downcast, findAndRemove, LazyLoaded, mapAndFilterNull, typedValues } from \"@tutao/tutanota-utils\"\nimport m from \"mithril\"\nimport type { BaseThemeId, Theme, ThemeId, ThemePreference } from \"./theme\"\nimport { logoDefaultGrey, themes } from \"./builtinThemes\"\nimport type { ThemeCustomizations } from \"../misc/WhitelabelCustomizations\"\nimport { getWhitelabelCustomizations } from \"../misc/WhitelabelCustomizations\"\nimport { getCalendarLogoSvg, getMailLogoSvg } from \"./base/Logo\"\nimport { ThemeFacade } from \"../native/common/generatedipc/ThemeFacade\"\nimport { AppType } from \"../misc/ClientConstants.js\"\n\nassertMainOrNodeBoot()\n\nexport const defaultThemeId: ThemeId = \"light\"\n\nexport class ThemeController {\n\tprivate readonly theme: Theme\n\t_themeId: ThemeId\n\tprivate _themePreference: ThemePreference\n\t// Subscribe to this to get theme change events. Cannot be used to update the theme\n\treadonly observableThemeId: Stream<ThemeId>\n\treadonly initialized: Promise<any>\n\n\tconstructor(\n\t\tthemeSingleton: object,\n\t\tprivate readonly themeFacade: ThemeFacade,\n\t\tprivate readonly htmlSanitizer: () => Promise<HtmlSanitizer>,\n\t\tprivate readonly app: AppType,\n\t) {\n\t\t// this will be overwritten quickly\n\t\tthis._themeId = defaultThemeId\n\t\tthis._themePreference = \"auto:light|dark\"\n\t\tthis.theme = Object.assign(themeSingleton, this.getDefaultTheme())\n\t\tthis.observableThemeId = stream(this.themeId)\n\t\t// We run them in parallel to initialize as soon as possible\n\t\tthis.initialized = Promise.all([this._initializeTheme(), this.updateSavedBuiltinThemes()])\n\t}\n\n\tasync _initializeTheme() {\n\t\t// If being accessed from a custom domain, the definition of whitelabelCustomizations is added to index.js serverside upon request\n\t\t// see RootHandler::applyWhitelabelFileModifications.\n\t\tconst whitelabelCustomizations = getWhitelabelCustomizations(window)\n\n\t\tif (whitelabelCustomizations && whitelabelCustomizations.theme) {\n\t\t\t// no need to persist anything if we are on whitelabel domain\n\t\t\tconst assembledTheme = await this.applyCustomizations(whitelabelCustomizations.theme, false)\n\t\t\tthis._themePreference = assembledTheme.themeId\n\t\t} else {\n\t\t\t// It is theme info passed from native to be applied as early as possible.\n\t\t\t// Important! Do not blindly apply location.search, someone could try to do prototype pollution.\n\t\t\t// We check environment and also filter out __proto__\n\t\t\t// mithril's parseQueryString does not follow standard exactly so we try to use the same thing we use on the native side\n\t\t\tconst themeJson = window.location.href ? new URL(window.location.href).searchParams.get(\"theme\") : null\n\n\t\t\tif ((isApp() || isDesktop()) && themeJson) {\n\t\t\t\tconst parsedTheme: ThemeCustomizations = this.parseCustomizations(themeJson)\n\n\t\t\t\t// We also don't need to save anything in this case\n\t\t\t\tawait this.applyCustomizations(parsedTheme, false)\n\t\t\t}\n\n\t\t\t// If it's a first start we might get a fallback theme from native. We can apply it for a short time but we should switch to the full, resolved\n\t\t\t// theme after that.\n\t\t\tawait this.setThemePreference((await this.themeFacade.getThemePreference()) ?? this._themePreference)\n\t\t}\n\t}\n\n\tprivate parseCustomizations(stringTheme: string): ThemeCustomizations {\n\t\t// Filter out __proto__ to avoid prototype pollution. We use Object.assign() which is not susceptible to it but it doesn't hurt.\n\t\treturn JSON.parse(stringTheme, (k, v) => (k === \"__proto__\" ? undefined : v))\n\t}\n\n\tprivate async updateSavedBuiltinThemes() {\n\t\t// In case we change built-in themes we want to save new copy on the device.\n\t\tfor (const theme of typedValues(themes())) {\n\t\t\tawait this.updateSavedThemeDefinition(theme)\n\t\t}\n\n\t\t// Remove blue theme because we don't have it anymore\n\t\tconst oldThemes = (await this.themeFacade.getThemes()) as Array<Theme>\n\t\tfindAndRemove(oldThemes, (t) => t.themeId === \"blue\")\n\t\tawait this.themeFacade.setThemes(oldThemes)\n\n\t\t// Check if the blue theme was selected and fallback for auto\n\t\tconst themePreference = await this.themeFacade.getThemePreference()\n\t\tif (!themePreference || themePreference !== \"blue\") return\n\t\tawait this.setThemePreference(\"auto:light|dark\", true)\n\t}\n\n\tasync reloadTheme() {\n\t\tconst themePreference = await this.themeFacade.getThemePreference()\n\t\tif (!themePreference) return\n\t\tawait this.setThemePreference(themePreference, false)\n\t}\n\n\tget themeId(): ThemeId {\n\t\treturn this._themeId\n\t}\n\n\tget themePreference(): ThemePreference {\n\t\treturn this._themePreference\n\t}\n\n\tprivate async getTheme(themeId: ThemeId): Promise<Theme> {\n\t\tif (themes()[themeId]) {\n\t\t\t// Make a defensive copy so that original theme definition is not modified.\n\t\t\treturn Object.assign({}, themes()[themeId])\n\t\t} else {\n\t\t\tconst loadedThemes = (await this.themeFacade.getThemes()) as ReadonlyArray<Theme>\n\t\t\tconst customTheme = loadedThemes.find((t) => t.themeId === themeId)\n\n\t\t\tif (customTheme) {\n\t\t\t\tawait this.sanitizeTheme(customTheme)\n\t\t\t\treturn customTheme\n\t\t\t} else {\n\t\t\t\treturn this.getDefaultTheme()\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCurrentTheme(): Theme {\n\t\treturn Object.assign({}, this.theme)\n\t}\n\n\t/**\n\t * Set the theme, if permanent is true then the locally saved theme will be updated\n\t */\n\tasync setThemePreference(newThemePreference: ThemePreference, permanent: boolean = true) {\n\t\tconst themeId = await this.resolveThemePreference(newThemePreference)\n\t\tconst newTheme = await this.getTheme(themeId)\n\n\t\tthis.applyTrustedTheme(newTheme, themeId)\n\t\tthis._themePreference = newThemePreference\n\n\t\tif (permanent) {\n\t\t\tawait this.themeFacade.setThemePreference(newThemePreference)\n\t\t}\n\t}\n\n\tprivate async resolveThemePreference(newThemePreference: ThemePreference): Promise<ThemeId> {\n\t\tif (newThemePreference === \"auto:light|dark\") {\n\t\t\treturn (await this.themeFacade.prefersDark()) ? \"dark\" : \"light\"\n\t\t} else {\n\t\t\treturn newThemePreference\n\t\t}\n\t}\n\n\tprivate applyTrustedTheme(newTheme: Theme, newThemeId: ThemeId) {\n\t\t// Theme object is effectively a singleton and is imported everywhere. It must be updated in place.\n\t\t// see theme.js\n\n\t\t// Clear all the keys first.\n\t\tfor (const key of Object.keys(this.theme)) {\n\t\t\tdelete downcast(this.theme)[key]\n\t\t}\n\t\t// Write new keys on it later. First default theme as base (so that optional values are correctly filled in) and then the new theme.\n\t\tObject.assign(this.theme, this.getDefaultTheme(), newTheme)\n\t\tthis._themeId = newThemeId\n\t\tthis.observableThemeId(newThemeId)\n\t\tm.redraw()\n\t}\n\n\t/**\n\t * Apply the custom theme, if permanent === true, then the new theme will be saved\n\t */\n\tasync applyCustomizations(customizations: ThemeCustomizations, permanent: boolean = true): Promise<Theme> {\n\t\tconst updatedTheme = this.assembleTheme(customizations)\n\t\t// Set no logo until we sanitize it.\n\t\tconst filledWithoutLogo = Object.assign({}, updatedTheme, {\n\t\t\tlogo: \"\",\n\t\t})\n\n\t\tthis.applyTrustedTheme(filledWithoutLogo, filledWithoutLogo.themeId)\n\n\t\tawait this.sanitizeTheme(updatedTheme)\n\n\t\t// Now apply with the logo\n\t\tthis.applyTrustedTheme(updatedTheme, filledWithoutLogo.themeId)\n\n\t\tif (permanent) {\n\t\t\tthis._themePreference = updatedTheme.themeId\n\t\t\tawait this.updateSavedThemeDefinition(updatedTheme)\n\t\t\tawait this.themeFacade.setThemePreference(updatedTheme.themeId)\n\t\t}\n\n\t\treturn updatedTheme\n\t}\n\n\tasync storeCustomThemeForCustomizations(customizations: ThemeCustomizations) {\n\t\tconst newTheme = this.assembleTheme(customizations)\n\t\tawait this.updateSavedThemeDefinition(newTheme)\n\t}\n\n\tprivate async sanitizeTheme(theme: Theme) {\n\t\tif (theme.logo) {\n\t\t\tconst logo = theme.logo\n\t\t\tconst htmlSanitizer = await this.htmlSanitizer()\n\t\t\ttheme.logo = htmlSanitizer.sanitizeHTML(logo).html\n\t\t}\n\t}\n\n\t/**\n\t * Save theme to the storage.\n\t */\n\tprivate async updateSavedThemeDefinition(updatedTheme: Theme): Promise<Theme> {\n\t\tconst nonNullTheme = Object.assign({}, this.getDefaultTheme(), updatedTheme)\n\t\tawait this.sanitizeTheme(nonNullTheme)\n\t\tconst oldThemes = (await this.themeFacade.getThemes()) as Array<Theme>\n\t\tfindAndRemove(oldThemes, (t) => t.themeId === updatedTheme.themeId)\n\t\toldThemes.push(nonNullTheme)\n\t\tawait this.themeFacade.setThemes(oldThemes)\n\t\treturn nonNullTheme\n\t}\n\n\tgetDefaultTheme(): Theme {\n\t\treturn Object.assign({}, themes()[defaultThemeId])\n\t}\n\n\tgetBaseTheme(baseId: BaseThemeId): Theme {\n\t\t// Make a defensive copy so that original theme definition is not modified.\n\t\treturn Object.assign({}, themes()[baseId])\n\t}\n\n\tshouldAllowChangingTheme(): boolean {\n\t\treturn window.whitelabelCustomizations == null\n\t}\n\n\t/**\n\t * Assembles a new theme object from customizations.\n\t */\n\tprivate assembleTheme(customizations: ThemeCustomizations): Theme {\n\t\tif (!customizations.base) {\n\t\t\treturn Object.assign({}, customizations as Theme)\n\t\t} else if (customizations.base && customizations.logo) {\n\t\t\treturn Object.assign({}, this.getBaseTheme(customizations.base), customizations)\n\t\t} else {\n\t\t\tconst themeWithoutLogo = Object.assign({}, this.getBaseTheme(customizations.base), customizations)\n\t\t\t// This is a whitelabel theme where logo has not been overwritten.\n\t\t\t// Generate a logo with muted colors. We do not want to color our logo in\n\t\t\t// some random color.\n\t\t\tconst grayedLogo =\n\t\t\t\tthis.app === AppType.Calendar\n\t\t\t\t\t? getCalendarLogoSvg(logoDefaultGrey, logoDefaultGrey, logoDefaultGrey)\n\t\t\t\t\t: getMailLogoSvg(logoDefaultGrey, logoDefaultGrey, logoDefaultGrey)\n\t\t\treturn { ...themeWithoutLogo, ...{ logo: grayedLogo } }\n\t\t}\n\t}\n\n\tasync getCustomThemes(): Promise<Array<ThemeId>> {\n\t\treturn mapAndFilterNull(await this.themeFacade.getThemes(), (theme) => {\n\t\t\treturn !(theme.themeId in themes()) ? theme.themeId : null\n\t\t})\n\t}\n}\n\nexport class NativeThemeFacade implements ThemeFacade {\n\tconstructor(private readonly themeFacade: LazyLoaded<ThemeFacade>) {}\n\n\tasync getThemePreference(): Promise<ThemeId | null> {\n\t\tconst dispatcher = await this.themeFacade.getAsync()\n\t\treturn dispatcher.getThemePreference()\n\t}\n\n\tasync setThemePreference(theme: ThemeId): Promise<void> {\n\t\tconst dispatcher = await this.themeFacade.getAsync()\n\t\treturn dispatcher.setThemePreference(theme)\n\t}\n\n\tasync getThemes(): Promise<Array<Theme>> {\n\t\tconst dispatcher = await this.themeFacade.getAsync()\n\t\treturn (await dispatcher.getThemes()) as Theme[]\n\t}\n\n\tasync setThemes(themes: ReadonlyArray<Theme>): Promise<void> {\n\t\tconst dispatcher = await this.themeFacade.getAsync()\n\t\treturn dispatcher.setThemes(themes)\n\t}\n\n\tasync prefersDark(): Promise<boolean> {\n\t\tconst dispatcher = await this.themeFacade.getAsync()\n\t\treturn dispatcher.prefersDark()\n\t}\n}\n\nexport class WebThemeFacade implements ThemeFacade {\n\tprivate readonly mediaQuery: MediaQueryList | undefined = window.matchMedia?.(\"(prefers-color-scheme: dark)\")\n\n\tconstructor(private readonly deviceConfig: DeviceConfig) {}\n\n\tasync getThemePreference(): Promise<ThemeId | null> {\n\t\treturn this.deviceConfig.getTheme()\n\t}\n\n\tasync setThemePreference(theme: ThemeId): Promise<void> {\n\t\treturn this.deviceConfig.setTheme(theme)\n\t}\n\n\tasync getThemes(): Promise<Array<Theme>> {\n\t\t// no-op\n\t\treturn []\n\t}\n\n\tasync setThemes(themes: ReadonlyArray<Theme>) {\n\t\t// no-op\n\t}\n\n\tasync prefersDark(): Promise<boolean> {\n\t\treturn this.mediaQuery?.matches ?? false\n\t}\n\n\taddDarkListener(listener: () => unknown) {\n\t\tthis.mediaQuery?.addEventListener(\"change\", listener)\n\t}\n}\n"]}