{"version":3,"file":"DesktopIntegratorDarwin.js","sourceRoot":"","sources":["../../../../../src/common/desktop/integration/DesktopIntegratorDarwin.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MenuItemConstructorOptions } from \"electron\"\nimport type { WindowManager } from \"../DesktopWindowManager\"\nimport { lang } from \"../../misc/LanguageViewModel\"\nimport type { DesktopIntegrator } from \"./DesktopIntegrator\"\nimport { ElectronExports } from \"../ElectronExportTypes\"\n\nexport class DesktopIntegratorDarwin implements DesktopIntegrator {\n\t_electron: ElectronExports\n\n\tconstructor(electron: ElectronExports) {\n\t\tthis._electron = electron\n\t}\n\n\tisAutoLaunchEnabled(): Promise<boolean> {\n\t\treturn Promise.resolve(this._electron.app.getLoginItemSettings().openAtLogin)\n\t}\n\n\tenableAutoLaunch(): Promise<void> {\n\t\treturn this.isAutoLaunchEnabled().then((enabled) => {\n\t\t\tif (!enabled)\n\t\t\t\tthis._electron.app.setLoginItemSettings({\n\t\t\t\t\topenAtLogin: true,\n\t\t\t\t})\n\t\t})\n\t}\n\n\tdisableAutoLaunch(): Promise<void> {\n\t\treturn this.isAutoLaunchEnabled().then((enabled) => {\n\t\t\tif (enabled)\n\t\t\t\tthis._electron.app.setLoginItemSettings({\n\t\t\t\t\topenAtLogin: false,\n\t\t\t\t})\n\t\t})\n\t}\n\n\trunIntegration(wm: WindowManager): Promise<void> {\n\t\t// We need menu on macOS, otherwise there are no shortcuts defined even for things like copy/paste or hiding window\n\t\t// this needs to be registered here because it's called after the app ready event\n\t\tconst template: Array<MenuItemConstructorOptions> = [\n\t\t\t{\n\t\t\t\t// Skip individual definitions because appMenu can do it automatically\n\t\t\t\trole: \"appMenu\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"Edit\",\n\t\t\t\tsubmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"undo\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"redo\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"separator\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"cut\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"copy\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"paste\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"pasteAndMatchStyle\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"delete\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"selectAll\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"separator\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"Speech\",\n\t\t\t\t\t\tsubmenu: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trole: \"startSpeaking\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trole: \"stopSpeaking\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"View\",\n\t\t\t\tsubmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"togglefullscreen\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\trole: \"window\",\n\t\t\t\tsubmenu: [\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"close\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"minimize\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"zoom\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"separator\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"front\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"zoomIn\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"zoomOut\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trole: \"resetZoom\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\twm.newWindow(true)\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlabel: lang.get(\"openNewWindow_action\"),\n\t\t\t\t\t\taccelerator: \"Command+N\",\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t]\n\n\t\tconst menu = this._electron.Menu.buildFromTemplate(template)\n\n\t\tthis._electron.Menu.setApplicationMenu(menu)\n\n\t\treturn Promise.resolve()\n\t}\n\n\tisIntegrated(): Promise<boolean> {\n\t\treturn Promise.resolve(true)\n\t}\n\n\tintegrate(): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n\n\tunintegrate(): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n}\n"]}