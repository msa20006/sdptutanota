{"version":3,"file":"SecondFactorHandler.js","sourceRoot":"","sources":["../../../../../src/common/misc/2fa/SecondFactorHandler.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,SAAS,CAAA;AAEvB,OAAO,EAAE,0BAA0B,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAA;AAC/F,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAA;AAE9C,OAAO,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAA;AAC3C,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAA;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAA;AAEhE,OAAO,EAAE,QAAQ,EAAE,MAAM,oCAAoC,CAAA;AAC7D,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAA;AAGvD,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAA;AAGjE,OAAO,EAAoB,kBAAkB,EAAE,MAAM,6CAA6C,CAAA;AAElG,gBAAgB,EAAE,CAAA;AAElB;;;;;GAKG;AACH,MAAM,OAAO,mBAAmB;IAOb;IACA;IACA;IACA;IACA;IAVV,mBAAmB,GAAmB,IAAI,CAAA;IAC1C,gBAAgB,GAAkB,IAAI,CAAA;IACtC,6BAA6B,GAAY,KAAK,CAAA;IAC9C,4BAA4B,GAAkC,IAAI,CAAA;IAE1E,YACkB,eAAgC,EAChC,YAA0B,EAC1B,cAA8B,EAC9B,WAAwB,EACxB,oBAA0C;QAJ1C,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,gBAAW,GAAX,WAAW,CAAa;QACxB,yBAAoB,GAApB,oBAAoB,CAAsB;IACzD,CAAC;IAEJ,mCAAmC;QAClC,IAAI,IAAI,CAAC,6BAA6B,EAAE,CAAC;YACxC,OAAM;QACP,CAAC;QAED,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAA;QACzC,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAA;IACxF,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAAC,OAAwC;QAC1E,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;YAC9B,MAAM,SAAS,GAAY,CAAC,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,CAAA;YAEhF,IAAI,kBAAkB,CAAC,cAAc,EAAE,MAAM,CAAC,EAAE,CAAC;gBAChD,IAAI,MAAM,CAAC,SAAS,mCAAyB,EAAE,CAAC;oBAC/C,IAAI,OAAO,CAAA;oBAEX,IAAI,CAAC;wBACJ,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,CAAA;oBAClE,CAAC;oBAAC,OAAO,CAAC,EAAE,CAAC;wBACZ,IAAI,CAAC,YAAY,aAAa,EAAE,CAAC;4BAChC,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAA;wBACzC,CAAC;6BAAM,CAAC;4BACP,MAAM,CAAC,CAAA;wBACR,CAAC;wBAED,SAAQ;oBACT,CAAC;oBAED,IAAI,OAAO,CAAC,KAAK,iDAAuC,EAAE,CAAC;wBAC1D,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE,CAAC;4BACnC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAA;wBAC9B,CAAC;wBAED,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,GAAG,CAAA;wBAEtC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAA;oBACrC,CAAC;gBACF,CAAC;qBAAM,IAAI,MAAM,CAAC,SAAS,mCAAyB,IAAI,IAAI,CAAC,mBAAmB,IAAI,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,SAAS,CAAC,EAAE,CAAC;oBACnI,IAAI,OAAO,CAAA;oBAEX,IAAI,CAAC;wBACJ,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,CAAA;oBAClE,CAAC;oBAAC,OAAO,CAAC,EAAE,CAAC;wBACZ,IAAI,CAAC,YAAY,aAAa,EAAE,CAAC;4BAChC,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAA;wBACzC,CAAC;6BAAM,CAAC;4BACP,MAAM,CAAC,CAAA;wBACR,CAAC;wBAED,SAAQ;oBACT,CAAC;oBAED,IACC,OAAO,CAAC,KAAK,iDAAuC;wBACpD,IAAI,CAAC,gBAAgB;wBACrB,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,SAAS,CAAC,EACvD,CAAC;wBACF,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAA;wBAE7B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAA;wBAC/B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAA;oBAC7B,CAAC;gBACF,CAAC;qBAAM,IAAI,MAAM,CAAC,SAAS,mCAAyB,IAAI,IAAI,CAAC,mBAAmB,IAAI,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,SAAS,CAAC,EAAE,CAAC;oBACnI,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;wBAC3B,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAA;wBAE7B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAA;wBAC/B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAA;oBAC7B,CAAC;gBACF,CAAC;YACF,CAAC;QACF,CAAC;IACF,CAAC;IAEO,sBAAsB,CAAC,OAAgB;QAC9C,IAAI,IAAY,CAAA;QAEhB,IAAI,OAAO,CAAC,cAAc,EAAE,CAAC;YAC5B,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,8BAA8B,EAAE;gBAC/C,oBAAoB,EAAE,OAAO,CAAC,gBAAgB;gBAC9C,aAAa,EAAE,OAAO,CAAC,cAAc;aACrC,CAAC,CAAA;QACH,CAAC;aAAM,CAAC;YACP,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,kCAAkC,EAAE;gBACnD,oBAAoB,EAAE,OAAO,CAAC,gBAAgB;aAC9C,CAAC,CAAA;QACH,CAAC;QAED,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;YAC/C,KAAK,EAAE,gCAAgC;YACvC,KAAK,EAAE;gBACN,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,gBAAgB,EAAE,IAAI,CAAC;aACrC;YACD,QAAQ,EAAE,KAAK,IAAI,EAAE;gBACpB,MAAM,IAAI,CAAC,WAAW,CAAC,4BAA4B,CAClD,0BAA0B,CAAC;oBAC1B,OAAO,EAAE,OAAO,CAAC,GAAG;oBACpB,IAAI,EAAE,IAAI,EAAE,wCAAwC;oBACpD,OAAO,EAAE,IAAI;oBACb,GAAG,EAAE,IAAI;oBACT,QAAQ,EAAE,IAAI;iBACd,CAAC,CACF,CAAA;gBAED,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBAC3B,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAA;oBAE7B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAA;oBAC/B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAA;gBAC7B,CAAC;YACF,CAAC;SACD,CAAC,CAAA;QACF,yGAAyG;QACzG,IAAI,SAAS,GAAG,OAAO,CAAC,GAAG,CAAA;QAC3B,UAAU,CAAC,GAAG,EAAE;YACf,IAAI,IAAI,CAAC,gBAAgB,IAAI,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,SAAS,CAAC,EAAE,CAAC;gBACvF,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAA;gBAE7B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAA;gBAC/B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAA;YAC7B,CAAC;QACF,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAA;IACd,CAAC;IAED,iCAAiC;QAChC,IAAI,CAAC,4BAA4B,EAAE,KAAK,EAAE,CAAA;QAC1C,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAA;IACzC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oCAAoC,CAAC,SAAkB,EAAE,UAAoC,EAAE,WAA0B;QAC9H,IAAI,IAAI,CAAC,4BAA4B,EAAE,CAAC;YACvC,OAAM;QACP,CAAC;QAED,IAAI,CAAC,4BAA4B,GAAG,sBAAsB,CAAC,IAAI,CAC9D,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,oBAAoB,EACzB;YACC,SAAS;YACT,UAAU;YACV,WAAW;SACX,EACD,GAAG,EAAE;YACJ,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAA;QACzC,CAAC,CACD,CAAA;IACF,CAAC;CACD","sourcesContent":["import m from \"mithril\"\nimport type { Challenge, Session } from \"../../api/entities/sys/TypeRefs.js\"\nimport { createSecondFactorAuthData, SessionTypeRef } from \"../../api/entities/sys/TypeRefs.js\"\nimport { Dialog } from \"../../gui/base/Dialog\"\nimport { OperationType, SessionState } from \"../../api/common/TutanotaConstants\"\nimport { lang } from \"../LanguageViewModel\"\nimport { neverNull } from \"@tutao/tutanota-utils\"\nimport { NotFoundError } from \"../../api/common/error/RestError\"\nimport type { EventController } from \"../../api/main/EventController\"\nimport { isSameId } from \"../../api/common/utils/EntityUtils\"\nimport { assertMainOrNode } from \"../../api/common/Env\"\nimport type { EntityClient } from \"../../api/common/EntityClient\"\nimport { WebauthnClient } from \"./webauthn/WebauthnClient\"\nimport { SecondFactorAuthDialog } from \"./SecondFactorAuthDialog\"\nimport type { LoginFacade } from \"../../api/worker/facades/LoginFacade\"\nimport { DomainConfigProvider } from \"../../api/common/DomainConfigProvider.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../api/common/utils/EntityUpdateUtils.js\"\n\nassertMainOrNode()\n\n/**\n * Handles showing and hiding of the following dialogs:\n * 1. Waiting for second factor approval (either token or by other client) during login\n * 2. Ask for approving the login on another client (setupAcceptOtherClientLoginListener() must have been called initially).\n *      If the dialog is visible and another client tries to login at the same time, that second login is ignored.\n */\nexport class SecondFactorHandler {\n\tprivate otherLoginSessionId: IdTuple | null = null\n\tprivate otherLoginDialog: Dialog | null = null\n\tprivate otherLoginListenerInitialized: boolean = false\n\tprivate waitingForSecondFactorDialog: SecondFactorAuthDialog | null = null\n\n\tconstructor(\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly webauthnClient: WebauthnClient,\n\t\tprivate readonly loginFacade: LoginFacade,\n\t\tprivate readonly domainConfigProvider: DomainConfigProvider,\n\t) {}\n\n\tsetupAcceptOtherClientLoginListener() {\n\t\tif (this.otherLoginListenerInitialized) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.otherLoginListenerInitialized = true\n\t\tthis.eventController.addEntityListener((updates) => this.entityEventsReceived(updates))\n\t}\n\n\tprivate async entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>) {\n\t\tfor (const update of updates) {\n\t\t\tconst sessionId: IdTuple = [neverNull(update.instanceListId), update.instanceId]\n\n\t\t\tif (isUpdateForTypeRef(SessionTypeRef, update)) {\n\t\t\t\tif (update.operation === OperationType.CREATE) {\n\t\t\t\t\tlet session\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsession = await this.entityClient.load(SessionTypeRef, sessionId)\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t\t\tconsole.log(\"Failed to load session\", e)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tif (session.state === SessionState.SESSION_STATE_PENDING) {\n\t\t\t\t\t\tif (this.otherLoginDialog != null) {\n\t\t\t\t\t\t\tthis.otherLoginDialog.close()\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.otherLoginSessionId = session._id\n\n\t\t\t\t\t\tthis.showConfirmLoginDialog(session)\n\t\t\t\t\t}\n\t\t\t\t} else if (update.operation === OperationType.UPDATE && this.otherLoginSessionId && isSameId(this.otherLoginSessionId, sessionId)) {\n\t\t\t\t\tlet session\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsession = await this.entityClient.load(SessionTypeRef, sessionId)\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t\t\tconsole.log(\"Failed to load session\", e)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tsession.state !== SessionState.SESSION_STATE_PENDING &&\n\t\t\t\t\t\tthis.otherLoginDialog &&\n\t\t\t\t\t\tisSameId(neverNull(this.otherLoginSessionId), sessionId)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.otherLoginDialog.close()\n\n\t\t\t\t\t\tthis.otherLoginSessionId = null\n\t\t\t\t\t\tthis.otherLoginDialog = null\n\t\t\t\t\t}\n\t\t\t\t} else if (update.operation === OperationType.DELETE && this.otherLoginSessionId && isSameId(this.otherLoginSessionId, sessionId)) {\n\t\t\t\t\tif (this.otherLoginDialog) {\n\t\t\t\t\t\tthis.otherLoginDialog.close()\n\n\t\t\t\t\t\tthis.otherLoginSessionId = null\n\t\t\t\t\t\tthis.otherLoginDialog = null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate showConfirmLoginDialog(session: Session) {\n\t\tlet text: string\n\n\t\tif (session.loginIpAddress) {\n\t\t\ttext = lang.get(\"secondFactorConfirmLogin_msg\", {\n\t\t\t\t\"{clientIdentifier}\": session.clientIdentifier,\n\t\t\t\t\"{ipAddress}\": session.loginIpAddress,\n\t\t\t})\n\t\t} else {\n\t\t\ttext = lang.get(\"secondFactorConfirmLoginNoIp_msg\", {\n\t\t\t\t\"{clientIdentifier}\": session.clientIdentifier,\n\t\t\t})\n\t\t}\n\n\t\tthis.otherLoginDialog = Dialog.showActionDialog({\n\t\t\ttitle: \"secondFactorConfirmLogin_label\",\n\t\t\tchild: {\n\t\t\t\tview: () => m(\".text-break.pt\", text),\n\t\t\t},\n\t\t\tokAction: async () => {\n\t\t\t\tawait this.loginFacade.authenticateWithSecondFactor(\n\t\t\t\t\tcreateSecondFactorAuthData({\n\t\t\t\t\t\tsession: session._id,\n\t\t\t\t\t\ttype: null, // Marker for confirming another session\n\t\t\t\t\t\totpCode: null,\n\t\t\t\t\t\tu2f: null,\n\t\t\t\t\t\twebauthn: null,\n\t\t\t\t\t}),\n\t\t\t\t)\n\n\t\t\t\tif (this.otherLoginDialog) {\n\t\t\t\t\tthis.otherLoginDialog.close()\n\n\t\t\t\t\tthis.otherLoginSessionId = null\n\t\t\t\t\tthis.otherLoginDialog = null\n\t\t\t\t}\n\t\t\t},\n\t\t})\n\t\t// close the dialog manually after 1 min because the session is not updated if the other client is closed\n\t\tlet sessionId = session._id\n\t\tsetTimeout(() => {\n\t\t\tif (this.otherLoginDialog && isSameId(neverNull(this.otherLoginSessionId), sessionId)) {\n\t\t\t\tthis.otherLoginDialog.close()\n\n\t\t\t\tthis.otherLoginSessionId = null\n\t\t\t\tthis.otherLoginDialog = null\n\t\t\t}\n\t\t}, 60 * 1000)\n\t}\n\n\tcloseWaitingForSecondFactorDialog() {\n\t\tthis.waitingForSecondFactorDialog?.close()\n\t\tthis.waitingForSecondFactorDialog = null\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tasync showSecondFactorAuthenticationDialog(sessionId: IdTuple, challenges: ReadonlyArray<Challenge>, mailAddress: string | null) {\n\t\tif (this.waitingForSecondFactorDialog) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.waitingForSecondFactorDialog = SecondFactorAuthDialog.show(\n\t\t\tthis.webauthnClient,\n\t\t\tthis.loginFacade,\n\t\t\tthis.domainConfigProvider,\n\t\t\t{\n\t\t\t\tsessionId,\n\t\t\t\tchallenges,\n\t\t\t\tmailAddress,\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tthis.waitingForSecondFactorDialog = null\n\t\t\t},\n\t\t)\n\t}\n}\n"]}