{"version":3,"file":"DesktopCredentialsStorage.js","sourceRoot":"","sources":["../../../../../src/common/desktop/db/DesktopCredentialsStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import { log } from \"../DesktopLog.js\"\nimport { Database, default as Sqlite } from \"better-sqlite3\"\nimport fs from \"node:fs\"\nimport { OfflineDbClosedError } from \"../../api/common/error/OfflineDbClosedError.js\"\nimport { CryptoError } from \"@tutao/tutanota-crypto/error.js\"\nimport { SqlValue } from \"../../api/worker/offline/SqlValue.js\"\nimport { PersistedCredentials } from \"../../native/common/generatedipc/PersistedCredentials.js\"\nimport { UntaggedQuery, usql } from \"../../api/worker/offline/Sql.js\"\nimport { CredentialType } from \"../../misc/credentials/CredentialType.js\"\nimport { CredentialEncryptionMode } from \"../../misc/credentials/CredentialEncryptionMode.js\"\n\nconst TableDefinitions = Object.freeze({\n\tmeta: \"key TEXT NOT NULL, value\",\n\t// v1: add encryptedPassphraseKey BLOB\n\tcredentials:\n\t\t\"login TEXT NOT NULL, userId TEXT NOT NULL, type TEXT NOT NULL, accessToken BLOB NOT NULL, databaseKey BLOB,\" +\n\t\t\" encryptedPassword TEXT NOT NULL, PRIMARY KEY (userId), UNIQUE(login)\",\n\tcredentialEncryptionMode:\n\t\t\"id INTEGER NOT NULL, credentialEncryptionMode TEXT NOT NULL, FOREIGN KEY(credentialEncryptionMode) REFERENCES credentialEncryptionModeEnum(mode), PRIMARY KEY (id), CHECK (id=0)\",\n\tcredentialEncryptionKey: \"id INTEGER NOT NULL, credentialEncryptionKey BLOB NOT NULL, PRIMARY KEY (id), CHECK (id=0)\",\n} as const)\n\n/**\n * Sql database for storing already encrypted user credentials\n */\nexport class DesktopCredentialsStorage {\n\tprivate _db: Database | null = null\n\tprivate get db(): Database {\n\t\tif (this._db == null) {\n\t\t\tthrow new OfflineDbClosedError()\n\t\t}\n\t\treturn this._db\n\t}\n\n\tprivate readonly _sqliteNativePath: string | null = null\n\n\tconstructor(sqliteNativePath: string, private readonly dbPath: string, app: Electron.App) {\n\t\tthis._sqliteNativePath = sqliteNativePath\n\t\tif (this._db == null) {\n\t\t\tthis.create().then(() => {\n\t\t\t\tapp.on(\"will-quit\", () => this.closeDb())\n\t\t\t})\n\t\t}\n\t}\n\n\tasync create(retry: boolean = true): Promise<void> {\n\t\ttry {\n\t\t\tthis.openDb()\n\t\t\tthis.createTables()\n\t\t} catch (e) {\n\t\t\tif (!retry) throw e\n\t\t\tlog.debug(\"retrying to create credentials db\")\n\t\t\tawait this.deleteDb()\n\t\t\treturn this.create(false)\n\t\t}\n\t}\n\n\tprivate openDb(): void {\n\t\tthis._db = new Sqlite(this.dbPath, {\n\t\t\t// Remove ts-ignore once proper definition of Options exists, see https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/59049#\n\t\t\t// @ts-ignore missing type\n\t\t\tnativeBinding: this._sqliteNativePath,\n\t\t\t// verbose: (message, args) => console.log(\"DB\", message, args),\n\t\t})\n\t\ttry {\n\t\t\tthis.initSql()\n\t\t} catch (e) {\n\t\t\t// If we can't initialize the database we don't want to be stuck in a state where we hold the file lock, we need to retry the whole process again\n\t\t\tthis.db.close()\n\t\t\tthis._db = null\n\t\t\tthrow e\n\t\t}\n\t}\n\n\tprivate initSql() {\n\t\tthis.db.pragma(\"cipher_memory_security = ON\")\n\n\t\tconst errors: [] = this.db.pragma(\"cipher_integrity_check\")\n\t\tif (errors.length > 0) {\n\t\t\tthrow new CryptoError(`Integrity check failed with result : ${JSON.stringify(errors)}`)\n\t\t}\n\t}\n\n\tasync closeDb(): Promise<void> {\n\t\tthis.db.close()\n\t\tthis._db = null\n\t}\n\n\tasync deleteDb(): Promise<void> {\n\t\tlog.debug(\"deleting credentials db\")\n\t\tawait fs.promises.rm(this.dbPath, { maxRetries: 3, force: true })\n\t}\n\n\tprivate createTables() {\n\t\tlog.debug(`Creating tables...`)\n\t\tthis.createEnumTable()\n\t\tfor (let [name, definition] of Object.entries(TableDefinitions)) {\n\t\t\tthis.run({ query: `CREATE TABLE IF NOT EXISTS ${name} (${definition})`, params: [] })\n\t\t}\n\n\t\tconst version = this.get(usql`SELECT value FROM meta WHERE key = 'version'`)?.value\n\t\tlog.debug(`Current credentials version: ${version}`)\n\t\tif (version == null) {\n\t\t\tlog.debug(`Migrating to v1`)\n\t\t\tthis.db.transaction(() => {\n\t\t\t\tthis.run({ query: `ALTER TABLE credentials ADD COLUMN encryptedPassphraseKey BLOB`, params: [] })\n\t\t\t\tthis.run({ query: `INSERT INTO meta VALUES ('version', 1)`, params: [] })\n\t\t\t})()\n\t\t}\n\n\t\tlog.debug(`Tables created successfully!`)\n\t}\n\n\tstore(credentials: PersistedCredentials) {\n\t\tconst formattedQuery = usql`INSERT OR REPLACE INTO credentials (login, userId, type, accessToken, databaseKey, encryptedPassword, encryptedPassphraseKey) VALUES (\n${credentials.credentialInfo.login}, ${credentials.credentialInfo.userId}, ${credentials.credentialInfo.type},\n${credentials.accessToken}, ${credentials.databaseKey}, ${credentials.encryptedPassword}, ${credentials.encryptedPassphraseKey})`\n\t\treturn this.run(formattedQuery)\n\t}\n\n\tgetAllCredentials(): PersistedCredentials[] {\n\t\tconst records = this.all(usql`SELECT * FROM credentials`)\n\t\treturn records.map((row) => this.unmapCredentials(row))\n\t}\n\n\tgetCredentialsByUserId(userId: string) {\n\t\tconst row = this.get(usql`SELECT * FROM credentials WHERE userId = ${userId}`)\n\t\tif (!row) return null\n\t\treturn this.unmapCredentials(row)\n\t}\n\n\tdeleteByUserId(userId: string) {\n\t\treturn this.run(usql`DELETE FROM credentials WHERE userId = ${userId}`)\n\t}\n\n\tdeleteAllCredentials() {\n\t\tthis.run(usql`DELETE FROM credentials`)\n\t}\n\n\tprivate createEnumTable() {\n\t\tthis.run({ query: `CREATE TABLE IF NOT EXISTS credentialEncryptionModeEnum (mode TEXT UNIQUE)`, params: [] })\n\t\tfor (let i in CredentialEncryptionMode) {\n\t\t\tconst insertQuery = usql`INSERT OR REPLACE INTO credentialEncryptionModeEnum (mode) VALUES (${i})`\n\t\t\tthis.run(insertQuery)\n\t\t}\n\t}\n\n\tprivate unmapCredentials(row: Record<string, string | number | Uint8Array | null>): PersistedCredentials {\n\t\tconst credentialType = row.type as CredentialType\n\t\treturn {\n\t\t\tcredentialInfo: {\n\t\t\t\tlogin: row.login as string,\n\t\t\t\tuserId: row.userId as string,\n\t\t\t\ttype: credentialType,\n\t\t\t},\n\t\t\tencryptedPassword: row.encryptedPassword as string,\n\t\t\tencryptedPassphraseKey: row.encryptedPassphraseKey as Uint8Array | null,\n\t\t\taccessToken: row.accessToken as Uint8Array,\n\t\t\tdatabaseKey: row.databaseKey as Uint8Array,\n\t\t}\n\t}\n\n\tprivate run({ query, params }: UntaggedQuery): void {\n\t\tthis.db.prepare(query).run(params)\n\t}\n\n\t/**\n\t * Execute a query\n\t * @returns a single object or undefined if the query returns nothing\n\t */\n\tprivate get({ query, params }: UntaggedQuery): Record<string, SqlValue> | null {\n\t\treturn this.db.prepare(query).get(params) ?? null\n\t}\n\n\t/**\n\t * Execute a query\n\t * @returns a list of objects or an empty list if the query returns nothing\n\t */\n\tprivate all({ query, params }: UntaggedQuery): Array<Record<string, SqlValue>> {\n\t\treturn this.db.prepare(query).all(params)\n\t}\n\n\tgetCredentialEncryptionMode(): CredentialEncryptionMode | null {\n\t\tconst row = this.get(usql`SELECT credentialEncryptionMode FROM credentialEncryptionMode LIMIT 1`)\n\t\tif (!row) return null\n\t\treturn row.credentialEncryptionMode as CredentialEncryptionMode\n\t}\n\n\tgetCredentialEncryptionKey(): Uint8Array | null {\n\t\tconst row = this.get(usql`SELECT credentialEncryptionKey FROM credentialEncryptionKey LIMIT 1`)\n\t\tif (!row) return null\n\t\treturn row.credentialEncryptionKey as Uint8Array\n\t}\n\n\tsetCredentialEncryptionMode(encryptionMode: CredentialEncryptionMode | null) {\n\t\tif (encryptionMode != null) {\n\t\t\tthis.run(usql`INSERT OR REPLACE INTO credentialEncryptionMode (id, credentialEncryptionMode) VALUES (0, ${encryptionMode})`)\n\t\t} else {\n\t\t\tthis.run(usql`DELETE FROM credentialEncryptionMode`)\n\t\t}\n\t}\n\n\tsetCredentialEncryptionKey(encryptionKey: Uint8Array | null) {\n\t\tif (encryptionKey != null) {\n\t\t\tthis.run(usql`INSERT OR REPLACE INTO credentialEncryptionKey (id, credentialEncryptionKey) VALUES (0, ${encryptionKey})`)\n\t\t} else {\n\t\t\tthis.run(usql`DELETE FROM credentialEncryptionKey`)\n\t\t}\n\t}\n}\n"]}