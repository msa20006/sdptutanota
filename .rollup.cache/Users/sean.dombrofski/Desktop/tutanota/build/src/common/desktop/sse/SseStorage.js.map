{"version":3,"file":"SseStorage.js","sourceRoot":"","sources":["../../../../../src/common/desktop/sse/SseStorage.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAA;AAC/E,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAA;AAI9C,MAAM,kCAAkC,uDAA6C,CAAA;AAErF,MAAM,OAAO,UAAU;IACO;IAA7B,YAA6B,IAAmB;QAAnB,SAAI,GAAJ,IAAI,CAAe;IAAG,CAAC;IAEpD,KAAK,CAAC,UAAU;QACf,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAmB,CAAA;IAC/E,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,UAAkB,EAAE,MAAU,EAAE,SAAiB;QAC1E,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAA;QAC/C,IAAI,UAAmB,CAAA;QACvB,IAAI,CAAC,eAAe,EAAE,CAAC;YACtB,UAAU,GAAG;gBACZ,UAAU;gBACV,OAAO,EAAE,CAAC,MAAM,CAAC;gBACjB,SAAS;aACT,CAAA;QACF,CAAC;aAAM,CAAC;YACP,UAAU,GAAG,eAAe,CAAA;YAC5B,UAAU,CAAC,UAAU,GAAG,UAAU,CAAA;YAClC,UAAU,CAAC,SAAS,GAAG,SAAS,CAAA;YAChC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC1C,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAChC,CAAC;QACF,CAAC;QACD,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAA;QAC/D,yDAAyD;QACzD,oDAAoD;QACpD,0EAA0E;QAC1E,IAAI,eAAe,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAC1E,MAAM,IAAI,CAAC,6BAA6B,CAAC,MAAM,gDAAsC,CAAA;QACtF,CAAC;IACF,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,MAAU;QAC1B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAA;QACvC,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;YACrB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;YAC/B,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;YAC5D,OAAO,OAAO,CAAA;QACf,CAAC;aAAM,CAAC;YACP,OAAO,IAAI,CAAA;QACZ,CAAC;IACF,CAAC;IAED,KAAK,CAAC,8BAA8B;QACnC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,+BAA+B,CAAC,CAAA;QACtF,OAAO,KAAK,IAAI,IAAI,CAAA;IACrB,CAAC;IAED,KAAK,CAAC,iCAAiC;QACtC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,+BAA+B,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;IACrF,CAAC;IAED,KAAK,CAAC,8BAA8B;QACnC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,CAAA;QAClF,OAAO,KAAK,IAAI,IAAI,CAAA;IACrB,CAAC;IAED,KAAK,CAAC,8BAA8B,CAAC,EAAM;QAC1C,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,2BAA2B,EAAE,EAAE,CAAC,CAAA;IACzE,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC3B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,CAAA;QAChF,OAAO,KAAK,IAAI,IAAI,CAAA;IACrB,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,OAAe;QAC3C,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAA;IAC5E,CAAC;IAED,KAAK,CAAC,6BAA6B,CAAC,MAAc;QACjD,MAAM,MAAM,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,CAAC,IAAI,EAAE,CAAA;QACxF,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,kCAAkC,CAAA;IAC5D,CAAC;IAED,KAAK,CAAC,6BAA6B,CAAC,MAAc,EAAE,IAA8B;QACjF,MAAM,MAAM,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,CAAC,IAAI,EAAE,CAAA;QACxF,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAA;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAA;IAC3E,CAAC;IAED,KAAK,CAAC,KAAK;QACV,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,+BAA+B,EAAE,IAAI,CAAC,CAAA;QAC9E,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAA;QAC1E,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAA;QACxE,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;IAC1D,CAAC;CACD","sourcesContent":["import { DesktopConfig } from \"../config/DesktopConfig.js\"\nimport { DesktopConfigEncKey, DesktopConfigKey } from \"../config/ConfigKeys.js\"\nimport { remove } from \"@tutao/tutanota-utils\"\nimport { SseInfo } from \"./SseInfo.js\"\nimport { ExtendedNotificationMode } from \"../../native/common/generatedipc/ExtendedNotificationMode.js\"\n\nconst DEFAULT_EXTENDED_NOTIFICATION_MODE = ExtendedNotificationMode.NoSenderOrSubject\n\nexport class SseStorage {\n\tconstructor(private readonly conf: DesktopConfig) {}\n\n\tasync getSseInfo(): Promise<SseInfo | null> {\n\t\treturn (await this.conf.getVar(DesktopConfigEncKey.sseInfo)) as SseInfo | null\n\t}\n\n\tasync storePushIdentifier(identifier: string, userId: Id, sseOrigin: string) {\n\t\tconst previousSseInfo = await this.getSseInfo()\n\t\tlet newSseInfo: SseInfo\n\t\tif (!previousSseInfo) {\n\t\t\tnewSseInfo = {\n\t\t\t\tidentifier,\n\t\t\t\tuserIds: [userId],\n\t\t\t\tsseOrigin,\n\t\t\t}\n\t\t} else {\n\t\t\tnewSseInfo = previousSseInfo\n\t\t\tnewSseInfo.identifier = identifier\n\t\t\tnewSseInfo.sseOrigin = sseOrigin\n\t\t\tif (!newSseInfo.userIds.includes(userId)) {\n\t\t\t\tnewSseInfo.userIds.push(userId)\n\t\t\t}\n\t\t}\n\t\tawait this.conf.setVar(DesktopConfigEncKey.sseInfo, newSseInfo)\n\t\t// Provide right defaults for extended notification mode.\n\t\t//  - Start with \"nothing\" as a conservative default\n\t\t//  - If notifications were not used before, enable extended notifications\n\t\tif (previousSseInfo == null || !previousSseInfo.userIds.includes(userId)) {\n\t\t\tawait this.setExtendedNotificationConfig(userId, ExtendedNotificationMode.OnlySender)\n\t\t}\n\t}\n\n\tasync removeUser(userId: Id): Promise<SseInfo | null> {\n\t\tconst sseInfo = await this.getSseInfo()\n\t\tif (sseInfo != null) {\n\t\t\tremove(sseInfo.userIds, userId)\n\t\t\tawait this.conf.setVar(DesktopConfigEncKey.sseInfo, sseInfo)\n\t\t\treturn sseInfo\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\tasync getMissedNotificationCheckTime(): Promise<number | null> {\n\t\tconst value = await this.conf.getVar(DesktopConfigKey.lastMissedNotificationCheckTime)\n\t\treturn value ?? null\n\t}\n\n\tasync recordMissedNotificationCheckTime() {\n\t\tawait this.conf.setVar(DesktopConfigKey.lastMissedNotificationCheckTime, Date.now())\n\t}\n\n\tasync getLastProcessedNotificationId(): Promise<Id | null> {\n\t\tconst value = await this.conf.getVar(DesktopConfigKey.lastProcessedNotificationId)\n\t\treturn value ?? null\n\t}\n\n\tasync setLastProcessedNotificationId(id: Id) {\n\t\tawait this.conf.setVar(DesktopConfigKey.lastProcessedNotificationId, id)\n\t}\n\n\tasync getHeartbeatTimeoutSec(): Promise<number | null> {\n\t\tconst value = await this.conf.getVar(DesktopConfigKey.heartbeatTimeoutInSeconds)\n\t\treturn value ?? null\n\t}\n\n\tasync setHeartbeatTimeoutSec(timeout: number) {\n\t\tawait this.conf.setVar(DesktopConfigKey.heartbeatTimeoutInSeconds, timeout)\n\t}\n\n\tasync getExtendedNotificationConfig(userId: string): Promise<ExtendedNotificationMode> {\n\t\tconst object = (await this.conf.getVar(DesktopConfigKey.extendedNotificationMode)) ?? {}\n\t\treturn object[userId] ?? DEFAULT_EXTENDED_NOTIFICATION_MODE\n\t}\n\n\tasync setExtendedNotificationConfig(userId: string, mode: ExtendedNotificationMode): Promise<void> {\n\t\tconst object = (await this.conf.getVar(DesktopConfigKey.extendedNotificationMode)) ?? {}\n\t\tobject[userId] = mode\n\t\treturn this.conf.setVar(DesktopConfigKey.extendedNotificationMode, object)\n\t}\n\n\tasync clear() {\n\t\tawait this.conf.setVar(DesktopConfigKey.lastMissedNotificationCheckTime, null)\n\t\tawait this.conf.setVar(DesktopConfigKey.lastProcessedNotificationId, null)\n\t\tawait this.conf.setVar(DesktopConfigKey.heartbeatTimeoutInSeconds, null)\n\t\tawait this.conf.setVar(DesktopConfigEncKey.sseInfo, null)\n\t}\n}\n"]}