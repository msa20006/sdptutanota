{"version":3,"file":"EntityUpdateUtils.js","sourceRoot":"","sources":["../../../../../../src/common/api/common/utils/EntityUpdateUtils.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,mBAAmB,EAAW,MAAM,uBAAuB,CAAA;AACpE,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAA;AAU3C,MAAM,UAAU,kBAAkB,CAAC,OAAyB,EAAE,MAAwB;IACrF,OAAO,mBAAmB,CAAC,OAAO,EAAE,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,CAAA;AACrE,CAAC;AAED,MAAM,UAAU,WAAW,CAAuB,MAAS,EAAE,MAAwB;IACpF,MAAM,OAAO,GAAG,MAAM,CAAC,KAAmB,CAAA;IAC1C,OAAO,CACN,kBAAkB,CAAC,OAAO,EAAE,MAAM,CAAC;QACnC,CAAC,MAAM,CAAC,cAAc,KAAK,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAC3I,CAAA;AACF,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,MAAuC,EAAE,IAAmB,EAAE,SAAa;IAC9G,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,KAAK,IAAI,IAAI,KAAK,CAAC,UAAU,KAAK,SAAS,CAAC,CAAA;AAC1F,CAAC;AAED,MAAM,UAAU,cAAc,CAA4C,MAAwB,EAAE,IAAmB,EAAE,SAAa;IACrI,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,KAAK,IAAI,IAAI,KAAK,CAAC,UAAU,KAAK,SAAS,CAAC,IAAI,IAAI,CAAA;AAClG,CAAC","sourcesContent":["import { OperationType } from \"../TutanotaConstants.js\"\nimport { EntityUpdate } from \"../../entities/sys/TypeRefs.js\"\nimport { SomeEntity } from \"../EntityTypes.js\"\nimport { isSameTypeRefByAttr, TypeRef } from \"@tutao/tutanota-utils\"\nimport { isSameId } from \"./EntityUtils.js\"\n\nexport type EntityUpdateData = {\n\tapplication: string\n\ttype: string\n\tinstanceListId: string\n\tinstanceId: string\n\toperation: OperationType\n}\n\nexport function isUpdateForTypeRef(typeRef: TypeRef<unknown>, update: EntityUpdateData): boolean {\n\treturn isSameTypeRefByAttr(typeRef, update.application, update.type)\n}\n\nexport function isUpdateFor<T extends SomeEntity>(entity: T, update: EntityUpdateData): boolean {\n\tconst typeRef = entity._type as TypeRef<T>\n\treturn (\n\t\tisUpdateForTypeRef(typeRef, update) &&\n\t\t(update.instanceListId === \"\" ? isSameId(update.instanceId, entity._id) : isSameId([update.instanceListId, update.instanceId], entity._id))\n\t)\n}\n\nexport function containsEventOfType(events: ReadonlyArray<EntityUpdateData>, type: OperationType, elementId: Id): boolean {\n\treturn events.some((event) => event.operation === type && event.instanceId === elementId)\n}\n\nexport function getEventOfType<T extends EntityUpdateData | EntityUpdate>(events: ReadonlyArray<T>, type: OperationType, elementId: Id): T | null {\n\treturn events.find((event) => event.operation === type && event.instanceId === elementId) ?? null\n}\n"]}