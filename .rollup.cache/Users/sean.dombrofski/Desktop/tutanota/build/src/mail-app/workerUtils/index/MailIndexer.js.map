{"version":3,"file":"MailIndexer.js","sourceRoot":"","sources":["../../../../../src/mail-app/workerUtils/index/MailIndexer.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tFULL_INDEXED_TIMESTAMP,\n\tImportStatus,\n\tMailSetKind,\n\tMailState,\n\tNOTHING_INDEXED_TIMESTAMP,\n\tOperationType,\n} from \"../../../common/api/common/TutanotaConstants\"\nimport {\n\tFile as TutanotaFile,\n\tImportedMailTypeRef,\n\tImportMailStateTypeRef,\n\tMail,\n\tMailBox,\n\tMailboxGroupRootTypeRef,\n\tMailBoxTypeRef,\n\tMailDetails,\n\tMailDetailsBlobTypeRef,\n\tMailDetailsDraftTypeRef,\n\tMailFolder,\n\tMailFolderTypeRef,\n\tMailSetEntryTypeRef,\n\tMailTypeRef,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { ConnectionError, NotAuthorizedError, NotFoundError } from \"../../../common/api/common/error/RestError.js\"\nimport { typeModels } from \"../../../common/api/entities/tutanota/TypeModels.js\"\nimport { assertNotNull, first, groupBy, isEmpty, isNotNull, neverNull, noOp, ofClass, promiseMap } from \"@tutao/tutanota-utils\"\nimport {\n\tdeconstructMailSetEntryId,\n\telementIdPart,\n\tisSameId,\n\tLEGACY_BCC_RECIPIENTS_ID,\n\tLEGACY_BODY_ID,\n\tLEGACY_CC_RECIPIENTS_ID,\n\tLEGACY_TO_RECIPIENTS_ID,\n\tlistIdPart,\n} from \"../../../common/api/common/utils/EntityUtils.js\"\nimport {\n\t_createNewIndexUpdate,\n\tencryptIndexKeyBase64,\n\tfilterMailMemberships,\n\tgetPerformanceTimestamp,\n\thtmlToText,\n\ttypeRefToTypeInfo,\n} from \"../../../common/api/worker/search/IndexUtils.js\"\nimport { Db, GroupData, IndexingErrorReason, IndexUpdate, SearchIndexEntry } from \"../../../common/api/worker/search/SearchTypes.js\"\nimport { CancelledError } from \"../../../common/api/common/error/CancelledError.js\"\nimport { IndexerCore } from \"./IndexerCore.js\"\nimport { DbError } from \"../../../common/api/common/error/DbError.js\"\nimport type { DateProvider } from \"../../../common/api/worker/DateProvider.js\"\nimport type { EntityUpdate, GroupMembership, User } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { ProgressMonitor } from \"../../../common/api/common/utils/ProgressMonitor.js\"\nimport { InfoMessageHandler } from \"../../../common/gui/InfoMessageHandler.js\"\nimport { ElementDataOS, GroupDataOS, Metadata, MetaDataOS } from \"../../../common/api/worker/search/IndexTables.js\"\nimport { MailFacade } from \"../../../common/api/worker/facades/lazy/MailFacade.js\"\nimport { containsEventOfType, EntityUpdateData } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { b64UserIdHash } from \"../../../common/api/worker/search/DbFacade.js\"\nimport { hasError } from \"../../../common/api/common/utils/ErrorUtils.js\"\nimport { getDisplayedSender, getMailBodyText, MailAddressAndName } from \"../../../common/api/common/CommonMailUtils.js\"\nimport { isDraft } from \"../../mail/model/MailChecks.js\"\nimport { BulkMailLoader } from \"./BulkMailLoader.js\"\nimport { parseKeyVersion } from \"../../../common/api/worker/facades/KeyLoaderFacade.js\"\n\nexport const INITIAL_MAIL_INDEX_INTERVAL_DAYS = 28\nconst MAIL_INDEX_BATCH_INTERVAL = 1000 * 60 * 60 * 24 // one day\n\nexport class MailIndexer {\n\t// {@link currentIndexTimestamp}: the **oldest** timestamp that has been indexed for all mail lists\n\t// There are two scenarios in which new mails are indexed:\n\t// a) a new mail (internal/external) is received from our mail server\n\t// \t  * mail timestamp is guaranteed to be newer than the currentIndexTimestamp\n\t//    \t=> mail will be indexed\n\t// b) an old mail is imported to our tutadb server\n\t// \t  * mail timestamp is newer than currentIndexTimestamp\n\t//    \t=> mail will be indexed\n\t//    * mail timestamp is older than currentIndexTimestamp\n\t//    \t=> mail will not be indexed\n\tcurrentIndexTimestamp: number\n\n\tmailIndexingEnabled: boolean\n\tmailboxIndexingPromise: Promise<void>\n\tisIndexing: boolean = false\n\t_indexingCancelled: boolean\n\t_core: IndexerCore\n\t_db: Db\n\t_dateProvider: DateProvider\n\n\tconstructor(\n\t\tcore: IndexerCore,\n\t\tdb: Db,\n\t\tprivate readonly infoMessageHandler: InfoMessageHandler,\n\t\tprivate readonly bulkLoaderFactory: () => BulkMailLoader,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tdateProvider: DateProvider,\n\t\tprivate readonly mailFacade: MailFacade,\n\t) {\n\t\tthis._core = core\n\t\tthis._db = db\n\t\tthis.currentIndexTimestamp = NOTHING_INDEXED_TIMESTAMP\n\t\tthis.mailIndexingEnabled = false\n\t\tthis.mailboxIndexingPromise = Promise.resolve()\n\t\tthis._indexingCancelled = false\n\t\tthis._dateProvider = dateProvider\n\t}\n\n\tcreateMailIndexEntries(mail: Mail, mailDetails: MailDetails, files: TutanotaFile[]): Map<string, SearchIndexEntry[]> {\n\t\tlet startTimeIndex = getPerformanceTimestamp()\n\n\t\t// avoid caching system@tutanota.de since the user wouldn't be searching for this\n\t\tlet senderToIndex: MailAddressAndName\n\n\t\tconst hasSender = mail.sender != null\n\t\tif (hasSender) senderToIndex = getDisplayedSender(mail)\n\n\t\tconst MailModel = typeModels.Mail\n\t\tconst MailDetailsModel = typeModels.MailDetails\n\t\tconst RecipientModel = typeModels.Recipients\n\t\tlet keyToIndexEntries = this._core.createIndexEntriesForAttributes(mail, [\n\t\t\t{\n\t\t\t\tattribute: MailModel.values[\"subject\"],\n\t\t\t\tvalue: () => mail.subject,\n\t\t\t},\n\t\t\t{\n\t\t\t\t// allows old index entries (pre-maildetails) to be used with new clients.\n\t\t\t\tattribute: Object.assign({}, RecipientModel.associations[\"toRecipients\"], { id: LEGACY_TO_RECIPIENTS_ID }),\n\t\t\t\tvalue: () => mailDetails.recipients.toRecipients.map((r) => r.name + \" <\" + r.address + \">\").join(\",\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\t// allows old index entries (pre-maildetails) to be used with new clients.\n\t\t\t\tattribute: Object.assign({}, RecipientModel.associations[\"ccRecipients\"], { id: LEGACY_CC_RECIPIENTS_ID }),\n\t\t\t\tvalue: () => mailDetails.recipients.ccRecipients.map((r) => r.name + \" <\" + r.address + \">\").join(\",\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\t// allows old index entries (pre-maildetails) to be used with new clients.\n\t\t\t\tattribute: Object.assign({}, RecipientModel.associations[\"bccRecipients\"], { id: LEGACY_BCC_RECIPIENTS_ID }),\n\t\t\t\tvalue: () => mailDetails.recipients.bccRecipients.map((r) => r.name + \" <\" + r.address + \">\").join(\",\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: MailModel.associations[\"sender\"],\n\t\t\t\tvalue: () => (hasSender ? senderToIndex.name + \" <\" + senderToIndex.address + \">\" : \"\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\t// allows old index entries (pre-maildetails) to be used with new clients.\n\t\t\t\tattribute: Object.assign({}, MailDetailsModel.associations[\"body\"], { id: LEGACY_BODY_ID }),\n\t\t\t\tvalue: () => htmlToText(getMailBodyText(mailDetails.body)),\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: MailModel.associations[\"attachments\"],\n\t\t\t\tvalue: () => files.map((file) => file.name).join(\" \"),\n\t\t\t},\n\t\t])\n\n\t\tthis._core._stats.indexingTime += getPerformanceTimestamp() - startTimeIndex\n\t\treturn keyToIndexEntries\n\t}\n\n\tprocessNewMail(mailId: IdTuple): Promise<{\n\t\tmail: Mail\n\t\tkeyToIndexEntries: Map<string, SearchIndexEntry[]>\n\t} | null> {\n\t\treturn this.entityClient\n\t\t\t.load(MailTypeRef, mailId)\n\t\t\t.then(async (mail) => {\n\t\t\t\tlet mailDetails: MailDetails\n\t\t\t\tif (isDraft(mail)) {\n\t\t\t\t\t// Will be always there, if it was not updated yet, it will still be set by CryptoFacade\n\t\t\t\t\tconst mailOwnerEncSessionKey = assertNotNull(mail._ownerEncSessionKey)\n\t\t\t\t\tconst mailDetailsDraftId = assertNotNull(mail.mailDetailsDraft)\n\t\t\t\t\tmailDetails = await this.entityClient\n\t\t\t\t\t\t.loadMultiple(MailDetailsDraftTypeRef, listIdPart(mailDetailsDraftId), [elementIdPart(mailDetailsDraftId)], async () => ({\n\t\t\t\t\t\t\tkey: mailOwnerEncSessionKey,\n\t\t\t\t\t\t\tencryptingKeyVersion: parseKeyVersion(mail._ownerKeyVersion ?? \"0\"),\n\t\t\t\t\t\t}))\n\t\t\t\t\t\t.then((d) => {\n\t\t\t\t\t\t\tconst draft = first(d)\n\t\t\t\t\t\t\tif (draft == null) {\n\t\t\t\t\t\t\t\tthrow new NotFoundError(`MailDetailsDraft ${mailDetailsDraftId}`)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn draft.details\n\t\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\t// Will be always there, if it was not updated yet it will still be set by CryptoFacade\n\t\t\t\t\tconst mailOwnerEncSessionKey = assertNotNull(mail._ownerEncSessionKey)\n\t\t\t\t\tconst mailDetailsBlobId = neverNull(mail.mailDetails)\n\t\t\t\t\tmailDetails = await this.entityClient\n\t\t\t\t\t\t.loadMultiple(MailDetailsBlobTypeRef, listIdPart(mailDetailsBlobId), [elementIdPart(mailDetailsBlobId)], async () => ({\n\t\t\t\t\t\t\tkey: mailOwnerEncSessionKey,\n\t\t\t\t\t\t\tencryptingKeyVersion: parseKeyVersion(mail._ownerKeyVersion ?? \"0\"),\n\t\t\t\t\t\t}))\n\t\t\t\t\t\t.then((d) => {\n\t\t\t\t\t\t\tconst blob = first(d)\n\t\t\t\t\t\t\tif (blob == null) {\n\t\t\t\t\t\t\t\tthrow new NotFoundError(`MailDetailsBlob ${mailDetailsBlobId}`)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn blob.details\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tconst files = await this.mailFacade.loadAttachments(mail)\n\t\t\t\tlet keyToIndexEntries = this.createMailIndexEntries(mail, mailDetails, files)\n\t\t\t\treturn {\n\t\t\t\t\tmail,\n\t\t\t\t\tkeyToIndexEntries,\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(\n\t\t\t\tofClass(NotFoundError, () => {\n\t\t\t\t\tconsole.log(\"tried to index non existing mail\")\n\t\t\t\t\treturn null\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(NotAuthorizedError, () => {\n\t\t\t\t\tconsole.log(\"tried to index contact without permission\")\n\t\t\t\t\treturn null\n\t\t\t\t}),\n\t\t\t)\n\t}\n\n\tprocessMovedMail(event: EntityUpdate, indexUpdate: IndexUpdate): Promise<void> {\n\t\tlet encInstanceId = encryptIndexKeyBase64(this._db.key, event.instanceId, this._db.iv)\n\t\treturn this._db.dbFacade.createTransaction(true, [ElementDataOS]).then((transaction) => {\n\t\t\treturn transaction.get(ElementDataOS, encInstanceId).then((elementData) => {\n\t\t\t\tif (elementData) {\n\t\t\t\t\tindexUpdate.move.push({\n\t\t\t\t\t\tencInstanceId,\n\t\t\t\t\t\tnewListId: event.instanceListId,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\t// instance is moved but not yet indexed: handle as new for example moving a mail from non indexed folder like spam to indexed folder\n\t\t\t\t\treturn this.processNewMail([event.instanceListId, event.instanceId]).then((result) => {\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tthis._core.encryptSearchIndexEntries(result.mail._id, neverNull(result.mail._ownerGroup), result.keyToIndexEntries, indexUpdate)\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\tasync enableMailIndexing(user: User): Promise<void> {\n\t\tconst t = await this._db.dbFacade.createTransaction(true, [MetaDataOS])\n\t\tconst enabled = await t.get(MetaDataOS, Metadata.mailIndexingEnabled)\n\t\tif (!enabled) {\n\t\t\tthis.mailIndexingEnabled = true\n\t\t\tconst t2 = await this._db.dbFacade.createTransaction(false, [MetaDataOS])\n\t\t\tt2.put(MetaDataOS, Metadata.mailIndexingEnabled, true)\n\t\t\tt2.put(MetaDataOS, Metadata.excludedListIds, [])\n\n\t\t\t// create index in background, termination is handled in Indexer.enableMailIndexing\n\t\t\tconst oldestTimestamp = this._dateProvider.getStartOfDayShiftedBy(-INITIAL_MAIL_INDEX_INTERVAL_DAYS).getTime()\n\n\t\t\tthis.indexMailboxes(user, oldestTimestamp).catch(\n\t\t\t\tofClass(CancelledError, (e) => {\n\t\t\t\t\tconsole.log(\"cancelled initial indexing\", e)\n\t\t\t\t}),\n\t\t\t)\n\t\t\treturn t2.wait()\n\t\t} else {\n\t\t\treturn t.get(MetaDataOS, Metadata.excludedListIds).then((excludedListIds) => {\n\t\t\t\tthis.mailIndexingEnabled = true\n\t\t\t})\n\t\t}\n\t}\n\n\tdisableMailIndexing(userId: Id): Promise<void> {\n\t\tthis.mailIndexingEnabled = false\n\t\tthis._indexingCancelled = true\n\t\treturn this._db.dbFacade.deleteDatabase(b64UserIdHash(userId))\n\t}\n\n\tcancelMailIndexing(): Promise<void> {\n\t\tthis._indexingCancelled = true\n\t\treturn Promise.resolve()\n\t}\n\n\t/**\n\t * Extend mail index if not indexed this range yet.\n\t * newOldestTimestamp should be aligned to the start of the day up until which you want to index, we don't do rounding inside here.\n\t */\n\tasync extendIndexIfNeeded(user: User, newOldestTimestamp: number): Promise<void> {\n\t\tif (this.currentIndexTimestamp > FULL_INDEXED_TIMESTAMP && this.currentIndexTimestamp > newOldestTimestamp) {\n\t\t\tthis.mailboxIndexingPromise = this.mailboxIndexingPromise\n\t\t\t\t.then(() => this.indexMailboxes(user, newOldestTimestamp))\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(CancelledError, (e) => {\n\t\t\t\t\t\tconsole.log(\"extend mail index has been cancelled\", e)\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\treturn this.mailboxIndexingPromise\n\t\t}\n\t}\n\n\t/**\n\t * Indexes all mailboxes of the given user up to the endIndexTimestamp if mail indexing is enabled.\n\t * If the mailboxes are already fully indexed, they are not indexed again.\n\t */\n\tasync indexMailboxes(user: User, oldestTimestamp: number): Promise<void> {\n\t\tif (!this.mailIndexingEnabled) {\n\t\t\treturn Promise.resolve()\n\t\t}\n\n\t\tthis.isIndexing = true\n\t\tthis._indexingCancelled = false\n\n\t\tthis._core.resetStats()\n\n\t\tawait this.infoMessageHandler.onSearchIndexStateUpdate({\n\t\t\tinitializing: false,\n\t\t\tmailIndexEnabled: this.mailIndexingEnabled,\n\t\t\tprogress: 1,\n\t\t\tcurrentMailIndexTimestamp: this.currentIndexTimestamp,\n\t\t\taimedMailIndexTimestamp: oldestTimestamp,\n\t\t\tindexedMailCount: 0,\n\t\t\tfailedIndexingUpTo: null,\n\t\t})\n\n\t\tlet memberships = filterMailMemberships(user)\n\n\t\tthis._core.queue.pause()\n\n\t\ttry {\n\t\t\tconst mailBoxes: Array<{ mbox: MailBox; newestTimestamp: number }> = []\n\n\t\t\tfor (let mailGroupMembership of memberships) {\n\t\t\t\tlet mailGroupId = mailGroupMembership.group\n\t\t\t\tconst mailboxGroupRoot = await this.entityClient.load(MailboxGroupRootTypeRef, mailGroupId)\n\t\t\t\tconst mailbox = await this.entityClient.load(MailBoxTypeRef, mailboxGroupRoot.mailbox)\n\n\t\t\t\tconst transaction = await this._db.dbFacade.createTransaction(true, [GroupDataOS])\n\t\t\t\tconst groupData = await transaction.get(GroupDataOS, mailGroupId)\n\n\t\t\t\t// group data is not available if group has been added. group will be indexed after login.\n\t\t\t\tif (groupData) {\n\t\t\t\t\tconst newestTimestamp =\n\t\t\t\t\t\tgroupData.indexTimestamp === NOTHING_INDEXED_TIMESTAMP\n\t\t\t\t\t\t\t? this._dateProvider.getStartOfDayShiftedBy(1).getTime()\n\t\t\t\t\t\t\t: groupData.indexTimestamp\n\n\t\t\t\t\tif (newestTimestamp > oldestTimestamp) {\n\t\t\t\t\t\tmailBoxes.push({\n\t\t\t\t\t\t\tmbox: mailbox,\n\t\t\t\t\t\t\tnewestTimestamp,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mailBoxes.length > 0) {\n\t\t\t\tawait this._indexMailLists(mailBoxes, oldestTimestamp)\n\t\t\t}\n\n\t\t\tthis._core.printStatus()\n\n\t\t\tawait this.updateCurrentIndexTimestamp(user)\n\n\t\t\tawait this.infoMessageHandler.onSearchIndexStateUpdate({\n\t\t\t\tinitializing: false,\n\t\t\t\tmailIndexEnabled: this.mailIndexingEnabled,\n\t\t\t\tprogress: 0,\n\t\t\t\tcurrentMailIndexTimestamp: this.currentIndexTimestamp,\n\t\t\t\taimedMailIndexTimestamp: oldestTimestamp,\n\t\t\t\tindexedMailCount: this._core._stats.mailcount,\n\t\t\t\tfailedIndexingUpTo: null,\n\t\t\t})\n\t\t} catch (e) {\n\t\t\tconsole.warn(\"Mail indexing failed: \", e)\n\t\t\t// avoid that a rejected promise is stored\n\t\t\tthis.mailboxIndexingPromise = Promise.resolve()\n\t\t\tawait this.updateCurrentIndexTimestamp(user)\n\n\t\t\tconst success = this._core.isStoppedProcessing() || e instanceof CancelledError\n\n\t\t\tconst failedIndexingUpTo = success ? null : oldestTimestamp\n\n\t\t\tconst error = success ? null : e instanceof ConnectionError ? IndexingErrorReason.ConnectionLost : IndexingErrorReason.Unknown\n\n\t\t\tawait this.infoMessageHandler.onSearchIndexStateUpdate({\n\t\t\t\tinitializing: false,\n\t\t\t\tmailIndexEnabled: this.mailIndexingEnabled,\n\t\t\t\tprogress: 0,\n\t\t\t\tcurrentMailIndexTimestamp: this.currentIndexTimestamp,\n\t\t\t\taimedMailIndexTimestamp: oldestTimestamp,\n\t\t\t\tindexedMailCount: this._core._stats.mailcount,\n\t\t\t\tfailedIndexingUpTo,\n\t\t\t\terror,\n\t\t\t})\n\t\t} finally {\n\t\t\tthis._core.queue.resume()\n\t\t\tthis.isIndexing = false\n\t\t}\n\t}\n\n\t_indexMailLists(\n\t\tmailBoxes: Array<{\n\t\t\tmbox: MailBox\n\t\t\tnewestTimestamp: number\n\t\t}>,\n\t\toldestTimestamp: number,\n\t): Promise<void> {\n\t\tconst newestTimestamp = mailBoxes.reduce((acc, data) => Math.max(acc, data.newestTimestamp), 0)\n\t\tconst progress = new ProgressMonitor(newestTimestamp - oldestTimestamp, (progress) => {\n\t\t\tthis.infoMessageHandler.onSearchIndexStateUpdate({\n\t\t\t\tinitializing: false,\n\t\t\t\tmailIndexEnabled: this.mailIndexingEnabled,\n\t\t\t\tprogress,\n\t\t\t\tcurrentMailIndexTimestamp: this.currentIndexTimestamp,\n\t\t\t\taimedMailIndexTimestamp: oldestTimestamp,\n\t\t\t\tindexedMailCount: this._core._stats.mailcount,\n\t\t\t\tfailedIndexingUpTo: null,\n\t\t\t})\n\t\t})\n\n\t\tconst indexUpdate = _createNewIndexUpdate(typeRefToTypeInfo(MailTypeRef))\n\n\t\tconst indexLoader = this.bulkLoaderFactory()\n\n\t\treturn promiseMap(mailBoxes, (mBoxData) => {\n\t\t\treturn this._loadMailListIds(mBoxData.mbox).then((mailListIds) => {\n\t\t\t\treturn {\n\t\t\t\t\tmailListIds,\n\t\t\t\t\tnewestTimestamp: mBoxData.newestTimestamp,\n\t\t\t\t\townerGroup: neverNull(mBoxData.mbox._ownerGroup),\n\t\t\t\t}\n\t\t\t})\n\t\t}).then((mailboxData) => this._indexMailListsInTimeBatches(mailboxData, [newestTimestamp, oldestTimestamp], indexUpdate, progress, indexLoader))\n\t}\n\n\t_processedEnough(indexUpdate: IndexUpdate): boolean {\n\t\treturn indexUpdate.create.encInstanceIdToElementData.size > 500\n\t}\n\n\t_indexMailListsInTimeBatches(\n\t\tdataPerMailbox: Array<MboxIndexData>,\n\t\ttimeRange: TimeRange,\n\t\tindexUpdate: IndexUpdate,\n\t\tprogress: ProgressMonitor,\n\t\tindexLoader: BulkMailLoader,\n\t): Promise<void> {\n\t\tconst [rangeStart, rangeEnd] = timeRange\n\t\tlet batchEnd = rangeStart - MAIL_INDEX_BATCH_INTERVAL\n\n\t\t// Make sure that we index up until aligned date and not more, otherwise it stays misaligned for user after changing the time zone once\n\t\tif (batchEnd < rangeEnd) {\n\t\t\tbatchEnd = rangeEnd\n\t\t}\n\n\t\tconst mailboxesToWrite = dataPerMailbox.filter((mboxData) => batchEnd < mboxData.newestTimestamp)\n\t\tconst batchRange = [rangeStart, batchEnd] as TimeRange\n\n\t\t// rangeStart is what we have indexed at the previous step. If it's equals to rangeEnd then we're done.\n\t\t// If it's less then we overdid a little bit but we've covered the range and we will write down rangeStart so\n\t\t// we will continue from it next time.\n\t\tif (rangeStart <= rangeEnd) {\n\t\t\t// all ranges have been processed\n\t\t\tconst indexTimestampPerGroup = mailboxesToWrite.map((data) => ({\n\t\t\t\tgroupId: data.ownerGroup,\n\t\t\t\tindexTimestamp: data.mailListIds.length === 0 ? FULL_INDEXED_TIMESTAMP : rangeStart,\n\t\t\t}))\n\t\t\treturn this._writeIndexUpdate(indexTimestampPerGroup, indexUpdate).then(() => {\n\t\t\t\tprogress.workDone(rangeStart - batchEnd)\n\t\t\t})\n\t\t}\n\n\t\treturn this._prepareMailDataForTimeBatch(mailboxesToWrite, batchRange, indexUpdate, indexLoader).then(() => {\n\t\t\tconst nextRange = [batchEnd, rangeEnd] as TimeRange\n\n\t\t\tif (this._processedEnough(indexUpdate)) {\n\t\t\t\t// only write to database if we have collected enough entities\n\t\t\t\tconst indexTimestampPerGroup = mailboxesToWrite.map((data) => ({\n\t\t\t\t\tgroupId: data.ownerGroup,\n\t\t\t\t\tindexTimestamp: data.mailListIds.length === 0 ? FULL_INDEXED_TIMESTAMP : batchEnd,\n\t\t\t\t}))\n\t\t\t\treturn this._writeIndexUpdate(indexTimestampPerGroup, indexUpdate).then(() => {\n\t\t\t\t\tprogress.workDone(rangeStart - batchEnd)\n\n\t\t\t\t\tconst newIndexUpdate = _createNewIndexUpdate(indexUpdate.typeInfo)\n\n\t\t\t\t\treturn this._indexMailListsInTimeBatches(dataPerMailbox, nextRange, newIndexUpdate, progress, indexLoader)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tprogress.workDone(rangeStart - batchEnd)\n\t\t\t\treturn this._indexMailListsInTimeBatches(dataPerMailbox, nextRange, indexUpdate, progress, indexLoader)\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * @return Number of processed emails?\n\t * @private\n\t */\n\tasync _prepareMailDataForTimeBatch(\n\t\tmboxDataList: Array<MboxIndexData>,\n\t\ttimeRange: TimeRange,\n\t\tindexUpdate: IndexUpdate,\n\t\tindexLoader: BulkMailLoader,\n\t): Promise<void> {\n\t\tconst startTimeLoad = getPerformanceTimestamp()\n\t\treturn promiseMap(\n\t\t\tmboxDataList,\n\t\t\t(mboxData) => {\n\t\t\t\treturn promiseMap(\n\t\t\t\t\tmboxData.mailListIds.slice(),\n\t\t\t\t\tasync (listId) => {\n\t\t\t\t\t\t// We use caching here because we may load same emails twice\n\t\t\t\t\t\tconst { elements: mails, loadedCompletely } = await indexLoader.loadMailsInRangeWithCache(listId, timeRange)\n\t\t\t\t\t\t// If we loaded mail list completely, don't try to load from it anymore\n\t\t\t\t\t\tif (loadedCompletely) {\n\t\t\t\t\t\t\tmboxData.mailListIds.splice(mboxData.mailListIds.indexOf(listId), 1)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._core._stats.mailcount += mails.length\n\t\t\t\t\t\t// Remove all processed entities from cache\n\t\t\t\t\t\tawait Promise.all(mails.map((m) => indexLoader.removeFromCache(m._id)))\n\t\t\t\t\t\treturn this._processIndexMails(mails, indexUpdate, indexLoader)\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tconcurrency: 2,\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t},\n\t\t\t{\n\t\t\t\tconcurrency: 5,\n\t\t\t},\n\t\t).then(() => {\n\t\t\tthis._core._stats.preparingTime += getPerformanceTimestamp() - startTimeLoad\n\t\t})\n\t}\n\n\tasync _processIndexMails(mails: Array<Mail>, indexUpdate: IndexUpdate, indexLoader: BulkMailLoader): Promise<number> {\n\t\tif (this._indexingCancelled) throw new CancelledError(\"cancelled indexing in processing index mails\")\n\t\tlet mailsWithoutErros = mails.filter((m) => !hasError(m))\n\t\tconst mailsWithMailDetails = await indexLoader.loadMailDetails(mailsWithoutErros)\n\t\tconst files = await indexLoader.loadAttachments(mailsWithoutErros)\n\t\tconst mailsWithMailDetailsAndFiles = mailsWithMailDetails\n\t\t\t.map((mailTuples) => {\n\t\t\t\treturn {\n\t\t\t\t\tmail: mailTuples.mail,\n\t\t\t\t\tmailDetails: mailTuples.mailDetails,\n\t\t\t\t\tfiles: files.filter((file) => mailTuples.mail.attachments.find((a) => isSameId(a, file._id))),\n\t\t\t\t}\n\t\t\t})\n\t\t\t.filter(isNotNull)\n\t\tfor (const element of mailsWithMailDetailsAndFiles) {\n\t\t\tlet keyToIndexEntries = this.createMailIndexEntries(element.mail, element.mailDetails, element.files)\n\n\t\t\tthis._core.encryptSearchIndexEntries(element.mail._id, neverNull(element.mail._ownerGroup), keyToIndexEntries, indexUpdate)\n\t\t}\n\t\treturn mailsWithMailDetailsAndFiles.length\n\t}\n\n\t_writeIndexUpdate(\n\t\tdataPerGroup: Array<{\n\t\t\tgroupId: Id\n\t\t\tindexTimestamp: number\n\t\t}>,\n\t\tindexUpdate: IndexUpdate,\n\t): Promise<void> {\n\t\treturn this._core.writeIndexUpdate(dataPerGroup, indexUpdate)\n\t}\n\n\tupdateCurrentIndexTimestamp(user: User): Promise<void> {\n\t\treturn this._db.dbFacade\n\t\t\t.createTransaction(true, [GroupDataOS])\n\t\t\t.then((t) => {\n\t\t\t\treturn Promise.all(\n\t\t\t\t\tfilterMailMemberships(user).map((mailGroupMembership) => {\n\t\t\t\t\t\treturn t.get(GroupDataOS, mailGroupMembership.group).then((groupData: GroupData | null) => {\n\t\t\t\t\t\t\tif (!groupData) {\n\t\t\t\t\t\t\t\treturn NOTHING_INDEXED_TIMESTAMP\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn groupData.indexTimestamp\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}),\n\t\t\t\t).then((groupIndexTimestamps) => {\n\t\t\t\t\tthis.currentIndexTimestamp = _getCurrentIndexTimestamp(groupIndexTimestamps)\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tif (err instanceof DbError && this._core.isStoppedProcessing()) {\n\t\t\t\t\tconsole.log(\"The database was closed, do not write currentIndexTimestamp\")\n\t\t\t\t}\n\t\t\t})\n\t}\n\n\t/**\n\t * Provides all mail list ids of the given mailbox\n\t */\n\tasync _loadMailListIds(mailbox: MailBox): Promise<Id[]> {\n\t\treturn [mailbox.currentMailBag!, ...mailbox.archivedMailBags].map((mailbag) => mailbag.mails)\n\t}\n\n\t_getSpamFolder(mailGroup: GroupMembership): Promise<MailFolder> {\n\t\treturn this.entityClient\n\t\t\t.load(MailboxGroupRootTypeRef, mailGroup.group)\n\t\t\t.then((mailGroupRoot) => this.entityClient.load(MailBoxTypeRef, mailGroupRoot.mailbox))\n\t\t\t.then((mbox) => {\n\t\t\t\treturn this.entityClient\n\t\t\t\t\t.loadAll(MailFolderTypeRef, neverNull(mbox.folders).folders)\n\t\t\t\t\t.then((folders) => neverNull(folders.find((folder) => folder.folderType === MailSetKind.SPAM)))\n\t\t\t})\n\t}\n\n\tasync processImportStateEntityEvents(events: EntityUpdate[], groupId: Id, batchId: Id, indexUpdate: IndexUpdate): Promise<void> {\n\t\tif (!this.mailIndexingEnabled) return Promise.resolve()\n\t\tawait promiseMap(events, async (event) => {\n\t\t\t// we can only process create and update events (create is because of EntityEvent optimization\n\t\t\t// (CREATE + UPDATE = CREATE) which requires us to process CREATE events with imported mails)\n\t\t\tif (event.operation === OperationType.CREATE || event.operation === OperationType.UPDATE) {\n\t\t\t\tlet mailIds: IdTuple[] = await this.loadImportedMailIdsInIndexDateRange([event.instanceListId, event.instanceId])\n\n\t\t\t\tawait this.preloadMails(mailIds)\n\n\t\t\t\treturn await promiseMap(mailIds, (mailId) =>\n\t\t\t\t\tthis.processNewMail(mailId).then((result) => {\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tthis._core.encryptSearchIndexEntries(result.mail._id, neverNull(result.mail._ownerGroup), result.keyToIndexEntries, indexUpdate)\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * We preload all mails and mail details into the cache in order to prevent loading mails one by one\n\t * after importing lots of mails...\n\t */\n\tprivate async preloadMails(mailIds: IdTuple[]) {\n\t\tconst mailsByList = groupBy(mailIds, (m) => listIdPart(m))\n\t\tlet mails: Array<Mail> = []\n\t\tfor (const [listId, mailIds] of mailsByList.entries()) {\n\t\t\tconst mailElementIds = mailIds.map((m) => elementIdPart(m))\n\t\t\tmails = mails.concat(await this.entityClient.loadMultiple(MailTypeRef, listId, mailElementIds))\n\t\t}\n\t\tconst indexLoader = this.bulkLoaderFactory()\n\t\tawait indexLoader.loadMailDetails(mails)\n\t\tawait indexLoader.loadAttachments(mails)\n\t}\n\n\tasync loadImportedMailIdsInIndexDateRange(importStateId: IdTuple): Promise<IdTuple[]> {\n\t\tconst importMailState = await this.entityClient.load(ImportMailStateTypeRef, importStateId)\n\t\tlet status = parseInt(importMailState.status) as ImportStatus\n\t\tif (status !== ImportStatus.Finished && status !== ImportStatus.Canceled) {\n\t\t\treturn Promise.resolve([])\n\t\t}\n\t\tlet importedMailEntries = await this.entityClient.loadAll(ImportedMailTypeRef, importMailState.importedMails)\n\n\t\tif (isEmpty(importedMailEntries)) {\n\t\t\treturn Promise.resolve([])\n\t\t}\n\n\t\tlet importedMailSetEntryListId = listIdPart(importedMailEntries[0].mailSetEntry)\n\t\t// we only want to index mails with a receivedDate newer than the currentIndexTimestamp\n\t\tlet dateRangeFilteredMailSetEntryIds = importedMailEntries\n\t\t\t.map((importedMail) => elementIdPart(importedMail.mailSetEntry))\n\t\t\t.filter((importedEntry) => deconstructMailSetEntryId(importedEntry).receiveDate.getTime() >= this.currentIndexTimestamp)\n\t\treturn this.entityClient\n\t\t\t.loadMultiple(MailSetEntryTypeRef, importedMailSetEntryListId, dateRangeFilteredMailSetEntryIds)\n\t\t\t.then((entries) => entries.map((entry) => entry.mail))\n\t}\n\n\t/**\n\t * Prepare IndexUpdate in response to the new entity events.\n\t * {@see MailIndexerTest.js}\n\t * @param events Events from one batch\n\t * @param groupId\n\t * @param batchId\n\t * @param indexUpdate which will be populated with operations\n\t * @returns {Promise<*>} Indication that we're done.\n\t */\n\tprocessEntityEvents(events: EntityUpdate[], groupId: Id, batchId: Id, indexUpdate: IndexUpdate): Promise<void> {\n\t\tif (!this.mailIndexingEnabled) return Promise.resolve()\n\t\treturn promiseMap(events, (event) => {\n\t\t\tconst mailId: IdTuple = [event.instanceListId, event.instanceId]\n\t\t\tif (event.operation === OperationType.CREATE) {\n\t\t\t\tif (containsEventOfType(events as readonly EntityUpdateData[], OperationType.DELETE, event.instanceId)) {\n\t\t\t\t\t// do not execute move operation if there is a delete event or another move event.\n\t\t\t\t\treturn this.processMovedMail(event, indexUpdate)\n\t\t\t\t} else {\n\t\t\t\t\treturn this.processNewMail(mailId).then((result) => {\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tthis._core.encryptSearchIndexEntries(result.mail._id, neverNull(result.mail._ownerGroup), result.keyToIndexEntries, indexUpdate)\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} else if (event.operation === OperationType.UPDATE) {\n\t\t\t\treturn this.entityClient\n\t\t\t\t\t.load(MailTypeRef, [event.instanceListId, event.instanceId])\n\t\t\t\t\t.then((mail) => {\n\t\t\t\t\t\tif (mail.state === MailState.DRAFT) {\n\t\t\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\t\t\tthis._core._processDeleted(event, indexUpdate),\n\t\t\t\t\t\t\t\tthis.processNewMail(mailId).then((result) => {\n\t\t\t\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\t\t\t\tthis._core.encryptSearchIndexEntries(\n\t\t\t\t\t\t\t\t\t\t\tresult.mail._id,\n\t\t\t\t\t\t\t\t\t\t\tneverNull(result.mail._ownerGroup),\n\t\t\t\t\t\t\t\t\t\t\tresult.keyToIndexEntries,\n\t\t\t\t\t\t\t\t\t\t\tindexUpdate,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(ofClass(NotFoundError, () => console.log(\"tried to index update event for non existing mail\")))\n\t\t\t} else if (event.operation === OperationType.DELETE) {\n\t\t\t\tif (!containsEventOfType(events as readonly EntityUpdateData[], OperationType.CREATE, event.instanceId)) {\n\t\t\t\t\t// Check that this is *not* a move event. Move events are handled separately.\n\t\t\t\t\treturn this._core._processDeleted(event, indexUpdate)\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(noOp)\n\t}\n}\n\n// export just for testing\nexport function _getCurrentIndexTimestamp(groupIndexTimestamps: number[]): number {\n\tlet currentIndexTimestamp = NOTHING_INDEXED_TIMESTAMP\n\tfor (const [index, t] of groupIndexTimestamps.entries()) {\n\t\tif (index === 0) {\n\t\t\tcurrentIndexTimestamp = t\n\t\t} else if (t === NOTHING_INDEXED_TIMESTAMP) {\n\t\t\t// skip new group memberships\n\t\t} else if (t === FULL_INDEXED_TIMESTAMP && currentIndexTimestamp !== FULL_INDEXED_TIMESTAMP && currentIndexTimestamp !== NOTHING_INDEXED_TIMESTAMP) {\n\t\t\t// skip full index timestamp if this is not the first mail group\n\t\t} else if (currentIndexTimestamp === FULL_INDEXED_TIMESTAMP && t !== currentIndexTimestamp) {\n\t\t\t// find the oldest timestamp\n\t\t\t// mail index ist not fully indexed if one of the mailboxes is not fully indexed\n\t\t\tcurrentIndexTimestamp = t\n\t\t} else if (t < currentIndexTimestamp) {\n\t\t\t// set the oldest index timestamp as current timestamp so all mailboxes can index to this timestamp during log in.\n\t\t\tcurrentIndexTimestamp = t\n\t\t}\n\t}\n\treturn currentIndexTimestamp\n}\n\ntype TimeRange = [number, number]\ntype MboxIndexData = {\n\tmailListIds: Array<Id>\n\tnewestTimestamp: number\n\townerGroup: Id\n}\n"]}