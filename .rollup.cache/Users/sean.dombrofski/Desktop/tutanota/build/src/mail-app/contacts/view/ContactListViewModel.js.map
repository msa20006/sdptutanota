{"version":3,"file":"ContactListViewModel.js","sourceRoot":"","sources":["../../../../../src/mail-app/contacts/view/ContactListViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { ListElementListModel } from \"../../../common/misc/ListElementListModel.js\"\nimport {\n\tContact,\n\tContactListEntry,\n\tContactListEntryTypeRef,\n\tContactListGroupRoot,\n\tContactListGroupRootTypeRef,\n\tContactTypeRef,\n\tcreateContactListEntry,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { getEtId, isSameId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { GroupManagementFacade } from \"../../../common/api/worker/facades/lazy/GroupManagementFacade.js\"\nimport { LoginController } from \"../../../common/api/main/LoginController.js\"\nimport { arrayEquals, debounce, lazyMemoized, memoized } from \"@tutao/tutanota-utils\"\nimport { EntityEventsListener, EventController } from \"../../../common/api/main/EventController.js\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport { Router } from \"../../../common/gui/ScopedRouter.js\"\nimport { ContactListInfo, ContactModel } from \"../../../common/contactsFunctionality/ContactModel.js\"\nimport { ReceivedGroupInvitation } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { ReceivedGroupInvitationsModel } from \"../../../common/sharing/model/ReceivedGroupInvitationsModel.js\"\nimport { GroupType } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { locator } from \"../../../common/api/main/CommonLocator.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { ListAutoSelectBehavior } from \"../../../common/misc/DeviceConfig.js\"\n\nexport class ContactListViewModel {\n\tprivate selectedContactList: Id | null = null\n\n\tcontactsForSelectedEntry: Contact[] = []\n\tprivate listModelStateStream: Stream<unknown> | null = null\n\tprivate sortedContactListInfos: Stream<ReadonlyArray<ContactListInfo>> = stream([])\n\tprivate sortedSharedContactListInfos: Stream<ReadonlyArray<ContactListInfo>> = stream([])\n\n\tconstructor(\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly groupManagementFacade: GroupManagementFacade,\n\t\tprivate readonly loginController: LoginController,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly contactListInvitations: ReceivedGroupInvitationsModel<GroupType.ContactList>,\n\t\tprivate readonly router: Router,\n\t\tprivate readonly updateUi: () => unknown,\n\t) {}\n\n\tasync showListAndEntry(listId?: Id, entryId?: Id) {\n\t\tthis.selectedContactList = listId ?? null\n\n\t\t// make sure that we have the list infos before we check whether the passed one is in them\n\t\tawait this.init()\n\t\t// checking that no one changed the list in the meantime concurrently\n\t\tif (this.selectedContactList === listId && !this.getContactListInfoForEntryListId(listId)) {\n\t\t\tthis.selectedContactList = null\n\t\t}\n\t\tawait this.listModel?.loadInitial()\n\n\t\tif (listId && entryId) {\n\t\t\tthis.loadAndSelect(listId, entryId)\n\t\t}\n\t}\n\n\treadonly init = lazyMemoized(async () => {\n\t\tthis.eventController.addEntityListener(this.entityEventsReceived)\n\t\tthis.sortedContactListInfos = this.contactModel.getOwnContactListInfos().map((infos) => {\n\t\t\tthis.updateUi()\n\t\t\treturn infos.slice().sort((a, b) => a.name.localeCompare(b.name))\n\t\t})\n\t\tthis.sortedSharedContactListInfos = this.contactModel.getSharedContactListInfos().map((infos) => {\n\t\t\tthis.updateUi()\n\t\t\treturn infos.slice().sort((a, b) => a.name.localeCompare(b.name))\n\t\t})\n\n\t\tthis.contactListInvitations.init()\n\t\t// dispose() of the model will end this stream, no need to unsubscribe manually\n\t\tthis.contactListInvitations.invitations.map(this.updateUi)\n\t\tawait this.contactModel.getLoadedContactListInfos()\n\t})\n\n\tget listModel(): ListElementListModel<ContactListEntry> | null {\n\t\treturn this.selectedContactList ? this._listModel(this.selectedContactList) : null\n\t}\n\n\tprivate readonly _listModel = memoized((listId: Id) => {\n\t\tconst newListModel = new ListElementListModel<ContactListEntry>({\n\t\t\tfetch: async () => {\n\t\t\t\tconst items = await this.getRecipientsForList(listId)\n\t\t\t\treturn { items, complete: true }\n\t\t\t},\n\t\t\tloadSingle: async (_listId: Id, elementId: Id) => {\n\t\t\t\treturn this.entityClient.load(ContactListEntryTypeRef, [listId, elementId])\n\t\t\t},\n\t\t\tsortCompare: (rl1, rl2) => rl1.emailAddress.localeCompare(rl2.emailAddress),\n\t\t\tautoSelectBehavior: () => ListAutoSelectBehavior.OLDER,\n\t\t})\n\n\t\tthis.listModelStateStream?.end(true)\n\n\t\tthis.listModelStateStream = newListModel.stateStream.map(() => {\n\t\t\tthis.contactsForSelectedEntry = []\n\t\t\tthis.updateUi()\n\t\t\tthis.updateUrl()\n\t\t\tthis.getContactsForSelectedContactListEntry()\n\t\t})\n\n\t\treturn newListModel\n\t})\n\n\tprivate async loadAndSelect(listId: Id, contactListEntryId: Id) {\n\t\tawait this.listModel?.loadAndSelect(contactListEntryId, () => this.selectedContactList !== listId)\n\t}\n\n\tgetContactListId(): Promise<Id | null> {\n\t\treturn this.contactModel.getContactListId()\n\t}\n\n\tgetOwnContactListInfos(): ReadonlyArray<ContactListInfo> {\n\t\treturn this.sortedContactListInfos() ?? []\n\t}\n\n\tgetSharedContactListInfos(): ReadonlyArray<ContactListInfo> {\n\t\treturn this.sortedSharedContactListInfos() ?? []\n\t}\n\n\tgetContactListInvitations(): Array<ReceivedGroupInvitation> {\n\t\treturn this.contactListInvitations.invitations()\n\t}\n\n\tprivate readonly getContactsForSelectedContactListEntry = debounce(50, async () => {\n\t\tconst selected = this.getSelectedContactListEntries()\n\t\tif (selected?.length === 1) {\n\t\t\tconst searchedContacts = await this.contactModel.searchForContacts(selected[0].emailAddress, \"mailAddress\", 10)\n\t\t\t// need an exact match\n\t\t\tconst contacts = searchedContacts.filter((contact) =>\n\t\t\t\tcontact.mailAddresses.map((mailAddress) => mailAddress.address).includes(selected[0].emailAddress),\n\t\t\t)\n\t\t\tconst nowSelected = this.getSelectedContactListEntries() ?? []\n\t\t\tif (arrayEquals(selected, nowSelected)) {\n\t\t\t\tthis.contactsForSelectedEntry = contacts\n\t\t\t}\n\t\t} else {\n\t\t\treturn []\n\t\t}\n\t\tthis.updateUi()\n\t})\n\n\tprivate updateUrl() {\n\t\tif (!this.listModel?.state.inMultiselect) {\n\t\t\tconst recipient = this.getSelectedContactListEntries()\n\t\t\tif (recipient && recipient.length === 1) {\n\t\t\t\tthis.router.routeTo(`/contactlist/:listId/:itemId`, {\n\t\t\t\t\tlistId: this.selectedContactList,\n\t\t\t\t\titemId: recipient[0]._id[1],\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tif (this.selectedContactList) {\n\t\t\tthis.router.routeTo(`/contactlist/:listId`, { listId: this.selectedContactList })\n\t\t} else {\n\t\t\tthis.router.routeTo(`/contactlist`, {})\n\t\t}\n\t}\n\n\tasync canCreateContactList(): Promise<boolean> {\n\t\tconst planConfig = await this.loginController.getUserController().getPlanConfig()\n\t\treturn planConfig.contactList\n\t}\n\n\tasync addContactList(name: string, recipients: string[]) {\n\t\tconst newGroup = await this.groupManagementFacade.createContactListGroup(name)\n\t\tconst newContactList = await this.entityClient.load(ContactListGroupRootTypeRef, newGroup._id)\n\n\t\tthis.addRecipientstoContactList(recipients, newContactList)\n\t}\n\n\tasync addRecipientstoContactList(addresses: string[], contactListGroupRoot: ContactListGroupRoot) {\n\t\tconst currentRecipients = await this.getRecipientsForList(contactListGroupRoot.entries)\n\t\tconst listAddresses = currentRecipients.map((entry) => entry.emailAddress)\n\t\tfor (const address of addresses) {\n\t\t\tif (!listAddresses.includes(address)) {\n\t\t\t\tconst recipient = createContactListEntry({\n\t\t\t\t\t_ownerGroup: contactListGroupRoot._id,\n\t\t\t\t\temailAddress: address,\n\t\t\t\t})\n\n\t\t\t\tthis.addEntryOnList(contactListGroupRoot.entries, recipient)\n\t\t\t}\n\t\t}\n\t}\n\n\taddEntryOnList(recipientsId: Id, recipient: ContactListEntry) {\n\t\tthis.entityClient.setup(recipientsId, recipient)\n\t}\n\n\tprivate readonly entityEventsReceived: EntityEventsListener = async (updates: ReadonlyArray<EntityUpdateData>): Promise<void> => {\n\t\tfor (const update of updates) {\n\t\t\tif (this.selectedContactList) {\n\t\t\t\tconst { instanceListId, instanceId, operation } = update\n\t\t\t\tif (isUpdateForTypeRef(ContactListEntryTypeRef, update) && isSameId(this.selectedContactList, instanceListId)) {\n\t\t\t\t\tawait this.listModel?.entityEventReceived(instanceListId, instanceId, operation)\n\t\t\t\t} else if (isUpdateForTypeRef(ContactTypeRef, update)) {\n\t\t\t\t\tthis.getContactsForSelectedContactListEntry()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.updateUi()\n\t\t}\n\t}\n\n\tupdateSelectedContactList(selected: Id): void {\n\t\tthis.selectedContactList = selected\n\t\tthis.listModel?.loadInitial()\n\t}\n\n\tupdateContactList(contactListInfo: ContactListInfo, name: string, addresses: string[]): void {\n\t\t// the name is stored on both GroupInfo (own contact list) and UserSettingsGroupRoot (contact lists shared with us)\n\t\t// note: make sure to handle shared contact lists when implementing sharing\n\t\tcontactListInfo.name = name\n\t\tcontactListInfo.groupInfo.name = name\n\t\tthis.entityClient.update(contactListInfo.groupInfo)\n\t}\n\n\tgetSelectedContactListInfo(): ContactListInfo | null {\n\t\treturn this.selectedContactList ? this.getContactListInfoForEntryListId(this.selectedContactList) : null\n\t}\n\n\tgetSelectedContactListEntries(): ContactListEntry[] | undefined {\n\t\treturn this.listModel?.getSelectedAsArray()\n\t}\n\n\tasync getRecipientsForList(listId: Id): Promise<ContactListEntry[]> {\n\t\treturn await this.entityClient.loadAll(ContactListEntryTypeRef, listId)\n\t}\n\n\tdeleteContactList(contactList: ContactListInfo) {\n\t\tthis.groupManagementFacade.deleteContactListGroup(contactList.groupRoot)\n\t}\n\n\tasync deleteContactListEntries(recipients: ContactListEntry[]) {\n\t\tfor (const recipient of recipients) {\n\t\t\tawait this.entityClient.erase(recipient)\n\t\t}\n\t}\n\n\tremoveUserFromContactList(contactList: ContactListInfo) {\n\t\treturn locator.groupManagementFacade.removeUserFromGroup(getEtId(this.loginController.getUserController().user), contactList.groupInfo.group)\n\t}\n\n\tasync deleteSelectedEntries() {\n\t\tawait this.deleteContactListEntries(this.getSelectedContactListEntries() ?? [])\n\t}\n\n\tprivate getContactListInfoForEntryListId(listId: string): ContactListInfo | null {\n\t\treturn (\n\t\t\tthis.getOwnContactListInfos().find((contactList) => contactList.groupRoot.entries === listId) ??\n\t\t\tthis.getSharedContactListInfos().find((contactList) => contactList.groupRoot.entries === listId) ??\n\t\t\tnull\n\t\t)\n\t}\n\n\tdispose() {\n\t\tthis.eventController.removeEntityListener(this.entityEventsReceived)\n\t\tthis.sortedContactListInfos.end(true)\n\t\tthis.sortedSharedContactListInfos.end(true)\n\t\tthis.contactListInvitations.dispose()\n\t}\n}\n"]}