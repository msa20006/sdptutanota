{"version":3,"file":"KnowledgeBaseModel.js","sourceRoot":"","sources":["../../../../../src/mail-app/knowledgebase/model/KnowledgeBaseModel.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,oBAAoB,EAAE,yBAAyB,EAAE,MAAM,mDAAmD,CAAA;AAEnH,OAAO,EAAE,mBAAmB,EAAE,MAAM,gCAAgC,CAAA;AAEpE,OAAO,EAAE,IAAI,EAAE,MAAM,2CAA2C,CAAA;AAChE,OAAO,MAAM,MAAM,gBAAgB,CAAA;AAGnC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAC3F,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,iDAAiD,CAAA;AAE3G,OAAO,EAAE,yBAAyB,EAAE,MAAM,6CAA6C,CAAA;AAEvF,OAAO,EAAE,oBAAoB,EAAE,MAAM,uCAAuC,CAAA;AAC5E,OAAO,EAAoB,kBAAkB,EAAE,MAAM,uDAAuD,CAAA;AAG5G,MAAM,CAAC,MAAM,iBAAiB,GAAG,MAAM,CAAA;AAEvC,SAAS,kCAAkC,CAAC,MAA0B,EAAE,MAA0B;IACjG,OAAO,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;AAChD,CAAC;AAED;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAC9B,WAAW,CAAiC;IAC5C,eAAe,CAA2C;IAC1D,aAAa,CAAmC;IAChD,YAAY,CAAe;IAC3B,yBAAyB,CAAsB;IAC/C,YAAY,CAAQ;IACX,gBAAgB,CAAiB;IACjC,aAAa,CAAc;IAC3B,oBAAoB,CAAsB;IACnD,eAAe,CAA8B;IAC7C,YAAY,CAAgC;IACnC,cAAc,CAAgB;IAEvC,YAAY,eAAgC,EAAE,YAA0B,EAAE,cAA8B;QACvG,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAA;QACvC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAA;QACjC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAA;QACpC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAA;QACxE,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;QACtB,IAAI,CAAC,yBAAyB,GAAG,EAAE,CAAA;QACnC,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;QACrD,IAAI,CAAC,aAAa,GAAG,MAAM,CAA4B,IAAI,CAAC,CAAA;QAC5D,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;QAEtB,IAAI,CAAC,oBAAoB,GAAG,CAAC,OAAO,EAAE,EAAE;YACvC,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;QACnC,CAAC,CAAA;QAED,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;QAElE,IAAI,CAAC,eAAe,GAAG,EAAE,CAAA;QACzB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;QACtB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;QAC5C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;QAC5E,IAAI,CAAC,YAAY,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE;YACvC,MAAM,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,EAAE,CAAA;YAExE,IAAI,iBAAiB,GAA4B,EAAE,CAAA;YACnD,OAAO,UAAU,CAAC,mBAAmB,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,yBAAyB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;iBACzG,IAAI,CAAC,CAAC,cAAc,EAAE,EAAE;gBACxB,iBAAiB,GAAG,cAAc,CAAA;gBAClC,OAAO,wBAAwB,CAAC,cAAc,EAAE,YAAY,CAAC,CAAA;YAC9D,CAAC,CAAC;iBACD,IAAI,CAAC,CAAC,oBAAoB,EAAE,EAAE;gBAC9B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAA;gBAEhD,IAAI,CAAC,eAAe,GAAG,iBAAiB,CAAA;gBACxC,IAAI,CAAC,eAAe,EAAE,CAAA;gBACtB,OAAO,IAAI,CAAA;YACZ,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACH,CAAC;IAED,IAAI;QACH,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAA;IACpC,CAAC;IAED,aAAa;QACZ,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAA;IACpC,CAAC;IAED,yBAAyB;QACxB,OAAO,IAAI,CAAC,eAAe,CAAA;IAC5B,CAAC;IAED,eAAe;QACd,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;QACtB,IAAI,CAAC,yBAAyB,GAAG,EAAE,CAAA;QAEnC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YAC5C,KAAK,MAAM,OAAO,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACtC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;YACxC,CAAC;QACF,CAAC;IACF,CAAC;IAED,eAAe,CAAC,KAAyB;QACxC,OAAO,IAAI,CAAC,aAAa,EAAE,KAAK,KAAK,CAAA;IACtC,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,MAAM,GAAG,CAAC,CAAA;IACzC,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAA;IAChC,CAAC;IAED,2BAA2B;QAC1B,OAAO,IAAI,CAAC,yBAAyB,CAAA;IACtC,CAAC;IAED,uBAAuB,CAAC,QAAuB;QAC9C,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAA;QAChC,MAAM,iBAAiB,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,KAAK,cAAc,CAAC,CAAA;QAEtG,IAAI,iBAAiB,EAAE,CAAC;YACvB,OAAO,cAAc,CAAA;QACtB,CAAC;QAED,OAAO,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAA;IACnD,CAAC;IAED,6BAA6B,CAAC,YAAoB;QACjD,IAAI,CAAC,yBAAyB,GAAG,EAAE,CAAA;QACnC,MAAM,kBAAkB,GAAG,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAA,CAAC,uBAAuB;QAE5F,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACzC,IAAI,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC1C,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YAC7C,CAAC;QACF,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;QAClH,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;QACtB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;IAC7C,CAAC;IAED,gCAAgC,CAAC,MAA0B,EAAE,MAA0B;QACtF,MAAM,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAA;QAElG,OAAO,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC,kCAAkC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAA;IAC1F,CAAC;IAED,yBAAyB,CAAC,KAAyB;QAClD,IAAI,OAAO,GAAG,CAAC,CAAA;QACf,KAAK,MAAM,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;YAChC,IAAI,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;gBACxD,OAAO,EAAE,CAAA;YACV,CAAC;QACF,CAAC;QACD,OAAO,OAAO,CAAA;IACf,CAAC;IAED,MAAM,CAAC,KAAa;QACnB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAA;QACzB,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,EAAE,CAAA;QAEjC,IAAI,YAAY,EAAE,CAAC;YAClB,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAA;QAChF,CAAC;aAAM,CAAC;YACP,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;QAC7C,CAAC;IACF,CAAC;IAED,eAAe,CAAC,MAAc;QAC7B,uCAAuC;QACvC,MAAM,aAAa,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAA;QAClD,MAAM,SAAS,GAAG,aAAa,GAAG,CAAC,MAAM,KAAK,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAEzE,IAAI,SAAS,IAAI,CAAC,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,MAAM,EAAE,CAAC;YACjE,MAAM,iBAAiB,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,SAAS,CAAC,CAAA;YAC3D,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAA;YACrC,OAAO,IAAI,CAAA;QACZ,CAAC;QAED,OAAO,KAAK,CAAA;IACb,CAAC;IAED,qBAAqB;QACpB,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;QAC1C,IAAI,aAAa,IAAI,IAAI,EAAE,CAAC;YAC3B,OAAO,CAAC,CAAC,CAAA;QACV,CAAC;QACD,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,CAAA;IACrD,CAAC;IAED,sBAAsB,CAAC,OAAe;QACrC,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;QAEhD,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;YAChB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;QACnC,CAAC;IACF,CAAC;IAED,OAAO;QACN,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;IACtE,CAAC;IAED,YAAY,CAAC,UAAmB;QAC/B,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,oBAAoB,EAAE,UAAU,CAAC,CAAA;IACjE,CAAC;IAED,UAAU,CAAC,KAAyB;QACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QAE9G,OAAO,CAAC,QAAQ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,kCAAwB,CAAA;IAC3G,CAAC;IAED,aAAa,CAAC,OAAwC;QACrD,OAAO,UAAU,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE;YACrC,IAAI,kBAAkB,CAAC,yBAAyB,EAAE,MAAM,CAAC,EAAE,CAAC;gBAC3D,IAAI,MAAM,CAAC,SAAS,mCAAyB,EAAE,CAAC;oBAC/C,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;wBACpH,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;wBAE9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;oBAC/B,CAAC,CAAC,CAAA;gBACH,CAAC;qBAAM,IAAI,MAAM,CAAC,SAAS,mCAAyB,EAAE,CAAC;oBACtD,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE;wBAC3H,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;wBAEjF,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;wBAErC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;wBAC9B,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;wBAE7C,IAAI,gBAAgB,IAAI,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC;4BAC1E,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAA;wBACjC,CAAC;oBACF,CAAC,CAAC,CAAA;gBACH,CAAC;qBAAM,IAAI,MAAM,CAAC,SAAS,mCAAyB,EAAE,CAAC;oBACtD,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;oBAErC,IAAI,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;wBAC1F,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;oBACzB,CAAC;oBAED,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;oBAEjF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;gBAC/B,CAAC;YACF,CAAC;QACF,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACd,CAAC;CACD;AAED,SAAS,wBAAwB,CAAC,cAA4C,EAAE,YAA0B;IACzG,OAAO,UAAU,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,yBAAyB,EAAE,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,EAAE,CACtJ,gBAAgB,CAAC,IAAI,EAAE,CACvB,CAAA;AACF,CAAC","sourcesContent":["import type { EmailTemplate, KnowledgeBaseEntry } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { EmailTemplateTypeRef, KnowledgeBaseEntryTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { knowledgeBaseSearch } from \"./KnowledgeBaseSearchFilter.js\"\nimport type { LanguageCode } from \"../../../common/misc/LanguageViewModel.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel.js\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { OperationType, ShareCapability } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { downcast, LazyLoaded, noOp, promiseMap, SortedArray } from \"@tutao/tutanota-utils\"\nimport { getElementId, getEtId, getLetId, isSameId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport type { TemplateGroupInstance } from \"../../templates/model/TemplateGroupModel.js\"\nimport { loadTemplateGroupInstance } from \"../../templates/model/TemplatePopupModel.js\"\nimport type { UserController } from \"../../../common/api/main/UserController.js\"\nimport { hasCapabilityOnGroup } from \"../../../common/sharing/GroupUtils.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { EntityEventsListener, EventController } from \"../../../common/api/main/EventController.js\"\n\nexport const SELECT_NEXT_ENTRY = \"next\"\n\nfunction compareKnowledgeBaseEntriesForSort(entry1: KnowledgeBaseEntry, entry2: KnowledgeBaseEntry): number {\n\treturn entry1.title.localeCompare(entry2.title)\n}\n\n/**\n *   Model that holds main logic for the Knowledgebase.\n */\nexport class KnowledgeBaseModel {\n\t_allEntries: SortedArray<KnowledgeBaseEntry>\n\tfilteredEntries: Stream<ReadonlyArray<KnowledgeBaseEntry>>\n\tselectedEntry: Stream<KnowledgeBaseEntry | null>\n\t_allKeywords: Array<string>\n\t_matchedKeywordsInContent: Array<string | null>\n\t_filterValue: string\n\treadonly _eventController: EventController\n\treadonly _entityClient: EntityClient\n\treadonly _entityEventReceived: EntityEventsListener\n\t_groupInstances: Array<TemplateGroupInstance>\n\t_initialized: LazyLoaded<KnowledgeBaseModel>\n\treadonly userController: UserController\n\n\tconstructor(eventController: EventController, entityClient: EntityClient, userController: UserController) {\n\t\tthis._eventController = eventController\n\t\tthis._entityClient = entityClient\n\t\tthis.userController = userController\n\t\tthis._allEntries = SortedArray.empty(compareKnowledgeBaseEntriesForSort)\n\t\tthis._allKeywords = []\n\t\tthis._matchedKeywordsInContent = []\n\t\tthis.filteredEntries = stream(this._allEntries.array)\n\t\tthis.selectedEntry = stream<KnowledgeBaseEntry | null>(null)\n\t\tthis._filterValue = \"\"\n\n\t\tthis._entityEventReceived = (updates) => {\n\t\t\treturn this._entityUpdate(updates)\n\t\t}\n\n\t\tthis._eventController.addEntityListener(this._entityEventReceived)\n\n\t\tthis._groupInstances = []\n\t\tthis._allKeywords = []\n\t\tthis.filteredEntries(this._allEntries.array)\n\t\tthis.selectedEntry(this.containsResult() ? this.filteredEntries()[0] : null)\n\t\tthis._initialized = new LazyLoaded(() => {\n\t\t\tconst templateMemberships = this.userController.getTemplateMemberships()\n\n\t\t\tlet newGroupInstances: TemplateGroupInstance[] = []\n\t\t\treturn promiseMap(templateMemberships, (membership) => loadTemplateGroupInstance(membership, entityClient))\n\t\t\t\t.then((groupInstances) => {\n\t\t\t\t\tnewGroupInstances = groupInstances\n\t\t\t\t\treturn loadKnowledgebaseEntries(groupInstances, entityClient)\n\t\t\t\t})\n\t\t\t\t.then((knowledgebaseEntries) => {\n\t\t\t\t\tthis._allEntries.insertAll(knowledgebaseEntries)\n\n\t\t\t\t\tthis._groupInstances = newGroupInstances\n\t\t\t\t\tthis.initAllKeywords()\n\t\t\t\t\treturn this\n\t\t\t\t})\n\t\t})\n\t}\n\n\tinit(): Promise<KnowledgeBaseModel> {\n\t\treturn this._initialized.getAsync()\n\t}\n\n\tisInitialized(): boolean {\n\t\treturn this._initialized.isLoaded()\n\t}\n\n\tgetTemplateGroupInstances(): Array<TemplateGroupInstance> {\n\t\treturn this._groupInstances\n\t}\n\n\tinitAllKeywords() {\n\t\tthis._allKeywords = []\n\t\tthis._matchedKeywordsInContent = []\n\n\t\tfor (const entry of this._allEntries.array) {\n\t\t\tfor (const keyword of entry.keywords) {\n\t\t\t\tthis._allKeywords.push(keyword.keyword)\n\t\t\t}\n\t\t}\n\t}\n\n\tisSelectedEntry(entry: KnowledgeBaseEntry): boolean {\n\t\treturn this.selectedEntry() === entry\n\t}\n\n\tcontainsResult(): boolean {\n\t\treturn this.filteredEntries().length > 0\n\t}\n\n\tgetAllKeywords(): Array<string> {\n\t\treturn this._allKeywords.sort()\n\t}\n\n\tgetMatchedKeywordsInContent(): Array<string | null> {\n\t\treturn this._matchedKeywordsInContent\n\t}\n\n\tgetLanguageFromTemplate(template: EmailTemplate): LanguageCode {\n\t\tconst clientLanguage = lang.code\n\t\tconst hasClientLanguage = template.contents.some((content) => content.languageCode === clientLanguage)\n\n\t\tif (hasClientLanguage) {\n\t\t\treturn clientLanguage\n\t\t}\n\n\t\treturn downcast(template.contents[0].languageCode)\n\t}\n\n\tsortEntriesByMatchingKeywords(emailContent: string) {\n\t\tthis._matchedKeywordsInContent = []\n\t\tconst emailContentNoTags = emailContent.replace(/(<([^>]+)>)/gi, \"\") // remove all html tags\n\n\t\tfor (const keyword of this._allKeywords) {\n\t\t\tif (emailContentNoTags.includes(keyword)) {\n\t\t\t\tthis._matchedKeywordsInContent.push(keyword)\n\t\t\t}\n\t\t}\n\n\t\tthis._allEntries = SortedArray.from(this._allEntries.array, (a, b) => this._compareEntriesByMatchedKeywords(a, b))\n\t\tthis._filterValue = \"\"\n\t\tthis.filteredEntries(this._allEntries.array)\n\t}\n\n\t_compareEntriesByMatchedKeywords(entry1: KnowledgeBaseEntry, entry2: KnowledgeBaseEntry): number {\n\t\tconst difference = this._getMatchedKeywordsNumber(entry2) - this._getMatchedKeywordsNumber(entry1)\n\n\t\treturn difference === 0 ? compareKnowledgeBaseEntriesForSort(entry1, entry2) : difference\n\t}\n\n\t_getMatchedKeywordsNumber(entry: KnowledgeBaseEntry): number {\n\t\tlet matches = 0\n\t\tfor (const k of entry.keywords) {\n\t\t\tif (this._matchedKeywordsInContent.includes(k.keyword)) {\n\t\t\t\tmatches++\n\t\t\t}\n\t\t}\n\t\treturn matches\n\t}\n\n\tfilter(input: string): void {\n\t\tthis._filterValue = input\n\t\tconst inputTrimmed = input.trim()\n\n\t\tif (inputTrimmed) {\n\t\t\tthis.filteredEntries(knowledgeBaseSearch(inputTrimmed, this._allEntries.array))\n\t\t} else {\n\t\t\tthis.filteredEntries(this._allEntries.array)\n\t\t}\n\t}\n\n\tselectNextEntry(action: string): boolean {\n\t\t// returns true if selection is changed\n\t\tconst selectedIndex = this.getSelectedEntryIndex()\n\t\tconst nextIndex = selectedIndex + (action === SELECT_NEXT_ENTRY ? 1 : -1)\n\n\t\tif (nextIndex >= 0 && nextIndex < this.filteredEntries().length) {\n\t\t\tconst nextSelectedEntry = this.filteredEntries()[nextIndex]\n\t\t\tthis.selectedEntry(nextSelectedEntry)\n\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\tgetSelectedEntryIndex(): number {\n\t\tconst selectedEntry = this.selectedEntry()\n\t\tif (selectedEntry == null) {\n\t\t\treturn -1\n\t\t}\n\t\treturn this.filteredEntries().indexOf(selectedEntry)\n\t}\n\n\t_removeFromAllKeywords(keyword: string) {\n\t\tconst index = this._allKeywords.indexOf(keyword)\n\n\t\tif (index > -1) {\n\t\t\tthis._allKeywords.splice(index, 1)\n\t\t}\n\t}\n\n\tdispose() {\n\t\tthis._eventController.removeEntityListener(this._entityEventReceived)\n\t}\n\n\tloadTemplate(templateId: IdTuple): Promise<EmailTemplate> {\n\t\treturn this._entityClient.load(EmailTemplateTypeRef, templateId)\n\t}\n\n\tisReadOnly(entry: KnowledgeBaseEntry): boolean {\n\t\tconst instance = this._groupInstances.find((instance) => isSameId(entry._ownerGroup, getEtId(instance.group)))\n\n\t\treturn !instance || !hasCapabilityOnGroup(this.userController.user, instance.group, ShareCapability.Write)\n\t}\n\n\t_entityUpdate(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\treturn promiseMap(updates, (update) => {\n\t\t\tif (isUpdateForTypeRef(KnowledgeBaseEntryTypeRef, update)) {\n\t\t\t\tif (update.operation === OperationType.CREATE) {\n\t\t\t\t\treturn this._entityClient.load(KnowledgeBaseEntryTypeRef, [update.instanceListId, update.instanceId]).then((entry) => {\n\t\t\t\t\t\tthis._allEntries.insert(entry)\n\n\t\t\t\t\t\tthis.filter(this._filterValue)\n\t\t\t\t\t})\n\t\t\t\t} else if (update.operation === OperationType.UPDATE) {\n\t\t\t\t\treturn this._entityClient.load(KnowledgeBaseEntryTypeRef, [update.instanceListId, update.instanceId]).then((updatedEntry) => {\n\t\t\t\t\t\tthis._allEntries.removeFirst((e) => isSameId(getElementId(e), update.instanceId))\n\n\t\t\t\t\t\tthis._allEntries.insert(updatedEntry)\n\n\t\t\t\t\t\tthis.filter(this._filterValue)\n\t\t\t\t\t\tconst oldSelectedEntry = this.selectedEntry()\n\n\t\t\t\t\t\tif (oldSelectedEntry && isSameId(oldSelectedEntry._id, updatedEntry._id)) {\n\t\t\t\t\t\t\tthis.selectedEntry(updatedEntry)\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t} else if (update.operation === OperationType.DELETE) {\n\t\t\t\t\tconst selected = this.selectedEntry()\n\n\t\t\t\t\tif (selected && isSameId(getLetId(selected), [update.instanceListId, update.instanceId])) {\n\t\t\t\t\t\tthis.selectedEntry(null)\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._allEntries.removeFirst((e) => isSameId(getElementId(e), update.instanceId))\n\n\t\t\t\t\tthis.filter(this._filterValue)\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(noOp)\n\t}\n}\n\nfunction loadKnowledgebaseEntries(templateGroups: Array<TemplateGroupInstance>, entityClient: EntityClient): Promise<Array<KnowledgeBaseEntry>> {\n\treturn promiseMap(templateGroups, (group) => entityClient.loadAll(KnowledgeBaseEntryTypeRef, group.groupRoot.knowledgeBase)).then((groupedTemplates) =>\n\t\tgroupedTemplates.flat(),\n\t)\n}\n"]}