{"version":3,"file":"emlUtils.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/export/emlUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { MailBundle, MailBundleRecipient, MailExportMode } from \"../../../common/mailFunctionality/SharedMailUtils.js\"\nimport { createDataFile, DataFile, getCleanedMimeType } from \"../../../common/api/common/DataFile.js\"\nimport { assertNotNull, formatSortableDateTime, pad, stringToBase64, stringToUtf8Uint8Array, uint8ArrayToBase64 } from \"@tutao/tutanota-utils\"\nimport { sanitizeFilename } from \"../../../common/api/common/utils/FileUtils.js\"\n\nexport function mailToEmlFile(mail: MailBundle, fileName: string): DataFile {\n\tconst data = stringToUtf8Uint8Array(mailToEml(mail))\n\treturn createDataFile(fileName, \"message/rfc822\", data)\n}\n\nexport function _formatSmtpDateTime(date: Date): string {\n\tconst dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n\tconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\treturn (\n\t\tdayNames[date.getUTCDay()] +\n\t\t\", \" +\n\t\tdate.getUTCDate() +\n\t\t\" \" +\n\t\tmonthNames[date.getUTCMonth()] +\n\t\t\" \" +\n\t\tdate.getUTCFullYear() +\n\t\t\" \" +\n\t\tpad(date.getUTCHours(), 2) +\n\t\t\":\" +\n\t\tpad(date.getUTCMinutes(), 2) +\n\t\t\":\" +\n\t\tpad(date.getUTCSeconds(), 2) +\n\t\t\" +0000\"\n\t)\n}\n\n/**\n * Converts a mail into the plain text EML format.\n */\nexport function mailToEml(mail: MailBundle): string {\n\tconst lines: string[] = []\n\n\tif (mail.headers) {\n\t\tconst filteredHeaders = mail.headers\n\t\t\t// we want to make sure all line endings are exactly \\r\\n after we're done.\n\t\t\t.split(/\\r\\n|\\n/)\n\t\t\t.filter((line) => !line.match(/^\\s*(Content-Type:|boundary=)/))\n\t\tlines.push(...filteredHeaders)\n\t} else {\n\t\tlines.push(\"From: \" + mail.sender.address, \"MIME-Version: 1.0\")\n\n\t\tconst formatRecipients = (key: string, recipients: MailBundleRecipient[]) =>\n\t\t\t`${key}: ${recipients\n\t\t\t\t.map((recipient) => (recipient.name ? `${escapeSpecialCharacters(recipient.name)} ` : \"\") + `<${recipient.address}>`)\n\t\t\t\t.join(\",\")}`\n\n\t\tif (mail.to.length > 0) {\n\t\t\tlines.push(formatRecipients(\"To\", mail.to))\n\t\t}\n\n\t\tif (mail.cc.length > 0) {\n\t\t\tlines.push(formatRecipients(\"CC\", mail.cc))\n\t\t}\n\n\t\tif (mail.bcc.length > 0) {\n\t\t\tlines.push(formatRecipients(\"BCC\", mail.bcc))\n\t\t}\n\n\t\tlet subject = mail.subject.trim() === \"\" ? \"\" : `=?UTF-8?B?${uint8ArrayToBase64(stringToUtf8Uint8Array(mail.subject))}?=`\n\t\tlines.push(\n\t\t\t\"Subject: \" + subject,\n\t\t\t\"Date: \" + _formatSmtpDateTime(new Date(mail.sentOn)), // TODO (later) load conversation entries and write message id and references\n\t\t\t//\"Message-ID: \" + // <006e01cf442b$52864f10$f792ed30$@tutao.de>\n\t\t\t//References: <53074EB8.4010505@tutao.de> <DD374AF0-AC6D-4C58-8F38-7F6D8A0307F3@tutao.de> <530E3529.70503@tutao.de>\n\t\t)\n\t}\n\n\tlines.push(\n\t\t'Content-Type: multipart/related; boundary=\"------------79Bu5A16qPEYcVIZL@tutanota\"',\n\t\t\"\",\n\t\t\"--------------79Bu5A16qPEYcVIZL@tutanota\",\n\t\t\"Content-Type: text/html; charset=UTF-8\",\n\t\t\"Content-transfer-encoding: base64\",\n\t\t\"\",\n\t)\n\n\tfor (let bodyLine of breakIntoLines(stringToBase64(mail.body))) {\n\t\tlines.push(bodyLine)\n\t}\n\n\tlines.push(\"\")\n\n\tfor (let attachment of mail.attachments) {\n\t\tconst base64Filename = `=?UTF-8?B?${uint8ArrayToBase64(stringToUtf8Uint8Array(attachment.name))}?=`\n\t\tconst fileContentLines = breakIntoLines(uint8ArrayToBase64(attachment.data))\n\t\tlines.push(\n\t\t\t\"--------------79Bu5A16qPEYcVIZL@tutanota\",\n\t\t\t\"Content-Type: \" + getCleanedMimeType(attachment.mimeType) + \";\",\n\t\t\t\" name=\" + base64Filename + \"\",\n\t\t\t\"Content-Transfer-Encoding: base64\",\n\t\t\t\"Content-Disposition: attachment;\",\n\t\t\t\" filename=\" + base64Filename + \"\",\n\t\t)\n\n\t\tif (attachment.cid) {\n\t\t\tlines.push(\"Content-Id: <\" + attachment.cid + \">\")\n\t\t}\n\n\t\tlines.push(\"\")\n\n\t\t// don't use destructuring, big files can hit callstack limit\n\t\tfor (let fileLine of fileContentLines) {\n\t\t\tlines.push(fileLine)\n\t\t}\n\n\t\tlines.push(\"\")\n\t}\n\n\tlines.push(\"--------------79Bu5A16qPEYcVIZL@tutanota--\")\n\treturn lines.join(\"\\r\\n\")\n}\n\nfunction escapeSpecialCharacters(name: string): string {\n\t// There may be other special characters that need escaping\n\treturn name.replace(/[,<>]/gi, \"\\\\$&\")\n}\n\n/**\n * Break up a long string into lines of up to 78 characters\n * @param string\n * @returns the lines, each as an individual array\n */\nfunction breakIntoLines(string: string): Array<string> {\n\treturn string.length > 0 ? assertNotNull(string.match(/.{1,78}/g)) : []\n}\n\nexport function generateExportFileName(id: string, subject: string, sentOn: Date, mode: MailExportMode): string {\n\tlet filename = [...formatSortableDateTime(sentOn).split(\" \"), id, subject].join(\"-\")\n\tfilename = filename.trim()\n\n\tif (filename.length === 0) {\n\t\tfilename = \"unnamed\"\n\t} else if (filename.length > 96) {\n\t\t// windows MAX_PATH is 260, this should be fairly safe.\n\t\tfilename = filename.substring(0, 95) + \"_\"\n\t}\n\n\treturn sanitizeFilename(`${filename}.${mode}`)\n}\n"]}