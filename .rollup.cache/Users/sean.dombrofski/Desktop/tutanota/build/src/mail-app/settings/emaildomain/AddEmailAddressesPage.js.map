{"version":3,"file":"AddEmailAddressesPage.js","sourceRoot":"","sources":["../../../../../src/mail-app/settings/emaildomain/AddEmailAddressesPage.ts"],"names":[],"mappings":"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","sourcesContent":["import { SelectMailAddressForm, SelectMailAddressFormAttrs } from \"../../../common/settings/SelectMailAddressForm.js\"\nimport m, { Children, Component, Vnode, VnodeDOM } from \"mithril\"\nimport { getAliasLineAttrs } from \"../../../common/settings/mailaddress/MailAddressTable.js\"\nimport type { AddDomainData } from \"./AddDomainWizard\"\nimport { CustomerTypeRef, GroupInfoTypeRef } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { neverNull } from \"@tutao/tutanota-utils\"\nimport { Dialog } from \"../../../common/gui/base/Dialog\"\nimport { locator } from \"../../../common/api/main/CommonLocator\"\nimport type { TranslationKey } from \"../../../common/misc/LanguageViewModel\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport type { TableAttrs } from \"../../../common/gui/base/Table.js\"\nimport { ColumnWidth, Table } from \"../../../common/gui/base/Table.js\"\nimport type { WizardPageAttrs } from \"../../../common/gui/base/WizardDialog.js\"\nimport { emitWizardEvent, WizardEventType } from \"../../../common/gui/base/WizardDialog.js\"\nimport { showProgressDialog } from \"../../../common/gui/dialogs/ProgressDialog\"\nimport { InvalidDataError, LimitReachedError } from \"../../../common/api/common/error/RestError\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { Icons } from \"../../../common/gui/base/icons/Icons\"\nimport { ButtonSize } from \"../../../common/gui/base/ButtonSize.js\"\nimport { UpgradeRequiredError } from \"../../../common/api/main/UpgradeRequiredError.js\"\nimport { showPlanUpgradeRequiredDialog } from \"../../../common/misc/SubscriptionDialogs.js\"\nimport { LoginButton } from \"../../../common/gui/base/buttons/LoginButton.js\"\n\nassertMainOrNode()\n\n/**\n * Part of the custom domain wizard where user can add mail addresses for the new domain.\n */\nexport class AddEmailAddressesPage implements Component<AddEmailAddressesPageAttrs> {\n\toncreate({ attrs }: VnodeDOM<AddEmailAddressesPageAttrs>) {\n\t\tattrs.data.editAliasFormAttrs.model.init()\n\t}\n\n\tonremove({ attrs }: Vnode<AddEmailAddressesPageAttrs>) {\n\t\t// MailAddressTableModel.dispose is handled by the AddDomainWizard close action in order to allow going back and forth navigation within the wizard dialog.\n\t}\n\n\tview(vnode: Vnode<AddEmailAddressesPageAttrs>): Children {\n\t\tconst a = vnode.attrs\n\t\tconst aliasesTableAttrs: TableAttrs = {\n\t\t\tcolumnWidths: [ColumnWidth.Largest],\n\t\t\tshowActionButtonColumn: true,\n\t\t\taddButtonAttrs: null,\n\t\t\tlines: getAliasLineAttrs(a.data.editAliasFormAttrs).map((row) => {\n\t\t\t\treturn {\n\t\t\t\t\tactionButtonAttrs: row.actionButtonAttrs ?? null,\n\t\t\t\t\tcells: row.cells,\n\t\t\t\t}\n\t\t\t}),\n\t\t}\n\t\tlet domainInfo = { domain: a.data.domain(), isPaid: false }\n\t\tconst mailFormAttrs: SelectMailAddressFormAttrs = {\n\t\t\tselectedDomain: domainInfo,\n\t\t\t// it is a custom domain so it's not a special one\n\t\t\tavailableDomains: [domainInfo],\n\t\t\tonValidationResult: (email, validationResult) => {\n\t\t\t\tif (validationResult.isValid) {\n\t\t\t\t\ta.mailAddress = email\n\t\t\t\t\ta.errorMessageId = null\n\t\t\t\t} else {\n\t\t\t\t\ta.errorMessageId = validationResult.errorId\n\t\t\t\t}\n\t\t\t},\n\t\t\tonDomainChanged: (domain) => (domainInfo = domain),\n\t\t\tonBusyStateChanged: (isBusy) => (a.isMailVerificationBusy = isBusy),\n\t\t\tinjectionsRightButtonAttrs: {\n\t\t\t\ttitle: \"addEmailAlias_label\",\n\t\t\t\ticon: Icons.Add,\n\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\tclick: () =>\n\t\t\t\t\tvnode.attrs.addAliasFromInput().then(() => {\n\t\t\t\t\t\tm.redraw()\n\t\t\t\t\t}),\n\t\t\t},\n\t\t}\n\t\treturn m(\"\", [\n\t\t\tm(\"h4.mt-l.text-center\", lang.get(\"addCustomDomainAddresses_title\")),\n\t\t\tm(\".mt.mb\", lang.get(\"addCustomDomainAddAdresses_msg\")),\n\t\t\tm(SelectMailAddressForm, mailFormAttrs),\n\t\t\tlocator.logins.getUserController().userGroupInfo.mailAddressAliases.length ? m(Table, aliasesTableAttrs) : null,\n\t\t\tm(\n\t\t\t\t\".flex-center.full-width.pt-l.mb-l\",\n\t\t\t\tm(LoginButton, {\n\t\t\t\t\tlabel: \"next_action\",\n\t\t\t\t\tclass: \"small-login-button\",\n\t\t\t\t\tonclick: () => emitWizardEvent((vnode as VnodeDOM<AddEmailAddressesPageAttrs>).dom as HTMLElement, WizardEventType.SHOW_NEXT_PAGE),\n\t\t\t\t}),\n\t\t\t),\n\t\t])\n\t}\n}\n\nexport class AddEmailAddressesPageAttrs implements WizardPageAttrs<AddDomainData> {\n\tdata: AddDomainData\n\tmailAddress: string\n\terrorMessageId: TranslationKey | null\n\tisMailVerificationBusy: boolean\n\n\tconstructor(domainData: AddDomainData) {\n\t\tthis.data = domainData\n\t\tthis.mailAddress = \"\"\n\t\tthis.errorMessageId = \"mailAddressNeutral_msg\" // we need to set this message id to prevent that an empty input is initially regarded as valid\n\t\tthis.isMailVerificationBusy = false\n\t}\n\n\theaderTitle(): TranslationKey {\n\t\treturn \"domainSetup_title\"\n\t}\n\n\tnextAction(showErrorDialog: boolean): Promise<boolean> {\n\t\tif (this.isMailVerificationBusy) return Promise.resolve(false)\n\n\t\t//We try to add an alias from the input field, if it is not empty and error dialogs are allowed\n\t\tif (showErrorDialog && this.errorMessageId) {\n\t\t\t//We already showed one error dialog if failing to add an alias from the input field.\n\t\t\t//The user has to clean the input field up before proceeding to the next page (even if there is already an alias)\n\t\t\t//We are done if we succeeded to add the alias\n\t\t\treturn this.addAliasFromInput()\n\t\t}\n\n\t\t//Otherwise we check that there is either an alias or a user (or an alias for some other user) defined for the custom domain regardless of activation status\n\t\tconst checkMailAddresses = Promise.resolve().then(() => {\n\t\t\tconst hasAliases = locator.logins\n\t\t\t\t.getUserController()\n\t\t\t\t.userGroupInfo.mailAddressAliases.some((alias) => alias.mailAddress.endsWith(`@${this.data.domain()}`))\n\n\t\t\tif (hasAliases) {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn locator.entityClient\n\t\t\t\t\t.load(CustomerTypeRef, neverNull(locator.logins.getUserController().user.customer))\n\t\t\t\t\t.then((customer) => locator.entityClient.loadAll(GroupInfoTypeRef, customer.userGroups))\n\t\t\t\t\t.then((allUserGroupInfos) => {\n\t\t\t\t\t\treturn allUserGroupInfos.some(\n\t\t\t\t\t\t\t(u) =>\n\t\t\t\t\t\t\t\tneverNull(u.mailAddress).endsWith(\"@\" + this.data.domain()) ||\n\t\t\t\t\t\t\t\tu.mailAddressAliases.some((a) => neverNull(a.mailAddress).endsWith(\"@\" + this.data.domain())),\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\treturn showProgressDialog(\"pleaseWait_msg\", checkMailAddresses).then((nextAllowed) => {\n\t\t\tif (showErrorDialog && !nextAllowed) Dialog.message(\"enforceAliasSetup_msg\")\n\t\t\treturn nextAllowed\n\t\t})\n\t}\n\n\tisSkipAvailable(): boolean {\n\t\treturn true\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn true\n\t}\n\n\t/**\n\t * Try to add an alias from input field and return true if it succeeded\n\t */\n\tasync addAliasFromInput(): Promise<boolean> {\n\t\tconst error = this.errorMessageId\n\n\t\tif (error) {\n\t\t\tawait Dialog.message(error)\n\t\t\treturn false\n\t\t} else {\n\t\t\tconst mailAddressTableModel = this.data.editAliasFormAttrs.model\n\t\t\ttry {\n\t\t\t\tawait showProgressDialog(\n\t\t\t\t\t\"pleaseWait_msg\",\n\t\t\t\t\t// Using default sender name for now\n\t\t\t\t\tmailAddressTableModel.addAlias(this.mailAddress, mailAddressTableModel.defaultSenderName()),\n\t\t\t\t)\n\t\t\t\treturn true\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof InvalidDataError) {\n\t\t\t\t\tawait Dialog.message(\"mailAddressNA_msg\")\n\t\t\t\t} else if (e instanceof LimitReachedError) {\n\t\t\t\t\t// ignore\n\t\t\t\t} else if (e instanceof UpgradeRequiredError) {\n\t\t\t\t\tawait showPlanUpgradeRequiredDialog(e.plans, e.message)\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n}\n"]}