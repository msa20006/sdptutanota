{"version":3,"file":"EditOutOfOfficeNotificationDialogModel.js","sourceRoot":"","sources":["../../../../src/mail-app/settings/EditOutOfOfficeNotificationDialogModel.ts"],"names":[],"mappings":"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","sourcesContent":["import type { OutOfOfficeNotification, OutOfOfficeNotificationMessage } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { createOutOfOfficeNotification, createOutOfOfficeNotificationMessage } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { getDayShifted, getStartOfDay, getStartOfNextDay, ofClass } from \"@tutao/tutanota-utils\"\nimport { OutOfOfficeNotificationMessageType } from \"../../common/api/common/TutanotaConstants\"\nimport { InvalidDataError, PreconditionFailedError } from \"../../common/api/common/error/RestError\"\nimport type { EntityClient } from \"../../common/api/common/EntityClient\"\nimport { lang, LanguageViewModel } from \"../../common/misc/LanguageViewModel\"\nimport type { UserController } from \"../../common/api/main/UserController\"\nimport { appendEmailSignature } from \"../mail/signature/Signature\"\nimport { UserError } from \"../../common/api/main/UserError\"\nimport { UpgradeRequiredError } from \"../../common/api/main/UpgradeRequiredError.js\"\nimport { IServiceExecutor } from \"../../common/api/common/ServiceRequest.js\"\n\nimport { getAvailablePlansWithAutoResponder } from \"../../common/subscription/SubscriptionUtils.js\"\n\nexport const enum RecipientMessageType {\n\tEXTERNAL_TO_EVERYONE = 0,\n\tINTERNAL_AND_EXTERNAL = 1,\n\tINTERNAL_ONLY = 2,\n}\n\nconst FAILURE_UPGRADE_REQUIRED = \"outofoffice.not_available_on_current_plan\"\n\nexport class EditOutOfOfficeNotificationDialogModel {\n\toutOfOfficeNotification: OutOfOfficeNotification\n\tenabled: Stream<boolean> = stream<boolean>(false)\n\tstartDate: Stream<Date> = stream(new Date())\n\tendDate: Stream<Date> = stream(new Date())\n\tindefiniteTimeRange: Stream<boolean> = stream<boolean>(true)\n\ttimeRangeEnabled: Stream<boolean> = stream<boolean>(false)\n\torganizationSubject: Stream<string> = stream(\"\")\n\torganizationMessage: Stream<string> = stream(\"\")\n\tdefaultSubject: Stream<string> = stream(\"\")\n\tdefaultMessage: Stream<string> = stream(\"\")\n\trecipientMessageTypes: Stream<RecipientMessageType> = stream<RecipientMessageType>(RecipientMessageType.EXTERNAL_TO_EVERYONE)\n\t_entityClient: EntityClient\n\t_userController: UserController\n\t_languageViewModel: LanguageViewModel\n\n\tconstructor(\n\t\toutOfOfficeNotification: OutOfOfficeNotification | null,\n\t\tentityClient: EntityClient,\n\t\tuserController: UserController,\n\t\tlanguageViewModel: LanguageViewModel,\n\t\treadonly serviceExecutor: IServiceExecutor,\n\t) {\n\t\tthis._entityClient = entityClient\n\t\tthis._userController = userController\n\t\tthis._languageViewModel = languageViewModel\n\n\t\tthis._setDefaultMessages()\n\n\t\tif (!outOfOfficeNotification) {\n\t\t\tthis.startDate(getStartOfDay(new Date()))\n\t\t\tthis.outOfOfficeNotification = createOutOfOfficeNotification({\n\t\t\t\tnotifications: [],\n\t\t\t\tenabled: false,\n\t\t\t\tendDate: null,\n\t\t\t\tstartDate: null,\n\t\t\t})\n\t\t} else {\n\t\t\tthis.outOfOfficeNotification = outOfOfficeNotification\n\t\t\tthis.enabled(outOfOfficeNotification.enabled)\n\t\t\tlet defaultEnabled = false\n\t\t\tlet organizationEnabled = false\n\t\t\tfor (const notification of outOfOfficeNotification.notifications) {\n\t\t\t\tif (notification.type === OutOfOfficeNotificationMessageType.Default) {\n\t\t\t\t\tdefaultEnabled = true\n\t\t\t\t\tthis.defaultSubject(notification.subject)\n\t\t\t\t\tthis.defaultMessage(notification.message)\n\t\t\t\t} else if (notification.type === OutOfOfficeNotificationMessageType.InsideOrganization) {\n\t\t\t\t\torganizationEnabled = true\n\t\t\t\t\tthis.organizationSubject(notification.subject)\n\t\t\t\t\tthis.organizationMessage(notification.message)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (defaultEnabled && organizationEnabled) {\n\t\t\t\tthis.recipientMessageTypes(RecipientMessageType.INTERNAL_AND_EXTERNAL)\n\t\t\t} else if (organizationEnabled) {\n\t\t\t\tthis.recipientMessageTypes(RecipientMessageType.INTERNAL_ONLY)\n\t\t\t} else {\n\t\t\t\tthis.recipientMessageTypes(RecipientMessageType.EXTERNAL_TO_EVERYONE)\n\t\t\t}\n\n\t\t\tif (outOfOfficeNotification.startDate) {\n\t\t\t\tthis.startDate(outOfOfficeNotification.startDate)\n\t\t\t\tthis.timeRangeEnabled(true)\n\n\t\t\t\t// end dates are stored as the beginning of the following date. We subtract one day to show the correct date to the user.\n\t\t\t\tif (outOfOfficeNotification.endDate) {\n\t\t\t\t\tconst shiftedEndDate = getDayShifted(outOfOfficeNotification.endDate, -1)\n\t\t\t\t\tthis.endDate(shiftedEndDate)\n\t\t\t\t\tthis.indefiniteTimeRange(false)\n\t\t\t\t} else {\n\t\t\t\t\tthis.indefiniteTimeRange(true)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t_setDefaultMessages() {\n\t\tconst templateSubject = this._languageViewModel.get(\"outOfOfficeDefaultSubject_msg\")\n\n\t\tconst templateMessage = appendEmailSignature(this._languageViewModel.get(\"outOfOfficeDefault_msg\"), this._userController.props)\n\t\tthis.organizationSubject(templateSubject)\n\t\tthis.defaultSubject(templateSubject)\n\t\tthis.defaultMessage(templateMessage)\n\t\tthis.organizationMessage(templateMessage)\n\t}\n\n\t/**\n\t * Return OutOfOfficeNotification created from input data.\n\t * @throws UserError if time period is invalid\n\t * */\n\tgetNotificationFromData(): OutOfOfficeNotification {\n\t\tlet startDate: Date | null = null\n\t\tlet endDate: Date | null = null\n\n\t\t// We use the last second of the day as end time to make sure notifications are still send during this day.\n\t\t// We use the local time for date picking and convert it to UTC because the server expects utc dates\n\t\tif (this.timeRangeEnabled()) {\n\t\t\tstartDate = this.startDate()\n\n\t\t\tif (!this.indefiniteTimeRange()) {\n\t\t\t\tendDate = getStartOfNextDay(this.endDate())\n\n\t\t\t\tif (startDate.getTime() > endDate.getTime() || endDate.getTime() < Date.now()) {\n\t\t\t\t\tthrow new UserError(\"invalidTimePeriod_msg\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst notificationMessages: OutOfOfficeNotificationMessage[] = []\n\n\t\tif (this.isDefaultMessageEnabled()) {\n\t\t\tconst defaultNotification: OutOfOfficeNotificationMessage = createOutOfOfficeNotificationMessage({\n\t\t\t\tsubject: this.defaultSubject().trim(),\n\t\t\t\tmessage: this.defaultMessage().trim(),\n\t\t\t\ttype: OutOfOfficeNotificationMessageType.Default,\n\t\t\t})\n\t\t\tnotificationMessages.push(defaultNotification)\n\t\t}\n\n\t\tif (this.isOrganizationMessageEnabled()) {\n\t\t\tconst organizationNotification: OutOfOfficeNotificationMessage = createOutOfOfficeNotificationMessage({\n\t\t\t\tsubject: this.organizationSubject().trim(),\n\t\t\t\tmessage: this.organizationMessage().trim(),\n\t\t\t\ttype: OutOfOfficeNotificationMessageType.InsideOrganization,\n\t\t\t})\n\t\t\tnotificationMessages.push(organizationNotification)\n\t\t}\n\n\t\tthis.outOfOfficeNotification._ownerGroup = this._userController.getUserMailGroupMembership().group\n\t\tthis.outOfOfficeNotification.enabled = this.enabled()\n\t\tthis.outOfOfficeNotification.startDate = startDate\n\t\tthis.outOfOfficeNotification.endDate = endDate\n\t\tthis.outOfOfficeNotification.notifications = notificationMessages\n\t\treturn this.outOfOfficeNotification\n\t}\n\n\tisOrganizationMessageEnabled(): boolean {\n\t\treturn (\n\t\t\tthis.recipientMessageTypes() === RecipientMessageType.INTERNAL_ONLY || this.recipientMessageTypes() === RecipientMessageType.INTERNAL_AND_EXTERNAL\n\t\t)\n\t}\n\n\tisDefaultMessageEnabled(): boolean {\n\t\treturn (\n\t\t\tthis.recipientMessageTypes() === RecipientMessageType.EXTERNAL_TO_EVERYONE ||\n\t\t\tthis.recipientMessageTypes() === RecipientMessageType.INTERNAL_AND_EXTERNAL\n\t\t)\n\t}\n\n\t/**\n\t * @throws UserError\n\t * @throws UpgradeRequiredError\n\t */\n\tsaveOutOfOfficeNotification(): Promise<any> {\n\t\treturn Promise.resolve()\n\t\t\t.then(() => this.getNotificationFromData())\n\t\t\t.then(async (sendableNotification) => {\n\t\t\t\t// Error messages are already shown if sendableNotification is null. We do not close the dialog.\n\t\t\t\tif (this._isNewNotification()) {\n\t\t\t\t\tawait this._entityClient.setup(null, sendableNotification)\n\t\t\t\t} else {\n\t\t\t\t\tawait this._entityClient.update(sendableNotification)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(\n\t\t\t\tofClass(InvalidDataError, (e) => {\n\t\t\t\t\tthrow new UserError(\"outOfOfficeMessageInvalid_msg\")\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(PreconditionFailedError, async (e) => {\n\t\t\t\t\tif (e.data === FAILURE_UPGRADE_REQUIRED) {\n\t\t\t\t\t\tthrow new UpgradeRequiredError(\"upgradeRequired_msg\", await getAvailablePlansWithAutoResponder())\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new UserError(lang.makeTranslation(\"error_msg\", e.toString()))\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t)\n\t}\n\n\t_isNewNotification(): boolean {\n\t\treturn !this.outOfOfficeNotification._id\n\t}\n}\n"]}