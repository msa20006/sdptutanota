{"version":3,"file":"MailViewerViewModel.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/view/MailViewerViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tConversationEntryTypeRef,\n\tcreateMailAddress,\n\tEncryptedMailAddress,\n\tFile as TutanotaFile,\n\tMail,\n\tMailAddress,\n\tMailDetails,\n\tMailFolder,\n\tMailTypeRef,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport {\n\tConversationType,\n\tExternalImageRule,\n\tFeatureType,\n\tMailAuthenticationStatus,\n\tMailMethod,\n\tMailPhishingStatus,\n\tMailReportType,\n\tMailSetKind,\n\tMailState,\n\tOperationType,\n} from \"../../../common/api/common/TutanotaConstants\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient\"\nimport { MailboxDetail, MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { ContactModel } from \"../../../common/contactsFunctionality/ContactModel.js\"\nimport { ConfigurationDatabase } from \"../../../common/api/worker/facades/lazy/ConfigurationDatabase.js\"\nimport stream from \"mithril/stream\"\nimport {\n\taddAll,\n\tassertNonNull,\n\tcontains,\n\tdowncast,\n\tfilterInt,\n\tfirst,\n\tlazyAsync,\n\tnoOp,\n\tofClass,\n\tstartsWith,\n\tutf8Uint8ArrayToString,\n} from \"@tutao/tutanota-utils\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport { LoginController } from \"../../../common/api/main/LoginController\"\nimport m from \"mithril\"\nimport { LockedError, NotAuthorizedError, NotFoundError } from \"../../../common/api/common/error/RestError\"\nimport { haveSameId, isSameId } from \"../../../common/api/common/utils/EntityUtils\"\nimport { getReferencedAttachments, isMailContrastFixNeeded, isTutanotaTeamMail, loadInlineImages, moveMails } from \"./MailGuiUtils\"\nimport { SanitizedFragment } from \"../../../common/misc/HtmlSanitizer\"\nimport { CALENDAR_MIME_TYPE, FileController } from \"../../../common/file/FileController\"\nimport { exportMails } from \"../export/Exporter.js\"\nimport { IndexingNotSupportedError } from \"../../../common/api/common/error/IndexingNotSupportedError\"\nimport { FileOpenError } from \"../../../common/api/common/error/FileOpenError\"\nimport { Dialog } from \"../../../common/gui/base/Dialog\"\nimport { checkApprovalStatus } from \"../../../common/misc/LoginUtils\"\nimport { formatDateTime, urlEncodeHtmlTags } from \"../../../common/misc/Formatter\"\nimport { UserError } from \"../../../common/api/main/UserError\"\nimport { showUserError } from \"../../../common/misc/ErrorHandlerImpl\"\nimport { LoadingStateTracker } from \"../../../common/offline/LoadingState\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError\"\nimport { InitAsResponseArgs, SendMailModel } from \"../../../common/mailFunctionality/SendMailModel.js\"\nimport { EventController } from \"../../../common/api/main/EventController.js\"\nimport { WorkerFacade } from \"../../../common/api/worker/facades/WorkerFacade.js\"\nimport { SearchModel } from \"../../search/model/SearchModel.js\"\nimport { ParsedIcalFileContent } from \"../../../calendar-app/calendar/view/CalendarInvites.js\"\nimport { MailFacade } from \"../../../common/api/worker/facades/lazy/MailFacade.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { isOfflineError } from \"../../../common/api/common/utils/ErrorUtils.js\"\nimport { CryptoFacade } from \"../../../common/api/worker/crypto/CryptoFacade.js\"\nimport { AttachmentType, getAttachmentType } from \"../../../common/gui/AttachmentBubble.js\"\nimport type { ContactImporter } from \"../../contacts/ContactImporter.js\"\nimport { InlineImages, revokeInlineImages } from \"../../../common/mailFunctionality/inlineImagesUtils.js\"\nimport { getDefaultSender, getEnabledMailAddressesWithUser, getMailboxName } from \"../../../common/mailFunctionality/SharedMailUtils.js\"\nimport { getDisplayedSender, getMailBodyText, MailAddressAndName } from \"../../../common/api/common/CommonMailUtils.js\"\nimport { MailModel } from \"../model/MailModel.js\"\nimport { isNoReplyTeamAddress, isSystemNotification, loadMailDetails } from \"./MailViewerUtils.js\"\nimport { assertSystemFolderOfType, getFolderName, getPathToFolderString, loadMailHeaders } from \"../model/MailUtils.js\"\nimport { mailLocator } from \"../../mailLocator.js\"\n\nexport const enum ContentBlockingStatus {\n\tBlock = \"0\",\n\tShow = \"1\",\n\tAlwaysShow = \"2\",\n\tNoExternalContent = \"3\",\n\tAlwaysBlock = \"4\",\n}\n\nexport class MailViewerViewModel {\n\tprivate contrastFixNeeded: boolean = false\n\t// always sanitized in this.sanitizeMailBody\n\n\tprivate sanitizeResult: SanitizedFragment | null = null\n\tprivate loadingAttachments: boolean = false\n\tprivate attachments: TutanotaFile[] = []\n\n\tprivate contentBlockingStatus: ContentBlockingStatus | null = null\n\n\tprivate errorOccurred: boolean = false\n\tprivate loadedInlineImages: InlineImages | null = null\n\t/** only loaded when showFolder is set to true */\n\tprivate folderMailboxText: string | null\n\n\t/** @see getRelevantRecipient */\n\tprivate relevantRecipient: MailAddress | null = null\n\tprivate warningDismissed: boolean = false\n\n\tprivate calendarEventAttachment: {\n\t\tcontents: ParsedIcalFileContent\n\t\trecipient: string\n\t} | null = null\n\n\tprivate readonly loadingState = new LoadingStateTracker()\n\n\tprivate renderIsDelayed: boolean = true\n\n\treadonly loadCompleteNotification = stream<null>()\n\n\tprivate renderedMail: Mail | null = null\n\tprivate loading: Promise<void> | null = null\n\n\tprivate collapsed: boolean = true\n\n\tget mail(): Mail {\n\t\treturn this._mail\n\t}\n\n\tprivate mailDetails: MailDetails | null = null\n\n\tconstructor(\n\t\tprivate _mail: Mail,\n\t\tshowFolder: boolean,\n\t\treadonly entityClient: EntityClient,\n\t\tpublic readonly mailboxModel: MailboxModel,\n\t\tpublic readonly mailModel: MailModel,\n\t\treadonly contactModel: ContactModel,\n\t\tprivate readonly configFacade: ConfigurationDatabase,\n\t\tprivate readonly fileController: FileController,\n\t\treadonly logins: LoginController,\n\t\tprivate sendMailModelFactory: (mailboxDetails: MailboxDetail) => Promise<SendMailModel>,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly workerFacade: WorkerFacade,\n\t\tprivate readonly searchModel: SearchModel,\n\t\tprivate readonly mailFacade: MailFacade,\n\t\tprivate readonly cryptoFacade: CryptoFacade,\n\t\tprivate readonly contactImporter: lazyAsync<ContactImporter>,\n\t) {\n\t\tthis.folderMailboxText = null\n\t\tif (showFolder) {\n\t\t\tthis.showFolder()\n\t\t}\n\t\tthis.eventController.addEntityListener(this.entityListener)\n\t}\n\n\tprivate readonly entityListener = async (events: EntityUpdateData[]) => {\n\t\tfor (const update of events) {\n\t\t\tif (isUpdateForTypeRef(MailTypeRef, update)) {\n\t\t\t\tconst { instanceListId, instanceId, operation } = update\n\t\t\t\t// we need to process create events here because update and create events are optimized into a single create event during processing\n\t\t\t\t// when opening a mail from a notification while offline the view otherwise would not be updated when going online again,\n\t\t\t\t// and we would keep displaying an outdated view of the mail instance. timeline:\n\t\t\t\t// CREATE > Loaded and cached > Opened offline > Online > UPDATE (e.g. ownerEncSessionKey) > entity event processing starts\n\t\t\t\t// CREATE and UPDATE are merged into single CREATE event > CREATE event is processed here\n\t\t\t\t// and would be ignored even though the update is from after we loaded the mail.\n\t\t\t\t// This is critical as it also concerns encryptionAuthStatus\n\t\t\t\tif ((operation === OperationType.UPDATE || operation === OperationType.CREATE) && isSameId(this.mail._id, [instanceListId, instanceId])) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst updatedMail = await this.entityClient.load(MailTypeRef, this.mail._id)\n\t\t\t\t\t\tthis.updateMail({ mail: updatedMail })\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t\t\tconsole.log(`Could not find updated mail ${JSON.stringify([instanceListId, instanceId])}`)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async determineRelevantRecipient() {\n\t\t// The idea is that if there are multiple recipients then we should display the one which belongs to one of our mailboxes and then fall back to any\n\t\t// other one\n\t\tconst mailboxDetails = await this.mailModel.getMailboxDetailsForMail(this.mail)\n\t\tif (mailboxDetails == null) {\n\t\t\treturn\n\t\t}\n\t\tconst enabledMailAddresses = new Set(getEnabledMailAddressesWithUser(mailboxDetails, this.logins.getUserController().userGroupInfo))\n\t\tif (this.mailDetails == null) {\n\t\t\t// we could not load the mailDetails for some reason\n\t\t\treturn\n\t\t}\n\t\tthis.relevantRecipient =\n\t\t\tthis.mailDetails.recipients.toRecipients.find((r) => enabledMailAddresses.has(r.address)) ??\n\t\t\tthis.mailDetails.recipients.ccRecipients.find((r) => enabledMailAddresses.has(r.address)) ??\n\t\t\tthis.mailDetails.recipients.bccRecipients.find((r) => enabledMailAddresses.has(r.address)) ??\n\t\t\tfirst(this.mailDetails.recipients.toRecipients) ??\n\t\t\tfirst(this.mailDetails.recipients.ccRecipients) ??\n\t\t\tfirst(this.mailDetails.recipients.bccRecipients)\n\t\tm.redraw()\n\t}\n\n\tprivate showFolder() {\n\t\tthis.folderMailboxText = null\n\t\tconst folder = this.mailModel.getMailFolderForMail(this.mail)\n\n\t\tif (folder) {\n\t\t\tthis.mailModel.getMailboxDetailsForMail(this.mail).then(async (mailboxDetails) => {\n\t\t\t\tif (mailboxDetails == null || mailboxDetails.mailbox.folders == null) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tconst folders = await this.mailModel.getMailboxFoldersForId(mailboxDetails.mailbox.folders._id)\n\t\t\t\tconst name = getPathToFolderString(folders, folder)\n\t\t\t\tthis.folderMailboxText = `${getMailboxName(this.logins, mailboxDetails)} / ${name}`\n\t\t\t\tm.redraw()\n\t\t\t})\n\t\t}\n\t}\n\n\tdispose() {\n\t\t// currently, the conversation view disposes us twice if our mail is deleted because it's getting disposed itself\n\t\t// (from the list selecting a different element) and because it disposes the mailViewerViewModel that got updated\n\t\t// this silences the warning about leaking entity event listeners when the listener is removed twice.\n\t\tthis.dispose = () => console.log(\"disposed MailViewerViewModel a second time, ignoring\")\n\t\tthis.eventController.removeEntityListener(this.entityListener)\n\t\tconst inlineImages = this.getLoadedInlineImages()\n\t\trevokeInlineImages(inlineImages)\n\t}\n\n\tasync loadAll(\n\t\tdelay: Promise<unknown>,\n\t\t{\n\t\t\tnotify,\n\t\t}: {\n\t\t\tnotify: boolean\n\t\t} = { notify: true },\n\t) {\n\t\tthis.renderIsDelayed = true\n\t\ttry {\n\t\t\tawait this.loading\n\t\t\ttry {\n\t\t\t\tthis.loading = this.loadAndProcessAdditionalMailInfo(this.mail, delay)\n\t\t\t\t\t.then((inlineImageCids) => {\n\t\t\t\t\t\tthis.determineRelevantRecipient()\n\t\t\t\t\t\treturn inlineImageCids\n\t\t\t\t\t})\n\t\t\t\t\t.then((inlineImageCids) => this.loadAttachments(this.mail, inlineImageCids))\n\t\t\t\tawait this.loadingState.trackPromise(this.loading)\n\n\t\t\t\tif (notify) this.loadCompleteNotification(null)\n\t\t\t} catch (e) {\n\t\t\t\tthis.loading = null\n\n\t\t\t\tif (!isOfflineError(e)) {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tm.redraw()\n\n\t\t\t// We need the conversation entry in order to reply to the message.\n\t\t\t// We don't want the user to have to wait for it to load when they click reply,\n\t\t\t// So we load it here pre-emptively to make sure it is in the cache.\n\t\t\tthis.entityClient.load(ConversationEntryTypeRef, this.mail.conversationEntry).catch((e) => {\n\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\tconsole.log(\"could load conversation entry as it has been moved/deleted already\", e)\n\t\t\t\t} else if (isOfflineError(e)) {\n\t\t\t\t\tconsole.log(\"failed to load conversation entry, because of a lost connection\", e)\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t})\n\t\t} finally {\n\t\t\tthis.renderIsDelayed = false\n\t\t}\n\t}\n\n\tisLoading(): boolean {\n\t\treturn this.loadingState.isLoading()\n\t}\n\n\tisConnectionLost(): boolean {\n\t\treturn this.loadingState.isConnectionLost()\n\t}\n\n\tgetAttachments(): Array<TutanotaFile> {\n\t\treturn this.attachments\n\t}\n\n\tgetInlineCids(): Array<string> {\n\t\treturn this.sanitizeResult?.inlineImageCids ?? []\n\t}\n\n\tgetLoadedInlineImages(): InlineImages {\n\t\treturn this.loadedInlineImages ?? new Map()\n\t}\n\n\tisContrastFixNeeded(): boolean {\n\t\treturn this.contrastFixNeeded\n\t}\n\n\tisDraftMail() {\n\t\treturn this.mail.state === MailState.DRAFT\n\t}\n\n\tisReceivedMail() {\n\t\treturn this.mail.state === MailState.RECEIVED\n\t}\n\n\tisLoadingAttachments(): boolean {\n\t\treturn this.loadingAttachments\n\t}\n\n\tgetFolderMailboxText(): string | null {\n\t\treturn this.folderMailboxText\n\t}\n\n\tgetFolderInfo(): { folderType: MailSetKind; name: string } | null {\n\t\tconst folder = this.mailModel.getMailFolderForMail(this.mail)\n\t\tif (!folder) return null\n\t\treturn { folderType: folder.folderType as MailSetKind, name: getFolderName(folder) }\n\t}\n\n\tgetSubject(): string {\n\t\treturn this.mail.subject\n\t}\n\n\tisConfidential(): boolean {\n\t\treturn this.mail.confidential\n\t}\n\n\tisMailSuspicious(): boolean {\n\t\treturn this.mail.phishingStatus === MailPhishingStatus.SUSPICIOUS\n\t}\n\n\tgetMailId(): IdTuple {\n\t\treturn this.mail._id\n\t}\n\n\tgetSanitizedMailBody(): DocumentFragment | null {\n\t\treturn this.sanitizeResult?.fragment ?? null\n\t}\n\n\tgetMailBody(): string {\n\t\tif (this.mailDetails) {\n\t\t\treturn getMailBodyText(this.mailDetails.body)\n\t\t} else {\n\t\t\treturn \"\"\n\t\t}\n\t}\n\n\tgetDate(): Date {\n\t\treturn this.mail.receivedDate\n\t}\n\n\tgetToRecipients(): Array<MailAddress> {\n\t\tif (this.mailDetails === null) {\n\t\t\treturn []\n\t\t}\n\t\treturn this.mailDetails.recipients.toRecipients\n\t}\n\n\tgetCcRecipients(): Array<MailAddress> {\n\t\tif (this.mailDetails === null) {\n\t\t\treturn []\n\t\t}\n\t\treturn this.mailDetails.recipients.ccRecipients\n\t}\n\n\tgetBccRecipients(): Array<MailAddress> {\n\t\tif (this.mailDetails === null) {\n\t\t\treturn []\n\t\t}\n\t\treturn this.mailDetails.recipients.bccRecipients\n\t}\n\n\t/** Get the recipient which is relevant the most for the current mailboxes. */\n\tgetRelevantRecipient(): MailAddress | null {\n\t\treturn this.relevantRecipient\n\t}\n\n\tgetNumberOfRecipients(): number {\n\t\treturn filterInt(this.mail.recipientCount)\n\t}\n\n\tgetReplyTos(): Array<EncryptedMailAddress> {\n\t\tif (this.mailDetails === null) {\n\t\t\treturn []\n\t\t}\n\t\treturn this.mailDetails.replyTos\n\t}\n\n\tgetSender(): MailAddress {\n\t\treturn this.mail.sender\n\t}\n\n\t/**\n\t * Can be {@code null} if sender should not be displayed e.g. for system notifications.\n\t */\n\tgetDisplayedSender(): MailAddressAndName | null {\n\t\tif (isSystemNotification(this.mail)) {\n\t\t\treturn null\n\t\t} else {\n\t\t\treturn getDisplayedSender(this.mail)\n\t\t}\n\t}\n\n\tgetPhishingStatus(): MailPhishingStatus {\n\t\treturn this.mail.phishingStatus as MailPhishingStatus\n\t}\n\n\tsetPhishingStatus(status: MailPhishingStatus) {\n\t\tthis.mail.phishingStatus = status\n\t}\n\n\tcheckMailAuthenticationStatus(status: MailAuthenticationStatus): boolean {\n\t\tif (this.mail.authStatus != null) {\n\t\t\treturn this.mail.authStatus === status\n\t\t} else if (this.mailDetails) {\n\t\t\treturn this.mailDetails.authStatus === status\n\t\t} else {\n\t\t\t// mailDetails not loaded yet\n\t\t\treturn false\n\t\t}\n\t}\n\n\tcanCreateSpamRule(): boolean {\n\t\treturn this.logins.isGlobalAdminUserLoggedIn() && !this.logins.isEnabled(FeatureType.InternalCommunication)\n\t}\n\n\tdidErrorsOccur(): boolean {\n\t\tlet bodyErrors = false\n\t\tif (this.mailDetails) {\n\t\t\tbodyErrors = typeof downcast(this.mailDetails.body)._errors !== \"undefined\"\n\t\t}\n\t\treturn this.errorOccurred || typeof this.mail._errors !== \"undefined\" || bodyErrors\n\t}\n\n\tisTutanotaTeamMail(): boolean {\n\t\treturn isTutanotaTeamMail(this.mail)\n\t}\n\n\tisShowingExternalContent(): boolean {\n\t\treturn this.contentBlockingStatus === ContentBlockingStatus.Show || this.contentBlockingStatus === ContentBlockingStatus.AlwaysShow\n\t}\n\n\tisBlockingExternalImages(): boolean {\n\t\treturn this.contentBlockingStatus === ContentBlockingStatus.Block || this.contentBlockingStatus === ContentBlockingStatus.AlwaysBlock\n\t}\n\n\tgetDifferentEnvelopeSender(): string | null {\n\t\treturn this.mail.differentEnvelopeSender\n\t}\n\n\tgetCalendarEventAttachment(): MailViewerViewModel[\"calendarEventAttachment\"] {\n\t\treturn this.calendarEventAttachment\n\t}\n\n\tgetContentBlockingStatus(): ContentBlockingStatus | null {\n\t\treturn this.contentBlockingStatus\n\t}\n\n\tisWarningDismissed() {\n\t\treturn this.warningDismissed\n\t}\n\n\tsetWarningDismissed(dismissed: boolean) {\n\t\tthis.warningDismissed = dismissed\n\t}\n\n\tasync setContentBlockingStatus(status: ContentBlockingStatus): Promise<void> {\n\t\t// We can only be set to NoExternalContent when initially loading the mailbody (_loadMailBody)\n\t\t// so we ignore it here, and don't do anything if we were already set to NoExternalContent\n\t\tif (\n\t\t\tstatus === ContentBlockingStatus.NoExternalContent ||\n\t\t\tthis.contentBlockingStatus === ContentBlockingStatus.NoExternalContent ||\n\t\t\tthis.contentBlockingStatus === status\n\t\t) {\n\t\t\treturn\n\t\t}\n\n\t\tif (status === ContentBlockingStatus.AlwaysShow) {\n\t\t\tthis.configFacade.addExternalImageRule(this.getSender().address, ExternalImageRule.Allow).catch(ofClass(IndexingNotSupportedError, noOp))\n\t\t} else if (status === ContentBlockingStatus.AlwaysBlock) {\n\t\t\tthis.configFacade.addExternalImageRule(this.getSender().address, ExternalImageRule.Block).catch(ofClass(IndexingNotSupportedError, noOp))\n\t\t} else {\n\t\t\t// we are going from allow or block to something else it means we're resetting to the default rule for the given sender\n\t\t\tthis.configFacade.addExternalImageRule(this.getSender().address, ExternalImageRule.None).catch(ofClass(IndexingNotSupportedError, noOp))\n\t\t}\n\n\t\t// We don't check mail authentication status here because the user has manually called this\n\t\tthis.sanitizeResult = await this.sanitizeMailBody(this.mail, status === ContentBlockingStatus.Block || status === ContentBlockingStatus.AlwaysBlock)\n\t\t//follow-up actions resulting from a changed blocking status must start after sanitization finished\n\t\tthis.contentBlockingStatus = status\n\t}\n\n\tasync markAsNotPhishing(): Promise<void> {\n\t\tconst oldStatus = this.getPhishingStatus()\n\n\t\tif (oldStatus === MailPhishingStatus.WHITELISTED) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.setPhishingStatus(MailPhishingStatus.WHITELISTED)\n\n\t\tawait this.entityClient.update(this.mail).catch(() => this.setPhishingStatus(oldStatus))\n\t}\n\n\tasync reportMail(reportType: MailReportType): Promise<void> {\n\t\ttry {\n\t\t\tawait this.mailModel.reportMails(reportType, [this.mail])\n\t\t\tif (reportType === MailReportType.PHISHING) {\n\t\t\t\tthis.setPhishingStatus(MailPhishingStatus.SUSPICIOUS)\n\t\t\t\tawait this.entityClient.update(this.mail)\n\t\t\t}\n\t\t\tconst mailboxDetail = await this.mailModel.getMailboxDetailsForMail(this.mail)\n\t\t\tif (mailboxDetail == null || mailboxDetail.mailbox.folders == null) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tconst folders = await this.mailModel.getMailboxFoldersForId(mailboxDetail.mailbox.folders._id)\n\t\t\tconst spamFolder = assertSystemFolderOfType(folders, MailSetKind.SPAM)\n\t\t\t// do not report moved mails again\n\t\t\tawait moveMails({\n\t\t\t\tmailboxModel: this.mailboxModel,\n\t\t\t\tmailModel: this.mailModel,\n\t\t\t\tmails: [this.mail],\n\t\t\t\ttargetMailFolder: spamFolder,\n\t\t\t\tisReportable: false,\n\t\t\t})\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\tconsole.log(\"mail already moved\")\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\tcanExport(): boolean {\n\t\treturn !this.isAnnouncement() && !this.logins.isEnabled(FeatureType.DisableMailExport)\n\t}\n\n\tcanPrint(): boolean {\n\t\treturn !this.logins.isEnabled(FeatureType.DisableMailExport)\n\t}\n\n\tcanReport(): boolean {\n\t\treturn this.getPhishingStatus() === MailPhishingStatus.UNKNOWN && !this.isTutanotaTeamMail() && this.logins.isInternalUserLoggedIn()\n\t}\n\n\tcanShowHeaders(): boolean {\n\t\treturn this.logins.isInternalUserLoggedIn()\n\t}\n\n\tcanPersistBlockingStatus(): boolean {\n\t\treturn this.searchModel.indexingSupported\n\t}\n\n\tasync exportMail(): Promise<void> {\n\t\tawait exportMails([this.mail], this.mailFacade, this.entityClient, this.fileController, this.cryptoFacade)\n\t}\n\n\tasync getHeaders(): Promise<string | null> {\n\t\t// make sure that the mailDetails are loaded\n\t\tconst mailDetails = await loadMailDetails(this.mailFacade, this.mail)\n\t\treturn loadMailHeaders(mailDetails)\n\t}\n\n\tisUnread(): boolean {\n\t\treturn this.mail.unread\n\t}\n\n\tasync setUnread(unread: boolean) {\n\t\tif (this.mail.unread !== unread) {\n\t\t\tthis.mail.unread = unread\n\n\t\t\tawait this.entityClient\n\t\t\t\t.update(this.mail)\n\t\t\t\t.catch(ofClass(LockedError, () => console.log(\"could not update mail read state: \", lang.get(\"operationStillActive_msg\"))))\n\t\t\t\t.catch(ofClass(NotFoundError, noOp))\n\t\t}\n\t}\n\n\tisListUnsubscribe(): boolean {\n\t\treturn this.mail.listUnsubscribe\n\t}\n\n\tisAnnouncement(): boolean {\n\t\tconst replyTos = this.mailDetails?.replyTos\n\t\treturn (\n\t\t\tisSystemNotification(this.mail) &&\n\t\t\t// hide the actions until mailDetails are loaded rather than showing them quickly and then hiding them\n\t\t\t(replyTos == null || replyTos?.length === 0 || (replyTos?.length === 1 && isNoReplyTeamAddress(replyTos[0].address)))\n\t\t)\n\t}\n\n\tasync unsubscribe(): Promise<boolean> {\n\t\tif (!this.isListUnsubscribe()) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst mailHeaders = await this.getHeaders()\n\t\tif (!mailHeaders) {\n\t\t\treturn false\n\t\t}\n\t\tconst unsubHeaders = mailHeaders\n\t\t\t.replaceAll(/\\r\\n/g, \"\\n\") // replace all CR LF with LF\n\t\t\t.replaceAll(/\\n[ \\t]/g, \"\") // join multiline headers to a single line\n\t\t\t.split(\"\\n\") // split headers\n\t\t\t.filter((headerLine) => headerLine.toLowerCase().startsWith(\"list-unsubscribe\"))\n\t\tif (unsubHeaders.length > 0) {\n\t\t\tconst recipient = await this.getSenderOfResponseMail()\n\t\t\tawait this.mailModel.unsubscribe(this.mail, recipient, unsubHeaders)\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tprivate getMailboxDetails(): Promise<MailboxDetail | null> {\n\t\treturn this.mailModel.getMailboxDetailsForMail(this.mail)\n\t}\n\n\t/** @return list of inline referenced cid */\n\tprivate async loadAndProcessAdditionalMailInfo(mail: Mail, delayBodyRenderingUntil: Promise<unknown>): Promise<string[]> {\n\t\t// If the mail is a non-draft and we have loaded it before, we don't need to reload it because it cannot have been edited, so we return early\n\t\t// drafts however can be edited, and we want to receive the changes, so for drafts we will always reload\n\t\tlet isDraft = mail.state === MailState.DRAFT\n\t\tif (this.renderedMail != null && haveSameId(mail, this.renderedMail) && !isDraft && this.sanitizeResult != null) {\n\t\t\treturn this.sanitizeResult.inlineImageCids\n\t\t}\n\n\t\ttry {\n\t\t\tthis.mailDetails = await loadMailDetails(this.mailFacade, this.mail)\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\tconsole.log(\"could load mail body as it has been moved/deleted already\", e)\n\t\t\t\tthis.errorOccurred = true\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\tif (e instanceof NotAuthorizedError) {\n\t\t\t\tconsole.log(\"could load mail body as the permission is missing\", e)\n\t\t\t\tthis.errorOccurred = true\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\tthrow e\n\t\t}\n\n\t\tconst externalImageRule = await this.configFacade.getExternalImageRule(mail.sender.address).catch((e) => {\n\t\t\tconsole.log(\"Error getting external image rule:\", e)\n\t\t\treturn ExternalImageRule.None\n\t\t})\n\t\tconst isAllowedAndAuthenticatedExternalSender =\n\t\t\texternalImageRule === ExternalImageRule.Allow && this.checkMailAuthenticationStatus(MailAuthenticationStatus.AUTHENTICATED)\n\t\t// We should not try to sanitize body while we still animate because it's a heavy operation.\n\t\tawait delayBodyRenderingUntil\n\t\tthis.renderIsDelayed = false\n\n\t\tthis.sanitizeResult = await this.sanitizeMailBody(mail, !isAllowedAndAuthenticatedExternalSender)\n\n\t\tif (!isDraft) {\n\t\t\tthis.checkMailForPhishing(mail, this.sanitizeResult.links)\n\t\t}\n\n\t\tthis.contentBlockingStatus =\n\t\t\texternalImageRule === ExternalImageRule.Block\n\t\t\t\t? ContentBlockingStatus.AlwaysBlock\n\t\t\t\t: isAllowedAndAuthenticatedExternalSender\n\t\t\t\t? ContentBlockingStatus.AlwaysShow\n\t\t\t\t: this.sanitizeResult.blockedExternalContent > 0\n\t\t\t\t? ContentBlockingStatus.Block\n\t\t\t\t: ContentBlockingStatus.NoExternalContent\n\t\tm.redraw()\n\t\tthis.renderedMail = this.mail\n\t\treturn this.sanitizeResult.inlineImageCids\n\t}\n\n\tprivate async loadAttachments(mail: Mail, inlineCids: string[]): Promise<void> {\n\t\tif (mail.attachments.length === 0) {\n\t\t\tthis.loadingAttachments = false\n\t\t\tm.redraw()\n\t\t} else {\n\t\t\tthis.loadingAttachments = true\n\n\t\t\ttry {\n\t\t\t\tconst files = await this.cryptoFacade.enforceSessionKeyUpdateIfNeeded(this._mail, await this.mailFacade.loadAttachments(mail))\n\n\t\t\t\tthis.handleCalendarFile(files, mail)\n\n\t\t\t\tthis.attachments = files\n\t\t\t\tthis.loadingAttachments = false\n\t\t\t\tm.redraw()\n\n\t\t\t\t// We can load any other part again because they are cached but inline images are fileData e.g. binary blobs so we don't cache them like\n\t\t\t\t// entities. So instead we check here whether we need to load them.\n\t\t\t\tif (this.loadedInlineImages == null) {\n\t\t\t\t\tthis.loadedInlineImages = await loadInlineImages(this.fileController, files, inlineCids)\n\t\t\t\t}\n\t\t\t\tm.redraw()\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\tconsole.log(\"could load attachments as they have been moved/deleted already\", e)\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate checkMailForPhishing(mail: Mail, links: Array<HTMLElement>) {\n\t\tif (mail.phishingStatus === MailPhishingStatus.UNKNOWN) {\n\t\t\tconst linkObjects = links.map((link) => {\n\t\t\t\treturn {\n\t\t\t\t\thref: link.getAttribute(\"href\") || \"\",\n\t\t\t\t\tinnerHTML: link.innerHTML,\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tthis.mailModel.checkMailForPhishing(mail, linkObjects).then((isSuspicious) => {\n\t\t\t\tif (isSuspicious) {\n\t\t\t\t\tmail.phishingStatus = MailPhishingStatus.SUSPICIOUS\n\n\t\t\t\t\tthis.entityClient\n\t\t\t\t\t\t.update(mail)\n\t\t\t\t\t\t.catch(ofClass(LockedError, (e) => console.log(\"could not update mail phishing status as mail is locked\")))\n\t\t\t\t\t\t.catch(ofClass(NotFoundError, (e) => console.log(\"mail already moved\")))\n\n\t\t\t\t\tm.redraw()\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Check if the list of files contain an iCal file which we can then load and display details for. A calendar notification\n\t * should contain only one iCal attachment, so we only process the first matching one.\n\t *\n\t * (this is not true for ie google calendar, they send the invite twice in each mail, but it's always the same file twice)\n\t */\n\tprivate handleCalendarFile(files: Array<TutanotaFile>, mail: Mail): void {\n\t\tconst calendarFile = files.find((a) => a.mimeType && a.mimeType.startsWith(CALENDAR_MIME_TYPE))\n\n\t\tif (calendarFile && (mail.method === MailMethod.ICAL_REQUEST || mail.method === MailMethod.ICAL_REPLY) && mail.state === MailState.RECEIVED) {\n\t\t\tPromise.all([\n\t\t\t\timport(\"../../../calendar-app/calendar/view/CalendarInvites.js\").then(({ getEventsFromFile }) =>\n\t\t\t\t\tgetEventsFromFile(calendarFile, mail.confidential),\n\t\t\t\t),\n\t\t\t\tthis.getSenderOfResponseMail(),\n\t\t\t]).then(([contents, recipient]) => {\n\t\t\t\tthis.calendarEventAttachment =\n\t\t\t\t\tcontents != null\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tcontents,\n\t\t\t\t\t\t\t\trecipient,\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: null\n\t\t\t\tm.redraw()\n\t\t\t})\n\t\t}\n\t}\n\n\tprivate getSenderOfResponseMail(): Promise<string> {\n\t\treturn this.mailModel.getMailboxDetailsForMail(this.mail).then(async (mailboxDetails) => {\n\t\t\tassertNonNull(mailboxDetails, \"Mail list does not exist anymore\")\n\t\t\tconst myMailAddresses = getEnabledMailAddressesWithUser(mailboxDetails, this.logins.getUserController().userGroupInfo)\n\t\t\tconst addressesInMail: MailAddress[] = []\n\t\t\tconst mailDetails = await loadMailDetails(this.mailFacade, this.mail)\n\t\t\taddressesInMail.push(...mailDetails.recipients.toRecipients)\n\t\t\taddressesInMail.push(...mailDetails.recipients.ccRecipients)\n\t\t\taddressesInMail.push(...mailDetails.recipients.bccRecipients)\n\n\t\t\tconst mailAddressAndName = this.getDisplayedSender()\n\t\t\tif (mailAddressAndName) {\n\t\t\t\taddressesInMail.push(\n\t\t\t\t\tcreateMailAddress({\n\t\t\t\t\t\tname: mailAddressAndName.name,\n\t\t\t\t\t\taddress: mailAddressAndName.address,\n\t\t\t\t\t\tcontact: null,\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\t\t\tconst foundAddress = addressesInMail.find((address) => contains(myMailAddresses, address.address.toLowerCase()))\n\t\t\tif (foundAddress) {\n\t\t\t\treturn foundAddress.address.toLowerCase()\n\t\t\t} else {\n\t\t\t\treturn getDefaultSender(this.logins, mailboxDetails)\n\t\t\t}\n\t\t})\n\t}\n\n\t/** @throws UserError */\n\tasync forward(): Promise<void> {\n\t\tconst sendAllowed = await checkApprovalStatus(this.logins, false)\n\t\tif (sendAllowed) {\n\t\t\tconst args = await this.createResponseMailArgsForForwarding([], [], true)\n\t\t\tconst [mailboxDetails, { newMailEditorAsResponse }] = await Promise.all([this.getMailboxDetails(), import(\"../editor/MailEditor\")])\n\t\t\tif (mailboxDetails == null) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst isReloadNeeded = !this.sanitizeResult || this.mail.attachments.length !== this.attachments.length\n\t\t\tif (isReloadNeeded) {\n\t\t\t\t// Call this again to make sure everything is loaded, including inline images because this can be called earlier than all the parts are loaded.\n\t\t\t\tawait this.loadAll(Promise.resolve(), { notify: true })\n\t\t\t}\n\t\t\tconst editor = await newMailEditorAsResponse(args, this.isBlockingExternalImages(), this.getLoadedInlineImages(), mailboxDetails)\n\t\t\teditor.show()\n\t\t}\n\t}\n\n\tprivate async createResponseMailArgsForForwarding(\n\t\trecipients: MailAddress[],\n\t\treplyTos: EncryptedMailAddress[],\n\t\taddSignature: boolean,\n\t): Promise<InitAsResponseArgs> {\n\t\tlet infoLine = lang.get(\"date_label\") + \": \" + formatDateTime(this.mail.receivedDate) + \"<br>\"\n\t\tconst senderAddress = this.getDisplayedSender()?.address\n\t\tif (senderAddress) {\n\t\t\tinfoLine += lang.get(\"from_label\") + \": \" + senderAddress + \"<br>\"\n\t\t}\n\n\t\tif (this.getToRecipients().length > 0) {\n\t\t\tinfoLine +=\n\t\t\t\tlang.get(\"to_label\") +\n\t\t\t\t\": \" +\n\t\t\t\tthis.getToRecipients()\n\t\t\t\t\t.map((recipient) => recipient.address)\n\t\t\t\t\t.join(\", \")\n\t\t\tinfoLine += \"<br>\"\n\t\t}\n\n\t\tif (this.getCcRecipients().length > 0) {\n\t\t\tinfoLine +=\n\t\t\t\tlang.get(\"cc_label\") +\n\t\t\t\t\": \" +\n\t\t\t\tthis.getCcRecipients()\n\t\t\t\t\t.map((recipient) => recipient.address)\n\t\t\t\t\t.join(\", \")\n\t\t\tinfoLine += \"<br>\"\n\t\t}\n\n\t\tconst mailSubject = this.getSubject() || \"\"\n\t\tinfoLine += lang.get(\"subject_label\") + \": \" + urlEncodeHtmlTags(mailSubject)\n\t\tlet body = infoLine + '<br><br><blockquote class=\"tutanota_quote\">' + this.getMailBody() + \"</blockquote>\"\n\t\tconst { prependEmailSignature } = await import(\"../signature/Signature\")\n\t\tconst senderMailAddress = await this.getSenderOfResponseMail()\n\t\treturn {\n\t\t\tpreviousMail: this.mail,\n\t\t\tconversationType: ConversationType.FORWARD,\n\t\t\tsenderMailAddress,\n\t\t\trecipients,\n\t\t\tattachments: this.attachments.slice(),\n\t\t\tsubject: \"FWD: \" + mailSubject,\n\t\t\tbodyText: addSignature ? prependEmailSignature(body, this.logins) : body,\n\t\t\treplyTos,\n\t\t}\n\t}\n\n\tasync reply(replyAll: boolean): Promise<void> {\n\t\tif (this.isAnnouncement()) {\n\t\t\treturn\n\t\t}\n\n\t\tconst sendAllowed = await checkApprovalStatus(this.logins, false)\n\n\t\tif (sendAllowed) {\n\t\t\tconst mailboxDetails = await this.mailModel.getMailboxDetailsForMail(this.mail)\n\t\t\tif (mailboxDetails == null) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// We already know it is not an announcement email and we want to get the sender even if it\n\t\t\t// is hidden. It will be replaced with replyTo() anyway\n\t\t\tconst mailAddressAndName = getDisplayedSender(this.mail)\n\t\t\tconst sender = createMailAddress({\n\t\t\t\tname: mailAddressAndName.name,\n\t\t\t\taddress: mailAddressAndName.address,\n\t\t\t\tcontact: null,\n\t\t\t})\n\t\t\tlet prefix = \"Re: \"\n\t\t\tconst mailSubject = this.getSubject()\n\t\t\tlet subject = mailSubject ? (startsWith(mailSubject.toUpperCase(), prefix.toUpperCase()) ? mailSubject : prefix + mailSubject) : \"\"\n\t\t\tlet infoLine = formatDateTime(this.getDate()) + \" \" + lang.get(\"by_label\") + \" \" + sender.address + \":\"\n\t\t\tlet body = infoLine + '<br><blockquote class=\"tutanota_quote\">' + this.getMailBody() + \"</blockquote>\"\n\t\t\tlet toRecipients: MailAddress[] = []\n\t\t\tlet ccRecipients: MailAddress[] = []\n\t\t\tlet bccRecipients: MailAddress[] = []\n\n\t\t\tif (!this.logins.getUserController().isInternalUser() && this.isReceivedMail()) {\n\t\t\t\ttoRecipients.push(sender)\n\t\t\t} else if (this.isReceivedMail()) {\n\t\t\t\tif (this.getReplyTos().some((address) => !downcast(address)._errors)) {\n\t\t\t\t\taddAll(toRecipients, this.getReplyTos())\n\t\t\t\t} else {\n\t\t\t\t\ttoRecipients.push(sender)\n\t\t\t\t}\n\n\t\t\t\tif (replyAll) {\n\t\t\t\t\tlet myMailAddresses = getEnabledMailAddressesWithUser(mailboxDetails, this.logins.getUserController().userGroupInfo)\n\t\t\t\t\taddAll(\n\t\t\t\t\t\tccRecipients,\n\t\t\t\t\t\tthis.getToRecipients().filter((recipient) => !contains(myMailAddresses, recipient.address.toLowerCase())),\n\t\t\t\t\t)\n\t\t\t\t\taddAll(\n\t\t\t\t\t\tccRecipients,\n\t\t\t\t\t\tthis.getCcRecipients().filter((recipient) => !contains(myMailAddresses, recipient.address.toLowerCase())),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// this is a sent email, so use the to recipients as new recipients\n\t\t\t\taddAll(toRecipients, this.getToRecipients())\n\n\t\t\t\tif (replyAll) {\n\t\t\t\t\taddAll(ccRecipients, this.getCcRecipients())\n\t\t\t\t\taddAll(bccRecipients, this.getBccRecipients())\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { prependEmailSignature } = await import(\"../signature/Signature.js\")\n\t\t\tconst { newMailEditorAsResponse } = await import(\"../editor/MailEditor\")\n\n\t\t\tconst isReloadNeeded = !this.sanitizeResult || this.mail.attachments.length !== this.attachments.length\n\t\t\tif (isReloadNeeded) {\n\t\t\t\tawait this.loadAll(Promise.resolve(), { notify: true })\n\t\t\t}\n\t\t\t// It should be there after loadAll() but if not we just give up\n\t\t\tconst inlineImageCids = this.sanitizeResult?.inlineImageCids ?? []\n\n\t\t\tconst [senderMailAddress, referencedCids] = await Promise.all([this.getSenderOfResponseMail(), inlineImageCids])\n\n\t\t\tconst attachmentsForReply = getReferencedAttachments(this.attachments, referencedCids)\n\t\t\ttry {\n\t\t\t\tconst editor = await newMailEditorAsResponse(\n\t\t\t\t\t{\n\t\t\t\t\t\tpreviousMail: this.mail,\n\t\t\t\t\t\tconversationType: ConversationType.REPLY,\n\t\t\t\t\t\tsenderMailAddress,\n\t\t\t\t\t\trecipients: {\n\t\t\t\t\t\t\tto: toRecipients,\n\t\t\t\t\t\t\tcc: ccRecipients,\n\t\t\t\t\t\t\tbcc: bccRecipients,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tattachments: attachmentsForReply,\n\t\t\t\t\t\tsubject,\n\t\t\t\t\t\tbodyText: prependEmailSignature(body, this.logins),\n\t\t\t\t\t\treplyTos: [],\n\t\t\t\t\t},\n\t\t\t\t\tthis.isBlockingExternalImages() || !this.isShowingExternalContent(),\n\t\t\t\t\tthis.getLoadedInlineImages(),\n\t\t\t\t\tmailboxDetails,\n\t\t\t\t)\n\t\t\t\teditor.show()\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof UserError) {\n\t\t\t\t\tshowUserError(e)\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async sanitizeMailBody(mail: Mail, blockExternalContent: boolean): Promise<SanitizedFragment> {\n\t\tconst { htmlSanitizer } = await import(\"../../../common/misc/HtmlSanitizer\")\n\t\tconst rawBody = this.getMailBody()\n\t\t// Keeping this commented out because we want see the response\n\t\t// const urlified = await this.workerFacade.urlify(rawBody).catch((e) => {\n\t\t// \tconsole.warn(\"Failed to urlify mail body!\", e)\n\t\t// \treturn rawBody\n\t\t// })\n\t\tconst sanitizeResult = htmlSanitizer.sanitizeFragment(rawBody, {\n\t\t\tblockExternalContent,\n\t\t\tallowRelativeLinks: isTutanotaTeamMail(mail),\n\t\t})\n\t\tconst { fragment, inlineImageCids, links, blockedExternalContent } = sanitizeResult\n\n\t\t/**\n\t\t * Check if we need to improve contrast for dark theme. We apply the contrast fix if any of the following is contained in\n\t\t * the html body of the mail\n\t\t *  * any tag with a style attribute that has the color property set (besides \"inherit\")\n\t\t *  * any tag with a style attribute that has the background-color set (besides \"inherit\")\n\t\t *  * any font tag with the color attribute set\n\t\t */\n\t\tthis.contrastFixNeeded = isMailContrastFixNeeded(fragment)\n\n\t\tm.redraw()\n\t\treturn {\n\t\t\t// We want to stringify and return the fragment here, because once a fragment is appended to a DOM Node, it's children are moved\n\t\t\t// and the fragment is left empty. If we cache the fragment and then append that directly to the DOM tree when rendering, there are cases where\n\t\t\t// we would try to do so twice, and on the second pass the mail body will be left blank\n\t\t\tfragment,\n\t\t\tinlineImageCids,\n\t\t\tlinks,\n\t\t\tblockedExternalContent,\n\t\t}\n\t}\n\n\tgetNonInlineAttachments(): TutanotaFile[] {\n\t\t// If we have attachments it is safe to assume that we already have body and referenced cids from it\n\t\tconst inlineFileIds = this.sanitizeResult?.inlineImageCids ?? []\n\t\treturn this.attachments.filter((a) => a.cid == null || !inlineFileIds.includes(a.cid))\n\t}\n\n\tasync downloadAll(): Promise<void> {\n\t\tconst nonInlineAttachments = await this.cryptoFacade.enforceSessionKeyUpdateIfNeeded(this._mail, this.getNonInlineAttachments())\n\t\ttry {\n\t\t\tawait this.fileController.downloadAll(nonInlineAttachments)\n\t\t} catch (e) {\n\t\t\tif (e instanceof FileOpenError) {\n\t\t\t\tconsole.warn(\"FileOpenError\", e)\n\t\t\t\tawait Dialog.message(\"canNotOpenFileOnDevice_msg\")\n\t\t\t} else {\n\t\t\t\tconsole.error(\"could not open file:\", e.message ?? \"unknown error\")\n\t\t\t\tawait Dialog.message(\"errorDuringFileOpen_msg\")\n\t\t\t}\n\t\t}\n\t}\n\n\tasync downloadAndOpenAttachment(file: TutanotaFile, open: boolean) {\n\t\tfile = (await this.cryptoFacade.enforceSessionKeyUpdateIfNeeded(this._mail, [file]))[0]\n\t\ttry {\n\t\t\tif (open) {\n\t\t\t\tawait this.fileController.open(file)\n\t\t\t} else {\n\t\t\t\tawait this.fileController.download(file)\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (e instanceof FileOpenError) {\n\t\t\t\tconsole.warn(\"FileOpenError\", e)\n\t\t\t\tawait Dialog.message(\"canNotOpenFileOnDevice_msg\")\n\t\t\t} else {\n\t\t\t\tconsole.error(\"could not open file:\", e.message ?? \"unknown error\")\n\t\t\t\tawait Dialog.message(\"errorDuringFileOpen_msg\")\n\t\t\t}\n\t\t}\n\t}\n\n\tasync importAttachment(file: TutanotaFile) {\n\t\tconst attachmentType = getAttachmentType(file.mimeType ?? \"\")\n\t\tif (attachmentType === AttachmentType.CONTACT) {\n\t\t\tawait this.importContacts(file)\n\t\t} else if (attachmentType === AttachmentType.CALENDAR) {\n\t\t\tawait this.importCalendar(file)\n\t\t}\n\t}\n\n\tprivate async importContacts(file: TutanotaFile) {\n\t\tfile = (await this.cryptoFacade.enforceSessionKeyUpdateIfNeeded(this._mail, [file]))[0]\n\t\ttry {\n\t\t\tconst dataFile = await this.fileController.getAsDataFile(file)\n\t\t\tconst contactListId = await this.contactModel.getContactListId()\n\t\t\t// this shouldn't happen but if it did we can just bail\n\t\t\tif (contactListId == null) return\n\t\t\tconst contactImporter = await this.contactImporter()\n\t\t\tawait contactImporter.importContactsFromFile(utf8Uint8ArrayToString(dataFile.data), contactListId)\n\t\t} catch (e) {\n\t\t\tconsole.log(e)\n\t\t\tthrow new UserError(\"errorDuringFileOpen_msg\")\n\t\t}\n\t}\n\n\tprivate async importCalendar(file: TutanotaFile) {\n\t\tfile = (await this.cryptoFacade.enforceSessionKeyUpdateIfNeeded(this._mail, [file]))[0]\n\t\ttry {\n\t\t\tconst { importCalendarFile, parseCalendarFile } = await import(\"../../../common/calendar/import/CalendarImporter.js\")\n\t\t\tconst dataFile = await this.fileController.getAsDataFile(file)\n\t\t\tconst data = parseCalendarFile(dataFile)\n\t\t\tawait importCalendarFile(await mailLocator.calendarModel(), this.logins.getUserController(), data.contents)\n\t\t} catch (e) {\n\t\t\tconsole.log(e)\n\t\t\tthrow new UserError(\"errorDuringFileOpen_msg\")\n\t\t}\n\t}\n\n\tcanImportFile(file: TutanotaFile): boolean {\n\t\tif (!this.logins.isInternalUserLoggedIn() || file.mimeType == null) {\n\t\t\treturn false\n\t\t}\n\t\tconst attachmentType = getAttachmentType(file.mimeType)\n\t\treturn attachmentType === AttachmentType.CONTACT || attachmentType === AttachmentType.CALENDAR\n\t}\n\n\tcanReplyAll(): boolean {\n\t\treturn (\n\t\t\tthis.logins.getUserController().isInternalUser() &&\n\t\t\tthis.getToRecipients().length + this.getCcRecipients().length + this.getBccRecipients().length > 1\n\t\t)\n\t}\n\n\tcanForwardOrMove(): boolean {\n\t\treturn this.logins.getUserController().isInternalUser()\n\t}\n\n\tshouldDelayRendering(): boolean {\n\t\treturn this.renderIsDelayed\n\t}\n\n\tisCollapsed(): boolean {\n\t\treturn this.collapsed\n\t}\n\n\texpandMail(delayBodyRendering: Promise<unknown>): void {\n\t\tthis.loadAll(delayBodyRendering, { notify: true })\n\t\tif (this.isUnread()) {\n\t\t\t// When we automatically mark email as read (e.g. opening it from notification) we don't want to run into offline errors, but we still want to mark\n\t\t\t// the email as read once we log in.l\n\t\t\t// It is appropriate to show the error when the user marks the email as unread explicitly but less so when they open it and just didn't reach the\n\t\t\t// full login yet.\n\t\t\tthis.logins.waitForFullLogin().then(() => this.setUnread(false))\n\t\t}\n\t\tthis.collapsed = false\n\t}\n\n\tcollapseMail(): void {\n\t\tthis.collapsed = true\n\t}\n\n\tgetLabels(): readonly MailFolder[] {\n\t\treturn this.mailModel.getLabelsForMail(this.mail)\n\t}\n\n\tprivate getMailOwnerGroup(): Id | null {\n\t\treturn this.mail._ownerGroup\n\t}\n\n\tprivate updateMail({ mail, showFolder }: { mail: Mail; showFolder?: boolean }) {\n\t\tif (!isSameId(mail._id, this.mail._id)) {\n\t\t\tthrow new ProgrammingError(\n\t\t\t\t`Trying to update MailViewerViewModel with unrelated email ${JSON.stringify(this.mail._id)} ${JSON.stringify(mail._id)} ${m.route.get()}`,\n\t\t\t)\n\t\t}\n\t\tthis._mail = mail\n\n\t\tthis.folderMailboxText = null\n\t\tif (showFolder) {\n\t\t\tthis.showFolder()\n\t\t}\n\n\t\tthis.relevantRecipient = null\n\t\tthis.determineRelevantRecipient()\n\n\t\tthis.loadAll(Promise.resolve(), { notify: true })\n\t}\n}\n"]}