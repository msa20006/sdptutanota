{"version":3,"file":"MailUtils.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/model/MailUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { FolderSystem, IndentedFolder } from \"../../../common/api/common/mail/FolderSystem.js\"\nimport { Header, InboxRule, Mail, MailDetails, MailFolder, TutanotaProperties } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { assertNotNull, contains, first, isNotEmpty, neverNull } from \"@tutao/tutanota-utils\"\nimport { MailModel } from \"./MailModel.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel.js\"\nimport { UserController } from \"../../../common/api/main/UserController.js\"\nimport { getEnabledMailAddressesForGroupInfo } from \"../../../common/api/common/utils/GroupUtils.js\"\nimport { MailSetKind } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { isSameId } from \"../../../common/api/common/utils/EntityUtils\"\n\nexport type FolderInfo = { level: number; folder: MailFolder }\nexport const MAX_FOLDER_INDENT_LEVEL = 10\n\nexport function getFolderName(folder: MailFolder): string {\n\tswitch (folder.folderType) {\n\t\tcase \"0\":\n\t\t\treturn folder.name\n\n\t\tcase \"1\":\n\t\t\treturn lang.get(\"received_action\")\n\n\t\tcase \"2\":\n\t\t\treturn lang.get(\"sent_action\")\n\n\t\tcase \"3\":\n\t\t\treturn lang.get(\"trash_action\")\n\n\t\tcase \"4\":\n\t\t\treturn lang.get(\"archive_label\")\n\n\t\tcase \"5\":\n\t\t\treturn lang.get(\"spam_action\")\n\n\t\tcase \"6\":\n\t\t\treturn lang.get(\"draft_action\")\n\n\t\tdefault:\n\t\t\t// do not throw an error - new system folders may cause problems\n\t\t\t//throw new Error(\"illegal folder type: \" + this.folder.getFolderType())\n\t\t\treturn \"\"\n\t}\n}\n\nexport function getIndentedFolderNameForDropdown(folderInfo: FolderInfo) {\n\tconst indentLevel = Math.min(folderInfo.level, MAX_FOLDER_INDENT_LEVEL)\n\treturn \". \".repeat(indentLevel) + getFolderName(folderInfo.folder)\n}\n\nexport async function getMoveTargetFolderSystems(foldersModel: MailModel, mails: readonly Mail[]): Promise<Array<FolderInfo>> {\n\tconst firstMail = first(mails)\n\tif (firstMail == null) return []\n\n\tconst mailboxDetails = await foldersModel.getMailboxDetailsForMail(firstMail)\n\tif (mailboxDetails == null || mailboxDetails.mailbox.folders == null) {\n\t\treturn []\n\t}\n\n\tconst folders = await foldersModel.getMailboxFoldersForId(mailboxDetails.mailbox.folders._id)\n\tif (folders == null) {\n\t\treturn []\n\t}\n\tconst folderOfFirstMail = foldersModel.getMailFolderForMail(firstMail)\n\tif (folderOfFirstMail == null) {\n\t\treturn []\n\t}\n\n\tconst areMailsInDifferentFolders =\n\t\tmails.length > 1 &&\n\t\tmails.some((mail) => {\n\t\t\treturn !isSameId(folderOfFirstMail._id, assertNotNull(foldersModel.getMailFolderForMail(mail))._id)\n\t\t})\n\n\tif (areMailsInDifferentFolders) {\n\t\treturn folders.getIndentedList()\n\t} else {\n\t\treturn folders.getIndentedList().filter((f: IndentedFolder) => {\n\t\t\treturn !isSameId(f.folder._id, folderOfFirstMail._id)\n\t\t})\n\t}\n}\n\n/**\n * Gets a system folder of the specified type and unwraps it.\n * Some system folders don't exist in some cases, e.g. spam or archive for external mailboxes!\n *\n * Use with caution.\n */\nexport function assertSystemFolderOfType(system: FolderSystem, type: Omit<MailSetKind, MailSetKind.CUSTOM>): MailFolder {\n\treturn assertNotNull(system.getSystemFolderByType(type), \"System folder of type does not exist!\")\n}\n\nexport function getPathToFolderString(folderSystem: FolderSystem, folder: MailFolder, omitLast = false) {\n\tconst folderPath = folderSystem.getPathToFolder(folder._id)\n\tif (omitLast) {\n\t\tfolderPath.pop()\n\t}\n\treturn folderPath.map(getFolderName).join(\" Â· \")\n}\n\nexport function getMailHeaders(headers: Header): string {\n\treturn headers.compressedHeaders ?? headers.headers ?? \"\"\n}\n\nexport async function loadMailHeaders(mailDetails: MailDetails): Promise<string | null> {\n\treturn mailDetails.headers != null ? getMailHeaders(mailDetails.headers) : null\n}\n\nexport function getExistingRuleForType(props: TutanotaProperties, cleanValue: string, type: string): InboxRule | null {\n\treturn props.inboxRules.find((rule) => type === rule.type && cleanValue === rule.value) ?? null\n}\n\n/**\n * @return {string} default mail address\n */\nexport function getDefaultSenderFromUser({ props, userGroupInfo }: UserController): string {\n\treturn props.defaultSender && contains(getEnabledMailAddressesForGroupInfo(userGroupInfo), props.defaultSender)\n\t\t? props.defaultSender\n\t\t: neverNull(userGroupInfo.mailAddress)\n}\n\nexport function allInSameMailbox(mails: readonly Mail[]): boolean {\n\tconst mailGroups = mails.map((m) => m._ownerGroup)\n\treturn mailGroups.every((mg) => mg === mailGroups[0])\n\t// returns true if mails is empty\n}\n"]}