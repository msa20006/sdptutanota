{"version":3,"file":"MailViewModel.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/view/MailViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { MailboxDetail, MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport {\n\tImportedMailTypeRef,\n\tImportMailStateTypeRef,\n\tMail,\n\tMailBox,\n\tMailFolder,\n\tMailFolderTypeRef,\n\tMailSetEntry,\n\tMailSetEntryTypeRef,\n\tMailTypeRef,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport {\n\tdeconstructMailSetEntryId,\n\telementIdPart,\n\tfirstBiggerThanSecond,\n\tgetElementId,\n\tisSameId,\n\tlistIdPart,\n} from \"../../../common/api/common/utils/EntityUtils.js\"\nimport {\n\tassertNotNull,\n\tcount,\n\tdebounce,\n\tfirst,\n\tgroupBy,\n\tisEmpty,\n\tlastThrow,\n\tlazyMemoized,\n\tmapWith,\n\tmapWithout,\n\tmemoized,\n\tofClass,\n\tpromiseMap,\n} from \"@tutao/tutanota-utils\"\nimport { ListState } from \"../../../common/gui/base/List.js\"\nimport { ConversationPrefProvider, ConversationViewModel, ConversationViewModelFactory } from \"./ConversationViewModel.js\"\nimport { CreateMailViewerOptions } from \"./MailViewer.js\"\nimport { isOfflineError } from \"../../../common/api/common/utils/ErrorUtils.js\"\nimport { getMailSetKind, ImportStatus, MailSetKind, OperationType } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { WsConnectionState } from \"../../../common/api/main/WorkerClient.js\"\nimport { WebsocketConnectivityModel } from \"../../../common/misc/WebsocketConnectivityModel.js\"\nimport { ExposedCacheStorage } from \"../../../common/api/worker/rest/DefaultEntityRestCache.js\"\nimport { NotAuthorizedError, NotFoundError, PreconditionFailedError } from \"../../../common/api/common/error/RestError.js\"\nimport { UserError } from \"../../../common/api/main/UserError.js\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError.js\"\nimport Stream from \"mithril/stream\"\nimport { InboxRuleHandler } from \"../model/InboxRuleHandler.js\"\nimport { Router } from \"../../../common/gui/ScopedRouter.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { EventController } from \"../../../common/api/main/EventController.js\"\nimport { MailModel } from \"../model/MailModel.js\"\nimport { assertSystemFolderOfType } from \"../model/MailUtils.js\"\nimport { getMailFilterForType, MailFilterType } from \"./MailViewerUtils.js\"\nimport { CacheMode } from \"../../../common/api/worker/rest/EntityRestClient.js\"\nimport { isOfTypeOrSubfolderOf, isSpamOrTrashFolder, isSubfolderOfType } from \"../model/MailChecks.js\"\nimport { MailListModel } from \"../model/MailListModel\"\n\nexport interface MailOpenedListener {\n\tonEmailOpened(mail: Mail): unknown\n}\n\nconst TAG = \"MailVM\"\n\n/** ViewModel for the overall mail view. */\nexport class MailViewModel {\n\tprivate _folder: MailFolder | null = null\n\t/** id of the mail that was requested to be displayed, independent of the list state. */\n\tprivate stickyMailId: IdTuple | null = null\n\t/**\n\t * When the URL contains both folder id and mail id we will try to select that mail but we might need to load the list until we find it.\n\t * This is that mail id that we are loading.\n\t */\n\tprivate loadingTargetId: Id | null = null\n\tprivate conversationViewModel: ConversationViewModel | null = null\n\tprivate _filterType: MailFilterType | null = null\n\n\t/**\n\t * We remember the last URL used for each folder so if we switch between folders we can keep the selected mail.\n\t * There's a similar (but different) hacky mechanism where we store last URL but per each top-level view: navButtonRoutes. This one is per folder.\n\t */\n\tprivate mailFolderElementIdToSelectedMailId: ReadonlyMap<Id, Id> = new Map()\n\tprivate listStreamSubscription: Stream<unknown> | null = null\n\tprivate conversationPref: boolean = false\n\t/** A slightly hacky marker to avoid concurrent URL updates. */\n\tprivate currentShowTargetMarker: object = {}\n\n\tconstructor(\n\t\tprivate readonly mailboxModel: MailboxModel,\n\t\tprivate readonly mailModel: MailModel,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly connectivityModel: WebsocketConnectivityModel,\n\t\tprivate readonly cacheStorage: ExposedCacheStorage,\n\t\tprivate readonly conversationViewModelFactory: ConversationViewModelFactory,\n\t\tprivate readonly mailOpenedListener: MailOpenedListener,\n\t\tprivate readonly conversationPrefProvider: ConversationPrefProvider,\n\t\tprivate readonly inboxRuleHandler: InboxRuleHandler,\n\t\tprivate readonly router: Router,\n\t\tprivate readonly updateUi: () => unknown,\n\t) {}\n\n\tgetSelectedMailSetKind(): MailSetKind | null {\n\t\treturn this._folder ? getMailSetKind(this._folder) : null\n\t}\n\n\tget filterType(): MailFilterType | null {\n\t\treturn this._filterType\n\t}\n\n\tsetFilter(filter: MailFilterType | null) {\n\t\tthis._filterType = filter\n\t\tthis.listModel?.setFilter(getMailFilterForType(filter))\n\t}\n\n\tasync showMailWithMailSetId(mailsetId?: Id, mailId?: Id): Promise<void> {\n\t\tconst showMailMarker = {}\n\t\tthis.currentShowTargetMarker = showMailMarker\n\t\tif (mailsetId) {\n\t\t\tconst mailset = await this.mailModel.getMailSetById(mailsetId)\n\t\t\tif (showMailMarker !== this.currentShowTargetMarker) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (mailset) {\n\t\t\t\treturn this.showMail(mailset, mailId)\n\t\t\t}\n\t\t}\n\t\treturn this.showMail(null, mailId)\n\t}\n\n\tasync showStickyMail(fullMailId: IdTuple, onMissingExplicitMailTarget: () => unknown): Promise<void> {\n\t\tconst [listId, elementId] = fullMailId\n\t\t// If we are already displaying the requested email, do nothing\n\t\tif (this.conversationViewModel && isSameId(this.conversationViewModel.primaryMail._id, elementId)) {\n\t\t\treturn\n\t\t}\n\t\tif (isSameId(this.stickyMailId, fullMailId)) {\n\t\t\treturn\n\t\t}\n\n\t\tconsole.log(TAG, \"Loading sticky mail\", listId, elementId)\n\t\tthis.stickyMailId = fullMailId\n\n\t\t// This should be very quick as we only wait for the cache,\n\t\tawait this.loadExplicitMailTarget(listId, elementId, onMissingExplicitMailTarget)\n\t}\n\n\tprivate async resetOrInitializeList(stickyMailId: IdTuple) {\n\t\tif (this._folder != null) {\n\t\t\t// If we already have a folder, deselect.\n\t\t\tthis.listModel?.selectNone()\n\t\t} else {\n\t\t\t// Otherwise, load the inbox so that it won't be empty on mobile when you try to go back.\n\t\t\tconst userInbox = await this.getFolderForUserInbox()\n\n\t\t\tif (this.didStickyMailChange(stickyMailId, \"after loading user inbox ID\")) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis.setListId(userInbox)\n\t\t}\n\t}\n\n\tprivate async showMail(folder?: MailFolder | null, mailId?: Id) {\n\t\t// an optimization to not open an email that we already display\n\t\tif (folder != null && mailId != null && this.conversationViewModel && isSameId(elementIdPart(this.conversationViewModel.primaryMail._id), mailId)) {\n\t\t\treturn\n\t\t}\n\t\t// If we are already loading towards the email that is passed to us in the URL then we don't need to do anything. We already updated URL on the\n\t\t// previous call.\n\t\tif (\n\t\t\tfolder != null &&\n\t\t\tmailId != null &&\n\t\t\tthis._folder &&\n\t\t\tthis.loadingTargetId &&\n\t\t\tisSameId(folder._id, this._folder._id) &&\n\t\t\tisSameId(this.loadingTargetId, mailId)\n\t\t) {\n\t\t\treturn\n\t\t}\n\n\t\tconsole.log(TAG, \"showMail\", folder?._id, mailId)\n\n\t\t// important: to set it early enough because setting listId will trigger URL update.\n\t\t// if we don't set this one before setListId, url update will cause this function to be called again but without target mail, and we will lose the\n\t\t// target id\n\t\tconst loadingTargetId = mailId ?? null\n\t\tthis.loadingTargetId = loadingTargetId\n\n\t\t// if the URL has changed then we probably want to reset the explicitly shown email\n\t\tthis.stickyMailId = null\n\n\t\tconst folderToUse = await this.selectFolderToUse(folder ?? null)\n\t\t// Selecting folder is async, check that the target hasn't changed inbetween\n\t\tif (this.loadingTargetId !== loadingTargetId) return\n\n\t\t// This will cause a URL update indirectly\n\t\tthis.setListId(folderToUse)\n\n\t\t// If we have a mail that should be selected start loading towards it.\n\t\t// We already checked in the beginning that we are not loading to the same target. We set the loadingTarget early so there should be no races.\n\t\tif (loadingTargetId) {\n\t\t\t// Record the selected mail for the folder\n\t\t\tthis.mailFolderElementIdToSelectedMailId = mapWith(this.mailFolderElementIdToSelectedMailId, getElementId(folderToUse), loadingTargetId)\n\t\t\ttry {\n\t\t\t\tawait this.loadAndSelectMail(folderToUse, loadingTargetId)\n\t\t\t} finally {\n\t\t\t\t// We either selected the mail and we don't need the target anymore or we didn't find it and we should remove the target\n\t\t\t\tthis.loadingTargetId = null\n\t\t\t}\n\t\t} else {\n\t\t\t// update URL if the view was just opened without any url params\n\t\t\t// setListId might not have done it if the list didn't change for us internally but is changed for the view\n\t\t\tif (folder == null) this.updateUrl()\n\t\t}\n\t}\n\n\tprivate async selectFolderToUse(folderArgument: MailFolder | null): Promise<MailFolder> {\n\t\tif (folderArgument) {\n\t\t\tconst mailboxDetail = await this.mailModel.getMailboxDetailsForMailFolder(folderArgument)\n\t\t\tif (mailboxDetail) {\n\t\t\t\treturn folderArgument\n\t\t\t} else {\n\t\t\t\treturn await this.getFolderForUserInbox()\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._folder ?? (await this.getFolderForUserInbox())\n\t\t}\n\t}\n\n\tprivate async loadExplicitMailTarget(listId: Id, mailId: Id, onMissingTargetEmail: () => unknown) {\n\t\tconst expectedStickyMailId: IdTuple = [listId, mailId]\n\n\t\t// First try getting the mail from the list. We don't need to do anything more if we can simply select it, as\n\t\t// getting the mail is completely synchronous.\n\t\tconst mailInList = this.listModel?.getMail(mailId)\n\t\tif (mailInList) {\n\t\t\tconsole.log(TAG, \"opening mail from list\", mailId)\n\t\t\tthis.listModel?.onSingleSelection(mailInList)\n\t\t\treturn\n\t\t}\n\n\t\t// Load the cached mail to display it sooner.\n\t\t// We still want to load the mail remotely, though, to make sure that it won't disappear due to being moved.\n\t\tconst cached = await this.cacheStorage.get(MailTypeRef, listId, mailId)\n\t\tif (this.didStickyMailChange(expectedStickyMailId, \"after loading cached\")) {\n\t\t\treturn\n\t\t}\n\t\tif (cached) {\n\t\t\tconsole.log(TAG, \"displaying cached mail\", mailId)\n\t\t\tawait this.displayExplicitMailTarget(cached)\n\t\t}\n\n\t\tlet mail: Mail | null\n\t\ttry {\n\t\t\tmail = await this.entityClient.load(MailTypeRef, [listId, mailId], { cacheMode: CacheMode.WriteOnly })\n\t\t} catch (e) {\n\t\t\tif (isOfflineError(e)) {\n\t\t\t\treturn\n\t\t\t} else if (e instanceof NotFoundError || e instanceof NotAuthorizedError) {\n\t\t\t\tmail = null\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t\tif (this.didStickyMailChange(expectedStickyMailId, \"after loading from entity client\")) {\n\t\t\treturn\n\t\t}\n\n\t\t// Simply checking if Mail exists is not enough. Instead, we check against the sets in the Mail\n\t\t// and see if it's moved folders since the last sync. We have to do this because if the mail\n\t\t// did move since the last sync, it will still disappear from view.\n\t\tlet movedSetsSinceLastSync = false\n\t\tif (mail != null && cached != null) {\n\t\t\t// This will most likely be the inbox\n\t\t\tconst currentFolderId = elementIdPart(assertNotNull(this._folder, \"cached was displayed earlier, thus folder would have been set\")._id)\n\t\t\t// This can be false if the mail was moved while the user is logged in, which is fine, and we don't need to check the loaded mail\n\t\t\tconst cachedMailInFolder = cached.sets.some((id) => elementIdPart(id) === currentFolderId)\n\t\t\tmovedSetsSinceLastSync = cachedMailInFolder && !mail.sets.some((id) => elementIdPart(id) === currentFolderId)\n\t\t}\n\n\t\tif (!movedSetsSinceLastSync && mail != null) {\n\t\t\tconsole.log(TAG, \"opening mail from entity client\", mailId)\n\t\t\tawait this.displayExplicitMailTarget(mail)\n\t\t} else {\n\t\t\tif (mail != null) {\n\t\t\t\tconsole.log(TAG, \"Explicit mail target moved sets\", listId, mailId)\n\t\t\t} else {\n\t\t\t\tconsole.log(TAG, \"Explicit mail target not found\", listId, mailId)\n\t\t\t}\n\t\t\tonMissingTargetEmail()\n\t\t\t// We already know that email is not there, we can reset the target here and avoid list loading\n\t\t\tthis.stickyMailId = null\n\t\t\tthis.updateUrl()\n\t\t}\n\t}\n\n\tprivate async displayExplicitMailTarget(mail: Mail) {\n\t\tawait this.resetOrInitializeList(mail._id)\n\t\tthis.createConversationViewModel({ mail, showFolder: false })\n\t\tthis.updateUi()\n\t}\n\n\tprivate didStickyMailChange(expectedId: IdTuple, message: string): boolean {\n\t\tconst changed = !isSameId(this.stickyMailId, expectedId)\n\t\tif (changed) {\n\t\t\tconsole.log(TAG, \"target mail id changed\", message, expectedId, this.stickyMailId)\n\t\t}\n\t\treturn changed\n\t}\n\n\tprivate async loadAndSelectMail(folder: MailFolder, mailId: Id) {\n\t\tconst foundMail = await this.listModel?.loadAndSelect(\n\t\t\tmailId,\n\t\t\t() =>\n\t\t\t\t// if we changed the list, stop\n\t\t\t\tthis.getFolder() !== folder ||\n\t\t\t\t// if listModel is gone for some reason, stop\n\t\t\t\t!this.listModel ||\n\t\t\t\t// if the target mail has changed, stop\n\t\t\t\tthis.loadingTargetId !== mailId ||\n\t\t\t\t// if we loaded past the target item we won't find it, stop\n\t\t\t\t(this.listModel.items.length > 0 && firstBiggerThanSecond(mailId, getElementId(lastThrow(this.listModel.items)))),\n\t\t)\n\t\tif (foundMail == null) {\n\t\t\tconsole.log(\"did not find mail\", folder, mailId)\n\t\t}\n\t}\n\n\tprivate async getFolderForUserInbox(): Promise<MailFolder> {\n\t\tconst mailboxDetail = await this.mailboxModel.getUserMailboxDetails()\n\t\tconst folders = await this.mailModel.getMailboxFoldersForId(assertNotNull(mailboxDetail.mailbox.folders)._id)\n\t\treturn assertSystemFolderOfType(folders, MailSetKind.INBOX)\n\t}\n\n\tinit() {\n\t\tthis.singInit()\n\t\tconst conversationEnabled = this.conversationPrefProvider.getConversationViewShowOnlySelectedMail()\n\t\tif (this.conversationViewModel && this.conversationPref !== conversationEnabled) {\n\t\t\tconst mail = this.conversationViewModel.primaryMail\n\t\t\tthis.createConversationViewModel({\n\t\t\t\tmail,\n\t\t\t\tshowFolder: false,\n\t\t\t\tdelayBodyRenderingUntil: Promise.resolve(),\n\t\t\t})\n\t\t\tthis.mailOpenedListener.onEmailOpened(mail)\n\t\t}\n\t\tthis.conversationPref = conversationEnabled\n\t}\n\n\tprivate readonly singInit = lazyMemoized(() => {\n\t\tthis.eventController.addEntityListener((updates) => this.entityEventsReceived(updates))\n\t})\n\n\tget listModel(): MailListModel | null {\n\t\treturn this._folder ? this.listModelForFolder(getElementId(this._folder)) : null\n\t}\n\n\tgetMailFolderToSelectedMail(): ReadonlyMap<Id, Id> {\n\t\treturn this.mailFolderElementIdToSelectedMailId\n\t}\n\n\tgetFolder(): MailFolder | null {\n\t\treturn this._folder\n\t}\n\n\tgetLabelsForMail(mail: Mail): ReadonlyArray<MailFolder> {\n\t\treturn this.listModel?.getLabelsForMail(mail) ?? []\n\t}\n\n\tprivate setListId(folder: MailFolder) {\n\t\tif (folder === this._folder) {\n\t\t\treturn\n\t\t}\n\t\t// Cancel old load all\n\t\tthis.listModel?.cancelLoadAll()\n\t\tthis._filterType = null\n\n\t\tthis._folder = folder\n\t\tthis.listStreamSubscription?.end(true)\n\t\tthis.listStreamSubscription = this.listModel!.stateStream.map((state) => this.onListStateChange(state))\n\t\tthis.listModel!.loadInitial().then(() => {\n\t\t\tif (this.listModel != null && this._folder === folder) {\n\t\t\t\tthis.fixCounterIfNeeded(folder, this.listModel.items)\n\t\t\t}\n\t\t})\n\t}\n\n\tgetConversationViewModel(): ConversationViewModel | null {\n\t\treturn this.conversationViewModel\n\t}\n\n\tprivate listModelForFolder = memoized((_folderId: Id) => {\n\t\t// Capture state to avoid race conditions.\n\t\t// We need to populate mail set entries cache when loading mails so that we can react to updates later.\n\t\tconst folder = assertNotNull(this._folder)\n\t\treturn new MailListModel(folder, this.conversationPrefProvider, this.entityClient, this.mailModel, this.inboxRuleHandler, this.cacheStorage)\n\t})\n\n\tprivate fixCounterIfNeeded: (folder: MailFolder, itemsWhenCalled: ReadonlyArray<Mail>) => void = debounce(\n\t\t2000,\n\t\tasync (folder: MailFolder, itemsWhenCalled: ReadonlyArray<Mail>) => {\n\t\t\tconst ourFolder = this.getFolder()\n\t\t\tif (ourFolder == null || (this._filterType != null && this.filterType !== MailFilterType.Unread)) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// If folders are changed, list won't have the data we need.\n\t\t\t// Do not rely on counters if we are not connected\n\t\t\tif (!isSameId(getElementId(ourFolder), getElementId(folder)) || this.connectivityModel.wsConnection()() !== WsConnectionState.connected) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// If list was modified in the meantime, we cannot be sure that we will fix counters correctly (e.g. because of the inbox rules)\n\t\t\tif (this.listModel?.items !== itemsWhenCalled) {\n\t\t\t\tconsole.log(`list changed, trying again later`)\n\t\t\t\treturn this.fixCounterIfNeeded(folder, this.listModel?.items ?? [])\n\t\t\t}\n\n\t\t\tconst unreadMailsCount = count(this.listModel.items, (e) => e.unread)\n\n\t\t\tconst counterValue = await this.mailModel.getCounterValue(folder)\n\t\t\tif (counterValue != null && counterValue !== unreadMailsCount) {\n\t\t\t\tconsole.log(`fixing up counter for folder ${folder._id}`)\n\t\t\t\tawait this.mailModel.fixupCounterForFolder(folder, unreadMailsCount)\n\t\t\t} else {\n\t\t\t\tconsole.log(`same counter, no fixup on folder ${folder._id}`)\n\t\t\t}\n\t\t},\n\t)\n\n\tprivate onListStateChange(newState: ListState<Mail>) {\n\t\t// If we are already displaying sticky mail just leave it alone, no matter what's happening to the list.\n\t\t// User actions and URL updated do reset sticky mail id.\n\t\tconst displayedMailId = this.conversationViewModel?.primaryViewModel()?.mail._id\n\t\tif (!(displayedMailId && isSameId(displayedMailId, this.stickyMailId))) {\n\t\t\tconst targetItem = this.stickyMailId\n\t\t\t\t? newState.items.find((item) => isSameId(this.stickyMailId, item._id))\n\t\t\t\t: !newState.inMultiselect && newState.selectedItems.size === 1\n\t\t\t\t? first(this.listModel!.getSelectedAsArray())\n\t\t\t\t: null\n\t\t\tif (targetItem != null) {\n\t\t\t\t// Always write the targetItem in case it was not written before but already being displayed (sticky mail)\n\t\t\t\tthis.mailFolderElementIdToSelectedMailId = mapWith(\n\t\t\t\t\tthis.mailFolderElementIdToSelectedMailId,\n\t\t\t\t\tgetElementId(assertNotNull(this.getFolder())),\n\t\t\t\t\tgetElementId(targetItem),\n\t\t\t\t)\n\t\t\t\tif (!this.conversationViewModel || !isSameId(this.conversationViewModel?.primaryMail._id, targetItem._id)) {\n\t\t\t\t\tthis.createConversationViewModel({\n\t\t\t\t\t\tmail: targetItem,\n\t\t\t\t\t\tshowFolder: false,\n\t\t\t\t\t})\n\t\t\t\t\tthis.mailOpenedListener.onEmailOpened(targetItem)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.conversationViewModel?.dispose()\n\t\t\t\tthis.conversationViewModel = null\n\t\t\t\tthis.mailFolderElementIdToSelectedMailId = mapWithout(this.mailFolderElementIdToSelectedMailId, getElementId(assertNotNull(this.getFolder())))\n\t\t\t}\n\t\t}\n\t\tthis.updateUrl()\n\t\tthis.updateUi()\n\t}\n\n\tprivate updateUrl() {\n\t\tconst folder = this._folder\n\t\tconst folderId = folder ? getElementId(folder) : null\n\t\t// If we are loading towards an email we want to keep it in the URL, otherwise we will reset it.\n\t\t// Otherwise, if we have a single selected email then that should be in the URL.\n\t\tconst mailId = this.loadingTargetId ?? (folderId ? this.getMailFolderToSelectedMail().get(folderId) : null)\n\t\tconst stickyMail = this.stickyMailId\n\n\t\tif (mailId != null) {\n\t\t\tthis.router.routeTo(\n\t\t\t\t\"/mail/:folderId/:mailId\",\n\t\t\t\tthis.addStickyMailParam({\n\t\t\t\t\tfolderId,\n\t\t\t\t\tmailId,\n\t\t\t\t\tmail: stickyMail,\n\t\t\t\t}),\n\t\t\t)\n\t\t} else {\n\t\t\tthis.router.routeTo(\"/mail/:folderId\", this.addStickyMailParam({ folderId: folderId ?? \"\" }))\n\t\t}\n\t}\n\n\tprivate addStickyMailParam(params: Record<string, unknown>): typeof params {\n\t\tif (this.stickyMailId) {\n\t\t\tparams.mail = this.stickyMailId.join(\",\")\n\t\t}\n\t\treturn params\n\t}\n\n\tprivate createConversationViewModel(viewModelParams: CreateMailViewerOptions) {\n\t\tthis.conversationViewModel?.dispose()\n\t\tthis.conversationViewModel = this.conversationViewModelFactory(viewModelParams)\n\t}\n\n\tprivate async entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>) {\n\t\t// capturing the state so that if we switch folders we won't run into race conditions\n\t\tconst folder = this._folder\n\t\tconst listModel = this.listModel\n\n\t\tif (!folder || !listModel) {\n\t\t\treturn\n\t\t}\n\n\t\tlet importMailStateUpdates: Array<EntityUpdateData> = []\n\t\tfor (const update of updates) {\n\t\t\tif (isUpdateForTypeRef(MailSetEntryTypeRef, update) && isSameId(folder.entries, update.instanceListId)) {\n\t\t\t\tif (update.operation === OperationType.DELETE && this.stickyMailId != null) {\n\t\t\t\t\tconst { mailId } = deconstructMailSetEntryId(update.instanceId)\n\t\t\t\t\tif (isSameId(mailId, elementIdPart(this.stickyMailId))) {\n\t\t\t\t\t\t// Reset target before we dispatch event to the list so that our handler in onListStateChange() has up-to-date state.\n\t\t\t\t\t\tthis.stickyMailId = null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tisUpdateForTypeRef(ImportMailStateTypeRef, update) &&\n\t\t\t\t(update.operation == OperationType.CREATE || update.operation == OperationType.UPDATE)\n\t\t\t) {\n\t\t\t\timportMailStateUpdates.push(update)\n\t\t\t}\n\n\t\t\tawait listModel.handleEntityUpdate(update)\n\t\t\tawait promiseMap(importMailStateUpdates, (update) => this.processImportedMails(update))\n\t\t}\n\t}\n\n\tprivate async processImportedMails(update: EntityUpdateData) {\n\t\tconst importMailState = await this.entityClient.load(ImportMailStateTypeRef, [update.instanceListId, update.instanceId])\n\t\tconst importedFolder = await this.entityClient.load(MailFolderTypeRef, importMailState.targetFolder)\n\t\tconst listModelOfImport = this.listModelForFolder(elementIdPart(importMailState.targetFolder))\n\n\t\tlet status = parseInt(importMailState.status) as ImportStatus\n\t\tif (status === ImportStatus.Finished || status === ImportStatus.Canceled) {\n\t\t\tlet importedMailEntries = await this.entityClient.loadAll(ImportedMailTypeRef, importMailState.importedMails)\n\t\t\tif (isEmpty(importedMailEntries)) return Promise.resolve()\n\n\t\t\tlet mailSetEntryIds = importedMailEntries.map((importedMail) => elementIdPart(importedMail.mailSetEntry))\n\t\t\tconst mailSetEntryListId = listIdPart(importedMailEntries[0].mailSetEntry)\n\t\t\tconst importedMailSetEntries = await this.entityClient.loadMultiple(MailSetEntryTypeRef, mailSetEntryListId, mailSetEntryIds)\n\t\t\tif (isEmpty(importedMailSetEntries)) return Promise.resolve()\n\n\t\t\t// put mails into cache before list model will download them one by one\n\t\t\tawait this.preloadMails(importedMailSetEntries)\n\t\t\tawait promiseMap(importedMailSetEntries, (importedMailSetEntry) => {\n\t\t\t\treturn listModelOfImport.handleEntityUpdate({\n\t\t\t\t\tinstanceId: elementIdPart(importedMailSetEntry._id),\n\t\t\t\t\tinstanceListId: importedFolder.entries,\n\t\t\t\t\toperation: OperationType.CREATE,\n\t\t\t\t\ttype: MailSetEntryTypeRef.type,\n\t\t\t\t\tapplication: MailSetEntryTypeRef.app,\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}\n\n\tprivate async preloadMails(importedMailSetEntries: MailSetEntry[]) {\n\t\tconst mailIds = importedMailSetEntries.map((mse) => mse.mail)\n\t\tconst mailsByList = groupBy(mailIds, (m) => listIdPart(m))\n\t\tfor (const [listId, mailIds] of mailsByList.entries()) {\n\t\t\tconst mailElementIds = mailIds.map((m) => elementIdPart(m))\n\t\t\tawait this.entityClient.loadMultiple(MailTypeRef, listId, mailElementIds)\n\t\t}\n\t}\n\n\tasync switchToFolder(folderType: Omit<MailSetKind, MailSetKind.CUSTOM>): Promise<void> {\n\t\tconst state = {}\n\t\tthis.currentShowTargetMarker = state\n\t\tconst mailboxDetail = assertNotNull(await this.getMailboxDetails())\n\t\tif (this.currentShowTargetMarker !== state) {\n\t\t\treturn\n\t\t}\n\t\tif (mailboxDetail == null || mailboxDetail.mailbox.folders == null) {\n\t\t\treturn\n\t\t}\n\t\tconst folders = await this.mailModel.getMailboxFoldersForId(mailboxDetail.mailbox.folders._id)\n\t\tif (this.currentShowTargetMarker !== state) {\n\t\t\treturn\n\t\t}\n\t\tconst folder = assertSystemFolderOfType(folders, folderType)\n\t\tawait this.showMail(folder, this.mailFolderElementIdToSelectedMailId.get(getElementId(folder)))\n\t}\n\n\tasync getMailboxDetails(): Promise<MailboxDetail> {\n\t\tconst folder = this.getFolder()\n\t\treturn await this.mailboxDetailForListWithFallback(folder)\n\t}\n\n\tasync showingDraftsFolder(): Promise<boolean> {\n\t\tif (!this._folder) return false\n\t\tconst mailboxDetail = await this.mailModel.getMailboxDetailsForMailFolder(this._folder)\n\t\tconst selectedFolder = this.getFolder()\n\t\tif (selectedFolder && mailboxDetail && mailboxDetail.mailbox.folders) {\n\t\t\tconst folders = await this.mailModel.getMailboxFoldersForId(mailboxDetail.mailbox.folders._id)\n\t\t\treturn isOfTypeOrSubfolderOf(folders, selectedFolder, MailSetKind.DRAFT)\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tasync showingTrashOrSpamFolder(): Promise<boolean> {\n\t\tconst folder = this.getFolder()\n\t\tif (folder) {\n\t\t\tconst mailboxDetail = await this.mailModel.getMailboxDetailsForMailFolder(folder)\n\t\t\tif (folder && mailboxDetail && mailboxDetail.mailbox.folders) {\n\t\t\t\tconst folders = await this.mailModel.getMailboxFoldersForId(mailboxDetail.mailbox.folders._id)\n\t\t\t\treturn isSpamOrTrashFolder(folders, folder)\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\tprivate async mailboxDetailForListWithFallback(folder?: MailFolder | null) {\n\t\tconst mailboxDetailForListId = folder ? await this.mailModel.getMailboxDetailsForMailFolder(folder) : null\n\t\treturn mailboxDetailForListId ?? (await this.mailboxModel.getUserMailboxDetails())\n\t}\n\n\tasync finallyDeleteAllMailsInSelectedFolder(folder: MailFolder): Promise<void> {\n\t\t// remove any selection to avoid that the next mail is loaded and selected for each deleted mail event\n\t\tthis.listModel?.selectNone()\n\n\t\tconst mailboxDetail = await this.getMailboxDetails()\n\n\t\t// the request is handled a little differently if it is the system folder vs a subfolder\n\t\tif (folder.folderType === MailSetKind.TRASH || folder.folderType === MailSetKind.SPAM) {\n\t\t\treturn this.mailModel.clearFolder(folder).catch(\n\t\t\t\tofClass(PreconditionFailedError, () => {\n\t\t\t\t\tthrow new UserError(\"operationStillActive_msg\")\n\t\t\t\t}),\n\t\t\t)\n\t\t} else {\n\t\t\tconst folders = await this.mailModel.getMailboxFoldersForId(assertNotNull(mailboxDetail.mailbox.folders)._id)\n\t\t\tif (isSubfolderOfType(folders, folder, MailSetKind.TRASH) || isSubfolderOfType(folders, folder, MailSetKind.SPAM)) {\n\t\t\t\treturn this.mailModel.finallyDeleteCustomMailFolder(folder).catch(\n\t\t\t\t\tofClass(PreconditionFailedError, () => {\n\t\t\t\t\t\tthrow new UserError(\"operationStillActive_msg\")\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tthrow new ProgrammingError(`Cannot delete mails in folder ${String(folder._id)} with type ${folder.folderType}`)\n\t\t\t}\n\t\t}\n\t}\n\n\tonSingleSelection(mail: Mail) {\n\t\tthis.stickyMailId = null\n\t\tthis.loadingTargetId = null\n\t\tthis.listModel?.onSingleSelection(mail)\n\t}\n\n\tareAllSelected(): boolean {\n\t\treturn this.listModel?.areAllSelected() ?? false\n\t}\n\n\tselectNone(): void {\n\t\tthis.stickyMailId = null\n\t\tthis.loadingTargetId = null\n\t\tthis.listModel?.selectNone()\n\t}\n\n\tselectAll(): void {\n\t\tthis.stickyMailId = null\n\t\tthis.loadingTargetId = null\n\t\tthis.listModel?.selectAll()\n\t}\n\n\tonSingleInclusiveSelection(mail: Mail, clearSelectionOnMultiSelectStart?: boolean) {\n\t\tthis.stickyMailId = null\n\t\tthis.loadingTargetId = null\n\t\tthis.listModel?.onSingleInclusiveSelection(mail, clearSelectionOnMultiSelectStart)\n\t}\n\n\tonRangeSelectionTowards(mail: Mail) {\n\t\tthis.stickyMailId = null\n\t\tthis.loadingTargetId = null\n\t\tthis.listModel?.selectRangeTowards(mail)\n\t}\n\n\tselectPrevious(multiselect: boolean) {\n\t\tthis.stickyMailId = null\n\t\tthis.loadingTargetId = null\n\t\tthis.listModel?.selectPrevious(multiselect)\n\t}\n\n\tselectNext(multiselect: boolean) {\n\t\tthis.stickyMailId = null\n\t\tthis.loadingTargetId = null\n\t\tthis.listModel?.selectNext(multiselect)\n\t}\n\n\tonSingleExclusiveSelection(mail: Mail) {\n\t\tthis.stickyMailId = null\n\t\tthis.loadingTargetId = null\n\t\tthis.listModel?.onSingleExclusiveSelection(mail)\n\t}\n\n\tasync createLabel(mailbox: MailBox, labelData: { name: string; color: string }) {\n\t\tawait this.mailModel.createLabel(assertNotNull(mailbox._ownerGroup), labelData)\n\t}\n\n\tasync editLabel(label: MailFolder, newData: { name: string; color: string }) {\n\t\tawait this.mailModel.updateLabel(label, newData)\n\t}\n\n\tasync deleteLabel(label: MailFolder) {\n\t\tawait this.mailModel.deleteLabel(label)\n\t}\n}\n"]}