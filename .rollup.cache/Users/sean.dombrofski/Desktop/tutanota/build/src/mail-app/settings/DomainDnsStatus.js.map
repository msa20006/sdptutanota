{"version":3,"file":"DomainDnsStatus.js","sourceRoot":"","sources":["../../../../src/mail-app/settings/DomainDnsStatus.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,4BAA4B,EAAE,MAAM,2CAA2C,CAAA;AAExF,OAAO,EAAE,uBAAuB,EAAsC,MAAM,2CAA2C,CAAA;AACvH,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAA;AACxD,OAAO,EAAE,IAAI,EAAE,MAAM,qCAAqC,CAAA;AAC1D,OAAO,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAA;AAC9D,OAAO,EAAE,OAAO,EAAE,MAAM,qCAAqC,CAAA;AAC7D,OAAO,EAAE,wBAAwB,EAAE,MAAM,wCAAwC,CAAA;AAEjF,gBAAgB,EAAE,CAAA;AAElB,MAAM,OAAO,eAAe;IAC3B,MAAM,CAAqC;IAC3C,MAAM,CAAQ;IAEd,YAAY,eAAuB,EAAE,UAAe;QACnD,IAAI,CAAC,MAAM,GAAG,eAAe,CAAA;QAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE;YACjC,IAAI,IAAI,GAAG,4BAA4B,CAAC;gBACvC,MAAM,EAAE,eAAe;gBACvB,QAAQ,EAAE,UAAU,IAAI,IAAI;aAC5B,CAAC,CAAA;YACF,OAAO,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAA;QACnE,CAAC,CAAC,CAAA;IACH,CAAC;IAED,gCAAgC;QAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAA;IAC/B,CAAC;IAED;;;;;OAKG;IACH,cAAc;QACb,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,WAAW,KAAK,uBAAuB,CAAC,6BAA6B,EAAE,CAAC;YAC9H,OAAO,KAAK,CAAA;QACb,CAAC;QAED,MAAM,sBAAsB,GAAG,IAAI,CAAC,MAAM;aACxC,SAAS,EAAE;aACX,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,+CAAqC,IAAI,CAAC,CAAC,IAAI,oDAA0C,CAAC,CAAA;QAC/H,OAAO,CAAC,sBAAsB,CAAC,MAAM,CAAA;IACtC,CAAC;IAED;;;;OAIG;IACH,iBAAiB;QAChB,OAAO,CACN,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACtB,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,WAAW,KAAK,uBAAuB,CAAC,6BAA6B;YAC7F,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC;YACnD,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,CACnD,CAAA;IACF,CAAC;IAED,gBAAgB;QACf,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;YAC5B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAA;YAEpC,IAAI,MAAM,CAAC,WAAW,KAAK,uBAAuB,CAAC,6BAA6B,EAAE,CAAC;gBAClF,IAAI,IAAI,GACP,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,+CAAqC,CAAC;oBAC/E,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,+CAAqC,CAAC,CAAA;gBAChF,IAAI,KAAK,GACR,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,oDAA0C,CAAC;oBACpF,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,oDAA0C,CAAC,CAAA;gBACrF,IAAI,MAAM,GACT,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,uDAA6C,CAAC;oBACvF,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,uDAA6C,CAAC,CAAA;gBACxF,IAAI,QAAQ,GACX,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,0DAAgD,CAAC;oBAC1F,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,0DAAgD,CAAC,CAAA;gBAC3F,IAAI,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,sDAA4C,CAAC,CAAA;gBACrG,IAAI,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,sDAA4C,CAAC,CAAA;gBACpG,OAAO,CACN,KAAK;oBACL,CAAC,IAAI,CAAC,CAAC,uCAAwB,CAAC,uCAAwB,CAAC;oBACzD,QAAQ;oBACR,CAAC,KAAK,CAAC,CAAC,uCAAwB,CAAC,uCAAwB,CAAC;oBAC1D,YAAY;oBACZ,CAAC,QAAQ,CAAC,CAAC,uCAAwB,CAAC,uCAAwB,CAAC;oBAC7D,SAAS;oBACT,CAAC,MAAM,CAAC,CAAC,uCAAwB,CAAC,uCAAwB,CAAC;oBAC3D,UAAU;oBACV,CAAC,QAAQ,IAAI,SAAS,CAAC,CAAC,wCAAyB,CAAC,sCAAuB,CAAC,CAC1E,CAAA;YACF,CAAC;iBAAM,CAAC;gBACP,OAAO,MAAM,yCAA0B,CAAA;YACxC,CAAC;QACF,CAAC;aAAM,CAAC;YACP,OAAO,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;QAC/B,CAAC;IACF,CAAC;IAED,iBAAiB;QAChB,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;YAC5B,gDAAgD;YAChD,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACvC,CAAC;aAAM,CAAC;YACP,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACzC,CAAC;IACF,CAAC;CACD","sourcesContent":["import { createCustomDomainCheckGetIn } from \"../../common/api/entities/sys/TypeRefs.js\"\nimport type { CustomDomainCheckGetOut } from \"../../common/api/entities/sys/TypeRefs.js\"\nimport { CustomDomainCheckResult, DnsRecordType, DnsRecordValidation } from \"../../common/api/common/TutanotaConstants\"\nimport { LazyLoaded, noOp } from \"@tutao/tutanota-utils\"\nimport { lang } from \"../../common/misc/LanguageViewModel\"\nimport { assertMainOrNode } from \"../../common/api/common/Env\"\nimport { locator } from \"../../common/api/main/CommonLocator\"\nimport { CustomDomainCheckService } from \"../../common/api/entities/sys/Services\"\n\nassertMainOrNode()\n\nexport class DomainDnsStatus {\n\tstatus: LazyLoaded<CustomDomainCheckGetOut>\n\tdomain: string\n\n\tconstructor(cleanDomainName: string, customerId?: Id) {\n\t\tthis.domain = cleanDomainName\n\t\tthis.status = new LazyLoaded(() => {\n\t\t\tlet data = createCustomDomainCheckGetIn({\n\t\t\t\tdomain: cleanDomainName,\n\t\t\t\tcustomer: customerId ?? null,\n\t\t\t})\n\t\t\treturn locator.serviceExecutor.get(CustomDomainCheckService, data)\n\t\t})\n\t}\n\n\tgetLoadedCustomDomainCheckGetOut(): CustomDomainCheckGetOut {\n\t\treturn this.status.getLoaded()\n\t}\n\n\t/**\n\t * Only checks for the required records (MX and spf) to be fine.\n\t * We have this less strict check because one can already use the custom domain (with limitations) even if certain records like dmarc are not yet set properly.\n\t * We want to allow finishing the dialogs succesfully even if just these basic check pass.\n\t * @returns {boolean} true if records are fine.\n\t */\n\tareRecordsFine(): boolean {\n\t\tif (!this.status.isLoaded() || this.status.getLoaded().checkResult !== CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_OK) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst requiredMissingRecords = this.status\n\t\t\t.getLoaded()\n\t\t\t.missingRecords.filter((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_MX || r.type === DnsRecordType.DNS_RECORD_TYPE_TXT_SPF)\n\t\treturn !requiredMissingRecords.length\n\t}\n\n\t/**\n\t * Checks that ALL records are fine. Even the ones that are only recommended.\n\t * We need this check on top of areRecordsFine() because we want to display if some records are not yet set correctly even if the domain can already be used.\n\t * @returns {boolean} true if all records are fine.\n\t */\n\tareAllRecordsFine(): boolean {\n\t\treturn (\n\t\t\tthis.status.isLoaded() &&\n\t\t\tthis.status.getLoaded().checkResult === CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_OK &&\n\t\t\tthis.status.getLoaded().missingRecords.length === 0 &&\n\t\t\tthis.status.getLoaded().invalidRecords.length === 0\n\t\t)\n\t}\n\n\tgetDnsStatusInfo(): string {\n\t\tif (this.status.isLoaded()) {\n\t\t\tlet result = this.status.getLoaded()\n\n\t\t\tif (result.checkResult === CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_OK) {\n\t\t\t\tlet mxOk =\n\t\t\t\t\t!result.missingRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_MX) &&\n\t\t\t\t\t!result.invalidRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_MX)\n\t\t\t\tlet spfOk =\n\t\t\t\t\t!result.missingRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_TXT_SPF) &&\n\t\t\t\t\t!result.invalidRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_TXT_SPF)\n\t\t\t\tlet dkimOk =\n\t\t\t\t\t!result.missingRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_DKIM) &&\n\t\t\t\t\t!result.invalidRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_DKIM)\n\t\t\t\tlet mtaStsOk =\n\t\t\t\t\t!result.missingRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_MTA_STS) &&\n\t\t\t\t\t!result.invalidRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_MTA_STS)\n\t\t\t\tlet dmarcWarn = result.missingRecords.find((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_TXT_DMARC)\n\t\t\t\tlet dmarcBad = result.invalidRecords.find((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_TXT_DMARC)\n\t\t\t\treturn (\n\t\t\t\t\t\"MX \" +\n\t\t\t\t\t(mxOk ? DnsRecordValidation.OK : DnsRecordValidation.BAD) +\n\t\t\t\t\t\", SPF \" +\n\t\t\t\t\t(spfOk ? DnsRecordValidation.OK : DnsRecordValidation.BAD) +\n\t\t\t\t\t\", MTA-STS \" +\n\t\t\t\t\t(mtaStsOk ? DnsRecordValidation.OK : DnsRecordValidation.BAD) +\n\t\t\t\t\t\", DKIM \" +\n\t\t\t\t\t(dkimOk ? DnsRecordValidation.OK : DnsRecordValidation.BAD) +\n\t\t\t\t\t\", DMARC \" +\n\t\t\t\t\t(dmarcBad || dmarcWarn ? DnsRecordValidation.BAD : DnsRecordValidation.OK)\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\treturn \"DNS \" + DnsRecordValidation.BAD\n\t\t\t}\n\t\t} else {\n\t\t\treturn lang.get(\"loading_msg\")\n\t\t}\n\t}\n\n\tloadCurrentStatus(): Promise<void> {\n\t\tif (this.status.isLoaded()) {\n\t\t\t// keep the old status as long as checking again\n\t\t\treturn this.status.reload().then(noOp)\n\t\t} else {\n\t\t\treturn this.status.getAsync().then(noOp)\n\t\t}\n\t}\n}\n"]}