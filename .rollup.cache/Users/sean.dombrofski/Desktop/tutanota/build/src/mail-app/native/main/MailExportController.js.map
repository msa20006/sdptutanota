{"version":3,"file":"MailExportController.js","sourceRoot":"","sources":["../../../../../src/mail-app/native/main/MailExportController.ts"],"names":[],"mappings":"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","sourcesContent":["import { MailboxDetail, MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport { MailBag } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { GENERATED_MAX_ID, getElementId, isSameId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { assertNotNull, delay, filterInt, isNotNull, lastThrow } from \"@tutao/tutanota-utils\"\nimport { HtmlSanitizer } from \"../../../common/misc/HtmlSanitizer.js\"\nimport { ExportFacade } from \"../../../common/native/common/generatedipc/ExportFacade.js\"\nimport { LoginController } from \"../../../common/api/main/LoginController.js\"\nimport { CancelledError } from \"../../../common/api/common/error/CancelledError.js\"\nimport { FileOpenError } from \"../../../common/api/common/error/FileOpenError.js\"\nimport { isOfflineError } from \"../../../common/api/common/utils/ErrorUtils.js\"\nimport { MailExportFacade } from \"../../../common/api/worker/facades/lazy/MailExportFacade.js\"\nimport { SuspensionError } from \"../../../common/api/common/error/SuspensionError\"\nimport { Scheduler } from \"../../../common/api/common/utils/Scheduler\"\nimport { ExportError, ExportErrorReason } from \"../../../common/api/common/error/ExportError\"\nimport { BlobServerUrl } from \"../../../common/api/entities/storage/TypeRefs\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\n\nassertMainOrNode()\n\nexport type MailExportState =\n\t| { type: \"idle\" }\n\t| { type: \"exporting\"; mailboxDetail: MailboxDetail; progress: number; exportedMails: number }\n\t| { type: \"locked\" }\n\t| { type: \"error\"; message: string }\n\t| {\n\t\t\ttype: \"finished\"\n\t\t\tmailboxDetail: MailboxDetail\n\t  }\n\nconst TAG = \"MailboxExport\"\n\n/**\n * Controller to keep the state of mail exporting with the details.\n */\nexport class MailExportController {\n\tprivate _state: Stream<MailExportState> = stream({ type: \"idle\" })\n\tprivate servers?: BlobServerUrl[]\n\tprivate serverIndex: number = 0\n\n\tconstructor(\n\t\tprivate readonly mailExportFacade: MailExportFacade,\n\t\tprivate readonly sanitizer: HtmlSanitizer,\n\t\tprivate readonly exportFacade: ExportFacade,\n\t\tprivate readonly logins: LoginController,\n\t\tprivate readonly mailboxModel: MailboxModel,\n\t\tprivate readonly scheduler: Scheduler,\n\t) {}\n\n\tget state(): Stream<MailExportState> {\n\t\treturn this._state\n\t}\n\n\tprivate get userId(): Id {\n\t\treturn this.logins.getUserController().userId\n\t}\n\n\t/**\n\t * Start exporting the mailbox for the user\n\t * @param mailboxDetail\n\t */\n\tasync startExport(mailboxDetail: MailboxDetail) {\n\t\tconst allMailBags = [assertNotNull(mailboxDetail.mailbox.currentMailBag), ...mailboxDetail.mailbox.archivedMailBags]\n\n\t\ttry {\n\t\t\tawait this.exportFacade.startMailboxExport(this.userId, mailboxDetail.mailbox._id, allMailBags[0]._id, GENERATED_MAX_ID)\n\t\t} catch (e) {\n\t\t\tif (e instanceof CancelledError) {\n\t\t\t\tconsole.log(\"Export start cancelled\")\n\t\t\t\treturn\n\t\t\t} else if (e instanceof ExportError && e.data === ExportErrorReason.LockedForUser) {\n\t\t\t\tthis._state({ type: \"locked\" })\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\n\t\tthis._state({ type: \"exporting\", mailboxDetail: mailboxDetail, progress: 0, exportedMails: 0 })\n\n\t\tawait this.runExport(mailboxDetail, allMailBags, GENERATED_MAX_ID)\n\t}\n\n\tasync resumeIfNeeded() {\n\t\tconst exportState = await this.exportFacade.getMailboxExportState(this.userId)\n\t\tconsole.log(TAG, `Export, previous state: ${exportState?.type}`)\n\t\tif (exportState) {\n\t\t\tif (exportState.type === \"running\") {\n\t\t\t\tconst mailboxDetail = await this.mailboxModel.getMailboxDetailByMailboxId(exportState.mailboxId)\n\t\t\t\tif (mailboxDetail == null) {\n\t\t\t\t\tconsole.warn(TAG, `Did not find mailbox to resume export: ${exportState.mailboxId}`)\n\t\t\t\t\tawait this.cancelExport()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis._state({\n\t\t\t\t\ttype: \"exporting\",\n\t\t\t\t\tmailboxDetail: mailboxDetail,\n\t\t\t\t\tprogress: 0,\n\t\t\t\t\texportedMails: exportState.exportedMails,\n\t\t\t\t})\n\t\t\t\tawait this.resumeExport(mailboxDetail, exportState.mailBagId, exportState.mailId)\n\t\t\t} else if (exportState.type === \"finished\") {\n\t\t\t\tconst mailboxDetail = await this.mailboxModel.getMailboxDetailByMailboxId(exportState.mailboxId)\n\t\t\t\tif (mailboxDetail == null) {\n\t\t\t\t\tconsole.warn(TAG, `Did not find mailbox to resume export: ${exportState.mailboxId}`)\n\t\t\t\t\tawait this.cancelExport()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis._state({ type: \"finished\", mailboxDetail: mailboxDetail })\n\t\t\t} else if (exportState.type === \"locked\") {\n\t\t\t\tthis._state({ type: \"locked\" })\n\t\t\t\tthis.scheduler.scheduleAfter(() => this.resumeIfNeeded(), 1000 * 60 * 5) // 5 min\n\t\t\t}\n\t\t}\n\t}\n\n\tasync openExportDirectory() {\n\t\tif (this._state().type === \"finished\") {\n\t\t\tawait this.exportFacade.openExportDirectory(this.userId)\n\t\t}\n\t}\n\n\t/**\n\t * When the user wants to cancel the exporting\n\t */\n\tasync cancelExport() {\n\t\tthis._state({ type: \"idle\" })\n\t\tawait this.exportFacade.clearExportState(this.userId)\n\t}\n\n\tprivate async resumeExport(mailboxDetail: MailboxDetail, mailbagId: Id, mailId: Id) {\n\t\tconsole.log(TAG, `Resuming export from mail bag: ${mailbagId} ${mailId}`)\n\t\tconst allMailBags = [assertNotNull(mailboxDetail.mailbox.currentMailBag), ...mailboxDetail.mailbox.archivedMailBags]\n\t\tconst currentMailBagIndex = allMailBags.findIndex((mb) => mb._id === mailbagId)\n\t\tconst mailBags = allMailBags.slice(currentMailBagIndex)\n\n\t\tawait this.runExport(mailboxDetail, mailBags, mailId)\n\t}\n\n\tprivate async runExport(mailboxDetail: MailboxDetail, mailBags: MailBag[], mailId: Id) {\n\t\tthis.servers = await this.mailExportFacade.getExportServers(mailboxDetail.mailGroup)\n\t\tfor (const mailBag of mailBags) {\n\t\t\tawait this.exportMailBag(mailBag, mailId)\n\t\t\tif (this._state().type !== \"exporting\") {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif (this._state().type !== \"exporting\") {\n\t\t\treturn\n\t\t}\n\t\tawait this.exportFacade.endMailboxExport(this.userId)\n\t\tthis._state({ type: \"finished\", mailboxDetail: mailboxDetail })\n\t}\n\n\tprivate async exportMailBag(mailBag: MailBag, startId: Id): Promise<void> {\n\t\tlet currentStartId = startId\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tconst downloadedMails = await this.mailExportFacade.loadFixedNumberOfMailsWithCache(mailBag.mails, currentStartId, this.getServerUrl())\n\t\t\t\tif (downloadedMails.length === 0) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tconst downloadedMailDetails = await this.mailExportFacade.loadMailDetails(downloadedMails)\n\t\t\t\tconst attachmentInfo = await this.mailExportFacade.loadAttachments(downloadedMails, this.getServerUrl())\n\t\t\t\tfor (const { mail, mailDetails } of downloadedMailDetails) {\n\t\t\t\t\tif (this._state().type !== \"exporting\") {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tconst mailAttachmentInfo = mail.attachments\n\t\t\t\t\t\t.map((attachmentId) => attachmentInfo.find((attachment) => isSameId(attachment._id, attachmentId)))\n\t\t\t\t\t\t.filter(isNotNull)\n\t\t\t\t\tconst attachments = await this.mailExportFacade.loadAttachmentData(mail, mailAttachmentInfo)\n\t\t\t\t\tconst { makeMailBundle } = await import(\"../../mail/export/Bundler.js\")\n\t\t\t\t\tconst mailBundle = makeMailBundle(this.sanitizer, mail, mailDetails, attachments)\n\n\t\t\t\t\t// can't write export if it was canceled\n\t\t\t\t\tif (this._state().type !== \"exporting\") {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.exportFacade.saveMailboxExport(mailBundle, this.userId, mailBag._id, getElementId(mail))\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof FileOpenError) {\n\t\t\t\t\t\t\tthis._state({ type: \"error\", message: e.message })\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcurrentStartId = getElementId(lastThrow(downloadedMails))\n\t\t\t\tconst currentState = this._state()\n\t\t\t\tif (currentState.type != \"exporting\") {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis._state({ ...currentState, exportedMails: currentState.exportedMails + downloadedMails.length })\n\t\t\t} catch (e) {\n\t\t\t\tif (isOfflineError(e)) {\n\t\t\t\t\tconsole.log(TAG, \"Offline, will retry later\")\n\t\t\t\t\tawait delay(1000 * 60) // 1 min\n\t\t\t\t} else if (e instanceof SuspensionError) {\n\t\t\t\t\tconst timeToWait = Math.max(filterInt(assertNotNull(e.data)), 1)\n\t\t\t\t\tconsole.log(TAG, `Pausing for ${Math.floor(timeToWait / 1000 + 0.5)} seconds`)\n\t\t\t\t\tawait delay(timeToWait)\n\t\t\t\t\tif (this._state().type !== \"exporting\") {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t\tconsole.log(TAG, \"Trying to continue with export\")\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getServerUrl(): string {\n\t\tif (this.servers) {\n\t\t\tthis.serverIndex += 1\n\t\t\tif (this.serverIndex >= this.servers.length) {\n\t\t\t\tthis.serverIndex = 0\n\t\t\t}\n\t\t\treturn this.servers[this.serverIndex].url\n\t\t}\n\t\tthrow new Error(\"No servers\")\n\t}\n}\n"]}