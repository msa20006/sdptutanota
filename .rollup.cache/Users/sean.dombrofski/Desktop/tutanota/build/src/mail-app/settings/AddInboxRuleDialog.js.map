{"version":3,"file":"AddInboxRuleDialog.js","sourceRoot":"","sources":["../../../../src/mail-app/settings/AddInboxRuleDialog.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAM,SAAS,CAAA;AACvB,OAAO,EAAE,MAAM,EAAE,MAAM,8BAA8B,CAAA;AACrD,OAAO,EAAE,IAAI,EAAkB,MAAM,qCAAqC,CAAA;AAC1E,OAAO,EAAiB,WAAW,EAAE,MAAM,2CAA2C,CAAA;AACtF,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAA;AACpG,OAAO,EAAE,2BAA2B,EAAE,MAAM,gCAAgC,CAAA;AAE5E,OAAO,EAAE,eAAe,EAAE,MAAM,gDAAgD,CAAA;AAEhF,OAAO,MAAM,MAAM,gBAAgB,CAAA;AACnC,OAAO,EAAE,gBAAgB,EAAE,MAAM,2CAA2C,CAAA;AAC5E,OAAO,EAAkB,SAAS,EAAE,MAAM,oCAAoC,CAAA;AAC9E,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAA;AACjD,OAAO,EAAE,WAAW,EAAE,MAAM,yCAAyC,CAAA;AACrE,OAAO,EAAE,6BAA6B,EAAE,MAAM,uCAAuC,CAAA;AACrF,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,2CAA2C,CAAA;AACnF,OAAO,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAA;AAC9D,OAAO,EAAE,OAAO,EAAE,MAAM,qCAAqC,CAAA;AAC7D,OAAO,EAAE,cAAc,EAAE,MAAM,6CAA6C,CAAA;AAC5E,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAA;AAC/C,OAAO,EACN,wBAAwB,EACxB,sBAAsB,EACtB,aAAa,EACb,gCAAgC,EAChC,qBAAqB,GACrB,MAAM,4BAA4B,CAAA;AAGnC,gBAAgB,EAAE,CAAA;AAOlB,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,aAA4B,EAAE,cAAiC;IACzF,IAAI,OAAO,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,aAAa,EAAE,EAAE,CAAC;QACxD,6BAA6B,EAAE,CAAA;IAChC,CAAC;SAAM,IAAI,aAAa,IAAI,aAAa,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3D,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,sBAAsB,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;QACrG,IAAI,aAAa,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,CAAC,UAA0B,EAAE,EAAE;YAChF,OAAO;gBACN,IAAI,EAAE,gCAAgC,CAAC,UAAU,CAAC;gBAClD,KAAK,EAAE,UAAU,CAAC,MAAM;aACxB,CAAA;QACF,CAAC,CAAC,CAAA;QACF,MAAM,aAAa,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QACjD,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;QACnD,MAAM,cAAc,GAAG,cAAc,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAA;QACrI,MAAM,eAAe,GAAG,MAAM,CAAC,cAAc,IAAI,wBAAwB,CAAC,OAAO,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC,CAAA;QAExG,IAAI,IAAI,GAAG,GAAG,EAAE,CAAC;YAChB,CAAC,CAAC,gBAAgB,EAAE;gBACnB,KAAK,EAAE,2BAA2B,EAAE;gBACpC,KAAK,EAAE,sBAAsB;gBAC7B,aAAa,EAAE,aAAa,EAAE;gBAC9B,uBAAuB,EAAE,aAAa;aACtC,CAAC;YACF,CAAC,CAAC,SAAS,EAAE;gBACZ,KAAK,EAAE,sBAAsB;gBAC7B,cAAc,kCAAqB;gBACnC,KAAK,EAAE,cAAc,EAAE;gBACvB,OAAO,EAAE,cAAc;gBACvB,SAAS,EAAE,GAAG,EAAE,CACf,aAAa,EAAE,6CAAmC,IAAI,aAAa,EAAE,iDAAuC;oBAC3G,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,8BAA8B,CAAC;oBAC1C,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC;aAC/B,CAAC;YACF,CAAC,CAAC,gBAAgB,EAAE;gBACnB,KAAK,EAAE,6BAA6B;gBACpC,KAAK,EAAE,aAAa;gBACpB,aAAa,EAAE,eAAe,EAAE;gBAChC,oBAAoB,EAAE,aAAa,CAAC,eAAe,EAAE,CAAC;gBACtD,uBAAuB,EAAE,eAAe;gBACxC,SAAS,EAAE,GAAG,EAAE,CAAC,qBAAqB,CAAC,OAAO,EAAE,eAAe,EAAE,EAAE,IAAI,CAAC;aACxE,CAAC;SACF,CAAA;QAED,MAAM,oBAAoB,GAAG,CAAC,MAAc,EAAE,EAAE;YAC/C,IAAI,IAAI,GAAG,eAAe,CAAC;gBAC1B,IAAI,EAAE,aAAa,EAAE;gBACrB,KAAK,EAAE,eAAe,CAAC,aAAa,EAAE,EAAE,cAAc,EAAE,CAAC;gBACzD,YAAY,EAAE,eAAe,EAAE,CAAC,GAAG;aACnC,CAAC,CAAA;YACF,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAK,CAAA;YACtD,MAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAA;YACnC,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAA;YACjC,KAAK,CAAC,UAAU,GAAG,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAA;YAE/I,OAAO,CAAC,YAAY;iBAClB,MAAM,CAAC,KAAK,CAAC;iBACb,IAAI,CAAC,GAAG,EAAE;gBACV,MAAM,CAAC,KAAK,EAAE,CAAA;YACf,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBAChB,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;oBAC3B,KAAK,CAAC,UAAU,GAAG,UAAU,CAAA;oBAC7B,cAAc;oBACd,MAAM,KAAK,CAAA;gBACZ,CAAC;qBAAM,IAAI,KAAK,YAAY,WAAW,EAAE,CAAC;oBACzC,MAAM,CAAC,KAAK,EAAE,CAAA;gBACf,CAAC;qBAAM,CAAC;oBACP,KAAK,CAAC,UAAU,GAAG,UAAU,CAAA;oBAC7B,MAAM,CAAC,KAAK,EAAE,CAAA;oBACd,MAAM,KAAK,CAAA;gBACZ,CAAC;YACF,CAAC,CAAC,CAAA;QACJ,CAAC,CAAA;QAED,MAAM,CAAC,gBAAgB,CAAC;YACvB,KAAK,EAAE,qBAAqB;YAC5B,KAAK,EAAE,IAAI;YACX,SAAS,EAAE,GAAG,EAAE,CAAC,sBAAsB,CAAC,aAAa,EAAE,EAAE,cAAc,EAAE,EAAE,cAAc,CAAC,GAAG,CAAC;YAC9F,iBAAiB,EAAE,IAAI;YACvB,QAAQ,EAAE,oBAAoB;SAC9B,CAAC,CAAA;IACH,CAAC;AACF,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,QAAuB,EAAE,KAAoB;IACpF,OAAO;QACN,IAAI,EAAE,QAAQ,uCAA6B;QAC3C,KAAK,EAAE,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,KAAK,IAAI,EAAE,CAAC;KACxD,CAAA;AACF,CAAC;AAED,SAAS,sBAAsB,CAAC,IAAY,EAAE,KAAa,EAAE,MAAsB;IAClF,IAAI,mBAAmB,GAAG,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;IAEtD,IAAI,mBAAmB,KAAK,EAAE,EAAE,CAAC;QAChC,OAAO,yBAAyB,CAAA;IACjC,CAAC;SAAM,IAAI,cAAc,CAAC,mBAAmB,CAAC,EAAE,CAAC;QAChD,OAAO,wBAAwB,CAAA;IAChC,CAAC;SAAM,IACN,IAAI,6CAAmC;QACvC,IAAI,iDAAuC;QAC3C,CAAC,mBAAmB,CAAC,mBAAmB,CAAC;QACzC,CAAC,YAAY,CAAC,mBAAmB,CAAC;QAClC,CAAC,aAAa,CAAC,mBAAmB,EAAE,KAAK,CAAC,EACzC,CAAC;QACF,OAAO,kCAAkC,CAAA;IAC1C,CAAC;SAAM,CAAC;QACP,IAAI,YAAY,GAAG,sBAAsB,CAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAK,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAA;QAE9G,IAAI,YAAY,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;YAClF,OAAO,4BAA4B,CAAA;QACpC,CAAC;IACF,CAAC;IAED,OAAO,IAAI,CAAA;AACZ,CAAC;AAED,SAAS,eAAe,CAAC,IAAY,EAAE,KAAa;IACnD,IAAI,IAAI,6CAAmC,IAAI,IAAI,iDAAuC,EAAE,CAAC;QAC5F,OAAO,KAAK,CAAA;IACb,CAAC;SAAM,CAAC;QACP,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAA;IAClC,CAAC;AACF,CAAC;AAED;;;;GAIG;AACH,SAAS,cAAc,CAAC,KAAa;IACpC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAA,CAAC,gEAAgE;IAE9G,IAAI,CAAC;QACJ,mDAAmD;QACnD,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAA;IAC9D,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACZ,OAAO,IAAI,CAAA;IACZ,CAAC;IAED,OAAO,KAAK,CAAA;AACb,CAAC","sourcesContent":["import m from \"mithril\"\nimport { Dialog } from \"../../common/gui/base/Dialog\"\nimport { lang, TranslationKey } from \"../../common/misc/LanguageViewModel\"\nimport { InboxRuleType, MailSetKind } from \"../../common/api/common/TutanotaConstants\"\nimport { isDomainName, isMailAddress, isRegularExpression } from \"../../common/misc/FormatValidator\"\nimport { getInboxRuleTypeNameMapping } from \"../mail/model/InboxRuleHandler\"\nimport type { InboxRule } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { createInboxRule } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport type { MailboxDetail } from \"../../common/mailFunctionality/MailboxModel.js\"\nimport stream from \"mithril/stream\"\nimport { DropDownSelector } from \"../../common/gui/base/DropDownSelector.js\"\nimport { Autocapitalize, TextField } from \"../../common/gui/base/TextField.js\"\nimport { neverNull } from \"@tutao/tutanota-utils\"\nimport { LockedError } from \"../../common/api/common/error/RestError\"\nimport { showNotAvailableForFreeDialog } from \"../../common/misc/SubscriptionDialogs\"\nimport { elementIdPart, isSameId } from \"../../common/api/common/utils/EntityUtils\"\nimport { assertMainOrNode } from \"../../common/api/common/Env\"\nimport { locator } from \"../../common/api/main/CommonLocator\"\nimport { isOfflineError } from \"../../common/api/common/utils/ErrorUtils.js\"\nimport { mailLocator } from \"../mailLocator.js\"\nimport {\n\tassertSystemFolderOfType,\n\tgetExistingRuleForType,\n\tgetFolderName,\n\tgetIndentedFolderNameForDropdown,\n\tgetPathToFolderString,\n} from \"../mail/model/MailUtils.js\"\nimport type { IndentedFolder } from \"../../common/api/common/mail/FolderSystem.js\"\n\nassertMainOrNode()\n\nexport type InboxRuleTemplate = Pick<InboxRule, \"type\" | \"value\"> & {\n\t_id?: InboxRule[\"_id\"]\n\ttargetFolder?: InboxRule[\"targetFolder\"]\n}\n\nexport async function show(mailBoxDetail: MailboxDetail, ruleOrTemplate: InboxRuleTemplate) {\n\tif (locator.logins.getUserController().isFreeAccount()) {\n\t\tshowNotAvailableForFreeDialog()\n\t} else if (mailBoxDetail && mailBoxDetail.mailbox.folders) {\n\t\tconst folders = await mailLocator.mailModel.getMailboxFoldersForId(mailBoxDetail.mailbox.folders._id)\n\t\tlet targetFolders = folders.getIndentedList().map((folderInfo: IndentedFolder) => {\n\t\t\treturn {\n\t\t\t\tname: getIndentedFolderNameForDropdown(folderInfo),\n\t\t\t\tvalue: folderInfo.folder,\n\t\t\t}\n\t\t})\n\t\tconst inboxRuleType = stream(ruleOrTemplate.type)\n\t\tconst inboxRuleValue = stream(ruleOrTemplate.value)\n\t\tconst selectedFolder = ruleOrTemplate.targetFolder == null ? null : folders.getFolderById(elementIdPart(ruleOrTemplate.targetFolder))\n\t\tconst inboxRuleTarget = stream(selectedFolder ?? assertSystemFolderOfType(folders, MailSetKind.ARCHIVE))\n\n\t\tlet form = () => [\n\t\t\tm(DropDownSelector, {\n\t\t\t\titems: getInboxRuleTypeNameMapping(),\n\t\t\t\tlabel: \"inboxRuleField_label\",\n\t\t\t\tselectedValue: inboxRuleType(),\n\t\t\t\tselectionChangedHandler: inboxRuleType,\n\t\t\t}),\n\t\t\tm(TextField, {\n\t\t\t\tlabel: \"inboxRuleValue_label\",\n\t\t\t\tautocapitalize: Autocapitalize.none,\n\t\t\t\tvalue: inboxRuleValue(),\n\t\t\t\toninput: inboxRuleValue,\n\t\t\t\thelpLabel: () =>\n\t\t\t\t\tinboxRuleType() !== InboxRuleType.SUBJECT_CONTAINS && inboxRuleType() !== InboxRuleType.MAIL_HEADER_CONTAINS\n\t\t\t\t\t\t? lang.get(\"emailSenderPlaceholder_label\")\n\t\t\t\t\t\t: lang.get(\"emptyString_msg\"),\n\t\t\t}),\n\t\t\tm(DropDownSelector, {\n\t\t\t\tlabel: \"inboxRuleTargetFolder_label\",\n\t\t\t\titems: targetFolders,\n\t\t\t\tselectedValue: inboxRuleTarget(),\n\t\t\t\tselectedValueDisplay: getFolderName(inboxRuleTarget()),\n\t\t\t\tselectionChangedHandler: inboxRuleTarget,\n\t\t\t\thelpLabel: () => getPathToFolderString(folders, inboxRuleTarget(), true),\n\t\t\t}),\n\t\t]\n\n\t\tconst addInboxRuleOkAction = (dialog: Dialog) => {\n\t\t\tlet rule = createInboxRule({\n\t\t\t\ttype: inboxRuleType(),\n\t\t\t\tvalue: getCleanedValue(inboxRuleType(), inboxRuleValue()),\n\t\t\t\ttargetFolder: inboxRuleTarget()._id,\n\t\t\t})\n\t\t\tconst props = locator.logins.getUserController().props\n\t\t\tconst inboxRules = props.inboxRules\n\t\t\tconst ruleId = ruleOrTemplate._id\n\t\t\tprops.inboxRules = ruleId == null ? [...inboxRules, rule] : inboxRules.map((inboxRule) => (isSameId(inboxRule._id, ruleId) ? rule : inboxRule))\n\n\t\t\tlocator.entityClient\n\t\t\t\t.update(props)\n\t\t\t\t.then(() => {\n\t\t\t\t\tdialog.close()\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tif (isOfflineError(error)) {\n\t\t\t\t\t\tprops.inboxRules = inboxRules\n\t\t\t\t\t\t//do not close\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t} else if (error instanceof LockedError) {\n\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprops.inboxRules = inboxRules\n\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t}\n\n\t\tDialog.showActionDialog({\n\t\t\ttitle: \"addInboxRule_action\",\n\t\t\tchild: form,\n\t\t\tvalidator: () => validateInboxRuleInput(inboxRuleType(), inboxRuleValue(), ruleOrTemplate._id),\n\t\t\tallowOkWithReturn: true,\n\t\t\tokAction: addInboxRuleOkAction,\n\t\t})\n\t}\n}\n\nexport function createInboxRuleTemplate(ruleType: string | null, value: string | null): InboxRuleTemplate {\n\treturn {\n\t\ttype: ruleType ?? InboxRuleType.FROM_EQUALS,\n\t\tvalue: getCleanedValue(neverNull(ruleType), value || \"\"),\n\t}\n}\n\nfunction validateInboxRuleInput(type: string, value: string, ruleId: Id | undefined): TranslationKey | null {\n\tlet currentCleanedValue = getCleanedValue(type, value)\n\n\tif (currentCleanedValue === \"\") {\n\t\treturn \"inboxRuleEnterValue_msg\"\n\t} else if (isInvalidRegex(currentCleanedValue)) {\n\t\treturn \"invalidRegexSyntax_msg\"\n\t} else if (\n\t\ttype !== InboxRuleType.SUBJECT_CONTAINS &&\n\t\ttype !== InboxRuleType.MAIL_HEADER_CONTAINS &&\n\t\t!isRegularExpression(currentCleanedValue) &&\n\t\t!isDomainName(currentCleanedValue) &&\n\t\t!isMailAddress(currentCleanedValue, false)\n\t) {\n\t\treturn \"inboxRuleInvalidEmailAddress_msg\"\n\t} else {\n\t\tlet existingRule = getExistingRuleForType(locator.logins.getUserController().props, currentCleanedValue, type)\n\n\t\tif (existingRule && (!ruleId || (ruleId && !isSameId(existingRule._id, ruleId)))) {\n\t\t\treturn \"inboxRuleAlreadyExists_msg\"\n\t\t}\n\t}\n\n\treturn null\n}\n\nfunction getCleanedValue(type: string, value: string) {\n\tif (type === InboxRuleType.SUBJECT_CONTAINS || type === InboxRuleType.MAIL_HEADER_CONTAINS) {\n\t\treturn value\n\t} else {\n\t\treturn value.trim().toLowerCase()\n\t}\n}\n\n/**\n * @param value\n * @returns true if provided string is a regex and it's unparseable by RegExp, else false\n * @private\n */\nfunction isInvalidRegex(value: string) {\n\tif (!isRegularExpression(value)) return false // not a regular expression is not an invalid regular expression\n\n\ttry {\n\t\t// RegExp ctor throws a ParseError if invalid regex\n\t\tlet regExp = new RegExp(value.substring(1, value.length - 1))\n\t} catch (e) {\n\t\treturn true\n\t}\n\n\treturn false\n}\n"]}