{"version":3,"file":"MailReportDialog.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/view/MailReportDialog.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Mail, MailboxProperties } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { Checkbox } from \"../../../common/gui/base/Checkbox.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport m from \"mithril\"\nimport { MailReportType, ReportMovedMailsType } from \"../../../common/api/common/TutanotaConstants\"\nimport { ButtonAttrs, ButtonType } from \"../../../common/gui/base/Button.js\"\nimport { Dialog } from \"../../../common/gui/base/Dialog\"\nimport type { MailboxDetail, MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { showSnackBar } from \"../../../common/gui/base/SnackBar\"\nimport { MailModel } from \"../model/MailModel.js\"\n\nfunction confirmMailReportDialog(mailModel: MailModel, mailboxDetails: MailboxDetail): Promise<boolean> {\n\treturn new Promise((resolve) => {\n\t\tlet shallRememberDecision = false\n\t\tconst child = () =>\n\t\t\tm(Checkbox, {\n\t\t\t\tlabel: () => lang.get(\"rememberDecision_msg\"),\n\t\t\t\tchecked: shallRememberDecision,\n\t\t\t\tonChecked: (v) => (shallRememberDecision = v),\n\t\t\t\thelpLabel: \"changeMailSettings_msg\",\n\t\t\t})\n\n\t\tasync function updateSpamReportSetting(areMailsReported: boolean) {\n\t\t\tif (shallRememberDecision) {\n\t\t\t\tconst reportMovedMails = areMailsReported ? ReportMovedMailsType.AUTOMATICALLY_ONLY_SPAM : ReportMovedMailsType.NEVER\n\t\t\t\tawait mailModel.saveReportMovedMails(mailboxDetails.mailboxGroupRoot, reportMovedMails)\n\t\t\t}\n\n\t\t\tresolve(areMailsReported)\n\t\t\tdialog.close()\n\t\t}\n\n\t\tconst yesButton: ButtonAttrs = {\n\t\t\tlabel: \"yes_label\",\n\t\t\tclick: () => updateSpamReportSetting(true),\n\t\t\ttype: ButtonType.Primary,\n\t\t}\n\t\tconst noButton: ButtonAttrs = {\n\t\t\tlabel: \"no_label\",\n\t\t\tclick: () => updateSpamReportSetting(false),\n\t\t\ttype: ButtonType.Secondary,\n\t\t}\n\n\t\t// onclose is called when dialog is closed by ESC or back button. In this case we don't want to report spam.\n\t\tconst onclose = () => {\n\t\t\tresolve(false)\n\t\t}\n\n\t\tconst dialog = Dialog.confirmMultiple(\n\t\t\tlang.makeTranslation(\"unencryptedTransmission_msg\", lang.get(\"unencryptedTransmission_msg\") + \" \" + lang.get(\"allowOperation_msg\")),\n\t\t\t[noButton, yesButton],\n\t\t\tonclose,\n\t\t\tchild,\n\t\t)\n\t})\n}\n\n/**\n * Check if the user wants to report mails as spam when they are moved to the spam folder and report them.\n * May open a dialog for confirmation and otherwise shows a Snackbar before reporting to the server.\n */\nexport async function reportMailsAutomatically(\n\tmailReportType: MailReportType,\n\tmailboxModel: MailboxModel,\n\tmailModel: MailModel,\n\tmailboxDetails: MailboxDetail,\n\tmails: ReadonlyArray<Mail>,\n): Promise<void> {\n\tif (mailReportType !== MailReportType.SPAM) {\n\t\treturn\n\t}\n\n\tconst mailboxProperties = await mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot)\n\tlet allowUndoing = true // decides if a snackbar is shown to prevent the server request\n\n\tlet isReportable = false\n\n\tif (!mailboxProperties || mailboxProperties.reportMovedMails === ReportMovedMailsType.ALWAYS_ASK) {\n\t\tisReportable = await confirmMailReportDialog(mailModel, mailboxDetails)\n\t\tallowUndoing = false\n\t} else if (mailboxProperties.reportMovedMails === ReportMovedMailsType.AUTOMATICALLY_ONLY_SPAM) {\n\t\tisReportable = true\n\t} else if (mailboxProperties.reportMovedMails === ReportMovedMailsType.NEVER) {\n\t\t// no report\n\t}\n\n\tif (isReportable) {\n\t\t// only show the snackbar to undo the report if the user was not asked already\n\t\tif (allowUndoing) {\n\t\t\tlet undoClicked = false\n\t\t\tshowSnackBar({\n\t\t\t\tmessage: \"undoMailReport_msg\",\n\t\t\t\tbutton: {\n\t\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\t\tclick: () => (undoClicked = true),\n\t\t\t\t},\n\t\t\t\tonClose: () => {\n\t\t\t\t\tif (!undoClicked) {\n\t\t\t\t\t\tmailModel.reportMails(mailReportType, mails)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t})\n\t\t} else {\n\t\t\tmailModel.reportMails(mailReportType, mails)\n\t\t}\n\t}\n}\n"]}