{"version":3,"file":"MailModel.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/model/MailModel.ts"],"names":[],"mappings":"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","sourcesContent":["import Stream from \"mithril/stream\"\nimport stream from \"mithril/stream\"\nimport { MailboxCounters, MailboxDetail, MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { FolderSystem } from \"../../../common/api/common/mail/FolderSystem.js\"\nimport {\n\tassertNotNull,\n\tcollectToMap,\n\tgetFirstOrThrow,\n\tgroupBy,\n\tisNotNull,\n\tlazyMemoized,\n\tneverNull,\n\tnoOp,\n\tofClass,\n\tpartition,\n\tpromiseMap,\n\tsplitInChunks,\n} from \"@tutao/tutanota-utils\"\nimport {\n\tMail,\n\tMailboxGroupRoot,\n\tMailboxProperties,\n\tMailFolder,\n\tMailFolderTypeRef,\n\tMailSetEntryTypeRef,\n\tMailTypeRef,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport {\n\tFeatureType,\n\tisLabel,\n\tMailReportType,\n\tMailSetKind,\n\tMAX_NBR_MOVE_DELETE_MAIL_SERVICE,\n\tOperationType,\n\tReportMovedMailsType,\n} from \"../../../common/api/common/TutanotaConstants.js\"\nimport { CUSTOM_MIN_ID, elementIdPart, GENERATED_MAX_ID, getElementId, getListId, isSameId, listIdPart } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { containsEventOfType, EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport m from \"mithril\"\nimport { WebsocketCounterData } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { Notifications, NotificationType } from \"../../../common/gui/Notifications.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel.js\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError.js\"\nimport { LockedError, NotFoundError, PreconditionFailedError } from \"../../../common/api/common/error/RestError.js\"\nimport { UserError } from \"../../../common/api/main/UserError.js\"\nimport { EventController } from \"../../../common/api/main/EventController.js\"\nimport { InboxRuleHandler } from \"./InboxRuleHandler.js\"\nimport { WebsocketConnectivityModel } from \"../../../common/misc/WebsocketConnectivityModel.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { LoginController } from \"../../../common/api/main/LoginController.js\"\nimport { MailFacade } from \"../../../common/api/worker/facades/lazy/MailFacade.js\"\nimport { assertSystemFolderOfType } from \"./MailUtils.js\"\nimport { isSpamOrTrashFolder } from \"./MailChecks.js\"\n\ninterface MailboxSets {\n\tfolders: FolderSystem\n\t/** a map from element id to the mail set */\n\tlabels: ReadonlyMap<Id, MailFolder>\n}\n\nexport const enum LabelState {\n\t/** Label was applied to all emails*/\n\tApplied,\n\t/** Label was applied to some of the emails but not to others*/\n\tAppliedToSome,\n\t/** Label was applied to none of the emails */\n\tNotApplied,\n}\n\nexport class MailModel {\n\treadonly mailboxCounters: Stream<MailboxCounters> = stream({})\n\t/**\n\t * map from mailbox folders list to folder system\n\t */\n\tprivate mailSets: Map<Id, MailboxSets> = new Map()\n\n\tconstructor(\n\t\tprivate readonly notifications: Notifications,\n\t\tprivate readonly mailboxModel: MailboxModel,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly logins: LoginController,\n\t\tprivate readonly mailFacade: MailFacade,\n\t\tprivate readonly connectivityModel: WebsocketConnectivityModel | null,\n\t\tprivate readonly inboxRuleHandler: InboxRuleHandler | null,\n\t) {}\n\n\t// only init listeners once\n\tprivate readonly initListeners = lazyMemoized(() => {\n\t\tthis.eventController.addEntityListener((updates) => this.entityEventsReceived(updates))\n\n\t\tthis.eventController.getCountersStream().map((update) => {\n\t\t\tthis._mailboxCountersUpdates(update)\n\t\t})\n\n\t\tthis.mailboxModel.mailboxDetails.map(() => {\n\t\t\t// this can cause little race between loading the folders but it should be fine\n\t\t\tthis.loadMailSets().then((newFolders) => (this.mailSets = newFolders))\n\t\t})\n\t})\n\n\tasync init(): Promise<void> {\n\t\tthis.initListeners()\n\t\tthis.mailSets = await this.loadMailSets()\n\t}\n\n\tprivate async loadMailSets(): Promise<Map<Id, MailboxSets>> {\n\t\tconst mailboxDetails = await this.mailboxModel.getMailboxDetails()\n\n\t\tconst tempFolders = new Map<Id, MailboxSets>()\n\n\t\tfor (let detail of mailboxDetails) {\n\t\t\tif (detail.mailbox.folders) {\n\t\t\t\tconst mailSets = await this.loadMailSetsForListId(neverNull(detail.mailbox.folders).folders)\n\t\t\t\tconst [labels, folders] = partition(mailSets, isLabel)\n\t\t\t\tconst labelsMap = collectToMap(labels, getElementId)\n\t\t\t\tconst folderSystem = new FolderSystem(folders)\n\t\t\t\ttempFolders.set(detail.mailbox.folders._id, { folders: folderSystem, labels: labelsMap })\n\t\t\t}\n\t\t}\n\t\treturn tempFolders\n\t}\n\n\tprivate loadMailSetsForListId(listId: Id): Promise<MailFolder[]> {\n\t\treturn this.entityClient.loadAll(MailFolderTypeRef, listId).then((folders) => {\n\t\t\treturn folders.filter((f) => {\n\t\t\t\t// We do not show spam or archive for external users\n\t\t\t\tif (!this.logins.isInternalUserLoggedIn() && (f.folderType === MailSetKind.SPAM || f.folderType === MailSetKind.ARCHIVE)) {\n\t\t\t\t\treturn false\n\t\t\t\t} else {\n\t\t\t\t\treturn !(this.logins.isEnabled(FeatureType.InternalCommunication) && f.folderType === MailSetKind.SPAM)\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\tprivate async getFolders(): Promise<Map<Id, MailboxSets>> {\n\t\tif (this.mailSets.size === 0) {\n\t\t\treturn await this.loadMailSets()\n\t\t} else {\n\t\t\treturn this.mailSets\n\t\t}\n\t}\n\n\t// visibleForTesting\n\tasync entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\tfor (const update of updates) {\n\t\t\tif (isUpdateForTypeRef(MailFolderTypeRef, update)) {\n\t\t\t\tawait this.init()\n\t\t\t\tm.redraw()\n\t\t\t} else if (\n\t\t\t\tisUpdateForTypeRef(MailTypeRef, update) &&\n\t\t\t\tupdate.operation === OperationType.CREATE &&\n\t\t\t\t!containsEventOfType(updates, OperationType.DELETE, update.instanceId)\n\t\t\t) {\n\t\t\t\tif (this.inboxRuleHandler && this.connectivityModel) {\n\t\t\t\t\tconst mailId: IdTuple = [update.instanceListId, update.instanceId]\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst mail = await this.entityClient.load(MailTypeRef, mailId)\n\t\t\t\t\t\tconst folder = this.getMailFolderForMail(mail)\n\n\t\t\t\t\t\tif (folder && folder.folderType === MailSetKind.INBOX) {\n\t\t\t\t\t\t\t// If we don't find another delete operation on this email in the batch, then it should be a create operation,\n\t\t\t\t\t\t\t// otherwise it's a move\n\t\t\t\t\t\t\tawait this.getMailboxDetailsForMail(mail)\n\t\t\t\t\t\t\t\t.then((mailboxDetail) => {\n\t\t\t\t\t\t\t\t\t// We only apply rules on server if we are the leader in case of incoming messages\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\tmailboxDetail &&\n\t\t\t\t\t\t\t\t\t\tthis.inboxRuleHandler?.findAndApplyMatchingRule(\n\t\t\t\t\t\t\t\t\t\t\tmailboxDetail,\n\t\t\t\t\t\t\t\t\t\t\tmail,\n\t\t\t\t\t\t\t\t\t\t\tthis.connectivityModel ? this.connectivityModel.isLeader() : false,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then((newFolderAndMail) => {\n\t\t\t\t\t\t\t\t\tif (newFolderAndMail) {\n\t\t\t\t\t\t\t\t\t\tthis._showNotification(newFolderAndMail.folder, newFolderAndMail.mail)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis._showNotification(folder, mail)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch(noOp)\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t\t\tconsole.log(`Could not find updated mail ${JSON.stringify(mailId)}`)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getMailboxDetailsForMail(mail: Mail): Promise<MailboxDetail | null> {\n\t\tconst detail = await this.mailboxModel.getMailboxDetailsForMailGroup(assertNotNull(mail._ownerGroup))\n\t\tif (detail == null) {\n\t\t\tconsole.warn(\"Mailbox detail for mail does not exist\", mail)\n\t\t}\n\t\treturn detail\n\t}\n\n\tasync getMailboxDetailsForMailFolder(mailFolder: MailFolder): Promise<MailboxDetail | null> {\n\t\tconst detail = await this.mailboxModel.getMailboxDetailsForMailGroup(assertNotNull(mailFolder._ownerGroup))\n\t\tif (detail == null) {\n\t\t\tconsole.warn(\"Mailbox detail for mail folder does not exist\", mailFolder)\n\t\t}\n\t\treturn detail\n\t}\n\n\tasync getMailboxFoldersForMail(mail: Mail): Promise<FolderSystem | null> {\n\t\tconst mailboxDetail = await this.getMailboxDetailsForMail(mail)\n\t\tif (mailboxDetail && mailboxDetail.mailbox.folders) {\n\t\t\tconst folders = await this.getFolders()\n\t\t\treturn folders.get(mailboxDetail.mailbox.folders._id)?.folders ?? null\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\tasync getMailboxFoldersForId(foldersId: Id): Promise<FolderSystem> {\n\t\tconst folderStructures = await this.loadMailSets()\n\t\tconst folderSystem = folderStructures.get(foldersId)?.folders\n\t\tif (folderSystem == null) {\n\t\t\tthrow new ProgrammingError(`no folder system for folder id ${foldersId}`)\n\t\t}\n\t\treturn folderSystem\n\t}\n\n\tgetMailFolderForMail(mail: Mail): MailFolder | null {\n\t\tconst folderSystem = this.getFolderSystemByGroupId(assertNotNull(mail._ownerGroup))\n\t\tif (folderSystem == null) return null\n\n\t\treturn folderSystem.getFolderByMail(mail)\n\t}\n\n\tgetFolderSystemByGroupId(groupId: Id): FolderSystem | null {\n\t\treturn this.getMailSetsForGroup(groupId)?.folders ?? null\n\t}\n\n\tgetLabelsByGroupId(groupId: Id): ReadonlyMap<Id, MailFolder> {\n\t\treturn this.getMailSetsForGroup(groupId)?.labels ?? new Map()\n\t}\n\n\t/**\n\t * @return all labels that could be applied to the {@param mails} with the state relative to {@param mails}.\n\t */\n\tgetLabelStatesForMails(mails: readonly Mail[]): { label: MailFolder; state: LabelState }[] {\n\t\tif (mails.length === 0) {\n\t\t\treturn []\n\t\t}\n\t\tconst labels = this.getLabelsByGroupId(assertNotNull(getFirstOrThrow(mails)._ownerGroup))\n\t\tconst allUsedSets = new Map<Id, number>()\n\t\tfor (const mail of mails) {\n\t\t\tfor (const set of mail.sets) {\n\t\t\t\tconst currentValue = allUsedSets.get(elementIdPart(set)) ?? 0\n\t\t\t\tallUsedSets.set(elementIdPart(set), currentValue + 1)\n\t\t\t}\n\t\t}\n\n\t\treturn Array.from(labels.values()).map((label) => {\n\t\t\tconst count = allUsedSets.get(getElementId(label)) ?? 0\n\t\t\tconst state: LabelState = count === 0 ? LabelState.NotApplied : count === mails.length ? LabelState.Applied : LabelState.AppliedToSome\n\t\t\treturn { label, state }\n\t\t})\n\t}\n\n\tgetLabelsForMails(mails: readonly Mail[]): ReadonlyMap<Id, ReadonlyArray<MailFolder>> {\n\t\tconst labelsForMails = new Map<Id, MailFolder[]>()\n\t\tfor (const mail of mails) {\n\t\t\tlabelsForMails.set(getElementId(mail), this.getLabelsForMail(mail))\n\t\t}\n\n\t\treturn labelsForMails\n\t}\n\n\t/**\n\t * @return labels that are currently applied to {@param mail}.\n\t */\n\tgetLabelsForMail(mail: Mail): MailFolder[] {\n\t\tconst groupLabels = this.getLabelsByGroupId(assertNotNull(mail._ownerGroup))\n\t\treturn mail.sets.map((labelId) => groupLabels.get(elementIdPart(labelId))).filter(isNotNull)\n\t}\n\n\tprivate getMailSetsForGroup(groupId: Id): MailboxSets | null {\n\t\tconst mailboxDetails = this.mailboxModel.mailboxDetails() || []\n\t\tconst detail = mailboxDetails.find((md) => groupId === md.mailGroup._id)\n\t\tconst sets = detail?.mailbox?.folders?._id\n\t\tif (sets == null) {\n\t\t\treturn null\n\t\t}\n\t\treturn this.mailSets.get(sets) ?? null\n\t}\n\n\t/**\n\t * Finally move all given mails. Caller must ensure that mails are only from\n\t * * one folder (because we send one source folder)\n\t * * from one list (for locking it on the server)\n\t */\n\tasync _moveMails(mails: Mail[], targetMailFolder: MailFolder): Promise<void> {\n\t\t// Do not move if target is the same as the current mailFolder\n\t\tconst sourceMailFolder = this.getMailFolderForMail(mails[0])\n\t\tlet moveMails = mails.filter((m) => sourceMailFolder !== targetMailFolder && targetMailFolder._ownerGroup === m._ownerGroup) // prevent moving mails between mail boxes.\n\n\t\tif (moveMails.length > 0 && sourceMailFolder && !isSameId(targetMailFolder._id, sourceMailFolder._id)) {\n\t\t\tconst mailChunks = splitInChunks(\n\t\t\t\tMAX_NBR_MOVE_DELETE_MAIL_SERVICE,\n\t\t\t\tmails.map((m) => m._id),\n\t\t\t)\n\n\t\t\tfor (const mailChunk of mailChunks) {\n\t\t\t\tawait this.mailFacade.moveMails(mailChunk, sourceMailFolder._id, targetMailFolder._id)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Preferably use moveMails() in MailGuiUtils.js which has built-in error handling\n\t * @throws PreconditionFailedError or LockedError if operation is locked on the server\n\t */\n\tasync moveMails(mails: ReadonlyArray<Mail>, targetMailFolder: MailFolder): Promise<void> {\n\t\tconst mailsPerFolder = groupBy(mails, (mail) => {\n\t\t\treturn this.getMailFolderForMail(mail)?._id?.[1]\n\t\t})\n\n\t\tfor (const [folderId, mailsInFolder] of mailsPerFolder) {\n\t\t\tconst sourceMailFolder = this.getMailFolderForMail(mailsInFolder[0])\n\n\t\t\tif (sourceMailFolder) {\n\t\t\t\t// group another time because mails in the same Set can be from different mail bags.\n\t\t\t\tconst mailsPerList = groupBy(mailsInFolder, (mail) => getListId(mail))\n\t\t\t\tfor (const [listId, mailsInList] of mailsPerList) {\n\t\t\t\t\tawait this._moveMails(mailsInList, targetMailFolder)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Move mail: no mail folder for folder id\", folderId)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Finally deletes the given mails if they are already in the trash or spam folders,\n\t * otherwise moves them to the trash folder.\n\t * A deletion confirmation must have been show before.\n\t */\n\tasync deleteMails(mails: ReadonlyArray<Mail>): Promise<void> {\n\t\tif (mails.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tconst mailsPerFolder = groupBy(mails, (mail) => {\n\t\t\treturn this.getMailFolderForMail(mail)?._id?.[1]\n\t\t})\n\n\t\tconst folders = await this.getMailboxFoldersForMail(mails[0])\n\t\tif (folders == null) {\n\t\t\treturn\n\t\t}\n\t\tconst trashFolder = assertNotNull(folders.getSystemFolderByType(MailSetKind.TRASH))\n\n\t\tfor (const [folder, mailsInFolder] of mailsPerFolder) {\n\t\t\tconst sourceMailFolder = this.getMailFolderForMail(mailsInFolder[0])\n\n\t\t\tconst mailsPerList = groupBy(mailsInFolder, (mail) => getListId(mail))\n\t\t\tfor (const [listId, mailsInList] of mailsPerList) {\n\t\t\t\tif (sourceMailFolder) {\n\t\t\t\t\tif (isSpamOrTrashFolder(folders, sourceMailFolder)) {\n\t\t\t\t\t\tawait this.finallyDeleteMails(mailsInList)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait this._moveMails(mailsInList, trashFolder)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"Delete mail: no mail folder for list id\", folder)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Finally deletes all given mails. Caller must ensure that mails are only from one folder and the folder must allow final delete operation.\n\t */\n\tprivate async finallyDeleteMails(mails: Mail[]): Promise<void> {\n\t\tif (!mails.length) return Promise.resolve()\n\t\tconst mailFolder = neverNull(this.getMailFolderForMail(mails[0]))\n\t\tconst mailIds = mails.map((m) => m._id)\n\t\tconst mailChunks = splitInChunks(MAX_NBR_MOVE_DELETE_MAIL_SERVICE, mailIds)\n\n\t\tfor (const mailChunk of mailChunks) {\n\t\t\tawait this.mailFacade.deleteMails(mailChunk, mailFolder._id)\n\t\t}\n\t}\n\n\t/**\n\t * Sends the given folder and all its descendants to the spam folder, reporting mails (if applicable) and removes any empty folders\n\t */\n\tasync sendFolderToSpam(folder: MailFolder): Promise<void> {\n\t\tconst mailboxDetail = await this.getMailboxDetailsForMailFolder(folder)\n\t\tif (mailboxDetail == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst folderSystem = this.getFolderSystemByGroupId(assertNotNull(folder._ownerGroup))\n\t\tif (folderSystem == null) return\n\t\tconst deletedFolder = await this.removeAllEmpty(folderSystem, folder)\n\t\tif (!deletedFolder) {\n\t\t\treturn this.mailFacade.updateMailFolderParent(folder, assertSystemFolderOfType(folderSystem, MailSetKind.SPAM)._id)\n\t\t}\n\t}\n\n\tasync reportMails(reportType: MailReportType, mails: ReadonlyArray<Mail>): Promise<void> {\n\t\tfor (const mail of mails) {\n\t\t\tawait this.mailFacade.reportMail(mail, reportType).catch(ofClass(NotFoundError, (e) => console.log(\"mail to be reported not found\", e)))\n\t\t}\n\t}\n\n\tisMovingMailsAllowed(): boolean {\n\t\treturn this.logins.getUserController().isInternalUser()\n\t}\n\n\tcanManageLabels(): boolean {\n\t\treturn this.logins.getUserController().isInternalUser()\n\t}\n\n\tcanAssignLabels(): boolean {\n\t\treturn this.logins.getUserController().isInternalUser()\n\t}\n\n\tisExportingMailsAllowed(): boolean {\n\t\treturn !this.logins.isEnabled(FeatureType.DisableMailExport)\n\t}\n\n\tasync markMails(mails: readonly Mail[], unread: boolean): Promise<void> {\n\t\tawait promiseMap(\n\t\t\tmails,\n\t\t\tasync (mail) => {\n\t\t\t\tif (mail.unread !== unread) {\n\t\t\t\t\tmail.unread = unread\n\t\t\t\t\treturn this.entityClient.update(mail).catch(ofClass(NotFoundError, noOp)).catch(ofClass(LockedError, noOp))\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ concurrency: 5 },\n\t\t)\n\t}\n\n\tasync applyLabels(mails: readonly Mail[], addedLabels: readonly MailFolder[], removedLabels: readonly MailFolder[]): Promise<void> {\n\t\tconst groupedByListIds = groupBy(mails, (mail) => listIdPart(mail._id))\n\t\tfor (const [_, groupedMails] of groupedByListIds) {\n\t\t\tconst mailChunks = splitInChunks(MAX_NBR_MOVE_DELETE_MAIL_SERVICE, groupedMails)\n\t\t\tfor (const mailChunk of mailChunks) {\n\t\t\t\tawait this.mailFacade.applyLabels(mailChunk, addedLabels, removedLabels)\n\t\t\t}\n\t\t}\n\t}\n\n\t_mailboxCountersUpdates(counters: WebsocketCounterData) {\n\t\tconst normalized = this.mailboxCounters() || {}\n\t\tconst group = normalized[counters.mailGroup] || {}\n\t\tfor (const value of counters.counterValues) {\n\t\t\tgroup[value.counterId] = Number(value.count) || 0\n\t\t}\n\t\tnormalized[counters.mailGroup] = group\n\t\tthis.mailboxCounters(normalized)\n\t}\n\n\t_showNotification(folder: MailFolder, mail: Mail) {\n\t\tthis.notifications.showNotification(\n\t\t\tNotificationType.Mail,\n\t\t\tlang.get(\"newMails_msg\"),\n\t\t\t{\n\t\t\t\tactions: [],\n\t\t\t},\n\t\t\t(_) => {\n\t\t\t\tm.route.set(`/mail/${getElementId(folder)}/${getElementId(mail)}`)\n\t\t\t\twindow.focus()\n\t\t\t},\n\t\t)\n\t}\n\n\tgetCounterValue(folder: MailFolder): Promise<number | null> {\n\t\treturn this.getMailboxDetailsForMailFolder(folder)\n\t\t\t.then((mailboxDetails) => {\n\t\t\t\tif (mailboxDetails == null) {\n\t\t\t\t\treturn null\n\t\t\t\t} else {\n\t\t\t\t\tconst mailGroupCounter = this.mailboxCounters()[mailboxDetails.mailGroup._id]\n\t\t\t\t\tif (mailGroupCounter) {\n\t\t\t\t\t\tconst counterId = getElementId(folder)\n\t\t\t\t\t\treturn mailGroupCounter[counterId]\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(() => null)\n\t}\n\n\tcheckMailForPhishing(\n\t\tmail: Mail,\n\t\tlinks: Array<{\n\t\t\thref: string\n\t\t\tinnerHTML: string\n\t\t}>,\n\t): Promise<boolean> {\n\t\treturn this.mailFacade.checkMailForPhishing(mail, links)\n\t}\n\n\t/**\n\t * Sends the given folder and all its descendants to the trash folder, removes any empty folders\n\t */\n\tasync trashFolderAndSubfolders(folder: MailFolder): Promise<void> {\n\t\tconst mailboxDetail = await this.getMailboxDetailsForMailFolder(folder)\n\t\tif (mailboxDetail == null) {\n\t\t\treturn\n\t\t}\n\t\tconst folderSystem = this.getFolderSystemByGroupId(assertNotNull(folder._ownerGroup))\n\t\tif (folderSystem == null) return\n\n\t\tconst deletedFolder = await this.removeAllEmpty(folderSystem, folder)\n\t\tif (!deletedFolder) {\n\t\t\tconst trash = assertSystemFolderOfType(folderSystem, MailSetKind.TRASH)\n\t\t\treturn this.mailFacade.updateMailFolderParent(folder, trash._id)\n\t\t}\n\t}\n\n\t/**\n\t * This is called when moving a folder to SPAM or TRASH, which do not allow empty folders (since only folders that contain mail are allowed)\n\t */\n\tprivate async removeAllEmpty(folderSystem: FolderSystem, folder: MailFolder): Promise<boolean> {\n\t\t// sort descendants deepest first so that we can clean them up before checking their ancestors\n\t\tconst descendants = folderSystem.getDescendantFoldersOfParent(folder._id).sort((l, r) => r.level - l.level)\n\n\t\t// we completely delete empty folders\n\t\tlet someNonEmpty = false\n\t\t// we don't update folder system quickly enough so we keep track of deleted folders here and consider them \"empty\" when all their children are here\n\t\tconst deleted = new Set<Id>()\n\t\tfor (const descendant of descendants) {\n\t\t\tif (\n\t\t\t\t(await this.isEmptyFolder(descendant.folder)) &&\n\t\t\t\tfolderSystem.getCustomFoldersOfParent(descendant.folder._id).every((f) => deleted.has(getElementId(f)))\n\t\t\t) {\n\t\t\t\tdeleted.add(getElementId(descendant.folder))\n\t\t\t\tawait this.finallyDeleteCustomMailFolder(descendant.folder)\n\t\t\t} else {\n\t\t\t\tsomeNonEmpty = true\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\t(await this.isEmptyFolder(folder)) &&\n\t\t\tfolderSystem.getCustomFoldersOfParent(folder._id).every((f) => deleted.has(getElementId(f))) &&\n\t\t\t!someNonEmpty\n\t\t) {\n\t\t\tawait this.finallyDeleteCustomMailFolder(folder)\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\t// Only load one mail, if there is even one we won't remove\n\tprivate async isEmptyFolder(descendant: MailFolder) {\n\t\treturn (await this.entityClient.loadRange(MailSetEntryTypeRef, descendant.entries, CUSTOM_MIN_ID, 1, false)).length === 0\n\t}\n\n\tpublic async finallyDeleteCustomMailFolder(folder: MailFolder): Promise<void> {\n\t\tif (folder.folderType !== MailSetKind.CUSTOM && folder.folderType !== MailSetKind.Imported) {\n\t\t\tthrow new ProgrammingError(\"Cannot delete non-custom folder: \" + String(folder._id))\n\t\t}\n\n\t\treturn await this.mailFacade\n\t\t\t.deleteFolder(folder._id)\n\t\t\t.catch(ofClass(NotFoundError, () => console.log(\"mail folder already deleted\")))\n\t\t\t.catch(\n\t\t\t\tofClass(PreconditionFailedError, () => {\n\t\t\t\t\tthrow new UserError(\"operationStillActive_msg\")\n\t\t\t\t}),\n\t\t\t)\n\t}\n\n\tasync fixupCounterForFolder(folder: MailFolder, unreadMails: number) {\n\t\tconst mailboxDetails = await this.getMailboxDetailsForMailFolder(folder)\n\t\tif (mailboxDetails) {\n\t\t\tawait this.mailFacade.fixupCounterForFolder(mailboxDetails.mailGroup._id, folder, unreadMails)\n\t\t}\n\t}\n\n\tasync clearFolder(folder: MailFolder): Promise<void> {\n\t\tawait this.mailFacade.clearFolder(folder._id)\n\t}\n\n\tasync unsubscribe(mail: Mail, recipient: string, headers: string[]) {\n\t\tawait this.mailFacade.unsubscribe(mail._id, recipient, headers)\n\t}\n\n\tasync saveReportMovedMails(mailboxGroupRoot: MailboxGroupRoot, reportMovedMails: ReportMovedMailsType): Promise<MailboxProperties> {\n\t\tconst mailboxProperties = await this.mailboxModel.loadOrCreateMailboxProperties(mailboxGroupRoot)\n\t\tmailboxProperties.reportMovedMails = reportMovedMails\n\t\tawait this.entityClient.update(mailboxProperties)\n\t\treturn mailboxProperties\n\t}\n\n\t/**\n\t * Create a label (aka MailSet aka {@link MailFolder} of kind {@link MailSetKind.LABEL}) for the group {@param mailGroupId}.\n\t */\n\tasync createLabel(mailGroupId: Id, labelData: { name: string; color: string }) {\n\t\tawait this.mailFacade.createLabel(mailGroupId, labelData)\n\t}\n\n\tasync updateLabel(label: MailFolder, newData: { name: string; color: string }) {\n\t\tawait this.mailFacade.updateLabel(label, newData.name, newData.color)\n\t}\n\n\tasync deleteLabel(label: MailFolder) {\n\t\tawait this.mailFacade.deleteLabel(label)\n\t}\n\n\tasync getMailSetById(folderElementId: Id): Promise<MailFolder | null> {\n\t\tconst folderStructures = await this.loadMailSets()\n\t\tfor (const folders of folderStructures.values()) {\n\t\t\tconst folder = folders.folders.getFolderById(folderElementId)\n\t\t\tif (folder) {\n\t\t\t\treturn folder\n\t\t\t}\n\n\t\t\tconst label = folders.labels.get(folderElementId)\n\t\t\tif (label) {\n\t\t\t\treturn label\n\t\t\t}\n\t\t}\n\t\treturn null\n\t}\n\n\tgetImportedMailSets(): Array<MailFolder> {\n\t\treturn [...this.mailSets.values()].filter((f) => f.folders.importedMailSet).map((f) => f.folders.importedMailSet!)\n\t}\n}\n"]}