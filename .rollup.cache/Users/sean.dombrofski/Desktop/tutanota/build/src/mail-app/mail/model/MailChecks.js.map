{"version":3,"file":"MailChecks.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/model/MailChecks.ts"],"names":[],"mappings":"AAAA,oBAAoB;AAKpB,OAAO,EAAE,WAAW,EAAE,MAAM,iDAAiD,CAAA;AAE7E,MAAM,UAAU,iBAAiB,CAAC,MAAoB,EAAE,MAAkB,EAAE,IAAiB;IAC5F,MAAM,YAAY,GAAG,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;IACvD,OAAO,YAAY,IAAI,IAAI,IAAI,MAAM,CAAC,sBAAsB,CAAC,MAAM,EAAE,YAAY,CAAC,GAAG,CAAC,CAAA;AACvF,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,IAAU;IACjC,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAA;AACrC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,IAAU,EAAE,SAAoB;IACzE,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAA;IAC9D,MAAM,UAAU,GAAG,OAAO,EAAE,eAAe,CAAC,IAAI,CAAC,CAAA;IACjD,IAAI,OAAO,IAAI,UAAU,EAAE,CAAC;QAC3B,OAAO,mBAAmB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAA;IAChD,CAAC;SAAM,CAAC;QACP,OAAO,KAAK,CAAA;IACb,CAAC;AACF,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,mBAAmB,CAAC,MAAoB,EAAE,MAAkB;IAC3E,6EAA6E;IAC7E,OAAO,CACN,MAAM,CAAC,UAAU,KAAK,WAAW,CAAC,KAAK;QACvC,MAAM,CAAC,UAAU,KAAK,WAAW,CAAC,IAAI;QACtC,iBAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,KAAK,CAAC;QACpD,iBAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,CACnD,CAAA;AACF,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,MAAoB,EAAE,MAAkB,EAAE,IAAiB;IAChG,OAAO,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,iBAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAAA;AAC7E,CAAC","sourcesContent":["//@bundleInto:common\n\nimport { Mail, MailFolder } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { MailModel } from \"./MailModel.js\"\nimport { FolderSystem } from \"../../../common/api/common/mail/FolderSystem.js\"\nimport { MailSetKind } from \"../../../common/api/common/TutanotaConstants.js\"\n\nexport function isSubfolderOfType(system: FolderSystem, folder: MailFolder, type: MailSetKind): boolean {\n\tconst systemFolder = system.getSystemFolderByType(type)\n\treturn systemFolder != null && system.checkFolderForAncestor(folder, systemFolder._id)\n}\n\nexport function isDraft(mail: Mail): boolean {\n\treturn mail.mailDetailsDraft != null\n}\n\nexport async function isMailInSpamOrTrash(mail: Mail, mailModel: MailModel): Promise<boolean> {\n\tconst folders = await mailModel.getMailboxFoldersForMail(mail)\n\tconst mailFolder = folders?.getFolderByMail(mail)\n\tif (folders && mailFolder) {\n\t\treturn isSpamOrTrashFolder(folders, mailFolder)\n\t} else {\n\t\treturn false\n\t}\n}\n\n/**\n * Returns true if given folder is the {@link MailFolderType.SPAM} or {@link MailFolderType.TRASH} folder, or a descendant of those folders.\n */\nexport function isSpamOrTrashFolder(system: FolderSystem, folder: MailFolder): boolean {\n\t// not using isOfTypeOrSubfolderOf because checking the type first is cheaper\n\treturn (\n\t\tfolder.folderType === MailSetKind.TRASH ||\n\t\tfolder.folderType === MailSetKind.SPAM ||\n\t\tisSubfolderOfType(system, folder, MailSetKind.TRASH) ||\n\t\tisSubfolderOfType(system, folder, MailSetKind.SPAM)\n\t)\n}\n\nexport function isOfTypeOrSubfolderOf(system: FolderSystem, folder: MailFolder, type: MailSetKind): boolean {\n\treturn folder.folderType === type || isSubfolderOfType(system, folder, type)\n}\n"]}