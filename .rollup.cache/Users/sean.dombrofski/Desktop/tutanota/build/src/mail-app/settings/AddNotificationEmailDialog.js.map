{"version":3,"file":"AddNotificationEmailDialog.js","sourceRoot":"","sources":["../../../../src/mail-app/settings/AddNotificationEmailDialog.ts"],"names":[],"mappings":"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","sourcesContent":["import { createPushIdentifier, User } from \"../../common/api/entities/sys/TypeRefs.js\"\nimport { showNotAvailableForFreeDialog } from \"../../common/misc/SubscriptionDialogs.js\"\nimport { Dialog } from \"../../common/gui/base/Dialog.js\"\nimport { lang, type TranslationKey } from \"../../common/misc/LanguageViewModel.js\"\nimport m from \"mithril\"\nimport { TextField, TextFieldType } from \"../../common/gui/base/TextField.js\"\nimport { assertNotNull } from \"@tutao/tutanota-utils\"\nimport { getCleanedMailAddress } from \"../../common/misc/parsing/MailAddressParser.js\"\nimport { PushServiceType } from \"../../common/api/common/TutanotaConstants.js\"\nimport { showProgressDialog } from \"../../common/gui/dialogs/ProgressDialog.js\"\nimport { LoginController } from \"../../common/api/main/LoginController.js\"\nimport { EntityClient } from \"../../common/api/common/EntityClient.js\"\nimport { AppType } from \"../../common/misc/ClientConstants.js\"\n\nexport class AddNotificationEmailDialog {\n\tconstructor(private readonly logins: LoginController, private readonly entityClient: EntityClient) {}\n\n\tshow() {\n\t\tif (this.logins.getUserController().isFreeAccount()) {\n\t\t\tshowNotAvailableForFreeDialog()\n\t\t} else {\n\t\t\tlet mailAddress = \"\"\n\n\t\t\tDialog.showActionDialog({\n\t\t\t\ttitle: \"notificationSettings_action\",\n\t\t\t\tchild: {\n\t\t\t\t\tview: () => [\n\t\t\t\t\t\tm(TextField, {\n\t\t\t\t\t\t\tlabel: \"mailAddress_label\",\n\t\t\t\t\t\t\tvalue: mailAddress,\n\t\t\t\t\t\t\ttype: TextFieldType.Email,\n\t\t\t\t\t\t\toninput: (newValue) => (mailAddress = newValue),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tm(\".small.mt-s\", lang.get(\"emailPushNotification_msg\")),\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tvalidator: () => this.validateAddNotificationEmailAddressInput(mailAddress),\n\t\t\t\tallowOkWithReturn: true,\n\t\t\t\tokAction: (dialog: Dialog) => {\n\t\t\t\t\tthis.createNotificationEmail(mailAddress, this.logins.getUserController().user)\n\t\t\t\t\tdialog.close()\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t}\n\n\tprivate createNotificationEmail(mailAddress: string, user: User) {\n\t\tconst pushIdentifier = createPushIdentifier({\n\t\t\t_area: \"0\", // legacy\n\t\t\t_owner: user.userGroup.group, // legacy\n\t\t\t_ownerGroup: user.userGroup.group,\n\t\t\tdisplayName: lang.get(\"adminEmailSettings_action\"),\n\t\t\tidentifier: assertNotNull(getCleanedMailAddress(mailAddress)),\n\t\t\tlanguage: lang.code,\n\t\t\tpushServiceType: PushServiceType.EMAIL,\n\t\t\tlastUsageTime: new Date(),\n\t\t\tlastNotificationDate: null,\n\t\t\tdisabled: false,\n\t\t\tapp: AppType.Mail, // Calendar app doesn't receive mail notifications\n\t\t})\n\n\t\tshowProgressDialog(\"pleaseWait_msg\", this.entityClient.setup(assertNotNull(user.pushIdentifierList).list, pushIdentifier))\n\t}\n\n\tprivate validateAddNotificationEmailAddressInput(emailAddress: string): TranslationKey | null {\n\t\treturn getCleanedMailAddress(emailAddress) == null ? \"mailAddressInvalid_msg\" : null // TODO check if it is a Tutanota mail address\n\t}\n}\n"]}