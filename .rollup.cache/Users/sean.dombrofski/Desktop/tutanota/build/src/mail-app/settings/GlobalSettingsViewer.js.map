{"version":3,"file":"GlobalSettingsViewer.js","sourceRoot":"","sources":["../../../../src/mail-app/settings/GlobalSettingsViewer.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Children } from \"mithril\"\nimport { DAY_IN_MILLIS, LazyLoaded, neverNull, noOp, ofClass, promiseMap } from \"@tutao/tutanota-utils\"\nimport { InfoLink, lang } from \"../../common/misc/LanguageViewModel\"\nimport { getSpamRuleFieldToName, getSpamRuleTypeNameMapping, showAddSpamRuleDialog } from \"./AddSpamRuleDialog\"\nimport { getSpamRuleField, GroupType, OperationType, SpamRuleFieldType, SpamRuleType } from \"../../common/api/common/TutanotaConstants\"\nimport {\n\tcreateEmailSenderListElement,\n\tCustomer,\n\tCustomerInfo,\n\tCustomerInfoTypeRef,\n\tCustomerPropertiesTypeRef,\n\tCustomerServerProperties,\n\tCustomerServerPropertiesTypeRef,\n\tCustomerTypeRef,\n\tDomainInfo,\n\tGroupTypeRef,\n\tRejectedSenderTypeRef,\n\tUserTypeRef,\n} from \"../../common/api/entities/sys/TypeRefs.js\"\nimport stream from \"mithril/stream\"\nimport { formatDateTime } from \"../../common/misc/Formatter\"\nimport { Dialog } from \"../../common/gui/base/Dialog\"\nimport { LockedError, PreconditionFailedError } from \"../../common/api/common/error/RestError\"\nimport { GroupData, loadEnabledTeamMailGroups, loadEnabledUserMailGroups, loadGroupDisplayName } from \"./LoadingUtils\"\nimport { Icons } from \"../../common/gui/base/icons/Icons\"\nimport { showProgressDialog } from \"../../common/gui/dialogs/ProgressDialog\"\nimport type { TableAttrs, TableLineAttrs } from \"../../common/gui/base/Table.js\"\nimport { ColumnWidth, createRowActions } from \"../../common/gui/base/Table.js\"\nimport { attachDropdown, createDropdown, DropdownChildAttrs } from \"../../common/gui/base/Dropdown.js\"\nimport { DomainDnsStatus } from \"./DomainDnsStatus\"\nimport { showDnsCheckDialog } from \"./CheckDomainDnsStatusDialog\"\nimport { BootIcons } from \"../../common/gui/base/icons/BootIcons\"\nimport {\n\tGENERATED_MAX_ID,\n\tgeneratedIdToTimestamp,\n\tgetElementId,\n\tsortCompareByReverseId,\n\ttimestampToGeneratedId,\n} from \"../../common/api/common/utils/EntityUtils\"\nimport { showRejectedSendersInfoDialog } from \"./RejectedSendersInfoDialog\"\nimport { showAddDomainWizard } from \"./emaildomain/AddDomainWizard\"\nimport { getUserGroupMemberships } from \"../../common/api/common/utils/GroupUtils\"\nimport { showNotAvailableForFreeDialog } from \"../../common/misc/SubscriptionDialogs\"\nimport { getDomainPart } from \"../../common/misc/parsing/MailAddressParser\"\nimport { locator } from \"../../common/api/main/CommonLocator\"\nimport { assertMainOrNode } from \"../../common/api/common/Env\"\nimport { ButtonSize } from \"../../common/gui/base/ButtonSize.js\"\nimport { getCustomMailDomains } from \"../../common/api/common/utils/CustomerUtils.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { AccountMaintenanceSettings, AccountMaintenanceUpdateNotifier } from \"../../common/settings/AccountMaintenanceSettings.js\"\nimport type { UpdatableSettingsViewer } from \"../../common/settings/Interfaces.js\"\nimport { ExpandableTable } from \"../../common/settings/ExpandableTable.js\"\n\nassertMainOrNode()\n// Number of days for that we load rejected senders\nconst REJECTED_SENDERS_TO_LOAD_MS = 5 * DAY_IN_MILLIS\n// Max number of rejected sender entries that we display in the ui\nconst REJECTED_SENDERS_MAX_NUMBER = 100\n\nexport class GlobalSettingsViewer implements UpdatableSettingsViewer {\n\tprivate readonly props = stream<Readonly<CustomerServerProperties>>()\n\tprivate customer: Customer | null = null\n\tprivate readonly customerInfo = new LazyLoaded<CustomerInfo>(() => locator.logins.getUserController().loadCustomerInfo())\n\n\tprivate accountMaintenanceUpdateNotifier: AccountMaintenanceUpdateNotifier | null = null\n\n\tprivate spamRuleLines: ReadonlyArray<TableLineAttrs> = []\n\tprivate rejectedSenderLines: ReadonlyArray<TableLineAttrs> = []\n\tprivate customDomainLines: ReadonlyArray<TableLineAttrs> = []\n\n\t/**\n\t * caches the current status for the custom email domains\n\t * map from domain name to status\n\t */\n\tprivate readonly domainDnsStatus: Record<string, DomainDnsStatus> = {}\n\tprivate readonly customerProperties = new LazyLoaded(() =>\n\t\tlocator.entityClient\n\t\t\t.load(CustomerTypeRef, neverNull(locator.logins.getUserController().user.customer))\n\t\t\t.then((customer) => locator.entityClient.load(CustomerPropertiesTypeRef, neverNull(customer.properties))),\n\t)\n\n\tconstructor() {\n\t\tthis.customerProperties.getAsync().then(m.redraw)\n\t\tthis.updateCustomerServerProperties()\n\t\tthis.view = this.view.bind(this)\n\t\tthis.updateDomains()\n\t}\n\n\tview(): Children {\n\t\tconst spamRuleTableAttrs: TableAttrs = {\n\t\t\tcolumnHeading: [\"emailSender_label\", \"emailSenderRule_label\"],\n\t\t\tcolumnWidths: [ColumnWidth.Largest, ColumnWidth.Small],\n\t\t\tshowActionButtonColumn: true,\n\t\t\taddButtonAttrs: {\n\t\t\t\ttitle: \"addSpamRule_action\",\n\t\t\t\tclick: () => showAddSpamRuleDialog(null),\n\t\t\t\ticon: Icons.Add,\n\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t},\n\t\t\tlines: this.spamRuleLines,\n\t\t}\n\t\tconst rejectedSenderTableAttrs: TableAttrs = {\n\t\t\tcolumnHeading: [\"emailSender_label\"],\n\t\t\tcolumnWidths: [ColumnWidth.Largest],\n\t\t\tshowActionButtonColumn: true,\n\t\t\taddButtonAttrs: {\n\t\t\t\ttitle: \"refresh_action\",\n\t\t\t\tclick: () => {\n\t\t\t\t\tthis.updateRejectedSenderTable()\n\t\t\t\t},\n\t\t\t\ticon: BootIcons.Progress,\n\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t},\n\t\t\tlines: this.rejectedSenderLines,\n\t\t}\n\t\tconst customDomainTableAttrs: TableAttrs = {\n\t\t\tcolumnHeading: [\"adminCustomDomain_label\", \"catchAllMailbox_label\"],\n\t\t\tcolumnWidths: [ColumnWidth.Largest, ColumnWidth.Small],\n\t\t\tshowActionButtonColumn: true,\n\t\t\taddButtonAttrs: {\n\t\t\t\ttitle: \"addCustomDomain_action\",\n\t\t\t\tclick: async () => {\n\t\t\t\t\tconst customerInfo = await this.customerInfo.getAsync()\n\t\t\t\t\tif (locator.logins.getUserController().isFreeAccount()) {\n\t\t\t\t\t\tshowNotAvailableForFreeDialog()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst mailAddressTableModel = await locator.mailAddressTableModelForOwnMailbox()\n\t\t\t\t\t\tawait showAddDomainWizard(\"\", customerInfo, mailAddressTableModel)\n\t\t\t\t\t\tthis.updateDomains()\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ticon: Icons.Add,\n\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t},\n\t\t\tlines: this.customDomainLines,\n\t\t}\n\n\t\treturn [\n\t\t\tm(\"#global-settings.fill-absolute.scroll.plr-l\", [\n\t\t\t\tm(ExpandableTable, {\n\t\t\t\t\ttitle: \"adminSpam_action\",\n\t\t\t\t\ttable: spamRuleTableAttrs,\n\t\t\t\t\tinfoMsg: \"adminSpamRuleInfo_msg\",\n\t\t\t\t\tinfoLinkId: InfoLink.SpamRules,\n\t\t\t\t}),\n\t\t\t\tm(ExpandableTable, {\n\t\t\t\t\ttitle: \"rejectedEmails_label\",\n\t\t\t\t\ttable: rejectedSenderTableAttrs,\n\t\t\t\t\tinfoMsg: \"rejectedSenderListInfo_msg\",\n\t\t\t\t\tonExpand: () => this.updateRejectedSenderTable(),\n\t\t\t\t}),\n\t\t\t\tm(ExpandableTable, {\n\t\t\t\t\ttitle: \"customEmailDomains_label\",\n\t\t\t\t\ttable: customDomainTableAttrs,\n\t\t\t\t\tinfoMsg: \"moreInfo_msg\",\n\t\t\t\t\tinfoLinkId: InfoLink.DomainInfo,\n\t\t\t\t}),\n\t\t\t\tm(AccountMaintenanceSettings, {\n\t\t\t\t\tcustomerServerProperties: this.props,\n\t\t\t\t\tsetOnUpdateHandler: (fn: AccountMaintenanceUpdateNotifier) => {\n\t\t\t\t\t\tthis.accountMaintenanceUpdateNotifier = fn\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t]),\n\t\t]\n\t}\n\n\tprivate updateCustomerServerProperties(): Promise<void> {\n\t\treturn locator.customerFacade.loadCustomerServerProperties().then((props) => {\n\t\t\tthis.props(props)\n\n\t\t\tconst fieldToName = getSpamRuleFieldToName()\n\n\t\t\tthis.spamRuleLines = props.emailSenderList.map((rule, index) => {\n\t\t\t\treturn {\n\t\t\t\t\tcells: () => [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmain: fieldToName[getSpamRuleField(rule)],\n\t\t\t\t\t\t\tinfo: [rule.value],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmain: neverNull(getSpamRuleTypeNameMapping().find((t) => t.value === rule.type)).name,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tactionButtonAttrs: createRowActions(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgetArray: () => props.emailSenderList,\n\t\t\t\t\t\t\tupdateInstance: () => locator.entityClient.update(props).catch(ofClass(LockedError, noOp)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\trule,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: \"edit_action\",\n\t\t\t\t\t\t\t\tclick: () => showAddSpamRuleDialog(rule),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t),\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tm.redraw()\n\t\t})\n\t}\n\n\tprivate updateRejectedSenderTable(): void {\n\t\tconst customer = this.customer\n\n\t\tif (customer && customer.rejectedSenders) {\n\t\t\t// Rejected senders are written with TTL for seven days.\n\t\t\t// We have to avoid that we load too many (already deleted) rejected senders form the past.\n\t\t\t// First we load REJECTED_SENDERS_MAX_NUMBER items starting from the past timestamp into the future. If there are\n\t\t\t// more entries available we can safely load REJECTED_SENDERS_MAX_NUMBER from GENERATED_MAX_ID in reverse order.\n\t\t\t// Otherwise we will just use what has been returned in the first request.\n\t\t\tconst senderListId = customer.rejectedSenders.items\n\t\t\tconst startId = timestampToGeneratedId(Date.now() - REJECTED_SENDERS_TO_LOAD_MS)\n\t\t\tconst loadingPromise = locator.entityClient\n\t\t\t\t.loadRange(RejectedSenderTypeRef, senderListId, startId, REJECTED_SENDERS_MAX_NUMBER, false)\n\t\t\t\t.then((rejectedSenders) => {\n\t\t\t\t\tif (REJECTED_SENDERS_MAX_NUMBER === rejectedSenders.length) {\n\t\t\t\t\t\t// There are more entries available, we need to load from GENERATED_MAX_ID.\n\t\t\t\t\t\t// we don't need to sort here because we load in reverse direction\n\t\t\t\t\t\treturn locator.entityClient.loadRange(RejectedSenderTypeRef, senderListId, GENERATED_MAX_ID, REJECTED_SENDERS_MAX_NUMBER, true)\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ensure that rejected senders are sorted in descending order\n\t\t\t\t\t\treturn rejectedSenders.sort(sortCompareByReverseId)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then((rejectedSenders) => {\n\t\t\t\t\tthis.rejectedSenderLines = rejectedSenders.map((rejectedSender) => {\n\t\t\t\t\t\tconst rejectDate = formatDateTime(new Date(generatedIdToTimestamp(getElementId(rejectedSender))))\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tcells: () => {\n\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tmain: rejectedSender.senderMailAddress,\n\t\t\t\t\t\t\t\t\t\tinfo: [`${rejectDate}, ${rejectedSender.senderHostname} (${rejectedSender.senderIp})`],\n\t\t\t\t\t\t\t\t\t\tclick: () => showRejectedSendersInfoDialog(rejectedSender),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tactionButtonAttrs: attachDropdown({\n\t\t\t\t\t\t\t\tmainButtonAttrs: {\n\t\t\t\t\t\t\t\t\ttitle: \"showMore_action\",\n\t\t\t\t\t\t\t\t\ticon: Icons.More,\n\t\t\t\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tchildAttrs: () => [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: \"showRejectReason_action\",\n\t\t\t\t\t\t\t\t\t\tclick: () => showRejectedSendersInfoDialog(rejectedSender),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: \"addSpamRule_action\",\n\t\t\t\t\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\t\t\t\t\tconst domainPart = getDomainPart(rejectedSender.senderMailAddress)\n\t\t\t\t\t\t\t\t\t\t\tshowAddSpamRuleDialog(\n\t\t\t\t\t\t\t\t\t\t\t\tcreateEmailSenderListElement({\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: domainPart ? domainPart : \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: SpamRuleType.WHITELIST,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfield: SpamRuleFieldType.FROM,\n\t\t\t\t\t\t\t\t\t\t\t\t\thashedValue: \"\",\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\tshowProgressDialog(\"loading_msg\", loadingPromise).then(() => m.redraw())\n\t\t}\n\t}\n\n\tprivate async updateDomains(): Promise<void> {\n\t\tconst customerInfo = await this.customerInfo.getAsync()\n\t\tlet customDomainInfos = getCustomMailDomains(customerInfo)\n\t\t// remove dns status instances for all removed domains\n\t\tfor (const domain of Object.keys(this.domainDnsStatus)) {\n\t\t\tif (!customDomainInfos.some((di) => di.domain === domain)) {\n\t\t\t\tdelete this.domainDnsStatus[domain]\n\t\t\t}\n\t\t}\n\t\treturn promiseMap(customDomainInfos, (domainInfo) => {\n\t\t\t// create dns status instances for all new domains\n\t\t\tif (!this.domainDnsStatus[domainInfo.domain]) {\n\t\t\t\tthis.domainDnsStatus[domainInfo.domain] = new DomainDnsStatus(domainInfo.domain)\n\n\t\t\t\tthis.domainDnsStatus[domainInfo.domain].loadCurrentStatus().then(() => {\n\t\t\t\t\tm.redraw()\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tlet domainDnsStatus = this.domainDnsStatus[domainInfo.domain]\n\t\t\tlet p = Promise.resolve(lang.get(\"comboBoxSelectionNone_msg\"))\n\n\t\t\tif (domainInfo.catchAllMailGroup) {\n\t\t\t\tp = loadGroupDisplayName(domainInfo.catchAllMailGroup)\n\t\t\t}\n\n\t\t\treturn p.then((catchAllGroupName) => {\n\t\t\t\treturn {\n\t\t\t\t\tcells: () => [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmain: domainInfo.domain,\n\t\t\t\t\t\t\tinfo: [domainDnsStatus.getDnsStatusInfo()],\n\t\t\t\t\t\t\tclick:\n\t\t\t\t\t\t\t\tdomainDnsStatus.status.isLoaded() && !domainDnsStatus.areAllRecordsFine()\n\t\t\t\t\t\t\t\t\t? () => {\n\t\t\t\t\t\t\t\t\t\t\tshowDnsCheckDialog(domainDnsStatus)\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t: noOp,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmain: catchAllGroupName,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tactionButtonAttrs: {\n\t\t\t\t\t\ttitle: \"action_label\" as const,\n\t\t\t\t\t\ticon: Icons.More,\n\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t\tclick: createDropdown({\n\t\t\t\t\t\t\tlazyButtons: () => {\n\t\t\t\t\t\t\t\tconst buttons: DropdownChildAttrs[] = [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: \"setCatchAllMailbox_action\",\n\t\t\t\t\t\t\t\t\t\tclick: () => this.editCatchAllMailbox(domainInfo),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: \"delete_action\",\n\t\t\t\t\t\t\t\t\t\tclick: () => this.deleteCustomDomain(domainInfo),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\n\t\t\t\t\t\t\t\tif (domainDnsStatus.status.isLoaded() && !domainDnsStatus.areAllRecordsFine()) {\n\t\t\t\t\t\t\t\t\tbuttons.unshift({\n\t\t\t\t\t\t\t\t\t\tlabel: \"resumeSetup_label\",\n\t\t\t\t\t\t\t\t\t\tclick: () => this.onResumeSetup(domainDnsStatus, customerInfo),\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn buttons\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\twidth: 260,\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t})\n\t\t}).then((tableLines) => {\n\t\t\tthis.customDomainLines = tableLines\n\n\t\t\tm.redraw()\n\t\t})\n\t}\n\n\tprivate async onResumeSetup(domainDnsStatus: DomainDnsStatus, customerInfo: any) {\n\t\t// Assuming user mailbox for now\n\t\tconst mailAddressTableModel = await locator.mailAddressTableModelForOwnMailbox()\n\t\tshowAddDomainWizard(domainDnsStatus.domain, customerInfo, mailAddressTableModel).then(() => {\n\t\t\tdomainDnsStatus.loadCurrentStatus().then(() => m.redraw())\n\t\t})\n\t}\n\n\tprivate async editCatchAllMailbox(domainInfo: DomainInfo) {\n\t\tconst groupDatas = await showProgressDialog(\"pleaseWait_msg\", this.loadMailboxGroupDataAndCatchAllId(domainInfo))\n\t\tconst initialValue = groupDatas.selected?.groupId ?? null\n\t\tconst selectedMailGroupId = await Dialog.showDropDownSelectionDialog(\n\t\t\t\"setCatchAllMailbox_action\",\n\t\t\t\"catchAllMailbox_label\",\n\t\t\tnull,\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tname: lang.get(\"comboBoxSelectionNone_msg\"),\n\t\t\t\t\tvalue: null,\n\t\t\t\t},\n\t\t\t\t...groupDatas.available.map((groupData) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: groupData.displayName,\n\t\t\t\t\t\tvalue: groupData.groupId,\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t],\n\t\t\tinitialValue,\n\t\t\t250,\n\t\t)\n\t\treturn locator.customerFacade.setCatchAllGroup(domainInfo.domain, selectedMailGroupId)\n\t}\n\n\tprivate async loadMailboxGroupDataAndCatchAllId(domainInfo: DomainInfo): Promise<{\n\t\tavailable: Array<GroupData>\n\t\tselected: GroupData | null\n\t}> {\n\t\tconst customer = await locator.logins.getUserController().loadCustomer()\n\t\tconst teamMailGroups = await loadEnabledTeamMailGroups(customer)\n\t\tconst userMailGroups = await loadEnabledUserMailGroups(customer)\n\t\tconst allMailGroups = teamMailGroups.concat(userMailGroups)\n\t\tlet catchAllMailGroupId: Id | null = null\n\t\tif (domainInfo.catchAllMailGroup) {\n\t\t\tconst catchAllGroup = await locator.entityClient.load(GroupTypeRef, domainInfo.catchAllMailGroup)\n\t\t\tif (catchAllGroup.type === GroupType.User) {\n\t\t\t\t// the catch all group may be a user group, so load the mail group in that case\n\t\t\t\tconst user = await locator.entityClient.load(UserTypeRef, neverNull(catchAllGroup.user))\n\t\t\t\tcatchAllMailGroupId = getUserGroupMemberships(user, GroupType.Mail)[0].group // the first is the users personal mail group\n\t\t\t} else {\n\t\t\t\tcatchAllMailGroupId = domainInfo.catchAllMailGroup\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tavailable: allMailGroups,\n\t\t\tselected: allMailGroups.find((g) => g.groupId === catchAllMailGroupId) ?? null,\n\t\t}\n\t}\n\n\tprivate deleteCustomDomain(domainInfo: DomainInfo) {\n\t\tDialog.confirm(\n\t\t\tlang.getTranslation(\"confirmCustomDomainDeletion_msg\", {\n\t\t\t\t\"{domain}\": domainInfo.domain,\n\t\t\t}),\n\t\t).then((confirmed) => {\n\t\t\tif (confirmed) {\n\t\t\t\tlocator.customerFacade\n\t\t\t\t\t.removeDomain(domainInfo.domain)\n\t\t\t\t\t.catch(\n\t\t\t\t\t\tofClass(PreconditionFailedError, () => {\n\t\t\t\t\t\t\tDialog.message(\n\t\t\t\t\t\t\t\tlang.getTranslation(\"customDomainDeletePreconditionFailed_msg\", {\n\t\t\t\t\t\t\t\t\t\"{domainName}\": domainInfo.domain,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t\t.catch(ofClass(LockedError, () => Dialog.message(\"operationStillActive_msg\")))\n\t\t\t}\n\t\t})\n\t}\n\n\tentityEventsReceived(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\tthis.accountMaintenanceUpdateNotifier?.(updates)\n\n\t\treturn promiseMap(updates, (update) => {\n\t\t\tif (isUpdateForTypeRef(CustomerServerPropertiesTypeRef, update) && update.operation === OperationType.UPDATE) {\n\t\t\t\treturn this.updateCustomerServerProperties()\n\t\t\t} else if (isUpdateForTypeRef(CustomerInfoTypeRef, update) && update.operation === OperationType.UPDATE) {\n\t\t\t\tthis.customerInfo.reset()\n\n\t\t\t\treturn this.updateDomains()\n\t\t\t} else if (isUpdateForTypeRef(CustomerPropertiesTypeRef, update)) {\n\t\t\t\tthis.customerProperties.reset()\n\t\t\t\tthis.customerProperties.getAsync().then(m.redraw)\n\t\t\t}\n\t\t}).then(noOp)\n\t}\n}\n"]}