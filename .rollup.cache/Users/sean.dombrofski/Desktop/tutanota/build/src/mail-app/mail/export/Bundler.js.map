{"version":3,"file":"Bundler.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/export/Bundler.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,mDAAmD,CAAA;AAG/E,OAAO,EAAE,QAAQ,EAAE,MAAM,8CAA8C,CAAA;AAEvE,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAA;AAIlD,OAAO,EAAE,kBAAkB,EAAE,eAAe,EAAsB,MAAM,+CAA+C,CAAA;AACvH,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAA;AAI5D,MAAM,UAAU,cAAc,CAAC,SAAwB,EAAE,IAAU,EAAE,WAAwB,EAAE,WAA4B;IAC1H,MAAM,eAAe,GAAG,CAAC,EAAE,OAAO,EAAE,IAAI,EAAsB,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;IACtF,MAAM,IAAI,GAAG,SAAS,CAAC,YAAY,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;QACtE,oBAAoB,EAAE,KAAK;QAC3B,kBAAkB,EAAE,KAAK;QACzB,6BAA6B,EAAE,KAAK;KACpC,CAAC,CAAC,IAAI,CAAA;IAEP,OAAO;QACN,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC;QACtB,OAAO,EAAE,IAAI,CAAC,OAAO;QACrB,IAAI;QACJ,MAAM,EAAE,eAAe,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QACjD,EAAE,EAAE,WAAW,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC;QAC5D,EAAE,EAAE,WAAW,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC;QAC5D,GAAG,EAAE,WAAW,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC;QAC9D,OAAO,EAAE,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC;QAClD,OAAO,EAAE,IAAI,CAAC,KAAK,8BAAoB;QACvC,MAAM,EAAE,CAAC,IAAI,CAAC,MAAM;QACpB,MAAM,EAAE,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE;QACtC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;QACvC,OAAO,EAAE,WAAW,CAAC,OAAO,EAAE,iBAAiB,IAAI,WAAW,CAAC,OAAO,EAAE,OAAO,IAAI,IAAI;QACvF,WAAW;KACX,CAAA;AACF,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACvC,IAAU,EACV,UAAsB,EACtB,YAA0B,EAC1B,cAA8B,EAC9B,SAAwB,EACxB,YAA0B;IAE1B,MAAM,WAAW,GAAG,MAAM,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;IAE3D,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAA;IAChH,MAAM,WAAW,GAAG,MAAM,UAAU,CACnC,MAAM,YAAY,CAAC,+BAA+B,CAAC,IAAI,EAAE,KAAK,CAAC,EAC/D,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,MAAM,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,CACxD,CAAA;IACD,OAAO,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,CAAC,CAAA;AACjE,CAAC","sourcesContent":["import type { Mail, MailDetails } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { FileTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport type { EntityClient } from \"../../../common/api/common/EntityClient\"\nimport { MailState } from \"../../../common/api/common/TutanotaConstants\"\nimport { getLetId } from \"../../../common/api/common/utils/EntityUtils\"\nimport type { HtmlSanitizer } from \"../../../common/misc/HtmlSanitizer\"\nimport { promiseMap } from \"@tutao/tutanota-utils\"\nimport { FileController } from \"../../../common/file/FileController\"\nimport { MailFacade } from \"../../../common/api/worker/facades/lazy/MailFacade.js\"\nimport { CryptoFacade } from \"../../../common/api/worker/crypto/CryptoFacade.js\"\nimport { getDisplayedSender, getMailBodyText, MailAddressAndName } from \"../../../common/api/common/CommonMailUtils.js\"\nimport { loadMailDetails } from \"../view/MailViewerUtils.js\"\nimport { MailBundle } from \"../../../common/mailFunctionality/SharedMailUtils.js\"\nimport { DataFile } from \"../../../common/api/common/DataFile.js\"\n\nexport function makeMailBundle(sanitizer: HtmlSanitizer, mail: Mail, mailDetails: MailDetails, attachments: Array<DataFile>): MailBundle {\n\tconst recipientMapper = ({ address, name }: MailAddressAndName) => ({ address, name })\n\tconst body = sanitizer.sanitizeHTML(getMailBodyText(mailDetails.body), {\n\t\tblockExternalContent: false,\n\t\tallowRelativeLinks: false,\n\t\tusePlaceholderForInlineImages: false,\n\t}).html\n\n\treturn {\n\t\tmailId: getLetId(mail),\n\t\tsubject: mail.subject,\n\t\tbody,\n\t\tsender: recipientMapper(getDisplayedSender(mail)),\n\t\tto: mailDetails.recipients.toRecipients.map(recipientMapper),\n\t\tcc: mailDetails.recipients.ccRecipients.map(recipientMapper),\n\t\tbcc: mailDetails.recipients.bccRecipients.map(recipientMapper),\n\t\treplyTo: mailDetails.replyTos.map(recipientMapper),\n\t\tisDraft: mail.state === MailState.DRAFT,\n\t\tisRead: !mail.unread,\n\t\tsentOn: mailDetails.sentDate.getTime(),\n\t\treceivedOn: mail.receivedDate.getTime(),\n\t\theaders: mailDetails.headers?.compressedHeaders ?? mailDetails.headers?.headers ?? null,\n\t\tattachments,\n\t}\n}\n\n/**\n * Downloads the mail body and the attachments for an email, to prepare for exporting\n */\nexport async function downloadMailBundle(\n\tmail: Mail,\n\tmailFacade: MailFacade,\n\tentityClient: EntityClient,\n\tfileController: FileController,\n\tsanitizer: HtmlSanitizer,\n\tcryptoFacade: CryptoFacade,\n): Promise<MailBundle> {\n\tconst mailDetails = await loadMailDetails(mailFacade, mail)\n\n\tconst files = await promiseMap(mail.attachments, async (fileId) => await entityClient.load(FileTypeRef, fileId))\n\tconst attachments = await promiseMap(\n\t\tawait cryptoFacade.enforceSessionKeyUpdateIfNeeded(mail, files),\n\t\tasync (file) => await fileController.getAsDataFile(file),\n\t)\n\treturn makeMailBundle(sanitizer, mail, mailDetails, attachments)\n}\n"]}