{"version":3,"file":"EditFolderDialog.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/view/EditFolderDialog.ts"],"names":[],"mappings":"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","sourcesContent":["import { Mail, MailFolder, MailSetEntryTypeRef, MailTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { DropDownSelector, SelectorItemList } from \"../../../common/gui/base/DropDownSelector.js\"\nimport m from \"mithril\"\nimport { TextField } from \"../../../common/gui/base/TextField.js\"\nimport { Dialog } from \"../../../common/gui/base/Dialog.js\"\nimport { locator } from \"../../../common/api/main/CommonLocator.js\"\nimport { LockedError } from \"../../../common/api/common/error/RestError.js\"\nimport { lang, TranslationKey } from \"../../../common/misc/LanguageViewModel.js\"\nimport { MailboxDetail } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { MailReportType, MailSetKind } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { elementIdPart, isSameId, listIdPart } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { reportMailsAutomatically } from \"./MailReportDialog.js\"\nimport { isOfflineError } from \"../../../common/api/common/utils/ErrorUtils.js\"\nimport { groupByAndMap } from \"@tutao/tutanota-utils\"\nimport { mailLocator } from \"../../mailLocator.js\"\nimport { assertNotNull } from \"@tutao/tutanota-utils\"\nimport type { FolderSystem, IndentedFolder } from \"../../../common/api/common/mail/FolderSystem.js\"\nimport { getFolderName, getIndentedFolderNameForDropdown, getPathToFolderString } from \"../model/MailUtils.js\"\nimport { isSpamOrTrashFolder } from \"../model/MailChecks.js\"\n\n/**\n * Dialog for Edit and Add folder are the same.\n * @param editedFolder if this is null, a folder is being added, otherwise a folder is being edited\n */\nexport async function showEditFolderDialog(mailBoxDetail: MailboxDetail, editedFolder: MailFolder | null = null, parentFolder: MailFolder | null = null) {\n\tconst noParentFolderOption = lang.get(\"comboBoxSelectionNone_msg\")\n\tconst mailGroupId = mailBoxDetail.mailGroup._id\n\tconst folders = await mailLocator.mailModel.getMailboxFoldersForId(assertNotNull(mailBoxDetail.mailbox.folders)._id)\n\tlet folderNameValue = editedFolder?.name ?? \"\"\n\tlet targetFolders: SelectorItemList<MailFolder | null> = folders\n\t\t.getIndentedList(editedFolder)\n\t\t// filter: SPAM and TRASH and descendants are only shown if editing (folders can only be moved there, not created there)\n\t\t.filter((folderInfo: IndentedFolder) => !(editedFolder === null && isSpamOrTrashFolder(folders, folderInfo.folder)))\n\t\t.map((folderInfo: IndentedFolder) => {\n\t\t\treturn {\n\t\t\t\tname: getIndentedFolderNameForDropdown(folderInfo),\n\t\t\t\tvalue: folderInfo.folder,\n\t\t\t}\n\t\t})\n\ttargetFolders = [{ name: noParentFolderOption, value: null }, ...targetFolders]\n\tlet selectedParentFolder = parentFolder\n\tlet form = () => [\n\t\tm(TextField, {\n\t\t\tlabel: editedFolder ? \"rename_action\" : \"folderName_label\",\n\t\t\tvalue: folderNameValue,\n\t\t\toninput: (newInput) => {\n\t\t\t\tfolderNameValue = newInput\n\t\t\t},\n\t\t}),\n\t\tm(DropDownSelector, {\n\t\t\tlabel: \"parentFolder_label\",\n\t\t\titems: targetFolders,\n\t\t\tselectedValue: selectedParentFolder,\n\t\t\tselectedValueDisplay: selectedParentFolder ? getFolderName(selectedParentFolder) : noParentFolderOption,\n\t\t\tselectionChangedHandler: (newFolder: MailFolder | null) => (selectedParentFolder = newFolder),\n\t\t\thelpLabel: () => (selectedParentFolder ? getPathToFolderString(folders, selectedParentFolder) : \"\"),\n\t\t}),\n\t]\n\n\tasync function getMailIdsGroupedByListId(folder: MailFolder): Promise<Map<Id, Id[]>> {\n\t\tconst mailSetEntries = await locator.entityClient.loadAll(MailSetEntryTypeRef, folder.entries)\n\t\treturn groupByAndMap(\n\t\t\tmailSetEntries,\n\t\t\t(mse) => listIdPart(mse.mail),\n\t\t\t(mse) => elementIdPart(mse.mail),\n\t\t)\n\t}\n\n\tasync function loadAllMailsOfFolder(folder: MailFolder, reportableMails: Array<Mail>) {\n\t\tconst mailIdsPerBag = await getMailIdsGroupedByListId(folder)\n\t\tfor (const [mailListId, mailIds] of mailIdsPerBag) {\n\t\t\treportableMails.push(...(await locator.entityClient.loadMultiple(MailTypeRef, mailListId, mailIds)))\n\t\t}\n\t}\n\n\tconst okAction = async (dialog: Dialog) => {\n\t\t// closing right away to prevent duplicate actions\n\t\tdialog.close()\n\t\ttry {\n\t\t\t// if folder is null, create new folder\n\t\t\tif (editedFolder === null) {\n\t\t\t\tawait locator.mailFacade.createMailFolder(folderNameValue, selectedParentFolder?._id ?? null, mailGroupId)\n\t\t\t} else {\n\t\t\t\t// if it is being moved to trash (and not already in trash), ask about trashing\n\t\t\t\tif (selectedParentFolder?.folderType === MailSetKind.TRASH && !isSameId(selectedParentFolder._id, editedFolder.parentFolder)) {\n\t\t\t\t\tconst confirmed = await Dialog.confirm(\n\t\t\t\t\t\tlang.makeTranslation(\n\t\t\t\t\t\t\t\"confirm\",\n\t\t\t\t\t\t\tlang.get(\"confirmDeleteCustomFolder_msg\", {\n\t\t\t\t\t\t\t\t\"{1}\": getFolderName(editedFolder),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t\tif (!confirmed) return\n\n\t\t\t\t\tawait locator.mailFacade.updateMailFolderName(editedFolder, folderNameValue)\n\t\t\t\t\tawait mailLocator.mailModel.trashFolderAndSubfolders(editedFolder)\n\t\t\t\t} else if (selectedParentFolder?.folderType === MailSetKind.SPAM && !isSameId(selectedParentFolder._id, editedFolder.parentFolder)) {\n\t\t\t\t\t// if it is being moved to spam (and not already in spam), ask about reporting containing emails\n\t\t\t\t\tconst confirmed = await Dialog.confirm(\n\t\t\t\t\t\tlang.makeTranslation(\n\t\t\t\t\t\t\t\"confirm\",\n\t\t\t\t\t\t\tlang.get(\"confirmSpamCustomFolder_msg\", {\n\t\t\t\t\t\t\t\t\"{1}\": getFolderName(editedFolder),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t\tif (!confirmed) return\n\n\t\t\t\t\t// get mails to report before moving to mail model\n\t\t\t\t\tconst descendants = folders.getDescendantFoldersOfParent(editedFolder._id).sort((l: IndentedFolder, r: IndentedFolder) => r.level - l.level)\n\t\t\t\t\tlet reportableMails: Array<Mail> = []\n\t\t\t\t\tawait loadAllMailsOfFolder(editedFolder, reportableMails)\n\t\t\t\t\tfor (const descendant of descendants) {\n\t\t\t\t\t\tawait loadAllMailsOfFolder(descendant.folder, reportableMails)\n\t\t\t\t\t}\n\t\t\t\t\tawait reportMailsAutomatically(MailReportType.SPAM, locator.mailboxModel, mailLocator.mailModel, mailBoxDetail, reportableMails)\n\n\t\t\t\t\tawait locator.mailFacade.updateMailFolderName(editedFolder, folderNameValue)\n\t\t\t\t\tawait mailLocator.mailModel.sendFolderToSpam(editedFolder)\n\t\t\t\t} else {\n\t\t\t\t\tawait locator.mailFacade.updateMailFolderName(editedFolder, folderNameValue)\n\t\t\t\t\tawait locator.mailFacade.updateMailFolderParent(editedFolder, selectedParentFolder?._id || null)\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (isOfflineError(error) || !(error instanceof LockedError)) {\n\t\t\t\tthrow error\n\t\t\t}\n\t\t}\n\t}\n\n\tDialog.showActionDialog({\n\t\ttitle: editedFolder ? \"editFolder_action\" : \"addFolder_action\",\n\t\tchild: form,\n\t\tvalidator: () => checkFolderName(mailBoxDetail, folders, folderNameValue, mailGroupId, selectedParentFolder?._id ?? null),\n\t\tallowOkWithReturn: true,\n\t\tokAction: okAction,\n\t})\n}\n\nfunction checkFolderName(\n\tmailboxDetail: MailboxDetail,\n\tfolders: FolderSystem,\n\tname: string,\n\tmailGroupId: Id,\n\tparentFolderId: IdTuple | null,\n): TranslationKey | null {\n\tif (name.trim() === \"\") {\n\t\treturn \"folderNameNeutral_msg\"\n\t} else if (folders.getCustomFoldersOfParent(parentFolderId).some((f) => f.name === name)) {\n\t\treturn \"folderNameInvalidExisting_msg\"\n\t} else {\n\t\treturn null\n\t}\n}\n"]}