{"version":3,"file":"VerifyOwnershipPage.js","sourceRoot":"","sources":["../../../../../src/mail-app/settings/emaildomain/VerifyOwnershipPage.ts"],"names":[],"mappings":"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","sourcesContent":["import { assertEnumValue, CustomDomainType, CustomDomainTypeCount, CustomDomainValidationResult } from \"../../../common/api/common/TutanotaConstants\"\nimport m, { Children, Vnode, VnodeDOM } from \"mithril\"\nimport type { AddDomainData } from \"./AddDomainWizard\"\nimport { showProgressDialog } from \"../../../common/gui/dialogs/ProgressDialog\"\nimport { lang, TranslationKey } from \"../../../common/misc/LanguageViewModel\"\nimport { Dialog } from \"../../../common/gui/base/Dialog\"\nimport type { WizardPageAttrs, WizardPageN } from \"../../../common/gui/base/WizardDialog.js\"\nimport { emitWizardEvent, WizardEventType } from \"../../../common/gui/base/WizardDialog.js\"\nimport { PreconditionFailedError } from \"../../../common/api/common/error/RestError.js\"\nimport { showPlanUpgradeRequiredDialog } from \"../../../common/misc/SubscriptionDialogs.js\"\nimport { downcast, isEmpty, ofClass } from \"@tutao/tutanota-utils\"\nimport { locator } from \"../../../common/api/main/CommonLocator\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { createDnsRecordTable } from \"./DnsRecordTable.js\"\nimport { getAvailableMatchingPlans } from \"../../../common/subscription/SubscriptionUtils.js\"\nimport { getCustomMailDomains } from \"../../../common/api/common/utils/CustomerUtils.js\"\nimport { LoginButton } from \"../../../common/gui/base/buttons/LoginButton.js\"\n\nassertMainOrNode()\n\nexport enum CustomDomainFailureReasons {\n\tLIMIT_REACHED = \"customdomainservice.limit_reached\",\n\tDOMAIN_IN_USE = \"customdomainservice.domain_in_use\",\n}\n\nexport class VerifyOwnershipPage implements WizardPageN<AddDomainData> {\n\tprivate dom!: HTMLElement\n\n\toncreate(vnode: VnodeDOM<WizardPageAttrs<AddDomainData>>) {\n\t\tthis.dom = vnode.dom as HTMLElement\n\t\t// We expect that the page is created again each time when domain is changed so we only need to load it in oncreate.\n\t\tconst { data } = vnode.attrs\n\t\tlocator.customerFacade.getDomainValidationRecord(data.domain()).then((recordValue) => {\n\t\t\tdata.expectedVerificationRecord.value = recordValue\n\t\t\tm.redraw()\n\t\t})\n\t}\n\n\tview(vnode: Vnode<WizardPageAttrs<AddDomainData>>): Children {\n\t\tconst a = vnode.attrs\n\t\treturn [\n\t\t\tm(\"h4.mt-l.text-center\", lang.get(\"verifyDomainOwnership_title\")),\n\t\t\tm(\n\t\t\t\t\"p\",\n\t\t\t\tlang.get(\"verifyDomainOwnershipExplanation_msg\", {\n\t\t\t\t\t\"{domain}\": a.data.domain(),\n\t\t\t\t}),\n\t\t\t),\n\t\t\tm(\"p\", lang.get(\"verifyOwnershipTXTrecord_msg\")),\n\t\t\tcreateDnsRecordTable([vnode.attrs.data.expectedVerificationRecord]),\n\t\t\tm(\n\t\t\t\t\".flex-center.full-width.pt-l.mb-l\",\n\t\t\t\tm(LoginButton, {\n\t\t\t\t\tlabel: \"next_action\",\n\t\t\t\t\tclass: \"small-login-button\",\n\t\t\t\t\tonclick: () => emitWizardEvent(this.dom, WizardEventType.SHOW_NEXT_PAGE),\n\t\t\t\t}),\n\t\t\t),\n\t\t]\n\t}\n}\n\nexport class VerifyOwnershipPageAttrs implements WizardPageAttrs<AddDomainData> {\n\tdata: AddDomainData\n\n\tconstructor(domainData: AddDomainData) {\n\t\tthis.data = domainData\n\t}\n\n\theaderTitle(): TranslationKey {\n\t\treturn \"domainSetup_title\"\n\t}\n\n\tnextAction(showErrorDialog: boolean = true): Promise<boolean> {\n\t\treturn showProgressDialog(\n\t\t\t\"pleaseWait_msg\",\n\t\t\tlocator.customerFacade.addDomain(this.data.domain()).then((result) => {\n\t\t\t\tconst validationResult = assertEnumValue(CustomDomainValidationResult, result.validationResult)\n\t\t\t\tif (validationResult === CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_OK) {\n\t\t\t\t\treturn null\n\t\t\t\t} else if (validationResult === CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_DOMAIN_NOT_AVAILABLE) {\n\t\t\t\t\tlet customDomainInfos = getCustomMailDomains(this.data.customerInfo)\n\n\t\t\t\t\t//domain is already assigned to this account\n\t\t\t\t\tif (customDomainInfos.some((domainInfo) => domainInfo.domain === this.data.domain())) {\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\n\t\t\t\t\treturn () => lang.get(\"customDomainErrorDomainNotAvailable_msg\")\n\t\t\t\t} else {\n\t\t\t\t\tconst errorMessageMap: Record<CustomDomainValidationResult, TranslationKey> = {\n\t\t\t\t\t\t[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_OK]: \"emptyString_msg\",\n\t\t\t\t\t\t[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_DNS_LOOKUP_FAILED]: \"customDomainErrorDnsLookupFailure_msg\",\n\t\t\t\t\t\t[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_DOMAIN_NOT_FOUND]: \"customDomainErrorDomainNotFound_msg\",\n\t\t\t\t\t\t[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_NAMESERVER_NOT_FOUND]: \"customDomainErrorNameserverNotFound_msg\",\n\t\t\t\t\t\t[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_DOMAIN_NOT_AVAILABLE]: \"customDomainErrorDomainNotAvailable_msg\",\n\t\t\t\t\t\t[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_VALIDATION_FAILED]: \"customDomainErrorValidationFailed_msg\",\n\t\t\t\t\t}\n\t\t\t\t\treturn lang.makeTranslation(\n\t\t\t\t\t\t\"error_msg\",\n\t\t\t\t\t\tlang.get(errorMessageMap[validationResult]) + //TODO correct to use? customDomainErrorOtherTxtRecords_msg\n\t\t\t\t\t\t\t(result.invalidDnsRecords.length > 0\n\t\t\t\t\t\t\t\t? \" \" + lang.get(\"customDomainErrorOtherTxtRecords_msg\") + \"\\n\" + result.invalidDnsRecords.map((r) => r.value).join(\"\\n\")\n\t\t\t\t\t\t\t\t: \"\"),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}),\n\t\t)\n\t\t\t.then((message) => {\n\t\t\t\tif (message) {\n\t\t\t\t\treturn showErrorDialog ? Dialog.message(downcast(message)).then(() => false) : false\n\t\t\t\t}\n\n\t\t\t\treturn true\n\t\t\t})\n\t\t\t.catch(\n\t\t\t\tofClass(PreconditionFailedError, async (e) => {\n\t\t\t\t\tif (e.data === CustomDomainFailureReasons.LIMIT_REACHED) {\n\t\t\t\t\t\tconst nbrOfCustomDomains = this.data.customerInfo.domainInfos.filter((domainInfo) => domainInfo.whitelabelConfig == null).length\n\t\t\t\t\t\tconst plans = await getAvailableMatchingPlans(locator.serviceExecutor, (config) => {\n\t\t\t\t\t\t\tif (config.customDomainType in CustomDomainTypeCount) {\n\t\t\t\t\t\t\t\tconst planDomains = CustomDomainTypeCount[config.customDomainType as CustomDomainType]\n\t\t\t\t\t\t\t\treturn planDomains === -1 || planDomains > nbrOfCustomDomains\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tif (isEmpty(plans)) {\n\t\t\t\t\t\t\t// shouldn't happen while we have the Unlimited plan...\n\t\t\t\t\t\t\tDialog.message(\"tooManyCustomDomains_msg\")\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// ignore promise. always return false to not switch to next page.\n\t\t\t\t\t\t\tshowPlanUpgradeRequiredDialog(plans, \"moreCustomDomainsRequired_msg\")\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tDialog.message(lang.makeTranslation(\"error_msg\", e.toString()))\n\t\t\t\t\t}\n\t\t\t\t\treturn false\n\t\t\t\t}),\n\t\t\t)\n\t}\n\n\tisSkipAvailable(): boolean {\n\t\treturn false\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn true\n\t}\n}\n"]}