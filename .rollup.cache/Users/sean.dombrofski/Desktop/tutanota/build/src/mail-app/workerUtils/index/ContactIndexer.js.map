{"version":3,"file":"ContactIndexer.js","sourceRoot":"","sources":["../../../../../src/mail-app/workerUtils/index/ContactIndexer.ts"],"names":[],"mappings":"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","sourcesContent":["import { NotAuthorizedError, NotFoundError } from \"../../../common/api/common/error/RestError.js\"\nimport type { Contact, ContactList } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { ContactTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { typeModels as tutanotaModels } from \"../../../common/api/entities/tutanota/TypeModels.js\"\nimport type { Db, GroupData, IndexUpdate, SearchIndexEntry } from \"../../../common/api/worker/search/SearchTypes.js\"\nimport { _createNewIndexUpdate, typeRefToTypeInfo } from \"../../../common/api/worker/search/IndexUtils.js\"\nimport { neverNull, noOp, ofClass, promiseMap } from \"@tutao/tutanota-utils\"\nimport { FULL_INDEXED_TIMESTAMP, OperationType } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { IndexerCore } from \"./IndexerCore.js\"\nimport { SuggestionFacade } from \"./SuggestionFacade.js\"\nimport { tokenize } from \"@tutao/tutanota-utils\"\nimport type { EntityUpdate } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { GroupDataOS, MetaDataOS } from \"../../../common/api/worker/search/IndexTables.js\"\n\nexport class ContactIndexer {\n\t_core: IndexerCore\n\t_db: Db\n\t_entity: EntityClient\n\tsuggestionFacade: SuggestionFacade<Contact>\n\n\tconstructor(core: IndexerCore, db: Db, entity: EntityClient, suggestionFacade: SuggestionFacade<Contact>) {\n\t\tthis._core = core\n\t\tthis._db = db\n\t\tthis._entity = entity\n\t\tthis.suggestionFacade = suggestionFacade\n\t}\n\n\tcreateContactIndexEntries(contact: Contact): Map<string, SearchIndexEntry[]> {\n\t\tconst ContactModel = tutanotaModels.Contact\n\t\tlet keyToIndexEntries = this._core.createIndexEntriesForAttributes(contact, [\n\t\t\t{\n\t\t\t\tattribute: ContactModel.values[\"firstName\"],\n\t\t\t\tvalue: () => contact.firstName,\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: ContactModel.values[\"lastName\"],\n\t\t\t\tvalue: () => contact.lastName,\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: ContactModel.values[\"nickname\"],\n\t\t\t\tvalue: () => contact.nickname || \"\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: ContactModel.values[\"role\"],\n\t\t\t\tvalue: () => contact.role,\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: ContactModel.values[\"title\"],\n\t\t\t\tvalue: () => contact.title || \"\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: ContactModel.values[\"comment\"],\n\t\t\t\tvalue: () => contact.comment,\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: ContactModel.values[\"company\"],\n\t\t\t\tvalue: () => contact.company,\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: ContactModel.associations[\"addresses\"],\n\t\t\t\tvalue: () => contact.addresses.map((a) => a.address).join(\",\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: ContactModel.associations[\"mailAddresses\"],\n\t\t\t\tvalue: () => contact.mailAddresses.map((cma) => cma.address).join(\",\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: ContactModel.associations[\"phoneNumbers\"],\n\t\t\t\tvalue: () => contact.phoneNumbers.map((pn) => pn.number).join(\",\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\tattribute: ContactModel.associations[\"socialIds\"],\n\t\t\t\tvalue: () => contact.socialIds.map((s) => s.socialId).join(\",\"),\n\t\t\t},\n\t\t])\n\n\t\tthis.suggestionFacade.addSuggestions(this._getSuggestionWords(contact))\n\t\treturn keyToIndexEntries\n\t}\n\n\t_getSuggestionWords(contact: Contact): string[] {\n\t\treturn tokenize(contact.firstName + \" \" + contact.lastName + \" \" + contact.mailAddresses.map((ma) => ma.address).join(\" \"))\n\t}\n\n\tprocessNewContact(event: EntityUpdate): Promise<\n\t\t| {\n\t\t\t\tcontact: Contact\n\t\t\t\tkeyToIndexEntries: Map<string, SearchIndexEntry[]>\n\t\t  }\n\t\t| null\n\t\t| undefined\n\t> {\n\t\treturn this._entity\n\t\t\t.load(ContactTypeRef, [event.instanceListId, event.instanceId])\n\t\t\t.then((contact) => {\n\t\t\t\tlet keyToIndexEntries = this.createContactIndexEntries(contact)\n\t\t\t\treturn this.suggestionFacade.store().then(() => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcontact,\n\t\t\t\t\t\tkeyToIndexEntries,\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(\n\t\t\t\tofClass(NotFoundError, () => {\n\t\t\t\t\tconsole.log(\"tried to index non existing contact\")\n\t\t\t\t\treturn null\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(NotAuthorizedError, () => {\n\t\t\t\t\tconsole.log(\"tried to index contact without permission\")\n\t\t\t\t\treturn null\n\t\t\t\t}),\n\t\t\t)\n\t}\n\n\tasync getIndexTimestamp(contactList: ContactList): Promise<number | null> {\n\t\tconst t = await this._db.dbFacade.createTransaction(true, [MetaDataOS, GroupDataOS])\n\t\tconst groupId = neverNull(contactList._ownerGroup)\n\t\treturn t.get(GroupDataOS, groupId).then((groupData: GroupData | null) => {\n\t\t\treturn groupData ? groupData.indexTimestamp : null\n\t\t})\n\t}\n\n\t/**\n\t * Indexes the contact list if it is not yet indexed.\n\t */\n\tasync indexFullContactList(contactList: ContactList): Promise<any> {\n\t\tconst groupId = neverNull(contactList._ownerGroup)\n\t\tlet indexUpdate = _createNewIndexUpdate(typeRefToTypeInfo(ContactTypeRef))\n\t\ttry {\n\t\t\tconst contacts = await this._entity.loadAll(ContactTypeRef, contactList.contacts)\n\t\t\tfor (const contact of contacts) {\n\t\t\t\tlet keyToIndexEntries = this.createContactIndexEntries(contact)\n\t\t\t\tthis._core.encryptSearchIndexEntries(contact._id, neverNull(contact._ownerGroup), keyToIndexEntries, indexUpdate)\n\t\t\t}\n\t\t\treturn Promise.all([\n\t\t\t\tthis._core.writeIndexUpdate(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\t\tindexTimestamp: FULL_INDEXED_TIMESTAMP,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tindexUpdate,\n\t\t\t\t),\n\t\t\t\tthis.suggestionFacade.store(),\n\t\t\t])\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\treturn Promise.resolve()\n\t\t\t}\n\t\t\tthrow e\n\t\t}\n\t}\n\n\tprocessEntityEvents(events: EntityUpdate[], groupId: Id, batchId: Id, indexUpdate: IndexUpdate): Promise<void> {\n\t\treturn promiseMap(events, async (event) => {\n\t\t\tif (event.operation === OperationType.CREATE) {\n\t\t\t\tawait this.processNewContact(event).then((result) => {\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tthis._core.encryptSearchIndexEntries(result.contact._id, neverNull(result.contact._ownerGroup), result.keyToIndexEntries, indexUpdate)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else if (event.operation === OperationType.UPDATE) {\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tthis._core._processDeleted(event, indexUpdate),\n\t\t\t\t\tthis.processNewContact(event).then((result) => {\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tthis._core.encryptSearchIndexEntries(\n\t\t\t\t\t\t\t\tresult.contact._id,\n\t\t\t\t\t\t\t\tneverNull(result.contact._ownerGroup),\n\t\t\t\t\t\t\t\tresult.keyToIndexEntries,\n\t\t\t\t\t\t\t\tindexUpdate,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t])\n\t\t\t} else if (event.operation === OperationType.DELETE) {\n\t\t\t\tawait this._core._processDeleted(event, indexUpdate)\n\t\t\t}\n\t\t}).then(noOp)\n\t}\n}\n"]}