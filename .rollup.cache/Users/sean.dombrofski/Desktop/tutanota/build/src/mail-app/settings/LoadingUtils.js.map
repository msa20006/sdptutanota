{"version":3,"file":"LoadingUtils.js","sourceRoot":"","sources":["../../../../src/mail-app/settings/LoadingUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Customer } from \"../../common/api/entities/sys/TypeRefs.js\"\nimport { GroupInfoTypeRef, GroupTypeRef, UserTypeRef } from \"../../common/api/entities/sys/TypeRefs.js\"\nimport { neverNull, promiseMap } from \"@tutao/tutanota-utils\"\nimport { GroupType } from \"../../common/api/common/TutanotaConstants\"\nimport { getGroupInfoDisplayName, getUserGroupMemberships } from \"../../common/api/common/utils/GroupUtils\"\nimport { locator } from \"../../common/api/main/CommonLocator\"\n\n/**\n * As users personal mail group infos do not contain name and mail address we use this wrapper to store group ids together with name and mail address.\n */\nexport class GroupData {\n\tgroupId: Id\n\tdisplayName: string\n\n\tconstructor(groupId: Id, displayName: string) {\n\t\tthis.groupId = groupId\n\t\tthis.displayName = displayName\n\t}\n}\n\nexport function loadGroupDisplayName(groupId: Id): Promise<Id> {\n\treturn locator.entityClient\n\t\t.load(GroupTypeRef, groupId)\n\t\t.then((group) => {\n\t\t\tif (group.user && group.type !== GroupType.User) {\n\t\t\t\t// the users personal mail group does not have a name, so show the user name\n\t\t\t\treturn locator.entityClient.load(UserTypeRef, group.user).then((user) => {\n\t\t\t\t\treturn locator.entityClient.load(GroupInfoTypeRef, user.userGroup.groupInfo)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\treturn locator.entityClient.load(GroupInfoTypeRef, group.groupInfo)\n\t\t\t}\n\t\t})\n\t\t.then((groupInfo) => {\n\t\t\treturn getGroupInfoDisplayName(groupInfo)\n\t\t})\n}\n\nexport async function loadEnabledTeamMailGroups(customer: Customer): Promise<GroupData[]> {\n\tconst infos = await locator.entityClient.loadAll(GroupInfoTypeRef, customer.teamGroups)\n\treturn infos\n\t\t.filter((teamGroupInfo) => {\n\t\t\tif (teamGroupInfo.deleted) {\n\t\t\t\treturn false\n\t\t\t} else {\n\t\t\t\treturn locator.entityClient.load(GroupTypeRef, teamGroupInfo.group).then((teamGroup) => teamGroup.type === GroupType.Mail)\n\t\t\t}\n\t\t})\n\t\t.map((mailTeamGroupInfo) => new GroupData(mailTeamGroupInfo.group, getGroupInfoDisplayName(mailTeamGroupInfo)))\n}\n\nexport async function loadEnabledUserMailGroups(customer: Customer): Promise<GroupData[]> {\n\tconst groupInfos = await locator.entityClient.loadAll(GroupInfoTypeRef, customer.userGroups)\n\treturn promiseMap(\n\t\tgroupInfos.filter((g) => !g.deleted),\n\t\tasync (userGroupInfo) => {\n\t\t\tconst userGroup = await locator.entityClient.load(GroupTypeRef, userGroupInfo.group)\n\t\t\tconst user = await locator.entityClient.load(UserTypeRef, neverNull(userGroup.user))\n\t\t\treturn new GroupData(getUserGroupMemberships(user, GroupType.Mail)[0].group, getGroupInfoDisplayName(userGroupInfo))\n\t\t},\n\t)\n}\n"]}