{"version":3,"file":"Indexer.js","sourceRoot":"","sources":["../../../../../src/mail-app/workerUtils/index/Indexer.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tENTITY_EVENT_BATCH_TTL_DAYS,\n\tgetMembershipGroupType,\n\tGroupType,\n\tNOTHING_INDEXED_TIMESTAMP,\n\tOperationType,\n} from \"../../../common/api/common/TutanotaConstants.js\"\nimport { ConnectionError, NotAuthorizedError, NotFoundError } from \"../../../common/api/common/error/RestError.js\"\nimport type { EntityUpdate, GroupMembership, User } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { EntityEventBatch, EntityEventBatchTypeRef, UserTypeRef } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport type { DatabaseEntry, DbKey, DbTransaction } from \"../../../common/api/worker/search/DbFacade.js\"\nimport { b64UserIdHash, DbFacade } from \"../../../common/api/worker/search/DbFacade.js\"\nimport {\n\tassertNotNull,\n\tcontains,\n\tdaysToMillis,\n\tdefer,\n\tDeferredObject,\n\tdowncast,\n\tgetFromMap,\n\tisNotNull,\n\tisSameTypeRef,\n\tisSameTypeRefByAttr,\n\tmillisToDays,\n\tneverNull,\n\tnoOp,\n\tofClass,\n\tpromiseMap,\n\tTypeRef,\n} from \"@tutao/tutanota-utils\"\nimport {\n\tfirstBiggerThanSecond,\n\tGENERATED_MAX_ID,\n\tgeneratedIdToTimestamp,\n\tgetElementId,\n\tisSameId,\n\ttimestampToGeneratedId,\n} from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { _createNewIndexUpdate, filterIndexMemberships, markEnd, markStart, typeRefToTypeInfo } from \"../../../common/api/worker/search/IndexUtils.js\"\nimport type { Db, GroupData } from \"../../../common/api/worker/search/SearchTypes.js\"\nimport { IndexingErrorReason } from \"../../../common/api/worker/search/SearchTypes.js\"\nimport { ContactIndexer } from \"./ContactIndexer.js\"\nimport { ContactList, ContactListTypeRef, ContactTypeRef, ImportMailStateTypeRef, MailTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { MailIndexer } from \"./MailIndexer.js\"\nimport { IndexerCore } from \"./IndexerCore.js\"\nimport type { EntityRestClient } from \"../../../common/api/worker/rest/EntityRestClient.js\"\nimport { OutOfSyncError } from \"../../../common/api/common/error/OutOfSyncError.js\"\nimport { SuggestionFacade } from \"./SuggestionFacade.js\"\nimport { DbError } from \"../../../common/api/common/error/DbError.js\"\nimport type { QueuedBatch } from \"../../../common/api/worker/EventQueue.js\"\nimport { EventQueue } from \"../../../common/api/worker/EventQueue.js\"\nimport { CancelledError } from \"../../../common/api/common/error/CancelledError.js\"\nimport { MembershipRemovedError } from \"../../../common/api/common/error/MembershipRemovedError.js\"\nimport type { BrowserData } from \"../../../common/misc/ClientConstants.js\"\nimport { InvalidDatabaseStateError } from \"../../../common/api/common/error/InvalidDatabaseStateError.js\"\nimport { LocalTimeDateProvider } from \"../../../common/api/worker/DateProvider.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { deleteObjectStores } from \"../../../common/api/worker/utils/DbUtils.js\"\nimport {\n\taes256EncryptSearchIndexEntry,\n\taes256RandomKey,\n\tAesKey,\n\tBitArray,\n\tdecryptKey,\n\tIV_BYTE_LENGTH,\n\trandom,\n\tunauthenticatedAesDecrypt,\n} from \"@tutao/tutanota-crypto\"\nimport { DefaultEntityRestCache } from \"../../../common/api/worker/rest/DefaultEntityRestCache.js\"\nimport { CacheInfo } from \"../../../common/api/worker/facades/LoginFacade.js\"\nimport { InfoMessageHandler } from \"../../../common/gui/InfoMessageHandler.js\"\nimport {\n\tElementDataOS,\n\tEncryptedIndexerMetaData,\n\tGroupDataOS,\n\tMetadata,\n\tMetaDataOS,\n\tSearchIndexMetaDataOS,\n\tSearchIndexOS,\n\tSearchIndexWordsIndex,\n\tSearchTermSuggestionsOS,\n} from \"../../../common/api/worker/search/IndexTables.js\"\nimport { MailFacade } from \"../../../common/api/worker/facades/lazy/MailFacade.js\"\nimport { KeyLoaderFacade } from \"../../../common/api/worker/facades/KeyLoaderFacade.js\"\nimport { getIndexerMetaData, updateEncryptionMetadata } from \"../../../common/api/worker/facades/lazy/ConfigurationDatabase.js\"\nimport { encryptKeyWithVersionedKey, VersionedKey } from \"../../../common/api/worker/crypto/CryptoWrapper.js\"\n\nexport type InitParams = {\n\tuser: User\n\tkeyLoaderFacade: KeyLoaderFacade\n}\n\nconst DB_VERSION: number = 3\n\ninterface IndexerInitParams {\n\tuser: User\n\tkeyLoaderFacade: KeyLoaderFacade\n\tretryOnError?: boolean\n\tcacheInfo?: CacheInfo\n}\n\nexport function newSearchIndexDB(): DbFacade {\n\treturn new DbFacade(DB_VERSION, (event, db) => {\n\t\tif (event.oldVersion !== DB_VERSION && event.oldVersion !== 0) {\n\t\t\tdeleteObjectStores(db, SearchIndexOS, ElementDataOS, MetaDataOS, GroupDataOS, SearchTermSuggestionsOS, SearchIndexMetaDataOS)\n\t\t}\n\n\t\tdb.createObjectStore(SearchIndexOS, {\n\t\t\tautoIncrement: true,\n\t\t})\n\t\tconst metaOS = db.createObjectStore(SearchIndexMetaDataOS, {\n\t\t\tautoIncrement: true,\n\t\t\tkeyPath: \"id\",\n\t\t})\n\t\tdb.createObjectStore(ElementDataOS)\n\t\tdb.createObjectStore(MetaDataOS)\n\t\tdb.createObjectStore(GroupDataOS)\n\t\tdb.createObjectStore(SearchTermSuggestionsOS)\n\t\tmetaOS.createIndex(SearchIndexWordsIndex, \"word\", {\n\t\t\tunique: true,\n\t\t})\n\t})\n}\n\nexport class Indexer {\n\treadonly db: Db\n\tprivate readonly _dbInitializedDeferredObject: DeferredObject<void>\n\tprivate _initParams!: InitParams\n\treadonly _contact: ContactIndexer\n\treadonly _mail: MailIndexer\n\n\t/**\n\t * Last batch id per group from initial loading.\n\t * In case we get duplicate events from loading and websocket we want to filter them out to avoid processing duplicates.\n\t * */\n\t_initiallyLoadedBatchIdsPerGroup: Map<Id, Id>\n\n\t/**\n\t * Queue which gets all the websocket events and dispatches them to the core. It is paused until we load initial events to avoid\n\t * putting events from websocket before initial events.\n\t */\n\t_realtimeEventQueue: EventQueue\n\t_core: IndexerCore\n\t_entity: EntityClient\n\t_entityRestClient: EntityRestClient\n\t_indexedGroupIds: Array<Id>\n\n\tconstructor(\n\t\tentityRestClient: EntityRestClient,\n\t\tprivate readonly infoMessageHandler: InfoMessageHandler,\n\t\tbrowserData: BrowserData,\n\t\tdefaultEntityRestCache: DefaultEntityRestCache,\n\t\tmakeMailIndexer: (core: IndexerCore, db: Db) => MailIndexer,\n\t) {\n\t\tlet deferred = defer<void>()\n\t\tthis._dbInitializedDeferredObject = deferred\n\t\tthis.db = {\n\t\t\tdbFacade: newSearchIndexDB(),\n\t\t\tkey: downcast<BitArray>(null),\n\t\t\tiv: downcast<Uint8Array>(null),\n\t\t\tinitialized: deferred.promise,\n\t\t}\n\t\t// correctly initialized during init()\n\t\tthis._core = new IndexerCore(this.db, new EventQueue(\"indexer_core\", true, (batch) => this._processEntityEvents(batch)), browserData)\n\t\tthis._entityRestClient = entityRestClient\n\t\tthis._entity = new EntityClient(defaultEntityRestCache)\n\t\tthis._contact = new ContactIndexer(this._core, this.db, this._entity, new SuggestionFacade(ContactTypeRef, this.db))\n\t\tthis._mail = makeMailIndexer(this._core, this.db)\n\t\tthis._indexedGroupIds = []\n\t\tthis._initiallyLoadedBatchIdsPerGroup = new Map()\n\t\tthis._realtimeEventQueue = new EventQueue(\"indexer_realtime\", false, (nextElement: QueuedBatch) => {\n\t\t\t// During initial loading we remember the last batch we loaded\n\t\t\t// so if we get updates from EventBusClient here for things that are already loaded we discard them\n\t\t\tconst loadedIdForGroup = this._initiallyLoadedBatchIdsPerGroup.get(nextElement.groupId)\n\n\t\t\tif (loadedIdForGroup == null || firstBiggerThanSecond(nextElement.batchId, loadedIdForGroup)) {\n\t\t\t\tthis._core.addBatchesToQueue([nextElement])\n\t\t\t}\n\n\t\t\treturn Promise.resolve()\n\t\t})\n\n\t\tthis._realtimeEventQueue.pause()\n\t}\n\n\t/**\n\t * Opens a new DbFacade and initializes the metadata if it is not there yet\n\t */\n\tasync init({ user, keyLoaderFacade, retryOnError, cacheInfo }: IndexerInitParams): Promise<void> {\n\t\tthis._initParams = {\n\t\t\tuser,\n\t\t\tkeyLoaderFacade,\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.db.dbFacade.open(this.getDbId(user))\n\t\t\tconst metaData = await getIndexerMetaData(this.db.dbFacade, MetaDataOS)\n\t\t\tif (metaData == null) {\n\t\t\t\tconst userGroupKey = keyLoaderFacade.getCurrentSymUserGroupKey()\n\t\t\t\t// database was opened for the first time - create new tables\n\t\t\t\tawait this.createIndexTables(user, userGroupKey)\n\t\t\t} else {\n\t\t\t\tconst userGroupKey = await keyLoaderFacade.loadSymUserGroupKey(metaData.userGroupKeyVersion)\n\t\t\t\tawait this.loadIndexTables(user, userGroupKey, metaData)\n\t\t\t}\n\n\t\t\tawait this.infoMessageHandler.onSearchIndexStateUpdate({\n\t\t\t\tinitializing: false,\n\t\t\t\tmailIndexEnabled: this._mail.mailIndexingEnabled,\n\t\t\t\tprogress: 0,\n\t\t\t\tcurrentMailIndexTimestamp: this._mail.currentIndexTimestamp,\n\t\t\t\taimedMailIndexTimestamp: this._mail.currentIndexTimestamp,\n\t\t\t\tindexedMailCount: 0,\n\t\t\t\tfailedIndexingUpTo: null,\n\t\t\t})\n\n\t\t\tthis._core.startProcessing()\n\t\t\tawait this.indexOrLoadContactListIfNeeded(user, cacheInfo)\n\t\t\tawait this._mail.mailboxIndexingPromise\n\t\t\tawait this._mail.indexMailboxes(user, this._mail.currentIndexTimestamp)\n\t\t\tconst groupIdToEventBatches = await this._loadPersistentGroupData(user)\n\t\t\tawait this._loadNewEntities(groupIdToEventBatches).catch(ofClass(OutOfSyncError, (e) => this.disableMailIndexing()))\n\t\t} catch (e) {\n\t\t\tif (retryOnError !== false && (e instanceof MembershipRemovedError || e instanceof InvalidDatabaseStateError)) {\n\t\t\t\t// in case of MembershipRemovedError mail or contact group has been removed from user.\n\t\t\t\t// in case of InvalidDatabaseError no group id has been stored to the database.\n\t\t\t\t// disable mail indexing and init index again in both cases.\n\t\t\t\t// do not use this.disableMailIndexing() because db.initialized is not yet resolved.\n\t\t\t\t// initialized promise will be resolved in this.init later.\n\t\t\t\tconsole.log(\"disable mail indexing and init again\", e)\n\t\t\t\treturn this._reCreateIndex()\n\t\t\t} else {\n\t\t\t\tawait this.infoMessageHandler.onSearchIndexStateUpdate({\n\t\t\t\t\tinitializing: false,\n\t\t\t\t\tmailIndexEnabled: this._mail.mailIndexingEnabled,\n\t\t\t\t\tprogress: 0,\n\t\t\t\t\tcurrentMailIndexTimestamp: this._mail.currentIndexTimestamp,\n\t\t\t\t\taimedMailIndexTimestamp: this._mail.currentIndexTimestamp,\n\t\t\t\t\tindexedMailCount: 0,\n\t\t\t\t\tfailedIndexingUpTo: this._mail.currentIndexTimestamp,\n\t\t\t\t\terror: e instanceof ConnectionError ? IndexingErrorReason.ConnectionLost : IndexingErrorReason.Unknown,\n\t\t\t\t})\n\n\t\t\t\tthis._dbInitializedDeferredObject.reject(e)\n\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getDbId(user: User) {\n\t\treturn b64UserIdHash(user._id)\n\t}\n\n\tprivate async indexOrLoadContactListIfNeeded(user: User, cacheInfo: CacheInfo | undefined) {\n\t\ttry {\n\t\t\tconst contactList: ContactList = await this._entity.loadRoot(ContactListTypeRef, user.userGroup.group)\n\t\t\tconst indexTimestamp = await this._contact.getIndexTimestamp(contactList)\n\t\t\tif (indexTimestamp === NOTHING_INDEXED_TIMESTAMP) {\n\t\t\t\tawait this._contact.indexFullContactList(contactList)\n\t\t\t}\n\t\t\t//If we do not have to index the contact list we might still need to download it so we cache it in the offline storage\n\t\t\telse if (cacheInfo?.isNewOfflineDb) {\n\t\t\t\tawait this._entity.loadAll(ContactTypeRef, contactList.contacts)\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// external users have no contact list.\n\t\t\tif (!(e instanceof NotFoundError)) {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\tenableMailIndexing(): Promise<void> {\n\t\treturn this.db.initialized.then(() => {\n\t\t\treturn this._mail.enableMailIndexing(this._initParams.user).then(() => {\n\t\t\t\t// We don't have to disable mail indexing when it's stopped now\n\t\t\t\tthis._mail.mailboxIndexingPromise.catch(ofClass(CancelledError, noOp))\n\t\t\t})\n\t\t})\n\t}\n\n\tasync disableMailIndexing(): Promise<void> {\n\t\tawait this.db.initialized\n\n\t\tif (!this._core.isStoppedProcessing()) {\n\t\t\tawait this.deleteIndex(this._initParams.user._id)\n\t\t\tawait this.init({\n\t\t\t\tuser: this._initParams.user,\n\t\t\t\tkeyLoaderFacade: this._initParams.keyLoaderFacade,\n\t\t\t})\n\t\t}\n\t}\n\n\tasync deleteIndex(userId: string): Promise<void> {\n\t\tthis._core.stopProcessing()\n\t\tawait this._mail.disableMailIndexing(userId)\n\t}\n\n\textendMailIndex(newOldestTimestamp: number): Promise<void> {\n\t\treturn this._mail.extendIndexIfNeeded(this._initParams.user, newOldestTimestamp)\n\t}\n\n\tcancelMailIndexing(): Promise<void> {\n\t\treturn this._mail.cancelMailIndexing()\n\t}\n\n\taddBatchesToQueue(batches: QueuedBatch[]) {\n\t\tthis._realtimeEventQueue.addBatches(batches)\n\t}\n\n\tstartProcessing() {\n\t\tthis._core.queue.start()\n\t}\n\n\tasync onVisibilityChanged(visible: boolean): Promise<void> {\n\t\tthis._core.onVisibilityChanged(visible)\n\t}\n\n\t_reCreateIndex(): Promise<void> {\n\t\tconst mailIndexingWasEnabled = this._mail.mailIndexingEnabled\n\t\treturn this._mail.disableMailIndexing(assertNotNull(this._initParams.user._id)).then(() => {\n\t\t\t// do not try to init again on error\n\t\t\treturn this.init({\n\t\t\t\tuser: this._initParams.user,\n\t\t\t\tkeyLoaderFacade: this._initParams.keyLoaderFacade,\n\t\t\t\tretryOnError: false,\n\t\t\t}).then(() => {\n\t\t\t\tif (mailIndexingWasEnabled) {\n\t\t\t\t\treturn this.enableMailIndexing()\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\tprivate async createIndexTables(user: User, userGroupKey: VersionedKey): Promise<void> {\n\t\tthis.db.key = aes256RandomKey()\n\t\tthis.db.iv = random.generateRandomData(IV_BYTE_LENGTH)\n\t\tconst groupBatches = await this._loadGroupData(user)\n\t\tconst userEncDbKey = encryptKeyWithVersionedKey(userGroupKey, this.db.key)\n\t\tconst transaction = await this.db.dbFacade.createTransaction(false, [MetaDataOS, GroupDataOS])\n\t\tawait transaction.put(MetaDataOS, Metadata.userEncDbKey, userEncDbKey.key)\n\t\tawait transaction.put(MetaDataOS, Metadata.mailIndexingEnabled, this._mail.mailIndexingEnabled)\n\t\tawait transaction.put(MetaDataOS, Metadata.encDbIv, aes256EncryptSearchIndexEntry(this.db.key, this.db.iv))\n\t\tawait transaction.put(MetaDataOS, Metadata.userGroupKeyVersion, userEncDbKey.encryptingKeyVersion)\n\t\tawait transaction.put(MetaDataOS, Metadata.lastEventIndexTimeMs, this._entityRestClient.getRestClient().getServerTimestampMs())\n\t\tawait this._initGroupData(groupBatches, transaction)\n\t\tawait this._updateIndexedGroups()\n\t\tthis._dbInitializedDeferredObject.resolve()\n\t}\n\n\tprivate async loadIndexTables(user: User, userGroupKey: AesKey, metaData: EncryptedIndexerMetaData): Promise<void> {\n\t\tthis.db.key = decryptKey(userGroupKey, metaData.userEncDbKey)\n\t\tthis.db.iv = unauthenticatedAesDecrypt(this.db.key, neverNull(metaData.encDbIv), true)\n\t\tthis._mail.mailIndexingEnabled = metaData.mailIndexingEnabled\n\t\tconst groupDiff = await this._loadGroupDiff(user)\n\t\tawait this._updateGroups(user, groupDiff)\n\t\tawait this._mail.updateCurrentIndexTimestamp(user)\n\t\tawait this._updateIndexedGroups()\n\t\tthis._dbInitializedDeferredObject.resolve()\n\t\tawait this._contact.suggestionFacade.load()\n\t}\n\n\tasync _updateIndexedGroups(): Promise<void> {\n\t\tconst t: DbTransaction = await this.db.dbFacade.createTransaction(true, [GroupDataOS])\n\t\tconst indexedGroupIds = await promiseMap(await t.getAll(GroupDataOS), (groupDataEntry: DatabaseEntry) => downcast<Id>(groupDataEntry.key))\n\n\t\tif (indexedGroupIds.length === 0) {\n\t\t\t// tried to index twice, this is probably not our fault\n\t\t\tconsole.log(\"no group ids in database, disabling indexer\")\n\t\t\tthis.disableMailIndexing()\n\t\t}\n\n\t\tthis._indexedGroupIds = indexedGroupIds\n\t}\n\n\t_loadGroupDiff(user: User): Promise<{\n\t\tdeletedGroups: {\n\t\t\tid: Id\n\t\t\ttype: GroupType\n\t\t}[]\n\t\tnewGroups: {\n\t\t\tid: Id\n\t\t\ttype: GroupType\n\t\t}[]\n\t}> {\n\t\tlet currentGroups: Array<{\n\t\t\tid: Id\n\t\t\ttype: GroupType\n\t\t}> = filterIndexMemberships(user).map((m) => {\n\t\t\treturn {\n\t\t\t\tid: m.group,\n\t\t\t\ttype: getMembershipGroupType(m),\n\t\t\t}\n\t\t})\n\t\treturn this.db.dbFacade.createTransaction(true, [GroupDataOS]).then((t) => {\n\t\t\treturn t.getAll(GroupDataOS).then(\n\t\t\t\t(\n\t\t\t\t\tloadedGroups: {\n\t\t\t\t\t\tkey: DbKey\n\t\t\t\t\t\tvalue: GroupData\n\t\t\t\t\t}[],\n\t\t\t\t) => {\n\t\t\t\t\tif (!Array.isArray(loadedGroups)) {\n\t\t\t\t\t\tthrow new InvalidDatabaseStateError(\"loadedGroups is not an array\")\n\t\t\t\t\t}\n\t\t\t\t\tlet oldGroups = loadedGroups.map((group) => {\n\t\t\t\t\t\tif (typeof group?.key !== \"string\" || typeof group?.value?.groupType !== \"string\") {\n\t\t\t\t\t\t\tthrow new InvalidDatabaseStateError(`loaded group is malformed: ${group} ${JSON.stringify(group)}`)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst id: Id = group.key\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\ttype: group.value.groupType,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\tlet deletedGroups = oldGroups.filter((oldGroup) => !currentGroups.some((m) => m.id === oldGroup.id))\n\t\t\t\t\tlet newGroups = currentGroups.filter((m) => !oldGroups.some((oldGroup) => m.id === oldGroup.id))\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdeletedGroups,\n\t\t\t\t\t\tnewGroups,\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t)\n\t\t})\n\t}\n\n\t/**\n\t *\n\t * Initializes the index db for new groups of the user, but does not start the actual indexing for those groups.\n\t * If the user was removed from a contact or mail group the function throws a CancelledError to delete the complete mail index afterwards.\n\t */\n\t_updateGroups(\n\t\tuser: User,\n\t\tgroupDiff: {\n\t\t\tdeletedGroups: {\n\t\t\t\tid: Id\n\t\t\t\ttype: GroupType\n\t\t\t}[]\n\t\t\tnewGroups: {\n\t\t\t\tid: Id\n\t\t\t\ttype: GroupType\n\t\t\t}[]\n\t\t},\n\t): Promise<void> {\n\t\tif (groupDiff.deletedGroups.some((g) => g.type === GroupType.Mail || g.type === GroupType.Contact)) {\n\t\t\treturn Promise.reject(new MembershipRemovedError(\"user has been removed from contact or mail group\")) // user has been removed from a shared group\n\t\t} else if (groupDiff.newGroups.length > 0) {\n\t\t\treturn this._loadGroupData(\n\t\t\t\tuser,\n\t\t\t\tgroupDiff.newGroups.map((g) => g.id),\n\t\t\t).then(\n\t\t\t\t(\n\t\t\t\t\tgroupBatches: {\n\t\t\t\t\t\tgroupId: Id\n\t\t\t\t\t\tgroupData: GroupData\n\t\t\t\t\t}[],\n\t\t\t\t) => {\n\t\t\t\t\treturn this.db.dbFacade.createTransaction(false, [GroupDataOS]).then((t) => {\n\t\t\t\t\t\treturn this._initGroupData(groupBatches, t)\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t)\n\t\t}\n\n\t\treturn Promise.resolve()\n\t}\n\n\t/**\n\t * Provides a GroupData object including the last 100 event batch ids for all indexed membership groups of the given user.\n\t */\n\t_loadGroupData(\n\t\tuser: User,\n\t\trestrictToTheseGroups?: Id[],\n\t): Promise<\n\t\t{\n\t\t\tgroupId: Id\n\t\t\tgroupData: GroupData\n\t\t}[]\n\t> {\n\t\tlet memberships = filterIndexMemberships(user)\n\t\tconst restrictTo = restrictToTheseGroups // type check\n\n\t\tif (restrictTo) {\n\t\t\tmemberships = memberships.filter((membership) => contains(restrictTo, membership.group))\n\t\t}\n\n\t\treturn promiseMap(memberships, (membership: GroupMembership) => {\n\t\t\t// we only need the latest EntityEventBatch to synchronize the index state after reconnect. The lastBatchIds are filled up to 100 with each event we receive.\n\t\t\treturn this._entity\n\t\t\t\t.loadRange(EntityEventBatchTypeRef, membership.group, GENERATED_MAX_ID, 1, true)\n\t\t\t\t.then((eventBatches) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgroupId: membership.group,\n\t\t\t\t\t\tgroupData: {\n\t\t\t\t\t\t\tlastBatchIds: eventBatches.map((eventBatch) => eventBatch._id[1]),\n\t\t\t\t\t\t\tindexTimestamp: NOTHING_INDEXED_TIMESTAMP,\n\t\t\t\t\t\t\tgroupType: getMembershipGroupType(membership),\n\t\t\t\t\t\t} as GroupData,\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(NotAuthorizedError, () => {\n\t\t\t\t\t\tconsole.log(\"could not download entity updates => lost permission on list\")\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t}) // sequentially to avoid rate limiting\n\t\t\t.then((data) => data.filter(isNotNull))\n\t}\n\n\t/**\n\t * creates the initial group data for all provided group ids\n\t */\n\t_initGroupData(\n\t\tgroupBatches: {\n\t\t\tgroupId: Id\n\t\t\tgroupData: GroupData\n\t\t}[],\n\t\tt2: DbTransaction,\n\t): Promise<void> {\n\t\tfor (const groupIdToLastBatchId of groupBatches) {\n\t\t\tt2.put(GroupDataOS, groupIdToLastBatchId.groupId, groupIdToLastBatchId.groupData)\n\t\t}\n\t\treturn t2.wait()\n\t}\n\n\tasync _loadNewEntities(\n\t\tgroupIdToEventBatches: {\n\t\t\tgroupId: Id\n\t\t\teventBatchIds: Id[]\n\t\t}[],\n\t): Promise<void> {\n\t\tconst batchesOfAllGroups: QueuedBatch[] = []\n\t\tconst lastLoadedBatchIdInGroup = new Map<Id, Id>()\n\t\tconst transaction = await this.db.dbFacade.createTransaction(true, [MetaDataOS])\n\t\tconst lastIndexTimeMs: number | null = await transaction.get(MetaDataOS, Metadata.lastEventIndexTimeMs)\n\t\tawait this._throwIfOutOfDate()\n\n\t\ttry {\n\t\t\tfor (let groupIdToEventBatch of groupIdToEventBatches) {\n\t\t\t\tif (groupIdToEventBatch.eventBatchIds.length > 0) {\n\t\t\t\t\tlet startId = this._getStartIdForLoadingMissedEventBatches(groupIdToEventBatch.eventBatchIds)\n\n\t\t\t\t\tlet eventBatchesOnServer: EntityEventBatch[] = []\n\t\t\t\t\teventBatchesOnServer = await this._entity.loadAll(EntityEventBatchTypeRef, groupIdToEventBatch.groupId, startId)\n\t\t\t\t\tconst batchesToQueue: QueuedBatch[] = []\n\n\t\t\t\t\tfor (let batch of eventBatchesOnServer) {\n\t\t\t\t\t\tconst batchId = getElementId(batch)\n\n\t\t\t\t\t\tif (groupIdToEventBatch.eventBatchIds.indexOf(batchId) === -1 && firstBiggerThanSecond(batchId, startId)) {\n\t\t\t\t\t\t\tbatchesToQueue.push({\n\t\t\t\t\t\t\t\tgroupId: groupIdToEventBatch.groupId,\n\t\t\t\t\t\t\t\tbatchId,\n\t\t\t\t\t\t\t\tevents: batch.events,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tconst lastBatch = lastLoadedBatchIdInGroup.get(groupIdToEventBatch.groupId)\n\n\t\t\t\t\t\t\tif (lastBatch == null || firstBiggerThanSecond(batchId, lastBatch)) {\n\t\t\t\t\t\t\t\tlastLoadedBatchIdInGroup.set(groupIdToEventBatch.groupId, batchId)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Good scenario: we know when we stopped, we can process events we did not process yet and catch up the server\n\t\t\t\t\t//\n\t\t\t\t\t//\n\t\t\t\t\t// [4, 3, 2, 1]                          - processed events, lastBatchId =1\n\t\t\t\t\t// load from lowest id 1 -1\n\t\t\t\t\t// [0.9, 1, 2, 3, 4, 5, 6, 7, 8]         - last X events from server\n\t\t\t\t\t// => [5, 6, 7, 8]                       - batches to queue\n\t\t\t\t\t//\n\t\t\t\t\t// Bad scenario: we don' know where we stopped, server doesn't have events to fill the gap anymore, we cannot fix the index.\n\t\t\t\t\t// [4, 3, 2, 1] - processed events, lastBatchId = 1\n\t\t\t\t\t// [7, 5, 9, 10] - last events from server\n\t\t\t\t\t// => [7, 5, 9, 10] - batches to queue - nothing has been processed before so we are out of sync\n\t\t\t\t\t// We only want to do this check for clients that haven't yet saved the index time\n\t\t\t\t\t// This can be removed in the future\n\t\t\t\t\tif (lastIndexTimeMs == null && eventBatchesOnServer.length === batchesToQueue.length) {\n\t\t\t\t\t\t// Bad scenario happened.\n\t\t\t\t\t\t// None of the events we want to process were processed before, we're too far away, stop the process and delete\n\t\t\t\t\t\t// the index.\n\t\t\t\t\t\tthrow new OutOfSyncError(`We lost entity events for group ${groupIdToEventBatch.groupId}. start id was ${startId}`)\n\t\t\t\t\t}\n\n\t\t\t\t\tbatchesOfAllGroups.push(...batchesToQueue)\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotAuthorizedError) {\n\t\t\t\tconsole.log(\"could not download entity updates => lost permission on list\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthrow e\n\t\t}\n\n\t\t// add all batches of all groups in one step to avoid that just some groups are added when a ServiceUnavailableError occurs\n\t\t// Add them directly to the core so that they are added before the realtime batches\n\t\tthis._core.addBatchesToQueue(batchesOfAllGroups)\n\n\t\t// Add latest batches per group so that we can filter out overlapping realtime updates later\n\t\tthis._initiallyLoadedBatchIdsPerGroup = lastLoadedBatchIdInGroup\n\n\t\tthis._realtimeEventQueue.resume()\n\n\t\tthis.startProcessing()\n\t\tawait this._writeServerTimestamp()\n\t}\n\n\t_getStartIdForLoadingMissedEventBatches(lastEventBatchIds: Id[]): Id {\n\t\tlet newestBatchId = lastEventBatchIds[0]\n\t\tlet oldestBatchId = lastEventBatchIds[lastEventBatchIds.length - 1]\n\t\t// load all EntityEventBatches which are not older than 1 minute before the newest batch\n\t\t// to be able to get batches that were overtaken by the newest batch and therefore missed before\n\t\tlet startId = timestampToGeneratedId(generatedIdToTimestamp(newestBatchId) - 1000 * 60)\n\n\t\t// do not load events that are older than the stored events\n\t\tif (!firstBiggerThanSecond(startId, oldestBatchId)) {\n\t\t\t// reduce the generated id by a millisecond in order to fetch the instance with lastBatchId, too (would throw OutOfSync, otherwise if the instance with lasBatchId is the only one in the list)\n\t\t\tstartId = timestampToGeneratedId(generatedIdToTimestamp(oldestBatchId) - 1)\n\t\t}\n\n\t\treturn startId\n\t}\n\n\t/**\n\t * @private a map from group id to event batches\n\t */\n\t_loadPersistentGroupData(user: User): Promise<\n\t\t{\n\t\t\tgroupId: Id\n\t\t\teventBatchIds: Id[]\n\t\t}[]\n\t> {\n\t\treturn this.db.dbFacade.createTransaction(true, [GroupDataOS]).then((t) => {\n\t\t\treturn Promise.all(\n\t\t\t\tfilterIndexMemberships(user).map((membership) => {\n\t\t\t\t\treturn t.get(GroupDataOS, membership.group).then((groupData: GroupData | null) => {\n\t\t\t\t\t\tif (groupData) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tgroupId: membership.group,\n\t\t\t\t\t\t\t\teventBatchIds: groupData.lastBatchIds,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new InvalidDatabaseStateError(\n\t\t\t\t\t\t\t\t\"no group data for group \" + membership.group + \" indexedGroupIds: \" + this._indexedGroupIds.join(\",\"),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}),\n\t\t\t)\n\t\t})\n\t}\n\n\t_processEntityEvents(batch: QueuedBatch): Promise<any> {\n\t\tconst { events, groupId, batchId } = batch\n\t\treturn this.db.initialized\n\t\t\t.then(async () => {\n\t\t\t\tif (!this.db.dbFacade.indexingSupported) {\n\t\t\t\t\treturn Promise.resolve()\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tfilterIndexMemberships(this._initParams.user)\n\t\t\t\t\t\t.map((m) => m.group)\n\t\t\t\t\t\t.indexOf(groupId) === -1\n\t\t\t\t) {\n\t\t\t\t\treturn Promise.resolve()\n\t\t\t\t}\n\n\t\t\t\tif (this._indexedGroupIds.indexOf(groupId) === -1) {\n\t\t\t\t\treturn Promise.resolve()\n\t\t\t\t}\n\n\t\t\t\tmarkStart(\"processEntityEvents\")\n\t\t\t\tconst groupedEvents: Map<TypeRef<any>, EntityUpdate[]> = new Map() // define map first because Webstorm has problems with type annotations\n\n\t\t\t\tevents.reduce((all, update) => {\n\t\t\t\t\tif (isSameTypeRefByAttr(MailTypeRef, update.application, update.type)) {\n\t\t\t\t\t\tgetFromMap(all, MailTypeRef, () => []).push(update)\n\t\t\t\t\t} else if (isSameTypeRefByAttr(ContactTypeRef, update.application, update.type)) {\n\t\t\t\t\t\tgetFromMap(all, ContactTypeRef, () => []).push(update)\n\t\t\t\t\t} else if (isSameTypeRefByAttr(UserTypeRef, update.application, update.type)) {\n\t\t\t\t\t\tgetFromMap(all, UserTypeRef, () => []).push(update)\n\t\t\t\t\t} else if (isSameTypeRefByAttr(ImportMailStateTypeRef, update.application, update.type)) {\n\t\t\t\t\t\tgetFromMap(all, ImportMailStateTypeRef, () => []).push(update)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn all\n\t\t\t\t}, groupedEvents)\n\t\t\t\tmarkStart(\"processEvent\")\n\t\t\t\treturn promiseMap(groupedEvents.entries(), ([key, value]) => {\n\t\t\t\t\tlet promise = Promise.resolve()\n\n\t\t\t\t\tif (isSameTypeRef(UserTypeRef, key)) {\n\t\t\t\t\t\treturn this._processUserEntityEvents(value)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst typeInfoToIndex =\n\t\t\t\t\t\tisSameTypeRef(ImportMailStateTypeRef, key) || isSameTypeRef(MailTypeRef, key) ? typeRefToTypeInfo(MailTypeRef) : typeRefToTypeInfo(key)\n\t\t\t\t\tconst indexUpdate = _createNewIndexUpdate(typeInfoToIndex)\n\n\t\t\t\t\tif (isSameTypeRef(MailTypeRef, key)) {\n\t\t\t\t\t\tpromise = this._mail.processEntityEvents(value, groupId, batchId, indexUpdate)\n\t\t\t\t\t} else if (isSameTypeRef(ContactTypeRef, key)) {\n\t\t\t\t\t\tpromise = this._contact.processEntityEvents(value, groupId, batchId, indexUpdate)\n\t\t\t\t\t} else if (isSameTypeRef(ImportMailStateTypeRef, key)) {\n\t\t\t\t\t\tpromise = this._mail.processImportStateEntityEvents(value, groupId, batchId, indexUpdate)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn promise\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tmarkEnd(\"processEvent\")\n\t\t\t\t\t\t\tmarkStart(\"writeIndexUpdate\")\n\t\t\t\t\t\t\treturn this._core.writeIndexUpdateWithBatchId(groupId, batchId, indexUpdate)\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tmarkEnd(\"writeIndexUpdate\")\n\t\t\t\t\t\t\tmarkEnd(\"processEntityEvents\") // if (!env.dist && env.mode !== \"Test\") {\n\t\t\t\t\t\t\t// \tprintMeasure(\"Update of \" + key.type + \" \" + batch.events.map(e => operationTypeKeys[e.operation]).join(\",\"), [\n\t\t\t\t\t\t\t// \t\t\"processEntityEvents\", \"processEvent\", \"writeIndexUpdate\"\n\t\t\t\t\t\t\t// \t])\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(ofClass(CancelledError, noOp))\n\t\t\t.catch(\n\t\t\t\tofClass(DbError, (e) => {\n\t\t\t\t\tif (this._core.isStoppedProcessing()) {\n\t\t\t\t\t\tconsole.log(\"Ignoring DBerror when indexing is disabled\", e)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(InvalidDatabaseStateError, (e) => {\n\t\t\t\t\tconsole.log(\"InvalidDatabaseStateError during _processEntityEvents\")\n\n\t\t\t\t\tthis._core.stopProcessing()\n\n\t\t\t\t\treturn this._reCreateIndex()\n\t\t\t\t}),\n\t\t\t)\n\t}\n\n\t/**\n\t * @VisibleForTesting\n\t * @param events\n\t */\n\tasync _processUserEntityEvents(events: EntityUpdate[]): Promise<void> {\n\t\tfor (const event of events) {\n\t\t\tif (!(event.operation === OperationType.UPDATE && isSameId(this._initParams.user._id, event.instanceId))) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tthis._initParams.user = await this._entity.load(UserTypeRef, event.instanceId)\n\t\t\tawait updateEncryptionMetadata(this.db.dbFacade, this._initParams.keyLoaderFacade, MetaDataOS)\n\t\t}\n\t}\n\n\tasync _throwIfOutOfDate(): Promise<void> {\n\t\tconst transaction = await this.db.dbFacade.createTransaction(true, [MetaDataOS])\n\t\tconst lastIndexTimeMs = await transaction.get(MetaDataOS, Metadata.lastEventIndexTimeMs)\n\n\t\tif (lastIndexTimeMs != null) {\n\t\t\tconst now = this._entityRestClient.getRestClient().getServerTimestampMs()\n\n\t\t\tconst timeSinceLastIndex = now - lastIndexTimeMs\n\n\t\t\tif (timeSinceLastIndex >= daysToMillis(ENTITY_EVENT_BATCH_TTL_DAYS)) {\n\t\t\t\tthrow new OutOfSyncError(\n\t\t\t\t\t`we haven't updated the index in ${millisToDays(timeSinceLastIndex)} days. last update was ${new Date(\n\t\t\t\t\t\tneverNull(lastIndexTimeMs),\n\t\t\t\t\t).toString()}`,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\tasync _writeServerTimestamp() {\n\t\tconst transaction = await this.db.dbFacade.createTransaction(false, [MetaDataOS])\n\n\t\tconst now = this._entityRestClient.getRestClient().getServerTimestampMs()\n\n\t\tawait transaction.put(MetaDataOS, Metadata.lastEventIndexTimeMs, now)\n\t}\n}\n"]}