{"version":3,"file":"ContactGuiUtils.js","sourceRoot":"","sources":["../../../../../src/mail-app/contacts/view/ContactGuiUtils.ts"],"names":[],"mappings":"AAUA,OAAO,EAAE,IAAI,EAAE,MAAM,wCAAwC,CAAA;AAE7D,OAAO,EAAE,sBAAsB,EAAE,MAAM,8CAA8C,CAAA;AAErF,MAAM,CAAC,MAAM,6BAA6B,GAA+C;IACxF,sCAA4B,EAAE,eAAe;IAC7C,mCAAyB,EAAE,YAAY;IACvC,oCAA0B,EAAE,aAAa;IACzC,qCAA2B,EAAE,cAAc;CAC3C,CAAA;AAED,MAAM,UAAU,0BAA0B,CAAC,IAAwB,EAAE,MAAc;IAClF,IAAI,IAAI,wCAA8B,EAAE,CAAC;QACxC,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;IAC9C,CAAC;SAAM,CAAC;QACP,IAAI,GAAG,GAAG,6BAA6B,CAAC,IAAI,CAAC,CAAA;QAC7C,OAAO,GAAG,CAAA;IACX,CAAC;AACF,CAAC;AAED,MAAM,CAAC,MAAM,6BAA6B,GAAmD;IAC5F,0CAAgC,EAAE,eAAe;IACjD,uCAA6B,EAAE,YAAY;IAC3C,yCAA+B,EAAE,cAAc;IAC/C,sCAA4B,EAAE,WAAW;IACzC,wCAA8B,EAAE,aAAa;IAC7C,yCAA+B,EAAE,cAAc;CAC/C,CAAA;AAED,MAAM,UAAU,8BAA8B,CAAC,IAA4B,EAAE,MAAc;IAC1F,IAAI,IAAI,4CAAkC,EAAE,CAAC;QAC5C,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;IAC9C,CAAC;SAAM,CAAC;QACP,IAAI,GAAG,GAAG,6BAA6B,CAAC,IAAI,CAAC,CAAA;QAC7C,OAAO,GAAG,CAAA;IACX,CAAC;AACF,CAAC;AAED,MAAM,CAAC,MAAM,wBAAwB,GAA8C;IAClF,qCAA2B,EAAE,eAAe;IAC5C,sCAA4B,EAAE,gBAAgB;IAC9C,kCAAwB,EAAE,YAAY;IACtC,uCAA6B,EAAE,gBAAgB;IAC/C,mCAAyB,EAAE,aAAa;IACxC,oCAA0B,EAAE,cAAc;CAC1C,CAAA;AAED,MAAM,UAAU,yBAAyB,CAAC,IAAuB,EAAE,MAAc;IAChF,IAAI,IAAI,uCAA6B,EAAE,CAAC;QACvC,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;IAC9C,CAAC;SAAM,CAAC;QACP,IAAI,GAAG,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAA;QACxC,OAAO,GAAG,CAAA;IACX,CAAC;AACF,CAAC;AAED,MAAM,CAAC,MAAM,8BAA8B,GAAoD;IAC9F,0CAAgC,EAAE,cAAc;IAChD,2CAAiC,EAAE,eAAe;IAClD,0CAAgC,EAAE,cAAc;IAChD,yCAA+B,EAAE,aAAa;IAC9C,0CAAgC,EAAE,cAAc;IAChD,4CAAkC,EAAE,gBAAgB;IACpD,0CAAgC,EAAE,cAAc;IAChD,2CAAiC,EAAE,eAAe;IAClD,6CAAmC,EAAE,iBAAiB;IACtD,2CAAiC,EAAE,eAAe;IAClD,0CAA+B,EAAE,aAAa;IAC9C,2CAAgC,EAAE,cAAc;CAChD,CAAA;AAED,MAAM,UAAU,iCAAiC,CAAC,IAA6B,EAAE,MAAc;IAC9F,IAAI,IAAI,8CAAmC,EAAE,CAAC;QAC7C,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;IAC9C,CAAC;SAAM,CAAC;QACP,IAAI,GAAG,GAAG,8BAA8B,CAAC,IAAI,CAAC,CAAA;QAC9C,OAAO,GAAG,CAAA;IACX,CAAC;AACF,CAAC;AAED,MAAM,CAAC,MAAM,iCAAiC,GAAuD;IACpG,6CAAmC,EAAE,cAAc;IACnD,+CAAqC,EAAE,gBAAgB;IACvD,+CAAqC,EAAE,gBAAgB;IACvD,8CAAoC,EAAE,eAAe;IACrD,4CAAkC,EAAE,aAAa;IACjD,6CAAmC,EAAE,cAAc;CACnD,CAAA;AAED,MAAM,UAAU,oCAAoC,CAAC,IAAgC,EAAE,MAAc;IACpG,IAAI,IAAI,gDAAsC,EAAE,CAAC;QAChD,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;IAC9C,CAAC;SAAM,CAAC;QACP,IAAI,GAAG,GAAG,iCAAiC,CAAC,IAAI,CAAC,CAAA;QACjD,OAAO,GAAG,CAAA;IACX,CAAC;AACF,CAAC;AAED,MAAM,CAAC,MAAM,4BAA4B,GAAkD;IAC1F,6CAAmC,EAAE,mBAAmB;IACxD,uCAA6B,EAAE,aAAa;IAC5C,wCAA8B,EAAE,cAAc;CAC9C,CAAA;AAED,MAAM,UAAU,+BAA+B,CAAC,IAA2B,EAAE,MAAc;IAC1F,IAAI,IAAI,2CAAiC,EAAE,CAAC;QAC3C,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;IAC9C,CAAC;SAAM,CAAC;QACP,IAAI,GAAG,GAAG,4BAA4B,CAAC,IAAI,CAAC,CAAA;QAC5C,OAAO,GAAG,CAAA;IACX,CAAC;AACF,CAAC;AAED,MAAM,CAAC,MAAM,+BAA+B,GAA+C;IAC1F,sCAA4B,EAAE,eAAe;IAC7C,mCAAyB,EAAE,YAAY;IACvC,oCAA0B,EAAE,aAAa;IACzC,qCAA2B,EAAE,cAAc;CAC3C,CAAA;AAED,MAAM,UAAU,kCAAkC,CAAC,IAAwB,EAAE,MAAc;IAC1F,IAAI,IAAI,wCAA8B,EAAE,CAAC;QACxC,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;IAC9C,CAAC;SAAM,CAAC;QACP,IAAI,GAAG,GAAG,+BAA+B,CAAC,IAAI,CAAC,CAAA;QAC/C,OAAO,GAAG,CAAA;IACX,CAAC;AACF,CAAC;AAID;;;;;;;GAOG;AACH,MAAM,UAAU,eAAe,CAAC,QAAiB,EAAE,QAAiB,EAAE,kBAA2B,IAAI;IACpG,IAAI,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA;IACvC,IAAI,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA;IACvC,IAAI,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;IACrC,IAAI,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;IACrC,IAAI,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAA;IAChD,IAAI,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAA;IAChD,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IACtF,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IAEtF,uIAAuI;IACvI,2GAA2G;IAC3G,IAAI,CAAC,SAAS,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAA;IAC7B,CAAC;IAED,IAAI,CAAC,SAAS,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAA;IAC7B,CAAC;IAED,IAAI,SAAS,IAAI,CAAC,SAAS,EAAE,CAAC;QAC7B,OAAO,CAAC,CAAC,CAAA;IACV,CAAC;SAAM,IAAI,SAAS,IAAI,CAAC,SAAS,EAAE,CAAC;QACpC,OAAO,CAAC,CAAA;IACT,CAAC;SAAM,CAAC;QACP,IAAI,MAAM,GAAG,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,CAAA;QAE/C,IAAI,MAAM,KAAK,CAAC,EAAE,CAAC;YAClB,IAAI,WAAW,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjC,OAAO,CAAC,CAAC,CAAA;YACV,CAAC;iBAAM,IAAI,WAAW,IAAI,CAAC,WAAW,EAAE,CAAC;gBACxC,OAAO,CAAC,CAAA;YACT,CAAC;iBAAM,CAAC;gBACP,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC,WAAW,CAAC,CAAA;YAChD,CAAC;QACF,CAAC;QAED,IAAI,MAAM,KAAK,CAAC,EAAE,CAAC;YAClB,yCAAyC;YACzC,IAAI,YAAY,GAAG,CAAC,IAAI,YAAY,KAAK,CAAC,EAAE,CAAC;gBAC5C,OAAO,CAAC,CAAC,CAAA;YACV,CAAC;iBAAM,IAAI,YAAY,GAAG,CAAC,IAAI,YAAY,KAAK,CAAC,EAAE,CAAC;gBACnD,OAAO,CAAC,CAAA;YACT,CAAC;iBAAM,IAAI,YAAY,KAAK,CAAC,IAAI,YAAY,KAAK,CAAC,EAAE,CAAC;gBACrD,8EAA8E;gBAC9E,OAAO,sBAAsB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;YAClD,CAAC;iBAAM,CAAC;gBACP,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAA;gBAEzG,IAAI,MAAM,KAAK,CAAC,EAAE,CAAC;oBAClB,8EAA8E;oBAC9E,OAAO,sBAAsB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;gBAClD,CAAC;qBAAM,CAAC;oBACP,OAAO,MAAM,CAAA;gBACd,CAAC;YACF,CAAC;QACF,CAAC;aAAM,CAAC;YACP,OAAO,MAAM,CAAA;QACd,CAAC;IACF,CAAC;AACF,CAAC","sourcesContent":["import {\n\tContactAddressType,\n\tContactCustomDateType,\n\tContactMessengerHandleType,\n\tContactPhoneNumberType,\n\tContactRelationshipType,\n\tContactSocialType,\n\tContactWebsiteType,\n} from \"../../../common/api/common/TutanotaConstants\"\nimport type { MaybeTranslation, Translation, TranslationKey } from \"../../../common/misc/LanguageViewModel\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport type { Contact } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { sortCompareByReverseId } from \"../../../common/api/common/utils/EntityUtils\"\n\nexport const ContactMailAddressTypeToLabel: Record<ContactAddressType, TranslationKey> = {\n\t[ContactAddressType.PRIVATE]: \"private_label\",\n\t[ContactAddressType.WORK]: \"work_label\",\n\t[ContactAddressType.OTHER]: \"other_label\",\n\t[ContactAddressType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactAddressTypeLabel(type: ContactAddressType, custom: string): MaybeTranslation {\n\tif (type === ContactAddressType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactMailAddressTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactPhoneNumberTypeToLabel: Record<ContactPhoneNumberType, TranslationKey> = {\n\t[ContactPhoneNumberType.PRIVATE]: \"private_label\",\n\t[ContactPhoneNumberType.WORK]: \"work_label\",\n\t[ContactPhoneNumberType.MOBILE]: \"mobile_label\",\n\t[ContactPhoneNumberType.FAX]: \"fax_label\",\n\t[ContactPhoneNumberType.OTHER]: \"other_label\",\n\t[ContactPhoneNumberType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactPhoneNumberTypeLabel(type: ContactPhoneNumberType, custom: string): MaybeTranslation {\n\tif (type === ContactPhoneNumberType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactPhoneNumberTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactSocialTypeToLabel: Record<ContactSocialType, TranslationKey> = {\n\t[ContactSocialType.TWITTER]: \"twitter_label\",\n\t[ContactSocialType.FACEBOOK]: \"facebook_label\",\n\t[ContactSocialType.XING]: \"xing_label\",\n\t[ContactSocialType.LINKED_IN]: \"linkedin_label\",\n\t[ContactSocialType.OTHER]: \"other_label\",\n\t[ContactSocialType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactSocialTypeLabel(type: ContactSocialType, custom: string): MaybeTranslation {\n\tif (type === ContactSocialType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactSocialTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactRelationshipTypeToLabel: Record<ContactRelationshipType, TranslationKey> = {\n\t[ContactRelationshipType.PARENT]: \"parent_label\",\n\t[ContactRelationshipType.BROTHER]: \"brother_label\",\n\t[ContactRelationshipType.SISTER]: \"sister_label\",\n\t[ContactRelationshipType.CHILD]: \"child_label\",\n\t[ContactRelationshipType.FRIEND]: \"friend_label\",\n\t[ContactRelationshipType.RELATIVE]: \"relative_label\",\n\t[ContactRelationshipType.SPOUSE]: \"spouse_label\",\n\t[ContactRelationshipType.PARTNER]: \"partner_label\",\n\t[ContactRelationshipType.ASSISTANT]: \"assistant_label\",\n\t[ContactRelationshipType.MANAGER]: \"manager_label\",\n\t[ContactRelationshipType.OTHER]: \"other_label\",\n\t[ContactRelationshipType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactRelationshipTypeToLabel(type: ContactRelationshipType, custom: string): MaybeTranslation {\n\tif (type === ContactRelationshipType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactRelationshipTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactMessengerHandleTypeToLabel: Record<ContactMessengerHandleType, TranslationKey> = {\n\t[ContactMessengerHandleType.SIGNAL]: \"signal_label\",\n\t[ContactMessengerHandleType.WHATSAPP]: \"whatsapp_label\",\n\t[ContactMessengerHandleType.TELEGRAM]: \"telegram_label\",\n\t[ContactMessengerHandleType.DISCORD]: \"discord_label\",\n\t[ContactMessengerHandleType.OTHER]: \"other_label\",\n\t[ContactMessengerHandleType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactMessengerHandleTypeToLabel(type: ContactMessengerHandleType, custom: string): MaybeTranslation {\n\tif (type === ContactMessengerHandleType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactMessengerHandleTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactCustomDateTypeToLabel: Record<ContactCustomDateType, TranslationKey> = {\n\t[ContactCustomDateType.ANNIVERSARY]: \"anniversary_label\",\n\t[ContactCustomDateType.OTHER]: \"other_label\",\n\t[ContactCustomDateType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactCustomDateTypeToLabel(type: ContactCustomDateType, custom: string): MaybeTranslation {\n\tif (type === ContactCustomDateType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactCustomDateTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport const ContactCustomWebsiteTypeToLabel: Record<ContactWebsiteType, TranslationKey> = {\n\t[ContactWebsiteType.PRIVATE]: \"private_label\",\n\t[ContactWebsiteType.WORK]: \"work_label\",\n\t[ContactWebsiteType.OTHER]: \"other_label\",\n\t[ContactWebsiteType.CUSTOM]: \"custom_label\",\n}\n\nexport function getContactCustomWebsiteTypeToLabel(type: ContactWebsiteType, custom: string): MaybeTranslation {\n\tif (type === ContactWebsiteType.CUSTOM) {\n\t\treturn lang.makeTranslation(\"custom\", custom)\n\t} else {\n\t\tlet key = ContactCustomWebsiteTypeToLabel[type]\n\t\treturn key\n\t}\n}\n\nexport type ContactComparator = (arg0: Contact, arg1: Contact) => number\n\n/**\n * Sorts by the following preferences:\n * 1. first name\n * 2. second name\n * 3. first email address\n * 4. id\n * Missing fields are sorted below existing fields\n */\nexport function compareContacts(contact1: Contact, contact2: Contact, sortByFirstName: boolean = true): number {\n\tlet c1First = contact1.firstName.trim()\n\tlet c2First = contact2.firstName.trim()\n\tlet c1Last = contact1.lastName.trim()\n\tlet c2Last = contact2.lastName.trim()\n\tlet c1MailLength = contact1.mailAddresses.length\n\tlet c2MailLength = contact2.mailAddresses.length\n\tlet [c1Primary, c1Secondary] = sortByFirstName ? [c1First, c1Last] : [c1Last, c1First]\n\tlet [c2Primary, c2Secondary] = sortByFirstName ? [c2First, c2Last] : [c2Last, c2First]\n\n\t// If the contact doesn't have either the first or the last name, use company as the first name. We cannot just make a string out of it\n\t// and compare it because we would lose priority of first name over last name and set name over unset name.\n\tif (!c1Primary && !c1Secondary) {\n\t\tc1Primary = contact1.company\n\t}\n\n\tif (!c2Primary && !c2Secondary) {\n\t\tc2Primary = contact2.company\n\t}\n\n\tif (c1Primary && !c2Primary) {\n\t\treturn -1\n\t} else if (c2Primary && !c1Primary) {\n\t\treturn 1\n\t} else {\n\t\tlet result = c1Primary.localeCompare(c2Primary)\n\n\t\tif (result === 0) {\n\t\t\tif (c1Secondary && !c2Secondary) {\n\t\t\t\treturn -1\n\t\t\t} else if (c2Secondary && !c1Secondary) {\n\t\t\t\treturn 1\n\t\t\t} else {\n\t\t\t\tresult = c1Secondary.localeCompare(c2Secondary)\n\t\t\t}\n\t\t}\n\n\t\tif (result === 0) {\n\t\t\t// names are equal or no names in contact\n\t\t\tif (c1MailLength > 0 && c2MailLength === 0) {\n\t\t\t\treturn -1\n\t\t\t} else if (c2MailLength > 0 && c1MailLength === 0) {\n\t\t\t\treturn 1\n\t\t\t} else if (c1MailLength === 0 && c2MailLength === 0) {\n\t\t\t\t// see Multiselect with shift and up arrow not working properly #152 at github\n\t\t\t\treturn sortCompareByReverseId(contact1, contact2)\n\t\t\t} else {\n\t\t\t\tresult = contact1.mailAddresses[0].address.trim().localeCompare(contact2.mailAddresses[0].address.trim())\n\n\t\t\t\tif (result === 0) {\n\t\t\t\t\t// see Multiselect with shift and up arrow not working properly #152 at github\n\t\t\t\t\treturn sortCompareByReverseId(contact1, contact2)\n\t\t\t\t} else {\n\t\t\t\t\treturn result\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn result\n\t\t}\n\t}\n}\n"]}