{"version":3,"file":"SearchModel.js","sourceRoot":"","sources":["../../../../../src/mail-app/search/model/SearchModel.ts"],"names":[],"mappings":"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","sourcesContent":["import stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport { CalendarEvent, CalendarEventTypeRef, MailTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { NOTHING_INDEXED_TIMESTAMP } from \"../../../common/api/common/TutanotaConstants\"\nimport { DbError } from \"../../../common/api/common/error/DbError\"\nimport type { SearchIndexStateInfo, SearchRestriction, SearchResult } from \"../../../common/api/worker/search/SearchTypes\"\nimport { arrayEquals, assertNonNull, assertNotNull, incrementMonth, isSameTypeRef, lazyAsync, ofClass, tokenize } from \"@tutao/tutanota-utils\"\nimport type { SearchFacade } from \"../../workerUtils/index/SearchFacade.js\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { listIdPart } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { IProgressMonitor } from \"../../../common/api/common/utils/ProgressMonitor.js\"\nimport { ProgressTracker } from \"../../../common/api/main/ProgressTracker.js\"\nimport { CalendarEventsRepository } from \"../../../common/calendar/date/CalendarEventsRepository.js\"\n\nassertMainOrNode()\nexport type SearchQuery = {\n\tquery: string\n\trestriction: SearchRestriction\n\tminSuggestionCount: number\n\tmaxResults: number | null\n}\n\nexport class SearchModel {\n\tresult: Stream<SearchResult | null>\n\tindexState: Stream<SearchIndexStateInfo>\n\t// we store this as a reference to the currently running search. if we don't, we only have the last result's query info\n\t// to compare against incoming new queries\n\tlastQueryString: Stream<string | null>\n\tindexingSupported: boolean\n\t_searchFacade: SearchFacade\n\tprivate lastQuery: SearchQuery | null\n\tprivate lastSearchPromise: Promise<SearchResult | void>\n\tcancelSignal: Stream<boolean>\n\n\tconstructor(searchFacade: SearchFacade, private readonly calendarModel: lazyAsync<CalendarEventsRepository>) {\n\t\tthis._searchFacade = searchFacade\n\t\tthis.result = stream()\n\t\tthis.lastQueryString = stream<string | null>(\"\")\n\t\tthis.indexingSupported = true\n\t\tthis.indexState = stream<SearchIndexStateInfo>({\n\t\t\tinitializing: true,\n\t\t\tmailIndexEnabled: false,\n\t\t\tprogress: 0,\n\t\t\tcurrentMailIndexTimestamp: NOTHING_INDEXED_TIMESTAMP,\n\t\t\taimedMailIndexTimestamp: NOTHING_INDEXED_TIMESTAMP,\n\t\t\tindexedMailCount: 0,\n\t\t\tfailedIndexingUpTo: null,\n\t\t})\n\t\tthis.lastQuery = null\n\t\tthis.lastSearchPromise = Promise.resolve()\n\t\tthis.cancelSignal = stream(false)\n\t}\n\n\tasync search(searchQuery: SearchQuery, progressTracker: ProgressTracker): Promise<SearchResult | void> {\n\t\tif (this.lastQuery && searchQueryEquals(searchQuery, this.lastQuery)) {\n\t\t\treturn this.lastSearchPromise\n\t\t}\n\n\t\tthis.lastQuery = searchQuery\n\t\tconst { query, restriction, minSuggestionCount, maxResults } = searchQuery\n\t\tthis.lastQueryString(query)\n\t\tlet result = this.result()\n\n\t\tif (result && !isSameTypeRef(restriction.type, result.restriction.type)) {\n\t\t\t// reset the result in case only the search type has changed\n\t\t\tthis.result(null)\n\t\t} else if (this.indexState().progress > 0 && result && isSameTypeRef(MailTypeRef, result.restriction.type)) {\n\t\t\t// reset the result if indexing is in progress and the current search result is of type mail\n\t\t\tthis.result(null)\n\t\t}\n\n\t\tif (query.trim() === \"\") {\n\t\t\t// if there was an empty query, just send empty result\n\t\t\tconst result: SearchResult = {\n\t\t\t\tquery: query,\n\t\t\t\trestriction: restriction,\n\t\t\t\tresults: [],\n\t\t\t\tcurrentIndexTimestamp: this.indexState().currentMailIndexTimestamp,\n\t\t\t\tlastReadSearchIndexRow: [],\n\t\t\t\tmaxResults: 0,\n\t\t\t\tmatchWordOrder: false,\n\t\t\t\tmoreResults: [],\n\t\t\t\tmoreResultsEntries: [],\n\t\t\t}\n\t\t\tthis.result(result)\n\t\t\tthis.lastSearchPromise = Promise.resolve(result)\n\t\t} else if (isSameTypeRef(CalendarEventTypeRef, restriction.type)) {\n\t\t\t// we interpret restriction.start as the start of the first day of the first month we want to search\n\t\t\t// restriction.end is the end of the last day of the last month we want to search\n\t\t\tlet currentDate = new Date(assertNotNull(restriction.start))\n\t\t\tconst endDate = new Date(assertNotNull(restriction.end))\n\t\t\tconst calendarModel = await this.calendarModel()\n\t\t\tconst daysInMonths: Array<Date> = []\n\t\t\twhile (currentDate.getTime() <= endDate.getTime()) {\n\t\t\t\tdaysInMonths.push(currentDate)\n\t\t\t\tcurrentDate = incrementMonth(currentDate, 1)\n\t\t\t}\n\n\t\t\tconst calendarResult: SearchResult = {\n\t\t\t\t// index related, keep empty\n\t\t\t\tcurrentIndexTimestamp: 0,\n\t\t\t\tmoreResults: [],\n\t\t\t\tmoreResultsEntries: [],\n\t\t\t\tlastReadSearchIndexRow: [],\n\t\t\t\t// data that is relevant to calendar search\n\t\t\t\tmatchWordOrder: false,\n\t\t\t\trestriction,\n\t\t\t\tresults: [],\n\t\t\t\tquery,\n\t\t\t}\n\n\t\t\tconst monitorHandle = progressTracker.registerMonitorSync(daysInMonths.length)\n\t\t\tconst monitor: IProgressMonitor = assertNotNull(progressTracker.getMonitor(monitorHandle))\n\n\t\t\tif (this.cancelSignal()) {\n\t\t\t\tthis.result(calendarResult)\n\t\t\t\tthis.lastSearchPromise = Promise.resolve(calendarResult)\n\t\t\t\treturn this.lastSearchPromise\n\t\t\t}\n\n\t\t\tconst hasNewPaidPlan = await calendarModel.canLoadBirthdaysCalendar()\n\t\t\tif (hasNewPaidPlan) {\n\t\t\t\tawait calendarModel.loadContactsBirthdays()\n\t\t\t}\n\n\t\t\tawait calendarModel.loadMonthsIfNeeded(daysInMonths, monitor, this.cancelSignal)\n\t\t\tmonitor.completed()\n\n\t\t\tconst eventsForDays = calendarModel.getEventsForMonths()()\n\n\t\t\tassertNonNull(restriction.start)\n\t\t\tassertNonNull(restriction.end)\n\n\t\t\tconst tokens = tokenize(query.trim())\n\t\t\t// we want event instances that occur on multiple days to only appear once, but want\n\t\t\t// separate instances of event series to occur on their own.\n\t\t\tconst alreadyAdded: Set<string> = new Set()\n\n\t\t\tif (this.cancelSignal()) {\n\t\t\t\tthis.result(calendarResult)\n\t\t\t\tthis.lastSearchPromise = Promise.resolve(calendarResult)\n\t\t\t\treturn this.lastSearchPromise\n\t\t\t}\n\n\t\t\tconst followCommonRestrictions = (key: string, event: CalendarEvent) => {\n\t\t\t\tif (alreadyAdded.has(key)) {\n\t\t\t\t\t// we only need the first event in the series, the view will load & then generate\n\t\t\t\t\t// the series for the searched time range.\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\tif (restriction.folderIds.length > 0 && !restriction.folderIds.includes(listIdPart(event._id))) {\n\t\t\t\t\t// check that the event is in the searched calendar.\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\tif (restriction.eventSeries === false && event.repeatRule != null) {\n\t\t\t\t\t// applied \"repeating\" search filter\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\tfor (const token of tokens) {\n\t\t\t\t\tif (event.summary.toLowerCase().includes(token)) {\n\t\t\t\t\t\talreadyAdded.add(key)\n\t\t\t\t\t\tcalendarResult.results.push(event._id)\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tif (tokens.length > 0) {\n\t\t\t\t// we're iterating by event first to only have to sanitize the description once.\n\t\t\t\t// that's a smaller savings than one might think because for the vast majority of\n\t\t\t\t// events we're probably not matching and looking into the description anyway.\n\t\t\t\tfor (const [startOfDay, eventsOnDay] of eventsForDays) {\n\t\t\t\t\teventLoop: for (const event of eventsOnDay) {\n\t\t\t\t\t\tif (!(startOfDay >= restriction.start && startOfDay <= restriction.end)) {\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst key = idToKey(event._id)\n\n\t\t\t\t\t\tif (!followCommonRestrictions(key, event)) {\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const token of tokens) {\n\t\t\t\t\t\t\tif (event.summary.toLowerCase().includes(token)) {\n\t\t\t\t\t\t\t\talreadyAdded.add(key)\n\t\t\t\t\t\t\t\tcalendarResult.results.push(event._id)\n\t\t\t\t\t\t\t\tcontinue eventLoop\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// checking the summary was cheap, now we store the sanitized description to check it against\n\t\t\t\t\t\t// all tokens.\n\t\t\t\t\t\tconst descriptionToSearch = event.description.replaceAll(/(<[^>]+>)/gi, \" \").toLowerCase()\n\t\t\t\t\t\tfor (const token of tokens) {\n\t\t\t\t\t\t\tif (descriptionToSearch.includes(token)) {\n\t\t\t\t\t\t\t\talreadyAdded.add(key)\n\t\t\t\t\t\t\t\tcalendarResult.results.push(event._id)\n\t\t\t\t\t\t\t\tcontinue eventLoop\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.cancelSignal()) {\n\t\t\t\t\t\t\tthis.result(calendarResult)\n\t\t\t\t\t\t\tthis.lastSearchPromise = Promise.resolve(calendarResult)\n\t\t\t\t\t\t\treturn this.lastSearchPromise\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst startDate = new Date(restriction.start)\n\t\t\t\tconst endDate = new Date(restriction.end)\n\n\t\t\t\tif (hasNewPaidPlan) {\n\t\t\t\t\tconst birthdayEvents = Array.from(calendarModel.getBirthdayEvents().values()).flat()\n\n\t\t\t\t\teventLoop: for (const eventRegistry of birthdayEvents) {\n\t\t\t\t\t\t// Birthdays should still appear on search even if the date itself doesn't comply to the whole restriction\n\t\t\t\t\t\t// we only care about months\n\t\t\t\t\t\tconst month = eventRegistry.event.startTime.getMonth()\n\t\t\t\t\t\tif (!(month >= startDate.getMonth() && month <= endDate.getMonth())) {\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst key = idToKey(eventRegistry.event._id)\n\n\t\t\t\t\t\tif (!followCommonRestrictions(key, eventRegistry.event)) {\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const token of tokens) {\n\t\t\t\t\t\t\tif (eventRegistry.event.summary.toLowerCase().includes(token)) {\n\t\t\t\t\t\t\t\talreadyAdded.add(key)\n\t\t\t\t\t\t\t\tcalendarResult.results.push(eventRegistry.event._id)\n\t\t\t\t\t\t\t\tcontinue eventLoop\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.cancelSignal()) {\n\t\t\t\t\t\t\tthis.result(calendarResult)\n\t\t\t\t\t\t\tthis.lastSearchPromise = Promise.resolve(calendarResult)\n\t\t\t\t\t\t\treturn this.lastSearchPromise\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.result(calendarResult)\n\t\t\tthis.lastSearchPromise = Promise.resolve(calendarResult)\n\t\t} else {\n\t\t\tthis.lastSearchPromise = this._searchFacade\n\t\t\t\t.search(query, restriction, minSuggestionCount, maxResults ?? undefined)\n\t\t\t\t.then((result) => {\n\t\t\t\t\tthis.result(result)\n\t\t\t\t\treturn result\n\t\t\t\t})\n\t\t\t\t.catch(\n\t\t\t\t\tofClass(DbError, (e) => {\n\t\t\t\t\t\tconsole.log(\"DBError while search\", e)\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t}\n\n\t\treturn this.lastSearchPromise\n\t}\n\n\tisNewSearch(query: string, restriction: SearchRestriction): boolean {\n\t\tlet isNew = false\n\t\tlet lastQuery = this.lastQuery\n\t\tif (lastQuery == null) {\n\t\t\tisNew = true\n\t\t} else if (lastQuery.query !== query) {\n\t\t\tisNew = true\n\t\t} else if (lastQuery.restriction !== restriction) {\n\t\t\t// both are the same instance\n\t\t\tisNew = !isSameSearchRestriction(restriction, lastQuery.restriction)\n\t\t}\n\n\t\tif (isNew) this.sendCancelSignal()\n\t\treturn isNew\n\t}\n\n\tsendCancelSignal() {\n\t\tthis.cancelSignal(true)\n\t\tthis.cancelSignal.end(true)\n\t\tthis.cancelSignal = stream(false)\n\t}\n}\n\nfunction idToKey(id: IdTuple): string {\n\treturn id.join(\"/\")\n}\n\nfunction searchQueryEquals(a: SearchQuery, b: SearchQuery) {\n\treturn (\n\t\ta.query === b.query &&\n\t\tisSameSearchRestriction(a.restriction, b.restriction) &&\n\t\ta.minSuggestionCount === b.minSuggestionCount &&\n\t\ta.maxResults === b.maxResults\n\t)\n}\n\nexport function isSameSearchRestriction(a: SearchRestriction, b: SearchRestriction): boolean {\n\tconst isSameAttributeIds = a.attributeIds === b.attributeIds || (!!a.attributeIds && !!b.attributeIds && arrayEquals(a.attributeIds, b.attributeIds))\n\treturn (\n\t\tisSameTypeRef(a.type, b.type) &&\n\t\ta.start === b.start &&\n\t\ta.end === b.end &&\n\t\ta.field === b.field &&\n\t\tisSameAttributeIds &&\n\t\t(a.eventSeries === b.eventSeries || (a.eventSeries === null && b.eventSeries === true) || (a.eventSeries === true && b.eventSeries === null)) &&\n\t\tarrayEquals(a.folderIds, b.folderIds)\n\t)\n}\n\nexport function areResultsForTheSameQuery(a: SearchResult, b: SearchResult) {\n\treturn a.query === b.query && isSameSearchRestriction(a.restriction, b.restriction)\n}\n\nexport function hasMoreResults(searchResult: SearchResult): boolean {\n\treturn (\n\t\tsearchResult.moreResults.length > 0 ||\n\t\t(searchResult.lastReadSearchIndexRow.length > 0 && searchResult.lastReadSearchIndexRow.every(([word, id]) => id !== 0))\n\t)\n}\n"]}