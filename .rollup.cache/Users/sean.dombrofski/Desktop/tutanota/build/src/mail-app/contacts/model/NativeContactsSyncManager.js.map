{"version":3,"file":"NativeContactsSyncManager.js","sourceRoot":"","sources":["../../../../../src/mail-app/contacts/model/NativeContactsSyncManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport {\n\tContact,\n\tContactTypeRef,\n\tcreateContact,\n\tcreateContactAddress,\n\tcreateContactCustomDate,\n\tcreateContactMailAddress,\n\tcreateContactMessengerHandle,\n\tcreateContactPhoneNumber,\n\tcreateContactRelationship,\n\tcreateContactWebsite,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { GroupType, OperationType } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { assert, defer, getFirstOrThrow, getFromMap, ofClass } from \"@tutao/tutanota-utils\"\nimport { StructuredContact } from \"../../../common/native/common/generatedipc/StructuredContact.js\"\nimport { elementIdPart, getElementId, StrippedEntity } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport {\n\textractStructuredAddresses,\n\textractStructuredCustomDates,\n\textractStructuredMailAddresses,\n\textractStructuredMessengerHandle,\n\textractStructuredPhoneNumbers,\n\textractStructuredRelationships,\n\textractStructuredWebsites,\n} from \"../../../common/contactsFunctionality/ContactUtils.js\"\nimport { LoginController } from \"../../../common/api/main/LoginController.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { EventController } from \"../../../common/api/main/EventController.js\"\nimport { ContactModel } from \"../../../common/contactsFunctionality/ContactModel.js\"\nimport { DeviceConfig } from \"../../../common/misc/DeviceConfig.js\"\nimport { PermissionError } from \"../../../common/api/common/error/PermissionError.js\"\nimport { MobileContactsFacade } from \"../../../common/native/common/generatedipc/MobileContactsFacade.js\"\nimport { ContactSyncResult } from \"../../../common/native/common/generatedipc/ContactSyncResult.js\"\nimport { assertMainOrNode, isApp, isIOSApp } from \"../../../common/api/common/Env.js\"\nimport { ContactStoreError } from \"../../../common/api/common/error/ContactStoreError.js\"\nimport { NotFoundError } from \"../../../common/api/common/error/RestError.js\"\nimport { Dialog } from \"../../../common/gui/base/Dialog.js\"\nimport { showProgressDialog } from \"../../../common/gui/dialogs/ProgressDialog.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport { locator } from \"../../../common/api/main/CommonLocator\"\nimport { PermissionType } from \"../../../common/native/common/generatedipc/PermissionType\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError\"\n\nassertMainOrNode()\n\nexport class NativeContactsSyncManager {\n\tprivate entityUpdateLock: Promise<void> = Promise.resolve()\n\n\tconstructor(\n\t\tprivate readonly loginController: LoginController,\n\t\tprivate readonly mobileContactsFacade: MobileContactsFacade,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly deviceConfig: DeviceConfig,\n\t) {\n\t\tthis.eventController.addEntityListener((updates) => this.nativeContactEntityEventsListener(updates))\n\t}\n\n\tprivate async nativeContactEntityEventsListener(events: ReadonlyArray<EntityUpdateData>) {\n\t\tawait this.entityUpdateLock\n\n\t\tawait this.processContactEventUpdate(events)\n\t}\n\n\tprivate async processContactEventUpdate(events: ReadonlyArray<EntityUpdateData>) {\n\t\tconst loginUsername = this.loginController.getUserController().loginUsername\n\t\tconst userId = this.loginController.getUserController().userId\n\t\tconst allowSync = this.deviceConfig.getUserSyncContactsWithPhonePreference(userId) ?? false\n\t\tif (!allowSync) {\n\t\t\treturn\n\t\t}\n\n\t\tconst contactsIdToCreateOrUpdate: Map<Id, Array<Id>> = new Map()\n\n\t\tfor (const event of events) {\n\t\t\tif (!isUpdateForTypeRef(ContactTypeRef, event)) continue\n\t\t\tif (event.operation === OperationType.CREATE) {\n\t\t\t\tgetFromMap(contactsIdToCreateOrUpdate, event.instanceListId, () => []).push(event.instanceId)\n\t\t\t} else if (event.operation === OperationType.UPDATE) {\n\t\t\t\tgetFromMap(contactsIdToCreateOrUpdate, event.instanceListId, () => []).push(event.instanceId)\n\t\t\t} else if (event.operation === OperationType.DELETE) {\n\t\t\t\tawait this.mobileContactsFacade\n\t\t\t\t\t.deleteContacts(loginUsername, event.instanceId)\n\t\t\t\t\t.catch(ofClass(PermissionError, (e) => this.handleNoPermissionError(userId, e)))\n\t\t\t\t\t.catch(ofClass(ContactStoreError, (e) => console.warn(\"Could not delete contact during sync: \", e)))\n\t\t\t}\n\t\t}\n\n\t\tconst contactsToInsertOrUpdate: StructuredContact[] = []\n\n\t\tfor (const [listId, elementIds] of contactsIdToCreateOrUpdate.entries()) {\n\t\t\tconst contactList = await this.entityClient.loadMultiple(ContactTypeRef, listId, elementIds)\n\t\t\tcontactList.map((contact) => {\n\t\t\t\tcontactsToInsertOrUpdate.push({\n\t\t\t\t\tid: getElementId(contact),\n\t\t\t\t\tfirstName: contact.firstName,\n\t\t\t\t\tlastName: contact.lastName,\n\t\t\t\t\tnickname: contact.nickname ?? \"\",\n\t\t\t\t\tbirthday: contact.birthdayIso,\n\t\t\t\t\tcompany: contact.company,\n\t\t\t\t\tmailAddresses: extractStructuredMailAddresses(contact.mailAddresses),\n\t\t\t\t\tphoneNumbers: extractStructuredPhoneNumbers(contact.phoneNumbers),\n\t\t\t\t\taddresses: extractStructuredAddresses(contact.addresses),\n\t\t\t\t\trawId: null,\n\t\t\t\t\tcustomDate: extractStructuredCustomDates(contact.customDate),\n\t\t\t\t\tdepartment: contact.department,\n\t\t\t\t\tmessengerHandles: extractStructuredMessengerHandle(contact.messengerHandles),\n\t\t\t\t\tmiddleName: contact.middleName,\n\t\t\t\t\tnameSuffix: contact.nameSuffix,\n\t\t\t\t\tphoneticFirst: contact.phoneticFirst,\n\t\t\t\t\tphoneticLast: contact.phoneticLast,\n\t\t\t\t\tphoneticMiddle: contact.phoneticMiddle,\n\t\t\t\t\trelationships: extractStructuredRelationships(contact.relationships),\n\t\t\t\t\twebsites: extractStructuredWebsites(contact.websites),\n\t\t\t\t\tnotes: contact.comment,\n\t\t\t\t\ttitle: contact.title ?? \"\",\n\t\t\t\t\trole: contact.role,\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\tif (contactsToInsertOrUpdate.length > 0) {\n\t\t\tawait this.mobileContactsFacade\n\t\t\t\t.saveContacts(loginUsername, contactsToInsertOrUpdate)\n\t\t\t\t.catch(ofClass(PermissionError, (e) => this.handleNoPermissionError(userId, e)))\n\t\t\t\t.catch(ofClass(ContactStoreError, (e) => console.warn(\"Could not save contacts:\", e)))\n\t\t}\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.deviceConfig.getUserSyncContactsWithPhonePreference(this.loginController.getUserController().userId) ?? false\n\t}\n\n\t/**\n\t * @return is sync succeeded. It might fail if we don't have a permission.\n\t */\n\tasync enableSync(): Promise<boolean> {\n\t\tconst loginUsername = this.loginController.getUserController().loginUsername\n\t\tconst contactListId = await this.contactModel.getContactListId()\n\t\tif (contactListId == null) return false\n\t\tconst contacts = await this.entityClient.loadAll(ContactTypeRef, contactListId)\n\t\tconst structuredContacts = contacts.map((c) => this.toStructuredContact(c))\n\t\ttry {\n\t\t\tawait this.mobileContactsFacade.syncContacts(loginUsername, structuredContacts)\n\t\t} catch (e) {\n\t\t\tconsole.warn(\"Could not sync contacts:\", e)\n\t\t\tif (e instanceof PermissionError) {\n\t\t\t\treturn false\n\t\t\t} else if (e instanceof ContactStoreError) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tthrow e\n\t\t}\n\n\t\tthis.deviceConfig.setUserSyncContactsWithPhonePreference(this.loginController.getUserController().userId, true)\n\t\tawait this.askToDedupeContacts(structuredContacts)\n\t\treturn true\n\t}\n\n\t/**\n\t * Check if syncing contacts is possible/allowed right now.\n\t *\n\t * On Android, this method simply requests permission to access contacts. On iOS, this also checks iCloud sync, as\n\t * it can interfere with\n\t */\n\tasync canSync(): Promise<boolean> {\n\t\tif (!isApp()) {\n\t\t\tthrow new ProgrammingError(\"Can only check Contact permissions on app\")\n\t\t}\n\n\t\tconst isContactPermissionGranted = await locator.systemPermissionHandler.requestPermission(PermissionType.Contacts, \"allowContactReadWrite_msg\")\n\t\tif (!isContactPermissionGranted) {\n\t\t\treturn false\n\t\t}\n\n\t\treturn !isIOSApp() || this.checkIfExternalCloudSyncOnIos()\n\t}\n\n\t/**\n\t * Check that we are allowed to sync contacts on an iOS device\n\t * @returns false if no permission or iCloud sync is enabled and the user cancelled, or true if permission is granted and iCloud sync is disabled (or the user bypassed the warning dialog)\n\t */\n\tprivate async checkIfExternalCloudSyncOnIos(): Promise<boolean> {\n\t\tassert(isIOSApp(), \"Can only check cloud syncing on iOS\")\n\n\t\tlet localContactStorage = await this.mobileContactsFacade.isLocalStorageAvailable()\n\t\tif (!localContactStorage) {\n\t\t\tconst choice = await Dialog.choiceVertical(\"externalContactSyncDetectedWarning_msg\", [\n\t\t\t\t{ text: \"settings_label\", value: \"settings\", type: \"primary\" },\n\t\t\t\t{ text: \"enableAnyway_action\", value: \"enable\" },\n\t\t\t\t{ text: \"cancel_action\", value: \"cancel\" },\n\t\t\t])\n\t\t\tswitch (choice) {\n\t\t\t\tcase \"enable\":\n\t\t\t\t\tbreak\n\t\t\t\tcase \"settings\":\n\t\t\t\t\tlocator.systemFacade.openLink(\"App-prefs:CONTACTS&path=ACCOUNTS\")\n\t\t\t\t\treturn false\n\t\t\t\tcase \"cancel\":\n\t\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\treturn true\n\t}\n\n\t/**\n\t * @return is sync succeeded. It might fail if we don't have a permission.\n\t */\n\tasync syncContacts(): Promise<boolean> {\n\t\tif (!this.isEnabled()) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst contactListId = await this.contactModel.getContactListId()\n\t\tif (contactListId == null) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst userId = this.loginController.getUserController().userId\n\t\tconst loginUsername = this.loginController.getUserController().loginUsername\n\t\tconst contacts = await this.entityClient.loadAll(ContactTypeRef, contactListId)\n\t\tconst structuredContacts: ReadonlyArray<StructuredContact> = contacts.map((contact) => this.toStructuredContact(contact))\n\n\t\ttry {\n\t\t\tconst syncResult = await this.mobileContactsFacade.syncContacts(loginUsername, structuredContacts)\n\t\t\tawait this.applyDeviceChangesToServerContacts(contacts, syncResult, contactListId)\n\t\t} catch (e) {\n\t\t\tif (e instanceof PermissionError) {\n\t\t\t\tthis.handleNoPermissionError(userId, e)\n\t\t\t\treturn false\n\t\t\t} else if (e instanceof ContactStoreError) {\n\t\t\t\tconsole.warn(\"Could not sync contacts:\", e)\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tthrow e\n\t\t}\n\t\treturn true\n\t}\n\n\tprivate async askToDedupeContacts(contactsToDedupe: readonly StructuredContact[]) {\n\t\tconst duplicateContacts = await this.mobileContactsFacade.findLocalMatches(contactsToDedupe)\n\t\tif (duplicateContacts.length === 0) {\n\t\t\t// no duplicate contacts; no need to ask\n\t\t\treturn\n\t\t}\n\n\t\tconst shouldDedupe = await Dialog.confirm(lang.getTranslation(\"importContactRemoveDuplicatesConfirm_msg\", { \"{count}\": duplicateContacts.length }))\n\t\tif (shouldDedupe) {\n\t\t\tawait showProgressDialog(\"progressDeleting_msg\", this.mobileContactsFacade.deleteLocalContacts(duplicateContacts))\n\t\t}\n\t}\n\n\tprivate toStructuredContact(contact: Contact): StructuredContact {\n\t\treturn {\n\t\t\tid: getElementId(contact),\n\t\t\tfirstName: contact.firstName,\n\t\t\tlastName: contact.lastName,\n\t\t\tmailAddresses: extractStructuredMailAddresses(contact.mailAddresses),\n\t\t\tphoneNumbers: extractStructuredPhoneNumbers(contact.phoneNumbers),\n\t\t\tnickname: contact.nickname ?? \"\",\n\t\t\tcompany: contact.company,\n\t\t\tbirthday: contact.birthdayIso,\n\t\t\taddresses: extractStructuredAddresses(contact.addresses),\n\t\t\trawId: null,\n\t\t\tcustomDate: extractStructuredCustomDates(contact.customDate),\n\t\t\tdepartment: contact.department,\n\t\t\tmessengerHandles: extractStructuredMessengerHandle(contact.messengerHandles),\n\t\t\tmiddleName: contact.middleName,\n\t\t\tnameSuffix: contact.nameSuffix,\n\t\t\tphoneticFirst: contact.phoneticFirst,\n\t\t\tphoneticLast: contact.phoneticLast,\n\t\t\tphoneticMiddle: contact.phoneticMiddle,\n\t\t\trelationships: extractStructuredRelationships(contact.relationships),\n\t\t\twebsites: extractStructuredWebsites(contact.websites),\n\t\t\tnotes: contact.comment,\n\t\t\ttitle: contact.title ?? \"\",\n\t\t\trole: contact.role,\n\t\t}\n\t}\n\n\tasync disableSync(userId?: string, login?: string) {\n\t\tconst userIdToRemove = userId ?? this.loginController.getUserController().userId\n\n\t\tif (this.deviceConfig.getUserSyncContactsWithPhonePreference(userIdToRemove)) {\n\t\t\tthis.deviceConfig.setUserSyncContactsWithPhonePreference(userIdToRemove, false)\n\t\t\tawait this.mobileContactsFacade\n\t\t\t\t.deleteContacts(login ?? this.loginController.getUserController().loginUsername, null)\n\t\t\t\t.catch(ofClass(PermissionError, (e) => console.log(\"No permission to clear contacts\", e)))\n\t\t}\n\t}\n\n\tprivate handleNoPermissionError(userId: string, error: PermissionError) {\n\t\tconsole.log(\"No permission to sync contacts, disabling sync\", error)\n\t\tthis.deviceConfig.setUserSyncContactsWithPhonePreference(userId, false)\n\t}\n\n\tprivate async applyDeviceChangesToServerContacts(contacts: ReadonlyArray<Contact>, syncResult: ContactSyncResult, listId: string) {\n\t\t// Update lock state so the entity listener doesn't process any\n\t\t// new event. They'll be handled by the end of this function\n\t\tconst entityUpdateDefer = defer<void>()\n\t\tthis.entityUpdateLock = entityUpdateDefer.promise\n\n\t\t// We need to wait until the user is fully logged in to handle encrypted entities\n\t\tawait this.loginController.waitForFullLogin()\n\t\tfor (const contact of syncResult.createdOnDevice) {\n\t\t\tconst newContact = createContact(this.createContactFromNative(contact))\n\t\t\tconst entityId = await this.entityClient.setup(listId, newContact)\n\t\t\tconst loginUsername = this.loginController.getUserController().loginUsername\n\t\t\t// save the contact right away so that we don't lose the server id to native contact mapping if we don't process entity update quickly enough\n\t\t\tawait this.mobileContactsFacade.saveContacts(loginUsername, [\n\t\t\t\t{\n\t\t\t\t\t...contact,\n\t\t\t\t\tid: entityId,\n\t\t\t\t},\n\t\t\t])\n\t\t}\n\t\tfor (const contact of syncResult.editedOnDevice) {\n\t\t\tconst cleanContact = contacts.find((c) => elementIdPart(c._id) === contact.id)\n\t\t\tif (cleanContact == null) {\n\t\t\t\tconsole.warn(\"Could not find a server contact for the contact edited on device: \", contact.id)\n\t\t\t} else {\n\t\t\t\tconst updatedContact = this.mergeNativeContactWithTutaContact(contact, cleanContact)\n\t\t\t\ttry {\n\t\t\t\t\tawait this.entityClient.update(updatedContact)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t\tconsole.warn(\"Not found contact to update during sync: \", cleanContact._id, e)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const deletedContactId of syncResult.deletedOnDevice) {\n\t\t\tconst cleanContact = contacts.find((c) => elementIdPart(c._id) === deletedContactId)\n\t\t\tif (cleanContact == null) {\n\t\t\t\tconsole.warn(\"Could not find a server contact for the contact deleted on device: \", deletedContactId)\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.entityClient.erase(cleanContact)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t\tconsole.warn(\"Not found contact to delete during sync: \", cleanContact._id, e)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Release the lock state and process the entities. We don't\n\t\t// have anything more to include inside events to apply\n\t\tentityUpdateDefer.resolve()\n\t}\n\n\tprivate createContactFromNative(contact: StructuredContact): StrippedEntity<Contact> {\n\t\treturn {\n\t\t\t_ownerGroup: getFirstOrThrow(\n\t\t\t\tthis.loginController.getUserController().user.memberships.filter((membership) => membership.groupType === GroupType.Contact),\n\t\t\t).group,\n\t\t\toldBirthdayDate: null,\n\t\t\tpresharedPassword: null,\n\t\t\toldBirthdayAggregate: null,\n\t\t\tphoto: null,\n\t\t\tsocialIds: [],\n\t\t\tfirstName: contact.firstName,\n\t\t\tlastName: contact.lastName,\n\t\t\tmailAddresses: contact.mailAddresses.map((mail) => createContactMailAddress(mail)),\n\t\t\tphoneNumbers: contact.phoneNumbers.map((phone) => createContactPhoneNumber(phone)),\n\t\t\tnickname: contact.nickname,\n\t\t\tcompany: contact.company,\n\t\t\tbirthdayIso: contact.birthday,\n\t\t\taddresses: contact.addresses.map((address) => createContactAddress(address)),\n\t\t\tcustomDate: contact.customDate.map((date) => createContactCustomDate(date)),\n\t\t\tdepartment: contact.department,\n\t\t\tmessengerHandles: contact.messengerHandles.map((handle) => createContactMessengerHandle(handle)),\n\t\t\tmiddleName: contact.middleName,\n\t\t\tnameSuffix: contact.nameSuffix,\n\t\t\tphoneticFirst: contact.phoneticFirst,\n\t\t\tphoneticLast: contact.phoneticLast,\n\t\t\tphoneticMiddle: contact.phoneticMiddle,\n\t\t\tpronouns: [],\n\t\t\trelationships: contact.relationships.map((relation) => createContactRelationship(relation)),\n\t\t\twebsites: contact.websites.map((website) => createContactWebsite(website)),\n\t\t\tcomment: contact.notes,\n\t\t\ttitle: contact.title ?? \"\",\n\t\t\trole: contact.role,\n\t\t}\n\t}\n\n\tprivate mergeNativeContactWithTutaContact(contact: StructuredContact, partialContact: Contact): Contact {\n\t\t// TODO: iOS requires a special entitlement from Apple to access these fields\n\t\tconst canMergeCommentField = !isIOSApp()\n\n\t\treturn {\n\t\t\t...partialContact,\n\t\t\tfirstName: contact.firstName,\n\t\t\tlastName: contact.lastName,\n\t\t\tmailAddresses: contact.mailAddresses.map((mail) => createContactMailAddress(mail)),\n\t\t\tphoneNumbers: contact.phoneNumbers.map((phone) => createContactPhoneNumber(phone)),\n\t\t\tnickname: contact.nickname,\n\t\t\tcompany: contact.company,\n\t\t\tbirthdayIso: contact.birthday,\n\t\t\taddresses: contact.addresses.map((address) => createContactAddress(address)),\n\t\t\tcustomDate: contact.customDate.map((date) => createContactCustomDate(date)),\n\t\t\tdepartment: contact.department,\n\t\t\tmessengerHandles: contact.messengerHandles.map((handle) => createContactMessengerHandle(handle)),\n\t\t\tmiddleName: contact.middleName,\n\t\t\tnameSuffix: contact.nameSuffix,\n\t\t\tphoneticFirst: contact.phoneticFirst,\n\t\t\tphoneticLast: contact.phoneticLast,\n\t\t\tphoneticMiddle: contact.phoneticMiddle,\n\t\t\trelationships: contact.relationships.map((relation) => createContactRelationship(relation)),\n\t\t\twebsites: contact.websites.map((website) => createContactWebsite(website)),\n\t\t\tcomment: canMergeCommentField ? contact.notes : partialContact.comment,\n\t\t\ttitle: contact.title ?? \"\",\n\t\t\trole: contact.role,\n\t\t}\n\t}\n}\n"]}