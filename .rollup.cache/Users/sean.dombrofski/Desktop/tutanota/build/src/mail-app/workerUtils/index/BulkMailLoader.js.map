{"version":3,"file":"BulkMailLoader.js","sourceRoot":"","sources":["../../../../../src/mail-app/workerUtils/index/BulkMailLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { assertNotNull, groupBy, groupByAndMap, neverNull, promiseMap, splitInChunks, TypeRef } from \"@tutao/tutanota-utils\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { ExposedCacheStorage } from \"../../../common/api/worker/rest/DefaultEntityRestCache.js\"\nimport { elementIdPart, isSameId, listIdPart, timestampToGeneratedId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { CacheMode, EntityRestClientLoadOptions, OwnerEncSessionKeyProvider } from \"../../../common/api/worker/rest/EntityRestClient.js\"\nimport { isDraft } from \"../../mail/model/MailChecks.js\"\nimport {\n\tFile as TutanotaFile,\n\tFileTypeRef,\n\tMail,\n\tMailDetails,\n\tMailDetailsBlobTypeRef,\n\tMailDetailsDraftTypeRef,\n\tMailTypeRef,\n} from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { SomeEntity } from \"../../../common/api/common/EntityTypes.js\"\nimport { parseKeyVersion } from \"../../../common/api/worker/facades/KeyLoaderFacade.js\"\n\nexport const ENTITY_INDEXER_CHUNK = 20\nexport const MAIL_INDEXER_CHUNK = 100\n\nexport type TimeRange = [number, number]\n\nexport interface MailWithMailDetails {\n\tmail: Mail\n\tmailDetails: MailDetails\n}\n\nexport class BulkMailLoader {\n\tconstructor(\n\t\tprivate readonly mailEntityClient: EntityClient,\n\t\tprivate readonly mailDataEntityClient: EntityClient,\n\t\tprivate readonly cachedStorage: ExposedCacheStorage | null,\n\t) {}\n\n\tloadMailsInRangeWithCache(\n\t\tmailListId: Id,\n\t\t[rangeStart, rangeEnd]: TimeRange,\n\t): Promise<{\n\t\telements: Array<Mail>\n\t\tloadedCompletely: boolean\n\t}> {\n\t\treturn this.mailEntityClient.loadReverseRangeBetween(\n\t\t\tMailTypeRef,\n\t\t\tmailListId,\n\t\t\ttimestampToGeneratedId(rangeStart),\n\t\t\ttimestampToGeneratedId(rangeEnd),\n\t\t\tMAIL_INDEXER_CHUNK,\n\t\t)\n\t}\n\n\tloadFixedNumberOfMailsWithCache(mailLIstId: Id, startId: Id, options: EntityRestClientLoadOptions = {}): Promise<Mail[]> {\n\t\treturn this.mailEntityClient.loadRange(MailTypeRef, mailLIstId, startId, MAIL_INDEXER_CHUNK, true, { ...options, cacheMode: CacheMode.ReadOnly })\n\t}\n\n\tasync removeFromCache(id: IdTuple): Promise<void> {\n\t\treturn this.cachedStorage?.deleteIfExists(MailTypeRef, listIdPart(id), elementIdPart(id))\n\t}\n\n\tasync loadMailDetails(mails: readonly Mail[], options: EntityRestClientLoadOptions = {}): Promise<MailWithMailDetails[]> {\n\t\tconst result: Array<MailWithMailDetails> = []\n\t\t// mailDetails stored as blob\n\t\tlet mailDetailsBlobMails = mails.filter((m) => !isDraft(m))\n\t\tconst listIdToMailDetailsBlobIds: Map<Id, Array<Id>> = groupByAndMap(\n\t\t\tmailDetailsBlobMails,\n\t\t\t(m) => assertNotNull(m.mailDetails)[0],\n\t\t\t(m) => neverNull(m.mailDetails)[1],\n\t\t)\n\t\tfor (let [listId, ids] of listIdToMailDetailsBlobIds) {\n\t\t\tconst ownerEncSessionKeyProvider: OwnerEncSessionKeyProvider = async (instanceElementId: Id) => {\n\t\t\t\tconst mail = assertNotNull(mailDetailsBlobMails.find((m) => elementIdPart(assertNotNull(m.mailDetails)) === instanceElementId))\n\t\t\t\treturn {\n\t\t\t\t\tkey: assertNotNull(mail._ownerEncSessionKey),\n\t\t\t\t\tencryptingKeyVersion: parseKeyVersion(mail._ownerKeyVersion ?? \"0\"),\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst mailDetailsBlobs = await this.loadInChunks(MailDetailsBlobTypeRef, listId, ids, ownerEncSessionKeyProvider, options)\n\t\t\tresult.push(\n\t\t\t\t...mailDetailsBlobs.map((mailDetailsBlob) => {\n\t\t\t\t\tconst mail = assertNotNull(mailDetailsBlobMails.find((m) => isSameId(m.mailDetails, mailDetailsBlob._id)))\n\t\t\t\t\treturn { mail, mailDetails: mailDetailsBlob.details }\n\t\t\t\t}),\n\t\t\t)\n\t\t}\n\t\t// mailDetails stored in db (draft)\n\t\tlet mailDetailsDraftMails = mails.filter((m) => isDraft(m))\n\t\tconst listIdToMailDetailsDraftIds: Map<Id, Array<Id>> = groupByAndMap(\n\t\t\tmailDetailsDraftMails,\n\t\t\t(m) => assertNotNull(m.mailDetailsDraft)[0],\n\t\t\t(m) => neverNull(m.mailDetailsDraft)[1],\n\t\t)\n\t\tfor (let [listId, ids] of listIdToMailDetailsDraftIds) {\n\t\t\tconst ownerEncSessionKeyProvider: OwnerEncSessionKeyProvider = async (instanceElementId: Id) => {\n\t\t\t\tconst mail = assertNotNull(mailDetailsDraftMails.find((m) => elementIdPart(assertNotNull(m.mailDetailsDraft)) === instanceElementId))\n\t\t\t\treturn {\n\t\t\t\t\tkey: assertNotNull(mail._ownerEncSessionKey),\n\t\t\t\t\tencryptingKeyVersion: parseKeyVersion(mail._ownerKeyVersion ?? \"0\"),\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst mailDetailsDrafts = await this.loadInChunks(MailDetailsDraftTypeRef, listId, ids, ownerEncSessionKeyProvider, options)\n\t\t\tresult.push(\n\t\t\t\t...mailDetailsDrafts.map((draftDetails) => {\n\t\t\t\t\tconst mail = assertNotNull(mailDetailsDraftMails.find((m) => isSameId(m.mailDetailsDraft, draftDetails._id)))\n\t\t\t\t\treturn { mail, mailDetails: draftDetails.details }\n\t\t\t\t}),\n\t\t\t)\n\t\t}\n\t\treturn result\n\t}\n\n\tasync loadAttachments(mails: readonly Mail[], options: EntityRestClientLoadOptions = {}): Promise<TutanotaFile[]> {\n\t\tconst attachmentIds: IdTuple[] = []\n\t\tfor (const mail of mails) {\n\t\t\tattachmentIds.push(...mail.attachments)\n\t\t}\n\t\tconst filesByList = groupBy(attachmentIds, (a) => a[0])\n\t\tconst fileLoadingPromises: Array<Promise<Array<TutanotaFile>>> = []\n\t\tfor (const [listId, fileIds] of filesByList.entries()) {\n\t\t\tfileLoadingPromises.push(\n\t\t\t\tthis.loadInChunks(\n\t\t\t\t\tFileTypeRef,\n\t\t\t\t\tlistId,\n\t\t\t\t\tfileIds.map((f) => f[1]),\n\t\t\t\t\tundefined,\n\t\t\t\t\toptions,\n\t\t\t\t),\n\t\t\t)\n\t\t}\n\t\tconst filesResults = await Promise.all(fileLoadingPromises)\n\t\treturn filesResults.flat()\n\t}\n\n\tprivate async loadInChunks<T extends SomeEntity>(\n\t\ttypeRef: TypeRef<T>,\n\t\tlistId: Id | null,\n\t\tids: Id[],\n\t\townerEncSessionKeyProvider?: OwnerEncSessionKeyProvider,\n\t\toptions: EntityRestClientLoadOptions = {},\n\t): Promise<T[]> {\n\t\tconst byChunk = splitInChunks(ENTITY_INDEXER_CHUNK, ids)\n\t\tconst entityResults = await promiseMap(\n\t\t\tbyChunk,\n\t\t\t(chunk) => {\n\t\t\t\treturn chunk.length > 0\n\t\t\t\t\t? this.mailDataEntityClient.loadMultiple(typeRef, listId, chunk, ownerEncSessionKeyProvider, { ...options, cacheMode: CacheMode.ReadOnly })\n\t\t\t\t\t: Promise.resolve([])\n\t\t\t},\n\t\t\t{\n\t\t\t\tconcurrency: 2,\n\t\t\t},\n\t\t)\n\t\treturn entityResults.flat()\n\t}\n}\n"]}