{"version":3,"file":"ContactsSettingsViewer.js","sourceRoot":"","sources":["../../../../src/mail-app/settings/ContactsSettingsViewer.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Child, Children } from \"mithril\"\nimport { assertMainOrNode, isApp, isIOSApp } from \"../../common/api/common/Env\"\nimport { lang } from \"../../common/misc/LanguageViewModel\"\nimport type { DropDownSelectorAttrs } from \"../../common/gui/base/DropDownSelector.js\"\nimport { DropDownSelector } from \"../../common/gui/base/DropDownSelector.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { locator } from \"../../common/api/main/CommonLocator.js\"\nimport { FeatureType, OperationType } from \"../../common/api/common/TutanotaConstants.js\"\nimport { TutanotaProperties, TutanotaPropertiesTypeRef } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { Button, ButtonType } from \"../../common/gui/base/Button.js\"\nimport { Dialog } from \"../../common/gui/base/Dialog.js\"\nimport { mailLocator } from \"../mailLocator.js\"\nimport { UpdatableSettingsViewer } from \"../../common/settings/Interfaces.js\"\nimport { assert } from \"@tutao/tutanota-utils\"\n\nassertMainOrNode()\n\nexport class ContactsSettingsViewer implements UpdatableSettingsViewer {\n\tprivate noAutomaticContacts: boolean = false\n\n\tconstructor() {\n\t\tthis.noAutomaticContacts = locator.logins.getUserController().props.noAutomaticContacts\n\t}\n\n\tview(): Children {\n\t\treturn [\n\t\t\tm(\n\t\t\t\t\".fill-absolute.scroll.plr-l.pb-xl\",\n\t\t\t\t{\n\t\t\t\t\trole: \"group\",\n\t\t\t\t},\n\t\t\t\t[\n\t\t\t\t\tm(\".h4.mt-l\", lang.get(\"contactsManagement_label\")),\n\t\t\t\t\tthis.renderImportContactsButton(),\n\t\t\t\t\tlocator.logins.isEnabled(FeatureType.DisableContacts) ? null : this.renderAutoCreateContactsPreference(),\n\t\t\t\t\tthis.renderContactsSyncDropdown(),\n\t\t\t\t],\n\t\t\t),\n\t\t]\n\t}\n\n\tprivate renderAutoCreateContactsPreference(): Children {\n\t\treturn m(DropDownSelector, {\n\t\t\tlabel: \"createContacts_label\",\n\t\t\thelpLabel: () => lang.get(\"createContactsForRecipients_action\"),\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\tname: lang.get(\"activated_label\"),\n\t\t\t\t\tvalue: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: lang.get(\"deactivated_label\"),\n\t\t\t\t\tvalue: true,\n\t\t\t\t},\n\t\t\t],\n\t\t\tselectedValue: this.noAutomaticContacts,\n\t\t\tselectionChangedHandler: (v) => {\n\t\t\t\tlocator.logins.getUserController().props.noAutomaticContacts = v\n\t\t\t\tlocator.entityClient.update(locator.logins.getUserController().props)\n\t\t\t},\n\t\t\tdropdownWidth: 250,\n\t\t} satisfies DropDownSelectorAttrs<boolean>)\n\t}\n\n\tprivate renderImportContactsButton(): Children {\n\t\tif (!isApp()) {\n\t\t\treturn null\n\t\t}\n\t\treturn m(\".flex.flex-space-between.items-center\", [\n\t\t\tlang.get(\"importFromContactBook_label\"),\n\t\t\tm(Button, {\n\t\t\t\tlabel: \"import_action\",\n\t\t\t\tclick: () => this.importContactsFromDevice(),\n\t\t\t\ttype: ButtonType.Primary,\n\t\t\t}),\n\t\t])\n\t}\n\n\tprivate renderContactsSyncDropdown(): Child {\n\t\tif (!isApp()) return null\n\n\t\treturn m(DropDownSelector, {\n\t\t\tlabel: \"contactsSynchronization_label\",\n\t\t\thelpLabel: () => lang.get(\"contactsSynchronizationWarning_msg\"),\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\tname: lang.get(\"activated_label\"),\n\t\t\t\t\tvalue: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: lang.get(\"deactivated_label\"),\n\t\t\t\t\tvalue: false,\n\t\t\t\t},\n\t\t\t],\n\t\t\tselectedValue: mailLocator.nativeContactsSyncManager().isEnabled(),\n\t\t\tselectionChangedHandler: async (contactSyncEnabled: boolean) => {\n\t\t\t\tawait this.onContactSyncSelectionChanged(contactSyncEnabled)\n\t\t\t},\n\t\t\tdropdownWidth: 250,\n\t\t})\n\t}\n\n\tprivate async onContactSyncSelectionChanged(contactSyncEnabled: boolean) {\n\t\tassert(isApp(), \"isApp\")\n\t\tconst syncManager = mailLocator.nativeContactsSyncManager()\n\n\t\tif (!contactSyncEnabled) {\n\t\t\tsyncManager.disableSync()\n\t\t} else {\n\t\t\tconst canSync = await syncManager.canSync()\n\t\t\tif (!canSync) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tawait syncManager.enableSync()\n\t\t\t// We just enable if the synchronization started successfully\n\t\t\tconst isSyncAllowed = await syncManager.syncContacts()\n\t\t\tif (!isSyncAllowed) {\n\t\t\t\tthis.handleContactsSynchronizationFail()\n\t\t\t}\n\t\t\tm.redraw()\n\t\t}\n\t}\n\n\tupdateTutaPropertiesSettings(props: TutanotaProperties) {\n\t\tthis.noAutomaticContacts = props.noAutomaticContacts\n\t}\n\n\tasync entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\tfor (const update of updates) {\n\t\t\tconst { operation } = update\n\t\t\tif (isUpdateForTypeRef(TutanotaPropertiesTypeRef, update) && operation === OperationType.UPDATE) {\n\t\t\t\tconst props = await locator.entityClient.load(TutanotaPropertiesTypeRef, locator.logins.getUserController().props._id)\n\t\t\t\tthis.updateTutaPropertiesSettings(props)\n\t\t\t}\n\t\t}\n\t\tm.redraw()\n\t}\n\n\tprivate handleContactsSynchronizationFail() {\n\t\tmailLocator.nativeContactsSyncManager()?.disableSync()\n\t\tthis.showContactsPermissionDialog()\n\t}\n\n\tprivate async showContactsPermissionDialog() {\n\t\tawait Dialog.message(\"allowContactReadWrite_msg\")\n\t\tawait locator.systemFacade.goToSettings()\n\t}\n\n\tprivate async importContactsFromDevice() {\n\t\tconst importer = await mailLocator.contactImporter()\n\t\tawait importer.importContactsFromDeviceSafely()\n\t}\n}\n"]}