{"version":3,"file":"MailImporter.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/import/MailImporter.ts"],"names":[],"mappings":"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","sourcesContent":["import { getApiBaseUrl } from \"../../../common/api/common/Env\"\nimport { ImportMailState, ImportMailStateTypeRef, MailBox, MailFolder, MailFolderTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs\"\nimport { assertNotNull, first, isEmpty } from \"@tutao/tutanota-utils\"\nimport { NativeMailImportFacade } from \"../../../common/native/common/generatedipc/NativeMailImportFacade\"\nimport { CredentialsProvider } from \"../../../common/misc/credentials/CredentialsProvider\"\nimport { DomainConfigProvider } from \"../../../common/api/common/DomainConfigProvider\"\nimport { LoginController } from \"../../../common/api/main/LoginController\"\nimport m from \"mithril\"\nimport { elementIdPart, GENERATED_MIN_ID, isSameId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { EstimatingProgressMonitor } from \"../../../common/api/common/utils/EstimatingProgressMonitor.js\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils\"\nimport { EventController } from \"../../../common/api/main/EventController\"\nimport { ImportErrorCategories, MailImportError } from \"../../../common/api/common/error/MailImportError.js\"\nimport { showSnackBar, SnackBarButtonAttrs } from \"../../../common/gui/base/SnackBar.js\"\nimport { OpenSettingsHandler } from \"../../../common/native/main/OpenSettingsHandler.js\"\nimport { Dialog } from \"../../../common/gui/base/Dialog\"\nimport { ImportStatus, MailSetKind } from \"../../../common/api/common/TutanotaConstants\"\nimport { FolderSystem } from \"../../../common/api/common/mail/FolderSystem\"\nimport { mailLocator } from \"../../mailLocator\"\n\n// keep in sync with napi binding.d.cts\nexport const enum ImportProgressAction {\n\tContinue = 0,\n\tPause = 1,\n\tStop = 2,\n}\n\nconst DEFAULT_TOTAL_WORK: number = 10000\ntype ActiveImport = {\n\tremoteStateId: IdTuple\n\tuiStatus: UiImportStatus\n\tprogressMonitor: EstimatingProgressMonitor\n}\n\nexport class MailImporter {\n\tprivate finalisedImportStates: Map<Id, ImportMailState> = new Map()\n\tprivate activeImport: ActiveImport | null = null\n\tpublic foldersForMailbox: FolderSystem | undefined\n\tpublic selectedTargetFolder: MailFolder | null = null\n\n\tconstructor(\n\t\tprivate readonly domainConfigProvider: DomainConfigProvider,\n\t\tprivate readonly loginController: LoginController,\n\t\tprivate readonly mailboxModel: MailboxModel,\n\t\tprivate readonly entityClient: EntityClient,\n\t\teventController: EventController,\n\t\tprivate readonly credentialsProvider: CredentialsProvider,\n\t\tprivate readonly nativeMailImportFacade: NativeMailImportFacade,\n\t\tprivate readonly openSettingsHandler: OpenSettingsHandler,\n\t) {\n\t\teventController.addEntityListener((updates) => this.entityEventsReceived(updates))\n\t}\n\n\tasync getMailbox(): Promise<MailBox> {\n\t\treturn assertNotNull(first(await this.mailboxModel.getMailboxDetails())).mailbox\n\t}\n\n\tasync initImportMailStates(): Promise<void> {\n\t\tawait this.checkForResumableImport()\n\n\t\tconst importMailStatesCollection = await this.entityClient.loadAll(ImportMailStateTypeRef, (await this.getMailbox()).mailImportStates)\n\t\tfor (const importMailState of importMailStatesCollection) {\n\t\t\tif (this.isFinalisedImport(importMailState)) {\n\t\t\t\tthis.updateFinalisedImport(elementIdPart(importMailState._id), importMailState)\n\t\t\t}\n\t\t}\n\t\tm.redraw()\n\t}\n\n\tprivate async checkForResumableImport(): Promise<void> {\n\t\tconst importFacade = assertNotNull(this.nativeMailImportFacade)\n\t\tconst mailbox = await this.getMailbox()\n\t\tthis.foldersForMailbox = this.getFoldersForMailGroup(assertNotNull(mailbox._ownerGroup))\n\n\t\tlet activeImportId: IdTuple | null = null\n\t\tif (this.activeImport === null) {\n\t\t\tconst mailOwnerGroupId = assertNotNull(mailbox._ownerGroup)\n\t\t\tconst userId = this.loginController.getUserController().userId\n\t\t\tconst unencryptedCredentials = assertNotNull(await this.credentialsProvider?.getDecryptedCredentialsByUserId(userId))\n\t\t\tconst apiUrl = getApiBaseUrl(this.domainConfigProvider.getCurrentDomainConfig())\n\t\t\tthis.selectedTargetFolder = this.foldersForMailbox.getSystemFolderByType(MailSetKind.ARCHIVE)\n\n\t\t\ttry {\n\t\t\t\tactiveImportId = await importFacade.getResumableImport(mailbox._id, mailOwnerGroupId, unencryptedCredentials, apiUrl)\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof MailImportError) this.handleError(e).catch()\n\t\t\t\telse throw e\n\t\t\t}\n\n\t\t\tthis.listenForError(importFacade, mailbox._id).then()\n\t\t}\n\n\t\tif (activeImportId) {\n\t\t\t// we can't use the result of loadAll (see below) as that might only read from offline cache and\n\t\t\t// not include a new ImportMailState that was created without sending an entity event\n\t\t\tconst importMailState = await this.entityClient.load(ImportMailStateTypeRef, activeImportId)\n\t\t\tconst remoteStatus = parseInt(importMailState.status) as ImportStatus\n\n\t\t\tswitch (remoteStatus) {\n\t\t\t\tcase ImportStatus.Canceled:\n\t\t\t\tcase ImportStatus.Finished:\n\t\t\t\t\tactiveImportId = null\n\t\t\t\t\tthis.activeImport = null\n\t\t\t\t\tthis.selectedTargetFolder = this.foldersForMailbox.getSystemFolderByType(MailSetKind.ARCHIVE)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase ImportStatus.Paused:\n\t\t\t\tcase ImportStatus.Running: {\n\t\t\t\t\tlet progressMonitor = this.activeImport?.progressMonitor ?? null\n\t\t\t\t\tif (!progressMonitor) {\n\t\t\t\t\t\tconst totalCount = parseInt(importMailState.totalMails)\n\t\t\t\t\t\tconst doneCount = parseInt(importMailState.failedMails) + parseInt(importMailState.successfulMails)\n\t\t\t\t\t\tprogressMonitor = this.createEstimatingProgressMonitor(totalCount)\n\t\t\t\t\t\tprogressMonitor.totalWorkDone(doneCount)\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.activeImport = {\n\t\t\t\t\t\tremoteStateId: activeImportId,\n\t\t\t\t\t\tuiStatus: UiImportStatus.Paused,\n\t\t\t\t\t\tprogressMonitor,\n\t\t\t\t\t}\n\t\t\t\t\tthis.selectedTargetFolder = await this.entityClient.load(MailFolderTypeRef, importMailState.targetFolder)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\tfor (const update of updates) {\n\t\t\tif (isUpdateForTypeRef(ImportMailStateTypeRef, update)) {\n\t\t\t\tconst updatedState = await this.entityClient.load(ImportMailStateTypeRef, [update.instanceListId, update.instanceId])\n\t\t\t\tawait this.newImportStateFromServer(updatedState)\n\t\t\t}\n\t\t}\n\t}\n\n\tasync newImportStateFromServer(serverState: ImportMailState) {\n\t\tconst remoteStatus = parseInt(serverState.status) as ImportStatus\n\n\t\tconst wasUpdatedForThisImport = this.activeImport !== null && isSameId(this.activeImport.remoteStateId, serverState._id)\n\t\tif (wasUpdatedForThisImport) {\n\t\t\tif (isFinalisedImport(remoteStatus)) {\n\t\t\t\tthis.resetStatus()\n\t\t\t\tthis.updateFinalisedImport(elementIdPart(serverState._id), serverState)\n\t\t\t} else {\n\t\t\t\tconst activeImport = assertNotNull(this.activeImport)\n\t\t\t\tactiveImport.uiStatus = importStatusToUiImportStatus(remoteStatus)\n\t\t\t\tconst newTotalWork = parseInt(serverState.totalMails)\n\t\t\t\tconst newDoneWork = parseInt(serverState.successfulMails) + parseInt(serverState.failedMails)\n\t\t\t\tactiveImport.progressMonitor.updateTotalWork(newTotalWork)\n\t\t\t\tactiveImport.progressMonitor.totalWorkDone(newDoneWork)\n\t\t\t\tif (remoteStatus === ImportStatus.Paused) {\n\t\t\t\t\tactiveImport.progressMonitor.pauseEstimation()\n\t\t\t\t} else {\n\t\t\t\t\tactiveImport.progressMonitor.continueEstimation()\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.updateFinalisedImport(elementIdPart(serverState._id), serverState)\n\t\t}\n\n\t\tm.redraw()\n\t}\n\n\tprivate createEstimatingProgressMonitor(totalWork: number = DEFAULT_TOTAL_WORK) {\n\t\treturn new EstimatingProgressMonitor(totalWork, (_) => {\n\t\t\tm.redraw()\n\t\t})\n\t}\n\n\tprivate isFinalisedImport(importMailState: ImportMailState) {\n\t\treturn parseInt(importMailState.status) == ImportStatus.Finished || parseInt(importMailState.status) == ImportStatus.Canceled\n\t}\n\n\tprivate getFoldersForMailGroup(mailGroupId: Id): FolderSystem {\n\t\tif (mailGroupId) {\n\t\t\tconst folderSystem = mailLocator.mailModel.getFolderSystemByGroupId(mailGroupId)\n\t\t\tif (folderSystem) {\n\t\t\t\treturn folderSystem\n\t\t\t}\n\t\t}\n\t\tthrow new Error(\"could not load folder list\")\n\t}\n\n\t/// start a loop that listens to an arbitrary amount of errors that can happen during the import process.\n\tprivate async listenForError(importFacade: NativeMailImportFacade, mailboxId: string) {\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tawait importFacade.setAsyncErrorHook(mailboxId)\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof MailImportError) {\n\t\t\t\t\tthis.handleError(e).catch()\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tthrow e\n\t\t\t}\n\t\t\tthrow new ProgrammingError(\"setAsyncErrorHook should never complete normally!\")\n\t\t}\n\t}\n\n\tprivate async handleError(err: MailImportError) {\n\t\tif (this.activeImport) {\n\t\t\tthis.activeImport.uiStatus = UiImportStatus.Paused\n\t\t\tthis.activeImport.progressMonitor.pauseEstimation()\n\t\t}\n\t\tif (err.data.category == ImportErrorCategories.ImportFeatureDisabled) {\n\t\t\tawait Dialog.message(\"mailImportErrorServiceUnavailable_msg\")\n\t\t} else if (err.data.category == ImportErrorCategories.ConcurrentImport) {\n\t\t\tconsole.log(\"Tried to start concurrent import\")\n\t\t\tshowSnackBar({\n\t\t\t\tmessage: \"pleaseWait_msg\",\n\t\t\t\tbutton: {\n\t\t\t\t\tlabel: \"ok_action\",\n\t\t\t\t\tclick: () => {},\n\t\t\t\t},\n\t\t\t})\n\t\t} else {\n\t\t\tconsole.log(`Error while importing mails, category: ${err.data.category}, source: ${err.data.source}`)\n\t\t\tconst navigateToImportSettings: SnackBarButtonAttrs = {\n\t\t\t\tlabel: \"show_action\",\n\t\t\t\tclick: () => this.openSettingsHandler.openSettings(\"mailImport\"),\n\t\t\t}\n\t\t\tshowSnackBar({ message: \"someMailFailedImport_msg\", button: navigateToImportSettings })\n\t\t}\n\t}\n\n\t/**\n\t * Call to the nativeMailImportFacade in worker to start a mail import from .eml or .mbox files.\n\t * @param filePaths to the .eml/.mbox files to import mails from\n\t */\n\tasync onStartBtnClick(filePaths: Array<string>) {\n\t\tif (isEmpty(filePaths)) return\n\t\tif (!this.shouldRenderStartButton()) throw new ProgrammingError(\"can't change state to starting\")\n\n\t\tconst apiUrl = getApiBaseUrl(this.domainConfigProvider.getCurrentDomainConfig())\n\t\tconst mailbox = await this.getMailbox()\n\t\tconst mailboxId = mailbox._id\n\t\tconst mailOwnerGroupId = assertNotNull(mailbox._ownerGroup)\n\t\tconst userId = this.loginController.getUserController().userId\n\t\tconst importFacade = assertNotNull(this.nativeMailImportFacade)\n\t\tconst selectedTargetFolder = assertNotNull(this.selectedTargetFolder)\n\t\tconst unencryptedCredentials = assertNotNull(await this.credentialsProvider?.getDecryptedCredentialsByUserId(userId))\n\n\t\tthis.resetStatus()\n\t\tlet progressMonitor = this.createEstimatingProgressMonitor()\n\t\tthis.activeImport = {\n\t\t\tremoteStateId: [GENERATED_MIN_ID, GENERATED_MIN_ID],\n\t\t\tuiStatus: UiImportStatus.Starting,\n\t\t\tprogressMonitor,\n\t\t}\n\t\tthis.activeImport?.progressMonitor?.continueEstimation()\n\t\tm.redraw()\n\n\t\ttry {\n\t\t\tthis.activeImport.remoteStateId = await importFacade.prepareNewImport(\n\t\t\t\tmailboxId,\n\t\t\t\tmailOwnerGroupId,\n\t\t\t\tselectedTargetFolder._id,\n\t\t\t\tfilePaths,\n\t\t\t\tunencryptedCredentials,\n\t\t\t\tapiUrl,\n\t\t\t)\n\t\t} catch (e) {\n\t\t\tthis.resetStatus()\n\t\t\tm.redraw()\n\n\t\t\tif (e instanceof MailImportError) {\n\t\t\t\tthis.handleError(e).catch()\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t\tawait importFacade.setProgressAction(mailboxId, ImportProgressAction.Continue)\n\t}\n\n\tasync onPauseBtnClick() {\n\t\tlet activeImport = assertNotNull(this.activeImport)\n\n\t\tif (activeImport.uiStatus !== UiImportStatus.Running) throw new ProgrammingError(\"can't change state to pausing\")\n\n\t\tactiveImport.uiStatus = UiImportStatus.Pausing\n\t\tactiveImport.progressMonitor.pauseEstimation()\n\t\tm.redraw()\n\n\t\tconst mailboxId = (await this.getMailbox())._id\n\t\tconst nativeImportFacade = assertNotNull(this.nativeMailImportFacade)\n\t\tawait nativeImportFacade.setProgressAction(mailboxId, ImportProgressAction.Pause)\n\t}\n\n\tasync onResumeBtnClick() {\n\t\tif (!this.shouldRenderResumeButton()) throw new ProgrammingError(\"can't change state to resuming\")\n\n\t\tlet activeImport = assertNotNull(this.activeImport)\n\t\tactiveImport.uiStatus = UiImportStatus.Resuming\n\n\t\tactiveImport.progressMonitor.continueEstimation()\n\t\tm.redraw()\n\n\t\tconst mailboxId = (await this.getMailbox())._id\n\t\tconst nativeImportFacade = assertNotNull(this.nativeMailImportFacade)\n\t\tawait nativeImportFacade.setProgressAction(mailboxId, ImportProgressAction.Continue)\n\t}\n\n\tasync onCancelBtnClick() {\n\t\tif (!this.shouldRenderCancelButton()) throw new ProgrammingError(\"can't change state to cancelling\")\n\n\t\tlet activeImport = assertNotNull(this.activeImport)\n\t\tactiveImport.uiStatus = UiImportStatus.Cancelling\n\n\t\tactiveImport.progressMonitor.pauseEstimation()\n\t\tm.redraw()\n\n\t\tconst mailboxId = (await this.getMailbox())._id\n\t\tconst nativeImportFacade = assertNotNull(this.nativeMailImportFacade)\n\t\tawait nativeImportFacade.setProgressAction(mailboxId, ImportProgressAction.Stop)\n\t}\n\n\tshouldRenderStartButton() {\n\t\treturn this.activeImport === null\n\t}\n\n\tshouldRenderImportStatus(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn (\n\t\t\tactiveImportStatus === UiImportStatus.Starting ||\n\t\t\tactiveImportStatus === UiImportStatus.Running ||\n\t\t\tactiveImportStatus === UiImportStatus.Pausing ||\n\t\t\tactiveImportStatus === UiImportStatus.Paused ||\n\t\t\tactiveImportStatus === UiImportStatus.Cancelling ||\n\t\t\tactiveImportStatus === UiImportStatus.Resuming\n\t\t)\n\t}\n\n\tshouldRenderPauseButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn activeImportStatus === UiImportStatus.Running || activeImportStatus === UiImportStatus.Starting || activeImportStatus === UiImportStatus.Pausing\n\t}\n\n\tshouldDisablePauseButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn activeImportStatus === UiImportStatus.Pausing || activeImportStatus === UiImportStatus.Starting\n\t}\n\n\tshouldRenderResumeButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn activeImportStatus === UiImportStatus.Paused || activeImportStatus === UiImportStatus.Resuming\n\t}\n\n\tshouldDisableResumeButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn activeImportStatus === UiImportStatus.Resuming || activeImportStatus === UiImportStatus.Starting\n\t}\n\n\tshouldRenderCancelButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\tif (activeImportStatus === null) return false\n\n\t\treturn (\n\t\t\tactiveImportStatus === UiImportStatus.Paused ||\n\t\t\tactiveImportStatus === UiImportStatus.Running ||\n\t\t\tactiveImportStatus === UiImportStatus.Pausing ||\n\t\t\tactiveImportStatus === UiImportStatus.Cancelling\n\t\t)\n\t}\n\n\tshouldDisableCancelButton(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\treturn (\n\t\t\tactiveImportStatus === UiImportStatus.Cancelling || activeImportStatus === UiImportStatus.Pausing || activeImportStatus === UiImportStatus.Starting\n\t\t)\n\t}\n\n\tshouldRenderProcessedMails(): boolean {\n\t\tconst activeImportStatus = this.getUiStatus()\n\t\treturn (\n\t\t\tthis.activeImport?.progressMonitor?.totalWork != DEFAULT_TOTAL_WORK &&\n\t\t\t(activeImportStatus === UiImportStatus.Running ||\n\t\t\t\tactiveImportStatus === UiImportStatus.Resuming ||\n\t\t\t\tactiveImportStatus === UiImportStatus.Pausing ||\n\t\t\t\tactiveImportStatus === UiImportStatus.Paused)\n\t\t)\n\t}\n\n\tgetTotalMailsCount() {\n\t\treturn assertNotNull(this.activeImport).progressMonitor.totalWork\n\t}\n\n\tgetProcessedMailsCount() {\n\t\tconst progressMonitor = assertNotNull(this.activeImport).progressMonitor\n\t\treturn Math.min(Math.round(progressMonitor.workCompleted), progressMonitor.totalWork)\n\t}\n\n\tgetProgress() {\n\t\tconst progressMonitor = assertNotNull(this.activeImport).progressMonitor\n\t\treturn Math.ceil(progressMonitor.percentage())\n\t}\n\n\tgetFinalisedImports(): Array<ImportMailState> {\n\t\treturn Array.from(this.finalisedImportStates.values())\n\t}\n\n\tupdateFinalisedImport(importMailStateElementId: Id, importMailState: ImportMailState) {\n\t\tthis.finalisedImportStates.set(importMailStateElementId, importMailState)\n\t}\n\n\tprivate resetStatus() {\n\t\tthis.activeImport?.progressMonitor?.pauseEstimation()\n\t\tthis.activeImport = null\n\t}\n\n\tgetUiStatus() {\n\t\treturn this.activeImport?.uiStatus ?? null\n\t}\n}\n\nexport const enum UiImportStatus {\n\tStarting,\n\tResuming,\n\tRunning,\n\tPausing,\n\tPaused,\n\tCancelling,\n}\n\nfunction importStatusToUiImportStatus(importStatus: ImportStatus) {\n\t// We do not render ImportStatus.Finished and ImportStatus.Canceled\n\t// in the UI, and therefore return the corresponding previous states.\n\tswitch (importStatus) {\n\t\tcase ImportStatus.Finished:\n\t\t\treturn UiImportStatus.Running\n\t\tcase ImportStatus.Canceled:\n\t\t\treturn UiImportStatus.Cancelling\n\t\tcase ImportStatus.Paused:\n\t\t\treturn UiImportStatus.Paused\n\t\tcase ImportStatus.Running:\n\t\t\treturn UiImportStatus.Running\n\t}\n}\n\nexport function isFinalisedImport(remoteImportStatus: ImportStatus): boolean {\n\treturn remoteImportStatus == ImportStatus.Canceled || remoteImportStatus == ImportStatus.Finished\n}\n"]}