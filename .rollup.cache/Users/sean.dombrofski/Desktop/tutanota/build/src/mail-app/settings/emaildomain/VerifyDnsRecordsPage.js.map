{"version":3,"file":"VerifyDnsRecordsPage.js","sourceRoot":"","sources":["../../../../../src/mail-app/settings/emaildomain/VerifyDnsRecordsPage.ts"],"names":[],"mappings":"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","sourcesContent":["import { DomainDnsStatus } from \"../DomainDnsStatus\"\nimport m, { Children, Vnode, VnodeDOM } from \"mithril\"\nimport { assertEnumValue, CustomDomainCheckResult, DnsRecordType, DnsRecordValidation } from \"../../../common/api/common/TutanotaConstants\"\nimport { InfoLink, lang, TranslationKey } from \"../../../common/misc/LanguageViewModel\"\nimport type { AddDomainData, ValidatedDnSRecord } from \"./AddDomainWizard\"\nimport { ActionDialogProps, Dialog } from \"../../../common/gui/base/Dialog\"\nimport type { WizardPageAttrs } from \"../../../common/gui/base/WizardDialog.js\"\nimport { emitWizardEvent, WizardEventType, WizardPageN } from \"../../../common/gui/base/WizardDialog.js\"\nimport { Button, ButtonType } from \"../../../common/gui/base/Button.js\"\nimport type { DnsRecord } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { BootIcons } from \"../../../common/gui/base/icons/BootIcons\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { downcast } from \"@tutao/tutanota-utils\"\nimport { ButtonSize } from \"../../../common/gui/base/ButtonSize.js\"\nimport { IconButtonAttrs } from \"../../../common/gui/base/IconButton.js\"\nimport { ColumnWidth, Table } from \"../../../common/gui/base/Table.js\"\nimport { DnsRecordTable } from \"./DnsRecordTable.js\"\nimport { LoginButton } from \"../../../common/gui/base/buttons/LoginButton.js\"\nimport { MoreInfoLink } from \"../../../common/misc/news/MoreInfoLink.js\"\n\nassertMainOrNode()\n\n/** Wizard page which can verify DNS records for custom email domain. */\nexport class VerifyDnsRecordsPage implements WizardPageN<AddDomainData> {\n\toncreate(vnode: VnodeDOM<WizardPageAttrs<AddDomainData>>) {\n\t\tconst data = vnode.attrs.data\n\t\tdata.domainStatus = new DomainDnsStatus(data.domain())\n\n\t\t_updateDnsStatus(data.domainStatus)\n\t}\n\n\tview(vnode: Vnode<WizardPageAttrs<AddDomainData>>) {\n\t\tconst a = vnode.attrs\n\t\treturn [\n\t\t\tm(\"h4.mt-l.text-center\", lang.get(\"verifyDNSRecords_title\")),\n\t\t\tm(\"p\", lang.get(\"verifyDNSRecords_msg\")),\n\t\t\ta.data.domainStatus.status.isLoaded()\n\t\t\t\t? m(\"\", [\n\t\t\t\t\t\trenderCheckResult(a.data.domainStatus),\n\t\t\t\t\t\tm(\n\t\t\t\t\t\t\t\".flex-center.full-width.pt-l.mb-l\",\n\t\t\t\t\t\t\tm(LoginButton, {\n\t\t\t\t\t\t\t\tlabel: \"finish_action\",\n\t\t\t\t\t\t\t\tclass: \"small-login-button\",\n\t\t\t\t\t\t\t\t// We check if all DNS records are set correctly and let the user confirm before leaving if not\n\t\t\t\t\t\t\t\tonclick: () => this._finishDialog(a.data, (downcast<VnodeDOM>(vnode)?.dom as HTMLElement | null) ?? null),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t),\n\t\t\t\t  ])\n\t\t\t\t: m(\"\", [\n\t\t\t\t\t\tlang.get(\"loadingDNSRecords_msg\"),\n\t\t\t\t\t\tm(\n\t\t\t\t\t\t\t\".flex-center.full-width.pt-l.mb-l\",\n\t\t\t\t\t\t\tm(Button, {\n\t\t\t\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\t\t\t\tlabel: \"refresh_action\",\n\t\t\t\t\t\t\t\tclick: () => _updateDnsStatus(a.data.domainStatus),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t),\n\t\t\t\t  ]),\n\t\t]\n\t}\n\n\t_finishDialog(data: AddDomainData, dom: HTMLElement | null): Promise<void> {\n\t\tconst leaveUnfinishedDialogAttrs: ActionDialogProps = {\n\t\t\ttitle: \"quitSetup_title\",\n\t\t\tchild: {\n\t\t\t\tview: () => {\n\t\t\t\t\treturn [m(\"p\", lang.get(\"quitDNSSetup_msg\"))]\n\t\t\t\t},\n\t\t\t},\n\t\t\tokAction: (dialog: Dialog) => {\n\t\t\t\tdialog.close()\n\t\t\t\temitWizardEvent(dom, WizardEventType.CLOSE_DIALOG)\n\t\t\t},\n\t\t}\n\t\treturn _updateDnsStatus(data.domainStatus).then(() => {\n\t\t\tif (data.domainStatus.areRecordsFine()) {\n\t\t\t\temitWizardEvent(dom, WizardEventType.SHOW_NEXT_PAGE) // The wizard will close the dialog as this is the last page\n\t\t\t} else {\n\t\t\t\tDialog.showActionDialog(leaveUnfinishedDialogAttrs)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction _updateDnsStatus(domainStatus: DomainDnsStatus): Promise<void> {\n\treturn domainStatus.loadCurrentStatus().then(() => {\n\t\tm.redraw()\n\t})\n}\n\nfunction _getDisplayableRecordValue(record: DnsRecord): string {\n\tif (\n\t\t!record.value.endsWith(\".\") &&\n\t\t(record.type === DnsRecordType.DNS_RECORD_TYPE_MX ||\n\t\t\trecord.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_DKIM ||\n\t\t\trecord.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_MTA_STS)\n\t) {\n\t\treturn record.value + \".\"\n\t}\n\n\treturn record.value\n}\n\nexport function createDnsRecordTableN(records: ValidatedDnSRecord[], refreshButtonAttrs: IconButtonAttrs | null): Children {\n\treturn m(Table, {\n\t\tcolumnHeading: [\"type_label\", \"dnsRecordHostOrName_label\", \"dnsRecordValueOrPointsTo_label\"],\n\t\taddButtonAttrs: refreshButtonAttrs,\n\t\tcolumnWidths: [ColumnWidth.Small, ColumnWidth.Small, ColumnWidth.Largest],\n\t\tshowActionButtonColumn: true,\n\t\tlines: records.map((r) => {\n\t\t\treturn {\n\t\t\t\tcells: () => [\n\t\t\t\t\t{\n\t\t\t\t\t\tmain: DnsRecordTable[r.record.type as DnsRecordType],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmain: r.record.subdomain ? r.record.subdomain : \"@\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmain: r.record.value,\n\t\t\t\t\t\tinfo: r.helpInfo,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}\n\t\t}),\n\t})\n}\n\nexport function renderCheckResult(domainStatus: DomainDnsStatus, hideRefreshButton: boolean = false): Children {\n\tconst checkReturn = domainStatus.getLoadedCustomDomainCheckGetOut()\n\tconst { requiredRecords, missingRecords, invalidRecords } = checkReturn\n\tconst checkResult = assertEnumValue(CustomDomainCheckResult, checkReturn.checkResult)\n\n\tif (checkResult === CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_OK) {\n\t\tconst validatedRecords = requiredRecords.map((record) => {\n\t\t\tconst displayableRecordValue = _getDisplayableRecordValue(record)\n\n\t\t\tconst helpInfo: string[] = []\n\t\t\tlet validatedRecord: DnsRecord | null = null\n\n\t\t\tfor (let missingRecord of findDnsRecordInList(record, missingRecords)) {\n\t\t\t\tvalidatedRecord = record\n\n\t\t\t\tif (record.type === DnsRecordType.DNS_RECORD_TYPE_TXT_DMARC) {\n\t\t\t\t\thelpInfo.push(`${DnsRecordValidation.BAD} ${lang.get(\"recommendedDNSValue_label\")}: ${displayableRecordValue}`)\n\t\t\t\t} else {\n\t\t\t\t\thelpInfo.push(`${DnsRecordValidation.BAD} ${lang.get(\"addDNSValue_label\")}: ${displayableRecordValue}`)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let invalidRecord of findDnsRecordInList(record, invalidRecords)) {\n\t\t\t\tvalidatedRecord = record\n\t\t\t\t// here we want to display the incorrect value!\n\t\t\t\thelpInfo.push(`${DnsRecordValidation.BAD} ${lang.get(\"removeDNSValue_label\")}: ${invalidRecord.value}`)\n\t\t\t}\n\n\t\t\tif (validatedRecord == null) {\n\t\t\t\tvalidatedRecord = record\n\t\t\t\thelpInfo.push(`${DnsRecordValidation.OK} ${lang.get(\"correctDNSValue_label\")}`)\n\t\t\t}\n\n\t\t\tvalidatedRecord.value = displayableRecordValue\n\t\t\treturn {\n\t\t\t\trecord: validatedRecord,\n\t\t\t\thelpInfo,\n\t\t\t}\n\t\t})\n\t\treturn [\n\t\t\tm(\".mt-m.mb-s\", lang.get(\"setDnsRecords_msg\")),\n\t\t\tcreateDnsRecordTableN(\n\t\t\t\tvalidatedRecords,\n\t\t\t\thideRefreshButton\n\t\t\t\t\t? null\n\t\t\t\t\t: {\n\t\t\t\t\t\t\ttitle: \"refresh_action\",\n\t\t\t\t\t\t\ticon: BootIcons.Progress,\n\t\t\t\t\t\t\tsize: ButtonSize.Compact,\n\t\t\t\t\t\t\tclick: () => _updateDnsStatus(domainStatus),\n\t\t\t\t\t  },\n\t\t\t),\n\t\t\tm(MoreInfoLink, { link: InfoLink.DomainInfo, class: \"mt-m\", isSmall: true }),\n\t\t]\n\t} else {\n\t\tconst errorMessageMap: Record<CustomDomainCheckResult, TranslationKey> = {\n\t\t\t[CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_OK]: \"emptyString_msg\",\n\t\t\t[CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_DNS_LOOKUP_FAILED]: \"customDomainErrorDnsLookupFailure_msg\",\n\t\t\t[CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_DOMAIN_NOT_FOUND]: \"customDomainErrorDomainNotFound_msg\",\n\t\t\t[CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_NAMESERVER_NOT_FOUND]: \"customDomainErrorNameserverNotFound_msg\",\n\t\t}\n\t\treturn lang.get(errorMessageMap[checkResult])\n\t}\n}\n\nfunction findDnsRecordInList(record: DnsRecord, recordList: Array<DnsRecord>): Array<DnsRecord> {\n\treturn recordList.filter((r) => r.type === record.type && r.subdomain === record.subdomain)\n}\n\nexport class VerifyDnsRecordsPageAttrs implements WizardPageAttrs<AddDomainData> {\n\tdata: AddDomainData\n\n\tconstructor(domainData: AddDomainData) {\n\t\tthis.data = domainData\n\t}\n\n\theaderTitle(): TranslationKey {\n\t\treturn \"domainSetup_title\"\n\t}\n\n\tnextAction(showErrorDialog: boolean): Promise<boolean> {\n\t\t// No need to do anything, as we are leaving the wizard\n\t\t// The gui component will display a confirmation dialog if DNS configuration is not ok.\n\t\t// So it is ok not to have this dialog when called from elsewhere.\n\t\treturn Promise.resolve(true)\n\t}\n\n\tisSkipAvailable(): boolean {\n\t\treturn false\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn true\n\t}\n}\n"]}