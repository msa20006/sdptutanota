{"version":3,"file":"MailListView.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/view/MailListView.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Children, Component, Vnode } from \"mithril\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\n\nimport { Keys, MailSetKind, MailState } from \"../../../common/api/common/TutanotaConstants\"\nimport type { Mail, MailFolder } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { size } from \"../../../common/gui/size\"\nimport { styles } from \"../../../common/gui/styles\"\nimport { Icon } from \"../../../common/gui/base/Icon\"\nimport { Icons } from \"../../../common/gui/base/icons/Icons\"\nimport type { ButtonAttrs } from \"../../../common/gui/base/Button.js\"\nimport { Button, ButtonColor, ButtonType } from \"../../../common/gui/base/Button.js\"\nimport { Dialog } from \"../../../common/gui/base/Dialog\"\nimport { assertNotNull, AsyncResult, downcast, neverNull, promiseMap } from \"@tutao/tutanota-utils\"\nimport { locator } from \"../../../common/api/main/CommonLocator\"\nimport { getElementId, getLetId, haveSameId } from \"../../../common/api/common/utils/EntityUtils\"\nimport { moveMails, promptAndDeleteMails } from \"./MailGuiUtils\"\nimport { MailRow } from \"./MailRow\"\nimport { makeTrackedProgressMonitor } from \"../../../common/api/common/utils/ProgressMonitor\"\nimport { generateMailFile, getMailExportMode } from \"../export/Exporter\"\nimport { deduplicateFilenames } from \"../../../common/api/common/utils/FileUtils\"\nimport { downloadMailBundle } from \"../export/Bundler\"\nimport { ListColumnWrapper } from \"../../../common/gui/ListColumnWrapper\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { FolderSystem } from \"../../../common/api/common/mail/FolderSystem.js\"\nimport { MailViewModel } from \"./MailViewModel.js\"\nimport { List, ListAttrs, ListSwipeDecision, MultiselectMode, RenderConfig, SwipeConfiguration } from \"../../../common/gui/base/List.js\"\nimport ColumnEmptyMessageBox from \"../../../common/gui/base/ColumnEmptyMessageBox.js\"\nimport { BootIcons } from \"../../../common/gui/base/icons/BootIcons.js\"\nimport { theme } from \"../../../common/gui/theme.js\"\nimport { VirtualRow } from \"../../../common/gui/base/ListUtils.js\"\nimport { isKeyPressed } from \"../../../common/misc/KeyManager.js\"\nimport { mailLocator } from \"../../mailLocator.js\"\nimport { assertSystemFolderOfType } from \"../model/MailUtils.js\"\nimport { canDoDragAndDropExport } from \"./MailViewerUtils.js\"\nimport { isOfTypeOrSubfolderOf } from \"../model/MailChecks.js\"\nimport { DropType } from \"../../../common/gui/base/GuiUtils\"\nimport { ListElementListModel } from \"../../../common/misc/ListElementListModel\"\nimport { generateExportFileName } from \"../export/emlUtils.js\"\n\nassertMainOrNode()\n\nexport interface MailListViewAttrs {\n\t// We would like to not get and hold to the whole MailView eventually\n\t// but for that we need to rewrite the List\n\tonClearFolder: () => unknown\n\tmailViewModel: MailViewModel\n\tonSingleSelection: (mail: Mail) => unknown\n\tonSingleInclusiveSelection: ListElementListModel<Mail>[\"onSingleInclusiveSelection\"]\n\tonRangeSelectionTowards: ListElementListModel<Mail>[\"selectRangeTowards\"]\n\tonSingleExclusiveSelection: ListElementListModel<Mail>[\"onSingleExclusiveSelection\"]\n}\n\nexport class MailListView implements Component<MailListViewAttrs> {\n\t// Mails that are currently being or have already been downloaded/bundled/saved\n\t// Map of (Mail._id ++ MailExportMode) -> Promise<Filepath>\n\t// TODO this currently grows bigger and bigger and bigger if the user goes on an exporting spree.\n\t//  maybe we should deal with this, or maybe this never becomes an issue?\n\texportedMails: Map<\n\t\tstring,\n\t\t{\n\t\t\tfileName: string\n\t\t\tresult: AsyncResult<any>\n\t\t}\n\t>\n\t// Used for modifying the cursor during drag and drop\n\t_listDom: HTMLElement | null\n\tshowingSpamOrTrash: boolean = false\n\tshowingDraft: boolean = false\n\tshowingArchive: boolean = false\n\tprivate attrs: MailListViewAttrs\n\n\tprivate get mailViewModel(): MailViewModel {\n\t\treturn this.attrs.mailViewModel\n\t}\n\n\tprivate readonly renderConfig: RenderConfig<Mail, MailRow> = {\n\t\titemHeight: size.list_row_height,\n\t\tmultiselectionAllowed: MultiselectMode.Enabled,\n\t\tcreateElement: (dom: HTMLElement) => {\n\t\t\tconst mailRow = new MailRow(\n\t\t\t\tthis.mailViewModel.getSelectedMailSetKind() === MailSetKind.LABEL,\n\t\t\t\t(mail) => this.mailViewModel.getLabelsForMail(mail),\n\t\t\t\t(entity) => this.attrs.onSingleExclusiveSelection(entity),\n\t\t\t)\n\t\t\tm.render(dom, mailRow.render())\n\t\t\treturn mailRow\n\t\t},\n\t\tswipe: locator.logins.isInternalUserLoggedIn()\n\t\t\t? ({\n\t\t\t\t\trenderLeftSpacer: () => this.renderLeftSpacer(),\n\t\t\t\t\trenderRightSpacer: () => this.renderRightSpacer(),\n\t\t\t\t\tswipeLeft: (listElement: Mail) => this.onSwipeLeft(listElement),\n\t\t\t\t\tswipeRight: (listElement: Mail) => this.onSwipeRight(listElement),\n\t\t\t  } satisfies SwipeConfiguration<Mail>)\n\t\t\t: null,\n\t\tdragStart: (event, row, selected) => this._newDragStart(event, row, selected),\n\t}\n\n\tconstructor({ attrs }: Vnode<MailListViewAttrs>) {\n\t\tthis.attrs = attrs\n\t\tthis.exportedMails = new Map()\n\t\tthis._listDom = null\n\t\tthis.mailViewModel.showingTrashOrSpamFolder().then((result) => {\n\t\t\tthis.showingSpamOrTrash = result\n\t\t\tm.redraw()\n\t\t})\n\t\tthis.mailViewModel.showingDraftsFolder().then((result) => {\n\t\t\tthis.showingDraft = result\n\t\t\tm.redraw()\n\t\t})\n\t\tthis.targetInbox().then((result) => {\n\t\t\tthis.showingArchive = result\n\t\t\tm.redraw()\n\t\t})\n\n\t\t// \"this\" is incorrectly bound if we don't do it this way\n\t\tthis.view = this.view.bind(this)\n\t}\n\n\tprivate getRecoverFolder(mail: Mail, folders: FolderSystem): MailFolder {\n\t\tif (mail.state === MailState.DRAFT) {\n\t\t\treturn assertSystemFolderOfType(folders, MailSetKind.DRAFT)\n\t\t} else {\n\t\t\treturn assertSystemFolderOfType(folders, MailSetKind.INBOX)\n\t\t}\n\t}\n\n\t// NOTE we do all of the electron drag handling directly inside MailListView, because we currently have no need to generalise\n\t// would strongly suggest with starting generalising this first if we ever need to support dragging more than just mails\n\t_newDragStart(event: DragEvent, row: Mail, selected: ReadonlySet<Mail>) {\n\t\tif (!row) return\n\t\tconst mailUnderCursor = row\n\n\t\tif (isExportDragEvent(event)) {\n\t\t\t// We have to remove the drag mod key class here because once the dragstart has begun\n\t\t\t// we won't receive the keyup event that would normally remove it\n\t\t\tthis._listDom?.classList.remove(\"drag-mod-key\")\n\t\t\t// We have to preventDefault or we get mysterious and inconsistent electron crashes at the call to startDrag in IPC\n\t\t\tevent.preventDefault()\n\t\t\t// if the mail being dragged is not included in the mails that are selected, then we only drag\n\t\t\t// the mail that is currently being dragged, to match the behaviour of regular in-app dragging and dropping\n\t\t\t// which seemingly behaves how it does just by default\n\t\t\t//const draggedMails = selected.find((mail) => haveSameId(mail, mailUnderCursor)) ? selected.slice() : [mailUnderCursor]\n\t\t\tconst draggedMails = selected.has(mailUnderCursor) ? [...selected] : [mailUnderCursor]\n\n\t\t\tthis._doExportDrag(draggedMails)\n\t\t} else if (styles.isDesktopLayout()) {\n\t\t\t// Desktop layout only because it doesn't make sense to drag mails to folders when the folder list and mail list aren't visible at the same time\n\t\t\tneverNull(event.dataTransfer).setData(DropType.Mail, getLetId(neverNull(mailUnderCursor))[1])\n\t\t} else {\n\t\t\tevent.preventDefault()\n\t\t}\n\t}\n\n\t// NOTE we do all of the electron drag handling directly inside MailListView, because we currently have no need to generalise\n\t// would strongly suggest with starting generalising this first if we ever need to support dragging more than just mails\n\t_dragStart(event: DragEvent, row: VirtualRow<Mail>, selected: ReadonlyArray<Mail>) {\n\t\tif (!row.entity) return\n\t\tconst mailUnderCursor = row.entity\n\n\t\tif (isExportDragEvent(event)) {\n\t\t\t// We have to remove the drag mod key class here because once the dragstart has begun\n\t\t\t// we won't receive the keyup event that would normally remove it\n\t\t\tthis._listDom?.classList.remove(\"drag-mod-key\")\n\t\t\t// We have to preventDefault or we get mysterious and inconsistent electron crashes at the call to startDrag in IPC\n\t\t\tevent.preventDefault()\n\t\t\t// if the mail being dragged is not included in the mails that are selected, then we only drag\n\t\t\t// the mail that is currently being dragged, to match the behaviour of regular in-app dragging and dropping\n\t\t\t// which seemingly behaves how it does just by default\n\t\t\tconst draggedMails = selected.some((mail) => haveSameId(mail, mailUnderCursor)) ? selected.slice() : [mailUnderCursor]\n\n\t\t\tthis._doExportDrag(draggedMails)\n\t\t} else if (styles.isDesktopLayout()) {\n\t\t\t// Desktop layout only because it doesn't make sense to drag mails to folders when the folder list and mail list aren't visible at the same time\n\t\t\tneverNull(event.dataTransfer).setData(DropType.Mail, getLetId(neverNull(mailUnderCursor))[1])\n\t\t} else {\n\t\t\tevent.preventDefault()\n\t\t}\n\t}\n\n\tasync _doExportDrag(draggedMails: Array<Mail>): Promise<void> {\n\t\tassertNotNull(document.body).style.cursor = \"progress\"\n\t\t// We listen to mouseup to detect if the user released the mouse before the download was complete\n\t\t// we can't use dragend because we broke the DragEvent chain by calling prevent default\n\t\tconst mouseupPromise = new Promise((resolve) => {\n\t\t\tdocument.addEventListener(\"mouseup\", resolve, {\n\t\t\t\tonce: true,\n\t\t\t})\n\t\t})\n\n\t\tconst filePathsPromise = this._prepareMailsForDrag(draggedMails)\n\n\t\t// If the download completes before the user releases their mouse, then we can call electron start drag and do the operation\n\t\t// otherwise we have to give some kind of feedback to the user that the drop was unsuccessful\n\t\tconst [didComplete, fileNames] = await Promise.race([filePathsPromise.then((filePaths) => [true, filePaths]), mouseupPromise.then(() => [false, []])])\n\n\t\tif (didComplete) {\n\t\t\tawait locator.fileApp.startNativeDrag(fileNames as string[])\n\t\t} else {\n\t\t\tawait locator.desktopSystemFacade.focusApplicationWindow()\n\t\t\tDialog.message(\"unsuccessfulDrop_msg\")\n\t\t}\n\n\t\tneverNull(document.body).style.cursor = \"default\"\n\t}\n\n\t/**\n\t * Given a mail, will prepare it by downloading, bundling, saving, then returns the filepath of the saved file.\n\t * @returns {Promise<R>|Promise<string>}\n\t * @private\n\t * @param mails\n\t */\n\tasync _prepareMailsForDrag(mails: Array<Mail>): Promise<Array<string>> {\n\t\tconst exportMode = await getMailExportMode()\n\t\t// 3 actions per mail + 1 to indicate that something is happening (if the downloads take a while)\n\t\tconst progressMonitor = makeTrackedProgressMonitor(locator.progressTracker, 3 * mails.length + 1)\n\t\tprogressMonitor.workDone(1)\n\n\t\tconst mapKey = (mail: Mail) => `${getLetId(mail).join(\"\")}${exportMode}`\n\n\t\tconst notDownloaded: Array<{ mail: Mail; fileName: string }> = []\n\t\tconst downloaded: Array<{ fileName: string; promise: Promise<Mail> }> = []\n\n\t\tconst handleNotDownloaded = (mail: Mail) => {\n\t\t\tnotDownloaded.push({\n\t\t\t\tmail,\n\t\t\t\tfileName: generateExportFileName(getElementId(mail), mail.subject, mail.receivedDate, exportMode),\n\t\t\t})\n\t\t}\n\n\t\tconst handleDownloaded = (fileName: string, promise: Promise<Mail>) => {\n\t\t\t// we don't have to do anything else with the downloaded ones\n\t\t\t// so finish this chunk of work\n\t\t\tprogressMonitor.workDone(3)\n\t\t\tdownloaded.push({\n\t\t\t\tfileName,\n\t\t\t\tpromise: promise,\n\t\t\t})\n\t\t}\n\n\t\t// Gather up files that have been downloaded\n\t\t// and all files that need to be downloaded, or were already downloaded but have disappeared\n\t\tfor (let mail of mails) {\n\t\t\tconst key = mapKey(mail)\n\t\t\tconst existing = this.exportedMails.get(key)\n\n\t\t\tif (!existing || existing.result.state().status === \"failure\") {\n\t\t\t\t// Something went wrong last time we tried to drag this file,\n\t\t\t\t// so try again (not confident that it will work this time, though)\n\t\t\t\thandleNotDownloaded(mail)\n\t\t\t} else {\n\t\t\t\tconst state = existing.result.state()\n\n\t\t\t\tswitch (state.status) {\n\t\t\t\t\t// Mail is still being prepared, already has a file path assigned to it\n\t\t\t\t\tcase \"pending\": {\n\t\t\t\t\t\thandleDownloaded(existing.fileName, state.promise)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tcase \"complete\": {\n\t\t\t\t\t\t// We have downloaded it, but we need to check if it still exists\n\t\t\t\t\t\tconst exists = await locator.fileApp.checkFileExistsInExportDir(existing.fileName)\n\n\t\t\t\t\t\tif (exists) {\n\t\t\t\t\t\t\thandleDownloaded(existing.fileName, Promise.resolve(mail))\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thandleNotDownloaded(mail)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst deduplicatedNames = deduplicateFilenames(\n\t\t\tnotDownloaded.map((f) => f.fileName),\n\t\t\tnew Set(downloaded.map((f) => f.fileName)),\n\t\t)\n\t\tconst [newFiles, existingFiles] = await Promise.all([\n\t\t\t// Download all the files that need downloading, wait for them, and then return the filename\n\t\t\tpromiseMap(notDownloaded, async ({ mail, fileName }) => {\n\t\t\t\tconst name = assertNotNull(deduplicatedNames[fileName].shift())\n\t\t\t\tconst key = mapKey(mail)\n\t\t\t\tconst downloadPromise = Promise.resolve().then(async () => {\n\t\t\t\t\tconst { htmlSanitizer } = await import(\"../../../common/misc/HtmlSanitizer\")\n\t\t\t\t\tconst bundle = await downloadMailBundle(\n\t\t\t\t\t\tmail,\n\t\t\t\t\t\tlocator.mailFacade,\n\t\t\t\t\t\tlocator.entityClient,\n\t\t\t\t\t\tlocator.fileController,\n\t\t\t\t\t\thtmlSanitizer,\n\t\t\t\t\t\tlocator.cryptoFacade,\n\t\t\t\t\t)\n\t\t\t\t\tprogressMonitor.workDone(1)\n\t\t\t\t\tconst file = await generateMailFile(bundle, name, exportMode)\n\t\t\t\t\tprogressMonitor.workDone(1)\n\t\t\t\t\tawait locator.fileApp.saveToExportDir(file)\n\t\t\t\t\tprogressMonitor.workDone(1)\n\t\t\t\t})\n\t\t\t\tthis.exportedMails.set(key, {\n\t\t\t\t\tfileName: name,\n\t\t\t\t\tresult: new AsyncResult(downloadPromise),\n\t\t\t\t})\n\t\t\t\tawait downloadPromise\n\t\t\t\treturn name\n\t\t\t}), // Wait for ones that already were downloading or have finished, and  then return their filenames too\n\t\t\tpromiseMap(downloaded, (result) => result.promise.then(() => result.fileName)),\n\t\t])\n\t\t// combine the list of newly downloaded and previously downloaded files\n\t\treturn newFiles.concat(existingFiles)\n\t}\n\n\tview(vnode: Vnode<MailListViewAttrs>): Children {\n\t\tthis.attrs = vnode.attrs\n\n\t\t// Save the folder before showing the dialog so that there's no chance that it will change\n\t\tconst folder = this.mailViewModel.getFolder()\n\t\tconst purgeButtonAttrs: ButtonAttrs = {\n\t\t\tlabel: \"clearFolder_action\",\n\t\t\ttype: ButtonType.Primary,\n\t\t\tcolors: ButtonColor.Nav,\n\t\t\tclick: async () => {\n\t\t\t\tvnode.attrs.onClearFolder()\n\t\t\t},\n\t\t}\n\n\t\t// listeners to indicate the when mod key is held, dragging will do something\n\t\tconst onKeyDown = (event: KeyboardEvent) => {\n\t\t\tif (isDragAndDropModifierHeld(event)) {\n\t\t\t\tthis._listDom?.classList.add(\"drag-mod-key\")\n\t\t\t}\n\t\t}\n\n\t\tconst onKeyUp = (event: KeyboardEvent) => {\n\t\t\t// The event doesn't have a\n\t\t\tthis._listDom?.classList.remove(\"drag-mod-key\")\n\t\t}\n\n\t\tconst listModel = vnode.attrs.mailViewModel.listModel!\n\t\treturn m(\n\t\t\t\".mail-list-wrapper\",\n\t\t\t{\n\t\t\t\toncreate: (vnode) => {\n\t\t\t\t\tthis._listDom = downcast(vnode.dom.firstChild)\n\n\t\t\t\t\tif (canDoDragAndDropExport()) {\n\t\t\t\t\t\tassertNotNull(document.body).addEventListener(\"keydown\", onKeyDown)\n\t\t\t\t\t\tassertNotNull(document.body).addEventListener(\"keyup\", onKeyUp)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonbeforeremove: (vnode) => {\n\t\t\t\t\tif (canDoDragAndDropExport()) {\n\t\t\t\t\t\tassertNotNull(document.body).removeEventListener(\"keydown\", onKeyDown)\n\t\t\t\t\t\tassertNotNull(document.body).removeEventListener(\"keyup\", onKeyUp)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\t// always render the wrapper so that the list is not re-created from scratch when\n\t\t\t// showingSpamOrTrash changes.\n\t\t\tm(\n\t\t\t\tListColumnWrapper,\n\t\t\t\t{\n\t\t\t\t\theaderContent: this.renderListHeader(purgeButtonAttrs),\n\t\t\t\t},\n\t\t\t\tlistModel.isEmptyAndDone()\n\t\t\t\t\t? m(ColumnEmptyMessageBox, {\n\t\t\t\t\t\t\ticon: BootIcons.Mail,\n\t\t\t\t\t\t\tmessage: \"noMails_msg\",\n\t\t\t\t\t\t\tcolor: theme.list_message_bg,\n\t\t\t\t\t  })\n\t\t\t\t\t: m(List, {\n\t\t\t\t\t\t\tstate: listModel.stateStream(),\n\t\t\t\t\t\t\trenderConfig: this.renderConfig,\n\t\t\t\t\t\t\tonLoadMore() {\n\t\t\t\t\t\t\t\tlistModel.loadMore()\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonRetryLoading() {\n\t\t\t\t\t\t\t\tlistModel.retryLoading()\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonSingleSelection: (item) => {\n\t\t\t\t\t\t\t\tvnode.attrs.onSingleSelection(item)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonSingleTogglingMultiselection: (item: Mail) => {\n\t\t\t\t\t\t\t\tvnode.attrs.onSingleInclusiveSelection(item, styles.isSingleColumnLayout())\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonRangeSelectionTowards: (item: Mail) => {\n\t\t\t\t\t\t\t\tvnode.attrs.onRangeSelectionTowards(item)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonStopLoading() {\n\t\t\t\t\t\t\t\tlistModel.stopLoading()\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  } satisfies ListAttrs<Mail, MailRow>),\n\t\t\t),\n\t\t)\n\t}\n\n\tprivate renderListHeader(purgeButtonAttrs: ButtonAttrs): Children {\n\t\treturn m(\".flex.col\", [\n\t\t\tthis.showingSpamOrTrash\n\t\t\t\t? [\n\t\t\t\t\t\tm(\".flex.flex-column.plr-l\", [\n\t\t\t\t\t\t\tm(\".small.flex-grow.pt\", lang.get(\"storageDeletion_msg\")),\n\t\t\t\t\t\t\tm(\".mr-negative-s.align-self-end\", m(Button, purgeButtonAttrs)),\n\t\t\t\t\t\t]),\n\t\t\t\t  ]\n\t\t\t\t: null,\n\t\t])\n\t}\n\n\tprivate async targetInbox(): Promise<boolean> {\n\t\tconst selectedFolder = this.mailViewModel.getFolder()\n\t\tif (selectedFolder) {\n\t\t\tconst mailDetails = await this.mailViewModel.getMailboxDetails()\n\t\t\tif (mailDetails.mailbox.folders) {\n\t\t\t\tconst folders = await mailLocator.mailModel.getMailboxFoldersForId(mailDetails.mailbox.folders._id)\n\t\t\t\treturn isOfTypeOrSubfolderOf(folders, selectedFolder, MailSetKind.ARCHIVE) || selectedFolder.folderType === MailSetKind.TRASH\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\tprivate async onSwipeLeft(listElement: Mail): Promise<ListSwipeDecision> {\n\t\tconst wereDeleted = await promptAndDeleteMails(mailLocator.mailModel, [listElement], () => this.mailViewModel.listModel?.selectNone())\n\t\treturn wereDeleted ? ListSwipeDecision.Commit : ListSwipeDecision.Cancel\n\t}\n\n\tprivate async onSwipeRight(listElement: Mail): Promise<ListSwipeDecision> {\n\t\tif (this.showingDraft) {\n\t\t\t// just cancel selection if in drafts\n\t\t\tthis.mailViewModel.listModel?.selectNone()\n\t\t\treturn ListSwipeDecision.Cancel\n\t\t} else {\n\t\t\tconst folders = await mailLocator.mailModel.getMailboxFoldersForMail(listElement)\n\t\t\tif (folders) {\n\t\t\t\t//Check if the user is in the trash/spam folder or if it's in Inbox or Archive\n\t\t\t\t//to determinate the target folder\n\t\t\t\tconst targetMailFolder = this.showingSpamOrTrash\n\t\t\t\t\t? this.getRecoverFolder(listElement, folders)\n\t\t\t\t\t: assertNotNull(folders.getSystemFolderByType(this.showingArchive ? MailSetKind.INBOX : MailSetKind.ARCHIVE))\n\t\t\t\tconst wereMoved = await moveMails({\n\t\t\t\t\tmailboxModel: locator.mailboxModel,\n\t\t\t\t\tmailModel: mailLocator.mailModel,\n\t\t\t\t\tmails: [listElement],\n\t\t\t\t\ttargetMailFolder,\n\t\t\t\t})\n\t\t\t\treturn wereMoved ? ListSwipeDecision.Commit : ListSwipeDecision.Cancel\n\t\t\t} else {\n\t\t\t\treturn ListSwipeDecision.Cancel\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderLeftSpacer(): Children {\n\t\treturn this.showingDraft\n\t\t\t? [\n\t\t\t\t\tm(Icon, {\n\t\t\t\t\t\ticon: Icons.Cancel,\n\t\t\t\t\t}),\n\t\t\t\t\tm(\".pl-s\", lang.get(\"cancel_action\")), // if this is the drafts folder, we can only cancel the selection as we have nowhere else to put the mail\n\t\t\t  ]\n\t\t\t: [\n\t\t\t\t\tm(Icon, {\n\t\t\t\t\t\ticon: Icons.Folder,\n\t\t\t\t\t}),\n\t\t\t\t\tm(\n\t\t\t\t\t\t\".pl-s\",\n\t\t\t\t\t\tthis.showingSpamOrTrash\n\t\t\t\t\t\t\t? lang.get(\"recover_label\") // show \"recover\" if this is the trash/spam folder\n\t\t\t\t\t\t\t: this.showingArchive // otherwise show \"inbox\" or \"archive\" depending on the folder\n\t\t\t\t\t\t\t? lang.get(\"received_action\")\n\t\t\t\t\t\t\t: lang.get(\"archive_label\"),\n\t\t\t\t\t),\n\t\t\t  ]\n\t}\n\n\tprivate renderRightSpacer(): Children {\n\t\treturn [\n\t\t\tm(Icon, {\n\t\t\t\ticon: Icons.Trash,\n\t\t\t}),\n\t\t\tm(\".pl-s\", lang.get(\"delete_action\")),\n\t\t]\n\t}\n}\n\nexport function isExportDragEvent(event: DragEvent): boolean {\n\treturn canDoDragAndDropExport() && isDragAndDropModifierHeld(event)\n}\n\nfunction isDragAndDropModifierHeld(event: DragEvent | KeyboardEvent): boolean {\n\treturn (\n\t\tevent.ctrlKey ||\n\t\tevent.altKey ||\n\t\t// @ts-ignore\n\t\t(event.key != null && isKeyPressed(event.key, Keys.CTRL, Keys.ALT))\n\t)\n}\n"]}