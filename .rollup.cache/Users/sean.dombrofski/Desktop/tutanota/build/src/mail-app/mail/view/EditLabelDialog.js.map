{"version":3,"file":"EditLabelDialog.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/view/EditLabelDialog.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,iCAAiC,CAAA;AACxD,OAAO,EAAE,SAAS,EAAkB,MAAM,oCAAoC,CAAA;AAC9E,OAAO,CAAC,MAAM,SAAS,CAAA;AAEvB,OAAO,EAAE,cAAc,EAAE,MAAM,6CAA6C,CAAA;AAC5E,OAAO,EAAE,WAAW,EAAE,uBAAuB,EAAE,MAAM,4CAA4C,CAAA;AAGjG,OAAO,EAAE,eAAe,EAAE,MAAM,sDAAsD,CAAA;AACtF,OAAO,EAAE,6BAA6B,EAAE,MAAM,0CAA0C,CAAA;AAExF,MAAM,oBAAoB,GAAG,cAAc,CAAA;AAE3C,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,OAAuB,EAAE,aAA4B,EAAE,KAAwB;IACxH,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAA;IAClC,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAA;IAEnD,KAAK,UAAU,WAAW,CAAC,MAAc;QACxC,MAAM,CAAC,KAAK,EAAE,CAAA;QACd,IAAI,CAAC;YACJ,IAAI,KAAK,EAAE,CAAC;gBACX,kBAAkB;gBAClB,MAAM,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAA;YACtD,CAAC;iBAAM,IAAI,OAAO,EAAE,CAAC;gBACpB,iBAAiB;gBACjB,MAAM,aAAa,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAA;YAC1D,CAAC;QACF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,KAAK,YAAY,uBAAuB,EAAE,CAAC;gBAC9C,IAAI,KAAK,CAAC,IAAI,KAAK,oBAAoB,EAAE,CAAC;oBACzC,6BAA6B,EAAE,CAAA;gBAChC,CAAC;qBAAM,CAAC;oBACP,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;gBACnC,CAAC;YACF,CAAC;iBAAM,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,YAAY,WAAW,CAAC,EAAE,CAAC;gBACrE,MAAM,KAAK,CAAA;YACZ,CAAC;QACF,CAAC;IACF,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC;QACvB,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,iBAAiB;QACrD,WAAW,EAAE,IAAI;QACjB,QAAQ,EAAE,CAAC,MAAc,EAAE,EAAE;YAC5B,WAAW,CAAC,MAAM,CAAC,CAAA;QACpB,CAAC;QACD,KAAK,EAAE,GAAG,EAAE,CACX,CAAC,CAAC,oBAAoB,EAAE;YACvB,CAAC,CAAC,SAAS,EAAE;gBACZ,KAAK,EAAE,YAAY;gBACnB,KAAK,EAAE,IAAI;gBACX,OAAO,EAAE,CAAC,OAAO,EAAE,EAAE;oBACpB,IAAI,GAAG,OAAO,CAAA;gBACf,CAAC;aACwB,CAAC;YAC3B,CAAC,CAAC,eAAe,EAAE;gBAClB,KAAK,EAAE,KAAK;gBACZ,QAAQ,EAAE,CAAC,QAAgB,EAAE,EAAE;oBAC9B,KAAK,GAAG,QAAQ,CAAA;gBACjB,CAAC;aACD,CAAC;SACF,CAAC;KACH,CAAC,CAAA;AACH,CAAC","sourcesContent":["import { Dialog } from \"../../../common/gui/base/Dialog\"\nimport { TextField, TextFieldAttrs } from \"../../../common/gui/base/TextField\"\nimport m from \"mithril\"\nimport type { MailBox, MailFolder } from \"../../../common/api/entities/tutanota/TypeRefs\"\nimport { isOfflineError } from \"../../../common/api/common/utils/ErrorUtils\"\nimport { LockedError, PreconditionFailedError } from \"../../../common/api/common/error/RestError\"\nimport { MailViewModel } from \"./MailViewModel\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport { ColorPickerView } from \"../../../common/gui/base/colorPicker/ColorPickerView\"\nimport { showNotAvailableForFreeDialog } from \"../../../common/misc/SubscriptionDialogs\"\n\nconst LIMIT_EXCEEDED_ERROR = \"limitReached\"\n\nexport async function showEditLabelDialog(mailbox: MailBox | null, mailViewModel: MailViewModel, label: MailFolder | null) {\n\tlet name = label ? label.name : \"\"\n\tlet color = label && label.color ? label.color : \"\"\n\n\tasync function onOkClicked(dialog: Dialog) {\n\t\tdialog.close()\n\t\ttry {\n\t\t\tif (label) {\n\t\t\t\t// editing a label\n\t\t\t\tawait mailViewModel.editLabel(label, { name, color })\n\t\t\t} else if (mailbox) {\n\t\t\t\t// adding a label\n\t\t\t\tawait mailViewModel.createLabel(mailbox, { name, color })\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof PreconditionFailedError) {\n\t\t\t\tif (error.data === LIMIT_EXCEEDED_ERROR) {\n\t\t\t\t\tshowNotAvailableForFreeDialog()\n\t\t\t\t} else {\n\t\t\t\t\tDialog.message(\"unknownError_msg\")\n\t\t\t\t}\n\t\t\t} else if (isOfflineError(error) || !(error instanceof LockedError)) {\n\t\t\t\tthrow error\n\t\t\t}\n\t\t}\n\t}\n\n\tDialog.showActionDialog({\n\t\ttitle: label ? \"editLabel_action\" : \"addLabel_action\",\n\t\tallowCancel: true,\n\t\tokAction: (dialog: Dialog) => {\n\t\t\tonOkClicked(dialog)\n\t\t},\n\t\tchild: () =>\n\t\t\tm(\".flex.col.gap-vpad\", [\n\t\t\t\tm(TextField, {\n\t\t\t\t\tlabel: \"name_label\",\n\t\t\t\t\tvalue: name,\n\t\t\t\t\toninput: (newName) => {\n\t\t\t\t\t\tname = newName\n\t\t\t\t\t},\n\t\t\t\t} satisfies TextFieldAttrs),\n\t\t\t\tm(ColorPickerView, {\n\t\t\t\t\tvalue: color,\n\t\t\t\t\tonselect: (newColor: string) => {\n\t\t\t\t\t\tcolor = newColor\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t]),\n\t})\n}\n"]}