{"version":3,"file":"ContactViewModel.js","sourceRoot":"","sources":["../../../../../src/mail-app/contacts/view/ContactViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContactModel } from \"../../../common/contactsFunctionality/ContactModel.js\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { EntityEventsListener, EventController } from \"../../../common/api/main/EventController.js\"\nimport { ListElementListModel } from \"../../../common/misc/ListElementListModel.js\"\nimport { Contact, ContactTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { compareContacts } from \"./ContactGuiUtils.js\"\nimport { ListState } from \"../../../common/gui/base/List.js\"\nimport { assertNotNull, lazyMemoized } from \"@tutao/tutanota-utils\"\nimport { getElementId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport Stream from \"mithril/stream\"\nimport { Router } from \"../../../common/gui/ScopedRouter.js\"\nimport { isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { ListAutoSelectBehavior } from \"../../../common/misc/DeviceConfig.js\"\n\n/** ViewModel for the overall contact view. */\nexport class ContactViewModel {\n\tcontactListId!: Id\n\t/** id of the contact we are trying to load based on the url */\n\tprivate targetContactId: Id | null = null\n\tsortByFirstName: boolean = true\n\tprivate listModelStateStream: Stream<unknown> | null = null\n\n\tconstructor(\n\t\tprivate readonly contactModel: ContactModel,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly router: Router,\n\t\tprivate readonly updateUi: () => unknown,\n\t) {}\n\n\treadonly listModel: ListElementListModel<Contact> = new ListElementListModel<Contact>({\n\t\tfetch: async () => {\n\t\t\tconst items = await this.entityClient.loadAll(ContactTypeRef, this.contactListId)\n\t\t\treturn { items, complete: true }\n\t\t},\n\t\tloadSingle: async (_listId: Id, elementId: Id) => {\n\t\t\tconst listId = await this.contactModel.getContactListId()\n\t\t\tif (listId == null) return null\n\t\t\treturn this.entityClient.load(ContactTypeRef, [listId, elementId])\n\t\t},\n\t\tsortCompare: (c1, c2) => compareContacts(c1, c2, this.sortByFirstName),\n\t\tautoSelectBehavior: () => ListAutoSelectBehavior.NONE,\n\t})\n\n\tasync init(contactListId?: Id) {\n\t\t// update url if the view was just opened\n\t\tif (contactListId == null) this.updateUrl()\n\t\tif (this.contactListId) return\n\n\t\tthis.contactListId = assertNotNull(await this.contactModel.getContactListId(), \"not available for external users\")\n\n\t\tthis.initOnce()\n\t\tawait this.listModel.loadInitial()\n\t}\n\n\tasync selectContact(contactId: Id) {\n\t\t// We are loading all contacts at once anyway so we are not worried about starting parallel loads for target\n\t\tawait this.loadAndSelect(contactId)\n\t}\n\n\tprivate readonly initOnce = lazyMemoized(() => {\n\t\tthis.eventController.addEntityListener(this.entityListener)\n\t\tthis.listModelStateStream = this.listModel.stateStream.map(() => {\n\t\t\tthis.updateUi()\n\t\t\tthis.updateUrl()\n\t\t})\n\t})\n\n\tprivate updateUrl() {\n\t\tconst contactId =\n\t\t\tthis.targetContactId ??\n\t\t\t(!this.listModel.state.inMultiselect && this.listModel.getSelectedAsArray().length === 1\n\t\t\t\t? getElementId(this.listModel.getSelectedAsArray()[0])\n\t\t\t\t: null)\n\t\tif (contactId) {\n\t\t\tthis.router.routeTo(`/contact/:listId/:contactId`, { listId: this.contactListId, contactId: contactId })\n\t\t} else {\n\t\t\tthis.router.routeTo(`/contact/:listId`, { listId: this.contactListId })\n\t\t}\n\t}\n\n\tprivate readonly entityListener: EntityEventsListener = async (updates) => {\n\t\tfor (const update of updates) {\n\t\t\tconst { instanceListId, instanceId, operation } = update\n\t\t\tif (isUpdateForTypeRef(ContactTypeRef, update) && instanceListId === this.contactListId) {\n\t\t\t\tawait this.listModel.entityEventReceived(instanceListId, instanceId, operation)\n\t\t\t}\n\t\t}\n\t}\n\n\tasync loadAndSelect(contactId: Id) {\n\t\tconst listId = this.contactListId\n\t\tthis.targetContactId = contactId\n\n\t\tawait this.listModel.loadAndSelect(contactId, () => this.contactListId !== listId && this.targetContactId === contactId)\n\t\t// if we reached the goal and the target wasn't swapped in between\n\t\tif (this.targetContactId === contactId) {\n\t\t\tthis.targetContactId = null\n\t\t}\n\t}\n\n\tsetSortByFirstName(sorting: boolean) {\n\t\tthis.sortByFirstName = sorting\n\t\tthis.listModel.sort()\n\t}\n\n\tlistState(): ListState<Contact> {\n\t\treturn this.listModel.state\n\t}\n\n\tdispose() {\n\t\tthis.eventController.removeEntityListener(this.entityListener)\n\t\tthis.listModelStateStream?.end(true)\n\t\tthis.listModelStateStream = null\n\t}\n}\n"]}