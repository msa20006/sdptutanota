{"version":3,"file":"InboxRuleHandler.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/model/InboxRuleHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import type { InboxRule, Mail, MailFolder, MoveMailData } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { createMoveMailData } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { InboxRuleType, MailSetKind, MAX_NBR_MOVE_DELETE_MAIL_SERVICE } from \"../../../common/api/common/TutanotaConstants\"\nimport { isDomainName, isRegularExpression } from \"../../../common/misc/FormatValidator\"\nimport { assertNotNull, asyncFind, debounce, ofClass, promiseMap, splitInChunks } from \"@tutao/tutanota-utils\"\nimport { lang } from \"../../../common/misc/LanguageViewModel\"\nimport type { MailboxDetail } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { LockedError, PreconditionFailedError } from \"../../../common/api/common/error/RestError\"\nimport type { SelectorItemList } from \"../../../common/gui/base/DropDownSelector.js\"\nimport { elementIdPart, isSameId } from \"../../../common/api/common/utils/EntityUtils\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { MailFacade } from \"../../../common/api/worker/facades/lazy/MailFacade.js\"\nimport { LoginController } from \"../../../common/api/main/LoginController.js\"\nimport { throttle } from \"@tutao/tutanota-utils/dist/Utils.js\"\nimport { mailLocator } from \"../../mailLocator.js\"\nimport { getMailHeaders } from \"./MailUtils.js\"\n\nassertMainOrNode()\nconst moveMailDataPerFolder: MoveMailData[] = []\nconst DEBOUNCE_FIRST_MOVE_MAIL_REQUEST_MS = 200\nlet applyingRules = false // used to avoid concurrent application of rules (-> requests to locked service)\n\nasync function sendMoveMailRequest(mailFacade: MailFacade): Promise<void> {\n\tif (moveMailDataPerFolder.length) {\n\t\tconst moveToTargetFolder = assertNotNull(moveMailDataPerFolder.shift())\n\t\tconst mailChunks = splitInChunks(MAX_NBR_MOVE_DELETE_MAIL_SERVICE, moveToTargetFolder.mails)\n\t\tawait promiseMap(mailChunks, (mailChunk) => {\n\t\t\tmoveToTargetFolder.mails = mailChunk\n\t\t\treturn mailFacade.moveMails(mailChunk, moveToTargetFolder.sourceFolder, moveToTargetFolder.targetFolder)\n\t\t})\n\t\t\t.catch(\n\t\t\t\tofClass(LockedError, (e) => {\n\t\t\t\t\t//LockedError should no longer be thrown!?!\n\t\t\t\t\tconsole.log(\"moving mail failed\", e, moveToTargetFolder)\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.catch(\n\t\t\t\tofClass(PreconditionFailedError, (e) => {\n\t\t\t\t\t// move mail operation may have been locked by other process\n\t\t\t\t\tconsole.log(\"moving mail failed\", e, moveToTargetFolder)\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.finally(() => {\n\t\t\t\treturn sendMoveMailRequest(mailFacade)\n\t\t\t})\n\t} //We are done and unlock for future requests\n}\n\n// We throttle the moveMail requests to a rate of 200ms\n// Each target folder requires one request\nconst applyMatchingRules = throttle(DEBOUNCE_FIRST_MOVE_MAIL_REQUEST_MS, (mailFacade: MailFacade) => {\n\tif (applyingRules) return\n\t// We lock to avoid concurrent requests\n\tapplyingRules = true\n\tsendMoveMailRequest(mailFacade).finally(() => {\n\t\tapplyingRules = false\n\t})\n})\n\nexport function getInboxRuleTypeNameMapping(): SelectorItemList<string> {\n\treturn [\n\t\t{\n\t\t\tvalue: InboxRuleType.FROM_EQUALS,\n\t\t\tname: lang.get(\"inboxRuleSenderEquals_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: InboxRuleType.RECIPIENT_TO_EQUALS,\n\t\t\tname: lang.get(\"inboxRuleToRecipientEquals_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: InboxRuleType.RECIPIENT_CC_EQUALS,\n\t\t\tname: lang.get(\"inboxRuleCCRecipientEquals_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: InboxRuleType.RECIPIENT_BCC_EQUALS,\n\t\t\tname: lang.get(\"inboxRuleBCCRecipientEquals_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: InboxRuleType.SUBJECT_CONTAINS,\n\t\t\tname: lang.get(\"inboxRuleSubjectContains_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: InboxRuleType.MAIL_HEADER_CONTAINS,\n\t\t\tname: lang.get(\"inboxRuleMailHeaderContains_action\"),\n\t\t},\n\t]\n}\n\nexport function getInboxRuleTypeName(type: string): string {\n\tlet typeNameMapping = getInboxRuleTypeNameMapping().find((t) => t.value === type)\n\treturn typeNameMapping != null ? typeNameMapping.name : \"\"\n}\n\nexport class InboxRuleHandler {\n\tconstructor(private readonly mailFacade: MailFacade, private readonly logins: LoginController) {}\n\n\t/**\n\t * Checks the mail for an existing inbox rule and moves the mail to the target folder of the rule.\n\t * @returns true if a rule matches otherwise false\n\t */\n\tasync findAndApplyMatchingRule(mailboxDetail: MailboxDetail, mail: Mail, applyRulesOnServer: boolean): Promise<{ folder: MailFolder; mail: Mail } | null> {\n\t\tif (\n\t\t\tmail._errors ||\n\t\t\t!mail.unread ||\n\t\t\t!(await isInboxFolder(mailboxDetail, mail)) ||\n\t\t\t!this.logins.getUserController().isPaidAccount() ||\n\t\t\tmailboxDetail.mailbox.folders == null\n\t\t) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst inboxRule = await _findMatchingRule(this.mailFacade, mail, this.logins.getUserController().props.inboxRules)\n\t\tif (inboxRule) {\n\t\t\tconst folders = await mailLocator.mailModel.getMailboxFoldersForId(mailboxDetail.mailbox.folders._id)\n\t\t\tconst inboxFolder = assertNotNull(folders.getSystemFolderByType(MailSetKind.INBOX))\n\t\t\tconst targetFolder = folders.getFolderById(elementIdPart(inboxRule.targetFolder))\n\n\t\t\tif (targetFolder && targetFolder.folderType !== MailSetKind.INBOX) {\n\t\t\t\tif (applyRulesOnServer) {\n\t\t\t\t\tlet moveMailData = moveMailDataPerFolder.find((folderMoveMailData) => isSameId(folderMoveMailData.targetFolder, inboxRule.targetFolder))\n\n\t\t\t\t\tif (moveMailData) {\n\t\t\t\t\t\tmoveMailData.mails.push(mail._id)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmoveMailData = createMoveMailData({\n\t\t\t\t\t\t\tsourceFolder: inboxFolder._id,\n\t\t\t\t\t\t\ttargetFolder: inboxRule.targetFolder,\n\t\t\t\t\t\t\tmails: [mail._id],\n\t\t\t\t\t\t})\n\t\t\t\t\t\tmoveMailDataPerFolder.push(moveMailData)\n\t\t\t\t\t}\n\n\t\t\t\t\tapplyMatchingRules(this.mailFacade)\n\t\t\t\t}\n\n\t\t\t\treturn { folder: targetFolder, mail }\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n}\n\n/**\n * Finds the first matching inbox rule for the mail and returns it.\n * export only for testing\n */\nexport async function _findMatchingRule(mailFacade: MailFacade, mail: Mail, rules: InboxRule[]): Promise<InboxRule | null> {\n\treturn asyncFind(rules, (rule) => checkInboxRule(mailFacade, mail, rule)).then((v) => v ?? null)\n}\n\nasync function checkInboxRule(mailFacade: MailFacade, mail: Mail, inboxRule: InboxRule): Promise<boolean> {\n\tconst ruleType = inboxRule.type\n\ttry {\n\t\tif (ruleType === InboxRuleType.FROM_EQUALS) {\n\t\t\tlet mailAddresses = [mail.sender.address]\n\n\t\t\tif (mail.differentEnvelopeSender) {\n\t\t\t\tmailAddresses.push(mail.differentEnvelopeSender)\n\t\t\t}\n\n\t\t\treturn _checkEmailAddresses(mailAddresses, inboxRule)\n\t\t} else if (ruleType === InboxRuleType.RECIPIENT_TO_EQUALS) {\n\t\t\tconst toRecipients = (await mailFacade.loadMailDetailsBlob(mail)).recipients.toRecipients\n\t\t\treturn _checkEmailAddresses(\n\t\t\t\ttoRecipients.map((m) => m.address),\n\t\t\t\tinboxRule,\n\t\t\t)\n\t\t} else if (ruleType === InboxRuleType.RECIPIENT_CC_EQUALS) {\n\t\t\tconst ccRecipients = (await mailFacade.loadMailDetailsBlob(mail)).recipients.ccRecipients\n\t\t\treturn _checkEmailAddresses(\n\t\t\t\tccRecipients.map((m) => m.address),\n\t\t\t\tinboxRule,\n\t\t\t)\n\t\t} else if (ruleType === InboxRuleType.RECIPIENT_BCC_EQUALS) {\n\t\t\tconst bccRecipients = (await mailFacade.loadMailDetailsBlob(mail)).recipients.bccRecipients\n\t\t\treturn _checkEmailAddresses(\n\t\t\t\tbccRecipients.map((m) => m.address),\n\t\t\t\tinboxRule,\n\t\t\t)\n\t\t} else if (ruleType === InboxRuleType.SUBJECT_CONTAINS) {\n\t\t\treturn _checkContainsRule(mail.subject, inboxRule)\n\t\t} else if (ruleType === InboxRuleType.MAIL_HEADER_CONTAINS) {\n\t\t\tconst details = await mailFacade.loadMailDetailsBlob(mail)\n\t\t\tif (details.headers != null) {\n\t\t\t\treturn _checkContainsRule(getMailHeaders(details.headers), inboxRule)\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\"Unknown rule type: \", inboxRule.type)\n\t\t\treturn false\n\t\t}\n\t} catch (e) {\n\t\tconsole.error(\"Error processing inbox rule:\", e.message)\n\t\treturn false\n\t}\n}\n\nfunction _checkContainsRule(value: string, inboxRule: InboxRule): boolean {\n\treturn (isRegularExpression(inboxRule.value) && _matchesRegularExpression(value, inboxRule)) || value.includes(inboxRule.value)\n}\n\n/** export for test. */\nexport function _matchesRegularExpression(value: string, inboxRule: InboxRule): boolean {\n\tif (isRegularExpression(inboxRule.value)) {\n\t\tlet flags = inboxRule.value.replace(/.*\\/([gimsuy]*)$/, \"$1\")\n\t\tlet pattern = inboxRule.value.replace(new RegExp(\"^/(.*?)/\" + flags + \"$\"), \"$1\")\n\t\tlet regExp = new RegExp(pattern, flags)\n\t\treturn regExp.test(value)\n\t}\n\n\treturn false\n}\n\nfunction _checkEmailAddresses(mailAddresses: string[], inboxRule: InboxRule): boolean {\n\tconst mailAddress = mailAddresses.find((mailAddress) => {\n\t\tlet cleanMailAddress = mailAddress.toLowerCase().trim()\n\n\t\tif (isRegularExpression(inboxRule.value)) {\n\t\t\treturn _matchesRegularExpression(cleanMailAddress, inboxRule)\n\t\t} else if (isDomainName(inboxRule.value)) {\n\t\t\tlet domain = cleanMailAddress.split(\"@\")[1]\n\t\t\treturn domain === inboxRule.value\n\t\t} else {\n\t\t\treturn cleanMailAddress === inboxRule.value\n\t\t}\n\t})\n\treturn mailAddress != null\n}\n\nexport async function isInboxFolder(mailboxDetail: MailboxDetail, mail: Mail): Promise<boolean> {\n\tconst folders = await mailLocator.mailModel.getMailboxFoldersForId(assertNotNull(mailboxDetail.mailbox.folders)._id)\n\tconst mailFolder = folders.getFolderByMail(mail)\n\treturn mailFolder?.folderType === MailSetKind.INBOX\n}\n"]}