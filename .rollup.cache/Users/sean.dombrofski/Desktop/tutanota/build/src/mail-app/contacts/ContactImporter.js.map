{"version":3,"file":"ContactImporter.js","sourceRoot":"","sources":["../../../../src/mail-app/contacts/ContactImporter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dialog, DialogType } from \"../../common/gui/base/Dialog.js\"\nimport { assertNotNull, getFirstOrThrow, ofClass, promiseMap } from \"@tutao/tutanota-utils\"\nimport { locator } from \"../../common/api/main/CommonLocator.js\"\nimport { vCardFileToVCards, vCardListToContacts } from \"./VCardImporter.js\"\nimport { ImportError } from \"../../common/api/common/error/ImportError.js\"\nimport { lang, MaybeTranslation } from \"../../common/misc/LanguageViewModel.js\"\nimport { showProgressDialog } from \"../../common/gui/dialogs/ProgressDialog.js\"\nimport { ContactFacade } from \"../../common/api/worker/facades/lazy/ContactFacade.js\"\nimport {\n\tContact,\n\tcreateContact,\n\tcreateContactAddress,\n\tcreateContactCustomDate,\n\tcreateContactMailAddress,\n\tcreateContactMessengerHandle,\n\tcreateContactPhoneNumber,\n\tcreateContactRelationship,\n\tcreateContactWebsite,\n} from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport m from \"mithril\"\nimport { List, ListAttrs, ListLoadingState, MultiselectMode, RenderConfig } from \"../../common/gui/base/List.js\"\nimport { size } from \"../../common/gui/size.js\"\nimport { UserError } from \"../../common/api/main/UserError.js\"\nimport { DialogHeaderBar, DialogHeaderBarAttrs } from \"../../common/gui/base/DialogHeaderBar.js\"\nimport { ButtonType } from \"../../common/gui/base/Button.js\"\nimport { ImportNativeContactBooksDialog } from \"./view/ImportNativeContactBooksDialog.js\"\nimport { StructuredContact } from \"../../common/native/common/generatedipc/StructuredContact.js\"\nimport { isoDateToBirthday } from \"../../common/api/common/utils/BirthdayUtils.js\"\nimport { ContactBook } from \"../../common/native/common/generatedipc/ContactBook.js\"\nimport { PermissionType } from \"../../common/native/common/generatedipc/PermissionType.js\"\nimport { SystemPermissionHandler } from \"../../common/native/main/SystemPermissionHandler.js\"\nimport { KindaContactRow } from \"./view/ContactListView.js\"\nimport { SelectAllCheckbox } from \"../../common/gui/SelectAllCheckbox.js\"\nimport { mailLocator } from \"../mailLocator.js\"\nimport { FileReference } from \"../../common/api/common/utils/FileUtils.js\"\nimport { AttachmentType, getAttachmentType } from \"../../common/gui/AttachmentBubble.js\"\nimport { NativeFileApp } from \"../../common/native/common/FileApp.js\"\nimport { MobileContactsFacade } from \"../../common/native/common/generatedipc/MobileContactsFacade.js\"\nimport { NativeContactsSyncManager } from \"./model/NativeContactsSyncManager\"\nimport { isIOSApp } from \"../../common/api/common/Env\"\n\nexport class ContactImporter {\n\tconstructor(\n\t\tprivate readonly contactFacade: ContactFacade,\n\t\tprivate readonly systemPermissionHandler: SystemPermissionHandler,\n\t\tprivate readonly mobileContactsFacade: MobileContactsFacade | null,\n\t\tprivate readonly nativeContactSyncManager: NativeContactsSyncManager | null,\n\t) {}\n\n\tasync importContactsFromFile(vCardData: string | string[], contactListId: string) {\n\t\tconst vCardList = Array.isArray(vCardData) ? ContactImporter.combineVCardData(vCardData) : vCardFileToVCards(vCardData)\n\n\t\tif (vCardList == null) throw new UserError(\"importVCardError_msg\")\n\n\t\tconst contactMembership = getFirstOrThrow(locator.logins.getUserController().getContactGroupMemberships())\n\t\tconst contacts = vCardListToContacts(vCardList, contactMembership.group)\n\n\t\treturn showContactImportDialog(\n\t\t\tcontacts,\n\t\t\t(dialog, selectedContacts) => {\n\t\t\t\tdialog.close()\n\t\t\t\tthis.importContacts(selectedContacts, contactListId)\n\t\t\t},\n\t\t\t\"importVCard_action\",\n\t\t)\n\t}\n\n\tprivate static combineVCardData(vCardData: string[]): string[] | null {\n\t\tconst combinedVCardData = vCardData.flatMap((itemData) => vCardFileToVCards(itemData))\n\t\treturn combinedVCardData.filter((vCard) => vCard != null) as string[]\n\t}\n\n\tasync importContacts(contacts: ReadonlyArray<Contact>, contactListId: string) {\n\t\tconst importPromise = this.contactFacade\n\t\t\t.importContactList(contacts, contactListId)\n\t\t\t.catch(\n\t\t\t\tofClass(ImportError, (e) =>\n\t\t\t\t\tDialog.message(\n\t\t\t\t\t\tlang.makeTranslation(\n\t\t\t\t\t\t\t\"confirm_msg\",\n\t\t\t\t\t\t\tlang.get(\"importContactsError_msg\", {\n\t\t\t\t\t\t\t\t\"{amount}\": e.numFailed + \"\",\n\t\t\t\t\t\t\t\t\"{total}\": contacts.length + \"\",\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t)\n\t\t\t.catch(() => Dialog.message(\"unknownError_msg\"))\n\t\tawait showProgressDialog(\"pleaseWait_msg\", importPromise)\n\t\tawait Dialog.message(\n\t\t\tlang.makeTranslation(\n\t\t\t\t\"confirm_msg\",\n\t\t\t\tlang.get(\"importVCardSuccess_msg\", {\n\t\t\t\t\t\"{1}\": contacts.length,\n\t\t\t\t}),\n\t\t\t),\n\t\t)\n\t}\n\n\t// will check for permission and ask for it if it is not granted\n\tasync importContactsFromDeviceSafely() {\n\t\t// check for permission\n\t\tconst isContactPermissionGranted = await this.systemPermissionHandler.requestPermission(PermissionType.Contacts, \"grantContactPermissionAction\")\n\n\t\tif (isContactPermissionGranted) {\n\t\t\tawait this.importContactsFromDevice()\n\t\t}\n\t}\n\n\tprivate async importContactsFromDevice() {\n\t\t// these will only ever be null if !isApp()\n\t\tconst mobileContactsFacade = assertNotNull(this.mobileContactsFacade)\n\n\t\tconst books = await this.selectContactBooks(mobileContactsFacade)\n\t\tif (books == null) {\n\t\t\treturn\n\t\t}\n\n\t\tconst contactListId = await locator.contactModel.getContactListId()\n\t\tconst contactGroupId = await locator.contactModel.getContactGroupId()\n\n\t\tconst allImportableStructuredContacts: StructuredContact[] = (\n\t\t\tawait promiseMap(\n\t\t\t\tbooks,\n\t\t\t\tasync (book) => await mobileContactsFacade.getContactsInContactBook(book.id, locator.logins.getUserController().loginUsername),\n\t\t\t)\n\t\t).flat()\n\t\tconst allImportableContacts = new Map(\n\t\t\tallImportableStructuredContacts.map((structuredContact) => [\n\t\t\t\tthis.contactFromStructuredContact(contactGroupId, structuredContact),\n\t\t\t\tstructuredContact,\n\t\t\t]),\n\t\t)\n\n\t\tshowContactImportDialog(\n\t\t\t[...allImportableContacts.keys()],\n\t\t\tasync (dialog, selectedContacts) => {\n\t\t\t\tdialog.close()\n\t\t\t\tawait this.onContactImportConfirmed(contactListId, selectedContacts, allImportableContacts)\n\t\t\t},\n\t\t\t\"importContacts_label\",\n\t\t)\n\t}\n\n\tprivate async onContactImportConfirmed(contactListId: string | null, selectedContacts: Contact[], allImportableContacts: Map<Contact, StructuredContact>) {\n\t\tconst importer = await mailLocator.contactImporter()\n\t\tconst mobileContactsFacade = assertNotNull(this.mobileContactsFacade)\n\t\tconst nativeContactSyncManager = assertNotNull(this.nativeContactSyncManager)\n\n\t\tconst selectedStructuredContacts: StructuredContact[] = selectedContacts.map((selectedContact) =>\n\t\t\tassertNotNull(allImportableContacts.get(selectedContact)),\n\t\t)\n\n\t\tawait importer.importContacts(selectedContacts, assertNotNull(contactListId))\n\t\tconst imported = nativeContactSyncManager.isEnabled() && (await nativeContactSyncManager.syncContacts())\n\n\t\t// On iOS, we want to give the option to remove the contacts locally, but we obviously only want to do\n\t\t// this if syncing is successful, assuming syncing is enabled.\n\t\t//\n\t\t// Do nothing further if not on iOS, or if syncing is disabled or failed.\n\t\tif (imported && isIOSApp()) {\n\t\t\tconst contactsWeJustImported = selectedStructuredContacts.map((contact) => assertNotNull(contact.rawId))\n\t\t\tconst remove = await Dialog.confirm(\"importContactRemoveImportedContactsConfirm_msg\")\n\t\t\tif (remove) {\n\t\t\t\tawait showProgressDialog(\"progressDeleting_msg\", mobileContactsFacade.deleteLocalContacts(contactsWeJustImported))\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async selectContactBooks(mobileContactsFacade: MobileContactsFacade): Promise<readonly ContactBook[] | null> {\n\t\tconst contactBooks = await showProgressDialog(\"pleaseWait_msg\", mobileContactsFacade.getContactBooks())\n\t\tif (contactBooks.length === 0) {\n\t\t\treturn null\n\t\t} else if (contactBooks.length === 1) {\n\t\t\treturn contactBooks\n\t\t} else {\n\t\t\tconst importDialog = new ImportNativeContactBooksDialog(contactBooks)\n\t\t\tconst selectedBooks = await importDialog.show()\n\t\t\tif (selectedBooks == null || selectedBooks.length === 0) return null\n\t\t\treturn selectedBooks\n\t\t}\n\t}\n\n\tprivate contactFromStructuredContact(ownerGroupId: Id, contact: StructuredContact): Contact {\n\t\treturn createContact({\n\t\t\t_ownerGroup: ownerGroupId,\n\t\t\tnickname: contact.nickname,\n\t\t\tfirstName: contact.firstName,\n\t\t\tlastName: contact.lastName,\n\t\t\tcompany: contact.company,\n\t\t\taddresses: contact.addresses.map((address) =>\n\t\t\t\tcreateContactAddress({\n\t\t\t\t\ttype: address.type,\n\t\t\t\t\taddress: address.address,\n\t\t\t\t\tcustomTypeName: address.customTypeName,\n\t\t\t\t}),\n\t\t\t),\n\t\t\tmailAddresses: contact.mailAddresses.map((address) =>\n\t\t\t\tcreateContactMailAddress({\n\t\t\t\t\ttype: address.type,\n\t\t\t\t\taddress: address.address,\n\t\t\t\t\tcustomTypeName: address.customTypeName,\n\t\t\t\t}),\n\t\t\t),\n\t\t\tphoneNumbers: contact.phoneNumbers.map((number) =>\n\t\t\t\tcreateContactPhoneNumber({\n\t\t\t\t\ttype: number.type,\n\t\t\t\t\tnumber: number.number,\n\t\t\t\t\tcustomTypeName: number.customTypeName,\n\t\t\t\t}),\n\t\t\t),\n\t\t\toldBirthdayAggregate: null,\n\t\t\toldBirthdayDate: null,\n\t\t\tphoto: null,\n\t\t\tpresharedPassword: null,\n\t\t\tsocialIds: [],\n\t\t\tbirthdayIso: this.validateBirthdayOfContact(contact),\n\t\t\tpronouns: [],\n\t\t\tcustomDate: contact.customDate.map((date) => createContactCustomDate(date)),\n\t\t\tdepartment: contact.department,\n\t\t\tmessengerHandles: contact.messengerHandles.map((handle) => createContactMessengerHandle(handle)),\n\t\t\tmiddleName: contact.middleName,\n\t\t\tnameSuffix: contact.nameSuffix,\n\t\t\tphoneticFirst: contact.phoneticFirst,\n\t\t\tphoneticLast: contact.phoneticLast,\n\t\t\tphoneticMiddle: contact.phoneticMiddle,\n\t\t\trelationships: contact.relationships.map((relation) => createContactRelationship(relation)),\n\t\t\twebsites: contact.websites.map((website) => createContactWebsite(website)),\n\t\t\tcomment: contact.notes,\n\t\t\ttitle: contact.title ?? \"\",\n\t\t\trole: contact.role,\n\t\t})\n\t}\n\n\tprivate validateBirthdayOfContact(contact: StructuredContact) {\n\t\tif (contact.birthday != null) {\n\t\t\ttry {\n\t\t\t\tisoDateToBirthday(contact.birthday)\n\t\t\t\treturn contact.birthday\n\t\t\t} catch (_) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n}\n\n/**\n * Show a dialog with a preview of a given list of contacts\n * @param contacts The contact list to be previewed\n * @param okAction The action to be executed when the user press the import button with at least one contact selected\n */\nexport function showContactImportDialog(contacts: Contact[], okAction: (dialog: Dialog, selectedContacts: Contact[]) => unknown, title: MaybeTranslation) {\n\tconst viewModel: ContactImportDialogViewModel = new ContactImportDialogViewModel()\n\tviewModel.selectContacts(contacts)\n\tconst renderConfig: RenderConfig<Contact, KindaContactRow> = {\n\t\titemHeight: size.list_row_height,\n\t\tmultiselectionAllowed: MultiselectMode.Enabled,\n\t\tswipe: null,\n\t\tcreateElement: (dom) => {\n\t\t\treturn new KindaContactRow(\n\t\t\t\tdom,\n\t\t\t\t(selectedContact: Contact) => viewModel.selectSingleContact(selectedContact),\n\t\t\t\t() => true,\n\t\t\t)\n\t\t},\n\t}\n\n\tconst dialog = new Dialog(DialogType.EditSmall, {\n\t\tview: () => [\n\t\t\t/** fixed-height header with a title, left and right buttons that's fixed to the top of the dialog's area */\n\t\t\tm(DialogHeaderBar, {\n\t\t\t\tleft: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\tdialog.close()\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tmiddle: title,\n\t\t\t\tright: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t\t\tlabel: \"import_action\",\n\t\t\t\t\t\tclick: () => {\n\t\t\t\t\t\t\tconst selectedContacts = [...viewModel.getSelectedContacts()]\n\t\t\t\t\t\t\tif (selectedContacts.length <= 0) {\n\t\t\t\t\t\t\t\tDialog.message(\"noContact_msg\")\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tokAction(dialog, selectedContacts)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t} satisfies DialogHeaderBarAttrs),\n\t\t\t/** variable-size child container that may be scrollable. */\n\t\t\tm(\".dialog-max-height.plr-s.pb.text-break.nav-bg\", [\n\t\t\t\tm(\n\t\t\t\t\t\".list-bg.border-radius.mt-s.ml-s.mr-s\",\n\t\t\t\t\tm(SelectAllCheckbox, {\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\"padding-left\": \"0\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tselected: viewModel.isAllContactsSelected(contacts),\n\t\t\t\t\t\tselectNone: () => viewModel.clearSelection(),\n\t\t\t\t\t\tselectAll: () => viewModel.selectContacts(contacts),\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t\tm(\n\t\t\t\t\t\".flex.col.rel.mt-s\",\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\theight: \"80vh\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tm(List, {\n\t\t\t\t\t\trenderConfig,\n\t\t\t\t\t\tstate: {\n\t\t\t\t\t\t\titems: contacts,\n\t\t\t\t\t\t\tloadingStatus: ListLoadingState.Done,\n\t\t\t\t\t\t\tloadingAll: false,\n\t\t\t\t\t\t\tselectedItems: viewModel.getSelectedContacts(),\n\t\t\t\t\t\t\tinMultiselect: true,\n\t\t\t\t\t\t\tactiveIndex: null,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonLoadMore() {},\n\t\t\t\t\t\tonRangeSelectionTowards(item: Contact) {},\n\t\t\t\t\t\tonRetryLoading() {},\n\t\t\t\t\t\tonSingleSelection(item: Contact) {\n\t\t\t\t\t\t\tviewModel.selectSingleContact(item)\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonSingleTogglingMultiselection(item: Contact) {},\n\t\t\t\t\t\tonStopLoading() {},\n\t\t\t\t\t} satisfies ListAttrs<Contact, KindaContactRow>),\n\t\t\t\t),\n\t\t\t]),\n\t\t],\n\t}).show()\n}\n\n// Controls the selected contacts in `showContactImportDialog()`\nclass ContactImportDialogViewModel {\n\tprivate readonly selectedContacts: Set<Contact> = new Set()\n\n\tgetSelectedContacts(): Set<Contact> {\n\t\treturn new Set(this.selectedContacts)\n\t}\n\n\t// Compares the selected contacts against a list of contacts and returns whether they contain the same contacts\n\tisAllContactsSelected(contacts: Contact[]): boolean {\n\t\tconst unselectedContacts = contacts.filter((contact) => !this.selectedContacts.has(contact))\n\t\treturn unselectedContacts.length <= 0\n\t}\n\n\t// Deselects all the selected contacts\n\tclearSelection(): void {\n\t\tthis.selectedContacts.clear()\n\t}\n\n\t// Toggles the presence of a contact within the selected contacts\n\tselectSingleContact(selectedContact: Contact): void {\n\t\tif (this.selectedContacts.has(selectedContact)) {\n\t\t\tthis.selectedContacts.delete(selectedContact)\n\t\t} else {\n\t\t\tthis.selectedContacts.add(selectedContact)\n\t\t}\n\t}\n\n\t// Replaces the selected contacts with the provided contacts\n\tselectContacts(contacts: Contact[]): void {\n\t\tthis.selectedContacts.clear()\n\t\tfor (const contact of contacts) {\n\t\t\tthis.selectedContacts.add(contact)\n\t\t}\n\t}\n}\n\nexport async function parseContacts(fileList: FileReference[], fileApp: NativeFileApp) {\n\tconst rawContacts: string[] = []\n\tfor (const file of fileList) {\n\t\tif (getAttachmentType(file.mimeType) === AttachmentType.CONTACT) {\n\t\t\tconst dataFile = await fileApp.readDataFile(file.location)\n\t\t\tif (dataFile == null) continue\n\n\t\t\tconst decoder = new TextDecoder(\"utf-8\")\n\t\t\tconst vCardData = decoder.decode(dataFile.data)\n\n\t\t\trawContacts.push(vCardData)\n\t\t}\n\t}\n\n\treturn rawContacts\n}\n"]}