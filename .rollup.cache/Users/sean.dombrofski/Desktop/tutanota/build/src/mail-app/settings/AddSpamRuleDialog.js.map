{"version":3,"file":"AddSpamRuleDialog.js","sourceRoot":"","sources":["../../../../src/mail-app/settings/AddSpamRuleDialog.ts"],"names":[],"mappings":"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","sourcesContent":["import m from \"mithril\"\nimport type { TranslationKey } from \"../../common/misc/LanguageViewModel\"\nimport { lang } from \"../../common/misc/LanguageViewModel\"\nimport { isDomainOrTopLevelDomain, isMailAddress } from \"../../common/misc/FormatValidator\"\nimport { getSpamRuleField, getSpamRuleType, SpamRuleFieldType, SpamRuleType, TUTA_MAIL_ADDRESS_DOMAINS } from \"../../common/api/common/TutanotaConstants\"\nimport { contains, objectEntries } from \"@tutao/tutanota-utils\"\nimport { Dialog } from \"../../common/gui/base/Dialog\"\nimport type { EmailSenderListElement } from \"../../common/api/entities/sys/TypeRefs.js\"\nimport stream from \"mithril/stream\"\nimport type { SelectorItemList } from \"../../common/gui/base/DropDownSelector.js\"\nimport { DropDownSelector } from \"../../common/gui/base/DropDownSelector.js\"\nimport { Autocapitalize, TextField } from \"../../common/gui/base/TextField.js\"\nimport { locator } from \"../../common/api/main/CommonLocator\"\nimport { assertMainOrNode } from \"../../common/api/common/Env\"\nimport { isOfflineError } from \"../../common/api/common/utils/ErrorUtils.js\"\n\nassertMainOrNode()\n\ntype LoadedData = { customDomains: string[]; existingSpamRules: EmailSenderListElement[] }\n\nexport function showAddSpamRuleDialog(existingSpamRuleOrTemplate: EmailSenderListElement | null) {\n\tlet loadedData: LoadedData | null = null\n\n\tconst typeItems = getSpamRuleTypeNameMapping()\n\tconst selectedType = stream((existingSpamRuleOrTemplate && getSpamRuleType(existingSpamRuleOrTemplate)) || typeItems[0].value)\n\tconst valueFieldValue = stream(existingSpamRuleOrTemplate ? existingSpamRuleOrTemplate.value : \"\")\n\tconst fieldValues = getSpamRuleFieldMapping()\n\tconst selectedField = stream(existingSpamRuleOrTemplate ? getSpamRuleField(existingSpamRuleOrTemplate) : fieldValues[0].value)\n\n\tlet form = () => [\n\t\tm(DropDownSelector, {\n\t\t\titems: fieldValues,\n\t\t\tlabel: \"field_label\",\n\t\t\tselectedValue: selectedField(),\n\t\t\tselectionChangedHandler: selectedField,\n\t\t}),\n\t\tm(TextField, {\n\t\t\tlabel: \"emailSenderPlaceholder_label\",\n\t\t\tautocapitalize: Autocapitalize.none,\n\t\t\tvalue: valueFieldValue(),\n\t\t\toninput: valueFieldValue,\n\t\t\thelpLabel: () =>\n\t\t\t\tlang.get(validate(selectedType(), valueFieldValue(), selectedField(), loadedData, existingSpamRuleOrTemplate) ?? \"emptyString_msg\"),\n\t\t}),\n\t\tm(DropDownSelector, {\n\t\t\titems: typeItems,\n\t\t\tlabel: \"emailSenderRule_label\",\n\t\t\tselectedValue: selectedType(),\n\t\t\tselectionChangedHandler: selectedType,\n\t\t}),\n\t]\n\n\tlet addSpamRuleOkAction = async (dialog: Dialog) => {\n\t\ttry {\n\t\t\tif (existingSpamRuleOrTemplate && existingSpamRuleOrTemplate._id) {\n\t\t\t\tawait locator.customerFacade.editSpamRule(\n\t\t\t\t\tObject.assign({}, existingSpamRuleOrTemplate, {\n\t\t\t\t\t\tvalue: valueFieldValue(),\n\t\t\t\t\t\tfield: selectedField(),\n\t\t\t\t\t\ttype: selectedType(),\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tawait locator.customerFacade.addSpamRule(selectedField(), selectedType(), valueFieldValue())\n\t\t\t}\n\t\t\tdialog.close()\n\t\t} catch (error) {\n\t\t\tif (!isOfflineError(error)) {\n\t\t\t\tdialog.close()\n\t\t\t}\n\t\t\tthrow error\n\t\t}\n\t}\n\n\tconst dialog = Dialog.showActionDialog({\n\t\ttitle: \"addSpamRule_action\",\n\t\tchild: form,\n\t\tvalidator: () => validate(selectedType(), valueFieldValue(), selectedField(), loadedData, existingSpamRuleOrTemplate),\n\t\tallowOkWithReturn: true,\n\t\tokAction: addSpamRuleOkAction,\n\t})\n\n\t// start loading in background\n\tloadData().then(\n\t\t(loaded) => {\n\t\t\tloadedData = loaded\n\t\t\tm.redraw()\n\t\t},\n\t\t(e) => {\n\t\t\t// Might be an offline error, if we can't load data we should close the dialog regardless, they can try opening it again\n\t\t\tdialog.close()\n\t\t\tthrow e\n\t\t},\n\t)\n}\n\nasync function loadData(): Promise<LoadedData> {\n\tconst customerServerProperties = await locator.customerFacade.loadCustomerServerProperties()\n\tconst customer = await locator.logins.getUserController().loadCustomer()\n\tconst customerInfo = await locator.logins.getUserController().loadCustomerInfo()\n\n\tconst customDomains = customerInfo.domainInfos.map((d) => d.domain)\n\tconst existingSpamRules = customerServerProperties.emailSenderList\n\n\treturn { customDomains, existingSpamRules }\n}\n\n/** @return translation key if validation fails or null if it succeeds */\nfunction validate(\n\ttype: SpamRuleType,\n\tvalue: string,\n\tfield: SpamRuleFieldType,\n\tloadedData: LoadedData | null,\n\texistingSpamRuleOrTemplate: EmailSenderListElement | null,\n): TranslationKey | null {\n\tlet currentValue = value.toLowerCase().trim()\n\n\tif (loadedData == null) {\n\t\treturn \"loading_msg\"\n\t} else if (currentValue === \"\") {\n\t\treturn \"spamRuleEnterValue_msg\"\n\t} else if (!isDomainOrTopLevelDomain(currentValue) && !isMailAddress(currentValue, false) && currentValue !== \"*\") {\n\t\treturn \"invalidInputFormat_msg\"\n\t} else if (isInvalidRule(type, currentValue, loadedData.customDomains)) {\n\t\treturn \"emailSenderInvalidRule_msg\"\n\t} else if (\n\t\tloadedData.existingSpamRules.some(\n\t\t\t(r) =>\n\t\t\t\tr.value === currentValue && // Only collision if we don't edit existing one or existing one has different id\n\t\t\t\t(existingSpamRuleOrTemplate == null || r._id !== existingSpamRuleOrTemplate._id) &&\n\t\t\t\tr.field === field,\n\t\t)\n\t) {\n\t\treturn \"emailSenderExistingRule_msg\"\n\t}\n\n\treturn null\n}\n\nfunction isInvalidRule(type: NumberString, value: string, customDomains: string[]): boolean {\n\tif (type !== SpamRuleType.WHITELIST) {\n\t\tif (isDomainOrTopLevelDomain(value)) {\n\t\t\treturn value === \"tutao.de\" || contains(TUTA_MAIL_ADDRESS_DOMAINS, value) || contains(customDomains, value)\n\t\t} else if (isMailAddress(value, false)) {\n\t\t\tlet domain = value.split(\"@\")[1]\n\t\t\treturn domain === \"tutao.de\" || contains(customDomains, domain)\n\t\t}\n\t}\n\n\treturn false\n}\n\nexport function getSpamRuleFieldToName(): Record<SpamRuleFieldType, string> {\n\treturn {\n\t\t[SpamRuleFieldType.FROM]: lang.get(\"inboxRuleSenderEquals_action\"),\n\t\t[SpamRuleFieldType.TO]: lang.get(\"inboxRuleToRecipientEquals_action\"),\n\t\t[SpamRuleFieldType.CC]: lang.get(\"inboxRuleCCRecipientEquals_action\"),\n\t\t[SpamRuleFieldType.BCC]: lang.get(\"inboxRuleBCCRecipientEquals_action\"),\n\t}\n}\n\nexport function getSpamRuleFieldMapping(): SelectorItemList<SpamRuleFieldType> {\n\treturn objectEntries(getSpamRuleFieldToName()).map(([value, name]) => ({\n\t\tvalue,\n\t\tname,\n\t}))\n}\n\nexport function getSpamRuleTypeNameMapping(): SelectorItemList<SpamRuleType> {\n\treturn [\n\t\t{\n\t\t\tvalue: SpamRuleType.WHITELIST,\n\t\t\tname: lang.get(\"emailSenderWhitelist_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: SpamRuleType.BLACKLIST,\n\t\t\tname: lang.get(\"emailSenderBlacklist_action\"),\n\t\t},\n\t\t{\n\t\t\tvalue: SpamRuleType.DISCARD,\n\t\t\tname: lang.get(\"emailSenderDiscardlist_action\"),\n\t\t},\n\t]\n}\n"]}