{"version":3,"file":"Signature.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/signature/Signature.ts"],"names":[],"mappings":"AAAA,OAAO,EAAY,IAAI,EAAE,MAAM,wCAAwC,CAAA;AAGvE,OAAO,EAAE,aAAa,EAAE,MAAM,oCAAoC,CAAA;AAElE,OAAO,EAAE,gBAAgB,EAAE,MAAM,gCAAgC,CAAA;AACjE,OAAO,EAAE,UAAU,EAAE,MAAM,sDAAsD,CAAA;AAEjF,gBAAgB,EAAE,CAAA;AAElB,MAAM,UAAU,mBAAmB;IAClC,+FAA+F;IAC/F,OAAO,CACN,UAAU;QACV,aAAa,CAAC,YAAY,CACzB,IAAI,CAAC,GAAG,CAAC,2BAA2B,EAAE;YACrC,KAAK,EAAE,WAAW,+DAA2B,IAAI,+DAA2B,MAAM;SAClF,CAAC,CACF,CAAC,IAAI,CACN,CAAA;AACF,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,kBAAsC;IACvE,0DAA0D;IAC1D,MAAM,IAAI,GAAG,kBAAkB,CAAC,kBAAkB,CAAA;IAElD,IAAI,IAAI,6DAAmD,EAAE,CAAC;QAC7D,OAAO,mBAAmB,EAAE,CAAA;IAC7B,CAAC;SAAM,IAAI,4DAAkD,IAAI,EAAE,CAAC;QACnE,OAAO,kBAAkB,CAAC,oBAAoB,CAAA;IAC/C,CAAC;SAAM,CAAC;QACP,OAAO,EAAE,CAAA;IACV,CAAC;AACF,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,IAAY,EAAE,UAA8B;IAChF,MAAM,SAAS,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAA;IAE/C,IAAI,SAAS,EAAE,CAAC;QACf,4CAA4C;QAC5C,OAAO,IAAI,GAAG,UAAU,GAAG,SAAS,CAAA;IACrC,CAAC;SAAM,CAAC;QACP,OAAO,IAAI,CAAA;IACZ,CAAC;AACF,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,IAAY,EAAE,MAAuB;IAC1E,gDAAgD;IAChD,IAAI,iBAAiB,GAAG,EAAE,CAAA;IAC1B,IAAI,SAAS,GAAG,iBAAiB,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,KAAK,CAAC,CAAA;IAEnE,IAAI,IAAI,EAAE,CAAC;QACV,iBAAiB,GAAG,UAAU,GAAG,UAAU,GAAG,UAAU,GAAG,IAAI,CAAA;IAChE,CAAC;IAED,IAAI,MAAM,CAAC,iBAAiB,EAAE,CAAC,cAAc,EAAE,IAAI,SAAS,EAAE,CAAC;QAC9D,4CAA4C;QAC5C,iBAAiB,GAAG,UAAU,GAAG,SAAS,GAAG,iBAAiB,CAAA;IAC/D,CAAC;IAED,OAAO,iBAAiB,CAAA;AACzB,CAAC","sourcesContent":["import { InfoLink, lang } from \"../../../common/misc/LanguageViewModel\"\nimport type { TutanotaProperties } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { EmailSignatureType as TutanotaConstants } from \"../../../common/api/common/TutanotaConstants\"\nimport { htmlSanitizer } from \"../../../common/misc/HtmlSanitizer\"\nimport type { LoginController } from \"../../../common/api/main/LoginController\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env\"\nimport { LINE_BREAK } from \"../../../common/mailFunctionality/SharedMailUtils.js\"\n\nassertMainOrNode()\n\nexport function getDefaultSignature(): string {\n\t// add one line break to the default signature to add one empty line between signature and body\n\treturn (\n\t\tLINE_BREAK +\n\t\thtmlSanitizer.sanitizeHTML(\n\t\t\tlang.get(\"defaultEmailSignature_msg\", {\n\t\t\t\t\"{1}\": `<a href=${InfoLink.HomePageFreeSignup}>${InfoLink.HomePageFreeSignup}</a>`,\n\t\t\t}),\n\t\t).html\n\t)\n}\n\nexport function getEmailSignature(tutanotaProperties: TutanotaProperties): string {\n\t// provide the user signature, even for shared mail groups\n\tconst type = tutanotaProperties.emailSignatureType\n\n\tif (type === TutanotaConstants.EMAIL_SIGNATURE_TYPE_DEFAULT) {\n\t\treturn getDefaultSignature()\n\t} else if (TutanotaConstants.EMAIL_SIGNATURE_TYPE_CUSTOM === type) {\n\t\treturn tutanotaProperties.customEmailSignature\n\t} else {\n\t\treturn \"\"\n\t}\n}\n\nexport function appendEmailSignature(body: string, properties: TutanotaProperties): string {\n\tconst signature = getEmailSignature(properties)\n\n\tif (signature) {\n\t\t// ensure that signature is on the next line\n\t\treturn body + LINE_BREAK + signature\n\t} else {\n\t\treturn body\n\t}\n}\n\nexport function prependEmailSignature(body: string, logins: LoginController): string {\n\t// add space between signature and existing body\n\tlet bodyWithSignature = \"\"\n\tlet signature = getEmailSignature(logins.getUserController().props)\n\n\tif (body) {\n\t\tbodyWithSignature = LINE_BREAK + LINE_BREAK + LINE_BREAK + body\n\t}\n\n\tif (logins.getUserController().isInternalUser() && signature) {\n\t\t// ensure that signature is on the next line\n\t\tbodyWithSignature = LINE_BREAK + signature + bodyWithSignature\n\t}\n\n\treturn bodyWithSignature\n}\n"]}