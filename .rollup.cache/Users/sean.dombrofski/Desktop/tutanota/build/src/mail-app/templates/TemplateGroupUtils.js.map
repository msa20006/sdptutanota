{"version":3,"file":"TemplateGroupUtils.js","sourceRoot":"","sources":["../../../../src/mail-app/templates/TemplateGroupUtils.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,wBAAwB,EAAE,MAAM,gDAAgD,CAAA;AACzF,OAAO,EAAE,6BAA6B,EAAE,MAAM,uCAAuC,CAAA;AACrF,OAAO,EAAE,OAAO,EAAE,MAAM,qCAAqC,CAAA;AAC7D,OAAO,EAAE,WAAW,EAAE,MAAM,2CAA2C,CAAA;AACvE,OAAO,EAAE,MAAM,EAAE,MAAM,iCAAiC,CAAA;AAExD,OAAO,EAAE,iCAAiC,EAAE,MAAM,gDAAgD,CAAA;AAElG;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,kCAAkC;IACvD,MAAM,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAA;IACzD,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,YAAY,EAAE,CAAA;IACpD,MAAM,EAAE,8BAA8B,EAAE,GAAG,MAAM,MAAM,CAAC,gDAAgD,CAAC,CAAA;IACzG,IAAI,OAAO,GAAG,CAAC,MAAM,cAAc,CAAC,aAAa,EAAE,CAAC,CAAC,SAAS,IAAI,iCAAiC,CAAC,QAAQ,EAAE,WAAW,CAAC,sBAAsB,CAAC,CAAA;IACjJ,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,IAAI,cAAc,CAAC,aAAa,EAAE,EAAE,CAAC;YACpC,OAAO,GAAG,MAAM,6BAA6B,CAAC,MAAM,8BAA8B,EAAE,CAAC,CAAA;QACtF,CAAC;aAAM,CAAC;YACP,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;QACnC,CAAC;IACF,CAAC;IAED,IAAI,OAAO,EAAE,CAAC;QACb,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAA;QAC3E,OAAO,OAAO,CAAC,YAAY,CAAC,IAAI,CAAoB,wBAAwB,EAAE,OAAO,CAAC,CAAA;IACvF,CAAC;SAAM,CAAC;QACP,OAAO,IAAI,CAAA;IACZ,CAAC;AACF,CAAC","sourcesContent":["import type { TemplateGroupRoot } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { TemplateGroupRootTypeRef } from \"../../common/api/entities/tutanota/TypeRefs.js\"\nimport { showPlanUpgradeRequiredDialog } from \"../../common/misc/SubscriptionDialogs\"\nimport { locator } from \"../../common/api/main/CommonLocator\"\nimport { FeatureType } from \"../../common/api/common/TutanotaConstants\"\nimport { Dialog } from \"../../common/gui/base/Dialog.js\"\nimport { lang } from \"../../common/misc/LanguageViewModel.js\"\nimport { isCustomizationEnabledForCustomer } from \"../../common/api/common/utils/CustomerUtils.js\"\n\n/**\n * @return True if the group has been created.\n */\nexport async function createInitialTemplateListIfAllowed(): Promise<TemplateGroupRoot | null> {\n\tconst userController = locator.logins.getUserController()\n\tconst customer = await userController.loadCustomer()\n\tconst { getAvailablePlansWithTemplates } = await import(\"../../common/subscription/SubscriptionUtils.js\")\n\tlet allowed = (await userController.getPlanConfig()).templates || isCustomizationEnabledForCustomer(customer, FeatureType.BusinessFeatureEnabled)\n\tif (!allowed) {\n\t\tif (userController.isGlobalAdmin()) {\n\t\t\tallowed = await showPlanUpgradeRequiredDialog(await getAvailablePlansWithTemplates())\n\t\t} else {\n\t\t\tDialog.message(\"contactAdmin_msg\")\n\t\t}\n\t}\n\n\tif (allowed) {\n\t\tconst groupId = await locator.groupManagementFacade.createTemplateGroup(\"\")\n\t\treturn locator.entityClient.load<TemplateGroupRoot>(TemplateGroupRootTypeRef, groupId)\n\t} else {\n\t\treturn null\n\t}\n}\n"]}