{"version":3,"file":"ConversationViewModel.js","sourceRoot":"","sources":["../../../../../src/mail-app/mail/view/ConversationViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConversationEntry, ConversationEntryTypeRef, Mail, MailTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { MailViewerViewModel } from \"./MailViewerViewModel.js\"\nimport { CreateMailViewerOptions } from \"./MailViewer.js\"\nimport { elementIdPart, firstBiggerThanSecond, getElementId, haveSameId, isSameId, listIdPart } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { assertNotNull, findLastIndex, groupBy, makeSingleUse, ofClass } from \"@tutao/tutanota-utils\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { LoadingStateTracker } from \"../../../common/offline/LoadingState.js\"\nimport { EntityEventsListener, EventController } from \"../../../common/api/main/EventController.js\"\nimport { ConversationType, MailSetKind, MailState, OperationType } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { NotAuthorizedError, NotFoundError } from \"../../../common/api/common/error/RestError.js\"\nimport { MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { ListAutoSelectBehavior } from \"../../../common/misc/DeviceConfig.js\"\n\nimport { MailModel } from \"../model/MailModel.js\"\n\nimport { isOfTypeOrSubfolderOf } from \"../model/MailChecks.js\"\n\nexport type MailViewerViewModelFactory = (options: CreateMailViewerOptions) => MailViewerViewModel\n\nexport type MailItem = { type: \"mail\"; viewModel: MailViewerViewModel; entryId: IdTuple }\nexport type ConversationItem = MailItem\n\nexport interface ConversationPrefProvider {\n\tgetConversationViewShowOnlySelectedMail(): boolean\n\n\tgetMailAutoSelectBehavior(): ListAutoSelectBehavior\n}\n\nexport type ConversationViewModelFactory = (options: CreateMailViewerOptions) => ConversationViewModel\n\nexport class ConversationViewModel {\n\t/** Primary viewModel is for the mail that was selected from the list. */\n\tprivate readonly _primaryViewModel: MailViewerViewModel\n\tprivate loadingState = new LoadingStateTracker()\n\tprivate loadingPromise: Promise<void> | null = null\n\t/** Is not set until {@link loadConversation is finished. Until it is finished we display primary mail and subject. */\n\tprivate conversation: ConversationItem[] | null = null\n\n\tconstructor(\n\t\tprivate options: CreateMailViewerOptions,\n\t\tprivate readonly viewModelFactory: MailViewerViewModelFactory,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly eventController: EventController,\n\t\tprivate readonly conversationPrefProvider: ConversationPrefProvider,\n\t\tprivate readonly mailModel: MailModel,\n\t\tprivate readonly onUiUpdate: () => unknown,\n\t) {\n\t\tthis._primaryViewModel = viewModelFactory(options)\n\t}\n\n\treadonly init = makeSingleUse((delayBodyRendering: Promise<unknown>) => {\n\t\tthis.loadingPromise = this.loadingState.trackPromise(this.loadConversation())\n\t\tthis.eventController.addEntityListener(this.onEntityEvent)\n\t\tthis._primaryViewModel.expandMail(delayBodyRendering)\n\t})\n\n\tprivate readonly onEntityEvent: EntityEventsListener = async (updates, eventOwnerGroupId) => {\n\t\t// conversation entry can be created when new email arrives\n\t\t// conversation entry can be updated when email is moved around or deleted\n\t\t// conversation entry is deleted only when every email in the conversation is deleted (the whole conversation list will be deleted)\n\t\tfor (const update of updates) {\n\t\t\tif (isUpdateForTypeRef(ConversationEntryTypeRef, update) && update.instanceListId === this.conversationListId()) {\n\t\t\t\tif (this.conversationPrefProvider.getConversationViewShowOnlySelectedMail()) {\n\t\t\t\t\t// no need to handle CREATE because we only show a single item and we don't want to add new ones\n\t\t\t\t\t// no need to handle UPDATE because the only update that can happen is when email gets deleted and then we should be closed from the\n\t\t\t\t\t// outside anyway\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tswitch (update.operation) {\n\t\t\t\t\tcase OperationType.CREATE:\n\t\t\t\t\t\tawait this.processCreateConversationEntry(update)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase OperationType.UPDATE:\n\t\t\t\t\t\tawait this.processUpdateConversationEntry(update)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// don't process DELETE because the primary email (selected from the mail list) will be deleted first anyway\n\t\t\t\t\t// and we should be closed when it happens\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async processCreateConversationEntry(update: EntityUpdateData) {\n\t\tconst id: IdTuple = [update.instanceListId, update.instanceId]\n\t\ttry {\n\t\t\tconst entry = await this.entityClient.load(ConversationEntryTypeRef, id)\n\t\t\tif (entry.mail) {\n\t\t\t\ttry {\n\t\t\t\t\t// first wait that we load the conversation, otherwise we might already have the email\n\t\t\t\t\tawait this.loadingPromise\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tconst conversation = assertNotNull(this.conversation)\n\t\t\t\tif (conversation.some((item) => item.type === \"mail\" && isSameId(item.viewModel.mail.conversationEntry, id))) {\n\t\t\t\t\t// already loaded\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tconst mail = await this.entityClient.load(MailTypeRef, entry.mail)\n\t\t\t\tlet index = findLastIndex(conversation, (i) => firstBiggerThanSecond(getElementId(entry), elementIdPart(i.entryId)))\n\t\t\t\tif (index < 0) {\n\t\t\t\t\tindex = conversation.length\n\t\t\t\t} else {\n\t\t\t\t\tindex = index + 1\n\t\t\t\t}\n\t\t\t\tconversation.splice(index, 0, { type: \"mail\", viewModel: this.viewModelFactory({ ...this.options, mail }), entryId: entry._id })\n\t\t\t\tthis.onUiUpdate()\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t// Ignore, something was already deleted\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async processUpdateConversationEntry(update: EntityUpdateData) {\n\t\ttry {\n\t\t\t// first wait that we load the conversation, otherwise we might already have the email\n\t\t\tawait this.loadingPromise\n\t\t} catch (e) {\n\t\t\treturn\n\t\t}\n\t\tconst conversation = assertNotNull(this.conversation)\n\t\tconst ceId: IdTuple = [update.instanceListId, update.instanceId]\n\t\tlet conversationEntry: ConversationEntry\n\t\tlet mail: Mail | null\n\t\ttry {\n\t\t\tconversationEntry = await this.entityClient.load(ConversationEntryTypeRef, ceId)\n\t\t\tmail =\n\t\t\t\t// ideally checking the `mail` ref should be enough but we sometimes get an update with UNKNOWN and non-existing email but still with the ref\n\t\t\t\tconversationEntry.conversationType !== ConversationType.UNKNOWN && conversationEntry.mail\n\t\t\t\t\t? await this.entityClient.load(MailTypeRef, conversationEntry.mail).catch(\n\t\t\t\t\t\t\tofClass(NotFoundError, () => {\n\t\t\t\t\t\t\t\tconsole.log(`Could not find updated mail ${JSON.stringify(conversationEntry.mail)}`)\n\t\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t  )\n\t\t\t\t\t: null\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t// Ignore, something was already deleted\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\n\t\tconst oldItemIndex = conversation.findIndex((e) => e.type === \"mail\" && isSameId(e.viewModel.mail.conversationEntry, ceId))\n\t\tif (oldItemIndex === -1) {\n\t\t\treturn\n\t\t}\n\t\tconst oldItem = conversation[oldItemIndex]\n\t\tif (mail && oldItem.type === \"mail\" && haveSameId(oldItem.viewModel.mail, mail)) {\n\t\t\tconsole.log(\"Noop entry update?\", oldItem.viewModel.mail)\n\t\t\t// nothing to do really, why do we get this update again?\n\t\t} else {\n\t\t\tif (oldItem.type === \"mail\") {\n\t\t\t\toldItem.viewModel.dispose()\n\t\t\t}\n\n\t\t\tif (mail) {\n\t\t\t\t// We do not show trashed drafts\n\t\t\t\tif (mail.state === MailState.DRAFT && (await this.isInTrash(mail))) {\n\t\t\t\t\tconversation.splice(oldItemIndex, 1)\n\t\t\t\t} else {\n\t\t\t\t\tconversation[oldItemIndex] = {\n\t\t\t\t\t\ttype: \"mail\",\n\t\t\t\t\t\tviewModel: this.viewModelFactory({ ...this.options, mail }),\n\t\t\t\t\t\tentryId: conversationEntry._id,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// When DELETED conversation status type is added, replace entry with deleted entry instead of splicing out\n\t\t\t\tconversation.splice(oldItemIndex, 1)\n\t\t\t}\n\t\t\tthis.onUiUpdate()\n\t\t}\n\t}\n\n\tprivate conversationListId() {\n\t\treturn listIdPart(this._primaryViewModel.mail.conversationEntry)\n\t}\n\n\tprivate async loadConversation() {\n\t\ttry {\n\t\t\tif (this.conversationPrefProvider.getConversationViewShowOnlySelectedMail()) {\n\t\t\t\tthis.conversation = this.conversationItemsForSelectedMailOnly()\n\t\t\t} else {\n\t\t\t\t// Catch errors but only for loading conversation entries.\n\t\t\t\t// if success, proceed with loading mails\n\t\t\t\t// otherwise do the error handling\n\t\t\t\tthis.conversation = await this.entityClient.loadAll(ConversationEntryTypeRef, listIdPart(this.primaryMail.conversationEntry)).then(\n\t\t\t\t\tasync (entries) => {\n\t\t\t\t\t\t// if the primary mail is not along conversation then only display the primary mail\n\t\t\t\t\t\tif (!entries.some((entry) => isSameId(entry.mail, this.primaryMail._id))) {\n\t\t\t\t\t\t\treturn this.conversationItemsForSelectedMailOnly()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst allMails = await this.loadMails(entries)\n\t\t\t\t\t\t\treturn this.createConversationItems(entries, allMails)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tasync (e) => {\n\t\t\t\t\t\tif (e instanceof NotAuthorizedError) {\n\t\t\t\t\t\t\t// Most likely the conversation entry list does not exist anymore. The server does not distinguish between the case when the\n\t\t\t\t\t\t\t// list does not exist and when we have no permission on it (and for good reasons, it prevents enumeration).\n\t\t\t\t\t\t\t// Most often it happens when we are not fully synced with the server yet and the primary mail does not even exist.\n\t\t\t\t\t\t\treturn this.conversationItemsForSelectedMailOnly()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.onUiUpdate()\n\t\t}\n\t}\n\n\tprivate createConversationItems(conversationEntries: ConversationEntry[], allMails: Map<Id, Mail>) {\n\t\tconst newConversation: ConversationItem[] = []\n\t\tfor (const c of conversationEntries) {\n\t\t\tconst mail = c.mail && allMails.get(elementIdPart(c.mail))\n\n\t\t\tif (mail) {\n\t\t\t\tnewConversation.push({\n\t\t\t\t\ttype: \"mail\",\n\t\t\t\t\tviewModel: isSameId(mail._id, this.options.mail._id) ? this._primaryViewModel : this.viewModelFactory({ ...this.options, mail }),\n\t\t\t\t\tentryId: c._id,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\treturn newConversation\n\t}\n\n\tprivate async loadMails(conversationEntries: ConversationEntry[]) {\n\t\tconst byList = groupBy(conversationEntries, (c) => c.mail && listIdPart(c.mail))\n\t\tconst allMails: Map<Id, Mail> = new Map()\n\t\tfor (const [listId, conversations] of byList.entries()) {\n\t\t\tif (!listId) continue\n\t\t\tconst loaded = await this.entityClient.loadMultiple(\n\t\t\t\tMailTypeRef,\n\t\t\t\tlistId,\n\t\t\t\tconversations.map((c) => elementIdPart(assertNotNull(c.mail))),\n\t\t\t)\n\n\t\t\tfor (const mail of loaded) {\n\t\t\t\t// If the mail is a draft and is the primary mail, we will show it no matter what\n\t\t\t\t// otherwise, if a draft is in trash we will not show it\n\t\t\t\tif (isSameId(mail._id, this.primaryMail._id) || mail.state !== MailState.DRAFT || !(await this.isInTrash(mail))) {\n\t\t\t\t\tallMails.set(getElementId(mail), mail)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn allMails\n\t}\n\n\tprivate async isInTrash(mail: Mail) {\n\t\tconst mailboxDetail = await this.mailModel.getMailboxDetailsForMail(mail)\n\t\tconst mailFolder = this.mailModel.getMailFolderForMail(mail)\n\t\tif (mailFolder == null || mailboxDetail == null || mailboxDetail.mailbox.folders == null) {\n\t\t\treturn\n\t\t}\n\t\tconst folders = await this.mailModel.getMailboxFoldersForId(mailboxDetail.mailbox.folders._id)\n\t\treturn isOfTypeOrSubfolderOf(folders, mailFolder, MailSetKind.TRASH)\n\t}\n\n\tconversationItems(): ReadonlyArray<ConversationItem> {\n\t\treturn this.conversation ?? this.conversationItemsForSelectedMailOnly()\n\t}\n\n\tprivate conversationItemsForSelectedMailOnly(): ConversationItem[] {\n\t\treturn [{ type: \"mail\", viewModel: this._primaryViewModel, entryId: this._primaryViewModel.mail.conversationEntry }]\n\t}\n\n\tget primaryMail(): Mail {\n\t\treturn this._primaryViewModel.mail\n\t}\n\n\tprimaryViewModel(): MailViewerViewModel {\n\t\treturn this._primaryViewModel\n\t}\n\n\tisFinished(): boolean {\n\t\treturn this.loadingState.isIdle()\n\t}\n\n\tisConnectionLost(): boolean {\n\t\treturn this.loadingState.isConnectionLost()\n\t}\n\n\tretry() {\n\t\tif (this.loadingState.isConnectionLost()) {\n\t\t\tthis.loadingState.trackPromise(\n\t\t\t\tthis.loadConversation().then(async () => {\n\t\t\t\t\tconst mails = (this.conversation?.filter((e) => e.type === \"mail\") ?? []) as Array<MailItem>\n\t\t\t\t\tawait Promise.all(mails.map((m) => m.viewModel.loadAll(Promise.resolve())))\n\t\t\t\t}),\n\t\t\t)\n\t\t}\n\t}\n\n\tdispose() {\n\t\t// hack: init has been called if loadingPromise is set\n\t\tif (this.loadingPromise != null) {\n\t\t\tthis.eventController.removeEntityListener(this.onEntityEvent)\n\t\t\tfor (const item of this.conversationItems()) {\n\t\t\t\tif (item.type === \"mail\") {\n\t\t\t\t\titem.viewModel.dispose()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"]}