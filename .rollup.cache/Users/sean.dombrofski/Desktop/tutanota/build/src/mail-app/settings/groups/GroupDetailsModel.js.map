{"version":3,"file":"GroupDetailsModel.js","sourceRoot":"","sources":["../../../../../src/mail-app/settings/groups/GroupDetailsModel.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tcreateGroupInfo,\n\tCustomerTypeRef,\n\tGroup,\n\tGroupInfo,\n\tGroupInfoTypeRef,\n\tGroupMemberTypeRef,\n\tGroupTypeRef,\n\tUserTypeRef,\n} from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { assertNotNull, getFirstOrThrow, LazyLoaded, neverNull, promiseMap } from \"@tutao/tutanota-utils\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient.js\"\nimport { GENERATED_MIN_ID, isSameId } from \"../../../common/api/common/utils/EntityUtils.js\"\nimport { BookingItemFeatureType, GroupType, OperationType } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { lang, TranslationKey } from \"../../../common/misc/LanguageViewModel.js\"\nimport { stringValidator } from \"../../../common/gui/base/Dialog.js\"\nimport { locator } from \"../../../common/api/main/CommonLocator.js\"\nimport { BadRequestError, NotAuthorizedError, PreconditionFailedError } from \"../../../common/api/common/error/RestError.js\"\nimport { compareGroupInfos, getGroupInfoDisplayName } from \"../../../common/api/common/utils/GroupUtils.js\"\nimport { MailboxPropertiesTypeRef } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { UserError } from \"../../../common/api/main/UserError.js\"\nimport { BookingParams } from \"../../../common/subscription/BuyDialog.js\"\nimport { toFeatureType } from \"../../../common/subscription/SubscriptionUtils.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\n\nexport class GroupDetailsModel {\n\tgroupInfo: GroupInfo\n\tprivate readonly group: LazyLoaded<Group>\n\tprivate usedStorageInBytes!: number\n\tprivate readonly members: LazyLoaded<Array<GroupInfo>>\n\n\tprivate senderName!: LazyLoaded<string>\n\n\tconstructor(groupInfo: GroupInfo, private readonly entityClient: EntityClient, private readonly updateViewCallback: () => void) {\n\t\tthis.entityClient = entityClient\n\t\tthis.groupInfo = groupInfo\n\t\tthis.group = new LazyLoaded(() => this.entityClient.load(GroupTypeRef, this.groupInfo.group))\n\n\t\tthis.group.getAsync().then(() => this.updateViewCallback())\n\n\t\tthis.members = new LazyLoaded(async () => {\n\t\t\tconst group = await this.group.getAsync()\n\t\t\t// load only up to 200 members to avoid too long loading, like for account groups\n\t\t\tconst groupMembers = await this.entityClient.loadRange(GroupMemberTypeRef, group.members, GENERATED_MIN_ID, 200, false)\n\t\t\treturn promiseMap(groupMembers, (member) => this.entityClient.load(GroupInfoTypeRef, member.userGroupInfo))\n\t\t})\n\n\t\t// noinspection JSIgnoredPromiseFromCall\n\t\tthis.updateMembers()\n\n\t\tif (this.groupInfo.groupType === GroupType.Mail) {\n\t\t\tthis.senderName = new LazyLoaded<string>(() => this.loadSenderName())\n\t\t\t// noinspection JSIgnoredPromiseFromCall\n\t\t\tthis.updateSenderName()\n\t\t}\n\n\t\t// noinspection JSIgnoredPromiseFromCall\n\t\tthis.updateUsedStorage()\n\t}\n\n\tisMailGroup(): boolean {\n\t\treturn this.groupInfo.groupType === GroupType.Mail\n\t}\n\n\tprivate async loadSenderName(): Promise<string> {\n\t\tconst names = await locator.mailAddressFacade.getSenderNames(this.groupInfo.group)\n\t\treturn getFirstOrThrow(Array.from(names.values()))\n\t}\n\n\tisGroupActive(): boolean {\n\t\treturn this.groupInfo.deleted == null\n\t}\n\n\tgetGroupType(): string | null {\n\t\treturn this.group.isLoaded() ? this.group.getLoaded().type : null\n\t}\n\n\tgetGroupName(): string {\n\t\treturn this.groupInfo.name\n\t}\n\n\tgetUsedStorage(): number | null {\n\t\treturn this.usedStorageInBytes\n\t}\n\n\tgetCreationDate(): Date {\n\t\treturn this.groupInfo.created\n\t}\n\n\tgetMembersInfo(): Array<GroupInfo> {\n\t\treturn this.members.isLoaded() ? this.members.getLoaded() : []\n\t}\n\n\tgetGroupMailAddress(): string {\n\t\treturn this.groupInfo.mailAddress ?? \"\"\n\t}\n\n\tgetGroupSenderName(): string {\n\t\treturn this.senderName.isLoaded() ? this.senderName.getLoaded() : lang.get(\"loading_msg\")\n\t}\n\n\t/**\n\t * remove the group of the given groupInfo from this group\n\t */\n\tasync removeGroupMember(userGroupInfo: GroupInfo): Promise<void> {\n\t\ttry {\n\t\t\tconst userGroup = await this.entityClient.load(GroupTypeRef, userGroupInfo.group)\n\t\t\treturn locator.groupManagementFacade.removeUserFromGroup(assertNotNull(userGroup.user), this.groupInfo.group)\n\t\t} catch (e) {\n\t\t\tif (!(e instanceof NotAuthorizedError)) throw e\n\t\t\tthrow new UserError(\"removeUserFromGroupNotAdministratedError_msg\")\n\t\t}\n\t}\n\n\tasync executeGroupBuy(deactivate: boolean): Promise<void> {\n\t\tconst group = await this.group.getAsync()\n\t\ttry {\n\t\t\treturn await locator.groupManagementFacade.deactivateGroup(group, !deactivate)\n\t\t} catch (e) {\n\t\t\tif (!(e instanceof PreconditionFailedError)) throw e\n\t\t\tif (!deactivate) {\n\t\t\t\tthrow new UserError(\"emailAddressInUse_msg\")\n\t\t\t} else {\n\t\t\t\tthrow new UserError(\"stillReferencedFromContactForm_msg\")\n\t\t\t}\n\t\t}\n\t}\n\n\tchangeGroupName(newName: string): Promise<void> {\n\t\tconst newGroupInfo: GroupInfo = createGroupInfo(this.groupInfo)\n\t\tnewGroupInfo.name = newName\n\t\treturn this.entityClient.update(newGroupInfo)\n\t}\n\n\tasync changeGroupSenderName(newName: string): Promise<void> {\n\t\tif (this.senderName.isLoaded() && this.senderName.getLoaded() === newName) return\n\t\tconst mailGroupId = await this.groupInfo.group\n\t\tawait locator.mailAddressFacade.setSenderName(mailGroupId, this.getGroupMailAddress(), newName)\n\n\t\t// we may not be a member of the group and therefore won't necessarily receive updates\n\t\t// for updated mailbox properties.\n\t\tthis.senderName.reset()\n\t\t// noinspection ES6MissingAwait\n\t\tthis.senderName.getAsync()\n\t\tthis.updateViewCallback()\n\t}\n\n\tvalidateGroupName(newName: string): ReturnType<stringValidator> {\n\t\tif (this.group.isLoaded() && this.group.getLoaded().type === GroupType.MailingList && newName.trim() === \"\") {\n\t\t\treturn \"enterName_msg\"\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\t/**\n\t * validate if the given deactivation/activation is valid for this group and return information about the item to book, if any\n\t * @param deactivate true if the group should be deactivated\n\t * @return the relevant BookingParams if the activation/deactivatian may go ahead, null otherwise (no action necessary)\n\t */\n\tasync validateGroupActivationStatus(deactivate: boolean): Promise<BookingParams | null> {\n\t\tif (deactivate !== this.isGroupActive()) {\n\t\t\tconsole.log(\"tried to set activation status to current status.\")\n\t\t\treturn null\n\t\t}\n\t\tconst members = await this.members.getAsync()\n\t\tif (deactivate && members.length > 0) {\n\t\t\tthrow new UserError(\"groupNotEmpty_msg\")\n\t\t} else {\n\t\t\tconst userController = locator.logins.getUserController()\n\t\t\tconst planType = await userController.getPlanType()\n\t\t\tconst useLegacyBookingItem = await userController.useLegacyBookingItem()\n\n\t\t\tconst bookingItemType = useLegacyBookingItem ? toFeatureType(planType) : BookingItemFeatureType.SharedMailGroup\n\t\t\tconst bookingText: TranslationKey = deactivate ? \"cancelSharedMailbox_label\" : \"sharedMailbox_label\"\n\n\t\t\treturn {\n\t\t\t\tfeatureType: bookingItemType,\n\t\t\t\tbookingText: bookingText,\n\t\t\t\tcount: deactivate ? -1 : 1,\n\t\t\t\tfreeAmount: 0,\n\t\t\t\treactivate: !deactivate,\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getPossibleMembers(): Promise<Array<{ name: string; value: Id }>> {\n\t\tconst customer = await this.entityClient.load(CustomerTypeRef, neverNull(locator.logins.getUserController().user.customer))\n\t\tconst userGroupInfos = await this.entityClient.loadAll(GroupInfoTypeRef, customer.userGroups)\n\t\t// remove all users that are already member\n\t\tlet globalAdmin = locator.logins.isGlobalAdminUserLoggedIn()\n\t\tlet availableUserGroupInfos = userGroupInfos.filter((userGroupInfo) => {\n\t\t\tif (\n\t\t\t\t!globalAdmin // if we are not a  global admin we may not add anyone, don't filter\n\t\t\t) {\n\t\t\t\treturn false\n\t\t\t} else {\n\t\t\t\t// only show users that are not deleted and not already in the group.\n\t\t\t\treturn !userGroupInfo.deleted && !this.members.getLoaded().some((m) => isSameId(m._id, userGroupInfo._id))\n\t\t\t}\n\t\t})\n\n\t\tavailableUserGroupInfos.sort(compareGroupInfos)\n\t\treturn availableUserGroupInfos.map((g) => ({ name: getGroupInfoDisplayName(g), value: g.group }))\n\t}\n\n\tasync addUserToGroup(group: Id): Promise<any> {\n\t\tconst userGroup = await this.entityClient.load(GroupTypeRef, group)\n\t\tconst user = await this.entityClient.load(UserTypeRef, neverNull(userGroup.user))\n\t\treturn locator.groupManagementFacade.addUserToGroup(user, this.groupInfo.group)\n\t}\n\n\tprivate async updateMembers(): Promise<void> {\n\t\tthis.members.reset()\n\t\tawait this.members.getAsync()\n\t\tthis.updateViewCallback()\n\t}\n\n\tprivate async updateSenderName(): Promise<void> {\n\t\tthis.senderName.reset()\n\t\tawait this.senderName.getAsync()\n\t\tthis.updateViewCallback()\n\t}\n\n\tprivate async updateUsedStorage(): Promise<void> {\n\t\tif (this.isMailGroup()) {\n\t\t\ttry {\n\t\t\t\tthis.usedStorageInBytes = await locator.groupManagementFacade.readUsedSharedMailGroupStorage(await this.group.getAsync())\n\t\t\t} catch (e) {\n\t\t\t\tif (!(e instanceof BadRequestError)) throw e\n\t\t\t\t// may happen if the user gets the admin flag removed\n\t\t\t}\n\t\t} else {\n\t\t\tthis.usedStorageInBytes = 0\n\t\t}\n\n\t\tthis.updateViewCallback()\n\t}\n\n\tasync entityEventsReceived(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\tawait promiseMap(updates, async (update) => {\n\t\t\tconst { instanceListId, instanceId, operation } = update\n\n\t\t\tif (isUpdateForTypeRef(GroupInfoTypeRef, update) && operation === OperationType.UPDATE) {\n\t\t\t\tconst updatedUserGroupInfo = await this.entityClient.load(GroupInfoTypeRef, this.groupInfo._id)\n\t\t\t\tif (isSameId(this.groupInfo._id, [assertNotNull(instanceListId, \"got groupInfo update without instanceListId\"), instanceId])) {\n\t\t\t\t\tthis.groupInfo = updatedUserGroupInfo\n\t\t\t\t\treturn this.updateUsedStorage()\n\t\t\t\t} else {\n\t\t\t\t\t// a member name may have changed\n\t\t\t\t\treturn this.updateMembers()\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tisUpdateForTypeRef(GroupMemberTypeRef, update) &&\n\t\t\t\tthis.group.isLoaded() &&\n\t\t\t\tthis.group.getLoaded().members === assertNotNull(instanceListId, \"got a groupMember update without instanceListId\")\n\t\t\t) {\n\t\t\t\t// the members have changed\n\t\t\t\treturn this.updateMembers()\n\t\t\t} else if (this.isMailGroup() && isUpdateForTypeRef(MailboxPropertiesTypeRef, update) && update.operation === OperationType.UPDATE) {\n\t\t\t\t// the sender name belonging to this group may have changed.\n\t\t\t\t// noinspection ES6MissingAwait\n\t\t\t\tthis.updateSenderName()\n\t\t\t}\n\t\t})\n\t}\n}\n"]}