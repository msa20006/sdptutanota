{"version":3,"file":"RootView.js","sourceRoot":"","sources":["../../src/RootView.ts"],"names":[],"mappings":"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","sourcesContent":["import m, { Children, ClassComponent, Vnode } from \"mithril\"\nimport { modal } from \"./common/gui/base/Modal\"\nimport { overlay } from \"./common/gui/base/Overlay\"\nimport { styles } from \"./common/gui/styles\"\nimport { assertMainOrNodeBoot, isApp } from \"./common/api/common/Env\"\nimport { Keys } from \"./common/api/common/TutanotaConstants.js\"\nimport { isKeyPressed } from \"./common/misc/KeyManager.js\"\n\nassertMainOrNodeBoot()\n\nexport const enum LayerType {\n\t// Minimized editors, SearchBarOverlay\n\tView = 0,\n\t// notifications that require no user interaction\n\tLowPriorityOverlay = 100,\n\t// Foreground menu in mobile layout\n\tLowPriorityNotification = 150,\n\t// Editors, Dialogs\n\tForegroundMenu = 200,\n\t// Error message dialogs, Notifications\n\tModal = 300,\n\tOverlay = 400,\n}\n\nexport const enum PrimaryNavigationType {\n\tKeyboard,\n\tTouch,\n\tMouse,\n\t// theoretically pen is also an option\n}\n\n// global, in case we have multiple instances for some reason\n/** What we infer to be the user's preferred navigation type. */\nexport let currentNavigationType: PrimaryNavigationType = isApp() ? PrimaryNavigationType.Touch : PrimaryNavigationType.Mouse\n\n/**\n * View which wraps anything that we render.\n * It has overlay, modal and the main layers. It also defines some global handlers for better visual indication depending on the interaction.\n */\nexport class RootView implements ClassComponent {\n\tprivate dom: HTMLElement | null = null\n\n\tconstructor() {\n\t\t// still \"old-style\" component, we don't want to lose \"this\" reference\n\t\tthis.view = this.view.bind(this)\n\t}\n\n\tview(vnode: Vnode): Children {\n\t\treturn m(\n\t\t\t\"#root\" + (styles.isUsingBottomNavigation() ? \".mobile\" : \"\"),\n\t\t\t{\n\t\t\t\toncreate: (vnode) => {\n\t\t\t\t\tthis.dom = vnode.dom as HTMLElement\n\t\t\t\t},\n\t\t\t\t// use pointer events instead of mousedown/touchdown because mouse events are still fired for touch on mobile\n\t\t\t\tonpointerup: (e: EventRedraw<PointerEvent>) => {\n\t\t\t\t\tif (e.pointerType === \"mouse\") {\n\t\t\t\t\t\tthis.switchNavType(PrimaryNavigationType.Mouse)\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// can be \"touch\" or \"pen\", treat them the same for now\n\t\t\t\t\t\tthis.switchNavType(PrimaryNavigationType.Touch)\n\t\t\t\t\t}\n\t\t\t\t\te.redraw = false\n\t\t\t\t},\n\t\t\t\tonkeyup: (e: EventRedraw<KeyboardEvent>) => {\n\t\t\t\t\t// tab key can be pressed in some other situations e.g. editor but it would be switched back quickly again if needed.\n\t\t\t\t\tif (isKeyPressed(e.key, Keys.TAB, Keys.UP, Keys.DOWN, Keys.J, Keys.K)) {\n\t\t\t\t\t\tthis.switchNavType(PrimaryNavigationType.Keyboard)\n\t\t\t\t\t}\n\t\t\t\t\te.redraw = false\n\t\t\t\t},\n\t\t\t\t// See styles for usages of these classes.\n\t\t\t\t// We basically use them in css combinators as a query for when to show certain interaction indicators.\n\t\t\t\tclass: this.classForType(),\n\t\t\t\tstyle: {\n\t\t\t\t\theight: \"100%\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t[m(overlay), m(modal), vnode.children],\n\t\t)\n\t}\n\n\tprivate switchNavType(newType: PrimaryNavigationType) {\n\t\tif (currentNavigationType === newType) {\n\t\t\treturn\n\t\t}\n\t\tthis.dom?.classList.remove(this.classForType())\n\t\tcurrentNavigationType = newType\n\t\tthis.dom?.classList.add(this.classForType())\n\t}\n\n\tprivate classForType() {\n\t\tswitch (currentNavigationType) {\n\t\t\tcase PrimaryNavigationType.Keyboard:\n\t\t\t\treturn \"keyboard-nav\"\n\t\t\tcase PrimaryNavigationType.Mouse:\n\t\t\t\treturn \"mouse-nav\"\n\t\t\tcase PrimaryNavigationType.Touch:\n\t\t\t\treturn \"touch-nav\"\n\t\t}\n\t}\n}\n\nexport const root: RootView = new RootView()\n"]}