{"version":3,"file":"CalendarEventEditDialog.js","sourceRoot":"","sources":["../../../../../../src/calendar-app/calendar/gui/eventeditor-view/CalendarEventEditDialog.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This file contains the functions used to set up and tear down edit dialogs for calendar events.\n *\n * they're not responsible for upholding invariants or ensure valid events (CalendarEventModel.editModels\n * and CalendarEventEditView do that), but know what additional information to ask the user before saving\n * and which methods to call to save the changes.\n */\n\nimport { Dialog } from \"../../../../common/gui/base/Dialog.js\"\nimport { lang, MaybeTranslation } from \"../../../../common/misc/LanguageViewModel.js\"\nimport { ButtonAttrs, ButtonType } from \"../../../../common/gui/base/Button.js\"\nimport { Keys } from \"../../../../common/api/common/TutanotaConstants.js\"\nimport { AlarmInterval, getStartOfTheWeekOffsetForUser, getTimeFormatForUser, parseAlarmInterval } from \"../../../../common/calendar/date/CalendarUtils.js\"\nimport { client } from \"../../../../common/misc/ClientDetector.js\"\nimport { assertNotNull, noOp, Thunk } from \"@tutao/tutanota-utils\"\nimport { PosRect } from \"../../../../common/gui/base/Dropdown.js\"\nimport { Mail } from \"../../../../common/api/entities/tutanota/TypeRefs.js\"\nimport type { HtmlEditor } from \"../../../../common/gui/editor/HtmlEditor.js\"\nimport { locator } from \"../../../../common/api/main/CommonLocator.js\"\nimport { CalendarEventEditView, EditorPages } from \"./CalendarEventEditView.js\"\nimport { askIfShouldSendCalendarUpdatesToAttendees } from \"../CalendarGuiUtils.js\"\nimport { CalendarEventIdentity, CalendarEventModel, EventSaveResult } from \"../eventeditor-model/CalendarEventModel.js\"\nimport { ProgrammingError } from \"../../../../common/api/common/error/ProgrammingError.js\"\nimport { UpgradeRequiredError } from \"../../../../common/api/main/UpgradeRequiredError.js\"\nimport { showPlanUpgradeRequiredDialog } from \"../../../../common/misc/SubscriptionDialogs.js\"\nimport { convertTextToHtml } from \"../../../../common/misc/Formatter.js\"\nimport { UserError } from \"../../../../common/api/main/UserError.js\"\nimport { showUserError } from \"../../../../common/misc/ErrorHandlerImpl.js\"\nimport { theme } from \"../../../../common/gui/theme.js\"\nimport stream from \"mithril/stream\"\n\nimport { handleRatingByEvent } from \"../../../../common/ratings/InAppRatingDialog.js\"\n\nconst enum ConfirmationResult {\n\tCancel,\n\tContinue,\n}\n\ntype EditDialogOkHandler = (posRect: PosRect, finish: Thunk) => Promise<unknown>\n\nexport class EventEditorDialog {\n\tprivate currentPage: stream<EditorPages> = stream(EditorPages.MAIN)\n\tprivate dialog: Dialog | null = null\n\tprivate headerDom: HTMLElement | null = null\n\n\tconstructor() {}\n\n\tprivate left(): ButtonAttrs[] {\n\t\tif (this.currentPage() === EditorPages.MAIN) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"cancel_action\",\n\t\t\t\t\tclick: () => this.dialog?.close(),\n\t\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t\t},\n\t\t\t]\n\t\t}\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: \"back_action\",\n\t\t\t\tclick: () => this.currentPage(EditorPages.MAIN),\n\t\t\t\ttype: ButtonType.Secondary,\n\t\t\t},\n\t\t]\n\t}\n\n\tprivate right(okAction: (dom: HTMLElement) => unknown): ButtonAttrs[] {\n\t\tif (this.currentPage() === EditorPages.MAIN) {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"save_action\",\n\t\t\t\t\tclick: (event: MouseEvent, dom: HTMLElement) => okAction(dom),\n\t\t\t\t\ttype: ButtonType.Primary,\n\t\t\t\t},\n\t\t\t]\n\t\t}\n\n\t\treturn []\n\t}\n\n\t/**\n\t * the generic way to open any calendar edit dialog. the caller should know what to do after the\n\t * dialog is closed.\n\t */\n\tasync showCalendarEventEditDialog(model: CalendarEventModel, responseMail: Mail | null, handler: EditDialogOkHandler): Promise<void> {\n\t\tconst recipientsSearch = await locator.recipientsSearchModel()\n\t\tconst { HtmlEditor } = await import(\"../../../../common/gui/editor/HtmlEditor.js\")\n\t\tconst groupSettings = locator.logins.getUserController().userSettingsGroupRoot.groupSettings\n\n\t\tconst groupColors: Map<Id, string> = groupSettings.reduce((acc, gc) => {\n\t\t\tacc.set(gc.group, gc.color)\n\t\t\treturn acc\n\t\t}, new Map())\n\n\t\tconst defaultAlarms: Map<Id, AlarmInterval[]> = groupSettings.reduce((acc, gc) => {\n\t\t\tacc.set(\n\t\t\t\tgc.group,\n\t\t\t\tgc.defaultAlarmsList.map((alarm) => parseAlarmInterval(alarm.trigger)),\n\t\t\t)\n\t\t\treturn acc\n\t\t}, new Map())\n\n\t\tconst descriptionText = convertTextToHtml(model.editModels.description.content)\n\t\tconst descriptionEditor: HtmlEditor = new HtmlEditor()\n\t\t\t.setShowOutline(true)\n\t\t\t.setMinHeight(200)\n\t\t\t.setEnabled(true)\n\t\t\t// We only set it once, we don't viewModel on every change, that would be slow\n\t\t\t.setValue(descriptionText)\n\n\t\tconst okAction = (dom: HTMLElement) => {\n\t\t\tmodel.editModels.description.content = descriptionEditor.getTrimmedValue()\n\t\t\thandler(dom.getBoundingClientRect(), () => dialog.close())\n\t\t}\n\n\t\tconst summary = model.editModels.summary.content\n\t\tconst heading = summary.trim().length > 0 ? lang.makeTranslation(\"summary\", summary) : \"createEvent_label\"\n\n\t\tconst navigationCallback = (targetPage: EditorPages) => {\n\t\t\tthis.currentPage(targetPage)\n\t\t}\n\n\t\tconst dialog: Dialog = Dialog.editMediumDialog(\n\t\t\t{\n\t\t\t\tleft: this.left.bind(this),\n\t\t\t\tmiddle: heading,\n\t\t\t\tright: this.right.bind(this, okAction),\n\t\t\t\tcreate: (dom) => {\n\t\t\t\t\tthis.headerDom = dom\n\t\t\t\t},\n\t\t\t},\n\t\t\tCalendarEventEditView,\n\t\t\t{\n\t\t\t\tmodel,\n\t\t\t\trecipientsSearch,\n\t\t\t\tdescriptionEditor,\n\t\t\t\tstartOfTheWeekOffset: getStartOfTheWeekOffsetForUser(locator.logins.getUserController().userSettingsGroupRoot),\n\t\t\t\ttimeFormat: getTimeFormatForUser(locator.logins.getUserController().userSettingsGroupRoot),\n\t\t\t\tgroupColors,\n\t\t\t\tdefaultAlarms,\n\t\t\t\tnavigationCallback,\n\t\t\t\tcurrentPage: this.currentPage,\n\t\t\t},\n\t\t\t{\n\t\t\t\theight: \"100%\",\n\t\t\t\t\"background-color\": theme.navigation_bg,\n\t\t\t},\n\t\t)\n\t\t\t.addShortcut({\n\t\t\t\tkey: Keys.ESC,\n\t\t\t\texec: () => dialog.close(),\n\t\t\t\thelp: \"close_alt\",\n\t\t\t})\n\t\t\t.addShortcut({\n\t\t\t\tkey: Keys.S,\n\t\t\t\tctrlOrCmd: true,\n\t\t\t\texec: () => okAction(assertNotNull(this.headerDom, \"headerDom was null\")),\n\t\t\t\thelp: \"save_action\",\n\t\t\t})\n\n\t\tif (client.isMobileDevice()) {\n\t\t\t// Prevent focusing text field automatically on mobile. It opens keyboard and you don't see all details.\n\t\t\tdialog.setFocusOnLoadFunction(noOp)\n\t\t}\n\n\t\tthis.dialog = dialog\n\n\t\tdialog.show()\n\t}\n\n\t/**\n\t * show an edit dialog for an event that does not exist on the server yet (or anywhere else)\n\t *\n\t * will unconditionally send invites on save.\n\t * @param model the calendar event model used to edit and save the event\n\t */\n\tasync showNewCalendarEventEditDialog(model: CalendarEventModel): Promise<void> {\n\t\tlet finished = false\n\n\t\tconst okAction: EditDialogOkHandler = async (posRect, finish) => {\n\t\t\t/** new event, so we always want to send invites. */\n\t\t\tmodel.editModels.whoModel.shouldSendUpdates = true\n\t\t\tif (finished) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst result = await model.apply()\n\t\t\t\tif (result === EventSaveResult.Saved) {\n\t\t\t\t\tfinished = true\n\t\t\t\t\tfinish()\n\n\t\t\t\t\tawait handleRatingByEvent()\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof UserError) {\n\t\t\t\t\t// noinspection ES6MissingAwait\n\t\t\t\t\tshowUserError(e)\n\t\t\t\t} else if (e instanceof UpgradeRequiredError) {\n\t\t\t\t\tawait showPlanUpgradeRequiredDialog(e.plans)\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.showCalendarEventEditDialog(model, null, okAction)\n\t}\n\n\t/**\n\t * show a dialog that allows to edit a calendar event that already exists.\n\t *\n\t * on save, will validate external passwords, account type and user intent before actually saving and sending updates/invites/cancellations.\n\t *\n\t * @param model the calendar event model used to edit & save the event\n\t * @param identity the identity of the event to edit\n\t * @param responseMail a mail containing an invite and/or update for this event in case we need to reply to the organizer\n\t */\n\tasync showExistingCalendarEventEditDialog(model: CalendarEventModel, identity: CalendarEventIdentity, responseMail: Mail | null = null): Promise<void> {\n\t\tlet finished = false\n\n\t\tif (identity.uid == null) {\n\t\t\tthrow new ProgrammingError(\"tried to edit existing event without uid, this is impossible for certain edit operations.\")\n\t\t}\n\n\t\tconst okAction: EditDialogOkHandler = async (posRect, finish) => {\n\t\t\tif (finished || (await this.askUserIfUpdatesAreNeededOrCancel(model)) === ConfirmationResult.Cancel) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst result = await model.apply()\n\t\t\t\tif (result === EventSaveResult.Saved || result === EventSaveResult.NotFound) {\n\t\t\t\t\tfinished = true\n\t\t\t\t\tfinish()\n\n\t\t\t\t\t// Inform the user that the event was deleted, avoiding misunderstanding that the event was saved\n\t\t\t\t\tif (result === EventSaveResult.NotFound) Dialog.message(\"eventNoLongerExists_msg\")\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof UserError) {\n\t\t\t\t\t// noinspection ES6MissingAwait\n\t\t\t\t\tshowUserError(e)\n\t\t\t\t} else if (e instanceof UpgradeRequiredError) {\n\t\t\t\t\tawait showPlanUpgradeRequiredDialog(e.plans)\n\t\t\t\t} else {\n\t\t\t\t\tthrow e\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait this.showCalendarEventEditDialog(model, responseMail, okAction)\n\t}\n\n\t/** if there are update worthy changes on the model, ask the user what to do with them.\n\t * @returns {ConfirmationResult} Cancel if the whole process should be cancelled, Continue if the user selected whether to send updates and the saving\n\t * should proceed.\n\t * */\n\tasync askUserIfUpdatesAreNeededOrCancel(model: CalendarEventModel): Promise<ConfirmationResult> {\n\t\tif (model.isAskingForUpdatesNeeded()) {\n\t\t\tswitch (await askIfShouldSendCalendarUpdatesToAttendees()) {\n\t\t\t\tcase \"yes\":\n\t\t\t\t\tmodel.editModels.whoModel.shouldSendUpdates = true\n\t\t\t\t\tbreak\n\t\t\t\tcase \"no\":\n\t\t\t\t\tbreak\n\t\t\t\tcase \"cancel\":\n\t\t\t\t\tconsole.log(\"not saving event: user cancelled update sending.\")\n\t\t\t\t\treturn ConfirmationResult.Cancel\n\t\t\t}\n\t\t}\n\n\t\treturn ConfirmationResult.Continue\n\t}\n}\n"]}