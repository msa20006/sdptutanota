{"version":3,"file":"CalendarInvites.js","sourceRoot":"","sources":["../../../../../src/calendar-app/calendar/view/CalendarInvites.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseCalendarFile } from \"../../../common/calendar/import/CalendarImporter.js\"\nimport type { CalendarEvent, CalendarEventAttendee, File as TutanotaFile, Mail, MailboxProperties } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { locator } from \"../../../common/api/main/CommonLocator.js\"\nimport { CalendarAttendeeStatus, CalendarMethod, ConversationType, FeatureType, getAsEnumValue } from \"../../../common/api/common/TutanotaConstants.js\"\nimport { assert, assertNotNull, clone, filterInt, noOp, Require } from \"@tutao/tutanota-utils\"\nimport { findFirstPrivateCalendar } from \"../../../common/calendar/date/CalendarUtils.js\"\nimport { CalendarNotificationSender } from \"./CalendarNotificationSender.js\"\nimport { Dialog } from \"../../../common/gui/base/Dialog.js\"\nimport { UserError } from \"../../../common/api/main/UserError.js\"\nimport { DataFile } from \"../../../common/api/common/DataFile.js\"\nimport { findAttendeeInAddresses } from \"../../../common/api/common/utils/CommonCalendarUtils.js\"\nimport { Recipient } from \"../../../common/api/common/recipients/Recipient.js\"\nimport { CalendarEventModel, CalendarOperation, EventType } from \"../gui/eventeditor-model/CalendarEventModel.js\"\nimport { CalendarNotificationModel } from \"../gui/eventeditor-model/CalendarNotificationModel.js\"\nimport { ResolveMode } from \"../../../common/api/main/RecipientsModel.js\"\nimport { isCustomizationEnabledForCustomer } from \"../../../common/api/common/utils/CustomerUtils.js\"\nimport { getEventType } from \"../gui/CalendarGuiUtils.js\"\nimport { CalendarModel } from \"../model/CalendarModel.js\"\nimport { LoginController } from \"../../../common/api/main/LoginController.js\"\nimport type { MailboxDetail, MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { SendMailModel } from \"../../../common/mailFunctionality/SendMailModel.js\"\nimport { RecipientField } from \"../../../common/mailFunctionality/SharedMailUtils.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel.js\"\n\n// not picking the status directly from CalendarEventAttendee because it's a NumberString\nexport type Guest = Recipient & { status: CalendarAttendeeStatus }\n\nexport type ParsedIcalFileContent =\n\t| {\n\t\t\tmethod: CalendarMethod\n\t\t\tevents: Array<CalendarEvent>\n\t\t\tuid: string\n\t  }\n\t| None\n\nasync function getParsedEvent(fileData: DataFile): Promise<ParsedIcalFileContent> {\n\ttry {\n\t\tconst { contents, method } = await parseCalendarFile(fileData)\n\t\tconst uid = contents[0].event.uid\n\t\tif (uid == null) return null\n\t\tassert(!contents.some((c) => c.event.uid !== uid), \"received invite with multiple events, but mismatched UIDs\")\n\t\treturn {\n\t\t\tevents: contents.map((c) => c.event),\n\t\t\tuid,\n\t\t\tmethod: getAsEnumValue(CalendarMethod, method) || CalendarMethod.PUBLISH,\n\t\t}\n\t} catch (e) {\n\t\tconsole.log(e)\n\t\treturn null\n\t}\n}\n\nexport async function showEventDetails(event: CalendarEvent, eventBubbleRect: ClientRect, mail: Mail | null): Promise<void> {\n\tconst [latestEvent, { CalendarEventPopup }, { CalendarEventPreviewViewModel }, { htmlSanitizer }] = await Promise.all([\n\t\tgetLatestEvent(event),\n\t\timport(\"../gui/eventpopup/CalendarEventPopup.js\"),\n\t\timport(\"../gui/eventpopup/CalendarEventPreviewViewModel.js\"),\n\t\timport(\"../../../common/misc/HtmlSanitizer.js\"),\n\t])\n\n\tlet eventType: EventType\n\tlet editModelsFactory: (mode: CalendarOperation) => Promise<CalendarEventModel | null>\n\tlet hasBusinessFeature: boolean\n\tlet ownAttendee: CalendarEventAttendee | null = null\n\tconst lazyIndexEntry = async () => (latestEvent.uid != null ? locator.calendarFacade.getEventsByUid(latestEvent.uid) : null)\n\tif (!locator.logins.getUserController().isInternalUser()) {\n\t\t// external users cannot delete/edit events as they have no calendar.\n\t\teventType = EventType.EXTERNAL\n\t\teditModelsFactory = () => new Promise(noOp)\n\t\thasBusinessFeature = false\n\t} else {\n\t\tconst [calendarInfos, mailboxDetails, customer] = await Promise.all([\n\t\t\t(await locator.calendarModel()).getCalendarInfos(),\n\t\t\tlocator.mailboxModel.getUserMailboxDetails(),\n\t\t\tlocator.logins.getUserController().loadCustomer(),\n\t\t])\n\t\tconst mailboxProperties = await locator.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot)\n\t\tconst ownMailAddresses = mailboxProperties.mailAddressProperties.map(({ mailAddress }) => mailAddress)\n\t\townAttendee = findAttendeeInAddresses(latestEvent.attendees, ownMailAddresses)\n\t\teventType = getEventType(latestEvent, calendarInfos, ownMailAddresses, locator.logins.getUserController())\n\t\teditModelsFactory = (mode: CalendarOperation) => locator.calendarEventModel(mode, latestEvent, mailboxDetails, mailboxProperties, mail)\n\t\thasBusinessFeature =\n\t\t\tisCustomizationEnabledForCustomer(customer, FeatureType.BusinessFeatureEnabled) || (await locator.logins.getUserController().isNewPaidPlan())\n\t}\n\n\tconst viewModel = new CalendarEventPreviewViewModel(\n\t\tlatestEvent,\n\t\tawait locator.calendarModel(),\n\t\teventType,\n\t\thasBusinessFeature,\n\t\townAttendee,\n\t\tlazyIndexEntry,\n\t\teditModelsFactory,\n\t)\n\tnew CalendarEventPopup(viewModel, eventBubbleRect, htmlSanitizer).show()\n}\n\nexport async function getEventsFromFile(file: TutanotaFile, invitedConfidentially: boolean): Promise<ParsedIcalFileContent> {\n\tconst dataFile = await locator.fileController.getAsDataFile(file)\n\tconst contents = await getParsedEvent(dataFile)\n\tfor (const event of contents?.events ?? []) {\n\t\tevent.invitedConfidentially = invitedConfidentially\n\t}\n\treturn contents\n}\n\n/**\n * Returns the latest version for the given event by uid and recurrenceId. If the event is not in\n * any calendar (because it has not been stored yet, e.g. in case of invite)\n * the given event is returned.\n */\nexport async function getLatestEvent(event: CalendarEvent): Promise<CalendarEvent> {\n\tconst uid = event.uid\n\tif (uid == null) return event\n\tconst existingEvents = await locator.calendarFacade.getEventsByUid(uid)\n\n\t// If the file we are opening is newer than the one which we have on the server, update server version.\n\t// Should not happen normally but can happen when e.g. reply and update were sent one after another before we accepted\n\t// the invite. Then accepting first invite and then opening update should give us updated version.\n\tconst existingEvent =\n\t\tevent.recurrenceId == null\n\t\t\t? existingEvents?.progenitor // the progenitor does not have a recurrence id and is always first in uid index\n\t\t\t: existingEvents?.alteredInstances.find((e) => e.recurrenceId === event.recurrenceId)\n\n\tif (existingEvent == null) return event\n\n\tif (filterInt(existingEvent.sequence) < filterInt(event.sequence)) {\n\t\tconst calendarModel = await locator.calendarModel()\n\t\treturn await calendarModel.updateEventWithExternal(existingEvent, event)\n\t} else {\n\t\treturn existingEvent\n\t}\n}\n\nexport const enum ReplyResult {\n\tReplyNotSent,\n\tReplySent,\n}\n\nexport class CalendarInviteHandler {\n\tconstructor(\n\t\tprivate readonly mailboxModel: MailboxModel,\n\t\tprivate readonly calendarModel: CalendarModel,\n\t\tprivate readonly logins: LoginController,\n\t\tprivate readonly calendarNotificationSender: CalendarNotificationSender,\n\t\tprivate sendMailModelFactory: (mailboxDetails: MailboxDetail, mailboxProperties: MailboxProperties) => Promise<SendMailModel>,\n\t) {}\n\n\t/**\n\t * Sends a quick reply for the given event and saves the event to the first private calendar.\n\t * @param event the CalendarEvent to respond to, will be serialized and sent back with updated status, then saved.\n\t * @param attendee the attendee that should respond to the mail\n\t * @param decision the new status of the attendee\n\t * @param previousMail the mail to respond to\n\t */\n\tasync replyToEventInvitation(\n\t\tevent: CalendarEvent,\n\t\tattendee: CalendarEventAttendee,\n\t\tdecision: CalendarAttendeeStatus,\n\t\tpreviousMail: Mail,\n\t\tmailboxDetails: MailboxDetail,\n\t): Promise<ReplyResult> {\n\t\tconst eventClone = clone(event)\n\t\tconst foundAttendee = assertNotNull(findAttendeeInAddresses(eventClone.attendees, [attendee.address.address]), \"attendee was not found in event clone\")\n\t\tfoundAttendee.status = decision\n\n\t\tconst notificationModel = new CalendarNotificationModel(this.calendarNotificationSender, this.logins)\n\t\t//NOTE: mailDetails are getting passed through because the calendar does not have access to the mail folder structure\n\t\t//\twhich is needed to find mailboxdetails by mail. This may be fixed by static mail ids which are being worked on currently.\n\t\t//  This function is only called by EventBanner from the mail app so this should be okay.\n\t\tconst responseModel = await this.getResponseModelForMail(previousMail, mailboxDetails, attendee.address.address)\n\n\t\ttry {\n\t\t\tawait notificationModel.send(eventClone, [], { responseModel, inviteModel: null, cancelModel: null, updateModel: null })\n\t\t} catch (e) {\n\t\t\tif (e instanceof UserError) {\n\t\t\t\tawait Dialog.message(lang.makeTranslation(\"confirm_msg\", e.message))\n\t\t\t\treturn ReplyResult.ReplyNotSent\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}\n\t\tconst calendars = await this.calendarModel.getCalendarInfos()\n\t\tconst type = getEventType(event, calendars, [attendee.address.address], this.logins.getUserController())\n\t\tif (type === EventType.SHARED_RO || type === EventType.LOCKED) {\n\t\t\t// if the Event type is shared read only, the event will be updated by the response, trying to update the calendar here will result in error\n\t\t\t// since there is no write permission. (Same issue can happen with locked, no write permission)\n\t\t\treturn ReplyResult.ReplySent\n\t\t}\n\t\tconst calendar = findFirstPrivateCalendar(calendars)\n\t\tif (calendar == null) return ReplyResult.ReplyNotSent\n\t\tif (decision !== CalendarAttendeeStatus.DECLINED && eventClone.uid != null) {\n\t\t\tconst dbEvents = await this.calendarModel.getEventsByUid(eventClone.uid)\n\t\t\tawait this.calendarModel.processCalendarEventMessage(\n\t\t\t\tpreviousMail.sender.address,\n\t\t\t\tCalendarMethod.REQUEST,\n\t\t\t\teventClone as Require<\"uid\", CalendarEvent>,\n\t\t\t\t[],\n\t\t\t\tdbEvents ?? { ownerGroup: calendar.group._id, progenitor: null, alteredInstances: [] },\n\t\t\t)\n\t\t}\n\t\treturn ReplyResult.ReplySent\n\t}\n\n\tasync getResponseModelForMail(previousMail: Mail, mailboxDetails: MailboxDetail, responder: string): Promise<SendMailModel | null> {\n\t\t//NOTE: mailDetails are getting passed through because the calendar does not have access to the mail folder structure\n\t\t//\twhich is needed to find mailboxdetails by mail. This may be fixed by static mail ids which are being worked on currently\n\t\tconst mailboxProperties = await this.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot)\n\t\tconst model = await this.sendMailModelFactory(mailboxDetails, mailboxProperties)\n\t\tawait model.initAsResponse(\n\t\t\t{\n\t\t\t\tpreviousMail,\n\t\t\t\tconversationType: ConversationType.REPLY,\n\t\t\t\tsenderMailAddress: responder,\n\t\t\t\trecipients: [],\n\t\t\t\tattachments: [],\n\t\t\t\tsubject: \"\",\n\t\t\t\tbodyText: \"\",\n\t\t\t\treplyTos: [],\n\t\t\t},\n\t\t\tnew Map(),\n\t\t)\n\t\tawait model.addRecipient(RecipientField.TO, previousMail.sender, ResolveMode.Eager)\n\t\t// Send confidential reply to confidential mails and the other way around.\n\t\t// If the contact is removed or the password is not there the user would see an error but they wouldn't be\n\t\t// able to reply anyway (unless they fix it).\n\t\tmodel.setConfidential(previousMail.confidential)\n\t\treturn model\n\t}\n}\n"]}