{"version":3,"file":"CalendarEventModel.js","sourceRoot":"","sources":["../../../../../../src/calendar-app/calendar/gui/eventeditor-model/CalendarEventModel.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This file contains the most important functions and classes to determine the event type, the organizer of the event and possible\n * organizers in accordance with the capabilities for events (see table).\n *\n * The most important restriction is that it is impossible to change the guest list or send updates to attendees on events in\n * calendars you do not own, which means that the event has no organizer (guest list is empty) or that the event has guests\n * and therefore also an organizer that's not us.\n *\n * Capability for events is fairly complicated:\n * Note: \"shared\" calendar means \"not owner of the calendar\". Calendar always looks like personal for the owner.\n * Note: \"has attendees\" applies to events for which invites were already sent. while editing and adding attendees, \"no attendees\" applies.\n * Note: the only organizer that an event can have is the owner of the calendar the event is defined in.\n *\n * | Event State\t\t\t                         || Possible operations\n * | calendar access  | event origin | has attendees || edit details  | edit own attendance | modify attendees | add alarms |\n * |------------------+--------------+---------------++---------------+---------------------+------------------|------------|\n * | own              | calendar     | no            || yes           | n/a                 | yes              | yes        |\n * | own              | invite       | no            || n/a           | n/a                 | n/a              | yes        |\n * | shared rw        | calendar     | no            || yes           | n/a                 | no               | yes        |\n * | shared rw        | invite       | no            || n/a           | n/a                 | n/a              | yes        |\n * | shared ro        | any          | no            || no            | n/a                 | no               | no         |\n * |------------------+--------------+---------------++---------------+---------------------+------------------|------------|\n * | own              | calendar     | yes           || yes           | yes                 | yes              | yes        |\n * | own              | invite       | yes           || no            | yes                 | no               | yes        |\n * | shared rw        | any          | yes           || no            | no                  | no               | yes        |\n * | shared ro        | any          | yes           || no            | no                  | no               | no         |\n *\n * The fairly complicated event edit operation is split into several submodels that are stored on the CalendarEventModel.editModels field.\n * They roughly correspond to the questions of\n * * when and how often the event happens (see CalendarEventWhenModel.ts)\n * * who participates and has access to the event (see CalendarEventWhoModel.ts)\n * * the alarms the current user set for the event (CalendarEventAlarmModel.ts)\n * * what the event is about (description, summary)\n * * where the event takes place (location)\n *\n * These are in descending order of complexity, the last two points are essentially just (rich)text fields.\n *\n * The general flow for editing an event is as follows:\n * * call makeCalendarEventModel (probably via the locator). The most important decision here is what EventType we are dealing with.\n * * edit the properties that need to be edited\n * * call \"saveNewEvent\" or \"updateExistingEvent\" on the CalendarEventModel. internally, this means:\n *   * the model takes the contents of the editModels field and uses them to assemble the result of the edit operation\n *   * the event identity is assigned\n *   * notify the attendees that the CalendarEventWhoModel determined need to be notified\n *   * save the event and its alarms to the server\n *\n * While it's possible to call the save operation multiple times, the intention is to use a new model for each edit operation.\n *\n * Future improvements: CalendarEventModel should probably be several classes with a generic \"save\" and \"editModels\" interface instead\n * of being capable of doing whatever and being controlled by the caller.\n *     * invite: save sends update to organizer, then saves (if it's in own calendar)\n *     * new event: save notifies attendees, saves the event as new.\n *     * existing event: updates/invites/cancels attendees, then updates.\n *     * etc.\n */\n\nimport { AccountType } from \"../../../../common/api/common/TutanotaConstants.js\"\nimport {\n\tCalendarEvent,\n\tCalendarEventAttendee,\n\tcreateCalendarEvent,\n\tcreateEncryptedMailAddress,\n\tEncryptedMailAddress,\n\tMail,\n\tMailboxProperties,\n} from \"../../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { User } from \"../../../../common/api/entities/sys/TypeRefs.js\"\nimport type { MailboxDetail } from \"../../../../common/mailFunctionality/MailboxModel.js\"\nimport {\n\tAlarmInterval,\n\tareRepeatRulesEqual,\n\tDefaultDateProvider,\n\tfindFirstPrivateCalendar,\n\tgetTimeZone,\n\tincrementSequence,\n\tparseAlarmInterval,\n} from \"../../../../common/calendar/date/CalendarUtils.js\"\nimport { arrayEqualsWithPredicate, assertNonNull, assertNotNull, identity, lazy, Require } from \"@tutao/tutanota-utils\"\nimport { cleanMailAddress } from \"../../../../common/api/common/utils/CommonCalendarUtils.js\"\nimport { assertEventValidity, CalendarInfo, CalendarModel } from \"../../model/CalendarModel.js\"\nimport { NotFoundError, PayloadTooLargeError } from \"../../../../common/api/common/error/RestError.js\"\nimport { CalendarNotificationSender } from \"../../view/CalendarNotificationSender.js\"\nimport { SendMailModel } from \"../../../../common/mailFunctionality/SendMailModel.js\"\nimport { UserError } from \"../../../../common/api/main/UserError.js\"\nimport { EntityClient } from \"../../../../common/api/common/EntityClient.js\"\nimport { RecipientsModel } from \"../../../../common/api/main/RecipientsModel.js\"\nimport { LoginController } from \"../../../../common/api/main/LoginController.js\"\nimport m from \"mithril\"\nimport { PartialRecipient } from \"../../../../common/api/common/recipients/Recipient.js\"\nimport { getPasswordStrengthForUser } from \"../../../../common/misc/passwords/PasswordUtils.js\"\nimport { CalendarEventWhenModel } from \"./CalendarEventWhenModel.js\"\nimport { CalendarEventWhoModel } from \"./CalendarEventWhoModel.js\"\nimport { CalendarEventAlarmModel } from \"./CalendarEventAlarmModel.js\"\nimport { SanitizedTextViewModel } from \"../../../../common/misc/SanitizedTextViewModel.js\"\nimport { getStrippedClone, Stripped, StrippedEntity } from \"../../../../common/api/common/utils/EntityUtils.js\"\nimport { UserController } from \"../../../../common/api/main/UserController.js\"\nimport { CalendarNotificationModel, CalendarNotificationSendModels } from \"./CalendarNotificationModel.js\"\nimport { CalendarEventApplyStrategies, CalendarEventModelStrategy } from \"./CalendarEventModelStrategy.js\"\nimport { ProgrammingError } from \"../../../../common/api/common/error/ProgrammingError.js\"\nimport { SimpleTextViewModel } from \"../../../../common/misc/SimpleTextViewModel.js\"\nimport { AlarmInfoTemplate } from \"../../../../common/api/worker/facades/lazy/CalendarFacade.js\"\nimport { getEventType } from \"../CalendarGuiUtils.js\"\nimport { getDefaultSender } from \"../../../../common/mailFunctionality/SharedMailUtils.js\"\n\n/** the type of the event determines which edit operations are available to us. */\nexport const enum EventType {\n\t/** event in our own calendar and we are organizer */\n\tOWN = \"own\",\n\t/** event in shared calendar with read permission */\n\tSHARED_RO = \"shared_ro\",\n\t/** event in shared calendar with write permission, that has no attendees */\n\tSHARED_RW = \"shared_rw\",\n\t/** shared with write permissions, but we can't edit anything but alarms because it has attendees. might be something the calendar owner was invited to. */\n\tLOCKED = \"locked\",\n\t/** invite from calendar invitation which is not stored in calendar yet, or event stored in **own calendar** and we are not organizer. */\n\tINVITE = \"invite\",\n\t/** we are an external user and see an event in our mailbox */\n\tEXTERNAL = \"external\",\n}\n\nexport const enum ReadonlyReason {\n\t/** it's a shared event, so at least the attendees are read-only */\n\tSHARED,\n\t/** this edit operation applies to only part of a series, so attendees and calendar are read-only */\n\tSINGLE_INSTANCE,\n\t/** the organizer is not the current user */\n\tNOT_ORGANIZER,\n\t/** the event cannot be edited for an unspecified reason. This is the default value */\n\tUNKNOWN,\n\t/** we can edit anything here */\n\tNONE,\n}\n\n/**\n * complete calendar event except the parts that define the identity of the event instance (in ical terms) and the technical fields.\n * when the excluded fields are added, this type can be used to set up a series, update a series or reschedule an instance of a series\n * hashedUid is excluded separately since it's not really relevant to the client's logic.\n */\nexport type CalendarEventValues = Omit<Stripped<CalendarEvent>, EventIdentityFieldNames | \"hashedUid\">\n\n/**\n * the parts of a calendar event that define the identity of the event instance.\n */\nexport type CalendarEventIdentity = Pick<Stripped<CalendarEvent>, EventIdentityFieldNames>\n\n/**\n * which parts of a calendar event series to apply an edit operation to.\n * consumers must take care to only use appropriate values for the operation\n * in question (ie removing a repeat rule from a single event in a series is nonsensical)\n */\nexport const enum CalendarOperation {\n\t/** create a new event */\n\tCreate,\n\t/** only apply an edit to only one particular instance of the series */\n\tEditThis,\n\t/** Delete a single instance from a series, altered or not */\n\tDeleteThis,\n\t/** apply the edit operation to all instances of the series*/\n\tEditAll,\n\t/** delete the whole series */\n\tDeleteAll,\n}\n\n/**\n * get the models enabling consistent calendar event updates.\n */\nexport async function makeCalendarEventModel(\n\toperation: CalendarOperation,\n\tinitialValues: Partial<CalendarEvent>,\n\trecipientsModel: RecipientsModel,\n\tcalendarModel: CalendarModel,\n\tlogins: LoginController,\n\tmailboxDetail: MailboxDetail,\n\tmailboxProperties: MailboxProperties,\n\tsendMailModelFactory: lazy<SendMailModel>,\n\tnotificationSender: CalendarNotificationSender,\n\tentityClient: EntityClient,\n\tresponseTo: Mail | null,\n\tzone: string = getTimeZone(),\n\tshowProgress: ShowProgressCallback = identity,\n\tuiUpdateCallback: () => void = m.redraw,\n): Promise<CalendarEventModel | null> {\n\tconst { htmlSanitizer } = await import(\"../../../../common/misc/HtmlSanitizer.js\")\n\tconst ownMailAddresses = getOwnMailAddressesWithDefaultSenderInFront(logins, mailboxDetail, mailboxProperties)\n\tif (operation === CalendarOperation.DeleteAll || operation === CalendarOperation.EditAll) {\n\t\tassertNonNull(initialValues.uid, \"tried to edit/delete all with nonexistent uid\")\n\t\tconst index = await calendarModel.getEventsByUid(initialValues.uid)\n\t\tif (index != null && index.progenitor != null) {\n\t\t\tinitialValues = index.progenitor\n\t\t}\n\t}\n\n\tconst user = logins.getUserController().user\n\tconst [alarms, calendars] = await Promise.all([\n\t\tresolveAlarmsForEvent(initialValues.alarmInfos ?? [], calendarModel, user),\n\t\tcalendarModel.getCalendarInfos(),\n\t])\n\tconst selectedCalendar = getPreselectedCalendar(calendars, initialValues)\n\tconst getPasswordStrength = (password: string, recipientInfo: PartialRecipient) =>\n\t\tgetPasswordStrengthForUser(password, recipientInfo, mailboxDetail, logins)\n\n\tconst eventType = getEventType(\n\t\tinitialValues,\n\t\tcalendars,\n\t\townMailAddresses.map(({ address }) => address),\n\t\tlogins.getUserController(),\n\t)\n\n\tconst makeEditModels = (initializationEvent: CalendarEvent) => ({\n\t\twhenModel: new CalendarEventWhenModel(initializationEvent, zone, uiUpdateCallback),\n\t\twhoModel: new CalendarEventWhoModel(\n\t\t\tinitializationEvent,\n\t\t\teventType,\n\t\t\toperation,\n\t\t\tcalendars,\n\t\t\tselectedCalendar,\n\t\t\tlogins.getUserController(),\n\t\t\toperation === CalendarOperation.Create,\n\t\t\townMailAddresses,\n\t\t\trecipientsModel,\n\t\t\tresponseTo,\n\t\t\tgetPasswordStrength,\n\t\t\tsendMailModelFactory,\n\t\t\tuiUpdateCallback,\n\t\t),\n\t\talarmModel: new CalendarEventAlarmModel(eventType, alarms, new DefaultDateProvider(), uiUpdateCallback),\n\t\tlocation: new SimpleTextViewModel(initializationEvent.location, uiUpdateCallback),\n\t\tsummary: new SimpleTextViewModel(initializationEvent.summary, uiUpdateCallback),\n\t\tdescription: new SanitizedTextViewModel(initializationEvent.description, htmlSanitizer, uiUpdateCallback),\n\t})\n\n\tconst recurrenceIds = async (uid?: string) =>\n\t\tuid == null ? [] : (await calendarModel.getEventsByUid(uid))?.alteredInstances.map((i) => i.recurrenceId) ?? []\n\tconst notificationModel = new CalendarNotificationModel(notificationSender, logins)\n\tconst applyStrategies = new CalendarEventApplyStrategies(calendarModel, logins, notificationModel, recurrenceIds, showProgress, zone)\n\tconst initialOrDefaultValues = Object.assign(makeEmptyCalendarEvent(), initialValues)\n\tconst cleanInitialValues = cleanupInitialValuesForEditing(initialOrDefaultValues)\n\tconst progenitor = () => calendarModel.resolveCalendarEventProgenitor(cleanInitialValues)\n\tconst strategy = await selectStrategy(\n\t\tmakeEditModels,\n\t\tapplyStrategies,\n\t\toperation,\n\t\tprogenitor,\n\t\tcreateCalendarEvent(initialOrDefaultValues),\n\t\tcleanInitialValues,\n\t)\n\treturn strategy && new CalendarEventModel(strategy, eventType, operation, logins.getUserController(), notificationSender, entityClient, calendars)\n}\n\nasync function selectStrategy(\n\tmakeEditModels: (i: StrippedEntity<CalendarEvent>) => CalendarEventEditModels,\n\tapplyStrategies: CalendarEventApplyStrategies,\n\toperation: CalendarOperation,\n\tresolveProgenitor: () => Promise<CalendarEvent | null>,\n\texistingInstanceIdentity: CalendarEvent,\n\tcleanInitialValues: StrippedEntity<CalendarEvent>,\n): Promise<CalendarEventModelStrategy | null> {\n\tlet editModels: CalendarEventEditModels\n\tlet apply: () => Promise<void>\n\tlet mayRequireSendingUpdates: () => boolean\n\tif (operation === CalendarOperation.Create) {\n\t\teditModels = makeEditModels(cleanInitialValues)\n\t\tapply = () => applyStrategies.saveNewEvent(editModels)\n\t\tmayRequireSendingUpdates = () => true\n\t} else if (operation === CalendarOperation.EditThis) {\n\t\tcleanInitialValues.repeatRule = null\n\t\tif (cleanInitialValues.recurrenceId == null) {\n\t\t\tconst progenitor = await resolveProgenitor()\n\t\t\tif (progenitor == null || progenitor.repeatRule == null) {\n\t\t\t\tconsole.warn(\"no repeating progenitor during EditThis operation?\")\n\t\t\t\treturn null\n\t\t\t}\n\t\t\tapply = () =>\n\t\t\t\tapplyStrategies.saveNewAlteredInstance({\n\t\t\t\t\teditModels: editModels,\n\t\t\t\t\teditModelsForProgenitor: makeEditModels(progenitor),\n\t\t\t\t\texistingInstance: existingInstanceIdentity,\n\t\t\t\t\tprogenitor: progenitor,\n\t\t\t\t})\n\t\t\tmayRequireSendingUpdates = () => true\n\t\t\teditModels = makeEditModels(cleanInitialValues)\n\t\t} else {\n\t\t\teditModels = makeEditModels(cleanInitialValues)\n\t\t\tapply = () => applyStrategies.saveExistingAlteredInstance(editModels, existingInstanceIdentity)\n\t\t\tmayRequireSendingUpdates = () => assembleEditResultAndAssignFromExisting(existingInstanceIdentity, editModels, operation).hasUpdateWorthyChanges\n\t\t}\n\t} else if (operation === CalendarOperation.DeleteThis) {\n\t\tif (cleanInitialValues.recurrenceId == null) {\n\t\t\tconst progenitor = await resolveProgenitor()\n\t\t\tif (progenitor == null) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t\teditModels = makeEditModels(progenitor)\n\t\t\tapply = () => applyStrategies.excludeSingleInstance(editModels, existingInstanceIdentity, progenitor)\n\t\t\tmayRequireSendingUpdates = () => true\n\t\t} else {\n\t\t\teditModels = makeEditModels(cleanInitialValues)\n\t\t\tapply = () => applyStrategies.deleteAlteredInstance(editModels, existingInstanceIdentity)\n\t\t\tmayRequireSendingUpdates = () => true\n\t\t}\n\t} else if (operation === CalendarOperation.EditAll) {\n\t\tconst progenitor = await resolveProgenitor()\n\t\tif (progenitor == null) {\n\t\t\treturn null\n\t\t}\n\t\teditModels = makeEditModels(cleanInitialValues)\n\t\tapply = () => applyStrategies.saveEntireExistingEvent(editModels, progenitor)\n\t\tmayRequireSendingUpdates = () => assembleEditResultAndAssignFromExisting(existingInstanceIdentity, editModels, operation).hasUpdateWorthyChanges\n\t} else if (operation === CalendarOperation.DeleteAll) {\n\t\teditModels = makeEditModels(cleanInitialValues)\n\t\tapply = () => applyStrategies.deleteEntireExistingEvent(editModels, existingInstanceIdentity)\n\t\tmayRequireSendingUpdates = () => assembleEditResultAndAssignFromExisting(existingInstanceIdentity, editModels, operation).hasUpdateWorthyChanges\n\t} else {\n\t\tthrow new ProgrammingError(`unknown calendar operation: ${operation}`)\n\t}\n\n\treturn { apply, mayRequireSendingUpdates, editModels }\n}\n\n/** return all the attendees in the list of attendees that are not the given organizer. */\nexport function getNonOrganizerAttendees({\n\torganizer,\n\tattendees,\n}: Partial<Pick<Readonly<CalendarEvent>, \"attendees\" | \"organizer\">>): ReadonlyArray<CalendarEventAttendee> {\n\tif (attendees == null) return []\n\tif (organizer == null) return attendees\n\tconst organizerAddress = cleanMailAddress(organizer.address)\n\treturn attendees.filter((a) => cleanMailAddress(a.address.address) !== organizerAddress) ?? []\n}\n\n/**\n * Determines the event type, the organizer of the event and possible organizers in accordance with the capabilities for events (see table).\n */\nexport class CalendarEventModel {\n\tprocessing: boolean = false\n\n\tget editModels(): CalendarEventEditModels {\n\t\treturn this.strategy.editModels\n\t}\n\n\tconstructor(\n\t\tprivate readonly strategy: CalendarEventModelStrategy,\n\t\tpublic readonly eventType: EventType,\n\t\tpublic readonly operation: CalendarOperation,\n\t\t// UserController already keeps track of user updates, it is better to not have our own reference to the user, we might miss\n\t\t// important updates like premium upgrade\n\t\treadonly userController: UserController,\n\t\tprivate readonly distributor: CalendarNotificationSender,\n\t\tprivate readonly entityClient: EntityClient,\n\t\tprivate readonly calendars: ReadonlyMap<Id, CalendarInfo>,\n\t) {\n\t\tthis.calendars = calendars\n\t}\n\n\tasync apply(): Promise<EventSaveResult> {\n\t\tif (this.userController.user.accountType === AccountType.EXTERNAL) {\n\t\t\tconsole.log(\"did not apply event changes, we're an external user.\")\n\t\t\treturn EventSaveResult.Failed\n\t\t}\n\t\tif (this.processing) {\n\t\t\treturn EventSaveResult.Failed\n\t\t}\n\t\tthis.processing = true\n\n\t\ttry {\n\t\t\tawait this.strategy.apply()\n\t\t\treturn EventSaveResult.Saved\n\t\t} catch (e) {\n\t\t\tif (e instanceof PayloadTooLargeError) {\n\t\t\t\tthrow new UserError(\"requestTooLarge_msg\")\n\t\t\t} else if (e instanceof NotFoundError) {\n\t\t\t\treturn EventSaveResult.NotFound\n\t\t\t} else {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.processing = false\n\t\t}\n\t}\n\n\t/** false if the event is only partially or not at all writable */\n\tisFullyWritable(): boolean {\n\t\treturn this.eventType === EventType.OWN || this.eventType === EventType.SHARED_RW\n\t}\n\n\t/** some edit operations apply to the whole event series.\n\t * they are not possible if the operation the model was created with only applies to a single instance.\n\t *\n\t * returns true if such operations can be attempted.\n\t * */\n\tcanEditSeries(): boolean {\n\t\treturn this.operation !== CalendarOperation.EditThis && (this.eventType === EventType.OWN || this.eventType === EventType.SHARED_RW)\n\t}\n\n\tcanChangeCalendar(): boolean {\n\t\treturn (\n\t\t\tthis.operation !== CalendarOperation.EditThis &&\n\t\t\t(this.eventType === EventType.OWN || this.eventType === EventType.SHARED_RW || this.eventType === EventType.INVITE)\n\t\t)\n\t}\n\n\tisAskingForUpdatesNeeded(): boolean {\n\t\treturn (\n\t\t\tthis.eventType === EventType.OWN &&\n\t\t\t!this.editModels.whoModel.shouldSendUpdates &&\n\t\t\tthis.editModels.whoModel.initiallyHadOtherAttendees &&\n\t\t\tthis.strategy.mayRequireSendingUpdates()\n\t\t)\n\t}\n\n\tgetReadonlyReason(): ReadonlyReason {\n\t\tconst isFullyWritable = this.isFullyWritable()\n\t\tconst canEditSeries = this.canEditSeries()\n\t\tconst canModifyGuests = this.editModels.whoModel.canModifyGuests\n\n\t\tif (isFullyWritable && canEditSeries && canModifyGuests) return ReadonlyReason.NONE\n\t\tif (!isFullyWritable && !canEditSeries && !canModifyGuests) return ReadonlyReason.NOT_ORGANIZER\n\t\t// fully writable and !canModifyGuests happens on shared calendars\n\t\tif (!canModifyGuests) {\n\t\t\tif (canEditSeries) {\n\t\t\t\treturn ReadonlyReason.SHARED\n\t\t\t} else {\n\t\t\t\treturn ReadonlyReason.SINGLE_INSTANCE\n\t\t\t}\n\t\t}\n\t\treturn ReadonlyReason.UNKNOWN\n\t}\n}\n\n/**\n *\n * @param now the new event.\n * @param previous the event as it originally was\n * @returns {boolean} true if changes were made to the event that justify sending updates to attendees.\n * exported for testing\n */\nexport function eventHasChanged(now: CalendarEvent, previous: Partial<CalendarEvent> | null): boolean {\n\tif (previous == null) return true\n\t// we do not check for the sequence number (as it should be changed with every update) or the default instance properties such as _id\n\treturn (\n\t\tnow.startTime.getTime() !== previous?.startTime?.getTime() ||\n\t\tnow.description !== previous?.description ||\n\t\tnow.summary !== previous.summary ||\n\t\tnow.location !== previous.location ||\n\t\tnow.endTime.getTime() !== previous?.endTime?.getTime() ||\n\t\tnow.invitedConfidentially !== previous.invitedConfidentially ||\n\t\t// should this be a hard error, we never want to change the uid or compare events with different UIDs?\n\t\tnow.uid !== previous.uid ||\n\t\t!areRepeatRulesEqual(now.repeatRule, previous?.repeatRule ?? null) ||\n\t\t!arrayEqualsWithPredicate(\n\t\t\tnow.attendees,\n\t\t\tprevious?.attendees ?? [],\n\t\t\t(a1, a2) => a1.status === a2.status && cleanMailAddress(a1.address.address) === cleanMailAddress(a2.address.address),\n\t\t) || // we ignore the names\n\t\t(now.organizer !== previous.organizer && now.organizer?.address !== previous.organizer?.address)\n\t) // we ignore the names\n}\n\n/**\n * construct a usable calendar event from the result of one or more edit operations.\n * returns the new alarms separately so they can be set up\n * on the server before assigning the ids.\n * @param models\n */\nexport function assembleCalendarEventEditResult(models: CalendarEventEditModels): {\n\teventValues: CalendarEventValues\n\tnewAlarms: ReadonlyArray<AlarmInfoTemplate>\n\tsendModels: CalendarNotificationSendModels\n\tcalendar: CalendarInfo\n} {\n\tconst whenResult = models.whenModel.result\n\tconst whoResult = models.whoModel.result\n\tconst alarmResult = models.alarmModel.result\n\tconst summary = models.summary.content\n\tconst description = models.description.content\n\tconst location = models.location.content\n\n\treturn {\n\t\teventValues: {\n\t\t\t// when?\n\t\t\tstartTime: whenResult.startTime,\n\t\t\tendTime: whenResult.endTime,\n\t\t\trepeatRule: whenResult.repeatRule,\n\t\t\t// what?\n\t\t\tsummary,\n\t\t\tdescription,\n\t\t\t// where?\n\t\t\tlocation,\n\t\t\t// who?\n\t\t\tinvitedConfidentially: whoResult.isConfidential,\n\t\t\torganizer: whoResult.organizer,\n\t\t\tattendees: whoResult.attendees,\n\t\t\t// fields related to the event instance's identity are excluded.\n\t\t\t// reminders. will be set up separately.\n\t\t\talarmInfos: [],\n\t\t},\n\t\tnewAlarms: alarmResult.alarms,\n\t\tsendModels: whoResult,\n\t\tcalendar: whoResult.calendar,\n\t}\n}\n\n/** assemble the edit result from an existing event edit operation and apply some fields from the original event\n * @param existingEvent the event we will be updating and take id, ownerGroup and permissions from as well as the uid, sequence to increment and recurrenceId\n * @param editModels the editModels providing the values for the new event.\n * @param operation determines the source of the recurrenceId - in the case of EditThis it's the start time of the original event, otherwise existingEvents' recurrenceId is used.\n */\nexport function assembleEditResultAndAssignFromExisting(existingEvent: CalendarEvent, editModels: CalendarEventEditModels, operation: CalendarOperation) {\n\tconst assembleResult = assembleCalendarEventEditResult(editModels)\n\tconst { uid: oldUid, sequence: oldSequence, recurrenceId } = existingEvent\n\tconst newEvent = assignEventIdentity(assembleResult.eventValues, {\n\t\tuid: oldUid!,\n\t\tsequence: incrementSequence(oldSequence),\n\t\trecurrenceId: operation === CalendarOperation.EditThis && recurrenceId == null ? existingEvent.startTime : recurrenceId,\n\t})\n\n\tassertEventValidity(newEvent)\n\n\tnewEvent._id = existingEvent._id\n\tnewEvent._ownerGroup = existingEvent._ownerGroup\n\tnewEvent._permissions = existingEvent._permissions\n\n\treturn {\n\t\thasUpdateWorthyChanges: eventHasChanged(newEvent, existingEvent),\n\t\tnewEvent,\n\t\tcalendar: assembleResult.calendar,\n\t\tnewAlarms: assembleResult.newAlarms,\n\t\tsendModels: assembleResult.sendModels,\n\t}\n}\n\n/**\n * combine event values with the fields required to identify a particular instance of the event.\n * @param values\n * @param identity sequence (default \"0\") and recurrenceId (default null) are optional, but the uid must be specified.\n */\nexport function assignEventIdentity(values: CalendarEventValues, identity: Require<\"uid\", Partial<CalendarEventIdentity>>): CalendarEvent {\n\treturn createCalendarEvent({\n\t\tsequence: \"0\",\n\t\trecurrenceId: null,\n\t\thashedUid: null,\n\t\t...values,\n\t\t...identity,\n\t})\n}\n\nasync function resolveAlarmsForEvent(alarms: CalendarEvent[\"alarmInfos\"], calendarModel: CalendarModel, user: User): Promise<Array<AlarmInterval>> {\n\tconst alarmInfos = await calendarModel.loadAlarms(alarms, user)\n\treturn alarmInfos.map(({ alarmInfo }) => parseAlarmInterval(alarmInfo.trigger))\n}\n\nfunction makeEmptyCalendarEvent(): StrippedEntity<CalendarEvent> {\n\treturn {\n\t\talarmInfos: [],\n\t\tinvitedConfidentially: null,\n\t\thashedUid: null,\n\t\tuid: null,\n\t\trecurrenceId: null,\n\t\tendTime: new Date(),\n\t\tsummary: \"\",\n\t\tstartTime: new Date(),\n\t\tlocation: \"\",\n\t\trepeatRule: null,\n\t\tdescription: \"\",\n\t\tattendees: [],\n\t\torganizer: null,\n\t\tsequence: \"\",\n\t}\n}\n\nfunction cleanupInitialValuesForEditing(initialValues: StrippedEntity<CalendarEvent>): CalendarEvent {\n\t// the event we got passed may already have some technical fields assigned, so we remove them.\n\tconst stripped = getStrippedClone<CalendarEvent>(initialValues)\n\tconst result = createCalendarEvent(stripped)\n\n\t// remove the alarm infos from the result, they don't contain any useful information for the editing operation.\n\t// selected alarms are returned in the edit result separate from the event.\n\tresult.alarmInfos = []\n\n\treturn result\n}\n\n/** whether to close dialog */\nexport const enum EventSaveResult {\n\tSaved,\n\tFailed,\n\tNotFound,\n}\n\n/** generic function that asynchronously returns whatever type the caller passed in, but not necessarily the same promise. */\nexport type ShowProgressCallback = <T>(input: Promise<T>) => Promise<T>\n\n/** exported for testing */\nexport type CalendarEventEditModels = {\n\twhenModel: CalendarEventWhenModel\n\twhoModel: CalendarEventWhoModel\n\talarmModel: CalendarEventAlarmModel\n\tlocation: SimpleTextViewModel\n\tsummary: SimpleTextViewModel\n\tdescription: SanitizedTextViewModel\n}\n\n/** the fields that together with the start time point to a specific version and instance of an event */\ntype EventIdentityFieldNames = \"uid\" | \"sequence\" | \"recurrenceId\"\n\n/**\n * return the calendar the given event belongs to, if any, otherwise get the first one from the given calendars.\n * @param calendars must contain at least one calendar\n * @param event\n */\nfunction getPreselectedCalendar(calendars: ReadonlyMap<Id, CalendarInfo>, event?: Partial<CalendarEvent> | null): CalendarInfo {\n\tconst ownerGroup: string | null = event?._ownerGroup ?? null\n\tif (ownerGroup == null || !calendars.has(ownerGroup)) {\n\t\tconst calendar = findFirstPrivateCalendar(calendars)\n\t\tif (!calendar) throw new Error(\"Can't find a private calendar\")\n\t\treturn calendar\n\t} else {\n\t\treturn assertNotNull(calendars.get(ownerGroup), \"invalid ownergroup for existing event?\")\n\t}\n}\n\n/** get the list of mail addresses that are enabled for this mailbox with the configured sender names\n * will put the sender that matches the default sender address in the first spot. this enables us to use\n * it as an easy default without having to pass it around separately */\nfunction getOwnMailAddressesWithDefaultSenderInFront(\n\tlogins: LoginController,\n\tmailboxDetail: MailboxDetail,\n\tmailboxProperties: MailboxProperties,\n): Array<EncryptedMailAddress> {\n\tconst defaultSender = getDefaultSender(logins, mailboxDetail)\n\tconst ownMailAddresses = mailboxProperties.mailAddressProperties.map(({ mailAddress, senderName }) =>\n\t\tcreateEncryptedMailAddress({\n\t\t\taddress: mailAddress,\n\t\t\tname: senderName,\n\t\t}),\n\t)\n\tconst defaultIndex = ownMailAddresses.findIndex((address) => address.address === defaultSender)\n\tif (defaultIndex < 0) {\n\t\t// should not happen\n\t\treturn ownMailAddresses\n\t}\n\tconst defaultEncryptedMailAddress = ownMailAddresses.splice(defaultIndex, 1)\n\treturn [...defaultEncryptedMailAddress, ...ownMailAddresses]\n}\n"]}