{"version":3,"file":"CalendarEventWhenModel.js","sourceRoot":"","sources":["../../../../../../src/calendar-app/calendar/gui/eventeditor-model/CalendarEventWhenModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { CalendarEventTimes, getAllDayDateUTC, getEventWithDefaultTimes, isAllDayEvent } from \"../../../../common/api/common/utils/CommonCalendarUtils.js\"\nimport { Time } from \"../../../../common/calendar/date/Time.js\"\nimport { DateTime, DurationLikeObject } from \"luxon\"\nimport {\n\tareExcludedDatesEqual,\n\tareRepeatRulesEqual,\n\tgetAllDayDateUTCFromZone,\n\tgetEventEnd,\n\tgetEventStart,\n\tgetRepeatEndTimeForDisplay,\n\tgetStartOfDayWithZone,\n\tgetStartOfNextDayWithZone,\n\tincrementByRepeatPeriod,\n} from \"../../../../common/calendar/date/CalendarUtils.js\"\nimport { assertNotNull, clone, filterInt, incrementDate, noOp, TIMESTAMP_ZERO_YEAR } from \"@tutao/tutanota-utils\"\nimport { CalendarEvent, CalendarRepeatRule } from \"../../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { Stripped } from \"../../../../common/api/common/utils/EntityUtils.js\"\nimport { EndType, RepeatPeriod } from \"../../../../common/api/common/TutanotaConstants.js\"\nimport { createDateWrapper, createRepeatRule, RepeatRule } from \"../../../../common/api/entities/sys/TypeRefs.js\"\nimport { UserError } from \"../../../../common/api/main/UserError.js\"\n\nexport type CalendarEventWhenModelResult = CalendarEventTimes & {\n\trepeatRule: CalendarRepeatRule | null\n}\n\n/*\n * start, end, repeat, exclusions, reschedulings\n */\nexport class CalendarEventWhenModel {\n\tprivate repeatRule: CalendarRepeatRule | null = null\n\tprivate _isAllDay: boolean\n\n\t/** represents the start of day of the start date in local time. */\n\tprivate _startDate: Date\n\t/** represents the start of day of the end date in local time. */\n\tprivate _endDate: Date\n\n\t/** we're setting time to null on all-day events to be able to have the default time set when someone unsets the all-day flag. */\n\tprivate _startTime: Time | null\n\tprivate _endTime: Time | null\n\n\tconstructor(private readonly initialValues: Partial<Stripped<CalendarEvent>>, readonly zone: string, private readonly uiUpdateCallback: () => void = noOp) {\n\t\tlet initialTimes: CalendarEventTimes\n\t\tif (initialValues.startTime == null || initialValues.endTime == null) {\n\t\t\tconst defaultTimes = getEventWithDefaultTimes(initialValues.startTime)\n\t\t\tinitialTimes = {\n\t\t\t\tstartTime: initialValues.startTime ?? defaultTimes.startTime,\n\t\t\t\tendTime: initialValues.endTime ?? defaultTimes.endTime,\n\t\t\t}\n\t\t} else {\n\t\t\tinitialTimes = {\n\t\t\t\tstartTime: initialValues.startTime,\n\t\t\t\tendTime: initialValues.endTime,\n\t\t\t}\n\t\t}\n\n\t\t// zero out the second and millisecond part of start/end time. can't use the getters for startTime and endTime\n\t\t// because they depend on all-day status.\n\t\tinitialTimes.startTime = DateTime.fromJSDate(initialTimes.startTime, { zone }).set({ second: 0, millisecond: 0 }).toJSDate()\n\t\tinitialTimes.endTime = DateTime.fromJSDate(initialTimes.endTime, { zone }).set({ second: 0, millisecond: 0 }).toJSDate()\n\n\t\tthis._isAllDay = isAllDayEvent(initialTimes)\n\t\tthis.repeatRule = clone(initialValues.repeatRule ?? null)\n\n\t\tconst start = getEventStart(initialTimes, this.zone)\n\t\tconst end = getEventEnd(initialTimes, this.zone)\n\t\tif (this._isAllDay) {\n\t\t\tthis._startTime = null\n\t\t\tthis._endTime = null\n\t\t\tthis._startDate = getStartOfDayWithZone(DateTime.fromJSDate(start, { zone }).toJSDate(), zone)\n\t\t\tthis._endDate = incrementDate(end, -1)\n\t\t} else {\n\t\t\tthis._startTime = Time.fromDateTime(DateTime.fromJSDate(start, { zone }))\n\t\t\tthis._endTime = Time.fromDateTime(DateTime.fromJSDate(end, { zone }))\n\t\t\tthis._startDate = getStartOfDayWithZone(DateTime.fromJSDate(start, { zone }).toJSDate(), zone)\n\t\t\tthis._endDate = getStartOfDayWithZone(DateTime.fromJSDate(end, { zone }).toJSDate(), zone)\n\t\t}\n\t}\n\n\t/**\n\t * set whether this event should be considered all-day\n\t *\n\t * will also modify the excluded dates if there are any to still exclude the\n\t * same occurrence dates.\n\t */\n\tset isAllDay(value: boolean) {\n\t\tif (this._isAllDay === value) return\n\n\t\tif ((!value && this._startTime == null) || this._endTime == null) {\n\t\t\tconst defaultTimes = getEventWithDefaultTimes()\n\t\t\tthis._startTime = Time.fromDateTime(DateTime.fromJSDate(defaultTimes.startTime, this))\n\t\t\tthis._endTime = Time.fromDateTime(DateTime.fromJSDate(defaultTimes.endTime, this))\n\t\t}\n\n\t\tif (this.repeatRule == null) {\n\t\t\tthis._isAllDay = value\n\t\t} else {\n\t\t\tconst previousEndDate = this.repeatEndDateForDisplay\n\t\t\tthis._isAllDay = value\n\t\t\tthis.repeatEndDateForDisplay = previousEndDate\n\n\t\t\tif (value) {\n\t\t\t\t// we want to keep excluded dates if all we do is switching between all-day and normal event\n\t\t\t\tthis.repeatRule.excludedDates = this.repeatRule.excludedDates.map(({ date }) => createDateWrapper({ date: getAllDayDateUTC(date) }))\n\t\t\t} else {\n\t\t\t\tconst startTime = this.startTime\n\t\t\t\tthis.repeatRule.excludedDates = this.repeatRule.excludedDates.map(({ date }) => createDateWrapper({ date: startTime.toDate(date) }))\n\t\t\t}\n\t\t}\n\n\t\tthis.uiUpdateCallback()\n\t}\n\n\tget isAllDay() {\n\t\treturn this._isAllDay\n\t}\n\n\t/**\n\t * the current start time (hour:minutes) of the event in the local time zone.\n\t * will return 00:00 for all-day events.\n\t */\n\tget startTime(): Time {\n\t\treturn this._isAllDay ? new Time(0, 0) : this._startTime!\n\t}\n\n\t/**\n\t * set the time portion of the events start time. the date portion will not be modified.\n\t * will also adjust the end time accordingly to keep the event length the same.\n\t *  */\n\tset startTime(v: Time | null) {\n\t\tif (v == null || this._isAllDay) return\n\t\tconst startTime = this._startTime!\n\t\tconst delta = ((v.hour - startTime.hour) * 60 + (v.minute - startTime.minute)) * 60000\n\t\tif (delta === 0) return\n\t\tthis.rescheduleEvent({ millisecond: delta })\n\t\tthis.uiUpdateCallback()\n\t}\n\n\t/**\n\t * the current end time (hour:minutes) of the event in the local time zone.\n\t * will return 00:00 for all-day events independently of the time zone.\n\t */\n\tget endTime(): Time {\n\t\treturn this._isAllDay ? new Time(0, 0) : this._endTime!\n\t}\n\n\t/**\n\t * set the time portion of the events end time. the date portion will not be modified.\n\t *\n\t */\n\tset endTime(v: Time | null) {\n\t\tif (v == null || this._isAllDay) return\n\t\tconst startTime = this._startTime!\n\t\tconst currentStart = startTime.toDate(this._startDate)\n\t\tconst newEnd = v.toDate(this._endDate)\n\t\tif (newEnd < currentStart) return\n\t\tthis._endTime = v\n\t\tthis.uiUpdateCallback()\n\t}\n\n\t/** return the duration of the event in minutes */\n\tget duration(): { minutes: number } {\n\t\tconst { startTime, endTime } = this.getTimes()\n\t\tconst duration = DateTime.fromJSDate(endTime).diff(DateTime.fromJSDate(startTime))\n\t\treturn { minutes: duration.as(\"minutes\") }\n\t}\n\n\t/** set the duration of the event in minutes, effectively setting the endDate and endTime. */\n\tset duration(value: { minutes: number }) {\n\t\tif (value.minutes < 1) return\n\t\tconst diff = { minutes: this.duration.minutes - value.minutes }\n\t\tconst oldEndTime = this.endTime.toDateTime(this.endDate, this.zone)\n\t\tconst newEndTime = oldEndTime.plus(diff)\n\t\tthis._endDate = getStartOfDayWithZone(newEndTime.toJSDate(), this.zone)\n\t\tif (!this._isAllDay) {\n\t\t\tthis._endTime = Time.fromDateTime(newEndTime)\n\t\t}\n\t}\n\n\t/**\n\t * get the start time of the day this event currently starts in UTC, in local time\n\t * for display purposes.\n\t *\n\t * will always be a start of day in local time.\n\t */\n\tget startDate(): Date {\n\t\treturn this._startDate\n\t}\n\n\t/**\n\t * set the date portion of the events start time (value's time component is ignored)\n\t * will also update the end date and move it the same amount of days as the start date was moved.\n\t *\n\t * setting a date before 1970 will result in the date being set to CURRENT_YEAR\n\t * */\n\tset startDate(value: Date) {\n\t\tif (value.getTime() === this._startDate.getTime()) {\n\t\t\treturn\n\t\t}\n\n\t\t// The custom ID for events is derived from the unix timestamp, and sorting\n\t\t// the negative ids is a challenge we decided not to\n\t\t// tackle because it is a rare case and only getting rarer.\n\t\tif (value.getTime() < TIMESTAMP_ZERO_YEAR) {\n\t\t\tconst thisYear = new Date().getFullYear()\n\t\t\tvalue.setFullYear(thisYear)\n\t\t}\n\t\tconst valueDateTime = DateTime.fromJSDate(value, { zone: this.zone })\n\t\t// asking for the rest in milliseconds causes luxon to give us an integer number of\n\t\t// days in the duration which is what we want.\n\t\tconst diff = valueDateTime.diff(DateTime.fromJSDate(this._startDate, this), [\"day\", \"millisecond\"])\n\t\tif (diff.as(\"millisecond\") === 0) return\n\t\t// we only want to add days, not milliseconds.\n\t\tthis.rescheduleEvent({ days: diff.days })\n\t\tthis.uiUpdateCallback()\n\t}\n\n\t/**\n\t * for display purposes.\n\t *\n\t * will always be a start of day in local time.\n\t */\n\tget endDate(): Date {\n\t\treturn this._endDate\n\t}\n\n\t/**\n\t * set the date portion of the events end time (value's time component is ignored)\n\t *\n\t * */\n\tset endDate(value: Date) {\n\t\tif (value.getTime() === this._endDate.getTime()) {\n\t\t\treturn\n\t\t}\n\t\tconst startTime = this._startTime ?? new Time(0, 0)\n\t\tconst endTime = this._endTime ?? new Time(0, 0)\n\t\tconst currentStart = startTime.toDate(this._startDate)\n\t\tconst newEnd = endTime.toDate(value)\n\t\tif (newEnd < currentStart) {\n\t\t\tconsole.log(\"tried to set the end date to before the start date\")\n\t\t\treturn\n\t\t}\n\t\tthis._endDate = DateTime.fromJSDate(value, this).set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).toJSDate()\n\t\tthis.uiUpdateCallback()\n\t}\n\n\tget repeatPeriod(): RepeatPeriod | null {\n\t\treturn this.repeatRule ? (this.repeatRule.frequency as RepeatPeriod) : null\n\t}\n\n\tset repeatPeriod(repeatPeriod: RepeatPeriod | null) {\n\t\tif (this.repeatRule?.frequency === repeatPeriod) {\n\t\t\t// repeat null => we will return if repeatPeriod is null\n\t\t\t// repeat not null => we return if the repeat period did not change.\n\t\t\treturn\n\t\t} else if (repeatPeriod == null) {\n\t\t\tthis.repeatRule = null\n\t\t} else if (this.repeatRule != null) {\n\t\t\tthis.repeatRule.frequency = repeatPeriod\n\t\t} else {\n\t\t\t// new repeat rule, populate with default values.\n\t\t\tthis.repeatRule = this.initialValues.repeatRule\n\t\t\t\t? clone(this.initialValues.repeatRule)\n\t\t\t\t: createRepeatRule({\n\t\t\t\t\t\tinterval: \"1\",\n\t\t\t\t\t\tendType: EndType.Never,\n\t\t\t\t\t\tendValue: \"1\",\n\t\t\t\t\t\tfrequency: RepeatPeriod.DAILY,\n\t\t\t\t\t\texcludedDates: [],\n\t\t\t\t\t\ttimeZone: \"\",\n\t\t\t\t\t\tadvancedRules: [],\n\t\t\t\t  })\n\t\t\tthis.repeatRule.frequency = repeatPeriod\n\t\t}\n\t\tthis.uiUpdateCallback()\n\t}\n\n\t/**\n\t * get the current interval this series repeats in.\n\t *\n\t * if the event is not set to\n\t */\n\tget repeatInterval(): number {\n\t\tif (!this.repeatRule?.interval) return 1\n\t\treturn filterInt(this.repeatRule?.interval)\n\t}\n\n\t/**\n\t * set the event to occur on every nth of its repeat period (ie every second, third, fourth day/month/year...).\n\t * setting it to something less than 1 will set the interval to 1\n\t * @param interval\n\t */\n\tset repeatInterval(interval: number) {\n\t\tif (interval < 1) interval = 1\n\t\tconst stringInterval = String(interval)\n\t\tif (this.repeatRule && this.repeatRule?.interval !== stringInterval) {\n\t\t\tthis.repeatRule.interval = stringInterval\n\t\t}\n\n\t\tthis.uiUpdateCallback()\n\t}\n\n\t/**\n\t * get the current way for the event series to end.\n\t */\n\tget repeatEndType(): EndType {\n\t\treturn (this.repeatRule?.endType ?? EndType.Never) as EndType\n\t}\n\n\t/**\n\t * set the way the event series will stop repeating. if this causes a change in the event,\n\t * the endValue will be set to the default for the selected EndType.\n\t *\n\t * @param endType\n\t */\n\tset repeatEndType(endType: EndType) {\n\t\tif (!this.repeatRule) {\n\t\t\t// event does not repeat, no changes necessary\n\t\t\treturn\n\t\t}\n\n\t\tif (this.repeatRule.endType === endType) {\n\t\t\t// event series end is already set to the requested value\n\t\t\treturn\n\t\t}\n\n\t\tthis.repeatRule.endType = endType\n\n\t\tswitch (endType) {\n\t\t\tcase EndType.UntilDate:\n\t\t\t\tthis.repeatRule.endValue = getDefaultEndDateEndValue({ startTime: this._startDate, endTime: this._endDate }, this.zone)\n\t\t\t\treturn\n\t\t\tcase EndType.Count:\n\t\t\tcase EndType.Never:\n\t\t\t\tthis.repeatRule.endValue = getDefaultEndCountValue()\n\t\t}\n\n\t\tthis.uiUpdateCallback()\n\t}\n\n\t/**\n\t * get the current maximum number of repeats. if the event is not set to repeat or\n\t * end after number of occurrences, returns the default max repeat number.\n\t */\n\tget repeatEndOccurrences(): number {\n\t\tif (this.repeatRule?.endType === EndType.Count && this.repeatRule?.endValue) {\n\t\t\treturn filterInt(this.repeatRule?.endValue)\n\t\t} else {\n\t\t\treturn filterInt(getDefaultEndCountValue())\n\t\t}\n\t}\n\n\t/**\n\t * set the max number of repeats for the event series. if the event is not set to repeat or\n\t * not set to repeat a maximum number of times, this is a no-op.\n\t * @param endValue\n\t */\n\tset repeatEndOccurrences(endValue: number) {\n\t\tconst stringEndValue = String(endValue)\n\t\tif (this.repeatRule && this.repeatRule.endType === EndType.Count && this.repeatRule.endValue !== stringEndValue) {\n\t\t\tthis.repeatRule.endValue = stringEndValue\n\t\t}\n\t\tthis.uiUpdateCallback()\n\t}\n\n\t/**\n\t * get the date after which the event series will stop repeating.\n\t *\n\t * returns the default value of a month after the start date if the event is not\n\t * set to stop repeating after a certain date.\n\t */\n\tget repeatEndDateForDisplay(): Date {\n\t\tif (this.repeatRule?.endType === EndType.UntilDate) {\n\t\t\treturn getRepeatEndTimeForDisplay(this.repeatRule, this.isAllDay, this.zone)\n\t\t} else {\n\t\t\treturn new Date(filterInt(getDefaultEndDateEndValue({ startTime: this._startDate, endTime: this._endDate }, this.zone)))\n\t\t}\n\t}\n\n\t/**\n\t * set the date after which the event series ends. if the event does not repeat or the series is\n\t * not set to end after a date, this is a no-op.\n\t *\n\t * @param newRepeatEndDate the new end date, as displayed in local time zone.\n\t */\n\tset repeatEndDateForDisplay(newRepeatEndDate: Date) {\n\t\tif (this.repeatRule == null || this.repeatRule.endType !== EndType.UntilDate) {\n\t\t\treturn\n\t\t}\n\n\t\tconst repeatEndDate = incrementByRepeatPeriod(newRepeatEndDate, RepeatPeriod.DAILY, 1, this.zone)\n\t\tconst times = this.getTimes()\n\t\tif (repeatEndDate < getEventStart(times, this.zone)) {\n\t\t\tthrow new UserError(\"startAfterEnd_label\")\n\t\t}\n\n\t\t// We have to save repeatEndDate in the same way we save start/end times because if one is timezone\n\t\t// dependent and one is not then we have interesting bugs in edge cases (event created in -11 could\n\t\t// end on another date in +12). So for all day events end date is UTC-encoded all day event and for\n\t\t// regular events it is just a timestamp.\n\t\tconst numberEndDate = (this.isAllDay ? getAllDayDateUTCFromZone(repeatEndDate, this.zone) : repeatEndDate).getTime()\n\t\tthis.repeatRule.endValue = String(numberEndDate)\n\t\tthis.uiUpdateCallback()\n\t}\n\n\tget excludedDates(): ReadonlyArray<Date> {\n\t\treturn this.repeatRule?.excludedDates.map(({ date }) => date) ?? []\n\t}\n\n\t/**\n\t * calling this adds an exclusion for the event instance starting at dateToExclude to the repeat rule of the event,\n\t * which will cause the instance to not be rendered or fire alarms.\n\t * Exclusions are the start date/time of the event (as a utc timestamp)\n\t *\n\t * the list of exclusions is maintained sorted from earliest to latest.\n\t */\n\texcludeDate(date: Date): void {\n\t\tif (this.repeatRule == null) {\n\t\t\tconsole.log(\"tried to add an exclusion for an event without a repeat rule. should probably delete the event.\")\n\t\t\treturn\n\t\t}\n\t\tconst timeToInsert = date.getTime()\n\t\tlet insertionIndex = -1\n\t\tfor (const [index, { date }] of this.repeatRule.excludedDates.entries()) {\n\t\t\t// the date is already excluded, no need to do anything\n\t\t\tif (date.getTime() === timeToInsert) {\n\t\t\t\treturn\n\t\t\t} else if (date.getTime() > timeToInsert) {\n\t\t\t\tinsertionIndex = index\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// as of now, our maximum repeat frequency is 1/day. this means that we could truncate this to the current day (no time)\n\t\t// but then we run into problems with time zones, since we'd like to delete the n-th occurrence of an event, but detect\n\t\t// if an event is excluded by the start of the utc day it falls on, which may depend on time zone if it's truncated to the local start of day\n\t\t// on which the exclusion is created.\n\t\tconst wrapperToInsert = createDateWrapper({ date })\n\t\tif (insertionIndex < 0) {\n\t\t\tthis.repeatRule.excludedDates.push(wrapperToInsert)\n\t\t} else {\n\t\t\tthis.repeatRule.excludedDates.splice(insertionIndex, 0, wrapperToInsert)\n\t\t}\n\t}\n\n\t/**\n\t * completely delete all exclusions. will cause the event to be rendered and fire alarms on all\n\t * occurrences as dictated by its repeat rule.\n\t */\n\tdeleteExcludedDates(): void {\n\t\tif (!this.repeatRule) return\n\t\tthis.repeatRule.excludedDates.length = 0\n\t}\n\n\t/**\n\t * change start and end time and dates of the event by a fixed amount.\n\t * @param diff an object containing a duration in luxons year/quarter/... format\n\t */\n\trescheduleEvent(diff: DurationLikeObject): void {\n\t\tconst oldStartTime = this.startTime.toDateTime(this.startDate, this.zone)\n\t\tconst oldEndTime = this.endTime.toDateTime(this.endDate, this.zone)\n\t\tconst newStartDate = oldStartTime.plus(diff)\n\t\tconst newEndDate = oldEndTime.plus(diff)\n\n\t\tthis._startDate = getStartOfDayWithZone(newStartDate.toJSDate(), this.zone)\n\t\tthis._endDate = getStartOfDayWithZone(newEndDate.toJSDate(), this.zone)\n\t\tif (!this._isAllDay) {\n\t\t\tthis._startTime = Time.fromDateTime(newStartDate)\n\t\t\tthis._endTime = Time.fromDateTime(newEndDate)\n\t\t}\n\t}\n\n\tget result(): CalendarEventWhenModelResult {\n\t\t// we got a stripped repeat rule, so we re-create a fresh one with all fields but overwrite it with our values.\n\t\tconst repeatRule: RepeatRule | null = this.repeatRule\n\t\t\t? {\n\t\t\t\t\t...createRepeatRule({\n\t\t\t\t\t\ttimeZone: \"\",\n\t\t\t\t\t\texcludedDates: [],\n\t\t\t\t\t\tendType: \"0\",\n\t\t\t\t\t\tendValue: null,\n\t\t\t\t\t\tinterval: \"0\",\n\t\t\t\t\t\tfrequency: \"0\",\n\t\t\t\t\t\tadvancedRules: [],\n\t\t\t\t\t}),\n\t\t\t\t\t...this.repeatRule,\n\t\t\t\t\ttimeZone: this.zone,\n\t\t\t  }\n\t\t\t: null\n\t\tthis.deleteExcludedDatesIfNecessary(repeatRule)\n\t\tconst { startTime, endTime } = this.getTimes()\n\t\treturn { startTime, endTime, repeatRule }\n\t}\n\n\t/**\n\t * get the JS dates where the event starts and ends as they would be saved on the server (display may vary)\n\t * @param startDate base date to use for the start date\n\t * @param endDate base date to use for the end date.\n\t * @private\n\t */\n\tprivate getTimes(\n\t\t{ startDate, endDate }: { startDate: Date; endDate: Date } = {\n\t\t\tstartDate: this._startDate,\n\t\t\tendDate: this._endDate,\n\t\t},\n\t): CalendarEventTimes {\n\t\tif (this._isAllDay) {\n\t\t\tconst startTime = getAllDayDateUTCFromZone(startDate, this.zone)\n\t\t\tconst endTime = getAllDayDateUTCFromZone(getStartOfNextDayWithZone(endDate, this.zone), this.zone)\n\t\t\treturn { startTime, endTime }\n\t\t} else {\n\t\t\tconst startTime = this._startTime!.toDateTime(getStartOfDayWithZone(startDate, this.zone), this.zone).toJSDate()\n\t\t\tconst endTime = this._endTime!.toDateTime(getStartOfDayWithZone(endDate, this.zone), this.zone).toJSDate()\n\t\t\treturn { startTime, endTime }\n\t\t}\n\t}\n\n\t/**\n\t * ideally, we want to delete exclusions after an edit operation only when necessary.\n\t * @private\n\t */\n\tprivate deleteExcludedDatesIfNecessary(newRepeat: RepeatRule | null) {\n\t\tif (newRepeat == null) return\n\t\tconst oldRepeat = this.initialValues.repeatRule ?? null\n\t\t// if excluded dates have changed,\n\t\tif (!areRepeatRulesEqual(newRepeat, oldRepeat) && areExcludedDatesEqual(newRepeat?.excludedDates ?? [], oldRepeat?.excludedDates ?? [])) {\n\t\t\tnewRepeat.excludedDates = []\n\t\t\treturn\n\t\t}\n\t\tif (this.initialValues.startTime == null) {\n\t\t\treturn\n\t\t}\n\t\tconst { startTime } = this.getTimes()\n\t\tif (startTime.getTime() !== this.initialValues.startTime.getTime()) {\n\t\t\tnewRepeat.excludedDates = []\n\t\t\treturn\n\t\t}\n\t}\n}\n\n/**\n * create the default repeat end for an event series that ends on a date\n */\nexport function getDefaultEndDateEndValue({ startTime }: CalendarEventTimes, timeZone: string): string {\n\t// one month after the event's start time in the local time zone.\n\treturn String(incrementByRepeatPeriod(startTime, RepeatPeriod.MONTHLY, 1, timeZone).getTime())\n}\n\n/**\n * get the default repeat end for an event series that ends after number of repeats\n */\nexport function getDefaultEndCountValue(): string {\n\treturn \"10\"\n}\n\nexport function repeatRuleWithExcludedAlteredInstances(progenitor: CalendarEvent, recurrenceIds: ReadonlyArray<Date>, timeZone: string): CalendarRepeatRule {\n\tconst whenModel = new CalendarEventWhenModel(progenitor, timeZone)\n\tfor (const recurrenceId of recurrenceIds) {\n\t\twhenModel.excludeDate(recurrenceId)\n\t}\n\treturn assertNotNull(whenModel.result.repeatRule, \"tried to exclude altered instance on progenitor without repeat rule!\")\n}\n"]}