{"version":3,"file":"CalendarEventWhoModel.js","sourceRoot":"","sources":["../../../../../../src/calendar-app/calendar/gui/eventeditor-model/CalendarEventWhoModel.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tCalendarEvent,\n\tCalendarEventAttendee,\n\tContact,\n\tcreateCalendarEventAttendee,\n\tcreateEncryptedMailAddress,\n\tEncryptedMailAddress,\n\tGroupSettings,\n\tMail,\n} from \"../../../../common/api/entities/tutanota/TypeRefs.js\"\nimport { PartialRecipient, Recipient, RecipientType } from \"../../../../common/api/common/recipients/Recipient.js\"\nimport { haveSameId, Stripped } from \"../../../../common/api/common/utils/EntityUtils.js\"\nimport { cleanMailAddress, findRecipientWithAddress } from \"../../../../common/api/common/utils/CommonCalendarUtils.js\"\nimport { assertNotNull, clone, defer, DeferredObject, findAll, lazy, noOp, trisectingDiff } from \"@tutao/tutanota-utils\"\nimport { CalendarAttendeeStatus, ConversationType, ShareCapability } from \"../../../../common/api/common/TutanotaConstants.js\"\nimport { RecipientsModel, ResolveMode } from \"../../../../common/api/main/RecipientsModel.js\"\nimport { Guest } from \"../../view/CalendarInvites.js\"\nimport { isSecurePassword } from \"../../../../common/misc/passwords/PasswordUtils.js\"\nimport { SendMailModel } from \"../../../../common/mailFunctionality/SendMailModel.js\"\nimport { CalendarInfo } from \"../../model/CalendarModel.js\"\nimport { hasCapabilityOnGroup } from \"../../../../common/sharing/GroupUtils.js\"\nimport { UserController } from \"../../../../common/api/main/UserController.js\"\nimport { UserError } from \"../../../../common/api/main/UserError.js\"\nimport { CalendarOperation, EventType } from \"./CalendarEventModel.js\"\nimport { ProgrammingError } from \"../../../../common/api/common/error/ProgrammingError.js\"\nimport { CalendarNotificationSendModels } from \"./CalendarNotificationModel.js\"\nimport { getContactDisplayName } from \"../../../../common/contactsFunctionality/ContactUtils.js\"\nimport { RecipientField } from \"../../../../common/mailFunctionality/SharedMailUtils.js\"\nimport { hasSourceUrl } from \"../../../../common/calendar/date/CalendarUtils\"\nimport { lang } from \"../../../../common/misc/LanguageViewModel.js\"\n\n/** there is no point in returning recipients, the SendMailModel will re-resolve them anyway. */\ntype AttendanceModelResult = {\n\tattendees: CalendarEvent[\"attendees\"]\n\torganizer: CalendarEvent[\"organizer\"]\n\tisConfidential: boolean\n\t/** which calendar should the result be assigned to */\n\tcalendar: CalendarInfo\n} & CalendarNotificationSendModels\n\n/** model to decouple attendee list edit operations from other changes to a calendar event.\n * tracks external passwords, attendance status, list of attendees, recipients to invite,\n * update, cancel and the calendar the event is in.\n */\nexport class CalendarEventWhoModel {\n\t/** we need to resolve recipients to know if we need to show an external password field. */\n\tprivate readonly resolvedRecipients: Map<string, Recipient> = new Map()\n\tprivate pendingRecipients: number = 0\n\tprivate _recipientsSettled: DeferredObject<void> = defer()\n\t/** it's possible that the consumer cares about all the recipient information being resolved, but that's only possible in an async way. */\n\tget recipientsSettled(): Promise<void> {\n\t\treturn this._recipientsSettled.promise\n\t}\n\n\t/** external password for an external attendee with an address */\n\tprivate readonly externalPasswords: Map<string, string> = new Map()\n\n\t/** to know who to update, we need to know who was already on the guest list.\n\t * we keep the attendees in maps for deduplication, keyed by their address.\n\t * */\n\tprivate initialAttendees: Map<string, CalendarEventAttendee> = new Map()\n\tprivate initialOwnAttendeeStatus: CalendarAttendeeStatus | null = null\n\t/** we only show the send update checkbox if there are attendees that require updates from us. */\n\treadonly initiallyHadOtherAttendees: boolean\n\t/** the current list of attendees. */\n\tprivate _attendees: Map<string, CalendarEventAttendee> = new Map()\n\t/** organizer MUST be set if _ownAttendee is - we're either both, we're invited and someone else is organizer or there are no guests at all. */\n\tprivate _organizer: CalendarEventAttendee | null = null\n\t/** the attendee that has one of our mail addresses. MUST NOT be in _attendees */\n\tprivate _ownAttendee: CalendarEventAttendee | null = null\n\n\tpublic isConfidential: boolean\n\t/**\n\t * whether this user will send updates for this event.\n\t * * this needs to be our event.\n\t * * we need a paid account\n\t * * there need to be changes that require updating the attendees (eg alarms do not)\n\t * * there also need to be attendees that require updates/invites/cancellations/response\n\t */\n\tshouldSendUpdates: boolean = false\n\n\t/**\n\t *\n\t * @param initialValues\n\t * @param eventType\n\t * @param operation the operation the user is currently attempting. we could use recurrenceId on initialvalues for this information, but this is safer.\n\t * @param calendars\n\t * @param _selectedCalendar\n\t * @param userController\n\t * @param isNew whether the event is new (never been saved)\n\t * @param ownMailAddresses an array of the mail addresses this user could be mentioned as as an attendee or organizer.\n\t * @param recipientsModel\n\t * @param responseTo\n\t * @param passwordStrengthModel\n\t * @param sendMailModelFactory\n\t * @param uiUpdateCallback\n\t */\n\tconstructor(\n\t\tinitialValues: Partial<Stripped<CalendarEvent>>,\n\t\tprivate readonly eventType: EventType,\n\t\tprivate readonly operation: CalendarOperation,\n\t\tprivate readonly calendars: ReadonlyMap<Id, CalendarInfo>,\n\t\t/** this should only be relevant to saving so could be put in the apply strategy, but at the moment we restrict attendees depending on the\n\t\t * calendar we're saving to.\n\t\t * think of it as configuring who has access to the event.\n\t\t * */\n\t\tprivate _selectedCalendar: CalendarInfo,\n\t\tprivate readonly userController: UserController,\n\t\tprivate readonly isNew: boolean,\n\t\tprivate readonly ownMailAddresses: ReadonlyArray<EncryptedMailAddress>,\n\t\tprivate readonly recipientsModel: RecipientsModel,\n\t\tprivate readonly responseTo: Mail | null,\n\t\tprivate readonly passwordStrengthModel: (password: string, recipientInfo: PartialRecipient) => number,\n\t\tprivate readonly sendMailModelFactory: lazy<SendMailModel>,\n\t\tprivate readonly uiUpdateCallback: () => void = noOp,\n\t) {\n\t\tthis.setupAttendees(initialValues)\n\t\t// resolve current recipients so that we know what external passwords to display\n\t\tconst resolvePromises = initialValues.attendees?.map((a) => this.resolveAndCacheAddress(a.address)).concat() ?? []\n\t\tif (initialValues.organizer) {\n\t\t\tresolvePromises.push(this.resolveAndCacheAddress(initialValues.organizer))\n\t\t}\n\t\tPromise.all(resolvePromises).then(this.uiUpdateCallback)\n\n\t\tthis.initiallyHadOtherAttendees = this.hasNotifyableOtherAttendees()\n\t\tthis.isConfidential = initialValues.invitedConfidentially ?? false\n\t}\n\n\tset selectedCalendar(v: CalendarInfo) {\n\t\t/**\n\t\t * when changing the calendar of an event, if the user is the organiser\n\t\t * they can link any of their owned calendars(private or shared) to said event\n\t\t * even if the event has guests\n\t\t **/\n\t\tif (!v.userIsOwner && v.shared && this._attendees.size > 0) {\n\t\t\tthrow new ProgrammingError(\"tried to select shared calendar while there are guests.\")\n\t\t} else if (!v.userIsOwner && v.shared && this.isNew && this._organizer != null) {\n\t\t\t// for new events, it's possible to have an organizer but no attendees if you only add yourself.\n\t\t\tthis._organizer = null\n\t\t}\n\t\tthis._selectedCalendar = v\n\t\tthis.uiUpdateCallback()\n\t}\n\n\tget selectedCalendar(): CalendarInfo {\n\t\treturn this._selectedCalendar\n\t}\n\n\t/**\n\t * whether the current user can modify the guest list of the event depending on event type and the calendar it's in.\n\t *\n\t * * at the moment, we can never modify guests when editing only part of a series.\n\t * * selected calendar is our own:\n\t *   * event is invite (we're not organizer): can't modify guest list, any edit operation will be local only.\n\t *   * event is our own: can do what we want.\n\t * * if the selected calendar is a shared one:\n\t *   * ro: don't show editor at all\n\t *   * rw, new event: don't show attendee list editor - we can't invite in shared calendars.\n\t *   * rw, existing event without attendees: not our own calendar, can't invite, don't show attendee list.\n\t *   * rw, existing event with attendees:  this is the case where we can see attendees, but can't edit them.\n\t *                                         but we also can't edit the event since there are attendees and we're\n\t *                                         unable to send updates.\n\t */\n\tget canModifyGuests(): boolean {\n\t\t/**\n\t\t * if the user is the event's organiser and the owner of its linked calendar, the user can modify the guests freely\n\t\t **/\n\t\tconst userIsOwner = this.eventType === EventType.OWN && this.selectedCalendar.userIsOwner\n\t\treturn userIsOwner || !(this.selectedCalendar?.shared || this.eventType === EventType.INVITE || this.operation === CalendarOperation.EditThis)\n\t}\n\n\t/**\n\t * filter the calendars an event can be saved to depending on the event type, attendee status and edit operation.\n\t * Prevent moving the event to another calendar if you only have read permission or if the event has attendees.\n\t * */\n\tgetAvailableCalendars(): ReadonlyArray<CalendarInfo> {\n\t\tconst { groupSettings } = this.userController.userSettingsGroupRoot\n\t\tconst calendarArray = Array.from(this.calendars.values()).filter((cal) => !this.isExternalCalendar(groupSettings, cal.group._id))\n\n\t\tif (this.eventType === EventType.LOCKED || this.operation === CalendarOperation.EditThis) {\n\t\t\treturn [this.selectedCalendar]\n\t\t} else if (this.isNew && this._attendees.size > 0) {\n\t\t\t// if we added guests, we cannot select a shared calendar to create the event.\n\t\t\t/**\n\t\t\t * when changing the calendar of an event, if the user is the organiser\n\t\t\t * they can link any of their owned calendars(private or shared) to said event\n\t\t\t * even if the event has guests\n\t\t\t **/\n\t\t\treturn calendarArray.filter((calendarInfo) => calendarInfo.userIsOwner || !calendarInfo.shared)\n\t\t} else if (this._attendees.size > 0 && this.eventType === EventType.OWN) {\n\t\t\treturn calendarArray.filter((calendarInfo) => calendarInfo.userIsOwner)\n\t\t} else if (this._attendees.size > 0 || this.eventType === EventType.INVITE) {\n\t\t\t// We don't allow inviting in a shared calendar.\n\t\t\t// If we have attendees, we cannot select a shared calendar.\n\t\t\t// We also don't allow accepting invites into shared calendars.\n\t\t\treturn calendarArray.filter((calendarInfo) => !calendarInfo.shared || haveSameId(calendarInfo.group, this.selectedCalendar.group))\n\t\t} else {\n\t\t\treturn calendarArray.filter((calendarInfo) => hasCapabilityOnGroup(this.userController.user, calendarInfo.group, ShareCapability.Write))\n\t\t}\n\t}\n\n\tprivate isExternalCalendar(groupSettings: GroupSettings[], groupId: Id) {\n\t\tconst existingGroupSettings = groupSettings.find((gc) => gc.group === groupId)\n\t\treturn hasSourceUrl(existingGroupSettings)\n\t}\n\n\tprivate async resolveAndCacheAddress(a: PartialRecipient): Promise<void> {\n\t\tif (this.resolvedRecipients.has(a.address)) return\n\t\tthis.pendingRecipients = this.pendingRecipients + 1\n\t\tconst recipient = await this.recipientsModel.resolve(a, ResolveMode.Eager).resolved()\n\t\tthis.cacheRecipient(recipient)\n\t\tthis.pendingRecipients = this.pendingRecipients - 1\n\t\tif (this.pendingRecipients === 0) {\n\t\t\tthis._recipientsSettled.resolve()\n\t\t\tthis._recipientsSettled = defer()\n\t\t}\n\t}\n\n\tprivate cacheRecipient(recipient: Recipient): void {\n\t\tthis.resolvedRecipients.set(recipient.address, recipient)\n\t\tif (recipient.type !== RecipientType.EXTERNAL) return\n\t\tthis.externalPasswords.set(recipient.address, recipient.contact?.presharedPassword ?? \"\")\n\t\tif (recipient.contact != null && this._attendees.has(recipient.address)) {\n\t\t\tconst attendee = this._attendees.get(recipient.address)!\n\t\t\tattendee.address.name = getContactDisplayName(recipient.contact)\n\t\t}\n\t}\n\n\t/**\n\t * internally, we want to keep ourselves and the organizer separate from the other attendees\n\t */\n\tprivate setupAttendees(initialValues: Partial<Stripped<CalendarEvent>>) {\n\t\tconst ownAddresses = this.ownMailAddresses.map((a) => cleanMailAddress(a.address))\n\n\t\t// convert the list of attendees into a map for easier use.\n\t\tfor (const a of initialValues.attendees ?? []) {\n\t\t\tconst attendee = createCalendarEventAttendee({\n\t\t\t\tstatus: a.status,\n\t\t\t\taddress: createEncryptedMailAddress({\n\t\t\t\t\tname: a.address.name,\n\t\t\t\t\taddress: cleanMailAddress(a.address.address),\n\t\t\t\t}),\n\t\t\t})\n\t\t\t// we will remove own attendees + organizer later.\n\t\t\tthis.initialAttendees.set(attendee.address.address, attendee)\n\t\t}\n\n\t\t// get the organizer out of the attendees and into a separate field\n\t\tconst initialOrganizerAddress =\n\t\t\tinitialValues.organizer == null\n\t\t\t\t? null\n\t\t\t\t: createEncryptedMailAddress({\n\t\t\t\t\t\taddress: cleanMailAddress(initialValues.organizer.address),\n\t\t\t\t\t\tname: initialValues.organizer.name,\n\t\t\t\t  })\n\n\t\tif (initialOrganizerAddress != null) {\n\t\t\t// check if the organizer is also in the attendees array and remove them if so\n\t\t\tconst organizerAttendee = this.initialAttendees.get(initialOrganizerAddress.address)\n\t\t\tthis._organizer =\n\t\t\t\torganizerAttendee ??\n\t\t\t\tcreateCalendarEventAttendee({\n\t\t\t\t\taddress: initialOrganizerAddress,\n\t\t\t\t\t// the organizer added themselves, but did not specify if they're participating\n\t\t\t\t\tstatus: CalendarAttendeeStatus.NEEDS_ACTION,\n\t\t\t\t})\n\t\t\tthis.initialAttendees.delete(this._organizer.address.address)\n\t\t}\n\n\t\t// we don't want ourselves in the attendee list, since we're using it to track updates we need to send.\n\t\tconst ownAttendeeAddresses = findAll(Array.from(this.initialAttendees.keys()), (address) => ownAddresses.includes(address))\n\t\tthis._ownAttendee = this.initialAttendees.get(ownAttendeeAddresses[0]) ?? null\n\t\tthis.initialOwnAttendeeStatus = (this._ownAttendee?.status as CalendarAttendeeStatus) ?? null\n\t\tfor (const match of ownAttendeeAddresses) {\n\t\t\tthis.initialAttendees.delete(match)\n\t\t}\n\n\t\t// set up the attendees map that tracks the actual changes\n\t\tfor (const [initialAttendeeAddress, initialAttendee] of this.initialAttendees.entries()) {\n\t\t\tthis._attendees.set(initialAttendeeAddress, clone(initialAttendee))\n\t\t}\n\n\t\t// we now have cleaned versions of organizer, ownAttendee and other attendees in separate fields.\n\t\t// now the sanity checks.\n\n\t\tif (this._organizer != null && this._attendees.size === 0 && this._ownAttendee == null) {\n\t\t\t// if there are no attendees besides the organizer, the organizer must not be specified.\n\t\t\tthis._organizer = null\n\t\t}\n\n\t\tif (\n\t\t\tthis.eventType === EventType.OWN &&\n\t\t\tthis._organizer != null &&\n\t\t\t!ownAddresses.includes(this._organizer.address.address) &&\n\t\t\tArray.from(this._attendees.values()).some((a) => a.status !== CalendarAttendeeStatus.ADDED)\n\t\t) {\n\t\t\t// this is technically an invalid state now that should not happen with new events.\n\t\t\t// we previously assigned the event creator (which might not be the calendar owner) to the organizer field,\n\t\t\t// even when there were no attendees.\n\t\t\tconsole.warn(\"got an event with attendees and an organizer that's not the owner of the calendar, replacing organizer.\")\n\t\t\tthis._attendees.set(this._organizer.address.address, this._organizer)\n\t\t\tthis._organizer =\n\t\t\t\tthis._ownAttendee ??\n\t\t\t\tcreateCalendarEventAttendee({\n\t\t\t\t\taddress: createEncryptedMailAddress({\n\t\t\t\t\t\taddress: ownAddresses[0],\n\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t}),\n\t\t\t\t\tstatus: CalendarAttendeeStatus.ACCEPTED,\n\t\t\t\t})\n\t\t}\n\n\t\tif (\n\t\t\tthis._organizer &&\n\t\t\townAddresses.includes(this._organizer.address.address) &&\n\t\t\tthis._organizer.address.address !== this._ownAttendee?.address.address\n\t\t) {\n\t\t\t// if we're the organizer, ownAttendee should be the same. we don't modify organizer here because someone might already have sent invites.\n\t\t\tthis._ownAttendee = this._organizer\n\t\t}\n\t}\n\n\t/**\n\t * figure out if there are currently other people that might need to be notified if this event is modified.\n\t * attendees that were just added and not invited yet are ignored for this.\n\t * @private\n\t */\n\tprivate hasNotifyableOtherAttendees() {\n\t\treturn (\n\t\t\t// if the event is new we can do what we want (no attendee was notified yet)\n\t\t\t!this.isNew &&\n\t\t\t// if the event is not new, but the attendee list did not have any attendees that were already notified,\n\t\t\t// there are no attendees that are not either us or the organizer\n\t\t\tArray.from(this.initialAttendees.values()).some((a) => a.status !== CalendarAttendeeStatus.ADDED)\n\t\t)\n\t}\n\n\t/*\n\t * return a list of mail addresses that we can set as an organizer.\n\t */\n\tget possibleOrganizers(): ReadonlyArray<EncryptedMailAddress> {\n\t\tif (this.eventType !== EventType.OWN) {\n\t\t\treturn this._organizer ? [this._organizer.address] : []\n\t\t} else if (!this.hasNotifyableOtherAttendees()) {\n\t\t\t// if we have no attendees that require an update, we can use whatever address\n\t\t\treturn this.ownMailAddresses\n\t\t} else if (this._organizer != null && this.ownGuest?.address === this._organizer?.address.address) {\n\t\t\t// if there are other attendees and we have an organizer that's us, we must use that organizer\n\t\t\t// because changing the organizer address after the attendees were invited is suboptimal.\n\t\t\treturn [this._organizer.address]\n\t\t} else if (this.eventType === EventType.OWN) {\n\t\t\treturn this.ownMailAddresses\n\t\t} else {\n\t\t\t// something is wrong.\n\t\t\tthrow new ProgrammingError(\"could not figure out which addresses are a valid organizer for this event.\")\n\t\t}\n\t}\n\n\t/**\n\t * get our own guest, if any\n\t */\n\tget ownGuest(): Guest | null {\n\t\treturn this._ownAttendee && this.getGuestForAttendee(this._ownAttendee)\n\t}\n\n\t/**\n\t * get the current organizer of the event\n\t *\n\t * there is no setter - if we're changing attendees, we're ensured to be the organizer.\n\t */\n\tget organizer(): Guest | null {\n\t\treturn this._organizer && this.getGuestForAttendee(this._organizer)\n\t}\n\n\t/**\n\t * a list of the attendees of the event that are not the organizer or ourselves, with their status and type\n\t */\n\tget guests(): ReadonlyArray<Guest> {\n\t\treturn Array.from(this._attendees.values()).map((a) => this.getGuestForAttendee(a))\n\t}\n\n\tprivate getGuestForAttendee(a: CalendarEventAttendee): Guest {\n\t\tif (this.resolvedRecipients.has(a.address.address)) {\n\t\t\tconst recipient: Recipient = this.resolvedRecipients.get(a.address.address)!\n\t\t\treturn {\n\t\t\t\t...recipient,\n\t\t\t\tstatus: a.status as CalendarAttendeeStatus,\n\t\t\t}\n\t\t} else {\n\t\t\t// this is a temporary situation, an attendee that is set in this model\n\t\t\t// will be resolved sometime after it was added.\n\t\t\treturn {\n\t\t\t\taddress: a.address.address,\n\t\t\t\tname: a.address.name,\n\t\t\t\tstatus: a.status as CalendarAttendeeStatus,\n\t\t\t\ttype: RecipientType.UNKNOWN,\n\t\t\t\tcontact: null,\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * add a mail address to the list of invitees.\n\t * the organizer will always be set to the last of the current user's mail addresses that has been added.\n\t *\n\t * if an attendee is deleted an re-added, the status is retained.\n\t *\n\t * @param address the mail address to send the invite to\n\t * @param contact a contact for a display name.\n\t */\n\taddAttendee(address: string, contact: Contact | null = null): void {\n\t\tif (!this.canModifyGuests) {\n\t\t\tthrow new UserError(lang.makeTranslation(\"cannotAddAttendees_msg\", \"Cannot add attendees\"))\n\t\t}\n\t\tconst cleanAddress = cleanMailAddress(address)\n\t\t// We don't add an attendee if they are already an attendee\n\t\tif (this._attendees.has(cleanAddress) || this._organizer?.address.address === cleanAddress || this._ownAttendee?.address.address === cleanAddress) {\n\t\t\treturn\n\t\t}\n\n\t\tconst ownAttendee = findRecipientWithAddress(this.ownMailAddresses, cleanAddress)\n\t\tif (ownAttendee != null) {\n\t\t\tthis.addOwnAttendee(ownAttendee)\n\t\t} else {\n\t\t\tconst name = contact != null ? getContactDisplayName(contact) : \"\"\n\t\t\tthis.addOtherAttendee(createEncryptedMailAddress({ address: cleanAddress, name }))\n\t\t}\n\t}\n\n\t/**\n\t * this is a no-op if there are already\n\t * @param address MUST be one of ours and MUST NOT be in the attendees array or set on _organizer\n\t * @private\n\t */\n\tprivate addOwnAttendee(address: EncryptedMailAddress): void {\n\t\tif (this.hasNotifyableOtherAttendees()) {\n\t\t\tconsole.log(\"can't change organizer if there are other invitees already\")\n\t\t\treturn\n\t\t}\n\t\tconst attendeeToAdd = createCalendarEventAttendee({ address, status: CalendarAttendeeStatus.ACCEPTED })\n\t\tthis._ownAttendee = attendeeToAdd\n\n\t\t// make sure that the organizer on the event is the same address as we added as an own attendee.\n\t\tthis._organizer = attendeeToAdd\n\t\tif (!this.resolvedRecipients.has(address.address)) {\n\t\t\tthis.resolveAndCacheAddress(address).then(this.uiUpdateCallback)\n\t\t}\n\t\tthis.uiUpdateCallback()\n\t}\n\n\t/**\n\t *\n\t * @param address must NOT be one of ours.\n\t * @private\n\t */\n\tprivate addOtherAttendee(address: EncryptedMailAddress) {\n\t\tif (this._ownAttendee == null) {\n\t\t\t// we're adding someone that's not us while we're not an attendee,\n\t\t\t// so we add ourselves as an attendee and as organizer.\n\t\t\tthis.addOwnAttendee(this.ownMailAddresses[0])\n\t\t}\n\n\t\taddress.address = cleanMailAddress(address.address)\n\t\tconst previousAttendee = this.initialAttendees.get(address.address)\n\n\t\t//  we now know that this address is not in the list and that it's also\n\t\t//  not us under another address that's already added, so we can just add it.\n\t\t//  we reuse the entry from the initial attendees in case we already had this attendee at the start\n\t\tif (previousAttendee != null) {\n\t\t\tthis._attendees.set(address.address, previousAttendee)\n\t\t} else {\n\t\t\tthis._attendees.set(address.address, createCalendarEventAttendee({ address, status: CalendarAttendeeStatus.ADDED }))\n\t\t}\n\t\tif (!this.resolvedRecipients.has(address.address)) {\n\t\t\tthis.resolveAndCacheAddress(address).then(this.uiUpdateCallback)\n\t\t}\n\t\tthis.uiUpdateCallback()\n\t}\n\n\t/**\n\t * remove a single attendee from the list.\n\t * * if it's the organizer AND there are other attendees, this is a no-op - if there are attendees, someone must be organizer (and it's us)\n\t * * if it's the organizer AND there are no other attendees, this sets the organizer and ownAttendee\n\t * * if it's not the organizer, but the last non-organizer attendee, only removes the attendee from the list, but the\n\t *   result will have an empty attendee list and no organizer if no other attendees are added in the meantime.\n\t * * if it's not the organizer but not the last non-organizer attendee, just removes that attendee from the list.\n\t * @param address the attendee to remove.\n\t */\n\tremoveAttendee(address: string) {\n\t\tconst cleanRemoveAddress = cleanMailAddress(address)\n\t\tif (this._organizer?.address.address === cleanRemoveAddress) {\n\t\t\tif (this._attendees.size > 0) {\n\t\t\t\tconsole.log(\"tried to remove organizer while there are other attendees, ignoring.\")\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tthis._organizer = null\n\t\t\t\t// we must be the organizer since we're removing guests.\n\t\t\t\tthis._ownAttendee = null\n\n\t\t\t\tthis.uiUpdateCallback()\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._attendees.has(cleanRemoveAddress)) {\n\t\t\t\tthis._attendees.delete(cleanRemoveAddress)\n\t\t\t\tif (this._attendees.size === 0) {\n\t\t\t\t\tthis._organizer = null\n\t\t\t\t\t// we must be the organizer since we're removing guests.\n\t\t\t\t\tthis._ownAttendee = null\n\t\t\t\t}\n\t\t\t\tthis.uiUpdateCallback()\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * modify your own attendance to the selected value.\n\t * is a no-op if we're not actually an attendee\n\t * @param status\n\t */\n\tsetOwnAttendance(status: CalendarAttendeeStatus) {\n\t\tif (this._ownAttendee) this._ownAttendee.status = status\n\t}\n\n\tsetPresharedPassword(address: string, password: string) {\n\t\tthis.externalPasswords.set(address, password)\n\t}\n\n\t/** for a stored address, get the preshared password and an indicator value for its strength */\n\tgetPresharedPassword(address: string): { password: string; strength: number } {\n\t\tconst password = this.externalPasswords.get(address) ?? \"\"\n\t\tconst recipient = this.resolvedRecipients.get(address)\n\t\tconst strength = recipient != null ? this.passwordStrengthModel(password, recipient) : 0\n\t\treturn { password, strength }\n\t}\n\n\t/**\n\t * return whether any of the attendees have a password set that warrants asking the user if they really want to use it.\n\t *\n\t * ignores empty passwords since those are always a hard fail when sending external mail.\n\t */\n\thasInsecurePasswords(): boolean {\n\t\tif (!this.isConfidential) {\n\t\t\treturn false\n\t\t}\n\t\tfor (const g of this._attendees.values()) {\n\t\t\tconst { password, strength } = this.getPresharedPassword(g.address.address)\n\t\t\tif (password === \"\" || isSecurePassword(strength)) continue\n\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\tprivate prepareSendModel(attendees: ReadonlyArray<CalendarEventAttendee>): SendMailModel | null {\n\t\tif (!this._ownAttendee) return null\n\t\tconst recipients = attendees.map(({ address }) => address)\n\t\tconst model = this.sendMailModelFactory()\n\t\t// do not pass recipients in template arguments as recipient checks in sendMailModel are done in sync part of send\n\t\tmodel.initWithTemplate([], \"\", \"\")\n\n\t\tfor (const recipient of recipients) {\n\t\t\tmodel.addRecipient(RecipientField.BCC, recipient)\n\t\t\t// Only set the password if we have an entry.\n\t\t\t// The recipients might not be resolved at this point yet, so we shouldn't set the password on the model unless we have one for sure.\n\t\t\t// SendMailModel will anyway resolve the recipients, but it won't detect the right password if it's already pre-filled by us.\n\t\t\tif (this.externalPasswords.has(recipient.address)) {\n\t\t\t\tconst password = assertNotNull(this.externalPasswords.get(recipient.address))\n\t\t\t\tmodel.setPassword(recipient.address, password)\n\t\t\t}\n\t\t}\n\t\tmodel.setSender(this._ownAttendee.address.address)\n\t\tmodel.setConfidential(this.isConfidential)\n\t\treturn model\n\t}\n\n\tprivate prepareResponseModel(): SendMailModel | null {\n\t\tif (this.eventType !== EventType.INVITE || this._ownAttendee === null || this._organizer == null || this._ownAttendee == null) {\n\t\t\t// not checking for initialAttendees.size === 0 because we and the organizer might be the only attendees, which do not show\n\t\t\t// up there.\n\t\t\treturn null\n\t\t}\n\n\t\tconst initialOwnAttendeeStatus = assertNotNull(\n\t\t\tthis.initialOwnAttendeeStatus,\n\t\t\t\"somehow managed to become an attendee on an invite we weren't invited to before\",\n\t\t)\n\n\t\tif (!(initialOwnAttendeeStatus !== this._ownAttendee.status && this._ownAttendee.status !== CalendarAttendeeStatus.NEEDS_ACTION)) {\n\t\t\t// either our status did not actually change or our new status is \"NEEDS_ACTION\"\n\t\t\treturn null\n\t\t}\n\n\t\tconst responseModel: SendMailModel = this.sendMailModelFactory()\n\n\t\tif (this.responseTo != null) {\n\t\t\t// do not pass recipients in template arguments as recipient checks in sendMailModel are done in sync part of send\n\t\t\tresponseModel.initAsResponse(\n\t\t\t\t{\n\t\t\t\t\tpreviousMail: this.responseTo,\n\t\t\t\t\tconversationType: ConversationType.REPLY,\n\t\t\t\t\tsenderMailAddress: this._ownAttendee.address.address,\n\t\t\t\t\trecipients: [],\n\t\t\t\t\tattachments: [],\n\t\t\t\t\tbodyText: \"\",\n\t\t\t\t\tsubject: \"\",\n\t\t\t\t\treplyTos: [],\n\t\t\t\t},\n\t\t\t\tnew Map(),\n\t\t\t)\n\t\t} else {\n\t\t\t// do not pass recipients in template arguments as recipient checks in sendMailModel are done in sync part of send\n\t\t\tresponseModel.initWithTemplate({}, \"\", \"\")\n\t\t}\n\t\tresponseModel.addRecipient(RecipientField.TO, this._organizer.address)\n\n\t\treturn responseModel\n\t}\n\n\tget result(): AttendanceModelResult {\n\t\tif (this._selectedCalendar == null) {\n\t\t\tthrow new UserError(\"noCalendar_msg\")\n\t\t}\n\n\t\tconst isOrganizer = this._organizer != null && this._ownAttendee?.address.address === this._organizer.address.address\n\n\t\tconst {\n\t\t\tkept: attendeesToUpdate,\n\t\t\tdeleted: attendeesToCancel,\n\t\t\tadded: attendeesToInvite,\n\t\t} = getRecipientLists(this.initialAttendees, this._attendees, isOrganizer, this.isNew)\n\n\t\tconst { allAttendees, organizerToPublish } = assembleAttendees(attendeesToInvite, attendeesToUpdate, this._organizer, this._ownAttendee)\n\n\t\treturn {\n\t\t\tattendees: allAttendees,\n\t\t\torganizer: organizerToPublish,\n\t\t\tisConfidential: this.isConfidential,\n\t\t\tcancelModel: isOrganizer && attendeesToCancel.length > 0 ? this.prepareSendModel(attendeesToCancel) : null,\n\t\t\tinviteModel: isOrganizer && attendeesToInvite.length > 0 ? this.prepareSendModel(attendeesToInvite) : null,\n\t\t\tupdateModel: isOrganizer && attendeesToUpdate.length > 0 && this.shouldSendUpdates ? this.prepareSendModel(attendeesToUpdate) : null,\n\t\t\tresponseModel: !isOrganizer && organizerToPublish != null ? this.prepareResponseModel() : null,\n\t\t\tcalendar: this._selectedCalendar,\n\t\t}\n\t}\n}\n\nfunction getRecipientLists(\n\tinitialAttendees: ReadonlyMap<unknown, CalendarEventAttendee>,\n\tcurrentAttendees: ReadonlyMap<unknown, CalendarEventAttendee>,\n\tisOrganizer: boolean,\n\tisNew: boolean,\n): ReturnType<typeof trisectingDiff<CalendarEventAttendee>> {\n\tif (!isOrganizer) {\n\t\t// if we're not the organizer, we can't have changed the guest list.\n\t\treturn { added: [], deleted: [], kept: Array.from(initialAttendees.values()) }\n\t} else if (isNew) {\n\t\t// a new event will always have everyone on the guest list have to be invited.\n\t\treturn { added: Array.from(currentAttendees.values()), deleted: [], kept: [] }\n\t} else {\n\t\t// in this case, the guest list may have changed arbitrarily\n\t\treturn trisectingDiff(initialAttendees, currentAttendees)\n\t}\n}\n\n/** get the list of attendees and the organizer address to publish.\n * the array contains the organizer as an attendee.\n *\n * if there's only an organizer but no other attendees, no attendees or organizers are returned.\n * */\nfunction assembleAttendees(\n\tattendeesToInvite: ReadonlyArray<CalendarEventAttendee>,\n\tattendeesToUpdate: ReadonlyArray<CalendarEventAttendee>,\n\torganizer: CalendarEventAttendee | null,\n\townAttendee: CalendarEventAttendee | null,\n): {\n\tallAttendees: Array<CalendarEventAttendee>\n\torganizerToPublish: EncryptedMailAddress | null\n} {\n\tif (\n\t\torganizer == null ||\n\t\t(attendeesToInvite.length + attendeesToUpdate.length === 0 && (ownAttendee == null || ownAttendee.address.address === organizer?.address.address))\n\t) {\n\t\t// there's no attendees besides the organizer (which may be us) or there's no organizer at all.\n\t\treturn { allAttendees: [], organizerToPublish: null }\n\t}\n\tconst allAttendees: Array<CalendarEventAttendee> = []\n\tif (organizer.address.address !== ownAttendee?.address.address) {\n\t\tallAttendees.push(organizer)\n\t}\n\tif (ownAttendee != null) {\n\t\tallAttendees.push(ownAttendee)\n\t}\n\tallAttendees.push(...attendeesToUpdate)\n\tallAttendees.push(...attendeesToInvite)\n\n\treturn {\n\t\tallAttendees,\n\t\torganizerToPublish: organizer.address,\n\t}\n}\n"]}