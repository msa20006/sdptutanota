{"version":3,"file":"EventDragHandler.js","sourceRoot":"","sources":["../../../../../src/calendar-app/calendar/view/EventDragHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CalendarEvent } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport m from \"mithril\"\nimport { getAllDayDateUTC, isAllDayEvent } from \"../../../common/api/common/utils/CommonCalendarUtils\"\nimport { Time } from \"../../../common/calendar/date/Time.js\"\nimport { showDropdownAtPosition } from \"../../../common/gui/base/Dropdown.js\"\nimport { CalendarOperation } from \"../gui/eventeditor-model/CalendarEventModel.js\"\n\nconst DRAG_THRESHOLD = 10\nexport type MousePos = {\n\tx: number\n\ty: number\n}\n// Convenience wrapper for nullability\ntype DragData = {\n\toriginalEvent: CalendarEvent\n\toriginalDateUnderMouse: Date\n\toriginalMousePos: MousePos\n\tkeepTime: boolean // Indicates whether the time on the original event should be kept or modified. In case this is set to true the drag operation just shifts event start by whole days.\n}\n\nexport interface EventDragHandlerCallbacks {\n\treadonly onDragStart: (calendarEvent: CalendarEvent, timeToMoveBy: number) => void\n\treadonly onDragUpdate: (timeToMoveBy: number) => void\n\treadonly onDragEnd: (timeToMoveBy: number, mode: CalendarOperation | null) => Promise<void>\n\treadonly onDragCancel: () => void\n}\n\n/**\n * Handles logic for dragging events in the calendar child views.\n */\nexport class EventDragHandler {\n\tprivate data: DragData | null = null\n\tprivate dragging: boolean = false\n\tprivate lastDiffBetweenDates: number | null = null\n\tprivate hasChanged: boolean = false\n\n\tconstructor(private readonly draggingArea: HTMLBodyElement, private readonly eventDragCallbacks: EventDragHandlerCallbacks) {}\n\n\tget isDragging(): boolean {\n\t\treturn this.dragging\n\t}\n\n\tget originalEvent(): CalendarEvent | null {\n\t\treturn this.data?.originalEvent ?? null\n\t}\n\n\t/**\n\t * Check if the handler has changed since the last time you called this function\n\t */\n\tqueryHasChanged(): boolean {\n\t\tconst isChanged = this.hasChanged\n\t\tthis.hasChanged = false\n\t\treturn isChanged\n\t}\n\n\t/**\n\t * Call on mouse down, to initialize an upcoming drag event.\n\t * Doesn't start the drag yet, because we want to wait until the mouse has moved beyond some threshhold\n\t * @param calendarEvent The calendar event for which a drag operation is prepared.\n\t * @param dateUnderMouse The original date under mouse when preparing the drag.\n\t * @param mousePos The current position of the mouse.\n\t * @param keepTime Indicates whether the time on the original event should be kept or modified. In case this is set to true the drag\n\t * operation just shifts event start by whole days otherwise the time from dateUnderMouse should be used as new time for the event.\n\t */\n\tprepareDrag(calendarEvent: CalendarEvent, dateUnderMouse: Date, mousePos: MousePos, keepTime: boolean) {\n\t\tthis.draggingArea.classList.add(\"cursor-grabbing\")\n\n\t\tthis.data = {\n\t\t\toriginalEvent: calendarEvent,\n\t\t\t// We always differentiate between eventStart and originalDateUnderMouse to be able to shift it relative to the mouse position\n\t\t\t// and not the start date. This is important for larger events in day/week view\n\t\t\toriginalDateUnderMouse: this.adjustDateUnderMouse(calendarEvent.startTime, dateUnderMouse, keepTime),\n\t\t\toriginalMousePos: mousePos,\n\t\t\tkeepTime: keepTime,\n\t\t}\n\t\tthis.hasChanged = false\n\t\tthis.dragging = false\n\t}\n\n\t/**\n\t * Call on mouse move.\n\t * Will be a no-op if the prepareDrag hasn't been called or if cancelDrag has been called since the last prepareDrag call\n\t * The dragging doesn't actually begin until the distance between the mouse and its original location is greater than some threshold\n\t * @param dateUnderMouse The current date under the mouse courser, may include a time.\n\t * @param mousePos the position of the mouse when the drag ended.\n\t */\n\thandleDrag(dateUnderMouse: Date, mousePos: MousePos) {\n\t\tif (this.data) {\n\t\t\tconst dragData = this.data\n\t\t\tconst adjustedDateUnderMouse = this.adjustDateUnderMouse(dragData.originalEvent.startTime, dateUnderMouse, dragData.keepTime)\n\t\t\t// Calculate the distance from the original mouse location to the current mouse location\n\t\t\t// We don't want to actually start the drag until the mouse has moved by some distance\n\t\t\t// So as to avoid accidentally dragging when you meant to click but moved the mouse a little\n\t\t\tconst distanceX = dragData.originalMousePos.x - mousePos.x\n\t\t\tconst distanceY = dragData.originalMousePos.y - mousePos.y\n\t\t\tconst distance = Math.sqrt(distanceX ** 2 + distanceY ** 2)\n\n\t\t\tif (this.dragging) {\n\t\t\t\tconst diffBetweenDates = this.getDayUnderMouseDiff(dragData, adjustedDateUnderMouse)\n\n\t\t\t\t// We don't want to trigger a redraw everytime the drag call is triggered, only when necessary\n\t\t\t\tif (diffBetweenDates !== this.lastDiffBetweenDates) {\n\t\t\t\t\tthis.lastDiffBetweenDates = diffBetweenDates\n\n\t\t\t\t\tthis.eventDragCallbacks.onDragUpdate(diffBetweenDates)\n\n\t\t\t\t\tthis.hasChanged = true\n\t\t\t\t\tm.redraw()\n\t\t\t\t}\n\t\t\t} else if (distance > DRAG_THRESHOLD) {\n\t\t\t\tthis.dragging = true\n\t\t\t\tthis.lastDiffBetweenDates = this.getDayUnderMouseDiff(dragData, adjustedDateUnderMouse)\n\n\t\t\t\tthis.eventDragCallbacks.onDragStart(dragData.originalEvent, this.lastDiffBetweenDates)\n\n\t\t\t\tthis.hasChanged = true\n\t\t\t\tm.redraw()\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Call on mouseup or mouseleave. Ends a drag event if one has been started, and hasn't been cancelled.\n\t *\n\t * This function will only trigger when prepareDrag has been called\n\t */\n\tasync endDrag(dateUnderMouse: Date, pos: MousePos): Promise<void> {\n\t\tthis.draggingArea.classList.remove(\"cursor-grabbing\")\n\n\t\tif (this.dragging && this.data) {\n\t\t\tconst dragData = this.data\n\t\t\tconst adjustedDateUnderMouse = this.adjustDateUnderMouse(dragData.originalEvent.startTime, dateUnderMouse, dragData.keepTime)\n\t\t\t// We update our state first because the updateCallback might take some time, and\n\t\t\t// we want the UI to be able to react to the drop having happened before we get the result\n\t\t\tthis.dragging = false\n\t\t\tthis.data = null\n\t\t\tconst diffBetweenDates = this.getDayUnderMouseDiff(dragData, adjustedDateUnderMouse)\n\n\t\t\t// technically, we should check that this event is EventType OWN or SHARED_RW, but we'll assume that we're\n\t\t\t// not allowed to drag events where that's not the case.\n\t\t\t// note that we're not allowing changing the whole series from dragging an altered instance.\n\t\t\tconst { repeatRule, recurrenceId } = dragData.originalEvent\n\t\t\t// prettier-ignore\n\t\t\tconst mode = repeatRule != null\n\t\t\t\t? await showModeSelectionDropdown(pos)\n\t\t\t\t: recurrenceId != null\n\t\t\t\t\t? CalendarOperation.EditThis\n\t\t\t\t\t: CalendarOperation.EditAll\n\n\t\t\t// If the date hasn't changed we still have to do the callback so the view model can cancel the drag\n\t\t\ttry {\n\t\t\t\tawait this.eventDragCallbacks.onDragEnd(diffBetweenDates, mode)\n\t\t\t} finally {\n\t\t\t\tthis.hasChanged = true\n\t\t\t\tm.redraw()\n\t\t\t}\n\t\t} else {\n\t\t\tthis.cancelDrag()\n\t\t}\n\t}\n\n\tadjustDateUnderMouse(eventStart: Date, dateUnderMouse: Date, keepTime: boolean): Date {\n\t\tif (keepTime) {\n\t\t\treturn Time.fromDate(eventStart).toDate(dateUnderMouse)\n\t\t} else {\n\t\t\treturn dateUnderMouse\n\t\t}\n\t}\n\n\tgetDayUnderMouseDiff(dragData: DragData, adjustedDateUnderMouse: Date): number {\n\t\tconst { originalEvent, originalDateUnderMouse } = dragData\n\t\treturn isAllDayEvent(originalEvent)\n\t\t\t? getAllDayDateUTC(adjustedDateUnderMouse).getTime() - getAllDayDateUTC(originalDateUnderMouse).getTime()\n\t\t\t: adjustedDateUnderMouse.getTime() - originalDateUnderMouse.getTime()\n\t}\n\n\tcancelDrag() {\n\t\tthis.draggingArea.classList.remove(\"cursor-grabbing\")\n\t\tthis.eventDragCallbacks.onDragCancel()\n\n\t\tthis.data = null\n\t\tthis.dragging = false\n\t\tthis.hasChanged = true\n\t\tthis.lastDiffBetweenDates = null\n\n\t\tm.redraw()\n\t}\n}\n\nasync function showModeSelectionDropdown(pos: MousePos): Promise<CalendarOperation | null> {\n\treturn new Promise((resolve) => {\n\t\tshowDropdownAtPosition(\n\t\t\t[\n\t\t\t\t{ label: \"updateOneCalendarEvent_action\", click: () => resolve(CalendarOperation.EditThis) },\n\t\t\t\t{ label: \"updateAllCalendarEvents_action\", click: () => resolve(CalendarOperation.EditAll) },\n\t\t\t],\n\t\t\tpos.x,\n\t\t\tpos.y,\n\t\t\t() => resolve(null),\n\t\t)\n\t})\n}\n"]}