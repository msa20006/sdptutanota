{"version":3,"file":"GlobalSettingsViewer.js","sourceRoot":"","sources":["../../../../../src/calendar-app/calendar/settings/GlobalSettingsViewer.ts"],"names":[],"mappings":"AAAA,OAAO,CAAe,MAAM,SAAS,CAAA;AACrC,OAAO,EAAE,gBAAgB,EAAE,MAAM,mCAAmC,CAAA;AACpE,OAAO,EAAE,0BAA0B,EAAoC,MAAM,wDAAwD,CAAA;AAErI,OAAO,EAAoB,kBAAkB,EAAE,MAAM,uDAAuD,CAAA;AAC5G,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAA;AAC/E,OAAO,EACN,yBAAyB,EAEzB,+BAA+B,EAC/B,eAAe,GACf,MAAM,8CAA8C,CAAA;AAErD,OAAO,MAAM,MAAM,gBAAgB,CAAA;AACnC,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAA;AAE1D,gBAAgB,EAAE,CAAA;AAElB,MAAM,OAAO,oBAAoB;IACf,KAAK,GAAG,MAAM,EAAsC,CAAA;IAC7D,gCAAgC,GAA4C,IAAI,CAAA;IAEvE,kBAAkB,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE,CACzD,eAAe,CAAC,YAAY;SAC1B,IAAI,CAAC,eAAe,EAAE,SAAS,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC1F,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,yBAAyB,EAAE,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAClH,CAAA;IAED;QACC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;QACjD,IAAI,CAAC,8BAA8B,EAAE,CAAA;QACrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACjC,CAAC;IAED,IAAI;QACH,OAAO,CAAC,CAAC,6CAA6C,EAAE;YACvD,CAAC,CAAC,0BAA0B,EAAE;gBAC7B,wBAAwB,EAAE,IAAI,CAAC,KAAK;gBACpC,kBAAkB,EAAE,CAAC,EAAoC,EAAE,EAAE;oBAC5D,IAAI,CAAC,gCAAgC,GAAG,EAAE,CAAA;gBAC3C,CAAC;aACD,CAAC;SACF,CAAC,CAAA;IACH,CAAC;IAEO,8BAA8B;QACrC,OAAO,eAAe,CAAC,cAAc,CAAC,4BAA4B,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;YACnF,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YACjB,CAAC,CAAC,MAAM,EAAE,CAAA;QACX,CAAC,CAAC,CAAA;IACH,CAAC;IAED,oBAAoB,CAAC,OAAwC;QAC5D,IAAI,CAAC,gCAAgC,EAAE,CAAC,OAAO,CAAC,CAAA;QAEhD,OAAO,UAAU,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE;YACrC,IAAI,kBAAkB,CAAC,+BAA+B,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,SAAS,mCAAyB,EAAE,CAAC;gBAC9G,OAAO,IAAI,CAAC,8BAA8B,EAAE,CAAA;YAC7C,CAAC;QACF,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACd,CAAC;CACD","sourcesContent":["import m, { Children } from \"mithril\"\nimport { assertMainOrNode } from \"../../../common/api/common/Env.js\"\nimport { AccountMaintenanceSettings, AccountMaintenanceUpdateNotifier } from \"../../../common/settings/AccountMaintenanceSettings.js\"\nimport { UpdatableSettingsViewer } from \"../../../common/settings/Interfaces.js\"\nimport { EntityUpdateData, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { LazyLoaded, neverNull, noOp, promiseMap } from \"@tutao/tutanota-utils\"\nimport {\n\tCustomerPropertiesTypeRef,\n\tCustomerServerProperties,\n\tCustomerServerPropertiesTypeRef,\n\tCustomerTypeRef,\n} from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport { OperationType } from \"../../../common/api/common/TutanotaConstants.js\"\nimport stream from \"mithril/stream\"\nimport { calendarLocator } from \"../../calendarLocator.js\"\n\nassertMainOrNode()\n\nexport class GlobalSettingsViewer implements UpdatableSettingsViewer {\n\tprivate readonly props = stream<Readonly<CustomerServerProperties>>()\n\tprivate accountMaintenanceUpdateNotifier: AccountMaintenanceUpdateNotifier | null = null\n\n\tprivate readonly customerProperties = new LazyLoaded(() =>\n\t\tcalendarLocator.entityClient\n\t\t\t.load(CustomerTypeRef, neverNull(calendarLocator.logins.getUserController().user.customer))\n\t\t\t.then((customer) => calendarLocator.entityClient.load(CustomerPropertiesTypeRef, neverNull(customer.properties))),\n\t)\n\n\tconstructor() {\n\t\tthis.customerProperties.getAsync().then(m.redraw)\n\t\tthis.updateCustomerServerProperties()\n\t\tthis.view = this.view.bind(this)\n\t}\n\n\tview(): Children {\n\t\treturn m(\"#global-settings.fill-absolute.scroll.plr-l\", [\n\t\t\tm(AccountMaintenanceSettings, {\n\t\t\t\tcustomerServerProperties: this.props,\n\t\t\t\tsetOnUpdateHandler: (fn: AccountMaintenanceUpdateNotifier) => {\n\t\t\t\t\tthis.accountMaintenanceUpdateNotifier = fn\n\t\t\t\t},\n\t\t\t}),\n\t\t])\n\t}\n\n\tprivate updateCustomerServerProperties(): Promise<void> {\n\t\treturn calendarLocator.customerFacade.loadCustomerServerProperties().then((props) => {\n\t\t\tthis.props(props)\n\t\t\tm.redraw()\n\t\t})\n\t}\n\n\tentityEventsReceived(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\tthis.accountMaintenanceUpdateNotifier?.(updates)\n\n\t\treturn promiseMap(updates, (update) => {\n\t\t\tif (isUpdateForTypeRef(CustomerServerPropertiesTypeRef, update) && update.operation === OperationType.UPDATE) {\n\t\t\t\treturn this.updateCustomerServerProperties()\n\t\t\t}\n\t\t}).then(noOp)\n\t}\n}\n"]}