{"version":3,"file":"CalendarViewModel.js","sourceRoot":"","sources":["../../../../../src/calendar-app/calendar/view/CalendarViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\t$Promisable,\n\tassertNotNull,\n\tclone,\n\tdebounce,\n\tdeepEqual,\n\tdowncast,\n\tfindAndRemove,\n\tgetStartOfDay,\n\tgroupByAndMapUniquely,\n\tlast,\n} from \"@tutao/tutanota-utils\"\nimport { CalendarEvent, CalendarEventTypeRef, Contact, ContactTypeRef, GroupSettings } from \"../../../common/api/entities/tutanota/TypeRefs.js\"\nimport {\n\tCLIENT_ONLY_CALENDARS,\n\tEXTERNAL_CALENDAR_SYNC_INTERVAL,\n\tgetWeekStart,\n\tGroupType,\n\tOperationType,\n\tWeekStart,\n} from \"../../../common/api/common/TutanotaConstants\"\nimport { NotAuthorizedError, NotFoundError } from \"../../../common/api/common/error/RestError\"\nimport { getElementId, getListId, isSameId, listIdPart } from \"../../../common/api/common/utils/EntityUtils\"\nimport { LoginController } from \"../../../common/api/main/LoginController\"\nimport { IProgressMonitor } from \"../../../common/api/common/utils/ProgressMonitor\"\nimport { CustomerInfoTypeRef, GroupInfo, ReceivedGroupInvitation } from \"../../../common/api/entities/sys/TypeRefs.js\"\nimport stream from \"mithril/stream\"\nimport Stream from \"mithril/stream\"\nimport {\n\textractContactIdFromEvent,\n\tgetDiffIn60mIntervals,\n\tgetMonthRange,\n\tisClientOnlyCalendar,\n\tisEventBetweenDays,\n} from \"../../../common/calendar/date/CalendarUtils\"\nimport { isAllDayEvent } from \"../../../common/api/common/utils/CommonCalendarUtils\"\nimport { CalendarEventModel, CalendarOperation, EventSaveResult, EventType, getNonOrganizerAttendees } from \"../gui/eventeditor-model/CalendarEventModel.js\"\nimport { askIfShouldSendCalendarUpdatesToAttendees, getClientOnlyColors, getEventType, getGroupColors, shouldDisplayEvent } from \"../gui/CalendarGuiUtils.js\"\nimport { ReceivedGroupInvitationsModel } from \"../../../common/sharing/model/ReceivedGroupInvitationsModel\"\nimport type { CalendarInfo, CalendarModel } from \"../model/CalendarModel\"\nimport { EventController } from \"../../../common/api/main/EventController\"\nimport { EntityClient } from \"../../../common/api/common/EntityClient\"\nimport { ProgressTracker } from \"../../../common/api/main/ProgressTracker\"\nimport { deviceConfig, DeviceConfig } from \"../../../common/misc/DeviceConfig\"\nimport type { EventDragHandlerCallbacks } from \"./EventDragHandler\"\nimport { ProgrammingError } from \"../../../common/api/common/error/ProgrammingError.js\"\nimport { Time } from \"../../../common/calendar/date/Time.js\"\nimport { CalendarEventsRepository, DaysToEvents } from \"../../../common/calendar/date/CalendarEventsRepository.js\"\nimport { CalendarEventPreviewViewModel } from \"../gui/eventpopup/CalendarEventPreviewViewModel.js\"\nimport { EntityUpdateData, isUpdateFor, isUpdateForTypeRef } from \"../../../common/api/common/utils/EntityUpdateUtils.js\"\nimport { MailboxModel } from \"../../../common/mailFunctionality/MailboxModel.js\"\nimport { getEnabledMailAddressesWithUser } from \"../../../common/mailFunctionality/SharedMailUtils.js\"\nimport { ContactModel } from \"../../../common/contactsFunctionality/ContactModel.js\"\nimport type { GroupColors } from \"./CalendarView.js\"\nimport { lang } from \"../../../common/misc/LanguageViewModel.js\"\nimport { CalendarContactPreviewViewModel } from \"../gui/eventpopup/CalendarContactPreviewViewModel.js\"\n\nexport type EventsOnDays = {\n\tdays: Array<Date>\n\tshortEventsPerDay: Array<Array<CalendarEvent>>\n\tlongEvents: Array<CalendarEvent>\n}\n\n/** container to for the information needed to render & handle a reschedule with drag-and-drop */\nexport type DraggedEvent = {\n\t/** the event instance the user grabbed with the mouse */\n\toriginalEvent: CalendarEvent\n\t/** the temporary event that's shown during the drag */\n\teventClone: CalendarEvent\n}\n\nexport type MouseOrPointerEvent = MouseEvent | PointerEvent\nexport type CalendarEventBubbleClickHandler = (arg0: CalendarEvent, arg1: MouseOrPointerEvent) => unknown\nexport type CalendarEventBubbleKeyDownHandler = (arg0: CalendarEvent, arg1: KeyboardEvent) => unknown\nexport type CalendarEventEditModelsFactory = (mode: CalendarOperation, event: CalendarEvent) => Promise<CalendarEventModel | null>\n\nexport type CalendarEventPreviewModelFactory = (\n\tselectedEvent: CalendarEvent,\n\tcalendars: ReadonlyMap<string, CalendarInfo>,\n) => Promise<CalendarEventPreviewViewModel>\nexport type CalendarContactPreviewModelFactory = (event: CalendarEvent, contact: Contact, canEdit: boolean) => Promise<CalendarContactPreviewViewModel>\nexport type CalendarPreviewModels = CalendarEventPreviewViewModel | CalendarContactPreviewViewModel\n\nexport class CalendarViewModel implements EventDragHandlerCallbacks {\n\t// Should not be changed directly but only through the URL\n\treadonly selectedDate: Stream<Date> = stream(getStartOfDay(new Date()))\n\n\t/**\n\t * An event currently being displayed (non-modally)\n\t * the {@code model} is {@code null} until it is loaded.\n\t *\n\t * We keep track of event separately to avoid races with selecting multiple events shortly one after another.\n\t */\n\tprivate previewedEvent: { event: CalendarEvent; model: CalendarPreviewModels | null } | null = null\n\n\tprivate _hiddenCalendars: Set<Id>\n\t/** Events that have been dropped but still need to be rendered as temporary while waiting for entity updates. */\n\t// visible for tests\n\treadonly _transientEvents: Array<CalendarEvent>\n\t// visible for tests\n\t_draggedEvent: DraggedEvent | null = null\n\tprivate readonly _redrawStream: Stream<void> = stream()\n\tselectedTime: Time | undefined\n\t// When set to true, ignores the next setting of selectedTime\n\tignoreNextValidTimeSelection: boolean\n\n\tprivate scrollPosition: number = 0 // size.calendar_hour_height * DEFAULT_HOUR_OF_DAY\n\t// The maximum scroll value of the list in the view\n\tprivate scrollMax: number | null = null\n\t// The size of the list in the view\n\tprivate viewSize: number | null = null\n\n\tprivate _isNewPaidPlan: boolean = false\n\tprivate localCalendars: Map<Id, CalendarInfo> = new Map<Id, CalendarInfo>()\n\tprivate _calendarColors: GroupColors = new Map()\n\n\tconstructor(\n\t\tprivate readonly logins: LoginController,\n\t\tprivate readonly createCalendarEventEditModel: CalendarEventEditModelsFactory,\n\t\tprivate readonly createCalendarEventPreviewModel: CalendarEventPreviewModelFactory,\n\t\tprivate readonly createCalendarContactPreviewModel: CalendarContactPreviewModelFactory,\n\t\tprivate readonly calendarModel: CalendarModel,\n\t\tprivate readonly eventsRepository: CalendarEventsRepository,\n\t\tprivate readonly entityClient: EntityClient,\n\t\teventController: EventController,\n\t\tprivate readonly progressTracker: ProgressTracker,\n\t\tprivate readonly deviceConfig: DeviceConfig,\n\t\tprivate readonly calendarInvitationsModel: ReceivedGroupInvitationsModel<GroupType.Calendar>,\n\t\tprivate readonly timeZone: string,\n\t\tprivate readonly mailboxModel: MailboxModel,\n\t\tprivate readonly contactModel: ContactModel,\n\t) {\n\t\tthis._transientEvents = []\n\n\t\tconst userId = logins.getUserController().user._id\n\t\tconst today = new Date()\n\n\t\tthis._hiddenCalendars = new Set(this.deviceConfig.getHiddenCalendars(userId))\n\n\t\tthis.selectedDate.map(() => {\n\t\t\tthis.updatePreviewedEvent(null)\n\t\t\tthis.preloadMonthsAroundSelectedDate()\n\t\t})\n\t\tthis.selectedTime = Time.fromDate(today)\n\t\tthis.ignoreNextValidTimeSelection = false\n\t\tthis.calendarModel.getCalendarInfosStream().map((newInfos) => {\n\t\t\tconst event = this.previewedEvent?.event ?? null\n\t\t\tif (event != null) {\n\t\t\t\t// redraw if we lost access to the events' list\n\t\t\t\tconst groupRoots = Array.from(newInfos.values()).map((i) => i.groupRoot)\n\t\t\t\tconst lists = [...groupRoots.map((g) => g.longEvents), ...groupRoots.map((g) => g.shortEvents)]\n\t\t\t\tconst previewListId = getListId(event)\n\t\t\t\tif (!lists.some((id) => isSameId(previewListId, id))) {\n\t\t\t\t\tthis.updatePreviewedEvent(null)\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.preloadMonthsAroundSelectedDate()\n\t\t})\n\n\t\teventController.addEntityListener((updates) => this.entityEventReceived(updates))\n\n\t\tcalendarInvitationsModel.init()\n\n\t\tthis.eventsRepository.getEventsForMonths().map(() => {\n\t\t\tthis.doRedraw()\n\t\t})\n\n\t\tthis.loadCalendarColors()\n\n\t\tlogins\n\t\t\t.getUserController()\n\t\t\t.isNewPaidPlan()\n\t\t\t.then((isNewPaidPlan) => {\n\t\t\t\tthis._isNewPaidPlan = isNewPaidPlan\n\t\t\t\tthis.prepareClientCalendars()\n\t\t\t})\n\t}\n\n\tisDaySelectorExpanded(): boolean {\n\t\treturn this.deviceConfig.isCalendarDaySelectorExpanded()\n\t}\n\n\tsetDaySelectorExpanded(expanded: boolean) {\n\t\tthis.deviceConfig.setCalendarDaySelectorExpanded(expanded)\n\t}\n\n\tloadCalendarColors() {\n\t\tconst clientOnlyColors = getClientOnlyColors(this.logins.getUserController().userId, deviceConfig.getClientOnlyCalendars())\n\t\tconst groupColors = getGroupColors(this.logins.getUserController().userSettingsGroupRoot)\n\t\tfor (let [calendarId, color] of clientOnlyColors.entries()) {\n\t\t\tgroupColors.set(calendarId, color)\n\t\t}\n\n\t\tif (!deepEqual(this._calendarColors, groupColors)) {\n\t\t\tthis._calendarColors = new Map(groupColors)\n\t\t}\n\t}\n\n\t/**\n\t * Load client only calendars or generate them if missing\n\t */\n\tprivate prepareClientCalendars() {\n\t\tfor (const [clientOnlyCalendarBaseId, name] of CLIENT_ONLY_CALENDARS) {\n\t\t\tconst calendarID = `${this.logins.getUserController().userId}#${clientOnlyCalendarBaseId}`\n\t\t\tconst clientOnlyCalendarConfig = deviceConfig.getClientOnlyCalendars().get(calendarID)\n\n\t\t\tthis.localCalendars.set(\n\t\t\t\tcalendarID,\n\t\t\t\tdowncast({\n\t\t\t\t\tgroupRoot: { _id: calendarID },\n\t\t\t\t\tgroupInfo: clientOnlyCalendarConfig\n\t\t\t\t\t\t? { name: clientOnlyCalendarConfig.name, group: calendarID }\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\tname: lang.get(name),\n\t\t\t\t\t\t\t\tgroup: calendarID,\n\t\t\t\t\t\t  },\n\t\t\t\t\tgroup: { _id: calendarID },\n\t\t\t\t\tshared: false,\n\t\t\t\t\tuserIsOwner: true,\n\t\t\t\t}),\n\t\t\t)\n\n\t\t\tif (!this.isNewPaidPlan && !this.hiddenCalendars.has(calendarID)) {\n\t\t\t\tthis._hiddenCalendars.add(calendarID)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * react to changes to the calendar data by making sure we have the current month + the two adjacent months\n\t * ready to be rendered\n\t */\n\tprivate preloadMonthsAroundSelectedDate = debounce(200, async () => {\n\t\t// load all calendars. if there is no calendar yet, create one\n\t\t// for each calendar we load short events for three months +3\n\t\tconst workPerCalendar = 3\n\t\tconst totalWork = this.logins.getUserController().getCalendarMemberships().length * workPerCalendar\n\t\tconst monitorHandle = this.progressTracker.registerMonitorSync(totalWork)\n\t\tconst progressMonitor: IProgressMonitor = assertNotNull(this.progressTracker.getMonitor(monitorHandle))\n\n\t\tconst newSelectedDate = this.selectedDate()\n\t\tconst thisMonthStart = getMonthRange(newSelectedDate, this.timeZone).start\n\t\tconst previousMonthDate = new Date(thisMonthStart)\n\t\tpreviousMonthDate.setMonth(new Date(thisMonthStart).getMonth() - 1)\n\t\tconst nextMonthDate = new Date(thisMonthStart)\n\t\tnextMonthDate.setMonth(new Date(thisMonthStart).getMonth() + 1)\n\n\t\ttry {\n\t\t\tconst hasNewPaidPlan = await this.eventsRepository.canLoadBirthdaysCalendar()\n\t\t\tif (hasNewPaidPlan) {\n\t\t\t\tawait this.eventsRepository.loadContactsBirthdays()\n\t\t\t}\n\t\t\tawait this.loadMonthsIfNeeded([new Date(thisMonthStart), nextMonthDate, previousMonthDate], progressMonitor)\n\t\t} finally {\n\t\t\tprogressMonitor.completed()\n\t\t\tthis.doRedraw()\n\t\t}\n\t})\n\n\tget calendarInvitations(): Stream<Array<ReceivedGroupInvitation>> {\n\t\treturn this.calendarInvitationsModel.invitations\n\t}\n\n\tget calendarColors(): GroupColors {\n\t\treturn this._calendarColors\n\t}\n\n\tget clientOnlyCalendars(): ReadonlyMap<Id, CalendarInfo> {\n\t\treturn this.localCalendars\n\t}\n\n\tget calendarInfos(): ReadonlyMap<Id, CalendarInfo> {\n\t\treturn this.calendarModel.getCalendarInfosStream()()\n\t}\n\n\tget hiddenCalendars(): ReadonlySet<Id> {\n\t\treturn this._hiddenCalendars\n\t}\n\n\tget eventsForDays(): DaysToEvents {\n\t\treturn this.eventsRepository.getEventsForMonths()()\n\t}\n\n\tget redraw(): Stream<void> {\n\t\treturn this._redrawStream\n\t}\n\n\tget weekStart(): WeekStart {\n\t\treturn getWeekStart(this.logins.getUserController().userSettingsGroupRoot)\n\t}\n\n\t// visibleForTesting\n\tallowDrag(event: CalendarEvent): boolean {\n\t\treturn this.canFullyEditEvent(event)\n\t}\n\n\t/**\n\t * Partially mirrors the logic from CalendarEventModel.prototype.isFullyWritable() to determine\n\t * if the user can edit more than just alarms for a given event\n\t */\n\tprivate canFullyEditEvent(event: CalendarEvent): boolean {\n\t\tconst userController = this.logins.getUserController()\n\t\tconst userMailGroup = userController.getUserMailGroupMembership().group\n\t\tconst mailboxDetailsArray = this.mailboxModel.mailboxDetails()\n\t\tconst mailboxDetails = assertNotNull(mailboxDetailsArray.find((md) => md.mailGroup._id === userMailGroup))\n\t\tconst ownMailAddresses = getEnabledMailAddressesWithUser(mailboxDetails, userController.userGroupInfo)\n\t\tconst eventType = getEventType(event, this.calendarInfos, ownMailAddresses, userController)\n\t\treturn eventType === EventType.OWN || eventType === EventType.SHARED_RW\n\t}\n\n\tonDragStart(originalEvent: CalendarEvent, timeToMoveBy: number) {\n\t\tif (this.allowDrag(originalEvent)) {\n\t\t\tlet eventClone = clone(originalEvent)\n\t\t\tupdateTemporaryEventWithDiff(eventClone, originalEvent, timeToMoveBy)\n\t\t\tthis._draggedEvent = {\n\t\t\t\toriginalEvent,\n\t\t\t\teventClone,\n\t\t\t}\n\t\t}\n\t}\n\n\tonDragUpdate(timeToMoveBy: number) {\n\t\tif (this._draggedEvent) {\n\t\t\tupdateTemporaryEventWithDiff(this._draggedEvent.eventClone, this._draggedEvent.originalEvent, timeToMoveBy)\n\t\t}\n\t}\n\n\t/**\n\t * This is called when the event is dropped.\n\t */\n\tasync onDragEnd(timeToMoveBy: number, mode: CalendarOperation | null): Promise<void> {\n\t\t//if the time of the dragged event is the same as of the original we only cancel the drag\n\t\tif (timeToMoveBy !== 0 && mode != null) {\n\t\t\tif (this._draggedEvent == null) return\n\n\t\t\tconst { originalEvent, eventClone } = this._draggedEvent\n\t\t\tthis._draggedEvent = null\n\t\t\tupdateTemporaryEventWithDiff(eventClone, originalEvent, timeToMoveBy)\n\n\t\t\tthis._addTransientEvent(eventClone)\n\n\t\t\ttry {\n\t\t\t\tconst didUpdate = await this.moveEvent(originalEvent, timeToMoveBy, mode)\n\n\t\t\t\tif (didUpdate !== EventSaveResult.Saved) {\n\t\t\t\t\tthis._removeTransientEvent(eventClone)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._removeTransientEvent(eventClone)\n\n\t\t\t\tthrow e\n\t\t\t}\n\t\t} else {\n\t\t\tthis._draggedEvent = null\n\t\t}\n\t}\n\n\tonDragCancel() {\n\t\tthis._draggedEvent = null\n\t}\n\n\tget temporaryEvents(): Array<CalendarEvent> {\n\t\treturn this._transientEvents.concat(this._draggedEvent ? [this._draggedEvent.eventClone] : [])\n\t}\n\n\tsetHiddenCalendars(newHiddenCalendars: Set<Id>) {\n\t\tthis._hiddenCalendars = newHiddenCalendars\n\n\t\tthis.deviceConfig.setHiddenCalendars(this.logins.getUserController().user._id, [...newHiddenCalendars])\n\t}\n\n\tsetSelectedTime(time: Time | undefined) {\n\t\t// only ignore an actual time, setting to undefined is fine\n\t\tif (time != undefined && this.ignoreNextValidTimeSelection) {\n\t\t\tthis.ignoreNextValidTimeSelection = false\n\t\t} else {\n\t\t\tthis.selectedTime = time\n\t\t}\n\t}\n\n\t/**\n\t * Given an event and days, return the long and short events of that range of days\n\t * we detect events that should be removed based on their UID + start and end time\n\t *\n\t * @param days The range of days from which events should be returned\n\t * @returns    shortEvents: Array<Array<CalendarEvent>>, short events per day\n\t *             longEvents: Array<CalendarEvent>: long events over the whole range,\n\t *             days: Array<Date>: the original days that were passed in\n\t */\n\tgetEventsOnDaysToRender(days: Array<Date>): EventsOnDays {\n\t\t// addDaysForRecurringEvents produces some weeks that have non-referentially-identical objects for the same event instance (occurrence)\n\t\t// in particular, this happens for the weeks straddling a month border because each month adds a different clone of the occurrence to its part of the week\n\t\t// this means we can't use a set to deduplicate these.\n\n\t\t/** A map from event id and start time to the event instance. It is not enough to just use an id because different occurrences will have the same id. */\n\t\tconst longEvents: Map<string, CalendarEvent> = new Map()\n\t\tlet shortEvents: Array<Array<CalendarEvent>> = []\n\t\t// It might be the case that a UID is shared by events across calendars, so we need to differentiate them by list ID aswell\n\t\tconst transientEventUidsByCalendar = groupByAndMapUniquely(\n\t\t\tthis._transientEvents,\n\t\t\t(event) => getListId(event),\n\t\t\t(event) => event.uid,\n\t\t)\n\n\t\tconst sortEvent = (event: CalendarEvent, shortEventsForDay: Array<CalendarEvent>) => {\n\t\t\tif (isAllDayEvent(event) || getDiffIn60mIntervals(event.startTime, event.endTime) >= 24) {\n\t\t\t\tlongEvents.set(getElementId(event) + event.startTime.toString(), event)\n\t\t\t} else {\n\t\t\t\tshortEventsForDay.push(event)\n\t\t\t}\n\t\t}\n\n\t\tfor (const day of days) {\n\t\t\tconst shortEventsForDay: CalendarEvent[] = []\n\t\t\tconst eventsForDay = this.eventsRepository.getEventsForMonths()().get(day.getTime()) || []\n\n\t\t\tfor (const event of eventsForDay) {\n\t\t\t\tif (transientEventUidsByCalendar.get(getListId(event))?.has(event.uid)) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tif (this._draggedEvent?.originalEvent !== event && shouldDisplayEvent(event, this._hiddenCalendars)) {\n\t\t\t\t\t// this is not the dragged event (not rendered) and does not belong to a hidden calendar, so we should render it.\n\t\t\t\t\tsortEvent(event, shortEventsForDay)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const event of this._transientEvents) {\n\t\t\t\tif (isEventBetweenDays(event, day, day, this.timeZone)) {\n\t\t\t\t\tsortEvent(event, shortEventsForDay)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst temporaryEvent = this._draggedEvent?.eventClone\n\n\t\t\tif (temporaryEvent && isEventBetweenDays(temporaryEvent, day, day, this.timeZone)) {\n\t\t\t\tsortEvent(temporaryEvent, shortEventsForDay)\n\t\t\t}\n\n\t\t\tshortEvents.push(shortEventsForDay)\n\t\t}\n\n\t\tconst longEventsArray = Array.from(longEvents.values())\n\t\treturn {\n\t\t\tdays,\n\t\t\tlongEvents: longEventsArray,\n\t\t\tshortEventsPerDay: shortEvents,\n\t\t}\n\t}\n\n\tasync deleteCalendar(calendar: CalendarInfo): Promise<void> {\n\t\tawait this.calendarModel.deleteCalendar(calendar)\n\t}\n\n\t_addTransientEvent(event: CalendarEvent) {\n\t\tthis._transientEvents.push(event)\n\t}\n\n\t_removeTransientEvent(event: CalendarEvent) {\n\t\tfindAndRemove(this._transientEvents, (transient) => transient.uid === event.uid)\n\t}\n\n\t/**\n\t * move an event to a new start time\n\t * @param event the actually dragged event (may be a repeated instance)\n\t * @param diff the amount of milliseconds to shift the event by\n\t * @param mode which parts of the series should be rescheduled?\n\t */\n\tprivate async moveEvent(event: CalendarEvent, diff: number, mode: CalendarOperation): Promise<EventSaveResult> {\n\t\tif (event.uid == null) {\n\t\t\tthrow new ProgrammingError(\"called moveEvent for an event without uid\")\n\t\t}\n\n\t\tconst editModel = await this.createCalendarEventEditModel(mode, event)\n\t\tif (editModel == null) {\n\t\t\treturn EventSaveResult.Failed\n\t\t}\n\t\teditModel.editModels.whenModel.rescheduleEvent({ millisecond: diff })\n\n\t\tif (getNonOrganizerAttendees(event).length > 0) {\n\t\t\tconst response = await askIfShouldSendCalendarUpdatesToAttendees()\n\t\t\tif (response === \"yes\") {\n\t\t\t\teditModel.editModels.whoModel.shouldSendUpdates = true\n\t\t\t} else if (response === \"cancel\") {\n\t\t\t\treturn EventSaveResult.Failed\n\t\t\t}\n\t\t}\n\n\t\t// Errors are handled in the individual views\n\t\treturn await editModel.apply()\n\t}\n\n\tget eventPreviewModel(): CalendarPreviewModels | null {\n\t\treturn this.previewedEvent?.model ?? null\n\t}\n\n\t/**\n\t * there are several reasons why we might no longer want to preview an event and need to redraw without\n\t * a previewed event:\n\t * * it was deleted\n\t * * it was moved away from the day we're looking at (or the day was moved away)\n\t * * the calendar was unshared or deleted\n\t *\n\t * we would want to keep the selection if the event merely shifted its start time but still intersects the viewed day,\n\t * but that would require going through the UID index because moving events changes their ID.\n\t * because of this and because previewedEvent is the event _before_ we got the update that caused us to reconsider the\n\t * selection, with the old times, this function only works if the selected date changed, but not if the event times\n\t * changed.\n\t */\n\tasync updatePreviewedEvent(event: CalendarEvent | null) {\n\t\tif (event == null) {\n\t\t\tthis.previewedEvent = null\n\t\t\tthis.doRedraw()\n\t\t} else {\n\t\t\tconst previewedEvent = (this.previewedEvent = { event, model: null })\n\t\t\tconst calendarInfos = await this.calendarModel.getCalendarInfosCreateIfNeeded()\n\t\t\tlet previewModel: CalendarPreviewModels\n\t\t\tif (isClientOnlyCalendar(listIdPart(event._id))) {\n\t\t\t\tconst idParts = event._id[1].split(\"#\")!\n\t\t\t\tconst contactId = extractContactIdFromEvent(last(idParts))!\n\t\t\t\tconst contactIdParts = contactId.split(\"/\")\n\t\t\t\tconst contact = await this.contactModel.loadContactFromId([contactIdParts[0], contactIdParts[1]])\n\t\t\t\tpreviewModel = await this.createCalendarContactPreviewModel(event, contact, true)\n\t\t\t} else {\n\t\t\t\tpreviewModel = await this.createCalendarEventPreviewModel(event, calendarInfos)\n\t\t\t}\n\t\t\t// check that we didn't start previewing another event or changed the date in the meantime\n\t\t\tif (this.previewedEvent === previewedEvent) {\n\t\t\t\tthis.previewedEvent.model = previewModel\n\t\t\t\tthis.doRedraw()\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async entityEventReceived<T>(updates: ReadonlyArray<EntityUpdateData>): Promise<void> {\n\t\tfor (const update of updates) {\n\t\t\tif (isUpdateForTypeRef(CalendarEventTypeRef, update)) {\n\t\t\t\tconst eventId: IdTuple = [update.instanceListId, update.instanceId]\n\t\t\t\tif (this.previewedEvent != null && isUpdateFor(this.previewedEvent.event, update)) {\n\t\t\t\t\tif (update.operation === OperationType.DELETE) {\n\t\t\t\t\t\tthis.previewedEvent = null\n\t\t\t\t\t\tthis.doRedraw()\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst event = await this.entityClient.load(CalendarEventTypeRef, eventId)\n\t\t\t\t\t\t\tawait this.updatePreviewedEvent(event)\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tif (e instanceof NotAuthorizedError) {\n\t\t\t\t\t\t\t\t// return updates that are not in cache Range if NotAuthorizedError (for those updates that are in cache range)\n\t\t\t\t\t\t\t\tconsole.log(\"NotAuthorizedError for event in entityEventsReceived of view\", e)\n\t\t\t\t\t\t\t} else if (e instanceof NotFoundError) {\n\t\t\t\t\t\t\t\tconsole.log(\"Not found event in entityEventsReceived of view\", e)\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow e\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst transientEvent = this._transientEvents.find((transientEvent) => isSameId(transientEvent._id, eventId))\n\t\t\t\tif (transientEvent) {\n\t\t\t\t\tthis._removeTransientEvent(transientEvent)\n\t\t\t\t\tthis.doRedraw()\n\t\t\t\t}\n\t\t\t} else if (isUpdateForTypeRef(ContactTypeRef, update) && this.isNewPaidPlan) {\n\t\t\t\tawait this.eventsRepository.loadContactsBirthdays(true)\n\t\t\t\tthis.eventsRepository.refreshBirthdayCalendar(this.selectedDate())\n\t\t\t\tthis.doRedraw()\n\t\t\t} else if (isUpdateForTypeRef(CustomerInfoTypeRef, update)) {\n\t\t\t\tthis.logins\n\t\t\t\t\t.getUserController()\n\t\t\t\t\t.isNewPaidPlan()\n\t\t\t\t\t.then((isNewPaidPlan) => (this._isNewPaidPlan = isNewPaidPlan))\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCalendarInfosCreateIfNeeded(): $Promisable<ReadonlyMap<Id, CalendarInfo>> {\n\t\treturn this.calendarModel.getCalendarInfosCreateIfNeeded()\n\t}\n\n\tloadMonthsIfNeeded(daysInMonths: Array<Date>, progressMonitor: IProgressMonitor): Promise<void> {\n\t\treturn this.eventsRepository.loadMonthsIfNeeded(daysInMonths, progressMonitor, stream(false))\n\t}\n\n\tprivate doRedraw() {\n\t\t// Need to pass some argument to make it a \"set\" operation\n\t\tthis._redrawStream(undefined)\n\t}\n\n\tgetScrollPosition(): number {\n\t\treturn this.scrollPosition\n\t}\n\n\tsetScrollPosition(newPosition: number): void {\n\t\tif (newPosition < 0) {\n\t\t\tthis.scrollPosition = 0\n\t\t} else if (this.scrollMax !== null && newPosition > this.scrollMax) {\n\t\t\tthis.scrollPosition = this.scrollMax\n\t\t} else {\n\t\t\tthis.scrollPosition = newPosition\n\t\t}\n\t}\n\n\tgetScrollMaximum(): number | null {\n\t\treturn this.scrollMax\n\t}\n\n\tgetViewSize(): number | null {\n\t\treturn this.viewSize\n\t}\n\n\tsetViewParameters(dom: HTMLElement): void {\n\t\tthis.scrollMax = dom.scrollHeight - dom.clientHeight\n\t\tthis.viewSize = dom.clientHeight\n\t}\n\n\tscroll(by: number): void {\n\t\tthis.setScrollPosition(this.scrollPosition + by)\n\t}\n\n\tforceSyncExternal(groupSettings: GroupSettings | null, longErrorMessage: boolean = false) {\n\t\tif (!groupSettings) {\n\t\t\treturn\n\t\t}\n\n\t\treturn this.calendarModel.syncExternalCalendars([groupSettings], EXTERNAL_CALENDAR_SYNC_INTERVAL, longErrorMessage, true)\n\t}\n\n\tpublic getCalendarModel() {\n\t\treturn this.calendarModel\n\t}\n\n\thandleClientOnlyUpdate(groupInfo: GroupInfo, newGroupSettings: GroupSettings) {\n\t\tthis.deviceConfig.updateClientOnlyCalendars(groupInfo.group, newGroupSettings)\n\t}\n\n\tget isNewPaidPlan(): Readonly<boolean> {\n\t\treturn this._isNewPaidPlan\n\t}\n}\n\nfunction updateTemporaryEventWithDiff(eventClone: CalendarEvent, originalEvent: CalendarEvent, mouseDiff: number) {\n\teventClone.startTime = new Date(originalEvent.startTime.getTime() + mouseDiff)\n\teventClone.endTime = new Date(originalEvent.endTime.getTime() + mouseDiff)\n}\n"]}