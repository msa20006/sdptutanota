{"version":3,"file":"calendar-worker.js","sourceRoot":"","sources":["../../../../../src/calendar-app/workerUtils/worker/calendar-worker.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,mBAAmB,EAAE,MAAM,sCAAsC,CAAA;AAClF,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAA;AAE5D;;GAEG;AACH,IAAI,CAAC,SAAS,GAAG,UAAU,GAAG;IAC7B,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAA;IAErB,IAAI,IAAI,CAAC,WAAW,KAAK,OAAO,EAAE,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACvB,mBAAmB,CAAC,IAAI,EAAE,IAAI,MAAM,EAAE,CAAC,CAAA;QACvC,OAAO,CAAC,OAAO,EAAE;aACf,IAAI,CAAC,KAAK,IAAI,EAAE;YAChB,MAAM,wBAAwB,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAC7C,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAEhC,IAAI,wBAAwB,IAAI,IAAI,IAAI,WAAW,IAAI,IAAI,EAAE,CAAC;gBAC7D,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;YAC5C,CAAC;YAED,aAAa;YACb,MAAM,UAAU,GAAG,IAAI,kBAAkB,CAAC,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;YACpF,MAAM,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAClC,UAAU,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC,CAAA;YACvH,IAAI,CAAC,WAAW,CAAC;gBAChB,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,EAAE;aACT,CAAC,CAAA;QACH,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;YACZ,IAAI,CAAC,WAAW,CAAC;gBAChB,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC;oBACrB,IAAI,EAAE,OAAO;oBACb,OAAO,EAAE,CAAC,CAAC,OAAO;oBAClB,KAAK,EAAE,CAAC,CAAC,KAAK;iBACd,CAAC;aACF,CAAC,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;SAAM,CAAC;QACP,MAAM,IAAI,KAAK,CAAC,sCAAsC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAA;IAC3E,CAAC;AACF,CAAC,CAAA","sourcesContent":["import { Logger, replaceNativeLogger } from \"../../../common/api/common/Logger.js\"\nimport { CalendarWorkerImpl } from \"./CalendarWorkerImpl.js\"\n\n/**\n * Receives the first message from the client and initializes the WorkerImpl to receive all future messages. Sends a response to the client on this first message.\n */\nself.onmessage = function (msg) {\n\tconst data = msg.data\n\n\tif (data.requestType === \"setup\") {\n\t\tself.env = data.args[0]\n\t\treplaceNativeLogger(self, new Logger())\n\t\tPromise.resolve()\n\t\t\t.then(async () => {\n\t\t\t\tconst initialRandomizerEntropy = data.args[1]\n\t\t\t\tconst browserData = data.args[2]\n\n\t\t\t\tif (initialRandomizerEntropy == null || browserData == null) {\n\t\t\t\t\tthrow new Error(\"Invalid Worker arguments\")\n\t\t\t\t}\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst workerImpl = new CalendarWorkerImpl(typeof self !== \"undefined\" ? self : null)\n\t\t\t\tawait workerImpl.init(browserData)\n\t\t\t\tworkerImpl.exposedInterface.entropyFacade().then((entropyFacade) => entropyFacade.addEntropy(initialRandomizerEntropy))\n\t\t\t\tself.postMessage({\n\t\t\t\t\tid: data.id,\n\t\t\t\t\ttype: \"response\",\n\t\t\t\t\tvalue: {},\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tself.postMessage({\n\t\t\t\t\tid: data.id,\n\t\t\t\t\ttype: \"error\",\n\t\t\t\t\terror: JSON.stringify({\n\t\t\t\t\t\tname: \"Error\",\n\t\t\t\t\t\tmessage: e.message,\n\t\t\t\t\t\tstack: e.stack,\n\t\t\t\t\t}),\n\t\t\t\t})\n\t\t\t})\n\t} else {\n\t\tthrow new Error(\"worker not yet ready. Request type: \" + data.requestType)\n\t}\n}\n"]}