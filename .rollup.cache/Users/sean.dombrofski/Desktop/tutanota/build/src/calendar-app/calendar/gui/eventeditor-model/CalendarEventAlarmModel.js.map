{"version":3,"file":"CalendarEventAlarmModel.js","sourceRoot":"","sources":["../../../../../../src/calendar-app/calendar/gui/eventeditor-model/CalendarEventAlarmModel.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,MAAM,4DAA4D,CAAA;AAC3H,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAA;AAGpD,OAAO,EAAiB,sCAAsC,EAAE,MAAM,mDAAmD,CAAA;AACzH,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAOhC;;GAEG;AACH,MAAM,OAAO,uBAAuB;IAQjB;IACA;IARD,OAAO,GAAyB,EAAE,CAAA;IACnD,yHAAyH;IAChH,gBAAgB,CAAS;IAElC,YACC,SAAoB,EACpB,SAA+B,EAAE,EAChB,YAA0B,EAC1B,mBAA+B,IAAI;QADnC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,qBAAgB,GAAhB,gBAAgB,CAAmB;QAEpD,IAAI,CAAC,gBAAgB;YACpB,SAAS,8BAAkB,IAAI,SAAS,0CAAwB,IAAI,SAAS,oCAAqB,IAAI,SAAS,oCAAqB,CAAA;QACrI,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,MAAM,CAAC,CAAA;IAC3B,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,OAA6B;QACrC,IAAI,OAAO,IAAI,IAAI;YAAE,OAAM;QAE3B,2DAA2D;QAC3D,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAA;QAChF,IAAI,eAAe;YAAE,OAAM;QAE3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAA;IACxB,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,aAA4B;QACvC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,CAAA;QACnC,IAAI,CAAC,gBAAgB,EAAE,CAAA;IACxB,CAAC;IAED,SAAS;QACR,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;IACvB,CAAC;IAED,MAAM,CAAC,iBAAkC;QACxC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,CAAA;IACxC,CAAC;IAED,IAAI,MAAM;QACT,OAAO,IAAI,CAAC,OAAO,CAAA;IACpB,CAAC;IAED,IAAI,MAAM;QACT,OAAO;YACN,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;SAC1E,CAAA;IACF,CAAC;IAEO,YAAY,CAAC,aAA4B;QAChD,OAAO;YACN,eAAe,EAAE,sBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;YAChE,OAAO,EAAE,sBAAsB,CAAC,aAAa,CAAC;SAC9C,CAAA;IACF,CAAC;IAED;;;;;;OAMG;IACH,aAAa,CAAC,QAAuB,EAAE,QAAuB;QAC7D,MAAM,aAAa,GAAG,QAAQ,CAAC,gBAAgB,CAAC,sCAAsC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,EAAE,CAAA;QAC9G,MAAM,aAAa,GAAG,QAAQ,CAAC,gBAAgB,CAAC,sCAAsC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,EAAE,CAAA;QAE9G,OAAO,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,CAAA;IAC3C,CAAC;CACD","sourcesContent":["import { generateEventElementId, serializeAlarmInterval } from \"../../../../common/api/common/utils/CommonCalendarUtils.js\"\nimport { noOp, remove } from \"@tutao/tutanota-utils\"\nimport { EventType } from \"./CalendarEventModel.js\"\nimport { DateProvider } from \"../../../../common/api/common/DateProvider.js\"\nimport { AlarmInterval, alarmIntervalToLuxonDurationLikeObject } from \"../../../../common/calendar/date/CalendarUtils.js\"\nimport { Duration } from \"luxon\"\nimport { AlarmInfoTemplate } from \"../../../../common/api/worker/facades/lazy/CalendarFacade.js\"\n\nexport type CalendarEventAlarmModelResult = {\n\talarms: Array<AlarmInfoTemplate>\n}\n\n/**\n * edit the alarms set on a calendar event.\n */\nexport class CalendarEventAlarmModel {\n\tprivate readonly _alarms: Array<AlarmInterval> = []\n\t/** we can set reminders only if we're able to edit the event on the server because we have to add them to the entity. */\n\treadonly canEditReminders: boolean\n\n\tconstructor(\n\t\teventType: EventType,\n\t\talarms: Array<AlarmInterval> = [],\n\t\tprivate readonly dateProvider: DateProvider,\n\t\tprivate readonly uiUpdateCallback: () => void = noOp,\n\t) {\n\t\tthis.canEditReminders =\n\t\t\teventType === EventType.OWN || eventType === EventType.SHARED_RW || eventType === EventType.LOCKED || eventType === EventType.INVITE\n\t\tthis._alarms = [...alarms]\n\t}\n\n\t/**\n\t * @param trigger the interval to add.\n\t */\n\taddAlarm(trigger: AlarmInterval | null) {\n\t\tif (trigger == null) return\n\n\t\t// Checks if an alarm with the same duration already exists\n\t\tconst alreadyHasAlarm = this._alarms.some((e) => this.isEqualAlarms(trigger, e))\n\t\tif (alreadyHasAlarm) return\n\n\t\tthis._alarms.push(trigger)\n\t\tthis.uiUpdateCallback()\n\t}\n\n\t/**\n\t * deactivate the alarm for the given interval.\n\t */\n\tremoveAlarm(alarmInterval: AlarmInterval) {\n\t\tremove(this._alarms, alarmInterval)\n\t\tthis.uiUpdateCallback()\n\t}\n\n\tremoveAll() {\n\t\tthis._alarms.splice(0)\n\t}\n\n\taddAll(alarmIntervalList: AlarmInterval[]) {\n\t\tthis._alarms.push(...alarmIntervalList)\n\t}\n\n\tget alarms(): ReadonlyArray<AlarmInterval> {\n\t\treturn this._alarms\n\t}\n\n\tget result(): CalendarEventAlarmModelResult {\n\t\treturn {\n\t\t\talarms: Array.from(this._alarms.values()).map((t) => this.makeNewAlarm(t)),\n\t\t}\n\t}\n\n\tprivate makeNewAlarm(alarmInterval: AlarmInterval): AlarmInfoTemplate {\n\t\treturn {\n\t\t\talarmIdentifier: generateEventElementId(this.dateProvider.now()),\n\t\t\ttrigger: serializeAlarmInterval(alarmInterval),\n\t\t}\n\t}\n\n\t/**\n\t * Compares two AlarmIntervals if they have the same duration\n\t * eg: 60 minutes === 1 hour\n\t * @param alarmOne base interval\n\t * @param alarmTwo interval to be compared with\n\t * @return true if they have the same duration\n\t */\n\tisEqualAlarms(alarmOne: AlarmInterval, alarmTwo: AlarmInterval): boolean {\n\t\tconst luxonAlarmOne = Duration.fromDurationLike(alarmIntervalToLuxonDurationLikeObject(alarmOne)).shiftToAll()\n\t\tconst luxonAlarmTwo = Duration.fromDurationLike(alarmIntervalToLuxonDurationLikeObject(alarmTwo)).shiftToAll()\n\n\t\treturn luxonAlarmOne.equals(luxonAlarmTwo)\n\t}\n}\n"]}