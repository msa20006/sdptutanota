import { assertMainOrNode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { DefaultAnimationTime } from "./styles-chunk.js";
import { displayOverlay } from "./RootView-chunk.js";
import { px } from "./size-chunk.js";
import { Button, ButtonType } from "./Button-chunk.js";

//#region src/common/gui/base/NotificationOverlay.ts
assertMainOrNode();
const notificationQueue = [];
let currentAnimationTimeout = null;
var NotificationOverlay = class {
	view(vnode) {
		return mithril_default(".notification-overlay-content.flex.flex-column.flex-space-between", [mithril_default(vnode.attrs.message), mithril_default(".flex.justify-end.flex-wrap", vnode.attrs.buttons.map((b) => mithril_default(Button, b)))]);
	}
};
function show(message, closeButtonAttrs, buttons) {
	notificationQueue.push({
		message,
		buttons,
		closeButtonAttrs
	});
	if (notificationQueue.length > 1) return;
	showNextNotification();
}
function showNextNotification() {
	const { message, buttons, closeButtonAttrs } = notificationQueue[0];
	currentAnimationTimeout = null;
	const width = window.innerWidth;
	const margin = (width - Math.min(400, width)) / 2;
	const allButtons = buttons.slice();
	const overlayRect = {
		width: "fit-content",
		top: px(0),
		left: px(0),
		right: px(0)
	};
	const closeFunction = displayOverlay(() => overlayRect, { view: () => mithril_default(NotificationOverlay, {
		message,
		buttons: allButtons
	}) }, "slide-top", undefined, "dropdown-shadow center-h notification-min-width");
	const closeAndOpenNext = () => {
		if (currentAnimationTimeout !== null) return;
		closeFunction();
		notificationQueue.shift();
		if (notificationQueue.length > 0) currentAnimationTimeout = setTimeout(showNextNotification, 2 * DefaultAnimationTime);
	};
	for (const b of allButtons) {
		const originClickHandler = b.click;
		b.click = (e, dom) => {
			originClickHandler?.(e, dom);
			closeAndOpenNext();
		};
	}
	const closeFinalAttrs = Object.assign({}, {
		label: "close_alt",
		click: closeAndOpenNext,
		type: ButtonType.Secondary
	}, closeButtonAttrs);
	closeFinalAttrs.click = (e, dom) => {
		closeButtonAttrs.click?.(e, dom);
		closeAndOpenNext();
	};
	allButtons.unshift(closeFinalAttrs);
	mithril_default.redraw();
}

//#endregion
export { show };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90aWZpY2F0aW9uT3ZlcmxheS1jaHVuay5qcyIsIm5hbWVzIjpbIm5vdGlmaWNhdGlvblF1ZXVlOiBRdWV1ZUl0ZW1bXSIsImN1cnJlbnRBbmltYXRpb25UaW1lb3V0OiBUaW1lb3V0SUQgfCBudWxsIiwidm5vZGU6IFZub2RlPE5vdGlmaWNhdGlvbk92ZXJsYXlBdHRycz4iLCJtZXNzYWdlOiBDb21wb25lbnQiLCJjbG9zZUJ1dHRvbkF0dHJzOiBQYXJ0aWFsPEJ1dHRvbkF0dHJzPiIsImJ1dHRvbnM6IEFycmF5PEJ1dHRvbkF0dHJzPiIsIm9yaWdpbkNsaWNrSGFuZGxlcjogQ2xpY2tIYW5kbGVyIHwgdW5kZWZpbmVkIiwiY2xvc2VGaW5hbEF0dHJzOiBCdXR0b25BdHRycyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vZ3VpL2Jhc2UvTm90aWZpY2F0aW9uT3ZlcmxheS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbSwgeyBDaGlsZHJlbiwgQ29tcG9uZW50LCBWbm9kZSB9IGZyb20gXCJtaXRocmlsXCJcbmltcG9ydCB7IHB4IH0gZnJvbSBcIi4uL3NpemVcIlxuaW1wb3J0IHsgRGVmYXVsdEFuaW1hdGlvblRpbWUgfSBmcm9tIFwiLi4vYW5pbWF0aW9uL0FuaW1hdGlvbnNcIlxuaW1wb3J0IHsgZGlzcGxheU92ZXJsYXkgfSBmcm9tIFwiLi9PdmVybGF5XCJcbmltcG9ydCB0eXBlIHsgQnV0dG9uQXR0cnMgfSBmcm9tIFwiLi9CdXR0b24uanNcIlxuaW1wb3J0IHsgQnV0dG9uLCBCdXR0b25UeXBlIH0gZnJvbSBcIi4vQnV0dG9uLmpzXCJcbmltcG9ydCB7IGFzc2VydE1haW5Pck5vZGUgfSBmcm9tIFwiLi4vLi4vYXBpL2NvbW1vbi9FbnZcIlxuaW1wb3J0IHsgQ2xpY2tIYW5kbGVyIH0gZnJvbSBcIi4vR3VpVXRpbHNcIlxuXG5hc3NlcnRNYWluT3JOb2RlKClcblxuaW50ZXJmYWNlIE5vdGlmaWNhdGlvbk92ZXJsYXlBdHRycyB7XG5cdG1lc3NhZ2U6IENvbXBvbmVudFxuXHRidXR0b25zOiBBcnJheTxCdXR0b25BdHRycz5cbn1cblxuaW50ZXJmYWNlIFF1ZXVlSXRlbSBleHRlbmRzIE5vdGlmaWNhdGlvbk92ZXJsYXlBdHRycyB7XG5cdGNsb3NlQnV0dG9uQXR0cnM6IFBhcnRpYWw8QnV0dG9uQXR0cnM+XG59XG5cbmNvbnN0IG5vdGlmaWNhdGlvblF1ZXVlOiBRdWV1ZUl0ZW1bXSA9IFtdXG5sZXQgY3VycmVudEFuaW1hdGlvblRpbWVvdXQ6IFRpbWVvdXRJRCB8IG51bGwgPSBudWxsXG5cbmNsYXNzIE5vdGlmaWNhdGlvbk92ZXJsYXkgaW1wbGVtZW50cyBDb21wb25lbnQ8Tm90aWZpY2F0aW9uT3ZlcmxheUF0dHJzPiB7XG5cdHZpZXcodm5vZGU6IFZub2RlPE5vdGlmaWNhdGlvbk92ZXJsYXlBdHRycz4pOiBDaGlsZHJlbiB7XG5cdFx0cmV0dXJuIG0oXCIubm90aWZpY2F0aW9uLW92ZXJsYXktY29udGVudC5mbGV4LmZsZXgtY29sdW1uLmZsZXgtc3BhY2UtYmV0d2VlblwiLCBbXG5cdFx0XHRtKHZub2RlLmF0dHJzLm1lc3NhZ2UpLFxuXHRcdFx0bShcblx0XHRcdFx0XCIuZmxleC5qdXN0aWZ5LWVuZC5mbGV4LXdyYXBcIixcblx0XHRcdFx0dm5vZGUuYXR0cnMuYnV0dG9ucy5tYXAoKGIpID0+IG0oQnV0dG9uLCBiKSksXG5cdFx0XHQpLFxuXHRcdF0pXG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0gbWVzc2FnZSBXaGF0IHdpbGwgYmUgc2hvd24gaW5zaWRlIG5vdGlmaWNhdGlvblxuICogQHBhcmFtIGNsb3NlQnV0dG9uQXR0cnMgVG8gZGVmaW5lIHRoZSBjbG9zZSBidXR0b24gaW4gdGhlIG5vdGlmaWNhdGlvblxuICogQHBhcmFtIGJ1dHRvbnMgVGhlIHBvc3Rwb25lIGJ1dHRvbiBpcyBhdXRvbWF0aWNhbGx5IGFkZGVkIGFuZCBkb2VzIG5vdCBoYXZlIHRvIGJlIHBhc3NlZCBmcm9tIG91dHNpZGVcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2hvdyhtZXNzYWdlOiBDb21wb25lbnQsIGNsb3NlQnV0dG9uQXR0cnM6IFBhcnRpYWw8QnV0dG9uQXR0cnM+LCBidXR0b25zOiBBcnJheTxCdXR0b25BdHRycz4pIHtcblx0bm90aWZpY2F0aW9uUXVldWUucHVzaCh7XG5cdFx0bWVzc2FnZSxcblx0XHRidXR0b25zLFxuXHRcdGNsb3NlQnV0dG9uQXR0cnMsXG5cdH0pXG5cblx0aWYgKG5vdGlmaWNhdGlvblF1ZXVlLmxlbmd0aCA+IDEpIHtcblx0XHQvLyBhbm90aGVyIG5vdGlmaWNhdGlvbiBpcyBhbHJlYWR5IHZpc2libGUuIE5leHQgbm90aWZpY2F0aW9uIHdpbGwgYmUgc2hvd24gd2hlbiBjbG9zaW5nIGN1cnJlbnQgbm90aWZpY2F0aW9uXG5cdFx0cmV0dXJuXG5cdH1cblxuXHRzaG93TmV4dE5vdGlmaWNhdGlvbigpXG59XG5cbmZ1bmN0aW9uIHNob3dOZXh0Tm90aWZpY2F0aW9uKCkge1xuXHRjb25zdCB7IG1lc3NhZ2UsIGJ1dHRvbnMsIGNsb3NlQnV0dG9uQXR0cnMgfSA9IG5vdGlmaWNhdGlvblF1ZXVlWzBdXG5cdGN1cnJlbnRBbmltYXRpb25UaW1lb3V0ID0gbnVsbFxuXHRjb25zdCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoXG5cdGNvbnN0IG1hcmdpbiA9ICh3aWR0aCAtIE1hdGgubWluKDQwMCwgd2lkdGgpKSAvIDJcblx0Y29uc3QgYWxsQnV0dG9ucyA9IGJ1dHRvbnMuc2xpY2UoKVxuXHRjb25zdCBvdmVybGF5UmVjdCA9IHtcblx0XHR3aWR0aDogXCJmaXQtY29udGVudFwiLFxuXHRcdHRvcDogcHgoMCksXG5cdFx0bGVmdDogcHgoMCksXG5cdFx0cmlnaHQ6IHB4KDApLFxuXHR9XG5cdGNvbnN0IGNsb3NlRnVuY3Rpb24gPSBkaXNwbGF5T3ZlcmxheShcblx0XHQoKSA9PiBvdmVybGF5UmVjdCxcblx0XHR7XG5cdFx0XHR2aWV3OiAoKSA9PlxuXHRcdFx0XHRtKE5vdGlmaWNhdGlvbk92ZXJsYXksIHtcblx0XHRcdFx0XHRtZXNzYWdlLFxuXHRcdFx0XHRcdGJ1dHRvbnM6IGFsbEJ1dHRvbnMsXG5cdFx0XHRcdH0pLFxuXHRcdH0sXG5cdFx0XCJzbGlkZS10b3BcIixcblx0XHR1bmRlZmluZWQsXG5cdFx0XCJkcm9wZG93bi1zaGFkb3cgY2VudGVyLWggbm90aWZpY2F0aW9uLW1pbi13aWR0aFwiLFxuXHQpXG5cblx0Y29uc3QgY2xvc2VBbmRPcGVuTmV4dCA9ICgpID0+IHtcblx0XHRpZiAoY3VycmVudEFuaW1hdGlvblRpbWVvdXQgIT09IG51bGwpIHtcblx0XHRcdHJldHVyblxuXHRcdH1cblxuXHRcdGNsb3NlRnVuY3Rpb24oKVxuXHRcdG5vdGlmaWNhdGlvblF1ZXVlLnNoaWZ0KClcblxuXHRcdGlmIChub3RpZmljYXRpb25RdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRjdXJyZW50QW5pbWF0aW9uVGltZW91dCA9IHNldFRpbWVvdXQoc2hvd05leHROb3RpZmljYXRpb24sIDIgKiBEZWZhdWx0QW5pbWF0aW9uVGltZSlcblx0XHR9XG5cdH1cblxuXHQvLyBjbG9zZSB0aGUgbm90aWZpY2F0aW9uIGJ5IGRlZmF1bHQgd2hlbiBwcmVzc2luZyBhbnkgYnV0dG9uXG5cdGZvciAoY29uc3QgYiBvZiBhbGxCdXR0b25zKSB7XG5cdFx0Y29uc3Qgb3JpZ2luQ2xpY2tIYW5kbGVyOiBDbGlja0hhbmRsZXIgfCB1bmRlZmluZWQgPSBiLmNsaWNrXG5cblx0XHRiLmNsaWNrID0gKGUsIGRvbSkgPT4ge1xuXHRcdFx0b3JpZ2luQ2xpY2tIYW5kbGVyPy4oZSwgZG9tKVxuXHRcdFx0Y2xvc2VBbmRPcGVuTmV4dCgpXG5cdFx0fVxuXHR9XG5cdC8vIGFkZCB0aGUgcG9zdHBvbmUgYnV0dG9uXG5cdGNvbnN0IGNsb3NlRmluYWxBdHRyczogQnV0dG9uQXR0cnMgPSBPYmplY3QuYXNzaWduKFxuXHRcdHt9LFxuXHRcdHtcblx0XHRcdGxhYmVsOiBcImNsb3NlX2FsdFwiLFxuXHRcdFx0Y2xpY2s6IGNsb3NlQW5kT3Blbk5leHQsXG5cdFx0XHR0eXBlOiBCdXR0b25UeXBlLlNlY29uZGFyeSxcblx0XHR9LFxuXHRcdGNsb3NlQnV0dG9uQXR0cnMsXG5cdClcblxuXHRjbG9zZUZpbmFsQXR0cnMuY2xpY2sgPSAoZSwgZG9tKSA9PiB7XG5cdFx0Y2xvc2VCdXR0b25BdHRycy5jbGljaz8uKGUsIGRvbSlcblx0XHRjbG9zZUFuZE9wZW5OZXh0KClcblx0fVxuXG5cdGFsbEJ1dHRvbnMudW5zaGlmdChjbG9zZUZpbmFsQXR0cnMpXG5cdG0ucmVkcmF3KClcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFTQSxrQkFBa0I7QUFXbEIsTUFBTUEsb0JBQWlDLENBQUU7QUFDekMsSUFBSUMsMEJBQTRDO0lBRTFDLHNCQUFOLE1BQXlFO0NBQ3hFLEtBQUtDLE9BQWtEO0FBQ3RELFNBQU8sZ0JBQUUscUVBQXFFLENBQzdFLGdCQUFFLE1BQU0sTUFBTSxRQUFRLEVBQ3RCLGdCQUNDLCtCQUNBLE1BQU0sTUFBTSxRQUFRLElBQUksQ0FBQyxNQUFNLGdCQUFFLFFBQVEsRUFBRSxDQUFDLENBQzVDLEFBQ0QsRUFBQztDQUNGO0FBQ0Q7QUFRTSxTQUFTLEtBQUtDLFNBQW9CQyxrQkFBd0NDLFNBQTZCO0FBQzdHLG1CQUFrQixLQUFLO0VBQ3RCO0VBQ0E7RUFDQTtDQUNBLEVBQUM7QUFFRixLQUFJLGtCQUFrQixTQUFTLEVBRTlCO0FBR0QsdUJBQXNCO0FBQ3RCO0FBRUQsU0FBUyx1QkFBdUI7Q0FDL0IsTUFBTSxFQUFFLFNBQVMsU0FBUyxrQkFBa0IsR0FBRyxrQkFBa0I7QUFDakUsMkJBQTBCO0NBQzFCLE1BQU0sUUFBUSxPQUFPO0NBQ3JCLE1BQU0sVUFBVSxRQUFRLEtBQUssSUFBSSxLQUFLLE1BQU0sSUFBSTtDQUNoRCxNQUFNLGFBQWEsUUFBUSxPQUFPO0NBQ2xDLE1BQU0sY0FBYztFQUNuQixPQUFPO0VBQ1AsS0FBSyxHQUFHLEVBQUU7RUFDVixNQUFNLEdBQUcsRUFBRTtFQUNYLE9BQU8sR0FBRyxFQUFFO0NBQ1o7Q0FDRCxNQUFNLGdCQUFnQixlQUNyQixNQUFNLGFBQ04sRUFDQyxNQUFNLE1BQ0wsZ0JBQUUscUJBQXFCO0VBQ3RCO0VBQ0EsU0FBUztDQUNULEVBQUMsQ0FDSCxHQUNELGFBQ0EsV0FDQSxrREFDQTtDQUVELE1BQU0sbUJBQW1CLE1BQU07QUFDOUIsTUFBSSw0QkFBNEIsS0FDL0I7QUFHRCxpQkFBZTtBQUNmLG9CQUFrQixPQUFPO0FBRXpCLE1BQUksa0JBQWtCLFNBQVMsRUFDOUIsMkJBQTBCLFdBQVcsc0JBQXNCLElBQUkscUJBQXFCO0NBRXJGO0FBR0QsTUFBSyxNQUFNLEtBQUssWUFBWTtFQUMzQixNQUFNQyxxQkFBK0MsRUFBRTtBQUV2RCxJQUFFLFFBQVEsQ0FBQyxHQUFHLFFBQVE7QUFDckIsd0JBQXFCLEdBQUcsSUFBSTtBQUM1QixxQkFBa0I7RUFDbEI7Q0FDRDtDQUVELE1BQU1DLGtCQUErQixPQUFPLE9BQzNDLENBQUUsR0FDRjtFQUNDLE9BQU87RUFDUCxPQUFPO0VBQ1AsTUFBTSxXQUFXO0NBQ2pCLEdBQ0QsaUJBQ0E7QUFFRCxpQkFBZ0IsUUFBUSxDQUFDLEdBQUcsUUFBUTtBQUNuQyxtQkFBaUIsUUFBUSxHQUFHLElBQUk7QUFDaEMsb0JBQWtCO0NBQ2xCO0FBRUQsWUFBVyxRQUFRLGdCQUFnQjtBQUNuQyxpQkFBRSxRQUFRO0FBQ1YifQ==