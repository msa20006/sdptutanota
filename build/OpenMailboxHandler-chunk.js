import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { assertNotNull } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import "./LanguageViewModel-chunk.js";
import { MailSetKind } from "./TutanotaConstants-chunk.js";
import { getElementId } from "./EntityUtils-chunk.js";
import "./GroupUtils-chunk.js";
import { assertSystemFolderOfType } from "./MailUtils-chunk.js";

//#region src/mail-app/native/main/OpenMailboxHandler.ts
var OpenMailboxHandler = class {
	constructor(logins, mailModel, mailboxModel) {
		this.logins = logins;
		this.mailModel = mailModel;
		this.mailboxModel = mailboxModel;
	}
	async openMailbox(userId, mailAddress, requestedPath) {
		if (this.logins.isUserLoggedIn() && this.logins.getUserController().user._id === userId) if (!requestedPath) {
			const [mailboxDetail] = await this.mailboxModel.getMailboxDetails();
			const folders = await this.mailModel.getMailboxFoldersForId(assertNotNull(mailboxDetail.mailbox.folders)._id);
			const inbox = assertSystemFolderOfType(folders, MailSetKind.INBOX);
			mithril_default.route.set("/mail/" + getElementId(inbox));
		} else mithril_default.route.set("/mail" + requestedPath);
else if (!requestedPath) mithril_default.route.set(`/login?noAutoLogin=false&userId=${userId}&loginWith=${mailAddress}`);
else {
			const fullRequestedPath = `/mail${requestedPath}`;
			mithril_default.route.set(`/login?noAutoLogin=false&userId=${userId}&loginWith=${mailAddress}&requestedPath=${encodeURIComponent(fullRequestedPath)}`);
		}
	}
};

//#endregion
export { OpenMailboxHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3Blbk1haWxib3hIYW5kbGVyLWNodW5rLmpzIiwibmFtZXMiOlsibG9naW5zOiBMb2dpbkNvbnRyb2xsZXIiLCJtYWlsTW9kZWw6IE1haWxNb2RlbCIsIm1haWxib3hNb2RlbDogTWFpbGJveE1vZGVsIiwidXNlcklkOiBJZCIsIm1haWxBZGRyZXNzOiBzdHJpbmciLCJyZXF1ZXN0ZWRQYXRoOiBzdHJpbmcgfCBudWxsIl0sInNvdXJjZXMiOlsiLi4vc3JjL21haWwtYXBwL25hdGl2ZS9tYWluL09wZW5NYWlsYm94SGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbSBmcm9tIFwibWl0aHJpbFwiXG5pbXBvcnQgeyBNYWlsU2V0S2luZCB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vYXBpL2NvbW1vbi9UdXRhbm90YUNvbnN0YW50cy5qc1wiXG5pbXBvcnQgeyBhc3NlcnROb3ROdWxsIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5pbXBvcnQgeyBhc3NlcnRTeXN0ZW1Gb2xkZXJPZlR5cGUgfSBmcm9tIFwiLi4vLi4vbWFpbC9tb2RlbC9NYWlsVXRpbHMuanNcIlxuaW1wb3J0IHsgZ2V0RWxlbWVudElkIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9hcGkvY29tbW9uL3V0aWxzL0VudGl0eVV0aWxzLmpzXCJcbmltcG9ydCB7IExvZ2luQ29udHJvbGxlciB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vYXBpL21haW4vTG9naW5Db250cm9sbGVyLmpzXCJcbmltcG9ydCB7IE1haWxNb2RlbCB9IGZyb20gXCIuLi8uLi9tYWlsL21vZGVsL01haWxNb2RlbC5qc1wiXG5pbXBvcnQgeyBNYWlsYm94TW9kZWwgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL21haWxGdW5jdGlvbmFsaXR5L01haWxib3hNb2RlbC5qc1wiXG5cbi8qKlxuICogSGFuZGxlcyByZXF1ZXN0cyBmb3Igb3BlbmluZyBtYWlsYm94IHBhdGhzIGZyb20gbmF0aXZlLlxuICovXG5leHBvcnQgY2xhc3MgT3Blbk1haWxib3hIYW5kbGVyIHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBsb2dpbnM6IExvZ2luQ29udHJvbGxlciwgcHJpdmF0ZSByZWFkb25seSBtYWlsTW9kZWw6IE1haWxNb2RlbCwgcHJpdmF0ZSByZWFkb25seSBtYWlsYm94TW9kZWw6IE1haWxib3hNb2RlbCkge31cblxuXHRhc3luYyBvcGVuTWFpbGJveCh1c2VySWQ6IElkLCBtYWlsQWRkcmVzczogc3RyaW5nLCByZXF1ZXN0ZWRQYXRoOiBzdHJpbmcgfCBudWxsKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0aWYgKHRoaXMubG9naW5zLmlzVXNlckxvZ2dlZEluKCkgJiYgdGhpcy5sb2dpbnMuZ2V0VXNlckNvbnRyb2xsZXIoKS51c2VyLl9pZCA9PT0gdXNlcklkKSB7XG5cdFx0XHRpZiAoIXJlcXVlc3RlZFBhdGgpIHtcblx0XHRcdFx0Y29uc3QgW21haWxib3hEZXRhaWxdID0gYXdhaXQgdGhpcy5tYWlsYm94TW9kZWwuZ2V0TWFpbGJveERldGFpbHMoKVxuXHRcdFx0XHRjb25zdCBmb2xkZXJzID0gYXdhaXQgdGhpcy5tYWlsTW9kZWwuZ2V0TWFpbGJveEZvbGRlcnNGb3JJZChhc3NlcnROb3ROdWxsKG1haWxib3hEZXRhaWwubWFpbGJveC5mb2xkZXJzKS5faWQpXG5cdFx0XHRcdGNvbnN0IGluYm94ID0gYXNzZXJ0U3lzdGVtRm9sZGVyT2ZUeXBlKGZvbGRlcnMsIE1haWxTZXRLaW5kLklOQk9YKVxuXHRcdFx0XHRtLnJvdXRlLnNldChcIi9tYWlsL1wiICsgZ2V0RWxlbWVudElkKGluYm94KSlcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG0ucm91dGUuc2V0KFwiL21haWxcIiArIHJlcXVlc3RlZFBhdGgpXG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICghcmVxdWVzdGVkUGF0aCkge1xuXHRcdFx0XHRtLnJvdXRlLnNldChgL2xvZ2luP25vQXV0b0xvZ2luPWZhbHNlJnVzZXJJZD0ke3VzZXJJZH0mbG9naW5XaXRoPSR7bWFpbEFkZHJlc3N9YClcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnN0IGZ1bGxSZXF1ZXN0ZWRQYXRoID0gYC9tYWlsJHtyZXF1ZXN0ZWRQYXRofWBcblx0XHRcdFx0bS5yb3V0ZS5zZXQoYC9sb2dpbj9ub0F1dG9Mb2dpbj1mYWxzZSZ1c2VySWQ9JHt1c2VySWR9JmxvZ2luV2l0aD0ke21haWxBZGRyZXNzfSZyZXF1ZXN0ZWRQYXRoPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGZ1bGxSZXF1ZXN0ZWRQYXRoKX1gKVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0lBWWEscUJBQU4sTUFBeUI7Q0FDL0IsWUFBNkJBLFFBQTBDQyxXQUF1Q0MsY0FBNEI7RUFzQjFJLEtBdEI2QjtFQXNCNUIsS0F0QnNFO0VBc0JyRSxLQXRCNEc7Q0FBOEI7Q0FFNUksTUFBTSxZQUFZQyxRQUFZQyxhQUFxQkMsZUFBNkM7QUFDL0YsTUFBSSxLQUFLLE9BQU8sZ0JBQWdCLElBQUksS0FBSyxPQUFPLG1CQUFtQixDQUFDLEtBQUssUUFBUSxPQUNoRixNQUFLLGVBQWU7R0FDbkIsTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLEtBQUssYUFBYSxtQkFBbUI7R0FDbkUsTUFBTSxVQUFVLE1BQU0sS0FBSyxVQUFVLHVCQUF1QixjQUFjLGNBQWMsUUFBUSxRQUFRLENBQUMsSUFBSTtHQUM3RyxNQUFNLFFBQVEseUJBQXlCLFNBQVMsWUFBWSxNQUFNO0FBQ2xFLG1CQUFFLE1BQU0sSUFBSSxXQUFXLGFBQWEsTUFBTSxDQUFDO0VBQzNDLE1BQ0EsaUJBQUUsTUFBTSxJQUFJLFVBQVUsY0FBYztVQUdoQyxjQUNKLGlCQUFFLE1BQU0sS0FBSyxrQ0FBa0MsT0FBTyxhQUFhLFlBQVksRUFBRTtLQUMzRTtHQUNOLE1BQU0scUJBQXFCLE9BQU8sY0FBYztBQUNoRCxtQkFBRSxNQUFNLEtBQUssa0NBQWtDLE9BQU8sYUFBYSxZQUFZLGlCQUFpQixtQkFBbUIsa0JBQWtCLENBQUMsRUFBRTtFQUN4STtDQUVGO0FBQ0QifQ==