import { mithril_default } from "./mithril-chunk.js";
import { DefaultAnimationTime, styles } from "./styles-chunk.js";
import { stateBgActive, stateBgHover, theme } from "./theme-chunk.js";
import { PrimaryNavigationType, currentNavigationType } from "./RootView-chunk.js";
import { px, size } from "./size-chunk.js";

//#region src/common/gui/SelectableRowContainer.ts
var SelectableRowContainer = class SelectableRowContainer {
	dom = null;
	selected = false;
	isInMultiselect = false;
	view({ attrs, children }) {
		return mithril_default(".flex.mb-xs.border-radius.pt-m.pb-m.pl.pr.ml-s", {
			style: {
				paddingTop: "14px",
				paddingBottom: "12px",
				marginRight: styles.isSingleColumnLayout() ? px(size.hpad_small) : "0",
				transition: `background 200ms`
			},
			oncreate: ({ dom }) => {
				this.dom = dom;
				this.updateDomBg();
				attrs.onSelectedChangeRef?.((selected, isInMultiselect) => {
					this.selected = selected;
					this.isInMultiselect = isInMultiselect;
					this.updateDomBg();
				});
			},
			onfocus: () => {
				if (SelectableRowContainer.isUsingKeyboard()) this.setBackground(stateBgActive);
			},
			onblur: () => {
				if (SelectableRowContainer.isUsingKeyboard()) if (this.selected && !styles.isSingleColumnLayout()) this.setBackground(stateBgHover);
else this.setBackground(theme.list_bg);
			},
			onpointerdown: () => this.setBackground(stateBgActive),
			onpointerup: this.updateDomBg,
			onpointercancel: this.updateDomBg,
			onpointerleave: this.updateDomBg
		}, children);
	}
	setBackground(color) {
		if (this.dom) this.dom.style.backgroundColor = color;
	}
	static isUsingKeyboard() {
		return currentNavigationType === PrimaryNavigationType.Keyboard;
	}
	updateDomBg = () => {
		const isUsingKeyboard = SelectableRowContainer.isUsingKeyboard();
		const highlight = styles.isSingleColumnLayout() ? (this.isInMultiselect || isUsingKeyboard) && this.selected : this.selected;
		this.setBackground(highlight ? stateBgHover : theme.list_bg);
	};
};
function setVisibility(dom, visible) {
	dom.style.display = visible ? "" : "none";
}
function checkboxOpacity(dom, selected) {
	if (selected) dom.classList.remove("list-checkbox");
else dom.classList.add("list-checkbox");
}
function shouldAlwaysShowMultiselectCheckbox() {
	return !styles.isUsingBottomNavigation();
}
const selectableRowAnimParams = {
	duration: DefaultAnimationTime,
	easing: "ease-in-out",
	fill: "forwards",
	delay: 36
};
const scaleXHide = "scaleX(0)";
const scaleXShow = "scaleX(1)";

//#endregion
export { SelectableRowContainer, checkboxOpacity, scaleXHide, scaleXShow, selectableRowAnimParams, setVisibility, shouldAlwaysShowMultiselectCheckbox };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VsZWN0YWJsZVJvd0NvbnRhaW5lci1jaHVuay5qcyIsIm5hbWVzIjpbImNvbG9yOiBzdHJpbmciLCJkb206IEhUTUxFbGVtZW50IiwidmlzaWJsZTogYm9vbGVhbiIsImRvbTogSFRNTElucHV0RWxlbWVudCIsInNlbGVjdGVkOiBib29sZWFuIiwic2VsZWN0YWJsZVJvd0FuaW1QYXJhbXM6IEtleWZyYW1lQW5pbWF0aW9uT3B0aW9ucyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vZ3VpL1NlbGVjdGFibGVSb3dDb250YWluZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0sIHsgQ2xhc3NDb21wb25lbnQsIFZub2RlIH0gZnJvbSBcIm1pdGhyaWxcIlxuaW1wb3J0IHsgc3RhdGVCZ0FjdGl2ZSwgc3RhdGVCZ0hvdmVyIH0gZnJvbSBcIi4vYnVpbHRpblRoZW1lcy5qc1wiXG5pbXBvcnQgeyB0aGVtZSB9IGZyb20gXCIuL3RoZW1lLmpzXCJcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gXCIuL3N0eWxlcy5qc1wiXG5pbXBvcnQgeyBweCwgc2l6ZSB9IGZyb20gXCIuL3NpemUuanNcIlxuaW1wb3J0IHsgRGVmYXVsdEFuaW1hdGlvblRpbWUgfSBmcm9tIFwiLi9hbmltYXRpb24vQW5pbWF0aW9ucy5qc1wiXG5pbXBvcnQgeyBjdXJyZW50TmF2aWdhdGlvblR5cGUsIFByaW1hcnlOYXZpZ2F0aW9uVHlwZSB9IGZyb20gXCIuLi8uLi9Sb290Vmlldy5qc1wiXG5cbi8qKiBBIGZ1bmN0aW9uIHRoYXQgY2FuIGFkanVzdCB0aGUgc3R5bGUgb2YgdGhlIHNlbGVjdGFibGUgcm93LiAqL1xuZXhwb3J0IHR5cGUgU2VsZWN0YWJsZVJvd1NlbGVjdGVkU2V0dGVyID0gKHNlbGVjdGVkOiBib29sZWFuLCBpc0luTXVsdGlzZWxlY3Q6IGJvb2xlYW4pID0+IHVua25vd25cblxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3RhYmxlUm93Q29udGFpbmVyQXR0cnMge1xuXHQvKiogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aXRoIGEgc2V0dGVyIGZvciB0aGUgcm93IHN0eWxlIG9uY2UgaXQncyBhdmFpbGFibGUuICovXG5cdG9uU2VsZWN0ZWRDaGFuZ2VSZWY/OiAoY2hhbmdlcjogU2VsZWN0YWJsZVJvd1NlbGVjdGVkU2V0dGVyKSA9PiB1bmtub3duXG59XG5cbmV4cG9ydCBjbGFzcyBTZWxlY3RhYmxlUm93Q29udGFpbmVyIGltcGxlbWVudHMgQ2xhc3NDb21wb25lbnQ8U2VsZWN0YWJsZVJvd0NvbnRhaW5lckF0dHJzPiB7XG5cdHByaXZhdGUgZG9tOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsXG5cdHByaXZhdGUgc2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZVxuXHRwcml2YXRlIGlzSW5NdWx0aXNlbGVjdDogYm9vbGVhbiA9IGZhbHNlXG5cblx0dmlldyh7IGF0dHJzLCBjaGlsZHJlbiB9OiBWbm9kZTxTZWxlY3RhYmxlUm93Q29udGFpbmVyQXR0cnM+KSB7XG5cdFx0cmV0dXJuIG0oXG5cdFx0XHRcIi5mbGV4Lm1iLXhzLmJvcmRlci1yYWRpdXMucHQtbS5wYi1tLnBsLnByLm1sLXNcIixcblx0XHRcdHtcblx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRwYWRkaW5nVG9wOiBcIjE0cHhcIixcblx0XHRcdFx0XHRwYWRkaW5nQm90dG9tOiBcIjEycHhcIixcblx0XHRcdFx0XHQvLyB0aGlzIGlzIGFuIGFkanVzdG1lbnQgdG8ga2VlcCB0aGEgY29sdW1ucyBhbGlnbmVkLCBzcGFjZSBiZXR3ZWVuIGNvbHVtbnMgaXMgdG9vIGJpZyBvdGhlcndpc2UuXG5cdFx0XHRcdFx0Ly8gdGhpcyBpcyBhbiBvYnNjdXJlIHBsYWNlIHRvIHB1dCBpdCBhbmQgaWRlYWxseSBzaG91bGQgbm90IGJlIGRvbmUgaGVyZSBvciBzaG91bGQgYmUgcGFzc2VkIGRvd24gaGVyZS5cblx0XHRcdFx0XHRtYXJnaW5SaWdodDogc3R5bGVzLmlzU2luZ2xlQ29sdW1uTGF5b3V0KCkgPyBweChzaXplLmhwYWRfc21hbGwpIDogXCIwXCIsXG5cdFx0XHRcdFx0dHJhbnNpdGlvbjogYGJhY2tncm91bmQgMjAwbXNgLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRvbmNyZWF0ZTogKHsgZG9tIH0pID0+IHtcblx0XHRcdFx0XHR0aGlzLmRvbSA9IGRvbSBhcyBIVE1MRWxlbWVudFxuXHRcdFx0XHRcdHRoaXMudXBkYXRlRG9tQmcoKVxuXHRcdFx0XHRcdGF0dHJzLm9uU2VsZWN0ZWRDaGFuZ2VSZWY/Ligoc2VsZWN0ZWQsIGlzSW5NdWx0aXNlbGVjdCkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5zZWxlY3RlZCA9IHNlbGVjdGVkXG5cdFx0XHRcdFx0XHR0aGlzLmlzSW5NdWx0aXNlbGVjdCA9IGlzSW5NdWx0aXNlbGVjdFxuXHRcdFx0XHRcdFx0dGhpcy51cGRhdGVEb21CZygpXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gSGlnaGxpZ2h0IHRoZSByb3cgd2hlbiBpdCBpcyB0YWJiZWQgaW50b1xuXHRcdFx0XHRvbmZvY3VzOiAoKSA9PiB7XG5cdFx0XHRcdFx0aWYgKFNlbGVjdGFibGVSb3dDb250YWluZXIuaXNVc2luZ0tleWJvYXJkKCkpIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0QmFja2dyb3VuZChzdGF0ZUJnQWN0aXZlKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0b25ibHVyOiAoKSA9PiB7XG5cdFx0XHRcdFx0aWYgKFNlbGVjdGFibGVSb3dDb250YWluZXIuaXNVc2luZ0tleWJvYXJkKCkpIHtcblx0XHRcdFx0XHRcdGlmICh0aGlzLnNlbGVjdGVkICYmICFzdHlsZXMuaXNTaW5nbGVDb2x1bW5MYXlvdXQoKSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnNldEJhY2tncm91bmQoc3RhdGVCZ0hvdmVyKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5zZXRCYWNrZ3JvdW5kKHRoZW1lLmxpc3RfYmcpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRvbnBvaW50ZXJkb3duOiAoKSA9PiB0aGlzLnNldEJhY2tncm91bmQoc3RhdGVCZ0FjdGl2ZSksXG5cdFx0XHRcdG9ucG9pbnRlcnVwOiB0aGlzLnVwZGF0ZURvbUJnLFxuXHRcdFx0XHRvbnBvaW50ZXJjYW5jZWw6IHRoaXMudXBkYXRlRG9tQmcsXG5cdFx0XHRcdG9ucG9pbnRlcmxlYXZlOiB0aGlzLnVwZGF0ZURvbUJnLFxuXHRcdFx0fSxcblx0XHRcdGNoaWxkcmVuLFxuXHRcdClcblx0fVxuXG5cdHByaXZhdGUgc2V0QmFja2dyb3VuZChjb2xvcjogc3RyaW5nKSB7XG5cdFx0aWYgKHRoaXMuZG9tKSB0aGlzLmRvbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvclxuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgaXNVc2luZ0tleWJvYXJkKCkge1xuXHRcdHJldHVybiBjdXJyZW50TmF2aWdhdGlvblR5cGUgPT09IFByaW1hcnlOYXZpZ2F0aW9uVHlwZS5LZXlib2FyZFxuXHR9XG5cblx0cHJpdmF0ZSB1cGRhdGVEb21CZyA9ICgpID0+IHtcblx0XHRjb25zdCBpc1VzaW5nS2V5Ym9hcmQgPSBTZWxlY3RhYmxlUm93Q29udGFpbmVyLmlzVXNpbmdLZXlib2FyZCgpXG5cdFx0Ly8gSW4gdGhlIHNpbmdsZSBjb2x1bW4gdmlldywgYSByb3cgbWF5IGJlICdzZWxlY3RlZCcgYnkgdGhlIFVSTCBzdGlsbCBsaW5raW5nIHRvIGEgc3BlY2lmaWMgbWFpbFxuXHRcdC8vIFNvIGRvIG5vdCBoaWdobGlnaHQgaW4gdGhhdCBjYXNlIGJ1dCBpbiBqdXN0IG11bHRpc2VsZWN0IG1vZGUgYW5kIGtleWJvYXJkIG5hdmlnYXRpb25cblx0XHRjb25zdCBoaWdobGlnaHQgPSBzdHlsZXMuaXNTaW5nbGVDb2x1bW5MYXlvdXQoKSA/ICh0aGlzLmlzSW5NdWx0aXNlbGVjdCB8fCBpc1VzaW5nS2V5Ym9hcmQpICYmIHRoaXMuc2VsZWN0ZWQgOiB0aGlzLnNlbGVjdGVkXG5cdFx0dGhpcy5zZXRCYWNrZ3JvdW5kKGhpZ2hsaWdodCA/IHN0YXRlQmdIb3ZlciA6IHRoZW1lLmxpc3RfYmcpXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFZpc2liaWxpdHkoZG9tOiBIVE1MRWxlbWVudCwgdmlzaWJsZTogYm9vbGVhbikge1xuXHRkb20uc3R5bGUuZGlzcGxheSA9IHZpc2libGUgPyBcIlwiIDogXCJub25lXCJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrYm94T3BhY2l0eShkb206IEhUTUxJbnB1dEVsZW1lbnQsIHNlbGVjdGVkOiBib29sZWFuKSB7XG5cdGlmIChzZWxlY3RlZCkge1xuXHRcdGRvbS5jbGFzc0xpc3QucmVtb3ZlKFwibGlzdC1jaGVja2JveFwiKVxuXHR9IGVsc2Uge1xuXHRcdGRvbS5jbGFzc0xpc3QuYWRkKFwibGlzdC1jaGVja2JveFwiKVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRBbHdheXNTaG93TXVsdGlzZWxlY3RDaGVja2JveCgpIHtcblx0cmV0dXJuICFzdHlsZXMuaXNVc2luZ0JvdHRvbU5hdmlnYXRpb24oKVxufVxuXG4vLyBkZWxheSBieSAyIGZyYW1lcyByb3VnaGx5IHNvIHRoYXQgdGhlIGJyb3dzZXIgaGFzIHRpbWUgdG8gZG8gaGVhdnkgc3R1ZmYgd2l0aCBsYXlvdXRcbmV4cG9ydCBjb25zdCBzZWxlY3RhYmxlUm93QW5pbVBhcmFtczogS2V5ZnJhbWVBbmltYXRpb25PcHRpb25zID0geyBkdXJhdGlvbjogRGVmYXVsdEFuaW1hdGlvblRpbWUsIGVhc2luZzogXCJlYXNlLWluLW91dFwiLCBmaWxsOiBcImZvcndhcmRzXCIsIGRlbGF5OiAzNiB9XG5leHBvcnQgY29uc3Qgc2NhbGVYSGlkZSA9IFwic2NhbGVYKDApXCJcbmV4cG9ydCBjb25zdCBzY2FsZVhTaG93ID0gXCJzY2FsZVgoMSlcIlxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0lBZ0JhLHlCQUFOLE1BQU0sdUJBQThFO0NBQzFGLEFBQVEsTUFBMEI7Q0FDbEMsQUFBUSxXQUFvQjtDQUM1QixBQUFRLGtCQUEyQjtDQUVuQyxLQUFLLEVBQUUsT0FBTyxVQUE4QyxFQUFFO0FBQzdELFNBQU8sZ0JBQ04sa0RBQ0E7R0FDQyxPQUFPO0lBQ04sWUFBWTtJQUNaLGVBQWU7SUFHZixhQUFhLE9BQU8sc0JBQXNCLEdBQUcsR0FBRyxLQUFLLFdBQVcsR0FBRztJQUNuRSxhQUFhO0dBQ2I7R0FDRCxVQUFVLENBQUMsRUFBRSxLQUFLLEtBQUs7QUFDdEIsU0FBSyxNQUFNO0FBQ1gsU0FBSyxhQUFhO0FBQ2xCLFVBQU0sc0JBQXNCLENBQUMsVUFBVSxvQkFBb0I7QUFDMUQsVUFBSyxXQUFXO0FBQ2hCLFVBQUssa0JBQWtCO0FBQ3ZCLFVBQUssYUFBYTtJQUNsQixFQUFDO0dBQ0Y7R0FFRCxTQUFTLE1BQU07QUFDZCxRQUFJLHVCQUF1QixpQkFBaUIsQ0FDM0MsTUFBSyxjQUFjLGNBQWM7R0FFbEM7R0FDRCxRQUFRLE1BQU07QUFDYixRQUFJLHVCQUF1QixpQkFBaUIsQ0FDM0MsS0FBSSxLQUFLLGFBQWEsT0FBTyxzQkFBc0IsQ0FDbEQsTUFBSyxjQUFjLGFBQWE7SUFFaEMsTUFBSyxjQUFjLE1BQU0sUUFBUTtHQUduQztHQUNELGVBQWUsTUFBTSxLQUFLLGNBQWMsY0FBYztHQUN0RCxhQUFhLEtBQUs7R0FDbEIsaUJBQWlCLEtBQUs7R0FDdEIsZ0JBQWdCLEtBQUs7RUFDckIsR0FDRCxTQUNBO0NBQ0Q7Q0FFRCxBQUFRLGNBQWNBLE9BQWU7QUFDcEMsTUFBSSxLQUFLLElBQUssTUFBSyxJQUFJLE1BQU0sa0JBQWtCO0NBQy9DO0NBRUQsT0FBZSxrQkFBa0I7QUFDaEMsU0FBTywwQkFBMEIsc0JBQXNCO0NBQ3ZEO0NBRUQsQUFBUSxjQUFjLE1BQU07RUFDM0IsTUFBTSxrQkFBa0IsdUJBQXVCLGlCQUFpQjtFQUdoRSxNQUFNLFlBQVksT0FBTyxzQkFBc0IsSUFBSSxLQUFLLG1CQUFtQixvQkFBb0IsS0FBSyxXQUFXLEtBQUs7QUFDcEgsT0FBSyxjQUFjLFlBQVksZUFBZSxNQUFNLFFBQVE7Q0FDNUQ7QUFDRDtBQUVNLFNBQVMsY0FBY0MsS0FBa0JDLFNBQWtCO0FBQ2pFLEtBQUksTUFBTSxVQUFVLFVBQVUsS0FBSztBQUNuQztBQUVNLFNBQVMsZ0JBQWdCQyxLQUF1QkMsVUFBbUI7QUFDekUsS0FBSSxTQUNILEtBQUksVUFBVSxPQUFPLGdCQUFnQjtJQUVyQyxLQUFJLFVBQVUsSUFBSSxnQkFBZ0I7QUFFbkM7QUFFTSxTQUFTLHNDQUFzQztBQUNyRCxTQUFRLE9BQU8seUJBQXlCO0FBQ3hDO01BR1lDLDBCQUFvRDtDQUFFLFVBQVU7Q0FBc0IsUUFBUTtDQUFlLE1BQU07Q0FBWSxPQUFPO0FBQUk7TUFDMUksYUFBYTtNQUNiLGFBQWEifQ==