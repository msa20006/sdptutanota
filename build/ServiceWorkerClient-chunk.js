import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { isApp, isDesktop } from "./Env-chunk.js";
import "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { windowFacade } from "./WindowFacade-chunk.js";
import "./ParserCombinator-chunk.js";
import { handleUncaughtError } from "./ErrorHandler-chunk.js";
import { isNotSupportedError, isSecurityError, objToError } from "./ErrorUtils-chunk.js";
import "./RestError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";

//#region src/common/serviceworker/ServiceWorkerClient.ts
function showUpdateOverlay({ showChangelogLink, onUpdate }) {
	const notificationMessage = { view: () => {
		return mithril_default("span", [
			lang.get("updateFound_label"),
			" ",
			showChangelogLink ? mithril_default("a", {
				href: `https://github.com/tutao/tutanota/releases/`,
				target: "_blank"
			}, lang.get("releaseNotes_action")) : null
		]);
	} };
	Promise.all([import("./NotificationOverlay2-chunk.js"), import("./Button2-chunk.js")]).then(([notificationOverlay, { ButtonType }]) => {
		notificationOverlay.show(notificationMessage, { label: "postpone_action" }, [{
			label: "refresh_action",
			click: onUpdate,
			type: ButtonType.Primary
		}]);
	});
}
function showUpdateMessageIfNeeded(registration, domainConfig) {
	const pending = registration.waiting || registration.installing;
	if (pending && registration.active) showUpdateOverlay({
		showChangelogLink: domainConfig.firstPartyDomain,
		onUpdate: () => {
			console.log("registration.waiting: ", registration.waiting);
			registration.waiting?.postMessage("update");
		}
	});
}
function init(domainConfig) {
	const serviceWorker = navigator.serviceWorker;
	if (serviceWorker) {
		if (env.dist && !isApp() && !isDesktop() && window.nativeAppWebDialog == null) {
			console.log("Registering ServiceWorker");
			serviceWorker.register(window.tutao.appState.prefixWithoutFile + "/sw.js").then((registration) => {
				console.log("ServiceWorker has been installed");
				showUpdateMessageIfNeeded(registration, domainConfig);
				registration.addEventListener("updatefound", () => {
					console.log("updatefound");
					showUpdateMessageIfNeeded(registration, domainConfig);
				});
				const active = registration.active;
				let refreshing = false;
				serviceWorker.addEventListener("controllerchange", (e) => {
					console.log("controllerchange");
					if (!active || refreshing) {
						console.log(`Skip refreshing: active: ${String(active)} refreshing: ${String(refreshing)}`);
						return;
					}
					windowFacade.windowCloseConfirmation = false;
					refreshing = true;
					windowFacade.reload({});
				});
				serviceWorker.addEventListener("message", (event) => {
					if (event.data == null || typeof event.data !== "object") {
						console.error("Got strange message from sw", event.data);
						return;
					}
					if (event.data.type === "error") {
						const unserializedError = objToError(event.data.value);
						handleUncaughtError(unserializedError);
					}
				});
			}).catch((e) => {
				console.warn("Failed to register the service worker:", e.message);
				if (!(isSecurityError(e) || isNotSupportedError(e))) throw e;
			});
		}
	} else console.log("ServiceWorker is not supported");
}

//#endregion
export { init };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,