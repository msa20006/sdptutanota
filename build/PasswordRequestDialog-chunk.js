import { mithril_default } from "./mithril-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import { isKeyPressed } from "./KeyManager-chunk.js";
import { Autocomplete, Dialog, INPUT } from "./Dialog-chunk.js";
import { BootIcons, Icon } from "./Icon-chunk.js";
import { PasswordField } from "./PasswordField-chunk.js";

//#region src/common/misc/passwords/PasswordRequestDialog.ts
function showRequestPasswordDialog(props) {
	const title = props.title ? props.title : "password_label";
	let value = "";
	let state = {
		type: "idle",
		message: ""
	};
	const doAction = async () => {
		state = { type: "progress" };
		mithril_default.redraw();
		const errorMessage = await props.action(value);
		state = {
			type: "idle",
			message: errorMessage
		};
		mithril_default.redraw();
	};
	const child = { view: () => {
		const savedState = state;
		return savedState.type == "idle" ? mithril_default("", [props.messageText ? mithril_default(".pt", props.messageText) : null, mithril_default(PasswordField, {
			label: title,
			helpLabel: () => savedState.message,
			value,
			oninput: (newValue) => value = newValue,
			autocompleteAs: Autocomplete.off,
			keyHandler: (key) => {
				if (isKeyPressed(key.key, Keys.RETURN)) {
					doAction();
					return false;
				}
				return true;
			}
		})]) : mithril_default(Icon, {
			icon: BootIcons.Progress,
			class: "icon-xl icon-progress block mt mb",
			style: {
				marginLeft: "auto",
				marginRight: "auto"
			}
		});
	} };
	const dialog = Dialog.showActionDialog({
		title,
		child,
		allowOkWithReturn: true,
		okAction: () => doAction(),
		cancelActionTextId: props.cancel?.textId,
		allowCancel: props.cancel != null,
		cancelAction: () => {
			props?.cancel?.action?.();
			dialog.close();
		}
	});
	dialog.setFocusOnLoadFunction((dom) => {
		const inputs = Array.from(dom.querySelectorAll(INPUT));
		inputs[inputs.length - 1].focus();
	});
	return dialog;
}

//#endregion
export { showRequestPasswordDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFzc3dvcmRSZXF1ZXN0RGlhbG9nLWNodW5rLmpzIiwibmFtZXMiOlsicHJvcHM6IHtcblx0dGl0bGU/OiBNYXliZVRyYW5zbGF0aW9uXG5cdG1lc3NhZ2VUZXh0Pzogc3RyaW5nXG5cdGFjdGlvbjogKHB3OiBzdHJpbmcpID0+IFByb21pc2U8c3RyaW5nPlxuXHRjYW5jZWw6IHtcblx0XHR0ZXh0SWQ6IFRyYW5zbGF0aW9uS2V5XG5cdFx0YWN0aW9uOiAoKSA9PiB2b2lkXG5cdH0gfCBudWxsXG59Iiwic3RhdGU6IHsgdHlwZTogXCJwcm9ncmVzc1wiIH0gfCB7IHR5cGU6IFwiaWRsZVwiOyBtZXNzYWdlOiBzdHJpbmcgfSIsImtleTogS2V5UHJlc3MiLCJkb206IEhUTUxFbGVtZW50Il0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9taXNjL3Bhc3N3b3Jkcy9QYXNzd29yZFJlcXVlc3REaWFsb2cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXF1ZXN0cyBhIHBhc3N3b3JkIGZyb20gdGhlIHVzZXIuIFN0YXlzIG9wZW4gdW50aWwgdGhlIGNhbGxlciBzZXRzIHRoZSBlcnJvciBtZXNzYWdlIHRvIFwiXCIuXG4gKiBAcGFyYW0gcHJvcHMuYWN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgYXMgYW4gYXR0ZW1wdCB0byBhcHBseSBuZXcgcGFzc3dvcmQuIEVycm9yIG1lc3NhZ2UgaXMgdGhlIHJldHVybiB2YWx1ZS5cbiAqL1xuaW1wb3J0IHsgUGFzc3dvcmRGaWVsZCwgUGFzc3dvcmRGaWVsZEF0dHJzIH0gZnJvbSBcIi4vUGFzc3dvcmRGaWVsZC5qc1wiXG5pbXBvcnQgeyBUcmFuc2xhdGlvbktleSwgTWF5YmVUcmFuc2xhdGlvbiB9IGZyb20gXCIuLi9MYW5ndWFnZVZpZXdNb2RlbC5qc1wiXG5pbXBvcnQgeyBEaWFsb2csIElOUFVUIH0gZnJvbSBcIi4uLy4uL2d1aS9iYXNlL0RpYWxvZy5qc1wiXG5pbXBvcnQgbSBmcm9tIFwibWl0aHJpbFwiXG5pbXBvcnQgeyBBdXRvY29tcGxldGUgfSBmcm9tIFwiLi4vLi4vZ3VpL2Jhc2UvVGV4dEZpZWxkLmpzXCJcbmltcG9ydCB7IGlzS2V5UHJlc3NlZCwgS2V5UHJlc3MgfSBmcm9tIFwiLi4vS2V5TWFuYWdlci5qc1wiXG5pbXBvcnQgeyBLZXlzIH0gZnJvbSBcIi4uLy4uL2FwaS9jb21tb24vVHV0YW5vdGFDb25zdGFudHMuanNcIlxuaW1wb3J0IHsgSWNvbiB9IGZyb20gXCIuLi8uLi9ndWkvYmFzZS9JY29uLmpzXCJcbmltcG9ydCB7IEJvb3RJY29ucyB9IGZyb20gXCIuLi8uLi9ndWkvYmFzZS9pY29ucy9Cb290SWNvbnMuanNcIlxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd1JlcXVlc3RQYXNzd29yZERpYWxvZyhwcm9wczoge1xuXHR0aXRsZT86IE1heWJlVHJhbnNsYXRpb25cblx0bWVzc2FnZVRleHQ/OiBzdHJpbmdcblx0YWN0aW9uOiAocHc6IHN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmc+XG5cdGNhbmNlbDoge1xuXHRcdHRleHRJZDogVHJhbnNsYXRpb25LZXlcblx0XHRhY3Rpb246ICgpID0+IHZvaWRcblx0fSB8IG51bGxcbn0pOiBEaWFsb2cge1xuXHRjb25zdCB0aXRsZSA9IHByb3BzLnRpdGxlID8gcHJvcHMudGl0bGUgOiBcInBhc3N3b3JkX2xhYmVsXCJcblx0bGV0IHZhbHVlID0gXCJcIlxuXHRsZXQgc3RhdGU6IHsgdHlwZTogXCJwcm9ncmVzc1wiIH0gfCB7IHR5cGU6IFwiaWRsZVwiOyBtZXNzYWdlOiBzdHJpbmcgfSA9IHsgdHlwZTogXCJpZGxlXCIsIG1lc3NhZ2U6IFwiXCIgfVxuXG5cdGNvbnN0IGRvQWN0aW9uID0gYXN5bmMgKCkgPT4ge1xuXHRcdHN0YXRlID0geyB0eXBlOiBcInByb2dyZXNzXCIgfVxuXHRcdG0ucmVkcmF3KClcblx0XHRjb25zdCBlcnJvck1lc3NhZ2UgPSBhd2FpdCBwcm9wcy5hY3Rpb24odmFsdWUpXG5cdFx0c3RhdGUgPSB7IHR5cGU6IFwiaWRsZVwiLCBtZXNzYWdlOiBlcnJvck1lc3NhZ2UgfVxuXHRcdG0ucmVkcmF3KClcblx0fVxuXG5cdGNvbnN0IGNoaWxkID0ge1xuXHRcdHZpZXc6ICgpID0+IHtcblx0XHRcdGNvbnN0IHNhdmVkU3RhdGUgPSBzdGF0ZVxuXHRcdFx0cmV0dXJuIHNhdmVkU3RhdGUudHlwZSA9PSBcImlkbGVcIlxuXHRcdFx0XHQ/IG0oXCJcIiwgW1xuXHRcdFx0XHRcdFx0cHJvcHMubWVzc2FnZVRleHQgPyBtKFwiLnB0XCIsIHByb3BzLm1lc3NhZ2VUZXh0KSA6IG51bGwsXG5cdFx0XHRcdFx0XHRtKFBhc3N3b3JkRmllbGQsIHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IHRpdGxlLFxuXHRcdFx0XHRcdFx0XHRoZWxwTGFiZWw6ICgpID0+IHNhdmVkU3RhdGUubWVzc2FnZSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0XHRvbmlucHV0OiAobmV3VmFsdWUpID0+ICh2YWx1ZSA9IG5ld1ZhbHVlKSxcblx0XHRcdFx0XHRcdFx0YXV0b2NvbXBsZXRlQXM6IEF1dG9jb21wbGV0ZS5vZmYsXG5cdFx0XHRcdFx0XHRcdGtleUhhbmRsZXI6IChrZXk6IEtleVByZXNzKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGlzS2V5UHJlc3NlZChrZXkua2V5LCBLZXlzLlJFVFVSTikpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGRvQWN0aW9uKClcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9IHNhdGlzZmllcyBQYXNzd29yZEZpZWxkQXR0cnMpLFxuXHRcdFx0XHQgIF0pXG5cdFx0XHRcdDogbShJY29uLCB7XG5cdFx0XHRcdFx0XHRpY29uOiBCb290SWNvbnMuUHJvZ3Jlc3MsXG5cdFx0XHRcdFx0XHRjbGFzczogXCJpY29uLXhsIGljb24tcHJvZ3Jlc3MgYmxvY2sgbXQgbWJcIixcblx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdG1hcmdpbkxlZnQ6IFwiYXV0b1wiLFxuXHRcdFx0XHRcdFx0XHRtYXJnaW5SaWdodDogXCJhdXRvXCIsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHQgIH0pXG5cdFx0fSxcblx0fVxuXHRjb25zdCBkaWFsb2cgPSBEaWFsb2cuc2hvd0FjdGlvbkRpYWxvZyh7XG5cdFx0dGl0bGUsXG5cdFx0Y2hpbGQ6IGNoaWxkLFxuXHRcdGFsbG93T2tXaXRoUmV0dXJuOiB0cnVlLFxuXHRcdG9rQWN0aW9uOiAoKSA9PiBkb0FjdGlvbigpLFxuXHRcdGNhbmNlbEFjdGlvblRleHRJZDogcHJvcHMuY2FuY2VsPy50ZXh0SWQsXG5cdFx0YWxsb3dDYW5jZWw6IHByb3BzLmNhbmNlbCAhPSBudWxsLFxuXHRcdGNhbmNlbEFjdGlvbjogKCkgPT4ge1xuXHRcdFx0cHJvcHM/LmNhbmNlbD8uYWN0aW9uPy4oKVxuXHRcdFx0ZGlhbG9nLmNsb3NlKClcblx0XHR9LFxuXHR9KVxuXG5cdC8vIHRoZSBwYXNzd29yZCBmb3JtIGNvbnRhaW5zIHNvbWUgZHVtbXkgaW5wdXRzIHRoYXQgd291bGQgYmUgZm9jdXNlZCBieVxuXHQvLyB0aGUgZGVmYXVsdCBmb2N1c09uTG9hZFxuXHRkaWFsb2cuc2V0Rm9jdXNPbkxvYWRGdW5jdGlvbigoZG9tOiBIVE1MRWxlbWVudCkgPT4ge1xuXHRcdGNvbnN0IGlucHV0cyA9IEFycmF5LmZyb20oZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoSU5QVVQpKSBhcyBBcnJheTxIVE1MRWxlbWVudD5cblx0XHRpbnB1dHNbaW5wdXRzLmxlbmd0aCAtIDFdLmZvY3VzKClcblx0fSlcblx0cmV0dXJuIGRpYWxvZ1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQWNPLFNBQVMsMEJBQTBCQSxPQVEvQjtDQUNWLE1BQU0sUUFBUSxNQUFNLFFBQVEsTUFBTSxRQUFRO0NBQzFDLElBQUksUUFBUTtDQUNaLElBQUlDLFFBQWtFO0VBQUUsTUFBTTtFQUFRLFNBQVM7Q0FBSTtDQUVuRyxNQUFNLFdBQVcsWUFBWTtBQUM1QixVQUFRLEVBQUUsTUFBTSxXQUFZO0FBQzVCLGtCQUFFLFFBQVE7RUFDVixNQUFNLGVBQWUsTUFBTSxNQUFNLE9BQU8sTUFBTTtBQUM5QyxVQUFRO0dBQUUsTUFBTTtHQUFRLFNBQVM7RUFBYztBQUMvQyxrQkFBRSxRQUFRO0NBQ1Y7Q0FFRCxNQUFNLFFBQVEsRUFDYixNQUFNLE1BQU07RUFDWCxNQUFNLGFBQWE7QUFDbkIsU0FBTyxXQUFXLFFBQVEsU0FDdkIsZ0JBQUUsSUFBSSxDQUNOLE1BQU0sY0FBYyxnQkFBRSxPQUFPLE1BQU0sWUFBWSxHQUFHLE1BQ2xELGdCQUFFLGVBQWU7R0FDaEIsT0FBTztHQUNQLFdBQVcsTUFBTSxXQUFXO0dBQ3JCO0dBQ1AsU0FBUyxDQUFDLGFBQWMsUUFBUTtHQUNoQyxnQkFBZ0IsYUFBYTtHQUM3QixZQUFZLENBQUNDLFFBQWtCO0FBQzlCLFFBQUksYUFBYSxJQUFJLEtBQUssS0FBSyxPQUFPLEVBQUU7QUFDdkMsZUFBVTtBQUNWLFlBQU87SUFDUDtBQUVELFdBQU87R0FDUDtFQUNELEVBQThCLEFBQzlCLEVBQUMsR0FDRixnQkFBRSxNQUFNO0dBQ1IsTUFBTSxVQUFVO0dBQ2hCLE9BQU87R0FDUCxPQUFPO0lBQ04sWUFBWTtJQUNaLGFBQWE7R0FDYjtFQUNBLEVBQUM7Q0FDTCxFQUNEO0NBQ0QsTUFBTSxTQUFTLE9BQU8saUJBQWlCO0VBQ3RDO0VBQ087RUFDUCxtQkFBbUI7RUFDbkIsVUFBVSxNQUFNLFVBQVU7RUFDMUIsb0JBQW9CLE1BQU0sUUFBUTtFQUNsQyxhQUFhLE1BQU0sVUFBVTtFQUM3QixjQUFjLE1BQU07QUFDbkIsVUFBTyxRQUFRLFVBQVU7QUFDekIsVUFBTyxPQUFPO0VBQ2Q7Q0FDRCxFQUFDO0FBSUYsUUFBTyx1QkFBdUIsQ0FBQ0MsUUFBcUI7RUFDbkQsTUFBTSxTQUFTLE1BQU0sS0FBSyxJQUFJLGlCQUFpQixNQUFNLENBQUM7QUFDdEQsU0FBTyxPQUFPLFNBQVMsR0FBRyxPQUFPO0NBQ2pDLEVBQUM7QUFDRixRQUFPO0FBQ1AifQ==