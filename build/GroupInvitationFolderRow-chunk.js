import { __toESM } from "./chunk-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { downcast } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { GroupType } from "./TutanotaConstants-chunk.js";
import { size } from "./size-chunk.js";
import { isSameId } from "./EntityUtils-chunk.js";
import { createDefaultAlarmInfo, createGroupSettings } from "./TypeRefs-chunk.js";
import { serializeAlarmInterval } from "./CommonCalendarUtils-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { Dialog, TextField } from "./Dialog-chunk.js";
import { IconButton } from "./IconButton-chunk.js";
import { getCapabilityText, getDefaultGroupName, getInvitationGroupType, isTemplateGroup } from "./GroupUtils2-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { getMailAddressDisplayText } from "./SharedMailUtils-chunk.js";
import { showPlanUpgradeRequiredDialog } from "./SubscriptionDialogs-chunk.js";
import { LoginButton } from "./LoginButton-chunk.js";
import { ColorPickerView } from "./ColorPickerView-chunk.js";
import { getTextsForGroupType, sendAcceptNotificationEmail, sendRejectNotificationEmail } from "./GroupGuiUtils-chunk.js";

//#region src/common/sharing/view/ReceivedGroupInvitationDialog.ts
var import_stream = __toESM(require_stream(), 1);
function showGroupInvitationDialog(invitation) {
	const groupType = getInvitationGroupType(invitation);
	const texts = getTextsForGroupType(groupType);
	const userSettingsGroupRoot = locator.logins.getUserController().userSettingsGroupRoot;
	const existingGroupSettings = userSettingsGroupRoot.groupSettings.find((gc) => gc.group === invitation.sharedGroup);
	const color = existingGroupSettings ? "#" + existingGroupSettings.color : "";
	const colorStream = (0, import_stream.default)(color);
	const isDefaultGroupName = invitation.sharedGroupName === getDefaultGroupName(downcast(invitation.groupType));
	const nameStream = (0, import_stream.default)(isDefaultGroupName ? texts.sharedGroupDefaultCustomName(invitation) : invitation.sharedGroupName);
	const alarmsStream = (0, import_stream.default)([]);
	const isMember = locator.logins.getUserController().getCalendarMemberships().some((ms) => isSameId(ms.group, invitation.sharedGroup));
	let dialog;
	const onAcceptClicked = () => {
		checkCanAcceptGroupInvitation(invitation).then((canAccept) => {
			if (canAccept) acceptInvite(invitation, texts).then(() => {
				dialog.close();
				const newColor = colorStream().substring(1);
				const newName = nameStream();
				if (existingGroupSettings) {
					existingGroupSettings.color = newColor;
					existingGroupSettings.name = newName;
				} else {
					const groupSettings = createGroupSettings({
						group: invitation.sharedGroup,
						color: newColor,
						name: newName,
						defaultAlarmsList: alarmsStream().map((alarm) => createDefaultAlarmInfo({ trigger: serializeAlarmInterval(alarm) })),
						sourceUrl: null
					});
					userSettingsGroupRoot.groupSettings.push(groupSettings);
				}
				locator.entityClient.update(userSettingsGroupRoot);
			});
		});
	};
	dialog = Dialog.showActionDialog({
		title: "invitation_label",
		child: { view: () => mithril_default(".flex.col", [mithril_default(".mb", [
			mithril_default(".pt.selectable", isMember ? lang.getTranslationText(texts.alreadyGroupMemberMessage) : texts.receivedGroupInvitationMessage),
			mithril_default(TextField, {
				value: nameStream(),
				oninput: nameStream,
				label: texts.groupNameLabel
			}),
			mithril_default(TextField, {
				value: getMailAddressDisplayText(invitation.inviterName, invitation.inviterMailAddress, false),
				label: "sender_label",
				isReadOnly: true
			}),
			mithril_default(TextField, {
				value: invitation.inviteeMailAddress,
				label: "to_label",
				isReadOnly: true
			}),
			mithril_default(TextField, {
				value: getCapabilityText(downcast(invitation.capability)),
				label: "permissions_label",
				isReadOnly: true
			}),
			groupType === GroupType.Calendar ? renderCalendarGroupInvitationFields(invitation, colorStream, alarmsStream) : null
		]), isMember ? null : mithril_default(LoginButton, {
			label: "acceptInvitation_action",
			onclick: onAcceptClicked
		})]) },
		okActionTextId: "decline_action",
		okAction: (dialog$1) => {
			dialog$1.close();
			declineInvite(invitation, texts);
		},
		cancelActionTextId: "close_alt"
	});
}
/**
* Checks if the logged-in user is able to accept the group invitation.
* This is necessary because to be part of some kinds of groups you must have certain features.
* Currently, there are two kinds of group invitations:
* 1. Calendar: any paid account can accept invitations
* 2. Template: only accounts with the templates feature can accept invitations
* @param invitation
*/
async function checkCanAcceptGroupInvitation(invitation) {
	const SubscriptionDialogUtils = await import("./SubscriptionDialogs2-chunk.js");
	const allowed = await SubscriptionDialogUtils.checkPaidSubscription();
	if (!allowed) return false;
	const planConfig = await locator.logins.getUserController().getPlanConfig();
	if (isTemplateGroup(getInvitationGroupType(invitation)) && !planConfig.templates) {
		const { getAvailablePlansWithTemplates } = await import("./SubscriptionUtils2-chunk.js");
		const plans = await getAvailablePlansWithTemplates();
		return showPlanUpgradeRequiredDialog(plans);
	} else return true;
}
function renderCalendarGroupInvitationFields(invitation, selectedColourValue, alarmsStream) {
	let alarms = alarmsStream();
	return [mithril_default(".small.mt.mb-xs", lang.get("color_label")), mithril_default(ColorPickerView, {
		value: selectedColourValue(),
		onselect: selectedColourValue
	})];
}
function acceptInvite(invitation, texts) {
	return locator.shareFacade.acceptGroupInvitation(invitation).then(() => {
		sendAcceptNotificationEmail(invitation, texts);
	});
}
function declineInvite(invitation, texts) {
	return locator.shareFacade.rejectOrCancelGroupInvitation(invitation._id).then(() => {
		sendRejectNotificationEmail(invitation, texts);
	});
}

//#endregion
//#region src/common/sharing/view/GroupInvitationFolderRow.ts
var GroupInvitationFolderRow = class {
	view(vnode) {
		const { invitation, icon } = vnode.attrs;
		return [mithril_default(".folder-row.flex-start.plr-l", [mithril_default(".flex-v-center.flex-grow.button-height", { style: { "max-width": `calc(100% - ${size.button_height}px)` } }, [mithril_default(".b.text-ellipsis", { title: getCapabilityText(downcast(invitation.capability)) }, invitation.sharedGroupName), mithril_default(".small.text-ellipsis", { title: invitation.inviterMailAddress }, getMailAddressDisplayText(invitation.inviterName, invitation.inviterMailAddress, true))]), mithril_default(IconButton, {
			title: "show_action",
			click: () => showGroupInvitationDialog(invitation),
			icon: icon ?? Icons.Eye
		})])];
	}
};

//#endregion
export { GroupInvitationFolderRow };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,