import { findAndRemove } from "./dist2-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { createMailAddressProperties } from "./TypeRefs-chunk.js";

//#region src/common/settings/mailaddress/OwnMailAddressNameChanger.ts
var OwnMailAddressNameChanger = class {
	constructor(mailboxModel, entityClient) {
		this.mailboxModel = mailboxModel;
		this.entityClient = entityClient;
	}
	async getSenderNames() {
		const mailboxProperties = await this.getMailboxProperties();
		return this.collectMap(mailboxProperties);
	}
	async setSenderName(address, name) {
		const mailboxDetails = await this.mailboxModel.getUserMailboxDetails();
		const mailboxProperties = await this.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot);
		let aliasConfig = mailboxProperties.mailAddressProperties.find((p) => p.mailAddress === address);
		if (aliasConfig == null) {
			aliasConfig = createMailAddressProperties({
				mailAddress: address,
				senderName: name
			});
			mailboxProperties.mailAddressProperties.push(aliasConfig);
		} else aliasConfig.senderName = name;
		await this.entityClient.update(mailboxProperties);
		return this.collectMap(mailboxProperties);
	}
	async removeSenderName(address) {
		const mailboxDetails = await this.mailboxModel.getUserMailboxDetails();
		const mailboxProperties = await this.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot);
		findAndRemove(mailboxProperties.mailAddressProperties, (p) => p.mailAddress === address);
		await this.entityClient.update(mailboxProperties);
		return this.collectMap(mailboxProperties);
	}
	collectMap(mailboxProperties) {
		const result = new Map();
		for (const properties of mailboxProperties.mailAddressProperties) result.set(properties.mailAddress, properties.senderName);
		return result;
	}
	async getMailboxProperties() {
		const mailboxDetails = await this.mailboxModel.getUserMailboxDetails();
		return await this.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot);
	}
};

//#endregion
export { OwnMailAddressNameChanger };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3duTWFpbEFkZHJlc3NOYW1lQ2hhbmdlci1jaHVuay5qcyIsIm5hbWVzIjpbIm1haWxib3hNb2RlbDogTWFpbGJveE1vZGVsIiwiZW50aXR5Q2xpZW50OiBFbnRpdHlDbGllbnQiLCJhZGRyZXNzOiBzdHJpbmciLCJuYW1lOiBzdHJpbmciLCJtYWlsYm94UHJvcGVydGllczogTWFpbGJveFByb3BlcnRpZXMiXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL3NldHRpbmdzL21haWxhZGRyZXNzL093bk1haWxBZGRyZXNzTmFtZUNoYW5nZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWRkcmVzc1RvTmFtZSwgTWFpbEFkZHJlc3NOYW1lQ2hhbmdlciB9IGZyb20gXCIuL01haWxBZGRyZXNzVGFibGVNb2RlbC5qc1wiXG5pbXBvcnQgeyBNYWlsYm94TW9kZWwgfSBmcm9tIFwiLi4vLi4vbWFpbEZ1bmN0aW9uYWxpdHkvTWFpbGJveE1vZGVsLmpzXCJcbmltcG9ydCB7IGNyZWF0ZU1haWxBZGRyZXNzUHJvcGVydGllcywgTWFpbGJveFByb3BlcnRpZXMgfSBmcm9tIFwiLi4vLi4vYXBpL2VudGl0aWVzL3R1dGFub3RhL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IEVudGl0eUNsaWVudCB9IGZyb20gXCIuLi8uLi9hcGkvY29tbW9uL0VudGl0eUNsaWVudC5qc1wiXG5pbXBvcnQgeyBmaW5kQW5kUmVtb3ZlIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5cbi8qKiBOYW1lIGNoYW5nZXIgZm9yIHBlcnNvbmFsIG1haWxib3ggb2YgdGhlIGN1cnJlbnRseSBsb2dnZWQtaW4gdXNlci4gKi9cbmV4cG9ydCBjbGFzcyBPd25NYWlsQWRkcmVzc05hbWVDaGFuZ2VyIGltcGxlbWVudHMgTWFpbEFkZHJlc3NOYW1lQ2hhbmdlciB7XG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgbWFpbGJveE1vZGVsOiBNYWlsYm94TW9kZWwsIHByaXZhdGUgcmVhZG9ubHkgZW50aXR5Q2xpZW50OiBFbnRpdHlDbGllbnQpIHt9XG5cblx0YXN5bmMgZ2V0U2VuZGVyTmFtZXMoKTogUHJvbWlzZTxBZGRyZXNzVG9OYW1lPiB7XG5cdFx0Y29uc3QgbWFpbGJveFByb3BlcnRpZXMgPSBhd2FpdCB0aGlzLmdldE1haWxib3hQcm9wZXJ0aWVzKClcblx0XHRyZXR1cm4gdGhpcy5jb2xsZWN0TWFwKG1haWxib3hQcm9wZXJ0aWVzKVxuXHR9XG5cblx0YXN5bmMgc2V0U2VuZGVyTmFtZShhZGRyZXNzOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IFByb21pc2U8QWRkcmVzc1RvTmFtZT4ge1xuXHRcdGNvbnN0IG1haWxib3hEZXRhaWxzID0gYXdhaXQgdGhpcy5tYWlsYm94TW9kZWwuZ2V0VXNlck1haWxib3hEZXRhaWxzKClcblx0XHRjb25zdCBtYWlsYm94UHJvcGVydGllcyA9IGF3YWl0IHRoaXMubWFpbGJveE1vZGVsLmdldE1haWxib3hQcm9wZXJ0aWVzKG1haWxib3hEZXRhaWxzLm1haWxib3hHcm91cFJvb3QpXG5cdFx0bGV0IGFsaWFzQ29uZmlnID0gbWFpbGJveFByb3BlcnRpZXMubWFpbEFkZHJlc3NQcm9wZXJ0aWVzLmZpbmQoKHApID0+IHAubWFpbEFkZHJlc3MgPT09IGFkZHJlc3MpXG5cdFx0aWYgKGFsaWFzQ29uZmlnID09IG51bGwpIHtcblx0XHRcdGFsaWFzQ29uZmlnID0gY3JlYXRlTWFpbEFkZHJlc3NQcm9wZXJ0aWVzKHsgbWFpbEFkZHJlc3M6IGFkZHJlc3MsIHNlbmRlck5hbWU6IG5hbWUgfSlcblx0XHRcdG1haWxib3hQcm9wZXJ0aWVzLm1haWxBZGRyZXNzUHJvcGVydGllcy5wdXNoKGFsaWFzQ29uZmlnKVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbGlhc0NvbmZpZy5zZW5kZXJOYW1lID0gbmFtZVxuXHRcdH1cblx0XHRhd2FpdCB0aGlzLmVudGl0eUNsaWVudC51cGRhdGUobWFpbGJveFByb3BlcnRpZXMpXG5cdFx0cmV0dXJuIHRoaXMuY29sbGVjdE1hcChtYWlsYm94UHJvcGVydGllcylcblx0fVxuXG5cdGFzeW5jIHJlbW92ZVNlbmRlck5hbWUoYWRkcmVzczogc3RyaW5nKTogUHJvbWlzZTxBZGRyZXNzVG9OYW1lPiB7XG5cdFx0Y29uc3QgbWFpbGJveERldGFpbHMgPSBhd2FpdCB0aGlzLm1haWxib3hNb2RlbC5nZXRVc2VyTWFpbGJveERldGFpbHMoKVxuXHRcdGNvbnN0IG1haWxib3hQcm9wZXJ0aWVzID0gYXdhaXQgdGhpcy5tYWlsYm94TW9kZWwuZ2V0TWFpbGJveFByb3BlcnRpZXMobWFpbGJveERldGFpbHMubWFpbGJveEdyb3VwUm9vdClcblx0XHRmaW5kQW5kUmVtb3ZlKG1haWxib3hQcm9wZXJ0aWVzLm1haWxBZGRyZXNzUHJvcGVydGllcywgKHApID0+IHAubWFpbEFkZHJlc3MgPT09IGFkZHJlc3MpXG5cdFx0YXdhaXQgdGhpcy5lbnRpdHlDbGllbnQudXBkYXRlKG1haWxib3hQcm9wZXJ0aWVzKVxuXHRcdHJldHVybiB0aGlzLmNvbGxlY3RNYXAobWFpbGJveFByb3BlcnRpZXMpXG5cdH1cblxuXHRwcml2YXRlIGNvbGxlY3RNYXAobWFpbGJveFByb3BlcnRpZXM6IE1haWxib3hQcm9wZXJ0aWVzKTogQWRkcmVzc1RvTmFtZSB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpXG5cdFx0Zm9yIChjb25zdCBwcm9wZXJ0aWVzIG9mIG1haWxib3hQcm9wZXJ0aWVzLm1haWxBZGRyZXNzUHJvcGVydGllcykge1xuXHRcdFx0cmVzdWx0LnNldChwcm9wZXJ0aWVzLm1haWxBZGRyZXNzLCBwcm9wZXJ0aWVzLnNlbmRlck5hbWUpXG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHRcblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgZ2V0TWFpbGJveFByb3BlcnRpZXMoKTogUHJvbWlzZTxNYWlsYm94UHJvcGVydGllcz4ge1xuXHRcdGNvbnN0IG1haWxib3hEZXRhaWxzID0gYXdhaXQgdGhpcy5tYWlsYm94TW9kZWwuZ2V0VXNlck1haWxib3hEZXRhaWxzKClcblx0XHRyZXR1cm4gYXdhaXQgdGhpcy5tYWlsYm94TW9kZWwuZ2V0TWFpbGJveFByb3BlcnRpZXMobWFpbGJveERldGFpbHMubWFpbGJveEdyb3VwUm9vdClcblx0fVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7SUFPYSw0QkFBTixNQUFrRTtDQUN4RSxZQUE2QkEsY0FBNkNDLGNBQTRCO0VBMEN0RyxLQTFDNkI7RUEwQzVCLEtBMUN5RTtDQUE4QjtDQUV4RyxNQUFNLGlCQUF5QztFQUM5QyxNQUFNLG9CQUFvQixNQUFNLEtBQUssc0JBQXNCO0FBQzNELFNBQU8sS0FBSyxXQUFXLGtCQUFrQjtDQUN6QztDQUVELE1BQU0sY0FBY0MsU0FBaUJDLE1BQXNDO0VBQzFFLE1BQU0saUJBQWlCLE1BQU0sS0FBSyxhQUFhLHVCQUF1QjtFQUN0RSxNQUFNLG9CQUFvQixNQUFNLEtBQUssYUFBYSxxQkFBcUIsZUFBZSxpQkFBaUI7RUFDdkcsSUFBSSxjQUFjLGtCQUFrQixzQkFBc0IsS0FBSyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsUUFBUTtBQUNoRyxNQUFJLGVBQWUsTUFBTTtBQUN4QixpQkFBYyw0QkFBNEI7SUFBRSxhQUFhO0lBQVMsWUFBWTtHQUFNLEVBQUM7QUFDckYscUJBQWtCLHNCQUFzQixLQUFLLFlBQVk7RUFDekQsTUFDQSxhQUFZLGFBQWE7QUFFMUIsUUFBTSxLQUFLLGFBQWEsT0FBTyxrQkFBa0I7QUFDakQsU0FBTyxLQUFLLFdBQVcsa0JBQWtCO0NBQ3pDO0NBRUQsTUFBTSxpQkFBaUJELFNBQXlDO0VBQy9ELE1BQU0saUJBQWlCLE1BQU0sS0FBSyxhQUFhLHVCQUF1QjtFQUN0RSxNQUFNLG9CQUFvQixNQUFNLEtBQUssYUFBYSxxQkFBcUIsZUFBZSxpQkFBaUI7QUFDdkcsZ0JBQWMsa0JBQWtCLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsUUFBUTtBQUN4RixRQUFNLEtBQUssYUFBYSxPQUFPLGtCQUFrQjtBQUNqRCxTQUFPLEtBQUssV0FBVyxrQkFBa0I7Q0FDekM7Q0FFRCxBQUFRLFdBQVdFLG1CQUFxRDtFQUN2RSxNQUFNLFNBQVMsSUFBSTtBQUNuQixPQUFLLE1BQU0sY0FBYyxrQkFBa0Isc0JBQzFDLFFBQU8sSUFBSSxXQUFXLGFBQWEsV0FBVyxXQUFXO0FBRTFELFNBQU87Q0FDUDtDQUVELE1BQWMsdUJBQW1EO0VBQ2hFLE1BQU0saUJBQWlCLE1BQU0sS0FBSyxhQUFhLHVCQUF1QjtBQUN0RSxTQUFPLE1BQU0sS0FBSyxhQUFhLHFCQUFxQixlQUFlLGlCQUFpQjtDQUNwRjtBQUNEIn0=