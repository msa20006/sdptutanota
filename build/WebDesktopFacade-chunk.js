import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import "./dist2-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import "./CommonLocator-chunk.js";
import { showSpellcheckLanguageDialog } from "./SpellcheckLanguageDialog-chunk.js";

//#region src/common/native/main/WebDesktopFacade.ts
var WebDesktopFacade = class {
	constructor(logins, nativeInterface) {
		this.logins = logins;
		this.nativeInterface = nativeInterface;
	}
	print() {
		window.print();
		return Promise.resolve();
	}
	async showSpellcheckDropdown() {
		await showSpellcheckLanguageDialog();
	}
	async applySearchResultToOverlay(result) {
		const { searchInPageOverlay } = await import("./SearchInPageOverlay-chunk.js");
		searchInPageOverlay.applyNextResult(result);
		return Promise.resolve();
	}
	async openFindInPage() {
		const { searchInPageOverlay } = await import("./SearchInPageOverlay-chunk.js");
		searchInPageOverlay.open();
		return Promise.resolve();
	}
	async reportError(errorInfo) {
		const { showErrorNotification } = await import("./ErrorReporter2-chunk.js");
		await this.logins.waitForPartialLogin();
		await showErrorNotification(errorInfo);
	}
	/**
	* Updates the link-reveal on hover when the main thread detects that
	* the hovered url changed. Will _not_ update if hovering a in link app (starts with 2nd argument)
	*/
	async updateTargetUrl(url, appPath) {
		let linkToolTip = document.getElementById("link-tt");
		if (!linkToolTip) {
			linkToolTip = document.createElement("DIV");
			linkToolTip.id = "link-tt";
			document.body.appendChild(linkToolTip);
		}
		if (url === "" || url.startsWith(appPath)) linkToolTip.className = "";
else {
			linkToolTip.innerText = url;
			linkToolTip.className = "reveal";
		}
		return Promise.resolve();
	}
	/**
	* this is only used in the admin client to sync the DB view with the inbox
	*/
	async openCustomer(mailAddress) {
		const m = await import("./mithril2-chunk.js");
		if (typeof mailAddress === "string" && m.route.get().startsWith("/customer")) {
			m.route.set(`/customer?query=${encodeURIComponent(mailAddress)}`);
			console.log("switching to customer", mailAddress);
		}
	}
	async addShortcuts(shortcuts) {
		const baseShortcut = {
			exec: () => true,
			ctrlOrCmd: false,
			alt: false,
			meta: false,
			help: "emptyString_msg",
			key: Keys.F
		};
		const fixedShortcuts = shortcuts.map((nsc) => Object.assign({}, baseShortcut, nsc));
		const { keyManager } = await import("./KeyManager2-chunk.js");
		keyManager.registerDesktopShortcuts(fixedShortcuts);
	}
	async appUpdateDownloaded() {
		const native = await this.nativeInterface();
		native.handleUpdateDownload();
	}
};

//#endregion
export { WebDesktopFacade };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViRGVza3RvcEZhY2FkZS1jaHVuay5qcyIsIm5hbWVzIjpbImxvZ2luczogTG9naW5Db250cm9sbGVyIiwibmF0aXZlSW50ZXJmYWNlOiBsYXp5QXN5bmM8TmF0aXZlSW50ZXJmYWNlTWFpbj4iLCJyZXN1bHQ6IEVsZWN0cm9uUmVzdWx0IHwgbnVsbCIsImVycm9ySW5mbzogRXJyb3JJbmZvIiwidXJsOiBzdHJpbmciLCJhcHBQYXRoOiBzdHJpbmciLCJtYWlsQWRkcmVzczogc3RyaW5nIHwgbnVsbCIsInNob3J0Y3V0czogQXJyYXk8TmF0aXZlU2hvcnRjdXQ+IiwiYmFzZVNob3J0Y3V0OiBTaG9ydGN1dCIsImZpeGVkU2hvcnRjdXRzOiBBcnJheTxTaG9ydGN1dD4iXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL25hdGl2ZS9tYWluL1dlYkRlc2t0b3BGYWNhZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVza3RvcEZhY2FkZSB9IGZyb20gXCIuLi9jb21tb24vZ2VuZXJhdGVkaXBjL0Rlc2t0b3BGYWNhZGVcIlxuaW1wb3J0IHsgc2hvd1NwZWxsY2hlY2tMYW5ndWFnZURpYWxvZyB9IGZyb20gXCIuLi8uLi9ndWkvZGlhbG9ncy9TcGVsbGNoZWNrTGFuZ3VhZ2VEaWFsb2dcIlxuaW1wb3J0IHsgRWxlY3Ryb25SZXN1bHQgfSBmcm9tIFwiLi4vY29tbW9uL2dlbmVyYXRlZGlwYy9FbGVjdHJvblJlc3VsdC5qc1wiXG5pbXBvcnQgeyBFcnJvckluZm8gfSBmcm9tIFwiLi4vY29tbW9uL2dlbmVyYXRlZGlwYy9FcnJvckluZm8uanNcIlxuaW1wb3J0IHsgTmF0aXZlU2hvcnRjdXQgfSBmcm9tIFwiLi4vY29tbW9uL2dlbmVyYXRlZGlwYy9OYXRpdmVTaG9ydGN1dC5qc1wiXG5pbXBvcnQgeyBTaG9ydGN1dCB9IGZyb20gXCIuLi8uLi9taXNjL0tleU1hbmFnZXIuanNcIlxuaW1wb3J0IHsgS2V5cyB9IGZyb20gXCIuLi8uLi9hcGkvY29tbW9uL1R1dGFub3RhQ29uc3RhbnRzLmpzXCJcbmltcG9ydCB7IExvZ2luQ29udHJvbGxlciB9IGZyb20gXCIuLi8uLi9hcGkvbWFpbi9Mb2dpbkNvbnRyb2xsZXIuanNcIlxuaW1wb3J0IHsgbGF6eUFzeW5jIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5pbXBvcnQgeyBOYXRpdmVJbnRlcmZhY2VNYWluIH0gZnJvbSBcIi4vTmF0aXZlSW50ZXJmYWNlTWFpbi5qc1wiXG5cbmV4cG9ydCBjbGFzcyBXZWJEZXNrdG9wRmFjYWRlIGltcGxlbWVudHMgRGVza3RvcEZhY2FkZSB7XG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgbG9naW5zOiBMb2dpbkNvbnRyb2xsZXIsIHByaXZhdGUgbmF0aXZlSW50ZXJmYWNlOiBsYXp5QXN5bmM8TmF0aXZlSW50ZXJmYWNlTWFpbj4pIHt9XG5cblx0cHJpbnQoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0d2luZG93LnByaW50KClcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0fVxuXG5cdGFzeW5jIHNob3dTcGVsbGNoZWNrRHJvcGRvd24oKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0YXdhaXQgc2hvd1NwZWxsY2hlY2tMYW5ndWFnZURpYWxvZygpXG5cdH1cblxuXHRhc3luYyBhcHBseVNlYXJjaFJlc3VsdFRvT3ZlcmxheShyZXN1bHQ6IEVsZWN0cm9uUmVzdWx0IHwgbnVsbCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IHsgc2VhcmNoSW5QYWdlT3ZlcmxheSB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vLi4vZ3VpL1NlYXJjaEluUGFnZU92ZXJsYXkuanNcIilcblx0XHRzZWFyY2hJblBhZ2VPdmVybGF5LmFwcGx5TmV4dFJlc3VsdChyZXN1bHQpXG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG5cdH1cblxuXHRhc3luYyBvcGVuRmluZEluUGFnZSgpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRjb25zdCB7IHNlYXJjaEluUGFnZU92ZXJsYXkgfSA9IGF3YWl0IGltcG9ydChcIi4uLy4uL2d1aS9TZWFyY2hJblBhZ2VPdmVybGF5LmpzXCIpXG5cdFx0c2VhcmNoSW5QYWdlT3ZlcmxheS5vcGVuKClcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0fVxuXG5cdGFzeW5jIHJlcG9ydEVycm9yKGVycm9ySW5mbzogRXJyb3JJbmZvKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgeyBzaG93RXJyb3JOb3RpZmljYXRpb24gfSA9IGF3YWl0IGltcG9ydChcIi4uLy4uL21pc2MvRXJyb3JSZXBvcnRlci5qc1wiKVxuXHRcdGF3YWl0IHRoaXMubG9naW5zLndhaXRGb3JQYXJ0aWFsTG9naW4oKVxuXHRcdGF3YWl0IHNob3dFcnJvck5vdGlmaWNhdGlvbihlcnJvckluZm8pXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgbGluay1yZXZlYWwgb24gaG92ZXIgd2hlbiB0aGUgbWFpbiB0aHJlYWQgZGV0ZWN0cyB0aGF0XG5cdCAqIHRoZSBob3ZlcmVkIHVybCBjaGFuZ2VkLiBXaWxsIF9ub3RfIHVwZGF0ZSBpZiBob3ZlcmluZyBhIGluIGxpbmsgYXBwIChzdGFydHMgd2l0aCAybmQgYXJndW1lbnQpXG5cdCAqL1xuXHRhc3luYyB1cGRhdGVUYXJnZXRVcmwodXJsOiBzdHJpbmcsIGFwcFBhdGg6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGxldCBsaW5rVG9vbFRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluay10dFwiKVxuXG5cdFx0aWYgKCFsaW5rVG9vbFRpcCkge1xuXHRcdFx0bGlua1Rvb2xUaXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpXG5cdFx0XHRsaW5rVG9vbFRpcC5pZCA9IFwibGluay10dFwiXG5cdFx0XHQ7KGRvY3VtZW50LmJvZHkgYXMgYW55KS5hcHBlbmRDaGlsZChsaW5rVG9vbFRpcClcblx0XHR9XG5cblx0XHRpZiAodXJsID09PSBcIlwiIHx8IHVybC5zdGFydHNXaXRoKGFwcFBhdGgpKSB7XG5cdFx0XHRsaW5rVG9vbFRpcC5jbGFzc05hbWUgPSBcIlwiXG5cdFx0fSBlbHNlIHtcblx0XHRcdGxpbmtUb29sVGlwLmlubmVyVGV4dCA9IHVybFxuXHRcdFx0bGlua1Rvb2xUaXAuY2xhc3NOYW1lID0gXCJyZXZlYWxcIlxuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuXHR9XG5cblx0LyoqXG5cdCAqIHRoaXMgaXMgb25seSB1c2VkIGluIHRoZSBhZG1pbiBjbGllbnQgdG8gc3luYyB0aGUgREIgdmlldyB3aXRoIHRoZSBpbmJveFxuXHQgKi9cblx0YXN5bmMgb3BlbkN1c3RvbWVyKG1haWxBZGRyZXNzOiBzdHJpbmcgfCBudWxsKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgbSA9IGF3YWl0IGltcG9ydChcIm1pdGhyaWxcIilcblxuXHRcdGlmICh0eXBlb2YgbWFpbEFkZHJlc3MgPT09IFwic3RyaW5nXCIgJiYgbS5yb3V0ZS5nZXQoKS5zdGFydHNXaXRoKFwiL2N1c3RvbWVyXCIpKSB7XG5cdFx0XHRtLnJvdXRlLnNldChgL2N1c3RvbWVyP3F1ZXJ5PSR7ZW5jb2RlVVJJQ29tcG9uZW50KG1haWxBZGRyZXNzKX1gKVxuXHRcdFx0Y29uc29sZS5sb2coXCJzd2l0Y2hpbmcgdG8gY3VzdG9tZXJcIiwgbWFpbEFkZHJlc3MpXG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgYWRkU2hvcnRjdXRzKHNob3J0Y3V0czogQXJyYXk8TmF0aXZlU2hvcnRjdXQ+KTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgYmFzZVNob3J0Y3V0OiBTaG9ydGN1dCA9IHtcblx0XHRcdGV4ZWM6ICgpID0+IHRydWUsXG5cdFx0XHRjdHJsT3JDbWQ6IGZhbHNlLFxuXHRcdFx0YWx0OiBmYWxzZSxcblx0XHRcdG1ldGE6IGZhbHNlLFxuXHRcdFx0aGVscDogXCJlbXB0eVN0cmluZ19tc2dcIixcblx0XHRcdGtleTogS2V5cy5GLFxuXHRcdH1cblx0XHRjb25zdCBmaXhlZFNob3J0Y3V0czogQXJyYXk8U2hvcnRjdXQ+ID0gc2hvcnRjdXRzLm1hcCgobnNjKSA9PiBPYmplY3QuYXNzaWduKHt9LCBiYXNlU2hvcnRjdXQsIG5zYykpXG5cdFx0Y29uc3QgeyBrZXlNYW5hZ2VyIH0gPSBhd2FpdCBpbXBvcnQoXCIuLi8uLi9taXNjL0tleU1hbmFnZXIuanNcIilcblx0XHRrZXlNYW5hZ2VyLnJlZ2lzdGVyRGVza3RvcFNob3J0Y3V0cyhmaXhlZFNob3J0Y3V0cylcblx0fVxuXG5cdGFzeW5jIGFwcFVwZGF0ZURvd25sb2FkZWQoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgbmF0aXZlID0gYXdhaXQgdGhpcy5uYXRpdmVJbnRlcmZhY2UoKVxuXHRcdG5hdGl2ZS5oYW5kbGVVcGRhdGVEb3dubG9hZCgpXG5cdH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0lBV2EsbUJBQU4sTUFBZ0Q7Q0FDdEQsWUFBb0JBLFFBQWlDQyxpQkFBaUQ7RUFtRnRHLEtBbkZvQjtFQW1GbkIsS0FuRm9EO0NBQW1EO0NBRXhHLFFBQXVCO0FBQ3RCLFNBQU8sT0FBTztBQUNkLFNBQU8sUUFBUSxTQUFTO0NBQ3hCO0NBRUQsTUFBTSx5QkFBd0M7QUFDN0MsUUFBTSw4QkFBOEI7Q0FDcEM7Q0FFRCxNQUFNLDJCQUEyQkMsUUFBOEM7RUFDOUUsTUFBTSxFQUFFLHFCQUFxQixHQUFHLE1BQU0sT0FBTztBQUM3QyxzQkFBb0IsZ0JBQWdCLE9BQU87QUFDM0MsU0FBTyxRQUFRLFNBQVM7Q0FDeEI7Q0FFRCxNQUFNLGlCQUFnQztFQUNyQyxNQUFNLEVBQUUscUJBQXFCLEdBQUcsTUFBTSxPQUFPO0FBQzdDLHNCQUFvQixNQUFNO0FBQzFCLFNBQU8sUUFBUSxTQUFTO0NBQ3hCO0NBRUQsTUFBTSxZQUFZQyxXQUFxQztFQUN0RCxNQUFNLEVBQUUsdUJBQXVCLEdBQUcsTUFBTSxPQUFPO0FBQy9DLFFBQU0sS0FBSyxPQUFPLHFCQUFxQjtBQUN2QyxRQUFNLHNCQUFzQixVQUFVO0NBQ3RDOzs7OztDQU1ELE1BQU0sZ0JBQWdCQyxLQUFhQyxTQUFnQztFQUNsRSxJQUFJLGNBQWMsU0FBUyxlQUFlLFVBQVU7QUFFcEQsT0FBSyxhQUFhO0FBQ2pCLGlCQUFjLFNBQVMsY0FBYyxNQUFNO0FBQzNDLGVBQVksS0FBSztBQUNoQixHQUFDLFNBQVMsS0FBYSxZQUFZLFlBQVk7RUFDaEQ7QUFFRCxNQUFJLFFBQVEsTUFBTSxJQUFJLFdBQVcsUUFBUSxDQUN4QyxhQUFZLFlBQVk7S0FDbEI7QUFDTixlQUFZLFlBQVk7QUFDeEIsZUFBWSxZQUFZO0VBQ3hCO0FBRUQsU0FBTyxRQUFRLFNBQVM7Q0FDeEI7Ozs7Q0FLRCxNQUFNLGFBQWFDLGFBQTJDO0VBQzdELE1BQU0sSUFBSSxNQUFNLE9BQU87QUFFdkIsYUFBVyxnQkFBZ0IsWUFBWSxFQUFFLE1BQU0sS0FBSyxDQUFDLFdBQVcsWUFBWSxFQUFFO0FBQzdFLEtBQUUsTUFBTSxLQUFLLGtCQUFrQixtQkFBbUIsWUFBWSxDQUFDLEVBQUU7QUFDakUsV0FBUSxJQUFJLHlCQUF5QixZQUFZO0VBQ2pEO0NBQ0Q7Q0FFRCxNQUFNLGFBQWFDLFdBQWlEO0VBQ25FLE1BQU1DLGVBQXlCO0dBQzlCLE1BQU0sTUFBTTtHQUNaLFdBQVc7R0FDWCxLQUFLO0dBQ0wsTUFBTTtHQUNOLE1BQU07R0FDTixLQUFLLEtBQUs7RUFDVjtFQUNELE1BQU1DLGlCQUFrQyxVQUFVLElBQUksQ0FBQyxRQUFRLE9BQU8sT0FBTyxDQUFFLEdBQUUsY0FBYyxJQUFJLENBQUM7RUFDcEcsTUFBTSxFQUFFLFlBQVksR0FBRyxNQUFNLE9BQU87QUFDcEMsYUFBVyx5QkFBeUIsZUFBZTtDQUNuRDtDQUVELE1BQU0sc0JBQXFDO0VBQzFDLE1BQU0sU0FBUyxNQUFNLEtBQUssaUJBQWlCO0FBQzNDLFNBQU8sc0JBQXNCO0NBQzdCO0FBQ0QifQ==