import { TutanotaError } from "./dist-chunk.js";

//#region src/common/api/common/error/RestError.ts
var ConnectionError = class extends TutanotaError {
	static CODE = 0;
	constructor(msg) {
		super("ConnectionError", msg);
	}
};
var BadRequestError = class extends TutanotaError {
	static CODE = 400;
	constructor(msg) {
		super("BadRequestError", msg);
	}
};
var NotAuthenticatedError = class extends TutanotaError {
	static CODE = 401;
	constructor(msg) {
		super("NotAuthenticatedError", msg);
	}
};
var NotAuthorizedError = class extends TutanotaError {
	static CODE = 403;
	constructor(msg) {
		super("NotAuthorizedError", msg);
	}
};
var NotFoundError = class extends TutanotaError {
	static CODE = 404;
	constructor(msg) {
		super("NotFoundError", msg);
	}
};
var MethodNotAllowedError = class extends TutanotaError {
	static CODE = 405;
	constructor(msg) {
		super("MethodNotAllowedError", msg);
	}
};
var RequestTimeoutError = class extends TutanotaError {
	static CODE = 408;
	constructor(msg) {
		super("RequestTimeoutError", msg);
	}
};
var PreconditionFailedError = class extends TutanotaError {
	static CODE = 412;
	data;
	constructor(msg, reason) {
		super("PreconditionFailedError", msg);
		this.data = reason;
	}
};
var LockedError = class extends TutanotaError {
	static CODE = 423;
	constructor(msg) {
		super("LockedError", msg);
	}
};
var TooManyRequestsError = class extends TutanotaError {
	static CODE = 429;
	constructor(msg) {
		super("TooManyRequestsError", msg);
	}
};
var SessionExpiredError = class extends TutanotaError {
	static CODE = 440;
	constructor(msg) {
		super("SessionExpiredError", msg);
	}
};
var AccessDeactivatedError = class extends TutanotaError {
	static CODE = 470;
	constructor(msg) {
		super("AccessDeactivatedError", msg);
	}
};
var AccessExpiredError = class extends TutanotaError {
	static CODE = 471;
	constructor(msg) {
		super("AccessExpiredError", msg);
	}
};
var AccessBlockedError = class extends TutanotaError {
	static CODE = 472;
	constructor(msg) {
		super("AccessBlockedError", msg);
	}
};
var InvalidDataError = class extends TutanotaError {
	static CODE = 473;
	constructor(msg) {
		super("InvalidDataError", msg);
	}
};
var InvalidSoftwareVersionError = class extends TutanotaError {
	static CODE = 474;
	constructor(msg) {
		super("InvalidSoftwareVersionError", msg);
	}
};
var LimitReachedError = class extends TutanotaError {
	static CODE = 475;
	constructor(msg) {
		super("LimitReachedError", msg);
	}
};
var InternalServerError = class extends TutanotaError {
	static CODE = 500;
	constructor(msg) {
		super("InternalServerError", msg);
	}
};
var BadGatewayError = class extends TutanotaError {
	static CODE = 502;
	constructor(msg) {
		super("BadGatewayError", msg);
	}
};
var ServiceUnavailableError = class extends TutanotaError {
	static CODE = 503;
	constructor(msg) {
		super("ServiceUnavailableError", msg);
	}
};
var InsufficientStorageError = class extends TutanotaError {
	static CODE = 507;
	constructor(msg) {
		super("InsufficientStorageError", msg);
	}
};
var ResourceError = class extends TutanotaError {
	constructor(msg) {
		super("ResourceError", msg);
	}
};
var PayloadTooLargeError = class extends TutanotaError {
	static CODE = 413;
	constructor(msg) {
		super("PayloadTooLargeError", msg);
	}
};
function handleRestError(errorCode, path, errorId, precondition) {
	let message = `${errorCode}: ${errorId ? errorId + " " : ""}${precondition ? precondition + " " : ""}${path}`;
	switch (errorCode) {
		case ConnectionError.CODE: return new ConnectionError(message);
		case BadRequestError.CODE: return new BadRequestError(message);
		case NotAuthenticatedError.CODE: return new NotAuthenticatedError(message);
		case NotAuthorizedError.CODE: return new NotAuthorizedError(message);
		case NotFoundError.CODE: return new NotFoundError(message);
		case MethodNotAllowedError.CODE: return new MethodNotAllowedError(message);
		case PreconditionFailedError.CODE: return new PreconditionFailedError(message, precondition ?? null);
		case LockedError.CODE: return new LockedError(message);
		case TooManyRequestsError.CODE: return new TooManyRequestsError(message);
		case SessionExpiredError.CODE: return new SessionExpiredError(message);
		case AccessDeactivatedError.CODE: return new AccessDeactivatedError(message);
		case AccessExpiredError.CODE: return new AccessExpiredError(message);
		case AccessBlockedError.CODE: return new AccessBlockedError(message);
		case InvalidDataError.CODE: return new InvalidDataError(message);
		case InvalidSoftwareVersionError.CODE: return new InvalidSoftwareVersionError(message);
		case LimitReachedError.CODE: return new LimitReachedError(message);
		case InternalServerError.CODE: return new InternalServerError(message);
		case BadGatewayError.CODE: return new BadGatewayError(message);
		case ServiceUnavailableError.CODE: return new ServiceUnavailableError(message);
		case InsufficientStorageError.CODE: return new InsufficientStorageError(message);
		case PayloadTooLargeError.CODE: return new PayloadTooLargeError(message);
		case RequestTimeoutError.CODE: return new RequestTimeoutError(message);
		default: return new ResourceError(message);
	}
}

//#endregion
export { AccessBlockedError, AccessDeactivatedError, AccessExpiredError, BadGatewayError, BadRequestError, ConnectionError, InsufficientStorageError, InternalServerError, InvalidDataError, InvalidSoftwareVersionError, LimitReachedError, LockedError, MethodNotAllowedError, NotAuthenticatedError, NotAuthorizedError, NotFoundError, PayloadTooLargeError, PreconditionFailedError, RequestTimeoutError, ResourceError, ServiceUnavailableError, SessionExpiredError, TooManyRequestsError, handleRestError };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVzdEVycm9yLWNodW5rLmpzIiwibmFtZXMiOlsibXNnOiBzdHJpbmciLCJyZWFzb246IHN0cmluZyB8IG51bGwiLCJlcnJvckNvZGU6IG51bWJlciIsInBhdGg/OiBzdHJpbmciLCJlcnJvcklkPzogc3RyaW5nIHwgbnVsbCIsInByZWNvbmRpdGlvbj86IHN0cmluZyB8IG51bGwiXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL2FwaS9jb21tb24vZXJyb3IvUmVzdEVycm9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vQGJ1bmRsZUludG86Y29tbW9uLW1pblxuXG5pbXBvcnQgeyBUdXRhbm90YUVycm9yIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS1lcnJvclwiXG5cbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uRXJyb3IgZXh0ZW5kcyBUdXRhbm90YUVycm9yIHtcblx0c3RhdGljIENPREU6IG51bWJlciA9IDBcblxuXHRjb25zdHJ1Y3Rvcihtc2c6IHN0cmluZykge1xuXHRcdHN1cGVyKFwiQ29ubmVjdGlvbkVycm9yXCIsIG1zZylcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgQmFkUmVxdWVzdEVycm9yIGV4dGVuZHMgVHV0YW5vdGFFcnJvciB7XG5cdHN0YXRpYyBDT0RFOiBudW1iZXIgPSA0MDBcblxuXHRjb25zdHJ1Y3Rvcihtc2c6IHN0cmluZykge1xuXHRcdHN1cGVyKFwiQmFkUmVxdWVzdEVycm9yXCIsIG1zZylcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgTm90QXV0aGVudGljYXRlZEVycm9yIGV4dGVuZHMgVHV0YW5vdGFFcnJvciB7XG5cdHN0YXRpYyBDT0RFOiBudW1iZXIgPSA0MDFcblxuXHRjb25zdHJ1Y3Rvcihtc2c6IHN0cmluZykge1xuXHRcdHN1cGVyKFwiTm90QXV0aGVudGljYXRlZEVycm9yXCIsIG1zZylcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgTm90QXV0aG9yaXplZEVycm9yIGV4dGVuZHMgVHV0YW5vdGFFcnJvciB7XG5cdHN0YXRpYyBDT0RFOiBudW1iZXIgPSA0MDNcblxuXHRjb25zdHJ1Y3Rvcihtc2c6IHN0cmluZykge1xuXHRcdHN1cGVyKFwiTm90QXV0aG9yaXplZEVycm9yXCIsIG1zZylcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgTm90Rm91bmRFcnJvciBleHRlbmRzIFR1dGFub3RhRXJyb3Ige1xuXHRzdGF0aWMgQ09ERTogbnVtYmVyID0gNDA0XG5cblx0Y29uc3RydWN0b3IobXNnOiBzdHJpbmcpIHtcblx0XHRzdXBlcihcIk5vdEZvdW5kRXJyb3JcIiwgbXNnKVxuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBNZXRob2ROb3RBbGxvd2VkRXJyb3IgZXh0ZW5kcyBUdXRhbm90YUVycm9yIHtcblx0c3RhdGljIENPREU6IG51bWJlciA9IDQwNVxuXG5cdGNvbnN0cnVjdG9yKG1zZzogc3RyaW5nKSB7XG5cdFx0c3VwZXIoXCJNZXRob2ROb3RBbGxvd2VkRXJyb3JcIiwgbXNnKVxuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0VGltZW91dEVycm9yIGV4dGVuZHMgVHV0YW5vdGFFcnJvciB7XG5cdHN0YXRpYyBDT0RFOiBudW1iZXIgPSA0MDhcblxuXHRjb25zdHJ1Y3Rvcihtc2c6IHN0cmluZykge1xuXHRcdHN1cGVyKFwiUmVxdWVzdFRpbWVvdXRFcnJvclwiLCBtc2cpXG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFByZWNvbmRpdGlvbkZhaWxlZEVycm9yIGV4dGVuZHMgVHV0YW5vdGFFcnJvciB7XG5cdHN0YXRpYyBDT0RFOiBudW1iZXIgPSA0MTJcblx0Ly8gZGF0YSBmaWVsZCBpcyByZXNwZWN0ZWQgYnkgdGhlIFdvcmtlclByb3RvY29sLiBPdGhlciBmaWVsZHMgbWlnaHQgbm90IGJlIHBhc3NlZFxuXHRkYXRhOiBzdHJpbmcgfCBudWxsXG5cblx0Y29uc3RydWN0b3IobXNnOiBzdHJpbmcsIHJlYXNvbjogc3RyaW5nIHwgbnVsbCkge1xuXHRcdHN1cGVyKFwiUHJlY29uZGl0aW9uRmFpbGVkRXJyb3JcIiwgbXNnKVxuXHRcdHRoaXMuZGF0YSA9IHJlYXNvblxuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2NrZWRFcnJvciBleHRlbmRzIFR1dGFub3RhRXJyb3Ige1xuXHRzdGF0aWMgQ09ERTogbnVtYmVyID0gNDIzXG5cblx0Y29uc3RydWN0b3IobXNnOiBzdHJpbmcpIHtcblx0XHRzdXBlcihcIkxvY2tlZEVycm9yXCIsIG1zZylcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgVG9vTWFueVJlcXVlc3RzRXJyb3IgZXh0ZW5kcyBUdXRhbm90YUVycm9yIHtcblx0c3RhdGljIENPREU6IG51bWJlciA9IDQyOVxuXG5cdGNvbnN0cnVjdG9yKG1zZzogc3RyaW5nKSB7XG5cdFx0c3VwZXIoXCJUb29NYW55UmVxdWVzdHNFcnJvclwiLCBtc2cpXG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFNlc3Npb25FeHBpcmVkRXJyb3IgZXh0ZW5kcyBUdXRhbm90YUVycm9yIHtcblx0c3RhdGljIENPREU6IG51bWJlciA9IDQ0MFxuXG5cdGNvbnN0cnVjdG9yKG1zZzogc3RyaW5nKSB7XG5cdFx0c3VwZXIoXCJTZXNzaW9uRXhwaXJlZEVycm9yXCIsIG1zZylcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgQWNjZXNzRGVhY3RpdmF0ZWRFcnJvciBleHRlbmRzIFR1dGFub3RhRXJyb3Ige1xuXHRzdGF0aWMgQ09ERTogbnVtYmVyID0gNDcwXG5cblx0Y29uc3RydWN0b3IobXNnOiBzdHJpbmcpIHtcblx0XHRzdXBlcihcIkFjY2Vzc0RlYWN0aXZhdGVkRXJyb3JcIiwgbXNnKVxuXHR9XG59XG5cbi8qKiBFeHRlcm5hbCB1c2VycyBvbmx5LCByZWxhdGVkIHRvIHBhc3N3b3JkIGNoYW5nZXMuICovXG5leHBvcnQgY2xhc3MgQWNjZXNzRXhwaXJlZEVycm9yIGV4dGVuZHMgVHV0YW5vdGFFcnJvciB7XG5cdHN0YXRpYyBDT0RFOiBudW1iZXIgPSA0NzFcblxuXHRjb25zdHJ1Y3Rvcihtc2c6IHN0cmluZykge1xuXHRcdHN1cGVyKFwiQWNjZXNzRXhwaXJlZEVycm9yXCIsIG1zZylcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgQWNjZXNzQmxvY2tlZEVycm9yIGV4dGVuZHMgVHV0YW5vdGFFcnJvciB7XG5cdHN0YXRpYyBDT0RFOiBudW1iZXIgPSA0NzJcblxuXHRjb25zdHJ1Y3Rvcihtc2c6IHN0cmluZykge1xuXHRcdHN1cGVyKFwiQWNjZXNzQmxvY2tlZEVycm9yXCIsIG1zZylcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgSW52YWxpZERhdGFFcnJvciBleHRlbmRzIFR1dGFub3RhRXJyb3Ige1xuXHRzdGF0aWMgQ09ERTogbnVtYmVyID0gNDczXG5cblx0Y29uc3RydWN0b3IobXNnOiBzdHJpbmcpIHtcblx0XHRzdXBlcihcIkludmFsaWREYXRhRXJyb3JcIiwgbXNnKVxuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnZhbGlkU29mdHdhcmVWZXJzaW9uRXJyb3IgZXh0ZW5kcyBUdXRhbm90YUVycm9yIHtcblx0c3RhdGljIENPREU6IG51bWJlciA9IDQ3NFxuXG5cdGNvbnN0cnVjdG9yKG1zZzogc3RyaW5nKSB7XG5cdFx0c3VwZXIoXCJJbnZhbGlkU29mdHdhcmVWZXJzaW9uRXJyb3JcIiwgbXNnKVxuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBMaW1pdFJlYWNoZWRFcnJvciBleHRlbmRzIFR1dGFub3RhRXJyb3Ige1xuXHRzdGF0aWMgQ09ERTogbnVtYmVyID0gNDc1XG5cblx0Y29uc3RydWN0b3IobXNnOiBzdHJpbmcpIHtcblx0XHRzdXBlcihcIkxpbWl0UmVhY2hlZEVycm9yXCIsIG1zZylcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgSW50ZXJuYWxTZXJ2ZXJFcnJvciBleHRlbmRzIFR1dGFub3RhRXJyb3Ige1xuXHRzdGF0aWMgQ09ERTogbnVtYmVyID0gNTAwXG5cblx0Y29uc3RydWN0b3IobXNnOiBzdHJpbmcpIHtcblx0XHRzdXBlcihcIkludGVybmFsU2VydmVyRXJyb3JcIiwgbXNnKVxuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBCYWRHYXRld2F5RXJyb3IgZXh0ZW5kcyBUdXRhbm90YUVycm9yIHtcblx0c3RhdGljIENPREU6IG51bWJlciA9IDUwMlxuXG5cdGNvbnN0cnVjdG9yKG1zZzogc3RyaW5nKSB7XG5cdFx0c3VwZXIoXCJCYWRHYXRld2F5RXJyb3JcIiwgbXNnKVxuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlVW5hdmFpbGFibGVFcnJvciBleHRlbmRzIFR1dGFub3RhRXJyb3Ige1xuXHRzdGF0aWMgQ09ERTogbnVtYmVyID0gNTAzXG5cblx0Y29uc3RydWN0b3IobXNnOiBzdHJpbmcpIHtcblx0XHRzdXBlcihcIlNlcnZpY2VVbmF2YWlsYWJsZUVycm9yXCIsIG1zZylcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgSW5zdWZmaWNpZW50U3RvcmFnZUVycm9yIGV4dGVuZHMgVHV0YW5vdGFFcnJvciB7XG5cdHN0YXRpYyBDT0RFOiBudW1iZXIgPSA1MDdcblxuXHRjb25zdHJ1Y3Rvcihtc2c6IHN0cmluZykge1xuXHRcdHN1cGVyKFwiSW5zdWZmaWNpZW50U3RvcmFnZUVycm9yXCIsIG1zZylcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VFcnJvciBleHRlbmRzIFR1dGFub3RhRXJyb3Ige1xuXHRjb25zdHJ1Y3Rvcihtc2c6IHN0cmluZykge1xuXHRcdHN1cGVyKFwiUmVzb3VyY2VFcnJvclwiLCBtc2cpXG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFBheWxvYWRUb29MYXJnZUVycm9yIGV4dGVuZHMgVHV0YW5vdGFFcnJvciB7XG5cdHN0YXRpYyBDT0RFOiBudW1iZXIgPSA0MTNcblxuXHRjb25zdHJ1Y3Rvcihtc2c6IHN0cmluZykge1xuXHRcdHN1cGVyKFwiUGF5bG9hZFRvb0xhcmdlRXJyb3JcIiwgbXNnKVxuXHR9XG59XG5cbi8qKlxuICogQXR0ZW50aW9uOiBXaGVuIGFkZGluZyBhbiBFcnJvciBhbHNvIGFkZCBpdCBpbiBXb3JrZXJQcm90b2NvbC5FcnJvck5hbWVUb1R5cGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVSZXN0RXJyb3IoZXJyb3JDb2RlOiBudW1iZXIsIHBhdGg/OiBzdHJpbmcsIGVycm9ySWQ/OiBzdHJpbmcgfCBudWxsLCBwcmVjb25kaXRpb24/OiBzdHJpbmcgfCBudWxsKTogVHV0YW5vdGFFcnJvciB7XG5cdGxldCBtZXNzYWdlID0gYCR7ZXJyb3JDb2RlfTogJHtlcnJvcklkID8gZXJyb3JJZCArIFwiIFwiIDogXCJcIn0ke3ByZWNvbmRpdGlvbiA/IHByZWNvbmRpdGlvbiArIFwiIFwiIDogXCJcIn0ke3BhdGh9YFxuXG5cdHN3aXRjaCAoZXJyb3JDb2RlKSB7XG5cdFx0Y2FzZSBDb25uZWN0aW9uRXJyb3IuQ09ERTpcblx0XHRcdHJldHVybiBuZXcgQ29ubmVjdGlvbkVycm9yKG1lc3NhZ2UpXG5cblx0XHRjYXNlIEJhZFJlcXVlc3RFcnJvci5DT0RFOlxuXHRcdFx0cmV0dXJuIG5ldyBCYWRSZXF1ZXN0RXJyb3IobWVzc2FnZSlcblxuXHRcdGNhc2UgTm90QXV0aGVudGljYXRlZEVycm9yLkNPREU6XG5cdFx0XHRyZXR1cm4gbmV3IE5vdEF1dGhlbnRpY2F0ZWRFcnJvcihtZXNzYWdlKVxuXG5cdFx0Y2FzZSBOb3RBdXRob3JpemVkRXJyb3IuQ09ERTpcblx0XHRcdHJldHVybiBuZXcgTm90QXV0aG9yaXplZEVycm9yKG1lc3NhZ2UpXG5cblx0XHRjYXNlIE5vdEZvdW5kRXJyb3IuQ09ERTpcblx0XHRcdHJldHVybiBuZXcgTm90Rm91bmRFcnJvcihtZXNzYWdlKVxuXG5cdFx0Y2FzZSBNZXRob2ROb3RBbGxvd2VkRXJyb3IuQ09ERTpcblx0XHRcdHJldHVybiBuZXcgTWV0aG9kTm90QWxsb3dlZEVycm9yKG1lc3NhZ2UpXG5cblx0XHRjYXNlIFByZWNvbmRpdGlvbkZhaWxlZEVycm9yLkNPREU6XG5cdFx0XHRyZXR1cm4gbmV3IFByZWNvbmRpdGlvbkZhaWxlZEVycm9yKG1lc3NhZ2UsIHByZWNvbmRpdGlvbiA/PyBudWxsKVxuXG5cdFx0Y2FzZSBMb2NrZWRFcnJvci5DT0RFOlxuXHRcdFx0cmV0dXJuIG5ldyBMb2NrZWRFcnJvcihtZXNzYWdlKVxuXG5cdFx0Y2FzZSBUb29NYW55UmVxdWVzdHNFcnJvci5DT0RFOlxuXHRcdFx0cmV0dXJuIG5ldyBUb29NYW55UmVxdWVzdHNFcnJvcihtZXNzYWdlKVxuXG5cdFx0Y2FzZSBTZXNzaW9uRXhwaXJlZEVycm9yLkNPREU6XG5cdFx0XHRyZXR1cm4gbmV3IFNlc3Npb25FeHBpcmVkRXJyb3IobWVzc2FnZSlcblxuXHRcdGNhc2UgQWNjZXNzRGVhY3RpdmF0ZWRFcnJvci5DT0RFOlxuXHRcdFx0cmV0dXJuIG5ldyBBY2Nlc3NEZWFjdGl2YXRlZEVycm9yKG1lc3NhZ2UpXG5cblx0XHRjYXNlIEFjY2Vzc0V4cGlyZWRFcnJvci5DT0RFOlxuXHRcdFx0cmV0dXJuIG5ldyBBY2Nlc3NFeHBpcmVkRXJyb3IobWVzc2FnZSlcblxuXHRcdGNhc2UgQWNjZXNzQmxvY2tlZEVycm9yLkNPREU6XG5cdFx0XHRyZXR1cm4gbmV3IEFjY2Vzc0Jsb2NrZWRFcnJvcihtZXNzYWdlKVxuXG5cdFx0Y2FzZSBJbnZhbGlkRGF0YUVycm9yLkNPREU6XG5cdFx0XHRyZXR1cm4gbmV3IEludmFsaWREYXRhRXJyb3IobWVzc2FnZSlcblxuXHRcdGNhc2UgSW52YWxpZFNvZnR3YXJlVmVyc2lvbkVycm9yLkNPREU6XG5cdFx0XHRyZXR1cm4gbmV3IEludmFsaWRTb2Z0d2FyZVZlcnNpb25FcnJvcihtZXNzYWdlKVxuXG5cdFx0Y2FzZSBMaW1pdFJlYWNoZWRFcnJvci5DT0RFOlxuXHRcdFx0cmV0dXJuIG5ldyBMaW1pdFJlYWNoZWRFcnJvcihtZXNzYWdlKVxuXG5cdFx0Y2FzZSBJbnRlcm5hbFNlcnZlckVycm9yLkNPREU6XG5cdFx0XHRyZXR1cm4gbmV3IEludGVybmFsU2VydmVyRXJyb3IobWVzc2FnZSlcblxuXHRcdGNhc2UgQmFkR2F0ZXdheUVycm9yLkNPREU6XG5cdFx0XHRyZXR1cm4gbmV3IEJhZEdhdGV3YXlFcnJvcihtZXNzYWdlKVxuXG5cdFx0Y2FzZSBTZXJ2aWNlVW5hdmFpbGFibGVFcnJvci5DT0RFOlxuXHRcdFx0cmV0dXJuIG5ldyBTZXJ2aWNlVW5hdmFpbGFibGVFcnJvcihtZXNzYWdlKVxuXG5cdFx0Y2FzZSBJbnN1ZmZpY2llbnRTdG9yYWdlRXJyb3IuQ09ERTpcblx0XHRcdHJldHVybiBuZXcgSW5zdWZmaWNpZW50U3RvcmFnZUVycm9yKG1lc3NhZ2UpXG5cblx0XHRjYXNlIFBheWxvYWRUb29MYXJnZUVycm9yLkNPREU6XG5cdFx0XHRyZXR1cm4gbmV3IFBheWxvYWRUb29MYXJnZUVycm9yKG1lc3NhZ2UpXG5cblx0XHRjYXNlIFJlcXVlc3RUaW1lb3V0RXJyb3IuQ09ERTpcblx0XHRcdHJldHVybiBuZXcgUmVxdWVzdFRpbWVvdXRFcnJvcihtZXNzYWdlKVxuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBuZXcgUmVzb3VyY2VFcnJvcihtZXNzYWdlKVxuXHR9XG59XG4iXSwibWFwcGluZ3MiOiI7OztJQUlhLGtCQUFOLGNBQThCLGNBQWM7Q0FDbEQsT0FBTyxPQUFlO0NBRXRCLFlBQVlBLEtBQWE7QUFDeEIsUUFBTSxtQkFBbUIsSUFBSTtDQUM3QjtBQUNEO0lBRVksa0JBQU4sY0FBOEIsY0FBYztDQUNsRCxPQUFPLE9BQWU7Q0FFdEIsWUFBWUEsS0FBYTtBQUN4QixRQUFNLG1CQUFtQixJQUFJO0NBQzdCO0FBQ0Q7SUFFWSx3QkFBTixjQUFvQyxjQUFjO0NBQ3hELE9BQU8sT0FBZTtDQUV0QixZQUFZQSxLQUFhO0FBQ3hCLFFBQU0seUJBQXlCLElBQUk7Q0FDbkM7QUFDRDtJQUVZLHFCQUFOLGNBQWlDLGNBQWM7Q0FDckQsT0FBTyxPQUFlO0NBRXRCLFlBQVlBLEtBQWE7QUFDeEIsUUFBTSxzQkFBc0IsSUFBSTtDQUNoQztBQUNEO0lBRVksZ0JBQU4sY0FBNEIsY0FBYztDQUNoRCxPQUFPLE9BQWU7Q0FFdEIsWUFBWUEsS0FBYTtBQUN4QixRQUFNLGlCQUFpQixJQUFJO0NBQzNC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