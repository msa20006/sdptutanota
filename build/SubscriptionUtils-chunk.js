import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { LazyLoaded, isEmpty } from "./dist2-chunk.js";
import { AccountType, BookingItemFeatureType, NewPaidPlans, PaymentMethodType, PlanType, PlanTypeToName, getClientType, getPaymentMethodType } from "./TutanotaConstants-chunk.js";
import { createPaymentDataServiceGetData } from "./TypeRefs2-chunk.js";
import { PaymentDataService } from "./Services-chunk.js";
import { locator } from "./CommonLocator-chunk.js";

//#region src/common/subscription/SubscriptionUtils.ts
let UpgradeType = function(UpgradeType$1) {
	UpgradeType$1["Signup"] = "Signup";
	UpgradeType$1["Initial"] = "Initial";
	UpgradeType$1["Switch"] = "Switch";
	return UpgradeType$1;
}({});
function getCurrentCount(featureType, booking) {
	if (booking) {
		let bookingItem = booking.items.find((item) => item.featureType === featureType);
		return bookingItem ? Number(bookingItem.currentCount) : 0;
	} else return 0;
}
function getTotalStorageCapacityPerCustomer(customer, customerInfo, lastBooking) {
	let freeStorageCapacity = getIncludedStorageCapacityPerCustomer(customerInfo);
	if (customer.type === AccountType.PAID) return Math.max(freeStorageCapacity, getCurrentCount(BookingItemFeatureType.Storage, lastBooking));
else return freeStorageCapacity;
}
function getIncludedStorageCapacityPerCustomer(customerInfo) {
	return Math.max(Number(customerInfo.includedStorageCapacity), Number(customerInfo.promotionStorageCapacity));
}
function isWhitelabelActive(lastBooking, planConfig) {
	return getCurrentCount(BookingItemFeatureType.Whitelabel, lastBooking) !== 0 || planConfig.whitelabel;
}
function isSharingActive(lastBooking, planConfig) {
	return getCurrentCount(BookingItemFeatureType.Sharing, lastBooking) !== 0 || planConfig.sharing;
}
function isBusinessFeatureActive(lastBooking) {
	return getCurrentCount(BookingItemFeatureType.Business, lastBooking) !== 0;
}
function isEventInvitesActive(lastBooking, planConfig) {
	return isBusinessFeatureActive(lastBooking) || planConfig.eventInvites;
}
function isAutoResponderActive(lastBooking, planConfig) {
	return isBusinessFeatureActive(lastBooking) || planConfig.autoResponder;
}
function getPreconditionFailedPaymentMsg(data) {
	switch (data) {
		case "paypal.change": return "payChangeError_msg";
		case "paypal.confirm_again": return "payPaypalConfirmAgainError_msg";
		case "paypal.other_source": return "payPaypalChangeSourceError_msg";
		case "card.contact_bank": return "payCardContactBankError_msg";
		case "card.insufficient_funds": return "payCardInsufficientFundsError_msg";
		case "card.expired_card": return "payCardExpiredError_msg";
		case "card.change": return "payChangeError_msg";
		case "card.3ds2_needed": return "creditCardPaymentErrorVerificationNeeded_msg";
		case "card.3ds2_pending": return "creditCardPendingVerification_msg";
		case "card.3ds2_failed": return "creditCardVerificationFailed_msg";
		case "card.cvv_invalid": return "creditCardCVVInvalid_msg";
		case "card.number_invalid": return "creditCardNumberInvalid_msg";
		case "card.date_invalid": return "creditCardExprationDateInvalid_msg";
		default: return "payContactUsError_msg";
	}
}
function getLazyLoadedPayPalUrl() {
	return new LazyLoaded(async () => {
		const clientType = getClientType();
		const result = await locator.serviceExecutor.get(PaymentDataService, createPaymentDataServiceGetData({ clientType }));
		return result.loginUrl;
	});
}
function toFeatureType(type) {
	switch (type) {
		case PlanType.Revolutionary: return BookingItemFeatureType.Revolutionary;
		case PlanType.Legend: return BookingItemFeatureType.Legend;
		case PlanType.Essential: return BookingItemFeatureType.Essential;
		case PlanType.Advanced: return BookingItemFeatureType.Advanced;
		case PlanType.Unlimited: return BookingItemFeatureType.Unlimited;
		case PlanType.Premium: return BookingItemFeatureType.LegacyUsers;
		default: throw new Error(`can't convert ${type} to BookingItemFeatureType`);
	}
}
async function getAvailableMatchingPlans(serviceExecutor, predicate) {
	const { PriceAndConfigProvider } = await import("./PriceUtils2-chunk.js");
	const priceAndConfigProvider = await PriceAndConfigProvider.getInitializedInstance(null, serviceExecutor, null);
	return NewPaidPlans.filter((p) => {
		const config = priceAndConfigProvider.getPlanPricesForPlan(p).planConfiguration;
		return predicate(config);
	});
}
/**
* Filter for plans a customer can upgrade to that include a feature, assuming that the feature must be available on at least one plan.
* @param predicate the criterion to select plans by
* @param errorMessage the error message to throw in case no plan satisfies the criterion
*/
async function getAtLeastOneAvailableMatchingPlan(predicate, errorMessage) {
	const plans = await getAvailableMatchingPlans(locator.serviceExecutor, predicate);
	if (isEmpty(plans)) throw new ProgrammingError(errorMessage);
	return plans;
}
async function getAvailablePlansWithWhitelabel() {
	return getAtLeastOneAvailableMatchingPlan((config) => config.whitelabel, "no available plan with the Whitelabel feature");
}
async function getAvailablePlansWithTemplates() {
	return getAtLeastOneAvailableMatchingPlan((config) => config.templates, "no available plan with the Templates feature");
}
async function getAvailablePlansWithSharing() {
	return getAtLeastOneAvailableMatchingPlan((config) => config.sharing, "no available plan with the Sharing feature");
}
async function getAvailablePlansWithEventInvites() {
	return getAtLeastOneAvailableMatchingPlan((config) => config.eventInvites, "no available plan with the Event Invites feature");
}
async function getAvailablePlansWithAutoResponder() {
	return getAtLeastOneAvailableMatchingPlan((config) => config.autoResponder, "no available plan with the Auto-Responder feature");
}
async function getAvailablePlansWithContactList() {
	return getAtLeastOneAvailableMatchingPlan((config) => config.contactList, "no available plan with the Contact List feature");
}
async function getAvailablePlansWithCalendarInvites() {
	return getAtLeastOneAvailableMatchingPlan((config) => config.eventInvites, "no available plan with the Calendar Invite feature");
}
function appStorePlanName(planType) {
	return PlanTypeToName[planType].toLowerCase();
}
function hasRunningAppStoreSubscription(accountingInfo) {
	return getPaymentMethodType(accountingInfo) === PaymentMethodType.AppStore && accountingInfo.appStoreSubscription != null;
}
async function queryAppStoreSubscriptionOwnership(userIdBytes) {
	return await locator.mobilePaymentsFacade.queryAppStoreSubscriptionOwnership(userIdBytes);
}

//#endregion
export { UpgradeType, appStorePlanName, getAvailableMatchingPlans, getAvailablePlansWithAutoResponder, getAvailablePlansWithCalendarInvites, getAvailablePlansWithContactList, getAvailablePlansWithEventInvites, getAvailablePlansWithSharing, getAvailablePlansWithTemplates, getAvailablePlansWithWhitelabel, getCurrentCount, getLazyLoadedPayPalUrl, getPreconditionFailedPaymentMsg, getTotalStorageCapacityPerCustomer, hasRunningAppStoreSubscription, isAutoResponderActive, isEventInvitesActive, isSharingActive, isWhitelabelActive, queryAppStoreSubscriptionOwnership, toFeatureType };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,