import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import "./ClientDetector-chunk.js";
import { assertNotNull, groupBy, groupByAndMap, neverNull, pMap, splitInChunks } from "./dist2-chunk.js";
import "./TutanotaConstants-chunk.js";
import { elementIdPart, isSameId, listIdPart, timestampToGeneratedId } from "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { FileTypeRef, MailDetailsBlobTypeRef, MailDetailsDraftTypeRef, MailTypeRef } from "./TypeRefs-chunk.js";
import "./TypeModels2-chunk.js";
import "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import "./ErrorHandler-chunk.js";
import "./EntityFunctions-chunk.js";
import "./TypeModels3-chunk.js";
import "./ModelInfo-chunk.js";
import "./ErrorUtils-chunk.js";
import "./RestError-chunk.js";
import "./SetupMultipleError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./EventQueue-chunk.js";
import { CacheMode } from "./EntityRestClient-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import "./MessageDispatcher-chunk.js";
import "./WorkerProxy-chunk.js";
import "./EntityUpdateUtils-chunk.js";
import { isDraft } from "./MailChecks-chunk.js";

//#region src/mail-app/workerUtils/index/BulkMailLoader.ts
const ENTITY_INDEXER_CHUNK = 20;
const MAIL_INDEXER_CHUNK = 100;
var BulkMailLoader = class {
	constructor(mailEntityClient, mailDataEntityClient, cachedStorage) {
		this.mailEntityClient = mailEntityClient;
		this.mailDataEntityClient = mailDataEntityClient;
		this.cachedStorage = cachedStorage;
	}
	loadMailsInRangeWithCache(mailListId, [rangeStart, rangeEnd]) {
		return this.mailEntityClient.loadReverseRangeBetween(MailTypeRef, mailListId, timestampToGeneratedId(rangeStart), timestampToGeneratedId(rangeEnd), MAIL_INDEXER_CHUNK);
	}
	loadFixedNumberOfMailsWithCache(mailLIstId, startId, options = {}) {
		return this.mailEntityClient.loadRange(MailTypeRef, mailLIstId, startId, MAIL_INDEXER_CHUNK, true, {
			...options,
			cacheMode: CacheMode.ReadOnly
		});
	}
	async removeFromCache(id) {
		return this.cachedStorage?.deleteIfExists(MailTypeRef, listIdPart(id), elementIdPart(id));
	}
	async loadMailDetails(mails, options = {}) {
		const result = [];
		let mailDetailsBlobMails = mails.filter((m) => !isDraft(m));
		const listIdToMailDetailsBlobIds = groupByAndMap(mailDetailsBlobMails, (m) => assertNotNull(m.mailDetails)[0], (m) => neverNull(m.mailDetails)[1]);
		for (let [listId, ids] of listIdToMailDetailsBlobIds) {
			const ownerEncSessionKeyProvider = async (instanceElementId) => {
				const mail = assertNotNull(mailDetailsBlobMails.find((m) => elementIdPart(assertNotNull(m.mailDetails)) === instanceElementId));
				return {
					key: assertNotNull(mail._ownerEncSessionKey),
					encryptingKeyVersion: Number(mail._ownerKeyVersion ?? 0)
				};
			};
			const mailDetailsBlobs = await this.loadInChunks(MailDetailsBlobTypeRef, listId, ids, ownerEncSessionKeyProvider, options);
			result.push(...mailDetailsBlobs.map((mailDetailsBlob) => {
				const mail = assertNotNull(mailDetailsBlobMails.find((m) => isSameId(m.mailDetails, mailDetailsBlob._id)));
				return {
					mail,
					mailDetails: mailDetailsBlob.details
				};
			}));
		}
		let mailDetailsDraftMails = mails.filter((m) => isDraft(m));
		const listIdToMailDetailsDraftIds = groupByAndMap(mailDetailsDraftMails, (m) => assertNotNull(m.mailDetailsDraft)[0], (m) => neverNull(m.mailDetailsDraft)[1]);
		for (let [listId, ids] of listIdToMailDetailsDraftIds) {
			const ownerEncSessionKeyProvider = async (instanceElementId) => {
				const mail = assertNotNull(mailDetailsDraftMails.find((m) => elementIdPart(assertNotNull(m.mailDetailsDraft)) === instanceElementId));
				return {
					key: assertNotNull(mail._ownerEncSessionKey),
					encryptingKeyVersion: Number(mail._ownerKeyVersion ?? 0)
				};
			};
			const mailDetailsDrafts = await this.loadInChunks(MailDetailsDraftTypeRef, listId, ids, ownerEncSessionKeyProvider, options);
			result.push(...mailDetailsDrafts.map((draftDetails) => {
				const mail = assertNotNull(mailDetailsDraftMails.find((m) => isSameId(m.mailDetailsDraft, draftDetails._id)));
				return {
					mail,
					mailDetails: draftDetails.details
				};
			}));
		}
		return result;
	}
	async loadAttachments(mails, options = {}) {
		const attachmentIds = [];
		for (const mail of mails) attachmentIds.push(...mail.attachments);
		const filesByList = groupBy(attachmentIds, (a) => a[0]);
		const fileLoadingPromises = [];
		for (const [listId, fileIds] of filesByList.entries()) fileLoadingPromises.push(this.loadInChunks(FileTypeRef, listId, fileIds.map((f) => f[1]), undefined, options));
		const filesResults = await Promise.all(fileLoadingPromises);
		return filesResults.flat();
	}
	async loadInChunks(typeRef, listId, ids, ownerEncSessionKeyProvider, options = {}) {
		const byChunk = splitInChunks(ENTITY_INDEXER_CHUNK, ids);
		const entityResults = await pMap(byChunk, (chunk) => {
			return chunk.length > 0 ? this.mailDataEntityClient.loadMultiple(typeRef, listId, chunk, ownerEncSessionKeyProvider, {
				...options,
				cacheMode: CacheMode.ReadOnly
			}) : Promise.resolve([]);
		}, { concurrency: 2 });
		return entityResults.flat();
	}
};

//#endregion
export { BulkMailLoader };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,