import { TypeRef } from "./dist2-chunk.js";
import { create } from "./EntityUtils-chunk.js";
import { typeModels$3 as typeModels } from "./TypeModels2-chunk.js";

//#region src/common/api/entities/sys/TypeRefs.ts
const AccountingInfoTypeRef = new TypeRef("sys", "AccountingInfo");
const AdminGroupKeyAuthenticationDataTypeRef = new TypeRef("sys", "AdminGroupKeyAuthenticationData");
function createAdminGroupKeyAuthenticationData(values) {
	return Object.assign(create(typeModels.AdminGroupKeyAuthenticationData, AdminGroupKeyAuthenticationDataTypeRef), values);
}
const AdminGroupKeyRotationPostInTypeRef = new TypeRef("sys", "AdminGroupKeyRotationPostIn");
function createAdminGroupKeyRotationPostIn(values) {
	return Object.assign(create(typeModels.AdminGroupKeyRotationPostIn, AdminGroupKeyRotationPostInTypeRef), values);
}
const AdministratedGroupTypeRef = new TypeRef("sys", "AdministratedGroup");
const AdministratedGroupsRefTypeRef = new TypeRef("sys", "AdministratedGroupsRef");
const AffiliatePartnerKpiMonthSummaryTypeRef = new TypeRef("sys", "AffiliatePartnerKpiMonthSummary");
const AffiliatePartnerKpiServiceGetOutTypeRef = new TypeRef("sys", "AffiliatePartnerKpiServiceGetOut");
const AlarmInfoTypeRef = new TypeRef("sys", "AlarmInfo");
function createAlarmInfo(values) {
	return Object.assign(create(typeModels.AlarmInfo, AlarmInfoTypeRef), values);
}
const AlarmNotificationTypeRef = new TypeRef("sys", "AlarmNotification");
function createAlarmNotification(values) {
	return Object.assign(create(typeModels.AlarmNotification, AlarmNotificationTypeRef), values);
}
const AlarmServicePostTypeRef = new TypeRef("sys", "AlarmServicePost");
function createAlarmServicePost(values) {
	return Object.assign(create(typeModels.AlarmServicePost, AlarmServicePostTypeRef), values);
}
const AppStoreSubscriptionGetInTypeRef = new TypeRef("sys", "AppStoreSubscriptionGetIn");
function createAppStoreSubscriptionGetIn(values) {
	return Object.assign(create(typeModels.AppStoreSubscriptionGetIn, AppStoreSubscriptionGetInTypeRef), values);
}
const AppStoreSubscriptionGetOutTypeRef = new TypeRef("sys", "AppStoreSubscriptionGetOut");
const ArchiveRefTypeRef = new TypeRef("sys", "ArchiveRef");
const ArchiveTypeTypeRef = new TypeRef("sys", "ArchiveType");
const AuditLogEntryTypeRef = new TypeRef("sys", "AuditLogEntry");
const AuditLogRefTypeRef = new TypeRef("sys", "AuditLogRef");
const AuthenticatedDeviceTypeRef = new TypeRef("sys", "AuthenticatedDevice");
const AuthenticationTypeRef = new TypeRef("sys", "Authentication");
const AutoLoginDataDeleteTypeRef = new TypeRef("sys", "AutoLoginDataDelete");
const AutoLoginDataGetTypeRef = new TypeRef("sys", "AutoLoginDataGet");
const AutoLoginDataReturnTypeRef = new TypeRef("sys", "AutoLoginDataReturn");
const AutoLoginPostReturnTypeRef = new TypeRef("sys", "AutoLoginPostReturn");
const BlobTypeRef = new TypeRef("sys", "Blob");
const BlobReferenceTokenWrapperTypeRef = new TypeRef("sys", "BlobReferenceTokenWrapper");
function createBlobReferenceTokenWrapper(values) {
	return Object.assign(create(typeModels.BlobReferenceTokenWrapper, BlobReferenceTokenWrapperTypeRef), values);
}
const BookingTypeRef = new TypeRef("sys", "Booking");
const BookingItemTypeRef = new TypeRef("sys", "BookingItem");
const BookingsRefTypeRef = new TypeRef("sys", "BookingsRef");
const BootstrapFeatureTypeRef = new TypeRef("sys", "BootstrapFeature");
const Braintree3ds2RequestTypeRef = new TypeRef("sys", "Braintree3ds2Request");
const Braintree3ds2ResponseTypeRef = new TypeRef("sys", "Braintree3ds2Response");
const BrandingDomainDataTypeRef = new TypeRef("sys", "BrandingDomainData");
function createBrandingDomainData(values) {
	return Object.assign(create(typeModels.BrandingDomainData, BrandingDomainDataTypeRef), values);
}
const BrandingDomainDeleteDataTypeRef = new TypeRef("sys", "BrandingDomainDeleteData");
function createBrandingDomainDeleteData(values) {
	return Object.assign(create(typeModels.BrandingDomainDeleteData, BrandingDomainDeleteDataTypeRef), values);
}
const BrandingDomainGetReturnTypeRef = new TypeRef("sys", "BrandingDomainGetReturn");
const BucketTypeRef = new TypeRef("sys", "Bucket");
const BucketKeyTypeRef = new TypeRef("sys", "BucketKey");
const BucketPermissionTypeRef = new TypeRef("sys", "BucketPermission");
const CalendarAdvancedRepeatRuleTypeRef = new TypeRef("sys", "CalendarAdvancedRepeatRule");
function createCalendarAdvancedRepeatRule(values) {
	return Object.assign(create(typeModels.CalendarAdvancedRepeatRule, CalendarAdvancedRepeatRuleTypeRef), values);
}
const CalendarEventRefTypeRef = new TypeRef("sys", "CalendarEventRef");
function createCalendarEventRef(values) {
	return Object.assign(create(typeModels.CalendarEventRef, CalendarEventRefTypeRef), values);
}
const CertificateInfoTypeRef = new TypeRef("sys", "CertificateInfo");
const ChallengeTypeRef = new TypeRef("sys", "Challenge");
const ChangeKdfPostInTypeRef = new TypeRef("sys", "ChangeKdfPostIn");
function createChangeKdfPostIn(values) {
	return Object.assign(create(typeModels.ChangeKdfPostIn, ChangeKdfPostInTypeRef), values);
}
const ChangePasswordPostInTypeRef = new TypeRef("sys", "ChangePasswordPostIn");
function createChangePasswordPostIn(values) {
	return Object.assign(create(typeModels.ChangePasswordPostIn, ChangePasswordPostInTypeRef), values);
}
const ChatTypeRef = new TypeRef("sys", "Chat");
const CloseSessionServicePostTypeRef = new TypeRef("sys", "CloseSessionServicePost");
function createCloseSessionServicePost(values) {
	return Object.assign(create(typeModels.CloseSessionServicePost, CloseSessionServicePostTypeRef), values);
}
const CreateCustomerServerPropertiesDataTypeRef = new TypeRef("sys", "CreateCustomerServerPropertiesData");
function createCreateCustomerServerPropertiesData(values) {
	return Object.assign(create(typeModels.CreateCustomerServerPropertiesData, CreateCustomerServerPropertiesDataTypeRef), values);
}
const CreateCustomerServerPropertiesReturnTypeRef = new TypeRef("sys", "CreateCustomerServerPropertiesReturn");
const CreateSessionDataTypeRef = new TypeRef("sys", "CreateSessionData");
function createCreateSessionData(values) {
	return Object.assign(create(typeModels.CreateSessionData, CreateSessionDataTypeRef), values);
}
const CreateSessionReturnTypeRef = new TypeRef("sys", "CreateSessionReturn");
const CreditCardTypeRef = new TypeRef("sys", "CreditCard");
function createCreditCard(values) {
	return Object.assign(create(typeModels.CreditCard, CreditCardTypeRef), values);
}
const CustomDomainCheckGetInTypeRef = new TypeRef("sys", "CustomDomainCheckGetIn");
function createCustomDomainCheckGetIn(values) {
	return Object.assign(create(typeModels.CustomDomainCheckGetIn, CustomDomainCheckGetInTypeRef), values);
}
const CustomDomainCheckGetOutTypeRef = new TypeRef("sys", "CustomDomainCheckGetOut");
const CustomDomainDataTypeRef = new TypeRef("sys", "CustomDomainData");
function createCustomDomainData(values) {
	return Object.assign(create(typeModels.CustomDomainData, CustomDomainDataTypeRef), values);
}
const CustomDomainReturnTypeRef = new TypeRef("sys", "CustomDomainReturn");
const CustomerTypeRef = new TypeRef("sys", "Customer");
const CustomerAccountTerminationPostInTypeRef = new TypeRef("sys", "CustomerAccountTerminationPostIn");
function createCustomerAccountTerminationPostIn(values) {
	return Object.assign(create(typeModels.CustomerAccountTerminationPostIn, CustomerAccountTerminationPostInTypeRef), values);
}
const CustomerAccountTerminationPostOutTypeRef = new TypeRef("sys", "CustomerAccountTerminationPostOut");
const CustomerAccountTerminationRequestTypeRef = new TypeRef("sys", "CustomerAccountTerminationRequest");
const CustomerInfoTypeRef = new TypeRef("sys", "CustomerInfo");
function createCustomerInfo(values) {
	return Object.assign(create(typeModels.CustomerInfo, CustomerInfoTypeRef), values);
}
const CustomerPropertiesTypeRef = new TypeRef("sys", "CustomerProperties");
function createCustomerProperties(values) {
	return Object.assign(create(typeModels.CustomerProperties, CustomerPropertiesTypeRef), values);
}
const CustomerServerPropertiesTypeRef = new TypeRef("sys", "CustomerServerProperties");
const DateWrapperTypeRef = new TypeRef("sys", "DateWrapper");
function createDateWrapper(values) {
	return Object.assign(create(typeModels.DateWrapper, DateWrapperTypeRef), values);
}
const DebitServicePutDataTypeRef = new TypeRef("sys", "DebitServicePutData");
function createDebitServicePutData(values) {
	return Object.assign(create(typeModels.DebitServicePutData, DebitServicePutDataTypeRef), values);
}
const DeleteCustomerDataTypeRef = new TypeRef("sys", "DeleteCustomerData");
function createDeleteCustomerData(values) {
	return Object.assign(create(typeModels.DeleteCustomerData, DeleteCustomerDataTypeRef), values);
}
const DnsRecordTypeRef = new TypeRef("sys", "DnsRecord");
function createDnsRecord(values) {
	return Object.assign(create(typeModels.DnsRecord, DnsRecordTypeRef), values);
}
const DomainInfoTypeRef = new TypeRef("sys", "DomainInfo");
const DomainMailAddressAvailabilityDataTypeRef = new TypeRef("sys", "DomainMailAddressAvailabilityData");
function createDomainMailAddressAvailabilityData(values) {
	return Object.assign(create(typeModels.DomainMailAddressAvailabilityData, DomainMailAddressAvailabilityDataTypeRef), values);
}
const DomainMailAddressAvailabilityReturnTypeRef = new TypeRef("sys", "DomainMailAddressAvailabilityReturn");
const EmailSenderListElementTypeRef = new TypeRef("sys", "EmailSenderListElement");
function createEmailSenderListElement(values) {
	return Object.assign(create(typeModels.EmailSenderListElement, EmailSenderListElementTypeRef), values);
}
const EntityEventBatchTypeRef = new TypeRef("sys", "EntityEventBatch");
const EntityUpdateTypeRef = new TypeRef("sys", "EntityUpdate");
const ExceptionTypeRef = new TypeRef("sys", "Exception");
const ExternalPropertiesReturnTypeRef = new TypeRef("sys", "ExternalPropertiesReturn");
const ExternalUserReferenceTypeRef = new TypeRef("sys", "ExternalUserReference");
const FeatureTypeRef = new TypeRef("sys", "Feature");
const FileTypeRef = new TypeRef("sys", "File");
const GeneratedIdWrapperTypeRef = new TypeRef("sys", "GeneratedIdWrapper");
const GiftCardTypeRef = new TypeRef("sys", "GiftCard");
const GiftCardCreateDataTypeRef = new TypeRef("sys", "GiftCardCreateData");
function createGiftCardCreateData(values) {
	return Object.assign(create(typeModels.GiftCardCreateData, GiftCardCreateDataTypeRef), values);
}
const GiftCardCreateReturnTypeRef = new TypeRef("sys", "GiftCardCreateReturn");
const GiftCardDeleteDataTypeRef = new TypeRef("sys", "GiftCardDeleteData");
const GiftCardGetReturnTypeRef = new TypeRef("sys", "GiftCardGetReturn");
const GiftCardOptionTypeRef = new TypeRef("sys", "GiftCardOption");
const GiftCardRedeemDataTypeRef = new TypeRef("sys", "GiftCardRedeemData");
function createGiftCardRedeemData(values) {
	return Object.assign(create(typeModels.GiftCardRedeemData, GiftCardRedeemDataTypeRef), values);
}
const GiftCardRedeemGetReturnTypeRef = new TypeRef("sys", "GiftCardRedeemGetReturn");
const GiftCardsRefTypeRef = new TypeRef("sys", "GiftCardsRef");
const GroupTypeRef = new TypeRef("sys", "Group");
const GroupInfoTypeRef = new TypeRef("sys", "GroupInfo");
function createGroupInfo(values) {
	return Object.assign(create(typeModels.GroupInfo, GroupInfoTypeRef), values);
}
const GroupKeyTypeRef = new TypeRef("sys", "GroupKey");
const GroupKeyRotationDataTypeRef = new TypeRef("sys", "GroupKeyRotationData");
function createGroupKeyRotationData(values) {
	return Object.assign(create(typeModels.GroupKeyRotationData, GroupKeyRotationDataTypeRef), values);
}
const GroupKeyRotationInfoGetOutTypeRef = new TypeRef("sys", "GroupKeyRotationInfoGetOut");
const GroupKeyRotationPostInTypeRef = new TypeRef("sys", "GroupKeyRotationPostIn");
function createGroupKeyRotationPostIn(values) {
	return Object.assign(create(typeModels.GroupKeyRotationPostIn, GroupKeyRotationPostInTypeRef), values);
}
const GroupKeyUpdateTypeRef = new TypeRef("sys", "GroupKeyUpdate");
const GroupKeyUpdateDataTypeRef = new TypeRef("sys", "GroupKeyUpdateData");
function createGroupKeyUpdateData(values) {
	return Object.assign(create(typeModels.GroupKeyUpdateData, GroupKeyUpdateDataTypeRef), values);
}
const GroupKeyUpdatesRefTypeRef = new TypeRef("sys", "GroupKeyUpdatesRef");
const GroupKeysRefTypeRef = new TypeRef("sys", "GroupKeysRef");
const GroupMemberTypeRef = new TypeRef("sys", "GroupMember");
const GroupMembershipTypeRef = new TypeRef("sys", "GroupMembership");
const GroupMembershipKeyDataTypeRef = new TypeRef("sys", "GroupMembershipKeyData");
function createGroupMembershipKeyData(values) {
	return Object.assign(create(typeModels.GroupMembershipKeyData, GroupMembershipKeyDataTypeRef), values);
}
const GroupMembershipUpdateDataTypeRef = new TypeRef("sys", "GroupMembershipUpdateData");
function createGroupMembershipUpdateData(values) {
	return Object.assign(create(typeModels.GroupMembershipUpdateData, GroupMembershipUpdateDataTypeRef), values);
}
const GroupRootTypeRef = new TypeRef("sys", "GroupRoot");
const IdTupleWrapperTypeRef = new TypeRef("sys", "IdTupleWrapper");
const InstanceSessionKeyTypeRef = new TypeRef("sys", "InstanceSessionKey");
function createInstanceSessionKey(values) {
	return Object.assign(create(typeModels.InstanceSessionKey, InstanceSessionKeyTypeRef), values);
}
const InvoiceTypeRef = new TypeRef("sys", "Invoice");
const InvoiceDataGetInTypeRef = new TypeRef("sys", "InvoiceDataGetIn");
function createInvoiceDataGetIn(values) {
	return Object.assign(create(typeModels.InvoiceDataGetIn, InvoiceDataGetInTypeRef), values);
}
const InvoiceDataGetOutTypeRef = new TypeRef("sys", "InvoiceDataGetOut");
const InvoiceDataItemTypeRef = new TypeRef("sys", "InvoiceDataItem");
const InvoiceInfoTypeRef = new TypeRef("sys", "InvoiceInfo");
const InvoiceItemTypeRef = new TypeRef("sys", "InvoiceItem");
const KeyPairTypeRef = new TypeRef("sys", "KeyPair");
function createKeyPair(values) {
	return Object.assign(create(typeModels.KeyPair, KeyPairTypeRef), values);
}
const KeyRotationTypeRef = new TypeRef("sys", "KeyRotation");
const KeyRotationsRefTypeRef = new TypeRef("sys", "KeyRotationsRef");
const LocalAdminGroupReplacementDataTypeRef = new TypeRef("sys", "LocalAdminGroupReplacementData");
function createLocalAdminGroupReplacementData(values) {
	return Object.assign(create(typeModels.LocalAdminGroupReplacementData, LocalAdminGroupReplacementDataTypeRef), values);
}
const LocalAdminRemovalPostInTypeRef = new TypeRef("sys", "LocalAdminRemovalPostIn");
function createLocalAdminRemovalPostIn(values) {
	return Object.assign(create(typeModels.LocalAdminRemovalPostIn, LocalAdminRemovalPostInTypeRef), values);
}
const LocationServiceGetReturnTypeRef = new TypeRef("sys", "LocationServiceGetReturn");
const LoginTypeRef = new TypeRef("sys", "Login");
const MailAddressAliasTypeRef = new TypeRef("sys", "MailAddressAlias");
const MailAddressAliasGetInTypeRef = new TypeRef("sys", "MailAddressAliasGetIn");
function createMailAddressAliasGetIn(values) {
	return Object.assign(create(typeModels.MailAddressAliasGetIn, MailAddressAliasGetInTypeRef), values);
}
const MailAddressAliasServiceDataTypeRef = new TypeRef("sys", "MailAddressAliasServiceData");
function createMailAddressAliasServiceData(values) {
	return Object.assign(create(typeModels.MailAddressAliasServiceData, MailAddressAliasServiceDataTypeRef), values);
}
const MailAddressAliasServiceDataDeleteTypeRef = new TypeRef("sys", "MailAddressAliasServiceDataDelete");
function createMailAddressAliasServiceDataDelete(values) {
	return Object.assign(create(typeModels.MailAddressAliasServiceDataDelete, MailAddressAliasServiceDataDeleteTypeRef), values);
}
const MailAddressAliasServiceReturnTypeRef = new TypeRef("sys", "MailAddressAliasServiceReturn");
const MailAddressAvailabilityTypeRef = new TypeRef("sys", "MailAddressAvailability");
const MailAddressToGroupTypeRef = new TypeRef("sys", "MailAddressToGroup");
const MembershipAddDataTypeRef = new TypeRef("sys", "MembershipAddData");
function createMembershipAddData(values) {
	return Object.assign(create(typeModels.MembershipAddData, MembershipAddDataTypeRef), values);
}
const MembershipPutInTypeRef = new TypeRef("sys", "MembershipPutIn");
function createMembershipPutIn(values) {
	return Object.assign(create(typeModels.MembershipPutIn, MembershipPutInTypeRef), values);
}
const MembershipRemoveDataTypeRef = new TypeRef("sys", "MembershipRemoveData");
function createMembershipRemoveData(values) {
	return Object.assign(create(typeModels.MembershipRemoveData, MembershipRemoveDataTypeRef), values);
}
const MissedNotificationTypeRef = new TypeRef("sys", "MissedNotification");
const MultipleMailAddressAvailabilityDataTypeRef = new TypeRef("sys", "MultipleMailAddressAvailabilityData");
function createMultipleMailAddressAvailabilityData(values) {
	return Object.assign(create(typeModels.MultipleMailAddressAvailabilityData, MultipleMailAddressAvailabilityDataTypeRef), values);
}
const MultipleMailAddressAvailabilityReturnTypeRef = new TypeRef("sys", "MultipleMailAddressAvailabilityReturn");
const NotificationInfoTypeRef = new TypeRef("sys", "NotificationInfo");
const NotificationMailTemplateTypeRef = new TypeRef("sys", "NotificationMailTemplate");
function createNotificationMailTemplate(values) {
	return Object.assign(create(typeModels.NotificationMailTemplate, NotificationMailTemplateTypeRef), values);
}
const NotificationSessionKeyTypeRef = new TypeRef("sys", "NotificationSessionKey");
function createNotificationSessionKey(values) {
	return Object.assign(create(typeModels.NotificationSessionKey, NotificationSessionKeyTypeRef), values);
}
const OrderProcessingAgreementTypeRef = new TypeRef("sys", "OrderProcessingAgreement");
const OtpChallengeTypeRef = new TypeRef("sys", "OtpChallenge");
const PaymentDataServiceGetDataTypeRef = new TypeRef("sys", "PaymentDataServiceGetData");
function createPaymentDataServiceGetData(values) {
	return Object.assign(create(typeModels.PaymentDataServiceGetData, PaymentDataServiceGetDataTypeRef), values);
}
const PaymentDataServiceGetReturnTypeRef = new TypeRef("sys", "PaymentDataServiceGetReturn");
const PaymentDataServicePostDataTypeRef = new TypeRef("sys", "PaymentDataServicePostData");
const PaymentDataServicePutDataTypeRef = new TypeRef("sys", "PaymentDataServicePutData");
function createPaymentDataServicePutData(values) {
	return Object.assign(create(typeModels.PaymentDataServicePutData, PaymentDataServicePutDataTypeRef), values);
}
const PaymentDataServicePutReturnTypeRef = new TypeRef("sys", "PaymentDataServicePutReturn");
const PaymentErrorInfoTypeRef = new TypeRef("sys", "PaymentErrorInfo");
const PermissionTypeRef = new TypeRef("sys", "Permission");
const PlanConfigurationTypeRef = new TypeRef("sys", "PlanConfiguration");
const PlanPricesTypeRef = new TypeRef("sys", "PlanPrices");
const PlanServiceGetOutTypeRef = new TypeRef("sys", "PlanServiceGetOut");
const PriceDataTypeRef = new TypeRef("sys", "PriceData");
const PriceItemDataTypeRef = new TypeRef("sys", "PriceItemData");
const PriceRequestDataTypeRef = new TypeRef("sys", "PriceRequestData");
function createPriceRequestData(values) {
	return Object.assign(create(typeModels.PriceRequestData, PriceRequestDataTypeRef), values);
}
const PriceServiceDataTypeRef = new TypeRef("sys", "PriceServiceData");
function createPriceServiceData(values) {
	return Object.assign(create(typeModels.PriceServiceData, PriceServiceDataTypeRef), values);
}
const PriceServiceReturnTypeRef = new TypeRef("sys", "PriceServiceReturn");
const PubEncKeyDataTypeRef = new TypeRef("sys", "PubEncKeyData");
function createPubEncKeyData(values) {
	return Object.assign(create(typeModels.PubEncKeyData, PubEncKeyDataTypeRef), values);
}
const PublicKeyGetInTypeRef = new TypeRef("sys", "PublicKeyGetIn");
function createPublicKeyGetIn(values) {
	return Object.assign(create(typeModels.PublicKeyGetIn, PublicKeyGetInTypeRef), values);
}
const PublicKeyGetOutTypeRef = new TypeRef("sys", "PublicKeyGetOut");
const PublicKeyPutInTypeRef = new TypeRef("sys", "PublicKeyPutIn");
function createPublicKeyPutIn(values) {
	return Object.assign(create(typeModels.PublicKeyPutIn, PublicKeyPutInTypeRef), values);
}
const PushIdentifierTypeRef = new TypeRef("sys", "PushIdentifier");
function createPushIdentifier(values) {
	return Object.assign(create(typeModels.PushIdentifier, PushIdentifierTypeRef), values);
}
const PushIdentifierListTypeRef = new TypeRef("sys", "PushIdentifierList");
const ReceivedGroupInvitationTypeRef = new TypeRef("sys", "ReceivedGroupInvitation");
const RecoverCodeTypeRef = new TypeRef("sys", "RecoverCode");
function createRecoverCode(values) {
	return Object.assign(create(typeModels.RecoverCode, RecoverCodeTypeRef), values);
}
const RecoverCodeDataTypeRef = new TypeRef("sys", "RecoverCodeData");
function createRecoverCodeData(values) {
	return Object.assign(create(typeModels.RecoverCodeData, RecoverCodeDataTypeRef), values);
}
const ReferralCodeGetInTypeRef = new TypeRef("sys", "ReferralCodeGetIn");
const ReferralCodePostInTypeRef = new TypeRef("sys", "ReferralCodePostIn");
function createReferralCodePostIn(values) {
	return Object.assign(create(typeModels.ReferralCodePostIn, ReferralCodePostInTypeRef), values);
}
const ReferralCodePostOutTypeRef = new TypeRef("sys", "ReferralCodePostOut");
const RegistrationCaptchaServiceDataTypeRef = new TypeRef("sys", "RegistrationCaptchaServiceData");
function createRegistrationCaptchaServiceData(values) {
	return Object.assign(create(typeModels.RegistrationCaptchaServiceData, RegistrationCaptchaServiceDataTypeRef), values);
}
const RegistrationCaptchaServiceGetDataTypeRef = new TypeRef("sys", "RegistrationCaptchaServiceGetData");
function createRegistrationCaptchaServiceGetData(values) {
	return Object.assign(create(typeModels.RegistrationCaptchaServiceGetData, RegistrationCaptchaServiceGetDataTypeRef), values);
}
const RegistrationCaptchaServiceReturnTypeRef = new TypeRef("sys", "RegistrationCaptchaServiceReturn");
const RegistrationReturnTypeRef = new TypeRef("sys", "RegistrationReturn");
const RegistrationServiceDataTypeRef = new TypeRef("sys", "RegistrationServiceData");
const RejectedSenderTypeRef = new TypeRef("sys", "RejectedSender");
const RejectedSendersRefTypeRef = new TypeRef("sys", "RejectedSendersRef");
const RepeatRuleTypeRef = new TypeRef("sys", "RepeatRule");
function createRepeatRule(values) {
	return Object.assign(create(typeModels.RepeatRule, RepeatRuleTypeRef), values);
}
const ResetFactorsDeleteDataTypeRef = new TypeRef("sys", "ResetFactorsDeleteData");
function createResetFactorsDeleteData(values) {
	return Object.assign(create(typeModels.ResetFactorsDeleteData, ResetFactorsDeleteDataTypeRef), values);
}
const ResetPasswordPostInTypeRef = new TypeRef("sys", "ResetPasswordPostIn");
function createResetPasswordPostIn(values) {
	return Object.assign(create(typeModels.ResetPasswordPostIn, ResetPasswordPostInTypeRef), values);
}
const RootInstanceTypeRef = new TypeRef("sys", "RootInstance");
const SaltDataTypeRef = new TypeRef("sys", "SaltData");
function createSaltData(values) {
	return Object.assign(create(typeModels.SaltData, SaltDataTypeRef), values);
}
const SaltReturnTypeRef = new TypeRef("sys", "SaltReturn");
const SecondFactorTypeRef = new TypeRef("sys", "SecondFactor");
function createSecondFactor(values) {
	return Object.assign(create(typeModels.SecondFactor, SecondFactorTypeRef), values);
}
const SecondFactorAuthAllowedReturnTypeRef = new TypeRef("sys", "SecondFactorAuthAllowedReturn");
const SecondFactorAuthDataTypeRef = new TypeRef("sys", "SecondFactorAuthData");
function createSecondFactorAuthData(values) {
	return Object.assign(create(typeModels.SecondFactorAuthData, SecondFactorAuthDataTypeRef), values);
}
const SecondFactorAuthDeleteDataTypeRef = new TypeRef("sys", "SecondFactorAuthDeleteData");
function createSecondFactorAuthDeleteData(values) {
	return Object.assign(create(typeModels.SecondFactorAuthDeleteData, SecondFactorAuthDeleteDataTypeRef), values);
}
const SecondFactorAuthGetDataTypeRef = new TypeRef("sys", "SecondFactorAuthGetData");
function createSecondFactorAuthGetData(values) {
	return Object.assign(create(typeModels.SecondFactorAuthGetData, SecondFactorAuthGetDataTypeRef), values);
}
const SecondFactorAuthGetReturnTypeRef = new TypeRef("sys", "SecondFactorAuthGetReturn");
const SecondFactorAuthenticationTypeRef = new TypeRef("sys", "SecondFactorAuthentication");
const SendRegistrationCodeDataTypeRef = new TypeRef("sys", "SendRegistrationCodeData");
const SendRegistrationCodeReturnTypeRef = new TypeRef("sys", "SendRegistrationCodeReturn");
const SentGroupInvitationTypeRef = new TypeRef("sys", "SentGroupInvitation");
const SessionTypeRef = new TypeRef("sys", "Session");
const SignOrderProcessingAgreementDataTypeRef = new TypeRef("sys", "SignOrderProcessingAgreementData");
function createSignOrderProcessingAgreementData(values) {
	return Object.assign(create(typeModels.SignOrderProcessingAgreementData, SignOrderProcessingAgreementDataTypeRef), values);
}
const SseConnectDataTypeRef = new TypeRef("sys", "SseConnectData");
const StringConfigValueTypeRef = new TypeRef("sys", "StringConfigValue");
const StringWrapperTypeRef = new TypeRef("sys", "StringWrapper");
function createStringWrapper(values) {
	return Object.assign(create(typeModels.StringWrapper, StringWrapperTypeRef), values);
}
const SurveyDataTypeRef = new TypeRef("sys", "SurveyData");
function createSurveyData(values) {
	return Object.assign(create(typeModels.SurveyData, SurveyDataTypeRef), values);
}
const SwitchAccountTypePostInTypeRef = new TypeRef("sys", "SwitchAccountTypePostIn");
function createSwitchAccountTypePostIn(values) {
	return Object.assign(create(typeModels.SwitchAccountTypePostIn, SwitchAccountTypePostInTypeRef), values);
}
const SystemKeysReturnTypeRef = new TypeRef("sys", "SystemKeysReturn");
const TakeOverDeletedAddressDataTypeRef = new TypeRef("sys", "TakeOverDeletedAddressData");
function createTakeOverDeletedAddressData(values) {
	return Object.assign(create(typeModels.TakeOverDeletedAddressData, TakeOverDeletedAddressDataTypeRef), values);
}
const TypeInfoTypeRef = new TypeRef("sys", "TypeInfo");
const U2fChallengeTypeRef = new TypeRef("sys", "U2fChallenge");
const U2fKeyTypeRef = new TypeRef("sys", "U2fKey");
const U2fRegisteredDeviceTypeRef = new TypeRef("sys", "U2fRegisteredDevice");
function createU2fRegisteredDevice(values) {
	return Object.assign(create(typeModels.U2fRegisteredDevice, U2fRegisteredDeviceTypeRef), values);
}
const U2fResponseDataTypeRef = new TypeRef("sys", "U2fResponseData");
const UpdatePermissionKeyDataTypeRef = new TypeRef("sys", "UpdatePermissionKeyData");
function createUpdatePermissionKeyData(values) {
	return Object.assign(create(typeModels.UpdatePermissionKeyData, UpdatePermissionKeyDataTypeRef), values);
}
const UpdateSessionKeysPostInTypeRef = new TypeRef("sys", "UpdateSessionKeysPostIn");
function createUpdateSessionKeysPostIn(values) {
	return Object.assign(create(typeModels.UpdateSessionKeysPostIn, UpdateSessionKeysPostInTypeRef), values);
}
const UpgradePriceServiceDataTypeRef = new TypeRef("sys", "UpgradePriceServiceData");
function createUpgradePriceServiceData(values) {
	return Object.assign(create(typeModels.UpgradePriceServiceData, UpgradePriceServiceDataTypeRef), values);
}
const UpgradePriceServiceReturnTypeRef = new TypeRef("sys", "UpgradePriceServiceReturn");
const UserTypeRef = new TypeRef("sys", "User");
const UserAlarmInfoTypeRef = new TypeRef("sys", "UserAlarmInfo");
function createUserAlarmInfo(values) {
	return Object.assign(create(typeModels.UserAlarmInfo, UserAlarmInfoTypeRef), values);
}
const UserAlarmInfoListTypeTypeRef = new TypeRef("sys", "UserAlarmInfoListType");
const UserAreaGroupsTypeRef = new TypeRef("sys", "UserAreaGroups");
const UserAuthenticationTypeRef = new TypeRef("sys", "UserAuthentication");
const UserDataDeleteTypeRef = new TypeRef("sys", "UserDataDelete");
function createUserDataDelete(values) {
	return Object.assign(create(typeModels.UserDataDelete, UserDataDeleteTypeRef), values);
}
const UserExternalAuthInfoTypeRef = new TypeRef("sys", "UserExternalAuthInfo");
const UserGroupKeyDistributionTypeRef = new TypeRef("sys", "UserGroupKeyDistribution");
const UserGroupKeyRotationDataTypeRef = new TypeRef("sys", "UserGroupKeyRotationData");
function createUserGroupKeyRotationData(values) {
	return Object.assign(create(typeModels.UserGroupKeyRotationData, UserGroupKeyRotationDataTypeRef), values);
}
const UserGroupKeyRotationPostInTypeRef = new TypeRef("sys", "UserGroupKeyRotationPostIn");
function createUserGroupKeyRotationPostIn(values) {
	return Object.assign(create(typeModels.UserGroupKeyRotationPostIn, UserGroupKeyRotationPostInTypeRef), values);
}
const UserGroupRootTypeRef = new TypeRef("sys", "UserGroupRoot");
const VariableExternalAuthInfoTypeRef = new TypeRef("sys", "VariableExternalAuthInfo");
const VerifierTokenServiceInTypeRef = new TypeRef("sys", "VerifierTokenServiceIn");
function createVerifierTokenServiceIn(values) {
	return Object.assign(create(typeModels.VerifierTokenServiceIn, VerifierTokenServiceInTypeRef), values);
}
const VerifierTokenServiceOutTypeRef = new TypeRef("sys", "VerifierTokenServiceOut");
const VerifyRegistrationCodeDataTypeRef = new TypeRef("sys", "VerifyRegistrationCodeData");
const VersionTypeRef = new TypeRef("sys", "Version");
const VersionDataTypeRef = new TypeRef("sys", "VersionData");
const VersionInfoTypeRef = new TypeRef("sys", "VersionInfo");
const VersionReturnTypeRef = new TypeRef("sys", "VersionReturn");
const WebauthnResponseDataTypeRef = new TypeRef("sys", "WebauthnResponseData");
function createWebauthnResponseData(values) {
	return Object.assign(create(typeModels.WebauthnResponseData, WebauthnResponseDataTypeRef), values);
}
const WebsocketCounterDataTypeRef = new TypeRef("sys", "WebsocketCounterData");
const WebsocketCounterValueTypeRef = new TypeRef("sys", "WebsocketCounterValue");
const WebsocketEntityDataTypeRef = new TypeRef("sys", "WebsocketEntityData");
const WebsocketLeaderStatusTypeRef = new TypeRef("sys", "WebsocketLeaderStatus");
function createWebsocketLeaderStatus(values) {
	return Object.assign(create(typeModels.WebsocketLeaderStatus, WebsocketLeaderStatusTypeRef), values);
}
const WhitelabelChildTypeRef = new TypeRef("sys", "WhitelabelChild");
const WhitelabelChildrenRefTypeRef = new TypeRef("sys", "WhitelabelChildrenRef");
const WhitelabelConfigTypeRef = new TypeRef("sys", "WhitelabelConfig");
const WhitelabelParentTypeRef = new TypeRef("sys", "WhitelabelParent");

//#endregion
export { AccountingInfoTypeRef, AdminGroupKeyRotationPostInTypeRef, AdministratedGroupTypeRef, AffiliatePartnerKpiServiceGetOutTypeRef, AlarmServicePostTypeRef, AppStoreSubscriptionGetInTypeRef, AppStoreSubscriptionGetOutTypeRef, AuditLogEntryTypeRef, AutoLoginDataDeleteTypeRef, AutoLoginDataGetTypeRef, AutoLoginDataReturnTypeRef, AutoLoginPostReturnTypeRef, BookingTypeRef, BrandingDomainDataTypeRef, BrandingDomainDeleteDataTypeRef, BrandingDomainGetReturnTypeRef, BucketKeyTypeRef, BucketPermissionTypeRef, ChangeKdfPostInTypeRef, ChangePasswordPostInTypeRef, CloseSessionServicePostTypeRef, CreateCustomerServerPropertiesDataTypeRef, CreateCustomerServerPropertiesReturnTypeRef, CreateSessionDataTypeRef, CreateSessionReturnTypeRef, CustomDomainCheckGetInTypeRef, CustomDomainCheckGetOutTypeRef, CustomDomainDataTypeRef, CustomDomainReturnTypeRef, CustomerAccountTerminationPostInTypeRef, CustomerAccountTerminationPostOutTypeRef, CustomerAccountTerminationRequestTypeRef, CustomerInfoTypeRef, CustomerPropertiesTypeRef, CustomerServerPropertiesTypeRef, CustomerTypeRef, DebitServicePutDataTypeRef, DeleteCustomerDataTypeRef, DomainMailAddressAvailabilityDataTypeRef, DomainMailAddressAvailabilityReturnTypeRef, EntityEventBatchTypeRef, ExternalPropertiesReturnTypeRef, ExternalUserReferenceTypeRef, GiftCardCreateDataTypeRef, GiftCardCreateReturnTypeRef, GiftCardDeleteDataTypeRef, GiftCardGetReturnTypeRef, GiftCardRedeemDataTypeRef, GiftCardRedeemGetReturnTypeRef, GiftCardTypeRef, GroupInfoTypeRef, GroupKeyRotationInfoGetOutTypeRef, GroupKeyRotationPostInTypeRef, GroupKeyTypeRef, GroupKeyUpdateTypeRef, GroupMemberTypeRef, GroupRootTypeRef, GroupTypeRef, InvoiceDataGetInTypeRef, InvoiceDataGetOutTypeRef, InvoiceInfoTypeRef, InvoiceTypeRef, KeyRotationTypeRef, LocalAdminRemovalPostInTypeRef, LocationServiceGetReturnTypeRef, MailAddressAliasGetInTypeRef, MailAddressAliasServiceDataDeleteTypeRef, MailAddressAliasServiceDataTypeRef, MailAddressAliasServiceReturnTypeRef, MembershipAddDataTypeRef, MembershipPutInTypeRef, MembershipRemoveDataTypeRef, MissedNotificationTypeRef, MultipleMailAddressAvailabilityDataTypeRef, MultipleMailAddressAvailabilityReturnTypeRef, OrderProcessingAgreementTypeRef, PaymentDataServiceGetDataTypeRef, PaymentDataServiceGetReturnTypeRef, PaymentDataServicePostDataTypeRef, PaymentDataServicePutDataTypeRef, PaymentDataServicePutReturnTypeRef, PermissionTypeRef, PlanServiceGetOutTypeRef, PriceServiceDataTypeRef, PriceServiceReturnTypeRef, PublicKeyGetInTypeRef, PublicKeyGetOutTypeRef, PublicKeyPutInTypeRef, PushIdentifierTypeRef, ReceivedGroupInvitationTypeRef, RecoverCodeTypeRef, ReferralCodeGetInTypeRef, ReferralCodePostInTypeRef, ReferralCodePostOutTypeRef, RegistrationCaptchaServiceDataTypeRef, RegistrationCaptchaServiceGetDataTypeRef, RegistrationCaptchaServiceReturnTypeRef, RegistrationReturnTypeRef, RegistrationServiceDataTypeRef, RejectedSenderTypeRef, ResetFactorsDeleteDataTypeRef, ResetPasswordPostInTypeRef, RootInstanceTypeRef, SaltDataTypeRef, SaltReturnTypeRef, SecondFactorAuthAllowedReturnTypeRef, SecondFactorAuthDataTypeRef, SecondFactorAuthDeleteDataTypeRef, SecondFactorAuthGetDataTypeRef, SecondFactorAuthGetReturnTypeRef, SecondFactorTypeRef, SentGroupInvitationTypeRef, SessionTypeRef, SignOrderProcessingAgreementDataTypeRef, SwitchAccountTypePostInTypeRef, SystemKeysReturnTypeRef, TakeOverDeletedAddressDataTypeRef, UpdatePermissionKeyDataTypeRef, UpdateSessionKeysPostInTypeRef, UpgradePriceServiceDataTypeRef, UpgradePriceServiceReturnTypeRef, UserAlarmInfoTypeRef, UserDataDeleteTypeRef, UserGroupKeyDistributionTypeRef, UserGroupKeyRotationPostInTypeRef, UserGroupRootTypeRef, UserTypeRef, VerifierTokenServiceInTypeRef, VerifierTokenServiceOutTypeRef, VersionDataTypeRef, VersionReturnTypeRef, WebsocketCounterDataTypeRef, WebsocketEntityDataTypeRef, WebsocketLeaderStatusTypeRef, WhitelabelChildTypeRef, WhitelabelConfigTypeRef, createAdminGroupKeyAuthenticationData, createAdminGroupKeyRotationPostIn, createAlarmInfo, createAlarmNotification, createAlarmServicePost, createAppStoreSubscriptionGetIn, createBlobReferenceTokenWrapper, createBrandingDomainData, createBrandingDomainDeleteData, createCalendarAdvancedRepeatRule, createCalendarEventRef, createChangeKdfPostIn, createChangePasswordPostIn, createCloseSessionServicePost, createCreateCustomerServerPropertiesData, createCreateSessionData, createCreditCard, createCustomDomainCheckGetIn, createCustomDomainData, createCustomerAccountTerminationPostIn, createCustomerInfo, createCustomerProperties, createDateWrapper, createDebitServicePutData, createDeleteCustomerData, createDnsRecord, createDomainMailAddressAvailabilityData, createEmailSenderListElement, createGiftCardCreateData, createGiftCardRedeemData, createGroupInfo, createGroupKeyRotationData, createGroupKeyRotationPostIn, createGroupKeyUpdateData, createGroupMembershipKeyData, createGroupMembershipUpdateData, createInstanceSessionKey, createInvoiceDataGetIn, createKeyPair, createLocalAdminGroupReplacementData, createLocalAdminRemovalPostIn, createMailAddressAliasGetIn, createMailAddressAliasServiceData, createMailAddressAliasServiceDataDelete, createMembershipAddData, createMembershipPutIn, createMembershipRemoveData, createMultipleMailAddressAvailabilityData, createNotificationMailTemplate, createNotificationSessionKey, createPaymentDataServiceGetData, createPaymentDataServicePutData, createPriceRequestData, createPriceServiceData, createPubEncKeyData, createPublicKeyGetIn, createPublicKeyPutIn, createPushIdentifier, createRecoverCode, createRecoverCodeData, createReferralCodePostIn, createRegistrationCaptchaServiceData, createRegistrationCaptchaServiceGetData, createRepeatRule, createResetFactorsDeleteData, createResetPasswordPostIn, createSaltData, createSecondFactor, createSecondFactorAuthData, createSecondFactorAuthDeleteData, createSecondFactorAuthGetData, createSignOrderProcessingAgreementData, createStringWrapper, createSurveyData, createSwitchAccountTypePostIn, createTakeOverDeletedAddressData, createU2fRegisteredDevice, createUpdatePermissionKeyData, createUpdateSessionKeysPostIn, createUpgradePriceServiceData, createUserAlarmInfo, createUserDataDelete, createUserGroupKeyRotationData, createUserGroupKeyRotationPostIn, createVerifierTokenServiceIn, createWebauthnResponseData, createWebsocketLeaderStatus };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,