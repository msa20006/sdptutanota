import { mithril_default } from "./mithril-chunk.js";
import { DefaultAnimationTime, styles } from "./styles-chunk.js";
import { getTimeZone } from "./CalendarUtils-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { formatEventDuration, getClientOnlyColors, getDisplayEventTitle, getEventColor, getGroupColors } from "./CalendarGuiUtils-chunk.js";
import { SelectableRowContainer } from "./SelectableRowContainer-chunk.js";

//#region src/calendar-app/calendar/gui/CalendarRow.ts
var CalendarRow = class {
	top;
	entity;
	colors;
	selectionSetter;
	calendarIndicatorDom;
	summaryDom;
	durationDom;
	constructor(domElement) {
		this.domElement = domElement;
		this.top = 0;
		this.entity = null;
		const clientOnlyColors = getClientOnlyColors(locator.logins.getUserController().userId, locator.deviceConfig.getClientOnlyCalendars());
		const groupColors = getGroupColors(locator.logins.getUserController().userSettingsGroupRoot);
		for (let [calendarId, color] of clientOnlyColors.entries()) groupColors.set(calendarId, color);
		this.colors = groupColors;
	}
	update(event, selected, isInMultiSelect) {
		this.entity = event;
		this.summaryDom.innerText = getDisplayEventTitle(event.summary);
		this.calendarIndicatorDom.style.backgroundColor = `#${getEventColor(event, this.colors)}`;
		this.durationDom.innerText = formatEventDuration(this.entity, getTimeZone(), false);
		this.selectionSetter(selected, isInMultiSelect);
	}
	/**
	* Only the structure is managed by mithril. We set all contents on our own (see update) in order to avoid the vdom overhead (not negligible on mobiles)
	*/
	render() {
		return mithril_default(SelectableRowContainer, { onSelectedChangeRef: (changer) => {
			this.selectionSetter = changer;
		} }, mithril_default(".flex.items-center.gap-vpad.click.border-radius", {
			class: (styles.isDesktopLayout() ? "" : "state-bg") + "limit-width full-width",
			style: { transition: `background ${DefaultAnimationTime}ms` }
		}, [mithril_default("", {
			style: {
				minWidth: "16px",
				minHeight: "16px",
				borderRadius: "50%"
			},
			oncreate: (vnode) => {
				this.calendarIndicatorDom = vnode.dom;
			}
		}), mithril_default(".flex.col", { class: "min-width-0" }, [mithril_default("p.b.m-0.badge-line-height", {
			class: "text-ellipsis",
			oncreate: (vnode) => {
				this.summaryDom = vnode.dom;
			}
		}), mithril_default(".smaller", { oncreate: (vnode) => {
			this.durationDom = vnode.dom;
		} })])]));
	}
};
var KindaCalendarRow = class {
	cr;
	domElement;
	entity = null;
	constructor(dom) {
		this.cr = new CalendarRow(dom);
		this.domElement = dom;
		mithril_default.render(dom, this.cr.render());
	}
	update(item, selected, isInMultiSelect) {
		this.entity = item;
		this.cr.update(item, selected, isInMultiSelect);
	}
	render() {
		return this.cr.render();
	}
};

//#endregion
export { KindaCalendarRow };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FsZW5kYXJSb3ctY2h1bmsuanMiLCJuYW1lcyI6WyJkb21FbGVtZW50OiBIVE1MRWxlbWVudCIsImV2ZW50OiBDYWxlbmRhckV2ZW50Iiwic2VsZWN0ZWQ6IGJvb2xlYW4iLCJpc0luTXVsdGlTZWxlY3Q6IGJvb2xlYW4iLCJ2bm9kZTogVm5vZGVET00iLCJkb206IEhUTUxFbGVtZW50IiwiaXRlbTogQ2FsZW5kYXJFdmVudCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWxlbmRhci1hcHAvY2FsZW5kYXIvZ3VpL0NhbGVuZGFyUm93LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2FsZW5kYXJFdmVudCB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vYXBpL2VudGl0aWVzL3R1dGFub3RhL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IGxvY2F0b3IgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2FwaS9tYWluL0NvbW1vbkxvY2F0b3IuanNcIlxuaW1wb3J0IG0sIHsgQ2hpbGRyZW4sIFZub2RlRE9NIH0gZnJvbSBcIm1pdGhyaWxcIlxuXG5pbXBvcnQgeyBTZWxlY3RhYmxlUm93Q29udGFpbmVyLCBTZWxlY3RhYmxlUm93Q29udGFpbmVyQXR0cnMsIFNlbGVjdGFibGVSb3dTZWxlY3RlZFNldHRlciB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vZ3VpL1NlbGVjdGFibGVSb3dDb250YWluZXIuanNcIlxuaW1wb3J0IHsgVmlydHVhbFJvdyB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vZ3VpL2Jhc2UvTGlzdFV0aWxzLmpzXCJcbmltcG9ydCB7IGdldFRpbWVab25lIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9jYWxlbmRhci9kYXRlL0NhbGVuZGFyVXRpbHMuanNcIlxuaW1wb3J0IHsgVmlld0hvbGRlciB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vZ3VpL2Jhc2UvTGlzdC5qc1wiXG5pbXBvcnQgeyBzdHlsZXMgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2d1aS9zdHlsZXMuanNcIlxuaW1wb3J0IHsgRGVmYXVsdEFuaW1hdGlvblRpbWUgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2d1aS9hbmltYXRpb24vQW5pbWF0aW9ucy5qc1wiXG5cbmltcG9ydCB7IGZvcm1hdEV2ZW50RHVyYXRpb24sIGdldENsaWVudE9ubHlDb2xvcnMsIGdldERpc3BsYXlFdmVudFRpdGxlLCBnZXRFdmVudENvbG9yLCBnZXRHcm91cENvbG9ycyB9IGZyb20gXCIuL0NhbGVuZGFyR3VpVXRpbHMuanNcIlxuaW1wb3J0IHsgR3JvdXBDb2xvcnMgfSBmcm9tIFwiLi4vdmlldy9DYWxlbmRhclZpZXcuanNcIlxuXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJSb3cgaW1wbGVtZW50cyBWaXJ0dWFsUm93PENhbGVuZGFyRXZlbnQ+IHtcblx0dG9wOiBudW1iZXJcblxuXHRlbnRpdHk6IENhbGVuZGFyRXZlbnQgfCBudWxsXG5cdGNvbG9yczogR3JvdXBDb2xvcnNcblxuXHRwcml2YXRlIHNlbGVjdGlvblNldHRlciE6IFNlbGVjdGFibGVSb3dTZWxlY3RlZFNldHRlclxuXHRwcml2YXRlIGNhbGVuZGFySW5kaWNhdG9yRG9tITogSFRNTEVsZW1lbnRcblx0cHJpdmF0ZSBzdW1tYXJ5RG9tITogSFRNTEVsZW1lbnRcblx0cHJpdmF0ZSBkdXJhdGlvbkRvbSE6IEhUTUxFbGVtZW50XG5cblx0Y29uc3RydWN0b3IocmVhZG9ubHkgZG9tRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcblx0XHR0aGlzLnRvcCA9IDBcblx0XHR0aGlzLmVudGl0eSA9IG51bGxcblxuXHRcdGNvbnN0IGNsaWVudE9ubHlDb2xvcnMgPSBnZXRDbGllbnRPbmx5Q29sb3JzKGxvY2F0b3IubG9naW5zLmdldFVzZXJDb250cm9sbGVyKCkudXNlcklkLCBsb2NhdG9yLmRldmljZUNvbmZpZy5nZXRDbGllbnRPbmx5Q2FsZW5kYXJzKCkpXG5cdFx0Y29uc3QgZ3JvdXBDb2xvcnMgPSBnZXRHcm91cENvbG9ycyhsb2NhdG9yLmxvZ2lucy5nZXRVc2VyQ29udHJvbGxlcigpLnVzZXJTZXR0aW5nc0dyb3VwUm9vdClcblx0XHRmb3IgKGxldCBbY2FsZW5kYXJJZCwgY29sb3JdIG9mIGNsaWVudE9ubHlDb2xvcnMuZW50cmllcygpKSB7XG5cdFx0XHRncm91cENvbG9ycy5zZXQoY2FsZW5kYXJJZCwgY29sb3IpXG5cdFx0fVxuXG5cdFx0dGhpcy5jb2xvcnMgPSBncm91cENvbG9yc1xuXHR9XG5cblx0dXBkYXRlKGV2ZW50OiBDYWxlbmRhckV2ZW50LCBzZWxlY3RlZDogYm9vbGVhbiwgaXNJbk11bHRpU2VsZWN0OiBib29sZWFuKTogdm9pZCB7XG5cdFx0dGhpcy5lbnRpdHkgPSBldmVudFxuXHRcdHRoaXMuc3VtbWFyeURvbS5pbm5lclRleHQgPSBnZXREaXNwbGF5RXZlbnRUaXRsZShldmVudC5zdW1tYXJ5KVxuXHRcdHRoaXMuY2FsZW5kYXJJbmRpY2F0b3JEb20uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYCMke2dldEV2ZW50Q29sb3IoZXZlbnQsIHRoaXMuY29sb3JzKX1gXG5cdFx0dGhpcy5kdXJhdGlvbkRvbS5pbm5lclRleHQgPSBmb3JtYXRFdmVudER1cmF0aW9uKHRoaXMuZW50aXR5LCBnZXRUaW1lWm9uZSgpLCBmYWxzZSlcblxuXHRcdHRoaXMuc2VsZWN0aW9uU2V0dGVyKHNlbGVjdGVkLCBpc0luTXVsdGlTZWxlY3QpXG5cdH1cblxuXHQvKipcblx0ICogT25seSB0aGUgc3RydWN0dXJlIGlzIG1hbmFnZWQgYnkgbWl0aHJpbC4gV2Ugc2V0IGFsbCBjb250ZW50cyBvbiBvdXIgb3duIChzZWUgdXBkYXRlKSBpbiBvcmRlciB0byBhdm9pZCB0aGUgdmRvbSBvdmVyaGVhZCAobm90IG5lZ2xpZ2libGUgb24gbW9iaWxlcylcblx0ICovXG5cdHJlbmRlcigpOiBDaGlsZHJlbiB7XG5cdFx0cmV0dXJuIG0oXG5cdFx0XHRTZWxlY3RhYmxlUm93Q29udGFpbmVyLFxuXHRcdFx0e1xuXHRcdFx0XHRvblNlbGVjdGVkQ2hhbmdlUmVmOiAoY2hhbmdlcikgPT4ge1xuXHRcdFx0XHRcdHRoaXMuc2VsZWN0aW9uU2V0dGVyID0gY2hhbmdlclxuXHRcdFx0XHR9LFxuXHRcdFx0fSBzYXRpc2ZpZXMgU2VsZWN0YWJsZVJvd0NvbnRhaW5lckF0dHJzLFxuXHRcdFx0bShcblx0XHRcdFx0XCIuZmxleC5pdGVtcy1jZW50ZXIuZ2FwLXZwYWQuY2xpY2suYm9yZGVyLXJhZGl1c1wiLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y2xhc3M6IChzdHlsZXMuaXNEZXNrdG9wTGF5b3V0KCkgPyBcIlwiIDogXCJzdGF0ZS1iZ1wiKSArIFwibGltaXQtd2lkdGggZnVsbC13aWR0aFwiLFxuXHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uOiBgYmFja2dyb3VuZCAke0RlZmF1bHRBbmltYXRpb25UaW1lfW1zYCxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRbXG5cdFx0XHRcdFx0bShcIlwiLCB7XG5cdFx0XHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdFx0XHRtaW5XaWR0aDogXCIxNnB4XCIsXG5cdFx0XHRcdFx0XHRcdG1pbkhlaWdodDogXCIxNnB4XCIsXG5cdFx0XHRcdFx0XHRcdGJvcmRlclJhZGl1czogXCI1MCVcIixcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRvbmNyZWF0ZTogKHZub2RlOiBWbm9kZURPTSkgPT4ge1xuXHRcdFx0XHRcdFx0XHR0aGlzLmNhbGVuZGFySW5kaWNhdG9yRG9tID0gdm5vZGUuZG9tIGFzIEhUTUxFbGVtZW50XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdG0oXCIuZmxleC5jb2xcIiwgeyBjbGFzczogXCJtaW4td2lkdGgtMFwiIH0sIFtcblx0XHRcdFx0XHRcdG0oXCJwLmIubS0wLmJhZGdlLWxpbmUtaGVpZ2h0XCIsIHtcblx0XHRcdFx0XHRcdFx0Y2xhc3M6IFwidGV4dC1lbGxpcHNpc1wiLFxuXHRcdFx0XHRcdFx0XHRvbmNyZWF0ZTogKHZub2RlOiBWbm9kZURPTSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc3VtbWFyeURvbSA9IHZub2RlLmRvbSBhcyBIVE1MRWxlbWVudFxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0XHRtKFwiLnNtYWxsZXJcIiwge1xuXHRcdFx0XHRcdFx0XHRvbmNyZWF0ZTogKHZub2RlOiBWbm9kZURPTSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuZHVyYXRpb25Eb20gPSB2bm9kZS5kb20gYXMgSFRNTEVsZW1lbnRcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdF0pLFxuXHRcdFx0XHRdLFxuXHRcdFx0KSxcblx0XHQpXG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIEtpbmRhQ2FsZW5kYXJSb3cgaW1wbGVtZW50cyBWaWV3SG9sZGVyPENhbGVuZGFyRXZlbnQ+IHtcblx0cmVhZG9ubHkgY3I6IENhbGVuZGFyUm93XG5cdGRvbUVsZW1lbnQ6IEhUTUxFbGVtZW50XG5cdGVudGl0eTogQ2FsZW5kYXJFdmVudCB8IG51bGwgPSBudWxsXG5cblx0Y29uc3RydWN0b3IoZG9tOiBIVE1MRWxlbWVudCkge1xuXHRcdHRoaXMuY3IgPSBuZXcgQ2FsZW5kYXJSb3coZG9tKVxuXHRcdHRoaXMuZG9tRWxlbWVudCA9IGRvbVxuXHRcdG0ucmVuZGVyKGRvbSwgdGhpcy5jci5yZW5kZXIoKSlcblx0fVxuXG5cdHVwZGF0ZShpdGVtOiBDYWxlbmRhckV2ZW50LCBzZWxlY3RlZDogYm9vbGVhbiwgaXNJbk11bHRpU2VsZWN0OiBib29sZWFuKSB7XG5cdFx0dGhpcy5lbnRpdHkgPSBpdGVtXG5cdFx0dGhpcy5jci51cGRhdGUoaXRlbSwgc2VsZWN0ZWQsIGlzSW5NdWx0aVNlbGVjdClcblx0fVxuXG5cdHJlbmRlcigpOiBDaGlsZHJlbiB7XG5cdFx0cmV0dXJuIHRoaXMuY3IucmVuZGVyKClcblx0fVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztJQWNhLGNBQU4sTUFBdUQ7Q0FDN0Q7Q0FFQTtDQUNBO0NBRUEsQUFBUTtDQUNSLEFBQVE7Q0FDUixBQUFRO0NBQ1IsQUFBUTtDQUVSLFlBQXFCQSxZQUF5QjtFQTJGOUMsS0EzRnFCO0FBQ3BCLE9BQUssTUFBTTtBQUNYLE9BQUssU0FBUztFQUVkLE1BQU0sbUJBQW1CLG9CQUFvQixRQUFRLE9BQU8sbUJBQW1CLENBQUMsUUFBUSxRQUFRLGFBQWEsd0JBQXdCLENBQUM7RUFDdEksTUFBTSxjQUFjLGVBQWUsUUFBUSxPQUFPLG1CQUFtQixDQUFDLHNCQUFzQjtBQUM1RixPQUFLLElBQUksQ0FBQyxZQUFZLE1BQU0sSUFBSSxpQkFBaUIsU0FBUyxDQUN6RCxhQUFZLElBQUksWUFBWSxNQUFNO0FBR25DLE9BQUssU0FBUztDQUNkO0NBRUQsT0FBT0MsT0FBc0JDLFVBQW1CQyxpQkFBZ0M7QUFDL0UsT0FBSyxTQUFTO0FBQ2QsT0FBSyxXQUFXLFlBQVkscUJBQXFCLE1BQU0sUUFBUTtBQUMvRCxPQUFLLHFCQUFxQixNQUFNLG1CQUFtQixHQUFHLGNBQWMsT0FBTyxLQUFLLE9BQU8sQ0FBQztBQUN4RixPQUFLLFlBQVksWUFBWSxvQkFBb0IsS0FBSyxRQUFRLGFBQWEsRUFBRSxNQUFNO0FBRW5GLE9BQUssZ0JBQWdCLFVBQVUsZ0JBQWdCO0NBQy9DOzs7O0NBS0QsU0FBbUI7QUFDbEIsU0FBTyxnQkFDTix3QkFDQSxFQUNDLHFCQUFxQixDQUFDLFlBQVk7QUFDakMsUUFBSyxrQkFBa0I7RUFDdkIsRUFDRCxHQUNELGdCQUNDLG1EQUNBO0dBQ0MsUUFBUSxPQUFPLGlCQUFpQixHQUFHLEtBQUssY0FBYztHQUN0RCxPQUFPLEVBQ04sYUFBYSxhQUFhLHFCQUFxQixJQUMvQztFQUNELEdBQ0QsQ0FDQyxnQkFBRSxJQUFJO0dBQ0wsT0FBTztJQUNOLFVBQVU7SUFDVixXQUFXO0lBQ1gsY0FBYztHQUNkO0dBQ0QsVUFBVSxDQUFDQyxVQUFvQjtBQUM5QixTQUFLLHVCQUF1QixNQUFNO0dBQ2xDO0VBQ0QsRUFBQyxFQUNGLGdCQUFFLGFBQWEsRUFBRSxPQUFPLGNBQWUsR0FBRSxDQUN4QyxnQkFBRSw2QkFBNkI7R0FDOUIsT0FBTztHQUNQLFVBQVUsQ0FBQ0EsVUFBb0I7QUFDOUIsU0FBSyxhQUFhLE1BQU07R0FDeEI7RUFDRCxFQUFDLEVBQ0YsZ0JBQUUsWUFBWSxFQUNiLFVBQVUsQ0FBQ0EsVUFBb0I7QUFDOUIsUUFBSyxjQUFjLE1BQU07RUFDekIsRUFDRCxFQUFDLEFBQ0YsRUFBQyxBQUNGLEVBQ0QsQ0FDRDtDQUNEO0FBQ0Q7SUFFWSxtQkFBTixNQUE0RDtDQUNsRSxBQUFTO0NBQ1Q7Q0FDQSxTQUErQjtDQUUvQixZQUFZQyxLQUFrQjtBQUM3QixPQUFLLEtBQUssSUFBSSxZQUFZO0FBQzFCLE9BQUssYUFBYTtBQUNsQixrQkFBRSxPQUFPLEtBQUssS0FBSyxHQUFHLFFBQVEsQ0FBQztDQUMvQjtDQUVELE9BQU9DLE1BQXFCSixVQUFtQkMsaUJBQTBCO0FBQ3hFLE9BQUssU0FBUztBQUNkLE9BQUssR0FBRyxPQUFPLE1BQU0sVUFBVSxnQkFBZ0I7Q0FDL0M7Q0FFRCxTQUFtQjtBQUNsQixTQUFPLEtBQUssR0FBRyxRQUFRO0NBQ3ZCO0FBQ0QifQ==