import { base64ExtToBase64, base64ToBase64Ext, base64ToBase64Url, base64ToUint8Array, base64UrlToBase64, clone, compare, hexToBase64, isSameTypeRef, pad, repeat, stringToUtf8Uint8Array, uint8ArrayToBase64, utf8Uint8ArrayToString } from "./dist2-chunk.js";

//#region src/common/api/common/EntityConstants.js
const Type = Object.freeze({
	Element: "ELEMENT_TYPE",
	ListElement: "LIST_ELEMENT_TYPE",
	DataTransfer: "DATA_TRANSFER_TYPE",
	Aggregated: "AGGREGATED_TYPE",
	BlobElement: "BLOB_ELEMENT_TYPE"
});
const Cardinality = Object.freeze({
	ZeroOrOne: "ZeroOrOne",
	Any: "Any",
	One: "One"
});
const AssociationType = Object.freeze({
	ElementAssociation: "ELEMENT_ASSOCIATION",
	ListAssociation: "LIST_ASSOCIATION",
	ListElementAssociationGenerated: "LIST_ELEMENT_ASSOCIATION_GENERATED",
	Aggregation: "AGGREGATION",
	BlobElementAssociation: "BLOB_ELEMENT_ASSOCIATION",
	ListElementAssociationCustom: "LIST_ELEMENT_ASSOCIATION_CUSTOM"
});
const ValueType = Object.freeze({
	String: "String",
	Number: "Number",
	Bytes: "Bytes",
	Date: "Date",
	Boolean: "Boolean",
	GeneratedId: "GeneratedId",
	CustomId: "CustomId",
	CompressedString: "CompressedString"
});
const ResourceType = Object.freeze({
	Persistence: "Persistence",
	Service: "Service"
});

//#endregion
//#region src/common/api/common/utils/EntityUtils.ts
const GENERATED_MAX_ID = "zzzzzzzzzzzz";
const GENERATED_MIN_ID = "------------";
const GENERATED_ID_BYTES_LENGTH = 9;
const MAIL_SET_ENTRY_ID_BYTE_LENGTH = 13;
const CUSTOM_MIN_ID = "";
const CUSTOM_MAX_ID = repeat("_", 340);
const RANGE_ITEM_LIMIT = 1e3;
const LOAD_MULTIPLE_LIMIT = 100;
const POST_MULTIPLE_LIMIT = 100;
function firstBiggerThanSecond(firstId, secondId, typeModel) {
	if (typeModel?.values._id.type === ValueType.CustomId) return firstBiggerThanSecondCustomId(firstId, secondId);
else if (firstId.length > secondId.length) return true;
else if (secondId.length > firstId.length) return false;
else return firstId > secondId;
}
function firstBiggerThanSecondCustomId(firstId, secondId) {
	return compare(customIdToUint8array(firstId), customIdToUint8array(secondId)) === 1;
}
function customIdToUint8array(id) {
	if (id === "") return new Uint8Array();
	return base64ToUint8Array(base64UrlToBase64(id));
}
function compareNewestFirst(id1, id2) {
	let firstId = id1 instanceof Array ? id1[1] : id1;
	let secondId = id2 instanceof Array ? id2[1] : id2;
	if (firstId === secondId) return 0;
else return firstBiggerThanSecond(firstId, secondId) ? -1 : 1;
}
function compareOldestFirst(id1, id2) {
	let firstId = id1 instanceof Array ? id1[1] : id1;
	let secondId = id2 instanceof Array ? id2[1] : id2;
	if (firstId === secondId) return 0;
else return firstBiggerThanSecond(firstId, secondId) ? 1 : -1;
}
function sortCompareByReverseId(entity1, entity2) {
	return compareNewestFirst(getElementId(entity1), getElementId(entity2));
}
function isSameId(id1, id2) {
	if (id1 === null || id2 === null) return false;
else if (id1 instanceof Array && id2 instanceof Array) return id1[0] === id2[0] && id1[1] === id2[1];
else return id1 === id2;
}
function haveSameId(entity1, entity2) {
	return isSameId(entity1._id, entity2._id);
}
function containsId(ids, id) {
	return ids.some((idInArray) => isSameId(idInArray, id));
}
function getEtId(entity) {
	return entity._id;
}
function getLetId(entity) {
	if (typeof entity._id === "undefined") throw new Error("listId is not defined for " + (typeof entity._type === "undefined" ? JSON.stringify(entity) : entity));
	return entity._id;
}
function getElementId(entity) {
	return elementIdPart(getLetId(entity));
}
function getListId(entity) {
	return listIdPart(getLetId(entity));
}
function listIdPart(id) {
	return id[0];
}
function elementIdPart(id) {
	return id[1];
}
function stringToCustomId(string) {
	return uint8arrayToCustomId(stringToUtf8Uint8Array(string));
}
function uint8arrayToCustomId(array) {
	return base64ToBase64Url(uint8ArrayToBase64(array));
}
function customIdToString(customId) {
	return utf8Uint8ArrayToString(base64ToUint8Array(base64UrlToBase64(customId)));
}
function create(typeModel, typeRef, createDefaultValue = _getDefaultValue) {
	let i = { _type: typeRef };
	for (let valueName of Object.keys(typeModel.values)) {
		let value = typeModel.values[valueName];
		i[valueName] = createDefaultValue(valueName, value);
	}
	for (let associationName of Object.keys(typeModel.associations)) {
		let association = typeModel.associations[associationName];
		if (association.cardinality === Cardinality.Any) i[associationName] = [];
else i[associationName] = null;
	}
	return i;
}
function _getDefaultValue(valueName, value) {
	if (valueName === "_format") return "0";
else if (valueName === "_id") return null;
else if (valueName === "_permissions") return null;
else if (value.cardinality === Cardinality.ZeroOrOne) return null;
else switch (value.type) {
		case ValueType.Bytes: return new Uint8Array(0);
		case ValueType.Date: return new Date();
		case ValueType.Number: return "0";
		case ValueType.String: return "";
		case ValueType.Boolean: return false;
		case ValueType.CustomId:
		case ValueType.GeneratedId: return null;
	}
	throw new Error(`no default value for ${JSON.stringify(value)}`);
}
function timestampToHexGeneratedId(timestamp, serverBytes) {
	let id = timestamp * 4;
	let hex = id.toString(16) + "00000" + pad(serverBytes, 2);
	for (let length = hex.length; length < 18; length++) hex = "0" + hex;
	return hex;
}
function timestampToGeneratedId(timestamp, serverBytes = 0) {
	let hex = timestampToHexGeneratedId(timestamp, serverBytes);
	return base64ToBase64Ext(hexToBase64(hex));
}
function generatedIdToTimestamp(base64Ext) {
	const base64 = base64ExtToBase64(base64Ext);
	const decodedbB4 = atob(base64);
	let numberResult = 0;
	for (let i = 0; i < 5; i++) {
		numberResult = numberResult * 256;
		numberResult += decodedbB4.charCodeAt(i);
	}
	numberResult = numberResult * 4;
	numberResult += decodedbB4.charCodeAt(5) >>> 6;
	return numberResult;
}
const base64extEncodedIdLength = GENERATED_MAX_ID.length;
function assertIsEntity(entity, type) {
	if (isSameTypeRef(entity._type, type)) return true;
else return false;
}
function assertIsEntity2(type) {
	return (e) => assertIsEntity(e, type);
}
function removeTechnicalFields(entity) {
	function _removeTechnicalFields(erased) {
		for (const key of Object.keys(erased)) if (key.startsWith("_finalEncrypted") || key.startsWith("_defaultEncrypted") || key.startsWith("_errors")) delete erased[key];
else {
			const value = erased[key];
			if (value instanceof Object) _removeTechnicalFields(value);
		}
	}
	_removeTechnicalFields(entity);
}
function getStrippedClone(entity) {
	const cloned = clone(entity);
	removeTechnicalFields(cloned);
	removeIdentityFields(cloned);
	return cloned;
}
/**
* remove fields that do not contain user defined data but are related to finding/accessing the entity on the server
*/
function removeIdentityFields(entity) {
	const keysToDelete = [
		"_id",
		"_ownerGroup",
		"_ownerEncSessionKey",
		"_ownerKeyVersion",
		"_permissions"
	];
	function _removeIdentityFields(erased) {
		for (const key of Object.keys(erased)) if (keysToDelete.includes(key)) delete erased[key];
else {
			const value = erased[key];
			if (value instanceof Object) _removeIdentityFields(value);
		}
	}
	_removeIdentityFields(entity);
}
function constructMailSetEntryId(receiveDate, mailId) {
	const buffer = new DataView(new ArrayBuffer(MAIL_SET_ENTRY_ID_BYTE_LENGTH));
	const mailIdBytes = base64ToUint8Array(base64ExtToBase64(mailId));
	const timestamp = BigInt(Math.trunc(receiveDate.getTime()));
	const truncatedReceiveDate = timestamp >> 10n & 0x00000000ffffffffn;
	buffer.setBigUint64(0, truncatedReceiveDate << 32n);
	for (let i = 0; i < mailIdBytes.length; i++) buffer.setUint8(i + 4, mailIdBytes[i]);
	return uint8arrayToCustomId(new Uint8Array(buffer.buffer));
}
function deconstructMailSetEntryId(id) {
	const buffer = customIdToUint8array(id);
	const timestampBytes = buffer.slice(0, 4);
	const generatedIdBytes = buffer.slice(4);
	const timestamp1024 = timestampBytes[0] << 24 | timestampBytes[1] << 16 | timestampBytes[2] << 8 | timestampBytes[3];
	const timestamp = timestamp1024 * 1024;
	const mailId = base64ToBase64Ext(uint8ArrayToBase64(generatedIdBytes));
	return {
		receiveDate: new Date(timestamp),
		mailId
	};
}
const LEGACY_TO_RECIPIENTS_ID = 112;
const LEGACY_CC_RECIPIENTS_ID = 113;
const LEGACY_BCC_RECIPIENTS_ID = 114;
const LEGACY_BODY_ID = 116;

//#endregion
export { AssociationType, CUSTOM_MAX_ID, CUSTOM_MIN_ID, Cardinality, GENERATED_ID_BYTES_LENGTH, GENERATED_MAX_ID, GENERATED_MIN_ID, LEGACY_BCC_RECIPIENTS_ID, LEGACY_BODY_ID, LEGACY_CC_RECIPIENTS_ID, LEGACY_TO_RECIPIENTS_ID, LOAD_MULTIPLE_LIMIT, POST_MULTIPLE_LIMIT, RANGE_ITEM_LIMIT, Type, ValueType, assertIsEntity, assertIsEntity2, compareNewestFirst, compareOldestFirst, constructMailSetEntryId, containsId, create, customIdToString, customIdToUint8array, deconstructMailSetEntryId, elementIdPart, firstBiggerThanSecond, firstBiggerThanSecondCustomId, generatedIdToTimestamp, getElementId, getEtId, getLetId, getListId, getStrippedClone, haveSameId, isSameId, listIdPart, removeTechnicalFields, sortCompareByReverseId, stringToCustomId, timestampToGeneratedId, uint8arrayToCustomId };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,