import { TutanotaError } from "./dist-chunk.js";
import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { downcast } from "./dist2-chunk.js";
import { ParserError } from "./ParserCombinator-chunk.js";
import { AccessBlockedError, AccessDeactivatedError, AccessExpiredError, BadGatewayError, BadRequestError, ConnectionError, InsufficientStorageError, InternalServerError, InvalidDataError, InvalidSoftwareVersionError, LimitReachedError, LockedError, MethodNotAllowedError, NotAuthenticatedError, NotAuthorizedError, NotFoundError, PayloadTooLargeError, PreconditionFailedError, RequestTimeoutError, ResourceError, ServiceUnavailableError, SessionExpiredError, TooManyRequestsError } from "./RestError-chunk.js";
import { OutOfSyncError } from "./OutOfSyncError-chunk.js";
import { CancelledError } from "./CancelledError-chunk.js";
import { SuspensionError } from "./SuspensionError-chunk.js";
import { LoginIncompleteError } from "./LoginIncompleteError-chunk.js";
import { CryptoError } from "./CryptoError-chunk.js";
import { RecipientsNotFoundError } from "./RecipientsNotFoundError-chunk.js";
import { DbError } from "./DbError-chunk.js";
import { IndexingNotSupportedError, QuotaExceededError } from "./QuotaExceededError-chunk.js";
import { DeviceStorageUnavailableError } from "./DeviceStorageUnavailableError-chunk.js";
import { MailBodyTooLargeError } from "./MailBodyTooLargeError-chunk.js";
import { ImportError } from "./ImportError-chunk.js";
import { WebauthnError } from "./WebauthnError-chunk.js";
import { PermissionError } from "./PermissionError-chunk.js";

//#region src/common/api/common/error/SessionKeyNotFoundError.ts
var SessionKeyNotFoundError = class extends TutanotaError {
	constructor(message) {
		super("SessionKeyNotFoundError", message);
	}
};

//#endregion
//#region src/common/api/common/error/SseError.ts
var SseError = class extends TutanotaError {
	constructor(m) {
		super("SseError", m);
	}
};

//#endregion
//#region src/common/api/common/error/RecipientNotResolvedError.ts
var RecipientNotResolvedError = class extends TutanotaError {
	constructor(m) {
		super("RecipientNotResolvedError", m);
	}
};

//#endregion
//#region src/common/api/common/error/OfflineDbClosedError.ts
var OfflineDbClosedError = class extends TutanotaError {
	constructor(msg) {
		super("OfflineDbClosedError", msg ?? "Offline db is closed");
	}
};

//#endregion
//#region src/common/api/common/error/FileOpenError.ts
var FileOpenError = class extends TutanotaError {
	constructor(message) {
		super("FileOpenError", message);
	}
};

//#endregion
//#region src/common/api/common/error/FileNotFoundError.ts
var FileNotFoundError = class extends TutanotaError {
	constructor(msg) {
		super("FileNotFoundError", msg);
	}
};

//#endregion
//#region src/common/api/common/error/CredentialAuthenticationError.ts
var CredentialAuthenticationError = class extends Error {
	constructor(message) {
		super(message);
	}
};

//#endregion
//#region src/common/api/common/error/KeyPermanentlyInvalidatedError.ts
var KeyPermanentlyInvalidatedError = class extends TutanotaError {
	constructor(message) {
		super("KeyPermanentlyInvalidatedError", message);
	}
};

//#endregion
//#region src/common/api/common/error/ContactStoreError.ts
var ContactStoreError = class extends TutanotaError {
	constructor(message) {
		super("ContactStoreError", message);
	}
};

//#endregion
//#region src/common/api/common/error/MobilePaymentError.ts
var MobilePaymentError = class extends TutanotaError {
	constructor(message) {
		super("MobilePaymentError", message);
	}
};

//#endregion
//#region src/common/api/common/error/MailImportError.ts
let ImportErrorCategories = function(ImportErrorCategories$1) {
	ImportErrorCategories$1[ImportErrorCategories$1["ImportFeatureDisabled"] = 0] = "ImportFeatureDisabled";
	ImportErrorCategories$1[ImportErrorCategories$1["LocalSdkError"] = 1] = "LocalSdkError";
	ImportErrorCategories$1[ImportErrorCategories$1["ServerCommunicationError"] = 2] = "ServerCommunicationError";
	ImportErrorCategories$1[ImportErrorCategories$1["InvalidImportFilesErrors"] = 3] = "InvalidImportFilesErrors";
	ImportErrorCategories$1[ImportErrorCategories$1["ImportIncomplete"] = 4] = "ImportIncomplete";
	ImportErrorCategories$1[ImportErrorCategories$1["ConcurrentImport"] = 5] = "ConcurrentImport";
	return ImportErrorCategories$1;
}({});
var MailImportError = class extends TutanotaError {
	data;
	constructor(data) {
		super("MailImportError", `Failed to import mails`);
		this.data = data;
	}
};

//#endregion
//#region src/common/api/common/error/ExportError.ts
let ExportErrorReason = function(ExportErrorReason$1) {
	ExportErrorReason$1["LockedForUser"] = "LockedForUser";
	ExportErrorReason$1["RunningForUser"] = "RunningForUser";
	return ExportErrorReason$1;
}({});
var ExportError = class extends TutanotaError {
	constructor(msg, data) {
		super("ExportError", msg);
		this.data = data;
	}
};

//#endregion
//#region src/common/api/common/utils/ErrorUtils.ts
function hasError(instance, key) {
	const downCastedInstance = downcast(instance);
	return !instance || !!downCastedInstance._errors && (!key || !!downCastedInstance._errors.key);
}
function isOfflineError(e) {
	return e instanceof ConnectionError || e instanceof LoginIncompleteError;
}
/**
* This maps the errors from their names to their constructors.
* This is needed generally when errors cross IPC boundaries and more specifically when we want to map native errors to
* our error classes.
*
* All errors that cross IPC boundaries should be added here.
*/
const ErrorNameToType = {
	ConnectionError,
	BadRequestError,
	NotAuthenticatedError,
	SessionExpiredError,
	NotAuthorizedError,
	NotFoundError,
	MethodNotAllowedError,
	PreconditionFailedError,
	LockedError,
	TooManyRequestsError,
	AccessDeactivatedError,
	AccessExpiredError,
	AccessBlockedError,
	InvalidDataError,
	InvalidSoftwareVersionError,
	LimitReachedError,
	InternalServerError,
	BadGatewayError,
	ResourceError,
	RequestTimeoutError,
	InsufficientStorageError,
	CryptoError,
	SessionKeyNotFoundError,
	SseError,
	ProgrammingError,
	RecipientsNotFoundError,
	RecipientNotResolvedError,
	OfflineDbClosedError,
	OutOfSyncError,
	ServiceUnavailableError,
	DbError,
	IndexingNotSupportedError,
	QuotaExceededError,
	CancelledError,
	FileOpenError,
	PayloadTooLargeError,
	DeviceStorageUnavailableError,
	MailBodyTooLargeError,
	ImportError,
	ExportError,
	WebauthnError,
	SuspensionError,
	LoginIncompleteError,
	ParserError,
	KeyPermanentlyInvalidatedError,
	MailImportError,
	Error,
	"java.net.SocketTimeoutException": ConnectionError,
	"java.net.SocketException": ConnectionError,
	"java.net.ConnectException": ConnectionError,
	"javax.net.ssl.SSLException": ConnectionError,
	"javax.net.ssl.SSLHandshakeException": ConnectionError,
	"java.io.EOFException": ConnectionError,
	"java.net.UnknownHostException": ConnectionError,
	"java.lang.SecurityException": PermissionError,
	"java.io.FileNotFoundException": FileNotFoundError,
	"de.tutao.tutashared.CryptoError": CryptoError,
	"de.tutao.tutashared.TutCrypto": CryptoError,
	"android.content.ActivityNotFoundException": FileOpenError,
	"de.tutao.tutashared.TutFileViewer": FileOpenError,
	NSURLErrorDomain: ConnectionError,
	"de.tutao.tutashared.CredentialAuthenticationException": CredentialAuthenticationError,
	"android.security.keystore.KeyPermanentlyInvalidatedException": KeyPermanentlyInvalidatedError,
	"de.tutao.tutashared.KeyPermanentlyInvalidatedError": KeyPermanentlyInvalidatedError,
	"de.tutao.tutashared.CredentialAuthenticationError": CredentialAuthenticationError,
	"de.tutao.tutashared.offline.OfflineDbClosedError": OfflineDbClosedError,
	"de.tutao.tutashared.CancelledError": CancelledError,
	"de.tutao.tutanota.webauthn.WebauthnError": WebauthnError,
	"de.tutao.tutanota.Webauthn": WebauthnError,
	"de.tutao.tutashared.PermissionError": PermissionError,
	"de.tutao.tutashared.ContactStoreError": ContactStoreError,
	"de.tutao.tutanota.MobilePayment": MobilePaymentError
};
function isSecurityError(e) {
	return e instanceof DOMException && (e.name === "SecurityError" || e.code === e.SECURITY_ERR);
}
function isNotSupportedError(e) {
	return e instanceof DOMException && (e.name === "NotSupportedError" || e.code === e.NOT_SUPPORTED_ERR);
}
function objToError(o) {
	let errorType = ErrorNameToType[o.name];
	let e = errorType != null ? new errorType(o.message) : new Error(o.message);
	e.name = o.name;
	e.stack = o.stack || e.stack;
	e.data = o.data;
	return e;
}

//#endregion
export { ContactStoreError, CredentialAuthenticationError, ExportError, ExportErrorReason, FileNotFoundError, FileOpenError, ImportErrorCategories, KeyPermanentlyInvalidatedError, MailImportError, MobilePaymentError, OfflineDbClosedError, RecipientNotResolvedError, SessionKeyNotFoundError, hasError, isNotSupportedError, isOfflineError, isSecurityError, objToError };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,