import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { DateTime } from "./luxon-chunk.js";
import { createBirthday } from "./TypeRefs-chunk.js";

//#region src/common/misc/DateParser.ts
/**
* parses the following formats:
*
* zh-hant    2017/6/23
* hu         2017. 06. 23.
* lt-lt      2017-06-23
*
* en        6/23/2017
* fil-ph    6/23/2017
* no        6/23/2017

* sq        23.6.2017
* hr        23. 06. 2017.
* nl        23-6-2017
* de        23.6.2017
* el        23/6/2017
* fr        23/06/2017
* it        23/6/2017
* pl        23.06.2017
* pt-pt     23/06/2017
* pt-br     23/06/2017
* ro        23.06.2017
* ru        23.06.2017
* es        23/6/2017
* tr        23.06.2017
* fi        23.6.2017
* mk        23.6.2017
* sr        23.6.2017.
* cs-cz     23. 6. 2017
* da-dk     23/6/2017
* et-ee     23.6.2017
* id        23/6/2017
* bg-bg     23.06.2017 Ð³.

* @param dateString
* @returns The timestamp from the given date string
*/
const referenceDate = new Date(2017, 5, 23);
function parseDate(dateString, referenceDateRenderer) {
	const referenceParts = _cleanupAndSplit(referenceDateRenderer(referenceDate));
	const dayPos = referenceParts.findIndex((e) => e === 23);
	const monthPos = referenceParts.findIndex((e) => e === 6);
	const yearPos = referenceParts.findIndex((e) => e === 2017);
	const parts = _cleanupAndSplit(dateString);
	let day, month, year;
	if (parts.length === 3) {
		day = parts[dayPos];
		month = parts[monthPos];
		year = parts[yearPos];
	} else if (parts.length === 2) {
		if (yearPos === 0) {
			day = parts[dayPos - 1];
			month = parts[monthPos - 1];
		} else {
			day = parts[dayPos];
			month = parts[monthPos];
		}
		year = new Date().getFullYear();
	} else throw new ProgrammingError(`could not parse dateString '${dateString}' with reference date ${referenceParts}`);
	if (year < 1e3) year += 2e3;
	if (month < 1 || month > 12) throw new Error(`Invalid value ${month} for month in ${dateString}`);
	if (day < 1 || day > _getNumDaysInMonth(month, year)) throw new Error(`Invalid value ${day} for day in ${dateString}`);
	const date = new Date(year, month - 1, day);
	if (isNaN(date.getTime())) throw new Error(`Couldn't parse date string ${dateString}`);
	return date;
}
function _getNumDaysInMonth(month, year) {
	const { daysInMonth } = DateTime.fromObject({
		month,
		year
	});
	if (!daysInMonth) throw new ProgrammingError(`could not get daysInMonth for month-year ${month}-${year}`);
	return daysInMonth;
}
function parseBirthday(text, referenceDateRenderer) {
	try {
		const referenceParts = _cleanupAndSplit(referenceDateRenderer(referenceDate));
		let dayPos = referenceParts.findIndex((e) => e === 23);
		let monthPos = referenceParts.findIndex((e) => e === 6);
		let yearPos = referenceParts.findIndex((e) => e === 2017);
		let birthdayValues = _cleanupAndSplit(text);
		let day, month, year;
		if (String(birthdayValues[dayPos]).length < 3 && String(birthdayValues[monthPos]).length < 3) {
			if (birthdayValues[dayPos] < 32) day = String(birthdayValues[dayPos]);
else return null;
			if (birthdayValues[monthPos] < 13) month = String(birthdayValues[monthPos]);
else return null;
		} else return null;
		if (birthdayValues[yearPos]) if (String(birthdayValues[yearPos]).length === 4) year = String(birthdayValues[yearPos]);
else if (String(birthdayValues[yearPos]).length === 2) if (birthdayValues[yearPos] > Number(String(new Date().getFullYear()).substring(2))) year = "19" + String(birthdayValues[yearPos]);
else year = "20" + String(birthdayValues[yearPos]);
else return null;
else year = null;
		return createBirthday({
			day,
			month,
			year
		});
	} catch (e) {
		return null;
	}
}
function _cleanupAndSplit(dateString) {
	dateString = dateString.replace(/[^ 0-9./-]/g, "");
	return dateString.split(/[./-]/g).slice(0, 3).map((part) => parseInt(part));
}

//#endregion
export { parseBirthday, parseDate };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,