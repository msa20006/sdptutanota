import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import "./dist2-chunk.js";
import "./TutanotaConstants-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import "./TypeRefs-chunk.js";
import "./TypeModels2-chunk.js";
import "./EntityFunctions-chunk.js";
import "./TypeModels3-chunk.js";
import "./ModelInfo-chunk.js";
import { AccessExpiredError } from "./RestError-chunk.js";
import "./SuspensionError-chunk.js";
import { SuspensionBehavior } from "./RestClient-chunk.js";
import { MailExportTokenService } from "./Services2-chunk.js";

//#region src/common/api/worker/facades/lazy/MailExportTokenFacade.ts
const TAG = "[MailExportTokenFacade]";
var MailExportTokenFacade = class {
	currentExportTokenRequest = null;
	currentExportToken = null;
	constructor(serviceExecutor) {
		this.serviceExecutor = serviceExecutor;
	}
	/**
	* Runs {@param request}.
	*
	* If {@link AccessExpiredError} is thrown, deletes the cached token and re-runs it again.
	*/
	async loadWithToken(request) {
		const token = this.currentExportToken ?? await this.requestNewToken();
		try {
			return await request(token);
		} catch (e) {
			if (e instanceof AccessExpiredError) {
				let newToken;
				if (this.currentExportToken === token) {
					console.log(TAG, `token expired for exporting and will be renewed`);
					newToken = await this.requestNewToken();
				} else newToken = this.currentExportToken ?? await this.requestNewToken();
				return await request(newToken);
			} else throw e;
		}
	}
	/**
	* Request a new token and write it to {@link currentExportToken}.
	*
	* This token will be valid for the mail group and current user for a short amount of time, after which you will get
	* an {@link AccessExpiredError} when using the token (or {@link NotAuthorizedError} if the user lost access to the group in the
	* meantime).
	* @throws TooManyRequestsError the user cannot request any more tokens right now
	*/
	requestNewToken() {
		if (this.currentExportTokenRequest) return this.currentExportTokenRequest;
		this.currentExportToken = null;
		this.currentExportTokenRequest = this.serviceExecutor.post(MailExportTokenService, null, { suspensionBehavior: SuspensionBehavior.Throw }).then((result) => {
			this.currentExportToken = result.mailExportToken;
			this.currentExportTokenRequest = null;
			return this.currentExportToken;
		}, (error) => {
			this.currentExportTokenRequest = null;
			throw error;
		});
		return this.currentExportTokenRequest;
	}
	_setCurrentExportToken(token) {
		this.currentExportToken = token;
		this.currentExportTokenRequest = null;
	}
	_getCurrentExportToken() {
		return this.currentExportToken;
	}
};

//#endregion
export { MailExportTokenFacade };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbEV4cG9ydFRva2VuRmFjYWRlLWNodW5rLmpzIiwibmFtZXMiOlsic2VydmljZUV4ZWN1dG9yOiBJU2VydmljZUV4ZWN1dG9yIiwicmVxdWVzdDogKHRva2VuOiBzdHJpbmcpID0+IFByb21pc2U8VD4iLCJ0b2tlbjogc3RyaW5nIl0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9hcGkvd29ya2VyL2ZhY2FkZXMvbGF6eS9NYWlsRXhwb3J0VG9rZW5GYWNhZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWNjZXNzRXhwaXJlZEVycm9yIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9lcnJvci9SZXN0RXJyb3IuanNcIlxuaW1wb3J0IHsgTWFpbEV4cG9ydFRva2VuU2VydmljZSB9IGZyb20gXCIuLi8uLi8uLi9lbnRpdGllcy90dXRhbm90YS9TZXJ2aWNlcy5qc1wiXG5pbXBvcnQgeyBJU2VydmljZUV4ZWN1dG9yIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9TZXJ2aWNlUmVxdWVzdC5qc1wiXG5pbXBvcnQgeyBTdXNwZW5zaW9uQmVoYXZpb3IgfSBmcm9tIFwiLi4vLi4vcmVzdC9SZXN0Q2xpZW50XCJcblxuY29uc3QgVEFHID0gXCJbTWFpbEV4cG9ydFRva2VuRmFjYWRlXVwiXG5cbi8qKlxuICogRGVub3RlcyBhbiBleHBvcnQgdG9rZW4uIFRoaXMgaXMgaW50ZXJuYWxseSBqdXN0IGEgc3RyaW5nLCBidXQgd2Ugd2FudCB0aGUgVHlwZVNjcmlwdCBjb21waWxlciB0byBlbmZvcmNlIHN0cm9uZ1xuICogdHlwaW5nLlxuICovXG50eXBlIE1haWxFeHBvcnRUb2tlbiA9IHN0cmluZyAmIHsgX2V4cG9ydFRva2VuOiB1bmRlZmluZWQgfVxuXG4vKipcbiAqIFRha2VzIGNhcmUgb2YgcmVxdWVzdGVkIGFuZCBpbnZhbGlkYXRpbmcgZXhwb3J0IHRva2VucyBhcyBuZWVkZWQuXG4gKlxuICogRXhwb3J0IHRva2VuIHNob3VsZCBiZSBwYXNzZWQgd2l0aCBuZXR3b3JrIHJlcXVlc3RzIHRvIGF2b2lkIHNlcnZlciBwZW5hbHRpZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYWlsRXhwb3J0VG9rZW5GYWNhZGUge1xuXHQvLyBUaGlzIHdpbGwgb25seSBiZSBzZXQgaWYgYSByZXF1ZXN0IGlzIGluIHByb2dyZXNzXG5cdHByaXZhdGUgY3VycmVudEV4cG9ydFRva2VuUmVxdWVzdDogUHJvbWlzZTxNYWlsRXhwb3J0VG9rZW4+IHwgbnVsbCA9IG51bGxcblx0Ly8gU2V0IHdoZW4gd2UgaGF2ZSBhIGtub3duIHZhbGlkIHRva2VuXG5cdHByaXZhdGUgY3VycmVudEV4cG9ydFRva2VuOiBNYWlsRXhwb3J0VG9rZW4gfCBudWxsID0gbnVsbFxuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgc2VydmljZUV4ZWN1dG9yOiBJU2VydmljZUV4ZWN1dG9yKSB7fVxuXG5cdC8qKlxuXHQgKiBSdW5zIHtAcGFyYW0gcmVxdWVzdH0uXG5cdCAqXG5cdCAqIElmIHtAbGluayBBY2Nlc3NFeHBpcmVkRXJyb3J9IGlzIHRocm93biwgZGVsZXRlcyB0aGUgY2FjaGVkIHRva2VuIGFuZCByZS1ydW5zIGl0IGFnYWluLlxuXHQgKi9cblx0YXN5bmMgbG9hZFdpdGhUb2tlbjxUPihyZXF1ZXN0OiAodG9rZW46IHN0cmluZykgPT4gUHJvbWlzZTxUPik6IFByb21pc2U8VD4ge1xuXHRcdGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50RXhwb3J0VG9rZW4gPz8gKGF3YWl0IHRoaXMucmVxdWVzdE5ld1Rva2VuKCkpXG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBhd2FpdCByZXF1ZXN0KHRva2VuKVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdC8vIFdlIG9ubHkgYWxsb3cgb25lIHJldHJ5XG5cdFx0XHRpZiAoZSBpbnN0YW5jZW9mIEFjY2Vzc0V4cGlyZWRFcnJvcikge1xuXHRcdFx0XHRsZXQgbmV3VG9rZW5cblx0XHRcdFx0aWYgKHRoaXMuY3VycmVudEV4cG9ydFRva2VuID09PSB0b2tlbikge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFRBRywgYHRva2VuIGV4cGlyZWQgZm9yIGV4cG9ydGluZyBhbmQgd2lsbCBiZSByZW5ld2VkYClcblx0XHRcdFx0XHRuZXdUb2tlbiA9IGF3YWl0IHRoaXMucmVxdWVzdE5ld1Rva2VuKClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBBbHJlYWR5IGEgcmVxdWVzdCBnb2luZyBvbi4uLiB3YWl0IGZvciB0aGF0IHRvIGZpbmlzaFxuXHRcdFx0XHRcdG5ld1Rva2VuID0gdGhpcy5jdXJyZW50RXhwb3J0VG9rZW4gPz8gKGF3YWl0IHRoaXMucmVxdWVzdE5ld1Rva2VuKCkpXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gYXdhaXQgcmVxdWVzdChuZXdUb2tlbilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IGVcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUmVxdWVzdCBhIG5ldyB0b2tlbiBhbmQgd3JpdGUgaXQgdG8ge0BsaW5rIGN1cnJlbnRFeHBvcnRUb2tlbn0uXG5cdCAqXG5cdCAqIFRoaXMgdG9rZW4gd2lsbCBiZSB2YWxpZCBmb3IgdGhlIG1haWwgZ3JvdXAgYW5kIGN1cnJlbnQgdXNlciBmb3IgYSBzaG9ydCBhbW91bnQgb2YgdGltZSwgYWZ0ZXIgd2hpY2ggeW91IHdpbGwgZ2V0XG5cdCAqIGFuIHtAbGluayBBY2Nlc3NFeHBpcmVkRXJyb3J9IHdoZW4gdXNpbmcgdGhlIHRva2VuIChvciB7QGxpbmsgTm90QXV0aG9yaXplZEVycm9yfSBpZiB0aGUgdXNlciBsb3N0IGFjY2VzcyB0byB0aGUgZ3JvdXAgaW4gdGhlXG5cdCAqIG1lYW50aW1lKS5cblx0ICogQHRocm93cyBUb29NYW55UmVxdWVzdHNFcnJvciB0aGUgdXNlciBjYW5ub3QgcmVxdWVzdCBhbnkgbW9yZSB0b2tlbnMgcmlnaHQgbm93XG5cdCAqL1xuXHRwcml2YXRlIHJlcXVlc3ROZXdUb2tlbigpOiBQcm9taXNlPE1haWxFeHBvcnRUb2tlbj4ge1xuXHRcdGlmICh0aGlzLmN1cnJlbnRFeHBvcnRUb2tlblJlcXVlc3QpIHtcblx0XHRcdHJldHVybiB0aGlzLmN1cnJlbnRFeHBvcnRUb2tlblJlcXVlc3Rcblx0XHR9XG5cblx0XHR0aGlzLmN1cnJlbnRFeHBvcnRUb2tlbiA9IG51bGxcblx0XHR0aGlzLmN1cnJlbnRFeHBvcnRUb2tlblJlcXVlc3QgPSB0aGlzLnNlcnZpY2VFeGVjdXRvci5wb3N0KE1haWxFeHBvcnRUb2tlblNlcnZpY2UsIG51bGwsIHsgc3VzcGVuc2lvbkJlaGF2aW9yOiBTdXNwZW5zaW9uQmVoYXZpb3IuVGhyb3cgfSkudGhlbihcblx0XHRcdChyZXN1bHQpID0+IHtcblx0XHRcdFx0dGhpcy5jdXJyZW50RXhwb3J0VG9rZW4gPSByZXN1bHQubWFpbEV4cG9ydFRva2VuIGFzIE1haWxFeHBvcnRUb2tlblxuXHRcdFx0XHR0aGlzLmN1cnJlbnRFeHBvcnRUb2tlblJlcXVlc3QgPSBudWxsXG5cdFx0XHRcdHJldHVybiB0aGlzLmN1cnJlbnRFeHBvcnRUb2tlblxuXHRcdFx0fSxcblx0XHRcdChlcnJvcikgPT4ge1xuXHRcdFx0XHQvLyBSZS1pbml0aWFsaXplIGluIGNhc2UgTWFpbEV4cG9ydFRva2VuU2VydmljZSB3b24ndCBmYWlsIG9uIGEgZnV0dXJlIHJlcXVlc3Rcblx0XHRcdFx0dGhpcy5jdXJyZW50RXhwb3J0VG9rZW5SZXF1ZXN0ID0gbnVsbFxuXHRcdFx0XHR0aHJvdyBlcnJvclxuXHRcdFx0fSxcblx0XHQpXG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudEV4cG9ydFRva2VuUmVxdWVzdFxuXHR9XG5cblx0Ly8gQFZpc2libGVGb3JUZXN0aW5nXG5cdF9zZXRDdXJyZW50RXhwb3J0VG9rZW4odG9rZW46IHN0cmluZykge1xuXHRcdHRoaXMuY3VycmVudEV4cG9ydFRva2VuID0gdG9rZW4gYXMgTWFpbEV4cG9ydFRva2VuXG5cdFx0dGhpcy5jdXJyZW50RXhwb3J0VG9rZW5SZXF1ZXN0ID0gbnVsbFxuXHR9XG5cblx0Ly8gQFZpc2libGVGb3JUZXN0aW5nXG5cdF9nZXRDdXJyZW50RXhwb3J0VG9rZW4oKTogc3RyaW5nIHwgbnVsbCB7XG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudEV4cG9ydFRva2VuXG5cdH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0EsTUFBTSxNQUFNO0lBYUMsd0JBQU4sTUFBNEI7Q0FFbEMsQUFBUSw0QkFBNkQ7Q0FFckUsQUFBUSxxQkFBNkM7Q0FFckQsWUFBNkJBLGlCQUFtQztFQXNFaEUsS0F0RTZCO0NBQXFDOzs7Ozs7Q0FPbEUsTUFBTSxjQUFpQkMsU0FBb0Q7RUFDMUUsTUFBTSxRQUFRLEtBQUssc0JBQXVCLE1BQU0sS0FBSyxpQkFBaUI7QUFDdEUsTUFBSTtBQUNILFVBQU8sTUFBTSxRQUFRLE1BQU07RUFDM0IsU0FBUSxHQUFHO0FBRVgsT0FBSSxhQUFhLG9CQUFvQjtJQUNwQyxJQUFJO0FBQ0osUUFBSSxLQUFLLHVCQUF1QixPQUFPO0FBQ3RDLGFBQVEsSUFBSSxNQUFNLGlEQUFpRDtBQUNuRSxnQkFBVyxNQUFNLEtBQUssaUJBQWlCO0lBQ3ZDLE1BRUEsWUFBVyxLQUFLLHNCQUF1QixNQUFNLEtBQUssaUJBQWlCO0FBR3BFLFdBQU8sTUFBTSxRQUFRLFNBQVM7R0FDOUIsTUFDQSxPQUFNO0VBRVA7Q0FDRDs7Ozs7Ozs7O0NBVUQsQUFBUSxrQkFBNEM7QUFDbkQsTUFBSSxLQUFLLDBCQUNSLFFBQU8sS0FBSztBQUdiLE9BQUsscUJBQXFCO0FBQzFCLE9BQUssNEJBQTRCLEtBQUssZ0JBQWdCLEtBQUssd0JBQXdCLE1BQU0sRUFBRSxvQkFBb0IsbUJBQW1CLE1BQU8sRUFBQyxDQUFDLEtBQzFJLENBQUMsV0FBVztBQUNYLFFBQUsscUJBQXFCLE9BQU87QUFDakMsUUFBSyw0QkFBNEI7QUFDakMsVUFBTyxLQUFLO0VBQ1osR0FDRCxDQUFDLFVBQVU7QUFFVixRQUFLLDRCQUE0QjtBQUNqQyxTQUFNO0VBQ04sRUFDRDtBQUNELFNBQU8sS0FBSztDQUNaO0NBR0QsdUJBQXVCQyxPQUFlO0FBQ3JDLE9BQUsscUJBQXFCO0FBQzFCLE9BQUssNEJBQTRCO0NBQ2pDO0NBR0QseUJBQXdDO0FBQ3ZDLFNBQU8sS0FBSztDQUNaO0FBQ0QifQ==