import "./dist-chunk.js";
import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { assertWorkerOrNode } from "./Env-chunk.js";
import { assertNotNull, findAndRemove, getFirstOrThrow, ofClass } from "./dist2-chunk.js";
import "./TutanotaConstants-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { MailboxGroupRootTypeRef, MailboxPropertiesTypeRef, createMailAddressProperties, createMailboxProperties } from "./TypeRefs-chunk.js";
import "./TypeModels2-chunk.js";
import { GroupInfoTypeRef, GroupTypeRef, UserTypeRef, createDomainMailAddressAvailabilityData, createMailAddressAliasGetIn, createMailAddressAliasServiceData, createMailAddressAliasServiceDataDelete, createMultipleMailAddressAvailabilityData, createStringWrapper } from "./TypeRefs2-chunk.js";
import { PreconditionFailedError } from "./RestError-chunk.js";
import { DomainMailAddressAvailabilityService, MailAddressAliasService, MultipleMailAddressAvailabilityService } from "./Services-chunk.js";
import { getEnabledMailAddressesForGroupInfo } from "./GroupUtils-chunk.js";

//#region src/common/api/worker/facades/lazy/MailAddressFacade.ts
assertWorkerOrNode();
var MailAddressFacade = class {
	constructor(userFacade, groupManagement, serviceExecutor, nonCachingEntityClient) {
		this.userFacade = userFacade;
		this.groupManagement = groupManagement;
		this.serviceExecutor = serviceExecutor;
		this.nonCachingEntityClient = nonCachingEntityClient;
	}
	/**
	* For legacy accounts the given userGroupId is ignored since the alias counters are for the customer
	*/
	getAliasCounters(userGroupId) {
		const data = createMailAddressAliasGetIn({ targetGroup: userGroupId });
		return this.serviceExecutor.get(MailAddressAliasService, data);
	}
	isMailAddressAvailable(mailAddress) {
		if (this.userFacade.isFullyLoggedIn()) {
			const data = createDomainMailAddressAvailabilityData({ mailAddress });
			return this.serviceExecutor.get(DomainMailAddressAvailabilityService, data).then((result) => result.available);
		} else return this.areMailAddressesAvailable([mailAddress]).then((result) => getFirstOrThrow(result).available);
	}
	async areMailAddressesAvailable(mailAddresses) {
		const data = createMultipleMailAddressAvailabilityData({ mailAddresses: mailAddresses.map((mailAddress) => createStringWrapper({ value: mailAddress })) });
		const result = await this.serviceExecutor.get(MultipleMailAddressAvailabilityService, data);
		return result.availabilities;
	}
	/**
	* Add an {@param alias} to {@param targetGroupId}.
	* {@param targetGroupId} is *not* a Mail group, it is currently only a user group.
	*
	* Can only be done by an admin.
	*/
	async addMailAlias(targetGroupId, alias) {
		const data = createMailAddressAliasServiceData({
			group: targetGroupId,
			mailAddress: alias
		});
		await this.serviceExecutor.post(MailAddressAliasService, data);
	}
	/**
	* Enable/disable an {@param alias} on {@param targetGroupId}.
	* {@param targetGroupId} is *not* a Mail group, it is currently only a user group.
	*
	* {@param restore} means whether the alias will be enabled or disabled.
	*
	* Can only be done by an admin.
	*/
	async setMailAliasStatus(targetGroupId, alias, restore) {
		const deleteData = createMailAddressAliasServiceDataDelete({
			mailAddress: alias,
			restore,
			group: targetGroupId
		});
		await this.serviceExecutor.delete(MailAddressAliasService, deleteData);
	}
	/**
	* Get mailAddress to senderName mappings for mail group that the specified user is a member of.
	* if no user is given, the operation is attempted as an admin of the given group.
	* */
	async getSenderNames(mailGroupId, viaUser) {
		const mailboxProperties = await this.getOrCreateMailboxProperties(mailGroupId, viaUser);
		return this.collectSenderNames(mailboxProperties);
	}
	/**
	* Set mailAddress to senderName mapping for mail group that the specified user is a member of.
	* if no user is specified, the operation will be attempted as an admin of the given group.
	* */
	async setSenderName(mailGroupId, mailAddress, senderName, viaUser) {
		const mailboxProperties = await this.getOrCreateMailboxProperties(mailGroupId, viaUser);
		let mailAddressProperty = mailboxProperties.mailAddressProperties.find((p) => p.mailAddress === mailAddress);
		if (mailAddressProperty == null) {
			mailAddressProperty = createMailAddressProperties({
				mailAddress,
				senderName: ""
			});
			mailboxProperties.mailAddressProperties.push(mailAddressProperty);
		}
		mailAddressProperty.senderName = senderName;
		const updatedProperties = await this.updateMailboxProperties(mailboxProperties, viaUser);
		return this.collectSenderNames(updatedProperties);
	}
	/**
	* remove the sender name of the given mail address.
	* If no user is given, the operation will be attempted as an admin of the group.
	*/
	async removeSenderName(mailGroupId, mailAddress, viaUser) {
		const mailboxProperties = await this.getOrCreateMailboxProperties(mailGroupId, viaUser);
		findAndRemove(mailboxProperties.mailAddressProperties, (p) => p.mailAddress === mailAddress);
		const updatedProperties = await this.updateMailboxProperties(mailboxProperties, viaUser);
		return this.collectSenderNames(updatedProperties);
	}
	async getOrCreateMailboxProperties(mailGroupId, viaUser) {
		const mailboxGroupRoot = await this.nonCachingEntityClient.load(MailboxGroupRootTypeRef, mailGroupId);
		if (mailboxGroupRoot.mailboxProperties == null) {
			const currentGroupKey = viaUser ? await this.groupManagement.getCurrentGroupKeyViaUser(mailGroupId, viaUser) : await this.groupManagement.getCurrentGroupKeyViaAdminEncGKey(mailGroupId);
			mailboxGroupRoot.mailboxProperties = await this.createMailboxProperties(mailboxGroupRoot, currentGroupKey);
		}
		const groupKeyProvider = async (version) => viaUser ? await this.groupManagement.getGroupKeyViaUser(mailGroupId, version, viaUser) : await this.groupManagement.getGroupKeyViaAdminEncGKey(mailGroupId, version);
		const mailboxProperties = await this.nonCachingEntityClient.load(MailboxPropertiesTypeRef, mailboxGroupRoot.mailboxProperties, { ownerKeyProvider: groupKeyProvider });
		return mailboxProperties.mailAddressProperties.length === 0 ? this.mailboxPropertiesWithLegacySenderName(mailboxProperties, viaUser) : mailboxProperties;
	}
	/**
	* set the legacy sender name (groupInfo.name) of the group on all assigned mail addresses.
	* if no user is given, the operation will be attempted as an admin of the group of the given mailboxProperties.
	* */
	async mailboxPropertiesWithLegacySenderName(mailboxProperties, viaUser) {
		const groupInfo = viaUser ? await this.loadUserGroupInfo(viaUser) : await this.loadMailGroupInfo(mailboxProperties._ownerGroup);
		const legacySenderName = groupInfo.name;
		const mailAddresses = getEnabledMailAddressesForGroupInfo(groupInfo);
		for (const mailAddress of mailAddresses) mailboxProperties.mailAddressProperties.push(createMailAddressProperties({
			mailAddress,
			senderName: legacySenderName
		}));
		return this.updateMailboxProperties(mailboxProperties, viaUser);
	}
	async loadUserGroupInfo(userId) {
		const user = await this.nonCachingEntityClient.load(UserTypeRef, userId);
		return await this.nonCachingEntityClient.load(GroupInfoTypeRef, user.userGroup.groupInfo);
	}
	async loadMailGroupInfo(groupId) {
		const group = await this.nonCachingEntityClient.load(GroupTypeRef, groupId);
		return await this.nonCachingEntityClient.load(GroupInfoTypeRef, group.groupInfo);
	}
	async createMailboxProperties(mailboxGroupRoot, groupKey) {
		const _ownerGroup = mailboxGroupRoot._ownerGroup;
		const mailboxProperties = createMailboxProperties({
			..._ownerGroup != null ? { _ownerGroup } : null,
			reportMovedMails: "",
			mailAddressProperties: []
		});
		return this.nonCachingEntityClient.setup(null, mailboxProperties, undefined, { ownerKey: groupKey }).catch(ofClass(PreconditionFailedError, (e) => {
			if (e.data && e.data.startsWith("exists:")) {
				const existingId = e.data.substring("exists:".length);
				console.log("mailboxProperties already exists", existingId);
				return existingId;
			} else throw new ProgrammingError(`Could not create mailboxProperties, precondition: ${e.data}`);
		}));
	}
	async updateMailboxProperties(mailboxProperties, viaUser) {
		const groupKeyProvider = async (version) => viaUser ? await this.groupManagement.getGroupKeyViaUser(assertNotNull(mailboxProperties._ownerGroup), version, viaUser) : await this.groupManagement.getGroupKeyViaAdminEncGKey(assertNotNull(mailboxProperties._ownerGroup), version);
		await this.nonCachingEntityClient.update(mailboxProperties, { ownerKeyProvider: groupKeyProvider });
		return await this.nonCachingEntityClient.load(MailboxPropertiesTypeRef, mailboxProperties._id, { ownerKeyProvider: groupKeyProvider });
	}
	async collectSenderNames(mailboxProperties) {
		const result = new Map();
		for (const data of mailboxProperties.mailAddressProperties) result.set(data.mailAddress, data.senderName);
		return result;
	}
};

//#endregion
export { MailAddressFacade };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,