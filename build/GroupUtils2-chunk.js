import { downcast, ofClass, pMap } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { GroupType, GroupTypeNameByCode, ShareCapability } from "./TutanotaConstants-chunk.js";
import { getEtId, isSameId } from "./EntityUtils-chunk.js";
import { GroupInfoTypeRef, GroupMemberTypeRef, ReceivedGroupInvitationTypeRef, UserGroupRootTypeRef } from "./TypeRefs2-chunk.js";
import { NotFoundError } from "./RestError-chunk.js";

//#region src/common/sharing/GroupUtils.ts
function hasCapabilityOnGroup(user, group, requiredCapability) {
	if (!isShareableGroupType(downcast(group.type))) return false;
	if (isSharedGroupOwner(group, user._id)) return true;
	const membership = user.memberships.find((gm) => isSameId(gm.group, group._id));
	if (membership) return membership.capability != null && Number(requiredCapability) <= Number(membership.capability);
	return false;
}
function isSharedGroupOwner(sharedGroup, user) {
	return !!(sharedGroup.user && isSameId(sharedGroup.user, typeof user === "string" ? user : getEtId(user)));
}
function getCapabilityText(capability) {
	switch (capability) {
		case ShareCapability.Invite: return lang.get("groupCapabilityInvite_label");
		case ShareCapability.Write: return lang.get("groupCapabilityWrite_label");
		case ShareCapability.Read: return lang.get("groupCapabilityRead_label");
		default: return lang.get("comboBoxSelectionNone_msg");
	}
}
function getMemberCapability(memberInfo, group) {
	if (isSharedGroupOwner(group, memberInfo.member.user)) return ShareCapability.Invite;
	return downcast(memberInfo.member.capability);
}
function loadGroupMembers(group, entityClient) {
	return entityClient.loadAll(GroupMemberTypeRef, group.members).then((members) => pMap(members, (member) => loadGroupInfoForMember(member, entityClient)));
}
function loadGroupInfoForMember(groupMember, entityClient) {
	return entityClient.load(GroupInfoTypeRef, groupMember.userGroupInfo).then((userGroupInfo) => {
		return {
			member: groupMember,
			info: userGroupInfo
		};
	});
}
function getDefaultGroupName(groupType) {
	switch (groupType) {
		case GroupType.Calendar: return lang.get("privateCalendar_label");
		case GroupType.Template: return lang.get("templateGroupDefaultName_label");
		default: return GroupTypeNameByCode[groupType];
	}
}
function loadReceivedGroupInvitations(userController, entityClient, type) {
	return entityClient.load(UserGroupRootTypeRef, userController.userGroupInfo.group).then((userGroupRoot) => entityClient.loadAll(ReceivedGroupInvitationTypeRef, userGroupRoot.invitations)).then((invitations) => invitations.filter((invitation) => getInvitationGroupType(invitation) === type)).catch(ofClass(NotFoundError, () => []));
}
const DEFAULT_GROUP_TYPE = GroupType.Calendar;
function getInvitationGroupType(invitation) {
	return invitation.groupType === null ? DEFAULT_GROUP_TYPE : invitation.groupType;
}
function isTemplateGroup(groupType) {
	return groupType === GroupType.Template;
}
function isShareableGroupType(groupType) {
	return groupType === GroupType.Calendar || groupType === GroupType.Template || groupType === GroupType.ContactList;
}
const TemplateGroupPreconditionFailedReason = Object.freeze({
	BUSINESS_FEATURE_REQUIRED: "templategroup.business_feature_required",
	UNLIMITED_REQUIRED: "templategroup.unlimited_required"
});
function getSharedGroupName(groupInfo, { userSettingsGroupRoot }, allowGroupNameOverride) {
	return getNullableSharedGroupName(groupInfo, userSettingsGroupRoot, allowGroupNameOverride) ?? getDefaultGroupName(downcast(groupInfo.groupType));
}
function getNullableSharedGroupName(groupInfo, userSettingsGroupRoot, allowGroupNameOverride) {
	const groupSettings = userSettingsGroupRoot.groupSettings.find((gc) => gc.group === groupInfo.group);
	return allowGroupNameOverride && groupSettings && groupSettings.name || groupInfo.name || null;
}

//#endregion
export { TemplateGroupPreconditionFailedReason, getCapabilityText, getDefaultGroupName, getInvitationGroupType, getMemberCapability, getNullableSharedGroupName, getSharedGroupName, hasCapabilityOnGroup, isShareableGroupType, isSharedGroupOwner, isTemplateGroup, loadGroupInfoForMember, loadGroupMembers, loadReceivedGroupInvitations };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,