import { mithril_default } from "./mithril-chunk.js";
import { getFirstOrThrow } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { theme } from "./theme-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import { windowFacade } from "./WindowFacade-chunk.js";
import { px, size } from "./size-chunk.js";
import { findRecipientWithAddress } from "./CommonCalendarUtils-chunk.js";
import { BaseButton } from "./Button-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { Autocomplete, Dialog, TextField, TextFieldType, createAsyncDropdown, scrollListDom } from "./Dialog-chunk.js";
import { Icon, progressIcon } from "./Icon-chunk.js";
import { stringToNameAndMailAddress } from "./MailAddressParser-chunk.js";
import { getMailAddressDisplayText } from "./SharedMailUtils-chunk.js";

//#region src/common/gui/base/BubbleTextField.ts
var BubbleTextField = class {
	active = false;
	domInput = null;
	view({ attrs }) {
		return mithril_default(".bubble-text-field", [mithril_default(TextField, {
			label: attrs.label,
			disabled: attrs.disabled,
			value: attrs.text,
			oninput: attrs.onInput,
			helpLabel: attrs.helpLabel,
			type: TextFieldType.Email,
			autocompleteAs: Autocomplete.off,
			injectionsLeft: () => {
				return attrs.items.map((item, idx, items) => {
					const bubbleText = attrs.renderBubbleText(item);
					return mithril_default(".flex.overflow-hidden.items-end", [mithril_default(".flex-no-grow-shrink-auto.overflow-hidden", mithril_default(BaseButton, {
						label: bubbleText,
						text: bubbleText.text,
						class: "text-bubble button-content content-fg text-ellipsis flash",
						style: { "max-width": "100%" },
						onclick: (e) => {
							e.stopPropagation();
							createAsyncDropdown({
								lazyButtons: () => attrs.getBubbleDropdownAttrs(item),
								width: 250
							})(e, e.target);
						}
					})), this.active || idx < items.length - 1 || attrs.text !== "" ? mithril_default("span.pr", ",") : null]);
				});
			},
			injectionsRight: () => attrs.injectionsRight ?? null,
			oncreate: () => {
				requestAnimationFrame(() => {
					if (this.domInput) this.domInput.size = 1;
				});
			},
			onDomInputCreated: (dom) => this.domInput = dom,
			onfocus: () => {
				this.active = true;
				attrs.onFocus();
			},
			onblur: () => {
				this.active = false;
				attrs.onBlur();
			},
			keyHandler: (key) => {
				if (key.key != null) switch (key.key.toLowerCase()) {
					case Keys.BACKSPACE.code: return attrs.onBackspace();
					case Keys.RETURN.code: return attrs.onEnterKey();
					case Keys.DOWN.code: return attrs.onUpKey();
					case Keys.UP.code: return attrs.onDownKey();
				}
				return true;
			}
		})]);
	}
};

//#endregion
//#region src/common/gui/SearchDropDown.ts
const EntryHeight = 60;
var SearchDropDown = class {
	domSuggestions;
	keyboardHeight = 0;
	oncreate() {
		windowFacade.addKeyboardSizeListener((newSize) => {
			this.keyboardHeight = newSize;
		});
	}
	view({ attrs }) {
		if (attrs.selectedSuggestionIndex !== attrs.selectedSuggestionIndex && this.domSuggestions) requestAnimationFrame(() => {
			scrollListDom(this.domSuggestions, EntryHeight, attrs.selectedSuggestionIndex);
		});
		let dropdownHeight = EntryHeight * Math.min(attrs.maxHeight ?? Number.MAX_VALUE, attrs.suggestions.length);
		if (this.domSuggestions) {
			const top = this.domSuggestions.getBoundingClientRect().top;
			const availableHeight = window.innerHeight - top - this.keyboardHeight - size.vpad;
			dropdownHeight = Math.min(availableHeight, dropdownHeight);
		}
		return mithril_default(`.abs.z4.full-width.elevated-bg.scroll.text-ellipsis${attrs.suggestions.length ? ".dropdown-shadow" : ""}`, {
			oncreate: (vnode) => this.domSuggestions = vnode.dom,
			style: {
				transition: "height 0.2s",
				height: px(dropdownHeight)
			}
		}, attrs.suggestions.map((suggestion, idx) => this.renderSuggestion(attrs, suggestion, idx)));
	}
	renderSuggestion(attrs, { firstRow, secondRow, display }, idx) {
		const selected = idx === attrs.selectedSuggestionIndex;
		if (display !== undefined && !display) return null;
		return mithril_default(".pt-s.pb-s.click.content-hover", {
			class: selected ? "content-accent-fg row-selected icon-accent" : "",
			onmousedown: () => attrs.onSuggestionSelected(idx),
			style: {
				"padding-left": selected ? px(size.hpad_large - 3) : px(size.hpad_large),
				"border-left": selected ? "3px solid" : null,
				height: px(EntryHeight)
			}
		}, [mithril_default(".small.full-width.text-ellipsis", firstRow), mithril_default(".name.full-width.text-ellipsis", secondRow)]);
	}
};

//#endregion
//#region src/common/gui/MailRecipientsTextField.ts
var MailRecipientsTextField = class {
	selectedSuggestionIdx = 0;
	focused = false;
	view({ attrs }) {
		return [this.renderTextField(attrs), this.focused ? this.renderSuggestions(attrs) : null];
	}
	renderTextField(attrs) {
		return mithril_default(BubbleTextField, {
			label: attrs.label,
			text: attrs.text,
			helpLabel: attrs.helpLabel,
			onInput: (text) => {
				attrs.search.search(text).then(() => mithril_default.redraw());
				const { remainingText, newRecipients, errors } = text.length - attrs.text.length > 1 ? parsePastedInput(text) : parseTypedInput(text);
				for (const { address, name } of newRecipients) attrs.onRecipientAdded(address, name, null);
				if (errors.length === 1 && newRecipients.length === 0) attrs.onTextChanged(getFirstOrThrow(errors));
else {
					if (errors.length > 0) Dialog.message(lang.makeTranslation("invalidPastedRecipients_msg", `${lang.get("invalidPastedRecipients_msg")}\n\n${errors.join("\n")}`));
					attrs.onTextChanged(remainingText);
				}
			},
			items: attrs.recipients.map((recipient) => recipient.address),
			renderBubbleText: (address) => {
				const name = findRecipientWithAddress(attrs.recipients, address)?.name ?? null;
				return lang.makeTranslation(address, getMailAddressDisplayText(name, address, false));
			},
			getBubbleDropdownAttrs: async (address) => await attrs.getRecipientClickedDropdownAttrs?.(address) ?? [],
			onBackspace: () => {
				if (attrs.text === "" && attrs.recipients.length > 0) {
					const { address } = attrs.recipients.slice().pop();
					attrs.onTextChanged(address);
					attrs.onRecipientRemoved(address);
					return false;
				}
				return true;
			},
			onEnterKey: () => {
				this.resolveInput(attrs, true);
				return true;
			},
			onUpKey: () => {
				this.setSelectedSuggestionIdx(this.getSelectedSuggestionIdx(attrs) + 1);
				return false;
			},
			onDownKey: () => {
				this.setSelectedSuggestionIdx(this.getSelectedSuggestionIdx(attrs) - 1);
				return false;
			},
			onFocus: () => {
				this.focused = true;
			},
			onBlur: () => {
				this.focused = false;
				this.resolveInput(attrs, false);
				return true;
			},
			disabled: attrs.disabled,
			injectionsRight: mithril_default(".flex.items-center", [mithril_default(".flex.align-right.mr-s.flex.items-end.pb-s", { style: {
				width: px(20),
				height: px(size.button_height_compact)
			} }, attrs.search.isLoading() ? progressIcon() : null), attrs.injectionsRight])
		});
	}
	renderSuggestions(attrs) {
		return mithril_default(".rel", mithril_default(SearchDropDown, {
			suggestions: attrs.search.results().map((suggestion) => {
				if (suggestion.type === "recipient") return {
					firstRow: suggestion.value.name,
					secondRow: suggestion.value.address
				};
else return {
					firstRow: mithril_default(Icon, {
						icon: Icons.People,
						style: {
							fill: theme.content_fg,
							"aria-describedby": lang.get("contactListName_label")
						}
					}),
					secondRow: suggestion.value.name
				};
			}),
			selectedSuggestionIndex: this.getSelectedSuggestionIdx(attrs),
			onSuggestionSelected: (idx) => this.selectSuggestion(attrs, idx),
			maxHeight: attrs.maxSuggestionsToShow ?? null
		}));
	}
	/**
	* Resolves a typed in mail address or one of the suggested ones.
	* @param selectSuggestion boolean value indicating whether a suggestion should be selected or not. Should be true if a suggestion is explicitly selected by
	* for example hitting the enter key and false e.g. if the dialog is closed
	*/
	resolveInput(attrs, selectSuggestion) {
		const suggestions = attrs.search.results();
		if (suggestions.length > 0 && selectSuggestion) this.selectSuggestion(attrs, this.getSelectedSuggestionIdx(attrs));
else {
			const parsed = parseMailAddress(attrs.text);
			if (parsed != null) {
				attrs.onRecipientAdded(parsed.address, parsed.name, null);
				attrs.onTextChanged("");
			}
		}
	}
	async selectSuggestion(attrs, index) {
		const selection = attrs.search.results()[index];
		if (selection == null) return;
		if (selection.type === "recipient") {
			const { address, name, contact } = selection.value;
			attrs.onRecipientAdded(address, name, contact);
			attrs.search.clear();
			attrs.onTextChanged("");
		} else {
			attrs.search.clear();
			attrs.onTextChanged("");
			const recipients = await attrs.search.resolveContactList(selection.value);
			for (const { address, name, contact } of recipients) attrs.onRecipientAdded(address, name, contact);
			mithril_default.redraw();
		}
	}
	getSelectedSuggestionIdx(attrs) {
		return Math.min(Math.max(this.selectedSuggestionIdx, 0), attrs.search.results().length - 1);
	}
	setSelectedSuggestionIdx(idx) {
		this.selectedSuggestionIdx = idx;
	}
};
function parsePastedInput(text) {
	const separator = text.indexOf(";") !== -1 ? ";" : ",";
	const textParts = text.split(separator).map((part) => part.trim());
	const result = {
		remainingText: "",
		newRecipients: [],
		errors: []
	};
	for (let part of textParts) {
		part = part.trim();
		if (part.length !== 0) {
			const parsed = parseMailAddress(part);
			if (!parsed) result.errors.push(part);
else result.newRecipients.push(parsed);
		}
	}
	return result;
}
function parseTypedInput(text) {
	const lastCharacter = text.slice(-1);
	if (lastCharacter === ";" || lastCharacter === "," || lastCharacter === " ") {
		const textMinusLast = text.slice(0, -1);
		const result = parseMailAddress(textMinusLast);
		const remainingText = result != null ? "" : textMinusLast;
		return {
			remainingText,
			newRecipients: result ? [result] : [],
			errors: []
		};
	} else return {
		remainingText: text,
		newRecipients: [],
		errors: []
	};
}
function parseMailAddress(text) {
	text = text.trim();
	if (text === "") return null;
	const nameAndMailAddress = stringToNameAndMailAddress(text);
	if (nameAndMailAddress) {
		const name = nameAndMailAddress.name ? nameAndMailAddress.name : null;
		return {
			name,
			address: nameAndMailAddress.mailAddress
		};
	} else return null;
}

//#endregion
export { MailRecipientsTextField, parseMailAddress, parsePastedInput, parseTypedInput };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,