import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import "./ClientDetector-chunk.js";
import "./mithril-chunk.js";
import { base64ToUint8Array, mapNullable } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import "./styles-chunk.js";
import "./theme-chunk.js";
import "./TutanotaConstants-chunk.js";
import "./KeyManager-chunk.js";
import "./WindowFacade-chunk.js";
import "./RootView-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./ParserCombinator-chunk.js";
import "./stream-chunk.js";
import "./ErrorUtils-chunk.js";
import "./RestError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import "./Button-chunk.js";
import "./Icons-chunk.js";
import "./DialogHeaderBar-chunk.js";
import "./CountryList-chunk.js";
import { Dialog } from "./Dialog-chunk.js";
import "./Icon-chunk.js";
import "./AriaUtils-chunk.js";
import "./IconButton-chunk.js";
import { CredentialEncryptionMode } from "./CredentialEncryptionMode-chunk.js";
import { AppLockMethod } from "./AppLockMethod-chunk.js";

//#region src/common/misc/credentials/CredentialFormatMigrator.ts
function credentialEncryptionModeToAppLockMethod(mode) {
	switch (mode) {
		case CredentialEncryptionMode.APP_PASSWORD:
		case CredentialEncryptionMode.DEVICE_LOCK: return AppLockMethod.None;
		case CredentialEncryptionMode.BIOMETRICS: return AppLockMethod.Biometrics;
		case CredentialEncryptionMode.SYSTEM_PASSWORD: return AppLockMethod.SystemPassOrBiometrics;
	}
}
var CredentialFormatMigrator = class {
	constructor(deviceConfig, nativeCredentialFacade, mobileSystemFacade) {
		this.deviceConfig = deviceConfig;
		this.nativeCredentialFacade = nativeCredentialFacade;
		this.mobileSystemFacade = mobileSystemFacade;
	}
	async migrate() {
		try {
			await this.migrateToNativeCredentials();
		} catch (e) {
			console.error(e);
			await Dialog.message(lang.makeTranslation("confirm_msg", "Could not migrate credentials"), `${e.name} ${e.message}
${e.stack}`).then(() => this.migrate());
		}
	}
	/**
	* Migrate existing credentials to native db if the migration haven't happened once. Also generate database key if missing.
	*/
	async migrateToNativeCredentials() {
		if (this.nativeCredentialFacade != null && !this.deviceConfig.getIsCredentialsMigratedToNative()) {
			console.log("Migrating credentials to native");
			const allPersistedCredentials = this.deviceConfig.getCredentials().map(deviceConfigCredentialsToPersisted);
			const encryptionMode = await this.deviceConfig.getCredentialEncryptionMode();
			const credentialsKey = await this.deviceConfig.getCredentialsEncryptionKey();
			if (encryptionMode != null && credentialsKey != null) {
				if (this.mobileSystemFacade != null) await this.mobileSystemFacade.setAppLockMethod(credentialEncryptionModeToAppLockMethod(encryptionMode));
				console.log("migrating credentials", allPersistedCredentials);
				await this.nativeCredentialFacade.migrateToNativeCredentials(allPersistedCredentials, encryptionMode, credentialsKey);
			} else console.log("Skipping migration as encryption data is not there");
			console.log("Stored credentials in native");
			await this.deviceConfig.clearCredentialsData();
			console.log("Cleared credentials in deviceConfig");
			this.deviceConfig.setIsCredentialsMigratedToNative(true);
		}
	}
};
function deviceConfigCredentialsToPersisted(deviceConfigCredentials) {
	return {
		credentialInfo: deviceConfigCredentials.credentialInfo,
		encryptedPassword: deviceConfigCredentials.encryptedPassword,
		encryptedPassphraseKey: mapNullable(deviceConfigCredentials.encryptedPassphraseKey, base64ToUint8Array),
		accessToken: base64ToUint8Array(deviceConfigCredentials.accessToken),
		databaseKey: mapNullable(deviceConfigCredentials.databaseKey, base64ToUint8Array)
	};
}

//#endregion
export { CredentialFormatMigrator };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlZGVudGlhbEZvcm1hdE1pZ3JhdG9yLWNodW5rLmpzIiwibmFtZXMiOlsibW9kZTogQ3JlZGVudGlhbEVuY3J5cHRpb25Nb2RlIiwiZGV2aWNlQ29uZmlnOiBEZXZpY2VDb25maWciLCJuYXRpdmVDcmVkZW50aWFsRmFjYWRlOiBOYXRpdmVDcmVkZW50aWFsc0ZhY2FkZSB8IG51bGwiLCJtb2JpbGVTeXN0ZW1GYWNhZGU6IE1vYmlsZVN5c3RlbUZhY2FkZSB8IG51bGwiLCJkZXZpY2VDb25maWdDcmVkZW50aWFsczogRGV2aWNlQ29uZmlnQ3JlZGVudGlhbHMiXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL21pc2MvY3JlZGVudGlhbHMvQ3JlZGVudGlhbEZvcm1hdE1pZ3JhdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERldmljZUNvbmZpZywgRGV2aWNlQ29uZmlnQ3JlZGVudGlhbHMgfSBmcm9tIFwiLi4vRGV2aWNlQ29uZmlnLmpzXCJcbmltcG9ydCB0eXBlIHsgTmF0aXZlQ3JlZGVudGlhbHNGYWNhZGUgfSBmcm9tIFwiLi4vLi4vbmF0aXZlL2NvbW1vbi9nZW5lcmF0ZWRpcGMvTmF0aXZlQ3JlZGVudGlhbHNGYWNhZGUuanNcIlxuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSBcIi4uLy4uL2d1aS9iYXNlL0RpYWxvZy5qc1wiXG5pbXBvcnQgeyBQZXJzaXN0ZWRDcmVkZW50aWFscyB9IGZyb20gXCIuLi8uLi9uYXRpdmUvY29tbW9uL2dlbmVyYXRlZGlwYy9QZXJzaXN0ZWRDcmVkZW50aWFscy5qc1wiXG5pbXBvcnQgeyBiYXNlNjRUb1VpbnQ4QXJyYXksIG1hcE51bGxhYmxlIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5pbXBvcnQgeyBNb2JpbGVTeXN0ZW1GYWNhZGUgfSBmcm9tIFwiLi4vLi4vbmF0aXZlL2NvbW1vbi9nZW5lcmF0ZWRpcGMvTW9iaWxlU3lzdGVtRmFjYWRlLmpzXCJcbmltcG9ydCB7IENyZWRlbnRpYWxFbmNyeXB0aW9uTW9kZSB9IGZyb20gXCIuL0NyZWRlbnRpYWxFbmNyeXB0aW9uTW9kZS5qc1wiXG5pbXBvcnQgeyBBcHBMb2NrTWV0aG9kIH0gZnJvbSBcIi4uLy4uL25hdGl2ZS9jb21tb24vZ2VuZXJhdGVkaXBjL0FwcExvY2tNZXRob2QuanNcIlxuaW1wb3J0IHsgbGFuZyB9IGZyb20gXCIuLi9MYW5ndWFnZVZpZXdNb2RlbC5qc1wiXG5cbmZ1bmN0aW9uIGNyZWRlbnRpYWxFbmNyeXB0aW9uTW9kZVRvQXBwTG9ja01ldGhvZChtb2RlOiBDcmVkZW50aWFsRW5jcnlwdGlvbk1vZGUpOiBBcHBMb2NrTWV0aG9kIHtcblx0c3dpdGNoIChtb2RlKSB7XG5cdFx0Y2FzZSBDcmVkZW50aWFsRW5jcnlwdGlvbk1vZGUuQVBQX1BBU1NXT1JEOlxuXHRcdGNhc2UgQ3JlZGVudGlhbEVuY3J5cHRpb25Nb2RlLkRFVklDRV9MT0NLOlxuXHRcdFx0cmV0dXJuIEFwcExvY2tNZXRob2QuTm9uZVxuXHRcdGNhc2UgQ3JlZGVudGlhbEVuY3J5cHRpb25Nb2RlLkJJT01FVFJJQ1M6XG5cdFx0XHRyZXR1cm4gQXBwTG9ja01ldGhvZC5CaW9tZXRyaWNzXG5cdFx0Y2FzZSBDcmVkZW50aWFsRW5jcnlwdGlvbk1vZGUuU1lTVEVNX1BBU1NXT1JEOlxuXHRcdFx0cmV0dXJuIEFwcExvY2tNZXRob2QuU3lzdGVtUGFzc09yQmlvbWV0cmljc1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBDcmVkZW50aWFsRm9ybWF0TWlncmF0b3Ige1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIHJlYWRvbmx5IGRldmljZUNvbmZpZzogRGV2aWNlQ29uZmlnLFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgbmF0aXZlQ3JlZGVudGlhbEZhY2FkZTogTmF0aXZlQ3JlZGVudGlhbHNGYWNhZGUgfCBudWxsLFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgbW9iaWxlU3lzdGVtRmFjYWRlOiBNb2JpbGVTeXN0ZW1GYWNhZGUgfCBudWxsLFxuXHQpIHt9XG5cblx0YXN5bmMgbWlncmF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHR0cnkge1xuXHRcdFx0YXdhaXQgdGhpcy5taWdyYXRlVG9OYXRpdmVDcmVkZW50aWFscygpXG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcihlKVxuXHRcdFx0YXdhaXQgRGlhbG9nLm1lc3NhZ2UoXG5cdFx0XHRcdGxhbmcubWFrZVRyYW5zbGF0aW9uKFwiY29uZmlybV9tc2dcIiwgXCJDb3VsZCBub3QgbWlncmF0ZSBjcmVkZW50aWFsc1wiKSxcblx0XHRcdFx0YCR7ZS5uYW1lfSAke2UubWVzc2FnZX1cbiR7ZS5zdGFja31gLFxuXHRcdFx0KS50aGVuKCgpID0+IHRoaXMubWlncmF0ZSgpKVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBNaWdyYXRlIGV4aXN0aW5nIGNyZWRlbnRpYWxzIHRvIG5hdGl2ZSBkYiBpZiB0aGUgbWlncmF0aW9uIGhhdmVuJ3QgaGFwcGVuZWQgb25jZS4gQWxzbyBnZW5lcmF0ZSBkYXRhYmFzZSBrZXkgaWYgbWlzc2luZy5cblx0ICovXG5cdHByaXZhdGUgYXN5bmMgbWlncmF0ZVRvTmF0aXZlQ3JlZGVudGlhbHMoKSB7XG5cdFx0aWYgKHRoaXMubmF0aXZlQ3JlZGVudGlhbEZhY2FkZSAhPSBudWxsICYmICF0aGlzLmRldmljZUNvbmZpZy5nZXRJc0NyZWRlbnRpYWxzTWlncmF0ZWRUb05hdGl2ZSgpKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIk1pZ3JhdGluZyBjcmVkZW50aWFscyB0byBuYXRpdmVcIilcblx0XHRcdGNvbnN0IGFsbFBlcnNpc3RlZENyZWRlbnRpYWxzID0gdGhpcy5kZXZpY2VDb25maWcuZ2V0Q3JlZGVudGlhbHMoKS5tYXAoZGV2aWNlQ29uZmlnQ3JlZGVudGlhbHNUb1BlcnNpc3RlZClcblx0XHRcdGNvbnN0IGVuY3J5cHRpb25Nb2RlID0gYXdhaXQgdGhpcy5kZXZpY2VDb25maWcuZ2V0Q3JlZGVudGlhbEVuY3J5cHRpb25Nb2RlKClcblx0XHRcdGNvbnN0IGNyZWRlbnRpYWxzS2V5ID0gYXdhaXQgdGhpcy5kZXZpY2VDb25maWcuZ2V0Q3JlZGVudGlhbHNFbmNyeXB0aW9uS2V5KClcblx0XHRcdGlmIChlbmNyeXB0aW9uTW9kZSAhPSBudWxsICYmIGNyZWRlbnRpYWxzS2V5ICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKHRoaXMubW9iaWxlU3lzdGVtRmFjYWRlICE9IG51bGwpIHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLm1vYmlsZVN5c3RlbUZhY2FkZS5zZXRBcHBMb2NrTWV0aG9kKGNyZWRlbnRpYWxFbmNyeXB0aW9uTW9kZVRvQXBwTG9ja01ldGhvZChlbmNyeXB0aW9uTW9kZSkpXG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc29sZS5sb2coXCJtaWdyYXRpbmcgY3JlZGVudGlhbHNcIiwgYWxsUGVyc2lzdGVkQ3JlZGVudGlhbHMpXG5cdFx0XHRcdGF3YWl0IHRoaXMubmF0aXZlQ3JlZGVudGlhbEZhY2FkZS5taWdyYXRlVG9OYXRpdmVDcmVkZW50aWFscyhhbGxQZXJzaXN0ZWRDcmVkZW50aWFscywgZW5jcnlwdGlvbk1vZGUsIGNyZWRlbnRpYWxzS2V5KVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJTa2lwcGluZyBtaWdyYXRpb24gYXMgZW5jcnlwdGlvbiBkYXRhIGlzIG5vdCB0aGVyZVwiKVxuXHRcdFx0fVxuXHRcdFx0Y29uc29sZS5sb2coXCJTdG9yZWQgY3JlZGVudGlhbHMgaW4gbmF0aXZlXCIpXG5cblx0XHRcdGF3YWl0IHRoaXMuZGV2aWNlQ29uZmlnLmNsZWFyQ3JlZGVudGlhbHNEYXRhKClcblxuXHRcdFx0Y29uc29sZS5sb2coXCJDbGVhcmVkIGNyZWRlbnRpYWxzIGluIGRldmljZUNvbmZpZ1wiKVxuXG5cdFx0XHR0aGlzLmRldmljZUNvbmZpZy5zZXRJc0NyZWRlbnRpYWxzTWlncmF0ZWRUb05hdGl2ZSh0cnVlKVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZXZpY2VDb25maWdDcmVkZW50aWFsc1RvUGVyc2lzdGVkKGRldmljZUNvbmZpZ0NyZWRlbnRpYWxzOiBEZXZpY2VDb25maWdDcmVkZW50aWFscyk6IFBlcnNpc3RlZENyZWRlbnRpYWxzIHtcblx0cmV0dXJuIHtcblx0XHRjcmVkZW50aWFsSW5mbzogZGV2aWNlQ29uZmlnQ3JlZGVudGlhbHMuY3JlZGVudGlhbEluZm8sXG5cdFx0ZW5jcnlwdGVkUGFzc3dvcmQ6IGRldmljZUNvbmZpZ0NyZWRlbnRpYWxzLmVuY3J5cHRlZFBhc3N3b3JkLFxuXHRcdGVuY3J5cHRlZFBhc3NwaHJhc2VLZXk6IG1hcE51bGxhYmxlKGRldmljZUNvbmZpZ0NyZWRlbnRpYWxzLmVuY3J5cHRlZFBhc3NwaHJhc2VLZXksIGJhc2U2NFRvVWludDhBcnJheSksXG5cdFx0YWNjZXNzVG9rZW46IGJhc2U2NFRvVWludDhBcnJheShkZXZpY2VDb25maWdDcmVkZW50aWFscy5hY2Nlc3NUb2tlbiksXG5cdFx0ZGF0YWJhc2VLZXk6IG1hcE51bGxhYmxlKGRldmljZUNvbmZpZ0NyZWRlbnRpYWxzLmRhdGFiYXNlS2V5LCBiYXNlNjRUb1VpbnQ4QXJyYXkpLFxuXHR9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFVQSxTQUFTLHdDQUF3Q0EsTUFBK0M7QUFDL0YsU0FBUSxNQUFSO0FBQ0MsT0FBSyx5QkFBeUI7QUFDOUIsT0FBSyx5QkFBeUIsWUFDN0IsUUFBTyxjQUFjO0FBQ3RCLE9BQUsseUJBQXlCLFdBQzdCLFFBQU8sY0FBYztBQUN0QixPQUFLLHlCQUF5QixnQkFDN0IsUUFBTyxjQUFjO0NBQ3RCO0FBQ0Q7SUFFWSwyQkFBTixNQUErQjtDQUNyQyxZQUNrQkMsY0FDQUMsd0JBQ0FDLG9CQUNoQjtFQXFERixLQXhEa0I7RUF3RGpCLEtBdkRpQjtFQXVEaEIsS0F0RGdCO0NBQ2Q7Q0FFSixNQUFNLFVBQXlCO0FBQzlCLE1BQUk7QUFDSCxTQUFNLEtBQUssNEJBQTRCO0VBQ3ZDLFNBQVEsR0FBRztBQUNYLFdBQVEsTUFBTSxFQUFFO0FBQ2hCLFNBQU0sT0FBTyxRQUNaLEtBQUssZ0JBQWdCLGVBQWUsZ0NBQWdDLEdBQ25FLEVBQUUsRUFBRSxLQUFLLEdBQUcsRUFBRSxRQUFRO0VBQ3pCLEVBQUUsTUFBTSxFQUNOLENBQUMsS0FBSyxNQUFNLEtBQUssU0FBUyxDQUFDO0VBQzVCO0NBQ0Q7Ozs7Q0FLRCxNQUFjLDZCQUE2QjtBQUMxQyxNQUFJLEtBQUssMEJBQTBCLFNBQVMsS0FBSyxhQUFhLGtDQUFrQyxFQUFFO0FBQ2pHLFdBQVEsSUFBSSxrQ0FBa0M7R0FDOUMsTUFBTSwwQkFBMEIsS0FBSyxhQUFhLGdCQUFnQixDQUFDLElBQUksbUNBQW1DO0dBQzFHLE1BQU0saUJBQWlCLE1BQU0sS0FBSyxhQUFhLDZCQUE2QjtHQUM1RSxNQUFNLGlCQUFpQixNQUFNLEtBQUssYUFBYSw2QkFBNkI7QUFDNUUsT0FBSSxrQkFBa0IsUUFBUSxrQkFBa0IsTUFBTTtBQUNyRCxRQUFJLEtBQUssc0JBQXNCLEtBQzlCLE9BQU0sS0FBSyxtQkFBbUIsaUJBQWlCLHdDQUF3QyxlQUFlLENBQUM7QUFFeEcsWUFBUSxJQUFJLHlCQUF5Qix3QkFBd0I7QUFDN0QsVUFBTSxLQUFLLHVCQUF1QiwyQkFBMkIseUJBQXlCLGdCQUFnQixlQUFlO0dBQ3JILE1BQ0EsU0FBUSxJQUFJLHFEQUFxRDtBQUVsRSxXQUFRLElBQUksK0JBQStCO0FBRTNDLFNBQU0sS0FBSyxhQUFhLHNCQUFzQjtBQUU5QyxXQUFRLElBQUksc0NBQXNDO0FBRWxELFFBQUssYUFBYSxpQ0FBaUMsS0FBSztFQUN4RDtDQUNEO0FBQ0Q7QUFFRCxTQUFTLG1DQUFtQ0MseUJBQXdFO0FBQ25ILFFBQU87RUFDTixnQkFBZ0Isd0JBQXdCO0VBQ3hDLG1CQUFtQix3QkFBd0I7RUFDM0Msd0JBQXdCLFlBQVksd0JBQXdCLHdCQUF3QixtQkFBbUI7RUFDdkcsYUFBYSxtQkFBbUIsd0JBQXdCLFlBQVk7RUFDcEUsYUFBYSxZQUFZLHdCQUF3QixhQUFhLG1CQUFtQjtDQUNqRjtBQUNEIn0=