
//#region src/common/api/worker/Compression.ts
const UNCOMPRESSED_MAX_SIZE = 1048576;
function uncompress(input) {
	const endIndex = input.length;
	let output = new Uint8Array(input.length * 6);
	let j = 0;
	for (let i = 0, n = endIndex; i < n;) {
		let token = input[i++];
		let literals_length = token >> 4;
		if (literals_length > 0) {
			let l$1 = literals_length + 240;
			while (l$1 === 255) {
				l$1 = input[i++];
				literals_length += l$1;
			}
			let end$1 = i + literals_length;
			const sizeNeeded$1 = j + (end$1 - i);
			if (output.length < sizeNeeded$1) {
				const newSize = Math.max(output.length * 2, sizeNeeded$1);
				const newOutput = new Uint8Array(newSize);
				newOutput.set(output);
				output = newOutput;
			}
			while (i < end$1) output[j++] = input[i++];
			if (i === n) break;
		}
		let offset = input[i++] | input[i++] << 8;
		if (offset === 0 || offset > j) throw new Error(`Invalid offset value. i: ${i}, -(i-2): ${-(i - 2)}`);
		let match_length = token & 15;
		let l = match_length + 240;
		while (l === 255) {
			l = input[i++];
			match_length += l;
		}
		let pos = j - offset;
		let end = j + match_length + 4;
		const sizeNeeded = end;
		if (output.length < sizeNeeded) {
			const newSize = Math.max(output.length * 2, sizeNeeded);
			const newOutput = new Uint8Array(newSize);
			newOutput.set(output);
			output = newOutput;
		}
		while (j < end) output[j++] = output[pos++];
	}
	return output.slice(0, j);
}
const MAX_INPUT_SIZE = 2113929216;
const MIN_MATCH = 4;
const HASH_LOG = 16;
const HASH_SHIFT = MIN_MATCH * 8 - HASH_LOG;
const HASH_SIZE = 1 << HASH_LOG;
const COPY_LENGTH = 8;
const MF_LIMIT = COPY_LENGTH + MIN_MATCH;
const SKIP_STRENGTH = 6;
const ML_BITS = 4;
const ML_MASK = (1 << ML_BITS) - 1;
const RUN_BITS = 8 - ML_BITS;
const RUN_MASK = (1 << RUN_BITS) - 1;
const HASHER = 2654435761;
function compressBound(isize) {
	return isize > MAX_INPUT_SIZE ? 0 : isize + isize / 255 + 16 | 0;
}
function compress(source) {
	if (source.length === 0) return new Uint8Array(0);
	const dest = new Uint8Array(compressBound(source.length));
	const hashTable = new Array(HASH_SIZE).fill(0);
	let sourcePos = 0;
	let destPos = 0;
	let anchor = 0;
	let step = 1;
	let findMatchAttempts = (1 << SKIP_STRENGTH) + 3;
	const srcLength = source.length - MF_LIMIT;
	while (sourcePos + MIN_MATCH < srcLength) {
		const sequenceLowBits = source[sourcePos + 1] << 8 | source[sourcePos];
		const sequenceHighBits = source[sourcePos + 3] << 8 | source[sourcePos + 2];
		const hash = Math.imul(sequenceLowBits | sequenceHighBits << 16, HASHER) >>> HASH_SHIFT;
		let ref = hashTable[hash] - 1;
		hashTable[hash] = sourcePos + 1;
		if (ref < 0 || sourcePos - ref >>> 16 > 0 || (source[ref + 3] << 8 | source[ref + 2]) != sequenceHighBits || (source[ref + 1] << 8 | source[ref]) != sequenceLowBits) {
			step = findMatchAttempts++ >> SKIP_STRENGTH;
			sourcePos += step;
			continue;
		}
		findMatchAttempts = (1 << SKIP_STRENGTH) + 3;
		const literals_length$1 = sourcePos - anchor;
		const offset = sourcePos - ref;
		sourcePos += MIN_MATCH;
		ref += MIN_MATCH;
		let match_length = sourcePos;
		while (sourcePos < srcLength && source[sourcePos] == source[ref]) {
			sourcePos++;
			ref++;
		}
		match_length = sourcePos - match_length;
		const token = match_length < ML_MASK ? match_length : ML_MASK;
		if (literals_length$1 >= RUN_MASK) {
			let len;
			dest[destPos++] = (RUN_MASK << ML_BITS) + token;
			for (len = literals_length$1 - RUN_MASK; len > 254; len -= 255) dest[destPos++] = 255;
			dest[destPos++] = len;
		} else dest[destPos++] = (literals_length$1 << ML_BITS) + token;
		for (let i = 0; i < literals_length$1; i++) dest[destPos++] = source[anchor + i];
		dest[destPos++] = offset;
		dest[destPos++] = offset >> 8;
		if (match_length >= ML_MASK) {
			match_length -= ML_MASK;
			while (match_length >= 255) {
				match_length -= 255;
				dest[destPos++] = 255;
			}
			dest[destPos++] = match_length;
		}
		anchor = sourcePos;
	}
	const literals_length = source.length - anchor;
	if (literals_length >= RUN_MASK) {
		let ln = literals_length - RUN_MASK;
		dest[destPos++] = RUN_MASK << ML_BITS;
		while (ln > 254) {
			dest[destPos++] = 255;
			ln -= 255;
		}
		dest[destPos++] = ln;
	} else dest[destPos++] = literals_length << ML_BITS;
	sourcePos = anchor;
	while (sourcePos < source.length) dest[destPos++] = source[sourcePos++];
	return dest.slice(0, destPos);
}

//#endregion
export { UNCOMPRESSED_MAX_SIZE, compress, uncompress };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,