import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { LOGIN_TITLE, isAdminClient, isApp, isDesktop, isIOSApp } from "./Env-chunk.js";
import "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { assertNotNull, defer, delay, neverNull, noOp, ofClass } from "./dist2-chunk.js";
import { getThemeCustomizations } from "./WhitelabelCustomizations-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import "./styles-chunk.js";
import "./theme-chunk.js";
import { CloseEventBusOption, Const, SecondFactorType } from "./TutanotaConstants-chunk.js";
import "./KeyManager-chunk.js";
import { windowFacade } from "./WindowFacade-chunk.js";
import "./RootView-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./luxon-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { createReceiveInfoServiceData } from "./TypeRefs-chunk.js";
import "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import { CustomerTypeRef, SecondFactorTypeRef, createCustomerProperties } from "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import "./CalendarUtils-chunk.js";
import "./ImportExportUtils-chunk.js";
import "./FormatValidator-chunk.js";
import "./stream-chunk.js";
import { deviceConfig } from "./DeviceConfig-chunk.js";
import "./Logger-chunk.js";
import "./EntityFunctions-chunk.js";
import "./TypeModels3-chunk.js";
import "./ModelInfo-chunk.js";
import "./ErrorUtils-chunk.js";
import { LockedError } from "./RestError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import { isUpdateForTypeRef } from "./EntityUpdateUtils-chunk.js";
import { SessionType } from "./SessionType-chunk.js";
import "./CredentialType-chunk.js";
import "./RestClient-chunk.js";
import { ReceiveInfoService } from "./Services2-chunk.js";
import "./GroupUtils-chunk.js";
import { ButtonType } from "./Button-chunk.js";
import "./Icons-chunk.js";
import "./DialogHeaderBar-chunk.js";
import "./CountryList-chunk.js";
import { Dialog } from "./Dialog-chunk.js";
import "./Icon-chunk.js";
import "./AriaUtils-chunk.js";
import "./IconButton-chunk.js";
import { getHourCycle } from "./Formatter-chunk.js";
import { notifications } from "./Notifications-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import "./UserError-chunk.js";
import "./MailAddressParser-chunk.js";
import "./BlobUtils-chunk.js";
import "./FileUtils-chunk.js";
import "./ProgressDialog-chunk.js";
import "./SharedMailUtils-chunk.js";
import "./PasswordUtils-chunk.js";
import "./Recipient-chunk.js";
import { showMoreStorageNeededOrderDialog } from "./SubscriptionDialogs-chunk.js";
import "./ExternalLink-chunk.js";
import "./ToggleButton-chunk.js";
import "./SnackBar-chunk.js";
import "./Credentials-chunk.js";
import { show } from "./NotificationOverlay-chunk.js";
import "./Checkbox-chunk.js";
import "./Expander-chunk.js";
import "./ClipboardUtils-chunk.js";
import "./Services4-chunk.js";
import "./BubbleButton-chunk.js";
import "./ErrorReporter-chunk.js";
import "./PasswordField-chunk.js";
import "./PasswordRequestDialog-chunk.js";
import "./ErrorHandlerImpl-chunk.js";
import "./LoginScreenHeader-chunk.js";
import "./LoginButton-chunk.js";
import { checkApprovalStatus } from "./LoginUtils-chunk.js";
import { StorageBehavior } from "./UsageTestModel-chunk.js";
import { CredentialEncryptionMode } from "./CredentialEncryptionMode-chunk.js";
import { isNotificationCurrentlyActive, loadOutOfOfficeNotification } from "./OutOfOfficeNotificationUtils-chunk.js";
import { usingKeychainAuthenticationWithOptions } from "./CredentialsProvider-chunk.js";

//#region src/common/login/PostLoginUtils.ts
const reminderCutoffDate = new Date("2023-09-20T13:00:00.000Z");
async function shouldShowUpgradeReminder(userController, date) {
	if (!userController.isGlobalAdmin() || await userController.isNewPaidPlan() || isIOSApp()) return false;
	const customerInfo = await userController.loadCustomerInfo();
	const customerProperties = await userController.loadCustomerProperties();
	if (userController.isFreeAccount()) {
		const isOldEnoughForInitialReminder = customerProperties.lastUpgradeReminder == null && date.getTime() - customerInfo.creationTime.getTime() > Const.INITIAL_UPGRADE_REMINDER_INTERVAL_MS;
		const wasRemindedLongAgo = customerProperties.lastUpgradeReminder != null && date.getTime() - customerProperties.lastUpgradeReminder.getTime() > Const.REPEATED_UPGRADE_REMINDER_INTERVAL_MS;
		return isOldEnoughForInitialReminder || wasRemindedLongAgo;
	} else if (!(await userController.loadCustomer()).businessUse) return customerProperties.lastUpgradeReminder == null || customerProperties.lastUpgradeReminder.getTime() < reminderCutoffDate.getTime();
else return false;
}
async function shouldShowStorageWarning(userController, userManagementFacade, customerFacade) {
	const customerInfo = await userController.loadCustomerInfo();
	if (await userController.isNewPaidPlan() || userController.isFreeAccount()) {
		const usedStorage = await userManagementFacade.readUsedUserStorage(userController.user);
		return isOverStorageLimit(usedStorage, Number(customerInfo.perUserStorageCapacity) * Const.MEMORY_GB_FACTOR);
	} else {
		if (!userController.isGlobalAdmin()) return false;
		const customerId = assertNotNull(userController.user.customer);
		const usedStorage = await customerFacade.readUsedCustomerStorage(customerId);
		if (Number(usedStorage) > Const.MEMORY_GB_FACTOR * Const.MEMORY_WARNING_FACTOR) {
			const availableStorage = await customerFacade.readAvailableCustomerStorage(customerId);
			return isOverStorageLimit(usedStorage, availableStorage);
		} else return false;
	}
}
function isOverStorageLimit(usedStorageInBytes, availableStorageInBytes) {
	return usedStorageInBytes > availableStorageInBytes * Const.MEMORY_WARNING_FACTOR;
}

//#endregion
//#region src/common/login/PostLoginActions.ts
var PostLoginActions = class {
	constructor(credentialsProvider, secondFactorHandler, connectivityModel, logins, dateProvider, entityClient, userManagementFacade, customerFacade, themeController, showSetupWizard, syncExternalCalendars, setUpClientOnlyCalendars) {
		this.credentialsProvider = credentialsProvider;
		this.secondFactorHandler = secondFactorHandler;
		this.connectivityModel = connectivityModel;
		this.logins = logins;
		this.dateProvider = dateProvider;
		this.entityClient = entityClient;
		this.userManagementFacade = userManagementFacade;
		this.customerFacade = customerFacade;
		this.themeController = themeController;
		this.showSetupWizard = showSetupWizard;
		this.syncExternalCalendars = syncExternalCalendars;
		this.setUpClientOnlyCalendars = setUpClientOnlyCalendars;
	}
	async onPartialLoginSuccess(loggedInEvent) {
		windowFacade.addOnlineListener(() => {
			console.log(new Date().toISOString(), "online - try reconnect");
			if (this.logins.isFullyLoggedIn()) this.connectivityModel.tryReconnect(true, true, 2e3);
else this.logins.retryAsyncLogin();
		});
		windowFacade.addOfflineListener(() => {
			console.log(new Date().toISOString(), "offline - pause event bus");
			this.connectivityModel.close(CloseEventBusOption.Pause);
		});
		if (!this.logins.getUserController().isInternalUser()) {
			if (document.title === LOGIN_TITLE) document.title = "Tuta Mail";
			return;
		} else {
			let postLoginTitle = document.title === LOGIN_TITLE ? "Tuta Mail" : document.title;
			document.title = neverNull(this.logins.getUserController().userGroupInfo.mailAddress) + " - " + postLoginTitle;
		}
		notifications.requestPermission();
		if (loggedInEvent.sessionType === SessionType.Persistent && usingKeychainAuthenticationWithOptions() && await this.credentialsProvider.getCredentialEncryptionMode() == null) await this.credentialsProvider.setCredentialEncryptionMode(CredentialEncryptionMode.DEVICE_LOCK);
		lang.updateFormats({ hourCycle: getHourCycle(this.logins.getUserController().userSettingsGroupRoot) });
		if (isApp() || isDesktop()) await this.storeNewCustomThemes();
	}
	async onFullLoginSuccess(loggedInEvent) {
		if (loggedInEvent.sessionType === SessionType.Temporary || !this.logins.getUserController().isInternalUser()) return;
		this.fullLoginAsyncActions();
		this.showSetupWizardIfNeeded();
	}
	checkApprovalAfterSync() {
		const listenerDeferral = defer();
		const listener = async (updates) => {
			const customer = this.logins.getUserController().user.customer;
			const isCustomerUpdate = updates.some((update) => isUpdateForTypeRef(CustomerTypeRef, update) && update.instanceId === customer);
			if (customer != null && isCustomerUpdate) listenerDeferral.resolve();
		};
		locator.eventController.addEntityListener(listener);
		const timeoutPromise = delay(2e3);
		return Promise.race([listenerDeferral.promise, timeoutPromise]).then(() => {
			locator.eventController.removeEntityListener(listener);
			checkApprovalStatus(this.logins, true);
		});
	}
	async fullLoginAsyncActions() {
		this.checkApprovalAfterSync();
		await this.showUpgradeReminderIfNeeded();
		await this.checkStorageLimit();
		this.secondFactorHandler.setupAcceptOtherClientLoginListener();
		if (!isAdminClient()) {
			await locator.mailboxModel.init();
			const calendarModel = await locator.calendarModel();
			await calendarModel.init();
			await this.remindActiveOutOfOfficeNotification();
		}
		if (isApp() || isDesktop()) {
			if (isApp() && deviceConfig.getIsSetupComplete() || isDesktop()) await locator.pushService.register();
else console.log("Skipping registering for notifications while setup dialog is shown");
			this.syncExternalCalendars();
		}
		this.setUpClientOnlyCalendars();
		if (this.logins.isGlobalAdminUserLoggedIn() && !isAdminClient()) {
			const receiveInfoData = createReceiveInfoServiceData({ language: lang.code });
			locator.serviceExecutor.post(ReceiveInfoService, receiveInfoData);
		}
		this.enforcePasswordChange();
		const usageTestModel = locator.usageTestModel;
		await usageTestModel.init();
		usageTestModel.setStorageBehavior(StorageBehavior.Persist);
		locator.usageTestController.setTests(await usageTestModel.loadActiveUsageTests());
		await locator.newsModel.loadNewsIds();
		mithril_default.redraw();
	}
	deactivateOutOfOfficeNotification(notification) {
		notification.enabled = false;
		return this.entityClient.update(notification);
	}
	remindActiveOutOfOfficeNotification() {
		return loadOutOfOfficeNotification().then((notification) => {
			if (notification && isNotificationCurrentlyActive(notification, new Date())) {
				const notificationMessage = { view: () => {
					return mithril_default("", lang.get("outOfOfficeReminder_label"));
				} };
				show(notificationMessage, { label: "close_alt" }, [{
					label: "deactivate_action",
					click: () => this.deactivateOutOfOfficeNotification(notification),
					type: ButtonType.Primary
				}]);
			}
		});
	}
	async storeNewCustomThemes() {
		const domainInfoAndConfig = await this.logins.getUserController().loadWhitelabelConfig();
		if (domainInfoAndConfig && domainInfoAndConfig.whitelabelConfig.jsonTheme) {
			const customizations = getThemeCustomizations(domainInfoAndConfig.whitelabelConfig);
			if (Object.keys(customizations).length > 0) {
				if (!customizations.themeId) customizations.themeId = domainInfoAndConfig.domainInfo.domain;
				await this.themeController.storeCustomThemeForCustomizations(customizations);
				const previouslySavedThemes = await this.themeController.getCustomThemes();
				const isExistingTheme = previouslySavedThemes.includes(domainInfoAndConfig.domainInfo.domain);
				if (isExistingTheme) await this.themeController.reloadTheme();
			}
		}
	}
	async checkStorageLimit() {
		if (await shouldShowStorageWarning(this.logins.getUserController(), this.userManagementFacade, this.customerFacade)) await showMoreStorageNeededOrderDialog("insufficientStorageWarning_msg");
	}
	async showUpgradeReminderIfNeeded() {
		if (await shouldShowUpgradeReminder(this.logins.getUserController(), new Date(this.dateProvider.now()))) {
			const confirmed = await Dialog.reminder(lang.get("upgradeReminderTitle_msg"), lang.get("premiumOffer_msg"));
			if (confirmed) {
				const wizard = await import("./UpgradeSubscriptionWizard-chunk.js");
				await wizard.showUpgradeWizard(this.logins);
			}
			const newCustomerProperties = createCustomerProperties(await this.logins.getUserController().loadCustomerProperties());
			newCustomerProperties.lastUpgradeReminder = new Date(this.dateProvider.now());
			this.entityClient.update(newCustomerProperties).catch(ofClass(LockedError, noOp));
		}
	}
	async enforcePasswordChange() {
		if (this.logins.getUserController().user.requirePasswordUpdate) {
			const { showChangeOwnPasswordDialog } = await import("./ChangePasswordDialogs2-chunk.js");
			await showChangeOwnPasswordDialog(false);
		}
		if (location.hostname === Const.DEFAULT_APP_DOMAIN) {
			const user = this.logins.getUserController().user;
			const secondFactors = await this.entityClient.loadAll(SecondFactorTypeRef, assertNotNull(user.auth).secondFactors);
			const webauthnFactors = secondFactors.filter((f) => f.type === SecondFactorType.webauthn || f.type === SecondFactorType.u2f);
			if (webauthnFactors.length > 0 && !webauthnFactors.some((f) => f.u2f && f.u2f?.appId == Const.WEBAUTHN_RP_ID)) {
				const dialog = Dialog.confirmMultiple("noKeysForThisDomain_msg", [{
					label: "skip_action",
					type: ButtonType.Secondary,
					click: () => dialog.close()
				}, {
					label: "settings_label",
					type: ButtonType.Primary,
					click: () => {
						dialog.close();
						mithril_default.route.set("/settings/login");
					}
				}]);
			}
		}
	}
	async showSetupWizardIfNeeded() {
		const isSetupComplete = deviceConfig.getIsSetupComplete();
		if (isApp() && !isSetupComplete) await this.showSetupWizard();
	}
};

//#endregion
export { PostLoginActions };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,