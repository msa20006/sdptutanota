import { __toESM } from "./chunk-chunk.js";
import { pMap } from "./dist2-chunk.js";
import { OperationType } from "./TutanotaConstants-chunk.js";
import { getLetId, isSameId } from "./EntityUtils-chunk.js";
import { ReceivedGroupInvitationTypeRef } from "./TypeRefs2-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { isUpdateForTypeRef } from "./EntityUpdateUtils-chunk.js";
import { getInvitationGroupType, loadReceivedGroupInvitations } from "./GroupUtils2-chunk.js";

//#region src/common/sharing/model/ReceivedGroupInvitationsModel.ts
var import_stream = __toESM(require_stream(), 1);
var ReceivedGroupInvitationsModel = class {
	invitations;
	constructor(groupType, eventController, entityClient, logins) {
		this.groupType = groupType;
		this.eventController = eventController;
		this.entityClient = entityClient;
		this.logins = logins;
		this.invitations = (0, import_stream.default)([]);
	}
	init() {
		this.eventController.addEntityListener(this.entityEventsReceived);
		loadReceivedGroupInvitations(this.logins.getUserController(), this.entityClient, this.groupType).then((invitations) => this.invitations(invitations.filter((invitation) => this.hasMatchingGroupType(invitation))));
	}
	dispose() {
		this.eventController.removeEntityListener(this.entityEventsReceived);
		this.invitations.end(true);
	}
	entityEventsReceived = (updates) => {
		return pMap(updates, (update) => {
			if (isUpdateForTypeRef(ReceivedGroupInvitationTypeRef, update)) {
				const updateId = [update.instanceListId, update.instanceId];
				if (update.operation === OperationType.CREATE) return this.entityClient.load(ReceivedGroupInvitationTypeRef, updateId).then((invitation) => {
					if (this.hasMatchingGroupType(invitation)) this.invitations(this.invitations().concat(invitation));
				});
else if (update.operation === OperationType.DELETE) this.invitations(this.invitations().filter((invitation) => !isSameId(getLetId(invitation), updateId)));
			}
		});
	};
	hasMatchingGroupType(invitation) {
		return getInvitationGroupType(invitation) === this.groupType;
	}
};

//#endregion
export { ReceivedGroupInvitationsModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVjZWl2ZWRHcm91cEludml0YXRpb25zTW9kZWwtY2h1bmsuanMiLCJuYW1lcyI6WyJncm91cFR5cGU6IFR5cGVPZkdyb3VwIiwiZXZlbnRDb250cm9sbGVyOiBFdmVudENvbnRyb2xsZXIiLCJlbnRpdHlDbGllbnQ6IEVudGl0eUNsaWVudCIsImxvZ2luczogTG9naW5Db250cm9sbGVyIiwidXBkYXRlczogUmVhZG9ubHlBcnJheTxFbnRpdHlVcGRhdGVEYXRhPiIsImludml0YXRpb246IFJlY2VpdmVkR3JvdXBJbnZpdGF0aW9uIl0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9zaGFyaW5nL21vZGVsL1JlY2VpdmVkR3JvdXBJbnZpdGF0aW9uc01vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHJlYW0gZnJvbSBcIm1pdGhyaWwvc3RyZWFtXCJcbmltcG9ydCBTdHJlYW0gZnJvbSBcIm1pdGhyaWwvc3RyZWFtXCJcbmltcG9ydCB0eXBlIHsgUmVjZWl2ZWRHcm91cEludml0YXRpb24gfSBmcm9tIFwiLi4vLi4vYXBpL2VudGl0aWVzL3N5cy9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBSZWNlaXZlZEdyb3VwSW52aXRhdGlvblR5cGVSZWYgfSBmcm9tIFwiLi4vLi4vYXBpL2VudGl0aWVzL3N5cy9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBFbnRpdHlDbGllbnQgfSBmcm9tIFwiLi4vLi4vYXBpL2NvbW1vbi9FbnRpdHlDbGllbnRcIlxuaW1wb3J0IHsgRXZlbnRDb250cm9sbGVyIH0gZnJvbSBcIi4uLy4uL2FwaS9tYWluL0V2ZW50Q29udHJvbGxlclwiXG5pbXBvcnQgeyBnZXRJbnZpdGF0aW9uR3JvdXBUeXBlLCBsb2FkUmVjZWl2ZWRHcm91cEludml0YXRpb25zLCBTaGFyZWFibGVHcm91cFR5cGUgfSBmcm9tIFwiLi4vR3JvdXBVdGlsc1wiXG5pbXBvcnQgeyBPcGVyYXRpb25UeXBlIH0gZnJvbSBcIi4uLy4uL2FwaS9jb21tb24vVHV0YW5vdGFDb25zdGFudHNcIlxuaW1wb3J0IHR5cGUgeyBMb2dpbkNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vLi4vYXBpL21haW4vTG9naW5Db250cm9sbGVyXCJcbmltcG9ydCB7IGdldExldElkLCBpc1NhbWVJZCB9IGZyb20gXCIuLi8uLi9hcGkvY29tbW9uL3V0aWxzL0VudGl0eVV0aWxzXCJcbmltcG9ydCB7IHByb21pc2VNYXAgfSBmcm9tIFwiQHR1dGFvL3R1dGFub3RhLXV0aWxzXCJcbmltcG9ydCB7IEVudGl0eVVwZGF0ZURhdGEsIGlzVXBkYXRlRm9yVHlwZVJlZiB9IGZyb20gXCIuLi8uLi9hcGkvY29tbW9uL3V0aWxzL0VudGl0eVVwZGF0ZVV0aWxzLmpzXCJcblxuZXhwb3J0IGNsYXNzIFJlY2VpdmVkR3JvdXBJbnZpdGF0aW9uc01vZGVsPFR5cGVPZkdyb3VwIGV4dGVuZHMgU2hhcmVhYmxlR3JvdXBUeXBlPiB7XG5cdHJlYWRvbmx5IGludml0YXRpb25zOiBTdHJlYW08QXJyYXk8UmVjZWl2ZWRHcm91cEludml0YXRpb24+PlxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgZ3JvdXBUeXBlOiBUeXBlT2ZHcm91cCxcblx0XHRwcml2YXRlIHJlYWRvbmx5IGV2ZW50Q29udHJvbGxlcjogRXZlbnRDb250cm9sbGVyLFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgZW50aXR5Q2xpZW50OiBFbnRpdHlDbGllbnQsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBsb2dpbnM6IExvZ2luQ29udHJvbGxlcixcblx0KSB7XG5cdFx0dGhpcy5pbnZpdGF0aW9ucyA9IHN0cmVhbTxBcnJheTxSZWNlaXZlZEdyb3VwSW52aXRhdGlvbj4+KFtdKVxuXHR9XG5cblx0aW5pdCgpIHtcblx0XHR0aGlzLmV2ZW50Q29udHJvbGxlci5hZGRFbnRpdHlMaXN0ZW5lcih0aGlzLmVudGl0eUV2ZW50c1JlY2VpdmVkKVxuXHRcdGxvYWRSZWNlaXZlZEdyb3VwSW52aXRhdGlvbnModGhpcy5sb2dpbnMuZ2V0VXNlckNvbnRyb2xsZXIoKSwgdGhpcy5lbnRpdHlDbGllbnQsIHRoaXMuZ3JvdXBUeXBlKS50aGVuKChpbnZpdGF0aW9ucykgPT5cblx0XHRcdHRoaXMuaW52aXRhdGlvbnMoaW52aXRhdGlvbnMuZmlsdGVyKChpbnZpdGF0aW9uKSA9PiB0aGlzLmhhc01hdGNoaW5nR3JvdXBUeXBlKGludml0YXRpb24pKSksXG5cdFx0KVxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblx0XHR0aGlzLmV2ZW50Q29udHJvbGxlci5yZW1vdmVFbnRpdHlMaXN0ZW5lcih0aGlzLmVudGl0eUV2ZW50c1JlY2VpdmVkKVxuXHRcdHRoaXMuaW52aXRhdGlvbnMuZW5kKHRydWUpXG5cdH1cblxuXHRwcml2YXRlIHJlYWRvbmx5IGVudGl0eUV2ZW50c1JlY2VpdmVkID0gKHVwZGF0ZXM6IFJlYWRvbmx5QXJyYXk8RW50aXR5VXBkYXRlRGF0YT4pID0+IHtcblx0XHRyZXR1cm4gcHJvbWlzZU1hcCh1cGRhdGVzLCAodXBkYXRlKSA9PiB7XG5cdFx0XHRpZiAoaXNVcGRhdGVGb3JUeXBlUmVmKFJlY2VpdmVkR3JvdXBJbnZpdGF0aW9uVHlwZVJlZiwgdXBkYXRlKSkge1xuXHRcdFx0XHRjb25zdCB1cGRhdGVJZCA9IFt1cGRhdGUuaW5zdGFuY2VMaXN0SWQsIHVwZGF0ZS5pbnN0YW5jZUlkXSBhcyBjb25zdFxuXG5cdFx0XHRcdGlmICh1cGRhdGUub3BlcmF0aW9uID09PSBPcGVyYXRpb25UeXBlLkNSRUFURSkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmVudGl0eUNsaWVudC5sb2FkKFJlY2VpdmVkR3JvdXBJbnZpdGF0aW9uVHlwZVJlZiwgdXBkYXRlSWQpLnRoZW4oKGludml0YXRpb24pID0+IHtcblx0XHRcdFx0XHRcdGlmICh0aGlzLmhhc01hdGNoaW5nR3JvdXBUeXBlKGludml0YXRpb24pKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuaW52aXRhdGlvbnModGhpcy5pbnZpdGF0aW9ucygpLmNvbmNhdChpbnZpdGF0aW9uKSlcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KVxuXHRcdFx0XHR9IGVsc2UgaWYgKHVwZGF0ZS5vcGVyYXRpb24gPT09IE9wZXJhdGlvblR5cGUuREVMRVRFKSB7XG5cdFx0XHRcdFx0dGhpcy5pbnZpdGF0aW9ucyh0aGlzLmludml0YXRpb25zKCkuZmlsdGVyKChpbnZpdGF0aW9uKSA9PiAhaXNTYW1lSWQoZ2V0TGV0SWQoaW52aXRhdGlvbiksIHVwZGF0ZUlkKSkpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXHR9XG5cblx0cHJpdmF0ZSBoYXNNYXRjaGluZ0dyb3VwVHlwZShpbnZpdGF0aW9uOiBSZWNlaXZlZEdyb3VwSW52aXRhdGlvbik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBnZXRJbnZpdGF0aW9uR3JvdXBUeXBlKGludml0YXRpb24pID09PSB0aGlzLmdyb3VwVHlwZVxuXHR9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBYWEsZ0NBQU4sTUFBNEU7Q0FDbEYsQUFBUztDQUVULFlBQ2tCQSxXQUNBQyxpQkFDQUMsY0FDQUMsUUFDaEI7RUFzQ0YsS0ExQ2tCO0VBMENqQixLQXpDaUI7RUF5Q2hCLEtBeENnQjtFQXdDZixLQXZDZTtBQUVqQixPQUFLLGNBQWMsMkJBQXVDLENBQUUsRUFBQztDQUM3RDtDQUVELE9BQU87QUFDTixPQUFLLGdCQUFnQixrQkFBa0IsS0FBSyxxQkFBcUI7QUFDakUsK0JBQTZCLEtBQUssT0FBTyxtQkFBbUIsRUFBRSxLQUFLLGNBQWMsS0FBSyxVQUFVLENBQUMsS0FBSyxDQUFDLGdCQUN0RyxLQUFLLFlBQVksWUFBWSxPQUFPLENBQUMsZUFBZSxLQUFLLHFCQUFxQixXQUFXLENBQUMsQ0FBQyxDQUMzRjtDQUNEO0NBRUQsVUFBVTtBQUNULE9BQUssZ0JBQWdCLHFCQUFxQixLQUFLLHFCQUFxQjtBQUNwRSxPQUFLLFlBQVksSUFBSSxLQUFLO0NBQzFCO0NBRUQsQUFBaUIsdUJBQXVCLENBQUNDLFlBQTZDO0FBQ3JGLFNBQU8sS0FBVyxTQUFTLENBQUMsV0FBVztBQUN0QyxPQUFJLG1CQUFtQixnQ0FBZ0MsT0FBTyxFQUFFO0lBQy9ELE1BQU0sV0FBVyxDQUFDLE9BQU8sZ0JBQWdCLE9BQU8sVUFBVztBQUUzRCxRQUFJLE9BQU8sY0FBYyxjQUFjLE9BQ3RDLFFBQU8sS0FBSyxhQUFhLEtBQUssZ0NBQWdDLFNBQVMsQ0FBQyxLQUFLLENBQUMsZUFBZTtBQUM1RixTQUFJLEtBQUsscUJBQXFCLFdBQVcsQ0FDeEMsTUFBSyxZQUFZLEtBQUssYUFBYSxDQUFDLE9BQU8sV0FBVyxDQUFDO0lBRXhELEVBQUM7U0FDUSxPQUFPLGNBQWMsY0FBYyxPQUM3QyxNQUFLLFlBQVksS0FBSyxhQUFhLENBQUMsT0FBTyxDQUFDLGdCQUFnQixTQUFTLFNBQVMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBRXZHO0VBQ0QsRUFBQztDQUNGO0NBRUQsQUFBUSxxQkFBcUJDLFlBQThDO0FBQzFFLFNBQU8sdUJBQXVCLFdBQVcsS0FBSyxLQUFLO0NBQ25EO0FBQ0QifQ==