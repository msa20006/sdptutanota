import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { downcast } from "./dist2-chunk.js";
import { Request } from "./MessageDispatcher-chunk.js";

//#region src/common/api/common/WorkerProxy.ts
function exposeRemote(requestSender) {
	const workerProxy = new Proxy({}, { get: (_, property) => {
		return facadeProxy(requestSender, property);
	} });
	return downcast(workerProxy);
}
function exposeLocalDelayed(impls) {
	return async (message) => {
		const [facade, fn, args] = message.args;
		const init = downcast(impls)[facade];
		if (init == null) throw new ProgrammingError(`Facade is not exposed: ${facade}.${fn} (exposeLocal)`);
		const impl = await init();
		if (impl == null) throw new ProgrammingError(`Facade is not lazy: ${facade}.${fn} (exposeLocalDelayed)`);
		return downcast(impl)[fn](...args);
	};
}
/**
* Generates proxy which will generate methods which will simulate methods of the facade.
*/
function facadeProxy(requestSender, facadeName) {
	return new Proxy({}, { get: (_, property) => {
		if (property === "then") return undefined;
else return (...args) => {
			const request = new Request("facade", [
				facadeName,
				property,
				args
			]);
			return requestSender(request);
		};
	} });
}

//#endregion
export { exposeLocalDelayed, exposeRemote };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV29ya2VyUHJveHktY2h1bmsuanMiLCJuYW1lcyI6WyJyZXF1ZXN0U2VuZGVyOiBSZXF1ZXN0U2VuZGVyPFwiZmFjYWRlXCI+IiwiXzogb2JqZWN0IiwicHJvcGVydHk6IHN0cmluZyIsImltcGxzOiBUIiwibWVzc2FnZTogUmVxdWVzdDxJbmNvbWluZ1JlcXVlc3RUeXBlPiIsImZhY2FkZU5hbWU6IHN0cmluZyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vYXBpL2NvbW1vbi9Xb3JrZXJQcm94eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIEZ1bmN0aW9ucyB0byBhdXRvbWF0aWNhbGx5IGV4cG9zZSBjZXJ0YWluIGludGVyZmFjZXMgYWNyb3NzIHRoZSBXb3JrZXJQcm90b2NvbCBRdWV1ZS5cbiAqL1xuaW1wb3J0IHsgZG93bmNhc3QgfSBmcm9tIFwiQHR1dGFvL3R1dGFub3RhLXV0aWxzXCJcbmltcG9ydCB7IFJlcXVlc3QgfSBmcm9tIFwiLi90aHJlYWRpbmcvTWVzc2FnZURpc3BhdGNoZXIuanNcIlxuaW1wb3J0IHsgUHJvZ3JhbW1pbmdFcnJvciB9IGZyb20gXCIuL2Vycm9yL1Byb2dyYW1taW5nRXJyb3JcIlxuXG50eXBlIFJlcXVlc3RTZW5kZXI8UmVxdWVzdFR5cGVzPiA9IChhcmcwOiBSZXF1ZXN0PFJlcXVlc3RUeXBlcz4pID0+IFByb21pc2U8YW55PlxuXG4vKipcbiAqIEdlbmVyYXRlcyBwcm94eSB3aGVyZSBlYWNoIGZpZWxkIHdpbGwgYmUgdHJlYXRlZCBhcyBhbiBpbnRlcmZhY2Ugd2l0aCBhc3luYyBtZXRob2RzLiBFYWNoIG1ldGhvZCB3aWxsIGRlbGVnYXRlIHRvIHRoZVxuICoge0BwYXJhbSByZXF1ZXN0U2VuZGVyfS5cbiAqIEF0dGVudGlvbiEgTWFrZSBzdXJlIHRoYXQgdGhlICpvbmx5KiBmaWVsZHMgb24gVCBhcmUgZmFjYWRlcy4gRXZlcnkgZmFjYWRlIG1ldGhvZCBtdXN0IHJldHVybiBwcm9taXNlIG9yIEJhZCBUaGluZ3Mgd2lsbCBoYXBwZW4uXG4gKiBZb3Ugc2hvdWxkIHNwZWNpZnkgVCBleHBsaWNpdGx5IHRvIGF2b2lkIG1pc3Rha2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwb3NlUmVtb3RlPFQ+KHJlcXVlc3RTZW5kZXI6IFJlcXVlc3RTZW5kZXI8XCJmYWNhZGVcIj4pOiBUIHtcblx0Ly8gT3V0ZXIgcHJveHkgaXMganVzdCB1c2VkIHRvIGdlbmVyYXRlIGluZGl2aWR1YWwgZmFjYWRlc1xuXHRjb25zdCB3b3JrZXJQcm94eSA9IG5ldyBQcm94eShcblx0XHR7fSxcblx0XHR7XG5cdFx0XHRnZXQ6IChfOiBvYmplY3QsIHByb3BlcnR5OiBzdHJpbmcpID0+IHtcblx0XHRcdFx0cmV0dXJuIGZhY2FkZVByb3h5KHJlcXVlc3RTZW5kZXIsIHByb3BlcnR5KVxuXHRcdFx0fSxcblx0XHR9LFxuXHQpXG5cdHJldHVybiBkb3duY2FzdDxUPih3b3JrZXJQcm94eSlcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGhhbmRsZXIgd2hpY2ggd2lsbCBkZWxlZ2F0ZSB0byB7QHBhcmFtIGltcGxzfS5cbiAqIEF0dGVudGlvbiEgTWFrZSBzdXJlIHRoYXQgdGhlICpvbmx5KiBmaWVsZHMgb24gVCBhcmUgZmFjYWRlcy4gRXZlcnkgZmFjYWRlIG1ldGhvZCBtdXN0IHJldHVybiBwcm9taXNlIG9yIEJhZCBUaGluZ3Mgd2lsbCBoYXBwZW4uXG4gKiBZb3Ugc2hvdWxkIHNwZWNpZnkgVCBleHBsaWNpdGx5IHRvIGF2b2lkIG1pc3Rha2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwb3NlTG9jYWw8VCBleHRlbmRzIG9iamVjdCwgSW5jb21pbmdSZXF1ZXN0VHlwZT4oaW1wbHM6IFQpOiAobWVzc2FnZTogUmVxdWVzdDxJbmNvbWluZ1JlcXVlc3RUeXBlPikgPT4gUHJvbWlzZTxhbnk+IHtcblx0cmV0dXJuIChtZXNzYWdlOiBSZXF1ZXN0PEluY29taW5nUmVxdWVzdFR5cGU+KSA9PiB7XG5cdFx0Y29uc3QgW2ZhY2FkZSwgZm4sIGFyZ3NdID0gbWVzc2FnZS5hcmdzXG5cdFx0Y29uc3QgaW1wbCA9IGRvd25jYXN0KGltcGxzKVtmYWNhZGVdXG5cblx0XHRpZiAoaW1wbCA9PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBuZXcgUHJvZ3JhbW1pbmdFcnJvcihgRmFjYWRlIGlzIG5vdCBleHBvc2VkOiAke2ZhY2FkZX0uJHtmbn0gKGV4cG9zZUxvY2FsKWApXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRvd25jYXN0KGltcGwpW2ZuXSguLi5hcmdzKVxuXHR9XG59XG5cbmV4cG9ydCB0eXBlIEZhY2FkZUltcGxzID0ge1xuXHRbZmFjYWRlOiBzdHJpbmddOiBhbnlcbn1cblxuZXhwb3J0IHR5cGUgRGVsYXllZEltcGxzPElNUExTIGV4dGVuZHMgRmFjYWRlSW1wbHM+ID0ge1xuXHRbUHJvcGVydHkgaW4ga2V5b2YgSU1QTFNdOiAoKSA9PiBQcm9taXNlPElNUExTW1Byb3BlcnR5XT5cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGhhbmRsZXIgd2hpY2ggd2lsbCBkZWxlZ2F0ZSB0byB7QHBhcmFtIGltcGxzfS5cbiAqIEF0dGVudGlvbiEgTWFrZSBzdXJlIHRoYXQgdGhlICpvbmx5KiBmaWVsZHMgb24gVCBhcmUgZnVuY3Rpb25zIHRoYXQgcmVzb2x2ZSB0byBmYWNhZGVzLiBFdmVyeSBmYWNhZGUgbWV0aG9kIG11c3QgcmV0dXJuIHByb21pc2Ugb3IgQmFkIFRoaW5ncyB3aWxsIGhhcHBlbi5cbiAqIFlvdSBzaG91bGQgc3BlY2lmeSBUIGV4cGxpY2l0bHkgdG8gYXZvaWQgbWlzdGFrZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBvc2VMb2NhbERlbGF5ZWQ8VCBleHRlbmRzIERlbGF5ZWRJbXBsczxGYWNhZGVJbXBscz4sIEluY29taW5nUmVxdWVzdFR5cGU+KFxuXHRpbXBsczogVCxcbik6IChtZXNzYWdlOiBSZXF1ZXN0PEluY29taW5nUmVxdWVzdFR5cGU+KSA9PiBQcm9taXNlPGFueT4ge1xuXHRyZXR1cm4gYXN5bmMgKG1lc3NhZ2U6IFJlcXVlc3Q8SW5jb21pbmdSZXF1ZXN0VHlwZT4pID0+IHtcblx0XHRjb25zdCBbZmFjYWRlLCBmbiwgYXJnc10gPSBtZXNzYWdlLmFyZ3Ncblx0XHRjb25zdCBpbml0ID0gZG93bmNhc3QoaW1wbHMpW2ZhY2FkZV1cblxuXHRcdGlmIChpbml0ID09IG51bGwpIHtcblx0XHRcdHRocm93IG5ldyBQcm9ncmFtbWluZ0Vycm9yKGBGYWNhZGUgaXMgbm90IGV4cG9zZWQ6ICR7ZmFjYWRlfS4ke2ZufSAoZXhwb3NlTG9jYWwpYClcblx0XHR9XG5cblx0XHRjb25zdCBpbXBsID0gYXdhaXQgaW5pdCgpXG5cdFx0aWYgKGltcGwgPT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3IFByb2dyYW1taW5nRXJyb3IoYEZhY2FkZSBpcyBub3QgbGF6eTogJHtmYWNhZGV9LiR7Zm59IChleHBvc2VMb2NhbERlbGF5ZWQpYClcblx0XHR9XG5cblx0XHRyZXR1cm4gZG93bmNhc3QoaW1wbClbZm5dKC4uLmFyZ3MpXG5cdH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgcHJveHkgd2hpY2ggd2lsbCBnZW5lcmF0ZSBtZXRob2RzIHdoaWNoIHdpbGwgc2ltdWxhdGUgbWV0aG9kcyBvZiB0aGUgZmFjYWRlLlxuICovXG5mdW5jdGlvbiBmYWNhZGVQcm94eShyZXF1ZXN0U2VuZGVyOiBSZXF1ZXN0U2VuZGVyPFwiZmFjYWRlXCI+LCBmYWNhZGVOYW1lOiBzdHJpbmcpIHtcblx0cmV0dXJuIG5ldyBQcm94eShcblx0XHR7fSxcblx0XHR7XG5cdFx0XHRnZXQ6IChfOiBvYmplY3QsIHByb3BlcnR5OiBzdHJpbmcpID0+IHtcblx0XHRcdFx0Ly8gV2UgZ2VuZXJhdGUgd2hhdGV2ZXIgcHJvcGVydHkgaXMgYXNrZWQgZnJvbSB1cyBhbmQgd2UgYXNzdW1lIGl0IGlzIGEgZnVuY3Rpb24uIEl0IGlzIG5vcm1hbGx5IGVuZm9yY2VkIGJ5IHRoZSB0eXBlIHN5c3RlbVxuXHRcdFx0XHQvLyBidXQgcnVudGltZSBhbHNvIHRlc3RzIGZvciBjZXJ0YWluIHByb3BlcnRpZXMgZS5nLiB3aGVuIHJldHVybmluZyBhIHZhbHVlIGZyb20gYSBwcm9taXNlIGl0IHdpbGwgdHJ5IHRvIHRlc3Qgd2hldGhlciBpdFxuXHRcdFx0XHQvLyBpcyBcInByb21pc2FibGVcIi4gSXQgaXMgZG9pbmcgc28gYnkgY2hlY2tpbmcgd2hldGhlciB0aGVyZSdzIGEgXCJ0aGVuXCIgZnVuY3Rpb24uIFNvIHdlIGV4cGxpY2l0bHkgc2F5IHdlIGRvbid0IGhhdmUgc3VjaFxuXHRcdFx0XHQvLyBhIGZ1bmN0aW9uLlxuXHRcdFx0XHRpZiAocHJvcGVydHkgPT09IFwidGhlblwiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiAoLi4uYXJnczogYW55W10pID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdChcImZhY2FkZVwiIGFzIGNvbnN0LCBbZmFjYWRlTmFtZSwgcHJvcGVydHksIGFyZ3NdKVxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlcXVlc3RTZW5kZXIocmVxdWVzdClcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0fSxcblx0KVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7OztBQWVPLFNBQVMsYUFBZ0JBLGVBQTJDO0NBRTFFLE1BQU0sY0FBYyxJQUFJLE1BQ3ZCLENBQUUsR0FDRixFQUNDLEtBQUssQ0FBQ0MsR0FBV0MsYUFBcUI7QUFDckMsU0FBTyxZQUFZLGVBQWUsU0FBUztDQUMzQyxFQUNEO0FBRUYsUUFBTyxTQUFZLFlBQVk7QUFDL0I7QUFpQ00sU0FBUyxtQkFDZkMsT0FDMEQ7QUFDMUQsUUFBTyxPQUFPQyxZQUEwQztFQUN2RCxNQUFNLENBQUMsUUFBUSxJQUFJLEtBQUssR0FBRyxRQUFRO0VBQ25DLE1BQU0sT0FBTyxTQUFTLE1BQU0sQ0FBQztBQUU3QixNQUFJLFFBQVEsS0FDWCxPQUFNLElBQUksa0JBQWtCLHlCQUF5QixPQUFPLEdBQUcsR0FBRztFQUduRSxNQUFNLE9BQU8sTUFBTSxNQUFNO0FBQ3pCLE1BQUksUUFBUSxLQUNYLE9BQU0sSUFBSSxrQkFBa0Isc0JBQXNCLE9BQU8sR0FBRyxHQUFHO0FBR2hFLFNBQU8sU0FBUyxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUs7Q0FDbEM7QUFDRDs7OztBQUtELFNBQVMsWUFBWUosZUFBd0NLLFlBQW9CO0FBQ2hGLFFBQU8sSUFBSSxNQUNWLENBQUUsR0FDRixFQUNDLEtBQUssQ0FBQ0osR0FBV0MsYUFBcUI7QUFLckMsTUFBSSxhQUFhLE9BQ2hCLFFBQU87SUFFUCxRQUFPLENBQUMsR0FBRyxTQUFnQjtHQUMxQixNQUFNLFVBQVUsSUFBSSxRQUFRLFVBQW1CO0lBQUM7SUFBWTtJQUFVO0dBQUs7QUFDM0UsVUFBTyxjQUFjLFFBQVE7RUFDN0I7Q0FFRixFQUNEO0FBRUYifQ==