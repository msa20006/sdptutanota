import { errorToString, stringToUtf8Uint8Array } from "./dist2-chunk.js";

//#region src/common/api/common/Logger.ts
const LOG_SIZE = 1e3;
var Logger = class {
	_entries;
	_index;
	_dateProvider;
	constructor(dateProvider = () => new Date()) {
		this._entries = new Array(LOG_SIZE);
		this._index = 0;
		this._dateProvider = dateProvider;
	}
	logInfo(...args) {
		this.log("I", args);
	}
	logError(...args) {
		this.log("E", args);
	}
	logWarn(...args) {
		this.log("W", args);
	}
	log(level, args) {
		const entry = [this._dateProvider(), level];
		entry.push(...args);
		this._entries[this._index] = entry;
		this._index++;
		if (this._index === LOG_SIZE) this._index = 0;
	}
	formatLogEntry(date, level, ...rest) {
		const formattedArgs = rest.map((obj) => {
			try {
				return obj instanceof Error ? errorToString(Object.assign({ stack: null }, obj)) : JSON.stringify(obj);
			} catch (e) {
				return "[cyclic object]";
			}
		});
		const message = formattedArgs.join(",");
		return `${date.toISOString()} ${level} ${message}`;
	}
	getEntries() {
		const newerPart = this._entries.slice(0, this._index);
		const olderPart = this._entries.slice(this._index);
		return olderPart.concat(newerPart).filter(Boolean).map(([date, level, ...rest]) => {
			return this.formatLogEntry(date, level, ...rest);
		});
	}
};
function createLogFile(content, scope, timestamp) {
	const data = stringToUtf8Uint8Array(content);
	const timestampString = timestamp ? timestamp + "_" : "";
	return {
		_type: "DataFile",
		name: timestampString + scope + "_tutanota.log",
		mimeType: "text/plain",
		data,
		size: data.byteLength,
		id: undefined
	};
}
function replaceNativeLogger(global, loggerInstance, force = false) {
	if (force || global.env.dist || global.debug) {
		global.logger = loggerInstance;
		const globalConsole = global.console;
		global.console = {
			log(...args) {
				globalConsole.log(...args);
				loggerInstance.logInfo(...args);
			},
			warn(...args) {
				globalConsole.warn(...args);
				loggerInstance.logWarn(...args);
			},
			error(...args) {
				globalConsole.error(...args);
				loggerInstance.logError(...args);
			},
			trace(...args) {
				globalConsole.trace(...args);
			},
			info(...args) {
				globalConsole.info(...args);
			}
		};
	}
}

//#endregion
export { Logger, createLogFile, replaceNativeLogger };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nZ2VyLWNodW5rLmpzIiwibmFtZXMiOlsiZGF0ZVByb3ZpZGVyOiAoKSA9PiBEYXRlIiwibGV2ZWw6IHN0cmluZyIsImFyZ3M6IEFycmF5PGFueT4iLCJkYXRlOiBEYXRlIiwiY29udGVudDogc3RyaW5nIiwic2NvcGU6IHN0cmluZyIsInRpbWVzdGFtcD86IG51bWJlciIsImdsb2JhbDogYW55IiwibG9nZ2VySW5zdGFuY2U6IExvZ2dlciIsImZvcmNlOiBib29sZWFuIl0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9hcGkvY29tbW9uL0xvZ2dlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL0BidW5kbGVJbnRvOmNvbW1vbi1taW5cblxuaW1wb3J0IHsgZXJyb3JUb1N0cmluZywgc3RyaW5nVG9VdGY4VWludDhBcnJheSB9IGZyb20gXCJAdHV0YW8vdHV0YW5vdGEtdXRpbHNcIlxuaW1wb3J0IHsgRGF0YUZpbGUgfSBmcm9tIFwiLi9EYXRhRmlsZVwiXG5cbmV4cG9ydCBjb25zdCBMT0dfU0laRSA9IDEwMDBcblxuZXhwb3J0IGNsYXNzIExvZ2dlciB7XG5cdC8vIENpcmN1bGFyIGJ1ZmZlciB3aXRoIG5leHQgd3JpdGFibGUgcG9zaXRpb24gcG9pbnRlZCBieSBfaW5kZXhcblx0X2VudHJpZXM6IEFycmF5PEFycmF5PGFueT4+XG5cdF9pbmRleDogbnVtYmVyXG5cdF9kYXRlUHJvdmlkZXI6ICgpID0+IERhdGVcblxuXHRjb25zdHJ1Y3RvcihkYXRlUHJvdmlkZXI6ICgpID0+IERhdGUgPSAoKSA9PiBuZXcgRGF0ZSgpKSB7XG5cdFx0dGhpcy5fZW50cmllcyA9IG5ldyBBcnJheShMT0dfU0laRSlcblx0XHR0aGlzLl9pbmRleCA9IDBcblx0XHR0aGlzLl9kYXRlUHJvdmlkZXIgPSBkYXRlUHJvdmlkZXJcblx0fVxuXG5cdGxvZ0luZm8oLi4uYXJnczogQXJyYXk8YW55Pikge1xuXHRcdHRoaXMubG9nKFwiSVwiLCBhcmdzKVxuXHR9XG5cblx0bG9nRXJyb3IoLi4uYXJnczogQXJyYXk8YW55Pikge1xuXHRcdHRoaXMubG9nKFwiRVwiLCBhcmdzKVxuXHR9XG5cblx0bG9nV2FybiguLi5hcmdzOiBBcnJheTxhbnk+KSB7XG5cdFx0dGhpcy5sb2coXCJXXCIsIGFyZ3MpXG5cdH1cblxuXHRsb2cobGV2ZWw6IHN0cmluZywgYXJnczogQXJyYXk8YW55Pikge1xuXHRcdGNvbnN0IGVudHJ5ID0gW3RoaXMuX2RhdGVQcm92aWRlcigpLCBsZXZlbF1cblx0XHRlbnRyeS5wdXNoKC4uLmFyZ3MpXG5cdFx0dGhpcy5fZW50cmllc1t0aGlzLl9pbmRleF0gPSBlbnRyeVxuXHRcdHRoaXMuX2luZGV4KytcblxuXHRcdGlmICh0aGlzLl9pbmRleCA9PT0gTE9HX1NJWkUpIHtcblx0XHRcdHRoaXMuX2luZGV4ID0gMFxuXHRcdH1cblx0fVxuXG5cdGZvcm1hdExvZ0VudHJ5KGRhdGU6IERhdGUsIGxldmVsOiBzdHJpbmcsIC4uLnJlc3Q6IEFycmF5PGFueT4pOiBzdHJpbmcge1xuXHRcdGNvbnN0IGZvcm1hdHRlZEFyZ3MgPSByZXN0Lm1hcCgob2JqKSA9PiB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRyZXR1cm4gb2JqIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvclRvU3RyaW5nKE9iamVjdC5hc3NpZ24oeyBzdGFjazogbnVsbCB9LCBvYmopKSA6IEpTT04uc3RyaW5naWZ5KG9iailcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIFwiW2N5Y2xpYyBvYmplY3RdXCJcblx0XHRcdH1cblx0XHR9KVxuXHRcdGNvbnN0IG1lc3NhZ2UgPSBmb3JtYXR0ZWRBcmdzLmpvaW4oXCIsXCIpXG5cdFx0cmV0dXJuIGAke2RhdGUudG9JU09TdHJpbmcoKX0gJHtsZXZlbH0gJHttZXNzYWdlfWBcblx0fVxuXG5cdGdldEVudHJpZXMoKTogQXJyYXk8c3RyaW5nPiB7XG5cdFx0Y29uc3QgbmV3ZXJQYXJ0ID0gdGhpcy5fZW50cmllcy5zbGljZSgwLCB0aGlzLl9pbmRleClcblxuXHRcdGNvbnN0IG9sZGVyUGFydCA9IHRoaXMuX2VudHJpZXMuc2xpY2UodGhpcy5faW5kZXgpXG5cblx0XHRyZXR1cm4gb2xkZXJQYXJ0XG5cdFx0XHQuY29uY2F0KG5ld2VyUGFydClcblx0XHRcdC5maWx0ZXIoQm9vbGVhbilcblx0XHRcdC5tYXAoKFtkYXRlLCBsZXZlbCwgLi4ucmVzdF0pID0+IHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZm9ybWF0TG9nRW50cnkoZGF0ZSwgbGV2ZWwsIC4uLnJlc3QpXG5cdFx0XHR9KVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2dGaWxlKGNvbnRlbnQ6IHN0cmluZywgc2NvcGU6IHN0cmluZywgdGltZXN0YW1wPzogbnVtYmVyKTogRGF0YUZpbGUge1xuXHRjb25zdCBkYXRhID0gc3RyaW5nVG9VdGY4VWludDhBcnJheShjb250ZW50KVxuXHRjb25zdCB0aW1lc3RhbXBTdHJpbmcgPSB0aW1lc3RhbXAgPyB0aW1lc3RhbXAgKyBcIl9cIiA6IFwiXCJcblx0cmV0dXJuIHtcblx0XHRfdHlwZTogXCJEYXRhRmlsZVwiLFxuXHRcdG5hbWU6IHRpbWVzdGFtcFN0cmluZyArIHNjb3BlICsgXCJfdHV0YW5vdGEubG9nXCIsXG5cdFx0bWltZVR5cGU6IFwidGV4dC9wbGFpblwiLFxuXHRcdGRhdGEsXG5cdFx0c2l6ZTogZGF0YS5ieXRlTGVuZ3RoLFxuXHRcdGlkOiB1bmRlZmluZWQsXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VOYXRpdmVMb2dnZXIoZ2xvYmFsOiBhbnksIGxvZ2dlckluc3RhbmNlOiBMb2dnZXIsIGZvcmNlOiBib29sZWFuID0gZmFsc2UpIHtcblx0Ly8gUmVwbGFjZSBuYXRpdmUgbG9nZ2VyIG9ubHkgd2hlbiBlbmFibGVkIGJlY2F1c2Ugd2UgbG9zZSBsaW5lIG51bWJlcnNcblx0aWYgKGZvcmNlIHx8IGdsb2JhbC5lbnYuZGlzdCB8fCBnbG9iYWwuZGVidWcpIHtcblx0XHRnbG9iYWwubG9nZ2VyID0gbG9nZ2VySW5zdGFuY2Vcblx0XHRjb25zdCBnbG9iYWxDb25zb2xlID0gZ2xvYmFsLmNvbnNvbGVcblx0XHRnbG9iYWwuY29uc29sZSA9IHtcblx0XHRcdGxvZyguLi5hcmdzOiBhbnlbXSkge1xuXHRcdFx0XHRnbG9iYWxDb25zb2xlLmxvZyguLi5hcmdzKVxuXHRcdFx0XHRsb2dnZXJJbnN0YW5jZS5sb2dJbmZvKC4uLmFyZ3MpXG5cdFx0XHR9LFxuXG5cdFx0XHR3YXJuKC4uLmFyZ3M6IGFueVtdKSB7XG5cdFx0XHRcdGdsb2JhbENvbnNvbGUud2FybiguLi5hcmdzKVxuXHRcdFx0XHRsb2dnZXJJbnN0YW5jZS5sb2dXYXJuKC4uLmFyZ3MpXG5cdFx0XHR9LFxuXG5cdFx0XHRlcnJvciguLi5hcmdzOiBhbnlbXSkge1xuXHRcdFx0XHRnbG9iYWxDb25zb2xlLmVycm9yKC4uLmFyZ3MpXG5cdFx0XHRcdGxvZ2dlckluc3RhbmNlLmxvZ0Vycm9yKC4uLmFyZ3MpXG5cdFx0XHR9LFxuXG5cdFx0XHR0cmFjZSguLi5hcmdzOiBhbnlbXSkge1xuXHRcdFx0XHRnbG9iYWxDb25zb2xlLnRyYWNlKC4uLmFyZ3MpXG5cdFx0XHR9LFxuXHRcdFx0aW5mbyguLi5hcmdzOiBhbnlbXSkge1xuXHRcdFx0XHRnbG9iYWxDb25zb2xlLmluZm8oLi4uYXJncylcblx0XHRcdH0sXG5cdFx0fVxuXHR9XG59XG4iXSwibWFwcGluZ3MiOiI7OztNQUthLFdBQVc7SUFFWCxTQUFOLE1BQWE7Q0FFbkI7Q0FDQTtDQUNBO0NBRUEsWUFBWUEsZUFBMkIsTUFBTSxJQUFJLFFBQVE7QUFDeEQsT0FBSyxXQUFXLElBQUksTUFBTTtBQUMxQixPQUFLLFNBQVM7QUFDZCxPQUFLLGdCQUFnQjtDQUNyQjtDQUVELFFBQVEsR0FBRyxNQUFrQjtBQUM1QixPQUFLLElBQUksS0FBSyxLQUFLO0NBQ25CO0NBRUQsU0FBUyxHQUFHLE1BQWtCO0FBQzdCLE9BQUssSUFBSSxLQUFLLEtBQUs7Q0FDbkI7Q0FFRCxRQUFRLEdBQUcsTUFBa0I7QUFDNUIsT0FBSyxJQUFJLEtBQUssS0FBSztDQUNuQjtDQUVELElBQUlDLE9BQWVDLE1BQWtCO0VBQ3BDLE1BQU0sUUFBUSxDQUFDLEtBQUssZUFBZSxFQUFFLEtBQU07QUFDM0MsUUFBTSxLQUFLLEdBQUcsS0FBSztBQUNuQixPQUFLLFNBQVMsS0FBSyxVQUFVO0FBQzdCLE9BQUs7QUFFTCxNQUFJLEtBQUssV0FBVyxTQUNuQixNQUFLLFNBQVM7Q0FFZjtDQUVELGVBQWVDLE1BQVlGLE9BQWUsR0FBRyxNQUEwQjtFQUN0RSxNQUFNLGdCQUFnQixLQUFLLElBQUksQ0FBQyxRQUFRO0FBQ3ZDLE9BQUk7QUFDSCxXQUFPLGVBQWUsUUFBUSxjQUFjLE9BQU8sT0FBTyxFQUFFLE9BQU8sS0FBTSxHQUFFLElBQUksQ0FBQyxHQUFHLEtBQUssVUFBVSxJQUFJO0dBQ3RHLFNBQVEsR0FBRztBQUNYLFdBQU87R0FDUDtFQUNELEVBQUM7RUFDRixNQUFNLFVBQVUsY0FBYyxLQUFLLElBQUk7QUFDdkMsVUFBUSxFQUFFLEtBQUssYUFBYSxDQUFDLEdBQUcsTUFBTSxHQUFHLFFBQVE7Q0FDakQ7Q0FFRCxhQUE0QjtFQUMzQixNQUFNLFlBQVksS0FBSyxTQUFTLE1BQU0sR0FBRyxLQUFLLE9BQU87RUFFckQsTUFBTSxZQUFZLEtBQUssU0FBUyxNQUFNLEtBQUssT0FBTztBQUVsRCxTQUFPLFVBQ0wsT0FBTyxVQUFVLENBQ2pCLE9BQU8sUUFBUSxDQUNmLElBQUksQ0FBQyxDQUFDLE1BQU0sT0FBTyxHQUFHLEtBQUssS0FBSztBQUNoQyxVQUFPLEtBQUssZUFBZSxNQUFNLE9BQU8sR0FBRyxLQUFLO0VBQ2hELEVBQUM7Q0FDSDtBQUNEO0FBRU0sU0FBUyxjQUFjRyxTQUFpQkMsT0FBZUMsV0FBOEI7Q0FDM0YsTUFBTSxPQUFPLHVCQUF1QixRQUFRO0NBQzVDLE1BQU0sa0JBQWtCLFlBQVksWUFBWSxNQUFNO0FBQ3RELFFBQU87RUFDTixPQUFPO0VBQ1AsTUFBTSxrQkFBa0IsUUFBUTtFQUNoQyxVQUFVO0VBQ1Y7RUFDQSxNQUFNLEtBQUs7RUFDWCxJQUFJO0NBQ0o7QUFDRDtBQUVNLFNBQVMsb0JBQW9CQyxRQUFhQyxnQkFBd0JDLFFBQWlCLE9BQU87QUFFaEcsS0FBSSxTQUFTLE9BQU8sSUFBSSxRQUFRLE9BQU8sT0FBTztBQUM3QyxTQUFPLFNBQVM7RUFDaEIsTUFBTSxnQkFBZ0IsT0FBTztBQUM3QixTQUFPLFVBQVU7R0FDaEIsSUFBSSxHQUFHLE1BQWE7QUFDbkIsa0JBQWMsSUFBSSxHQUFHLEtBQUs7QUFDMUIsbUJBQWUsUUFBUSxHQUFHLEtBQUs7R0FDL0I7R0FFRCxLQUFLLEdBQUcsTUFBYTtBQUNwQixrQkFBYyxLQUFLLEdBQUcsS0FBSztBQUMzQixtQkFBZSxRQUFRLEdBQUcsS0FBSztHQUMvQjtHQUVELE1BQU0sR0FBRyxNQUFhO0FBQ3JCLGtCQUFjLE1BQU0sR0FBRyxLQUFLO0FBQzVCLG1CQUFlLFNBQVMsR0FBRyxLQUFLO0dBQ2hDO0dBRUQsTUFBTSxHQUFHLE1BQWE7QUFDckIsa0JBQWMsTUFBTSxHQUFHLEtBQUs7R0FDNUI7R0FDRCxLQUFLLEdBQUcsTUFBYTtBQUNwQixrQkFBYyxLQUFLLEdBQUcsS0FBSztHQUMzQjtFQUNEO0NBQ0Q7QUFDRCJ9