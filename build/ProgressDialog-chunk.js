import { assertMainOrNode, isAdminClient } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { delay, resolveMaybeLazy } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { DefaultAnimationTime } from "./styles-chunk.js";
import { theme } from "./theme-chunk.js";
import { TabIndex } from "./TutanotaConstants-chunk.js";
import { DialogHeaderBar } from "./DialogHeaderBar-chunk.js";
import { Dialog, DialogType } from "./Dialog-chunk.js";
import { progressIcon } from "./Icon-chunk.js";

//#region src/common/gui/CompletenessIndicator.ts
var CompletenessIndicator = class {
	view({ attrs }) {
		return mithril_default("", {
			class: attrs.class,
			style: {
				border: `1px solid ${theme.content_button}`,
				width: attrs.width ?? "100px",
				height: "10px"
			}
		}, mithril_default("", { style: {
			"background-color": theme.content_button,
			width: attrs.percentageCompleted + "%",
			height: "100%"
		} }));
	}
};

//#endregion
//#region src/common/gui/dialogs/ProgressDialog.ts
assertMainOrNode();
async function showProgressDialog(messageIdOrMessageFunction, action, progressStream, isCancelable, headerBarAttrs) {
	if (progressStream != null) progressStream.map(() => {
		mithril_default.redraw();
	});
	const progressDialog = new Dialog(DialogType.Progress, { view: () => {
		let title = resolveMaybeLazy(messageIdOrMessageFunction);
		return mithril_default("", [isCancelable && headerBarAttrs ? mithril_default(DialogHeaderBar, {
			...headerBarAttrs,
			class: "mb-l mt-negative-l mr-negative-l ml-negative-l"
		}) : null, mithril_default(".hide-outline", {
			tabindex: TabIndex.Default,
			oncreate(vnode) {
				setTimeout(() => {
					vnode.dom.focus();
				}, 10);
			}
		}, [mithril_default(".flex-center", progressStream ? mithril_default(CompletenessIndicator, { percentageCompleted: progressStream() }) : progressIcon()), mithril_default("p#dialog-title", lang.getTranslationText(title))])]);
	} }).setCloseHandler(() => {});
	progressDialog.show();
	let start = new Date().getTime();
	let minDialogVisibilityMillis = isAdminClient() ? 0 : 1e3;
	try {
		return await action;
	} finally {
		const diff = Date.now() - start;
		await delay(Math.max(minDialogVisibilityMillis - diff, 0));
		progressDialog.close();
		await delay(DefaultAnimationTime);
	}
}

//#endregion
export { CompletenessIndicator, showProgressDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZ3Jlc3NEaWFsb2ctY2h1bmsuanMiLCJuYW1lcyI6WyJtZXNzYWdlSWRPck1lc3NhZ2VGdW5jdGlvbjogTWF5YmVMYXp5PE1heWJlVHJhbnNsYXRpb24+IiwiYWN0aW9uOiBQcm9taXNlPFQ+IiwicHJvZ3Jlc3NTdHJlYW0/OiBTdHJlYW08bnVtYmVyPiIsImlzQ2FuY2VsYWJsZT86IGJvb2xlYW4iLCJoZWFkZXJCYXJBdHRycz86IERpYWxvZ0hlYWRlckJhckF0dHJzIl0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9ndWkvQ29tcGxldGVuZXNzSW5kaWNhdG9yLnRzIiwiLi4vc3JjL2NvbW1vbi9ndWkvZGlhbG9ncy9Qcm9ncmVzc0RpYWxvZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbSwgeyBDaGlsZHJlbiwgQ29tcG9uZW50LCBWbm9kZSB9IGZyb20gXCJtaXRocmlsXCJcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSBcIi4vdGhlbWUuanNcIlxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXRlbmVzc0luZGljYXRvckF0dHJzIHtcblx0cGVyY2VudGFnZUNvbXBsZXRlZDogbnVtYmVyXG5cdHdpZHRoPzogc3RyaW5nXG5cdGNsYXNzPzogc3RyaW5nXG59XG5cbmV4cG9ydCBjbGFzcyBDb21wbGV0ZW5lc3NJbmRpY2F0b3IgaW1wbGVtZW50cyBDb21wb25lbnQ8Q29tcGxldGVuZXNzSW5kaWNhdG9yQXR0cnM+IHtcblx0dmlldyh7IGF0dHJzIH06IFZub2RlPENvbXBsZXRlbmVzc0luZGljYXRvckF0dHJzPik6IENoaWxkcmVuIHtcblx0XHRyZXR1cm4gbShcblx0XHRcdFwiXCIsXG5cdFx0XHR7XG5cdFx0XHRcdGNsYXNzOiBhdHRycy5jbGFzcyxcblx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRib3JkZXI6IGAxcHggc29saWQgJHt0aGVtZS5jb250ZW50X2J1dHRvbn1gLFxuXHRcdFx0XHRcdHdpZHRoOiBhdHRycy53aWR0aCA/PyBcIjEwMHB4XCIsXG5cdFx0XHRcdFx0aGVpZ2h0OiBcIjEwcHhcIixcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHRtKFwiXCIsIHtcblx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcImJhY2tncm91bmQtY29sb3JcIjogdGhlbWUuY29udGVudF9idXR0b24sXG5cdFx0XHRcdFx0d2lkdGg6IGF0dHJzLnBlcmNlbnRhZ2VDb21wbGV0ZWQgKyBcIiVcIixcblx0XHRcdFx0XHRoZWlnaHQ6IFwiMTAwJVwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSksXG5cdFx0KVxuXHR9XG59XG4iLCJpbXBvcnQgbSBmcm9tIFwibWl0aHJpbFwiXG5pbXBvcnQgeyBhc3NlcnRNYWluT3JOb2RlLCBpc0FkbWluQ2xpZW50IH0gZnJvbSBcIi4uLy4uL2FwaS9jb21tb24vRW52XCJcbmltcG9ydCB7IERpYWxvZywgRGlhbG9nVHlwZSB9IGZyb20gXCIuLi9iYXNlL0RpYWxvZ1wiXG5pbXBvcnQgeyBEZWZhdWx0QW5pbWF0aW9uVGltZSB9IGZyb20gXCIuLi9hbmltYXRpb24vQW5pbWF0aW9uc1wiXG5pbXBvcnQgdHlwZSB7IE1heWJlVHJhbnNsYXRpb24gfSBmcm9tIFwiLi4vLi4vbWlzYy9MYW5ndWFnZVZpZXdNb2RlbFwiXG5pbXBvcnQgeyBsYW5nIH0gZnJvbSBcIi4uLy4uL21pc2MvTGFuZ3VhZ2VWaWV3TW9kZWxcIlxuaW1wb3J0IHsgcHJvZ3Jlc3NJY29uIH0gZnJvbSBcIi4uL2Jhc2UvSWNvblwiXG5pbXBvcnQgeyBDb21wbGV0ZW5lc3NJbmRpY2F0b3IgfSBmcm9tIFwiLi4vQ29tcGxldGVuZXNzSW5kaWNhdG9yLmpzXCJcbmltcG9ydCBTdHJlYW0gZnJvbSBcIm1pdGhyaWwvc3RyZWFtXCJcbmltcG9ydCB7IFRhYkluZGV4IH0gZnJvbSBcIi4uLy4uL2FwaS9jb21tb24vVHV0YW5vdGFDb25zdGFudHNcIlxuaW1wb3J0IHsgZGVsYXksIE1heWJlTGF6eSwgcmVzb2x2ZU1heWJlTGF6eSB9IGZyb20gXCJAdHV0YW8vdHV0YW5vdGEtdXRpbHNcIlxuaW1wb3J0IHsgRGlhbG9nSGVhZGVyQmFyLCBEaWFsb2dIZWFkZXJCYXJBdHRycyB9IGZyb20gXCIuLi9iYXNlL0RpYWxvZ0hlYWRlckJhci5qc1wiXG5cbmFzc2VydE1haW5Pck5vZGUoKVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2hvd1Byb2dyZXNzRGlhbG9nPFQ+KFxuXHRtZXNzYWdlSWRPck1lc3NhZ2VGdW5jdGlvbjogTWF5YmVMYXp5PE1heWJlVHJhbnNsYXRpb24+LFxuXHRhY3Rpb246IFByb21pc2U8VD4sXG5cdHByb2dyZXNzU3RyZWFtPzogU3RyZWFtPG51bWJlcj4sXG5cdGlzQ2FuY2VsYWJsZT86IGJvb2xlYW4sXG5cdGhlYWRlckJhckF0dHJzPzogRGlhbG9nSGVhZGVyQmFyQXR0cnMsXG4pOiBQcm9taXNlPFQ+IHtcblx0aWYgKHByb2dyZXNzU3RyZWFtICE9IG51bGwpIHtcblx0XHRwcm9ncmVzc1N0cmVhbS5tYXAoKCkgPT4ge1xuXHRcdFx0bS5yZWRyYXcoKVxuXHRcdH0pXG5cdH1cblxuXHRjb25zdCBwcm9ncmVzc0RpYWxvZyA9IG5ldyBEaWFsb2coRGlhbG9nVHlwZS5Qcm9ncmVzcywge1xuXHRcdHZpZXc6ICgpID0+IHtcblx0XHRcdGxldCB0aXRsZSA9IHJlc29sdmVNYXliZUxhenkobWVzc2FnZUlkT3JNZXNzYWdlRnVuY3Rpb24pXG5cdFx0XHRyZXR1cm4gbShcIlwiLCBbXG5cdFx0XHRcdGlzQ2FuY2VsYWJsZSAmJiBoZWFkZXJCYXJBdHRyc1xuXHRcdFx0XHRcdD8gbShEaWFsb2dIZWFkZXJCYXIsIHtcblx0XHRcdFx0XHRcdFx0Li4uaGVhZGVyQmFyQXR0cnMsXG5cdFx0XHRcdFx0XHRcdGNsYXNzOiBcIm1iLWwgbXQtbmVnYXRpdmUtbCBtci1uZWdhdGl2ZS1sIG1sLW5lZ2F0aXZlLWxcIixcblx0XHRcdFx0XHQgIH0pXG5cdFx0XHRcdFx0OiBudWxsLFxuXHRcdFx0XHRtKFxuXHRcdFx0XHRcdFwiLmhpZGUtb3V0bGluZVwiLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdC8vIFdlIG1ha2UgdGhpcyBlbGVtZW50IGZvY3VzYWJsZSBzbyB0aGF0IHRoZSBzY3JlZW4gcmVhZGVyIGFubm91bmNlcyB0aGUgZGlhbG9nXG5cdFx0XHRcdFx0XHR0YWJpbmRleDogVGFiSW5kZXguRGVmYXVsdCxcblxuXHRcdFx0XHRcdFx0b25jcmVhdGUodm5vZGUpIHtcblx0XHRcdFx0XHRcdFx0Ly8gV2UgbmVlZCB0byBkZWxheSBzbyB0aGF0IHRoZSBlZWxlbWVudCBpcyBhdHRhY2hlZCB0byB0aGUgcGFyZW50XG5cdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdDsodm5vZGUuZG9tIGFzIEhUTUxFbGVtZW50KS5mb2N1cygpXG5cdFx0XHRcdFx0XHRcdH0sIDEwKVxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdG0oXCIuZmxleC1jZW50ZXJcIiwgcHJvZ3Jlc3NTdHJlYW0gPyBtKENvbXBsZXRlbmVzc0luZGljYXRvciwgeyBwZXJjZW50YWdlQ29tcGxldGVkOiBwcm9ncmVzc1N0cmVhbSgpIH0pIDogcHJvZ3Jlc3NJY29uKCkpLFxuXHRcdFx0XHRcdFx0bShcInAjZGlhbG9nLXRpdGxlXCIsIGxhbmcuZ2V0VHJhbnNsYXRpb25UZXh0KHRpdGxlKSksXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0KSxcblx0XHRcdF0pXG5cdFx0fSxcblx0fSkuc2V0Q2xvc2VIYW5kbGVyKCgpID0+IHtcblx0XHQvLyBkbyBub3QgY2xvc2UgcHJvZ3Jlc3Mgb24gb25DbG9zZSBldmVudFxuXHR9KVxuXHRwcm9ncmVzc0RpYWxvZy5zaG93KClcblx0bGV0IHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcblx0bGV0IG1pbkRpYWxvZ1Zpc2liaWxpdHlNaWxsaXMgPSBpc0FkbWluQ2xpZW50KCkgPyAwIDogMTAwMFxuXHR0cnkge1xuXHRcdHJldHVybiBhd2FpdCBhY3Rpb25cblx0fSBmaW5hbGx5IHtcblx0XHRjb25zdCBkaWZmID0gRGF0ZS5ub3coKSAtIHN0YXJ0XG5cdFx0YXdhaXQgZGVsYXkoTWF0aC5tYXgobWluRGlhbG9nVmlzaWJpbGl0eU1pbGxpcyAtIGRpZmYsIDApKVxuXHRcdHByb2dyZXNzRGlhbG9nLmNsb3NlKClcblx0XHRhd2FpdCBkZWxheShEZWZhdWx0QW5pbWF0aW9uVGltZSlcblx0fVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7SUFTYSx3QkFBTixNQUE2RTtDQUNuRixLQUFLLEVBQUUsT0FBMEMsRUFBWTtBQUM1RCxTQUFPLGdCQUNOLElBQ0E7R0FDQyxPQUFPLE1BQU07R0FDYixPQUFPO0lBQ04sU0FBUyxZQUFZLE1BQU0sZUFBZTtJQUMxQyxPQUFPLE1BQU0sU0FBUztJQUN0QixRQUFRO0dBQ1I7RUFDRCxHQUNELGdCQUFFLElBQUksRUFDTCxPQUFPO0dBQ04sb0JBQW9CLE1BQU07R0FDMUIsT0FBTyxNQUFNLHNCQUFzQjtHQUNuQyxRQUFRO0VBQ1IsRUFDRCxFQUFDLENBQ0Y7Q0FDRDtBQUNEOzs7O0FDakJELGtCQUFrQjtBQUVYLGVBQWUsbUJBQ3JCQSw0QkFDQUMsUUFDQUMsZ0JBQ0FDLGNBQ0FDLGdCQUNhO0FBQ2IsS0FBSSxrQkFBa0IsS0FDckIsZ0JBQWUsSUFBSSxNQUFNO0FBQ3hCLGtCQUFFLFFBQVE7Q0FDVixFQUFDO0NBR0gsTUFBTSxpQkFBaUIsSUFBSSxPQUFPLFdBQVcsVUFBVSxFQUN0RCxNQUFNLE1BQU07RUFDWCxJQUFJLFFBQVEsaUJBQWlCLDJCQUEyQjtBQUN4RCxTQUFPLGdCQUFFLElBQUksQ0FDWixnQkFBZ0IsaUJBQ2IsZ0JBQUUsaUJBQWlCO0dBQ25CLEdBQUc7R0FDSCxPQUFPO0VBQ04sRUFBQyxHQUNGLE1BQ0gsZ0JBQ0MsaUJBQ0E7R0FFQyxVQUFVLFNBQVM7R0FFbkIsU0FBUyxPQUFPO0FBRWYsZUFBVyxNQUFNO0FBQ2YsS0FBQyxNQUFNLElBQW9CLE9BQU87SUFDbkMsR0FBRSxHQUFHO0dBQ047RUFDRCxHQUNELENBQ0MsZ0JBQUUsZ0JBQWdCLGlCQUFpQixnQkFBRSx1QkFBdUIsRUFBRSxxQkFBcUIsZ0JBQWdCLENBQUUsRUFBQyxHQUFHLGNBQWMsQ0FBQyxFQUN4SCxnQkFBRSxrQkFBa0IsS0FBSyxtQkFBbUIsTUFBTSxDQUFDLEFBQ25ELEVBQ0QsQUFDRCxFQUFDO0NBQ0YsRUFDRCxHQUFFLGdCQUFnQixNQUFNLENBRXhCLEVBQUM7QUFDRixnQkFBZSxNQUFNO0NBQ3JCLElBQUksUUFBUSxJQUFJLE9BQU8sU0FBUztDQUNoQyxJQUFJLDRCQUE0QixlQUFlLEdBQUcsSUFBSTtBQUN0RCxLQUFJO0FBQ0gsU0FBTyxNQUFNO0NBQ2IsVUFBUztFQUNULE1BQU0sT0FBTyxLQUFLLEtBQUssR0FBRztBQUMxQixRQUFNLE1BQU0sS0FBSyxJQUFJLDRCQUE0QixNQUFNLEVBQUUsQ0FBQztBQUMxRCxpQkFBZSxPQUFPO0FBQ3RCLFFBQU0sTUFBTSxxQkFBcUI7Q0FDakM7QUFDRCJ9