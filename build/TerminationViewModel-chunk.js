import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import "./ClientDetector-chunk.js";
import "./mithril-chunk.js";
import { incrementDate } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import { InfoLink, lang } from "./LanguageViewModel-chunk.js";
import "./styles-chunk.js";
import "./theme-chunk.js";
import { TerminationPeriodOptions } from "./TutanotaConstants-chunk.js";
import "./KeyManager-chunk.js";
import "./WindowFacade-chunk.js";
import "./RootView-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./luxon-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import "./TypeRefs-chunk.js";
import "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import { CustomerAccountTerminationRequestTypeRef, createCustomerAccountTerminationPostIn } from "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import "./CalendarUtils-chunk.js";
import "./FormatValidator-chunk.js";
import "./stream-chunk.js";
import "./Logger-chunk.js";
import "./TypeModels3-chunk.js";
import "./ErrorUtils-chunk.js";
import { PreconditionFailedError } from "./RestError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import { SessionType } from "./SessionType-chunk.js";
import { CustomerAccountTerminationService } from "./Services-chunk.js";
import "./GroupUtils-chunk.js";
import "./Button-chunk.js";
import "./Icons-chunk.js";
import "./DialogHeaderBar-chunk.js";
import "./CountryList-chunk.js";
import "./Dialog-chunk.js";
import "./Icon-chunk.js";
import "./AriaUtils-chunk.js";
import "./IconButton-chunk.js";
import "./Formatter-chunk.js";
import "./CommonLocator-chunk.js";
import "./UserError-chunk.js";
import "./MailAddressParser-chunk.js";
import "./BlobUtils-chunk.js";
import "./FileUtils-chunk.js";
import "./ProgressDialog-chunk.js";
import "./SharedMailUtils-chunk.js";
import "./PasswordUtils-chunk.js";
import "./Recipient-chunk.js";
import "./SubscriptionDialogs-chunk.js";
import "./ExternalLink-chunk.js";
import "./ToggleButton-chunk.js";
import "./SnackBar-chunk.js";
import "./Credentials-chunk.js";
import "./NotificationOverlay-chunk.js";
import "./Checkbox-chunk.js";
import "./Expander-chunk.js";
import "./ClipboardUtils-chunk.js";
import "./Services4-chunk.js";
import "./BubbleButton-chunk.js";
import "./ErrorReporter-chunk.js";
import "./PasswordField-chunk.js";
import "./PasswordRequestDialog-chunk.js";
import "./ErrorHandlerImpl-chunk.js";
import "./LoginScreenHeader-chunk.js";
import "./LoginButton-chunk.js";
import { LoginState, getLoginErrorStateAndMessage } from "./LoginUtils-chunk.js";

//#region src/common/termination/TerminationViewModel.ts
var TerminationViewModel = class {
	mailAddress;
	password;
	date;
	terminationPeriodOption;
	acceptedTerminationRequest;
	helpText;
	loginState;
	constructor(loginController, secondFactorHandler, serviceExecutor, entityClient) {
		this.loginController = loginController;
		this.secondFactorHandler = secondFactorHandler;
		this.serviceExecutor = serviceExecutor;
		this.entityClient = entityClient;
		this.mailAddress = "";
		this.password = "";
		this.date = incrementDate(new Date(), 1);
		this.acceptedTerminationRequest = null;
		this.terminationPeriodOption = TerminationPeriodOptions.EndOfCurrentPeriod;
		this.helpText = "emptyString_msg";
		this.loginState = LoginState.NotAuthenticated;
	}
	async createAccountTerminationRequest(surveyData = null) {
		await this.authenticate();
		if (this.loginState == LoginState.LoggedIn) await this.createTerminationRequest(surveyData);
	}
	/**
	* Creates the termination request based on the date option selected by the user and assument that the authentication was successfull.
	*/
	async createTerminationRequest(surveyData) {
		try {
			const inputData = createCustomerAccountTerminationPostIn({
				terminationDate: this.getTerminationDate(),
				surveyData
			});
			let serviceResponse = await this.serviceExecutor.post(CustomerAccountTerminationService, inputData);
			this.acceptedTerminationRequest = await this.entityClient.load(CustomerAccountTerminationRequestTypeRef, serviceResponse.terminationRequest);
		} catch (e) {
			if (e instanceof PreconditionFailedError) switch (e.data) {
				case "invalidTerminationDate":
					this.onTerminationRequestFailed("terminationInvalidDate_msg");
					break;
				case "alreadyCancelled":
					this.onTerminationRequestFailed("terminationAlreadyCancelled_msg");
					break;
				case "noActiveSubscription":
					this.onTerminationRequestFailed("terminationNoActiveSubscription_msg");
					break;
				case "hasAppStoreSubscription":
					this.onTerminationRequestFailed(lang.getTranslation("deleteAccountWithAppStoreSubscription_msg", { "{AppStorePayment}": InfoLink.AppStorePayment }));
					break;
				default: throw e;
			}
else throw e;
		} finally {
			await this.loginController.logout(false);
			this.loginState = LoginState.NotAuthenticated;
		}
	}
	onTerminationRequestFailed(errorMessage) {
		this.helpText = errorMessage;
	}
	onAuthentication() {
		this.helpText = "emptyString_msg";
		this.loginState = LoginState.LoggedIn;
	}
	onError(helpText, state) {
		this.helpText = helpText;
		this.loginState = state;
	}
	getTerminationDate() {
		return this.terminationPeriodOption === TerminationPeriodOptions.EndOfCurrentPeriod ? null : this.date;
	}
	async authenticate() {
		const mailAddress = this.mailAddress;
		const password = this.password;
		if (mailAddress === "" || password === "") {
			this.onError("loginFailed_msg", LoginState.InvalidCredentials);
			return;
		}
		this.helpText = "emptyString_msg";
		try {
			await this.loginController.createSession(mailAddress, password, SessionType.Temporary);
			this.onAuthentication();
		} catch (e) {
			const { errorMessage, state } = getLoginErrorStateAndMessage(e);
			this.onError(errorMessage, state);
		} finally {
			await this.secondFactorHandler.closeWaitingForSecondFactorDialog();
		}
	}
};

//#endregion
export { TerminationViewModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,