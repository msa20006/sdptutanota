import { assertMainOrNode } from "./Env-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { ContactMessengerHandleType, ContactSocialType } from "./TutanotaConstants-chunk.js";
import { isoDateToBirthday } from "./BirthdayUtils-chunk.js";
import { formatDate } from "./Formatter-chunk.js";

//#region src/common/contactsFunctionality/ContactUtils.ts
assertMainOrNode();
function getContactDisplayName(contact) {
	if (contact.nickname != null && contact.nickname !== "") return contact.nickname;
else return `${contact.firstName} ${contact.lastName}`.trim();
}
function getContactListName(contact) {
	let name = `${contact.firstName} ${contact.lastName}`.trim();
	if (name.length === 0) name = contact.company.trim();
	return name;
}
function formatBirthdayNumeric(birthday) {
	if (birthday.year) return formatDate(new Date(Number(birthday.year), Number(birthday.month) - 1, Number(birthday.day)));
else return lang.formats.simpleDateWithoutYear.format(new Date(Number(2016), Number(birthday.month) - 1, Number(birthday.day)));
}
function formatContactDate(isoDate) {
	if (isoDate) try {
		return formatBirthdayNumeric(isoDateToBirthday(isoDate));
	} catch (e) {}
	return "";
}
function getSocialUrl(contactId) {
	let socialUrlType = "";
	let http = "https://";
	let worldwidew = "www.";
	const isSchemePrefixed = contactId.socialId.indexOf("http") !== -1;
	const isWwwDotPrefixed = contactId.socialId.indexOf(worldwidew) !== -1;
	if (!isSchemePrefixed && !isWwwDotPrefixed) switch (contactId.type) {
		case ContactSocialType.TWITTER:
			socialUrlType = "twitter.com/";
			break;
		case ContactSocialType.FACEBOOK:
			socialUrlType = "facebook.com/";
			break;
		case ContactSocialType.XING:
			socialUrlType = "xing.com/profile/";
			break;
		case ContactSocialType.LINKED_IN: socialUrlType = "linkedin.com/in/";
	}
	if (isSchemePrefixed) http = "";
	if (isSchemePrefixed || isWwwDotPrefixed) worldwidew = "";
	return `${http}${worldwidew}${socialUrlType}${contactId.socialId.trim()}`;
}
function getWebsiteUrl(websiteUrl) {
	let http = "https://";
	let worldwidew = "www.";
	const isSchemePrefixed = websiteUrl.indexOf("http") !== -1;
	const isWwwDotPrefixed = websiteUrl.indexOf(worldwidew) !== -1;
	if (isSchemePrefixed) http = "";
	if (isSchemePrefixed || isWwwDotPrefixed) worldwidew = "";
	return `${http}${worldwidew}${websiteUrl}`.trim();
}
function getMessengerHandleUrl(handle) {
	const replaceNumberExp = new RegExp(/[^0-9+]/g);
	switch (handle.type) {
		case ContactMessengerHandleType.SIGNAL: return `sgnl://signal.me/#p/${handle.handle.replaceAll(replaceNumberExp, "")}`;
		case ContactMessengerHandleType.WHATSAPP: return `whatsapp://send?phone=${handle.handle.replaceAll(replaceNumberExp, "")}`;
		case ContactMessengerHandleType.TELEGRAM: return `tg://resolve?domain=${handle.handle}`;
		case ContactMessengerHandleType.DISCORD: return `discord://-/users/${handle.handle}`;
		default: return "";
	}
}
function extractStructuredMailAddresses(addresses) {
	return addresses.map((address) => ({
		address: address.address,
		type: address.type,
		customTypeName: address.customTypeName
	}));
}
function extractStructuredAddresses(addresses) {
	return addresses.map((address) => ({
		address: address.address,
		type: address.type,
		customTypeName: address.customTypeName
	}));
}
function extractStructuredPhoneNumbers(numbers) {
	return numbers.map((number) => ({
		number: number.number,
		type: number.type,
		customTypeName: number.customTypeName
	}));
}
function extractStructuredCustomDates(dates) {
	return dates.map((date) => ({
		dateIso: date.dateIso,
		type: date.type,
		customTypeName: date.customTypeName
	}));
}
function extractStructuredWebsites(websites) {
	return websites.map((website) => ({
		url: website.url,
		type: website.type,
		customTypeName: website.customTypeName
	}));
}
function extractStructuredRelationships(relationships) {
	return relationships.map((relation) => ({
		person: relation.person,
		type: relation.type,
		customTypeName: relation.customTypeName
	}));
}
function extractStructuredMessengerHandle(handles) {
	return handles.map((handle) => ({
		type: handle.type,
		customTypeName: handle.customTypeName,
		handle: handle.handle
	}));
}

//#endregion
export { extractStructuredAddresses, extractStructuredCustomDates, extractStructuredMailAddresses, extractStructuredMessengerHandle, extractStructuredPhoneNumbers, extractStructuredRelationships, extractStructuredWebsites, formatBirthdayNumeric, formatContactDate, getContactDisplayName, getContactListName, getMessengerHandleUrl, getSocialUrl, getWebsiteUrl };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,