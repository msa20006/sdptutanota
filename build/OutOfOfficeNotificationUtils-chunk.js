import { getDayShifted } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { MailboxGroupRootTypeRef, OutOfOfficeNotificationTypeRef } from "./TypeRefs-chunk.js";
import { formatDate } from "./Formatter-chunk.js";
import { locator } from "./CommonLocator-chunk.js";

//#region src/common/misc/OutOfOfficeNotificationUtils.ts
function isNotificationCurrentlyActive(notification, currentDate) {
	if (notification.enabled) if (notification.startDate && !notification.endDate) return currentDate >= notification.startDate;
else if (notification.startDate && notification.endDate) return currentDate >= notification.startDate && currentDate < notification.endDate;
else return true;
else return false;
}
function formatActivateState(notification) {
	if (notification && notification.enabled) {
		let timeRange = "";
		if (notification.startDate) {
			timeRange += " (" + formatDate(notification.startDate);
			if (notification.endDate) {
				const shiftedEndDate = getDayShifted(notification.endDate, -1);
				timeRange += " - " + formatDate(shiftedEndDate);
			}
			timeRange += ")";
		}
		return lang.get("activated_label") + timeRange;
	} else return lang.get("deactivated_label");
}
function getDefaultNotificationLabel(organizationMessageEnabled) {
	if (organizationMessageEnabled) return lang.get("outOfOfficeExternal_msg");
else return lang.get("outOfOfficeEveryone_msg");
}
function loadOutOfOfficeNotification() {
	const mailMembership = locator.logins.getUserController().getUserMailGroupMembership();
	return locator.entityClient.load(MailboxGroupRootTypeRef, mailMembership.group).then((grouproot) => {
		if (grouproot.outOfOfficeNotification) return locator.entityClient.load(OutOfOfficeNotificationTypeRef, grouproot.outOfOfficeNotification);
else return null;
	});
}

//#endregion
export { formatActivateState, getDefaultNotificationLabel, isNotificationCurrentlyActive, loadOutOfOfficeNotification };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3V0T2ZPZmZpY2VOb3RpZmljYXRpb25VdGlscy1jaHVuay5qcyIsIm5hbWVzIjpbIm5vdGlmaWNhdGlvbjogT3V0T2ZPZmZpY2VOb3RpZmljYXRpb24iLCJjdXJyZW50RGF0ZTogRGF0ZSIsIm5vdGlmaWNhdGlvbjogT3V0T2ZPZmZpY2VOb3RpZmljYXRpb24gfCBudWxsIiwib3JnYW5pemF0aW9uTWVzc2FnZUVuYWJsZWQ6IGJvb2xlYW4iXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL21pc2MvT3V0T2ZPZmZpY2VOb3RpZmljYXRpb25VdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE91dE9mT2ZmaWNlTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uL2FwaS9lbnRpdGllcy90dXRhbm90YS9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBPdXRPZk9mZmljZU5vdGlmaWNhdGlvblR5cGVSZWYgfSBmcm9tIFwiLi4vYXBpL2VudGl0aWVzL3R1dGFub3RhL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tIFwiLi9Gb3JtYXR0ZXJcIlxuaW1wb3J0IHsgbGFuZyB9IGZyb20gXCIuL0xhbmd1YWdlVmlld01vZGVsXCJcbmltcG9ydCB7IGxvY2F0b3IgfSBmcm9tIFwiLi4vYXBpL21haW4vQ29tbW9uTG9jYXRvclwiXG5pbXBvcnQgeyBNYWlsYm94R3JvdXBSb290VHlwZVJlZiB9IGZyb20gXCIuLi9hcGkvZW50aXRpZXMvdHV0YW5vdGEvVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgZ2V0RGF5U2hpZnRlZCB9IGZyb20gXCJAdHV0YW8vdHV0YW5vdGEtdXRpbHNcIlxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBub3RpZmljYXRpb25zIGFyZSBjdXJyZW50bHkgc2VudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTm90aWZpY2F0aW9uQ3VycmVudGx5QWN0aXZlKG5vdGlmaWNhdGlvbjogT3V0T2ZPZmZpY2VOb3RpZmljYXRpb24sIGN1cnJlbnREYXRlOiBEYXRlKTogYm9vbGVhbiB7XG5cdGlmIChub3RpZmljYXRpb24uZW5hYmxlZCkge1xuXHRcdGlmIChub3RpZmljYXRpb24uc3RhcnREYXRlICYmICFub3RpZmljYXRpb24uZW5kRGF0ZSkge1xuXHRcdFx0cmV0dXJuIGN1cnJlbnREYXRlID49IG5vdGlmaWNhdGlvbi5zdGFydERhdGVcblx0XHR9IGVsc2UgaWYgKG5vdGlmaWNhdGlvbi5zdGFydERhdGUgJiYgbm90aWZpY2F0aW9uLmVuZERhdGUpIHtcblx0XHRcdHJldHVybiBjdXJyZW50RGF0ZSA+PSBub3RpZmljYXRpb24uc3RhcnREYXRlICYmIGN1cnJlbnREYXRlIDwgbm90aWZpY2F0aW9uLmVuZERhdGVcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gbm8gZGF0ZXMgc3BlY2lmaWVkIGJ1dCBlbmFibGVkXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0QWN0aXZhdGVTdGF0ZShub3RpZmljYXRpb246IE91dE9mT2ZmaWNlTm90aWZpY2F0aW9uIHwgbnVsbCk6IHN0cmluZyB7XG5cdGlmIChub3RpZmljYXRpb24gJiYgbm90aWZpY2F0aW9uLmVuYWJsZWQpIHtcblx0XHRsZXQgdGltZVJhbmdlID0gXCJcIlxuXG5cdFx0aWYgKG5vdGlmaWNhdGlvbi5zdGFydERhdGUpIHtcblx0XHRcdHRpbWVSYW5nZSArPSBcIiAoXCIgKyBmb3JtYXREYXRlKG5vdGlmaWNhdGlvbi5zdGFydERhdGUpXG5cblx0XHRcdGlmIChub3RpZmljYXRpb24uZW5kRGF0ZSkge1xuXHRcdFx0XHQvLyBlbmQgZGF0ZXMgYXJlIHN0b3JlZCBhcyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBmb2xsb3dpbmcgZGF0ZS4gV2Ugc3VidHJhY3Qgb25lIGRheSB0byBzaG93IHRoZSBjb3JyZWN0IGRhdGUgdG8gdGhlIHVzZXIuXG5cdFx0XHRcdGNvbnN0IHNoaWZ0ZWRFbmREYXRlID0gZ2V0RGF5U2hpZnRlZChub3RpZmljYXRpb24uZW5kRGF0ZSwgLTEpXG5cdFx0XHRcdHRpbWVSYW5nZSArPSBcIiAtIFwiICsgZm9ybWF0RGF0ZShzaGlmdGVkRW5kRGF0ZSlcblx0XHRcdH1cblxuXHRcdFx0dGltZVJhbmdlICs9IFwiKVwiXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxhbmcuZ2V0KFwiYWN0aXZhdGVkX2xhYmVsXCIpICsgdGltZVJhbmdlXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIGxhbmcuZ2V0KFwiZGVhY3RpdmF0ZWRfbGFiZWxcIilcblx0fVxufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gb3JnYW5pemF0aW9uTWVzc2FnZUVuYWJsZWQgdHJ1ZSBpZiBhIHNwZWNpYWwgbWVzc2FnZXNmb3Igc2VuZGVycyBmcm9tIHRoZSBzYW1lIG9yZ2FuaXphdGlvbiBpcyBzZXR1cFxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGxhYmVsIGZvciBkZWZhdWx0IG5vdGlmaWNhdGlvbnMgKGRlcGVuZHMgb24gd2hldGhlciBvbmx5IGRlZmF1bHQgbm90aWZpY2F0aW9ucyBvciBib3RoIGRlZmF1bHQgYW5kIHNhbWUgb3JnYW5pemF0aW9uIG5vdGlmaWNhdGlvbnMgYXJlIGVuYWJsZWQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0Tm90aWZpY2F0aW9uTGFiZWwob3JnYW5pemF0aW9uTWVzc2FnZUVuYWJsZWQ6IGJvb2xlYW4pOiBzdHJpbmcge1xuXHRpZiAob3JnYW5pemF0aW9uTWVzc2FnZUVuYWJsZWQpIHtcblx0XHRyZXR1cm4gbGFuZy5nZXQoXCJvdXRPZk9mZmljZUV4dGVybmFsX21zZ1wiKVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBsYW5nLmdldChcIm91dE9mT2ZmaWNlRXZlcnlvbmVfbXNnXCIpXG5cdH1cbn1cblxuLyoqXG4gKiBMb2FkcyB0aGUgb3V0IG9mIG9mZmljZSBub3RpZmljYXRpb24gZnJvbSB0aGUgc2VydmVyIGFuZCBzaGlmdHMgdGhlIGVuZCBkYXRlIChmcm9tIHRoZSBmaXJzdCBzZWNvbmQgb2YgdGhlIGZvbGxvd2luZyBkYXkgdG8gdGhlIGZpcnN0IHNlY29uZCBvZiB0aGUgbGFzdCBkYXkpXG4gKiB3aGljaCBpcyBuZWVkZWQgdG8gZGlzcGxheSB0aGUgY29ycmVjdCBlbmQgZGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRPdXRPZk9mZmljZU5vdGlmaWNhdGlvbigpOiBQcm9taXNlPE91dE9mT2ZmaWNlTm90aWZpY2F0aW9uIHwgbnVsbD4ge1xuXHRjb25zdCBtYWlsTWVtYmVyc2hpcCA9IGxvY2F0b3IubG9naW5zLmdldFVzZXJDb250cm9sbGVyKCkuZ2V0VXNlck1haWxHcm91cE1lbWJlcnNoaXAoKVxuXHRyZXR1cm4gbG9jYXRvci5lbnRpdHlDbGllbnQubG9hZChNYWlsYm94R3JvdXBSb290VHlwZVJlZiwgbWFpbE1lbWJlcnNoaXAuZ3JvdXApLnRoZW4oKGdyb3Vwcm9vdCkgPT4ge1xuXHRcdGlmIChncm91cHJvb3Qub3V0T2ZPZmZpY2VOb3RpZmljYXRpb24pIHtcblx0XHRcdHJldHVybiBsb2NhdG9yLmVudGl0eUNsaWVudC5sb2FkPE91dE9mT2ZmaWNlTm90aWZpY2F0aW9uPihPdXRPZk9mZmljZU5vdGlmaWNhdGlvblR5cGVSZWYsIGdyb3Vwcm9vdC5vdXRPZk9mZmljZU5vdGlmaWNhdGlvbilcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG51bGxcblx0XHR9XG5cdH0pXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFXTyxTQUFTLDhCQUE4QkEsY0FBdUNDLGFBQTRCO0FBQ2hILEtBQUksYUFBYSxRQUNoQixLQUFJLGFBQWEsY0FBYyxhQUFhLFFBQzNDLFFBQU8sZUFBZSxhQUFhO1NBQ3pCLGFBQWEsYUFBYSxhQUFhLFFBQ2pELFFBQU8sZUFBZSxhQUFhLGFBQWEsY0FBYyxhQUFhO0lBRzNFLFFBQU87SUFHUixRQUFPO0FBRVI7QUFFTSxTQUFTLG9CQUFvQkMsY0FBc0Q7QUFDekYsS0FBSSxnQkFBZ0IsYUFBYSxTQUFTO0VBQ3pDLElBQUksWUFBWTtBQUVoQixNQUFJLGFBQWEsV0FBVztBQUMzQixnQkFBYSxPQUFPLFdBQVcsYUFBYSxVQUFVO0FBRXRELE9BQUksYUFBYSxTQUFTO0lBRXpCLE1BQU0saUJBQWlCLGNBQWMsYUFBYSxTQUFTLEdBQUc7QUFDOUQsaUJBQWEsUUFBUSxXQUFXLGVBQWU7R0FDL0M7QUFFRCxnQkFBYTtFQUNiO0FBRUQsU0FBTyxLQUFLLElBQUksa0JBQWtCLEdBQUc7Q0FDckMsTUFDQSxRQUFPLEtBQUssSUFBSSxvQkFBb0I7QUFFckM7QUFPTSxTQUFTLDRCQUE0QkMsNEJBQTZDO0FBQ3hGLEtBQUksMkJBQ0gsUUFBTyxLQUFLLElBQUksMEJBQTBCO0lBRTFDLFFBQU8sS0FBSyxJQUFJLDBCQUEwQjtBQUUzQztBQU1NLFNBQVMsOEJBQXVFO0NBQ3RGLE1BQU0saUJBQWlCLFFBQVEsT0FBTyxtQkFBbUIsQ0FBQyw0QkFBNEI7QUFDdEYsUUFBTyxRQUFRLGFBQWEsS0FBSyx5QkFBeUIsZUFBZSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWM7QUFDbkcsTUFBSSxVQUFVLHdCQUNiLFFBQU8sUUFBUSxhQUFhLEtBQThCLGdDQUFnQyxVQUFVLHdCQUF3QjtJQUU1SCxRQUFPO0NBRVIsRUFBQztBQUNGIn0=