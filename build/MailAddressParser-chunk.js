import { isMailAddress } from "./FormatValidator-chunk.js";
import { convertTextToHtml } from "./Formatter-chunk.js";

//#region src/common/misc/parsing/MailAddressParser.ts
function parseMailtoUrl(mailtoUrl) {
	let url = new URL(mailtoUrl);
	const createMailAddressFromString = (address) => {
		const nameAndMailAddress = stringToNameAndMailAddress(address);
		if (!nameAndMailAddress) return null;
		return {
			name: nameAndMailAddress.name,
			address: nameAndMailAddress.mailAddress
		};
	};
	const addresses = url.pathname.split(",").map((address) => {
		if (!address) return null;
		const decodedAddress = decodeURIComponent(address);
		if (!decodedAddress) return null;
		return createMailAddressFromString(decodedAddress);
	}).filter(Boolean);
	const result = {
		recipients: {
			to: addresses.length > 0 ? addresses : undefined,
			cc: undefined,
			bcc: undefined
		},
		attach: null,
		subject: null,
		body: null
	};
	if (!url.searchParams || typeof url.searchParams.entries !== "function") return result;
	for (let pair of url.searchParams.entries()) {
		let paramName = pair[0].toLowerCase();
		let paramValue = pair[1];
		switch (paramName) {
			case "subject":
				result.subject = paramValue;
				break;
			case "body":
				result.body = convertTextToHtml(paramValue);
				break;
			case "to":
			case "cc":
			case "bcc": {
				if (result.recipients[paramName] == null) result.recipients[paramName] = [];
				const nextAddresses = paramValue.split(",").map((address) => createMailAddressFromString(address)).filter(Boolean);
				result.recipients[paramName].push(...nextAddresses);
				break;
			}
			case "attach":
				if (result.attach == null) result.attach = [];
				result.attach.push(paramValue);
				break;
			default: console.warn("unexpected mailto param, ignoring");
		}
	}
	return result;
}
function stringToNameAndMailAddress(string) {
	string = string.trim();
	if (string === "") return null;
	let startIndex = string.indexOf("<");
	if (startIndex !== -1) {
		const endIndex = string.indexOf(">", startIndex);
		if (endIndex === -1) return null;
		const cleanedMailAddress = getCleanedMailAddress(string.substring(startIndex + 1, endIndex));
		if (cleanedMailAddress == null || !isMailAddress(cleanedMailAddress, false)) return null;
		const name = string.substring(0, startIndex).trim();
		return {
			name,
			mailAddress: cleanedMailAddress
		};
	} else {
		startIndex = string.lastIndexOf(" ");
		startIndex++;
		const cleanedMailAddress = getCleanedMailAddress(string.substring(startIndex));
		if (cleanedMailAddress == null || !isMailAddress(cleanedMailAddress, false)) return null;
		const name = string.substring(0, startIndex).trim();
		return {
			name,
			mailAddress: cleanedMailAddress
		};
	}
}
function getCleanedMailAddress(mailAddress) {
	const cleanedMailAddress = mailAddress.toLowerCase().trim();
	if (isMailAddress(cleanedMailAddress, false)) return cleanedMailAddress;
	return null;
}
function getDomainPart(mailAddress) {
	const cleanedMailAddress = getCleanedMailAddress(mailAddress);
	if (cleanedMailAddress) {
		const parts = mailAddress.split("@");
		if (parts.length === 2) return parts[1];
else return null;
	} else return null;
}
function fullNameToFirstAndLastName(fullName) {
	fullName = fullName.trim();
	if (fullName === "") return {
		firstName: "",
		lastName: ""
	};
	const separator = fullName.indexOf(" ");
	if (separator !== -1) return {
		firstName: fullName.substring(0, separator),
		lastName: fullName.substring(separator + 1)
	};
else return {
		firstName: fullName,
		lastName: ""
	};
}
function mailAddressToFirstAndLastName(mailAddress) {
	const addr = mailAddress.substring(0, mailAddress.indexOf("@"));
	let nameData;
	if (addr.indexOf(".") !== -1) nameData = addr.split(".");
else if (addr.indexOf("_") !== -1) nameData = addr.split("_");
else if (addr.indexOf("-") !== -1) nameData = addr.split("-");
else nameData = [addr];
	for (let i = 0; i < nameData.length; i++) if (nameData[i].length > 0) nameData[i] = nameData[i].substring(0, 1).toUpperCase() + nameData[i].substring(1);
	return {
		firstName: nameData[0],
		lastName: nameData.slice(1).join(" ")
	};
}

//#endregion
export { fullNameToFirstAndLastName, getCleanedMailAddress, getDomainPart, mailAddressToFirstAndLastName, parseMailtoUrl, stringToNameAndMailAddress };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,