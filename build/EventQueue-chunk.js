import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { findAllAndRemove } from "./dist2-chunk.js";
import { OperationType } from "./TutanotaConstants-chunk.js";
import { ConnectionError, ServiceUnavailableError } from "./RestError-chunk.js";

//#region src/common/api/worker/EventQueue.ts
let EntityModificationType = function(EntityModificationType$1) {
	EntityModificationType$1["CREATE"] = "CREATE";
	EntityModificationType$1["UPDATE"] = "UPDATE";
	EntityModificationType$1["DELETE"] = "DELETE";
	return EntityModificationType$1;
}({});
function batchMod(batchId, batch, entityUpdate) {
	for (const batchEvent of batch) if (entityUpdate.instanceId === batchEvent.instanceId && entityUpdate.instanceListId === batchEvent.instanceListId && entityUpdate.application === batchEvent.application && entityUpdate.type === batchEvent.type) switch (batchEvent.operation) {
		case OperationType.CREATE: return EntityModificationType.CREATE;
		case OperationType.UPDATE: return EntityModificationType.UPDATE;
		case OperationType.DELETE: return EntityModificationType.DELETE;
		default: throw new ProgrammingError(`Unknown operation: ${batchEvent.operation}`);
	}
	throw new ProgrammingError(`Batch does not have events for ${entityUpdate.application}/${entityUpdate.type} ${lastOperationKey(entityUpdate)}, batchId: ${batchId}`);
}
function lastOperationKey(update) {
	const typeIdentifier = `${update.application}/${update.type}`;
	if (update.instanceListId) return `${typeIdentifier}/${update.instanceListId}/${update.instanceId}`;
else return `${typeIdentifier}/${update.instanceId}`;
}
var EventQueue = class {
	/** Batches to process. Oldest first. */
	eventQueue;
	lastOperationForEntity;
	processingBatch;
	paused;
	progressMonitor;
	/**
	* @param tag identifier to make for better log messages
	* @param optimizationEnabled whether the queue should try to optimize events and remove unnecessary ones with the knowledge of newer ones
	* @param queueAction which is executed for each batch. Must *never* throw.
	*/
	constructor(tag, optimizationEnabled, queueAction) {
		this.tag = tag;
		this.optimizationEnabled = optimizationEnabled;
		this.queueAction = queueAction;
		this.eventQueue = [];
		this.lastOperationForEntity = new Map();
		this.processingBatch = null;
		this.paused = false;
		this.progressMonitor = null;
	}
	addBatches(batches) {
		for (const batch of batches) this.add(batch.batchId, batch.groupId, batch.events);
	}
	setProgressMonitor(progressMonitor) {
		this.progressMonitor?.completed();
		this.progressMonitor = progressMonitor;
	}
	/**
	* @return whether the batch was added (not optimized away)
	*/
	add(batchId, groupId, newEvents) {
		const newBatch = {
			events: [],
			groupId,
			batchId
		};
		if (!this.optimizationEnabled) newBatch.events.push(...newEvents);
else this.optimizingAddEvents(newBatch, batchId, groupId, newEvents);
		if (newBatch.events.length !== 0) {
			this.eventQueue.push(newBatch);
			for (const update of newBatch.events) this.lastOperationForEntity.set(lastOperationKey(update), newBatch);
		}
		this.start();
		return newBatch.events.length > 0;
	}
	optimizingAddEvents(newBatch, batchId, groupId, newEvents) {
		for (const newEvent of newEvents) {
			const lastOpKey = lastOperationKey(newEvent);
			const lastBatchForEntity = this.lastOperationForEntity.get(lastOpKey);
			if (lastBatchForEntity == null || this.processingBatch != null && this.processingBatch === lastBatchForEntity || groupId !== lastBatchForEntity.groupId) newBatch.events.push(newEvent);
else {
				const newEntityModification = batchMod(batchId, newEvents, newEvent);
				const lastEntityModification = batchMod(lastBatchForEntity.batchId, lastBatchForEntity.events, newEvent);
				if (newEntityModification === EntityModificationType.UPDATE) switch (lastEntityModification) {
					case EntityModificationType.CREATE: break;
					case EntityModificationType.UPDATE: break;
					case EntityModificationType.DELETE: throw new ProgrammingError(`UPDATE not allowed after DELETE. Last batch: ${lastBatchForEntity.batchId}, new batch: ${batchId}, ${newEvent.type} ${lastOpKey}`);
				}
else if (newEntityModification === EntityModificationType.DELETE) {
					this.removeEventsForInstance(lastOpKey);
					this.lastOperationForEntity.set(lastOpKey, newBatch);
					newBatch.events.push(newEvent);
				} else if (newEntityModification === EntityModificationType.CREATE) if (lastEntityModification === EntityModificationType.DELETE || lastEntityModification === EntityModificationType.CREATE) newBatch.events.push(newEvent);
else throw new ProgrammingError(`Impossible modification combination ${lastEntityModification} ${newEntityModification} ${JSON.stringify(newEvent)}`);
else throw new ProgrammingError(`Impossible modification combination ${lastEntityModification} ${newEntityModification} ${JSON.stringify(newEvent)}`);
			}
		}
	}
	removeEventsForInstance(operationKey, startIndex = 0) {
		for (let i = startIndex; i < this.eventQueue.length; i++) {
			const batchInThePast = this.eventQueue[i];
			if (this.processingBatch === batchInThePast) continue;
			findAllAndRemove(batchInThePast.events, (event) => event.operation !== OperationType.DELETE && lastOperationKey(event) === operationKey);
		}
	}
	start() {
		if (this.processingBatch) return;
		this.processNext();
	}
	queueSize() {
		return this.eventQueue.length;
	}
	processNext() {
		if (this.paused) return;
		const next = this.eventQueue[0];
		if (next) {
			this.processingBatch = next;
			this.queueAction(next).then(() => {
				this.eventQueue.shift();
				this.progressMonitor?.workDone(1);
				this.processingBatch = null;
				for (const event of next.events) {
					const concatenatedId = lastOperationKey(event);
					if (this.lastOperationForEntity.get(concatenatedId) === next) this.lastOperationForEntity.delete(concatenatedId);
				}
				this.processNext();
			}).catch((e) => {
				console.log("EventQueue", this.tag, this.optimizationEnabled, "error", next, e);
				this.processingBatch = null;
				if (!(e instanceof ServiceUnavailableError || e instanceof ConnectionError)) console.error("Uncaught EventQueue error!", e, next);
			});
		}
	}
	clear() {
		this.eventQueue.splice(0);
		this.processingBatch = null;
		for (const k of this.lastOperationForEntity.keys()) this.lastOperationForEntity.delete(k);
	}
	pause() {
		this.paused = true;
	}
	resume() {
		this.paused = false;
		this.start();
	}
	/** @private visibleForTesting */
	get __processingBatch() {
		return this.processingBatch;
	}
};

//#endregion
export { EventQueue };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,