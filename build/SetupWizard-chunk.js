import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { isAndroidApp } from "./Env-chunk.js";
import { client } from "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { defer } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import "./styles-chunk.js";
import { themeOptions } from "./theme-chunk.js";
import "./TutanotaConstants-chunk.js";
import "./KeyManager-chunk.js";
import "./WindowFacade-chunk.js";
import "./RootView-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./ParserCombinator-chunk.js";
import "./stream-chunk.js";
import { CredentialAuthenticationError } from "./ErrorUtils-chunk.js";
import "./RestError-chunk.js";
import "./OutOfSyncError-chunk.js";
import { CancelledError } from "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import "./Button-chunk.js";
import "./Icons-chunk.js";
import "./DialogHeaderBar-chunk.js";
import "./CountryList-chunk.js";
import { Dialog, DialogType } from "./Dialog-chunk.js";
import "./Icon-chunk.js";
import "./AriaUtils-chunk.js";
import "./IconButton-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import "./BannerButton-chunk.js";
import { LoginButton } from "./LoginButton-chunk.js";
import { PermissionType$1 as PermissionType } from "./PermissionType-chunk.js";
import { AppLockMethod } from "./AppLockMethod-chunk.js";
import { RadioSelector } from "./RadioSelector-chunk.js";
import { NotificationPermissionsBody, renderSettingsBannerButton } from "./NotificationPermissionsDialog-chunk.js";
import { SelectAppLockMethodView } from "./SelectAppLockMethodDialog-chunk.js";
import { WizardEventType, createWizardDialog, emitWizardEvent, wizardPageWrapper } from "./WizardDialog-chunk.js";

//#region src/common/native/main/wizard/setupwizardpages/SetupPageLayout.ts
var SetupPageLayout = class {
	view({ attrs, children }) {
		return mithril_default("section.center.flex.flex-column.dialog-height-small.mt", [
			mithril_default("img.onboarding-logo.center-h", {
				src: `${window.tutao.appState.prefixWithoutFile}/images/onboarding-wizard/${attrs.image}.svg`,
				alt: "",
				rel: "noreferrer",
				loading: "lazy",
				decoding: "async",
				class: attrs.class
			}),
			children,
			mithril_default(LoginButton, {
				label: attrs.buttonLabel ?? "next_action",
				class: "wizard-next-button",
				onclick: (_, dom) => {
					emitWizardEvent(dom, WizardEventType.SHOW_NEXT_PAGE);
				}
			})
		]);
	}
};

//#endregion
//#region src/common/native/main/wizard/setupwizardpages/SetupCongraulationsPage.ts
var SetupCongratulationsPage = class {
	view() {
		return mithril_default(SetupPageLayout, {
			image: "congratulations",
			class: "onboarding-logo-large"
		}, [mithril_default("h2.mt-l.b", lang.get("welcome_text")), mithril_default("p.mt-s.full-width", lang.get("onboarding_text"))]);
	}
};
var SetupCongratulationsPageAttrs = class {
	preventGoBack = true;
	hidePagingButtonForPage = false;
	data = null;
	headerTitle() {
		return "welcome_label";
	}
	nextAction(showDialogs) {
		return Promise.resolve(true);
	}
	isSkipAvailable() {
		return false;
	}
	isEnabled() {
		return true;
	}
};

//#endregion
//#region src/common/native/main/wizard/setupwizardpages/SetupNotificationsPage.ts
var SetupNotificationsPage = class {
	view({ attrs }) {
		return mithril_default(SetupPageLayout, { image: "notifications" }, mithril_default(NotificationPermissionsBody, {
			isNotificationPermissionGranted: attrs.data.isNotificationPermissionGranted,
			isBatteryPermissionGranted: attrs.data.isBatteryPermissionGranted,
			askForNotificationPermission: (isGranted) => attrs.setIsNotificationPermissionGranted(isGranted),
			askForBatteryNotificationPermission: (isGranted) => attrs.setIsBatteryNotificationPermissionGranted(isGranted)
		}));
	}
};
var SetupNotificationsPageAttrs = class {
	hidePagingButtonForPage = false;
	data;
	isPageVisible;
	constructor(permissionData, visiblityStream, systemPermissionHandler) {
		this.systemPermissionHandler = systemPermissionHandler;
		this.isPageVisible = this.isPageNeeded(permissionData);
		this.data = permissionData;
		visiblityStream.map((isVisible) => {
			if (isVisible) this.systemPermissionHandler.queryPermissionsState([PermissionType.Notification, PermissionType.IgnoreBatteryOptimization]).then((permissionState) => {
				this.data = {
					isNotificationPermissionGranted: permissionState.get(PermissionType.Notification) ?? false,
					isBatteryPermissionGranted: permissionState.get(PermissionType.IgnoreBatteryOptimization) ?? false
				};
				mithril_default.redraw();
			});
		});
	}
	setIsNotificationPermissionGranted(isGranted) {
		this.data = {
			...this.data,
			isNotificationPermissionGranted: isGranted
		};
		mithril_default.redraw();
	}
	setIsBatteryNotificationPermissionGranted(isGranted) {
		this.data = {
			...this.data,
			isBatteryPermissionGranted: isGranted
		};
		mithril_default.redraw();
	}
	isPageNeeded(data) {
		if (isAndroidApp()) return !data.isNotificationPermissionGranted || !data.isBatteryPermissionGranted;
		return !data.isNotificationPermissionGranted;
	}
	headerTitle() {
		return "notificationSettings_action";
	}
	nextAction(showDialogs) {
		return Promise.resolve(true);
	}
	isSkipAvailable() {
		return false;
	}
	isEnabled() {
		return this.isPageVisible;
	}
};

//#endregion
//#region src/common/native/main/wizard/setupwizardpages/SetupThemePage.ts
var SetupThemePage = class {
	customThemes = null;
	oninit() {
		locator.themeController.getCustomThemes().then((customThemes) => {
			this.customThemes = customThemes.map((themeId) => {
				return {
					name: lang.makeTranslation(themeId, themeId),
					value: themeId
				};
			});
			mithril_default.redraw();
		});
	}
	view() {
		return mithril_default(
			SetupPageLayout,
			{ image: "theme" },
			mithril_default("p.full-width", lang.get("theme_title")),
			// We need to await the promise from `themeController.getCustomThemes()`, so we delay rendering the `RadioSelector` until it does.
			this.customThemes == null ? null : mithril_default(RadioSelector, {
				name: "theme_label",
				options: [...themeOptions(client.isCalendarApp()), ...this.customThemes],
				class: "mb-s",
				selectedOption: locator.themeController.themePreference,
				onOptionSelected: (option) => {
					locator.themeController.setThemePreference(option, true);
				}
			})
);
	}
};
var SetupThemePageAttrs = class {
	hidePagingButtonForPage = false;
	data = null;
	headerTitle() {
		return "appearanceSettings_label";
	}
	nextAction(showDialogs) {
		return Promise.resolve(true);
	}
	isSkipAvailable() {
		return false;
	}
	isEnabled() {
		return true;
	}
};

//#endregion
//#region src/common/native/main/wizard/setupwizardpages/SetupContactsPage.ts
var SetupContactsPage = class {
	view({ attrs }) {
		return mithril_default(SetupPageLayout, { image: "contacts" }, this.renderImportAndSyncButtons(attrs));
	}
	renderImportAndSyncButtons(attrs) {
		const isContactSyncEnabled = attrs.syncManager.isEnabled();
		return [
			mithril_default("p.mb-s", lang.get("importContacts_msg")),
			renderSettingsBannerButton("import_action", () => {
				attrs.contactImporter.importContactsFromDeviceSafely();
			}),
			mithril_default("p.mb-s", lang.get("allowContactSynchronization")),
			renderSettingsBannerButton(isContactSyncEnabled ? "activated_label" : "activate_action", () => {
				this.enableSync(attrs);
			}, isContactSyncEnabled, "mb-l")
		];
	}
	async enableSync(attrs) {
		const success = await attrs.syncManager.enableSync();
		if (!success) {
			await attrs.syncManager.disableSync();
			await Dialog.message("allowContactReadWrite_msg");
			await attrs.mobileSystemFacade.goToSettings();
		}
	}
};
var SetupContactsPageAttrs = class {
	hidePagingButtonForPage = false;
	data = null;
	constructor(syncManager, contactImporter, mobileSystemFacade, allowContactSyncAndImport) {
		this.syncManager = syncManager;
		this.contactImporter = contactImporter;
		this.mobileSystemFacade = mobileSystemFacade;
		this.allowContactSyncAndImport = allowContactSyncAndImport;
	}
	headerTitle() {
		return "contacts_label";
	}
	nextAction(showDialogs) {
		return Promise.resolve(true);
	}
	isSkipAvailable() {
		return false;
	}
	isEnabled() {
		return this.allowContactSyncAndImport;
	}
};

//#endregion
//#region src/common/native/main/wizard/setupwizardpages/SetupLockPage.ts
var SetupLockPage = class {
	view({ attrs }) {
		return mithril_default(SetupPageLayout, {
			image: "lock",
			buttonLabel: "finish_action"
		}, [mithril_default(SelectAppLockMethodView, {
			class: "mt",
			error: attrs.error,
			supportedModes: attrs.supportedModes,
			previousSelection: attrs.currentMode,
			onConfirm: null,
			onModeSelected: (mode) => attrs.currentMode = mode
		})]);
	}
};
var SetupLockPageAttrs = class {
	hidePagingButtonForPage = false;
	data = null;
	error = null;
	supportedModes = [];
	currentMode = AppLockMethod.None;
	constructor(mobileSystemFacade) {
		this.mobileSystemFacade = mobileSystemFacade;
		mobileSystemFacade.getSupportedAppLockMethods().then((supportedMethods) => {
			this.supportedModes = supportedMethods;
			mithril_default.redraw();
		});
		this.mobileSystemFacade.getAppLockMethod().then((appLockMethod) => {
			this.currentMode = appLockMethod;
			mithril_default.redraw();
		});
	}
	headerTitle() {
		return "credentialsEncryptionMode_label";
	}
	async nextAction(showDialogs) {
		try {
			await this.mobileSystemFacade.enforceAppLock(this.currentMode);
			await this.mobileSystemFacade.setAppLockMethod(this.currentMode);
		} catch (e) {
			if (e instanceof CredentialAuthenticationError) {
				this.error = e.message;
				mithril_default.redraw();
				return false;
			} else if (e instanceof CancelledError) return false;
else throw e;
		}
		return true;
	}
	isSkipAvailable() {
		return false;
	}
	isEnabled() {
		return this.supportedModes.length > 1;
	}
};

//#endregion
//#region src/common/native/main/wizard/SetupWizard.ts
async function showSetupWizard(systemPermissionHandler, webMobileFacade, contactImporter, systemFacade, credentialsProvider, contactSyncManager, deviceConfig, allowContactSyncAndImport) {
	const permissionStatus = await systemPermissionHandler.queryPermissionsState([
		PermissionType.Contacts,
		PermissionType.Notification,
		PermissionType.IgnoreBatteryOptimization
	]);
	let wizardPages = [];
	wizardPages.push(wizardPageWrapper(SetupCongratulationsPage, new SetupCongratulationsPageAttrs()));
	wizardPages.push(wizardPageWrapper(SetupNotificationsPage, new SetupNotificationsPageAttrs({
		isNotificationPermissionGranted: permissionStatus.get(PermissionType.Notification) ?? false,
		isBatteryPermissionGranted: permissionStatus.get(PermissionType.IgnoreBatteryOptimization) ?? false
	}, webMobileFacade.getIsAppVisible(), systemPermissionHandler)));
	wizardPages.push(wizardPageWrapper(SetupThemePage, new SetupThemePageAttrs()));
	if (allowContactSyncAndImport && contactSyncManager && contactImporter) wizardPages.push(wizardPageWrapper(SetupContactsPage, new SetupContactsPageAttrs(contactSyncManager, contactImporter, systemFacade, allowContactSyncAndImport)));
	wizardPages.push(wizardPageWrapper(SetupLockPage, new SetupLockPageAttrs(locator.systemFacade)));
	const deferred = defer();
	const wizardBuilder = createWizardDialog(null, wizardPages, async () => {
		deviceConfig.setIsSetupComplete(true);
		deferred.resolve();
	}, DialogType.EditSmall);
	wizardBuilder.dialog.show();
	return deferred.promise;
}

//#endregion
export { showSetupWizard };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,