import { lang } from "./LanguageViewModel-chunk.js";
import { ContactAddressType, ContactCustomDateType, ContactMessengerHandleType, ContactPhoneNumberType, ContactRelationshipType, ContactSocialType, ContactWebsiteType } from "./TutanotaConstants-chunk.js";
import { sortCompareByReverseId } from "./EntityUtils-chunk.js";

//#region src/mail-app/contacts/view/ContactGuiUtils.ts
const ContactMailAddressTypeToLabel = {
	[ContactAddressType.PRIVATE]: "private_label",
	[ContactAddressType.WORK]: "work_label",
	[ContactAddressType.OTHER]: "other_label",
	[ContactAddressType.CUSTOM]: "custom_label"
};
function getContactAddressTypeLabel(type, custom) {
	if (type === ContactAddressType.CUSTOM) return lang.makeTranslation("custom", custom);
else {
		let key = ContactMailAddressTypeToLabel[type];
		return key;
	}
}
const ContactPhoneNumberTypeToLabel = {
	[ContactPhoneNumberType.PRIVATE]: "private_label",
	[ContactPhoneNumberType.WORK]: "work_label",
	[ContactPhoneNumberType.MOBILE]: "mobile_label",
	[ContactPhoneNumberType.FAX]: "fax_label",
	[ContactPhoneNumberType.OTHER]: "other_label",
	[ContactPhoneNumberType.CUSTOM]: "custom_label"
};
function getContactPhoneNumberTypeLabel(type, custom) {
	if (type === ContactPhoneNumberType.CUSTOM) return lang.makeTranslation("custom", custom);
else {
		let key = ContactPhoneNumberTypeToLabel[type];
		return key;
	}
}
const ContactSocialTypeToLabel = {
	[ContactSocialType.TWITTER]: "twitter_label",
	[ContactSocialType.FACEBOOK]: "facebook_label",
	[ContactSocialType.XING]: "xing_label",
	[ContactSocialType.LINKED_IN]: "linkedin_label",
	[ContactSocialType.OTHER]: "other_label",
	[ContactSocialType.CUSTOM]: "custom_label"
};
function getContactSocialTypeLabel(type, custom) {
	if (type === ContactSocialType.CUSTOM) return lang.makeTranslation("custom", custom);
else {
		let key = ContactSocialTypeToLabel[type];
		return key;
	}
}
const ContactRelationshipTypeToLabel = {
	[ContactRelationshipType.PARENT]: "parent_label",
	[ContactRelationshipType.BROTHER]: "brother_label",
	[ContactRelationshipType.SISTER]: "sister_label",
	[ContactRelationshipType.CHILD]: "child_label",
	[ContactRelationshipType.FRIEND]: "friend_label",
	[ContactRelationshipType.RELATIVE]: "relative_label",
	[ContactRelationshipType.SPOUSE]: "spouse_label",
	[ContactRelationshipType.PARTNER]: "partner_label",
	[ContactRelationshipType.ASSISTANT]: "assistant_label",
	[ContactRelationshipType.MANAGER]: "manager_label",
	[ContactRelationshipType.OTHER]: "other_label",
	[ContactRelationshipType.CUSTOM]: "custom_label"
};
function getContactRelationshipTypeToLabel(type, custom) {
	if (type === ContactRelationshipType.CUSTOM) return lang.makeTranslation("custom", custom);
else {
		let key = ContactRelationshipTypeToLabel[type];
		return key;
	}
}
const ContactMessengerHandleTypeToLabel = {
	[ContactMessengerHandleType.SIGNAL]: "signal_label",
	[ContactMessengerHandleType.WHATSAPP]: "whatsapp_label",
	[ContactMessengerHandleType.TELEGRAM]: "telegram_label",
	[ContactMessengerHandleType.DISCORD]: "discord_label",
	[ContactMessengerHandleType.OTHER]: "other_label",
	[ContactMessengerHandleType.CUSTOM]: "custom_label"
};
function getContactMessengerHandleTypeToLabel(type, custom) {
	if (type === ContactMessengerHandleType.CUSTOM) return lang.makeTranslation("custom", custom);
else {
		let key = ContactMessengerHandleTypeToLabel[type];
		return key;
	}
}
const ContactCustomDateTypeToLabel = {
	[ContactCustomDateType.ANNIVERSARY]: "anniversary_label",
	[ContactCustomDateType.OTHER]: "other_label",
	[ContactCustomDateType.CUSTOM]: "custom_label"
};
function getContactCustomDateTypeToLabel(type, custom) {
	if (type === ContactCustomDateType.CUSTOM) return lang.makeTranslation("custom", custom);
else {
		let key = ContactCustomDateTypeToLabel[type];
		return key;
	}
}
const ContactCustomWebsiteTypeToLabel = {
	[ContactWebsiteType.PRIVATE]: "private_label",
	[ContactWebsiteType.WORK]: "work_label",
	[ContactWebsiteType.OTHER]: "other_label",
	[ContactWebsiteType.CUSTOM]: "custom_label"
};
function getContactCustomWebsiteTypeToLabel(type, custom) {
	if (type === ContactWebsiteType.CUSTOM) return lang.makeTranslation("custom", custom);
else {
		let key = ContactCustomWebsiteTypeToLabel[type];
		return key;
	}
}
function compareContacts(contact1, contact2, sortByFirstName = true) {
	let c1First = contact1.firstName.trim();
	let c2First = contact2.firstName.trim();
	let c1Last = contact1.lastName.trim();
	let c2Last = contact2.lastName.trim();
	let c1MailLength = contact1.mailAddresses.length;
	let c2MailLength = contact2.mailAddresses.length;
	let [c1Primary, c1Secondary] = sortByFirstName ? [c1First, c1Last] : [c1Last, c1First];
	let [c2Primary, c2Secondary] = sortByFirstName ? [c2First, c2Last] : [c2Last, c2First];
	if (!c1Primary && !c1Secondary) c1Primary = contact1.company;
	if (!c2Primary && !c2Secondary) c2Primary = contact2.company;
	if (c1Primary && !c2Primary) return -1;
else if (c2Primary && !c1Primary) return 1;
else {
		let result = c1Primary.localeCompare(c2Primary);
		if (result === 0) if (c1Secondary && !c2Secondary) return -1;
else if (c2Secondary && !c1Secondary) return 1;
else result = c1Secondary.localeCompare(c2Secondary);
		if (result === 0) if (c1MailLength > 0 && c2MailLength === 0) return -1;
else if (c2MailLength > 0 && c1MailLength === 0) return 1;
else if (c1MailLength === 0 && c2MailLength === 0) return sortCompareByReverseId(contact1, contact2);
else {
			result = contact1.mailAddresses[0].address.trim().localeCompare(contact2.mailAddresses[0].address.trim());
			if (result === 0) return sortCompareByReverseId(contact1, contact2);
else return result;
		}
else return result;
	}
}

//#endregion
export { ContactCustomDateTypeToLabel, ContactCustomWebsiteTypeToLabel, ContactMailAddressTypeToLabel, ContactMessengerHandleTypeToLabel, ContactPhoneNumberTypeToLabel, ContactRelationshipTypeToLabel, ContactSocialTypeToLabel, compareContacts, getContactAddressTypeLabel, getContactCustomDateTypeToLabel, getContactCustomWebsiteTypeToLabel, getContactMessengerHandleTypeToLabel, getContactPhoneNumberTypeLabel, getContactRelationshipTypeToLabel, getContactSocialTypeLabel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,