import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { isDesktop } from "./Env-chunk.js";
import { AppType } from "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { decodeBase64, noOp, ofClass } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import "./styles-chunk.js";
import "./theme-chunk.js";
import { HighestTierPlans } from "./TutanotaConstants-chunk.js";
import "./KeyManager-chunk.js";
import "./WindowFacade-chunk.js";
import "./RootView-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { ContactTypeRef } from "./TypeRefs-chunk.js";
import "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import "./FormatValidator-chunk.js";
import "./stream-chunk.js";
import "./ErrorUtils-chunk.js";
import "./RestError-chunk.js";
import "./OutOfSyncError-chunk.js";
import { CancelledError } from "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import "./GroupUtils-chunk.js";
import "./Button-chunk.js";
import "./Icons-chunk.js";
import "./DialogHeaderBar-chunk.js";
import "./CountryList-chunk.js";
import { Dialog } from "./Dialog-chunk.js";
import "./Icon-chunk.js";
import "./AriaUtils-chunk.js";
import "./IconButton-chunk.js";
import "./Formatter-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { UserError } from "./UserError-chunk.js";
import "./MailAddressParser-chunk.js";
import "./BlobUtils-chunk.js";
import "./FileUtils-chunk.js";
import "./ProgressDialog-chunk.js";
import "./SharedMailUtils-chunk.js";
import "./PasswordUtils-chunk.js";
import "./ToggleButton-chunk.js";
import "./BubbleButton-chunk.js";
import "./PasswordField-chunk.js";
import { showRequestPasswordDialog } from "./PasswordRequestDialog-chunk.js";
import { AttachmentType, getAttachmentType } from "./AttachmentBubble-chunk.js";

//#region src/common/native/main/WebCommonNativeFacade.ts
var WebCommonNativeFacade = class {
	constructor(logins, mailboxModel, usageTestController, fileApp, pushService, fileImportHandler, openMailBox, openCalendar, appType, openSettings) {
		this.logins = logins;
		this.mailboxModel = mailboxModel;
		this.usageTestController = usageTestController;
		this.fileApp = fileApp;
		this.pushService = pushService;
		this.fileImportHandler = fileImportHandler;
		this.openMailBox = openMailBox;
		this.openCalendar = openCalendar;
		this.appType = appType;
		this.openSettings = openSettings;
	}
	async openContactEditor(contactId) {
		await this.logins.waitForFullLogin();
		const { ContactEditor } = await import("./ContactEditor2-chunk.js");
		const decodedContactId = decodeBase64("utf-8", contactId);
		const idParts = decodedContactId.split("/");
		try {
			const contact = await locator.entityClient.load(ContactTypeRef, [idParts[0], idParts[1]]);
			const editor = new ContactEditor(locator.entityClient, contact);
			return editor.show();
		} catch (err) {
			console.error(err);
			return Dialog.message("contactNotFound_msg");
		}
	}
	/**
	* create a mail editor as requested from the native side, ie because a
	* mailto-link was clicked or the "Send as mail" option
	* in LibreOffice/Windows Explorer was used.
	*
	* if a mailtoUrl is given:
	*  * the other arguments will be ignored.
	*  * confidential will be set to false
	*
	*/
	async createMailEditor(filesUris, text, addresses, subject, mailToUrlString) {
		const { newMailEditorFromTemplate, newMailtoUrlMailEditor } = await import("./MailEditor2-chunk.js");
		const signatureModule = await import("./Signature2-chunk.js");
		await this.logins.waitForPartialLogin();
		const mailboxDetails = await this.mailboxModel.getUserMailboxDetails();
		let editor;
		try {
			if (mailToUrlString) {
				editor = await newMailtoUrlMailEditor(mailToUrlString, false, mailboxDetails).catch(ofClass(CancelledError, noOp));
				if (!editor) return;
				editor.show();
			} else {
				const fileApp = await this.fileApp();
				const files = await fileApp.getFilesMetaData(filesUris);
				const allFilesAreVCards = files.length > 0 && files.every((file) => getAttachmentType(file.mimeType) === AttachmentType.CONTACT);
				const allFilesAreICS = files.length > 0 && files.every((file) => getAttachmentType(file.mimeType) === AttachmentType.CALENDAR);
				const allFilesAreMail = files.length > 0 && files.every((file) => getAttachmentType(file.mimeType) === AttachmentType.MAIL);
				if (this.appType === AppType.Calendar) {
					if (!allFilesAreICS) return Dialog.message("invalidCalendarFile_msg");
					return this.handleFileImport(filesUris);
				}
				let willImport = false;
				if (allFilesAreVCards) willImport = await Dialog.choice("vcardInSharingFiles_msg", [{
					text: "import_action",
					value: true
				}, {
					text: "attachFiles_action",
					value: false
				}]);
else if (allFilesAreICS) willImport = await Dialog.choice("icsInSharingFiles_msg", [{
					text: "import_action",
					value: true
				}, {
					text: "attachFiles_action",
					value: false
				}]);
else if (isDesktop() && allFilesAreMail) {
					const currentPlanType = await locator.logins.getUserController().getPlanType();
					const isHighestTierPlan = HighestTierPlans.includes(currentPlanType);
					let importAction = {
						text: "import_action",
						value: true
					};
					let attachFilesAction = {
						text: "attachFiles_action",
						value: false
					};
					willImport = isHighestTierPlan && await Dialog.choice("emlOrMboxInSharingFiles_msg", [importAction, attachFilesAction]);
				}
				if (willImport) await this.handleFileImport(filesUris);
else {
					const address = addresses && addresses[0] || "";
					const recipients = address ? { to: [{
						name: "",
						address
					}] } : {};
					editor = await newMailEditorFromTemplate(mailboxDetails, recipients, subject || (files.length > 0 ? files[0].name : ""), signatureModule.appendEmailSignature(text || "", this.logins.getUserController().props), files, undefined, undefined, true);
					editor.show();
				}
			}
		} catch (e) {
			if (e instanceof UserError) Dialog.message(lang.makeTranslation("error_msg", e.message));
			throw e;
		}
	}
	async invalidateAlarms() {
		const pushService = await this.pushService();
		await pushService.reRegister();
	}
	async showAlertDialog(translationKey) {
		const { Dialog: Dialog$1 } = await import("./Dialog2-chunk.js");
		return Dialog$1.message(translationKey);
	}
	async updateTheme() {
		await locator.themeController.reloadTheme();
	}
	/**
	* largely modeled after ChangePasswordOkAction, except that we're never changing the password with it and
	* don't support bcrypt for this one.
	*/
	async promptForNewPassword(title, oldPassword) {
		const [{ Dialog: Dialog$1 }, { PasswordForm, PasswordModel }] = await Promise.all([import("./Dialog2-chunk.js"), import("./PasswordForm2-chunk.js")]);
		const model = new PasswordModel(this.usageTestController, this.logins, {
			checkOldPassword: false,
			enforceStrength: false
		});
		return new Promise((resolve, reject) => {
			const changePasswordOkAction = async (dialog) => {
				const error = model.getErrorMessageId();
				if (error) Dialog$1.message(error);
else {
					resolve(model.getNewPassword());
					dialog.close();
				}
			};
			Dialog$1.showActionDialog({
				title: lang.makeTranslation(title, title),
				child: () => mithril_default(PasswordForm, { model }),
				validator: () => model.getErrorMessageId(),
				okAction: changePasswordOkAction,
				cancelAction: () => reject(new CancelledError("user cancelled operation")),
				allowCancel: true
			});
		});
	}
	async promptForPassword(title) {
		const { Dialog: Dialog$1 } = await import("./Dialog2-chunk.js");
		return new Promise((resolve, reject) => {
			const dialog = showRequestPasswordDialog({
				title: lang.makeTranslation(title, title),
				action: async (pw) => {
					resolve(pw);
					dialog.close();
					return "";
				},
				cancel: {
					textId: "cancel_action",
					action: () => reject(new CancelledError("user cancelled operation"))
				}
			});
		});
	}
	/**
	* Parse and handle files given a list of files URI.
	* @param filesUris List of files URI to be parsed
	*/
	async handleFileImport(filesUris) {
		await this.logins.waitForFullLogin();
		await this.fileImportHandler(filesUris);
	}
};

//#endregion
export { WebCommonNativeFacade };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,