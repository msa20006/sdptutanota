import { pMap } from "./dist2-chunk.js";
import { CUSTOM_MIN_ID } from "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { CalendarEventTypeRef } from "./TypeRefs-chunk.js";
import { SessionType } from "./SessionType-chunk.js";
import { NoopProgressMonitor } from "./ProgressMonitor-chunk.js";

//#region src/common/offline/CachePostLoginAction.ts
var CachePostLoginAction = class {
	constructor(calendarModel, entityClient, progressTracker, cacheStorage, logins) {
		this.calendarModel = calendarModel;
		this.entityClient = entityClient;
		this.progressTracker = progressTracker;
		this.cacheStorage = cacheStorage;
		this.logins = logins;
	}
	async onFullLoginSuccess(loggedInEvent) {
		if (loggedInEvent.sessionType !== SessionType.Persistent) return;
		const workPerCalendar = 5;
		const totalWork = this.logins.getUserController().getCalendarMemberships().length * workPerCalendar;
		const monitorHandle = await this.progressTracker.registerMonitor(totalWork);
		const progressMonitor = this.progressTracker.getMonitor(monitorHandle) ?? new NoopProgressMonitor();
		const calendarInfos = await this.calendarModel.getCalendarInfos();
		await pMap(calendarInfos.values(), async ({ groupRoot }) => {
			await Promise.all([this.entityClient.loadAll(CalendarEventTypeRef, groupRoot.longEvents, CUSTOM_MIN_ID).then(() => progressMonitor.workDone(1)), this.entityClient.loadAll(CalendarEventTypeRef, groupRoot.shortEvents, CUSTOM_MIN_ID).then(() => progressMonitor.workDone(1))]);
		});
		progressMonitor.completed();
		await this.cacheStorage.clearExcludedData();
	}
	async onPartialLoginSuccess(loggedInEvent) {
		return Promise.resolve();
	}
};

//#endregion
export { CachePostLoginAction };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FjaGVQb3N0TG9naW5BY3Rpb24tY2h1bmsuanMiLCJuYW1lcyI6WyJjYWxlbmRhck1vZGVsOiBDYWxlbmRhck1vZGVsIiwiZW50aXR5Q2xpZW50OiBFbnRpdHlDbGllbnQiLCJwcm9ncmVzc1RyYWNrZXI6IFByb2dyZXNzVHJhY2tlciIsImNhY2hlU3RvcmFnZTogRXhwb3NlZENhY2hlU3RvcmFnZSIsImxvZ2luczogTG9naW5Db250cm9sbGVyIiwibG9nZ2VkSW5FdmVudDogTG9nZ2VkSW5FdmVudCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vb2ZmbGluZS9DYWNoZVBvc3RMb2dpbkFjdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb3N0TG9naW5BY3Rpb24sIExvZ2dlZEluRXZlbnQsIExvZ2luQ29udHJvbGxlciB9IGZyb20gXCIuLi9hcGkvbWFpbi9Mb2dpbkNvbnRyb2xsZXIuanNcIlxuaW1wb3J0IHsgQ2FsZW5kYXJNb2RlbCB9IGZyb20gXCIuLi8uLi9jYWxlbmRhci1hcHAvY2FsZW5kYXIvbW9kZWwvQ2FsZW5kYXJNb2RlbC5qc1wiXG5pbXBvcnQgeyBDYWxlbmRhckV2ZW50VHlwZVJlZiB9IGZyb20gXCIuLi9hcGkvZW50aXRpZXMvdHV0YW5vdGEvVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgQ1VTVE9NX01JTl9JRCB9IGZyb20gXCIuLi9hcGkvY29tbW9uL3V0aWxzL0VudGl0eVV0aWxzLmpzXCJcbmltcG9ydCB7IEVudGl0eUNsaWVudCB9IGZyb20gXCIuLi9hcGkvY29tbW9uL0VudGl0eUNsaWVudC5qc1wiXG5pbXBvcnQgeyBQcm9ncmVzc1RyYWNrZXIgfSBmcm9tIFwiLi4vYXBpL21haW4vUHJvZ3Jlc3NUcmFja2VyLmpzXCJcbmltcG9ydCB7IHByb21pc2VNYXAgfSBmcm9tIFwiQHR1dGFvL3R1dGFub3RhLXV0aWxzXCJcbmltcG9ydCB7IE5vb3BQcm9ncmVzc01vbml0b3IgfSBmcm9tIFwiLi4vYXBpL2NvbW1vbi91dGlscy9Qcm9ncmVzc01vbml0b3IuanNcIlxuaW1wb3J0IHsgU2Vzc2lvblR5cGUgfSBmcm9tIFwiLi4vYXBpL2NvbW1vbi9TZXNzaW9uVHlwZS5qc1wiXG5pbXBvcnQgeyBFeHBvc2VkQ2FjaGVTdG9yYWdlIH0gZnJvbSBcIi4uL2FwaS93b3JrZXIvcmVzdC9EZWZhdWx0RW50aXR5UmVzdENhY2hlLmpzXCJcblxuZXhwb3J0IGNsYXNzIENhY2hlUG9zdExvZ2luQWN0aW9uIGltcGxlbWVudHMgUG9zdExvZ2luQWN0aW9uIHtcblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSByZWFkb25seSBjYWxlbmRhck1vZGVsOiBDYWxlbmRhck1vZGVsLFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgZW50aXR5Q2xpZW50OiBFbnRpdHlDbGllbnQsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBwcm9ncmVzc1RyYWNrZXI6IFByb2dyZXNzVHJhY2tlcixcblx0XHRwcml2YXRlIHJlYWRvbmx5IGNhY2hlU3RvcmFnZTogRXhwb3NlZENhY2hlU3RvcmFnZSxcblx0XHRwcml2YXRlIHJlYWRvbmx5IGxvZ2luczogTG9naW5Db250cm9sbGVyLFxuXHQpIHt9XG5cblx0YXN5bmMgb25GdWxsTG9naW5TdWNjZXNzKGxvZ2dlZEluRXZlbnQ6IExvZ2dlZEluRXZlbnQpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyB3ZSB1c2UgYW4gZXBoZW1lcmFsIGNhY2hlIGZvciBub24tcGVyc2lzdGVudCBzZXNzaW9ucyB3aGljaCBkb2Vzbid0XG5cdFx0Ly8gc3VwcG9ydCBvciBzYXZlIGNhbGVuZGFyIGV2ZW50cywgc28gaXQncyBwb2ludGxlc3MgdG8gcHJlbG9hZCB0aGVtLlxuXHRcdGlmIChsb2dnZWRJbkV2ZW50LnNlc3Npb25UeXBlICE9PSBTZXNzaW9uVHlwZS5QZXJzaXN0ZW50KSByZXR1cm5cblx0XHQvL1xuXHRcdC8vIDMgd29yayB0byBsb2FkIGNhbGVuZGFyIGluZm8sIDIgd29yayB0byBsb2FkIHNob3J0IGFuZCBsb25nIGV2ZW50c1xuXHRcdGNvbnN0IHdvcmtQZXJDYWxlbmRhciA9IDMgKyAyXG5cdFx0Y29uc3QgdG90YWxXb3JrID0gdGhpcy5sb2dpbnMuZ2V0VXNlckNvbnRyb2xsZXIoKS5nZXRDYWxlbmRhck1lbWJlcnNoaXBzKCkubGVuZ3RoICogd29ya1BlckNhbGVuZGFyXG5cdFx0Y29uc3QgbW9uaXRvckhhbmRsZSA9IGF3YWl0IHRoaXMucHJvZ3Jlc3NUcmFja2VyLnJlZ2lzdGVyTW9uaXRvcih0b3RhbFdvcmspXG5cdFx0Y29uc3QgcHJvZ3Jlc3NNb25pdG9yID0gdGhpcy5wcm9ncmVzc1RyYWNrZXIuZ2V0TW9uaXRvcihtb25pdG9ySGFuZGxlKSA/PyBuZXcgTm9vcFByb2dyZXNzTW9uaXRvcigpXG5cdFx0Y29uc3QgY2FsZW5kYXJJbmZvcyA9IGF3YWl0IHRoaXMuY2FsZW5kYXJNb2RlbC5nZXRDYWxlbmRhckluZm9zKClcblxuXHRcdGF3YWl0IHByb21pc2VNYXAoY2FsZW5kYXJJbmZvcy52YWx1ZXMoKSwgYXN5bmMgKHsgZ3JvdXBSb290IH0pID0+IHtcblx0XHRcdGF3YWl0IFByb21pc2UuYWxsKFtcblx0XHRcdFx0dGhpcy5lbnRpdHlDbGllbnQubG9hZEFsbChDYWxlbmRhckV2ZW50VHlwZVJlZiwgZ3JvdXBSb290LmxvbmdFdmVudHMsIENVU1RPTV9NSU5fSUQpLnRoZW4oKCkgPT4gcHJvZ3Jlc3NNb25pdG9yLndvcmtEb25lKDEpKSxcblx0XHRcdFx0dGhpcy5lbnRpdHlDbGllbnQubG9hZEFsbChDYWxlbmRhckV2ZW50VHlwZVJlZiwgZ3JvdXBSb290LnNob3J0RXZlbnRzLCBDVVNUT01fTUlOX0lEKS50aGVuKCgpID0+IHByb2dyZXNzTW9uaXRvci53b3JrRG9uZSgxKSksXG5cdFx0XHRdKVxuXHRcdH0pXG5cdFx0cHJvZ3Jlc3NNb25pdG9yLmNvbXBsZXRlZCgpXG5cblx0XHQvLyBDbGVhciB0aGUgZXhjbHVkZWQgZGF0YSAoaS5lLiB0cmFzaCBhbmQgc3BhbSBsaXN0cywgb2xkIGRhdGEpIGluIHRoZSBvZmZsaW5lIHN0b3JhZ2UuXG5cdFx0YXdhaXQgdGhpcy5jYWNoZVN0b3JhZ2UuY2xlYXJFeGNsdWRlZERhdGEoKVxuXHR9XG5cblx0YXN5bmMgb25QYXJ0aWFsTG9naW5TdWNjZXNzKGxvZ2dlZEluRXZlbnQ6IExvZ2dlZEluRXZlbnQpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0fVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztJQVdhLHVCQUFOLE1BQXNEO0NBQzVELFlBQ2tCQSxlQUNBQyxjQUNBQyxpQkFDQUMsY0FDQUMsUUFDaEI7RUE4QkYsS0FuQ2tCO0VBbUNqQixLQWxDaUI7RUFrQ2hCLEtBakNnQjtFQWlDZixLQWhDZTtFQWdDZCxLQS9CYztDQUNkO0NBRUosTUFBTSxtQkFBbUJDLGVBQTZDO0FBR3JFLE1BQUksY0FBYyxnQkFBZ0IsWUFBWSxXQUFZO0VBRzFELE1BQU0sa0JBQWtCO0VBQ3hCLE1BQU0sWUFBWSxLQUFLLE9BQU8sbUJBQW1CLENBQUMsd0JBQXdCLENBQUMsU0FBUztFQUNwRixNQUFNLGdCQUFnQixNQUFNLEtBQUssZ0JBQWdCLGdCQUFnQixVQUFVO0VBQzNFLE1BQU0sa0JBQWtCLEtBQUssZ0JBQWdCLFdBQVcsY0FBYyxJQUFJLElBQUk7RUFDOUUsTUFBTSxnQkFBZ0IsTUFBTSxLQUFLLGNBQWMsa0JBQWtCO0FBRWpFLFFBQU0sS0FBVyxjQUFjLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxLQUFLO0FBQ2pFLFNBQU0sUUFBUSxJQUFJLENBQ2pCLEtBQUssYUFBYSxRQUFRLHNCQUFzQixVQUFVLFlBQVksY0FBYyxDQUFDLEtBQUssTUFBTSxnQkFBZ0IsU0FBUyxFQUFFLENBQUMsRUFDNUgsS0FBSyxhQUFhLFFBQVEsc0JBQXNCLFVBQVUsYUFBYSxjQUFjLENBQUMsS0FBSyxNQUFNLGdCQUFnQixTQUFTLEVBQUUsQ0FBQyxBQUM3SCxFQUFDO0VBQ0YsRUFBQztBQUNGLGtCQUFnQixXQUFXO0FBRzNCLFFBQU0sS0FBSyxhQUFhLG1CQUFtQjtDQUMzQztDQUVELE1BQU0sc0JBQXNCQSxlQUE2QztBQUN4RSxTQUFPLFFBQVEsU0FBUztDQUN4QjtBQUNEIn0=