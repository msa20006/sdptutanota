import { __toESM } from "./chunk-chunk.js";
import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { assertMainOrNode } from "./Env-chunk.js";
import { LazyLoaded, getFirstOrThrow, isNotNull, ofClass, pMap } from "./dist2-chunk.js";
import { ShareCapability } from "./TutanotaConstants-chunk.js";
import { compareOldestFirst, getEtId } from "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { ContactListGroupRootTypeRef, ContactListTypeRef, ContactTypeRef } from "./TypeRefs-chunk.js";
import { cleanMailAddress } from "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import { GroupInfoTypeRef, GroupTypeRef } from "./TypeRefs2-chunk.js";
import { require_stream } from "./stream-chunk.js";
import "./EntityFunctions-chunk.js";
import "./TypeModels3-chunk.js";
import "./ModelInfo-chunk.js";
import { NotAuthorizedError, NotFoundError } from "./RestError-chunk.js";
import { LoginIncompleteError } from "./LoginIncompleteError-chunk.js";
import { DbError } from "./DbError-chunk.js";
import { loadMultipleFromLists } from "./EntityClient-chunk.js";

//#region src/common/contactsFunctionality/ContactModel.ts
var import_stream = __toESM(require_stream(), 1);
assertMainOrNode();
var ContactModel = class {
	contactListId;
	contactListInfo = (0, import_stream.default)();
	constructor(entityClient, loginController, eventController, contactSearch) {
		this.entityClient = entityClient;
		this.loginController = loginController;
		this.eventController = eventController;
		this.contactSearch = contactSearch;
		this.contactListId = lazyContactListId(loginController, this.entityClient);
		this.eventController.addEntityListener(this.entityEventsReceived);
	}
	async getLoadedContactListInfos() {
		if (this.contactListInfo() === undefined) await this.loadContactLists();
		return this.contactListInfo();
	}
	/** might be empty if not loaded yet */
	getOwnContactListInfos() {
		return this.contactListInfo.map((contactListInfos) => contactListInfos.filter((info) => info.isOwner));
	}
	/** might be empty if not loaded yet */
	getSharedContactListInfos() {
		return this.contactListInfo.map((contactListInfos) => contactListInfos.filter((info) => !info.isOwner));
	}
	/** Id of the contact list. Is null for external users. */
	getContactListId() {
		return this.contactListId.getAsync();
	}
	/**
	* Provides the first contact (starting with oldest contact) that contains the given email address. Uses the index search if available, otherwise loads all contacts.
	*/
	async searchForContact(mailAddress) {
		if (!this.loginController.isFullyLoggedIn()) throw new LoginIncompleteError("cannot search for contacts as online login is not completed");
		const cleanedMailAddress = cleanMailAddress(mailAddress);
		let result;
		try {
			result = await this.contactSearch("\"" + cleanedMailAddress + "\"", "mailAddress", 0);
		} catch (e) {
			if (e instanceof DbError) {
				const listId = await this.getContactListId();
				if (listId) {
					const contacts = await this.entityClient.loadAll(ContactTypeRef, listId);
					return contacts.find((contact) => contact.mailAddresses.some((a) => cleanMailAddress(a.address) === cleanedMailAddress)) ?? null;
				} else return null;
			} else throw e;
		}
		result.results.sort(compareOldestFirst);
		for (const contactId of result.results) try {
			const contact = await this.entityClient.load(ContactTypeRef, contactId);
			if (contact.mailAddresses.some((a) => cleanMailAddress(a.address) === cleanedMailAddress)) return contact;
		} catch (e) {
			if (e instanceof NotFoundError || e instanceof NotAuthorizedError) continue;
else throw e;
		}
		return null;
	}
	/**
	* @pre locator.search.indexState().indexingSupported
	*/
	async searchForContacts(query, field, minSuggestionCount) {
		if (!this.loginController.isFullyLoggedIn()) throw new LoginIncompleteError("cannot search for contacts as online login is not completed");
		const result = await this.contactSearch(query, field, minSuggestionCount);
		return await loadMultipleFromLists(ContactTypeRef, this.entityClient, result.results);
	}
	async searchForContactLists(query) {
		if (!this.loginController.isFullyLoggedIn()) throw new LoginIncompleteError("cannot search for contact lists as online login is not completed");
		const contactLists = await this.getLoadedContactListInfos();
		return contactLists.filter((contactList) => contactList.name.toLowerCase().includes(query));
	}
	async loadContactFromId(contactId) {
		if (!this.loginController.isFullyLoggedIn()) throw new LoginIncompleteError("cannot search for contact lists as online login is not completed");
		return await this.entityClient.load(ContactTypeRef, contactId);
	}
	async getContactGroupId() {
		return getFirstOrThrow(this.loginController.getUserController().getContactGroupMemberships()).group;
	}
	async loadContactLists() {
		const userController = this.loginController.getUserController();
		const contactListMemberships = userController.getContactListMemberships();
		const contactListInfo = (await pMap(
			await pMap(contactListMemberships, (rlm) => this.entityClient.load(GroupInfoTypeRef, rlm.groupInfo)),
			// need to catch both NotFoundError and NotAuthorizedError, as we might still have a membership for a short time
			// when the group root is already deleted, or we deleted our membership
			(groupInfo) => this.getContactListInfo(groupInfo).catch(ofClass(NotFoundError, () => null)).catch(ofClass(NotAuthorizedError, () => null))
)).filter(isNotNull);
		this.contactListInfo(contactListInfo);
	}
	async getContactListInfo(groupInfo) {
		const group = await this.entityClient.load(GroupTypeRef, groupInfo.group);
		const groupRoot = await this.entityClient.load(ContactListGroupRootTypeRef, groupInfo.group);
		const userController = this.loginController.getUserController();
		const { getSharedGroupName } = await import("./GroupUtils3-chunk.js");
		const { hasCapabilityOnGroup, isSharedGroupOwner } = await import("./GroupUtils3-chunk.js");
		return {
			name: getSharedGroupName(groupInfo, userController, true),
			group,
			groupInfo,
			groupRoot,
			isOwner: isSharedGroupOwner(group, getEtId(userController.user)),
			canEdit: hasCapabilityOnGroup(userController.user, group, ShareCapability.Write)
		};
	}
	entityEventsReceived = async (updates, eventOwnerGroupId) => {
		for (const update of updates) if (this.loginController.getUserController().isUpdateForLoggedInUserInstance(update, eventOwnerGroupId)) await this.loadContactLists();
	};
};
function lazyContactListId(logins, entityClient) {
	return new LazyLoaded(() => {
		return entityClient.loadRoot(ContactListTypeRef, logins.getUserController().user.userGroup.group).then((contactList) => {
			return contactList.contacts;
		}).catch(ofClass(NotFoundError, (e) => {
			if (!logins.getUserController().isInternalUser()) return null;
else throw e;
		}));
	});
}

//#endregion
export { ContactModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFjdE1vZGVsLWNodW5rLmpzIiwibmFtZXMiOlsiZW50aXR5Q2xpZW50OiBFbnRpdHlDbGllbnQiLCJsb2dpbkNvbnRyb2xsZXI6IExvZ2luQ29udHJvbGxlciIsImV2ZW50Q29udHJvbGxlcjogRXZlbnRDb250cm9sbGVyIiwiY29udGFjdFNlYXJjaDogKHF1ZXJ5OiBzdHJpbmcsIGZpZWxkOiBzdHJpbmcsIG1pblN1Z2dlc3Rpb25Db3VudDogbnVtYmVyLCBtYXhSZXN1bHRzPzogbnVtYmVyKSA9PiBQcm9taXNlPFNlYXJjaFJlc3VsdD4iLCJtYWlsQWRkcmVzczogc3RyaW5nIiwicXVlcnk6IHN0cmluZyIsImZpZWxkOiBzdHJpbmciLCJtaW5TdWdnZXN0aW9uQ291bnQ6IG51bWJlciIsImNvbnRhY3RJZDogSWRUdXBsZSIsInJsbTogR3JvdXBNZW1iZXJzaGlwIiwiZ3JvdXBJbmZvOiBHcm91cEluZm8iLCJ1cGRhdGVzOiBSZWFkb25seUFycmF5PEVudGl0eVVwZGF0ZURhdGE+IiwiZXZlbnRPd25lckdyb3VwSWQ6IElkIiwibG9naW5zOiBMb2dpbkNvbnRyb2xsZXIiLCJjb250YWN0TGlzdDogQ29udGFjdExpc3QiXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL2NvbnRhY3RzRnVuY3Rpb25hbGl0eS9Db250YWN0TW9kZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0TWFpbk9yTm9kZSB9IGZyb20gXCIuLi9hcGkvY29tbW9uL0Vudi5qc1wiXG5pbXBvcnQgeyBHcm91cCwgR3JvdXBJbmZvLCBHcm91cEluZm9UeXBlUmVmLCBHcm91cE1lbWJlcnNoaXAsIEdyb3VwVHlwZVJlZiB9IGZyb20gXCIuLi9hcGkvZW50aXRpZXMvc3lzL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7XG5cdENvbnRhY3QsXG5cdENvbnRhY3RMaXN0LFxuXHRDb250YWN0TGlzdEdyb3VwUm9vdCxcblx0Q29udGFjdExpc3RHcm91cFJvb3RUeXBlUmVmLFxuXHRDb250YWN0TGlzdFR5cGVSZWYsXG5cdENvbnRhY3RUeXBlUmVmLFxufSBmcm9tIFwiLi4vYXBpL2VudGl0aWVzL3R1dGFub3RhL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IGdldEZpcnN0T3JUaHJvdywgaXNOb3ROdWxsLCBMYXp5TG9hZGVkLCBvZkNsYXNzLCBwcm9taXNlTWFwIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5pbXBvcnQgU3RyZWFtIGZyb20gXCJtaXRocmlsL3N0cmVhbVwiXG5pbXBvcnQgc3RyZWFtIGZyb20gXCJtaXRocmlsL3N0cmVhbVwiXG5pbXBvcnQgeyBFbnRpdHlDbGllbnQsIGxvYWRNdWx0aXBsZUZyb21MaXN0cyB9IGZyb20gXCIuLi9hcGkvY29tbW9uL0VudGl0eUNsaWVudC5qc1wiXG5pbXBvcnQgeyBMb2dpbkNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vYXBpL21haW4vTG9naW5Db250cm9sbGVyLmpzXCJcbmltcG9ydCB7IEVudGl0eUV2ZW50c0xpc3RlbmVyLCBFdmVudENvbnRyb2xsZXIgfSBmcm9tIFwiLi4vYXBpL21haW4vRXZlbnRDb250cm9sbGVyLmpzXCJcbmltcG9ydCB7IExvZ2luSW5jb21wbGV0ZUVycm9yIH0gZnJvbSBcIi4uL2FwaS9jb21tb24vZXJyb3IvTG9naW5JbmNvbXBsZXRlRXJyb3IuanNcIlxuaW1wb3J0IHsgY2xlYW5NYWlsQWRkcmVzcyB9IGZyb20gXCIuLi9hcGkvY29tbW9uL3V0aWxzL0NvbW1vbkNhbGVuZGFyVXRpbHMuanNcIlxuaW1wb3J0IHsgRGJFcnJvciB9IGZyb20gXCIuLi9hcGkvY29tbW9uL2Vycm9yL0RiRXJyb3IuanNcIlxuaW1wb3J0IHsgY29tcGFyZU9sZGVzdEZpcnN0LCBnZXRFdElkIH0gZnJvbSBcIi4uL2FwaS9jb21tb24vdXRpbHMvRW50aXR5VXRpbHMuanNcIlxuaW1wb3J0IHsgTm90QXV0aG9yaXplZEVycm9yLCBOb3RGb3VuZEVycm9yIH0gZnJvbSBcIi4uL2FwaS9jb21tb24vZXJyb3IvUmVzdEVycm9yLmpzXCJcbmltcG9ydCB7IFNoYXJlQ2FwYWJpbGl0eSB9IGZyb20gXCIuLi9hcGkvY29tbW9uL1R1dGFub3RhQ29uc3RhbnRzLmpzXCJcbmltcG9ydCB7IEVudGl0eVVwZGF0ZURhdGEgfSBmcm9tIFwiLi4vYXBpL2NvbW1vbi91dGlscy9FbnRpdHlVcGRhdGVVdGlscy5qc1wiXG5pbXBvcnQgdHlwZSB7IFNlYXJjaFJlc3VsdCB9IGZyb20gXCIuLi9hcGkvd29ya2VyL3NlYXJjaC9TZWFyY2hUeXBlcy5qc1wiXG5cbmFzc2VydE1haW5Pck5vZGUoKVxuXG5leHBvcnQgdHlwZSBDb250YWN0TGlzdEluZm8gPSB7XG5cdG5hbWU6IHN0cmluZ1xuXHRncm91cEluZm86IEdyb3VwSW5mb1xuXHRncm91cDogR3JvdXBcblx0Z3JvdXBSb290OiBDb250YWN0TGlzdEdyb3VwUm9vdFxuXHRpc093bmVyOiBib29sZWFuXG5cdGNhbkVkaXQ6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIENvbnRhY3RNb2RlbCB7XG5cdHByaXZhdGUgY29udGFjdExpc3RJZDogTGF6eUxvYWRlZDxJZCB8IG51bGw+XG5cdHByaXZhdGUgY29udGFjdExpc3RJbmZvOiBTdHJlYW08UmVhZG9ubHlBcnJheTxDb250YWN0TGlzdEluZm8+PiA9IHN0cmVhbSgpXG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSByZWFkb25seSBlbnRpdHlDbGllbnQ6IEVudGl0eUNsaWVudCxcblx0XHRwcml2YXRlIHJlYWRvbmx5IGxvZ2luQ29udHJvbGxlcjogTG9naW5Db250cm9sbGVyLFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgZXZlbnRDb250cm9sbGVyOiBFdmVudENvbnRyb2xsZXIsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBjb250YWN0U2VhcmNoOiAocXVlcnk6IHN0cmluZywgZmllbGQ6IHN0cmluZywgbWluU3VnZ2VzdGlvbkNvdW50OiBudW1iZXIsIG1heFJlc3VsdHM/OiBudW1iZXIpID0+IFByb21pc2U8U2VhcmNoUmVzdWx0Pixcblx0KSB7XG5cdFx0dGhpcy5jb250YWN0TGlzdElkID0gbGF6eUNvbnRhY3RMaXN0SWQobG9naW5Db250cm9sbGVyLCB0aGlzLmVudGl0eUNsaWVudClcblx0XHR0aGlzLmV2ZW50Q29udHJvbGxlci5hZGRFbnRpdHlMaXN0ZW5lcih0aGlzLmVudGl0eUV2ZW50c1JlY2VpdmVkKVxuXHR9XG5cblx0YXN5bmMgZ2V0TG9hZGVkQ29udGFjdExpc3RJbmZvcygpOiBQcm9taXNlPFJlYWRvbmx5QXJyYXk8Q29udGFjdExpc3RJbmZvPj4ge1xuXHRcdC8vIHByZXZlbnQgcmUtbG9hZGluZyB0aGVtIHdoZW4gd2UgYWxyZWFkeSBoYXZlIHRoZW1cblx0XHQvLyB0aGlzIGlzIG5vdCBwZXJmZWN0IGFuZCBtaWdodCBzdGlsbCBzdGFydCBsb2FkcyBpbiBwYXJhbGxlbFxuXHRcdGlmICh0aGlzLmNvbnRhY3RMaXN0SW5mbygpID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGF3YWl0IHRoaXMubG9hZENvbnRhY3RMaXN0cygpXG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmNvbnRhY3RMaXN0SW5mbygpXG5cdH1cblxuXHQvKiogbWlnaHQgYmUgZW1wdHkgaWYgbm90IGxvYWRlZCB5ZXQgKi9cblx0Z2V0T3duQ29udGFjdExpc3RJbmZvcygpOiBTdHJlYW08UmVhZG9ubHlBcnJheTxDb250YWN0TGlzdEluZm8+PiB7XG5cdFx0cmV0dXJuIHRoaXMuY29udGFjdExpc3RJbmZvLm1hcCgoY29udGFjdExpc3RJbmZvcykgPT4gY29udGFjdExpc3RJbmZvcy5maWx0ZXIoKGluZm8pID0+IGluZm8uaXNPd25lcikpXG5cdH1cblxuXHQvKiogbWlnaHQgYmUgZW1wdHkgaWYgbm90IGxvYWRlZCB5ZXQgKi9cblx0Z2V0U2hhcmVkQ29udGFjdExpc3RJbmZvcygpOiBTdHJlYW08UmVhZG9ubHlBcnJheTxDb250YWN0TGlzdEluZm8+PiB7XG5cdFx0cmV0dXJuIHRoaXMuY29udGFjdExpc3RJbmZvLm1hcCgoY29udGFjdExpc3RJbmZvcykgPT4gY29udGFjdExpc3RJbmZvcy5maWx0ZXIoKGluZm8pID0+ICFpbmZvLmlzT3duZXIpKVxuXHR9XG5cblx0LyoqIElkIG9mIHRoZSBjb250YWN0IGxpc3QuIElzIG51bGwgZm9yIGV4dGVybmFsIHVzZXJzLiAqL1xuXHRnZXRDb250YWN0TGlzdElkKCk6IFByb21pc2U8SWQgfCBudWxsPiB7XG5cdFx0cmV0dXJuIHRoaXMuY29udGFjdExpc3RJZC5nZXRBc3luYygpXG5cdH1cblxuXHQvKipcblx0ICogUHJvdmlkZXMgdGhlIGZpcnN0IGNvbnRhY3QgKHN0YXJ0aW5nIHdpdGggb2xkZXN0IGNvbnRhY3QpIHRoYXQgY29udGFpbnMgdGhlIGdpdmVuIGVtYWlsIGFkZHJlc3MuIFVzZXMgdGhlIGluZGV4IHNlYXJjaCBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSBsb2FkcyBhbGwgY29udGFjdHMuXG5cdCAqL1xuXHRhc3luYyBzZWFyY2hGb3JDb250YWN0KG1haWxBZGRyZXNzOiBzdHJpbmcpOiBQcm9taXNlPENvbnRhY3QgfCBudWxsPiB7XG5cdFx0Ly9zZWFyY2hpbmcgZm9yIGNvbnRhY3RzIGRlcGVuZHMgb24gc2VhcmNoRmFjYWRlLl9kYiB0byBiZSBpbml0aWFsaXplZC4gSWYgdGhlIHVzZXIgaGFzIG5vdCBsb2dnZWQgaW4gb25saW5lIHRoZSByZXNwZWN0aXZlIHByb21pc2Ugd2lsbCBuZXZlciByZXNvbHZlLlxuXHRcdGlmICghdGhpcy5sb2dpbkNvbnRyb2xsZXIuaXNGdWxseUxvZ2dlZEluKCkpIHtcblx0XHRcdHRocm93IG5ldyBMb2dpbkluY29tcGxldGVFcnJvcihcImNhbm5vdCBzZWFyY2ggZm9yIGNvbnRhY3RzIGFzIG9ubGluZSBsb2dpbiBpcyBub3QgY29tcGxldGVkXCIpXG5cdFx0fVxuXHRcdGNvbnN0IGNsZWFuZWRNYWlsQWRkcmVzcyA9IGNsZWFuTWFpbEFkZHJlc3MobWFpbEFkZHJlc3MpXG5cdFx0bGV0IHJlc3VsdFxuXHRcdHRyeSB7XG5cdFx0XHRyZXN1bHQgPSBhd2FpdCB0aGlzLmNvbnRhY3RTZWFyY2goJ1wiJyArIGNsZWFuZWRNYWlsQWRkcmVzcyArICdcIicsIFwibWFpbEFkZHJlc3NcIiwgMClcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHQvLyBJZiBJbmRleGVkREIgaXMgbm90IHN1cHBvcnRlZCBvciBpc24ndCB3b3JraW5nIGZvciBzb21lIHJlYXNvbiB3ZSBsb2FkIGNvbnRhY3RzIGZyb20gdGhlIHNlcnZlciBhbmRcblx0XHRcdC8vIHNlYXJjaCBtYW51YWxseS5cblx0XHRcdGlmIChlIGluc3RhbmNlb2YgRGJFcnJvcikge1xuXHRcdFx0XHRjb25zdCBsaXN0SWQgPSBhd2FpdCB0aGlzLmdldENvbnRhY3RMaXN0SWQoKVxuXHRcdFx0XHRpZiAobGlzdElkKSB7XG5cdFx0XHRcdFx0Y29uc3QgY29udGFjdHMgPSBhd2FpdCB0aGlzLmVudGl0eUNsaWVudC5sb2FkQWxsKENvbnRhY3RUeXBlUmVmLCBsaXN0SWQpXG5cdFx0XHRcdFx0cmV0dXJuIGNvbnRhY3RzLmZpbmQoKGNvbnRhY3QpID0+IGNvbnRhY3QubWFpbEFkZHJlc3Nlcy5zb21lKChhKSA9PiBjbGVhbk1haWxBZGRyZXNzKGEuYWRkcmVzcykgPT09IGNsZWFuZWRNYWlsQWRkcmVzcykpID8/IG51bGxcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbFxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBlXG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIHRoZSByZXN1bHQgaXMgc29ydGVkIGZyb20gbmV3ZXN0IHRvIG9sZGVzdCwgYnV0IHdlIHdhbnQgdG8gcmV0dXJuIHRoZSBvbGRlc3QgZmlyc3QgbGlrZSBiZWZvcmVcblx0XHRyZXN1bHQucmVzdWx0cy5zb3J0KGNvbXBhcmVPbGRlc3RGaXJzdClcblxuXHRcdGZvciAoY29uc3QgY29udGFjdElkIG9mIHJlc3VsdC5yZXN1bHRzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCBjb250YWN0ID0gYXdhaXQgdGhpcy5lbnRpdHlDbGllbnQubG9hZChDb250YWN0VHlwZVJlZiwgY29udGFjdElkKVxuXHRcdFx0XHRpZiAoY29udGFjdC5tYWlsQWRkcmVzc2VzLnNvbWUoKGEpID0+IGNsZWFuTWFpbEFkZHJlc3MoYS5hZGRyZXNzKSA9PT0gY2xlYW5lZE1haWxBZGRyZXNzKSkge1xuXHRcdFx0XHRcdHJldHVybiBjb250YWN0XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0aWYgKGUgaW5zdGFuY2VvZiBOb3RGb3VuZEVycm9yIHx8IGUgaW5zdGFuY2VvZiBOb3RBdXRob3JpemVkRXJyb3IpIHtcblx0XHRcdFx0XHRjb250aW51ZVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93IGVcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbnVsbFxuXHR9XG5cblx0LyoqXG5cdCAqIEBwcmUgbG9jYXRvci5zZWFyY2guaW5kZXhTdGF0ZSgpLmluZGV4aW5nU3VwcG9ydGVkXG5cdCAqL1xuXHRhc3luYyBzZWFyY2hGb3JDb250YWN0cyhxdWVyeTogc3RyaW5nLCBmaWVsZDogc3RyaW5nLCBtaW5TdWdnZXN0aW9uQ291bnQ6IG51bWJlcik6IFByb21pc2U8Q29udGFjdFtdPiB7XG5cdFx0aWYgKCF0aGlzLmxvZ2luQ29udHJvbGxlci5pc0Z1bGx5TG9nZ2VkSW4oKSkge1xuXHRcdFx0dGhyb3cgbmV3IExvZ2luSW5jb21wbGV0ZUVycm9yKFwiY2Fubm90IHNlYXJjaCBmb3IgY29udGFjdHMgYXMgb25saW5lIGxvZ2luIGlzIG5vdCBjb21wbGV0ZWRcIilcblx0XHR9XG5cdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jb250YWN0U2VhcmNoKHF1ZXJ5LCBmaWVsZCwgbWluU3VnZ2VzdGlvbkNvdW50KVxuXHRcdHJldHVybiBhd2FpdCBsb2FkTXVsdGlwbGVGcm9tTGlzdHMoQ29udGFjdFR5cGVSZWYsIHRoaXMuZW50aXR5Q2xpZW50LCByZXN1bHQucmVzdWx0cylcblx0fVxuXG5cdGFzeW5jIHNlYXJjaEZvckNvbnRhY3RMaXN0cyhxdWVyeTogc3RyaW5nKTogUHJvbWlzZTxDb250YWN0TGlzdEluZm9bXT4ge1xuXHRcdGlmICghdGhpcy5sb2dpbkNvbnRyb2xsZXIuaXNGdWxseUxvZ2dlZEluKCkpIHtcblx0XHRcdHRocm93IG5ldyBMb2dpbkluY29tcGxldGVFcnJvcihcImNhbm5vdCBzZWFyY2ggZm9yIGNvbnRhY3QgbGlzdHMgYXMgb25saW5lIGxvZ2luIGlzIG5vdCBjb21wbGV0ZWRcIilcblx0XHR9XG5cblx0XHRjb25zdCBjb250YWN0TGlzdHMgPSBhd2FpdCB0aGlzLmdldExvYWRlZENvbnRhY3RMaXN0SW5mb3MoKVxuXG5cdFx0cmV0dXJuIGNvbnRhY3RMaXN0cy5maWx0ZXIoKGNvbnRhY3RMaXN0KSA9PiBjb250YWN0TGlzdC5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnkpKVxuXHR9XG5cblx0YXN5bmMgbG9hZENvbnRhY3RGcm9tSWQoY29udGFjdElkOiBJZFR1cGxlKSB7XG5cdFx0aWYgKCF0aGlzLmxvZ2luQ29udHJvbGxlci5pc0Z1bGx5TG9nZ2VkSW4oKSkge1xuXHRcdFx0dGhyb3cgbmV3IExvZ2luSW5jb21wbGV0ZUVycm9yKFwiY2Fubm90IHNlYXJjaCBmb3IgY29udGFjdCBsaXN0cyBhcyBvbmxpbmUgbG9naW4gaXMgbm90IGNvbXBsZXRlZFwiKVxuXHRcdH1cblxuXHRcdHJldHVybiBhd2FpdCB0aGlzLmVudGl0eUNsaWVudC5sb2FkKENvbnRhY3RUeXBlUmVmLCBjb250YWN0SWQpXG5cdH1cblxuXHRhc3luYyBnZXRDb250YWN0R3JvdXBJZCgpOiBQcm9taXNlPElkPiB7XG5cdFx0cmV0dXJuIGdldEZpcnN0T3JUaHJvdyh0aGlzLmxvZ2luQ29udHJvbGxlci5nZXRVc2VyQ29udHJvbGxlcigpLmdldENvbnRhY3RHcm91cE1lbWJlcnNoaXBzKCkpLmdyb3VwXG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIGxvYWRDb250YWN0TGlzdHMoKSB7XG5cdFx0Y29uc3QgdXNlckNvbnRyb2xsZXIgPSB0aGlzLmxvZ2luQ29udHJvbGxlci5nZXRVc2VyQ29udHJvbGxlcigpXG5cdFx0Y29uc3QgY29udGFjdExpc3RNZW1iZXJzaGlwcyA9IHVzZXJDb250cm9sbGVyLmdldENvbnRhY3RMaXN0TWVtYmVyc2hpcHMoKVxuXHRcdGNvbnN0IGNvbnRhY3RMaXN0SW5mbyA9IChcblx0XHRcdGF3YWl0IHByb21pc2VNYXAoXG5cdFx0XHRcdGF3YWl0IHByb21pc2VNYXAoY29udGFjdExpc3RNZW1iZXJzaGlwcywgKHJsbTogR3JvdXBNZW1iZXJzaGlwKSA9PiB0aGlzLmVudGl0eUNsaWVudC5sb2FkKEdyb3VwSW5mb1R5cGVSZWYsIHJsbS5ncm91cEluZm8pKSxcblx0XHRcdFx0Ly8gbmVlZCB0byBjYXRjaCBib3RoIE5vdEZvdW5kRXJyb3IgYW5kIE5vdEF1dGhvcml6ZWRFcnJvciwgYXMgd2UgbWlnaHQgc3RpbGwgaGF2ZSBhIG1lbWJlcnNoaXAgZm9yIGEgc2hvcnQgdGltZVxuXHRcdFx0XHQvLyB3aGVuIHRoZSBncm91cCByb290IGlzIGFscmVhZHkgZGVsZXRlZCwgb3Igd2UgZGVsZXRlZCBvdXIgbWVtYmVyc2hpcFxuXHRcdFx0XHQoZ3JvdXBJbmZvKSA9PlxuXHRcdFx0XHRcdHRoaXMuZ2V0Q29udGFjdExpc3RJbmZvKGdyb3VwSW5mbylcblx0XHRcdFx0XHRcdC5jYXRjaChvZkNsYXNzKE5vdEZvdW5kRXJyb3IsICgpID0+IG51bGwpKVxuXHRcdFx0XHRcdFx0LmNhdGNoKG9mQ2xhc3MoTm90QXV0aG9yaXplZEVycm9yLCAoKSA9PiBudWxsKSksXG5cdFx0XHQpXG5cdFx0KS5maWx0ZXIoaXNOb3ROdWxsKVxuXG5cdFx0dGhpcy5jb250YWN0TGlzdEluZm8oY29udGFjdExpc3RJbmZvKVxuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBnZXRDb250YWN0TGlzdEluZm8oZ3JvdXBJbmZvOiBHcm91cEluZm8pOiBQcm9taXNlPENvbnRhY3RMaXN0SW5mbz4ge1xuXHRcdGNvbnN0IGdyb3VwID0gYXdhaXQgdGhpcy5lbnRpdHlDbGllbnQubG9hZChHcm91cFR5cGVSZWYsIGdyb3VwSW5mby5ncm91cClcblx0XHRjb25zdCBncm91cFJvb3QgPSBhd2FpdCB0aGlzLmVudGl0eUNsaWVudC5sb2FkKENvbnRhY3RMaXN0R3JvdXBSb290VHlwZVJlZiwgZ3JvdXBJbmZvLmdyb3VwKVxuXHRcdGNvbnN0IHVzZXJDb250cm9sbGVyID0gdGhpcy5sb2dpbkNvbnRyb2xsZXIuZ2V0VXNlckNvbnRyb2xsZXIoKVxuXHRcdGNvbnN0IHsgZ2V0U2hhcmVkR3JvdXBOYW1lIH0gPSBhd2FpdCBpbXBvcnQoXCIuLi9zaGFyaW5nL0dyb3VwVXRpbHMuanNcIilcblx0XHRjb25zdCB7IGhhc0NhcGFiaWxpdHlPbkdyb3VwLCBpc1NoYXJlZEdyb3VwT3duZXIgfSA9IGF3YWl0IGltcG9ydChcIi4uL3NoYXJpbmcvR3JvdXBVdGlscy5qc1wiKVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdG5hbWU6IGdldFNoYXJlZEdyb3VwTmFtZShncm91cEluZm8sIHVzZXJDb250cm9sbGVyLCB0cnVlKSxcblx0XHRcdGdyb3VwLFxuXHRcdFx0Z3JvdXBJbmZvLFxuXHRcdFx0Z3JvdXBSb290LFxuXHRcdFx0aXNPd25lcjogaXNTaGFyZWRHcm91cE93bmVyKGdyb3VwLCBnZXRFdElkKHVzZXJDb250cm9sbGVyLnVzZXIpKSxcblx0XHRcdGNhbkVkaXQ6IGhhc0NhcGFiaWxpdHlPbkdyb3VwKHVzZXJDb250cm9sbGVyLnVzZXIsIGdyb3VwLCBTaGFyZUNhcGFiaWxpdHkuV3JpdGUpLFxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgcmVhZG9ubHkgZW50aXR5RXZlbnRzUmVjZWl2ZWQ6IEVudGl0eUV2ZW50c0xpc3RlbmVyID0gYXN5bmMgKHVwZGF0ZXM6IFJlYWRvbmx5QXJyYXk8RW50aXR5VXBkYXRlRGF0YT4sIGV2ZW50T3duZXJHcm91cElkOiBJZCk6IFByb21pc2U8dm9pZD4gPT4ge1xuXHRcdGZvciAoY29uc3QgdXBkYXRlIG9mIHVwZGF0ZXMpIHtcblx0XHRcdGlmICh0aGlzLmxvZ2luQ29udHJvbGxlci5nZXRVc2VyQ29udHJvbGxlcigpLmlzVXBkYXRlRm9yTG9nZ2VkSW5Vc2VySW5zdGFuY2UodXBkYXRlLCBldmVudE93bmVyR3JvdXBJZCkpIHtcblx0XHRcdFx0YXdhaXQgdGhpcy5sb2FkQ29udGFjdExpc3RzKClcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxhenlDb250YWN0TGlzdElkKGxvZ2luczogTG9naW5Db250cm9sbGVyLCBlbnRpdHlDbGllbnQ6IEVudGl0eUNsaWVudCk6IExhenlMb2FkZWQ8SWQgfCBudWxsPiB7XG5cdHJldHVybiBuZXcgTGF6eUxvYWRlZCgoKSA9PiB7XG5cdFx0cmV0dXJuIGVudGl0eUNsaWVudFxuXHRcdFx0LmxvYWRSb290KENvbnRhY3RMaXN0VHlwZVJlZiwgbG9naW5zLmdldFVzZXJDb250cm9sbGVyKCkudXNlci51c2VyR3JvdXAuZ3JvdXApXG5cdFx0XHQudGhlbigoY29udGFjdExpc3Q6IENvbnRhY3RMaXN0KSA9PiB7XG5cdFx0XHRcdHJldHVybiBjb250YWN0TGlzdC5jb250YWN0c1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChcblx0XHRcdFx0b2ZDbGFzcyhOb3RGb3VuZEVycm9yLCAoZSkgPT4ge1xuXHRcdFx0XHRcdGlmICghbG9naW5zLmdldFVzZXJDb250cm9sbGVyKCkuaXNJbnRlcm5hbFVzZXIoKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGwgLy8gZXh0ZXJuYWwgdXNlcnMgaGF2ZSBubyBjb250YWN0IGxpc3QuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRocm93IGVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pLFxuXHRcdFx0KVxuXHR9KVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7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