import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { assertMainOrNode } from "./Env-chunk.js";
import { client } from "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { assertNotNull } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import "./styles-chunk.js";
import "./theme-chunk.js";
import { TerminationPeriodOptions } from "./TutanotaConstants-chunk.js";
import "./KeyManager-chunk.js";
import { windowFacade } from "./WindowFacade-chunk.js";
import "./RootView-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./luxon-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import "./TypeRefs-chunk.js";
import "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import { createSurveyData } from "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import "./CalendarUtils-chunk.js";
import "./ImportExportUtils-chunk.js";
import "./FormatValidator-chunk.js";
import "./stream-chunk.js";
import "./EntityFunctions-chunk.js";
import "./TypeModels3-chunk.js";
import "./ModelInfo-chunk.js";
import "./ErrorUtils-chunk.js";
import "./RestError-chunk.js";
import "./SetupMultipleError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import "./EntityUpdateUtils-chunk.js";
import "./dist3-chunk.js";
import "./Services-chunk.js";
import "./EntityClient-chunk.js";
import "./BirthdayUtils-chunk.js";
import "./Services2-chunk.js";
import "./GroupUtils-chunk.js";
import { Button, ButtonType } from "./Button-chunk.js";
import "./Icons-chunk.js";
import "./DialogHeaderBar-chunk.js";
import "./CountryList-chunk.js";
import { Autocomplete, DropDownSelector, TextField, TextFieldType } from "./Dialog-chunk.js";
import "./Icon-chunk.js";
import { AriaLandmarks, landmarkAttrs, liveDataAttrs } from "./AriaUtils-chunk.js";
import "./IconButton-chunk.js";
import "./CalendarEventWhenModel-chunk.js";
import { formatDateTime, formatDateWithMonth } from "./Formatter-chunk.js";
import "./ProgressMonitor-chunk.js";
import "./Notifications-chunk.js";
import "./CalendarFacade-chunk.js";
import "./CalendarModel-chunk.js";
import "./GroupUtils2-chunk.js";
import "./CommonLocator-chunk.js";
import "./UserError-chunk.js";
import "./MailAddressParser-chunk.js";
import "./BlobUtils-chunk.js";
import "./FileUtils-chunk.js";
import { showProgressDialog } from "./ProgressDialog-chunk.js";
import "./SharedMailUtils-chunk.js";
import "./PasswordUtils-chunk.js";
import "./Recipient-chunk.js";
import "./ContactUtils-chunk.js";
import "./RecipientsModel-chunk.js";
import "./CalendarGuiUtils-chunk.js";
import "./UpgradeRequiredError-chunk.js";
import "./ColorPickerModel-chunk.js";
import "./ToggleButton-chunk.js";
import { DatePicker } from "./DatePicker-chunk.js";
import "./DateParser-chunk.js";
import { PasswordField } from "./PasswordField-chunk.js";
import { BaseTopLevelView, LoginScreenHeader } from "./LoginScreenHeader-chunk.js";
import { LoginButton } from "./LoginButton-chunk.js";
import "./HtmlEditor-chunk.js";
import "./HtmlSanitizer-chunk.js";
import "./WizardDialog-chunk.js";
import { SURVEY_VERSION_NUMBER, showLeavingUserSurveyWizard } from "./LeavingUserSurveyWizard-chunk.js";

//#region src/common/termination/TerminationForm.ts
var TerminationForm = class {
	mailAddressTextField;
	passwordTextField;
	surveyResult = null;
	onremove(vnode) {
		this.passwordTextField.domInput.value = "";
	}
	view(vnode) {
		const a = vnode.attrs;
		return mithril_default("form", { onsubmit: (e) => {
			e.preventDefault();
		} }, [
			mithril_default(".h3", lang.get("terminationForm_title")),
			mithril_default(".mt-s", lang.get("termination_text")),
			mithril_default("", { oncreate: (vnode$1) => {
				const childArray = assertNotNull(vnode$1.children);
				const child = childArray[0];
				this.mailAddressTextField = child.state;
			} }, mithril_default(TextField, {
				label: "mailAddress_label",
				value: a.mailAddress,
				autocompleteAs: Autocomplete.email,
				oninput: (value) => {
					this.handleAutofill(a);
					a.onMailAddressChanged(value);
				},
				type: TextFieldType.Email,
				onDomInputCreated: (dom) => {
					if (!client.isMobileDevice()) dom.focus();
				}
			})),
			mithril_default(PasswordField, {
				value: a.password,
				autocompleteAs: Autocomplete.currentPassword,
				oncreate: (vnode$1) => {
					this.passwordTextField = { ...vnode$1.state };
				},
				onDomInputCreated: (domInput) => {
					this.passwordTextField.domInput = domInput;
				},
				oninput: (value) => {
					this.handleAutofill(a);
					a.onPasswordChanged(value);
				}
			}),
			mithril_default(".list-border-bottom.pb-l", [
				mithril_default(".h3.mt-l", lang.get("terminationDateRequest_title")),
				mithril_default(".mt-s", lang.get("terminationDateRequest_msg")),
				mithril_default(DropDownSelector, {
					label: "emptyString_msg",
					class: "",
					items: [{
						name: lang.get("endOfCurrentSubscriptionPeriod"),
						value: TerminationPeriodOptions.EndOfCurrentPeriod
					}, {
						name: lang.get("futureDate"),
						value: TerminationPeriodOptions.FutureDate
					}],
					selectedValue: a.terminationPeriodOption,
					selectionChangedHandler: a.onTerminationPeriodOptionChanged,
					dropdownWidth: 350,
					helpLabel: () => this.renderTerminationDateInfo(a.terminationPeriodOption)
				}),
				a.terminationPeriodOption === TerminationPeriodOptions.FutureDate ? mithril_default(DatePicker, {
					date: a.date,
					onDateSelected: a.onDateChanged,
					startOfTheWeekOffset: 0,
					label: "date_label",
					disabled: false
				}) : null
			]),
			mithril_default(".mt-l.text-center", lang.get("surveySecondaryMessageDelete_label")),
			mithril_default(".mt.flex-center", mithril_default(Button, {
				type: ButtonType.Secondary,
				label: "surveyParticipate_action",
				click: () => {
					showLeavingUserSurveyWizard(true, false).then((result) => this.surveyResult = result);
				}
			})),
			mithril_default(".mt", mithril_default(LoginButton, {
				label: "termination_action",
				onclick: () => {
					a.onSubmit(this.surveyResult);
				}
			})),
			mithril_default(".small.center.statusTextColor.mt.mb", liveDataAttrs(), [a.helpText])
		]);
	}
	handleAutofill(a) {
		requestAnimationFrame(() => {
			const oldAddress = a.mailAddress;
			const newAddress = this.mailAddressTextField.domInput.value;
			const oldPassword = a.password;
			const newPassword = this.passwordTextField.domInput.value;
			if (oldAddress !== newAddress) a.onMailAddressChanged(newAddress);
			if (oldPassword !== newPassword) a.onPasswordChanged(newPassword);
		});
	}
	renderTerminationDateInfo(terminationPeriodOption) {
		let infoMessage = lang.get(terminationPeriodOption === TerminationPeriodOptions.EndOfCurrentPeriod ? "terminationOptionEndOfSubscriptionInfo_msg" : "terminationOptionFutureDateInfo_msg");
		return mithril_default(".small", infoMessage + " " + lang.get("terminationUseAccountUntilTermination_msg"));
	}
};

//#endregion
//#region src/common/termination/TerminationView.ts
assertMainOrNode();
var TerminationView = class extends BaseTopLevelView {
	bottomMargin = 0;
	model;
	constructor({ attrs }) {
		super();
		this.model = attrs.makeViewModel();
	}
	keyboardListener = (keyboardSize) => {
		this.bottomMargin = keyboardSize;
		mithril_default.redraw();
	};
	onNewUrl(args, requestedPath) {}
	view({ attrs }) {
		return mithril_default("#termination-view.main-view.flex.col.nav-bg", {
			oncreate: () => windowFacade.addKeyboardSizeListener(this.keyboardListener),
			onremove: () => windowFacade.removeKeyboardSizeListener(this.keyboardListener),
			style: { marginBottom: this.bottomMargin + "px" }
		}, [mithril_default(LoginScreenHeader), mithril_default(".flex-grow.flex-center.scroll", mithril_default(".flex-grow-shrink-auto.max-width-m.pb", {
			...landmarkAttrs(AriaLandmarks.Main, lang.get("terminationForm_title")),
			oncreate: (vnode) => {
				vnode.dom.focus();
			}
		}, mithril_default(".flex.col.pt.plr-l.content-bg.border-radius-big", [this.model.acceptedTerminationRequest ? this.renderTerminationInfo(this.model.mailAddress, this.model.acceptedTerminationRequest) : this.renderTerminationForm()])))]);
	}
	renderTerminationInfo(mailAddress, acceptedTerminationRequest) {
		return mithril_default("", [mithril_default(".h3.mt", "Termination successful"), mithril_default("p.mt", lang.get("terminationSuccessful_msg", {
			"{accountName}": mailAddress,
			"{receivedDate}": formatDateTime(acceptedTerminationRequest.terminationRequestDate),
			"{deletionDate}": formatDateWithMonth(acceptedTerminationRequest.terminationDate)
		}))]);
	}
	async cancelWithProgressDialog(surveyResult) {
		if (surveyResult && surveyResult.submitted && surveyResult.category && surveyResult.reason) {
			const data = createSurveyData({
				category: surveyResult.category,
				reason: surveyResult.reason,
				details: surveyResult.details,
				version: SURVEY_VERSION_NUMBER
			});
			await showProgressDialog("pleaseWait_msg", this.model.createAccountTerminationRequest(data));
		} else await showProgressDialog("pleaseWait_msg", this.model.createAccountTerminationRequest());
		mithril_default.redraw();
	}
	renderTerminationForm() {
		return mithril_default(TerminationForm, {
			onSubmit: (surveyData) => this.cancelWithProgressDialog(surveyData),
			mailAddress: this.model.mailAddress,
			onMailAddressChanged: (mailAddress) => this.model.mailAddress = mailAddress,
			password: this.model.password,
			onPasswordChanged: (password) => this.model.password = password,
			date: this.model.date,
			onDateChanged: (date) => this.model.date = date,
			terminationPeriodOption: this.model.terminationPeriodOption,
			onTerminationPeriodOptionChanged: (option) => this.model.terminationPeriodOption = option,
			helpText: lang.getTranslationText(this.model.helpText)
		});
	}
};

//#endregion
export { TerminationView };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,