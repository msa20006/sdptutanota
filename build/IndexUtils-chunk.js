import { isTest } from "./Env-chunk.js";
import { concat, stringToUtf8Uint8Array, uint8ArrayToBase64, utf8Uint8ArrayToString } from "./dist2-chunk.js";
import { GroupType } from "./TutanotaConstants-chunk.js";
import { typeModels } from "./TypeModels-chunk.js";
import { aes256EncryptSearchIndexEntry, unauthenticatedAesDecrypt } from "./dist3-chunk.js";

//#region src/common/api/worker/search/SearchIndexEncoding.ts
function iterateBinaryBlocks(row, cb) {
	let offset = 0;
	let iterations = 0;
	while (offset < row.length) {
		const block = decodeBinaryBlock(row, offset);
		const start = offset;
		offset = block.byteOffset + block.length;
		cb(block, start, offset, iterations++);
	}
	return iterations;
}
function removeBinaryBlockRanges(row, ranges) {
	let reducedLength = 0;
	for (let i = ranges.length - 1; i >= 0; i--) {
		const [start, end] = ranges[i];
		row.copyWithin(start, end);
		reducedLength += end - start;
	}
	return row.subarray(0, row.length - reducedLength);
}
function appendBinaryBlocks(source, destination) {
	const neededSpace = calculateNeededSpace(source);
	let target;
	let offset;
	if (destination) {
		offset = destination.length;
		target = new Uint8Array(destination.length + neededSpace);
		target.set(destination);
	} else {
		target = new Uint8Array(neededSpace);
		offset = 0;
	}
	for (let i = 0; i < source.length; i++) offset += encodeBinaryBlock(source[i], target, offset);
	return target;
}
function encodeBinaryBlock(entityData, target, offset) {
	const lengthOfPrefix = encodeNumberBlock(entityData.length, target, offset);
	target.set(entityData, offset + lengthOfPrefix);
	return lengthOfPrefix + entityData.length;
}
function encodeNumberBlock(value, target, offset) {
	if (value <= 127) {
		target[offset] = value;
		return 1;
	} else {
		const length = numberOfBytes(value);
		let remainingValue = value;
		target[offset] = length | 128;
		for (let i = 0; i < length; i++) {
			const bytePosition = offset + length - i;
			if (remainingValue > 255) {
				target[bytePosition] = remainingValue % 256;
				remainingValue = Math.floor(remainingValue / 256);
			} else target[bytePosition] = remainingValue;
		}
		return length + 1;
	}
}
function decodeBinaryBlock(source, offset) {
	let blockLength = decodeNumberBlock(source, offset);
	let numberLength = calculateNeededSpaceForNumber(blockLength);
	return source.subarray(offset + numberLength, offset + numberLength + blockLength);
}
function decodeNumberBlock(source, offset) {
	const markerBit = source[offset] & 128;
	if (markerBit === 128) {
		const numberLength = source[offset] & 127;
		let value = 0;
		for (let i = 0; i < numberLength; i++) {
			value = value * 256;
			value += source[offset + i + 1];
		}
		return value;
	} else return source[offset];
}
function calculateNeededSpace(data) {
	return data.reduce((acc, entry) => {
		let lengthOfPrefix = calculateNeededSpaceForNumber(entry.length);
		return acc + entry.length + lengthOfPrefix;
	}, 0);
}
function calculateNeededSpaceForNumber(value) {
	return value <= 127 ? 1 : numberOfBytes(value) + 1;
}
function calculateNeededSpaceForNumbers(numbers) {
	return numbers.reduce((acc, n) => acc + calculateNeededSpaceForNumber(n), 0);
}
function numberOfBytes(number) {
	return Math.ceil(Math.log2(number + 1) / 8);
}
function decodeNumbers(binaryNumbers, offset = 0) {
	const numbers = [];
	while (offset < binaryNumbers.length) {
		const number = decodeNumberBlock(binaryNumbers, offset);
		numbers.push(number);
		offset += calculateNeededSpaceForNumber(number);
	}
	return numbers;
}
function encodeNumbers(numbers, target, offset = 0) {
	for (const number of numbers) offset += encodeNumberBlock(number, target, offset);
}

//#endregion
//#region src/common/api/worker/search/IndexUtils.ts
function encryptIndexKeyBase64(key, indexKey, dbIv) {
	return uint8ArrayToBase64(encryptIndexKeyUint8Array(key, indexKey, dbIv));
}
function encryptIndexKeyUint8Array(key, indexKey, dbIv) {
	return aes256EncryptSearchIndexEntry(key, stringToUtf8Uint8Array(indexKey), dbIv, true).slice(dbIv.length);
}
function decryptIndexKey(key, encIndexKey, dbIv) {
	return utf8Uint8ArrayToString(unauthenticatedAesDecrypt(key, concat(dbIv, encIndexKey), true));
}
function encryptSearchIndexEntry(key, entry, encryptedInstanceId) {
	let searchIndexEntryNumberValues = [entry.attribute].concat(entry.positions);
	const neededSpace = calculateNeededSpaceForNumbers(searchIndexEntryNumberValues);
	const block = new Uint8Array(neededSpace);
	encodeNumbers(searchIndexEntryNumberValues, block, 0);
	const encData = aes256EncryptSearchIndexEntry(key, block);
	const resultArray = new Uint8Array(encryptedInstanceId.length + encData.length);
	resultArray.set(encryptedInstanceId);
	resultArray.set(encData, 16);
	return resultArray;
}
function decryptSearchIndexEntry(key, entry, dbIv) {
	const encId = getIdFromEncSearchIndexEntry(entry);
	let id = decryptIndexKey(key, encId, dbIv);
	const data = unauthenticatedAesDecrypt(key, entry.subarray(16), true);
	let offset = 0;
	const attribute = decodeNumberBlock(data, offset);
	offset += calculateNeededSpaceForNumber(attribute);
	const positions = decodeNumbers(data, offset);
	return {
		id,
		encId,
		attribute,
		positions
	};
}
const metaEntryFieldsNumber = 5;
function encryptMetaData(key, metaData) {
	const numbers = new Array(metaData.rows.length * metaEntryFieldsNumber);
	for (let i = 0; i < metaData.rows.length; i++) {
		const entry = metaData.rows[i];
		const offset = i * metaEntryFieldsNumber;
		numbers[offset] = entry.app;
		numbers[offset + 1] = entry.type;
		numbers[offset + 2] = entry.key;
		numbers[offset + 3] = entry.size;
		numbers[offset + 4] = entry.oldestElementTimestamp;
	}
	const numberBlock = new Uint8Array(calculateNeededSpaceForNumbers(numbers));
	encodeNumbers(numbers, numberBlock);
	const encryptedRows = aes256EncryptSearchIndexEntry(key, numberBlock);
	return {
		id: metaData.id,
		word: metaData.word,
		rows: encryptedRows
	};
}
function decryptMetaData(key, encryptedMeta) {
	if (encryptedMeta.rows.length === 0) return {
		id: encryptedMeta.id,
		word: encryptedMeta.word,
		rows: []
	};
	const numbersBlock = unauthenticatedAesDecrypt(key, encryptedMeta.rows, true);
	const numbers = decodeNumbers(numbersBlock);
	const rows = [];
	for (let i = 0; i < numbers.length; i += metaEntryFieldsNumber) rows.push({
		app: numbers[i],
		type: numbers[i + 1],
		key: numbers[i + 2],
		size: numbers[i + 3],
		oldestElementTimestamp: numbers[i + 4]
	});
	return {
		id: encryptedMeta.id,
		word: encryptedMeta.word,
		rows
	};
}
const typeInfos = { tutanota: {
	Mail: {
		appId: 1,
		typeId: typeModels.Mail.id,
		attributeIds: getAttributeIds(typeModels.Mail)
	},
	Contact: {
		appId: 1,
		typeId: typeModels.Contact.id,
		attributeIds: getAttributeIds(typeModels.Contact)
	}
} };
function getAttributeIds(model) {
	return Object.keys(model.values).map((name) => model.values[name].id).concat(Object.keys(model.associations).map((name) => model.associations[name].id));
}
function typeRefToTypeInfo(typeRef) {
	const app = typeInfos[typeRef.app];
	if (!app) throw new Error("No TypeInfo for app: " + app);
	const typeInfo = app[typeRef.type];
	if (!typeInfo) throw new Error(`No TypeInfo for TypeRef ${typeRef.app} : ${typeRef.type}`);
	return typeInfo;
}
function filterIndexMemberships(user) {
	return user.memberships.filter((m) => m.groupType === GroupType.Mail || m.groupType === GroupType.Contact || m.groupType === GroupType.Customer || m.groupType === GroupType.Admin);
}
function filterMailMemberships(user) {
	return user.memberships.filter((m) => m.groupType === GroupType.Mail);
}
function _createNewIndexUpdate(typeInfo) {
	return {
		typeInfo,
		create: {
			encInstanceIdToElementData: new Map(),
			indexMap: new Map()
		},
		move: [],
		delete: {
			searchMetaRowToEncInstanceIds: new Map(),
			encInstanceIds: []
		}
	};
}
function htmlToText(html) {
	if (html == null) return "";
	let text = html.replace(/<[^>]*>?/gm, " ");
	return text.replace(/&[#0-9a-zA-Z]+;/g, (match) => {
		let replacement;
		if (match.startsWith("&#")) {
			let charCode = Number(match.substring(2, match.length - 1));
			if (!isNaN(charCode)) replacement = String.fromCharCode(charCode);
		} else replacement = HTML_ENTITIES[match];
		return replacement ? replacement : match;
	});
}
const HTML_ENTITIES = {
	"&nbsp;": " ",
	"&amp;": "&",
	"&lt;": "<",
	"&gt;": ">",
	"&Agrave;": "À",
	"&Aacute;": "Á",
	"&Acirc;": "Â",
	"&Atilde;": "Ã",
	"&Auml;": "Ä",
	"&Aring;": "Å",
	"&AElig;": "Æ",
	"&Ccedil;": "Ç",
	"&Egrave;": "È",
	"&Eacute;": "É",
	"&Ecirc;": "Ê",
	"&Euml;": "Ë",
	"&Igrave;": "Ì",
	"&Iacute;": "Í",
	"&Icirc;": "Î",
	"&Iuml;": "Ï",
	"&ETH;": "Ð",
	"&Ntilde;": "Ñ",
	"&Ograve;": "Ò",
	"&Oacute;": "Ó",
	"&Ocirc;": "Ô",
	"&Otilde;": "Õ",
	"&Ouml;": "Ö",
	"&Oslash;": "Ø",
	"&Ugrave;": "Ù",
	"&Uacute;": "Ú",
	"&Ucirc;": "Û",
	"&Uuml;": "Ü",
	"&Yacute;": "Ý",
	"&THORN;": "Þ",
	"&szlig;": "ß",
	"&agrave;": "à",
	"&aacute;": "á",
	"&acirc;": "â",
	"&atilde;": "ã",
	"&auml;": "ä",
	"&aring;": "å",
	"&aelig;": "æ",
	"&ccedil;": "ç",
	"&egrave;": "è",
	"&eacute;": "é",
	"&ecirc;": "ê",
	"&euml;": "ë",
	"&igrave;": "ì",
	"&iacute;": "í",
	"&icirc;": "î",
	"&iuml;": "ï",
	"&eth;": "ð",
	"&ntilde;": "ñ",
	"&ograve;": "ò",
	"&oacute;": "ó",
	"&ocirc;": "ô",
	"&otilde;": "õ",
	"&ouml;": "ö",
	"&oslash;": "ø",
	"&ugrave;": "ù",
	"&uacute;": "ú",
	"&ucirc;": "û",
	"&uuml;": "ü",
	"&yacute;": "ý",
	"&thorn;": "þ",
	"&yuml;": "ÿ",
	"&Alpha;": "Α",
	"&Beta;": "Β",
	"&Gamma;": "Γ",
	"&Delta;": "Δ",
	"&Epsilon;": "Ε",
	"&Zeta;": "Ζ",
	"&Eta;": "Η",
	"&Theta;": "Θ",
	"&Iota;": "Ι",
	"&Kappa;": "Κ",
	"&Lambda;": "Λ",
	"&Mu;": "Μ",
	"&Nu;": "Ν",
	"&Xi;": "Ξ",
	"&Omicron;": "Ο",
	"&Pi;": "Π",
	"&Rho;": "Ρ",
	"&Sigma;": "Σ",
	"&Tau;": "Τ",
	"&Upsilon;": "Υ",
	"&Phi;": "Φ",
	"&Chi;": "Χ",
	"&Psi;": "Ψ",
	"&Omega;": "Ω",
	"&alpha;": "α",
	"&beta;": "β",
	"&gamma;": "γ",
	"&delta;": "δ",
	"&epsilon;": "ε",
	"&zeta;": "ζ",
	"&eta;": "η",
	"&theta;": "θ",
	"&iota;": "ι",
	"&kappa;": "κ",
	"&lambda;": "λ",
	"&mu;": "μ",
	"&nu;": "ν",
	"&xi;": "ξ",
	"&omicron;": "ο",
	"&pi;": "π",
	"&rho;": "ρ",
	"&sigmaf;": "ς",
	"&sigma;": "σ",
	"&tau;": "τ",
	"&upsilon;": "υ",
	"&phi;": "φ",
	"&chi;": "χ",
	"&psi;": "ψ",
	"&omega;": "ω",
	"&thetasym;": "ϑ",
	"&upsih;": "ϒ",
	"&piv;": "ϖ"
};
function getPerformanceTimestamp() {
	return typeof performance === "undefined" ? Date.now() : performance.now();
}
function getIdFromEncSearchIndexEntry(entry) {
	return entry.subarray(0, 16);
}
function compareMetaEntriesOldest(left, right) {
	return left.oldestElementTimestamp - right.oldestElementTimestamp;
}
function printMeasure(prefix, names) {
	if (!shouldMeasure()) return;
	for (let name of names) try {
		performance.clearMeasures(name);
		performance.clearMarks(name + "-end");
		performance.clearMarks(name + "-start");
	} catch (e) {}
}
function markStart(name) {
	if (shouldMeasure()) performance.mark(name + "-start");
}
function markEnd(name) {
	if (!shouldMeasure()) return;
	try {
		performance.mark(name + "-end");
		performance.measure(name, name + "-start", name + "-end");
	} catch (e) {}
}
function shouldMeasure() {
	return !env.dist && !isTest();
}

//#endregion
export { _createNewIndexUpdate, appendBinaryBlocks, calculateNeededSpaceForNumbers, compareMetaEntriesOldest, decodeNumbers, decryptIndexKey, decryptMetaData, decryptSearchIndexEntry, encodeNumbers, encryptIndexKeyBase64, encryptIndexKeyUint8Array, encryptMetaData, encryptSearchIndexEntry, filterIndexMemberships, filterMailMemberships, getIdFromEncSearchIndexEntry, getPerformanceTimestamp, htmlToText, iterateBinaryBlocks, markEnd, markStart, printMeasure, removeBinaryBlockRanges, typeRefToTypeInfo };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,