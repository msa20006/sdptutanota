import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { assertWorkerOrNode } from "./Env-chunk.js";
import { neverNull } from "./dist2-chunk.js";
import { Const } from "./TutanotaConstants-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels2-chunk.js";
import { createPriceRequestData, createPriceServiceData } from "./TypeRefs2-chunk.js";
import { PriceService } from "./Services-chunk.js";

//#region src/common/api/worker/facades/lazy/BookingFacade.ts
assertWorkerOrNode();
var BookingFacade = class {
	constructor(serviceExecutor) {
		this.serviceExecutor = serviceExecutor;
	}
	/**
	* Provides the price for a given feature type and count.
	* @param  type The booking feature type, one of tutao.entity.tutanota.TutanotaConstants.BOOKING_ITEM_FEATURE_TYPE_*.
	* @param  count Number of items, may be negative.
	* @param  reactivate  If true a user or group is reactivated instead of created - not used for aliases, storage or branding
	* @return Resolves to PriceServiceReturn or an exception if the loading failed.
	*/
	getPrice(type, count, reactivate) {
		const priceRequestData = createPriceRequestData({
			featureType: type,
			count: String(count),
			reactivate,
			paymentInterval: null,
			accountType: null,
			business: null
		});
		const serviceData = createPriceServiceData({
			date: Const.CURRENT_DATE,
			priceRequest: priceRequestData
		});
		return this.serviceExecutor.get(PriceService, serviceData);
	}
	/**
	* Provides the price for a given feature type and count.
	* @return Resolves to PriceServiceReturn or an exception if the loading failed.
	*/
	getCurrentPrice() {
		const serviceData = createPriceServiceData({
			date: null,
			priceRequest: null
		});
		return this.serviceExecutor.get(PriceService, serviceData);
	}
	/**
	* Provides the price item from the given priceData for the given featureType. Returns null if no such item is available.
	* @param  priceData The given price data.
	* @param  featureType The booking item feature type
	* @return The price item or null
	*/
	getPriceItem(priceData, featureType) {
		if (priceData != null) return neverNull(priceData).items.find((p) => p.featureType === featureType) ?? null;
		return null;
	}
};

//#endregion
export { BookingFacade };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9va2luZ0ZhY2FkZS1jaHVuay5qcyIsIm5hbWVzIjpbInNlcnZpY2VFeGVjdXRvcjogSVNlcnZpY2VFeGVjdXRvciIsInR5cGU6IEJvb2tpbmdJdGVtRmVhdHVyZVR5cGUiLCJjb3VudDogbnVtYmVyIiwicmVhY3RpdmF0ZTogYm9vbGVhbiIsInByaWNlRGF0YTogUHJpY2VEYXRhIHwgbnVsbCIsImZlYXR1cmVUeXBlOiBOdW1iZXJTdHJpbmciXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL2FwaS93b3JrZXIvZmFjYWRlcy9sYXp5L0Jvb2tpbmdGYWNhZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBCb29raW5nSXRlbUZlYXR1cmVUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9UdXRhbm90YUNvbnN0YW50cy5qc1wiXG5pbXBvcnQgeyBDb25zdCB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vVHV0YW5vdGFDb25zdGFudHMuanNcIlxuaW1wb3J0IHR5cGUgeyBQcmljZURhdGEsIFByaWNlSXRlbURhdGEsIFByaWNlU2VydmljZVJldHVybiB9IGZyb20gXCIuLi8uLi8uLi9lbnRpdGllcy9zeXMvVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgY3JlYXRlUHJpY2VSZXF1ZXN0RGF0YSwgY3JlYXRlUHJpY2VTZXJ2aWNlRGF0YSB9IGZyb20gXCIuLi8uLi8uLi9lbnRpdGllcy9zeXMvVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgbmV2ZXJOdWxsIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5pbXBvcnQgeyBhc3NlcnRXb3JrZXJPck5vZGUgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL0Vudi5qc1wiXG5pbXBvcnQgeyBJU2VydmljZUV4ZWN1dG9yIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9TZXJ2aWNlUmVxdWVzdC5qc1wiXG5pbXBvcnQgeyBQcmljZVNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vLi4vZW50aXRpZXMvc3lzL1NlcnZpY2VzLmpzXCJcblxuYXNzZXJ0V29ya2VyT3JOb2RlKClcblxuZXhwb3J0IGNsYXNzIEJvb2tpbmdGYWNhZGUge1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHNlcnZpY2VFeGVjdXRvcjogSVNlcnZpY2VFeGVjdXRvcikge31cblxuXHQvKipcblx0ICogUHJvdmlkZXMgdGhlIHByaWNlIGZvciBhIGdpdmVuIGZlYXR1cmUgdHlwZSBhbmQgY291bnQuXG5cdCAqIEBwYXJhbSAgdHlwZSBUaGUgYm9va2luZyBmZWF0dXJlIHR5cGUsIG9uZSBvZiB0dXRhby5lbnRpdHkudHV0YW5vdGEuVHV0YW5vdGFDb25zdGFudHMuQk9PS0lOR19JVEVNX0ZFQVRVUkVfVFlQRV8qLlxuXHQgKiBAcGFyYW0gIGNvdW50IE51bWJlciBvZiBpdGVtcywgbWF5IGJlIG5lZ2F0aXZlLlxuXHQgKiBAcGFyYW0gIHJlYWN0aXZhdGUgIElmIHRydWUgYSB1c2VyIG9yIGdyb3VwIGlzIHJlYWN0aXZhdGVkIGluc3RlYWQgb2YgY3JlYXRlZCAtIG5vdCB1c2VkIGZvciBhbGlhc2VzLCBzdG9yYWdlIG9yIGJyYW5kaW5nXG5cdCAqIEByZXR1cm4gUmVzb2x2ZXMgdG8gUHJpY2VTZXJ2aWNlUmV0dXJuIG9yIGFuIGV4Y2VwdGlvbiBpZiB0aGUgbG9hZGluZyBmYWlsZWQuXG5cdCAqL1xuXHRnZXRQcmljZSh0eXBlOiBCb29raW5nSXRlbUZlYXR1cmVUeXBlLCBjb3VudDogbnVtYmVyLCByZWFjdGl2YXRlOiBib29sZWFuKTogUHJvbWlzZTxQcmljZVNlcnZpY2VSZXR1cm4+IHtcblx0XHRjb25zdCBwcmljZVJlcXVlc3REYXRhID0gY3JlYXRlUHJpY2VSZXF1ZXN0RGF0YSh7XG5cdFx0XHRmZWF0dXJlVHlwZTogdHlwZSxcblx0XHRcdGNvdW50OiBTdHJpbmcoY291bnQpLFxuXHRcdFx0cmVhY3RpdmF0ZSxcblx0XHRcdHBheW1lbnRJbnRlcnZhbDogbnVsbCxcblx0XHRcdGFjY291bnRUeXBlOiBudWxsLFxuXHRcdFx0YnVzaW5lc3M6IG51bGwsXG5cdFx0fSlcblx0XHRjb25zdCBzZXJ2aWNlRGF0YSA9IGNyZWF0ZVByaWNlU2VydmljZURhdGEoe1xuXHRcdFx0ZGF0ZTogQ29uc3QuQ1VSUkVOVF9EQVRFLFxuXHRcdFx0cHJpY2VSZXF1ZXN0OiBwcmljZVJlcXVlc3REYXRhLFxuXHRcdH0pXG5cdFx0cmV0dXJuIHRoaXMuc2VydmljZUV4ZWN1dG9yLmdldChQcmljZVNlcnZpY2UsIHNlcnZpY2VEYXRhKVxuXHR9XG5cblx0LyoqXG5cdCAqIFByb3ZpZGVzIHRoZSBwcmljZSBmb3IgYSBnaXZlbiBmZWF0dXJlIHR5cGUgYW5kIGNvdW50LlxuXHQgKiBAcmV0dXJuIFJlc29sdmVzIHRvIFByaWNlU2VydmljZVJldHVybiBvciBhbiBleGNlcHRpb24gaWYgdGhlIGxvYWRpbmcgZmFpbGVkLlxuXHQgKi9cblx0Z2V0Q3VycmVudFByaWNlKCk6IFByb21pc2U8UHJpY2VTZXJ2aWNlUmV0dXJuPiB7XG5cdFx0Y29uc3Qgc2VydmljZURhdGEgPSBjcmVhdGVQcmljZVNlcnZpY2VEYXRhKHtcblx0XHRcdGRhdGU6IG51bGwsXG5cdFx0XHRwcmljZVJlcXVlc3Q6IG51bGwsXG5cdFx0fSlcblx0XHRyZXR1cm4gdGhpcy5zZXJ2aWNlRXhlY3V0b3IuZ2V0KFByaWNlU2VydmljZSwgc2VydmljZURhdGEpXG5cdH1cblxuXHQvKipcblx0ICogUHJvdmlkZXMgdGhlIHByaWNlIGl0ZW0gZnJvbSB0aGUgZ2l2ZW4gcHJpY2VEYXRhIGZvciB0aGUgZ2l2ZW4gZmVhdHVyZVR5cGUuIFJldHVybnMgbnVsbCBpZiBubyBzdWNoIGl0ZW0gaXMgYXZhaWxhYmxlLlxuXHQgKiBAcGFyYW0gIHByaWNlRGF0YSBUaGUgZ2l2ZW4gcHJpY2UgZGF0YS5cblx0ICogQHBhcmFtICBmZWF0dXJlVHlwZSBUaGUgYm9va2luZyBpdGVtIGZlYXR1cmUgdHlwZVxuXHQgKiBAcmV0dXJuIFRoZSBwcmljZSBpdGVtIG9yIG51bGxcblx0ICovXG5cdGdldFByaWNlSXRlbShwcmljZURhdGE6IFByaWNlRGF0YSB8IG51bGwsIGZlYXR1cmVUeXBlOiBOdW1iZXJTdHJpbmcpOiBQcmljZUl0ZW1EYXRhIHwgbnVsbCB7XG5cdFx0aWYgKHByaWNlRGF0YSAhPSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gbmV2ZXJOdWxsKHByaWNlRGF0YSkuaXRlbXMuZmluZCgocCkgPT4gcC5mZWF0dXJlVHlwZSA9PT0gZmVhdHVyZVR5cGUpID8/IG51bGxcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbFxuXHR9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBU0Esb0JBQW9CO0lBRVAsZ0JBQU4sTUFBb0I7Q0FDMUIsWUFBNkJBLGlCQUFtQztFQW1EaEUsS0FuRDZCO0NBQXFDOzs7Ozs7OztDQVNsRSxTQUFTQyxNQUE4QkMsT0FBZUMsWUFBa0Q7RUFDdkcsTUFBTSxtQkFBbUIsdUJBQXVCO0dBQy9DLGFBQWE7R0FDYixPQUFPLE9BQU8sTUFBTTtHQUNwQjtHQUNBLGlCQUFpQjtHQUNqQixhQUFhO0dBQ2IsVUFBVTtFQUNWLEVBQUM7RUFDRixNQUFNLGNBQWMsdUJBQXVCO0dBQzFDLE1BQU0sTUFBTTtHQUNaLGNBQWM7RUFDZCxFQUFDO0FBQ0YsU0FBTyxLQUFLLGdCQUFnQixJQUFJLGNBQWMsWUFBWTtDQUMxRDs7Ozs7Q0FNRCxrQkFBK0M7RUFDOUMsTUFBTSxjQUFjLHVCQUF1QjtHQUMxQyxNQUFNO0dBQ04sY0FBYztFQUNkLEVBQUM7QUFDRixTQUFPLEtBQUssZ0JBQWdCLElBQUksY0FBYyxZQUFZO0NBQzFEOzs7Ozs7O0NBUUQsYUFBYUMsV0FBNkJDLGFBQWlEO0FBQzFGLE1BQUksYUFBYSxLQUNoQixRQUFPLFVBQVUsVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsWUFBWSxJQUFJO0FBR2pGLFNBQU87Q0FDUDtBQUNEIn0=