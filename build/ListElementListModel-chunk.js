import { OperationType } from "./TutanotaConstants-chunk.js";
import { getElementId, isSameId } from "./EntityUtils-chunk.js";
import { ListModel } from "./ListModel-chunk.js";

//#region src/common/misc/ListElementListModel.ts
var ListElementListModel = class {
	listModel;
	config;
	get state() {
		return this.listModel.state;
	}
	get differentItemsSelected() {
		return this.listModel.differentItemsSelected;
	}
	get stateStream() {
		return this.listModel.stateStream;
	}
	constructor(config) {
		const theBestConfig = {
			...config,
			isSameId,
			getItemId: getElementId
		};
		this.listModel = new ListModel(theBestConfig);
		this.config = theBestConfig;
	}
	async entityEventReceived(listId, elementId, operation) {
		if (operation === OperationType.CREATE || operation === OperationType.UPDATE) {
			const entity = await this.config.loadSingle(listId, elementId);
			if (!entity) return;
			return this.listModel.waitLoad(() => {
				if (operation === OperationType.CREATE) {
					if (this.listModel.canInsertItem(entity)) this.listModel.insertLoadedItem(entity);
				} else if (operation === OperationType.UPDATE) this.listModel.updateLoadedItem(entity);
			});
		} else if (operation === OperationType.DELETE) await this.listModel.deleteLoadedItem(elementId);
	}
	async loadAndSelect(itemId, shouldStop, finder = (item) => isSameId(getElementId(item), itemId)) {
		return this.listModel.loadAndSelect(finder, shouldStop);
	}
	isItemSelected(itemId) {
		return this.listModel.isItemSelected(itemId);
	}
	enterMultiselect() {
		return this.listModel.enterMultiselect();
	}
	stopLoading() {
		return this.listModel.stopLoading();
	}
	isEmptyAndDone() {
		return this.listModel.isEmptyAndDone();
	}
	isSelectionEmpty() {
		return this.listModel.isSelectionEmpty();
	}
	getUnfilteredAsArray() {
		return this.listModel.getUnfilteredAsArray();
	}
	sort() {
		return this.listModel.sort();
	}
	async loadMore() {
		return this.listModel.loadMore();
	}
	async loadAll() {
		return this.listModel.loadAll();
	}
	async retryLoading() {
		return this.listModel.retryLoading();
	}
	onSingleSelection(item) {
		return this.listModel.onSingleSelection(item);
	}
	onSingleInclusiveSelection(item, clearSelectionOnMultiSelectStart) {
		return this.listModel.onSingleInclusiveSelection(item, clearSelectionOnMultiSelectStart);
	}
	onSingleExclusiveSelection(item) {
		return this.listModel.onSingleExclusiveSelection(item);
	}
	selectRangeTowards(item) {
		return this.listModel.selectRangeTowards(item);
	}
	areAllSelected() {
		return this.listModel.areAllSelected();
	}
	selectNone() {
		return this.listModel.selectNone();
	}
	selectAll() {
		return this.listModel.selectAll();
	}
	selectPrevious(multiselect) {
		return this.listModel.selectPrevious(multiselect);
	}
	selectNext(multiselect) {
		return this.listModel.selectNext(multiselect);
	}
	cancelLoadAll() {
		return this.listModel.cancelLoadAll();
	}
	async loadInitial() {
		return this.listModel.loadInitial();
	}
	reapplyFilter() {
		return this.listModel.reapplyFilter();
	}
	setFilter(filter) {
		return this.listModel.setFilter(filter);
	}
	getSelectedAsArray() {
		return this.listModel.getSelectedAsArray();
	}
	isLoadedCompletely() {
		return this.listModel.isLoadedCompletely();
	}
	updateLoadingStatus(status) {
		return this.listModel.updateLoadingStatus(status);
	}
};

//#endregion
export { ListElementListModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,