import { TypeRef } from "./dist2-chunk.js";
import { create } from "./EntityUtils-chunk.js";
import { typeModels$4 as typeModels } from "./TypeModels3-chunk.js";

//#region src/common/api/entities/monitor/TypeRefs.ts
const ApprovalMailTypeRef = new TypeRef("monitor", "ApprovalMail");
function createApprovalMail(values) {
	return Object.assign(create(typeModels.ApprovalMail, ApprovalMailTypeRef), values);
}
const CounterValueTypeRef = new TypeRef("monitor", "CounterValue");
const ErrorReportDataTypeRef = new TypeRef("monitor", "ErrorReportData");
function createErrorReportData(values) {
	return Object.assign(create(typeModels.ErrorReportData, ErrorReportDataTypeRef), values);
}
const ErrorReportFileTypeRef = new TypeRef("monitor", "ErrorReportFile");
function createErrorReportFile(values) {
	return Object.assign(create(typeModels.ErrorReportFile, ErrorReportFileTypeRef), values);
}
const ReadCounterDataTypeRef = new TypeRef("monitor", "ReadCounterData");
function createReadCounterData(values) {
	return Object.assign(create(typeModels.ReadCounterData, ReadCounterDataTypeRef), values);
}
const ReadCounterReturnTypeRef = new TypeRef("monitor", "ReadCounterReturn");
const ReportErrorInTypeRef = new TypeRef("monitor", "ReportErrorIn");
function createReportErrorIn(values) {
	return Object.assign(create(typeModels.ReportErrorIn, ReportErrorInTypeRef), values);
}
const WriteCounterDataTypeRef = new TypeRef("monitor", "WriteCounterData");
function createWriteCounterData(values) {
	return Object.assign(create(typeModels.WriteCounterData, WriteCounterDataTypeRef), values);
}

//#endregion
//#region src/common/api/entities/monitor/Services.ts
const CounterService = Object.freeze({
	app: "monitor",
	name: "CounterService",
	get: {
		data: ReadCounterDataTypeRef,
		return: ReadCounterReturnTypeRef
	},
	post: {
		data: WriteCounterDataTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const ReportErrorService = Object.freeze({
	app: "monitor",
	name: "ReportErrorService",
	get: null,
	post: {
		data: ReportErrorInTypeRef,
		return: null
	},
	put: null,
	delete: null
});

//#endregion
export { CounterService, ReportErrorService, createApprovalMail, createErrorReportData, createErrorReportFile, createReadCounterData, createReportErrorIn, createWriteCounterData };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,