import { mithril_default } from "./mithril-chunk.js";
import { assertNotNull } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { DefaultAnimationTime } from "./styles-chunk.js";
import { theme } from "./theme-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import { isKeyPressed } from "./KeyManager-chunk.js";
import { px } from "./size-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { BootIcons, Icon, IconSize } from "./Icon-chunk.js";

//#region src/common/gui/base/Expander.ts
var ExpanderButton = class {
	view(vnode) {
		const a = vnode.attrs;
		const label = lang.getTranslationText(a.label);
		return mithril_default(".limit-width", mithril_default("button.expander.bg-transparent.pt-s.hover-ul.limit-width.flex.items-center.b.text-ellipsis.flash", {
			style: a.style,
			onclick: (event) => {
				a.onExpandedChange(!a.expanded);
				if (!a.isPropagatingEvents) event.stopPropagation();
			},
			onkeydown: (e) => {
				if (isKeyPressed(e.key, Keys.SPACE, Keys.RETURN)) {
					a.onExpandedChange(!a.expanded);
					if (!a.isPropagatingEvents) e.preventDefault();
				}
			},
			"aria-expanded": String(a.expanded)
		}, [
			a.showWarning ? mithril_default(Icon, {
				icon: Icons.Warning,
				style: { fill: a.color ? a.color : theme.content_button }
			}) : null,
			mithril_default(`${a.isBig ? "span" : "small"}`, { style: { color: a.color || theme.content_button } }, a.isUnformattedLabel ? label : label.toUpperCase()),
			mithril_default(Icon, {
				icon: BootIcons.Expand,
				class: "flex-center items-center",
				size: a.isBig ? IconSize.Medium : IconSize.Normal,
				style: {
					fill: a.color ? a.color : theme.content_button,
					"margin-right": px(-4),
					transform: `rotateZ(${a.expanded ? 180 : 0}deg)`,
					transition: `transform ${DefaultAnimationTime}ms`
				}
			})
		]));
	}
};
var ExpanderPanel = class {
	childDiv = null;
	observer = null;
	lastCalculatedHeight = null;
	childrenInDom = null;
	setChildrenInDomTimeout;
	oninit(vnode) {
		this.childrenInDom = vnode.attrs.expanded;
		this.observer = new MutationObserver((mutations) => {
			if (this.childDiv && this.childDiv.getBoundingClientRect().height !== this.lastCalculatedHeight) mithril_default.redraw();
		});
	}
	onbeforeupdate(vnode, old) {
		const oldExpanded = old.attrs.expanded;
		const currentExpanded = vnode.attrs.expanded;
		if (oldExpanded !== currentExpanded) this.handleExpansionStateChanged(currentExpanded);
		return true;
	}
	view(vnode) {
		const expanded = vnode.attrs.expanded;
		this.lastCalculatedHeight = this.childDiv?.getBoundingClientRect().height ?? 0;
		return mithril_default(
			".expander-panel",
			// We want overflow while expanded in some specific cases like dropdowns, but generally we don't want it because we want to clip our children
			// for animation and sizing, so we enable it only when expanded
			mithril_default(
				expanded ? "div" : ".overflow-hidden",
				{ style: {
					opacity: expanded ? "1" : "0",
					height: expanded ? `${this.lastCalculatedHeight}px` : "0px",
					transition: `opacity ${DefaultAnimationTime}ms ease-out, height ${DefaultAnimationTime}ms ease-out`
				} },
				// we use this wrapper to measure the child reliably
				// just a marker class
				mithril_default(".expander-child-wrapper", {
					style: { display: "flow-root" },
					oncreate: (vnode$1) => {
						this.childDiv = vnode$1.dom;
						assertNotNull(this.observer).observe(this.childDiv, {
							childList: true,
							subtree: true
						});
					},
					onremove: () => {
						this.observer?.disconnect();
					}
				}, this.childrenInDom ? vnode.children : null)
)
);
	}
	handleExpansionStateChanged(expanded) {
		clearTimeout(this.setChildrenInDomTimeout);
		if (expanded) this.childrenInDom = true;
else this.setChildrenInDomTimeout = setTimeout(() => {
			this.childrenInDom = false;
			mithril_default.redraw();
		}, DefaultAnimationTime);
	}
};

//#endregion
export { ExpanderButton, ExpanderPanel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhwYW5kZXItY2h1bmsuanMiLCJuYW1lcyI6WyJ2bm9kZTogVm5vZGU8RXhwYW5kZXJBdHRycz4iLCJldmVudDogTW91c2VFdmVudCIsImU6IEtleWJvYXJkRXZlbnQiLCJ2bm9kZTogVm5vZGU8RXhwYW5kZXJQYW5lbEF0dHJzPiIsIm9sZDogVm5vZGU8RXhwYW5kZXJQYW5lbEF0dHJzPiIsInZub2RlIiwiZXhwYW5kZWQ6IGJvb2xlYW4iXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL2d1aS9iYXNlL0V4cGFuZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtLCB7IENoaWxkcmVuLCBDb21wb25lbnQsIFZub2RlIH0gZnJvbSBcIm1pdGhyaWxcIlxuaW1wb3J0IHR5cGUgeyBUcmFuc2xhdGlvbktleSwgTWF5YmVUcmFuc2xhdGlvbiB9IGZyb20gXCIuLi8uLi9taXNjL0xhbmd1YWdlVmlld01vZGVsXCJcbmltcG9ydCB7IGxhbmcgfSBmcm9tIFwiLi4vLi4vbWlzYy9MYW5ndWFnZVZpZXdNb2RlbFwiXG5pbXBvcnQgeyBJY29uLCBJY29uU2l6ZSB9IGZyb20gXCIuL0ljb25cIlxuaW1wb3J0IHsgSWNvbnMgfSBmcm9tIFwiLi9pY29ucy9JY29uc1wiXG5pbXBvcnQgeyBCb290SWNvbnMgfSBmcm9tIFwiLi9pY29ucy9Cb290SWNvbnNcIlxuaW1wb3J0IHsgdGhlbWUgfSBmcm9tIFwiLi4vdGhlbWVcIlxuaW1wb3J0IHsgcHggfSBmcm9tIFwiLi4vc2l6ZVwiXG5pbXBvcnQgeyBEZWZhdWx0QW5pbWF0aW9uVGltZSB9IGZyb20gXCIuLi9hbmltYXRpb24vQW5pbWF0aW9uc1wiXG5pbXBvcnQgdHlwZSB7IGxhenkgfSBmcm9tIFwiQHR1dGFvL3R1dGFub3RhLXV0aWxzXCJcbmltcG9ydCB7IGFzc2VydE5vdE51bGwgfSBmcm9tIFwiQHR1dGFvL3R1dGFub3RhLXV0aWxzXCJcbmltcG9ydCB7IGlzS2V5UHJlc3NlZCB9IGZyb20gXCIuLi8uLi9taXNjL0tleU1hbmFnZXIuanNcIlxuaW1wb3J0IHsgS2V5cyB9IGZyb20gXCIuLi8uLi9hcGkvY29tbW9uL1R1dGFub3RhQ29uc3RhbnRzLmpzXCJcblxuZXhwb3J0IHR5cGUgRXhwYW5kZXJBdHRycyA9IHtcblx0bGFiZWw6IE1heWJlVHJhbnNsYXRpb25cblx0ZXhwYW5kZWQ6IGJvb2xlYW5cblx0b25FeHBhbmRlZENoYW5nZTogKHZhbHVlOiBib29sZWFuKSA9PiB1bmtub3duXG5cdGlzUHJvcGFnYXRpbmdFdmVudHM/OiBib29sZWFuXG5cdGlzQmlnPzogYm9vbGVhblxuXHRpc1VuZm9ybWF0dGVkTGFiZWw/OiBib29sZWFuXG5cdHNob3dXYXJuaW5nPzogYm9vbGVhblxuXHRjb2xvcj86IHN0cmluZ1xuXHRzdHlsZT86IFJlY29yZDxzdHJpbmcsIGFueT5cbn1cbmV4cG9ydCB0eXBlIEV4cGFuZGVyUGFuZWxBdHRycyA9IHtcblx0ZXhwYW5kZWQ6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIEV4cGFuZGVyQnV0dG9uIGltcGxlbWVudHMgQ29tcG9uZW50PEV4cGFuZGVyQXR0cnM+IHtcblx0dmlldyh2bm9kZTogVm5vZGU8RXhwYW5kZXJBdHRycz4pOiBDaGlsZHJlbiB7XG5cdFx0Y29uc3QgYSA9IHZub2RlLmF0dHJzXG5cdFx0Y29uc3QgbGFiZWwgPSBsYW5nLmdldFRyYW5zbGF0aW9uVGV4dChhLmxhYmVsKVxuXHRcdHJldHVybiBtKFxuXHRcdFx0XCIubGltaXQtd2lkdGhcIixcblx0XHRcdG0oXG5cdFx0XHRcdFwiYnV0dG9uLmV4cGFuZGVyLmJnLXRyYW5zcGFyZW50LnB0LXMuaG92ZXItdWwubGltaXQtd2lkdGguZmxleC5pdGVtcy1jZW50ZXIuYi50ZXh0LWVsbGlwc2lzLmZsYXNoXCIsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRzdHlsZTogYS5zdHlsZSxcblx0XHRcdFx0XHRvbmNsaWNrOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGEub25FeHBhbmRlZENoYW5nZSghYS5leHBhbmRlZClcblx0XHRcdFx0XHRcdGlmICghYS5pc1Byb3BhZ2F0aW5nRXZlbnRzKSBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0b25rZXlkb3duOiAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKGlzS2V5UHJlc3NlZChlLmtleSwgS2V5cy5TUEFDRSwgS2V5cy5SRVRVUk4pKSB7XG5cdFx0XHRcdFx0XHRcdGEub25FeHBhbmRlZENoYW5nZSghYS5leHBhbmRlZClcblx0XHRcdFx0XHRcdFx0aWYgKCFhLmlzUHJvcGFnYXRpbmdFdmVudHMpIGUucHJldmVudERlZmF1bHQoKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJhcmlhLWV4cGFuZGVkXCI6IFN0cmluZyhhLmV4cGFuZGVkKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0W1xuXHRcdFx0XHRcdGEuc2hvd1dhcm5pbmdcblx0XHRcdFx0XHRcdD8gbShJY29uLCB7XG5cdFx0XHRcdFx0XHRcdFx0aWNvbjogSWNvbnMuV2FybmluZyxcblx0XHRcdFx0XHRcdFx0XHRzdHlsZToge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlsbDogYS5jb2xvciA/IGEuY29sb3IgOiB0aGVtZS5jb250ZW50X2J1dHRvbixcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0ICB9KVxuXHRcdFx0XHRcdFx0OiBudWxsLFxuXHRcdFx0XHRcdG0oXG5cdFx0XHRcdFx0XHRgJHthLmlzQmlnID8gXCJzcGFuXCIgOiBcInNtYWxsXCJ9YCxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdFx0XHRjb2xvcjogYS5jb2xvciB8fCB0aGVtZS5jb250ZW50X2J1dHRvbixcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRhLmlzVW5mb3JtYXR0ZWRMYWJlbCA/IGxhYmVsIDogbGFiZWwudG9VcHBlckNhc2UoKSxcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdG0oSWNvbiwge1xuXHRcdFx0XHRcdFx0aWNvbjogQm9vdEljb25zLkV4cGFuZCxcblx0XHRcdFx0XHRcdGNsYXNzOiBcImZsZXgtY2VudGVyIGl0ZW1zLWNlbnRlclwiLFxuXHRcdFx0XHRcdFx0c2l6ZTogYS5pc0JpZyA/IEljb25TaXplLk1lZGl1bSA6IEljb25TaXplLk5vcm1hbCxcblx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdGZpbGw6IGEuY29sb3IgPyBhLmNvbG9yIDogdGhlbWUuY29udGVudF9idXR0b24sXG5cdFx0XHRcdFx0XHRcdFwibWFyZ2luLXJpZ2h0XCI6IHB4KC00KSxcblx0XHRcdFx0XHRcdFx0Ly8gaWNvbiBpcyBoYXMgNHB4IHdoaXRlc3BhY2UgdG8gdGhlIHJpZ2h0LFxuXHRcdFx0XHRcdFx0XHR0cmFuc2Zvcm06IGByb3RhdGVaKCR7YS5leHBhbmRlZCA/IDE4MCA6IDB9ZGVnKWAsXG5cdFx0XHRcdFx0XHRcdHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHtEZWZhdWx0QW5pbWF0aW9uVGltZX1tc2AsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRdLFxuXHRcdFx0KSxcblx0XHQpXG5cdH1cbn1cblxuLyoqXG4gKiBQYW5lbCB3aGljaCBzaG93cyBvciBoaWRlcyBjb250ZW50IGRlcGVuZGluZyBvbiB0aGUgYXR0cnMuZXhwYW5kZWQgYW5kIGFuaW1hdGVzIHRyYW5zaXRpb25zLlxuICovXG5leHBvcnQgY2xhc3MgRXhwYW5kZXJQYW5lbCBpbXBsZW1lbnRzIENvbXBvbmVudDxFeHBhbmRlclBhbmVsQXR0cnM+IHtcblx0Y2hpbGREaXY6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGxcblx0Ly8gVGhlcmUgYXJlIHNvbWUgY2FzZXMgd2hlcmUgdGhlIGNoaWxkIGRpdiB3aWxsIGJlIGFkZGVkIHRvIGFuZCBhIHJlZHJhdyB3b24ndCBiZSB0cmlnZ2VyZWQsIGluIHdoaWNoIGNhc2Vcblx0Ly8gdGhlIGV4cGFuZGVyIHBhbmVsIHdvbid0IHVwZGF0ZSB1bnRpbCBzb21lIGtpbmQgb2YgaW50ZXJhY3Rpb24gaGFwcGVucy5cblx0Ly8gVW5mb3J0dW5hdGVseSBubyBvbmUga25vd3Mgd2hhdCB0aGVzZSBjYXNlcyBhcmUgYW55bW9yZSBiZXNpZGVzIHNvbWUgZGlyZWN0IG11dGF0aW9uLlxuXHRvYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlciB8IG51bGwgPSBudWxsXG5cdC8vIFdlIGNhbGN1bGF0ZSB0aGUgaGVpZ2h0IG1hbnVhbGx5IGJlY2F1c2Ugd2UgbmVlZCBjb25jcmV0ZSB2YWx1ZXMgZm9yIHRoZSB0cmFuc2l0aW9uIChjYW4ndCBqdXN0IHRyYW5zaXRpb24gZnJvbSAwcHggdG8gMTAwJSlcblx0bGFzdENhbGN1bGF0ZWRIZWlnaHQ6IG51bWJlciB8IG51bGwgPSBudWxsXG5cdC8vIFdlIHJlbW92ZSB0aGUgY2hpbGRyZW4gZnJvbSB0aGUgRE9NIHRvIHRha2UgdGhlbSBvdXQgb2YgdGhlIHRhYm9yZGVyLiBTZXR0aW5nIFwidGFiaW5kZXggPSAtMVwiIG9uIHRoZSBlbGVtZW50IHdpbGwgbm90IHdvcmsgYmVjYXVzZVxuXHQvLyBpdCBkb2VzIG5vdCBhcHBseSB0byBhbnkgY2hpbGRyZW5cblx0Y2hpbGRyZW5JbkRvbTogYm9vbGVhbiB8IG51bGwgPSBudWxsXG5cdHNldENoaWxkcmVuSW5Eb21UaW1lb3V0OiBUaW1lb3V0SUQgfCBudWxsXG5cblx0b25pbml0KHZub2RlOiBWbm9kZTxFeHBhbmRlclBhbmVsQXR0cnM+KSB7XG5cdFx0dGhpcy5jaGlsZHJlbkluRG9tID0gdm5vZGUuYXR0cnMuZXhwYW5kZWRcblx0XHR0aGlzLm9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucykgPT4ge1xuXHRcdFx0Ly8gcmVkcmF3IGlmIGEgY2hpbGQgaGFzIGJlZW4gYWRkZWQgdGhhdCB3b24ndCBiZSBnZXR0aW5nIGRpc3BsYXllZFxuXHRcdFx0aWYgKHRoaXMuY2hpbGREaXYgJiYgdGhpcy5jaGlsZERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgIT09IHRoaXMubGFzdENhbGN1bGF0ZWRIZWlnaHQpIHtcblx0XHRcdFx0bS5yZWRyYXcoKVxuXHRcdFx0fVxuXHRcdH0pXG5cdH1cblxuXHRvbmJlZm9yZXVwZGF0ZSh2bm9kZTogVm5vZGU8RXhwYW5kZXJQYW5lbEF0dHJzPiwgb2xkOiBWbm9kZTxFeHBhbmRlclBhbmVsQXR0cnM+KTogYm9vbGVhbiB7XG5cdFx0Y29uc3Qgb2xkRXhwYW5kZWQgPSBvbGQuYXR0cnMuZXhwYW5kZWRcblx0XHRjb25zdCBjdXJyZW50RXhwYW5kZWQgPSB2bm9kZS5hdHRycy5leHBhbmRlZFxuXG5cdFx0aWYgKG9sZEV4cGFuZGVkICE9PSBjdXJyZW50RXhwYW5kZWQpIHtcblx0XHRcdHRoaXMuaGFuZGxlRXhwYW5zaW9uU3RhdGVDaGFuZ2VkKGN1cnJlbnRFeHBhbmRlZClcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZVxuXHR9XG5cblx0dmlldyh2bm9kZTogVm5vZGU8RXhwYW5kZXJQYW5lbEF0dHJzPik6IENoaWxkcmVuIHtcblx0XHRjb25zdCBleHBhbmRlZCA9IHZub2RlLmF0dHJzLmV4cGFuZGVkXG5cdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgZ2l2ZXMgdXMgdGhlIGNvcnJlY3Qgc2l6ZSwgd2l0aCBhIGZyYWN0aW9uXG5cdFx0dGhpcy5sYXN0Q2FsY3VsYXRlZEhlaWdodCA9IHRoaXMuY2hpbGREaXY/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCA/PyAwXG5cdFx0cmV0dXJuIG0oXG5cdFx0XHRcIi5leHBhbmRlci1wYW5lbFwiLFxuXHRcdFx0Ly8gV2Ugd2FudCBvdmVyZmxvdyB3aGlsZSBleHBhbmRlZCBpbiBzb21lIHNwZWNpZmljIGNhc2VzIGxpa2UgZHJvcGRvd25zLCBidXQgZ2VuZXJhbGx5IHdlIGRvbid0IHdhbnQgaXQgYmVjYXVzZSB3ZSB3YW50IHRvIGNsaXAgb3VyIGNoaWxkcmVuXG5cdFx0XHQvLyBmb3IgYW5pbWF0aW9uIGFuZCBzaXppbmcsIHNvIHdlIGVuYWJsZSBpdCBvbmx5IHdoZW4gZXhwYW5kZWRcblx0XHRcdG0oXG5cdFx0XHRcdGV4cGFuZGVkID8gXCJkaXZcIiA6IFwiLm92ZXJmbG93LWhpZGRlblwiLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0XHRcdG9wYWNpdHk6IGV4cGFuZGVkID8gXCIxXCIgOiBcIjBcIixcblx0XHRcdFx0XHRcdGhlaWdodDogZXhwYW5kZWQgPyBgJHt0aGlzLmxhc3RDYWxjdWxhdGVkSGVpZ2h0fXB4YCA6IFwiMHB4XCIsXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uOiBgb3BhY2l0eSAke0RlZmF1bHRBbmltYXRpb25UaW1lfW1zIGVhc2Utb3V0LCBoZWlnaHQgJHtEZWZhdWx0QW5pbWF0aW9uVGltZX1tcyBlYXNlLW91dGAsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gd2UgdXNlIHRoaXMgd3JhcHBlciB0byBtZWFzdXJlIHRoZSBjaGlsZCByZWxpYWJseVxuXHRcdFx0XHQvLyBqdXN0IGEgbWFya2VyIGNsYXNzXG5cdFx0XHRcdG0oXG5cdFx0XHRcdFx0XCIuZXhwYW5kZXItY2hpbGQtd3JhcHBlclwiLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdC8vIG9uZSB3YXkgdG8gZGVhbCB3aXRoIGNvbGxhcHNpYmxlIG1hcmdpbnMuXG5cdFx0XHRcdFx0XHRcdC8vIENTUyBpcyBmdW4gaW4gdGhlIHdheSB0aGF0IGl0IGxpa2VzIHRvIGNvbGxhcHNlIHNvbWUgdmVydGljYWwgbWFyZ2lucyBpbiBzb21lIGNhc2VzLlxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ1NTX0JveF9Nb2RlbC9NYXN0ZXJpbmdfbWFyZ2luX2NvbGxhcHNpbmdcblx0XHRcdFx0XHRcdFx0Ly8gT25lIG9mIHN1Y2ggY2FzZXMgaXMgd2hlbiB0aGVyZSdzIG5vIGNvbnRlbnQgYmV0d2VlbiB0aGUgcGFyZW50IGFuZCB0aGUgY2hpbGQgYW5kIG5vIG1hcmdpbnMgb3IgYm9yZGVycy5cblx0XHRcdFx0XHRcdFx0Ly8gU28gYXNzdW1pbmcgdGhhdCB0aGUgY2hpbGQgd2Ugd2FudCB0byBkaXNwbGF5IGluc2lkZSBoYXMgYSBtYXJnaW4tdG9wIHNldCBpdCB3b3VsZCBhY3R1YWxseSBvdmVyZmxvdyBvdXIgY2hpbGQtd3JhcHBlciBvbiB0aGVcblx0XHRcdFx0XHRcdFx0Ly8gdG9wLiBXaGljaCBtZWFucyBhbGwgb3VyIHNpemluZyBpcyB3cm9uZy5cblx0XHRcdFx0XHRcdFx0Ly8gVGhlcmUgYXJlIGZldyB3YXlzIHRvIHByZXZlbnQgdGhpcywgb25lIG9mIHRoZW0gaXMgYGRpc3BsYXk6IGZsb3ctcm9vdGAuIEl0IHNob3VsZCBoYXZlIG5vIHNpZGUgZWZmZWN0cyBleGNlcHQgZm9yIHNvbWVcblx0XHRcdFx0XHRcdFx0Ly8gYGRpc3BsYXk6IGZsb2F0YCBpdGVtcyBidXQgaWYgeW91IGFyZSB1c2luZyBgZmxvYXRgIHN0aWxsIHlvdSBoYXZlIG5vIG9uZSB0byBibGFtZSBidXQgeW91cnNlbGYuXG5cdFx0XHRcdFx0XHRcdC8vIHdlIGNvdWxkIHNldCBgb3ZlcmZsb3c6IGhpZGRlbmAgaGVyZSBpbnN0ZWFkIGJ1dCB3ZSBkbyBtZWFzdXJlIHRoaXMgZWxlbWVudCBzbyB3ZSBwcm9iYWJseSBzaG91bGRuJ3Rcblx0XHRcdFx0XHRcdFx0ZGlzcGxheTogXCJmbG93LXJvb3RcIixcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRvbmNyZWF0ZTogKHZub2RlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuY2hpbGREaXYgPSB2bm9kZS5kb20gYXMgSFRNTEVsZW1lbnRcblx0XHRcdFx0XHRcdFx0YXNzZXJ0Tm90TnVsbCh0aGlzLm9ic2VydmVyKS5vYnNlcnZlKHRoaXMuY2hpbGREaXYsIHtcblx0XHRcdFx0XHRcdFx0XHRjaGlsZExpc3Q6IHRydWUsXG5cdFx0XHRcdFx0XHRcdFx0c3VidHJlZTogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRvbnJlbW92ZTogKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHR0aGlzLm9ic2VydmVyPy5kaXNjb25uZWN0KClcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0aGlzLmNoaWxkcmVuSW5Eb20gPyB2bm9kZS5jaGlsZHJlbiA6IG51bGwsXG5cdFx0XHRcdCksXG5cdFx0XHQpLFxuXHRcdClcblx0fVxuXG5cdHByaXZhdGUgaGFuZGxlRXhwYW5zaW9uU3RhdGVDaGFuZ2VkKGV4cGFuZGVkOiBib29sZWFuKSB7XG5cdFx0Y2xlYXJUaW1lb3V0KHRoaXMuc2V0Q2hpbGRyZW5JbkRvbVRpbWVvdXQpXG5cblx0XHRpZiAoZXhwYW5kZWQpIHtcblx0XHRcdHRoaXMuY2hpbGRyZW5JbkRvbSA9IHRydWVcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zZXRDaGlsZHJlbkluRG9tVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmNoaWxkcmVuSW5Eb20gPSBmYWxzZVxuXHRcdFx0XHRtLnJlZHJhdygpXG5cdFx0XHR9LCBEZWZhdWx0QW5pbWF0aW9uVGltZSlcblx0XHR9XG5cdH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBNkJhLGlCQUFOLE1BQXlEO0NBQy9ELEtBQUtBLE9BQXVDO0VBQzNDLE1BQU0sSUFBSSxNQUFNO0VBQ2hCLE1BQU0sUUFBUSxLQUFLLG1CQUFtQixFQUFFLE1BQU07QUFDOUMsU0FBTyxnQkFDTixnQkFDQSxnQkFDQyxvR0FDQTtHQUNDLE9BQU8sRUFBRTtHQUNULFNBQVMsQ0FBQ0MsVUFBc0I7QUFDL0IsTUFBRSxrQkFBa0IsRUFBRSxTQUFTO0FBQy9CLFNBQUssRUFBRSxvQkFB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