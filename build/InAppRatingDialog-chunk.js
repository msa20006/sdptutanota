import { isIOSApp } from "./Env-chunk.js";
import { client } from "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { neverNull, resolveMaybeLazy } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { DefaultAnimationTime } from "./styles-chunk.js";
import { theme } from "./theme-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import { px, size } from "./size-chunk.js";
import { DateTime } from "./luxon-chunk.js";
import { deviceConfig } from "./DeviceConfig-chunk.js";
import { BaseButton, Button, ButtonType } from "./Button-chunk.js";
import { Dialog, DialogType } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";

//#region src/common/ratings/InAppRatingUtils.ts
function createEvent(deviceConfig$1) {
	const retentionPeriod = 30;
	let events = deviceConfig$1.getEvents().filter((event) => isWithinLastNDays(new Date(), event, retentionPeriod));
	events.push(new Date());
	deviceConfig$1.writeEvents(events);
}
function isWithinLastNDays(now, date, days) {
	return DateTime.fromJSDate(now).diff(DateTime.fromJSDate(date), "days").days < days;
}
let RatingCheckResult = function(RatingCheckResult$1) {
	RatingCheckResult$1[RatingCheckResult$1["RATING_ALLOWED"] = 0] = "RATING_ALLOWED";
	RatingCheckResult$1[RatingCheckResult$1["UNSUPPORTED_PLATFORM"] = 1] = "UNSUPPORTED_PLATFORM";
	RatingCheckResult$1[RatingCheckResult$1["LAST_RATING_TOO_YOUNG"] = 2] = "LAST_RATING_TOO_YOUNG";
	RatingCheckResult$1[RatingCheckResult$1["APP_INSTALLATION_TOO_YOUNG"] = 3] = "APP_INSTALLATION_TOO_YOUNG";
	RatingCheckResult$1[RatingCheckResult$1["ACCOUNT_TOO_YOUNG"] = 4] = "ACCOUNT_TOO_YOUNG";
	RatingCheckResult$1[RatingCheckResult$1["RATING_DISMISSED"] = 5] = "RATING_DISMISSED";
	return RatingCheckResult$1;
}({});
async function getRatingAllowed(now, deviceConfig$1, isIOSApp$1) {
	if (!isIOSApp$1) return RatingCheckResult.UNSUPPORTED_PLATFORM;
	const lastRatingPromptedDate = deviceConfig$1.getLastRatingPromptedDate();
	if (lastRatingPromptedDate != null && DateTime.fromJSDate(now).diff(DateTime.fromJSDate(lastRatingPromptedDate), "years").years < 1) return RatingCheckResult.LAST_RATING_TOO_YOUNG;
	const appInstallationDate = await locator.systemFacade.getInstallationDate().then((rawDate) => new Date(Number(rawDate)));
	if (isWithinLastNDays(now, appInstallationDate, 7)) return RatingCheckResult.APP_INSTALLATION_TOO_YOUNG;
	const customerCreationDate = (await locator.logins.getUserController().loadCustomerInfo()).creationTime;
	if (isWithinLastNDays(now, customerCreationDate, 7)) return RatingCheckResult.ACCOUNT_TOO_YOUNG;
	const retryRatingPromptAfter = deviceConfig$1.getRetryRatingPromptAfter();
	if (retryRatingPromptAfter != null && now.getTime() < retryRatingPromptAfter.getTime()) return RatingCheckResult.RATING_DISMISSED;
	return RatingCheckResult.RATING_ALLOWED;
}
function isEventHappyMoment(now, deviceConfig$1) {
	const lastRatingPromptedDate = deviceConfig$1.getLastRatingPromptedDate();
	const events = deviceConfig$1.getEvents();
	if (events.length >= 3 && lastRatingPromptedDate == null) return true;
	const twentyEightDaysAgo = DateTime.fromJSDate(now).minus({ days: 28 }).toMillis();
	const recentActivityCount = events.filter((event) => new Date(event).getTime() >= twentyEightDaysAgo).length;
	if (recentActivityCount >= 10) return true;
	return false;
}

//#endregion
//#region src/common/ratings/InAppRatingDialog.ts
var AppRatingValue = function(AppRatingValue$1) {
	AppRatingValue$1["Happy"] = "happy";
	AppRatingValue$1["Unhappy"] = "unhappy";
	AppRatingValue$1["NotNow"] = "notNow";
	return AppRatingValue$1;
}(AppRatingValue || {});
async function showAppRatingDialog() {
	const selectedValue = await new Promise((resolve) => {
		const choose = (choice) => {
			dialog.close();
			setTimeout(() => resolve(choice), DefaultAnimationTime);
		};
		const headerBarProps = { right: [{
			label: "notNow_label",
			click: () => choose(AppRatingValue.NotNow),
			type: ButtonType.Secondary
		}] };
		const columnClass = ".flex-half.overflow-hidden";
		const dialog = new Dialog(DialogType.EditSmall, { view: () => mithril_default("", [mithril_default(".dialog-header.plr-l.flex-space-between.dialog-header-line-height", [mithril_default(columnClass + ".ml-negative-s"), mithril_default(columnClass + ".mr-negative-s.flex.justify-end", resolveMaybeLazy(neverNull(headerBarProps.right)).map((a) => mithril_default(Button, a)))]), mithril_default(".plr-l.pb-ml.text-break", mithril_default(".flex.flex-column", [mithril_default("#dialog-message.dialog-max-height.text-break.text-prewrap.selectable.scroll", mithril_default("", mithril_default(".flex-center.mt-m", mithril_default("img.pb.pt.block.height-100p", {
			src: `${window.tutao.appState.prefixWithoutFile}/images/rating/${client.isCalendarApp() ? "calendar" : "mail"}.png`,
			alt: "",
			rel: "noreferrer",
			loading: "lazy",
			decoding: "async",
			style: { width: "80%" }
		})), mithril_default("h1.text-center", lang.get("ratingHowAreWeDoing_title")), mithril_default("p.text-center", lang.get("ratingExplanation_msg")))), mithril_default(".flex.flex-column.mt", { style: { gap: "1em" } }, mithril_default(BaseButton, {
			label: "ratingLoveIt_label",
			text: lang.get("ratingLoveIt_label"),
			onclick: () => choose(AppRatingValue.Happy),
			class: `full-width border-radius-small center b flash accent-bg button-content`,
			style: { height: px(size.button_height + size.vpad_xs * 1.5) }
		}), mithril_default(BaseButton, {
			label: "ratingNeedsWork_label",
			text: lang.get("ratingNeedsWork_label"),
			onclick: () => choose(AppRatingValue.Unhappy),
			class: `full-width border-radius-small center b flash`,
			style: {
				border: `2px solid ${theme.content_accent}`,
				height: px(size.button_height + size.vpad_xs * 1.5),
				color: theme.content_accent
			}
		}))]))]) }).addShortcut({
			help: "close_alt",
			key: Keys.ESC,
			exec: () => choose(AppRatingValue.NotNow)
		});
		dialog.show();
	});
	handleRatingDialogSelection(selectedValue);
}
function handleRatingDialogSelection(selectedValue) {
	switch (selectedValue) {
		case AppRatingValue.Unhappy:
			deviceConfig.setLastRatingPromptedDate(new Date());
			break;
		case AppRatingValue.NotNow:
			deviceConfig.setRetryRatingPromptAfter(DateTime.now().plus({ months: 1 }).toJSDate());
			break;
		case AppRatingValue.Happy: {
			deviceConfig.setLastRatingPromptedDate(new Date());
			void locator.systemFacade.requestInAppRating();
			break;
		}
	}
}
async function handleRatingByEvent() {
	const isTheIOSApp = isIOSApp();
	if (isTheIOSApp) createEvent(deviceConfig);
	const now = new Date();
	if (await getRatingAllowed(now, deviceConfig, isTheIOSApp) === RatingCheckResult.RATING_ALLOWED) {
		if (isEventHappyMoment(now, deviceConfig)) void showAppRatingDialog();
	}
}

//#endregion
export { RatingCheckResult, getRatingAllowed, handleRatingByEvent, showAppRatingDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,