import { __toESM } from "./chunk-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { LazyLoaded, assertNotNull, memoized, neverNull, ofClass } from "./dist2-chunk.js";
import { InfoLink, lang, languages } from "./LanguageViewModel-chunk.js";
import { PlanType } from "./TutanotaConstants-chunk.js";
import { GENERATED_MAX_ID } from "./EntityUtils-chunk.js";
import { BookingTypeRef, CustomerInfoTypeRef, CustomerPropertiesTypeRef, createNotificationMailTemplate } from "./TypeRefs2-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { PayloadTooLargeError } from "./RestError-chunk.js";
import { Dialog, DialogType, DropDownSelector, TextField } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { UserError } from "./UserError-chunk.js";
import { showProgressDialog } from "./ProgressDialog-chunk.js";
import { insertInlineImageB64ClickHandler } from "./SharedMailUtils-chunk.js";
import { showNotAvailableForFreeDialog, showPlanUpgradeRequiredDialog } from "./SubscriptionDialogs-chunk.js";
import { getWhitelabelDomainInfo } from "./CustomerUtils-chunk.js";
import { HtmlEditor } from "./HtmlEditor-chunk.js";
import { htmlSanitizer } from "./HtmlSanitizer-chunk.js";
import { SegmentControl } from "./SegmentControl-chunk.js";
import { getAvailablePlansWithWhitelabel, isWhitelabelActive } from "./SubscriptionUtils-chunk.js";

//#region src/common/settings/EditNotificationEmailDialog.ts
var import_stream = __toESM(require_stream(), 1);
function showAddOrEditNotificationEmailDialog(userController, selectedNotificationLanguage) {
	let existingTemplate = undefined;
	userController.loadCustomer().then((customer) => {
		if (customer.properties) {
			const customerProperties = new LazyLoaded(() => locator.entityClient.load(CustomerPropertiesTypeRef, neverNull(customer.properties)));
			return customerProperties.getAsync().then((loadedCustomerProperties) => {
				if (selectedNotificationLanguage != null) existingTemplate = loadedCustomerProperties.notificationMailTemplates.find((template) => template.language === selectedNotificationLanguage);
			}).then(() => {
				return userController.loadCustomerInfo().then((customerInfo) => {
					return customerInfo.bookings ? locator.entityClient.loadRange(BookingTypeRef, customerInfo.bookings.items, GENERATED_MAX_ID, 1, true).then((bookings) => bookings.length === 1 ? bookings[0] : null) : null;
				}).then((lastBooking) => {
					showBuyOrSetNotificationEmailDialog(lastBooking, customerProperties, existingTemplate);
				});
			});
		}
	});
}
async function showBuyOrSetNotificationEmailDialog(lastBooking, customerProperties, existingTemplate) {
	if (locator.logins.getUserController().isFreeAccount()) showNotAvailableForFreeDialog([PlanType.Unlimited]);
else {
		const planConfiguration = await locator.logins.getUserController().getPlanConfig();
		let whitelabel = isWhitelabelActive(lastBooking, planConfiguration);
		if (!whitelabel) {
			const plansWithWhitelabel = await getAvailablePlansWithWhitelabel();
			whitelabel = await showPlanUpgradeRequiredDialog(plansWithWhitelabel);
		}
		if (whitelabel) show(existingTemplate ?? null, customerProperties);
	}
}
function show(existingTemplate, customerProperties) {
	let template;
	if (!existingTemplate) template = createNotificationMailTemplate({
		language: "en",
		body: getDefaultNotificationMail(),
		subject: lang.get("externalNotificationMailSubject_msg", { "{1}": "{sender}" })
	});
else template = existingTemplate;
	const editor = new HtmlEditor().setMinHeight(400).showBorders().setModeSwitcher("mailBody_label").setValue(template.body).enableToolbar().setToolbarOptions({ imageButtonClickHandler: insertInlineImageB64ClickHandler });
	const editSegment = {
		name: lang.get("edit_action"),
		value: "edit"
	};
	const previewSegment = {
		name: lang.get("preview_label"),
		value: "preview"
	};
	const selectedTab = (0, import_stream.default)(editSegment.value);
	const sortedLanguages = languages.slice().sort((a, b) => lang.get(a.textId).localeCompare(lang.get(b.textId))).map((language) => {
		return {
			name: lang.get(language.textId),
			value: language.code
		};
	});
	const selectedLanguage = assertNotNull(sortedLanguages.find(({ value }) => value === template.language));
	const selectedLanguageStream = (0, import_stream.default)(selectedLanguage.value);
	const subject = (0, import_stream.default)(template.subject);
	let savedHtml = editor.getValue();
	selectedTab.map((tab) => {
		if (tab === editSegment.value) editor.setValue(savedHtml);
else savedHtml = editor.getValue();
	});
	const editTabContent = () => [
		mithril_default(".small.mt-s", lang.get("templateHelp_msg")),
		existingTemplate ? mithril_default(TextField, {
			label: "notificationMailLanguage_label",
			isReadOnly: true,
			value: selectedLanguage.name
		}) : mithril_default(DropDownSelector, {
			label: "notificationMailLanguage_label",
			items: sortedLanguages,
			selectedValue: selectedLanguageStream(),
			selectionChangedHandler: selectedLanguageStream,
			dropdownWidth: 250
		}),
		mithril_default(TextField, {
			label: "subject_label",
			value: subject(),
			oninput: subject
		}),
		mithril_default(editor)
	];
	const senderName = locator.logins.getUserController().userGroupInfo.name;
	let senderDomain = "https://app.tuta.com";
	loadCustomerInfo().then((customerInfo) => {
		const whitelabelDomainInfo = customerInfo && getWhitelabelDomainInfo(customerInfo);
		senderDomain = "https://" + (whitelabelDomainInfo && whitelabelDomainInfo.domain || "app.tuta.com");
		mithril_default.redraw();
	});
	const sanitizePreview = memoized((html) => {
		return htmlSanitizer.sanitizeHTML(html).html;
	});
	const previewTabContent = () => [
		mithril_default(TextField, {
			label: "subject_label",
			value: subject().replace(/{sender}/g, senderName),
			isReadOnly: true
		}),
		mithril_default(".small.mt.mb", lang.get("mailBody_label")),
		mithril_default.trust(sanitizePreview(savedHtml.replace(/{sender}/g, senderName).replace(/{link}/g, senderDomain)))
	];
	Dialog.showActionDialog({
		type: DialogType.EditLarge,
		title: "edit_action",
		child: () => {
			return [mithril_default(SegmentControl, {
				items: [editSegment, previewSegment],
				selectedValue: selectedTab(),
				onValueSelected: selectedTab
			}), selectedTab() === editSegment.value ? editTabContent() : previewTabContent()];
		},
		okAction: (dialog) => {
			if (!editor.getValue().includes("{link}")) return Dialog.message(lang.getTranslation("templateMustContain_msg", { "{value}": "{link}" }));
			let templates;
			let isExistingTemplate;
			const oldLanguage = template.language;
			const oldSubject = template.subject;
			const oldBody = template.body;
			return showProgressDialog("pleaseWait_msg", customerProperties.getAsync().then((customerProperties$1) => {
				templates = customerProperties$1.notificationMailTemplates;
				if (customerProperties$1.notificationMailTemplates.some((t) => t !== existingTemplate && t.language === selectedLanguageStream())) throw new UserError("templateLanguageExists_msg");
				isExistingTemplate = templates.includes(template);
				if (!isExistingTemplate) customerProperties$1.notificationMailTemplates.push(template);
				template.subject = htmlSanitizer.sanitizeHTML(subject(), { blockExternalContent: false }).html;
				template.body = htmlSanitizer.sanitizeHTML(editor.getValue(), { blockExternalContent: false }).html;
				template.language = selectedLanguageStream();
				return locator.entityClient.update(customerProperties$1).then(() => dialog.close());
			})).catch(ofClass(UserError, (err) => {
				return Dialog.message(lang.makeTranslation("error_message", err.message));
			})).catch(ofClass(PayloadTooLargeError, () => {
				template.subject = oldSubject;
				template.body = oldBody;
				template.language = oldLanguage;
				if (!isExistingTemplate) templates.pop();
				return Dialog.message("notificationMailTemplateTooLarge_msg");
			}));
		}
	});
}
const HTML_PTAG_START = "<p>";
const HTML_PTAG_END = "</p>";
function getDefaultNotificationMail() {
	return HTML_PTAG_START + lang.get("externalNotificationMailBody1_msg") + HTML_PTAG_END + HTML_PTAG_START + lang.get("externalNotificationMailBody2_msg", { "{1}": InfoLink.HomePage }) + HTML_PTAG_END + HTML_PTAG_START + "<a href='{link}'>" + lang.get("externalNotificationMailBody3_msg") + "</a>" + HTML_PTAG_END + HTML_PTAG_START + lang.get("externalNotificationMailBody4_msg") + "<br>" + "{link}" + "<br>" + HTML_PTAG_END + HTML_PTAG_START + lang.get("externalNotificationMailBody5_msg") + HTML_PTAG_END + HTML_PTAG_START + lang.get("externalNotificationMailBody6_msg") + "<br>" + "{sender}" + HTML_PTAG_END;
}
function loadCustomerInfo() {
	return locator.logins.getUserController().loadCustomer().then((customer) => locator.entityClient.load(CustomerInfoTypeRef, customer.customerInfo));
}

//#endregion
export { show as show$1, showAddOrEditNotificationEmailDialog, showBuyOrSetNotificationEmailDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,