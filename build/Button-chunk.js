import { assertMainOrNode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { assertNotNull, noOp } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { getElevatedBackground, theme } from "./theme-chunk.js";
import { TabIndex } from "./TutanotaConstants-chunk.js";

//#region src/common/gui/base/buttons/BaseButton.ts
var BaseButton = class {
	dom = null;
	view({ attrs, children }) {
		const disabled = attrs.disabled ? true : null;
		const pressed = booleanToAttributeValue(attrs.pressed);
		const selected = booleanToAttributeValue(attrs.selected);
		return mithril_default("button", {
			title: lang.getTranslationText(attrs.label),
			disabled,
			"aria-disabled": disabled,
			pressed,
			"aria-pressed": pressed,
			"aria-selected": selected,
			onclick: (event) => attrs.onclick(event, assertNotNull(this.dom)),
			onkeydown: attrs.onkeydown,
			class: attrs.class,
			style: attrs.style,
			role: attrs.role,
			"data-testid": `btn:${lang.getTestId(attrs.label)}`
		}, [
			attrs.icon ? this.renderIcon(attrs.icon, attrs.iconWrapperSelector) : null,
			attrs.text ?? null,
			children
		]);
	}
	renderIcon(icon, selector) {
		return mithril_default(selector ?? "span", {
			ariaHidden: true,
			tabindex: TabIndex.Programmatic
		}, icon);
	}
	oncreate(vnode) {
		this.dom = vnode.dom;
	}
};
function booleanToAttributeValue(value) {
	return value != null ? String(value) : null;
}

//#endregion
//#region src/common/gui/base/Button.ts
assertMainOrNode();
let ButtonType = function(ButtonType$1) {
	ButtonType$1["Primary"] = "primary";
	ButtonType$1["Secondary"] = "secondary";
	return ButtonType$1;
}({});
let ButtonColor = function(ButtonColor$1) {
	ButtonColor$1["Nav"] = "nav";
	ButtonColor$1["Content"] = "content";
	ButtonColor$1["Elevated"] = "elevated";
	ButtonColor$1["DrawerNav"] = "drawernav";
	ButtonColor$1["Fab"] = "fab";
	return ButtonColor$1;
}({});
function getColors(buttonColors) {
	switch (buttonColors) {
		case ButtonColor.Nav: return {
			button: theme.navigation_button,
			border: theme.navigation_bg
		};
		case ButtonColor.DrawerNav: return {
			button: theme.content_button,
			border: getElevatedBackground()
		};
		case ButtonColor.Elevated: return {
			button: theme.content_button,
			border: getElevatedBackground()
		};
		case ButtonColor.Fab: return {
			button: theme.content_button_icon_selected,
			border: getElevatedBackground()
		};
		case ButtonColor.Content:
		default: return {
			button: theme.content_button,
			border: theme.content_bg
		};
	}
}
var Button = class {
	view({ attrs }) {
		let classes = this.resolveClasses(attrs.type);
		return mithril_default(BaseButton, {
			label: attrs.title == null ? attrs.label : attrs.title,
			text: lang.getTranslationText(attrs.label),
			class: classes.join(" "),
			style: { borderColor: getColors(attrs.colors).border },
			onclick: attrs.click ?? noOp
		});
	}
	resolveClasses(type) {
		let classes = [
			"limit-width",
			"noselect",
			"bg-transparent",
			"button-height",
			"text-ellipsis",
			"content-accent-fg",
			"flex",
			"items-center",
			"justify-center",
			"flash"
		];
		if (type === ButtonType.Primary) classes.push("b");
else classes.push("plr-button", "button-content");
		return classes;
	}
};

//#endregion
export { BaseButton, Button, ButtonColor, ButtonType, getColors };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,