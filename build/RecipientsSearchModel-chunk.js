import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import "./ClientDetector-chunk.js";
import "./mithril-chunk.js";
import { ofClass } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import "./LanguageViewModel-chunk.js";
import "./styles-chunk.js";
import "./theme-chunk.js";
import "./TutanotaConstants-chunk.js";
import "./KeyManager-chunk.js";
import "./WindowFacade-chunk.js";
import "./RootView-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { ContactListEntryTypeRef, ContactTypeRef } from "./TypeRefs-chunk.js";
import { findRecipientWithAddress } from "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import { isMailAddress } from "./FormatValidator-chunk.js";
import "./stream-chunk.js";
import "./ErrorUtils-chunk.js";
import "./RestError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import { LoginIncompleteError } from "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import { DbError } from "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import "./BirthdayUtils-chunk.js";
import "./GroupUtils-chunk.js";
import "./Button-chunk.js";
import "./Icons-chunk.js";
import "./DialogHeaderBar-chunk.js";
import "./CountryList-chunk.js";
import "./Dialog-chunk.js";
import "./Icon-chunk.js";
import "./AriaUtils-chunk.js";
import "./IconButton-chunk.js";
import "./Formatter-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import "./MailAddressParser-chunk.js";
import "./BlobUtils-chunk.js";
import "./FileUtils-chunk.js";
import "./ProgressDialog-chunk.js";
import "./SharedMailUtils-chunk.js";
import "./Recipient-chunk.js";
import "./ContactUtils-chunk.js";
import { ResolveMode } from "./RecipientsModel-chunk.js";

//#region src/common/misc/RecipientsSearchModel.ts
const MaxNativeSuggestions = 10;
var RecipientsSearchModel = class {
	searchResults = [];
	loading = null;
	currentQuery = "";
	previousQuery = "";
	filter = null;
	constructor(recipientsModel, contactModel, suggestionsProvider, entityClient) {
		this.recipientsModel = recipientsModel;
		this.contactModel = contactModel;
		this.suggestionsProvider = suggestionsProvider;
		this.entityClient = entityClient;
	}
	results() {
		return this.searchResults;
	}
	isLoading() {
		return this.loading != null;
	}
	clear() {
		this.searchResults = [];
		this.loading = null;
		this.currentQuery = "";
		this.previousQuery = "";
	}
	async search(value) {
		const query = value.trim();
		this.currentQuery = query;
		if (this.loading != null) {} else if (query.length > 0 && !(this.previousQuery.length > 0 && query.indexOf(this.previousQuery) === 0 && this.searchResults.length === 0)) {
			const [newContactListSuggestions, newContactSuggestions] = await Promise.all([this.findContactLists(query.toLowerCase()), this.findContacts(query.toLowerCase())]);
			if (query === this.currentQuery) {
				this.searchResults = [...newContactListSuggestions.map((value$1) => ({
					type: "contactlist",
					value: value$1
				})), ...newContactSuggestions.map((value$1) => ({
					type: "recipient",
					value: value$1
				}))].filter(this.filter ?? ((_) => true));
				this.previousQuery = query;
			}
			this.loading = null;
		} else if (query.length === 0 && query !== this.previousQuery) {
			this.searchResults = [];
			this.previousQuery = query;
		}
		await this.loading;
	}
	async resolveContactList(contactList) {
		const entries = await this.entityClient.loadAll(ContactListEntryTypeRef, contactList.groupRoot.entries);
		return entries.map((entry) => {
			return this.recipientsModel.resolve({ address: entry.emailAddress }, ResolveMode.Lazy);
		});
	}
	setFilter(filter) {
		this.filter = filter;
	}
	async findContacts(query) {
		if (isMailAddress(query, false)) return [];
		const contacts = await this.contactModel.searchForContacts(`"${query}"`, "recipient", 10).catch(ofClass(DbError, async () => {
			const listId = await this.contactModel.getContactListId();
			if (listId) return locator.entityClient.loadAll(ContactTypeRef, listId);
else return [];
		})).catch(ofClass(LoginIncompleteError, () => []));
		let suggestedRecipients = [];
		for (const contact of contacts) {
			const name = `${contact.firstName} ${contact.lastName}`.trim();
			const filter = name.toLowerCase().indexOf(query) !== -1 ? (address) => isMailAddress(address.trim(), false) : (address) => isMailAddress(address.trim(), false) && address.toLowerCase().indexOf(query) !== -1;
			const recipientsOfContact = contact.mailAddresses.map(({ address }) => address).filter(filter).map((address) => this.recipientsModel.resolve({
				name,
				address,
				contact
			}, ResolveMode.Lazy));
			suggestedRecipients = suggestedRecipients.concat(recipientsOfContact);
		}
		const additionalSuggestions = await this.findAdditionalSuggestions(query);
		const contactSuggestions = additionalSuggestions.filter((contact) => isMailAddress(contact.address, false) && !findRecipientWithAddress(suggestedRecipients, contact.address)).slice(0, MaxNativeSuggestions).map((recipient) => this.recipientsModel.resolve(recipient, ResolveMode.Lazy));
		suggestedRecipients.push(...contactSuggestions);
		return suggestedRecipients.sort((suggestion1, suggestion2) => suggestion1.name.localeCompare(suggestion2.name));
	}
	async findAdditionalSuggestions(text) {
		if (!this.suggestionsProvider) return [];
		const recipients = await this.suggestionsProvider.getContactSuggestions(text);
		return recipients.map(({ name, mailAddress }) => ({
			name,
			address: mailAddress
		}));
	}
	async findContactLists(text) {
		return this.contactModel.searchForContactLists(text);
	}
};

//#endregion
export { RecipientsSearchModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,