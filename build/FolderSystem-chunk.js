import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { groupBy, isNotEmpty, partition } from "./dist2-chunk.js";
import { MailSetKind, isFolder } from "./TutanotaConstants-chunk.js";
import { elementIdPart, getElementId, getListId, isSameId } from "./EntityUtils-chunk.js";

//#region src/common/api/common/utils/Scheduler.ts
const SET_TIMEOUT_LIMIT = 2147483647;
var SchedulerImpl = class {
	/**
	* This points from the originally scheduled timeout to the most recent timeout
	*/
	bridgedTimeouts;
	constructor(dateProvider, systemTimeout, systemInterval) {
		this.dateProvider = dateProvider;
		this.systemTimeout = systemTimeout;
		this.systemInterval = systemInterval;
		this.bridgedTimeouts = new Map();
	}
	scheduleAt(callback, date) {
		let timeoutId;
		const wrappedCallback = () => {
			this.bridgedTimeouts.delete(timeoutId);
			callback();
		};
		timeoutId = this.scheduleAtInternal(wrappedCallback, date);
		return timeoutId;
	}
	scheduleAfter(thunk, after) {
		const date = new Date(this.dateProvider.now() + after);
		return this.scheduleAt(thunk, date);
	}
	/** We have separate internal version which does not re-wrap the thunk. */
	scheduleAtInternal(thunk, date) {
		const now = this.dateProvider.now();
		const then = date.getTime();
		const diff = Math.max(then - now, 0);
		let timeoutId;
		if (diff > SET_TIMEOUT_LIMIT) timeoutId = this.systemTimeout.setTimeout(() => {
			const newTimeoutId = this.scheduleAtInternal(thunk, date);
			this.bridgedTimeouts.set(timeoutId, newTimeoutId);
		}, SET_TIMEOUT_LIMIT);
else timeoutId = this.systemTimeout.setTimeout(thunk, diff);
		return timeoutId;
	}
	unscheduleTimeout(id) {
		const rescheduledId = this.bridgedTimeouts.get(id) || id;
		this.bridgedTimeouts.delete(rescheduledId);
		return this.systemTimeout.clearTimeout(rescheduledId);
	}
	schedulePeriodic(thunk, ms) {
		if (ms > SET_TIMEOUT_LIMIT) throw new Error("Attempting to schedule periodic task but the period is too big: " + ms);
		return this.systemInterval.setInterval(thunk, ms);
	}
	unschedulePeriodic(id) {
		this.systemInterval.clearInterval(id);
	}
};

//#endregion
//#region src/common/api/common/utils/NoZoneDateProvider.ts
var NoZoneDateProvider = class {
	now() {
		return Date.now();
	}
	timeZone() {
		throw new ProgrammingError("timeZone is not available in worker");
	}
};

//#endregion
//#region src/common/api/common/DomainConfigProvider.ts
var DomainConfigProvider = class {
	/** Get domain config for the current domain (staticUrl or the one the app is running on). */
	getCurrentDomainConfig() {
		const url = new URL(env.staticUrl ?? location.href);
		const port = url.port;
		const hostname = url.hostname;
		const protocol = url.protocol;
		return this.getDomainConfigForHostname(hostname, protocol, port);
	}
	getDomainConfigForHostname(hostname, protocol = "https:", port) {
		const staticConfig = env.domainConfigs[hostname];
		if (staticConfig) return staticConfig;
else {
			const fullHostName = hostname + (port ? `:${port}` : "");
			const dynamicConfig = env.domainConfigs["{hostname}"];
			const entries = Object.entries(dynamicConfig).map(([key, value]) => {
				const replacedValue = typeof value === "string" ? value.replace("{hostname}", fullHostName).replace("{protocol}", protocol) : value;
				return [key, replacedValue];
			});
			return Object.fromEntries(entries);
		}
	}
};

//#endregion
//#region src/common/api/common/mail/FolderSystem.ts
var FolderSystem = class {
	systemSubtrees;
	customSubtrees;
	importedMailSet;
	constructor(mailSets) {
		const [folders, nonFolders] = partition(mailSets, (f) => isFolder(f));
		const folderByParent = groupBy(folders, (folder) => folder.parentFolder ? elementIdPart(folder.parentFolder) : null);
		const topLevelFolders = folders.filter((f) => f.parentFolder == null);
		const [systemFolders, customFolders] = partition(topLevelFolders, (f) => f.folderType !== MailSetKind.CUSTOM);
		this.importedMailSet = nonFolders.find((f) => f.folderType === MailSetKind.Imported) || null;
		this.systemSubtrees = systemFolders.sort(compareSystem).map((f) => this.makeSubtree(folderByParent, f, compareCustom));
		this.customSubtrees = customFolders.sort(compareCustom).map((f) => this.makeSubtree(folderByParent, f, compareCustom));
	}
	getIndentedList(excludeFolder = null) {
		return [...this.getIndentedFolderList(this.systemSubtrees, excludeFolder), ...this.getIndentedFolderList(this.customSubtrees, excludeFolder)];
	}
	/** Search for a specific folder type. Some mailboxes might not have some system folders! */
	getSystemFolderByType(type) {
		return this.systemSubtrees.find((f) => f.folder.folderType === type)?.folder ?? null;
	}
	getFolderById(folderId) {
		const subtree = this.getFolderByIdInSubtrees(this.systemSubtrees, folderId) ?? this.getFolderByIdInSubtrees(this.customSubtrees, folderId);
		return subtree?.folder ?? null;
	}
	getFolderByMail(mail) {
		const sets = mail.sets;
		if (isNotEmpty(sets)) {
			for (const setId of sets) {
				const folder = this.getFolderById(elementIdPart(setId));
				if (folder != null) return folder;
			}
			return null;
		} else return this.getFolderByMailListIdLegacy(getListId(mail));
	}
	getFolderByMailListIdLegacy(mailListId) {
		const subtree = this.getFolderByMailListIdInSubtrees(this.systemSubtrees, mailListId) ?? this.getFolderByMailListIdInSubtrees(this.customSubtrees, mailListId);
		return subtree?.folder ?? null;
	}
	/**
	* Returns the children of a parent (applies only to custom folders)
	* if no parent is given, the top level custom folders are returned
	*/
	getCustomFoldersOfParent(parent) {
		if (parent) {
			const parentFolder = this.getFolderByIdInSubtrees([...this.customSubtrees, ...this.systemSubtrees], elementIdPart(parent));
			return parentFolder ? parentFolder.children.map((child) => child.folder) : [];
		} else return this.customSubtrees.map((subtree) => subtree.folder);
	}
	getDescendantFoldersOfParent(parent) {
		const parentFolder = this.getFolderByIdInSubtrees([...this.customSubtrees, ...this.systemSubtrees], elementIdPart(parent));
		if (parentFolder) return this.getIndentedFolderList([parentFolder]).slice(1);
else return [];
	}
	/** returns all parents of the folder, including the folder itself */
	getPathToFolder(folderId) {
		return this.getPathToFolderInSubtrees(this.systemSubtrees, folderId) ?? this.getPathToFolderInSubtrees(this.customSubtrees, folderId) ?? [];
	}
	checkFolderForAncestor(folder, potentialAncestorId) {
		let currentFolderPointer = folder;
		while (true) {
			if (currentFolderPointer?.parentFolder == null) return false;
else if (isSameId(currentFolderPointer.parentFolder, potentialAncestorId)) return true;
			currentFolderPointer = this.getFolderById(elementIdPart(currentFolderPointer.parentFolder));
		}
	}
	getIndentedFolderList(subtrees, excludeFolder = null, currentLevel = 0) {
		const plainList = [];
		for (const subtree of subtrees) if (!excludeFolder || !isSameId(subtree.folder._id, excludeFolder._id)) {
			plainList.push({
				level: currentLevel,
				folder: subtree.folder
			});
			plainList.push(...this.getIndentedFolderList(subtree.children, excludeFolder, currentLevel + 1));
		}
		return plainList;
	}
	getIndentedSystemList() {
		return this.systemSubtrees.map((subtree) => {
			return {
				level: 0,
				folder: subtree.folder
			};
		});
	}
	getFolderByIdInSubtrees(systems, folderId) {
		return this.getFolderBy(systems, (system) => isSameId(getElementId(system.folder), folderId));
	}
	getFolderByMailListIdInSubtrees(systems, mailListId) {
		return this.getFolderBy(systems, (subtree) => isSameId(subtree.folder.mails, mailListId));
	}
	getFolderBy(systems, predicate) {
		const topLevel = systems.find(predicate);
		if (topLevel) return topLevel;
else for (const topLevelSystem of systems) {
			const found = this.getFolderBy(topLevelSystem.children, predicate);
			if (found) return found;
		}
		return null;
	}
	getPathToFolderInSubtrees(systems, folderId) {
		for (const system of systems) {
			if (isSameId(system.folder._id, folderId)) return [system.folder];
			const subpath = this.getPathToFolderInSubtrees(system.children, folderId);
			if (subpath) return [system.folder].concat(...subpath);
		}
		return null;
	}
	makeSubtree(folderByParent, parent, comparator) {
		const childrenFolders = folderByParent.get(getElementId(parent));
		if (childrenFolders) {
			const childSystems = childrenFolders.slice().sort(comparator).map((child) => this.makeSubtree(folderByParent, child, comparator));
			return {
				folder: parent,
				children: childSystems
			};
		} else return {
			folder: parent,
			children: []
		};
	}
};
function compareCustom(folder1, folder2) {
	return folder1.name.localeCompare(folder2.name);
}
const folderTypeToOrder = {
	[MailSetKind.INBOX]: 0,
	[MailSetKind.DRAFT]: 1,
	[MailSetKind.SENT]: 2,
	[MailSetKind.TRASH]: 4,
	[MailSetKind.ARCHIVE]: 5,
	[MailSetKind.SPAM]: 6,
	[MailSetKind.ALL]: 7
};
function compareSystem(folder1, folder2) {
	const order1 = folderTypeToOrder[folder1.folderType] ?? 7;
	const order2 = folderTypeToOrder[folder2.folderType] ?? 7;
	return order1 - order2;
}

//#endregion
export { DomainConfigProvider, FolderSystem, NoZoneDateProvider, SchedulerImpl };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,