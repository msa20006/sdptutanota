import { mithril_default } from "./mithril-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { theme } from "./theme-chunk.js";
import { encodeSVG, getOperatingClasses } from "./Dialog-chunk.js";
import { BootIcons, BootIconsSvg } from "./Icon-chunk.js";

//#region src/common/gui/base/Checkbox.ts
var Checkbox = class Checkbox {
	focused = false;
	_domInput = null;
	static checkedIcon = encodeSVG(BootIconsSvg[BootIcons.CheckboxSelected]);
	static uncheckedIcon = encodeSVG(BootIconsSvg[BootIcons.Checkbox]);
	view(vnode) {
		const a = vnode.attrs;
		const helpLabelText = lang.getTranslationText(a.helpLabel ? a.helpLabel : "emptyString_msg");
		const helpLabel = a.helpLabel ? mithril_default(`small.block.content-fg${Checkbox.getBreakClass(helpLabelText)}`, helpLabelText) : [];
		const userClasses = a.class == null ? "" : " " + a.class;
		return mithril_default(`.pt`, {
			"aria-disabled": String(a.disabled),
			class: getOperatingClasses(a.disabled, "click flash") + userClasses,
			onclick: (e) => {
				if (e.target !== this._domInput) this.toggle(e, a);
			}
		}, mithril_default(`label${Checkbox.getBreakClass(a.label())}`, { class: `${this.focused ? "content-accent-fg" : "content-fg"} ${getOperatingClasses(a.disabled, "click")}` }, [
			mithril_default("input[type=checkbox].icon.checkbox-override", {
				oncreate: (vnode$1) => this._domInput = vnode$1.dom,
				onchange: (e) => this.toggle(e, a),
				checked: a.checked,
				onfocus: () => this.focused = true,
				onblur: () => this.focused = false,
				class: getOperatingClasses(a.disabled, "click"),
				style: {
					cursor: a.disabled ? "default" : "pointer",
					"background-color": theme.content_accent,
					"mask-image": `url("${a.checked ? Checkbox.checkedIcon : Checkbox.uncheckedIcon}")`
				},
				disabled: a.disabled
			}),
			a.label(),
			helpLabel
		]));
	}
	static getBreakClass(text) {
		if (typeof text !== "string" || text.includes(" ")) return ".break-word";
else return ".break-all";
	}
	toggle(event, attrs) {
		if (!attrs.disabled) attrs.onChecked(!attrs.checked);
		event.stopPropagation();
		if (this._domInput) this._domInput.focus();
	}
};

//#endregion
export { Checkbox };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hlY2tib3gtY2h1bmsuanMiLCJuYW1lcyI6WyJ2bm9kZTogVm5vZGU8Q2hlY2tib3hBdHRycz4iLCJlOiBNb3VzZUV2ZW50Iiwidm5vZGUiLCJlOiBFdmVudCIsInRleHQ6IHN0cmluZyB8IENoaWxkcmVuIiwiZXZlbnQ6IEV2ZW50IiwiYXR0cnM6IENoZWNrYm94QXR0cnMiXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL2d1aS9iYXNlL0NoZWNrYm94LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtLCB7IENoaWxkcmVuLCBDb21wb25lbnQsIFZub2RlIH0gZnJvbSBcIm1pdGhyaWxcIlxuaW1wb3J0IHsgQm9vdEljb25zLCBCb290SWNvbnNTdmcgfSBmcm9tIFwiLi9pY29ucy9Cb290SWNvbnNcIlxuaW1wb3J0IHR5cGUgeyBUcmFuc2xhdGlvbktleSwgTWF5YmVUcmFuc2xhdGlvbiB9IGZyb20gXCIuLi8uLi9taXNjL0xhbmd1YWdlVmlld01vZGVsXCJcbmltcG9ydCB7IGxhbmcgfSBmcm9tIFwiLi4vLi4vbWlzYy9MYW5ndWFnZVZpZXdNb2RlbFwiXG5pbXBvcnQgdHlwZSB7IGxhenkgfSBmcm9tIFwiQHR1dGFvL3R1dGFub3RhLXV0aWxzXCJcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSBcIi4uL3RoZW1lLmpzXCJcbmltcG9ydCB7IGVuY29kZVNWRywgZ2V0T3BlcmF0aW5nQ2xhc3NlcyB9IGZyb20gXCIuL0d1aVV0aWxzLmpzXCJcblxuZXhwb3J0IHR5cGUgQ2hlY2tib3hBdHRycyA9IHtcblx0bGFiZWw6IGxhenk8c3RyaW5nIHwgQ2hpbGRyZW4+XG5cdGNoZWNrZWQ6IGJvb2xlYW5cblx0b25DaGVja2VkOiAodmFsdWU6IGJvb2xlYW4pID0+IHVua25vd25cblx0Y2xhc3M/OiBzdHJpbmdcblx0aGVscExhYmVsPzogTWF5YmVUcmFuc2xhdGlvblxuXHRkaXNhYmxlZD86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIENoZWNrYm94IGltcGxlbWVudHMgQ29tcG9uZW50PENoZWNrYm94QXR0cnM+IHtcblx0cHJpdmF0ZSBmb2N1c2VkOiBib29sZWFuID0gZmFsc2Vcblx0cHJpdmF0ZSBfZG9tSW5wdXQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGxcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgY2hlY2tlZEljb24gPSBlbmNvZGVTVkcoQm9vdEljb25zU3ZnW0Jvb3RJY29ucy5DaGVja2JveFNlbGVjdGVkXSlcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgdW5jaGVja2VkSWNvbiA9IGVuY29kZVNWRyhCb290SWNvbnNTdmdbQm9vdEljb25zLkNoZWNrYm94XSlcblxuXHR2aWV3KHZub2RlOiBWbm9kZTxDaGVja2JveEF0dHJzPik6IENoaWxkcmVuIHtcblx0XHRjb25zdCBhID0gdm5vZGUuYXR0cnNcblx0XHRjb25zdCBoZWxwTGFiZWxUZXh0ID0gbGFuZy5nZXRUcmFuc2xhdGlvblRleHQoYS5oZWxwTGFiZWwgPyBhLmhlbHBMYWJlbCA6IFwiZW1wdHlTdHJpbmdfbXNnXCIpXG5cdFx0Y29uc3QgaGVscExhYmVsID0gYS5oZWxwTGFiZWwgPyBtKGBzbWFsbC5ibG9jay5jb250ZW50LWZnJHtDaGVja2JveC5nZXRCcmVha0NsYXNzKGhlbHBMYWJlbFRleHQpfWAsIGhlbHBMYWJlbFRleHQpIDogW11cblx0XHRjb25zdCB1c2VyQ2xhc3NlcyA9IGEuY2xhc3MgPT0gbnVsbCA/IFwiXCIgOiBcIiBcIiArIGEuY2xhc3Ncblx0XHRyZXR1cm4gbShcblx0XHRcdGAucHRgLFxuXHRcdFx0e1xuXHRcdFx0XHRcImFyaWEtZGlzYWJsZWRcIjogU3RyaW5nKGEuZGlzYWJsZWQpLFxuXHRcdFx0XHRjbGFzczogZ2V0T3BlcmF0aW5nQ2xhc3NlcyhhLmRpc2FibGVkLCBcImNsaWNrIGZsYXNoXCIpICsgdXNlckNsYXNzZXMsXG5cdFx0XHRcdG9uY2xpY2s6IChlOiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0aWYgKGUudGFyZ2V0ICE9PSB0aGlzLl9kb21JbnB1dCkge1xuXHRcdFx0XHRcdFx0dGhpcy50b2dnbGUoZSwgYSkgLy8gZXZlbnQgaXMgYnViYmxpbmcgaW4gSUUgYmVzaWRlcyB3ZSBpbnZva2UgZS5zdG9wUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHRtKFxuXHRcdFx0XHRgbGFiZWwke0NoZWNrYm94LmdldEJyZWFrQ2xhc3MoYS5sYWJlbCgpKX1gLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y2xhc3M6IGAke3RoaXMuZm9jdXNlZCA/IFwiY29udGVudC1hY2NlbnQtZmdcIiA6IFwiY29udGVudC1mZ1wifSAke2dldE9wZXJhdGluZ0NsYXNzZXMoYS5kaXNhYmxlZCwgXCJjbGlja1wiKX1gLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRbXG5cdFx0XHRcdFx0bShcImlucHV0W3R5cGU9Y2hlY2tib3hdLmljb24uY2hlY2tib3gtb3ZlcnJpZGVcIiwge1xuXHRcdFx0XHRcdFx0b25jcmVhdGU6ICh2bm9kZSkgPT4gKHRoaXMuX2RvbUlucHV0ID0gdm5vZGUuZG9tIGFzIEhUTUxFbGVtZW50KSxcblx0XHRcdFx0XHRcdG9uY2hhbmdlOiAoZTogRXZlbnQpID0+IHRoaXMudG9nZ2xlKGUsIGEpLFxuXHRcdFx0XHRcdFx0Y2hlY2tlZDogYS5jaGVja2VkLFxuXHRcdFx0XHRcdFx0b25mb2N1czogKCkgPT4gKHRoaXMuZm9jdXNlZCA9IHRydWUpLFxuXHRcdFx0XHRcdFx0b25ibHVyOiAoKSA9PiAodGhpcy5mb2N1c2VkID0gZmFsc2UpLFxuXHRcdFx0XHRcdFx0Y2xhc3M6IGdldE9wZXJhdGluZ0NsYXNzZXMoYS5kaXNhYmxlZCwgXCJjbGlja1wiKSxcblx0XHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRcdGN1cnNvcjogYS5kaXNhYmxlZCA/IFwiZGVmYXVsdFwiIDogXCJwb2ludGVyXCIsXG5cdFx0XHRcdFx0XHRcdFwiYmFja2dyb3VuZC1jb2xvclwiOiB0aGVtZS5jb250ZW50X2FjY2VudCxcblx0XHRcdFx0XHRcdFx0XCJtYXNrLWltYWdlXCI6IGB1cmwoXCIke2EuY2hlY2tlZCA/IENoZWNrYm94LmNoZWNrZWRJY29uIDogQ2hlY2tib3gudW5jaGVja2VkSWNvbn1cIilgLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGRpc2FibGVkOiBhLmRpc2FibGVkLFxuXHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdGEubGFiZWwoKSxcblx0XHRcdFx0XHRoZWxwTGFiZWwsXG5cdFx0XHRcdF0sXG5cdFx0XHQpLFxuXHRcdClcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGdldEJyZWFrQ2xhc3ModGV4dDogc3RyaW5nIHwgQ2hpbGRyZW4pOiBzdHJpbmcge1xuXHRcdGlmICh0eXBlb2YgdGV4dCAhPT0gXCJzdHJpbmdcIiB8fCB0ZXh0LmluY2x1ZGVzKFwiIFwiKSkge1xuXHRcdFx0cmV0dXJuIFwiLmJyZWFrLXdvcmRcIlxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gXCIuYnJlYWstYWxsXCJcblx0XHR9XG5cdH1cblxuXHR0b2dnbGUoZXZlbnQ6IEV2ZW50LCBhdHRyczogQ2hlY2tib3hBdHRycykge1xuXHRcdGlmICghYXR0cnMuZGlzYWJsZWQpIHtcblx0XHRcdGF0dHJzLm9uQ2hlY2tlZCghYXR0cnMuY2hlY2tlZClcblx0XHR9XG5cblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuXG5cdFx0aWYgKHRoaXMuX2RvbUlucHV0KSB7XG5cdFx0XHR0aGlzLl9kb21JbnB1dC5mb2N1cygpXG5cdFx0fVxuXHR9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7SUFpQmEsV0FBTixNQUFNLFNBQTZDO0NBQ3pELEFBQVEsVUFBbUI7Q0FDM0IsQUFBUSxZQUFnQztDQUN4QyxPQUF3QixjQUFjLFVBQVUsYUFBYSxVQUFVLGtCQUFrQjtDQUN6RixPQUF3QixnQkFBZ0IsVUFBVSxhQUFhLFVBQVUsVUFBVTtDQUVuRixLQUFLQSxPQUF1QztFQUMzQyxNQUFNLElBQUksTUFBTTtFQUNoQixNQUFNLGdCQUFnQixLQUFLLG1CQUFtQixFQUFFLFlBQVksRUFBRSxZQUFZLGtCQUFrQjtFQUM1RixNQUFNLFlBQVksRUFBRSxZQUFZLGlCQUFHLHdCQUF3QixTQUFTLGNBQWMsY0FBYyxDQUFDLEdBQUcsY0FBYyxHQUFHLENBQUU7RUFDdkgsTUFBTSxjQUFjLEVBQUUsU0FBUyxPQUFPLEtBQUssTUFBTSxFQUFFO0FBQ25ELFNBQU8saUJBQ0wsTUFDRDtHQUNDLGlCQUFpQixPQUFPLEVBQUUsU0FBUztHQUNuQyxPQUFPLG9CQUFvQixFQUFFLFVBQVUsY0FBYyxHQUFHO0dBQ3hELFNBQVMsQ0FBQ0MsTUFBa0I7QUFDM0IsUUFBSSxFQUFFLFdBQVcsS0FBSyxVQUNyQixNQUFLLE9BQU8sR0FBRyxFQUFFO0dBRWxCO0VBQ0QsR0FDRCxpQkFDRSxPQUFPLFNBQVMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEdBQzFDLEVBQ0MsUUFBUSxFQUFFLEtBQUssVUFBVSxzQkFBc0IsYUFBYSxHQUFHLG9CQUFvQixFQUFFLFVBQVUsUUFBUSxDQUFDLEVBQ3hHLEdBQ0Q7R0FDQyxnQkFBRSwrQ0FBK0M7SUFDaEQsVUFBVSxDQUFDQyxZQUFXLEtBQUssWUFBWUEsUUFBTTtJQUM3QyxVQUFVLENBQUNDLE1BQWEsS0FBSyxPQUFPLEdBQUcsRUFBRTtJQUN6QyxTQUFTLEVBQUU7SUFDWCxTQUFTLE1BQU8sS0FBSyxVQUFVO0lBQy9CLFFBQVEsTUFBTyxLQUFLLFVBQVU7SUFDOUIsT0FBTyxvQkFBb0IsRUFBRSxVQUFVLFFBQVE7SUFDL0MsT0FBTztLQUNOLFFBQVEsRUFBRSxXQUFXLFlBQVk7S0FDakMsb0JBQW9CLE1BQU07S0FDMUIsZUFBZSxPQUFPLEVBQUUsVUFBVSxTQUFTLGNBQWMsU0FBUyxjQUFjO0lBQ2hGO0lBQ0QsVUFBVSxFQUFFO0dBQ1osRUFBQztHQUNGLEVBQUUsT0FBTztHQUNUO0VBQ0EsRUFDRCxDQUNEO0NBQ0Q7Q0FFRCxPQUFlLGNBQWNDLE1BQWlDO0FBQzdELGFBQVcsU0FBUyxZQUFZLEtBQUssU0FBUyxJQUFJLENBQ2pELFFBQU87SUFFUCxRQUFPO0NBRVI7Q0FFRCxPQUFPQyxPQUFjQyxPQUFzQjtBQUMxQyxPQUFLLE1BQU0sU0FDVixPQUFNLFdBQVcsTUFBTSxRQUFRO0FBR2hDLFFBQU0saUJBQWlCO0FBRXZCLE1BQUksS0FBSyxVQUNSLE1BQUssVUFBVSxPQUFPO0NBRXZCO0FBQ0QifQ==