import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { stringToBase64 } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import "./theme-chunk.js";
import "./TutanotaConstants-chunk.js";
import "./size-chunk.js";
import { ButtonType } from "./Button-chunk.js";
import { SecondFactorImage } from "./Icons-chunk.js";
import { DialogHeaderBar } from "./DialogHeaderBar-chunk.js";
import { progressIcon } from "./Icon-chunk.js";

//#region src/common/login/MobileWebauthnView.ts
var MobileWebauthnView = class {
	oncreate({ attrs }) {
		if (attrs.args["action"] === "sign") this.authenticate(attrs);
else if (attrs.args["action"] === "register") this.register(attrs);
else throw new Error("Not implemented");
	}
	view({ attrs }) {
		const headerBarAttrs = {
			left: [{
				label: "cancel_action",
				click: () => window.close(),
				type: ButtonType.Secondary
			}],
			right: [],
			middle: "u2fSecurityKey_label"
		};
		return mithril_default(".mt.flex.col.flex-center.center", { style: { margin: "0 auto" } }, [mithril_default(".flex.col.justify-center", [
			mithril_default(DialogHeaderBar, headerBarAttrs),
			mithril_default(".flex-center.mt-s", mithril_default("img", { src: SecondFactorImage })),
			mithril_default(".mt.flex.col", [mithril_default(".flex.justify-center", [mithril_default(".mr-s", progressIcon()), mithril_default("", lang.get("waitingForU2f_msg"))])])
		])]);
	}
	async getParams(attrs) {
		if (!await attrs.browserWebauthn.isSupported()) throw new Error("Webauthn not supported?");
		const challenge = attrs.args["challenge"];
		if (typeof challenge !== "string") throw new Error("Challenge is not passed");
		const cbUrlTemplate = attrs.args["cbUrl"];
		if (typeof cbUrlTemplate !== "string") throw new Error("cbUrl is not passed");
		return {
			challenge,
			cbUrlTemplate
		};
	}
	async sendSuccess(value, cbUrlTemplate) {
		await this.sendResultObject({
			type: "success",
			value
		}, cbUrlTemplate);
	}
	async sendFailure(e, cbUrlTemplate) {
		await this.sendResultObject({
			type: "error",
			name: e.name,
			stack: e.stack
		}, cbUrlTemplate);
	}
	async sendResultObject(result, cbUrlTemplate) {
		const { encodeValueForNative } = await import("./NativeLineProtocol2-chunk.js");
		const serializedResult = encodeValueForNative(result);
		const base64Result = stringToBase64(serializedResult);
		const cbUrl = cbUrlTemplate.replace("{result}", base64Result);
		window.open(cbUrl, "_self");
	}
	async authenticate(attrs) {
		const { challenge, cbUrlTemplate } = await this.getParams(attrs);
		try {
			const { decodeValueFromNative } = await import("./NativeLineProtocol2-chunk.js");
			const rawChallengeObj = decodeValueFromNative(challenge);
			const signResult = await attrs.browserWebauthn.sign({
				challenge: rawChallengeObj.challenge,
				domain: rawChallengeObj.domain,
				keys: rawChallengeObj.keys
			});
			await this.sendSuccess(signResult, cbUrlTemplate);
		} catch (e) {
			await this.sendFailure(e, cbUrlTemplate);
		}
	}
	async register(attrs) {
		const { challenge, cbUrlTemplate } = await this.getParams(attrs);
		try {
			const { decodeValueFromNative } = await import("./NativeLineProtocol2-chunk.js");
			const rawChallengeObj = decodeValueFromNative(challenge);
			const registrationResult = await attrs.browserWebauthn.register({
				challenge: rawChallengeObj.challenge,
				domain: rawChallengeObj.domain,
				name: rawChallengeObj.name,
				displayName: rawChallengeObj.displayName,
				userId: rawChallengeObj.userId
			});
			await this.sendSuccess(registrationResult, cbUrlTemplate);
		} catch (e) {
			await this.sendFailure(e, cbUrlTemplate);
		}
	}
};

//#endregion
export { MobileWebauthnView };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,