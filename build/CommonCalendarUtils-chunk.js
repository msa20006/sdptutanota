import { DAY_IN_MILLIS } from "./dist2-chunk.js";
import { stringToCustomId } from "./EntityUtils-chunk.js";

//#region src/common/api/common/utils/CommonCalendarUtils.ts
const DAYS_SHIFTED_MS = 15 * DAY_IN_MILLIS;
function isAllDayEvent({ startTime, endTime }) {
	return isAllDayEventByTimes(startTime, endTime);
}
function isAllDayEventByTimes(startTime, endTime) {
	return startTime.getUTCHours() === 0 && startTime.getUTCMinutes() === 0 && startTime.getUTCSeconds() === 0 && endTime.getUTCHours() === 0 && endTime.getUTCMinutes() === 0 && endTime.getUTCSeconds() === 0;
}
function getAllDayDateUTC(localDate) {
	return new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), 0, 0, 0, 0));
}
function getAllDayDateLocal(utcDate) {
	return new Date(utcDate.getUTCFullYear(), utcDate.getUTCMonth(), utcDate.getUTCDate());
}
function generateEventElementId(timestamp) {
	const randomDay = Math.floor(Math.random() * DAYS_SHIFTED_MS) * 2;
	return createEventElementId(timestamp, randomDay - DAYS_SHIFTED_MS);
}
function generateLocalEventElementId(timestamp, identifier) {
	return stringToCustomId(`${timestamp}${identifier}`);
}
function createEventElementId(timestamp, shiftDays) {
	return stringToCustomId(String(timestamp + shiftDays));
}
function geEventElementMaxId(timestamp) {
	return createEventElementId(timestamp, DAYS_SHIFTED_MS);
}
function getEventElementMinId(timestamp) {
	return createEventElementId(timestamp, -DAYS_SHIFTED_MS);
}
function cleanMailAddress(address) {
	return address.trim().toLowerCase();
}
function findAttendeeInAddresses(attendees, addresses) {
	const lowerCaseAddresses = addresses.filter(Boolean).map(cleanMailAddress);
	return attendees.find((a) => a.address.address != null && lowerCaseAddresses.includes(cleanMailAddress(a.address.address))) ?? null;
}
function findRecipientWithAddress(recipients, address) {
	const cleanAddress = cleanMailAddress(address);
	return recipients.find((r) => cleanMailAddress(r.address) === cleanAddress) ?? null;
}
function getNextHalfHour() {
	let date = new Date();
	return setNextHalfHour(date);
}
function setNextHalfHour(date) {
	const timeNow = new Date();
	if (timeNow.getMinutes() > 30) date.setHours(timeNow.getHours() + 1, 0);
else date.setHours(timeNow.getHours(), 30);
	return date;
}
function getEventWithDefaultTimes(startDate = getNextHalfHour()) {
	let endDate = new Date(startDate);
	return {
		startTime: new Date(startDate),
		endTime: new Date(endDate.setMinutes(endDate.getMinutes() + 30))
	};
}
function serializeAlarmInterval(interval) {
	return `${interval.value}${interval.unit}`;
}
let CalendarViewType = function(CalendarViewType$1) {
	CalendarViewType$1["DAY"] = "day";
	CalendarViewType$1["WEEK"] = "week";
	CalendarViewType$1["MONTH"] = "month";
	CalendarViewType$1["AGENDA"] = "agenda";
	return CalendarViewType$1;
}({});

//#endregion
export { CalendarViewType, DAYS_SHIFTED_MS, cleanMailAddress, createEventElementId, findAttendeeInAddresses, findRecipientWithAddress, geEventElementMaxId, generateEventElementId, generateLocalEventElementId, getAllDayDateLocal, getAllDayDateUTC, getEventElementMinId, getEventWithDefaultTimes, getNextHalfHour, isAllDayEvent, isAllDayEventByTimes, serializeAlarmInterval, setNextHalfHour };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbW9uQ2FsZW5kYXJVdGlscy1jaHVuay5qcyIsIm5hbWVzIjpbInN0YXJ0VGltZTogRGF0ZSIsImVuZFRpbWU6IERhdGUiLCJsb2NhbERhdGU6IERhdGUiLCJ1dGNEYXRlOiBEYXRlIiwidGltZXN0YW1wOiBudW1iZXIiLCJpZGVudGlmaWVyOiBzdHJpbmciLCJzaGlmdERheXM6IG51bWJlciIsImFkZHJlc3M6IHN0cmluZyIsImF0dGVuZGVlczogUmVhZG9ubHlBcnJheTxUPiIsImFkZHJlc3NlczogUmVhZG9ubHlBcnJheTxzdHJpbmc+IiwicmVjaXBpZW50czogUmVhZG9ubHlBcnJheTxUPiIsImRhdGU6IERhdGUiLCJzdGFydERhdGU6IERhdGUiLCJpbnRlcnZhbDogQWxhcm1JbnRlcnZhbCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vYXBpL2NvbW1vbi91dGlscy9Db21tb25DYWxlbmRhclV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERBWV9JTl9NSUxMSVMgfSBmcm9tIFwiQHR1dGFvL3R1dGFub3RhLXV0aWxzXCJcbmltcG9ydCB0eXBlIHsgQ2FsZW5kYXJFdmVudCB9IGZyb20gXCIuLi8uLi9lbnRpdGllcy90dXRhbm90YS9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBFbmNyeXB0ZWRNYWlsQWRkcmVzcyB9IGZyb20gXCIuLi8uLi9lbnRpdGllcy90dXRhbm90YS9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBzdHJpbmdUb0N1c3RvbUlkIH0gZnJvbSBcIi4vRW50aXR5VXRpbHNcIlxuaW1wb3J0IHR5cGUgeyBBbGFybUludGVydmFsIH0gZnJvbSBcIi4uLy4uLy4uL2NhbGVuZGFyL2RhdGUvQ2FsZW5kYXJVdGlscy5qc1wiXG5cbmV4cG9ydCB0eXBlIENhbGVuZGFyRXZlbnRUaW1lcyA9IFBpY2s8Q2FsZW5kYXJFdmVudCwgXCJzdGFydFRpbWVcIiB8IFwiZW5kVGltZVwiPlxuXG4vKipcbiAqIHRoZSB0aW1lIGluIG1zIHRoYXQgZWxlbWVudCBpZHMgZm9yIGNhbGVuZGFyIGV2ZW50cyBhbmQgYWxhcm1zICBnZXQgcmFuZG9taXplZCBieVxuICovXG5leHBvcnQgY29uc3QgREFZU19TSElGVEVEX01TID0gMTUgKiBEQVlfSU5fTUlMTElTXG5cbi8qXG4gKiBjb252ZW5pZW5jZSB3cmFwcGVyIGZvciBpc0FsbERheUV2ZW50QnlUaW1lc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBbGxEYXlFdmVudCh7IHN0YXJ0VGltZSwgZW5kVGltZSB9OiBDYWxlbmRhckV2ZW50VGltZXMpOiBib29sZWFuIHtcblx0cmV0dXJuIGlzQWxsRGF5RXZlbnRCeVRpbWVzKHN0YXJ0VGltZSwgZW5kVGltZSlcbn1cblxuLyoqXG4gKiBkZXRlcm1pbmUgaWYgYW4gZXZlbnQgd2l0aCB0aGUgZ2l2ZW4gc3RhcnQgYW5kIGVuZCB0aW1lcyB3b3VsZCBiZSBhbiBhbGwtZGF5IGV2ZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FsbERheUV2ZW50QnlUaW1lcyhzdGFydFRpbWU6IERhdGUsIGVuZFRpbWU6IERhdGUpOiBib29sZWFuIHtcblx0cmV0dXJuIChcblx0XHRzdGFydFRpbWUuZ2V0VVRDSG91cnMoKSA9PT0gMCAmJlxuXHRcdHN0YXJ0VGltZS5nZXRVVENNaW51dGVzKCkgPT09IDAgJiZcblx0XHRzdGFydFRpbWUuZ2V0VVRDU2Vjb25kcygpID09PSAwICYmXG5cdFx0ZW5kVGltZS5nZXRVVENIb3VycygpID09PSAwICYmXG5cdFx0ZW5kVGltZS5nZXRVVENNaW51dGVzKCkgPT09IDAgJiZcblx0XHRlbmRUaW1lLmdldFVUQ1NlY29uZHMoKSA9PT0gMFxuXHQpXG59XG5cbi8qKlxuICogQHBhcmFtIGxvY2FsRGF0ZVxuICogQHJldHVybnMge0RhdGV9IGEgRGF0ZSB3aXRoIGEgdW5peCB0aW1lc3RhbXAgY29ycmVzcG9uZGluZyB0byAwMDowMCBVVEMgZm9yIGxvY2FsRGF0ZSdzIERheSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxEYXlEYXRlVVRDKGxvY2FsRGF0ZTogRGF0ZSk6IERhdGUge1xuXHRyZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMobG9jYWxEYXRlLmdldEZ1bGxZZWFyKCksIGxvY2FsRGF0ZS5nZXRNb250aCgpLCBsb2NhbERhdGUuZ2V0RGF0ZSgpLCAwLCAwLCAwLCAwKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0gdXRjRGF0ZSBhIERhdGUgd2l0aCBhIHVuaXggdGltZXN0YW1wIGNvcnJlc3BvbmRpbmcgdG8gMDA6MDAgVVRDIGZvciBhIGdpdmVuIERheVxuICogQHJldHVybnMge0RhdGV9IGEgRGF0ZSB3aXRoIGEgdW5peCB0aW1lc3RhbXAgY29ycmVzcG9uZGluZyB0byAwMDowMCBmb3IgdGhhdCBkYXkgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsRGF5RGF0ZUxvY2FsKHV0Y0RhdGU6IERhdGUpOiBEYXRlIHtcblx0cmV0dXJuIG5ldyBEYXRlKHV0Y0RhdGUuZ2V0VVRDRnVsbFllYXIoKSwgdXRjRGF0ZS5nZXRVVENNb250aCgpLCB1dGNEYXRlLmdldFVUQ0RhdGUoKSlcbn1cblxuLyoqXG4gKiBnZW5lcmF0ZSBhIHNlbWktcmFuZG9taXplZCBlbGVtZW50IGlkIGZvciBhIGNhbGVuZGFyIGV2ZW50IG9yIGFuIGFsYXJtXG4gKiBAcGFyYW0gdGltZXN0YW1wIHRoZSBzdGFydCB0aW1lIG9mIHRoZSBldmVudCBvciB0aGUgY3JlYXRpb24gdGltZSBvZiB0aGUgYWxhcm1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlRXZlbnRFbGVtZW50SWQodGltZXN0YW1wOiBudW1iZXIpOiBzdHJpbmcge1xuXHQvLyB0aGUgaWQgaXMgYmFzZWQgb24gZWl0aGVyIHRoZSBldmVudCBzdGFydCB0aW1lIG9yIHRoZSBhbGFybSBjcmVhdGlvbiB0aW1lXG5cdC8vIHdlIGFkZCBhIHJhbmRvbSBzaGlmdCBiZXR3ZWVuIC1EQVlTX1NISUZURURfTVMgYW5kICtEQVlTX1NISUZURURfTVMgdG8gdGhlIGV2ZW50XG5cdC8vIGlkIHRvIHByZXZlbnQgdGhlIHNlcnZlciBmcm9tIGtub3dpbmcgdGhlIGV4YWN0IHRpbWUgYnV0IHN0aWxsIGJlaW5nIGFibGUgdG9cblx0Ly8gYXBwcm94aW1hdGVseSBzb3J0IHRoZW0uXG5cdGNvbnN0IHJhbmRvbURheSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIERBWVNfU0hJRlRFRF9NUykgKiAyXG5cdHJldHVybiBjcmVhdGVFdmVudEVsZW1lbnRJZCh0aW1lc3RhbXAsIHJhbmRvbURheSAtIERBWVNfU0hJRlRFRF9NUylcbn1cblxuLyoqXG4gKiBVU0UgVEhJUyBPTkxZIFdJVEggTE9DQUwgRVZFTlRTXG4gKiBnZW5lcmF0ZSBhbiBlbGVtZW50IGlkIGZvciBhIGxvY2FsIGNhbGVuZGFyIGV2ZW50XG4gKiBAcGFyYW0gdGltZXN0YW1wIHRoZSBzdGFydCB0aW1lIG9mIHRoZSBldmVudCBvciB0aGUgY3JlYXRpb24gdGltZSBvZiB0aGUgYWxhcm1cbiAqIEBwYXJhbSBpZGVudGlmaWVyIGlkZW50aWZpZXIgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGV2ZW50cyBvY2N1cnJpbmcgYXQgc2FtZSB0aW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUxvY2FsRXZlbnRFbGVtZW50SWQodGltZXN0YW1wOiBudW1iZXIsIGlkZW50aWZpZXI6IHN0cmluZyk6IHN0cmluZyB7XG5cdC8vIFdlIGRvbid0IGhhdmUgdG8gc2hpZnQgdGhlIGRheXMgYmVjYXVzZSB0aGUgZXZlbnQgbmV2ZXIgbGVhdmVzIHRoZSBjbGllbnRcblx0cmV0dXJuIHN0cmluZ1RvQ3VzdG9tSWQoYCR7dGltZXN0YW1wfSR7aWRlbnRpZmllcn1gKVxufVxuXG4vKipcbiAqIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNS4xLyNzZWMtMTUuOS4xLjFcbiAqICogRUNNQVNjcmlwdCBOdW1iZXIgdmFsdWVzIGNhbiByZXByZXNlbnQgYWxsIGludGVnZXJzIGZyb20g4oCTOSwwMDcsMTk5LDI1NCw3NDAsOTkyIHRvIDksMDA3LDE5OSwyNTQsNzQwLDk5MlxuICogKiBUaGUgYWN0dWFsIHJhbmdlIG9mIHRpbWVzIHN1cHBvcnRlZCBieSBFQ01BU2NyaXB0IERhdGUgb2JqZWN0cyBpcyBzbGlnaHRseSBzbWFsbGVyOiBhIHJhbmdlIG9mICstOCw2NDAsMDAwLDAwMCwwMDAsMDAwIG1pbGxpc2Vjb25kc1xuICogLT4gdGhpcyBtYWtlcyB0aGUgZWxlbWVudCBJZCBhIHN0cmluZyBvZiBiZXR3ZWVuIDEgYW5kIDE3IG51bWJlciBjaGFyYWN0ZXJzICh0aGUgc2hpZnREYXlzIGFyZSBuZWdsaWdpYmxlKVxuICpcbiAqIGV4cG9ydGVkIGZvciB0ZXN0aW5nXG4gKiBAcGFyYW0gdGltZXN0YW1wXG4gKiBAcGFyYW0gc2hpZnREYXlzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFdmVudEVsZW1lbnRJZCh0aW1lc3RhbXA6IG51bWJlciwgc2hpZnREYXlzOiBudW1iZXIpOiBzdHJpbmcge1xuXHRyZXR1cm4gc3RyaW5nVG9DdXN0b21JZChTdHJpbmcodGltZXN0YW1wICsgc2hpZnREYXlzKSlcbn1cblxuLyoqXG4gKiB0aGUgbWF4aW11bSBpZCBhbiBldmVudCB3aXRoIGEgZ2l2ZW4gc3RhcnQgdGltZSBjb3VsZCBoYXZlIGJhc2VkIG9uIGl0c1xuICogcmFuZG9taXphdGlvbi5cbiAqIEBwYXJhbSB0aW1lc3RhbXBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlRXZlbnRFbGVtZW50TWF4SWQodGltZXN0YW1wOiBudW1iZXIpOiBzdHJpbmcge1xuXHRyZXR1cm4gY3JlYXRlRXZlbnRFbGVtZW50SWQodGltZXN0YW1wLCBEQVlTX1NISUZURURfTVMpXG59XG5cbi8qKlxuICogdGhlIG1pbmltdW0gYW4gZXZlbnQgd2l0aCBhIGdpdmVuIHN0YXJ0IHRpbWUgY291bGQgaGF2ZSBiYXNlZCBvbiBpdHNcbiAqIHJhbmRvbWl6YXRpb24uXG4gKiBAcGFyYW0gdGltZXN0YW1wXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudEVsZW1lbnRNaW5JZCh0aW1lc3RhbXA6IG51bWJlcik6IHN0cmluZyB7XG5cdHJldHVybiBjcmVhdGVFdmVudEVsZW1lbnRJZCh0aW1lc3RhbXAsIC1EQVlTX1NISUZURURfTVMpXG59XG5cbi8qKlxuICogcmV0dXJuIGEgY2xlYW5lZCBhbmQgY29tcGFyYWJsZSB2ZXJzaW9uIG9mIGEgbWFpbCBhZGRyZXNzIHdpdGhvdXQgbGVhZGluZy90cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHVwcGVyY2FzZSBjaGFyYWN0ZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYW5NYWlsQWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRyZXR1cm4gYWRkcmVzcy50cmltKCkudG9Mb3dlckNhc2UoKVxufVxuXG4vKipcbiAqIGdldCB0aGUgZmlyc3QgYXR0ZW5kZWUgZnJvbSB0aGUgbGlzdCBvZiBhdHRlbmRlZXMvZ3Vlc3RzIHRoYXQgY29ycmVzcG9uZHMgdG8gb25lIG9mIHRoZSBnaXZlbiByZWNpcGllbnQgYWRkcmVzc2VzLCBpZiB0aGVyZSBpcyBvbmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRBdHRlbmRlZUluQWRkcmVzc2VzPFQgZXh0ZW5kcyB7IGFkZHJlc3M6IEVuY3J5cHRlZE1haWxBZGRyZXNzIH0+KGF0dGVuZGVlczogUmVhZG9ubHlBcnJheTxUPiwgYWRkcmVzc2VzOiBSZWFkb25seUFycmF5PHN0cmluZz4pOiBUIHwgbnVsbCB7XG5cdC8vIHRoZSBmaWx0ZXJzIGFyZSBuZWNlc3NhcnkgYmVjYXVzZSBvZiAjNTE0N1xuXHQvLyB3ZSBtYXkgZ2V0IHBhc3NlZCBhZGRyZXNzZXMgYW5kIGF0dGVuZGVlcyB0aGF0IGNvdWxkIG5vdCBiZSBkZWNyeXB0ZWQgYW5kIGRvbid0IGhhdmUgYWRkcmVzc2VzLlxuXHRjb25zdCBsb3dlckNhc2VBZGRyZXNzZXMgPSBhZGRyZXNzZXMuZmlsdGVyKEJvb2xlYW4pLm1hcChjbGVhbk1haWxBZGRyZXNzKVxuXHRyZXR1cm4gYXR0ZW5kZWVzLmZpbmQoKGEpID0+IGEuYWRkcmVzcy5hZGRyZXNzICE9IG51bGwgJiYgbG93ZXJDYXNlQWRkcmVzc2VzLmluY2x1ZGVzKGNsZWFuTWFpbEFkZHJlc3MoYS5hZGRyZXNzLmFkZHJlc3MpKSkgPz8gbnVsbFxufVxuXG4vKipcbiAqIGZpbmQgdGhlIGZpcnN0IG9mIGEgbGlzdCBvZiByZWNpcGllbnRzIHRoYXQgaGF2ZSB0aGUgZ2l2ZW4gYWRkcmVzcyBhc3NpZ25lZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZFJlY2lwaWVudFdpdGhBZGRyZXNzPFQgZXh0ZW5kcyB7IGFkZHJlc3M6IHN0cmluZyB9PihyZWNpcGllbnRzOiBSZWFkb25seUFycmF5PFQ+LCBhZGRyZXNzOiBzdHJpbmcpOiBUIHwgbnVsbCB7XG5cdGNvbnN0IGNsZWFuQWRkcmVzcyA9IGNsZWFuTWFpbEFkZHJlc3MoYWRkcmVzcylcblx0cmV0dXJuIHJlY2lwaWVudHMuZmluZCgocikgPT4gY2xlYW5NYWlsQWRkcmVzcyhyLmFkZHJlc3MpID09PSBjbGVhbkFkZHJlc3MpID8/IG51bGxcbn1cblxuLyoqXG4gKiBnZXQgYSBkYXRlIHdpdGggdGhlIHRpbWUgc2V0IHRvIHRoZSBzdGFydCBvZiB0aGUgbmV4dCBmdWxsIGhhbGYgaG91ciBmcm9tIHRoZSB0aW1lIHRoaXMgaXMgY2FsbGVkIGF0XG4gKiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRIYWxmSG91cigpOiBEYXRlIHtcblx0bGV0IGRhdGU6IERhdGUgPSBuZXcgRGF0ZSgpXG5cblx0cmV0dXJuIHNldE5leHRIYWxmSG91cihkYXRlKVxufVxuXG4vKipcbiAqIHNldCB0aGUgZ2l2ZW4gZGF0ZSB0byB0aGUgc3RhcnQgb2YgdGhlIG5leHQgZnVsbCBoYWxmIGhvdXIgZnJvbSB0aGUgdGltZSB0aGlzIGlzIGNhbGxlZCBhdFxuICogKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXROZXh0SGFsZkhvdXIoZGF0ZTogRGF0ZSk6IERhdGUge1xuXHRjb25zdCB0aW1lTm93ID0gbmV3IERhdGUoKVxuXG5cdGlmICh0aW1lTm93LmdldE1pbnV0ZXMoKSA+IDMwKSB7XG5cdFx0ZGF0ZS5zZXRIb3Vycyh0aW1lTm93LmdldEhvdXJzKCkgKyAxLCAwKVxuXHR9IGVsc2Uge1xuXHRcdGRhdGUuc2V0SG91cnModGltZU5vdy5nZXRIb3VycygpLCAzMClcblx0fVxuXG5cdHJldHVybiBkYXRlXG59XG5cbi8qKlxuICogZ2V0IGEgcGFydGlhbCBjYWxlbmRhciBldmVudCB3aXRoIHN0YXJ0IHRpbWUgc2V0IHRvIHRoZSBwYXNzZWQgdmFsdWVcbiAqICh5ZWFyLCBkYXksIGhvdXJzIGFuZCBtaW51dGVzLiBzZWNvbmRzIGFuZCBtaWxsaXNlY29uZHMgYXJlIHplcm9lZC4pXG4gKiBhbmQgYW4gZW5kIHRpbWUgMzAgbWludXRlcyBsYXRlciB0aGFuIHRoYXQuXG4gKiBAcGFyYW0gc3RhcnREYXRlIHRoZSBzdGFydCB0aW1lIHRvIHVzZSBmb3IgdGhlIGV2ZW50IChkZWZhdWx0cyB0byB0aGUgbmV4dCBmdWxsIGhhbGYgaG91cilcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEV2ZW50V2l0aERlZmF1bHRUaW1lcyhzdGFydERhdGU6IERhdGUgPSBnZXROZXh0SGFsZkhvdXIoKSk6IENhbGVuZGFyRXZlbnRUaW1lcyB7XG5cdGxldCBlbmREYXRlID0gbmV3IERhdGUoc3RhcnREYXRlKVxuXHRyZXR1cm4ge1xuXHRcdHN0YXJ0VGltZTogbmV3IERhdGUoc3RhcnREYXRlKSxcblx0XHRlbmRUaW1lOiBuZXcgRGF0ZShlbmREYXRlLnNldE1pbnV0ZXMoZW5kRGF0ZS5nZXRNaW51dGVzKCkgKyAzMCkpLFxuXHR9XG59XG5cbi8qKlxuICogQ29udmVydHMgcnVudGltZSByZXByZXNlbnRhdGlvbiBvZiBhbiBhbGFybSBpbnRvIGEgZGIgb25lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplQWxhcm1JbnRlcnZhbChpbnRlcnZhbDogQWxhcm1JbnRlcnZhbCk6IHN0cmluZyB7XG5cdHJldHVybiBgJHtpbnRlcnZhbC52YWx1ZX0ke2ludGVydmFsLnVuaXR9YFxufVxuXG5leHBvcnQgZW51bSBDYWxlbmRhclZpZXdUeXBlIHtcblx0REFZID0gXCJkYXlcIixcblx0V0VFSyA9IFwid2Vla1wiLFxuXHRNT05USCA9IFwibW9udGhcIixcblx0QUdFTkRBID0gXCJhZ2VuZGFcIixcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7OztNQVdhLGtCQUFrQixLQUFLO0FBSzdCLFNBQVMsY0FBYyxFQUFFLFdBQVcsU0FBNkIsRUFBVztBQUNsRixRQUFPLHFCQUFxQixXQUFXLFFBQVE7QUFDL0M7QUFLTSxTQUFTLHFCQUFxQkEsV0FBaUJDLFNBQXdCO0FBQzdFLFFBQ0MsVUFBVSxhQUFhLEtBQUssS0FDNUIsVUFBVSxlQUFlLEtBQUssS0FDOUIsVUFBVSxlQUFlLEtBQUssS0FDOUIsUUFBUSxhQUFhLEtBQUssS0FDMUIsUUFBUSxlQUFlLEtBQUssS0FDNUIsUUFBUSxlQUFlLEtBQUs7QUFFN0I7QUFNTSxTQUFTLGlCQUFpQkMsV0FBdUI7QUFDdkQsUUFBTyxJQUFJLEtBQUssS0FBSyxJQUFJLFVBQVUsYUFBYSxFQUFFLFVBQVUsVUFBVSxFQUFFLFVBQVUsU0FBUyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUU7QUFDeEc7QUFNTSxTQUFTLG1CQUFtQkMsU0FBcUI7QUFDdkQsUUFBTyxJQUFJLEtBQUssUUFBUSxnQkFBZ0IsRUFBRSxRQUFRLGFBQWEsRUFBRSxRQUFRLFlBQVk7QUFDckY7QUFNTSxTQUFTLHVCQUF1QkMsV0FBMkI7Q0FLakUsTUFBTSxZQUFZLEtBQUssTUFBTSxLQUFLLFFBQVEsR0FBRyxnQkFBZ0IsR0FBRztBQUNoRSxRQUFPLHFCQUFxQixXQUFXLFlBQVksZ0JBQWdCO0FBQ25FO0FBUU0sU0FBUyw0QkFBNEJBLFdBQW1CQyxZQUE0QjtBQUUxRixRQUFPLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7QUFDcEQ7QUFZTSxTQUFTLHFCQUFxQkQsV0FBbUJFLFdBQTJCO0FBQ2xGLFFBQU8saUJBQWlCLE9BQU8sWUFBWSxVQUFVLENBQUM7QUFDdEQ7QUFPTSxTQUFTLG9CQUFvQkYsV0FBMkI7QUFDOUQsUUFBTyxxQkFBcUIsV0FBVyxnQkFBZ0I7QUFDdkQ7QUFPTSxTQUFTLHFCQUFxQkEsV0FBMkI7QUFDL0QsUUFBTyxxQkFBcUIsWUFBWSxnQkFBZ0I7QUFDeEQ7QUFLTSxTQUFTLGlCQUFpQkcsU0FBeUI7QUFDekQsUUFBTyxRQUFRLE1BQU0sQ0FBQyxhQUFhO0FBQ25DO0FBS00sU0FBUyx3QkFBcUVDLFdBQTZCQyxXQUE0QztDQUc3SixNQUFNLHFCQUFxQixVQUFVLE9BQU8sUUFBUSxDQUFDLElBQUksaUJBQWlCO0FBQzFFLFFBQU8sVUFBVSxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsV0FBVyxRQUFRLG1CQUFtQixTQUFTLGlCQUFpQixFQUFFLFFBQVEsUUFBUSxDQUFDLENBQUMsSUFBSTtBQUMvSDtBQUtNLFNBQVMseUJBQXdEQyxZQUE4QkgsU0FBMkI7Q0FDaEksTUFBTSxlQUFlLGlCQUFpQixRQUFRO0FBQzlDLFFBQU8sV0FBVyxLQUFLLENBQUMsTUFBTSxpQkFBaUIsRUFBRSxRQUFRLEtBQUssYUFBYSxJQUFJO0FBQy9FO0FBS00sU0FBUyxrQkFBd0I7Q0FDdkMsSUFBSUksT0FBYSxJQUFJO0FBRXJCLFFBQU8sZ0JBQWdCLEtBQUs7QUFDNUI7QUFLTSxTQUFTLGdCQUFnQkEsTUFBa0I7Q0FDakQsTUFBTSxVQUFVLElBQUk7QUFFcEIsS0FBSSxRQUFRLFlBQVksR0FBRyxHQUMxQixNQUFLLFNBQVMsUUFBUSxVQUFVLEdBQUcsR0FBRyxFQUFFO0lBRXhDLE1BQUssU0FBUyxRQUFRLFVBQVUsRUFBRSxHQUFHO0FBR3RDLFFBQU87QUFDUDtBQVFNLFNBQVMseUJBQXlCQyxZQUFrQixpQkFBaUIsRUFBc0I7Q0FDakcsSUFBSSxVQUFVLElBQUksS0FBSztBQUN2QixRQUFPO0VBQ04sV0FBVyxJQUFJLEtBQUs7RUFDcEIsU0FBUyxJQUFJLEtBQUssUUFBUSxXQUFXLFFBQVEsWUFBWSxHQUFHLEdBQUc7Q0FDL0Q7QUFDRDtBQUtNLFNBQVMsdUJBQXVCQyxVQUFpQztBQUN2RSxTQUFRLEVBQUUsU0FBUyxNQUFNLEVBQUUsU0FBUyxLQUFLO0FBQ3pDO0lBRVcsZ0RBQUw7QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFDQSJ9