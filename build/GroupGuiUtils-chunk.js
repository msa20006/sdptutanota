import { lang } from "./LanguageViewModel-chunk.js";
import { GroupType, MailMethod } from "./TutanotaConstants-chunk.js";
import { getDefaultGroupName, getInvitationGroupType, getSharedGroupName } from "./GroupUtils2-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { showProgressDialog } from "./ProgressDialog-chunk.js";
import { getDefaultSender, getEnabledMailAddressesWithUser, getSenderNameForUser } from "./SharedMailUtils-chunk.js";

//#region src/common/sharing/GroupSharingUtils.ts
function sendShareNotificationEmail(sharedGroupInfo, recipients, texts) {
	locator.mailboxModel.getUserMailboxDetails().then((mailboxDetails) => {
		const senderMailAddress = getDefaultSender(locator.logins, mailboxDetails);
		const userName = getSenderNameForUser(mailboxDetails, locator.logins.getUserController());
		const bcc = recipients.map(({ name, address }) => ({
			name,
			address
		}));
		let senderDisplayName;
		if (!userName) senderDisplayName = senderMailAddress;
else senderDisplayName = `${userName} &lt;${senderMailAddress}&gt;`;
		_sendNotificationEmail({ bcc }, texts.shareEmailSubject, texts.shareEmailBody(senderDisplayName, getSharedGroupName(sharedGroupInfo, locator.logins.getUserController(), true)), senderMailAddress);
	});
}
function sendAcceptNotificationEmail(invitation, texts) {
	const to = [{
		name: invitation.inviterName,
		address: invitation.inviterMailAddress
	}];
	const userName = invitation.inviterMailAddress;
	const invitee = invitation.inviteeMailAddress;
	const groupName = invitation.sharedGroupName || getDefaultGroupName(getInvitationGroupType(invitation));
	const senderMailAddress = invitation.inviteeMailAddress;
	_sendNotificationEmail({ to }, texts.acceptEmailSubject, texts.acceptEmailBody(userName, invitee, groupName), senderMailAddress);
}
function sendRejectNotificationEmail(invitation, texts) {
	const to = [{
		name: invitation.inviterName,
		address: invitation.inviterMailAddress
	}];
	const userName = invitation.inviterMailAddress;
	const invitee = invitation.inviteeMailAddress;
	const groupName = invitation.sharedGroupName || getDefaultGroupName(getInvitationGroupType(invitation));
	const senderMailAddress = invitation.inviteeMailAddress;
	_sendNotificationEmail({ to }, texts.declineEmailSubject, texts.declineEmailBody(userName, invitee, groupName), senderMailAddress);
}
function _sendNotificationEmail(recipients, subject, body, senderMailAddress) {
	import("./HtmlSanitizer2-chunk.js").then(({ htmlSanitizer }) => {
		const sanitizedBody = htmlSanitizer.sanitizeHTML(body, {
			blockExternalContent: false,
			allowRelativeLinks: false,
			usePlaceholderForInlineImages: false
		}).html;
		locator.mailboxModel.getUserMailboxDetails().then(async (mailboxDetails) => {
			const sender = getEnabledMailAddressesWithUser(mailboxDetails, locator.logins.getUserController().userGroupInfo).includes(senderMailAddress) ? senderMailAddress : getDefaultSender(locator.logins, mailboxDetails);
			const confirm = () => Promise.resolve(true);
			const wait = showProgressDialog;
			const mailboxProperties = await locator.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot);
			const model = await locator.sendMailModel(mailboxDetails, mailboxProperties);
			await model.initWithTemplate(recipients, subject, sanitizedBody, [], true, sender);
			await model.send(MailMethod.NONE, confirm, wait, "tooManyMailsAuto_msg");
		});
	});
}

//#endregion
//#region src/common/sharing/GroupGuiUtils.ts
const CALENDAR_SHARING_TEXTS = () => ({
	groupNameLabel: "calendarName_label",
	participantsLabel: (groupName) => lang.get("calendarParticipants_label", { "{name}": groupName }),
	acceptEmailSubject: lang.get("shareCalendarAcceptEmailSubject_msg"),
	acceptEmailBody: (userName, invitee, groupName) => lang.get("shareCalendarAcceptEmailBody_msg", {
		"{invitee}": invitee,
		"{calendarName}": groupName,
		"{recipientName}": userName
	}),
	declineEmailSubject: lang.get("shareCalendarDeclineEmailSubject_msg"),
	declineEmailBody: (userName, invitee, groupName) => lang.get("shareCalendarDeclineEmailBody_msg", {
		"{invitee}": invitee,
		"{calendarName}": groupName,
		"{recipientName}": userName
	}),
	shareEmailSubject: lang.get("shareCalendarInvitationEmailSubject_msg"),
	shareEmailBody: (sender, calendarName) => lang.get("shareCalendarInvitationEmailBody_msg", {
		"{inviter}": sender,
		"{calendarName}": calendarName
	}),
	addMemberMessage: (_) => `${lang.get("shareCalendarWarning_msg")} ${lang.get("shareWarningAliases_msg")}`,
	removeMemberMessage: (calendarName, invitee) => lang.get("removeCalendarParticipantConfirm_msg", {
		"{participant}": invitee,
		"{calendarName}": calendarName
	}),
	alreadyGroupMemberMessage: "sharedCalendarAlreadyMember_msg",
	receivedGroupInvitationMessage: `${lang.get("shareCalendarWarning_msg")} ${lang.get("shareWarningAliases_msg")}`,
	sharedGroupDefaultCustomName: (groupOwnerName) => getDefaultGroupName(GroupType.Calendar),
	yourCustomNameLabel: (groupName) => lang.get("calendarCustomName_label", { "{customName}": groupName })
});
const TEMPLATE_SHARING_TEXTS = () => ({
	groupNameLabel: "templateGroupName_label",
	participantsLabel: (groupName) => lang.get("sharedGroupParticipants_label", { "{groupName}": groupName }),
	acceptEmailSubject: lang.get("acceptTemplateGroupEmailSubject_msg"),
	acceptEmailBody: (userName, invitee, groupName) => `${lang.get("sharedGroupAcceptEmailBody_msg", {
		"{recipientName}": userName,
		"{invitee}": invitee,
		"{groupName}": groupName
	})} ${lang.get("automatedMessage_msg")}`,
	declineEmailSubject: lang.get("declineTemplateGroupEmailSubject_msg"),
	declineEmailBody: (userName, invitee, groupName) => `${lang.get("sharedGroupDeclineEmailBody_msg", {
		"{recipientName}": userName,
		"{invitee}": invitee,
		"{groupName}": groupName
	})} ${lang.get("automatedMessage_msg")}`,
	shareEmailSubject: lang.get("shareTemplateGroupEmailSubject_msg"),
	shareEmailBody: (sharer, groupName) => lang.get("shareTemplateGroupEmailBody_msg", {
		"{inviter}": sharer,
		"{groupName}": groupName
	}),
	addMemberMessage: (groupName) => `${lang.get("shareGroupWarning_msg")} ${lang.get("shareWarningAliases_msg")}`,
	removeMemberMessage: (groupName, member) => lang.get("removeSharedMemberConfirm_msg", {
		"{member}": member,
		"{groupName}": groupName
	}),
	alreadyGroupMemberMessage: "alreadySharedGroupMember_msg",
	receivedGroupInvitationMessage: `${lang.get("shareGroupWarning_msg")} ${lang.get("shareWarningAliases_msg")}`,
	sharedGroupDefaultCustomName: (invitation) => lang.get("sharedTemplateGroupDefaultName_label", { "{ownerName}": invitation.inviterName || invitation.inviterMailAddress }),
	yourCustomNameLabel: (groupName) => lang.get("customName_label", { "{customName}": groupName })
});
const CONTACT_LIST_SHARING_TEXTS = () => ({
	groupNameLabel: "contactListName_label",
	participantsLabel: (groupName) => lang.get("sharedGroupParticipants_label", { "{groupName}": groupName }),
	acceptEmailSubject: lang.get("acceptContactListEmailSubject_msg"),
	acceptEmailBody: (userName, invitee, groupName) => `${lang.get("sharedGroupAcceptEmailBody_msg", {
		"{recipientName}": userName,
		"{invitee}": invitee,
		"{groupName}": groupName
	})} ${lang.get("automatedMessage_msg")}`,
	declineEmailSubject: lang.get("declineContactListEmailSubject_msg"),
	declineEmailBody: (userName, invitee, groupName) => `${lang.get("sharedGroupDeclineEmailBody_msg", {
		"{recipientName}": userName,
		"{invitee}": invitee,
		"{groupName}": groupName
	})} ${lang.get("automatedMessage_msg")}`,
	shareEmailSubject: lang.get("shareContactListEmailSubject_msg"),
	shareEmailBody: (sharer, groupName) => `${lang.get("shareContactListEmailBody_msg", {
		"{inviter}": sharer,
		"{groupName}": groupName
	})} ${lang.get("automatedMessage_msg")}`,
	addMemberMessage: (groupName) => `${lang.get("shareGroupWarning_msg")} ${lang.get("shareWarningAliases_msg")}`,
	removeMemberMessage: (groupName, member) => lang.get("removeSharedMemberConfirm_msg", {
		"{member}": member,
		"{groupName}": groupName
	}),
	alreadyGroupMemberMessage: "alreadySharedGroupMember_msg",
	receivedGroupInvitationMessage: `${lang.get("shareGroupWarning_msg")} ${lang.get("shareWarningAliases_msg")}`,
	sharedGroupDefaultCustomName: (invitation) => lang.get("sharedContactListDefaultName_label", { "{ownerName}": invitation.inviterName || invitation.inviterMailAddress }),
	yourCustomNameLabel: (groupName) => lang.get("customName_label", { "{customName}": groupName })
});
function getTextsForGroupType(groupType) {
	switch (groupType) {
		case GroupType.Calendar: return CALENDAR_SHARING_TEXTS();
		case GroupType.Template: return TEMPLATE_SHARING_TEXTS();
		case GroupType.ContactList: return CONTACT_LIST_SHARING_TEXTS();
	}
}

//#endregion
export { getTextsForGroupType, sendAcceptNotificationEmail, sendRejectNotificationEmail, sendShareNotificationEmail };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,