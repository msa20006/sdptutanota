import { assertMainOrNode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { downcast, neverNull } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { px, size } from "./size-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { createDropdown } from "./Dialog-chunk.js";
import { progressIcon } from "./Icon-chunk.js";
import { ButtonSize, IconButton } from "./IconButton-chunk.js";
import { InfoIcon } from "./InfoIcon-chunk.js";

//#region src/common/gui/base/Table.ts
assertMainOrNode();
let ColumnWidth = function(ColumnWidth$1) {
	ColumnWidth$1["Small"] = ".column-width-small";
	ColumnWidth$1["Largest"] = ".column-width-largest";
	return ColumnWidth$1;
}({});
var Table = class Table {
	view(vnode) {
		const a = vnode.attrs;
		const loading = !a.lines;
		const alignments = a.columnAlignments || [];
		const lineAttrs = a.lines ? a.lines.map((lineAttrs$1) => this.createLine(lineAttrs$1, a.showActionButtonColumn, a.columnWidths, false, alignments, false)) : [];
		return mithril_default("", { class: a.class }, [
			mithril_default(`table.table${a.columnHeading ? ".table-header-border" : ""}`, [(a.columnHeading ? [this.createLine({
				cells: () => a.columnHeading.map((header) => {
					const text = this.isTableHeading(header) ? header.label : header;
					const info = this.isTableHeading(header) && header.helpText ? [lang.getTranslationText(header.helpText)] : undefined;
					return {
						main: lang.getTranslationText(text),
						info
					};
				}),
				actionButtonAttrs: loading ? null : a.addButtonAttrs
			}, a.showActionButtonColumn, a.columnWidths, true, alignments, a.verticalColumnHeadings ?? false, true)] : []).concat(lineAttrs)]),
			loading ? mithril_default(".flex-center.items-center.button-height", progressIcon()) : null,
			!loading && neverNull(a.lines).length === 0 ? mithril_default(".flex-center.items-center.button-height", lang.get("noEntries_msg")) : null
		]);
	}
	isTableHeading(textIdOrFunction) {
		return textIdOrFunction.label !== undefined;
	}
	createLine(lineAttrs, showActionButtonColumn, columnWidths, bold, columnAlignments, verticalText, useHelpButton = false) {
		let cells;
		if (typeof lineAttrs.cells == "function") cells = lineAttrs.cells().map((cellTextData, index) => mithril_default("td" + columnWidths[index], mithril_default("", { class: useHelpButton ? "flex items-center height-100p full-width" : "" }, mithril_default(".text-ellipsis.pr.pt-s" + (bold ? ".b" : "") + (cellTextData.click ? ".click" : "" + (cellTextData.mainStyle ? cellTextData.mainStyle : "")) + (columnAlignments[index] ? ".right" : ""), {
			title: cellTextData.main,
			onclick: cellTextData.click ? (event) => {
				const dom = downcast(event.target);
				cellTextData.click(event, dom);
			} : undefined
		}, verticalText ? mithril_default("span.vertical-text", cellTextData.main) : cellTextData.main), Table.renderHelpText(cellTextData, useHelpButton))));
else cells = lineAttrs.cells.map((text, index) => mithril_default("td.text-ellipsis.pr.pt-s.pb-s." + columnWidths[index] + (bold ? ".b" : "") + (columnAlignments[index] ? ".right" : ""), { title: text }, verticalText ? mithril_default("span.vertical-text", text) : text));
		if (showActionButtonColumn) cells.push(mithril_default("td", { style: { width: px(size.button_height_compact) } }, lineAttrs.actionButtonAttrs ? mithril_default(IconButton, lineAttrs.actionButtonAttrs) : []));
		return mithril_default("tr.selectable", cells);
	}
	static renderHelpText(cellTextData, useHelpButton) {
		const info = cellTextData.info;
		if (info == null) return undefined;
		if (useHelpButton) return mithril_default(InfoIcon, { text: info.join("\n") });
else return mithril_default(".small.text-ellipsis.pr" + (cellTextData.click ? ".click" : ""), { onclick: cellTextData.click ? (event) => {
			const dom = downcast(event.target);
			cellTextData.click(event, dom);
		} : undefined }, info.map((line) => mithril_default("", line)));
	}
};
function createRowActions(instance, currentElement, indexOfElement, prefixActions = []) {
	const elements = instance.getArray();
	const makeButtonAttrs = () => [
		...prefixActions,
		indexOfElement > 1 ? {
			label: "moveToTop_action",
			click: () => {
				elements.splice(indexOfElement, 1);
				elements.unshift(currentElement);
				instance.updateInstance();
			}
		} : null,
		indexOfElement > 0 ? {
			label: "moveUp_action",
			click: () => {
				let prev = elements[indexOfElement - 1];
				elements[indexOfElement - 1] = currentElement;
				elements[indexOfElement] = prev;
				instance.updateInstance();
			}
		} : null,
		indexOfElement < instance.getArray().length - 1 ? {
			label: "moveDown_action",
			click: () => {
				let next = elements[indexOfElement + 1];
				elements[indexOfElement + 1] = currentElement;
				elements[indexOfElement] = next;
				instance.updateInstance();
			}
		} : null,
		indexOfElement < instance.getArray().length - 2 ? {
			label: "moveToBottom_action",
			click: () => {
				elements.splice(indexOfElement, 1);
				elements.push(currentElement);
				instance.updateInstance();
			}
		} : null,
		{
			label: "delete_action",
			click: () => {
				elements.splice(indexOfElement, 1);
				instance.updateInstance();
			}
		}
	];
	return {
		title: "edit_action",
		click: createDropdown({
			lazyButtons: makeButtonAttrs,
			width: 260
		}),
		icon: Icons.More,
		size: ButtonSize.Compact
	};
}

//#endregion
export { ColumnWidth, Table, createRowActions };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,