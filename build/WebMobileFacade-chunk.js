import { __toESM } from "./chunk-chunk.js";
import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { assertMainOrNode } from "./Env-chunk.js";
import "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { last } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import "./LanguageViewModel-chunk.js";
import { styles } from "./styles-chunk.js";
import "./theme-chunk.js";
import { CloseEventBusOption, SECOND_MS } from "./TutanotaConstants-chunk.js";
import "./KeyManager-chunk.js";
import "./WindowFacade-chunk.js";
import { modal } from "./RootView-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./EntityUtils-chunk.js";
import { CalendarViewType } from "./CommonCalendarUtils-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { CALENDAR_PREFIX, CONTACTS_PREFIX, SEARCH_PREFIX, SETTINGS_PREFIX } from "./RouteChange-chunk.js";

//#region src/common/native/main/WebMobileFacade.ts
var import_stream = __toESM(require_stream(), 1);
assertMainOrNode();
var WebMobileFacade = class {
	disconnectTimeoutId;
	isAppVisible = (0, import_stream.default)(false);
	constructor(connectivityModel, baseViewPrefix) {
		this.connectivityModel = connectivityModel;
		this.baseViewPrefix = baseViewPrefix;
	}
	getIsAppVisible() {
		return this.isAppVisible;
	}
	async handleBackPress() {
		await Promise.resolve();
		const lastModalComponent = last(modal.components);
		if (lastModalComponent) {
			lastModalComponent.component.onClose();
			return true;
		} else {
			const viewSlider = window.tutao.currentView?.getViewSlider?.();
			const currentRoute = mithril_default.route.get();
			if (viewSlider && viewSlider.isForegroundColumnFocused()) {
				viewSlider.focusNextColumn();
				return true;
			} else if (this.handlesBackButtonViaCurrentView()) return true;
else if (viewSlider && viewSlider.focusedColumn !== viewSlider.getMainColumn() && styles.isSingleColumnLayout() && viewSlider.isFocusPreviousPossible()) {
				viewSlider.focusPreviousColumn();
				return true;
			} else if (currentRoute.startsWith(CALENDAR_PREFIX)) {
				if (history.state?.origin === CalendarViewType.MONTH) {
					const date = history.state.dateString ?? new Date().toISOString().substring(0, 10);
					mithril_default.route.set("/calendar/:view/:date", {
						view: CalendarViewType.MONTH,
						date
					});
					return true;
				}
				if (this.baseViewPrefix === CALENDAR_PREFIX) return false;
else {
					mithril_default.route.set(this.baseViewPrefix);
					return true;
				}
			} else if (currentRoute.startsWith(CONTACTS_PREFIX) || currentRoute.startsWith(SETTINGS_PREFIX) || currentRoute.startsWith(SEARCH_PREFIX)) {
				mithril_default.route.set(this.baseViewPrefix);
				return true;
			} else return false;
		}
	}
	handlesBackButtonViaCurrentView() {
		const currentView = window.tutao.currentView;
		return currentView?.handleBackButton != null && currentView.handleBackButton();
	}
	async visibilityChange(visibility) {
		console.log("native visibility change", visibility);
		this.isAppVisible(visibility);
		if (visibility) {
			if (this.disconnectTimeoutId != null) {
				clearTimeout(this.disconnectTimeoutId);
				this.disconnectTimeoutId = null;
			}
			return this.connectivityModel.tryReconnect(false, true);
		} else this.disconnectTimeoutId = setTimeout(() => {
			this.connectivityModel.close(CloseEventBusOption.Pause);
		}, 30 * SECOND_MS);
	}
	async keyboardSizeChanged(newSize) {
		const { windowFacade } = await import("./WindowFacade2-chunk.js");
		return windowFacade.onKeyboardSizeChanged(newSize);
	}
};

//#endregion
export { WebMobileFacade };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,