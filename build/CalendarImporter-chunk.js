import { isApp } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { ofClass, pMap, stringToUtf8Uint8Array, utf8Uint8ArrayToString } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { ShareCapability } from "./TutanotaConstants-chunk.js";
import { size } from "./size-chunk.js";
import { elementIdPart, isSameId, listIdPart } from "./EntityUtils-chunk.js";
import { CalendarEventTypeRef, createFile } from "./TypeRefs-chunk.js";
import { UserAlarmInfoTypeRef } from "./TypeRefs2-chunk.js";
import { ParserError } from "./ParserCombinator-chunk.js";
import { CalendarType, getTimeZone, isExternalCalendarType } from "./CalendarUtils-chunk.js";
import { EventImportRejectionReason, parseCalendarStringData, sortOutParsedEvents } from "./ImportExportUtils-chunk.js";
import { ImportError } from "./ImportError-chunk.js";
import { ButtonType } from "./Button-chunk.js";
import { DialogHeaderBar } from "./DialogHeaderBar-chunk.js";
import { Dialog, DialogType, DropDownSelector } from "./Dialog-chunk.js";
import { BootIcons } from "./Icon-chunk.js";
import { getSharedGroupName, hasCapabilityOnGroup } from "./GroupUtils2-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { convertToDataFile } from "./BlobUtils-chunk.js";
import { showProgressDialog } from "./ProgressDialog-chunk.js";
import { CALENDAR_MIME_TYPE, showFileChooser, showNativeFilePicker } from "./SharedMailUtils-chunk.js";
import { renderCalendarColor } from "./CalendarGuiUtils-chunk.js";
import { List, ListLoadingState, MultiselectMode } from "./List-chunk.js";
import { KindaCalendarRow } from "./CalendarRow-chunk.js";
import { serializeCalendar } from "./CalendarExporter-chunk.js";

//#region src/common/calendar/import/CalendarImporterDialog.ts
/**
* show an error dialog detailing the reason and amount for events that failed to import
*/
async function partialImportConfirmation(skippedEvents, confirmationText, total) {
	return skippedEvents.length === 0 || await Dialog.confirm(lang.makeTranslation("confirm_msg", lang.get(confirmationText, {
		"{amount}": skippedEvents.length + "",
		"{total}": total + ""
	})));
}
async function handleCalendarImport(calendarGroupRoot, importedParsedEvents = null, calendarType = CalendarType.NORMAL) {
	const parsedEvents = importedParsedEvents ?? await showProgressDialog("loading_msg", selectAndParseIcalFile());
	if (parsedEvents.length === 0) return;
	const zone = getTimeZone();
	const existingEvents = await showProgressDialog("loading_msg", loadAllEvents(calendarGroupRoot));
	const { rejectedEvents, eventsForCreation } = sortOutParsedEvents(parsedEvents, existingEvents, calendarGroupRoot, zone);
	const total = parsedEvents.length;
	if (!await partialImportConfirmation(rejectedEvents.get(EventImportRejectionReason.Duplicate) ?? [], "importEventExistingUid_msg", total)) return;
	if (!await partialImportConfirmation(rejectedEvents.get(EventImportRejectionReason.InvalidDate) ?? [], "importInvalidDatesInEvent_msg", total)) return;
	if (!await partialImportConfirmation(rejectedEvents.get(EventImportRejectionReason.Inversed) ?? [], "importEndNotAfterStartInEvent_msg", total)) return;
	if (!await partialImportConfirmation(rejectedEvents.get(EventImportRejectionReason.Pre1970) ?? [], "importPre1970StartInEvent_msg", total)) return;
	if (eventsForCreation.length > 0) if (isExternalCalendarType(calendarType)) await importEvents(eventsForCreation);
else showEventsImportDialog(eventsForCreation.map((ev) => ev.event), async (dialog) => {
		dialog.close();
		await importEvents(eventsForCreation);
	}, "importEvents_label");
}
async function selectAndParseIcalFile() {
	try {
		const allowedExtensions = [
			"ical",
			"ics",
			"ifb",
			"icalendar"
		];
		const dataFiles = isApp() ? await showNativeFilePicker(allowedExtensions, true) : await showFileChooser(true, allowedExtensions);
		const contents = dataFiles.map((file) => parseCalendarFile(file).contents);
		return contents.flat();
	} catch (e) {
		if (e instanceof ParserError) {
			console.log("Failed to parse file", e);
			Dialog.message(lang.makeTranslation("confirm_msg", lang.get("importReadFileError_msg", { "{filename}": e.filename ?? "" })));
			return [];
		} else throw e;
	}
}
async function importEvents(eventsForCreation) {
	const operation = locator.operationProgressTracker.startNewOperation();
	return showProgressDialog("importCalendar_label", locator.calendarFacade.saveImportedCalendarEvents(eventsForCreation, operation.id), operation.progress).catch(ofClass(ImportError, (e) => Dialog.message(lang.makeTranslation("confirm_msg", lang.get("importEventsError_msg", {
		"{amount}": e.numFailed + "",
		"{total}": eventsForCreation.length.toString()
	}))))).finally(() => operation.done());
}
async function exportCalendar(calendarName, groupRoot, userAlarmInfos, now, zone) {
	return await showProgressDialog("pleaseWait_msg", (async () => {
		const allEvents = await loadAllEvents(groupRoot);
		const eventsWithAlarms = await pMap(allEvents, async (event) => {
			const thisUserAlarms = event.alarmInfos.filter((alarmInfoId) => isSameId(userAlarmInfos, listIdPart(alarmInfoId)));
			if (thisUserAlarms.length === 0) return {
				event,
				alarms: []
			};
			const alarms = await locator.entityClient.loadMultiple(UserAlarmInfoTypeRef, userAlarmInfos, thisUserAlarms.map(elementIdPart));
			return {
				event,
				alarms
			};
		});
		return await exportCalendarEvents(calendarName, eventsWithAlarms, now, zone);
	})());
}
function exportCalendarEvents(calendarName, events, now, zone) {
	const stringValue = serializeCalendar(env.versionNumber, events, now, zone);
	const data = stringToUtf8Uint8Array(stringValue);
	const tmpFile = createFile({
		name: calendarName === "" ? "export.ics" : calendarName + "-export.ics",
		mimeType: CALENDAR_MIME_TYPE,
		size: String(data.byteLength),
		subFiles: null,
		parent: null,
		cid: null,
		blobs: []
	});
	return locator.fileController.saveDataFile(convertToDataFile(tmpFile, data));
}
function loadAllEvents(groupRoot) {
	return locator.entityClient.loadAll(CalendarEventTypeRef, groupRoot.longEvents).then((longEvents) => locator.entityClient.loadAll(CalendarEventTypeRef, groupRoot.shortEvents).then((shortEvents) => {
		return shortEvents.concat(longEvents);
	}));
}

//#endregion
//#region src/common/calendar/import/CalendarImporter.ts
function parseCalendarFile(file) {
	try {
		const stringData = utf8Uint8ArrayToString(file.data);
		return parseCalendarStringData(stringData, getTimeZone());
	} catch (e) {
		if (e instanceof ParserError) throw new ParserError(e.message, file.name);
else throw e;
	}
}
function showEventsImportDialog(events, okAction, title) {
	const renderConfig = {
		itemHeight: size.list_row_height,
		multiselectionAllowed: MultiselectMode.Disabled,
		swipe: null,
		createElement: (dom) => {
			return new KindaCalendarRow(dom);
		}
	};
	const dialog = new Dialog(DialogType.EditSmall, { view: () => [mithril_default(DialogHeaderBar, {
		left: [{
			type: ButtonType.Secondary,
			label: "cancel_action",
			click: () => {
				dialog.close();
			}
		}],
		middle: title,
		right: [{
			type: ButtonType.Primary,
			label: "import_action",
			click: () => {
				okAction(dialog);
			}
		}]
	}), mithril_default(".dialog-max-height.plr-s.pb.text-break.nav-bg", [mithril_default(".flex.col.rel.mt-s", { style: { height: "80vh" } }, mithril_default(List, {
		renderConfig,
		state: {
			items: events,
			loadingStatus: ListLoadingState.Done,
			loadingAll: false,
			inMultiselect: true,
			activeIndex: null,
			selectedItems: new Set()
		},
		onLoadMore() {},
		onRangeSelectionTowards(item) {},
		onRetryLoading() {},
		onSingleSelection(item) {},
		onSingleTogglingMultiselection(item) {},
		onStopLoading() {}
	}))])] }).show();
}
async function importCalendarFile(calendarModel, userController, events) {
	const groupSettings = userController.userSettingsGroupRoot.groupSettings;
	const calendarInfos = await calendarModel.getCalendarInfos();
	const groupColors = groupSettings.reduce((acc, gc) => {
		acc.set(gc.group, gc.color);
		return acc;
	}, new Map());
	calendarSelectionDialog(Array.from(calendarInfos.values()), userController, groupColors, (dialog, selectedCalendar) => {
		dialog.close();
		handleCalendarImport(selectedCalendar.groupRoot, events);
	});
}
function calendarSelectionDialog(calendars, userController, groupColors, okAction) {
	const availableCalendars = calendars.filter((calendarInfo) => hasCapabilityOnGroup(userController.user, calendarInfo.group, ShareCapability.Write));
	let selectedCalendar = availableCalendars[0];
	const dialog = new Dialog(DialogType.EditSmall, { view: () => [mithril_default(DialogHeaderBar, {
		left: [{
			type: ButtonType.Secondary,
			label: "cancel_action",
			click: () => {
				dialog.close();
			}
		}],
		middle: "calendar_label",
		right: [{
			type: ButtonType.Primary,
			label: "pricing.select_action",
			click: () => {
				okAction(dialog, selectedCalendar);
			}
		}]
	}), mithril_default(".dialog-max-height.plr-l.pt.pb.text-break.scroll", [mithril_default(".text-break.selectable", lang.get("calendarImportSelection_label")), mithril_default(DropDownSelector, {
		label: "calendar_label",
		items: availableCalendars.map((calendarInfo) => {
			return {
				name: getSharedGroupName(calendarInfo.groupInfo, userController, calendarInfo.shared),
				value: calendarInfo
			};
		}),
		selectedValue: selectedCalendar,
		selectionChangedHandler: (v) => selectedCalendar = v,
		icon: BootIcons.Expand,
		disabled: availableCalendars.length < 2,
		helpLabel: () => renderCalendarColor(selectedCalendar, groupColors)
	})])] }).show();
}

//#endregion
export { calendarSelectionDialog, exportCalendar, handleCalendarImport, importCalendarFile, parseCalendarFile, showEventsImportDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,