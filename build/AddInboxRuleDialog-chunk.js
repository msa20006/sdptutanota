import { __toESM } from "./chunk-chunk.js";
import { assertMainOrNode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { neverNull } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { InboxRuleType, MailSetKind } from "./TutanotaConstants-chunk.js";
import { elementIdPart, isSameId } from "./EntityUtils-chunk.js";
import { createInboxRule } from "./TypeRefs-chunk.js";
import { isDomainName, isMailAddress, isRegularExpression } from "./FormatValidator-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { isOfflineError } from "./ErrorUtils-chunk.js";
import { LockedError } from "./RestError-chunk.js";
import { Autocapitalize, Dialog, DropDownSelector, TextField } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { showNotAvailableForFreeDialog } from "./SubscriptionDialogs-chunk.js";
import { getInboxRuleTypeNameMapping, mailLocator } from "./mailLocator-chunk.js";
import { assertSystemFolderOfType, getExistingRuleForType, getFolderName, getIndentedFolderNameForDropdown, getPathToFolderString } from "./MailUtils-chunk.js";

//#region src/mail-app/settings/AddInboxRuleDialog.ts
var import_stream = __toESM(require_stream(), 1);
assertMainOrNode();
async function show(mailBoxDetail, ruleOrTemplate) {
	if (locator.logins.getUserController().isFreeAccount()) showNotAvailableForFreeDialog();
else if (mailBoxDetail && mailBoxDetail.mailbox.folders) {
		const folders = await mailLocator.mailModel.getMailboxFoldersForId(mailBoxDetail.mailbox.folders._id);
		let targetFolders = folders.getIndentedList().map((folderInfo) => {
			return {
				name: getIndentedFolderNameForDropdown(folderInfo),
				value: folderInfo.folder
			};
		});
		const inboxRuleType = (0, import_stream.default)(ruleOrTemplate.type);
		const inboxRuleValue = (0, import_stream.default)(ruleOrTemplate.value);
		const selectedFolder = ruleOrTemplate.targetFolder == null ? null : folders.getFolderById(elementIdPart(ruleOrTemplate.targetFolder));
		const inboxRuleTarget = (0, import_stream.default)(selectedFolder ?? assertSystemFolderOfType(folders, MailSetKind.ARCHIVE));
		let form = () => [
			mithril_default(DropDownSelector, {
				items: getInboxRuleTypeNameMapping(),
				label: "inboxRuleField_label",
				selectedValue: inboxRuleType(),
				selectionChangedHandler: inboxRuleType
			}),
			mithril_default(TextField, {
				label: "inboxRuleValue_label",
				autocapitalize: Autocapitalize.none,
				value: inboxRuleValue(),
				oninput: inboxRuleValue,
				helpLabel: () => inboxRuleType() !== InboxRuleType.SUBJECT_CONTAINS && inboxRuleType() !== InboxRuleType.MAIL_HEADER_CONTAINS ? lang.get("emailSenderPlaceholder_label") : lang.get("emptyString_msg")
			}),
			mithril_default(DropDownSelector, {
				label: "inboxRuleTargetFolder_label",
				items: targetFolders,
				selectedValue: inboxRuleTarget(),
				selectedValueDisplay: getFolderName(inboxRuleTarget()),
				selectionChangedHandler: inboxRuleTarget,
				helpLabel: () => getPathToFolderString(folders, inboxRuleTarget(), true)
			})
		];
		const addInboxRuleOkAction = (dialog) => {
			let rule = createInboxRule({
				type: inboxRuleType(),
				value: getCleanedValue(inboxRuleType(), inboxRuleValue()),
				targetFolder: inboxRuleTarget()._id
			});
			const props = locator.logins.getUserController().props;
			const inboxRules = props.inboxRules;
			const ruleId = ruleOrTemplate._id;
			props.inboxRules = ruleId == null ? [...inboxRules, rule] : inboxRules.map((inboxRule) => isSameId(inboxRule._id, ruleId) ? rule : inboxRule);
			locator.entityClient.update(props).then(() => {
				dialog.close();
			}).catch((error) => {
				if (isOfflineError(error)) {
					props.inboxRules = inboxRules;
					throw error;
				} else if (error instanceof LockedError) dialog.close();
else {
					props.inboxRules = inboxRules;
					dialog.close();
					throw error;
				}
			});
		};
		Dialog.showActionDialog({
			title: "addInboxRule_action",
			child: form,
			validator: () => validateInboxRuleInput(inboxRuleType(), inboxRuleValue(), ruleOrTemplate._id),
			allowOkWithReturn: true,
			okAction: addInboxRuleOkAction
		});
	}
}
function createInboxRuleTemplate(ruleType, value) {
	return {
		type: ruleType ?? InboxRuleType.FROM_EQUALS,
		value: getCleanedValue(neverNull(ruleType), value || "")
	};
}
function validateInboxRuleInput(type, value, ruleId) {
	let currentCleanedValue = getCleanedValue(type, value);
	if (currentCleanedValue === "") return "inboxRuleEnterValue_msg";
else if (isInvalidRegex(currentCleanedValue)) return "invalidRegexSyntax_msg";
else if (type !== InboxRuleType.SUBJECT_CONTAINS && type !== InboxRuleType.MAIL_HEADER_CONTAINS && !isRegularExpression(currentCleanedValue) && !isDomainName(currentCleanedValue) && !isMailAddress(currentCleanedValue, false)) return "inboxRuleInvalidEmailAddress_msg";
else {
		let existingRule = getExistingRuleForType(locator.logins.getUserController().props, currentCleanedValue, type);
		if (existingRule && (!ruleId || ruleId && !isSameId(existingRule._id, ruleId))) return "inboxRuleAlreadyExists_msg";
	}
	return null;
}
function getCleanedValue(type, value) {
	if (type === InboxRuleType.SUBJECT_CONTAINS || type === InboxRuleType.MAIL_HEADER_CONTAINS) return value;
else return value.trim().toLowerCase();
}
/**
* @param value
* @returns true if provided string is a regex and it's unparseable by RegExp, else false
* @private
*/
function isInvalidRegex(value) {
	if (!isRegularExpression(value)) return false;
	try {
		let regExp = new RegExp(value.substring(1, value.length - 1));
	} catch (e) {
		return true;
	}
	return false;
}

//#endregion
export { createInboxRuleTemplate, show as show$2 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,