import { assertMainOrNode, isApp } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { assertNotNull, noOp, ofClass } from "./dist2-chunk.js";
import { InfoLink, lang } from "./LanguageViewModel-chunk.js";
import { GroupType } from "./TutanotaConstants-chunk.js";
import { getEtId, isSameId } from "./EntityUtils-chunk.js";
import { AccessBlockedError, NotAuthenticatedError } from "./RestError-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { Dialog, DialogType } from "./Dialog-chunk.js";
import { IconButton } from "./IconButton-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { copyToClipboard } from "./ClipboardUtils-chunk.js";
import { showRequestPasswordDialog } from "./PasswordRequestDialog-chunk.js";
import { MoreInfoLink } from "./MoreInfoLink-chunk.js";

//#region src/common/settings/login/RecoverCodeDialog.ts
assertMainOrNode();
function showRecoverCodeDialogAfterPasswordVerificationAndInfoDialog(user) {
	if (!isSameId(getEtId(locator.logins.getUserController().user), getEtId(user)) || !user.memberships.some((gm) => gm.groupType === GroupType.Admin)) return;
	const isRecoverCodeAvailable = user.auth && user.auth.recoverCode != null;
	Dialog.showActionDialog({
		title: "recoveryCode_label",
		type: DialogType.EditMedium,
		child: () => mithril_default(".pt", lang.get("recoveryCode_msg")),
		allowOkWithReturn: true,
		okAction: (dialog) => {
			dialog.close();
			showRecoverCodeDialogAfterPasswordVerification(isRecoverCodeAvailable ? "get" : "create", false);
		},
		okActionTextId: isRecoverCodeAvailable ? "show_action" : "setUp_action"
	});
}
function showRecoverCodeDialogAfterPasswordVerification(action, showMessage = true) {
	const recoverCodeFacade = locator.recoverCodeFacade;
	const dialog = showRequestPasswordDialog({
		action: (pw) => {
			return (action === "get" ? recoverCodeFacade.getRecoverCodeHex(pw) : recoverCodeFacade.createRecoveryCode(pw)).then((recoverCode) => {
				dialog.close();
				showRecoverCodeDialog(recoverCode, showMessage);
				return "";
			}).catch(ofClass(NotAuthenticatedError, () => lang.get("invalidPassword_msg"))).catch(ofClass(AccessBlockedError, () => lang.get("tooManyAttempts_msg")));
		},
		cancel: {
			textId: "cancel_action",
			action: noOp
		}
	});
}
function showRecoverCodeDialog(recoverCode, showMessage) {
	return new Promise((resolve) => {
		Dialog.showActionDialog({
			title: "recoveryCode_label",
			child: { view: () => {
				return mithril_default(RecoverCodeField, {
					showMessage,
					recoverCode
				});
			} },
			allowCancel: false,
			allowOkWithReturn: true,
			okAction: (dialog) => {
				dialog.close();
				resolve();
			},
			type: DialogType.EditMedium
		});
	});
}
var RecoverCodeField = class {
	view(vnode) {
		let { recoverCode, showButtons, showMessage, image } = vnode.attrs;
		showButtons = showButtons ?? true;
		const splitRecoverCode = assertNotNull(recoverCode.match(/.{4}/g)).join(" ");
		return [
			showMessage ? image ? mithril_default(".flex-space-around.flex-wrap", [mithril_default(".flex-grow-shrink-half.plr-l.flex-center.align-self-center", this.renderRecoveryText()), mithril_default(".flex-grow-shrink-half.plr-l.flex-center.align-self-center", mithril_default("img.pt.bg-white.pt.pb", {
				src: image.src,
				alt: lang.getTranslationText(image.alt),
				style: { width: "200px" }
			}))]) : this.renderRecoveryText() : mithril_default("", lang.get("emptyString_msg")),
			mithril_default(".text-break.monospace.selectable.flex.flex-wrap.border.pt.pb.plr", splitRecoverCode),
			showButtons ? mithril_default(".flex.flex-end.mt-m", [mithril_default(IconButton, {
				title: "copy_action",
				icon: Icons.Clipboard,
				click: () => copyToClipboard(splitRecoverCode)
			}), isApp() || typeof window.print !== "function" ? null : mithril_default(IconButton, {
				title: "print_action",
				icon: Icons.Print,
				click: () => window.print()
			})]) : null
		];
	}
	renderRecoveryText() {
		const link = InfoLink.RecoverCode;
		return mithril_default(".pt.pb", [lang.get("recoveryCode_msg"), mithril_default("", [mithril_default(MoreInfoLink, {
			link,
			isSmall: true
		})])]);
	}
};

//#endregion
export { RecoverCodeField, showRecoverCodeDialog, showRecoverCodeDialogAfterPasswordVerification, showRecoverCodeDialogAfterPasswordVerificationAndInfoDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,