import { assertMainOrNodeBoot, isApp } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { insideRect, makeSingleUse, remove } from "./dist2-chunk.js";
import { AlphaEnum, alpha, animations, styles } from "./styles-chunk.js";
import { theme } from "./theme-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import { isKeyPressed, keyManager } from "./KeyManager-chunk.js";
import { windowFacade } from "./WindowFacade-chunk.js";
import { px, size } from "./size-chunk.js";
import { getSafeAreaInsetBottom } from "./HtmlUtils-chunk.js";

//#region src/common/gui/base/Modal.ts
assertMainOrNodeBoot();
var Modal = class {
	components;
	uniqueComponent;
	view;
	visible;
	currentKey;
	closingComponents;
	historyEventListener = (e) => this.popState(e);
	constructor() {
		this.currentKey = 0;
		this.components = [];
		this.visible = false;
		this.uniqueComponent = null;
		this.closingComponents = [];
		this.view = () => {
			return mithril_default("#modal.fill-absolute", {
				oncreate: (_) => {},
				style: {
					"z-index": LayerType.Modal,
					display: this.visible ? "" : "none"
				}
			}, this.components.map((wrapper, i, array) => {
				return mithril_default(".fill-absolute", {
					key: wrapper.key,
					oncreate: (vnode) => {
						this.visible = true;
						mithril_default.redraw();
						if (wrapper.needsBg) this.addAnimation(vnode.dom, true);
					},
					onclick: (event) => {
						const element = event.currentTarget;
						const child = element.firstElementChild;
						if (child) {
							const childRect = child.getBoundingClientRect();
							if (!insideRect(event, childRect)) wrapper.component.backgroundClick(event);
						}
					},
					style: { zIndex: LayerType.Modal + 1 + i },
					onbeforeremove: (vnode) => {
						if (wrapper.needsBg) {
							this.closingComponents.push(wrapper.component);
							return Promise.all([this.addAnimation(vnode.dom, false).then(() => {
								remove(this.closingComponents, wrapper.component);
								if (this.components.length === 0 && this.closingComponents.length === 0) this.visible = false;
							}), wrapper.component.hideAnimation()]).then(() => {
								mithril_default.redraw();
							});
						} else {
							if (this.components.length === 0 && this.closingComponents.length === 0) this.visible = false;
							return wrapper.component.hideAnimation().then(() => mithril_default.redraw());
						}
					}
				}, mithril_default(wrapper.component));
			}));
		};
	}
	display(component, needsBg = true) {
		windowFacade.removeHistoryEventListener(this.historyEventListener);
		windowFacade.addHistoryEventListener(this.historyEventListener);
		if (this.components.length > 0) keyManager.unregisterModalShortcuts(this.components[this.components.length - 1].component.shortcuts());
		const existingIndex = this.components.findIndex((shownComponent) => shownComponent.component === component);
		if (existingIndex !== -1) {
			console.warn("Attempting to display the same modal component multiple times!");
			this.components.splice(existingIndex, 1);
		}
		this.components.push({
			key: this.currentKey++,
			component,
			needsBg
		});
		mithril_default.redraw();
		keyManager.registerModalShortcuts(component.shortcuts());
	}
	/**
	* notify components that a history state was popped. The Component Stack is notified from the top and the first
	* Component to return false will stop underlying components from receiving the notification.
	* Components that return true are expected to remove themselves from the Modal stack, eg dropdowns.
	* @param e: the DOM Event
	* @private
	*/
	popState(e) {
		console.log("modal popstate");
		const len = this.components.length;
		if (len === 0) {
			console.log("no modals to close");
			return true;
		}
		const keys = this.components.map((c) => c.key);
		for (let i = len - 1; i >= 0; i--) {
			const component = this.getComponentByKey(keys[i]);
			if (!component) {
				console.log("component went AWOL, continuing");
				continue;
			}
			if (!component.popState(e)) {
				console.log("component handled popstate");
				return false;
			}
		}
		return true;
	}
	/**
	* used for modal components that should only be opened once
	* multiple calls will be ignored if the first component is still visible
	* @param component
	*/
	displayUnique(component, needsBg = true) {
		if (this.uniqueComponent) {
			console.log("tried to open unique component while another was open!");
			return;
		}
		this.display(component, needsBg);
		this.uniqueComponent = component;
	}
	getComponentByKey(key$1) {
		const entry = this.components.find((c) => c.key === key$1);
		return entry?.component ?? null;
	}
	remove(component) {
		const componentIndex = this.components.findIndex((wrapper) => wrapper.component === component);
		if (componentIndex === -1) {
			console.log("can't remove non existing component from modal");
			return;
		}
		const componentIsTopmostComponent = componentIndex === this.components.length - 1;
		if (componentIsTopmostComponent) {
			console.log("removed topmost modal component");
			keyManager.unregisterModalShortcuts(component.shortcuts());
		}
		this.components.splice(componentIndex, 1);
		if (this.uniqueComponent === component) this.uniqueComponent = null;
		mithril_default.redraw();
		if (this.components.length > 0 && componentIsTopmostComponent) keyManager.registerModalShortcuts(this.components[this.components.length - 1].component.shortcuts());
		component.callingElement()?.focus();
	}
	/**
	* adds an animation to the topmost component
	*/
	addAnimation(domLayer, fadein) {
		const start = 0;
		const end = .5;
		return animations.add(domLayer, alpha(AlphaEnum.BackgroundColor, theme.modal_bg, fadein ? start : end, fadein ? end : start));
	}
};
const modal = new Modal();

//#endregion
//#region src/common/gui/base/Overlay.ts
assertMainOrNodeBoot();
const overlays = new Map();
let key = 0;
function displayOverlay(position, component, createAnimation, closeAnimation, shadowClass = "dropdown-shadow") {
	if (createAnimation != null && closeAnimation == null) closeAnimation = `${createAnimation} animation-reverse`;
	const overlayKey = key++;
	const pair = {
		position,
		component,
		createAnimation,
		closeAnimation,
		shadowClass
	};
	overlays.set(overlayKey, pair);
	return makeSingleUse(() => {
		if (!overlays.delete(overlayKey)) console.warn(`Missing overlay with key:${overlayKey}!`);
	});
}
const overlay = { view: () => mithril_default(
	// we want the overlays to position relative to the overlay parent
	// the overlay parent also should fill the root
	"#overlay.fill-absolute.noprint",
	{
		style: {
			display: overlays.size > 0 ? "" : "none",
			"margin-top": "env(safe-area-inset-top)",
			"margin-bottom": styles.isUsingBottomNavigation() ? px(size.bottom_nav_bar + getSafeAreaInsetBottom()) : "unset",
			"margin-left": "env(safe-area-inset-left)",
			"margin-right": "env(safe-area-inset-right)"
		},
		"aria-hidden": overlays.size === 0
	},
	Array.from(overlays.entries()).map((overlay$1) => {
		const [key$1, attrs] = overlay$1;
		const position = attrs.position();
		const baseClasses = "abs elevated-bg " + attrs.shadowClass;
		const classes = attrs.createAnimation == null ? baseClasses : baseClasses + " " + attrs.createAnimation;
		return mithril_default("", {
			key: key$1,
			class: classes,
			style: {
				width: position.width,
				top: position.top,
				bottom: position.bottom,
				right: position.right,
				left: position.left,
				height: position.height,
				"z-index": position.zIndex != null ? position.zIndex : LayerType.Overlay
			},
			onbeforeremove: (vnode) => {
				if (attrs.closeAnimation != null) {
					const dom = vnode.dom;
					dom.className = baseClasses;
					void dom.offsetWidth;
					dom.className = baseClasses + " " + attrs.closeAnimation;
					return new Promise(function(resolve) {
						dom.addEventListener("animationend", resolve);
					});
				}
			}
		}, mithril_default(attrs.component));
	})
) };

//#endregion
//#region src/RootView.ts
assertMainOrNodeBoot();
let LayerType = function(LayerType$1) {
	LayerType$1[LayerType$1["View"] = 0] = "View";
	LayerType$1[LayerType$1["LowPriorityOverlay"] = 100] = "LowPriorityOverlay";
	LayerType$1[LayerType$1["LowPriorityNotification"] = 150] = "LowPriorityNotification";
	LayerType$1[LayerType$1["ForegroundMenu"] = 200] = "ForegroundMenu";
	LayerType$1[LayerType$1["Modal"] = 300] = "Modal";
	LayerType$1[LayerType$1["Overlay"] = 400] = "Overlay";
	return LayerType$1;
}({});
let PrimaryNavigationType = function(PrimaryNavigationType$1) {
	PrimaryNavigationType$1[PrimaryNavigationType$1["Keyboard"] = 0] = "Keyboard";
	PrimaryNavigationType$1[PrimaryNavigationType$1["Touch"] = 1] = "Touch";
	PrimaryNavigationType$1[PrimaryNavigationType$1["Mouse"] = 2] = "Mouse";
	return PrimaryNavigationType$1;
}({});
let currentNavigationType = isApp() ? PrimaryNavigationType.Touch : PrimaryNavigationType.Mouse;
var RootView = class {
	dom = null;
	constructor() {
		this.view = this.view.bind(this);
	}
	view(vnode) {
		return mithril_default("#root" + (styles.isUsingBottomNavigation() ? ".mobile" : ""), {
			oncreate: (vnode$1) => {
				this.dom = vnode$1.dom;
			},
			onpointerup: (e) => {
				if (e.pointerType === "mouse") this.switchNavType(PrimaryNavigationType.Mouse);
else this.switchNavType(PrimaryNavigationType.Touch);
				e.redraw = false;
			},
			onkeyup: (e) => {
				if (isKeyPressed(e.key, Keys.TAB, Keys.UP, Keys.DOWN, Keys.J, Keys.K)) this.switchNavType(PrimaryNavigationType.Keyboard);
				e.redraw = false;
			},
			class: this.classForType(),
			style: { height: "100%" }
		}, [
			mithril_default(overlay),
			mithril_default(modal),
			vnode.children
		]);
	}
	switchNavType(newType) {
		if (currentNavigationType === newType) return;
		this.dom?.classList.remove(this.classForType());
		currentNavigationType = newType;
		this.dom?.classList.add(this.classForType());
	}
	classForType() {
		switch (currentNavigationType) {
			case PrimaryNavigationType.Keyboard: return "keyboard-nav";
			case PrimaryNavigationType.Mouse: return "mouse-nav";
			case PrimaryNavigationType.Touch: return "touch-nav";
		}
	}
};
const root = new RootView();

//#endregion
export { LayerType, PrimaryNavigationType, currentNavigationType, displayOverlay, modal, root };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,