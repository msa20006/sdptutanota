import { mithril_default } from "./mithril-chunk.js";
import { assertNonNull, assertNotNull, ofClass } from "./dist2-chunk.js";
import { DEFAULT_KDF_TYPE, asKdfType } from "./TutanotaConstants-chunk.js";
import { NotAuthenticatedError } from "./RestError-chunk.js";
import { Dialog } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { showProgressDialog } from "./ProgressDialog-chunk.js";
import { PasswordForm, PasswordModel } from "./PasswordForm-chunk.js";

//#region src/common/settings/login/ChangePasswordDialogs.ts
async function showChangeUserPasswordAsAdminDialog(user) {
	const model = new PasswordModel(locator.usageTestController, locator.logins, {
		checkOldPassword: false,
		enforceStrength: false,
		hideConfirmation: true
	});
	const changeUserPasswordAsAdminOkAction = async (dialog) => {
		showProgressDialog("pleaseWait_msg", locator.userManagementFacade.changeUserPassword(user, model.getNewPassword())).then(() => {
			Dialog.message("pwChangeValid_msg");
			dialog.close();
		}, (e) => {
			console.error(e);
			Dialog.message("passwordResetFailed_msg");
		});
	};
	Dialog.showActionDialog({
		title: "changePassword_label",
		child: () => mithril_default(PasswordForm, { model }),
		validator: () => model.getErrorMessageId(),
		okAction: changeUserPasswordAsAdminOkAction
	});
}
async function storeNewPassword(currentUser, newPasswordData) {
	const credentialsProvider = locator.credentialsProvider;
	const storedCredentials = await credentialsProvider.getCredentialsInfoByUserId(currentUser._id);
	if (storedCredentials != null) {
		assertNonNull(newPasswordData, "encrypted password data is not provided");
		await credentialsProvider.replacePassword(storedCredentials, newPasswordData.newEncryptedPassphrase, newPasswordData.newEncryptedPassphraseKey);
	}
}
async function showChangeOwnPasswordDialog(allowCancel = true) {
	const model = new PasswordModel(locator.usageTestController, locator.logins, {
		checkOldPassword: true,
		enforceStrength: true
	});
	const changeOwnPasswordOkAction = async (dialog) => {
		const error = model.getErrorMessageId();
		if (error) Dialog.message(error);
else {
			const currentUser = locator.logins.getUserController().user;
			const currentKdfType = asKdfType(currentUser.kdfVersion);
			const currentPasswordKeyData = {
				kdfType: currentKdfType,
				salt: assertNotNull(currentUser.salt),
				passphrase: model.getOldPassword()
			};
			const newPasswordKeyData = {
				kdfType: DEFAULT_KDF_TYPE,
				passphrase: model.getNewPassword()
			};
			showProgressDialog("pleaseWait_msg", locator.loginFacade.changePassword(currentPasswordKeyData, newPasswordKeyData)).then((newPasswordData) => {
				Dialog.message("pwChangeValid_msg");
				dialog.close();
				storeNewPassword(currentUser, newPasswordData);
			}).catch(ofClass(NotAuthenticatedError, (e) => {
				Dialog.message("oldPasswordInvalid_msg");
			})).catch((e) => {
				console.error(e);
				Dialog.message("passwordResetFailed_msg");
			});
		}
	};
	Dialog.showActionDialog({
		title: "changePassword_label",
		child: () => mithril_default(PasswordForm, { model }),
		validator: () => model.getErrorMessageId(),
		okAction: changeOwnPasswordOkAction,
		allowCancel
	});
}

//#endregion
export { showChangeOwnPasswordDialog, showChangeUserPasswordAsAdminDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,