import { assertMainOrNode } from "./Env-chunk.js";
import { isSameDayOfDate, pad } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { TimeFormat } from "./TutanotaConstants-chunk.js";
import { cleanMailAddress } from "./CommonCalendarUtils-chunk.js";

//#region src/common/misc/Formatter.ts
assertMainOrNode();
function formatShortMonthYear2Digit(date) {
	return lang.formats.shortMonthYear2Digit.format(date);
}
function formatMonthWithFullYear(date) {
	return lang.formats.monthWithFullYear.format(date);
}
function formatDate(date) {
	return lang.formats.simpleDate.format(date);
}
function formatDateWithMonth(date) {
	return lang.formats.dateWithMonth.format(date);
}
function formatDateWithWeekday(date) {
	if (date.getFullYear() === new Date().getFullYear()) return lang.formats.dateWithWeekday.format(date);
else return lang.formats.dateWithWeekdayAndYear.format(date);
}
function formatDateWithWeekdayAndYear(date) {
	return lang.formats.dateWithWeekdayAndYear.format(date);
}
function formatDateTimeFromYesterdayOn(date) {
	let dateString;
	let startOfToday = new Date().setHours(0, 0, 0, 0);
	let startOfYesterday = startOfToday - 864e5;
	if (date.getTime() >= startOfToday) dateString = "";
else if (startOfToday > date.getTime() && date.getTime() >= startOfYesterday) dateString = lang.get("yesterday_label");
else dateString = formatDateWithWeekday(date);
	return (dateString + " " + formatTime(date)).trim();
}
function formatTimeOrDateOrYesterday(date) {
	const startOfToday = new Date().setHours(0, 0, 0, 0);
	if (date.getTime() >= startOfToday) return formatTime(date);
	const yesterday = new Date(startOfToday);
	yesterday.setDate(yesterday.getDate() - 1);
	if (isSameDayOfDate(date, yesterday)) return lang.get("yesterday_label");
else if (date.getFullYear() === new Date().getFullYear()) return lang.formats.dateWithoutYear.format(date);
else return lang.formats.dateWithMonth.format(date);
}
function formatTime(date) {
	return lang.formats.time.format(date);
}
function formatShortTime(date) {
	return lang.formats.shortTime.format(date);
}
function formatDateTime(date) {
	return lang.formats.dateTime.format(date);
}
function formatDateWithWeekdayAndTime(date) {
	return lang.formats.dateWithWeekdayAndTime.format(date);
}
function formatStorageSize(sizeInBytes) {
	const units = [
		"B",
		"kB",
		"MB",
		"GB",
		"TB"
	];
	const narrowNoBreakSpace = "â€¯";
	let unitIndex = 0;
	while (sizeInBytes >= 1e3) {
		sizeInBytes /= 1e3;
		unitIndex++;
	}
	sizeInBytes = Math.floor(sizeInBytes * 10) / 10;
	return sizeInBytes + narrowNoBreakSpace + units[unitIndex];
}
function urlEncodeHtmlTags(text) {
	return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}
function convertTextToHtml(text) {
	return text.replace(/(\r)?\n/g, "<br>");
}
function getHourCycle(userSettings) {
	return userSettings.timeFormat === TimeFormat.TWELVE_HOURS ? "h12" : "h23";
}
function timeStringFromParts(hours, minutes, amPm) {
	let minutesString = pad(minutes, 2);
	if (amPm) if (hours === 0) return `12:${minutesString} am`;
else if (hours === 12) return `12:${minutesString} pm`;
else if (hours > 12) return `${hours - 12}:${minutesString} pm`;
else return `${hours}:${minutesString} am`;
else {
		let hoursString = pad(hours, 2);
		return hoursString + ":" + minutesString;
	}
}
function formatMailAddressFromParts(name, domain) {
	return cleanMailAddress(`${name}@${domain}`);
}

//#endregion
export { convertTextToHtml, formatDate, formatDateTime, formatDateTimeFromYesterdayOn, formatDateWithMonth, formatDateWithWeekday, formatDateWithWeekdayAndTime, formatDateWithWeekdayAndYear, formatMailAddressFromParts, formatMonthWithFullYear, formatShortMonthYear2Digit, formatShortTime, formatStorageSize, formatTime, formatTimeOrDateOrYesterday, getHourCycle, timeStringFromParts, urlEncodeHtmlTags };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,