import { assertNotNull, lazyMemoized } from "./dist2-chunk.js";
import { OperationType } from "./TutanotaConstants-chunk.js";
import { MailboxPropertiesTypeRef } from "./TypeRefs-chunk.js";
import { GroupInfoTypeRef } from "./TypeRefs2-chunk.js";
import { LimitReachedError } from "./RestError-chunk.js";
import { isUpdateFor, isUpdateForTypeRef } from "./EntityUpdateUtils-chunk.js";
import { UserError } from "./UserError-chunk.js";
import { isTutaMailAddress } from "./SharedMailUtils-chunk.js";
import { UpgradeRequiredError } from "./UpgradeRequiredError-chunk.js";
import { getAvailableMatchingPlans } from "./SubscriptionUtils-chunk.js";
import { getAvailableDomains } from "./MailAddressesUtils-chunk.js";

//#region src/common/settings/mailaddress/MailAddressTableModel.ts
let AddressStatus = function(AddressStatus$1) {
	AddressStatus$1[AddressStatus$1["Primary"] = 0] = "Primary";
	AddressStatus$1[AddressStatus$1["Alias"] = 1] = "Alias";
	AddressStatus$1[AddressStatus$1["DisabledAlias"] = 2] = "DisabledAlias";
	AddressStatus$1[AddressStatus$1["Custom"] = 3] = "Custom";
	return AddressStatus$1;
}({});
var MailAddressTableModel = class {
	nameMappings = null;
	onLegacyPlan = false;
	aliasCount = null;
	init = lazyMemoized(async () => {
		this.eventController.addEntityListener(this.entityEventsReceived);
		const userController = this.logins.getUserController();
		this.onLegacyPlan = userController.isLegacyPlan(await userController.getPlanType());
		await this.loadNames();
		this.redraw();
		await this.loadAliasCount();
		this.redraw();
	});
	constructor(entityClient, serviceExecutor, mailAddressFacade, logins, eventController, userGroupInfo, nameChanger, redraw) {
		this.entityClient = entityClient;
		this.serviceExecutor = serviceExecutor;
		this.mailAddressFacade = mailAddressFacade;
		this.logins = logins;
		this.eventController = eventController;
		this.userGroupInfo = userGroupInfo;
		this.nameChanger = nameChanger;
		this.redraw = redraw;
	}
	dispose() {
		this.eventController.removeEntityListener(this.entityEventsReceived);
	}
	userCanModifyAliases() {
		return this.logins.getUserController().isGlobalAdmin();
	}
	aliasLimitIncludesCustomDomains() {
		return this.onLegacyPlan;
	}
	addresses() {
		const { nameMappings } = this;
		if (nameMappings == null) return [];
		const primaryAddress = assertNotNull(this.userGroupInfo.mailAddress);
		const primaryAddressInfo = {
			name: nameMappings.get(primaryAddress) ?? "",
			address: primaryAddress,
			status: AddressStatus.Primary
		};
		const aliasesInfo = this.userGroupInfo.mailAddressAliases.slice().sort((a, b) => a.mailAddress > b.mailAddress ? 1 : -1).map(({ mailAddress, enabled }) => {
			const status = isTutaMailAddress(mailAddress) ? enabled ? AddressStatus.Alias : AddressStatus.DisabledAlias : AddressStatus.Custom;
			return {
				name: nameMappings.get(mailAddress) ?? "",
				address: mailAddress,
				status
			};
		});
		return [primaryAddressInfo, ...aliasesInfo];
	}
	async setAliasName(address, senderName) {
		this.nameMappings = await this.nameChanger.setSenderName(address, senderName);
		this.redraw();
	}
	/**
	* Add an alias.
	* @throws if an error occurred, such as a LimitReachedError if too many aliases were added
	*/
	async addAlias(alias, senderName) {
		try {
			await this.mailAddressFacade.addMailAlias(this.userGroupInfo.group, alias);
			await this.setAliasName(alias, senderName);
		} catch (e) {
			if (e instanceof LimitReachedError) await this.handleTooManyAliases();
			throw e;
		}
	}
	getAvailableDomains() {
		return getAvailableDomains(this.logins);
	}
	async setAliasStatus(address, restore) {
		await this.mailAddressFacade.setMailAliasStatus(this.userGroupInfo.group, address, restore);
		this.redraw();
		this.nameMappings = await this.nameChanger.removeSenderName(address);
		this.redraw();
	}
	defaultSenderName() {
		return this.userGroupInfo.name;
	}
	entityEventsReceived = async (updates) => {
		for (const update of updates) if (isUpdateForTypeRef(MailboxPropertiesTypeRef, update) && update.operation === OperationType.UPDATE) await this.loadNames();
else if (isUpdateFor(this.userGroupInfo, update) && update.operation === OperationType.UPDATE) {
			this.userGroupInfo = await this.entityClient.load(GroupInfoTypeRef, this.userGroupInfo._id);
			await this.loadAliasCount();
		}
		this.redraw();
	};
	async loadNames() {
		this.nameMappings = await this.nameChanger.getSenderNames();
	}
	async loadAliasCount() {
		this.aliasCount = await this.mailAddressFacade.getAliasCounters(this.userGroupInfo.group);
	}
	/**
	* Chooses the correct error to throw.
	* @throws UpgradeRequiredError if the customer can upgrade to a plan with more aliases
	* @throws UserError if the customer cannot add more aliases
	*/
	async handleTooManyAliases() {
		const plansWithMoreAliases = await getAvailableMatchingPlans(this.serviceExecutor, (config) => Number(config.nbrOfAliases) > this.userGroupInfo.mailAddressAliases.length);
		if (plansWithMoreAliases.length > 0) throw new UpgradeRequiredError("moreAliasesRequired_msg", plansWithMoreAliases);
else throw new UserError("adminMaxNbrOfAliasesReached_msg");
	}
};

//#endregion
export { AddressStatus, MailAddressTableModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,