import { assert, assertNotNull, clone, filterInt, noOp } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { CalendarAttendeeStatus, CalendarMethod, ConversationType, FeatureType, getAsEnumValue } from "./TutanotaConstants-chunk.js";
import { findAttendeeInAddresses } from "./CommonCalendarUtils-chunk.js";
import { findFirstPrivateCalendar } from "./CalendarUtils-chunk.js";
import { Dialog } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { UserError } from "./UserError-chunk.js";
import { RecipientField } from "./SharedMailUtils-chunk.js";
import { ResolveMode } from "./RecipientsModel-chunk.js";
import { CalendarNotificationModel, EventType, getEventType } from "./CalendarGuiUtils-chunk.js";
import { parseCalendarFile } from "./CalendarImporter-chunk.js";
import { isCustomizationEnabledForCustomer } from "./CustomerUtils-chunk.js";

//#region src/calendar-app/calendar/view/CalendarInvites.ts
async function getParsedEvent(fileData) {
	try {
		const { contents, method } = await parseCalendarFile(fileData);
		const uid = contents[0].event.uid;
		if (uid == null) return null;
		assert(!contents.some((c) => c.event.uid !== uid), "received invite with multiple events, but mismatched UIDs");
		return {
			events: contents.map((c) => c.event),
			uid,
			method: getAsEnumValue(CalendarMethod, method) || CalendarMethod.PUBLISH
		};
	} catch (e) {
		console.log(e);
		return null;
	}
}
async function showEventDetails(event, eventBubbleRect, mail) {
	const [latestEvent, { CalendarEventPopup }, { CalendarEventPreviewViewModel }, { htmlSanitizer }] = await Promise.all([
		getLatestEvent(event),
		import("./CalendarEventPopup2-chunk.js"),
		import("./CalendarEventPreviewViewModel-chunk.js"),
		import("./HtmlSanitizer2-chunk.js")
	]);
	let eventType;
	let editModelsFactory;
	let hasBusinessFeature;
	let ownAttendee = null;
	const lazyIndexEntry = async () => latestEvent.uid != null ? locator.calendarFacade.getEventsByUid(latestEvent.uid) : null;
	if (!locator.logins.getUserController().isInternalUser()) {
		eventType = EventType.EXTERNAL;
		editModelsFactory = () => new Promise(noOp);
		hasBusinessFeature = false;
	} else {
		const [calendarInfos, mailboxDetails, customer] = await Promise.all([
			(await locator.calendarModel()).getCalendarInfos(),
			locator.mailboxModel.getUserMailboxDetails(),
			locator.logins.getUserController().loadCustomer()
		]);
		const mailboxProperties = await locator.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot);
		const ownMailAddresses = mailboxProperties.mailAddressProperties.map(({ mailAddress }) => mailAddress);
		ownAttendee = findAttendeeInAddresses(latestEvent.attendees, ownMailAddresses);
		eventType = getEventType(latestEvent, calendarInfos, ownMailAddresses, locator.logins.getUserController());
		editModelsFactory = (mode) => locator.calendarEventModel(mode, latestEvent, mailboxDetails, mailboxProperties, mail);
		hasBusinessFeature = isCustomizationEnabledForCustomer(customer, FeatureType.BusinessFeatureEnabled) || await locator.logins.getUserController().isNewPaidPlan();
	}
	const viewModel = new CalendarEventPreviewViewModel(latestEvent, await locator.calendarModel(), eventType, hasBusinessFeature, ownAttendee, lazyIndexEntry, editModelsFactory);
	new CalendarEventPopup(viewModel, eventBubbleRect, htmlSanitizer).show();
}
async function getEventsFromFile(file, invitedConfidentially) {
	const dataFile = await locator.fileController.getAsDataFile(file);
	const contents = await getParsedEvent(dataFile);
	for (const event of contents?.events ?? []) event.invitedConfidentially = invitedConfidentially;
	return contents;
}
async function getLatestEvent(event) {
	const uid = event.uid;
	if (uid == null) return event;
	const existingEvents = await locator.calendarFacade.getEventsByUid(uid);
	const existingEvent = event.recurrenceId == null ? existingEvents?.progenitor : existingEvents?.alteredInstances.find((e) => e.recurrenceId === event.recurrenceId);
	if (existingEvent == null) return event;
	if (filterInt(existingEvent.sequence) < filterInt(event.sequence)) {
		const calendarModel = await locator.calendarModel();
		return await calendarModel.updateEventWithExternal(existingEvent, event);
	} else return existingEvent;
}
let ReplyResult = function(ReplyResult$1) {
	ReplyResult$1[ReplyResult$1["ReplyNotSent"] = 0] = "ReplyNotSent";
	ReplyResult$1[ReplyResult$1["ReplySent"] = 1] = "ReplySent";
	return ReplyResult$1;
}({});
var CalendarInviteHandler = class {
	constructor(mailboxModel, calendarModel, logins, calendarNotificationSender, sendMailModelFactory) {
		this.mailboxModel = mailboxModel;
		this.calendarModel = calendarModel;
		this.logins = logins;
		this.calendarNotificationSender = calendarNotificationSender;
		this.sendMailModelFactory = sendMailModelFactory;
	}
	/**
	* Sends a quick reply for the given event and saves the event to the first private calendar.
	* @param event the CalendarEvent to respond to, will be serialized and sent back with updated status, then saved.
	* @param attendee the attendee that should respond to the mail
	* @param decision the new status of the attendee
	* @param previousMail the mail to respond to
	*/
	async replyToEventInvitation(event, attendee, decision, previousMail, mailboxDetails) {
		const eventClone = clone(event);
		const foundAttendee = assertNotNull(findAttendeeInAddresses(eventClone.attendees, [attendee.address.address]), "attendee was not found in event clone");
		foundAttendee.status = decision;
		const notificationModel = new CalendarNotificationModel(this.calendarNotificationSender, this.logins);
		const responseModel = await this.getResponseModelForMail(previousMail, mailboxDetails, attendee.address.address);
		try {
			await notificationModel.send(eventClone, [], {
				responseModel,
				inviteModel: null,
				cancelModel: null,
				updateModel: null
			});
		} catch (e) {
			if (e instanceof UserError) {
				await Dialog.message(lang.makeTranslation("confirm_msg", e.message));
				return ReplyResult.ReplyNotSent;
			} else throw e;
		}
		const calendars = await this.calendarModel.getCalendarInfos();
		const type = getEventType(event, calendars, [attendee.address.address], this.logins.getUserController());
		if (type === EventType.SHARED_RO || type === EventType.LOCKED) return ReplyResult.ReplySent;
		const calendar = findFirstPrivateCalendar(calendars);
		if (calendar == null) return ReplyResult.ReplyNotSent;
		if (decision !== CalendarAttendeeStatus.DECLINED && eventClone.uid != null) {
			const dbEvents = await this.calendarModel.getEventsByUid(eventClone.uid);
			await this.calendarModel.processCalendarEventMessage(previousMail.sender.address, CalendarMethod.REQUEST, eventClone, [], dbEvents ?? {
				ownerGroup: calendar.group._id,
				progenitor: null,
				alteredInstances: []
			});
		}
		return ReplyResult.ReplySent;
	}
	async getResponseModelForMail(previousMail, mailboxDetails, responder) {
		const mailboxProperties = await this.mailboxModel.getMailboxProperties(mailboxDetails.mailboxGroupRoot);
		const model = await this.sendMailModelFactory(mailboxDetails, mailboxProperties);
		await model.initAsResponse({
			previousMail,
			conversationType: ConversationType.REPLY,
			senderMailAddress: responder,
			recipients: [],
			attachments: [],
			subject: "",
			bodyText: "",
			replyTos: []
		}, new Map());
		await model.addRecipient(RecipientField.TO, previousMail.sender, ResolveMode.Eager);
		model.setConfidential(previousMail.confidential);
		return model;
	}
};

//#endregion
export { CalendarInviteHandler, ReplyResult, getEventsFromFile, getLatestEvent, showEventDetails };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,