import { __toESM } from "./chunk-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { LazyLoaded, clone, deduplicate, localeCompare, noOp, ofClass } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { elementIdPart, getLetId, listIdPart } from "./EntityUtils-chunk.js";
import { EmailTemplateTypeRef, createKnowledgeBaseEntry, createKnowledgeBaseEntryKeyword } from "./TypeRefs-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { NotFoundError } from "./RestError-chunk.js";
import { ButtonColor, ButtonType } from "./Button-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { Dialog, TextField, createAsyncDropdown } from "./Dialog-chunk.js";
import { ButtonSize } from "./IconButton-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { UserError } from "./UserError-chunk.js";
import { showUserError } from "./ErrorHandlerImpl-chunk.js";
import { HtmlEditor } from "./HtmlEditor-chunk.js";
import { TEMPLATE_SHORTCUT_PREFIX } from "./TemplatePopupModel-chunk.js";

//#region src/mail-app/settings/KnowledgeBaseEditorModel.ts
var import_stream = __toESM(require_stream(), 1);
var KnowledgeBaseEditorModel = class {
	title;
	keywords;
	_entityClient;
	_templateGroupRoot;
	entry;
	availableTemplates;
	_descriptionProvider;
	constructor(entry, templateGroupInstances, entityClient) {
		this.title = (0, import_stream.default)(entry ? entry.title : "");
		this.keywords = (0, import_stream.default)(entry ? keywordsToString(entry.keywords) : "");
		this._entityClient = entityClient;
		this._templateGroupRoot = templateGroupInstances;
		this.entry = entry ? clone(entry) : createKnowledgeBaseEntry({
			description: "",
			title: "",
			keywords: []
		});
		this._descriptionProvider = null;
		this.availableTemplates = new LazyLoaded(() => {
			return this._entityClient.loadAll(EmailTemplateTypeRef, this._templateGroupRoot.templates);
		}, []);
	}
	isUpdate() {
		return this.entry._id != null;
	}
	save() {
		if (!this.title()) return Promise.reject(new UserError("emptyTitle_msg"));
		this.entry.title = this.title();
		this.entry.keywords = stringToKeywords(this.keywords());
		if (this._descriptionProvider) this.entry.description = this._descriptionProvider();
		if (this.entry._id) return this._entityClient.update(this.entry).catch(ofClass(NotFoundError, noOp));
else {
			this.entry._ownerGroup = this._templateGroupRoot._id;
			return this._entityClient.setup(this._templateGroupRoot.knowledgeBase, this.entry);
		}
	}
	setDescriptionProvider(provider) {
		this._descriptionProvider = provider;
	}
};
/**
* get keywords as a space separated string
* @param keywords
*/
function keywordsToString(keywords) {
	return keywords.map((keyword) => keyword.keyword).join(" ");
}
function stringToKeywords(keywords) {
	return deduplicate(keywords.split(" ").filter(Boolean)).sort(localeCompare).map((keyword) => createKnowledgeBaseEntryKeyword({ keyword }));
}

//#endregion
//#region src/mail-app/settings/KnowledgeBaseEditor.ts
function showKnowledgeBaseEditor(entry, templateGroupRoot) {
	const { entityClient } = locator;
	const editorModel = new KnowledgeBaseEditorModel(entry, templateGroupRoot, entityClient);
	const closeDialog = () => {
		dialog.close();
	};
	const saveAction = () => {
		editorModel.save().then(closeDialog).catch(ofClass(UserError, showUserError));
	};
	const headerBarAttrs = {
		left: [{
			label: "cancel_action",
			click: closeDialog,
			type: ButtonType.Secondary
		}],
		right: [{
			label: "save_action",
			click: saveAction,
			type: ButtonType.Primary
		}],
		middle: editorModel.entry._id ? "editEntry_label" : "createEntry_action"
	};
	const dialog = Dialog.editDialog(headerBarAttrs, KnowledgeBaseEditor, editorModel);
	dialog.show();
}
var KnowledgeBaseEditor = class {
	entryContentEditor;
	linkedTemplateButtonAttrs;
	constructor(vnode) {
		const model = vnode.attrs;
		this.linkedTemplateButtonAttrs = {
			title: "linkTemplate_label",
			icon: Icons.Add,
			colors: ButtonColor.Elevated,
			click: (e, dom) => {
				e.stopPropagation();
				createAsyncDropdown({ lazyButtons: () => this._createDropdownChildAttrs(model) })(e, dom);
			},
			size: ButtonSize.Compact
		};
		this.entryContentEditor = new HtmlEditor("content_label").showBorders().setMinHeight(500).enableToolbar().setToolbarOptions({ customButtonAttrs: [this.linkedTemplateButtonAttrs] });
		model.setDescriptionProvider(() => {
			return this.entryContentEditor.getValue();
		});
		if (model.isUpdate()) this.entryContentEditor.setValue(model.entry.description);
	}
	_createDropdownChildAttrs(model) {
		return model.availableTemplates.getAsync().then((templates) => {
			if (templates.length > 0) return templates.map((template) => {
				return {
					label: lang.makeTranslation("tag", template.tag),
					click: () => this.entryContentEditor.editor.insertHTML(createTemplateLink(template))
				};
			});
else return [{
				label: "noEntries_msg",
				click: noOp
			}];
		});
	}
	view(vnode) {
		const model = vnode.attrs;
		return mithril_default("", [
			mithril_default(TextField, {
				label: "title_placeholder",
				value: model.title(),
				oninput: model.title
			}),
			mithril_default(TextField, {
				label: "keywords_label",
				value: model.keywords(),
				oninput: model.keywords
			}),
			mithril_default(this.entryContentEditor)
		]);
	}
};
function createTemplateLink(template) {
	const listId = listIdPart(getLetId(template));
	const elementId = elementIdPart(getLetId(template));
	return `<a href="tutatemplate:${listId}/${elementId}">${TEMPLATE_SHORTCUT_PREFIX + template.tag}</a>`;
}

//#endregion
export { showKnowledgeBaseEditor };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,