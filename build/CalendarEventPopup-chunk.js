import { mithril_default } from "./mithril-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import { modal } from "./RootView-chunk.js";
import { px } from "./size-chunk.js";
import { prepareCalendarDescription } from "./CalendarUtils-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { DROPDOWN_MARGIN, Dialog, createAsyncDropdown, showDropdown } from "./Dialog-chunk.js";
import { BootIcons } from "./Icon-chunk.js";
import { IconButton } from "./IconButton-chunk.js";
import { convertTextToHtml } from "./Formatter-chunk.js";
import { showDeletePopup } from "./CalendarGuiUtils-chunk.js";
import { EventPreviewView } from "./EventPreviewView-chunk.js";

//#region src/calendar-app/calendar/gui/eventpopup/CalendarEventPopup.ts
var CalendarEventPopup = class {
	_shortcuts = [];
	sanitizedDescription;
	dom = null;
	focusedBeforeShown = null;
	/**
	* @param model
	* @param eventBubbleRect the rect where the event bubble was displayed that was clicked (if any)
	* @param htmlSanitizer
	*/
	constructor(model, eventBubbleRect, htmlSanitizer) {
		this.model = model;
		this.eventBubbleRect = eventBubbleRect;
		this.sanitizedDescription = prepareCalendarDescription(model.calendarEvent.description, (s) => htmlSanitizer.sanitizeHTML(convertTextToHtml(s), { blockExternalContent: true }).html);
		this.setupShortcuts();
		this.view = this.view.bind(this);
	}
	handleDeleteButtonClick = async (ev, receiver) => {
		showDeletePopup(this.model, ev, receiver, () => this.close());
	};
	handleEditButtonClick = (ev, receiver) => {
		if (this.model.isRepeatingForEditing) createAsyncDropdown({
			lazyButtons: () => Promise.resolve([{
				label: "updateOneCalendarEvent_action",
				click: () => {
					this.model.editSingle();
					this.close();
				}
			}, {
				label: "updateAllCalendarEvents_action",
				click: () => {
					this.model.editAll();
					this.close();
				}
			}]),
			width: 300
		})(ev, receiver);
else {
			this.model.editAll();
			this.close();
		}
	};
	handleSendUpdatesClick = async () => {
		const confirmed = await Dialog.confirm("sendUpdates_msg");
		if (confirmed) await this.model.sendUpdates();
		this.close();
	};
	view() {
		return mithril_default(".abs.elevated-bg.plr.pb.border-radius.dropdown-shadow.flex.flex-column", {
			style: {
				width: px(Math.min(window.innerWidth - DROPDOWN_MARGIN * 2, 400)),
				opacity: "0",
				margin: "1px"
			},
			oncreate: (vnode) => {
				this.dom = vnode.dom;
				setTimeout(() => {
					showDropdown(this.eventBubbleRect, this.dom, this.dom.offsetHeight, 400);
					const firstButton = vnode.dom.firstElementChild?.firstElementChild;
					firstButton?.focus();
				}, 24);
			}
		}, [mithril_default(".flex.flex-end", [
			this.renderSendUpdateButton(),
			this.renderEditButton(),
			this.renderDeleteButton(),
			this.renderCloseButton()
		]), mithril_default(".flex-grow.scroll.visible-scrollbar", [mithril_default(EventPreviewView, {
			event: this.model.calendarEvent,
			sanitizedDescription: this.sanitizedDescription,
			participation: this.model.getParticipationSetterAndThen(() => this.close())
		})])]);
	}
	renderEditButton() {
		if (!this.model.canEdit) return null;
		return mithril_default(IconButton, {
			title: "edit_action",
			icon: Icons.Edit,
			click: this.handleEditButtonClick
		});
	}
	renderDeleteButton() {
		if (!this.model.canDelete) return null;
		return mithril_default(IconButton, {
			title: "delete_action",
			icon: Icons.Trash,
			click: this.handleDeleteButtonClick
		});
	}
	renderSendUpdateButton() {
		if (!this.model.canSendUpdates) return null;
		return mithril_default(IconButton, {
			title: "sendUpdates_label",
			click: () => this.handleSendUpdatesClick(),
			icon: BootIcons.Mail
		});
	}
	renderCloseButton() {
		return mithril_default(IconButton, {
			title: "close_alt",
			click: () => this.close(),
			icon: Icons.Cancel
		});
	}
	show() {
		this.focusedBeforeShown = document.activeElement;
		modal.display(this, false);
	}
	close() {
		modal.remove(this);
	}
	backgroundClick(e) {
		modal.remove(this);
	}
	hideAnimation() {
		return Promise.resolve();
	}
	onClose() {
		this.close();
	}
	shortcuts() {
		return this._shortcuts;
	}
	popState(e) {
		modal.remove(this);
		return false;
	}
	callingElement() {
		return this.focusedBeforeShown;
	}
	setupShortcuts() {
		const close = {
			key: Keys.ESC,
			exec: () => this.close(),
			help: "close_alt"
		};
		const edit = {
			key: Keys.E,
			exec: () => this.handleEditButtonClick(new MouseEvent("click", {}), this.dom),
			help: "edit_action"
		};
		const sendUpdates = {
			key: Keys.R,
			exec: this.handleSendUpdatesClick,
			help: "sendUpdates_label"
		};
		const remove = {
			key: Keys.DELETE,
			exec: () => this.handleDeleteButtonClick(new MouseEvent("click", {}), this.dom),
			help: "delete_action"
		};
		this._shortcuts.push(close);
		if (this.model.canSendUpdates) this._shortcuts.push(sendUpdates);
		if (this.model.canEdit) this._shortcuts.push(edit);
		if (this.model.canDelete) this._shortcuts.push(remove);
	}
};

//#endregion
export { CalendarEventPopup };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,