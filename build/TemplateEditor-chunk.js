import { __toESM } from "./chunk-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { clone, difference, downcast, getFirstOrThrow, ofClass, remove } from "./dist2-chunk.js";
import { lang, languageByCode, languages } from "./LanguageViewModel-chunk.js";
import { getElementId, isSameId } from "./EntityUtils-chunk.js";
import { EmailTemplateTypeRef, createEmailTemplate, createEmailTemplateContent } from "./TypeRefs-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { ButtonType } from "./Button-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { Autocapitalize, Dialog, TextField, createDropdown } from "./Dialog-chunk.js";
import { ButtonSize, IconButton } from "./IconButton-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { UserError } from "./UserError-chunk.js";
import { showUserError } from "./ErrorHandlerImpl-chunk.js";
import { HtmlEditor } from "./HtmlEditor-chunk.js";

//#region src/mail-app/settings/TemplateEditorModel.ts
var import_stream = __toESM(require_stream(), 1);
var TemplateEditorModel = class {
	template;
	title;
	tag;
	selectedContent;
	_templateGroupRoot;
	_entityClient;
	_contentProvider;
	constructor(template, templateGroupRoot, entityClient) {
		this.template = template ? clone(template) : createEmailTemplate({
			tag: "",
			title: "",
			contents: []
		});
		this.title = (0, import_stream.default)("");
		this.tag = (0, import_stream.default)("");
		const contents = this.template.contents;
		this.selectedContent = (0, import_stream.default)(contents.length > 0 ? getFirstOrThrow(contents) : this.createContent(lang.code));
		this._templateGroupRoot = templateGroupRoot;
		this._entityClient = entityClient;
		this._contentProvider = null;
	}
	isUpdate() {
		return this.template._id != null;
	}
	setContentProvider(provider) {
		this._contentProvider = provider;
	}
	createContent(languageCode) {
		const emailTemplateContent = createEmailTemplateContent({
			languageCode,
			text: ""
		});
		this.template.contents.push(emailTemplateContent);
		return emailTemplateContent;
	}
	updateContent() {
		const selectedContent = this.selectedContent();
		if (selectedContent && this._contentProvider) selectedContent.text = this._contentProvider();
	}
	removeContent() {
		const content = this.selectedContent();
		if (content) remove(this.template.contents, content);
	}
	/**
	* Returns all languages that are available for creating new template content. Returns them in alphabetic order sorted by name.
	* @returns {Array<{name: string, value: LanguageCode}>}
	*/
	getAdditionalLanguages() {
		return difference(languages, this.getAddedLanguages(), (lang1, lang2) => lang1.code === lang2.code);
	}
	getAddedLanguages() {
		return this.template.contents.map((content) => languageByCode[getLanguageCode(content)]);
	}
	tagAlreadyExists() {
		if (this.template._id) return this._entityClient.loadAll(EmailTemplateTypeRef, this._templateGroupRoot.templates).then((allTemplates) => {
			const filteredTemplates = allTemplates.filter((template) => !isSameId(getElementId(this.template), getElementId(template)));
			return filteredTemplates.some((template) => template.tag.toLowerCase() === this.template.tag.toLowerCase());
		});
else return this._entityClient.loadAll(EmailTemplateTypeRef, this._templateGroupRoot.templates).then((allTemplates) => {
			return allTemplates.some((template) => template.tag.toLowerCase() === this.template.tag.toLowerCase());
		});
	}
	save() {
		if (!this.title()) return Promise.reject(new UserError("emptyTitle_msg"));
		if (!this.tag()) return Promise.reject(new UserError("emptyShortcut_msg"));
		this.updateContent();
		this.template.title = this.title().trim();
		this.template.tag = this.tag().trim();
		return this.tagAlreadyExists().then(async (exists) => {
			if (exists) return Promise.reject(new UserError("templateShortcutExists_msg"));
else if (this.template._id) return this._entityClient.update(this.template);
else {
				this.template._ownerGroup = this._templateGroupRoot._id;
				return this._entityClient.setup(this._templateGroupRoot.templates, this.template);
			}
		});
	}
};
function getLanguageCode(content) {
	return downcast(content.languageCode);
}
function getLanguageName(content) {
	return languageByCode[getLanguageCode(content)].textId;
}

//#endregion
//#region src/mail-app/settings/TemplateEditor.ts
function showTemplateEditor(template, templateGroupRoot) {
	const entityClient = locator.entityClient;
	const editorModel = new TemplateEditorModel(template, templateGroupRoot, entityClient);
	const dialogCloseAction = () => {
		dialog.close();
	};
	const saveAction = () => {
		editorModel.save().then(() => {
			dialogCloseAction();
		}).catch(ofClass(UserError, showUserError));
	};
	let headerBarAttrs = {
		left: [{
			label: "cancel_action",
			click: dialogCloseAction,
			type: ButtonType.Secondary
		}],
		right: [{
			label: "save_action",
			click: saveAction,
			type: ButtonType.Primary
		}],
		middle: editorModel.template._id ? "editTemplate_action" : "createTemplate_action"
	};
	const dialog = Dialog.editDialog(headerBarAttrs, TemplateEditor, { model: editorModel });
	dialog.show();
}
var TemplateEditor = class {
	model;
	templateContentEditor;
	constructor(vnode) {
		this.model = vnode.attrs.model;
		this.templateContentEditor = new HtmlEditor("content_label").showBorders().setMinHeight(500).enableToolbar();
		this.model.setContentProvider(() => {
			return this.templateContentEditor.getValue();
		});
		this.model.title(this.model.template.title);
		this.model.tag(this.model.template.tag);
		const content = this.model.selectedContent();
		if (content) this.templateContentEditor.setValue(content.text);
	}
	view() {
		return mithril_default("", [
			mithril_default(TextField, {
				label: "title_placeholder",
				value: this.model.title(),
				oninput: this.model.title
			}),
			mithril_default(TextField, {
				label: "shortcut_label",
				autocapitalize: Autocapitalize.none,
				value: this.model.tag(),
				oninput: this.model.tag
			}),
			mithril_default(TextField, {
				label: "language_label",
				value: this.model.selectedContent() ? lang.getTranslationText(getLanguageName(this.model.selectedContent())) : "",
				injectionsRight: () => mithril_default(".flex.ml-between-s", [this.model.getAddedLanguages().length > 1 ? [this.renderRemoveLangButton(), this.renderSelectLangButton()] : null, this.renderAddLangButton()]),
				isReadOnly: true
			}),
			mithril_default(this.templateContentEditor)
		]);
	}
	renderAddLangButton() {
		return mithril_default(IconButton, {
			title: "addLanguage_action",
			icon: Icons.Add,
			size: ButtonSize.Compact,
			click: createDropdown({
				lazyButtons: () => this.model.getAdditionalLanguages().sort((a, b) => lang.get(a.textId).localeCompare(lang.get(b.textId))).map((lang$1) => this.createAddNewLanguageButtonAttrs(lang$1)),
				width: 250
			})
		});
	}
	renderSelectLangButton() {
		return mithril_default(IconButton, {
			title: "languages_label",
			icon: Icons.Language,
			size: ButtonSize.Compact,
			click: createDropdown({ lazyButtons: () => {
				this.model.updateContent();
				return this.model.template.contents.map((content) => {
					return {
						label: getLanguageName(content),
						click: () => {
							this.model.selectedContent(content);
							this.templateContentEditor.setValue(content.text);
						}
					};
				});
			} })
		});
	}
	renderRemoveLangButton() {
		return mithril_default(IconButton, {
			title: "removeLanguage_action",
			icon: Icons.Trash,
			click: () => this.removeLanguage(),
			size: ButtonSize.Compact
		});
	}
	removeLanguage() {
		return Dialog.confirm(lang.getTranslation("deleteLanguageConfirmation_msg", { "{language}": getLanguageName(this.model.selectedContent()) })).then((confirmed) => {
			if (confirmed) {
				this.model.removeContent();
				this.model.selectedContent(this.model.template.contents[0]);
				this.templateContentEditor.setValue(this.model.selectedContent().text);
			}
			return confirmed;
		});
	}
	createAddNewLanguageButtonAttrs(lang$1) {
		return {
			label: lang$1.textId,
			click: () => {
				this.model.updateContent();
				const newContent = this.model.createContent(lang$1.code);
				this.model.selectedContent(newContent);
				this.templateContentEditor.setValue("");
			}
		};
	}
};

//#endregion
export { getLanguageCode, showTemplateEditor };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,