import { assertMainOrNode, isDesktop } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { lazyStringValue, neverNull } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { styles } from "./styles-chunk.js";
import { stateBgHover, theme } from "./theme-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import { isKeyPressed } from "./KeyManager-chunk.js";
import { px, size } from "./size-chunk.js";
import { handleUncaughtError } from "./ErrorHandler-chunk.js";
import { DropType } from "./Dialog-chunk.js";
import { Icon } from "./Icon-chunk.js";
import { fileListToArray } from "./FileUtils-chunk.js";

//#region src/common/gui/base/NavButton.ts
assertMainOrNode();
var NavButton = class {
	_domButton;
	_draggedOver;
	_dropCounter;
	constructor() {
		this._draggedOver = false;
		this._dropCounter = 0;
	}
	view(vnode) {
		const a = vnode.attrs;
		const linkAttrs = this.createButtonAttributes(a);
		const icon = a.icon?.();
		const children = [
			a.leftInjection?.() ?? null,
			icon ? mithril_default(Icon, {
				icon,
				class: this._getIconClass(a),
				style: { fill: isNavButtonSelected(a) || this._draggedOver ? getColors(a.colors).button_selected : getColors(a.colors).button }
			}) : null,
			!a.hideLabel ? mithril_default("span.label.click.text-ellipsis" + (!a.vertical && icon ? ".pl-m" : ""), lang.getTranslationText(a.label)) : null
		];
		if (this._isExternalUrl(a.href)) return mithril_default(this._getNavButtonClass(a), linkAttrs, children);
else return mithril_default(mithril_default.route.Link, linkAttrs, children);
	}
	_getUrl(href) {
		return lazyStringValue(href);
	}
	_getNavButtonClass(a) {
		return "a.nav-button.noselect.items-center.click.plr-button.no-text-decoration.button-height.border-radius" + (a.vertical ? ".col" : "") + (!a.centred ? ".flex-start" : ".flex-center") + (a.disableHoverBackground ? "" : ".state-bg") + (a.disabled ? ".no-hover" : "") + (a.fillSpaceAround ?? true ? ".flex-no-shrink" : "");
	}
	_getIconClass(a) {
		const isSelected = isNavButtonSelected(a);
		if (a.colors === NavButtonColor.Header && !styles.isDesktopLayout()) return "flex-end items-center icon-xl" + (isSelected ? " selected" : "");
else if (a.small === true) return "flex-center items-center icon" + (isSelected ? " selected" : "");
else return "flex-center items-center icon-large" + (isSelected ? " selected" : "");
	}
	_isExternalUrl(href) {
		let url = this._getUrl(href);
		return url != null ? url.indexOf("http") === 0 : false;
	}
	createButtonAttributes(a) {
		let attr = {
			role: "button",
			href: this._getUrl(a.href),
			style: {
				color: isNavButtonSelected(a) || this._draggedOver ? getColors(a.colors).button_selected : getColors(a.colors).button,
				"font-size": a.fontSize ? px(a.fontSize) : "",
				background: isNavButtonSelected(a) && a.persistentBackground || this._draggedOver ? stateBgHover : ""
			},
			title: lang.getTranslationText(a.label),
			target: this._isExternalUrl(a.href) ? "_blank" : undefined,
			selector: this._getNavButtonClass(a),
			onclick: (e) => this.click(e, a, e.target),
			onkeyup: (e, dom) => {
				if (isKeyPressed(e.key, Keys.SPACE)) this.click(e, a, dom);
			},
			onfocus: a.onfocus,
			onblur: a.onblur,
			onkeydown: a.onkeydown,
			"data-testid": `btn:${lang.getTestId(a.label)}`
		};
		if (a.dropHandler) {
			attr.ondragenter = (ev) => {
				this._dropCounter++;
				this._draggedOver = true;
				ev.preventDefault();
			};
			attr.ondragleave = (ev) => {
				this._dropCounter--;
				if (this._dropCounter === 0) this._draggedOver = false;
				ev.preventDefault();
			};
			attr.ondragover = (ev) => {
				ev.preventDefault();
			};
			attr.ondrop = (ev) => {
				this._dropCounter = 0;
				this._draggedOver = false;
				ev.preventDefault();
				ev.stopPropagation();
				if (ev.dataTransfer?.getData(DropType.Mail)) {
					let dropData = {
						dropType: DropType.Mail,
						mailId: ev.dataTransfer.getData(DropType.Mail)
					};
					neverNull(a.dropHandler)(dropData);
				} else if (isDesktop() && ev.dataTransfer?.files && ev.dataTransfer.files.length > 0) neverNull(a.dropHandler)({
					dropType: DropType.ExternalFile,
					files: fileListToArray(ev.dataTransfer.files)
				});
else console.error("received onDrop DragEvent has invalid DropType or is unsupported on this platform!");
			};
		}
		return attr;
	}
	click(event, a, dom) {
		if (!this._isExternalUrl(a.href)) {
			mithril_default.route.set(this._getUrl(a.href));
			try {
				if (a.click != null) a.click(event, dom);
				event.preventDefault();
			} catch (e) {
				handleUncaughtError(e);
			}
		}
	}
	getHeight() {
		return size.button_height;
	}
};
let NavButtonColor = function(NavButtonColor$1) {
	NavButtonColor$1["Header"] = "header";
	NavButtonColor$1["Nav"] = "nav";
	NavButtonColor$1["Content"] = "content";
	return NavButtonColor$1;
}({});
function getColors(buttonColors) {
	switch (buttonColors) {
		case NavButtonColor.Header: return {
			button: styles.isDesktopLayout() ? theme.header_button : theme.content_accent,
			button_selected: styles.isDesktopLayout() ? theme.header_button_selected : theme.content_accent
		};
		case NavButtonColor.Nav: return {
			button: theme.navigation_button,
			button_selected: theme.navigation_button_selected
		};
		default: return {
			button: theme.content_button,
			button_selected: theme.content_button_selected
		};
	}
}
function isNavButtonSelected(a) {
	if (typeof a.isSelectedPrefix === "boolean") return a.isSelectedPrefix;
	const selectedPrefix = a.isSelectedPrefix || lazyStringValue(a.href);
	return isSelectedPrefix(selectedPrefix);
}
function isSelectedPrefix(href) {
	const current = mithril_default.route.get();
	return href !== "" && (current === href || current.indexOf(href + "/") === 0 || current.indexOf(href + "?") === 0);
}

//#endregion
export { NavButton, NavButtonColor, isNavButtonSelected, isSelectedPrefix };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,