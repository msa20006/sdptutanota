import { ApplyLabelServicePostInTypeRef, CalendarDeleteDataTypeRef, CreateGroupPostReturnTypeRef, CreateMailFolderDataTypeRef, CreateMailFolderReturnTypeRef, CreateMailGroupDataTypeRef, CustomerAccountCreateDataTypeRef, DeleteGroupDataTypeRef, DeleteMailDataTypeRef, DeleteMailFolderDataTypeRef, DraftCreateDataTypeRef, DraftCreateReturnTypeRef, DraftUpdateDataTypeRef, DraftUpdateReturnTypeRef, EncryptTutanotaPropertiesDataTypeRef, EntropyDataTypeRef, ExternalUserDataTypeRef, GroupInvitationDeleteDataTypeRef, GroupInvitationPostDataTypeRef, GroupInvitationPostReturnTypeRef, GroupInvitationPutDataTypeRef, ImportMailGetInTypeRef, ImportMailGetOutTypeRef, ImportMailPostInTypeRef, ImportMailPostOutTypeRef, ListUnsubscribeDataTypeRef, MailExportTokenServicePostOutTypeRef, ManageLabelServiceDeleteInTypeRef, ManageLabelServicePostInTypeRef, MoveMailDataTypeRef, NewsInTypeRef, NewsOutTypeRef, ReceiveInfoServiceDataTypeRef, ReportMailPostDataTypeRef, SendDraftDataTypeRef, SendDraftReturnTypeRef, SimpleMoveMailPostInTypeRef, TranslationGetInTypeRef, TranslationGetOutTypeRef, UnreadMailStatePostInTypeRef, UpdateMailFolderDataTypeRef, UserAccountCreateDataTypeRef, UserAreaGroupDeleteDataTypeRef, UserAreaGroupPostDataTypeRef } from "./TypeRefs-chunk.js";

//#region src/common/api/entities/tutanota/Services.ts
const ApplyLabelService = Object.freeze({
	app: "tutanota",
	name: "ApplyLabelService",
	get: null,
	post: {
		data: ApplyLabelServicePostInTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const CalendarService = Object.freeze({
	app: "tutanota",
	name: "CalendarService",
	get: null,
	post: {
		data: UserAreaGroupPostDataTypeRef,
		return: CreateGroupPostReturnTypeRef
	},
	put: null,
	delete: {
		data: CalendarDeleteDataTypeRef,
		return: null
	}
});
const ContactListGroupService = Object.freeze({
	app: "tutanota",
	name: "ContactListGroupService",
	get: null,
	post: {
		data: UserAreaGroupPostDataTypeRef,
		return: CreateGroupPostReturnTypeRef
	},
	put: null,
	delete: {
		data: UserAreaGroupDeleteDataTypeRef,
		return: null
	}
});
const CustomerAccountService = Object.freeze({
	app: "tutanota",
	name: "CustomerAccountService",
	get: null,
	post: {
		data: CustomerAccountCreateDataTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const DraftService = Object.freeze({
	app: "tutanota",
	name: "DraftService",
	get: null,
	post: {
		data: DraftCreateDataTypeRef,
		return: DraftCreateReturnTypeRef
	},
	put: {
		data: DraftUpdateDataTypeRef,
		return: DraftUpdateReturnTypeRef
	},
	delete: null
});
const EncryptTutanotaPropertiesService = Object.freeze({
	app: "tutanota",
	name: "EncryptTutanotaPropertiesService",
	get: null,
	post: {
		data: EncryptTutanotaPropertiesDataTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const EntropyService = Object.freeze({
	app: "tutanota",
	name: "EntropyService",
	get: null,
	post: null,
	put: {
		data: EntropyDataTypeRef,
		return: null
	},
	delete: null
});
const ExternalUserService = Object.freeze({
	app: "tutanota",
	name: "ExternalUserService",
	get: null,
	post: {
		data: ExternalUserDataTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const GroupInvitationService = Object.freeze({
	app: "tutanota",
	name: "GroupInvitationService",
	get: null,
	post: {
		data: GroupInvitationPostDataTypeRef,
		return: GroupInvitationPostReturnTypeRef
	},
	put: {
		data: GroupInvitationPutDataTypeRef,
		return: null
	},
	delete: {
		data: GroupInvitationDeleteDataTypeRef,
		return: null
	}
});
const ImportMailService = Object.freeze({
	app: "tutanota",
	name: "ImportMailService",
	get: {
		data: ImportMailGetInTypeRef,
		return: ImportMailGetOutTypeRef
	},
	post: {
		data: ImportMailPostInTypeRef,
		return: ImportMailPostOutTypeRef
	},
	put: null,
	delete: null
});
const ListUnsubscribeService = Object.freeze({
	app: "tutanota",
	name: "ListUnsubscribeService",
	get: null,
	post: {
		data: ListUnsubscribeDataTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const MailExportTokenService = Object.freeze({
	app: "tutanota",
	name: "MailExportTokenService",
	get: null,
	post: {
		data: null,
		return: MailExportTokenServicePostOutTypeRef
	},
	put: null,
	delete: null
});
const MailFolderService = Object.freeze({
	app: "tutanota",
	name: "MailFolderService",
	get: null,
	post: {
		data: CreateMailFolderDataTypeRef,
		return: CreateMailFolderReturnTypeRef
	},
	put: {
		data: UpdateMailFolderDataTypeRef,
		return: null
	},
	delete: {
		data: DeleteMailFolderDataTypeRef,
		return: null
	}
});
const MailGroupService = Object.freeze({
	app: "tutanota",
	name: "MailGroupService",
	get: null,
	post: {
		data: CreateMailGroupDataTypeRef,
		return: null
	},
	put: null,
	delete: {
		data: DeleteGroupDataTypeRef,
		return: null
	}
});
const MailService = Object.freeze({
	app: "tutanota",
	name: "MailService",
	get: null,
	post: null,
	put: null,
	delete: {
		data: DeleteMailDataTypeRef,
		return: null
	}
});
const ManageLabelService = Object.freeze({
	app: "tutanota",
	name: "ManageLabelService",
	get: null,
	post: {
		data: ManageLabelServicePostInTypeRef,
		return: null
	},
	put: null,
	delete: {
		data: ManageLabelServiceDeleteInTypeRef,
		return: null
	}
});
const MoveMailService = Object.freeze({
	app: "tutanota",
	name: "MoveMailService",
	get: null,
	post: {
		data: MoveMailDataTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const NewsService = Object.freeze({
	app: "tutanota",
	name: "NewsService",
	get: {
		data: null,
		return: NewsOutTypeRef
	},
	post: {
		data: NewsInTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const ReceiveInfoService = Object.freeze({
	app: "tutanota",
	name: "ReceiveInfoService",
	get: null,
	post: {
		data: ReceiveInfoServiceDataTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const ReportMailService = Object.freeze({
	app: "tutanota",
	name: "ReportMailService",
	get: null,
	post: {
		data: ReportMailPostDataTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const SendDraftService = Object.freeze({
	app: "tutanota",
	name: "SendDraftService",
	get: null,
	post: {
		data: SendDraftDataTypeRef,
		return: SendDraftReturnTypeRef
	},
	put: null,
	delete: null
});
const SimpleMoveMailService = Object.freeze({
	app: "tutanota",
	name: "SimpleMoveMailService",
	get: null,
	post: {
		data: SimpleMoveMailPostInTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const TemplateGroupService = Object.freeze({
	app: "tutanota",
	name: "TemplateGroupService",
	get: null,
	post: {
		data: UserAreaGroupPostDataTypeRef,
		return: CreateGroupPostReturnTypeRef
	},
	put: null,
	delete: {
		data: UserAreaGroupDeleteDataTypeRef,
		return: null
	}
});
const TranslationService = Object.freeze({
	app: "tutanota",
	name: "TranslationService",
	get: {
		data: TranslationGetInTypeRef,
		return: TranslationGetOutTypeRef
	},
	post: null,
	put: null,
	delete: null
});
const UnreadMailStateService = Object.freeze({
	app: "tutanota",
	name: "UnreadMailStateService",
	get: null,
	post: {
		data: UnreadMailStatePostInTypeRef,
		return: null
	},
	put: null,
	delete: null
});
const UserAccountService = Object.freeze({
	app: "tutanota",
	name: "UserAccountService",
	get: null,
	post: {
		data: UserAccountCreateDataTypeRef,
		return: null
	},
	put: null,
	delete: null
});

//#endregion
export { ApplyLabelService, CalendarService, ContactListGroupService, CustomerAccountService, DraftService, EncryptTutanotaPropertiesService, EntropyService, ExternalUserService, GroupInvitationService, ListUnsubscribeService, MailExportTokenService, MailFolderService, MailGroupService, MailService, ManageLabelService, MoveMailService, NewsService, ReceiveInfoService, ReportMailService, SendDraftService, TemplateGroupService, TranslationService, UserAccountService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmljZXMyLWNodW5rLmpzIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vYXBpL2VudGl0aWVzL3R1dGFub3RhL1NlcnZpY2VzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGx5TGFiZWxTZXJ2aWNlUG9zdEluVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IFVzZXJBcmVhR3JvdXBQb3N0RGF0YVR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBDcmVhdGVHcm91cFBvc3RSZXR1cm5UeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgQ2FsZW5kYXJEZWxldGVEYXRhVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IFVzZXJBcmVhR3JvdXBEZWxldGVEYXRhVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IEN1c3RvbWVyQWNjb3VudENyZWF0ZURhdGFUeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgRHJhZnRDcmVhdGVEYXRhVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IERyYWZ0Q3JlYXRlUmV0dXJuVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IERyYWZ0VXBkYXRlRGF0YVR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBEcmFmdFVwZGF0ZVJldHVyblR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBFbmNyeXB0VHV0YW5vdGFQcm9wZXJ0aWVzRGF0YVR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBFbnRyb3B5RGF0YVR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBFeHRlcm5hbFVzZXJEYXRhVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IEdyb3VwSW52aXRhdGlvblBvc3REYXRhVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IEdyb3VwSW52aXRhdGlvblBvc3RSZXR1cm5UeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgR3JvdXBJbnZpdGF0aW9uUHV0RGF0YVR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBHcm91cEludml0YXRpb25EZWxldGVEYXRhVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IEltcG9ydE1haWxHZXRJblR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBJbXBvcnRNYWlsR2V0T3V0VHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IEltcG9ydE1haWxQb3N0SW5UeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgSW1wb3J0TWFpbFBvc3RPdXRUeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgTGlzdFVuc3Vic2NyaWJlRGF0YVR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBNYWlsRXhwb3J0VG9rZW5TZXJ2aWNlUG9zdE91dFR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBDcmVhdGVNYWlsRm9sZGVyRGF0YVR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBDcmVhdGVNYWlsRm9sZGVyUmV0dXJuVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IFVwZGF0ZU1haWxGb2xkZXJEYXRhVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IERlbGV0ZU1haWxGb2xkZXJEYXRhVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IENyZWF0ZU1haWxHcm91cERhdGFUeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgRGVsZXRlR3JvdXBEYXRhVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IERlbGV0ZU1haWxEYXRhVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IE1hbmFnZUxhYmVsU2VydmljZVBvc3RJblR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBNYW5hZ2VMYWJlbFNlcnZpY2VEZWxldGVJblR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBNb3ZlTWFpbERhdGFUeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgTmV3c091dFR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBOZXdzSW5UeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgUmVjZWl2ZUluZm9TZXJ2aWNlRGF0YVR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBSZXBvcnRNYWlsUG9zdERhdGFUeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgU2VuZERyYWZ0RGF0YVR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBTZW5kRHJhZnRSZXR1cm5UeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgU2ltcGxlTW92ZU1haWxQb3N0SW5UeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgVHJhbnNsYXRpb25HZXRJblR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBUcmFuc2xhdGlvbkdldE91dFR5cGVSZWYgfSBmcm9tIFwiLi9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBVbnJlYWRNYWlsU3RhdGVQb3N0SW5UeXBlUmVmIH0gZnJvbSBcIi4vVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgVXNlckFjY291bnRDcmVhdGVEYXRhVHlwZVJlZiB9IGZyb20gXCIuL1R5cGVSZWZzLmpzXCJcblxuZXhwb3J0IGNvbnN0IEFwcGx5TGFiZWxTZXJ2aWNlID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGFwcDogXCJ0dXRhbm90YVwiLFxuXHRuYW1lOiBcIkFwcGx5TGFiZWxTZXJ2aWNlXCIsXG5cdGdldDogbnVsbCxcblx0cG9zdDogeyBkYXRhOiBBcHBseUxhYmVsU2VydmljZVBvc3RJblR5cGVSZWYsIHJldHVybjogbnVsbCB9LFxuXHRwdXQ6IG51bGwsXG5cdGRlbGV0ZTogbnVsbCxcbn0gYXMgY29uc3QpXG5cbmV4cG9ydCBjb25zdCBDYWxlbmRhclNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiQ2FsZW5kYXJTZXJ2aWNlXCIsXG5cdGdldDogbnVsbCxcblx0cG9zdDogeyBkYXRhOiBVc2VyQXJlYUdyb3VwUG9zdERhdGFUeXBlUmVmLCByZXR1cm46IENyZWF0ZUdyb3VwUG9zdFJldHVyblR5cGVSZWYgfSxcblx0cHV0OiBudWxsLFxuXHRkZWxldGU6IHsgZGF0YTogQ2FsZW5kYXJEZWxldGVEYXRhVHlwZVJlZiwgcmV0dXJuOiBudWxsIH0sXG59IGFzIGNvbnN0KVxuXG5leHBvcnQgY29uc3QgQ29udGFjdExpc3RHcm91cFNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiQ29udGFjdExpc3RHcm91cFNlcnZpY2VcIixcblx0Z2V0OiBudWxsLFxuXHRwb3N0OiB7IGRhdGE6IFVzZXJBcmVhR3JvdXBQb3N0RGF0YVR5cGVSZWYsIHJldHVybjogQ3JlYXRlR3JvdXBQb3N0UmV0dXJuVHlwZVJlZiB9LFxuXHRwdXQ6IG51bGwsXG5cdGRlbGV0ZTogeyBkYXRhOiBVc2VyQXJlYUdyb3VwRGVsZXRlRGF0YVR5cGVSZWYsIHJldHVybjogbnVsbCB9LFxufSBhcyBjb25zdClcblxuZXhwb3J0IGNvbnN0IEN1c3RvbWVyQWNjb3VudFNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiQ3VzdG9tZXJBY2NvdW50U2VydmljZVwiLFxuXHRnZXQ6IG51bGwsXG5cdHBvc3Q6IHsgZGF0YTogQ3VzdG9tZXJBY2NvdW50Q3JlYXRlRGF0YVR5cGVSZWYsIHJldHVybjogbnVsbCB9LFxuXHRwdXQ6IG51bGwsXG5cdGRlbGV0ZTogbnVsbCxcbn0gYXMgY29uc3QpXG5cbmV4cG9ydCBjb25zdCBEcmFmdFNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiRHJhZnRTZXJ2aWNlXCIsXG5cdGdldDogbnVsbCxcblx0cG9zdDogeyBkYXRhOiBEcmFmdENyZWF0ZURhdGFUeXBlUmVmLCByZXR1cm46IERyYWZ0Q3JlYXRlUmV0dXJuVHlwZVJlZiB9LFxuXHRwdXQ6IHsgZGF0YTogRHJhZnRVcGRhdGVEYXRhVHlwZVJlZiwgcmV0dXJuOiBEcmFmdFVwZGF0ZVJldHVyblR5cGVSZWYgfSxcblx0ZGVsZXRlOiBudWxsLFxufSBhcyBjb25zdClcblxuZXhwb3J0IGNvbnN0IEVuY3J5cHRUdXRhbm90YVByb3BlcnRpZXNTZXJ2aWNlID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGFwcDogXCJ0dXRhbm90YVwiLFxuXHRuYW1lOiBcIkVuY3J5cHRUdXRhbm90YVByb3BlcnRpZXNTZXJ2aWNlXCIsXG5cdGdldDogbnVsbCxcblx0cG9zdDogeyBkYXRhOiBFbmNyeXB0VHV0YW5vdGFQcm9wZXJ0aWVzRGF0YVR5cGVSZWYsIHJldHVybjogbnVsbCB9LFxuXHRwdXQ6IG51bGwsXG5cdGRlbGV0ZTogbnVsbCxcbn0gYXMgY29uc3QpXG5cbmV4cG9ydCBjb25zdCBFbnRyb3B5U2VydmljZSA9IE9iamVjdC5mcmVlemUoe1xuXHRhcHA6IFwidHV0YW5vdGFcIixcblx0bmFtZTogXCJFbnRyb3B5U2VydmljZVwiLFxuXHRnZXQ6IG51bGwsXG5cdHBvc3Q6IG51bGwsXG5cdHB1dDogeyBkYXRhOiBFbnRyb3B5RGF0YVR5cGVSZWYsIHJldHVybjogbnVsbCB9LFxuXHRkZWxldGU6IG51bGwsXG59IGFzIGNvbnN0KVxuXG5leHBvcnQgY29uc3QgRXh0ZXJuYWxVc2VyU2VydmljZSA9IE9iamVjdC5mcmVlemUoe1xuXHRhcHA6IFwidHV0YW5vdGFcIixcblx0bmFtZTogXCJFeHRlcm5hbFVzZXJTZXJ2aWNlXCIsXG5cdGdldDogbnVsbCxcblx0cG9zdDogeyBkYXRhOiBFeHRlcm5hbFVzZXJEYXRhVHlwZVJlZiwgcmV0dXJuOiBudWxsIH0sXG5cdHB1dDogbnVsbCxcblx0ZGVsZXRlOiBudWxsLFxufSBhcyBjb25zdClcblxuZXhwb3J0IGNvbnN0IEdyb3VwSW52aXRhdGlvblNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiR3JvdXBJbnZpdGF0aW9uU2VydmljZVwiLFxuXHRnZXQ6IG51bGwsXG5cdHBvc3Q6IHsgZGF0YTogR3JvdXBJbnZpdGF0aW9uUG9zdERhdGFUeXBlUmVmLCByZXR1cm46IEdyb3VwSW52aXRhdGlvblBvc3RSZXR1cm5UeXBlUmVmIH0sXG5cdHB1dDogeyBkYXRhOiBHcm91cEludml0YXRpb25QdXREYXRhVHlwZVJlZiwgcmV0dXJuOiBudWxsIH0sXG5cdGRlbGV0ZTogeyBkYXRhOiBHcm91cEludml0YXRpb25EZWxldGVEYXRhVHlwZVJlZiwgcmV0dXJuOiBudWxsIH0sXG59IGFzIGNvbnN0KVxuXG5leHBvcnQgY29uc3QgSW1wb3J0TWFpbFNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiSW1wb3J0TWFpbFNlcnZpY2VcIixcblx0Z2V0OiB7IGRhdGE6IEltcG9ydE1haWxHZXRJblR5cGVSZWYsIHJldHVybjogSW1wb3J0TWFpbEdldE91dFR5cGVSZWYgfSxcblx0cG9zdDogeyBkYXRhOiBJbXBvcnRNYWlsUG9zdEluVHlwZVJlZiwgcmV0dXJuOiBJbXBvcnRNYWlsUG9zdE91dFR5cGVSZWYgfSxcblx0cHV0OiBudWxsLFxuXHRkZWxldGU6IG51bGwsXG59IGFzIGNvbnN0KVxuXG5leHBvcnQgY29uc3QgTGlzdFVuc3Vic2NyaWJlU2VydmljZSA9IE9iamVjdC5mcmVlemUoe1xuXHRhcHA6IFwidHV0YW5vdGFcIixcblx0bmFtZTogXCJMaXN0VW5zdWJzY3JpYmVTZXJ2aWNlXCIsXG5cdGdldDogbnVsbCxcblx0cG9zdDogeyBkYXRhOiBMaXN0VW5zdWJzY3JpYmVEYXRhVHlwZVJlZiwgcmV0dXJuOiBudWxsIH0sXG5cdHB1dDogbnVsbCxcblx0ZGVsZXRlOiBudWxsLFxufSBhcyBjb25zdClcblxuZXhwb3J0IGNvbnN0IE1haWxFeHBvcnRUb2tlblNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiTWFpbEV4cG9ydFRva2VuU2VydmljZVwiLFxuXHRnZXQ6IG51bGwsXG5cdHBvc3Q6IHsgZGF0YTogbnVsbCwgcmV0dXJuOiBNYWlsRXhwb3J0VG9rZW5TZXJ2aWNlUG9zdE91dFR5cGVSZWYgfSxcblx0cHV0OiBudWxsLFxuXHRkZWxldGU6IG51bGwsXG59IGFzIGNvbnN0KVxuXG5leHBvcnQgY29uc3QgTWFpbEZvbGRlclNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiTWFpbEZvbGRlclNlcnZpY2VcIixcblx0Z2V0OiBudWxsLFxuXHRwb3N0OiB7IGRhdGE6IENyZWF0ZU1haWxGb2xkZXJEYXRhVHlwZVJlZiwgcmV0dXJuOiBDcmVhdGVNYWlsRm9sZGVyUmV0dXJuVHlwZVJlZiB9LFxuXHRwdXQ6IHsgZGF0YTogVXBkYXRlTWFpbEZvbGRlckRhdGFUeXBlUmVmLCByZXR1cm46IG51bGwgfSxcblx0ZGVsZXRlOiB7IGRhdGE6IERlbGV0ZU1haWxGb2xkZXJEYXRhVHlwZVJlZiwgcmV0dXJuOiBudWxsIH0sXG59IGFzIGNvbnN0KVxuXG5leHBvcnQgY29uc3QgTWFpbEdyb3VwU2VydmljZSA9IE9iamVjdC5mcmVlemUoe1xuXHRhcHA6IFwidHV0YW5vdGFcIixcblx0bmFtZTogXCJNYWlsR3JvdXBTZXJ2aWNlXCIsXG5cdGdldDogbnVsbCxcblx0cG9zdDogeyBkYXRhOiBDcmVhdGVNYWlsR3JvdXBEYXRhVHlwZVJlZiwgcmV0dXJuOiBudWxsIH0sXG5cdHB1dDogbnVsbCxcblx0ZGVsZXRlOiB7IGRhdGE6IERlbGV0ZUdyb3VwRGF0YVR5cGVSZWYsIHJldHVybjogbnVsbCB9LFxufSBhcyBjb25zdClcblxuZXhwb3J0IGNvbnN0IE1haWxTZXJ2aWNlID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGFwcDogXCJ0dXRhbm90YVwiLFxuXHRuYW1lOiBcIk1haWxTZXJ2aWNlXCIsXG5cdGdldDogbnVsbCxcblx0cG9zdDogbnVsbCxcblx0cHV0OiBudWxsLFxuXHRkZWxldGU6IHsgZGF0YTogRGVsZXRlTWFpbERhdGFUeXBlUmVmLCByZXR1cm46IG51bGwgfSxcbn0gYXMgY29uc3QpXG5cbmV4cG9ydCBjb25zdCBNYW5hZ2VMYWJlbFNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiTWFuYWdlTGFiZWxTZXJ2aWNlXCIsXG5cdGdldDogbnVsbCxcblx0cG9zdDogeyBkYXRhOiBNYW5hZ2VMYWJlbFNlcnZpY2VQb3N0SW5UeXBlUmVmLCByZXR1cm46IG51bGwgfSxcblx0cHV0OiBudWxsLFxuXHRkZWxldGU6IHsgZGF0YTogTWFuYWdlTGFiZWxTZXJ2aWNlRGVsZXRlSW5UeXBlUmVmLCByZXR1cm46IG51bGwgfSxcbn0gYXMgY29uc3QpXG5cbmV4cG9ydCBjb25zdCBNb3ZlTWFpbFNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiTW92ZU1haWxTZXJ2aWNlXCIsXG5cdGdldDogbnVsbCxcblx0cG9zdDogeyBkYXRhOiBNb3ZlTWFpbERhdGFUeXBlUmVmLCByZXR1cm46IG51bGwgfSxcblx0cHV0OiBudWxsLFxuXHRkZWxldGU6IG51bGwsXG59IGFzIGNvbnN0KVxuXG5leHBvcnQgY29uc3QgTmV3c1NlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiTmV3c1NlcnZpY2VcIixcblx0Z2V0OiB7IGRhdGE6IG51bGwsIHJldHVybjogTmV3c091dFR5cGVSZWYgfSxcblx0cG9zdDogeyBkYXRhOiBOZXdzSW5UeXBlUmVmLCByZXR1cm46IG51bGwgfSxcblx0cHV0OiBudWxsLFxuXHRkZWxldGU6IG51bGwsXG59IGFzIGNvbnN0KVxuXG5leHBvcnQgY29uc3QgUmVjZWl2ZUluZm9TZXJ2aWNlID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGFwcDogXCJ0dXRhbm90YVwiLFxuXHRuYW1lOiBcIlJlY2VpdmVJbmZvU2VydmljZVwiLFxuXHRnZXQ6IG51bGwsXG5cdHBvc3Q6IHsgZGF0YTogUmVjZWl2ZUluZm9TZXJ2aWNlRGF0YVR5cGVSZWYsIHJldHVybjogbnVsbCB9LFxuXHRwdXQ6IG51bGwsXG5cdGRlbGV0ZTogbnVsbCxcbn0gYXMgY29uc3QpXG5cbmV4cG9ydCBjb25zdCBSZXBvcnRNYWlsU2VydmljZSA9IE9iamVjdC5mcmVlemUoe1xuXHRhcHA6IFwidHV0YW5vdGFcIixcblx0bmFtZTogXCJSZXBvcnRNYWlsU2VydmljZVwiLFxuXHRnZXQ6IG51bGwsXG5cdHBvc3Q6IHsgZGF0YTogUmVwb3J0TWFpbFBvc3REYXRhVHlwZVJlZiwgcmV0dXJuOiBudWxsIH0sXG5cdHB1dDogbnVsbCxcblx0ZGVsZXRlOiBudWxsLFxufSBhcyBjb25zdClcblxuZXhwb3J0IGNvbnN0IFNlbmREcmFmdFNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiU2VuZERyYWZ0U2VydmljZVwiLFxuXHRnZXQ6IG51bGwsXG5cdHBvc3Q6IHsgZGF0YTogU2VuZERyYWZ0RGF0YVR5cGVSZWYsIHJldHVybjogU2VuZERyYWZ0UmV0dXJuVHlwZVJlZiB9LFxuXHRwdXQ6IG51bGwsXG5cdGRlbGV0ZTogbnVsbCxcbn0gYXMgY29uc3QpXG5cbmV4cG9ydCBjb25zdCBTaW1wbGVNb3ZlTWFpbFNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiU2ltcGxlTW92ZU1haWxTZXJ2aWNlXCIsXG5cdGdldDogbnVsbCxcblx0cG9zdDogeyBkYXRhOiBTaW1wbGVNb3ZlTWFpbFBvc3RJblR5cGVSZWYsIHJldHVybjogbnVsbCB9LFxuXHRwdXQ6IG51bGwsXG5cdGRlbGV0ZTogbnVsbCxcbn0gYXMgY29uc3QpXG5cbmV4cG9ydCBjb25zdCBUZW1wbGF0ZUdyb3VwU2VydmljZSA9IE9iamVjdC5mcmVlemUoe1xuXHRhcHA6IFwidHV0YW5vdGFcIixcblx0bmFtZTogXCJUZW1wbGF0ZUdyb3VwU2VydmljZVwiLFxuXHRnZXQ6IG51bGwsXG5cdHBvc3Q6IHsgZGF0YTogVXNlckFyZWFHcm91cFBvc3REYXRhVHlwZVJlZiwgcmV0dXJuOiBDcmVhdGVHcm91cFBvc3RSZXR1cm5UeXBlUmVmIH0sXG5cdHB1dDogbnVsbCxcblx0ZGVsZXRlOiB7IGRhdGE6IFVzZXJBcmVhR3JvdXBEZWxldGVEYXRhVHlwZVJlZiwgcmV0dXJuOiBudWxsIH0sXG59IGFzIGNvbnN0KVxuXG5leHBvcnQgY29uc3QgVHJhbnNsYXRpb25TZXJ2aWNlID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGFwcDogXCJ0dXRhbm90YVwiLFxuXHRuYW1lOiBcIlRyYW5zbGF0aW9uU2VydmljZVwiLFxuXHRnZXQ6IHsgZGF0YTogVHJhbnNsYXRpb25HZXRJblR5cGVSZWYsIHJldHVybjogVHJhbnNsYXRpb25HZXRPdXRUeXBlUmVmIH0sXG5cdHBvc3Q6IG51bGwsXG5cdHB1dDogbnVsbCxcblx0ZGVsZXRlOiBudWxsLFxufSBhcyBjb25zdClcblxuZXhwb3J0IGNvbnN0IFVucmVhZE1haWxTdGF0ZVNlcnZpY2UgPSBPYmplY3QuZnJlZXplKHtcblx0YXBwOiBcInR1dGFub3RhXCIsXG5cdG5hbWU6IFwiVW5yZWFkTWFpbFN0YXRlU2VydmljZVwiLFxuXHRnZXQ6IG51bGwsXG5cdHBvc3Q6IHsgZGF0YTogVW5yZWFkTWFpbFN0YXRlUG9zdEluVHlwZVJlZiwgcmV0dXJuOiBudWxsIH0sXG5cdHB1dDogbnVsbCxcblx0ZGVsZXRlOiBudWxsLFxufSBhcyBjb25zdClcblxuZXhwb3J0IGNvbnN0IFVzZXJBY2NvdW50U2VydmljZSA9IE9iamVjdC5mcmVlemUoe1xuXHRhcHA6IFwidHV0YW5vdGFcIixcblx0bmFtZTogXCJVc2VyQWNjb3VudFNlcnZpY2VcIixcblx0Z2V0OiBudWxsLFxuXHRwb3N0OiB7IGRhdGE6IFVzZXJBY2NvdW50Q3JlYXRlRGF0YVR5cGVSZWYsIHJldHVybjogbnVsbCB9LFxuXHRwdXQ6IG51bGwsXG5cdGRlbGV0ZTogbnVsbCxcbn0gYXMgY29uc3QpIl0sIm1hcHBpbmdzIjoiOzs7TUE2Q2Esb0JBQW9CLE9BQU8sT0FBTztDQUM5QyxLQUFLO0NBQ0wsTUFBTTtDQUNOLEtBQUs7Q0FDTCxNQUFNO0VBQUUsTUFBTTtFQUFnQyxRQUFRO0NBQU07Q0FDNUQsS0FBSztDQUNMLFFBQVE7QUFDUixFQUFVO01BRUUsa0JBQWtCLE9BQU8sT0FBTztDQUM1QyxLQUFLO0NBQ0wsTUFBTTtDQUNOLEtBQUs7Q0FDTCxNQUFNO0VBQUUsTUFBTTtFQUE4QixRQUFRO0NBQThCO0NBQ2xGLEtBQUs7Q0FDTCxRQUFRO0VBQUUsTUFBTTtFQUEyQixRQUFRO0NBQU07QUFDekQsRUFBVTtNQUVFLDBCQUEwQixPQUFPLE9BQU87Q0FDcEQsS0FBSztDQUNMLE1BQU07Q0FDTixLQUFL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