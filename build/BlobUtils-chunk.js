import { elementIdPart, listIdPart } from "./EntityUtils-chunk.js";

//#region src/common/api/common/DataFile.ts
function createDataFile(name, mimeType, data, cid) {
	return {
		_type: "DataFile",
		name,
		mimeType: getCleanedMimeType(mimeType),
		data,
		size: data.byteLength,
		id: undefined,
		cid
	};
}
function convertToDataFile(file, data) {
	if ("_type" in file) return {
		_type: "DataFile",
		name: file.name,
		mimeType: getCleanedMimeType(file.mimeType),
		data,
		size: data.byteLength,
		id: file._id,
		cid: file.cid ?? undefined
	};
else return {
		_type: "DataFile",
		name: file.name,
		mimeType: getCleanedMimeType(file.type),
		data,
		size: data.byteLength,
		id: undefined
	};
}
function getCleanedMimeType(mimeType) {
	if (!mimeType || mimeType.trim() === "") return "application/octet-stream";
else return mimeType.replace(/"/g, "").replace(/'/g, "");
}

//#endregion
//#region src/common/api/common/utils/BlobUtils.ts
function createReferencingInstance(tutanotaFile) {
	return {
		blobs: tutanotaFile.blobs,
		elementId: elementIdPart(tutanotaFile._id),
		listId: listIdPart(tutanotaFile._id),
		entity: tutanotaFile
	};
}

//#endregion
export { convertToDataFile, createDataFile, createReferencingInstance, getCleanedMimeType };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmxvYlV0aWxzLWNodW5rLmpzIiwibmFtZXMiOlsibmFtZTogc3RyaW5nIiwibWltZVR5cGU6IHN0cmluZyIsImRhdGE6IFVpbnQ4QXJyYXkiLCJjaWQ/OiBzdHJpbmciLCJmaWxlOiBGaWxlIHwgVHV0YW5vdGFGaWxlIiwibWltZVR5cGU6IHN0cmluZyB8IG51bGwiLCJ0dXRhbm90YUZpbGU6IFR1dGFub3RhRmlsZSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vYXBpL2NvbW1vbi9EYXRhRmlsZS50cyIsIi4uL3NyYy9jb21tb24vYXBpL2NvbW1vbi91dGlscy9CbG9iVXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBGaWxlIGFzIFR1dGFub3RhRmlsZSB9IGZyb20gXCIuLi9lbnRpdGllcy90dXRhbm90YS9UeXBlUmVmcy5qc1wiXG5cbi8qKlxuICogYSBzdHJ1Y3R1cmUgY29udGFpbmluZyBmaWxlIGNvbnRlbnQgYW5kIG1ldGFkYXRhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUZpbGUge1xuXHRyZWFkb25seSBfdHlwZTogXCJEYXRhRmlsZVwiXG5cdG5hbWU6IHN0cmluZ1xuXHRtaW1lVHlwZTogc3RyaW5nXG5cdGRhdGE6IFVpbnQ4QXJyYXlcblx0c2l6ZTogbnVtYmVyXG5cdGlkPzogSWRUdXBsZVxuXHRjaWQ/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURhdGFGaWxlKG5hbWU6IHN0cmluZywgbWltZVR5cGU6IHN0cmluZywgZGF0YTogVWludDhBcnJheSwgY2lkPzogc3RyaW5nKTogRGF0YUZpbGUge1xuXHRyZXR1cm4ge1xuXHRcdF90eXBlOiBcIkRhdGFGaWxlXCIsXG5cdFx0bmFtZTogbmFtZSxcblx0XHRtaW1lVHlwZTogZ2V0Q2xlYW5lZE1pbWVUeXBlKG1pbWVUeXBlKSxcblx0XHRkYXRhOiBkYXRhLFxuXHRcdHNpemU6IGRhdGEuYnl0ZUxlbmd0aCxcblx0XHRpZDogdW5kZWZpbmVkLFxuXHRcdGNpZCxcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvRGF0YUZpbGUoZmlsZTogRmlsZSB8IFR1dGFub3RhRmlsZSwgZGF0YTogVWludDhBcnJheSk6IERhdGFGaWxlIHtcblx0aWYgKFwiX3R5cGVcIiBpbiBmaWxlKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdF90eXBlOiBcIkRhdGFGaWxlXCIsXG5cdFx0XHRuYW1lOiBmaWxlLm5hbWUsXG5cdFx0XHRtaW1lVHlwZTogZ2V0Q2xlYW5lZE1pbWVUeXBlKGZpbGUubWltZVR5cGUpLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHNpemU6IGRhdGEuYnl0ZUxlbmd0aCxcblx0XHRcdGlkOiBmaWxlLl9pZCxcblx0XHRcdGNpZDogZmlsZS5jaWQgPz8gdW5kZWZpbmVkLFxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0X3R5cGU6IFwiRGF0YUZpbGVcIixcblx0XHRcdG5hbWU6IGZpbGUubmFtZSxcblx0XHRcdG1pbWVUeXBlOiBnZXRDbGVhbmVkTWltZVR5cGUoZmlsZS50eXBlKSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzaXplOiBkYXRhLmJ5dGVMZW5ndGgsXG5cdFx0XHRpZDogdW5kZWZpbmVkLCAvLyBmaWxlIHJlYWQgZnJvbSBmaWxlc3lzdGVtLCBkb2VzIG5vdCBoYXZlIGFuIGlkIGJlY2F1c2UgaXQgaGFzIG5vdCBiZWVuIHN0b3JlZCBpbiB0dXRhbm90YS5cblx0XHR9XG5cdH1cbn1cblxuLyoqIG1ha2Ugc3VyZSB3ZSBoYXZlIGEgdmFsaWQgbWltZSB0eXBlIGJ5IHJlcGxhY2luZyBlbXB0eSBvbmVzIHdpdGggXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIiBhbmRcbiAqIHJlbW92aW5nIGRvdWJsZSBxdW90ZXMgYW5kIHNpbmdsZSBxdW90ZXMqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENsZWFuZWRNaW1lVHlwZShtaW1lVHlwZTogc3RyaW5nIHwgbnVsbCk6IHN0cmluZyB7XG5cdGlmICghbWltZVR5cGUgfHwgbWltZVR5cGUudHJpbSgpID09PSBcIlwiKSB7XG5cdFx0cmV0dXJuIFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWltZVR5cGUucmVwbGFjZSgvXCIvZywgXCJcIikucmVwbGFjZSgvJy9nLCBcIlwiKVxuXHR9XG59XG4iLCJpbXBvcnQgeyBGaWxlIGFzIFR1dGFub3RhRmlsZSB9IGZyb20gXCIuLi8uLi9lbnRpdGllcy90dXRhbm90YS9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBlbGVtZW50SWRQYXJ0LCBsaXN0SWRQYXJ0IH0gZnJvbSBcIi4vRW50aXR5VXRpbHMuanNcIlxuaW1wb3J0IHsgQmxvYiB9IGZyb20gXCIuLi8uLi9lbnRpdGllcy9zeXMvVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgU29tZUVudGl0eSB9IGZyb20gXCIuLi9FbnRpdHlUeXBlcy5qc1wiXG5cbi8qKlxuICogQ29tbW9uIGludGVyZmFjZSBmb3IgaW5zdGFuY2VzIHRoYXQgYXJlIHJlZmVyZW5jaW5nIGJsb2JzLiBNYWluIHB1cnBvc2UgaXMgdG8gaGF2ZSBhIHByb3BlciB3YXkgdG8gYWNjZXNzIHRoZSBhdHRyaWJ1dGUgZm9yIHRoZSBCbG9iIGFnZ3JlZ2F0ZWQgdHlwZVxuICogYmVjYXVzZSB0aGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIGNhbiBiZSBkaWZmZXJlbnQgZm9yIGVhY2ggaW5zdGFuY2UuXG4gKlxuICovXG5leHBvcnQgdHlwZSBCbG9iUmVmZXJlbmNpbmdJbnN0YW5jZSA9IHtcblx0ZWxlbWVudElkOiBJZFxuXG5cdGxpc3RJZDogSWQgfCBudWxsXG5cblx0YmxvYnM6IEJsb2JbXVxuXG5cdGVudGl0eTogU29tZUVudGl0eVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVmZXJlbmNpbmdJbnN0YW5jZSh0dXRhbm90YUZpbGU6IFR1dGFub3RhRmlsZSk6IEJsb2JSZWZlcmVuY2luZ0luc3RhbmNlIHtcblx0cmV0dXJuIHtcblx0XHRibG9iczogdHV0YW5vdGFGaWxlLmJsb2JzLFxuXHRcdGVsZW1lbnRJZDogZWxlbWVudElkUGFydCh0dXRhbm90YUZpbGUuX2lkKSxcblx0XHRsaXN0SWQ6IGxpc3RJZFBhcnQodHV0YW5vdGFGaWxlLl9pZCksXG5cdFx0ZW50aXR5OiB0dXRhbm90YUZpbGUsXG5cdH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7O0FBZU8sU0FBUyxlQUFlQSxNQUFjQyxVQUFrQkMsTUFBa0JDLEtBQXdCO0FBQ3hHLFFBQU87RUFDTixPQUFPO0VBQ0Q7RUFDTixVQUFVLG1CQUFtQixTQUFTO0VBQ2hDO0VBQ04sTUFBTSxLQUFLO0VBQ1gsSUFBSTtFQUNKO0NBQ0E7QUFDRDtBQUVNLFNBQVMsa0JBQWtCQyxNQUEyQkYsTUFBNEI7QUFDeEYsS0FBSSxXQUFXLEtBQ2QsUUFBTztFQUNOLE9BQU87RUFDUCxNQUFNLEtBQUs7RUFDWCxVQUFVLG1CQUFtQixLQUFLLFNBQVM7RUFDckM7RUFDTixNQUFNLEtBQUs7RUFDWCxJQUFJLEtBQUs7RUFDVCxLQUFLLEtBQUssT0FBTztDQUNqQjtJQUVELFFBQU87RUFDTixPQUFPO0VBQ1AsTUFBTSxLQUFLO0VBQ1gsVUFBVSxtQkFBbUIsS0FBSyxLQUFLO0VBQ2pDO0VBQ04sTUFBTSxLQUFLO0VBQ1gsSUFBSTtDQUNKO0FBRUY7QUFJTSxTQUFTLG1CQUFtQkcsVUFBaUM7QUFDbkUsTUFBSyxZQUFZLFNBQVMsTUFBTSxLQUFLLEdBQ3BDLFFBQU87SUFFUCxRQUFPLFNBQVMsUUFBUSxNQUFNLEdBQUcsQ0FBQyxRQUFRLE1BQU0sR0FBRztBQUVwRDs7OztBQ3RDTSxTQUFTLDBCQUEwQkMsY0FBcUQ7QUFDOUYsUUFBTztFQUNOLE9BQU8sYUFBYTtFQUNwQixXQUFXLGNBQWMsYUFBYSxJQUFJO0VBQzFDLFFBQVEsV0FBVyxhQUFhLElBQUk7RUFDcEMsUUFBUTtDQUNSO0FBQ0QifQ==