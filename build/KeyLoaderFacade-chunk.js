import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { assertNotNull, isKeyVersion } from "./dist2-chunk.js";
import { customIdToString, getElementId, isSameId, stringToCustomId } from "./EntityUtils-chunk.js";
import { GroupKeyTypeRef, GroupTypeRef } from "./TypeRefs2-chunk.js";
import { NotFoundError } from "./RestError-chunk.js";
import { CryptoError } from "./CryptoError-chunk.js";
import { decryptKey, decryptKeyPair, isRsaOrRsaEccKeyPair } from "./dist3-chunk.js";

//#region src/common/api/worker/facades/KeyLoaderFacade.ts
var KeyLoaderFacade = class {
	constructor(keyCache, userFacade, entityClient, cacheManagementFacade) {
		this.keyCache = keyCache;
		this.userFacade = userFacade;
		this.entityClient = entityClient;
		this.cacheManagementFacade = cacheManagementFacade;
	}
	/**
	* Load the symmetric group key for the groupId with the provided requestedVersion.
	* @param groupId the id of the group
	* @param requestedVersion the requestedVersion of the key to be loaded
	* @param currentGroupKey needs to be set if the user is not a member of the group (e.g. an admin)
	*/
	async loadSymGroupKey(groupId, requestedVersion, currentGroupKey) {
		if (currentGroupKey != null && currentGroupKey.version < requestedVersion) throw new Error(`Provided current group key is too old (${currentGroupKey.version}) to load the requested version ${requestedVersion} for group ${groupId}`);
		const groupKey = currentGroupKey ?? await this.getCurrentSymGroupKey(groupId);
		if (groupKey.version === requestedVersion) return groupKey.object;
else if (groupKey.version < requestedVersion) {
			await (await this.cacheManagementFacade()).refreshKeyCache(groupId);
			const refreshedGroupKey = await this.getCurrentSymGroupKey(groupId);
			return this.loadSymGroupKey(groupId, requestedVersion, refreshedGroupKey);
		} else {
			const group = await this.entityClient.load(GroupTypeRef, groupId);
			const { symmetricGroupKey } = await this.findFormerGroupKey(group, groupKey, requestedVersion);
			return symmetricGroupKey;
		}
	}
	async getCurrentSymGroupKey(groupId) {
		if (isSameId(groupId, this.userFacade.getUserGroupId())) return this.getCurrentSymUserGroupKey();
		return this.keyCache.getCurrentGroupKey(groupId, () => this.loadAndDecryptCurrentSymGroupKey(groupId));
	}
	async loadSymUserGroupKey(requestedVersion) {
		let currentUserGroupKey = this.getCurrentSymUserGroupKey();
		if (currentUserGroupKey.version < requestedVersion) {
			await (await this.cacheManagementFacade()).refreshKeyCache(this.userFacade.getUserGroupId());
			currentUserGroupKey = this.getCurrentSymUserGroupKey();
		}
		return this.loadSymGroupKey(this.userFacade.getUserGroupId(), requestedVersion, currentUserGroupKey);
	}
	getCurrentSymUserGroupKey() {
		return this.userFacade.getCurrentUserGroupKey();
	}
	async loadKeypair(keyPairGroupId, requestedVersion) {
		let group = await this.entityClient.load(GroupTypeRef, keyPairGroupId);
		let currentGroupKey = await this.getCurrentSymGroupKey(keyPairGroupId);
		if (requestedVersion > currentGroupKey.version) {
			group = (await (await this.cacheManagementFacade()).refreshKeyCache(keyPairGroupId)).group;
			currentGroupKey = await this.getCurrentSymGroupKey(keyPairGroupId);
		}
		return await this.loadKeyPairImpl(group, requestedVersion, currentGroupKey);
	}
	async loadCurrentKeyPair(groupId) {
		let group = await this.entityClient.load(GroupTypeRef, groupId);
		let currentGroupKey = await this.getCurrentSymGroupKey(groupId);
		if (parseKeyVersion(group.groupKeyVersion) !== currentGroupKey.version) {
			group = (await (await this.cacheManagementFacade()).refreshKeyCache(groupId)).group;
			currentGroupKey = await this.getCurrentSymGroupKey(groupId);
			if (parseKeyVersion(group.groupKeyVersion) !== currentGroupKey.version) throw new Error(`inconsistent key version state in cache and key cache for group ${groupId}`);
		}
		return {
			object: this.validateAndDecryptKeyPair(group.currentKeys, groupId, currentGroupKey),
			version: parseKeyVersion(group.groupKeyVersion)
		};
	}
	async loadKeyPairImpl(group, requestedVersion, currentGroupKey) {
		const keyPairGroupId = group._id;
		let keyPair;
		let symGroupKey;
		if (requestedVersion > currentGroupKey.version) throw new Error(`Not possible to get newer key version than is cached for group ${keyPairGroupId}`);
else if (requestedVersion === currentGroupKey.version) {
			symGroupKey = currentGroupKey;
			if (parseKeyVersion(group.groupKeyVersion) === currentGroupKey.version) keyPair = group.currentKeys;
else {
				const formerGroupKey = await this.loadFormerGroupKeyInstance(group, currentGroupKey.version);
				keyPair = formerGroupKey.keyPair;
			}
		} else {
			const { symmetricGroupKey, groupKeyInstance } = await this.findFormerGroupKey(group, currentGroupKey, requestedVersion);
			keyPair = groupKeyInstance.keyPair;
			symGroupKey = {
				object: symmetricGroupKey,
				version: requestedVersion
			};
		}
		return this.validateAndDecryptKeyPair(keyPair, keyPairGroupId, symGroupKey);
	}
	async loadFormerGroupKeyInstance(group, version) {
		const formerKeysList = assertNotNull(group.formerGroupKeys).list;
		return await this.entityClient.load(GroupKeyTypeRef, [formerKeysList, convertKeyVersionToCustomId(version)]);
	}
	/**
	*
	* @param groupId MUST NOT be the user group id!
	* @private
	*/
	async loadAndDecryptCurrentSymGroupKey(groupId) {
		if (isSameId(groupId, this.userFacade.getUserGroupId())) throw new ProgrammingError("Must not add the user group to the regular group key cache");
		const groupMembership = this.userFacade.getMembership(groupId);
		const requiredUserGroupKey = await this.loadSymUserGroupKey(parseKeyVersion(groupMembership.symKeyVersion));
		return {
			version: parseKeyVersion(groupMembership.groupKeyVersion),
			object: decryptKey(requiredUserGroupKey, groupMembership.symEncGKey)
		};
	}
	async findFormerGroupKey(group, currentGroupKey, targetKeyVersion) {
		const formerKeysList = assertNotNull(group.formerGroupKeys).list;
		const startId = convertKeyVersionToCustomId(currentGroupKey.version);
		const amountOfKeysIncludingTarget = currentGroupKey.version - targetKeyVersion;
		const formerKeys = await this.entityClient.loadRange(GroupKeyTypeRef, formerKeysList, startId, amountOfKeysIncludingTarget, true);
		let lastVersion = currentGroupKey.version;
		let lastGroupKey = currentGroupKey.object;
		let lastGroupKeyInstance = null;
		for (const formerKey of formerKeys) {
			const version = this.decodeGroupKeyVersion(getElementId(formerKey));
			if (version + 1 > lastVersion) continue;
else if (version + 1 === lastVersion) {
				lastGroupKey = decryptKey(lastGroupKey, formerKey.ownerEncGKey);
				lastVersion = version;
				lastGroupKeyInstance = formerKey;
				if (lastVersion <= targetKeyVersion) break;
			} else throw new Error(`unexpected version ${version}; expected ${lastVersion}`);
		}
		if (lastVersion !== targetKeyVersion || !lastGroupKeyInstance) throw new Error(`could not get version (last version is ${lastVersion} of ${formerKeys.length} key(s) loaded from list ${formerKeysList})`);
		return {
			symmetricGroupKey: lastGroupKey,
			groupKeyInstance: lastGroupKeyInstance
		};
	}
	decodeGroupKeyVersion(id) {
		return parseKeyVersion(customIdToString(id));
	}
	validateAndDecryptKeyPair(keyPair, groupId, groupKey) {
		if (keyPair == null) throw new NotFoundError(`no key pair on group ${groupId}`);
		const decryptedKeyPair = decryptKeyPair(groupKey.object, keyPair);
		if (groupKey.version !== 0 && isRsaOrRsaEccKeyPair(decryptedKeyPair)) throw new CryptoError("received an rsa key pair in a version other than 0: " + groupKey.version);
		return decryptedKeyPair;
	}
};
function convertKeyVersionToCustomId(version) {
	return stringToCustomId(String(version));
}
function parseKeyVersion(version) {
	const versionAsNumber = Number(version);
	return checkKeyVersionConstraints(versionAsNumber);
}
function checkKeyVersionConstraints(version) {
	if (!isKeyVersion(version)) throw new CryptoError("key version is not a non-negative integer");
	return version;
}

//#endregion
export { KeyLoaderFacade, checkKeyVersionConstraints, parseKeyVersion };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,