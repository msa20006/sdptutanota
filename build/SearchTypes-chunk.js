
//#region src/common/api/worker/search/SearchTypes.ts
let IndexingErrorReason = function(IndexingErrorReason$1) {
	IndexingErrorReason$1[IndexingErrorReason$1["Unknown"] = 0] = "Unknown";
	IndexingErrorReason$1[IndexingErrorReason$1["ConnectionLost"] = 1] = "ConnectionLost";
	return IndexingErrorReason$1;
}({});

//#endregion
export { IndexingErrorReason };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoVHlwZXMtY2h1bmsuanMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9hcGkvd29ya2VyL3NlYXJjaC9TZWFyY2hUeXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERiRmFjYWRlIH0gZnJvbSBcIi4vRGJGYWNhZGVcIlxuaW1wb3J0IHR5cGUgeyBHcm91cFR5cGUgfSBmcm9tIFwiLi4vLi4vY29tbW9uL1R1dGFub3RhQ29uc3RhbnRzXCJcbmltcG9ydCB0eXBlIHsgVHlwZUluZm8gfSBmcm9tIFwiLi9JbmRleFV0aWxzXCJcbmltcG9ydCB0eXBlIHsgQmFzZTY0LCBsYXp5IH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5pbXBvcnQgeyBUeXBlUmVmIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5pbXBvcnQgdHlwZSB7IE1vZGVsQXNzb2NpYXRpb24sIE1vZGVsVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tbW9uL0VudGl0eVR5cGVzXCJcbmltcG9ydCB7IEFlczI1NktleSB9IGZyb20gXCJAdHV0YW8vdHV0YW5vdGEtY3J5cHRvXCJcbi8vIGRiIHR5cGVzXG5cbi8qKlxuICogRmlyc3QgcGFydCBlbmNyeXB0ZWQgZWxlbWVudCBpZCAoMTYgYnl0ZXMpLCBzZWNvbmQgcGFydCBlbmNvZGVkIGFuZCBlbmNyeXB0ZWQgYXR0cmlidXRlIGFuZCBwb3NpdGlvbnNcbiAqL1xuZXhwb3J0IHR5cGUgRW5jcnlwdGVkU2VhcmNoSW5kZXhFbnRyeSA9IFVpbnQ4QXJyYXlcblxuLyoqXG4gKiBCaW5hcnkgZW5jb2RlZCBFbmNyeXB0ZWRTZWFyY2hJbmRleEVudHJpZXMgU2VhcmNoSW5kZXhFbmNvZGluZykuXG4gKi9cbmV4cG9ydCB0eXBlIFNlYXJjaEluZGV4RGJSb3cgPSBVaW50OEFycmF5XG5leHBvcnQgdHlwZSBTZWFyY2hJbmRleE1ldGFEYXRhRGJSb3cgPSB7XG5cdGlkOiBudW1iZXJcblx0d29yZDogc3RyaW5nXG5cdHJvd3M6IFVpbnQ4QXJyYXkgLy8gc2VxdWVuY2VzIG9mIG51bWJlcnMgbGlrZTogW2FwcCwgdHlwZSwgaW5kZXhSb3dJZCwgc2l6ZSwgYXBwLCB0eXBlLCAuLi5dIGVuY29kZWQgYW5kIGVuY3J5cHRlZCBTZWFyY2hJbmRleE1ldGFkYXRhRW50cnlcbn1cbmV4cG9ydCB0eXBlIEVsZW1lbnREYXRhRGJSb3cgPSBbXG5cdElkLCAvLyBmaXJzdCBsaXN0IGlkXG5cdFVpbnQ4QXJyYXksIC8vIHNlY29uZCBpcyBlbmMgbWV0YSByb3cga2V5cyBlbmNvZGVkIGluIGJpbmFyeSBmb3JtYXRcblx0SWQsIC8vIHRoaXJkIGlzIG93bmVyIGdyb3VwIGlkXG5dXG5leHBvcnQgdHlwZSBFbmNyeXB0ZWRTZWFyY2hJbmRleEVudHJ5V2l0aEhhc2ggPSB7XG5cdGVuY0VudHJ5OiBFbmNyeXB0ZWRTZWFyY2hJbmRleEVudHJ5XG5cdGlkSGFzaDogbnVtYmVyXG59XG5leHBvcnQgdHlwZSBHcm91cERhdGEgPSB7XG5cdGxhc3RCYXRjaElkczogSWRbXVxuXHRpbmRleFRpbWVzdGFtcDogbnVtYmVyXG5cdGdyb3VwVHlwZTogR3JvdXBUeXBlXG59XG4vLyBydW50aW1lIHR5cGVzXG5leHBvcnQgdHlwZSBCNjRFbmNJbmRleEtleSA9IEJhc2U2NFxudHlwZSBFbmNJbmRleEtleSA9IFVpbnQ4QXJyYXlcbnR5cGUgRW5jSW5zdGFuY2VJZCA9IFVpbnQ4QXJyYXlcbmV4cG9ydCB0eXBlIEI2NEVuY0luc3RhbmNlSWQgPSBCYXNlNjRcbmV4cG9ydCB0eXBlIEF0dHJpYnV0ZUhhbmRsZXIgPSB7XG5cdGF0dHJpYnV0ZTogTW9kZWxWYWx1ZSB8IE1vZGVsQXNzb2NpYXRpb25cblx0dmFsdWU6IGxhenk8c3RyaW5nPlxufVxuZXhwb3J0IHR5cGUgRWxlbWVudERhdGFTdXJyb2dhdGUgPSB7XG5cdGxpc3RJZDogSWRcblx0Ly8gd2Ugc3RvcmUgaXQgaGVyZSBpbnN0ZWFkIG9mIFNlYXJjaEluZGV4RW50cnkgdG8gYWxsb3cgbW92aW5nIG1haWxzIHdpdGhvdXQgY2hhbmdpbmcgdGhlIFNlYXJjaEluZGV4RW50cmllcyBmb3IgdGhlIG1haWxcblx0ZW5jV29yZHNCNjQ6IEFycmF5PEI2NEVuY0luZGV4S2V5PlxuXHRvd25lckdyb3VwOiBJZFxufVxuZXhwb3J0IHR5cGUgS2V5VG9JbmRleEVudHJpZXMgPSB7XG5cdGluZGV4S2V5OiBCYXNlNjRcblx0aW5kZXhFbnRyaWVzOiBEZWNyeXB0ZWRTZWFyY2hJbmRleEVudHJ5W11cbn1cbmV4cG9ydCB0eXBlIEtleVRvRW5jcnlwdGVkSW5kZXhFbnRyaWVzID0ge1xuXHRpbmRleEtleTogQmFzZTY0XG5cdGluZGV4RW50cmllczogRW5jcnlwdGVkU2VhcmNoSW5kZXhFbnRyeVdpdGhIYXNoW11cbn1cbmV4cG9ydCB0eXBlIFNlYXJjaEluZGV4RW50cnkgPSB7XG5cdGlkOiBJZFxuXHRhdHRyaWJ1dGU6IG51bWJlclxuXHRwb3NpdGlvbnM6IG51bWJlcltdXG59XG5leHBvcnQgdHlwZSBEZWNyeXB0ZWRTZWFyY2hJbmRleEVudHJ5ID0gU2VhcmNoSW5kZXhFbnRyeSAmIHtcblx0ZW5jSWQ6IFVpbnQ4QXJyYXlcbn1cbi8vIFdlIGNhbGN1bGF0ZSB0aW1lc3RhbXAgdXBmcm9udCBiZWNhdXNlIHdlIG5lZWQgaXQgZm9yIHNvcnRpbmcgd2hlbiBpbnNlcnRpbmdcbmV4cG9ydCB0eXBlIEVuY1NlYXJjaEluZGV4RW50cnlXaXRoVGltZXN0YW1wID0ge1xuXHRlbnRyeTogRW5jcnlwdGVkU2VhcmNoSW5kZXhFbnRyeVxuXHR0aW1lc3RhbXA6IG51bWJlclxufVxuZXhwb3J0IHR5cGUgRW5jV29yZFRvTWV0YVJvdyA9IFJlY29yZDxCYXNlNjQsIG51bWJlcj5cbmV4cG9ydCB0eXBlIEVuY0luc3RhbmNlSWRXaXRoVGltZXN0YW1wID0ge1xuXHRlbmNJbnN0YW5jZUlkOiBVaW50OEFycmF5XG5cdHRpbWVzdGFtcDogbnVtYmVyXG5cdGFwcElkOiBudW1iZXJcblx0dHlwZUlkOiBudW1iZXJcbn1cbmV4cG9ydCB0eXBlIEluZGV4VXBkYXRlID0ge1xuXHR0eXBlSW5mbzogVHlwZUluZm9cblx0Ly8gaW5kZXggdXBkYXRlIG11c3QgYmUgdW5pcXVlIGZvciB0eXBlXG5cdGNyZWF0ZToge1xuXHRcdGVuY0luc3RhbmNlSWRUb0VsZW1lbnREYXRhOiBNYXA8QjY0RW5jSW5zdGFuY2VJZCwgRWxlbWVudERhdGFTdXJyb2dhdGU+XG5cdFx0Ly8gRm9yIGVhY2ggd29yZCB0aGVyZSdzIGEgbGlzdCBvZiBlbnRyaWVzIHdlIHdhbnQgdG8gaW5zZXJ0XG5cdFx0aW5kZXhNYXA6IE1hcDxCNjRFbmNJbmRleEtleSwgQXJyYXk8RW5jU2VhcmNoSW5kZXhFbnRyeVdpdGhUaW1lc3RhbXA+PlxuXHR9XG5cdG1vdmU6IEFycmF5PHtcblx0XHRlbmNJbnN0YW5jZUlkOiBCNjRFbmNJbnN0YW5jZUlkXG5cdFx0bmV3TGlzdElkOiBJZFxuXHR9PlxuXHRkZWxldGU6IHtcblx0XHQvLyBGb3IgZWFjaCBtZXRhZGF0YSByb3cgdGhlcmUncyBhIGxpc3Qgb2YgZW50cmllcyB3ZSB3YW50IHRvIGRlbGV0ZVxuXHRcdHNlYXJjaE1ldGFSb3dUb0VuY0luc3RhbmNlSWRzOiBNYXA8bnVtYmVyLCBBcnJheTxFbmNJbnN0YW5jZUlkV2l0aFRpbWVzdGFtcD4+XG5cdFx0ZW5jSW5zdGFuY2VJZHM6IEI2NEVuY0luc3RhbmNlSWRbXVxuXHR9XG59XG5leHBvcnQgdHlwZSBEYiA9IHtcblx0a2V5OiBBZXMyNTZLZXlcblx0Ly8gQHByZTogbXVzdCBub3QgYmUgYWNjZXNzZWQgYmVmb3JlIGluaXRpYWxpemVkIHByb21pc2UgaXMgcmVzb2x2ZWQuXG5cdGl2OiBVaW50OEFycmF5XG5cdC8vIGZpeGVkIGl2IGZvciBhbGwgc2VhcmNoIGluZGV4IGVudHJpZXNcblx0ZGJGYWNhZGU6IERiRmFjYWRlXG5cdGluaXRpYWxpemVkOiBQcm9taXNlPHZvaWQ+XG59XG5leHBvcnQgdHlwZSBTZWFyY2hJbmRleE1ldGFEYXRhUm93ID0ge1xuXHRpZDogbnVtYmVyXG5cdHdvcmQ6IEI2NEVuY0luZGV4S2V5XG5cdHJvd3M6IEFycmF5PFNlYXJjaEluZGV4TWV0YWRhdGFFbnRyeT5cbn1cbmV4cG9ydCB0eXBlIFNlYXJjaEluZGV4TWV0YWRhdGFFbnRyeSA9IHtcblx0a2V5OiBudW1iZXJcblx0c2l6ZTogbnVtYmVyXG5cdGFwcDogbnVtYmVyXG5cdHR5cGU6IG51bWJlclxuXHQvLyB3ZSBoYXZlIGFwcCBhbmQgdHlwZSBpbiBzZWFyY2ggaW5kZXggbWV0YSB0byBmaWx0ZXIgZm9yIHR5cGUgKG1haWwsIGNvbnRhY3QsIHVzZXJzKSBiZWZvcmUgbG9hZGluZyBhbmQgZGVjcnlwdGluZyBpbmRleCByb3dzLlxuXHRvbGRlc3RFbGVtZW50VGltZXN0YW1wOiBudW1iZXJcbn1cbmV4cG9ydCB0eXBlIE1vcmVSZXN1bHRzSW5kZXhFbnRyeSA9IHtcblx0aWQ6IElkXG5cdGVuY0lkOiBVaW50OEFycmF5XG59XG5leHBvcnQgdHlwZSBTZWFyY2hSZXN0cmljdGlvbiA9IHtcblx0dHlwZTogVHlwZVJlZjxhbnk+XG5cdHN0YXJ0OiBudW1iZXIgfCBudWxsXG5cdC8vIHRpbWVzdGFtcFxuXHRlbmQ6IG51bWJlciB8IG51bGxcblx0Ly8gbXVzdCBiZSBrZXB0IGluIHN5bmMgd2l0aCBmaWVsZFxuXHRmaWVsZDogc3RyaW5nIHwgbnVsbFxuXHQvLyBtdXN0IGJlIGtlcHQgaW4gc3luYyB3aXRoIGF0dHJpYnV0ZUlkc1xuXHRhdHRyaWJ1dGVJZHM6IG51bWJlcltdIHwgbnVsbFxuXHQvLyBsaXN0IG9mIGxvY2F0aW9ucyAoY2FsZW5kYXJzLCBmb2xkZXJzLCBsYWJlbHMgdG8gc2VhcmNoKS4gaWYgZW1wdHksIG1hdGNoIGFueXRoaW5nLiBvdGhlcndpc2UgaXQncyBhbiBPUi1tYXRjaC5cblx0Zm9sZGVySWRzOiBBcnJheTxJZD5cblx0Ly8gaWYgdHJ1ZSwgaW5jbHVkZSByZXBlYXRpbmcgZXZlbnRzIGluIHRoZSBzZWFyY2hcblx0ZXZlbnRTZXJpZXM6IGJvb2xlYW4gfCBudWxsXG59XG5leHBvcnQgdHlwZSBTZWFyY2hSZXN1bHQgPSB7XG5cdHF1ZXJ5OiBzdHJpbmdcblx0cmVzdHJpY3Rpb246IFNlYXJjaFJlc3RyaWN0aW9uXG5cdHJlc3VsdHM6IElkVHVwbGVbXVxuXHRjdXJyZW50SW5kZXhUaW1lc3RhbXA6IG51bWJlclxuXHRtYXhSZXN1bHRzPzogbnVtYmVyXG5cdG1vcmVSZXN1bHRzOiBBcnJheTxNb3JlUmVzdWx0c0luZGV4RW50cnk+XG5cdG1vcmVSZXN1bHRzRW50cmllczogW11cblx0bGFzdFJlYWRTZWFyY2hJbmRleFJvdzogQXJyYXk8W3N0cmluZywgbnVtYmVyIHwgbnVsbF0+XG5cdC8vIGFycmF5IG9mIHBhaXJzICh0b2tlbiwgbGFzdFJlYWRTZWFyY2hJbmRleFJvd09sZGVzdEVsZW1lbnRUaW1lc3RhbXApIGxhc3RSb3dSZWFkU2VhcmNoSW5kZXhSb3c6IG51bGwgPSBubyByZXN1bHQgcmVhZCwgMCA9IG5vIG1vcmUgc2VhcmNoIHJlc3VsdHM/Pz8/XG5cdG1hdGNoV29yZE9yZGVyOiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIEluZGV4aW5nRXJyb3JSZWFzb24ge1xuXHRVbmtub3duLFxuXHRDb25uZWN0aW9uTG9zdCxcbn1cblxuLyoqXG4gKiBDdXJyZW50IHN0YXRlIG9mIHRoZSBNYWlsaW5kZXhlclxuICogYWltZWRNYWlsSW5kZXhUaW1lc3RhbXAgaXMgdGhlIHRpbWVzdGFtcCB3ZSBhcmUgY3VycmVudGx5IGluZGV4aW5nIGZvciAob3Igc2FtZSBhcyBjdXJyZW50TWFpbEluZGV4VGltZXN0YW1wIGlmIHdlIGFyZSBub3QgaW5kZXhpbmcpXG4gKi9cbmV4cG9ydCB0eXBlIFNlYXJjaEluZGV4U3RhdGVJbmZvID0ge1xuXHRpbml0aWFsaXppbmc6IGJvb2xlYW5cblx0bWFpbEluZGV4RW5hYmxlZDogYm9vbGVhblxuXHRwcm9ncmVzczogbnVtYmVyXG5cdGN1cnJlbnRNYWlsSW5kZXhUaW1lc3RhbXA6IG51bWJlclxuXHRhaW1lZE1haWxJbmRleFRpbWVzdGFtcDogbnVtYmVyXG5cdGluZGV4ZWRNYWlsQ291bnQ6IG51bWJlclxuXHRmYWlsZWRJbmRleGluZ1VwVG86IG51bWJlciB8IG51bGxcblx0ZXJyb3I/OiBJbmRleGluZ0Vycm9yUmVhc29uIHwgbnVsbFxufVxuIl0sIm1hcHBpbmdzIjoiOztJQXNKa0Isc0RBQVg7QUFDTjtBQUNBOztBQUNBIn0=