import { assertNotNull } from "./dist2-chunk.js";

//#region src/common/api/common/utils/ProgressMonitor.ts
var ProgressMonitor = class {
	workCompleted;
	constructor(totalWork, updater) {
		this.totalWork = totalWork;
		this.updater = updater;
		this.workCompleted = 0;
	}
	workDone(amount) {
		this.workCompleted += amount;
		this.updater(this.percentage());
	}
	totalWorkDone(totalAmount) {
		this.workCompleted = totalAmount;
		this.updater(this.percentage());
	}
	percentage() {
		const result = 100 * this.workCompleted / this.totalWork;
		return Math.min(100, result);
	}
	completed() {
		this.workCompleted = this.totalWork;
		this.updater(100);
	}
};
var NoopProgressMonitor = class {
	workDone(amount) {}
	totalWorkDone(totalAmount) {}
	completed() {}
};
function makeTrackedProgressMonitor(tracker, totalWork) {
	if (totalWork < 1) return new NoopProgressMonitor();
	const handle = tracker.registerMonitorSync(totalWork);
	return assertNotNull(tracker.getMonitor(handle));
}

//#endregion
export { NoopProgressMonitor, ProgressMonitor, makeTrackedProgressMonitor };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZ3Jlc3NNb25pdG9yLWNodW5rLmpzIiwibmFtZXMiOlsidG90YWxXb3JrOiBudW1iZXIiLCJ1cGRhdGVyOiBQcm9ncmVzc0xpc3RlbmVyIiwiYW1vdW50OiBudW1iZXIiLCJ0b3RhbEFtb3VudDogbnVtYmVyIiwidHJhY2tlcjogUHJvZ3Jlc3NUcmFja2VyIl0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9hcGkvY29tbW9uL3V0aWxzL1Byb2dyZXNzTW9uaXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFByb2dyZXNzVHJhY2tlciB9IGZyb20gXCIuLi8uLi9tYWluL1Byb2dyZXNzVHJhY2tlclwiXG5pbXBvcnQgeyBhc3NlcnROb3ROdWxsIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5cbmV4cG9ydCB0eXBlIFByb2dyZXNzTW9uaXRvcklkID0gbnVtYmVyXG5leHBvcnQgdHlwZSBQcm9ncmVzc0xpc3RlbmVyID0gKHBlcmNlbnRhZ2VDb21wbGV0ZWQ6IG51bWJlcikgPT4gdW5rbm93blxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9ncmVzc01vbml0b3Ige1xuXHQvKipcblx0ICogQHBhcmFtIGFtb3VudCBvZiB3b3JrIGNvbXBsZXRlZCBpbiBjdXJyZW50IHN0ZXBcblx0ICovXG5cdHdvcmtEb25lKGFtb3VudDogbnVtYmVyKTogdm9pZFxuXG5cdHRvdGFsV29ya0RvbmUodG90YWxBbW91bnQ6IG51bWJlcik6IHZvaWRcblxuXHRjb21wbGV0ZWQoKTogdm9pZFxufVxuXG4vKipcbiAqIENsYXNzIHRvIGNhbGN1bGF0ZSBwZXJjZW50YWdlIG9mIHRvdGFsIHdvcmsgYW5kIHJlcG9ydCBpdCBiYWNrLlxuICogQ2FsbCB7QGNvZGUgd29ya0RvbmUoKSBvciBAY29kZSB0b3RhbFdvcmtEb25lKCl9IGZvciBlYWNoIHdvcmsgc3RlcCBhbmQge0Bjb2RlIGNvbXBsZXRlZCgpfVxuICogd2hlbiB5b3UgYXJlIGRvbmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9ncmVzc01vbml0b3IgaW1wbGVtZW50cyBJUHJvZ3Jlc3NNb25pdG9yIHtcblx0d29ya0NvbXBsZXRlZDogbnVtYmVyXG5cblx0Y29uc3RydWN0b3IocmVhZG9ubHkgdG90YWxXb3JrOiBudW1iZXIsIHByaXZhdGUgcmVhZG9ubHkgdXBkYXRlcjogUHJvZ3Jlc3NMaXN0ZW5lcikge1xuXHRcdHRoaXMud29ya0NvbXBsZXRlZCA9IDBcblx0fVxuXG5cdHdvcmtEb25lKGFtb3VudDogbnVtYmVyKSB7XG5cdFx0dGhpcy53b3JrQ29tcGxldGVkICs9IGFtb3VudFxuXHRcdHRoaXMudXBkYXRlcih0aGlzLnBlcmNlbnRhZ2UoKSlcblx0fVxuXG5cdHRvdGFsV29ya0RvbmUodG90YWxBbW91bnQ6IG51bWJlcikge1xuXHRcdHRoaXMud29ya0NvbXBsZXRlZCA9IHRvdGFsQW1vdW50XG5cdFx0dGhpcy51cGRhdGVyKHRoaXMucGVyY2VudGFnZSgpKVxuXHR9XG5cblx0cGVyY2VudGFnZSgpOiBudW1iZXIge1xuXHRcdGNvbnN0IHJlc3VsdCA9ICgxMDAgKiB0aGlzLndvcmtDb21wbGV0ZWQpIC8gdGhpcy50b3RhbFdvcmtcblx0XHRyZXR1cm4gTWF0aC5taW4oMTAwLCByZXN1bHQpXG5cdH1cblxuXHRjb21wbGV0ZWQoKSB7XG5cdFx0dGhpcy53b3JrQ29tcGxldGVkID0gdGhpcy50b3RhbFdvcmtcblx0XHR0aGlzLnVwZGF0ZXIoMTAwKVxuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBOb29wUHJvZ3Jlc3NNb25pdG9yIGltcGxlbWVudHMgSVByb2dyZXNzTW9uaXRvciB7XG5cdHdvcmtEb25lKGFtb3VudDogbnVtYmVyKSB7fVxuXG5cdHRvdGFsV29ya0RvbmUodG90YWxBbW91bnQ6IG51bWJlcikge31cblxuXHRjb21wbGV0ZWQoKSB7fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVRyYWNrZWRQcm9ncmVzc01vbml0b3IodHJhY2tlcjogUHJvZ3Jlc3NUcmFja2VyLCB0b3RhbFdvcms6IG51bWJlcik6IElQcm9ncmVzc01vbml0b3Ige1xuXHRpZiAodG90YWxXb3JrIDwgMSkgcmV0dXJuIG5ldyBOb29wUHJvZ3Jlc3NNb25pdG9yKClcblx0Y29uc3QgaGFuZGxlID0gdHJhY2tlci5yZWdpc3Rlck1vbml0b3JTeW5jKHRvdGFsV29yaylcblx0cmV0dXJuIGFzc2VydE5vdE51bGwodHJhY2tlci5nZXRNb25pdG9yKGhhbmRsZSkpXG59XG4iXSwibWFwcGluZ3MiOiI7OztJQXNCYSxrQkFBTixNQUFrRDtDQUN4RDtDQUVBLFlBQXFCQSxXQUFvQ0MsU0FBMkI7RUFzQ3BGLEtBdENxQjtFQXNDcEIsS0F0Q3dEO0FBQ3hELE9BQUssZ0JBQWdCO0NBQ3JCO0NBRUQsU0FBU0MsUUFBZ0I7QUFDeEIsT0FBSyxpQkFBaUI7QUFDdEIsT0FBSyxRQUFRLEtBQUssWUFBWSxDQUFDO0NBQy9CO0NBRUQsY0FBY0MsYUFBcUI7QUFDbEMsT0FBSyxnQkFBZ0I7QUFDckIsT0FBSyxRQUFRLEtBQUssWUFBWSxDQUFDO0NBQy9CO0NBRUQsYUFBcUI7RUFDcEIsTUFBTSxTQUFVLE1BQU0sS0FBSyxnQkFBaUIsS0FBSztBQUNqRCxTQUFPLEtBQUssSUFBSSxLQUFLLE9BQU87Q0FDNUI7Q0FFRCxZQUFZO0FBQ1gsT0FBSyxnQkFBZ0IsS0FBSztBQUMxQixPQUFLLFFBQVEsSUFBSTtDQUNqQjtBQUNEO0lBRVksc0JBQU4sTUFBc0Q7Q0FDNUQsU0FBU0QsUUFBZ0IsQ0FBRTtDQUUzQixjQUFjQyxhQUFxQixDQUFFO0NBRXJDLFlBQVksQ0FBRTtBQUNkO0FBRU0sU0FBUywyQkFBMkJDLFNBQTBCSixXQUFxQztBQUN6RyxLQUFJLFlBQVksRUFBRyxRQUFPLElBQUk7Q0FDOUIsTUFBTSxTQUFTLFFBQVEsb0JBQW9CLFVBQVU7QUFDckQsUUFBTyxjQUFjLFFBQVEsV0FBVyxPQUFPLENBQUM7QUFDaEQifQ==