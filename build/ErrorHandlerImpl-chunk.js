import { assertMainOrNode, isDesktop, isOfflineStorageAvailable } from "./Env-chunk.js";
import { assertNotNull, noOp } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { windowFacade } from "./WindowFacade-chunk.js";
import { UserTypeRef } from "./TypeRefs2-chunk.js";
import { OfflineDbClosedError, isOfflineError } from "./ErrorUtils-chunk.js";
import { AccessBlockedError, AccessDeactivatedError, AccessExpiredError, ConnectionError, InsufficientStorageError, InvalidSoftwareVersionError, NotAuthenticatedError, RequestTimeoutError, ServiceUnavailableError, SessionExpiredError } from "./RestError-chunk.js";
import { OutOfSyncError } from "./OutOfSyncError-chunk.js";
import { CancelledError } from "./CancelledError-chunk.js";
import { IndexingNotSupportedError, QuotaExceededError } from "./QuotaExceededError-chunk.js";
import { SessionType } from "./SessionType-chunk.js";
import { Dialog } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { UserError } from "./UserError-chunk.js";
import { showProgressDialog } from "./ProgressDialog-chunk.js";
import { showMoreStorageNeededOrderDialog } from "./SubscriptionDialogs-chunk.js";
import { showSnackBar } from "./SnackBar-chunk.js";
import { credentialsToUnencrypted } from "./Credentials-chunk.js";
import { showErrorDialogNotLoggedIn, showErrorNotification } from "./ErrorReporter-chunk.js";
import { showRequestPasswordDialog } from "./PasswordRequestDialog-chunk.js";

//#region src/common/misc/ErrorHandlerImpl.ts
assertMainOrNode();
let unknownErrorDialogActive = false;
let notConnectedDialogActive = false;
let invalidSoftwareVersionActive = false;
let loginDialogActive = false;
let isLoggingOut = false;
let serviceUnavailableDialogActive = false;
let requestTimeoutDialogActive = false;
let shownQuotaError = false;
const ignoredMessages = [
	"webkitExitFullScreen",
	"googletag",
	"avast_submit"
];
async function handleUncaughtErrorImpl(e) {
	const { logins, interWindowEventSender, worker, search } = locator;
	if (isLoggingOut) return;
	if (e instanceof UserError) return showUserError(e);
	if (isOfflineError(e)) showOfflineMessage();
else if (e instanceof InvalidSoftwareVersionError) {
		if (!invalidSoftwareVersionActive) {
			invalidSoftwareVersionActive = true;
			Dialog.message("outdatedClient_msg").then(() => invalidSoftwareVersionActive = false);
		}
	} else if (e instanceof NotAuthenticatedError || e instanceof AccessBlockedError || e instanceof AccessDeactivatedError || e instanceof AccessExpiredError) {
		if (logins.isUserLoggedIn()) logoutIfNoPasswordPrompt();
	} else if (e instanceof SessionExpiredError) reloginForExpiredSession();
else if (e instanceof OutOfSyncError) {
		const isOffline = isOfflineStorageAvailable() && logins.isUserLoggedIn() && logins.getUserController().sessionType === SessionType.Persistent;
		await Dialog.message("outOfSync_label", lang.get(isOffline ? "dataExpiredOfflineDb_msg" : "dataExpired_msg"));
		const { userId } = logins.getUserController();
		if (isDesktop()) {
			await interWindowEventSender?.localUserDataInvalidated(userId);
			await worker.getWorkerInterface().sqlCipherFacade.deleteDb(userId);
		}
		await logins.logout(false);
		await windowFacade.reload({ noAutoLogin: true });
	} else if (e instanceof InsufficientStorageError) if (logins.getUserController().isGlobalAdmin()) showMoreStorageNeededOrderDialog("insufficientStorageAdmin_msg");
else {
		const errorMessage = lang.makeTranslation("insufficientStorageUser_msg", lang.get("insufficientStorageUser_msg") + " " + lang.get("contactAdmin_msg"));
		Dialog.message(errorMessage);
	}
else if (e instanceof ServiceUnavailableError) {
		if (!serviceUnavailableDialogActive) {
			serviceUnavailableDialogActive = true;
			Dialog.message("serviceUnavailable_msg").then(() => {
				serviceUnavailableDialogActive = false;
			});
		}
	} else if (e instanceof RequestTimeoutError) {
		if (!requestTimeoutDialogActive) {
			requestTimeoutDialogActive = true;
			Dialog.message("requestTimeout_msg").then(() => {
				requestTimeoutDialogActive = false;
			});
		}
	} else if (e instanceof IndexingNotSupportedError) {
		console.log("Indexing not supported", e);
		if ("indexingSupported" in search) search.indexingSupported = false;
	} else if (e instanceof QuotaExceededError) {
		if (!shownQuotaError) {
			shownQuotaError = true;
			Dialog.message("storageQuotaExceeded_msg");
		}
	} else if (e instanceof OfflineDbClosedError) {
		if (!loginDialogActive) throw e;
	} else if (ignoredError(e)) {} else if (!unknownErrorDialogActive) {
		unknownErrorDialogActive = true;
		if (logins.isUserLoggedIn()) {
			const { ignored } = await showErrorNotification(e);
			unknownErrorDialogActive = false;
			if (ignored) ignoredMessages.push(e.message);
		} else {
			console.log("Unknown error", e);
			showErrorDialogNotLoggedIn(e).then(() => unknownErrorDialogActive = false);
		}
	}
}
function showOfflineMessage() {
	if (!notConnectedDialogActive) {
		notConnectedDialogActive = true;
		showSnackBar({
			message: "serverNotReachable_msg",
			button: {
				label: "ok_action",
				click: () => {}
			},
			onClose: () => {
				notConnectedDialogActive = false;
			}
		});
	}
}
function logoutIfNoPasswordPrompt() {
	if (!loginDialogActive) windowFacade.reload({});
}
async function reloginForExpiredSession() {
	if (loginDialogActive) return;
	const { logins, loginFacade, secondFactorHandler, credentialsProvider, cacheStorage } = locator;
	await logins.waitForPartialLogin();
	console.log("RELOGIN", logins.isUserLoggedIn());
	const oldSessionType = logins.getUserController().sessionType;
	const userId = logins.getUserController().user._id;
	const mailAddress = assertNotNull(logins.getUserController().userGroupInfo.mailAddress, "could not get mailAddress from userGroupInfo");
	const oldCredentials = await credentialsProvider.getDecryptedCredentialsByUserId(userId);
	await cacheStorage?.deleteIfExists(UserTypeRef, null, userId);
	const sessionReset = loginFacade.resetSession();
	loginDialogActive = true;
	const dialog = showRequestPasswordDialog({
		action: async (pw) => {
			await sessionReset;
			let credentials;
			let databaseKey;
			try {
				const newSessionData = await logins.createSession(mailAddress, pw, oldSessionType, oldCredentials?.databaseKey);
				credentials = newSessionData.credentials;
				databaseKey = newSessionData.databaseKey;
			} catch (e) {
				if (e instanceof CancelledError || e instanceof AccessBlockedError || e instanceof NotAuthenticatedError || e instanceof AccessDeactivatedError || e instanceof ConnectionError) {
					const { getLoginErrorMessage } = await import("./LoginUtils2-chunk.js");
					return lang.getTranslationText(getLoginErrorMessage(e, false));
				} else throw e;
			} finally {
				secondFactorHandler.closeWaitingForSecondFactorDialog();
			}
			await credentialsProvider.deleteByUserId(userId, { deleteOfflineDb: false });
			if (oldSessionType === SessionType.Persistent) await credentialsProvider.store(credentialsToUnencrypted(credentials, databaseKey));
			loginDialogActive = false;
			dialog.close();
			return "";
		},
		cancel: {
			textId: "logout_label",
			action() {
				windowFacade.reload({});
			}
		}
	});
}
function ignoredError(e) {
	return e.message != null && ignoredMessages.some((s) => e.message.includes(s));
}
function disableErrorHandlingDuringLogout() {
	isLoggingOut = true;
	showProgressDialog("loggingOut_msg", new Promise(noOp));
}
if (typeof window !== "undefined") window.tutao.testError = () => handleUncaughtErrorImpl(new Error("test error!"));
function showUserError(error) {
	return Dialog.message(lang.makeTranslation("error_msg", error.message));
}

//#endregion
export { disableErrorHandlingDuringLogout as disableErrorHandlingDuringLogout$1, handleUncaughtErrorImpl, reloginForExpiredSession, showUserError };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,