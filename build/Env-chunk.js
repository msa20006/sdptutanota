import { ProgrammingError } from "./ProgrammingError-chunk.js";

//#region src/common/api/common/Env.ts
const LOGIN_TITLE = "Mail. Done. Right. Tuta Mail Login & Sign up for an Ad-free Mailbox";
const Mode = Object.freeze({
	Browser: "Browser",
	App: "App",
	Test: "Test",
	Playground: "Playground",
	Desktop: "Desktop",
	Admin: "Admin"
});
function getWebsocketBaseUrl(domainConfig) {
	return domainConfig.apiUrl.replace(/^http/, "ws");
}
function getApiBaseUrl(domainConfig) {
	if (isIOSApp()) return domainConfig.apiUrl.replace(/^http/, "api");
else return domainConfig.apiUrl;
}
function isIOSApp() {
	if (isApp() && env.platformId == null) throw new ProgrammingError("PlatformId is not set!");
	return env.mode === Mode.App && env.platformId === "ios";
}
function isAppleDevice() {
	return env.platformId === "darwin" || isIOSApp();
}
function isAndroidApp() {
	if (isApp() && env.platformId == null) throw new ProgrammingError("PlatformId is not set!");
	return env.mode === Mode.App && env.platformId === "android";
}
function isApp() {
	return env.mode === Mode.App;
}
function isDesktop() {
	return env.mode === Mode.Desktop;
}
function isBrowser() {
	return env.mode === Mode.Browser;
}
let worker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let node = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node !== "undefined";
function isWebClient() {
	return env.mode === Mode.Browser;
}
function isAdminClient() {
	return env.mode === Mode.Admin;
}
function isElectronClient() {
	return isDesktop() || isAdminClient();
}
function isMainOrNode() {
	return !worker || node || env.mode === Mode.Test;
}
function isWorkerOrNode() {
	return worker || node || env.mode === Mode.Test;
}
function isWorker() {
	return worker;
}
function isTest() {
	return env.mode === Mode.Test;
}
function isDesktopMainThread() {
	return node && typeof env !== "undefined" && (env.mode === Mode.Desktop || env.mode === Mode.Admin);
}
let boot = !isDesktopMainThread() && !isWorker();
/**
* A hackaround. Set by bundler.
* Rolldown doesn't inline const enums at the moment, so we can't assert the loading order.
* If not set defaults to true
*/
const assertionsEnabled = false;
function assertMainOrNode() {
	if (!assertionsEnabled) return;
	if (!isMainOrNode()) throw new Error("this code must not run in the worker thread");
	if (boot) throw new Error("this main code must not be loaded at boot time");
}
function assertMainOrNodeBoot() {
	if (!assertionsEnabled) return;
	if (!isMainOrNode()) throw new Error("this code must not run in the worker thread");
}
function assertWorkerOrNode() {
	if (!assertionsEnabled) return;
	if (!isWorkerOrNode()) throw new Error("this code must not run in the gui thread");
}
function bootFinished() {
	boot = false;
}
function isOfflineStorageAvailable() {
	return !isBrowser();
}

//#endregion
export { LOGIN_TITLE, Mode, assertMainOrNode, assertMainOrNodeBoot, assertWorkerOrNode, bootFinished, getApiBaseUrl, getWebsocketBaseUrl, isAdminClient, isAndroidApp, isApp, isAppleDevice, isBrowser, isDesktop, isElectronClient, isIOSApp, isMainOrNode, isOfflineStorageAvailable, isTest, isWebClient, isWorker };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,