import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { assertNotNull, downcast, isEmpty, neverNull } from "./dist2-chunk.js";
import { Const, NewBusinessPlans, NewPaidPlans, NewPersonalPlans } from "./TutanotaConstants-chunk.js";
import { GENERATED_MAX_ID } from "./EntityUtils-chunk.js";
import { BookingTypeRef } from "./TypeRefs2-chunk.js";
import { Dialog } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";

//#region src/common/misc/SubscriptionDialogs.ts
async function showNotAvailableForFreeDialog(acceptedPlans = NewPaidPlans) {
	const wizard = await import("./UpgradeSubscriptionWizard-chunk.js");
	const customerInfo = await locator.logins.getUserController().loadCustomerInfo();
	const businessPlanRequired = acceptedPlans.filter((plan) => NewBusinessPlans.includes(plan)).length === acceptedPlans.length && NewPersonalPlans.includes(downcast(customerInfo.plan));
	const msg = businessPlanRequired ? "pricing.notSupportedByPersonalPlan_msg" : "newPaidPlanRequired_msg";
	await wizard.showUpgradeWizard(locator.logins, acceptedPlans, msg);
}
function createNotAvailableForFreeClickHandler(acceptedPlans, click, available) {
	return (e, dom) => {
		if (!available()) showNotAvailableForFreeDialog(acceptedPlans);
else click(e, dom);
	};
}
async function checkPaidSubscription() {
	if (locator.logins.getUserController().isFreeAccount()) {
		showNotAvailableForFreeDialog();
		return false;
	}
	return true;
}
async function showMoreStorageNeededOrderDialog(messageIdOrMessageFunction) {
	const userController = locator.logins.getUserController();
	if (!userController.isGlobalAdmin()) return Dialog.message("insufficientStorageWarning_msg");
	const confirmed = await Dialog.confirm(messageIdOrMessageFunction, "upgrade_action");
	if (confirmed) if (userController.isFreeAccount()) {
		const wizard = await import("./UpgradeSubscriptionWizard-chunk.js");
		return wizard.showUpgradeWizard(locator.logins);
	} else {
		const usedStorage = Number(await locator.userManagementFacade.readUsedUserStorage(userController.user));
		const { getAvailableMatchingPlans } = await import("./SubscriptionUtils2-chunk.js");
		const plansWithMoreStorage = await getAvailableMatchingPlans(locator.serviceExecutor, (config) => Number(config.storageGb) * Const.MEMORY_GB_FACTOR > usedStorage);
		if (isEmpty(plansWithMoreStorage)) await Dialog.message(userController.isGlobalAdmin() ? "insufficientStorageAdmin_msg" : "insufficientStorageUser_msg");
else await showPlanUpgradeRequiredDialog(plansWithMoreStorage);
	}
}
async function showPlanUpgradeRequiredDialog(acceptedPlans, reason) {
	if (isEmpty(acceptedPlans)) throw new ProgrammingError("no plans specified");
	const userController = locator.logins.getUserController();
	if (userController.isFreeAccount()) {
		showNotAvailableForFreeDialog(acceptedPlans);
		return false;
	} else if (!userController.isGlobalAdmin()) {
		Dialog.message("contactAdmin_msg");
		return false;
	} else {
		if (reason == null) {
			let customerInfo = await userController.loadCustomerInfo();
			const businessPlanRequired = acceptedPlans.filter((plan) => NewBusinessPlans.includes(plan)).length === acceptedPlans.length && !NewBusinessPlans.includes(downcast(customerInfo.plan));
			reason = businessPlanRequired ? "pricing.notSupportedByPersonalPlan_msg" : "newPaidPlanRequired_msg";
		}
		await showSwitchPlanDialog(userController, acceptedPlans, reason);
		return acceptedPlans.includes(downcast(await userController.getPlanType()));
	}
}
async function showUpgradeWizardOrSwitchSubscriptionDialog(userController) {
	if (userController.isFreeAccount()) {
		const { showUpgradeWizard } = await import("./UpgradeSubscriptionWizard-chunk.js");
		await showUpgradeWizard(locator.logins);
	} else await showSwitchPlanDialog(userController, NewPaidPlans);
}
async function showSwitchPlanDialog(userController, acceptedPlans, reason) {
	let customerInfo = await userController.loadCustomerInfo();
	const bookings = await locator.entityClient.loadRange(BookingTypeRef, neverNull(customerInfo.bookings).items, GENERATED_MAX_ID, 1, true);
	const { showSwitchDialog } = await import("./SwitchSubscriptionDialog2-chunk.js");
	return showSwitchDialog(await userController.loadCustomer(), customerInfo, await userController.loadAccountingInfo(), assertNotNull(bookings[0]), acceptedPlans, reason ?? null);
}

//#endregion
export { checkPaidSubscription, createNotAvailableForFreeClickHandler, showMoreStorageNeededOrderDialog, showNotAvailableForFreeDialog, showPlanUpgradeRequiredDialog, showUpgradeWizardOrSwitchSubscriptionDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,