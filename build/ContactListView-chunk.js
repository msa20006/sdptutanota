import { assertMainOrNode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { NBSP, noOp } from "./dist2-chunk.js";
import { styles } from "./styles-chunk.js";
import { theme } from "./theme-chunk.js";
import { px, size } from "./size-chunk.js";
import { BootIcons } from "./Icon-chunk.js";
import { getContactListName } from "./ContactUtils-chunk.js";
import { ColumnEmptyMessageBox } from "./ColumnEmptyMessageBox-chunk.js";
import { List, MultiselectMode } from "./List-chunk.js";
import { SelectableRowContainer, checkboxOpacity, scaleXHide, scaleXShow, selectableRowAnimParams, shouldAlwaysShowMultiselectCheckbox } from "./SelectableRowContainer-chunk.js";
import { ListColumnWrapper } from "./ListColumnWrapper-chunk.js";

//#region src/mail-app/contacts/view/ContactRow.ts
const shiftByForCheckbox = px(size.checkbox_size + size.hpad);
const translateXShow = `translateX(${shiftByForCheckbox})`;
const translateXHide = "translateX(0)";
var ContactRow = class {
	top;
	domElement = null;
	entity;
	selectionUpdater;
	domName;
	domAddress;
	checkboxDom;
	checkboxWasVisible;
	constructor(onSelected, shouldShowCheckbox) {
		this.onSelected = onSelected;
		this.shouldShowCheckbox = shouldShowCheckbox;
		this.top = 0;
		this.entity = null;
		this.checkboxWasVisible = this.shouldShowCheckbox();
	}
	update(contact, selected, isInMultiSelect) {
		this.entity = contact;
		this.selectionUpdater(selected, isInMultiSelect);
		this.showCheckboxAnimated(this.shouldShowCheckbox() || isInMultiSelect);
		checkboxOpacity(this.checkboxDom, selected);
		this.checkboxDom.checked = selected && isInMultiSelect;
		this.domName.textContent = getContactListName(contact);
		this.domAddress.textContent = contact.mailAddresses && contact.mailAddresses.length > 0 ? contact.mailAddresses[0].address : NBSP;
	}
	/**
	* Only the structure is managed by mithril. We set all contents on our own (see update) in order to avoid the vdom overhead (not negligible on mobiles)
	*/
	render() {
		return mithril_default(SelectableRowContainer, {
			oncreate: (vnode) => {
				Promise.resolve().then(() => this.showCheckbox(this.shouldShowCheckbox()));
			},
			onSelectedChangeRef: (updater) => this.selectionUpdater = updater
		}, mithril_default(".mt-xs.abs", [mithril_default("input.checkbox.list-checkbox", {
			type: "checkbox",
			style: { transformOrigin: "left" },
			onclick: (e) => {
				e.stopPropagation();
			},
			onchange: () => {
				if (this.entity) this.onSelected(this.entity, this.checkboxDom.checked);
			},
			oncreate: (vnode) => {
				this.checkboxDom = vnode.dom;
				checkboxOpacity(this.checkboxDom, false);
			}
		})]), mithril_default(".flex.col.overflow-hidden.flex-grow", [mithril_default(".text-ellipsis.badge-line-height", { oncreate: (vnode) => this.domName = vnode.dom }), mithril_default(".text-ellipsis.smaller.mt-xxs", { oncreate: (vnode) => this.domAddress = vnode.dom })]));
	}
	showCheckboxAnimated(show) {
		if (this.checkboxWasVisible === show) return;
		if (show) {
			this.domName.style.paddingRight = shiftByForCheckbox;
			this.domAddress.style.paddingRight = shiftByForCheckbox;
			this.checkboxDom.style.display = "";
			const nameAnim = this.domName.animate({ transform: [translateXHide, translateXShow] }, selectableRowAnimParams);
			const addressAnim = this.domAddress.animate({ transform: [translateXHide, translateXShow] }, selectableRowAnimParams);
			const checkboxAnim = this.checkboxDom.animate({ transform: [scaleXHide, scaleXShow] }, selectableRowAnimParams);
			Promise.all([
				nameAnim.finished,
				addressAnim.finished,
				checkboxAnim.finished
			]).then(() => {
				nameAnim.cancel();
				addressAnim.cancel();
				checkboxAnim.cancel();
				this.showCheckbox(show);
			}, noOp);
		} else {
			this.domName.style.paddingRight = "0";
			this.domAddress.style.paddingRight = "0";
			const nameAnim = this.domName.animate({ transform: [translateXShow, translateXHide] }, selectableRowAnimParams);
			const addressAnim = this.domAddress.animate({ transform: [translateXShow, translateXHide] }, selectableRowAnimParams);
			const checkboxAnim = this.checkboxDom.animate({ transform: [scaleXShow, scaleXHide] }, selectableRowAnimParams);
			Promise.all([
				nameAnim.finished,
				addressAnim.finished,
				checkboxAnim.finished
			]).then(() => {
				nameAnim.cancel();
				addressAnim.cancel();
				checkboxAnim.cancel();
				this.showCheckbox(show);
			}, noOp);
		}
		this.checkboxWasVisible = show;
	}
	showCheckbox(show) {
		let translate;
		let scale;
		let padding;
		if (show) {
			translate = translateXShow;
			scale = scaleXShow;
			padding = shiftByForCheckbox;
		} else {
			translate = translateXHide;
			scale = scaleXHide;
			padding = "0";
		}
		this.domAddress.style.transform = translate;
		this.domName.style.transform = translate;
		this.domAddress.style.paddingRight = padding;
		this.domName.style.paddingRight = padding;
		this.checkboxDom.style.transform = scale;
		this.checkboxDom.style.display = show ? "" : "none";
	}
};

//#endregion
//#region src/mail-app/contacts/view/ContactListView.ts
assertMainOrNode();
var ContactListView = class {
	contactViewModel = null;
	view({ attrs: { contactViewModel, onSingleSelection } }) {
		this.contactViewModel = contactViewModel;
		return mithril_default(ListColumnWrapper, { headerContent: null }, contactViewModel.listModel.isEmptyAndDone() ? mithril_default(ColumnEmptyMessageBox, {
			color: theme.list_message_bg,
			message: "noContacts_msg",
			icon: BootIcons.Contacts
		}) : mithril_default(List, {
			renderConfig: this.renderConfig,
			state: contactViewModel.listState(),
			onLoadMore: () => {},
			onRetryLoading: () => {
				contactViewModel.listModel.retryLoading();
			},
			onSingleSelection: (item) => {
				contactViewModel.listModel.onSingleSelection(item);
				onSingleSelection();
			},
			onSingleTogglingMultiselection: (item) => {
				contactViewModel.listModel.onSingleInclusiveSelection(item, styles.isSingleColumnLayout());
			},
			onRangeSelectionTowards: (item) => {
				contactViewModel.listModel.selectRangeTowards(item);
			},
			onStopLoading() {
				contactViewModel.listModel.stopLoading();
			}
		}));
	}
	renderConfig = {
		itemHeight: size.list_row_height,
		multiselectionAllowed: MultiselectMode.Enabled,
		swipe: null,
		createElement: (dom) => {
			return new KindaContactRow(dom, (item) => this.contactViewModel?.listModel.onSingleExclusiveSelection(item));
		}
	};
};
var KindaContactRow = class {
	cr;
	domElement;
	entity = null;
	constructor(dom, onToggleSelection, shouldShowCheckbox = () => shouldAlwaysShowMultiselectCheckbox()) {
		this.cr = new ContactRow(onToggleSelection, shouldShowCheckbox);
		this.domElement = dom;
		mithril_default.render(dom, this.cr.render());
	}
	update(item, selected, multiselect) {
		this.entity = item;
		this.cr.update(item, selected, multiselect);
	}
	render() {
		return this.cr.render();
	}
};

//#endregion
export { ContactListView, KindaContactRow, shiftByForCheckbox, translateXHide, translateXShow };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,