import { assertMainOrNodeBoot } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { lazyMemoized } from "./dist2-chunk.js";

//#region src/common/misc/RouteChange.ts
assertMainOrNodeBoot();
const throttleRoute = lazyMemoized(() => {
	const limit = 200;
	let lastCall = 0;
	let lastUrl = null;
	let lastArgs = {};
	let lastRoute = mithril_default.route.get();
	return function(url, args) {
		if (mithril_default.route.get() === lastRoute && url === lastUrl && shallowCompare(lastArgs, args)) return;
		lastUrl = url;
		lastArgs = args;
		const now = new Date().getTime();
		try {
			mithril_default.route.set(url, args, { replace: now - lastCall < limit });
			lastRoute = mithril_default.route.get();
		} catch (e) {
			if (e.message.includes("can't access dead object")) console.log(`Caught error: ${e.message}`);
else throw e;
		}
		lastCall = now;
	};
});
/** return true if a and b contain the same keys with values that are the same when compared with === */
function shallowCompare(a, b) {
	if (a === b) return true;
	const aEntries = Object.entries(a);
	const bEntries = Object.entries(b);
	return aEntries.length === bEntries.length && !aEntries.some(([key, value]) => b[key] !== value);
}
const MAIL_PREFIX = "/mail";
const CONTACTS_PREFIX = "/contact";
const CONTACTLIST_PREFIX = "/contactlist";
const CALENDAR_PREFIX = "/calendar";
const SEARCH_PREFIX = "/search";
const SETTINGS_PREFIX = "/settings";
const LogoutPath = "/login?noAutoLogin=true";
const LogoutUrl = window.location.hash.startsWith("#mail") ? "/ext?noAutoLogin=true" + location.hash : LogoutPath;

//#endregion
export { CALENDAR_PREFIX, CONTACTLIST_PREFIX, CONTACTS_PREFIX, LogoutUrl, MAIL_PREFIX, SEARCH_PREFIX, SETTINGS_PREFIX, throttleRoute };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm91dGVDaGFuZ2UtY2h1bmsuanMiLCJuYW1lcyI6WyJsYXN0VXJsOiBzdHJpbmcgfCBudWxsIiwibGFzdEFyZ3M6IFJlY29yZDxzdHJpbmcsIGFueT4iLCJ1cmw6IHN0cmluZyIsImFyZ3M6IFJlY29yZDxzdHJpbmcsIGFueT4iLCJhOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiIsImI6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IiwiTG9nb3V0VXJsOiBzdHJpbmciXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL21pc2MvUm91dGVDaGFuZ2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0gZnJvbSBcIm1pdGhyaWxcIlxuaW1wb3J0IHsgYXNzZXJ0TWFpbk9yTm9kZUJvb3QgfSBmcm9tIFwiLi4vYXBpL2NvbW1vbi9FbnZcIlxuaW1wb3J0IHsgbGF6eU1lbW9pemVkIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5cbmFzc2VydE1haW5Pck5vZGVCb290KClcblxuZXhwb3J0IHR5cGUgUm91dGVTZXRGbiA9IChwYXRoOiBzdHJpbmcsIGFyZ3M6IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IHZvaWRcblxuLyoqIHJldHVybiBhIHJlcGxhY2VtZW50IGZvciBtLnJvdXRlLnNldCB0aGF0IHJlcGxhY2VzIHRoZSBsYXN0IGhpc3RvcnlcbiAqIHN0YXRlIGZvciByZXJvdXRlcyB0aGF0IGhhcHBlbiBxdWlja2x5IGVub3VnaCBpbnN0ZWFkIG9mIGFkZGluZyBhXG4gKiBuZXcgaGlzdG9yeSBlbnRyeS4gd2lsbCBhbHNvIGxhdGNoIHRvIHRoZSByb3V0ZSwgaWdub3JpbmcgYW55XG4gKiBmb2xsb3d1cCBjYWxscyB0byB0aGUgc2FtZSByb3V0ZS4gICovXG5leHBvcnQgY29uc3QgdGhyb3R0bGVSb3V0ZSA9IGxhenlNZW1vaXplZCgoKTogUm91dGVTZXRGbiA9PiB7XG5cdGNvbnN0IGxpbWl0ID0gMjAwXG5cdGxldCBsYXN0Q2FsbCA9IDBcblx0bGV0IGxhc3RVcmw6IHN0cmluZyB8IG51bGwgPSBudWxsXG5cdGxldCBsYXN0QXJnczogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9XG5cdGxldCBsYXN0Um91dGUgPSBtLnJvdXRlLmdldCgpXG5cdHJldHVybiBmdW5jdGlvbiAodXJsOiBzdHJpbmcsIGFyZ3M6IFJlY29yZDxzdHJpbmcsIGFueT4pIHtcblx0XHQvLyBzb21lb25lIG1pZ2h0IGhhdmUgY2FsbGVkIG0ucm91dGUuc2V0KCkgd2l0aG91dCB1cywgc28gaWYgdGhlIHJvdXRlIGNoYW5nZWQsIHdlIG5lZWQgdG9cblx0XHQvLyBjYWxsIG0ucm91dGUuc2V0KCkgaW4gYW55IGNhc2UuXG5cdFx0aWYgKG0ucm91dGUuZ2V0KCkgPT09IGxhc3RSb3V0ZSAmJiB1cmwgPT09IGxhc3RVcmwgJiYgc2hhbGxvd0NvbXBhcmUobGFzdEFyZ3MsIGFyZ3MpKSByZXR1cm5cblx0XHRsYXN0VXJsID0gdXJsXG5cdFx0bGFzdEFyZ3MgPSBhcmdzXG5cdFx0Y29uc3Qgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcblx0XHR0cnkge1xuXHRcdFx0bS5yb3V0ZS5zZXQodXJsLCBhcmdzLCB7XG5cdFx0XHRcdHJlcGxhY2U6IG5vdyAtIGxhc3RDYWxsIDwgbGltaXQsXG5cdFx0XHR9KVxuXHRcdFx0bGFzdFJvdXRlID0gbS5yb3V0ZS5nZXQoKVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGlmIChlLm1lc3NhZ2UuaW5jbHVkZXMoXCJjYW4ndCBhY2Nlc3MgZGVhZCBvYmplY3RcIikpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coYENhdWdodCBlcnJvcjogJHtlLm1lc3NhZ2V9YClcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IGVcblx0XHRcdH1cblx0XHR9XG5cblx0XHRsYXN0Q2FsbCA9IG5vd1xuXHR9XG59KVxuXG4vKiogcmV0dXJuIHRydWUgaWYgYSBhbmQgYiBjb250YWluIHRoZSBzYW1lIGtleXMgd2l0aCB2YWx1ZXMgdGhhdCBhcmUgdGhlIHNhbWUgd2hlbiBjb21wYXJlZCB3aXRoID09PSAqL1xuZnVuY3Rpb24gc2hhbGxvd0NvbXBhcmUoYTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sIGI6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogYm9vbGVhbiB7XG5cdGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZVxuXHRjb25zdCBhRW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGEpXG5cdGNvbnN0IGJFbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoYilcblx0cmV0dXJuIGFFbnRyaWVzLmxlbmd0aCA9PT0gYkVudHJpZXMubGVuZ3RoICYmICFhRW50cmllcy5zb21lKChba2V5LCB2YWx1ZV0pID0+IGJba2V5XSAhPT0gdmFsdWUpXG59XG5cbmV4cG9ydCBjb25zdCBNQUlMX1BSRUZJWCA9IFwiL21haWxcIlxuZXhwb3J0IGNvbnN0IENPTlRBQ1RTX1BSRUZJWCA9IFwiL2NvbnRhY3RcIlxuZXhwb3J0IGNvbnN0IENPTlRBQ1RMSVNUX1BSRUZJWCA9IFwiL2NvbnRhY3RsaXN0XCJcbmV4cG9ydCBjb25zdCBDQUxFTkRBUl9QUkVGSVggPSBcIi9jYWxlbmRhclwiXG5leHBvcnQgY29uc3QgU0VBUkNIX1BSRUZJWCA9IFwiL3NlYXJjaFwiXG5leHBvcnQgY29uc3QgU0VUVElOR1NfUFJFRklYID0gXCIvc2V0dGluZ3NcIlxuY29uc3QgTG9nb3V0UGF0aCA9IFwiL2xvZ2luP25vQXV0b0xvZ2luPXRydWVcIlxuZXhwb3J0IGNvbnN0IExvZ291dFVybDogc3RyaW5nID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3RhcnRzV2l0aChcIiNtYWlsXCIpID8gXCIvZXh0P25vQXV0b0xvZ2luPXRydWVcIiArIGxvY2F0aW9uLmhhc2ggOiBMb2dvdXRQYXRoXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsc0JBQXNCO01BUVQsZ0JBQWdCLGFBQWEsTUFBa0I7Q0FDM0QsTUFBTSxRQUFRO0NBQ2QsSUFBSSxXQUFXO0NBQ2YsSUFBSUEsVUFBeUI7Q0FDN0IsSUFBSUMsV0FBZ0MsQ0FBRTtDQUN0QyxJQUFJLFlBQVksZ0JBQUUsTUFBTSxLQUFLO0FBQzdCLFFBQU8sU0FBVUMsS0FBYUMsTUFBMkI7QUFHeEQsTUFBSSxnQkFBRSxNQUFNLEtBQUssS0FBSyxhQUFhLFFBQVEsV0FBVyxlQUFlLFVBQVUsS0FBSyxDQUFFO0FBQ3RGLFlBQVU7QUFDVixhQUFXO0VBQ1gsTUFBTSxNQUFNLElBQUksT0FBTyxTQUFTO0FBQ2hDLE1BQUk7QUFDSCxtQkFBRSxNQUFNLElBQUksS0FBSyxNQUFNLEVBQ3RCLFNBQVMsTUFBTSxXQUFXLE1BQzFCLEVBQUM7QUFDRixlQUFZLGdCQUFFLE1BQU0sS0FBSztFQUN6QixTQUFRLEdBQUc7QUFDWCxPQUFJLEVBQUUsUUFBUSxTQUFTLDJCQUEyQixDQUNqRCxTQUFRLEtBQUssZ0JBQWdCLEVBQUUsUUFBUSxFQUFFO0lBRXpDLE9BQU07RUFFUDtBQUVELGFBQVc7Q0FDWDtBQUNELEVBQUM7O0FBR0YsU0FBUyxlQUFlQyxHQUE0QkMsR0FBcUM7QUFDeEYsS0FBSSxNQUFNLEVBQUcsUUFBTztDQUNwQixNQUFNLFdBQVcsT0FBTyxRQUFRLEVBQUU7Q0FDbEMsTUFBTSxXQUFXLE9BQU8sUUFBUSxFQUFFO0FBQ2xDLFFBQU8sU0FBUyxXQUFXLFNBQVMsV0FBVyxTQUFTLEtBQUssQ0FBQyxDQUFDLEtBQUssTUFBTSxLQUFLLEVBQUUsU0FBUyxNQUFNO0FBQ2hHO01BRVksY0FBYztNQUNkLGtCQUFrQjtNQUNsQixxQkFBcUI7TUFDckIsa0JBQWtCO01BQ2xCLGdCQUFnQjtNQUNoQixrQkFBa0I7QUFDL0IsTUFBTSxhQUFhO01BQ05DLFlBQW9CLE9BQU8sU0FBUyxLQUFLLFdBQVcsUUFBUSxHQUFHLDBCQUEwQixTQUFTLE9BQU8ifQ==