import { isApp, isDesktop } from "./Env-chunk.js";
import { noOp } from "./dist2-chunk.js";
import { CalendarNotificationIcon, MailNotificationIcon } from "./Icons-chunk.js";

//#region src/common/gui/Notifications.ts
let NotificationType = function(NotificationType$1) {
	NotificationType$1["Mail"] = "Mail";
	NotificationType$1["Calendar"] = "Calendar";
	return NotificationType$1;
}({});
var Notifications = class {
	showNotification(type, title, options, onclick = noOp) {
		if (!isApp() && typeof window.Notification !== "undefined" && window.Notification.permission === "granted") try {
			const actualOptions = Object.assign({}, { icon: type == NotificationType.Mail ? MailNotificationIcon : CalendarNotificationIcon }, options);
			const notification = new window.Notification(title, actualOptions);
			notification.onclick = onclick;
			return notification;
		} catch (e) {
			console.warn("notification error", e);
		}
		return null;
	}
	/**
	* Requests user permission if notifications are supported
	* @returns {Promise<boolean>} resolves to "true" if we can send notifications.
	*/
	requestPermission() {
		if (isDesktop() || isApp() || typeof Notification === "undefined") return;
		try {
			if (window.Notification.permission !== "denied") window.Notification.requestPermission();
		} catch (e) {
			console.log("request notification permission error", e);
		}
	}
};
const notifications = new Notifications();

//#endregion
export { NotificationType, notifications };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90aWZpY2F0aW9ucy1jaHVuay5qcyIsIm5hbWVzIjpbInR5cGU6IE5vdGlmaWNhdGlvblR5cGUiLCJ0aXRsZTogc3RyaW5nIiwib3B0aW9ucz86IE5vdGlmaWNhdGlvbk9wdGlvbnMiLCJvbmNsaWNrOiBOb3RpZmljYXRpb25bXCJvbmNsaWNrXCJdIiwiYWN0dWFsT3B0aW9uczogTm90aWZpY2F0aW9uT3B0aW9ucyIsIm5vdGlmaWNhdGlvbnM6IE5vdGlmaWNhdGlvbnMiXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL2d1aS9Ob3RpZmljYXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5vT3AgfSBmcm9tIFwiQHR1dGFvL3R1dGFub3RhLXV0aWxzXCJcbmltcG9ydCB7IGlzQXBwLCBpc0Rlc2t0b3AgfSBmcm9tIFwiLi4vYXBpL2NvbW1vbi9FbnZcIlxuaW1wb3J0IHsgQ2FsZW5kYXJOb3RpZmljYXRpb25JY29uLCBNYWlsTm90aWZpY2F0aW9uSWNvbiB9IGZyb20gXCIuL2Jhc2UvaWNvbnMvSWNvbnMuanNcIlxuXG5leHBvcnQgY29uc3QgZW51bSBOb3RpZmljYXRpb25UeXBlIHtcblx0TWFpbCA9IFwiTWFpbFwiLFxuXHRDYWxlbmRhciA9IFwiQ2FsZW5kYXJcIixcbn1cblxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvbnMge1xuXHRzaG93Tm90aWZpY2F0aW9uKHR5cGU6IE5vdGlmaWNhdGlvblR5cGUsIHRpdGxlOiBzdHJpbmcsIG9wdGlvbnM/OiBOb3RpZmljYXRpb25PcHRpb25zLCBvbmNsaWNrOiBOb3RpZmljYXRpb25bXCJvbmNsaWNrXCJdID0gbm9PcCk6IE5vdGlmaWNhdGlvbiB8IG51bGwge1xuXHRcdGlmICghaXNBcHAoKSAmJiB0eXBlb2Ygd2luZG93Lk5vdGlmaWNhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT09IFwiZ3JhbnRlZFwiKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCBhY3R1YWxPcHRpb25zOiBOb3RpZmljYXRpb25PcHRpb25zID0gT2JqZWN0LmFzc2lnbihcblx0XHRcdFx0XHR7fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRpY29uOiB0eXBlID09IE5vdGlmaWNhdGlvblR5cGUuTWFpbCA/IE1haWxOb3RpZmljYXRpb25JY29uIDogQ2FsZW5kYXJOb3RpZmljYXRpb25JY29uLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0b3B0aW9ucyxcblx0XHRcdFx0KVxuXHRcdFx0XHRjb25zdCBub3RpZmljYXRpb24gPSBuZXcgd2luZG93Lk5vdGlmaWNhdGlvbih0aXRsZSwgYWN0dWFsT3B0aW9ucylcblx0XHRcdFx0bm90aWZpY2F0aW9uLm9uY2xpY2sgPSBvbmNsaWNrXG5cdFx0XHRcdHJldHVybiBub3RpZmljYXRpb25cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Ly8gbmV3IE5vdGlmaWNhdGlvbigpIHRocm93cyBhbiBlcnJvciBpbiBuZXcgY2hyb21lIGJyb3dzZXJzIG9uIGFuZHJvaWQgZGV2aWNlcy5cblx0XHRcdFx0Ly8gQWNjb3JkaW5nIHRvIHRoZSBlcnJvciBtZXNzYWdlIFNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24uc2hvd05vdGlmaWNhdGlvbigpIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG5cdFx0XHRcdC8vIFRoaXMgaXMgY3VycmVudGx5IG5vdCBhdmFpbGFibGUgb24gb3VyIHRlc3QgZGV2aWNlcywgc28gaWdub3JlIG5vdGlmaWNhdGlvbiBlcnJvcnMuXG5cdFx0XHRcdC8vIFNldGFpbHM6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjk3NzQ4MzYvZmFpbGVkLXRvLWNvbnN0cnVjdC1ub3RpZmljYXRpb24taWxsZWdhbC1jb25zdHJ1Y3RvclxuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJub3RpZmljYXRpb24gZXJyb3JcIiwgZSlcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbFxuXHR9XG5cblx0LyoqXG5cdCAqIFJlcXVlc3RzIHVzZXIgcGVybWlzc2lvbiBpZiBub3RpZmljYXRpb25zIGFyZSBzdXBwb3J0ZWRcblx0ICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IHJlc29sdmVzIHRvIFwidHJ1ZVwiIGlmIHdlIGNhbiBzZW5kIG5vdGlmaWNhdGlvbnMuXG5cdCAqL1xuXHRyZXF1ZXN0UGVybWlzc2lvbigpOiB2b2lkIHtcblx0XHRpZiAoaXNEZXNrdG9wKCkgfHwgaXNBcHAoKSB8fCB0eXBlb2YgTm90aWZpY2F0aW9uID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cblx0XHR0cnkge1xuXHRcdFx0aWYgKHdpbmRvdy5Ob3RpZmljYXRpb24ucGVybWlzc2lvbiAhPT0gXCJkZW5pZWRcIikge1xuXHRcdFx0XHR3aW5kb3cuTm90aWZpY2F0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKClcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcInJlcXVlc3Qgbm90aWZpY2F0aW9uIHBlcm1pc3Npb24gZXJyb3JcIiwgZSlcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IG5vdGlmaWNhdGlvbnM6IE5vdGlmaWNhdGlvbnMgPSBuZXcgTm90aWZpY2F0aW9ucygpXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0lBSWtCLGdEQUFYO0FBQ047QUFDQTs7QUFDQTtJQUVZLGdCQUFOLE1BQW9CO0NBQzFCLGlCQUFpQkEsTUFBd0JDLE9BQWVDLFNBQStCQyxVQUFtQyxNQUEyQjtBQUNwSixPQUFLLE9BQU8sV0FBVyxPQUFPLGlCQUFpQixlQUFlLE9BQU8sYUFBYSxlQUFlLFVBQ2hHLEtBQUk7R0FDSCxNQUFNQyxnQkFBcUMsT0FBTyxPQUNqRCxDQUFFLEdBQ0YsRUFDQyxNQUFNLFFBQVEsaUJBQWlCLE9BQU8sdUJBQXVCLHlCQUM3RCxHQUNELFFBQ0E7R0FDRCxNQUFNLGVBQWUsSUFBSSxPQUFPLGFBQWEsT0FBTztBQUNwRCxnQkFBYSxVQUFVO0FBQ3ZCLFVBQU87RUFDUCxTQUFRLEdBQUc7QUFLWCxXQUFRLEtBQUssc0JBQXNCLEVBQUU7RUFDckM7QUFHRixTQUFPO0NBQ1A7Ozs7O0NBTUQsb0JBQTBCO0FBQ3pCLE1BQUksV0FBVyxJQUFJLE9BQU8sV0FBVyxpQkFBaUIsWUFDckQ7QUFHRCxNQUFJO0FBQ0gsT0FBSSxPQUFPLGFBQWEsZUFBZSxTQUN0QyxRQUFPLGFBQWEsbUJBQW1CO0VBRXhDLFNBQVEsR0FBRztBQUNYLFdBQVEsSUFBSSx5Q0FBeUMsRUFBRTtFQUN2RDtDQUNEO0FBQ0Q7TUFFWUMsZ0JBQStCLElBQUkifQ==