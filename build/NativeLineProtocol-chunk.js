import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { base64ToUint8Array, uint8ArrayToBase64 } from "./dist2-chunk.js";
import { Request, RequestError, Response } from "./MessageDispatcher-chunk.js";

//#region src/common/native/common/NativeLineProtocol.ts
function encodeNativeMessage(message) {
	let encodedMessage = [];
	encodedMessage.push(message.type);
	encodedMessage.push(message.id);
	switch (message.type) {
		case "request":
			encodedMessage.push(message.requestType);
			if (message.args.length === 0) encodedMessage.push("");
			for (const arg of message.args) encodedMessage.push(encodeValueForNative(arg));
			break;
		case "response":
			encodedMessage.push(encodeValueForNative(message.value));
			break;
		case "requestError":
			encodedMessage.push(encodeValueForNative(message.error));
			break;
	}
	return encodedMessage.join("\n");
}
function encodeValueForNative(value) {
	return JSON.stringify(replaceBytesWithWrapper(value));
}
const BYTES_MARKER = "__bytes";
function replaceBytesWithWrapper(value) {
	if (value == null) return null;
else if (value instanceof Uint8Array) return {
		data: uint8ArrayToBase64(value),
		marker: BYTES_MARKER
	};
else if (Array.isArray(value)) return value.map(replaceBytesWithWrapper);
else if (typeof value === "object") {
		const newObject = {};
		for (const [key, field] of Object.entries(value)) newObject[key] = replaceBytesWithWrapper(field);
		return newObject;
	} else return value;
}
function replaceWrapperByBytes(value) {
	if (value == null) return null;
else if (isByteWrapper(value)) return base64ToUint8Array(value.data);
else if (Array.isArray(value)) return value.map(replaceWrapperByBytes);
else if (typeof value === "object") {
		const newObject = {};
		for (const [key, field] of Object.entries(value)) newObject[key] = replaceWrapperByBytes(field);
		return newObject;
	} else return value;
}
function isByteWrapper(value) {
	return value != null && typeof value === "object" && value.marker === BYTES_MARKER && typeof value.data === "string";
}
function decodeNativeMessage(encoded) {
	const [type, messageId, ...rest] = encoded.split("\n");
	let parsedMessage;
	switch (type) {
		case "request": {
			const [requestType, ...args] = rest;
			parsedMessage = new Request(requestType, args.map((s) => decodeValueFromNative(s)));
			parsedMessage.id = messageId;
			break;
		}
		case "response": {
			const [value] = rest;
			parsedMessage = new Response(messageId, decodeValueFromNative(value));
			break;
		}
		case "requestError": {
			const [error] = rest;
			parsedMessage = new RequestError(messageId, decodeValueFromNative(error));
			break;
		}
		default: throw new ProgrammingError(`unknown message type: ${type}`);
	}
	return parsedMessage;
}
function decodeValueFromNative(encoded) {
	return replaceWrapperByBytes(JSON.parse(encoded));
}

//#endregion
export { decodeNativeMessage, decodeValueFromNative, encodeNativeMessage, encodeValueForNative, replaceBytesWithWrapper, replaceWrapperByBytes };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,