import { TutanotaError } from "./dist-chunk.js";
import { formatSortableDate } from "./dist2-chunk.js";
import { createBirthday } from "./TypeRefs-chunk.js";

//#region src/common/api/common/error/ParsingError.ts
var ParsingError = class extends TutanotaError {
	constructor(m) {
		super("ParsingError", m);
	}
};

//#endregion
//#region src/common/api/common/utils/BirthdayUtils.ts
function birthdayToIsoDate(birthday) {
	const month = ("0" + birthday.month).slice(-2);
	const day = ("0" + birthday.day).slice(-2);
	const year = birthday.year ? ("0000" + birthday.year).slice(-4) : "-";
	return `${year}-${month}-${day}`;
}
function isoDateToBirthday(birthdayIso) {
	const birthdayInitializer = {};
	if (birthdayIso.startsWith("--")) {
		const monthAndDay = birthdayIso.substring(2).split("-");
		if (monthAndDay.length !== 2) throw new ParsingError("invalid birthday without year: " + birthdayIso);
		birthdayInitializer.month = monthAndDay[0];
		birthdayInitializer.day = monthAndDay[1];
		birthdayInitializer.year = null;
	} else {
		const yearMonthAndDay = birthdayIso.split("-");
		if (yearMonthAndDay.length !== 3) throw new ParsingError("invalid birthday: " + birthdayIso);
		birthdayInitializer.year = yearMonthAndDay[0];
		birthdayInitializer.month = yearMonthAndDay[1];
		birthdayInitializer.day = yearMonthAndDay[2];
	}
	if (!isValidBirthday(birthdayInitializer)) throw new ParsingError("Invalid birthday format: " + birthdayIso);
	return createBirthday(birthdayInitializer);
}
function isValidBirthday(birthday) {
	const day = Number(birthday.day);
	const month = Number(birthday.month);
	const year = birthday.year ? Number(birthday.year) : null;
	return day > 0 && day < 32 && month > 0 && month < 13 && (year === null || year > 0 && year < 1e4);
}
function oldBirthdayToBirthday(oldBirthday) {
	let birthdayString = formatSortableDate(oldBirthday).split("-");
	return createBirthday({
		day: String(Number(birthdayString[2])),
		month: String(Number(birthdayString[1])),
		year: String(Number(birthdayString[0]))
	});
}

//#endregion
export { ParsingError, birthdayToIsoDate, isValidBirthday, isoDateToBirthday, oldBirthdayToBirthday };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlydGhkYXlVdGlscy1jaHVuay5qcyIsIm5hbWVzIjpbIm06IHN0cmluZyIsImJpcnRoZGF5OiBCaXJ0aGRheSIsImJpcnRoZGF5SXNvOiBzdHJpbmciLCJiaXJ0aGRheUluaXRpYWxpemVyOiBQYXJ0aWFsPEJpcnRoZGF5PiIsImJpcnRoZGF5OiBQYXJ0aWFsPEJpcnRoZGF5PiIsIm9sZEJpcnRoZGF5OiBEYXRlIl0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9hcGkvY29tbW9uL2Vycm9yL1BhcnNpbmdFcnJvci50cyIsIi4uL3NyYy9jb21tb24vYXBpL2NvbW1vbi91dGlscy9CaXJ0aGRheVV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vQGJ1bmRsZUludG86Y29tbW9uLW1pblxuXG5pbXBvcnQgeyBUdXRhbm90YUVycm9yIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS1lcnJvclwiXG5cbmV4cG9ydCBjbGFzcyBQYXJzaW5nRXJyb3IgZXh0ZW5kcyBUdXRhbm90YUVycm9yIHtcblx0Y29uc3RydWN0b3IobTogc3RyaW5nKSB7XG5cdFx0c3VwZXIoXCJQYXJzaW5nRXJyb3JcIiwgbSlcblx0fVxufVxuIiwiaW1wb3J0IHR5cGUgeyBCaXJ0aGRheSB9IGZyb20gXCIuLi8uLi9lbnRpdGllcy90dXRhbm90YS9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBjcmVhdGVCaXJ0aGRheSB9IGZyb20gXCIuLi8uLi9lbnRpdGllcy90dXRhbm90YS9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBmb3JtYXRTb3J0YWJsZURhdGUgfSBmcm9tIFwiQHR1dGFvL3R1dGFub3RhLXV0aWxzXCJcbmltcG9ydCB7IFBhcnNpbmdFcnJvciB9IGZyb20gXCIuLi9lcnJvci9QYXJzaW5nRXJyb3JcIlxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBiaXJ0aGRheSBvYmplY3QgdG8gaXNvIERhdGUgZm9ybWF0ICh5eXl5LW1tLWRkKSBvciBpc28gRGF0ZSB3aXRob3V0IHllYXIgKC0tbW0tZGQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaXJ0aGRheVRvSXNvRGF0ZShiaXJ0aGRheTogQmlydGhkYXkpOiBzdHJpbmcge1xuXHRjb25zdCBtb250aCA9IChcIjBcIiArIGJpcnRoZGF5Lm1vbnRoKS5zbGljZSgtMilcblx0Y29uc3QgZGF5ID0gKFwiMFwiICsgYmlydGhkYXkuZGF5KS5zbGljZSgtMilcblx0Y29uc3QgeWVhciA9IGJpcnRoZGF5LnllYXIgPyAoXCIwMDAwXCIgKyBiaXJ0aGRheS55ZWFyKS5zbGljZSgtNCkgOiBcIi1cIlxuXHRyZXR1cm4gYCR7eWVhcn0tJHttb250aH0tJHtkYXl9YFxufVxuXG4vKipcbiAqIENvbnZlcnRzIGlzbyBEYXRlICh5eXl5LW1tLWRkKSBvciBEYXRlIHdpdGhvdXQgeWVhciAoLS1tbS1kZCkgaW50byBCaXJ0aGRheSBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc29EYXRlVG9CaXJ0aGRheShiaXJ0aGRheUlzbzogc3RyaW5nKTogQmlydGhkYXkge1xuXHQvL3JldHVybiBuZXcgRGF0ZShOdW1iZXIobmV3QmlydGhkYXkueWVhciksIE51bWJlcihuZXdCaXJ0aGRheS5tb250aCkgLSAxLCBOdW1iZXIobmV3QmlydGhkYXkuZGF5KSlcblx0Y29uc3QgYmlydGhkYXlJbml0aWFsaXplcjogUGFydGlhbDxCaXJ0aGRheT4gPSB7fVxuXHRpZiAoYmlydGhkYXlJc28uc3RhcnRzV2l0aChcIi0tXCIpKSB7XG5cdFx0Y29uc3QgbW9udGhBbmREYXkgPSBiaXJ0aGRheUlzby5zdWJzdHJpbmcoMikuc3BsaXQoXCItXCIpXG5cblx0XHRpZiAobW9udGhBbmREYXkubGVuZ3RoICE9PSAyKSB7XG5cdFx0XHR0aHJvdyBuZXcgUGFyc2luZ0Vycm9yKFwiaW52YWxpZCBiaXJ0aGRheSB3aXRob3V0IHllYXI6IFwiICsgYmlydGhkYXlJc28pXG5cdFx0fVxuXG5cdFx0YmlydGhkYXlJbml0aWFsaXplci5tb250aCA9IG1vbnRoQW5kRGF5WzBdXG5cdFx0YmlydGhkYXlJbml0aWFsaXplci5kYXkgPSBtb250aEFuZERheVsxXVxuXHRcdGJpcnRoZGF5SW5pdGlhbGl6ZXIueWVhciA9IG51bGxcblx0fSBlbHNlIHtcblx0XHRjb25zdCB5ZWFyTW9udGhBbmREYXkgPSBiaXJ0aGRheUlzby5zcGxpdChcIi1cIilcblxuXHRcdGlmICh5ZWFyTW9udGhBbmREYXkubGVuZ3RoICE9PSAzKSB7XG5cdFx0XHR0aHJvdyBuZXcgUGFyc2luZ0Vycm9yKFwiaW52YWxpZCBiaXJ0aGRheTogXCIgKyBiaXJ0aGRheUlzbylcblx0XHR9XG5cblx0XHRiaXJ0aGRheUluaXRpYWxpemVyLnllYXIgPSB5ZWFyTW9udGhBbmREYXlbMF1cblx0XHRiaXJ0aGRheUluaXRpYWxpemVyLm1vbnRoID0geWVhck1vbnRoQW5kRGF5WzFdXG5cdFx0YmlydGhkYXlJbml0aWFsaXplci5kYXkgPSB5ZWFyTW9udGhBbmREYXlbMl1cblx0fVxuXG5cdGlmICghaXNWYWxpZEJpcnRoZGF5KGJpcnRoZGF5SW5pdGlhbGl6ZXIpKSB7XG5cdFx0dGhyb3cgbmV3IFBhcnNpbmdFcnJvcihcIkludmFsaWQgYmlydGhkYXkgZm9ybWF0OiBcIiArIGJpcnRoZGF5SXNvKVxuXHR9XG5cblx0cmV0dXJuIGNyZWF0ZUJpcnRoZGF5KGJpcnRoZGF5SW5pdGlhbGl6ZXIpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkQmlydGhkYXkoYmlydGhkYXk6IFBhcnRpYWw8QmlydGhkYXk+KTogYmlydGhkYXkgaXMgQmlydGhkYXkge1xuXHRjb25zdCBkYXkgPSBOdW1iZXIoYmlydGhkYXkuZGF5KVxuXHRjb25zdCBtb250aCA9IE51bWJlcihiaXJ0aGRheS5tb250aClcblx0Y29uc3QgeWVhciA9IGJpcnRoZGF5LnllYXIgPyBOdW1iZXIoYmlydGhkYXkueWVhcikgOiBudWxsXG5cdHJldHVybiBkYXkgPiAwICYmIGRheSA8IDMyICYmIG1vbnRoID4gMCAmJiBtb250aCA8IDEzICYmICh5ZWFyID09PSBudWxsIHx8ICh5ZWFyID4gMCAmJiB5ZWFyIDwgMTAwMDApKVxufVxuXG4vKipcbiAqIHJldHVybnMgbmV3IGJpcnRoZGF5IGZvcm1hdCBmcm9tIG9sZCBiaXJ0aGRheSBmb3JtYXRcbiAqIEV4cG9ydCBmb3IgdGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gb2xkQmlydGhkYXlUb0JpcnRoZGF5KG9sZEJpcnRoZGF5OiBEYXRlKTogQmlydGhkYXkge1xuXHRsZXQgYmlydGhkYXlTdHJpbmcgPSBmb3JtYXRTb3J0YWJsZURhdGUob2xkQmlydGhkYXkpLnNwbGl0KFwiLVwiKVxuXHRyZXR1cm4gY3JlYXRlQmlydGhkYXkoe1xuXHRcdGRheTogU3RyaW5nKE51bWJlcihiaXJ0aGRheVN0cmluZ1syXSkpLFxuXHRcdG1vbnRoOiBTdHJpbmcoTnVtYmVyKGJpcnRoZGF5U3RyaW5nWzFdKSksXG5cdFx0eWVhcjogU3RyaW5nKE51bWJlcihiaXJ0aGRheVN0cmluZ1swXSkpLFxuXHR9KVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7OztJQUlhLGVBQU4sY0FBMkIsY0FBYztDQUMvQyxZQUFZQSxHQUFXO0FBQ3RCLFFBQU0sZ0JBQWdCLEVBQUU7Q0FDeEI7QUFDRDs7OztBQ0FNLFNBQVMsa0JBQWtCQyxVQUE0QjtDQUM3RCxNQUFNLFFBQVEsQ0FBQyxNQUFNLFNBQVMsT0FBTyxNQUFNLEdBQUc7Q0FDOUMsTUFBTSxNQUFNLENBQUMsTUFBTSxTQUFTLEtBQUssTUFBTSxHQUFHO0NBQzFDLE1BQU0sT0FBTyxTQUFTLE9BQU8sQ0FBQyxTQUFTLFNBQVMsTUFBTSxNQUFNLEdBQUcsR0FBRztBQUNsRSxTQUFRLEVBQUUsS0FBSyxHQUFHLE1BQU0sR0FBRyxJQUFJO0FBQy9CO0FBS00sU0FBUyxrQkFBa0JDLGFBQStCO0NBRWhFLE1BQU1DLHNCQUF5QyxDQUFFO0FBQ2pELEtBQUksWUFBWSxXQUFXLEtBQUssRUFBRTtFQUNqQyxNQUFNLGNBQWMsWUFBWSxVQUFVLEVBQUUsQ0FBQyxNQUFNLElBQUk7QUFFdkQsTUFBSSxZQUFZLFdBQVcsRUFDMUIsT0FBTSxJQUFJLGFBQWEsb0NBQW9DO0FBRzVELHNCQUFvQixRQUFRLFlBQVk7QUFDeEMsc0JBQW9CLE1BQU0sWUFBWTtBQUN0QyxzQkFBb0IsT0FBTztDQUMzQixPQUFNO0VBQ04sTUFBTSxrQkFBa0IsWUFBWSxNQUFNLElBQUk7QUFFOUMsTUFBSSxnQkFBZ0IsV0FBVyxFQUM5QixPQUFNLElBQUksYUFBYSx1QkFBdUI7QUFHL0Msc0JBQW9CLE9BQU8sZ0JBQWdCO0FBQzNDLHNCQUFvQixRQUFRLGdCQUFnQjtBQUM1QyxzQkFBb0IsTUFBTSxnQkFBZ0I7Q0FDMUM7QUFFRCxNQUFLLGdCQUFnQixvQkFBb0IsQ0FDeEMsT0FBTSxJQUFJLGFBQWEsOEJBQThCO0FBR3RELFFBQU8sZUFBZSxvQkFBb0I7QUFDMUM7QUFFTSxTQUFTLGdCQUFnQkMsVUFBbUQ7Q0FDbEYsTUFBTSxNQUFNLE9BQU8sU0FBUyxJQUFJO0NBQ2hDLE1BQU0sUUFBUSxPQUFPLFNBQVMsTUFBTTtDQUNwQyxNQUFNLE9BQU8sU0FBUyxPQUFPLE9BQU8sU0FBUyxLQUFLLEdBQUc7QUFDckQsUUFBTyxNQUFNLEtBQUssTUFBTSxNQUFNLFFBQVEsS0FBSyxRQUFRLE9BQU8sU0FBUyxRQUFTLE9BQU8sS0FBSyxPQUFPO0FBQy9GO0FBTU0sU0FBUyxzQkFBc0JDLGFBQTZCO0NBQ2xFLElBQUksaUJBQWlCLG1CQUFtQixZQUFZLENBQUMsTUFBTSxJQUFJO0FBQy9ELFFBQU8sZUFBZTtFQUNyQixLQUFLLE9BQU8sT0FBTyxlQUFlLEdBQUcsQ0FBQztFQUN0QyxPQUFPLE9BQU8sT0FBTyxlQUFlLEdBQUcsQ0FBQztFQUN4QyxNQUFNLE9BQU8sT0FBTyxlQUFlLEdBQUcsQ0FBQztDQUN2QyxFQUFDO0FBQ0YifQ==