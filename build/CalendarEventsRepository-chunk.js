import { __toESM } from "./chunk-chunk.js";
import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import { findAllAndRemove, incrementDate, stringToBase64 } from "./dist2-chunk.js";
import { CLIENT_ONLY_CALENDAR_BIRTHDAYS_BASE_ID, OperationType, RepeatPeriod } from "./TutanotaConstants-chunk.js";
import { DateTime } from "./luxon-chunk.js";
import { getListId, isSameId, listIdPart } from "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { CalendarEventTypeRef, ContactTypeRef, createCalendarEvent } from "./TypeRefs-chunk.js";
import { generateLocalEventElementId, getAllDayDateUTC } from "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import { addDaysForRecurringEvent, calculateContactsAge, createRepeatRuleWithValues, extractYearFromBirthday, generateUid, getEventEnd, getEventStart, getMonthRange, isBirthdayEvent, isClientOnlyCalendar } from "./CalendarUtils-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { NotAuthorizedError, NotFoundError } from "./RestError-chunk.js";
import { isUpdateForTypeRef } from "./EntityUpdateUtils-chunk.js";
import { isoDateToBirthday } from "./BirthdayUtils-chunk.js";

//#region src/common/calendar/date/CalendarEventsRepository.ts
var import_stream = __toESM(require_stream(), 1);
const LIMIT_PAST_EVENTS_YEARS = 100;
const TAG = "[CalendarEventRepository]";
var CalendarEventsRepository = class {
	/** timestamps of the beginning of months that we already loaded */
	loadedMonths = new Set();
	daysToEvents = (0, import_stream.default)(new Map());
	pendingLoadRequest = Promise.resolve();
	clientOnlyEvents = new Map();
	constructor(calendarModel, calendarFacade, zone, entityClient, eventController, contactModel, logins) {
		this.calendarModel = calendarModel;
		this.calendarFacade = calendarFacade;
		this.zone = zone;
		this.entityClient = entityClient;
		this.eventController = eventController;
		this.contactModel = contactModel;
		this.logins = logins;
		eventController.addEntityListener((updates, eventOwnerGroupId) => this.entityEventsReceived(updates, eventOwnerGroupId));
		this.calendarModel.getCalendarInfosStream().map((infos) => {
			if (infos.size === 0) {
				this.loadedMonths.clear();
				this.daysToEvents(new Map());
			}
		});
	}
	getEventsForMonths() {
		return this.daysToEvents;
	}
	getBirthdayEvents() {
		return this.clientOnlyEvents;
	}
	async canLoadBirthdaysCalendar() {
		return await this.logins.getUserController().isNewPaidPlan();
	}
	async loadMonthsIfNeeded(daysInMonths, progressMonitor, canceled) {
		const promiseForThisLoadRequest = this.pendingLoadRequest.then(async () => {
			for (const dayInMonth of daysInMonths) {
				if (canceled()) return;
				const monthRange = getMonthRange(dayInMonth, this.zone);
				if (!this.loadedMonths.has(monthRange.start)) {
					this.loadedMonths.add(monthRange.start);
					try {
						const calendarInfos = await this.calendarModel.getCalendarInfos();
						const eventsMap = await this.calendarFacade.updateEventMap(monthRange, calendarInfos, this.daysToEvents(), this.zone);
						this.replaceEvents(eventsMap);
						this.addBirthdaysEventsIfNeeded(dayInMonth, monthRange);
					} catch (e) {
						this.loadedMonths.delete(monthRange.start);
						throw e;
					}
				}
				progressMonitor.workDone(1);
			}
		});
		this.pendingLoadRequest = promiseForThisLoadRequest;
		await promiseForThisLoadRequest;
	}
	async addOrUpdateEvent(calendarInfo, event) {
		if (calendarInfo == null) return;
		const eventListId = getListId(event);
		if (isSameId(calendarInfo.groupRoot.shortEvents, eventListId)) {
			const eventStartMonth = getMonthRange(getEventStart(event, this.zone), this.zone);
			const eventEndMonth = getMonthRange(getEventEnd(event, this.zone), this.zone);
			if (this.loadedMonths.has(eventStartMonth.start)) await this.addDaysForEvent(event, eventStartMonth);
			if (eventEndMonth.start != eventStartMonth.start && this.loadedMonths.has(eventEndMonth.start)) await this.addDaysForEvent(event, eventEndMonth);
		} else if (isSameId(calendarInfo.groupRoot.longEvents, eventListId)) {
			this.removeExistingEvent(event);
			for (const firstDayTimestamp of this.loadedMonths) {
				const loadedMonth = getMonthRange(new Date(firstDayTimestamp), this.zone);
				if (event.repeatRule != null) await this.addDaysForRecurringEvent(event, loadedMonth);
else await this.addDaysForEvent(event, loadedMonth);
			}
		}
	}
	replaceEvents(newMap) {
		this.daysToEvents(newMap);
	}
	cloneEvents() {
		return new Map(Array.from(this.daysToEvents().entries()).map(([day, events]) => [day, events.slice()]));
	}
	addDaysForRecurringEvent(event, month) {
		if (!isClientOnlyCalendar(listIdPart(event._id)) && -DateTime.fromJSDate(event.startTime).diffNow("year").years > LIMIT_PAST_EVENTS_YEARS) {
			console.log("repeating event is too far into the past", event);
			return;
		}
		const newMap = this.cloneEvents();
		addDaysForRecurringEvent(newMap, event, month, this.zone);
		this.replaceEvents(newMap);
	}
	removeDaysForEvent(id) {
		const newMap = this.cloneEvents();
		for (const dayEvents of newMap.values()) findAllAndRemove(dayEvents, (e) => isSameId(e._id, id));
		this.replaceEvents(newMap);
	}
	/**
	* Removes {@param eventToRemove} from {@param events} using isSameEvent()
	*/
	removeExistingEvent(eventToRemove) {
		const newMap = this.cloneEvents();
		for (const dayEvents of newMap.values()) findAllAndRemove(dayEvents, (e) => isSameId(e._id, eventToRemove._id));
		this.replaceEvents(newMap);
	}
	async addDaysForEvent(event, month) {
		const { addDaysForEventInstance } = await import("./CalendarUtils2-chunk.js");
		const newMap = this.cloneEvents();
		addDaysForEventInstance(newMap, event, month, this.zone);
		this.replaceEvents(newMap);
	}
	async entityEventsReceived(updates, eventOwnerGroupId) {
		const calendarInfos = await this.calendarModel.getCalendarInfos();
		for (const update of updates) if (isUpdateForTypeRef(CalendarEventTypeRef, update)) {
			if (update.operation === OperationType.CREATE || update.operation === OperationType.UPDATE) try {
				const event = await this.entityClient.load(CalendarEventTypeRef, [update.instanceListId, update.instanceId]);
				await this.addOrUpdateEvent(calendarInfos.get(eventOwnerGroupId) ?? null, event);
			} catch (e) {
				if (e instanceof NotFoundError || e instanceof NotAuthorizedError) console.log(TAG, e.name, "updated event is not accessible anymore");
				throw e;
			}
else if (update.operation === OperationType.DELETE) this.removeDaysForEvent([update.instanceListId, update.instanceId]);
		}
	}
	pushClientOnlyEvent(month, newEvent, baseYear) {
		let clientOnlyEventsOfThisMonth = this.clientOnlyEvents.get(month) ?? [];
		clientOnlyEventsOfThisMonth.push({
			baseYear,
			event: newEvent
		});
		this.clientOnlyEvents.set(month, clientOnlyEventsOfThisMonth);
	}
	createClientOnlyBirthdayEvent(contact, userId) {
		const encodedContactId = stringToBase64(contact._id.join("/"));
		const calendarId = `${userId}#${CLIENT_ONLY_CALENDAR_BIRTHDAYS_BASE_ID}`;
		const uid = generateUid(calendarId, Date.now());
		const eventTitle = this.calendarModel.getBirthdayEventTitle(contact.firstName);
		let fullDateIso = contact.birthdayIso;
		if (contact.birthdayIso?.startsWith("--")) fullDateIso = contact.birthdayIso.replace("-", "1970");
		const birthday = new Date(fullDateIso);
		const startDate = getAllDayDateUTC(new Date(birthday));
		const endDate = getAllDayDateUTC(incrementDate(new Date(startDate), 1));
		const newEvent = createCalendarEvent({
			sequence: "0",
			recurrenceId: null,
			hashedUid: null,
			summary: eventTitle,
			startTime: startDate,
			endTime: endDate,
			location: "",
			description: "",
			alarmInfos: [],
			organizer: null,
			attendees: [],
			invitedConfidentially: null,
			repeatRule: createRepeatRuleWithValues(RepeatPeriod.ANNUALLY, 1),
			uid
		});
		newEvent._id = [calendarId, `${generateLocalEventElementId(newEvent.startTime.getTime(), contact._id.join("/"))}#${encodedContactId}`];
		newEvent._ownerGroup = calendarId;
		return newEvent;
	}
	async loadContactsBirthdays(forceReload = false) {
		if (this.clientOnlyEvents.size > 0 && !forceReload) return;
		this.clientOnlyEvents.clear();
		const listId = await this.contactModel.getContactListId();
		if (listId == null) return [];
		const contacts = await this.entityClient.loadAll(ContactTypeRef, listId);
		const filteredContacts = contacts.filter((contact) => contact.birthdayIso).sort((a, b) => {
			const birthdayContactA = isoDateToBirthday(a.birthdayIso);
			const birthdayContactB = isoDateToBirthday(b.birthdayIso);
			return new Date(`${birthdayContactA.month}/${birthdayContactA.day}`).getTime() - new Date(`${birthdayContactB.month}/${birthdayContactB.day}`).getTime();
		});
		for (const contact of filteredContacts) {
			const newEvent = this.createClientOnlyBirthdayEvent(contact, this.logins.getUserController().userId);
			this.pushClientOnlyEvent(newEvent.startTime.getMonth(), newEvent, extractYearFromBirthday(contact.birthdayIso));
		}
		return filteredContacts;
	}
	refreshBirthdayCalendar(date) {
		const month = getMonthRange(date, this.zone);
		this.addBirthdaysEventsIfNeeded(date, month, true);
	}
	addBirthdaysEventsIfNeeded(selectedDate, monthRangeForRecurrence, removeEventOccurrences = false) {
		const clientOnlyEventsThisMonth = this.clientOnlyEvents.get(selectedDate.getMonth());
		const birthdaysOfThisMonth = clientOnlyEventsThisMonth?.filter((birthdayEvent) => isBirthdayEvent(birthdayEvent.event.uid));
		if (birthdaysOfThisMonth) for (const calendarEvent of birthdaysOfThisMonth) {
			const age = calculateContactsAge(calendarEvent.baseYear, selectedDate.getFullYear());
			const ageString = age ? `(${this.calendarModel.getAgeString(age)})` : "";
			if (removeEventOccurrences) this.removeDaysForEvent(calendarEvent.event._id);
			this.addDaysForRecurringEvent({
				...calendarEvent.event,
				summary: `${calendarEvent.event.summary} ${ageString}`
			}, monthRangeForRecurrence);
		}
	}
};

//#endregion
export { CalendarEventsRepository };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,