import "./dist-chunk.js";
import { ProgrammingError } from "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import "./ClientDetector-chunk.js";
import "./mithril-chunk.js";
import { assertNotNull, noOp, ofClass } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import "./styles-chunk.js";
import "./theme-chunk.js";
import { MailMethod, getAttendeeStatus, mailMethodToCalendarMethod } from "./TutanotaConstants-chunk.js";
import "./KeyManager-chunk.js";
import { windowFacade } from "./WindowFacade-chunk.js";
import "./RootView-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./luxon-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { createCalendarEventAttendee } from "./TypeRefs-chunk.js";
import { cleanMailAddress, findAttendeeInAddresses, findRecipientWithAddress } from "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import { getTimeZone } from "./CalendarUtils-chunk.js";
import "./ImportExportUtils-chunk.js";
import "./FormatValidator-chunk.js";
import "./stream-chunk.js";
import "./EntityFunctions-chunk.js";
import "./TypeModels3-chunk.js";
import "./ModelInfo-chunk.js";
import "./ErrorUtils-chunk.js";
import "./RestError-chunk.js";
import "./SetupMultipleError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import { RecipientsNotFoundError } from "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import "./EntityUpdateUtils-chunk.js";
import "./dist3-chunk.js";
import "./Services-chunk.js";
import "./EntityClient-chunk.js";
import "./BirthdayUtils-chunk.js";
import "./Services2-chunk.js";
import "./GroupUtils-chunk.js";
import "./Button-chunk.js";
import "./Icons-chunk.js";
import "./DialogHeaderBar-chunk.js";
import "./CountryList-chunk.js";
import "./Dialog-chunk.js";
import "./Icon-chunk.js";
import "./AriaUtils-chunk.js";
import "./IconButton-chunk.js";
import "./CalendarEventWhenModel-chunk.js";
import "./Formatter-chunk.js";
import "./ProgressMonitor-chunk.js";
import "./Notifications-chunk.js";
import "./CalendarFacade-chunk.js";
import "./CalendarModel-chunk.js";
import "./GroupUtils2-chunk.js";
import "./CommonLocator-chunk.js";
import "./UserError-chunk.js";
import "./MailAddressParser-chunk.js";
import "./BlobUtils-chunk.js";
import "./FileUtils-chunk.js";
import "./ProgressDialog-chunk.js";
import { RecipientField } from "./SharedMailUtils-chunk.js";
import "./PasswordUtils-chunk.js";
import "./Recipient-chunk.js";
import "./ContactUtils-chunk.js";
import "./RecipientsModel-chunk.js";
import { calendarAttendeeStatusSymbol, formatEventDuration } from "./CalendarGuiUtils-chunk.js";
import "./UpgradeRequiredError-chunk.js";
import "./ColorPickerModel-chunk.js";
import { makeInvitationCalendarFile } from "./CalendarExporter-chunk.js";

//#region src/calendar-app/calendar/view/CalendarNotificationSender.ts
var CalendarNotificationSender = class {
	/** Used for knowing how many emails are in the process of being sent. */
	countDownLatch;
	constructor() {
		this.countDownLatch = 0;
	}
	sendInvite(event, sendMailModel) {
		const message = lang.get("eventInviteMail_msg", { "{event}": event.summary });
		const sender = assertOrganizer(event).address;
		return this.sendCalendarFile({
			sendMailModel,
			method: MailMethod.ICAL_REQUEST,
			subject: message,
			body: makeInviteEmailBody(sender, event, message),
			event,
			sender
		});
	}
	sendUpdate(event, sendMailModel) {
		const message = lang.get("eventUpdated_msg", { "{event}": event.summary });
		const sender = assertOrganizer(event).address;
		return this.sendCalendarFile({
			sendMailModel,
			method: MailMethod.ICAL_REQUEST,
			subject: message,
			body: makeInviteEmailBody(sender, event, message),
			event,
			sender
		});
	}
	sendCancellation(event, sendMailModel) {
		const message = lang.get("eventCancelled_msg", { "{event}": event.summary });
		const sender = assertOrganizer(event).address;
		return this.sendCalendarFile({
			sendMailModel,
			method: MailMethod.ICAL_CANCEL,
			subject: message,
			body: makeInviteEmailBody(sender, event, message),
			event,
			sender
		}).catch(ofClass(RecipientsNotFoundError, (e) => {
			const invalidRecipients = e.message.split("\n");
			let hasRemovedRecipient = false;
			for (const invalidRecipient of invalidRecipients) {
				const recipientInfo = findRecipientWithAddress(sendMailModel.bccRecipients(), invalidRecipient);
				if (recipientInfo) hasRemovedRecipient = sendMailModel.removeRecipient(recipientInfo, RecipientField.BCC, false) || hasRemovedRecipient;
			}
			if (hasRemovedRecipient && sendMailModel.allRecipients().length) return this.sendCancellation(event, sendMailModel);
		}));
	}
	/**
	* send a response mail to the organizer of an event
	* @param event the event to respond to (included as a .ics file attachment)
	* @param sendMailModel used to actually send the mail
	*/
	async sendResponse(event, sendMailModel) {
		const sendAs = sendMailModel.getSender();
		const message = lang.get("repliedToEventInvite_msg", { "{event}": event.summary });
		const organizer = assertOrganizer(event);
		const body = makeInviteEmailBody(organizer.address, event, message);
		return this.sendCalendarFile({
			event,
			sendMailModel,
			method: MailMethod.ICAL_REPLY,
			subject: message,
			body,
			sender: sendAs
		});
	}
	async sendCalendarFile({ sendMailModel, method, subject, event, body, sender }) {
		const inviteFile = makeInvitationCalendarFile(event, mailMethodToCalendarMethod(method), new Date(), getTimeZone());
		sendMailModel.setSender(sender);
		sendMailModel.attachFiles([inviteFile]);
		sendMailModel.setSubject(subject);
		sendMailModel.setBody(body);
		this.sendStart();
		await sendMailModel.send(method).finally(() => this.sendEnd());
	}
	_windowUnsubscribe = null;
	sendStart() {
		this.countDownLatch++;
		if (this.countDownLatch === 1) this._windowUnsubscribe = windowFacade.addWindowCloseListener(noOp);
	}
	sendEnd() {
		this.countDownLatch--;
		if (this.countDownLatch === 0 && this._windowUnsubscribe) {
			this._windowUnsubscribe();
			this._windowUnsubscribe = null;
		}
	}
};
function summaryLine(event) {
	return newLine(lang.get("name_label"), event.summary);
}
function whenLine(event) {
	const duration = formatEventDuration(event, getTimeZone(), true);
	return newLine(lang.get("when_label"), duration);
}
function organizerLabel(organizer, a) {
	return cleanMailAddress(organizer.address) === cleanMailAddress(a.address.address) ? `(${lang.get("organizer_label")})` : "";
}
function newLine(label, content) {
	return `<div style="display: flex; margin-top: 8px"><div style="min-width: 120px"><b style="float:right; margin-right:16px">${label}:</b></div>${content}</div>`;
}
function attendeesLine(event) {
	const { organizer } = event;
	let attendees = "";
	if (organizer && !findAttendeeInAddresses(event.attendees, [organizer.address])) attendees = makeAttendee(organizer, createCalendarEventAttendee({
		address: organizer,
		status: "0"
	}));
	attendees += event.attendees.map((a) => makeAttendee(assertNotNull(organizer), a)).join("\n");
	return newLine(lang.get("who_label"), `<div>${attendees}</div>`);
}
function makeAttendee(organizer, attendee) {
	return `<div>
${attendee.address.name || ""} ${attendee.address.address}
${organizerLabel(organizer, attendee)}
${calendarAttendeeStatusSymbol(getAttendeeStatus(attendee))}</div>`;
}
function locationLine(event) {
	return event.location ? newLine(lang.get("location_label"), event.location) : "";
}
function descriptionLine(event) {
	return event.description ? newLine(lang.get("description_label"), `<div>${event.description}</div>`) : "";
}
function makeInviteEmailBody(sender, event, message) {
	return `
	<div style="max-width: 685px; margin: 0 auto">
	  	<h2 style="text-align: center">${message}</h2>
  		<div style="margin: 0 auto">
  			${summaryLine(event)}
    		${whenLine(event)}
    		${locationLine(event)}
    		${attendeesLine(event)}
    		${descriptionLine(event)}
  		</div>
	</div>`;
}
function assertOrganizer(event) {
	if (event.organizer == null) throw new ProgrammingError("Cannot send event update without organizer");
	return event.organizer;
}
const calendarNotificationSender = new CalendarNotificationSender();

//#endregion
export { CalendarNotificationSender, calendarNotificationSender };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,