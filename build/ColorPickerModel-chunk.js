import { hslToHex, normalizeHueAngle } from "./theme-chunk.js";

//#region src/common/gui/base/colorPicker/ColorPickerModel.ts
var ColorPickerModel = class ColorPickerModel {
	static PALETTE_SIZE = 8;
	paletteSchema;
	variantIndexBySL = new Map();
	constructor(isDarkTheme) {
		this.isDarkTheme = isDarkTheme;
		const { hueShift: hueWindowH, saturation: hueWindowS, lightness: hueWindowL } = this.getHueWindowSchema();
		this.paletteSchema = Object.freeze({
			hueShift: [
				hueWindowH,
				0,
				0,
				-1,
				-1,
				0,
				0,
				0
			],
			saturation: [
				hueWindowS,
				100,
				54,
				36,
				27,
				25,
				28,
				31
			],
			lightness: [
				hueWindowL,
				87,
				77,
				66,
				55,
				46,
				41,
				36
			]
		});
	}
	getHueWindowColor(hue) {
		const { saturation, lightness } = this.getHueWindowSchema();
		return hslToHex({
			h: hue,
			s: saturation,
			l: lightness
		});
	}
	getHueWindowSchema() {
		return {
			hueShift: 0,
			saturation: this.isDarkTheme ? 50 : 100,
			lightness: this.isDarkTheme ? 50 : 40
		};
	}
	getColor(hue, variant) {
		const h = normalizeHueAngle(hue + this.paletteSchema.hueShift[variant]);
		const s = this.paletteSchema.saturation[variant];
		const l = this.paletteSchema.lightness[variant];
		return {
			h,
			s,
			l
		};
	}
	getVariantIndexBySL(saturation, lightness) {
		if (this.variantIndexBySL.size === 0) for (let i = 0; i < ColorPickerModel.PALETTE_SIZE; i++) this.variantIndexBySL.set(this.slKey(this.paletteSchema.saturation[i], this.paletteSchema.lightness[i]), i);
		return this.variantIndexBySL.get(this.slKey(saturation, lightness));
	}
	slKey(s, l) {
		return `${s}_${l}`;
	}
};

//#endregion
export { ColorPickerModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sb3JQaWNrZXJNb2RlbC1jaHVuay5qcyIsIm5hbWVzIjpbImlzRGFya1RoZW1lOiBib29sZWFuIiwiaHVlOiBudW1iZXIiLCJ2YXJpYW50OiBudW1iZXIiLCJzYXR1cmF0aW9uOiBudW1iZXIiLCJsaWdodG5lc3M6IG51bWJlciIsInM6IG51bWJlciIsImw6IG51bWJlciJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vZ3VpL2Jhc2UvY29sb3JQaWNrZXIvQ29sb3JQaWNrZXJNb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoc2xUb0hleCwgbm9ybWFsaXplSHVlQW5nbGUgfSBmcm9tIFwiLi4vQ29sb3IuanNcIlxuXG50eXBlIE51bWJlclR1cGxlPEwgZXh0ZW5kcyBudW1iZXI+ID0gcmVhZG9ubHkgbnVtYmVyW10gJiB7IGxlbmd0aDogTCB9XG5cbmludGVyZmFjZSBQYWxldHRlU2NoZW1hPEwgZXh0ZW5kcyBudW1iZXI+IHtcblx0cmVhZG9ubHkgaHVlU2hpZnQ6IE51bWJlclR1cGxlPEw+XG5cdHJlYWRvbmx5IHNhdHVyYXRpb246IE51bWJlclR1cGxlPEw+XG5cdHJlYWRvbmx5IGxpZ2h0bmVzczogTnVtYmVyVHVwbGU8TD5cbn1cblxuZXhwb3J0IGNsYXNzIENvbG9yUGlja2VyTW9kZWwge1xuXHRzdGF0aWMgcmVhZG9ubHkgUEFMRVRURV9TSVpFID0gOFxuXHRyZWFkb25seSBwYWxldHRlU2NoZW1hOiBQYWxldHRlU2NoZW1hPHR5cGVvZiBDb2xvclBpY2tlck1vZGVsLlBBTEVUVEVfU0laRT5cblx0cHJpdmF0ZSByZWFkb25seSB2YXJpYW50SW5kZXhCeVNMOiBNYXA8c3RyaW5nLCBudW1iZXI+ID0gbmV3IE1hcCgpXG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBpc0RhcmtUaGVtZTogYm9vbGVhbikge1xuXHRcdGNvbnN0IHsgaHVlU2hpZnQ6IGh1ZVdpbmRvd0gsIHNhdHVyYXRpb246IGh1ZVdpbmRvd1MsIGxpZ2h0bmVzczogaHVlV2luZG93TCB9ID0gdGhpcy5nZXRIdWVXaW5kb3dTY2hlbWEoKVxuXG5cdFx0dGhpcy5wYWxldHRlU2NoZW1hID0gT2JqZWN0LmZyZWV6ZSh7XG5cdFx0XHRodWVTaGlmdDogW2h1ZVdpbmRvd0gsIDAsIDAsIC0xLCAtMSwgMCwgMCwgMF0sXG5cdFx0XHRzYXR1cmF0aW9uOiBbaHVlV2luZG93UywgMTAwLCA1NCwgMzYsIDI3LCAyNSwgMjgsIDMxXSxcblx0XHRcdGxpZ2h0bmVzczogW2h1ZVdpbmRvd0wsIDg3LCA3NywgNjYsIDU1LCA0NiwgNDEsIDM2XSxcblx0XHR9IGFzIGNvbnN0KVxuXHR9XG5cblx0Z2V0SHVlV2luZG93Q29sb3IoaHVlOiBudW1iZXIpIHtcblx0XHRjb25zdCB7IHNhdHVyYXRpb24sIGxpZ2h0bmVzcyB9ID0gdGhpcy5nZXRIdWVXaW5kb3dTY2hlbWEoKVxuXHRcdHJldHVybiBoc2xUb0hleCh7IGg6IGh1ZSwgczogc2F0dXJhdGlvbiwgbDogbGlnaHRuZXNzIH0pXG5cdH1cblxuXHRwcml2YXRlIGdldEh1ZVdpbmRvd1NjaGVtYSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aHVlU2hpZnQ6IDAsXG5cdFx0XHRzYXR1cmF0aW9uOiB0aGlzLmlzRGFya1RoZW1lID8gNTAgOiAxMDAsXG5cdFx0XHRsaWdodG5lc3M6IHRoaXMuaXNEYXJrVGhlbWUgPyA1MCA6IDQwLFxuXHRcdH1cblx0fVxuXG5cdGdldENvbG9yKGh1ZTogbnVtYmVyLCB2YXJpYW50OiBudW1iZXIpOiB7IGg6IG51bWJlcjsgczogbnVtYmVyOyBsOiBudW1iZXIgfSB7XG5cdFx0Y29uc3QgaCA9IG5vcm1hbGl6ZUh1ZUFuZ2xlKGh1ZSArIHRoaXMucGFsZXR0ZVNjaGVtYS5odWVTaGlmdFt2YXJpYW50XSlcblx0XHRjb25zdCBzID0gdGhpcy5wYWxldHRlU2NoZW1hLnNhdHVyYXRpb25bdmFyaWFudF1cblx0XHRjb25zdCBsID0gdGhpcy5wYWxldHRlU2NoZW1hLmxpZ2h0bmVzc1t2YXJpYW50XVxuXG5cdFx0cmV0dXJuIHsgaCwgcywgbCB9XG5cdH1cblxuXHRnZXRWYXJpYW50SW5kZXhCeVNMKHNhdHVyYXRpb246IG51bWJlciwgbGlnaHRuZXNzOiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy52YXJpYW50SW5kZXhCeVNMLnNpemUgPT09IDApIHtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgQ29sb3JQaWNrZXJNb2RlbC5QQUxFVFRFX1NJWkU7IGkrKykge1xuXHRcdFx0XHR0aGlzLnZhcmlhbnRJbmRleEJ5U0wuc2V0KHRoaXMuc2xLZXkodGhpcy5wYWxldHRlU2NoZW1hLnNhdHVyYXRpb25baV0sIHRoaXMucGFsZXR0ZVNjaGVtYS5saWdodG5lc3NbaV0pLCBpKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnZhcmlhbnRJbmRleEJ5U0wuZ2V0KHRoaXMuc2xLZXkoc2F0dXJhdGlvbiwgbGlnaHRuZXNzKSlcblx0fVxuXG5cdHByaXZhdGUgc2xLZXkoczogbnVtYmVyLCBsOiBudW1iZXIpIHtcblx0XHRyZXR1cm4gYCR7c31fJHtsfWBcblx0fVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7SUFVYSxtQkFBTixNQUFNLGlCQUFpQjtDQUM3QixPQUFnQixlQUFlO0NBQy9CLEFBQVM7Q0FDVCxBQUFpQixtQkFBd0MsSUFBSTtDQUU3RCxZQUE2QkEsYUFBc0I7RUE2Q25ELEtBN0M2QjtFQUM1QixNQUFNLEVBQUUsVUFBVSxZQUFZLFlBQVksWUFBWSxXQUFXLFlBQVksR0FBRyxLQUFLLG9CQUFvQjtBQUV6RyxPQUFLLGdCQUFnQixPQUFPLE9BQU87R0FDbEMsVUFBVTtJQUFDO0lBQVk7SUFBRztJQUFHO0lBQUk7SUFBSTtJQUFHO0lBQUc7R0FBRTtHQUM3QyxZQUFZO0lBQUM7SUFBWTtJQUFLO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtHQUFHO0dBQ3JELFdBQVc7SUFBQztJQUFZO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0dBQUc7RUFDbkQsRUFBVTtDQUNYO0NBRUQsa0JBQWtCQyxLQUFhO0VBQzlCLE1BQU0sRUFBRSxZQUFZLFdBQVcsR0FBRyxLQUFLLG9CQUFvQjtBQUMzRCxTQUFPLFNBQVM7R0FBRSxHQUFHO0dBQUssR0FBRztHQUFZLEdBQUc7RUFBVyxFQUFDO0NBQ3hEO0NBRUQsQUFBUSxxQkFBcUI7QUFDNUIsU0FBTztHQUNOLFVBQVU7R0FDVixZQUFZLEtBQUssY0FBYyxLQUFLO0dBQ3BDLFdBQVcsS0FBSyxjQUFjLEtBQUs7RUFDbkM7Q0FDRDtDQUVELFNBQVNBLEtBQWFDLFNBQXNEO0VBQzNFLE1BQU0sSUFBSSxrQkFBa0IsTUFBTSxLQUFLLGNBQWMsU0FBUyxTQUFTO0VBQ3ZFLE1BQU0sSUFBSSxLQUFLLGNBQWMsV0FBVztFQUN4QyxNQUFNLElBQUksS0FBSyxjQUFjLFVBQVU7QUFFdkMsU0FBTztHQUFFO0dBQUc7R0FBRztFQUFHO0NBQ2xCO0NBRUQsb0JBQW9CQyxZQUFvQkMsV0FBbUI7QUFDMUQsTUFBSSxLQUFLLGlCQUFpQixTQUFTLEVBQ2xDLE1BQUssSUFBSSxJQUFJLEdBQUcsSUFBSSxpQkFBaUIsY0FBYyxJQUNsRCxNQUFLLGlCQUFpQixJQUFJLEtBQUssTUFBTSxLQUFLLGNBQWMsV0FBVyxJQUFJLEtBQUssY0FBYyxVQUFVLEdBQUcsRUFBRSxFQUFFO0FBSTdHLFNBQU8sS0FBSyxpQkFBaUIsSUFBSSxLQUFLLE1BQU0sWUFBWSxVQUFVLENBQUM7Q0FDbkU7Q0FFRCxBQUFRLE1BQU1DLEdBQVdDLEdBQVc7QUFDbkMsVUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFO0NBQ2pCO0FBQ0QifQ==