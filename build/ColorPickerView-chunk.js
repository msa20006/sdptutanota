import { client } from "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { assertNotNull, clamp, filterInt } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { MAX_HUE_ANGLE, hexToHSL, hslToHex, isColorLight, isValidCSSHexColor, normalizeHueAngle, theme } from "./theme-chunk.js";
import { Keys, TabIndex } from "./TutanotaConstants-chunk.js";
import { isKeyPressed } from "./KeyManager-chunk.js";
import { px, size } from "./size-chunk.js";
import { TextField } from "./Dialog-chunk.js";
import { ColorPickerModel } from "./ColorPickerModel-chunk.js";
import { ExpanderButton, ExpanderPanel } from "./Expander-chunk.js";

//#region src/common/gui/base/colorPicker/ColorPickerView.ts
const HUE_GRADIENT_BORDER_WIDTH = 1;
const HUE_GRADIENT_HEIGHT = 40;
var PaletteIndex = function(PaletteIndex$1) {
	PaletteIndex$1[PaletteIndex$1["defaultVariant"] = 2] = "defaultVariant";
	PaletteIndex$1[PaletteIndex$1["customVariant"] = -1] = "customVariant";
	return PaletteIndex$1;
}(PaletteIndex || {});
var ColorPickerView = class {
	palette = Array(ColorPickerModel.PALETTE_SIZE).fill(null);
	model = new ColorPickerModel(!isColorLight(theme.content_bg));
	selectedHueAngle = Math.floor(Math.random() * MAX_HUE_ANGLE);
	fallbackVariantIndex = PaletteIndex.defaultVariant;
	isAdvanced = false;
	customColorHex = "";
	huePickerDom = null;
	hueImgDom = null;
	hueSliderDom = null;
	hueWindowDom = null;
	constructor(vnode) {
		const { value: selectedColor, onselect } = vnode.attrs;
		if (selectedColor) {
			const { h, s, l } = hexToHSL(selectedColor);
			const variantIndex = this.model.getVariantIndexBySL(s, l);
			this.selectedHueAngle = variantIndex != null ? normalizeHueAngle(h - this.model.paletteSchema.hueShift[variantIndex]) : h;
			this.generatePalette();
			this.customColorHex = selectedColor;
			if (variantIndex != null) this.fallbackVariantIndex = variantIndex;
			this.isAdvanced = variantIndex == null || this.palette[variantIndex] !== selectedColor;
		} else {
			this.generatePalette();
			const defaultColor = assertNotNull(this.palette[PaletteIndex.defaultVariant], "no default palette color variant");
			this.customColorHex = defaultColor;
			onselect(defaultColor);
		}
	}
	view(vnode) {
		const attrs = vnode.attrs;
		return mithril_default(".color-picker", [
			this.renderHuePicker(attrs.onselect),
			mithril_default(".flex.wrap.full-width.items-center.justify-between.p0.plr-s", { style: {
				rowGap: px(size.vpad_xs),
				marginTop: px(12)
			} }, this.palette.map((color, i) => this.renderColorOption({
				color: assertNotNull(color, `palette color ${i} not generated`),
				index: i,
				selectedColor: attrs.value,
				onselect: attrs.onselect,
				className: i === 0 ? ".pr-vpad-s.mr-hpad-small" : undefined,
				style: i === 0 ? { borderRight: `2px solid ${theme.content_border}` } : undefined
			}))),
			mithril_default("", [mithril_default(ExpanderButton, {
				label: "advanced_label",
				expanded: this.isAdvanced,
				onExpandedChange: (expanded) => this.handleOnExpandedChange(expanded, attrs),
				style: { marginLeft: "auto" }
			}), mithril_default(ExpanderPanel, { expanded: this.isAdvanced }, this.renderCustomColorContainer(attrs))])
		]);
	}
	handleOnExpandedChange(expanded, attrs) {
		if (expanded && isValidCSSHexColor(this.customColorHex)) attrs.onselect(this.customColorHex);
else {
			let variantIndex = undefined;
			if (isValidCSSHexColor(this.customColorHex)) {
				const { s, l } = hexToHSL(this.customColorHex);
				variantIndex = this.model.getVariantIndexBySL(s, l);
			}
			const fallbackColor = assertNotNull(this.palette[variantIndex ?? this.fallbackVariantIndex], `no fallback color at [${variantIndex} ?? ${this.fallbackVariantIndex}]`);
			attrs.onselect(fallbackColor);
		}
		this.isAdvanced = expanded;
	}
	renderCustomColorContainer(attrs) {
		return mithril_default(".custom-color-container.flex.items-start.gap-hpad", [mithril_default("", [mithril_default(TextField, {
			value: this.customColorHex.replace("#", ""),
			label: "hexCode_label",
			oninput: (v) => this.handleCustomHexInput(v, attrs)
		}), !isValidCSSHexColor(this.customColorHex) && mithril_default(".small", lang.get("invalidInputFormat_msg"))]), this.renderColorOption({
			color: this.customColorHex,
			index: PaletteIndex.customVariant,
			selectedColor: attrs.value,
			onselect: (color) => {
				this.postionSliderOnHue(assertNotNull(this.hueImgDom), assertNotNull(this.hueSliderDom));
				attrs.onselect(color);
			},
			className: ".mt-m"
		})]);
	}
	handleCustomHexInput(inputValue, attrs) {
		const newValue = inputValue.trim().replaceAll("#", "").slice(0, 6);
		const hexCode = "#" + newValue;
		this.customColorHex = hexCode;
		if (!isValidCSSHexColor(hexCode)) {
			attrs.onselect(assertNotNull(this.palette[this.fallbackVariantIndex], `no fallback color at ${this.fallbackVariantIndex}`));
			return;
		}
		const { h, s, l } = hexToHSL(hexCode);
		const variantIndex = this.model.getVariantIndexBySL(s, l);
		if (variantIndex != null) this.fallbackVariantIndex = variantIndex;
		this.selectedHueAngle = variantIndex != null ? normalizeHueAngle(h - this.model.paletteSchema.hueShift[variantIndex]) : h;
		this.postionSliderOnHue(assertNotNull(this.hueImgDom), assertNotNull(this.hueSliderDom));
		this.generatePalette();
		attrs.onselect(hexCode);
	}
	renderColorOption(attrs) {
		const { color, index, selectedColor, className, style } = attrs;
		const isOptionSelected = color === selectedColor;
		let isColorValid = true;
		if (index === PaletteIndex.customVariant) isColorValid = isValidCSSHexColor(color);
		const handleSelection = () => {
			if (!isColorValid) return;
			if (index === PaletteIndex.customVariant && isColorValid) {
				const { h, s, l } = hexToHSL(color);
				const variantIndex = this.model.getVariantIndexBySL(s, l);
				this.selectedHueAngle = variantIndex != null ? normalizeHueAngle(h - this.model.paletteSchema.hueShift[variantIndex]) : h;
				this.generatePalette();
			} else {
				this.fallbackVariantIndex = index;
				this.customColorHex = color;
			}
			attrs.onselect(color);
		};
		return mithril_default(`.color-option${className ?? ""}`, {
			className: isOptionSelected ? "selected" : "",
			style
		}, mithril_default(".border-radius-m", { style: {
			padding: "1px",
			borderWidth: "2px",
			borderStyle: "solid",
			borderColor: isOptionSelected ? theme.content_button_selected : "transparent"
		} }, mithril_default(".border-radius", {
			tabIndex: TabIndex.Default,
			role: "radio",
			ariaLabel: index === PaletteIndex.customVariant ? lang.get("customColor_label") : `${lang.get("variant_label")} ${index}`,
			ariaChecked: isOptionSelected,
			style: {
				width: px(30),
				height: px(30),
				borderWidth: "1px",
				borderStyle: "solid",
				borderColor: isOptionSelected ? "transparent" : theme.content_border,
				backgroundColor: isColorValid ? color : theme.content_border
			},
			onkeydown: (e) => {
				if (isKeyPressed(e.key, Keys.SPACE)) {
					e.preventDefault();
					handleSelection();
				}
			},
			onclick: handleSelection
		})));
	}
	renderHuePicker(onselect) {
		const a11yHueShiftStep = 5;
		return mithril_default(".rel.overflow-hidden", {
			style: { position: "relative" },
			onkeydown: (e) => {
				e.preventDefault();
				const isRightMove = isKeyPressed(e.key, Keys.RIGHT);
				const isLeftMove = isKeyPressed(e.key, Keys.LEFT);
				const isStill = isLeftMove && isRightMove;
				if (!isStill && (isRightMove || isLeftMove)) {
					const step = e.shiftKey ? 1 : a11yHueShiftStep;
					let hueStep = isLeftMove ? -step : step;
					this.selectedHueAngle = normalizeHueAngle(this.selectedHueAngle + hueStep);
					this.postionSliderOnHue(assertNotNull(this.hueImgDom), assertNotNull(this.hueSliderDom));
					this.toggleHueWindow(true);
					this.generatePalette();
					if (!this.isAdvanced || !isValidCSSHexColor(this.customColorHex)) onselect(assertNotNull(this.palette[this.fallbackVariantIndex], `no fallback color at ${this.fallbackVariantIndex}`));
				}
			},
			onkeyup: () => this.toggleHueWindow(false),
			oncreate: (vnode) => {
				this.huePickerDom = vnode.dom;
			}
		}, [
			mithril_default("input.fill-absolute.no-hover", {
				type: "range",
				min: 0,
				max: MAX_HUE_ANGLE,
				step: a11yHueShiftStep,
				tabIndex: TabIndex.Default,
				role: "slider",
				ariaLabel: lang.get("hue_label"),
				style: { opacity: 0 },
				value: `${this.selectedHueAngle}`,
				oninput: (e) => {
					this.selectedHueAngle = filterInt(e.target.value);
					this.postionSliderOnHue(assertNotNull(this.hueImgDom), assertNotNull(this.hueSliderDom));
					this.generatePalette();
					if (!this.isAdvanced || !isValidCSSHexColor(this.customColorHex)) onselect(assertNotNull(this.palette[this.fallbackVariantIndex], `no fallback color at ${this.fallbackVariantIndex}`));
				}
			}),
			mithril_default(".full-width.border-radius.overflow-hidden", { style: {
				borderStyle: "solid",
				borderColor: theme.content_border,
				backgroundColor: theme.content_border,
				borderWidth: px(HUE_GRADIENT_BORDER_WIDTH),
				height: px(HUE_GRADIENT_HEIGHT)
			} }, mithril_default("img.block.full-width", {
				src: `${window.tutao.appState.prefixWithoutFile}/images/color-hue-picker/hue-gradient-${!isColorLight(theme.content_bg) ? "dark" : "light"}.png`,
				alt: "",
				draggable: false,
				style: { height: px(HUE_GRADIENT_HEIGHT) },
				oncreate: (vnode) => {
					this.hueImgDom = vnode.dom;
				},
				onupdate: (vnode) => {
					if (this.hueSliderDom != null && !this.hueSliderDom.style.left) {
						const hueImgDom = vnode.dom;
						this.postionSliderOnHue(hueImgDom, this.hueSliderDom);
					}
				},
				[client.isTouchSupported() ? "ontouchstart" : "onpointerdown"]: (e) => {
					const abortController = new AbortController();
					const hueImgDom = e.target;
					hueImgDom.addEventListener(client.isTouchSupported() ? "touchmove" : "pointermove", (e$1) => this.handleHueChange(e$1, hueImgDom), { signal: abortController.signal });
					const endListener = () => {
						abortController.abort();
						this.generatePalette();
						this.toggleHueWindow(false);
						if (!this.isAdvanced || !isValidCSSHexColor(this.customColorHex)) onselect(assertNotNull(this.palette[this.fallbackVariantIndex], `no fallback color at ${this.fallbackVariantIndex}`));
						mithril_default.redraw();
					};
					hueImgDom.addEventListener(client.isTouchSupported() ? "touchcancel" : "pointercancel", endListener, { signal: abortController.signal });
					document.addEventListener(client.isTouchSupported() ? "touchend" : "pointerup", endListener, { signal: abortController.signal });
					this.handleHueChange(e, hueImgDom);
					this.toggleHueWindow(true);
				}
			})),
			mithril_default(".abs", {
				style: {
					width: "0px",
					bottom: px(HUE_GRADIENT_BORDER_WIDTH)
				},
				oncreate: (vnode) => {
					this.hueSliderDom = vnode.dom;
				}
			}, [mithril_default(".border.circle", {
				style: {
					width: px(24),
					height: px(24),
					transform: "translateX(-50%)",
					backgroundColor: this.model.getHueWindowColor(this.selectedHueAngle) ?? theme.content_border
				},
				oncreate: (vnode) => {
					this.hueWindowDom = vnode.dom;
				}
			}), mithril_default("", { style: {
				width: px(2),
				height: px(HUE_GRADIENT_HEIGHT),
				transform: "translateX(-50%)",
				backgroundColor: theme.content_border
			} })])
		]);
	}
	toggleHueWindow(show) {
		assertNotNull(this.huePickerDom).style.overflow = show ? "visible" : "hidden";
	}
	postionSliderOnHue(hueImgDom, hueSliderDom) {
		const hueGradientWidth = hueImgDom.getBoundingClientRect().width;
		hueSliderDom.style.left = `${Math.floor(this.selectedHueAngle / MAX_HUE_ANGLE * hueGradientWidth) + HUE_GRADIENT_BORDER_WIDTH}px`;
		assertNotNull(this.hueWindowDom).style.backgroundColor = this.model.getHueWindowColor(this.selectedHueAngle);
	}
	handleHueChange = (e, hueImgDom) => {
		const hueImgDomRect = hueImgDom.getBoundingClientRect();
		const eClientX = "clientX" in e ? e.clientX : e.touches[0].clientX;
		const posX = clamp(eClientX - hueImgDomRect.left + HUE_GRADIENT_BORDER_WIDTH, HUE_GRADIENT_BORDER_WIDTH, hueImgDomRect.width);
		this.selectedHueAngle = Math.floor(posX / hueImgDomRect.width * MAX_HUE_ANGLE);
		if (this.hueSliderDom) this.hueSliderDom.style.left = `${posX}px`;
		if (this.hueWindowDom) this.hueWindowDom.style.backgroundColor = this.model.getHueWindowColor(this.selectedHueAngle);
	};
	generatePalette() {
		for (let i = 0; i < ColorPickerModel.PALETTE_SIZE; i++) this.palette[i] = hslToHex(this.model.getColor(this.selectedHueAngle, i));
	}
};

//#endregion
export { ColorPickerView };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,