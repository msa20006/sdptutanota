import { isAndroidApp } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { theme } from "./theme-chunk.js";
import { ButtonType } from "./Button-chunk.js";
import { Dialog } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { BannerButton } from "./BannerButton-chunk.js";
import { PermissionType$1 as PermissionType } from "./PermissionType-chunk.js";

//#region src/common/settings/SettingsBannerButton.ts
function renderSettingsBannerButton(text, onclick, isDisabled, classes) {
	return mithril_default(BannerButton, {
		text,
		borderColor: theme.content_accent,
		color: theme.content_accent,
		class: "b full-width button-content " + classes,
		click: (event, dom) => {
			onclick(event, dom);
		},
		disabled: isDisabled ?? undefined
	});
}

//#endregion
//#region src/common/settings/NotificationPermissionsDialog.ts
function renderPermissionButton(permissionName, isPermissionGranted, onclick) {
	return renderSettingsBannerButton(isPermissionGranted ? "granted_msg" : permissionName, onclick, isPermissionGranted);
}
async function renderNotificationPermissionsDialog(onClose) {
	let isNotificationPermissionGranted = await locator.systemPermissionHandler.hasPermission(PermissionType.Notification);
	let isBatteryPermissionGranted = await locator.systemPermissionHandler.hasPermission(PermissionType.IgnoreBatteryOptimization);
	const headerBarAttrs = {
		left: [{
			label: "close_alt",
			click: () => dialog.close(),
			type: ButtonType.Secondary
		}],
		middle: "permissions_label",
		remove: () => onClose()
	};
	const dialog = Dialog.editSmallDialog(headerBarAttrs, () => mithril_default(NotificationPermissionsBody, {
		isNotificationPermissionGranted,
		isBatteryPermissionGranted,
		askForNotificationPermission: (isGranted) => {
			isNotificationPermissionGranted = isGranted;
			mithril_default.redraw();
		},
		askForBatteryNotificationPermission: async (isGranted) => {
			isBatteryPermissionGranted = isGranted;
			mithril_default.redraw();
		}
	}));
	dialog.show();
}
var NotificationPermissionsBody = class {
	view({ attrs }) {
		return [
			mithril_default("p.mb-s", lang.get("allowNotifications_msg")),
			renderPermissionButton("grant_notification_permission_action", attrs.isNotificationPermissionGranted, async () => {
				const isNotificationPermissionGranted = await locator.systemPermissionHandler.requestPermission(PermissionType.Notification, "grant_notification_permission_action");
				if (isNotificationPermissionGranted) locator.pushService.register();
				attrs.askForNotificationPermission(isNotificationPermissionGranted);
			}),
			!isAndroidApp() ? null : mithril_default("section.mt-s.mb", [mithril_default("p.mb-s.mt-s", lang.get("allowBatteryPermission_msg")), renderPermissionButton("grant_battery_permission_action", attrs.isBatteryPermissionGranted, async () => {
				const isBatteryPermissionGranted = await locator.systemPermissionHandler.requestPermission(PermissionType.IgnoreBatteryOptimization, "allowBatteryPermission_msg");
				attrs.askForBatteryNotificationPermission(isBatteryPermissionGranted);
			})])
		];
	}
};

//#endregion
export { NotificationPermissionsBody, renderNotificationPermissionsDialog, renderSettingsBannerButton };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,