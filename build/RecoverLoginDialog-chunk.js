import { __toESM } from "./chunk-chunk.js";
import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { assertMainOrNode } from "./Env-chunk.js";
import { client } from "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import "./styles-chunk.js";
import "./theme-chunk.js";
import "./TutanotaConstants-chunk.js";
import "./KeyManager-chunk.js";
import { windowFacade } from "./WindowFacade-chunk.js";
import "./RootView-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import "./TypeRefs-chunk.js";
import "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import { isMailAddress } from "./FormatValidator-chunk.js";
import { require_stream } from "./stream-chunk.js";
import "./ErrorUtils-chunk.js";
import { AccessBlockedError, AccessDeactivatedError, NotAuthenticatedError, TooManyRequestsError } from "./RestError-chunk.js";
import "./OutOfSyncError-chunk.js";
import { CancelledError } from "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import "./GroupUtils-chunk.js";
import "./Button-chunk.js";
import { Icons } from "./Icons-chunk.js";
import "./DialogHeaderBar-chunk.js";
import "./CountryList-chunk.js";
import { Autocomplete, Dialog, DialogType, TextField, TextFieldType, createDropdown } from "./Dialog-chunk.js";
import "./Icon-chunk.js";
import "./AriaUtils-chunk.js";
import { ButtonSize, IconButton } from "./IconButton-chunk.js";
import "./Formatter-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import "./MailAddressParser-chunk.js";
import "./BlobUtils-chunk.js";
import "./FileUtils-chunk.js";
import { showProgressDialog } from "./ProgressDialog-chunk.js";
import "./SharedMailUtils-chunk.js";
import "./PasswordUtils-chunk.js";
import "./ExternalLink-chunk.js";
import "./ToggleButton-chunk.js";
import "./ClipboardUtils-chunk.js";
import { PasswordField } from "./PasswordField-chunk.js";
import "./LoginButton-chunk.js";
import { HtmlEditor, HtmlEditorMode } from "./HtmlEditor-chunk.js";
import "./HtmlSanitizer-chunk.js";
import { PasswordForm, PasswordModel } from "./PasswordForm-chunk.js";

//#region src/common/login/recover/RecoverLoginDialog.ts
var import_stream = __toESM(require_stream(), 1);
assertMainOrNode();
function show(mailAddress, resetAction) {
	const selectedAction = (0, import_stream.default)(resetAction ?? null);
	const passwordModel = new PasswordModel(locator.usageTestController, locator.logins, {
		checkOldPassword: false,
		enforceStrength: true
	});
	const passwordValueStream = (0, import_stream.default)("");
	const emailAddressStream = (0, import_stream.default)(mailAddress || "");
	const resetPasswordAction = {
		label: "recoverSetNewPassword_action",
		click: () => selectedAction("password")
	};
	const resetSecondFactorAction = {
		label: "recoverResetFactors_action",
		click: () => selectedAction("secondFactor")
	};
	const resetActionClickHandler = createDropdown({
		lazyButtons: () => [resetPasswordAction, resetSecondFactorAction],
		width: 300
	});
	const resetActionButtonAttrs = {
		title: "action_label",
		click: resetActionClickHandler,
		icon: Icons.Edit,
		size: ButtonSize.Compact
	};
	const selectedValueLabelStream = selectedAction.map((v) => {
		if (v === "password") return lang.get("recoverSetNewPassword_action");
else if (v === "secondFactor") return lang.get("recoverResetFactors_action");
else return lang.get("choose_label");
	});
	const editor = new HtmlEditor("recoveryCode_label");
	editor.setMode(HtmlEditorMode.HTML);
	editor.setHtmlMonospace(true);
	editor.setMinHeight(80);
	editor.showBorders();
	const recoverDialog = Dialog.showActionDialog({
		title: "recover_label",
		type: DialogType.EditSmall,
		child: { view: () => {
			return [
				mithril_default(TextField, {
					label: "mailAddress_label",
					value: emailAddressStream(),
					autocompleteAs: Autocomplete.email,
					type: TextFieldType.Email,
					oninput: emailAddressStream
				}),
				mithril_default(editor),
				mithril_default(TextField, {
					label: "action_label",
					value: selectedValueLabelStream(),
					oninput: selectedValueLabelStream,
					injectionsRight: () => mithril_default(IconButton, resetActionButtonAttrs),
					isReadOnly: true
				}),
				selectedAction() == null ? null : selectedAction() === "password" ? mithril_default(PasswordForm, { model: passwordModel }) : mithril_default(PasswordField, {
					value: passwordValueStream(),
					autocompleteAs: Autocomplete.currentPassword,
					oninput: passwordValueStream
				})
			];
		} },
		okAction: async () => {
			const cleanMailAddress = emailAddressStream().trim().toLowerCase();
			const cleanRecoverCodeValue = editor.getValue().replace(/\s/g, "").toLowerCase();
			if (!isMailAddress(cleanMailAddress, true)) Dialog.message("mailAddressInvalid_msg");
else if (cleanRecoverCodeValue === "") Dialog.message("recoveryCodeEmpty_msg");
else if (selectedAction() === "password") {
				const errorMessageId = passwordModel.getErrorMessageId();
				if (errorMessageId) Dialog.message(errorMessageId);
else showProgressDialog("pleaseWait_msg", locator.loginFacade.recoverLogin(cleanMailAddress, cleanRecoverCodeValue, passwordModel.getNewPassword(), client.getIdentifier())).then(async () => {
					recoverDialog.close();
					await deleteCredentialsByMailAddress(cleanMailAddress);
					windowFacade.reload({});
				}).catch((e) => handleError(e)).finally(() => locator.secondFactorHandler.closeWaitingForSecondFactorDialog());
			} else if (selectedAction() === "secondFactor") {
				const passwordValue = passwordValueStream();
				showProgressDialog("pleaseWait_msg", locator.loginFacade.resetSecondFactors(cleanMailAddress, passwordValue, cleanRecoverCodeValue)).then(async () => {
					recoverDialog.close();
					await deleteCredentialsByMailAddress(cleanMailAddress);
					windowFacade.reload({});
				}).catch((e) => handleError(e));
			}
		},
		cancelAction: () => mithril_default.route.set("/login", { noAutoLogin: true })
	});
	return recoverDialog;
}
async function deleteCredentialsByMailAddress(cleanMailAddress) {
	const allCredentials = await locator.credentialsProvider.getInternalCredentialsInfos();
	const credentials = allCredentials.find((c) => c.login === cleanMailAddress);
	if (credentials) await locator.credentialsProvider.deleteByUserId(credentials.userId);
}
function handleError(e) {
	if (e instanceof NotAuthenticatedError) Dialog.message("loginFailed_msg");
else if (e instanceof AccessBlockedError || e instanceof AccessDeactivatedError) Dialog.message("loginFailedOften_msg");
else if (e instanceof CancelledError) mithril_default.redraw();
else if (e instanceof TooManyRequestsError) Dialog.message("tooManyAttempts_msg");
else throw e;
}

//#endregion
export { show };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,