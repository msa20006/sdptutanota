import { mithril_default } from "./mithril-chunk.js";
import { defer } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import { windowFacade } from "./WindowFacade-chunk.js";
import { CredentialAuthenticationError, KeyPermanentlyInvalidatedError } from "./ErrorUtils-chunk.js";
import { CancelledError } from "./CancelledError-chunk.js";
import { BaseButton, ButtonType } from "./Button-chunk.js";
import { DialogHeaderBar } from "./DialogHeaderBar-chunk.js";
import { Dialog, DialogType } from "./Dialog-chunk.js";
import { liveDataAttrs } from "./AriaUtils-chunk.js";
import { CredentialEncryptionMode } from "./CredentialEncryptionMode-chunk.js";
import { RadioSelector } from "./RadioSelector-chunk.js";

//#region src/common/gui/dialogs/SelectCredentialsEncryptionModeDialog.ts
const DEFAULT_CREDENTIAL_ENCRYPTION_MODE = CredentialEncryptionMode.DEVICE_LOCK;
async function showCredentialsEncryptionModeDialog(credentialsProvider) {
	await CredentialEncryptionMethodDialog.showAndWaitForSelection(credentialsProvider);
}
var CredentialEncryptionMethodDialog = class CredentialEncryptionMethodDialog {
	error;
	finished;
	dialog;
	constructor(credentialsProvider, supportedModes, previousSelection) {
		this.credentialsProvider = credentialsProvider;
		this.supportedModes = supportedModes;
		this.previousSelection = previousSelection;
		this.error = null;
		this.finished = defer();
		this.dialog = new Dialog(DialogType.EditMedium, { view: () => {
			return mithril_default("", [previousSelection == null ? mithril_default(DialogHeaderBar, { left: () => [{
				label: "skip_action",
				click: () => this.onModeSelected(DEFAULT_CREDENTIAL_ENCRYPTION_MODE),
				type: ButtonType.Secondary
			}] }) : null, mithril_default(SelectCredentialsEncryptionModeView, {
				class: "scroll pt plr-l height-100p",
				error: this.error,
				onConfirm: (mode) => this.onModeSelected(mode),
				supportedModes: this.supportedModes,
				previousSelection: this.previousSelection ?? DEFAULT_CREDENTIAL_ENCRYPTION_MODE
			})]);
		} }).addShortcut({
			help: "close_alt",
			key: Keys.ESC,
			exec: () => this.dialog.close()
		});
		this.dialog.setCloseHandler(() => {
			this.finished.resolve();
			this.dialog.close();
		});
	}
	static async showAndWaitForSelection(credentialsProvider) {
		const supportedModes = await credentialsProvider.getSupportedEncryptionModes();
		const previousSelection = await credentialsProvider.getCredentialEncryptionMode();
		const credentialsDialog = new CredentialEncryptionMethodDialog(credentialsProvider, supportedModes, previousSelection);
		credentialsDialog.dialog.show();
		await credentialsDialog.finished.promise;
	}
	async onModeSelected(mode) {
		try {
			await this.credentialsProvider.setCredentialEncryptionMode(mode);
			this.dialog.close();
			this.finished.resolve();
		} catch (e) {
			if (e instanceof CredentialAuthenticationError) {
				this.error = e.message;
				mithril_default.redraw();
			} else if (e instanceof KeyPermanentlyInvalidatedError) {
				await this.credentialsProvider.clearCredentials(e);
				this.dialog.close();
				await Dialog.message("credentialsKeyInvalidated_msg");
				windowFacade.reload({});
			} else if (e instanceof CancelledError) {} else throw e;
		}
	}
};
var SelectCredentialsEncryptionModeView = class {
	currentMode;
	constructor({ attrs }) {
		this.currentMode = attrs.previousSelection;
	}
	view({ attrs }) {
		const options = this.getSupportedOptions(attrs);
		const { onConfirm } = attrs;
		return [mithril_default(".flex.col", { class: attrs.class }, [
			attrs.error ? mithril_default(".small.center.statusTextColor.pb-s", liveDataAttrs(), attrs.error) : null,
			mithril_default("", lang.get("credentialsEncryptionModeSelection_msg")),
			mithril_default(".mt", mithril_default(RadioSelector, {
				name: "credentialsEncryptionMode_label",
				options,
				selectedOption: this.currentMode,
				onOptionSelected: (mode) => {
					this.currentMode = mode;
					attrs.onModeSelected?.(mode);
				}
			}))
		]), onConfirm ? this.renderSelectButton(() => onConfirm(this.currentMode)) : null];
	}
	getSupportedOptions(attrs) {
		const generateOption = (name, value) => ({
			name,
			value
		});
		const options = [
			generateOption("credentialsEncryptionModeDeviceLock_label", CredentialEncryptionMode.DEVICE_LOCK),
			generateOption("credentialsEncryptionModeDeviceCredentials_label", CredentialEncryptionMode.SYSTEM_PASSWORD),
			generateOption("credentialsEncryptionModeBiometrics_label", CredentialEncryptionMode.BIOMETRICS),
			generateOption("credentialsEncryptionModeAppPassword_label", CredentialEncryptionMode.APP_PASSWORD)
		];
		return options.filter((option) => attrs.supportedModes.includes(option.value));
	}
	renderSelectButton(onclick) {
		return mithril_default(BaseButton, {
			label: "ok_action",
			text: lang.get("ok_action"),
			class: "uppercase accent-bg full-width center b content-fg flash",
			style: { height: "60px" },
			onclick
		});
	}
};

//#endregion
export { showCredentialsEncryptionModeDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,