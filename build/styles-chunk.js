import { assertMainOrNodeBoot, isAdminClient, isTest } from "./Env-chunk.js";
import { client } from "./ClientDetector-chunk.js";
import { assertNotNull, downcast, neverNull } from "./dist2-chunk.js";
import { hexToRgb, theme } from "./theme-chunk.js";
import { windowFacade } from "./WindowFacade-chunk.js";
import { size } from "./size-chunk.js";

//#region src/common/gui/animation/Easing.ts
assertMainOrNodeBoot();
const EasingType = {
	linear: 1,
	quad: 2,
	cubic: 3,
	quart: 4,
	quint: 5
};
const ease = {
	in: function(percent) {
		return Math.pow(percent, EasingType.cubic);
	},
	out: function(percent) {
		return 1 - ease.in(1 - percent);
	},
	inOut: function(percent) {
		return percent < .5 ? ease.in(percent * 2) / 2 : 1 - ease.in(percent * -2 + 2) / 2;
	},
	linear: function(percent) {
		return percent;
	}
};

//#endregion
//#region src/common/gui/animation/Animations.ts
assertMainOrNodeBoot();
let AlphaEnum = function(AlphaEnum$1) {
	AlphaEnum$1["BackgroundColor"] = "backgroundColor";
	AlphaEnum$1["Color"] = "color";
	return AlphaEnum$1;
}({});
let TransformEnum = function(TransformEnum$1) {
	/** shift the element in left-right direction. begin and end denote the target offset from the "natural" position */
	TransformEnum$1["TranslateX"] = "translateX";
	/** shift the element in top-bottom direction. begin and end denote the target offset from the "natural" position */
	TransformEnum$1["TranslateY"] = "translateY";
	TransformEnum$1["RotateY"] = "rotateY";
	TransformEnum$1["RotateZ"] = "rotateZ";
	/** scale the element both horizontally and vertically. begin and end denote the desired scale in 0-1 range. */
	TransformEnum$1["Scale"] = "scale";
	return TransformEnum$1;
}({});
const DefaultAnimationTime = 200;
const InitializedOptions = {
	stagger: 0,
	delay: 0,
	easing: ease.linear,
	duration: DefaultAnimationTime
};
var Animations = class Animations {
	activeAnimations;
	_animate;
	constructor() {
		this.activeAnimations = [];
		this._animate = () => {
			let finished = [];
			let now = window.performance.now();
			for (let animation of this.activeAnimations) {
				animation.animateFrame(now);
				if (animation.isFinished()) finished.push(animation);
			}
			for (let animation of finished) {
				this.activeAnimations.splice(this.activeAnimations.indexOf(animation), 1);
				if (animation.resolve) animation.resolve();
			}
			if (this.activeAnimations.length > 0) window.requestAnimationFrame(this._animate);
		};
	}
	/**
	* Adds an animation that should be executed immediately. Returns a promise that resolves after the animation is complete.
	*/
	add(targets, mutations, options) {
		const targetsArray = targets instanceof HTMLElement ? [targets] : Array.from(targets);
		let targetMutations;
		if (!(mutations instanceof Array)) targetMutations = [mutations];
else targetMutations = mutations;
		let verifiedOptions = Animations.verifiyOptions(options);
		const willChange = targetMutations.map((mutation) => mutation.willChange()).filter((willChange$1) => willChange$1.length).join(" ");
		for (const t of targetsArray) t.style.willChange = willChange;
		const animations$1 = [];
		const promise = new Promise((resolve) => {
			let start = this.activeAnimations.length ? false : true;
			for (let i = 0; i < targetsArray.length; i++) {
				let delay = verifiedOptions.delay;
				if (verifiedOptions.stagger) delay += verifiedOptions.stagger * i;
				const animation = new Animation(targetsArray[i], targetMutations, i === targetsArray.length - 1 ? resolve : null, delay, verifiedOptions.easing, verifiedOptions.duration);
				animations$1.push(animation);
				this.activeAnimations.push(animation);
			}
			if (start) window.requestAnimationFrame(this._animate);
		});
		const animationPromise = downcast(promise);
		animationPromise.animations = animations$1;
		return animationPromise;
	}
	cancel(animation) {
		this.activeAnimations.splice(this.activeAnimations.indexOf(animation), 1);
		if (animation.resolve) animation.resolve();
	}
	static verifiyOptions(options) {
		return Object.assign({}, InitializedOptions, options);
	}
};
var Animation = class {
	target;
	mutations;
	resolve;
	duration;
	delay;
	animationStart;
	runTime;
	easing;
	constructor(target, mutations, resolve, delay, easing, duration = DefaultAnimationTime) {
		this.target = target;
		this.mutations = mutations;
		this.resolve = resolve;
		this.delay = delay;
		this.duration = duration;
		this.animationStart = null;
		this.runTime = null;
		this.easing = easing;
	}
	animateFrame(now) {
		if (this.animationStart == null) this.animationStart = now;
		this.runTime = Math.min(now - this.animationStart - this.delay, this.duration);
		if (this.runTime >= 0) for (let m of this.mutations) m.updateDom(this.target, this.runTime / this.duration, this.easing);
	}
	isFinished() {
		return this.runTime != null && this.runTime >= this.duration;
	}
};
function transform(type, begin, end) {
	const values = {};
	values[type] = {
		begin,
		end
	};
	let updateDom = function(target, percent, easing) {
		target.style.transform = buildTransformString(values, percent, easing);
	};
	const willChange = () => "transform";
	let chain = function(type$1, begin$1, end$1) {
		values[type$1] = {
			begin: begin$1,
			end: end$1
		};
		return {
			updateDom,
			chain,
			willChange
		};
	};
	return {
		updateDom,
		chain,
		willChange
	};
}
const TransformUnits = {
	[TransformEnum.TranslateX]: "px",
	[TransformEnum.TranslateY]: "px",
	[TransformEnum.RotateY]: "deg",
	[TransformEnum.RotateZ]: "deg",
	[TransformEnum.Scale]: ""
};
function buildTransformString(values, percent, easing) {
	let transform$1 = [];
	let types = Object.keys(TransformUnits);
	for (let type of types) if (values[type]) {
		let value = calculateValue(percent, values[type].begin, values[type].end, easing);
		transform$1.push(type + "(" + value + TransformUnits[type] + ")");
	}
	return transform$1.join(" ");
}
function alpha(type, colorHex, begin, end) {
	let color = hexToRgb(colorHex);
	return {
		updateDom: function(target, percent, easing) {
			let alphaChannel = calculateValue(percent, begin, end, easing);
			if (type === AlphaEnum.BackgroundColor) target.style.backgroundColor = `rgba(${color.r}, ${color.g}, ${color.b}, ${alphaChannel})`;
else if (type === AlphaEnum.Color) target.style.color = `rgba(${color.r}, ${color.g}, ${color.b}, ${alphaChannel})`;
		},
		willChange: () => "alpha"
	};
}
function opacity(begin, end, keepValue) {
	let initialOpacity = null;
	return {
		updateDom: function(target, percent, easing) {
			if (percent === 0 && initialOpacity === null) initialOpacity = target.style.opacity;
			let opacity$1 = calculateValue(percent, begin, end, easing);
			if (percent === 1 && !keepValue) target.style.opacity = initialOpacity ? initialOpacity : "";
else target.style.opacity = opacity$1 + "";
		},
		willChange: () => "opacity"
	};
}
function height(begin, end) {
	return {
		updateDom: function(target, percent, easing) {
			target.style.height = calculateValue(percent, begin, end, easing) + "px";
		},
		willChange: () => "height"
	};
}
function width(begin, end) {
	return {
		updateDom: function(target, percent, easing) {
			target.style.width = calculateValue(percent, begin, end, easing) + "px";
		},
		willChange: () => "width"
	};
}
function calculateValue(percent, begin, end, easing) {
	return (end - begin) * easing(percent) + begin;
}
const animations = new Animations();

//#endregion
//#region src/common/misc/Log.ts
assertMainOrNodeBoot();
const Cat = {
	css: {
		name: "css",
		color: "orange"
	},
	mithril: {
		name: "mithril",
		color: "darkgreen"
	},
	error: {
		name: "error",
		color: "red"
	},
	info: {
		name: "info",
		color: "lightblue"
	},
	debug: {
		name: "debug",
		color: "#009688"
	}
};
const activeCategories = [];
function log(category, message, ...args) {
	if (activeCategories.indexOf(category) === -1) return;
	console.log("%c" + category.name, "color:" + category.color, message, ...args);
}
function timer(category) {
	if (activeCategories.indexOf(category) === -1) return function() {};
	let start = window.performance.now();
	return function() {
		return Math.round(window.performance.now() - start);
	};
}

//#endregion
//#region src/common/gui/styles.ts
assertMainOrNodeBoot();
var Styles = class {
	styles;
	initialized;
	bodyWidth;
	bodyHeight;
	styleSheets = new Map();
	constructor() {
		this.initialized = false;
		this.styles = new Map();
		this.bodyWidth = neverNull(document.body).offsetWidth;
		this.bodyHeight = neverNull(document.body).offsetHeight;
		windowFacade.addResizeListener((width$1, height$1) => {
			this.bodyWidth = width$1;
			this.bodyHeight = height$1;
		});
	}
	init(themeController) {
		if (this.initialized) return;
		this.initialized = true;
		this.updateDomStyles();
		themeController.observableThemeId.map(() => {
			this.updateDomStyles();
		});
	}
	getStyleSheetElement(id) {
		return assertNotNull(this.styleSheets.get(id)).cloneNode(true);
	}
	isDesktopLayout() {
		return this.bodyWidth >= size.desktop_layout_width;
	}
	isSingleColumnLayout() {
		return this.bodyWidth < size.two_column_layout_width;
	}
	isTwoColumnLayout() {
		return this.bodyWidth >= size.two_column_layout_width && this.bodyWidth < size.desktop_layout_width;
	}
	isUsingBottomNavigation() {
		return !isAdminClient() && (client.isMobileDevice() || !this.isDesktopLayout());
	}
	registerStyle(id, styleCreator) {
		if (!this.initialized && this.styles.has(id)) throw new Error("duplicate style definition: " + id);
		this.styles.set(id, styleCreator);
		if (this.initialized) {
			log(Cat.css, "update style", id, styleCreator(theme));
			this.updateDomStyle(id, styleCreator);
		}
	}
	updateStyle(id) {
		if (!this.initialized || !this.styles.has(id)) throw new Error("cannot update nonexistent style " + id);
		const creator = neverNull(this.styles.get(id));
		log(Cat.css, "update style", id, creator(theme));
		this.updateDomStyle(id, creator);
	}
	updateDomStyles() {
		if (isTest()) return;
		let time = timer(Cat.css);
		Array.from(this.styles.entries()).map((entry) => {
			this.updateDomStyle(entry[0], entry[1]);
		});
		log(Cat.css, "creation time", time());
	}
	updateDomStyle(id, styleCreator) {
		const styleSheet = this.getDomStyleSheet(`css-${id}`);
		styleSheet.textContent = toCss(styleCreator());
		this.styleSheets.set(id, styleSheet);
	}
	getDomStyleSheet(id) {
		let styleDomElement = document.getElementById(id);
		if (!styleDomElement) {
			styleDomElement = document.createElement("style");
			styleDomElement.setAttribute("type", "text/css");
			styleDomElement.id = id;
			styleDomElement = document.getElementsByTagName("head")[0].appendChild(styleDomElement);
		}
		return styleDomElement;
	}
};
function objectToCss(indent, key, o) {
	let cssString = `${indent}${key} { \n`;
	cssString += indent + toCss(o, indent + "  ");
	cssString += ` \n${indent}} \n`;
	return cssString;
}
function toCss(obj, indent = "") {
	let ret = Object.keys(obj).map((key) => {
		if (obj[key] instanceof Array) return obj[key].map((o) => {
			return objectToCss(indent, key, o);
		}).join("\n");
else if (obj[key] instanceof Object) return objectToCss(indent, key, obj[key]);
else return `${indent}${key}: ${obj[key]};`;
	}).join("\n");
	return ret;
}
const styles = new Styles();

//#endregion
export { AlphaEnum, DefaultAnimationTime, TransformEnum, alpha, animations, ease, height, opacity, styles, transform, width };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,