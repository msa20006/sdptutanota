import { assertMainOrNode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { theme } from "./theme-chunk.js";
import { Keys, TabIndex } from "./TutanotaConstants-chunk.js";
import { windowFacade } from "./WindowFacade-chunk.js";
import { ButtonType } from "./Button-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { Dialog, DialogType } from "./Dialog-chunk.js";
import { Icon, IconSize } from "./Icon-chunk.js";

//#region src/common/gui/base/WizardDialog.ts
assertMainOrNode();
let WizardEventType = function(WizardEventType$1) {
	WizardEventType$1["SHOW_NEXT_PAGE"] = "showNextWizardDialogPage";
	WizardEventType$1["SHOW_PREVIOUS_PAGE"] = "showPreviousWizardDialogPage";
	WizardEventType$1["CLOSE_DIALOG"] = "closeWizardDialog";
	return WizardEventType$1;
}({});
function emitWizardEvent(dom, eventType) {
	if (dom) {
		const event = new Event(eventType, {
			bubbles: true,
			cancelable: true
		});
		dom.dispatchEvent(event);
	}
}
var WizardDialog = class {
	_closeWizardDialogListener;
	_showNextWizardDialogPageListener;
	_showPreviousWizardDialogPageListener;
	wizardContentDom = null;
	oncreate(vnode) {
		const dom = vnode.dom;
		this._closeWizardDialogListener = (e) => {
			e.stopPropagation();
			vnode.attrs.closeAction();
		};
		this._showNextWizardDialogPageListener = (e) => {
			e.stopPropagation();
			if (vnode.attrs.currentPage) vnode.attrs.currentPage.attrs.nextAction(true).then((ready) => {
				if (ready) {
					vnode.attrs.goToNextPageOrCloseWizard();
					this.wizardContentDom?.scrollIntoView();
				}
			});
		};
		this._showPreviousWizardDialogPageListener = (e) => {
			e.stopPropagation();
			if (!vnode.attrs.currentPage?.attrs.preventGoBack) {
				vnode.attrs.goToPreviousPageOrClose();
				this.wizardContentDom?.scrollIntoView();
			}
		};
		dom.addEventListener(WizardEventType.CLOSE_DIALOG, this._closeWizardDialogListener);
		dom.addEventListener(WizardEventType.SHOW_NEXT_PAGE, this._showNextWizardDialogPageListener);
		dom.addEventListener(WizardEventType.SHOW_PREVIOUS_PAGE, this._showPreviousWizardDialogPageListener);
	}
	onremove(vnode) {
		const dom = vnode.dom;
		if (this._closeWizardDialogListener) dom.removeEventListener(WizardEventType.CLOSE_DIALOG, this._closeWizardDialogListener);
		if (this._showNextWizardDialogPageListener) dom.removeEventListener(WizardEventType.SHOW_NEXT_PAGE, this._showNextWizardDialogPageListener);
		if (this._showPreviousWizardDialogPageListener) dom.removeEventListener(WizardEventType.SHOW_PREVIOUS_PAGE, this._showPreviousWizardDialogPageListener);
	}
	view(vnode) {
		const a = vnode.attrs;
		const enabledPages = a._getEnabledPages();
		const selectedIndex = a.currentPage ? enabledPages.indexOf(a.currentPage) : -1;
		const visiblePages = enabledPages.filter((page) => !page.attrs.hidePagingButtonForPage);
		const lastIndex = visiblePages.length - 1;
		return mithril_default("#wizardDialogContent.pt", { oncreate: (vnode$1) => {
			this.wizardContentDom = vnode$1.dom;
		} }, [a.currentPage && a.currentPage.attrs.hideAllPagingButtons ? null : mithril_default("nav#wizard-paging.flex-space-around.center-vertically.mb-s.plr-2l", { "aria-label": "Breadcrumb" }, visiblePages.map((p, index) => [mithril_default(WizardPagingButton, {
			pageIndex: index,
			getSelectedPageIndex: () => selectedIndex,
			isClickable: () => a.allowedToVisitPage(index, selectedIndex),
			navigateBackHandler: (index$1) => a._goToPageAction(index$1)
		}), index === lastIndex ? null : mithril_default(".flex-grow", { class: this.getLineClass(index < selectedIndex) })])), a.currentPage ? a.currentPage.view() : null]);
	}
	getLineClass(isPreviousPage) {
		if (isPreviousPage) return "wizard-breadcrumb-line-active";
else return "wizard-breadcrumb-line";
	}
};
function wizardPageWrapper(component, attributes) {
	return {
		attrs: attributes,
		view: () => mithril_default(component, attributes)
	};
}
var WizardDialogAttrs = class {
	data;
	pages;
	currentPage;
	closeAction;
	cancelButtonText;
	_headerBarAttrs = {};
	get headerBarAttrs() {
		return this._headerBarAttrs;
	}
	constructor(data, pages, cancelButtonText = null, closeAction) {
		this.data = data;
		this.pages = pages;
		this.currentPage = pages.find((p) => p.attrs.isEnabled()) ?? null;
		this.closeAction = closeAction ? () => closeAction() : () => {
			return Promise.resolve();
		};
		this.cancelButtonText = cancelButtonText ?? "cancel_action";
		this.updateHeaderBarAttrs();
	}
	goToPreviousPageOrClose() {
		let currentPageIndex = this.currentPage ? this._getEnabledPages().indexOf(this.currentPage) : -1;
		if (!this.allowedToVisitPage(currentPageIndex - 1, currentPageIndex)) return;
		if (currentPageIndex > 0) {
			this._goToPageAction(currentPageIndex - 1);
			mithril_default.redraw();
		} else this.closeAction();
	}
	updateHeaderBarAttrs() {
		let currentPageIndex = this.currentPage ? this._getEnabledPages().indexOf(this.currentPage) : -1;
		const backButtonAttrs = {
			label: currentPageIndex === 0 ? this.cancelButtonText : "back_action",
			click: () => this.goToPreviousPageOrClose(),
			type: ButtonType.Secondary
		};
		const skipButtonAttrs = {
			label: "skip_action",
			click: () => this.goToNextPageOrCloseWizard(),
			type: ButtonType.Secondary
		};
		let source = {
			left: currentPageIndex >= 0 && this.allowedToVisitPage(currentPageIndex - 1, currentPageIndex) ? [backButtonAttrs] : [],
			right: () => this.currentPage && this.currentPage.attrs.isSkipAvailable() && this._getEnabledPages().indexOf(this.currentPage) !== this._getEnabledPages().length - 1 ? [skipButtonAttrs] : [],
			middle: this.currentPage ? this.currentPage.attrs.headerTitle() : "emptyString_msg"
		};
		Object.assign(this._headerBarAttrs, source);
	}
	_getEnabledPages() {
		return this.pages.filter((p) => p.attrs.isEnabled());
	}
	_goToPageAction(targetIndex) {
		const pages = this._getEnabledPages();
		this.currentPage = pages[targetIndex];
		this.updateHeaderBarAttrs();
	}
	goToNextPageOrCloseWizard() {
		const pages = this._getEnabledPages();
		const currentIndex = this.currentPage ? pages.indexOf(this.currentPage) : -1;
		const lastIndex = pages.length - 1;
		let finalAction = currentIndex === lastIndex;
		if (finalAction) this.closeAction();
else this._goToPageAction(currentIndex < lastIndex ? currentIndex + 1 : lastIndex);
	}
	/** returns whether it is allowed to visit the page specified by pageIndex depending on selectedPageIndex */
	allowedToVisitPage(pageIndex, selectedPageIndex) {
		if (pageIndex < 0 || selectedPageIndex < 0) return true;
		const enabledPages = this._getEnabledPages();
		return pageIndex < selectedPageIndex && !enabledPages.filter((page, index) => {
			return index > pageIndex && index <= selectedPageIndex;
		}).some((page) => page.attrs.preventGoBack);
	}
};
var WizardPagingButton = class {
	view(vnode) {
		const selectedPageIndex = vnode.attrs.getSelectedPageIndex();
		const pageIndex = vnode.attrs.pageIndex;
		const isClickable = vnode.attrs.isClickable();
		const nextIndex = (pageIndex + 1).toString();
		const isSelectedPage = selectedPageIndex === pageIndex;
		const isPreviousPage = pageIndex < selectedPageIndex;
		return mithril_default("button.button-icon.flex-center.items-center", {
			tabIndex: isClickable ? TabIndex.Default : TabIndex.Programmatic,
			"aria-disabled": isClickable.toString(),
			"aria-label": isClickable ? lang.get("previous_action") : nextIndex,
			"aria-current": isSelectedPage ? "step" : "false",
			"aria-live": isSelectedPage ? "polite" : "off",
			class: this.getClass(isSelectedPage, isPreviousPage),
			style: { cursor: isClickable ? "pointer" : "auto" },
			onclick: () => {
				if (isClickable) vnode.attrs.navigateBackHandler(pageIndex);
			}
		}, isPreviousPage ? mithril_default(Icon, {
			icon: Icons.Checkmark,
			size: IconSize.Medium,
			style: { fill: theme.content_bg }
		}) : nextIndex);
	}
	getClass(isSelectedPage, isPreviousPage) {
		if (isSelectedPage) return "wizard-breadcrumb-active";
else if (isPreviousPage) return "wizard-breadcrumb-previous";
else return "wizard-breadcrumb";
	}
};
function createWizardDialog(data, pages, closeAction = null, dialogType, cancelButtonText = null) {
	let view = () => null;
	const child = { view: () => view() };
	const unregisterCloseListener = windowFacade.addWindowCloseListener(() => {});
	const closeActionWrapper = async () => {
		if (closeAction) await closeAction();
		wizardDialog.close();
		unregisterCloseListener();
	};
	const wizardDialogAttrs = new WizardDialogAttrs(data, pages, cancelButtonText, closeActionWrapper);
	const wizardDialog = dialogType === DialogType.EditLarge ? Dialog.largeDialog(wizardDialogAttrs.headerBarAttrs, child) : Dialog.editSmallDialog(wizardDialogAttrs.headerBarAttrs, () => mithril_default(child));
	view = () => mithril_default(WizardDialog, wizardDialogAttrs);
	wizardDialog.addShortcut({
		key: Keys.ESC,
		exec: () => {
			confirmThenCleanup(() => wizardDialogAttrs.closeAction());
		},
		help: "close_alt"
	}).setCloseHandler(() => {
		confirmThenCleanup(() => wizardDialogAttrs.closeAction());
	});
	return {
		dialog: wizardDialog,
		attrs: wizardDialogAttrs
	};
}
async function confirmThenCleanup(closeAction) {
	const confirmed = await Dialog.confirm("closeWindowConfirmation_msg");
	if (confirmed) closeAction();
}

//#endregion
export { WizardEventType, createWizardDialog, emitWizardEvent, wizardPageWrapper };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,