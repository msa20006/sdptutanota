import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { assertMainOrNode } from "./Env-chunk.js";
import "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { styles } from "./styles-chunk.js";
import "./theme-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import { isKeyPressed } from "./KeyManager-chunk.js";
import "./WindowFacade-chunk.js";
import { displayOverlay } from "./RootView-chunk.js";
import { px, size } from "./size-chunk.js";
import { getSafeAreaInsetBottom } from "./HtmlUtils-chunk.js";
import "./Button-chunk.js";
import { Icons } from "./Icons-chunk.js";
import "./Icon-chunk.js";
import { IconButton } from "./IconButton-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { ToggleButton } from "./ToggleButton-chunk.js";

//#region src/common/gui/SearchInPageOverlay.ts
assertMainOrNode();
var SearchInPageOverlay = class {
	closeFunction;
	domInput;
	matchCase = false;
	numberOfMatches = 0;
	currentMatch = 0;
	skipNextBlur = false;
	constructor() {
		this.closeFunction = null;
	}
	open() {
		if (locator.logins.isUserLoggedIn()) {
			if (!this.closeFunction) this.closeFunction = displayOverlay(() => this.getRect(), this.getComponent(), "slide-bottom");
else {
				console.log("refocusing");
				this.domInput.focus();
				this.domInput.select();
			}
			mithril_default.redraw();
		}
	}
	close() {
		if (this.closeFunction) {
			this.closeFunction();
			locator.searchTextFacade.stopFindInPage();
			this.closeFunction = null;
		}
		mithril_default.redraw();
	}
	getRect() {
		const bottomNavHeight = size.bottom_nav_bar + getSafeAreaInsetBottom();
		return {
			height: px(size.navbar_height_mobile),
			bottom: px(styles.isUsingBottomNavigation() ? -bottomNavHeight : 0),
			right: px(0),
			left: px(0)
		};
	}
	inputField = () => {
		return mithril_default("input#search-overlay-input.dropdown-bar.elevated-bg.pl-l.button-height.inputWrapper", {
			placeholder: lang.get("searchPage_action"),
			oncreate: (vnode) => {
				this.domInput = vnode.dom;
				this.domInput.focus();
			},
			onblur: () => {
				if (this.skipNextBlur) {
					this.skipNextBlur = false;
					this.domInput.focus();
				} else locator.searchTextFacade.setSearchOverlayState(false, false);
			},
			onfocus: () => locator.searchTextFacade.setSearchOverlayState(true, false),
			oninput: () => this.find(true, true),
			style: {
				width: px(250),
				top: 0,
				height: px(size.button_height),
				left: 0
			}
		}, "");
	};
	find = async (forward, findNext) => {
		this.skipNextBlur = true;
		const r = await locator.searchTextFacade.findInPage(this.domInput.value, forward, this.matchCase, findNext);
		this.applyNextResult(r);
	};
	applyNextResult(result) {
		if (result == null) {
			this.numberOfMatches = 0;
			this.currentMatch = 0;
		} else {
			const { activeMatchOrdinal, matches } = result;
			if (matches === 1) {
				this.domInput.blur();
				this.domInput.focus();
			}
			this.numberOfMatches = matches - 1;
			this.currentMatch = activeMatchOrdinal - 1;
		}
		mithril_default.redraw();
	}
	getComponent() {
		const handleMouseUp = (event) => this.handleMouseUp(event);
		return { view: (_) => {
			return mithril_default(".flex.flex-space-between", {
				oncreate: () => window.addEventListener("mouseup", handleMouseUp),
				onremove: () => window.removeEventListener("mouseup", handleMouseUp)
			}, [mithril_default(".flex-start.center-vertically", { onkeydown: (e) => {
				if (isKeyPressed(e.key, Keys.ESC)) this.close();
				e.stopPropagation();
				return true;
			} }, [
				this.inputField(),
				mithril_default(IconButton, {
					title: "previous_action",
					icon: Icons.ArrowBackward,
					click: () => this.find(false, true)
				}),
				mithril_default(IconButton, {
					title: "next_action",
					icon: Icons.ArrowForward,
					click: () => this.find(true, true)
				}),
				mithril_default(ToggleButton, {
					title: "matchCase_alt",
					icon: Icons.MatchCase,
					toggled: this.matchCase,
					onToggled: () => {
						this.matchCase = !this.matchCase;
						this.find(true, false);
					}
				}),
				mithril_default("div.pl-m", this.numberOfMatches > 0 ? `${this.currentMatch}/${this.numberOfMatches}` : lang.get("searchNoResults_msg"))
			]), mithril_default(IconButton, {
				title: "close_alt",
				icon: Icons.Cancel,
				click: () => this.close()
			})]);
		} };
	}
	handleMouseUp(e) {
		if (!(e.target instanceof Element && e.target.id !== "search-overlay-input")) return;
		locator.searchTextFacade.setSearchOverlayState(false, true);
	}
};
const searchInPageOverlay = new SearchInPageOverlay();

//#endregion
export { searchInPageOverlay };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,