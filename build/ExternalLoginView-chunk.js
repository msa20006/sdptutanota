import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { assertMainOrNode } from "./Env-chunk.js";
import { client } from "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { assertNotNull, base64ToUint8Array, base64UrlToBase64, noOp } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import "./styles-chunk.js";
import "./theme-chunk.js";
import { KdfType, Keys, asKdfType } from "./TutanotaConstants-chunk.js";
import { keyManager } from "./KeyManager-chunk.js";
import "./WindowFacade-chunk.js";
import "./RootView-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./luxon-chunk.js";
import { GENERATED_MIN_ID } from "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import "./TypeRefs-chunk.js";
import "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import "./CalendarUtils-chunk.js";
import "./FormatValidator-chunk.js";
import "./stream-chunk.js";
import "./Logger-chunk.js";
import "./ErrorHandler-chunk.js";
import "./EntityFunctions-chunk.js";
import "./TypeModels3-chunk.js";
import "./ModelInfo-chunk.js";
import "./ErrorUtils-chunk.js";
import { AccessExpiredError } from "./RestError-chunk.js";
import "./SetupMultipleError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./EventQueue-chunk.js";
import "./EntityRestClient-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import "./MessageDispatcher-chunk.js";
import "./WorkerProxy-chunk.js";
import "./EntityUpdateUtils-chunk.js";
import "./dist3-chunk.js";
import "./KeyLoaderFacade-chunk.js";
import { SessionType } from "./SessionType-chunk.js";
import "./Services-chunk.js";
import "./EntityClient-chunk.js";
import "./PageContextLoginListener-chunk.js";
import "./CredentialType-chunk.js";
import "./CryptoWrapper-chunk.js";
import { ResumeSessionErrorReason } from "./LoginFacade-chunk.js";
import "./GroupUtils-chunk.js";
import "./Button-chunk.js";
import "./Icons-chunk.js";
import "./DialogHeaderBar-chunk.js";
import "./CountryList-chunk.js";
import { Autocomplete } from "./Dialog-chunk.js";
import { progressIcon } from "./Icon-chunk.js";
import "./AriaUtils-chunk.js";
import "./IconButton-chunk.js";
import "./Formatter-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import "./UserError-chunk.js";
import "./MailAddressParser-chunk.js";
import "./BlobUtils-chunk.js";
import "./FileUtils-chunk.js";
import { showProgressDialog } from "./ProgressDialog-chunk.js";
import "./SharedMailUtils-chunk.js";
import "./PasswordUtils-chunk.js";
import "./Recipient-chunk.js";
import "./SubscriptionDialogs-chunk.js";
import "./ExternalLink-chunk.js";
import "./ToggleButton-chunk.js";
import "./SnackBar-chunk.js";
import { credentialsToUnencrypted } from "./Credentials-chunk.js";
import "./NotificationOverlay-chunk.js";
import { Checkbox } from "./Checkbox-chunk.js";
import "./Expander-chunk.js";
import "./ClipboardUtils-chunk.js";
import "./Services4-chunk.js";
import "./BubbleButton-chunk.js";
import "./ErrorReporter-chunk.js";
import { PasswordField } from "./PasswordField-chunk.js";
import "./PasswordRequestDialog-chunk.js";
import "./ErrorHandlerImpl-chunk.js";
import { BaseTopLevelView, LoginScreenHeader } from "./LoginScreenHeader-chunk.js";
import { LoginButton } from "./LoginButton-chunk.js";
import { getLoginErrorMessage, handleExpectedLoginError, renderInfoLinks } from "./LoginUtils-chunk.js";
import { MessageBox } from "./MessageBox-chunk.js";

//#region src/mail-app/mail/view/ExternalLoginView.ts
assertMainOrNode();
var ExternalLoginViewModel = class {
	password = "";
	doSavePassword = false;
	helpText = "emptyString_msg";
	errorMessageId = null;
	autologinInProgress = false;
	showAutoLoginButton = false;
	_urlData = null;
	get urlData() {
		return assertNotNull(this._urlData);
	}
	constructor(credentialsProvider) {
		this.credentialsProvider = credentialsProvider;
	}
	formLogin() {
		if (this.password === "") this.helpText = "loginFailed_msg";
else {
			this.helpText = "login_msg";
			this.handleLoginPromise(showProgressDialog("login_msg", this.doFormLogin()), noOp);
		}
	}
	async doFormLogin() {
		const password = this.password;
		const clientIdentifier = client.browser + " " + client.device;
		const persistentSession = this.doSavePassword;
		const sessionType = persistentSession ? SessionType.Persistent : SessionType.Login;
		const { userId, salt, kdfType } = this.urlData;
		const newCredentials = await locator.logins.createExternalSession(userId, password, salt, kdfType, clientIdentifier, sessionType);
		this.password = "";
		const storedCredentials = await this.credentialsProvider.getDecryptedCredentialsByUserId(userId);
		if (persistentSession) await this.credentialsProvider.store(credentialsToUnencrypted(newCredentials, null));
		if (storedCredentials) {
			await locator.logins.deleteOldSession(storedCredentials);
			if (!persistentSession) await this.credentialsProvider.deleteByUserId(userId);
		}
	}
	async autologin(credentials) {
		this.autologinInProgress = true;
		await showProgressDialog("login_msg", this.handleLoginPromise(this.resumeSession(credentials), () => {
			this.autologinInProgress = false;
			mithril_default.redraw();
		}));
	}
	async resumeSession(credentials) {
		const result = await locator.logins.resumeSession(credentials, {
			salt: this.urlData.salt,
			kdfType: this.urlData.kdfType
		}, null);
		if (result.type === "error") switch (result.reason) {
			case ResumeSessionErrorReason.OfflineNotAvailableForFree: throw new Error("Cannot happen");
		}
	}
	async loginWithStoredCredentials() {
		try {
			const credentials = await this.credentialsProvider.getDecryptedCredentialsByUserId(this.urlData.userId);
			if (credentials) await this.autologin(credentials);
		} finally {
			this.showAutoLoginButton = false;
			mithril_default.redraw();
		}
	}
	async handleLoginPromise(loginPromise, errorAction) {
		try {
			await loginPromise;
			mithril_default.route.set(`/mail${location.hash}`);
			this.helpText = "emptyString_msg";
		} catch (e) {
			const messageId = getLoginErrorMessage(e, true);
			if (e instanceof AccessExpiredError) this.errorMessageId = messageId;
else this.helpText = messageId;
			mithril_default.redraw();
			handleExpectedLoginError(e, errorAction);
		}
	}
	async updateUrl(args) {
		try {
			const encodedExternalLoginData = decodeURIComponent(location.hash).substring(6);
			const userIdOffset = 0;
			const saltOffset = userIdOffset + GENERATED_MIN_ID.length;
			const encodedSaltLength = 22;
			const kdfOffset = saltOffset + encodedSaltLength;
			let kdfType = KdfType.Bcrypt;
			if (encodedExternalLoginData.length > kdfOffset) kdfType = asKdfType(encodedExternalLoginData.substring(kdfOffset, kdfOffset + 1));
			this._urlData = {
				userId: encodedExternalLoginData.substring(userIdOffset, saltOffset),
				salt: base64ToUint8Array(base64UrlToBase64(encodedExternalLoginData.substring(saltOffset, kdfOffset))),
				kdfType
			};
			const credentials = await this.credentialsProvider.getDecryptedCredentialsByUserId(this.urlData.userId);
			if (credentials && args.noAutoLogin !== true) await this.autologin(credentials);
else {
				this.showAutoLoginButton = credentials != null;
				mithril_default.redraw();
			}
		} catch (e) {
			this.errorMessageId = "invalidLink_msg";
			mithril_default.redraw();
		}
	}
	dispose() {
		this.password = "";
	}
};
var ExternalLoginView = class extends BaseTopLevelView {
	viewModel;
	shortcuts = [{
		key: Keys.RETURN,
		exec: () => {
			this.viewModel.formLogin();
		},
		help: "login_label"
	}];
	constructor(vnode) {
		super();
		this.viewModel = vnode.attrs.viewModelFactory();
	}
	oncreate() {
		keyManager.registerShortcuts(this.shortcuts);
	}
	onremove() {
		this.viewModel.password = "";
		this.viewModel.dispose();
		keyManager.unregisterShortcuts(this.shortcuts);
	}
	view({ attrs }) {
		return mithril_default(".main-view.flex.col.nav-bg", [mithril_default(LoginScreenHeader), mithril_default(".flex-grow.flex.col.items-center.scroll", mithril_default(".flex-grow-shrink-auto.flex.col.max-width-m.pt.pb.plr-l", this.renderContent()))]);
	}
	renderContent() {
		if (this.viewModel.autologinInProgress) return mithril_default("p.center", progressIcon());
else if (this.viewModel.errorMessageId) return mithril_default("p.center", mithril_default(MessageBox, {}, lang.getTranslationText(this.viewModel.errorMessageId)));
else return [
			mithril_default(".flex.col.content-bg.border-radius-big.plr-2l.mt", [this.viewModel.showAutoLoginButton ? this.renderAutoLoginButton() : this.renderForm(), mithril_default("p.center.statusTextColor.mt-xs.mb-s", mithril_default("small", lang.getTranslationText(this.viewModel.helpText), []))]),
			mithril_default(".flex-grow"),
			renderInfoLinks()
		];
	}
	renderAutoLoginButton() {
		return mithril_default(".pt-l", mithril_default(LoginButton, {
			label: "showMail_action",
			onclick: () => this.viewModel.loginWithStoredCredentials()
		}));
	}
	renderForm() {
		return [
			mithril_default(PasswordField, {
				helpLabel: () => lang.get("enterPresharedPassword_msg"),
				value: this.viewModel.password,
				autocompleteAs: Autocomplete.currentPassword,
				oninput: (input) => this.viewModel.password = input
			}),
			mithril_default(Checkbox, {
				label: () => lang.get("storePassword_action"),
				helpLabel: "onlyPrivateComputer_msg",
				checked: this.viewModel.doSavePassword,
				onChecked: (checked) => this.viewModel.doSavePassword = checked
			}),
			mithril_default(".pt", mithril_default(LoginButton, {
				label: "showMail_action",
				onclick: () => this.viewModel.formLogin()
			}))
		];
	}
	onNewUrl(args) {
		this.viewModel.updateUrl(args);
	}
};

//#endregion
export { ExternalLoginView, ExternalLoginViewModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,