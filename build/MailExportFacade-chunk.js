import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { assertWorkerOrNode } from "./Env-chunk.js";
import { assertNotNull, isNotNull } from "./dist2-chunk.js";
import { ArchiveDataType } from "./TutanotaConstants-chunk.js";
import { elementIdPart } from "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import "./TypeModels2-chunk.js";
import "./EntityFunctions-chunk.js";
import "./TypeModels3-chunk.js";
import "./ModelInfo-chunk.js";
import { NotFoundError } from "./RestError-chunk.js";
import "./SuspensionError-chunk.js";
import { SuspensionBehavior } from "./RestClient-chunk.js";
import { convertToDataFile, createReferencingInstance } from "./BlobUtils-chunk.js";

//#region src/common/api/worker/facades/lazy/MailExportFacade.ts
assertWorkerOrNode();
const MAIL_EXPORT_TOKEN_HEADER = "mailExportToken";
var MailExportFacade = class {
	constructor(mailExportTokenFacade, bulkMailLoader, blobFacade, cryptoFacade, blobAccessTokenFacade) {
		this.mailExportTokenFacade = mailExportTokenFacade;
		this.bulkMailLoader = bulkMailLoader;
		this.blobFacade = blobFacade;
		this.cryptoFacade = cryptoFacade;
		this.blobAccessTokenFacade = blobAccessTokenFacade;
	}
	/**
	* Returns a list of servers that can be used to request data from.
	*/
	async getExportServers(group) {
		const blobServerAccessInfo = await this.blobAccessTokenFacade.requestWriteToken(ArchiveDataType.Attachments, group._id);
		return blobServerAccessInfo.servers;
	}
	async loadFixedNumberOfMailsWithCache(mailListId, startId, baseUrl) {
		return this.mailExportTokenFacade.loadWithToken((token) => this.bulkMailLoader.loadFixedNumberOfMailsWithCache(mailListId, startId, {
			baseUrl,
			...this.options(token)
		}));
	}
	async loadMailDetails(mails) {
		return this.mailExportTokenFacade.loadWithToken((token) => this.bulkMailLoader.loadMailDetails(mails, this.options(token)));
	}
	async loadAttachments(mails, baseUrl) {
		return this.mailExportTokenFacade.loadWithToken((token) => this.bulkMailLoader.loadAttachments(mails, {
			baseUrl,
			...this.options(token)
		}));
	}
	async loadAttachmentData(mail, attachments) {
		const attachmentsWithKeys = await this.cryptoFacade.enforceSessionKeyUpdateIfNeeded(mail, attachments);
		const downloads = await this.mailExportTokenFacade.loadWithToken((token) => {
			const referencingInstances = attachmentsWithKeys.map(createReferencingInstance);
			return this.blobFacade.downloadAndDecryptBlobsOfMultipleInstances(ArchiveDataType.Attachments, referencingInstances, { ...this.options(token) });
		});
		const attachmentData = Array.from(downloads.entries()).map(([fileId, bytes]) => {
			try {
				if (bytes == null) return null;
else {
					const attachment = assertNotNull(attachmentsWithKeys.find((attachment$1) => elementIdPart(attachment$1._id) === fileId));
					return convertToDataFile(attachment, bytes);
				}
			} catch (e) {
				if (e instanceof NotFoundError) return null;
else throw e;
			}
		});
		return attachmentData.filter(isNotNull);
	}
	options(token) {
		return {
			extraHeaders: { [MAIL_EXPORT_TOKEN_HEADER]: token },
			suspensionBehavior: SuspensionBehavior.Throw
		};
	}
};

//#endregion
export { MailExportFacade };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,