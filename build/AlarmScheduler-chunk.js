import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import { downcast } from "./dist2-chunk.js";
import { EndType } from "./TutanotaConstants-chunk.js";
import "./luxon-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import "./TypeRefs-chunk.js";
import "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import { calculateAlarmTime, findNextAlarmOccurrence, getEventStartByTimes, getValidTimeZone, parseAlarmInterval } from "./CalendarUtils-chunk.js";

//#region src/common/calendar/date/AlarmScheduler.ts
var AlarmScheduler = class {
	_scheduledNotifications;
	_scheduler;
	_dateProvider;
	constructor(dateProvider, scheduler) {
		this._dateProvider = dateProvider;
		this._scheduledNotifications = new Map();
		this._scheduler = scheduler;
	}
	scheduleAlarm(event, alarmInfo, repeatRule, notificationSender) {
		const localZone = this._dateProvider.timeZone();
		if (repeatRule) {
			let repeatTimeZone = getValidTimeZone(repeatRule.timeZone, localZone);
			let calculationLocalZone = getValidTimeZone(localZone);
			const nextOccurrence = findNextAlarmOccurrence(new Date(this._dateProvider.now()), repeatTimeZone, event.startTime, event.endTime, downcast(repeatRule.frequency), Number(repeatRule.interval), downcast(repeatRule.endType) || EndType.Never, Number(repeatRule.endValue), repeatRule.excludedDates.map(({ date }) => date), parseAlarmInterval(alarmInfo.trigger), calculationLocalZone);
			if (nextOccurrence) this._scheduleAction(alarmInfo.alarmIdentifier, nextOccurrence.alarmTime, () => {
				notificationSender(nextOccurrence.eventTime, event.summary);
				this.scheduleAlarm(event, alarmInfo, repeatRule, notificationSender);
			});
		} else {
			const eventStart = getEventStartByTimes(event.startTime, event.endTime, localZone);
			if (eventStart.getTime() > this._dateProvider.now()) this._scheduleAction(alarmInfo.alarmIdentifier, calculateAlarmTime(eventStart, parseAlarmInterval(alarmInfo.trigger)), () => notificationSender(eventStart, event.summary));
		}
	}
	cancelAlarm(alarmIdentifier) {
		this._cancelOccurrence(alarmIdentifier);
	}
	_cancelOccurrence(alarmIdentifier) {
		const timeoutId = this._scheduledNotifications.get(alarmIdentifier);
		if (timeoutId != null) this._scheduler.unscheduleTimeout(timeoutId);
	}
	_scheduleAction(identifier, atTime, action) {
		const scheduledId = this._scheduler.scheduleAt(action, atTime);
		this._scheduledNotifications.set(identifier, scheduledId);
	}
};

//#endregion
export { AlarmScheduler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWxhcm1TY2hlZHVsZXItY2h1bmsuanMiLCJuYW1lcyI6WyJkYXRlUHJvdmlkZXI6IERhdGVQcm92aWRlciIsInNjaGVkdWxlcjogU2NoZWR1bGVyIiwiZXZlbnQ6IEV2ZW50SW5mbyIsImFsYXJtSW5mbzogQWxhcm1JbmZvIiwicmVwZWF0UnVsZTogUmVwZWF0UnVsZSB8IG51bGwiLCJub3RpZmljYXRpb25TZW5kZXI6IE5vdGlmaWNhdGlvblNlbmRlciIsImFsYXJtSWRlbnRpZmllcjogc3RyaW5nIiwiaWRlbnRpZmllcjogc3RyaW5nIiwiYXRUaW1lOiBEYXRlIiwiYWN0aW9uOiBUaHVuayJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vY2FsZW5kYXIvZGF0ZS9BbGFybVNjaGVkdWxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFRodW5rIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5pbXBvcnQgeyBkb3duY2FzdCB9IGZyb20gXCJAdHV0YW8vdHV0YW5vdGEtdXRpbHNcIlxuaW1wb3J0IHsgRW5kVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vYXBpL2NvbW1vbi9UdXRhbm90YUNvbnN0YW50cy5qc1wiXG5pbXBvcnQgdHlwZSB7IEFsYXJtSW5mbywgUmVwZWF0UnVsZSB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vYXBpL2VudGl0aWVzL3N5cy9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgdHlwZSB7IFNjaGVkdWxlZFRpbWVvdXRJZCwgU2NoZWR1bGVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9hcGkvY29tbW9uL3V0aWxzL1NjaGVkdWxlci5qc1wiXG5pbXBvcnQgeyBjYWxjdWxhdGVBbGFybVRpbWUsIGZpbmROZXh0QWxhcm1PY2N1cnJlbmNlLCBnZXRFdmVudFN0YXJ0QnlUaW1lcywgZ2V0VmFsaWRUaW1lWm9uZSwgcGFyc2VBbGFybUludGVydmFsIH0gZnJvbSBcIi4vQ2FsZW5kYXJVdGlscy5qc1wiXG5pbXBvcnQgeyBEYXRlUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2FwaS9jb21tb24vRGF0ZVByb3ZpZGVyLmpzXCJcblxudHlwZSBOb3RpZmljYXRpb25TZW5kZXIgPSAoZXZlbnRUaW1lOiBEYXRlLCBzdW1tYXJ5OiBzdHJpbmcpID0+IHZvaWRcbnR5cGUgRXZlbnRJbmZvID0ge1xuXHRzdGFydFRpbWU6IERhdGVcblx0ZW5kVGltZTogRGF0ZVxuXHRzdW1tYXJ5OiBzdHJpbmdcbn1cblxuLyoqXG4gKiBrbm93cyBob3cgdG8gdHJhbnNsYXRlIGEgZ2l2ZW4gY2FsZW5kYXIgZXZlbnQgd2l0aCBhbGFybXMgaW50byBhblxuICogYWN0dWFsIGZ1bmN0aW9uIGNhbGwgdGhhdCBpcyBleGVjdXRlZCBzb21lIHRpbWUgbGF0ZXIgKGFuZCBtYXliZSBkaXNwbGF5cyBhIG5vdGlmaWNhdGlvbikuXG4gKlxuICogc2hvdWxkIHN0YXkgaW5kZXBlbmRlbnQgb2YgdGhlIHdheSB0aGUgYWN0dWFsIG5vdGlmaWNhdGlvbiBpcyBzZW50ICsgcmVuZGVyZWRcbiAqL1xuZXhwb3J0IGNsYXNzIEFsYXJtU2NoZWR1bGVyIHtcblx0cmVhZG9ubHkgX3NjaGVkdWxlZE5vdGlmaWNhdGlvbnM6IE1hcDxzdHJpbmcsIFNjaGVkdWxlZFRpbWVvdXRJZD5cblx0cmVhZG9ubHkgX3NjaGVkdWxlcjogU2NoZWR1bGVyXG5cdHJlYWRvbmx5IF9kYXRlUHJvdmlkZXI6IERhdGVQcm92aWRlclxuXG5cdGNvbnN0cnVjdG9yKGRhdGVQcm92aWRlcjogRGF0ZVByb3ZpZGVyLCBzY2hlZHVsZXI6IFNjaGVkdWxlcikge1xuXHRcdHRoaXMuX2RhdGVQcm92aWRlciA9IGRhdGVQcm92aWRlclxuXHRcdHRoaXMuX3NjaGVkdWxlZE5vdGlmaWNhdGlvbnMgPSBuZXcgTWFwKClcblx0XHR0aGlzLl9zY2hlZHVsZXIgPSBzY2hlZHVsZXJcblx0fVxuXG5cdHNjaGVkdWxlQWxhcm0oZXZlbnQ6IEV2ZW50SW5mbywgYWxhcm1JbmZvOiBBbGFybUluZm8sIHJlcGVhdFJ1bGU6IFJlcGVhdFJ1bGUgfCBudWxsLCBub3RpZmljYXRpb25TZW5kZXI6IE5vdGlmaWNhdGlvblNlbmRlcik6IHZvaWQge1xuXHRcdGNvbnN0IGxvY2FsWm9uZSA9IHRoaXMuX2RhdGVQcm92aWRlci50aW1lWm9uZSgpXG5cblx0XHRpZiAocmVwZWF0UnVsZSkge1xuXHRcdFx0bGV0IHJlcGVhdFRpbWVab25lID0gZ2V0VmFsaWRUaW1lWm9uZShyZXBlYXRSdWxlLnRpbWVab25lLCBsb2NhbFpvbmUpXG5cdFx0XHRsZXQgY2FsY3VsYXRpb25Mb2NhbFpvbmUgPSBnZXRWYWxpZFRpbWVab25lKGxvY2FsWm9uZSlcblx0XHRcdGNvbnN0IG5leHRPY2N1cnJlbmNlID0gZmluZE5leHRBbGFybU9jY3VycmVuY2UoXG5cdFx0XHRcdG5ldyBEYXRlKHRoaXMuX2RhdGVQcm92aWRlci5ub3coKSksXG5cdFx0XHRcdHJlcGVhdFRpbWVab25lLFxuXHRcdFx0XHRldmVudC5zdGFydFRpbWUsXG5cdFx0XHRcdGV2ZW50LmVuZFRpbWUsXG5cdFx0XHRcdGRvd25jYXN0KHJlcGVhdFJ1bGUuZnJlcXVlbmN5KSxcblx0XHRcdFx0TnVtYmVyKHJlcGVhdFJ1bGUuaW50ZXJ2YWwpLFxuXHRcdFx0XHRkb3duY2FzdChyZXBlYXRSdWxlLmVuZFR5cGUpIHx8IEVuZFR5cGUuTmV2ZXIsXG5cdFx0XHRcdE51bWJlcihyZXBlYXRSdWxlLmVuZFZhbHVlKSxcblx0XHRcdFx0cmVwZWF0UnVsZS5leGNsdWRlZERhdGVzLm1hcCgoeyBkYXRlIH0pID0+IGRhdGUpLFxuXHRcdFx0XHRwYXJzZUFsYXJtSW50ZXJ2YWwoYWxhcm1JbmZvLnRyaWdnZXIpLFxuXHRcdFx0XHRjYWxjdWxhdGlvbkxvY2FsWm9uZSxcblx0XHRcdClcblxuXHRcdFx0aWYgKG5leHRPY2N1cnJlbmNlKSB7XG5cdFx0XHRcdHRoaXMuX3NjaGVkdWxlQWN0aW9uKGFsYXJtSW5mby5hbGFybUlkZW50aWZpZXIsIG5leHRPY2N1cnJlbmNlLmFsYXJtVGltZSwgKCkgPT4ge1xuXHRcdFx0XHRcdG5vdGlmaWNhdGlvblNlbmRlcihuZXh0T2NjdXJyZW5jZS5ldmVudFRpbWUsIGV2ZW50LnN1bW1hcnkpXG5cblx0XHRcdFx0XHQvLyBTY2hlZHVsZSBuZXh0IG9jY3VycmVuY2Vcblx0XHRcdFx0XHR0aGlzLnNjaGVkdWxlQWxhcm0oZXZlbnQsIGFsYXJtSW5mbywgcmVwZWF0UnVsZSwgbm90aWZpY2F0aW9uU2VuZGVyKVxuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBldmVudFN0YXJ0ID0gZ2V0RXZlbnRTdGFydEJ5VGltZXMoZXZlbnQuc3RhcnRUaW1lLCBldmVudC5lbmRUaW1lLCBsb2NhbFpvbmUpXG5cblx0XHRcdGlmIChldmVudFN0YXJ0LmdldFRpbWUoKSA+IHRoaXMuX2RhdGVQcm92aWRlci5ub3coKSkge1xuXHRcdFx0XHR0aGlzLl9zY2hlZHVsZUFjdGlvbihhbGFybUluZm8uYWxhcm1JZGVudGlmaWVyLCBjYWxjdWxhdGVBbGFybVRpbWUoZXZlbnRTdGFydCwgcGFyc2VBbGFybUludGVydmFsKGFsYXJtSW5mby50cmlnZ2VyKSksICgpID0+XG5cdFx0XHRcdFx0bm90aWZpY2F0aW9uU2VuZGVyKGV2ZW50U3RhcnQsIGV2ZW50LnN1bW1hcnkpLFxuXHRcdFx0XHQpXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Y2FuY2VsQWxhcm0oYWxhcm1JZGVudGlmaWVyOiBzdHJpbmcpIHtcblx0XHQvLyB0cnkgdG8gY2FuY2VsIHNpbmdsZSBmaXJzdFxuXHRcdHRoaXMuX2NhbmNlbE9jY3VycmVuY2UoYWxhcm1JZGVudGlmaWVyKVxuXHR9XG5cblx0X2NhbmNlbE9jY3VycmVuY2UoYWxhcm1JZGVudGlmaWVyOiBzdHJpbmcpIHtcblx0XHRjb25zdCB0aW1lb3V0SWQgPSB0aGlzLl9zY2hlZHVsZWROb3RpZmljYXRpb25zLmdldChhbGFybUlkZW50aWZpZXIpXG5cblx0XHRpZiAodGltZW91dElkICE9IG51bGwpIHtcblx0XHRcdHRoaXMuX3NjaGVkdWxlci51bnNjaGVkdWxlVGltZW91dCh0aW1lb3V0SWQpXG5cdFx0fVxuXHR9XG5cblx0X3NjaGVkdWxlQWN0aW9uKGlkZW50aWZpZXI6IHN0cmluZywgYXRUaW1lOiBEYXRlLCBhY3Rpb246IFRodW5rKSB7XG5cdFx0Y29uc3Qgc2NoZWR1bGVkSWQgPSB0aGlzLl9zY2hlZHVsZXIuc2NoZWR1bGVBdChhY3Rpb24sIGF0VGltZSlcblxuXHRcdHRoaXMuX3NjaGVkdWxlZE5vdGlmaWNhdGlvbnMuc2V0KGlkZW50aWZpZXIsIHNjaGVkdWxlZElkKVxuXHR9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7SUFxQmEsaUJBQU4sTUFBcUI7Q0FDM0IsQUFBUztDQUNULEFBQVM7Q0FDVCxBQUFTO0NBRVQsWUFBWUEsY0FBNEJDLFdBQXNCO0FBQzdELE9BQUssZ0JBQWdCO0FBQ3JCLE9BQUssMEJBQTBCLElBQUk7QUFDbkMsT0FBSyxhQUFhO0NBQ2xCO0NBRUQsY0FBY0MsT0FBa0JDLFdBQXNCQyxZQUErQkMsb0JBQThDO0VBQ2xJLE1BQU0sWUFBWSxLQUFLLGNBQWMsVUFBVTtBQUUvQyxNQUFJLFlBQVk7R0FDZixJQUFJLGlCQUFpQixpQkFBaUIsV0FBVyxVQUFVLFVBQVU7R0FDckUsSUFBSSx1QkFBdUIsaUJBQWlCLFVBQVU7R0FDdEQsTUFBTSxpQkFBaUIsd0JBQ3RCLElBQUksS0FBSyxLQUFLLGNBQWMsS0FBSyxHQUNqQyxnQkFDQSxNQUFNLFdBQ04sTUFBTSxTQUNOLFNBQVMsV0FBVyxVQUFVLEVBQzlCLE9BQU8sV0FBVyxTQUFTLEVBQzNCLFNBQVMsV0FBVyxRQUFRLElBQUksUUFBUSxPQUN4QyxPQUFPLFdBQVcsU0FBUyxFQUMzQixXQUFXLGNBQWMsSUFBSSxDQUFDLEVBQUUsTUFBTSxLQUFLLEtBQUssRUFDaEQsbUJBQW1CLFVBQVUsUUFBUSxFQUNyQyxxQkFDQTtBQUVELE9BQUksZUFDSCxNQUFLLGdCQUFnQixVQUFVLGlCQUFpQixlQUFlLFdBQVcsTUFBTTtBQUMvRSx1QkFBbUIsZUFBZSxXQUFXLE1BQU0sUUFBUTtBQUczRCxTQUFLLGNBQWMsT0FBTyxXQUFXLFlBQVksbUJBQW1CO0dBQ3BFLEVBQUM7RUFFSCxPQUFNO0dBQ04sTUFBTSxhQUFhLHFCQUFxQixNQUFNLFdBQVcsTUFBTSxTQUFTLFVBQVU7QUFFbEYsT0FBSSxXQUFXLFNBQVMsR0FBRyxLQUFLLGNBQWMsS0FBSyxDQUNsRCxNQUFLLGdCQUFnQixVQUFVLGlCQUFpQixtQkFBbUIsWUFBWSxtQkFBbUIsVUFBVSxRQUFRLENBQUMsRUFBRSxNQUN0SCxtQkFBbUIsWUFBWSxNQUFNLFFBQVEsQ0FDN0M7RUFFRjtDQUNEO0NBRUQsWUFBWUMsaUJBQXlCO0FBRXBDLE9BQUssa0JBQWtCLGdCQUFnQjtDQUN2QztDQUVELGtCQUFrQkEsaUJBQXlCO0VBQzFDLE1BQU0sWUFBWSxLQUFLLHdCQUF3QixJQUFJLGdCQUFnQjtBQUVuRSxNQUFJLGFBQWEsS0FDaEIsTUFBSyxXQUFXLGtCQUFrQixVQUFVO0NBRTdDO0NBRUQsZ0JBQWdCQyxZQUFvQkMsUUFBY0MsUUFBZTtFQUNoRSxNQUFNLGNBQWMsS0FBSyxXQUFXLFdBQVcsUUFBUSxPQUFPO0FBRTlELE9BQUssd0JBQXdCLElBQUksWUFBWSxZQUFZO0NBQ3pEO0FBQ0QifQ==