import { assertMainOrNode } from "./Env-chunk.js";
import { getEnabledMailAddressesWithUser, getMailboxName } from "./SharedMailUtils-chunk.js";

//#region src/common/misc/passwords/PasswordUtils.ts
assertMainOrNode();
const PASSWORD_MAX_VALUE = 80;
const PASSWORD_MIN_VALUE = 0;
const PASSWORD_MIN_SECURE_VALUE = 64;
const _BAD_SEQUENCES = [
	"^1234567890ß´",
	"°!\"§$%&/()=?`",
	"qwertzuiopü+",
	"asdfghjklöä#",
	"<yxcvbnm,.-",
	"`1234567890-=",
	"~!@#$%^&*()_+",
	"qwertyuiop[]",
	"asdfghjkl'\\",
	"\\zxcvbnm,./",
	"abcdefghijklmnopqrstuvwxyz"
];
const _BAD_STRINGS = [
	"passwort",
	"password",
	"tutanota",
	"free",
	"test",
	"keemail",
	"tutamail"
];
function getPasswordStrength(password, badStrings) {
	if (password.length === 0) return 0;
	let nbrOfLowerChars = _getNbrOfOccurrences(password, /[a-z ]/g);
	let nbrOfConsecutiveLowerChars = Math.max(0, _getLongestResult(password, /[a-z ]*/g) - 2);
	let nbrOfUpperChars = _getNbrOfOccurrences(password, /[A-Z]/g);
	let nbrOfConsecutiveUpperChars = Math.max(0, _getLongestResult(password, /[A-Z]*/g) - 2);
	let nbrOfDigits = _getNbrOfOccurrences(password, /[0-9]/g);
	let nbrOfConsecutiveDigits = Math.max(0, _getLongestResult(password, /[0-9]*/g) - 2);
	let nbrOfOtherChars = password.length - nbrOfDigits - nbrOfLowerChars - nbrOfUpperChars;
	let nbrOfConsecutiveOtherChars = Math.max(0, _getLongestResult(password, /[^a-z A-Z0-9]*/g) - 2);
	let nbrOfConsecutiveSame = Math.max(0, _getLongestResult(password, /(.)\1+/g) - 2);
	let minNbrOfCharsPerType = password.length / 4;
	let nbrOfMissingLowerChars = Math.max(0, minNbrOfCharsPerType - nbrOfLowerChars);
	let nbrOfMissingUpperChars = Math.max(0, minNbrOfCharsPerType - nbrOfUpperChars);
	let nbrOfMissingDigits = Math.max(0, minNbrOfCharsPerType - nbrOfDigits);
	let nbrOfMissingOtherChars = Math.max(0, minNbrOfCharsPerType - nbrOfOtherChars);
	let nbrOfSameChars = _getNbrOfSameChars(password);
	let nbrOfSequenceDigits = _getNbrOfSequenceChars(password.toLowerCase(), _BAD_SEQUENCES, true);
	let nbrOfBadStringDigits = _getNbrOfSequenceChars(password.toLowerCase(), badStrings.map((s) => s.toLowerCase()).concat(_BAD_STRINGS), false);
	let strength = password.length * 11;
	strength -= nbrOfMissingLowerChars * 3;
	strength -= nbrOfMissingUpperChars * 3;
	strength -= nbrOfMissingDigits * 3;
	strength -= nbrOfMissingOtherChars * 3;
	strength -= nbrOfConsecutiveLowerChars * 2;
	strength -= nbrOfConsecutiveUpperChars * 2;
	strength -= nbrOfConsecutiveDigits * 2;
	strength -= nbrOfConsecutiveOtherChars * 2;
	strength -= nbrOfConsecutiveSame * 2;
	strength -= nbrOfSameChars * 5;
	strength -= nbrOfSequenceDigits * 4;
	strength -= nbrOfBadStringDigits * 4;
	return Math.min(PASSWORD_MAX_VALUE, Math.max(PASSWORD_MIN_VALUE, Math.round(strength)));
}
function getPasswordStrengthForUser(password, recipientInfo, mailboxDetails, logins) {
	let reserved = getEnabledMailAddressesWithUser(mailboxDetails, logins.getUserController().userGroupInfo).concat(getMailboxName(logins, mailboxDetails), recipientInfo.address, recipientInfo.name ?? "");
	return Math.min(PASSWORD_MAX_VALUE, getPasswordStrength(password, reserved));
}
function scaleToVisualPasswordStrength(passwordStrength) {
	return Math.min(100, passwordStrength / PASSWORD_MAX_VALUE * 100);
}
function isSecurePassword(passwordStrength) {
	return passwordStrength >= PASSWORD_MIN_SECURE_VALUE;
}
/**
* Provides the number of repetitions of any characters in the given password at any position.
* @param password The password to check.
* @returns The number of same characters.
*/
function _getNbrOfSameChars(password) {
	const characterObject = new Set();
	for (const c of password) characterObject.add(c);
	return password.length - characterObject.size;
}
function _getNbrOfSequenceChars(password, sequences, reverseToo) {
	let s = sequences;
	if (reverseToo) s = sequences.concat(sequences.map((s1) => s1.split("").reverse().join("")));
	let MIN_SEQUENCE_LEN = 4;
	let nbrOfSequenceDigits = 0;
	for (let i = 0; i <= password.length - MIN_SEQUENCE_LEN; i++) {
		let maxFoundLen = 0;
		for (let sequenceLen = MIN_SEQUENCE_LEN; i + sequenceLen <= password.length; sequenceLen++) {
			let substringToCheck = password.substring(i, i + sequenceLen);
			for (let a = 0; a < s.length; a++) if (s[a].indexOf(substringToCheck) !== -1) {
				maxFoundLen = sequenceLen;
				break;
			}
		}
		if (maxFoundLen > 0) {
			nbrOfSequenceDigits += maxFoundLen;
			i += maxFoundLen - 1;
		}
	}
	return nbrOfSequenceDigits;
}
/**
* Gets the number of occurrences of the given regular expression in the given string.
* @param string The string to check.
* @param regexp The reqular expression to check against.
* @return The number of occurrences.
*/
function _getNbrOfOccurrences(string, regexp) {
	let result = string.match(regexp);
	return result ? result.length : 0;
}
/**
* Gets the number of characters in the longest result when checking the given string against the given regular expression.
* @param string The string to check.
* @param regexp The reqular expression to check against.
* @returns The number of characters of the longest result.
*/
function _getLongestResult(string, regexp) {
	let result = string.match(regexp);
	return result ? result.reduce((max, val) => Math.max(max, val.length), 0) : 0;
}

//#endregion
export { PASSWORD_MIN_SECURE_VALUE, getPasswordStrength, getPasswordStrengthForUser, isSecurePassword, scaleToVisualPasswordStrength };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,