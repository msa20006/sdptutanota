import { __toESM } from "./chunk-chunk.js";
import { LazyLoaded, SortedArray, pMap } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { OperationType } from "./TutanotaConstants-chunk.js";
import { getElementId, getEtId, isSameId } from "./EntityUtils-chunk.js";
import { EmailTemplateTypeRef, TemplateGroupRootTypeRef } from "./TypeRefs-chunk.js";
import { GroupInfoTypeRef, GroupTypeRef } from "./TypeRefs2-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { isUpdateForTypeRef } from "./EntityUpdateUtils-chunk.js";

//#region src/common/api/common/utils/PlainTextSearch.ts
function search(queryString, entries, attributeNames, markHits = false) {
	entries = entries.map((e) => Object.assign({}, e));
	if (queryString) return _search(queryString, entries, attributeNames, markHits).filter((match) => match.matchedWords.length > 0).sort((a, b) => {
		if (a.completeMatch !== b.completeMatch) return b.completeMatch - a.completeMatch;
		if (a.matchedWords.length !== b.matchedWords.length) return b.matchedWords.length - a.matchedWords.length;
else if (a.fullWordMatches !== b.fullWordMatches) return b.fullWordMatches - a.fullWordMatches;
else if (a.partialWordMatches !== b.partialWordMatches) return b.partialWordMatches - a.partialWordMatches;
else return 0;
	}).map((match) => match.entry);
else return entries;
}
function _findMatchInEntry(nestedEntry, attributeName, queryString, queryWords, searchMatch, markHits) {
	const value = nestedEntry[attributeName];
	if (!value || typeof value !== "string") return;
	const splittedValue = value.split(/(<[^>]+>)/gi);
	const completeRegExp = new RegExp(escapeRegExp(queryString), "gi");
	searchMatch.completeMatch += _findMatches(splittedValue, completeRegExp, false).hits;
	const fullWordRegExp = new RegExp(queryWords.map((queryWord) => "\\b" + escapeRegExp(queryWord) + "\\b").join("|"), "gi");
	searchMatch.fullWordMatches += _findMatches(splittedValue, fullWordRegExp, false).hits;
	let regExp = new RegExp(queryWords.map((queryWord) => escapeRegExp(queryWord)).join("|"), "gi");
	let findResult = _findMatches(splittedValue, regExp, markHits);
	if (markHits && findResult.hits > 0) nestedEntry[attributeName] = splittedValue.join("");
	for (const queryWord of findResult.matchedQueryWords) if (searchMatch.matchedWords.indexOf(queryWord) === -1) searchMatch.matchedWords.push(queryWord);
	if (findResult.hits > 0) searchMatch.partialWordMatches += findResult.hits;
}
function _search(queryString, entries, attributeNames, markHits) {
	let queryWords = queryString.toLocaleLowerCase().split(" ").map((word) => word.trim()).filter((word) => word.length > 0);
	return entries.map((entry) => {
		const searchMatch = {
			entry,
			completeMatch: 0,
			fullWordMatches: 0,
			partialWordMatches: 0,
			matchedWords: []
		};
		for (const name of attributeNames) {
			const nestedAttributes = name.split(".");
			if (nestedAttributes.length === 1) _findMatchInEntry(entry, nestedAttributes[0], queryString, queryWords, searchMatch, markHits);
else if (nestedAttributes.length === 2) {
				const [nestedArrayName, nestedEntryAttributeName] = nestedAttributes;
				const nestedArray = entry[nestedArrayName];
				if (Array.isArray(nestedArray)) for (const nestedEntry of nestedArray) _findMatchInEntry(nestedEntry, nestedEntryAttributeName, queryString, queryWords, searchMatch, markHits);
			}
		}
		return searchMatch;
	});
}
function _findMatches(splittedValue, regExp, markHits) {
	return splittedValue.reduce((sum, value, index) => {
		if (value.trim().length === 0 || value.startsWith("<")) return sum;
		splittedValue[index] = value.replace(regExp, (match) => {
			sum.hits++;
			if (sum.matchedQueryWords.indexOf(match.toLowerCase()) === -1) sum.matchedQueryWords.push(match.toLowerCase());
			if (markHits && match.length > 2) return `<mark>${match}</mark>`;
else return match;
		});
		return sum;
	}, {
		hits: 0,
		matchedQueryWords: []
	});
}
function escapeRegExp(string) {
	return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}

//#endregion
//#region src/mail-app/templates/model/TemplatePopupModel.ts
var import_stream = __toESM(require_stream(), 1);
const TEMPLATE_SHORTCUT_PREFIX = "#";
const SELECT_NEXT_TEMPLATE = "next";
const SELECT_PREV_TEMPLATE = "previous";
function compareTemplatesForSort(template1, template2) {
	const titleComparison = template1.title.localeCompare(template2.title);
	return titleComparison === 0 ? template1.tag.localeCompare(template2.tag) : titleComparison;
}
var TemplatePopupModel = class {
	_allTemplates;
	searchResults;
	selectedTemplate;
	initialized;
	_eventController;
	_entityEventReceived;
	_logins;
	_entityClient;
	_groupInstances;
	_selectedContentLanguage;
	_searchFilter;
	constructor(eventController, logins, entityClient) {
		this._eventController = eventController;
		this._logins = logins;
		this._entityClient = entityClient;
		this._allTemplates = SortedArray.empty(compareTemplatesForSort);
		this.searchResults = (0, import_stream.default)([]);
		this.selectedTemplate = (0, import_stream.default)(null);
		this._selectedContentLanguage = lang.code;
		this._searchFilter = new TemplateSearchFilter();
		this._groupInstances = [];
		this._entityEventReceived = (updates, eventOwnerGroupId) => {
			return this._entityUpdate(updates, eventOwnerGroupId);
		};
		this.initialized = new LazyLoaded(() => {
			const templateMemberships = this._logins.getUserController().getTemplateMemberships();
			return loadTemplateGroupInstances(templateMemberships, this._entityClient).then((templateGroupInstances) => loadTemplates(templateGroupInstances, this._entityClient).then((templates) => {
				this._allTemplates.insertAll(templates);
				this._groupInstances = templateGroupInstances;
			})).then(() => {
				this.searchResults(this._searchFilter.filter("", this._allTemplates.array));
				this.setSelectedTemplate(this.searchResults()[0]);
				return this;
			});
		});
		this._eventController.addEntityListener(this._entityEventReceived);
	}
	init() {
		return this.initialized.getAsync();
	}
	isLoaded() {
		return this.initialized.isLoaded();
	}
	dispose() {
		this._eventController.removeEntityListener(this._entityEventReceived);
	}
	isSelectedTemplate(template) {
		return this.selectedTemplate() === template;
	}
	getAllTemplates() {
		return this._allTemplates.array;
	}
	getSelectedTemplate() {
		return this.selectedTemplate();
	}
	getSelectedContent() {
		const selectedTemplate = this.selectedTemplate();
		return selectedTemplate && (selectedTemplate.contents.find((contents) => contents.languageCode === this._selectedContentLanguage) || selectedTemplate.contents.find((contents) => contents.languageCode === lang.code) || selectedTemplate.contents[0]);
	}
	getSelectedTemplateIndex() {
		const selectedTemplate = this.selectedTemplate();
		if (selectedTemplate == null) return -1;
		return this.searchResults().indexOf(selectedTemplate);
	}
	setSelectedTemplate(template) {
		this.selectedTemplate(template);
	}
	setSelectedContentLanguage(langCode) {
		this._selectedContentLanguage = langCode;
	}
	search(query) {
		this.searchResults(this._searchFilter.filter(query, this._allTemplates.array));
		this.setSelectedTemplate(this.searchResults()[0]);
	}
	_rerunSearch() {
		this.searchResults(this._searchFilter.rerunQuery(this._allTemplates.array));
		this.setSelectedTemplate(this.searchResults()[0]);
	}
	/**
	* Increments or decrements the selection, unless it would go past the beginning or end of the search results
	* @param action
	* @returns true if the selection changed
	*/
	selectNextTemplate(action) {
		const selectedIndex = this.getSelectedTemplateIndex();
		const nextIndex = selectedIndex + (action === SELECT_NEXT_TEMPLATE ? 1 : -1);
		if (nextIndex >= 0 && nextIndex < this.searchResults().length) {
			const nextSelectedTemplate = this.searchResults()[nextIndex];
			this.setSelectedTemplate(nextSelectedTemplate);
			return true;
		}
		return false;
	}
	findTemplateWithTag(selectedText) {
		const tag = selectedText.substring(TEMPLATE_SHORTCUT_PREFIX.length);
		return this._allTemplates.array.find((template) => template.tag === tag) ?? null;
	}
	_entityUpdate(updates, eventOwnerGroupId) {
		return pMap(updates, (update) => {
			if (isUpdateForTypeRef(EmailTemplateTypeRef, update)) {
				if (update.operation === OperationType.CREATE) return this._entityClient.load(EmailTemplateTypeRef, [update.instanceListId, update.instanceId]).then((template) => {
					this._allTemplates.insert(template);
					this._rerunSearch();
					this.setSelectedTemplate(template);
				});
else if (update.operation === OperationType.UPDATE) return this._entityClient.load(EmailTemplateTypeRef, [update.instanceListId, update.instanceId]).then((template) => {
					this._allTemplates.removeFirst((t) => isSameId(getElementId(t), update.instanceId));
					this._allTemplates.insert(template);
					this._rerunSearch();
					this.setSelectedTemplate(template);
				});
else if (update.operation === OperationType.DELETE) {
					if (!this.selectNextTemplate("next") && !this.selectNextTemplate("previous")) this.setSelectedTemplate(null);
					this._allTemplates.removeFirst((t) => isSameId(getElementId(t), update.instanceId));
					this._rerunSearch();
				}
			} else if (this._logins.getUserController().isUpdateForLoggedInUserInstance(update, eventOwnerGroupId)) {
				if (this._groupInstances.length !== this._logins.getUserController().getTemplateMemberships().length) {
					this.initialized.reset();
					return this.initialized.getAsync().then(() => this._rerunSearch());
				}
			}
		});
	}
	getTemplateGroupInstances() {
		return this._groupInstances;
	}
	getSelectedTemplateGroupInstance() {
		const selected = this.getSelectedTemplate();
		if (selected == null) return null;
else return this._groupInstances.find((instance) => isSameId(getEtId(instance.group), selected._ownerGroup)) ?? null;
	}
};
function loadTemplateGroupInstances(memberships, entityClient) {
	return pMap(memberships, (membership) => loadTemplateGroupInstance(membership, entityClient));
}
function loadTemplateGroupInstance(groupMembership, entityClient) {
	return entityClient.load(GroupInfoTypeRef, groupMembership.groupInfo).then((groupInfo) => entityClient.load(TemplateGroupRootTypeRef, groupInfo.group).then((groupRoot) => entityClient.load(GroupTypeRef, groupInfo.group).then((group) => {
		return {
			groupInfo,
			group,
			groupRoot,
			groupMembership
		};
	})));
}
function loadTemplates(templateGroups, entityClient) {
	return pMap(templateGroups, (group) => entityClient.loadAll(EmailTemplateTypeRef, group.groupRoot.templates)).then((groupedTemplates) => groupedTemplates.flat());
}
function searchInTemplates(input, allTemplates) {
	if (input.startsWith(TEMPLATE_SHORTCUT_PREFIX)) {
		const newQueryString = input.substring(TEMPLATE_SHORTCUT_PREFIX.length);
		return search(newQueryString, allTemplates, ["tag"], false);
	} else return search(input, allTemplates, [
		"tag",
		"title",
		"contents.text"
	], false);
}
var TemplateSearchFilter = class {
	lastInput;
	lastQuery;
	lastResults;
	constructor() {
		this.lastInput = [];
		this.lastQuery = "";
		this.lastResults = [];
	}
	filter(query, input) {
		return this._doFilter(query, input);
	}
	rerunQuery(input) {
		return this._doFilter(this.lastQuery, input);
	}
	_doFilter(query, input) {
		this.lastInput = input.slice();
		this.lastQuery = query;
		this.lastResults = query === "" ? this.lastInput : searchInTemplates(query, input);
		return this.lastResults;
	}
};

//#endregion
export { SELECT_NEXT_TEMPLATE, SELECT_PREV_TEMPLATE, TEMPLATE_SHORTCUT_PREFIX, TemplatePopupModel, loadTemplateGroupInstance, loadTemplateGroupInstances, search, searchInTemplates };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,