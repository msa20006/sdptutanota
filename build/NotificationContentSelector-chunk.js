import { isApp, isDesktop } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { DropDownSelector } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { PermissionType$1 as PermissionType } from "./PermissionType-chunk.js";
import { renderNotificationPermissionsDialog } from "./NotificationPermissionsDialog-chunk.js";

//#region src/common/native/common/generatedipc/ExtendedNotificationMode.ts
let ExtendedNotificationMode = function(ExtendedNotificationMode$1) {
	ExtendedNotificationMode$1["NoSenderOrSubject"] = "0";
	ExtendedNotificationMode$1["OnlySender"] = "1";
	ExtendedNotificationMode$1["SenderAndSubject"] = "2";
	return ExtendedNotificationMode$1;
}({});

//#endregion
//#region src/mail-app/settings/NotificationContentSelector.ts
var NotificationContentSelector = class {
	view(vnode) {
		return mithril_default(DropDownSelector, {
			label: "notificationContent_label",
			items: isDesktop() ? [{
				name: lang.get("notificationPreferenceNoSenderOrSubject_action"),
				value: ExtendedNotificationMode.NoSenderOrSubject
			}, {
				name: lang.get("notificationPreferenceOnlySender_action"),
				value: ExtendedNotificationMode.OnlySender
			}] : [
				{
					name: lang.get("notificationPreferenceNoSenderOrSubject_action"),
					value: ExtendedNotificationMode.NoSenderOrSubject
				},
				{
					name: lang.get("notificationPreferenceOnlySender_action"),
					value: ExtendedNotificationMode.OnlySender
				},
				{
					name: lang.get("notificationPreferenceSenderAndSubject_action"),
					value: ExtendedNotificationMode.SenderAndSubject
				}
			],
			selectedValue: vnode.attrs.extendedNotificationMode,
			selectionChangedHandler: async (newValue) => {
				if (isApp()) {
					const isNotificationPermissionGranted = await locator.systemPermissionHandler.hasPermission(PermissionType.Notification);
					if (isNotificationPermissionGranted) vnode.attrs.onChange(newValue);
else await renderNotificationPermissionsDialog(() => {
						vnode.attrs.onChange(newValue);
					});
				} else vnode.attrs.onChange(newValue);
			},
			dropdownWidth: 250
		});
	}
};

//#endregion
export { ExtendedNotificationMode, NotificationContentSelector };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90aWZpY2F0aW9uQ29udGVudFNlbGVjdG9yLWNodW5rLmpzIiwibmFtZXMiOlsidm5vZGU6IFZub2RlPE5vdGlmaWNhdGlvbkNvbnRlbnRTZWxlY3RvckF0dHJzPiJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vbmF0aXZlL2NvbW1vbi9nZW5lcmF0ZWRpcGMvRXh0ZW5kZWROb3RpZmljYXRpb25Nb2RlLnRzIiwiLi4vc3JjL21haWwtYXBwL3NldHRpbmdzL05vdGlmaWNhdGlvbkNvbnRlbnRTZWxlY3Rvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnZW5lcmF0ZWQgZmlsZSwgZG9uJ3QgZWRpdC4gKi9cblxuZXhwb3J0IGNvbnN0IGVudW0gRXh0ZW5kZWROb3RpZmljYXRpb25Nb2RlIHtcblx0Tm9TZW5kZXJPclN1YmplY3QgPSBcIjBcIixcblx0T25seVNlbmRlciA9IFwiMVwiLFxuXHRTZW5kZXJBbmRTdWJqZWN0ID0gXCIyXCIsXG59XG4iLCJpbXBvcnQgbSwgeyBDb21wb25lbnQsIFZub2RlIH0gZnJvbSBcIm1pdGhyaWxcIlxuaW1wb3J0IHsgRHJvcERvd25TZWxlY3RvciwgRHJvcERvd25TZWxlY3RvckF0dHJzIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9ndWkvYmFzZS9Ecm9wRG93blNlbGVjdG9yLmpzXCJcbmltcG9ydCB7IGxhbmcgfSBmcm9tIFwiLi4vLi4vY29tbW9uL21pc2MvTGFuZ3VhZ2VWaWV3TW9kZWwuanNcIlxuaW1wb3J0IHsgRXh0ZW5kZWROb3RpZmljYXRpb25Nb2RlIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9uYXRpdmUvY29tbW9uL2dlbmVyYXRlZGlwYy9FeHRlbmRlZE5vdGlmaWNhdGlvbk1vZGUuanNcIlxuaW1wb3J0IHsgaXNBcHAsIGlzRGVza3RvcCB9IGZyb20gXCIuLi8uLi9jb21tb24vYXBpL2NvbW1vbi9FbnYuanNcIlxuaW1wb3J0IHsgUGVybWlzc2lvblR5cGUgfSBmcm9tIFwiLi4vLi4vY29tbW9uL25hdGl2ZS9jb21tb24vZ2VuZXJhdGVkaXBjL1Blcm1pc3Npb25UeXBlLmpzXCJcbmltcG9ydCB7IGxvY2F0b3IgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2FwaS9tYWluL0NvbW1vbkxvY2F0b3IuanNcIlxuaW1wb3J0IHsgcmVuZGVyTm90aWZpY2F0aW9uUGVybWlzc2lvbnNEaWFsb2cgfSBmcm9tIFwiLi4vLi4vY29tbW9uL3NldHRpbmdzL05vdGlmaWNhdGlvblBlcm1pc3Npb25zRGlhbG9nLmpzXCJcblxuZXhwb3J0IGludGVyZmFjZSBOb3RpZmljYXRpb25Db250ZW50U2VsZWN0b3JBdHRycyB7XG5cdGV4dGVuZGVkTm90aWZpY2F0aW9uTW9kZTogRXh0ZW5kZWROb3RpZmljYXRpb25Nb2RlXG5cdG9uQ2hhbmdlOiAodmFsdWU6IEV4dGVuZGVkTm90aWZpY2F0aW9uTW9kZSkgPT4gdm9pZFxufVxuXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uQ29udGVudFNlbGVjdG9yIGltcGxlbWVudHMgQ29tcG9uZW50PE5vdGlmaWNhdGlvbkNvbnRlbnRTZWxlY3RvckF0dHJzPiB7XG5cdHZpZXcodm5vZGU6IFZub2RlPE5vdGlmaWNhdGlvbkNvbnRlbnRTZWxlY3RvckF0dHJzPikge1xuXHRcdHJldHVybiBtKERyb3BEb3duU2VsZWN0b3IsIHtcblx0XHRcdGxhYmVsOiBcIm5vdGlmaWNhdGlvbkNvbnRlbnRfbGFiZWxcIixcblx0XHRcdC8vIFN1YmplY3QgaXMgbm90IGF2YWlsYWJsZSBvbiBkZXNrdG9wIGF0IHRoZSBtb21lbnQuXG5cdFx0XHRpdGVtczogaXNEZXNrdG9wKClcblx0XHRcdFx0PyBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdG5hbWU6IGxhbmcuZ2V0KFwibm90aWZpY2F0aW9uUHJlZmVyZW5jZU5vU2VuZGVyT3JTdWJqZWN0X2FjdGlvblwiKSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IEV4dGVuZGVkTm90aWZpY2F0aW9uTW9kZS5Ob1NlbmRlck9yU3ViamVjdCxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdG5hbWU6IGxhbmcuZ2V0KFwibm90aWZpY2F0aW9uUHJlZmVyZW5jZU9ubHlTZW5kZXJfYWN0aW9uXCIpLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogRXh0ZW5kZWROb3RpZmljYXRpb25Nb2RlLk9ubHlTZW5kZXIsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHQgIF1cblx0XHRcdFx0OiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdG5hbWU6IGxhbmcuZ2V0KFwibm90aWZpY2F0aW9uUHJlZmVyZW5jZU5vU2VuZGVyT3JTdWJqZWN0X2FjdGlvblwiKSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IEV4dGVuZGVkTm90aWZpY2F0aW9uTW9kZS5Ob1NlbmRlck9yU3ViamVjdCxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdG5hbWU6IGxhbmcuZ2V0KFwibm90aWZpY2F0aW9uUHJlZmVyZW5jZU9ubHlTZW5kZXJfYWN0aW9uXCIpLFxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogRXh0ZW5kZWROb3RpZmljYXRpb25Nb2RlLk9ubHlTZW5kZXIsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRuYW1lOiBsYW5nLmdldChcIm5vdGlmaWNhdGlvblByZWZlcmVuY2VTZW5kZXJBbmRTdWJqZWN0X2FjdGlvblwiKSxcblx0XHRcdFx0XHRcdFx0dmFsdWU6IEV4dGVuZGVkTm90aWZpY2F0aW9uTW9kZS5TZW5kZXJBbmRTdWJqZWN0LFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0ICBdLFxuXHRcdFx0c2VsZWN0ZWRWYWx1ZTogdm5vZGUuYXR0cnMuZXh0ZW5kZWROb3RpZmljYXRpb25Nb2RlLFxuXHRcdFx0c2VsZWN0aW9uQ2hhbmdlZEhhbmRsZXI6IGFzeW5jIChuZXdWYWx1ZSkgPT4ge1xuXHRcdFx0XHQvLyBQZXJtaXNzaW9ucyBvbmx5IGV4aXN0IG9uIG1vYmlsZSwgc28gd2Ugc2hvdWxkIG5vdCBjaGVjayBvbiBvdGhlciBwbGF0Zm9ybXNcblx0XHRcdFx0aWYgKGlzQXBwKCkpIHtcblx0XHRcdFx0XHRjb25zdCBpc05vdGlmaWNhdGlvblBlcm1pc3Npb25HcmFudGVkID0gYXdhaXQgbG9jYXRvci5zeXN0ZW1QZXJtaXNzaW9uSGFuZGxlci5oYXNQZXJtaXNzaW9uKFBlcm1pc3Npb25UeXBlLk5vdGlmaWNhdGlvbilcblx0XHRcdFx0XHRpZiAoaXNOb3RpZmljYXRpb25QZXJtaXNzaW9uR3JhbnRlZCkge1xuXHRcdFx0XHRcdFx0dm5vZGUuYXR0cnMub25DaGFuZ2UobmV3VmFsdWUpXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGF3YWl0IHJlbmRlck5vdGlmaWNhdGlvblBlcm1pc3Npb25zRGlhbG9nKCgpID0+IHtcblx0XHRcdFx0XHRcdFx0Ly8gU3dpdGNoIHRvIHRoZSB0YXJnZXRlZCBzZXR0aW5nIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGUgcGVybWlzc2lvbiB3YXMgZ3JhbnRlZFxuXHRcdFx0XHRcdFx0XHR2bm9kZS5hdHRycy5vbkNoYW5nZShuZXdWYWx1ZSlcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZub2RlLmF0dHJzLm9uQ2hhbmdlKG5ld1ZhbHVlKVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZHJvcGRvd25XaWR0aDogMjUwLFxuXHRcdH0gc2F0aXNmaWVzIERyb3BEb3duU2VsZWN0b3JBdHRyczxFeHRlbmRlZE5vdGlmaWNhdGlvbk1vZGU+KVxuXHR9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztJQUVrQixnRUFBWDtBQUNOO0FBQ0E7QUFDQTs7QUFDQTs7OztJQ1FZLDhCQUFOLE1BQXlGO0NBQy9GLEtBQUtBLE9BQWdEO0FBQ3BELFNBQU8sZ0JBQUUsa0JBQWtCO0dBQzFCLE9BQU87R0FFUCxPQUFPLFdBQVcsR0FDZixDQUNBO0lBQ0MsTUFBTSxLQUFLLElBQUksaURBQWlEO0lBQ2hFLE9BQU8seUJBQXlCO0dBQ2hDLEdBQ0Q7SUFDQyxNQUFNLEtBQUssSUFBSSwwQ0FBMEM7SUFDekQsT0FBTyx5QkFBeUI7R0FDaEMsQ0FDQSxJQUNEO0lBQ0E7S0FDQyxNQUFNLEtBQUssSUFBSSxpREFBaUQ7S0FDaEUsT0FBTyx5QkFBeUI7SUFDaEM7SUFDRDtLQUNDLE1BQU0sS0FBSyxJQUFJLDBDQUEwQztLQUN6RCxPQUFPLHlCQUF5QjtJQUNoQztJQUNEO0tBQ0MsTUFBTSxLQUFLLElBQUksZ0RBQWdEO0tBQy9ELE9BQU8seUJBQXlCO0lBQ2hDO0dBQ0E7R0FDSixlQUFlLE1BQU0sTUFBTTtHQUMzQix5QkFBeUIsT0FBTyxhQUFhO0FBRTVDLFFBQUksT0FBTyxFQUFFO0tBQ1osTUFBTSxrQ0FBa0MsTUFBTSxRQUFRLHdCQUF3QixjQUFjLGVBQWUsYUFBYTtBQUN4SCxTQUFJLGdDQUNILE9BQU0sTUFBTSxTQUFTLFNBQVM7SUFFOUIsT0FBTSxvQ0FBb0MsTUFBTTtBQUUvQyxZQUFNLE1BQU0sU0FBUyxTQUFTO0tBQzlCLEVBQUM7SUFFSCxNQUNBLE9BQU0sTUFBTSxTQUFTLFNBQVM7R0FFL0I7R0FDRCxlQUFlO0VBQ2YsRUFBMkQ7Q0FDNUQ7QUFDRCJ9