import { __toESM } from "./chunk-chunk.js";
import "./dist-chunk.js";
import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { assertMainOrNode, isApp, isBrowser, isDesktop, isIOSApp, isOfflineStorageAvailable, isWebClient } from "./Env-chunk.js";
import { AppType, client } from "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { DAY_IN_MILLIS, LazyLoaded, NBSP, assert, assertNotNull, asyncFind, capitalizeFirstLetter, clear, clone, contains, debounceStart, defer, delay, downcast, filterInt, first, getDayShifted, getFirstOrThrow, getStartOfDay, getStartOfNextDay, incrementDate, isEmpty, mapNullable, memoized, neverNull, noOp, ofClass, pMap, pad, partition, renderCsv, stringToUtf8Uint8Array, uint8ArrayToBase64, utf8Uint8ArrayToString } from "./dist2-chunk.js";
import { getThemeCustomizations } from "./WhitelabelCustomizations-chunk.js";
import { InfoLink, getLanguage, lang, languageByCode, languageCodeToTag, languageNative } from "./LanguageViewModel-chunk.js";
import { styles } from "./styles-chunk.js";
import { expandHexTriplet, getLightOrDarkTutaLogo, isValidColorCode, theme, themeOptions } from "./theme-chunk.js";
import { ALLOWED_IMAGE_FORMATS, BookingItemFeatureType, CertificateState, CertificateType, CloseEventBusOption, Const, CounterType, CustomDomainCheckResult, CustomDomainTypeCount, CustomDomainValidationResult, DEFAULT_FREE_MAIL_ADDRESS_SIGNUP_DOMAIN, DnsRecordType, DnsRecordValidation, EmailSignatureType, FeatureType, GroupType, HighestTierPlans, ImportStatus, InboxRuleType, Keys, LegacyPlans, MAX_LOGO_SIZE, MailSetKind, NewPaidPlans, OFFLINE_STORAGE_DEFAULT_TIME_RANGE_DAYS, OUT_OF_OFFICE_SUBJECT_PREFIX, OperationType, OutOfOfficeNotificationMessageType, PlanType, PushServiceType, ReportMovedMailsType, SecondFactorType, SessionState, ShareCapability, SpamRuleFieldType, SpamRuleType, TUTA_MAIL_ADDRESS_DOMAINS, TimeFormat, WeekStart, assertEnumValue, getSpamRuleField } from "./TutanotaConstants-chunk.js";
import { keyManager } from "./KeyManager-chunk.js";
import "./WindowFacade-chunk.js";
import "./RootView-chunk.js";
import { px, size } from "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import { DateTime } from "./luxon-chunk.js";
import { GENERATED_MAX_ID, GENERATED_MIN_ID, elementIdPart, generatedIdToTimestamp, getElementId, getEtId, isSameId, listIdPart, sortCompareByReverseId, timestampToGeneratedId } from "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { EmailTemplateTypeRef, KnowledgeBaseEntryTypeRef, MailFolderTypeRef, MailboxPropertiesTypeRef, OutOfOfficeNotificationTypeRef, TemplateGroupRootTypeRef, TutanotaPropertiesTypeRef, UserSettingsGroupRootTypeRef, createGroupSettings, createMail, createMailAddress, createOutOfOfficeNotification, createOutOfOfficeNotificationMessage, createUserAreaGroupDeleteData } from "./TypeRefs-chunk.js";
import "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import { AccountingInfoTypeRef, AuditLogEntryTypeRef, BookingTypeRef, CustomerInfoTypeRef, CustomerPropertiesTypeRef, CustomerServerPropertiesTypeRef, CustomerTypeRef, GroupInfoTypeRef, GroupMemberTypeRef, GroupTypeRef, PushIdentifierTypeRef, RejectedSenderTypeRef, SecondFactorTypeRef, SessionTypeRef, UserTypeRef, WhitelabelConfigTypeRef, createCustomDomainCheckGetIn, createDnsRecord, createEmailSenderListElement, createGroupInfo, createSecondFactor, createStringWrapper, createSurveyData } from "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import { getStartOfTheWeekOffsetForUser } from "./CalendarUtils-chunk.js";
import "./ImportExportUtils-chunk.js";
import { isDomainName, isMailAddress } from "./FormatValidator-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { ListAutoSelectBehavior, deviceConfig } from "./DeviceConfig-chunk.js";
import "./Logger-chunk.js";
import "./ErrorHandler-chunk.js";
import "./EntityFunctions-chunk.js";
import "./TypeModels3-chunk.js";
import "./ModelInfo-chunk.js";
import "./ErrorUtils-chunk.js";
import { BadRequestError, InvalidDataError, LimitReachedError, LockedError, NotAuthorizedError, NotFoundError, PayloadTooLargeError, PreconditionFailedError } from "./RestError-chunk.js";
import "./SetupMultipleError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./EventQueue-chunk.js";
import "./EntityRestClient-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import { IndexingNotSupportedError } from "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import "./MessageDispatcher-chunk.js";
import "./WorkerProxy-chunk.js";
import { isUpdateFor, isUpdateForTypeRef } from "./EntityUpdateUtils-chunk.js";
import "./dist3-chunk.js";
import "./KeyLoaderFacade-chunk.js";
import "./SessionType-chunk.js";
import { BrandingDomainService, CustomDomainCheckService } from "./Services-chunk.js";
import "./EntityClient-chunk.js";
import "./PageContextLoginListener-chunk.js";
import "./RestClient-chunk.js";
import "./BirthdayUtils-chunk.js";
import { TemplateGroupService } from "./Services2-chunk.js";
import "./FolderSystem-chunk.js";
import { compareGroupInfos, getEnabledMailAddressesForGroupInfo, getGroupInfoDisplayName, getUserGroupMemberships } from "./GroupUtils-chunk.js";
import "./MailChecks-chunk.js";
import { BaseButton, Button, ButtonType } from "./Button-chunk.js";
import { Icons } from "./Icons-chunk.js";
import "./DialogHeaderBar-chunk.js";
import "./CountryList-chunk.js";
import { Autocapitalize, Autocomplete, Dialog, DialogType, DropDownSelector, TextField, TextFieldType, attachDropdown, createDropdown, createMoreActionButtonAttrs, getConfirmation, ifAllowedTutaLinks } from "./Dialog-chunk.js";
import { BootIcons, Icon, IconSize, progressIcon } from "./Icon-chunk.js";
import "./AriaUtils-chunk.js";
import { ButtonSize, IconButton } from "./IconButton-chunk.js";
import "./CalendarEventWhenModel-chunk.js";
import { formatDate, formatDateTime, formatDateTimeFromYesterdayOn, formatDateWithMonth, formatShortMonthYear2Digit, formatStorageSize, getHourCycle } from "./Formatter-chunk.js";
import "./ProgressMonitor-chunk.js";
import "./Notifications-chunk.js";
import "./CalendarFacade-chunk.js";
import "./CalendarModel-chunk.js";
import { TemplateGroupPreconditionFailedReason, getNullableSharedGroupName, getSharedGroupName, hasCapabilityOnGroup, isSharedGroupOwner } from "./GroupUtils2-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { UserError } from "./UserError-chunk.js";
import { getCleanedMailAddress, getDomainPart } from "./MailAddressParser-chunk.js";
import { createDataFile } from "./BlobUtils-chunk.js";
import "./FileUtils-chunk.js";
import { showProgressDialog } from "./ProgressDialog-chunk.js";
import { getMailAddressDisplayText, getMailboxName, insertInlineImageB64ClickHandler, showFileChooser } from "./SharedMailUtils-chunk.js";
import "./PasswordUtils-chunk.js";
import "./Recipient-chunk.js";
import "./ContactUtils-chunk.js";
import "./RecipientsModel-chunk.js";
import "./CalendarGuiUtils-chunk.js";
import { UpgradeRequiredError } from "./UpgradeRequiredError-chunk.js";
import "./ColorPickerModel-chunk.js";
import "./BannerButton-chunk.js";
import { showNotAvailableForFreeDialog, showPlanUpgradeRequiredDialog } from "./SubscriptionDialogs-chunk.js";
import { ExternalLink } from "./ExternalLink-chunk.js";
import { ToggleButton } from "./ToggleButton-chunk.js";
import "./SectionButton-chunk.js";
import { DatePicker } from "./DatePicker-chunk.js";
import "./MailRecipientsTextField-chunk.js";
import { ColumnEmptyMessageBox } from "./ColumnEmptyMessageBox-chunk.js";
import "./DateParser-chunk.js";
import { NavButton, NavButtonColor, isNavButtonSelected, isSelectedPrefix } from "./NavButton-chunk.js";
import "./InfoBanner-chunk.js";
import { showSnackBar } from "./SnackBar-chunk.js";
import "./Credentials-chunk.js";
import "./NotificationOverlay-chunk.js";
import { Checkbox } from "./Checkbox-chunk.js";
import { ExpanderButton, ExpanderPanel } from "./Expander-chunk.js";
import { copyToClipboard } from "./ClipboardUtils-chunk.js";
import "./Services4-chunk.js";
import "./BubbleButton-chunk.js";
import { clientInfoString, getLogAttachments } from "./ErrorReporter-chunk.js";
import { PasswordField } from "./PasswordField-chunk.js";
import { showRequestPasswordDialog } from "./PasswordRequestDialog-chunk.js";
import { showUserError } from "./ErrorHandlerImpl-chunk.js";
import "./InAppRatingDialog-chunk.js";
import { List, MultiselectMode, listSelectionKeyboardShortcuts, onlySingleSelection } from "./List-chunk.js";
import { SelectableRowContainer, setVisibility } from "./SelectableRowContainer-chunk.js";
import { SETTINGS_PREFIX } from "./RouteChange-chunk.js";
import "./ListModel-chunk.js";
import { ListElementListModel } from "./ListElementListModel-chunk.js";
import { getCustomMailDomains, getWhitelabelDomainInfo, isCustomizationEnabledForCustomer } from "./CustomerUtils-chunk.js";
import { BackgroundColumnLayout, ColumnType, FolderColumnView, Header, MobileHeader, SidebarSection, ViewColumn, ViewSlider } from "./MobileHeader-chunk.js";
import { ProgressBar, ProgressBarType, UiImportStatus, appIdToLoginUrl, getInboxRuleTypeName, mailLocator, validateWebauthnDisplayName } from "./mailLocator-chunk.js";
import { BaseTopLevelView } from "./LoginScreenHeader-chunk.js";
import { LoginButton, LoginButtonType } from "./LoginButton-chunk.js";
import "./ColorPickerView-chunk.js";
import "./NavFunctions-chunk.js";
import "./CounterBadge-chunk.js";
import "./InfoIcon-chunk.js";
import { ColumnWidth, Table, createRowActions } from "./Table-chunk.js";
import "./GroupGuiUtils-chunk.js";
import { showGroupSharingDialog } from "./GroupSharingDialog-chunk.js";
import { GroupInvitationFolderRow } from "./GroupInvitationFolderRow-chunk.js";
import { ListColumnWrapper } from "./ListColumnWrapper-chunk.js";
import { HtmlEditor, HtmlEditorMode } from "./HtmlEditor-chunk.js";
import { htmlSanitizer } from "./HtmlSanitizer-chunk.js";
import { appendEmailSignature } from "./Signature-chunk.js";
import "./LoginUtils-chunk.js";
import "./AttachmentBubble-chunk.js";
import "./MailEditorViewModel-chunk.js";
import "./MailGuiUtils-chunk.js";
import "./UsageTestModel-chunk.js";
import { getDefaultSenderFromUser, getFolderName, getIndentedFolderNameForDropdown, getPathToFolderString } from "./MailUtils-chunk.js";
import "./BrowserWebauthn-chunk.js";
import { PermissionType$1 as PermissionType } from "./PermissionType-chunk.js";
import "./CommonMailUtils-chunk.js";
import "./SearchUtils-chunk.js";
import "./FontIcons-chunk.js";
import { TEMPLATE_SHORTCUT_PREFIX, loadTemplateGroupInstances, searchInTemplates } from "./TemplatePopupModel-chunk.js";
import { KnowledgeBaseEntryView, createInitialTemplateListIfAllowed, knowledgeBaseSearch, newMailEditorFromTemplate } from "./MailEditor-chunk.js";
import "./MailViewerViewModel-chunk.js";
import "./LoadingState-chunk.js";
import "./inlineImagesUtils-chunk.js";
import { BottomNav } from "./BottomNav-chunk.js";
import "./CommonFormatter-chunk.js";
import { DesktopConfigKey } from "./ConfigKeys-chunk.js";
import { CredentialEncryptionMode } from "./CredentialEncryptionMode-chunk.js";
import { formatActivateState, getDefaultNotificationLabel, loadOutOfOfficeNotification } from "./OutOfOfficeNotificationUtils-chunk.js";
import { PasswordForm, PasswordModel } from "./PasswordForm-chunk.js";
import { MoreInfoLink } from "./MoreInfoLink-chunk.js";
import { getReportMovedMailsType } from "./MailboxPropertiesUtils-chunk.js";
import { AppLockMethod } from "./AppLockMethod-chunk.js";
import "./RadioSelector-chunk.js";
import { showCredentialsEncryptionModeDialog } from "./SelectCredentialsEncryptionModeDialog-chunk.js";
import { ReferralLinkViewer, getReferralLink } from "./ReferralLinkViewer-chunk.js";
import { NotificationContentSelector } from "./NotificationContentSelector-chunk.js";
import "./NotificationPermissionsDialog-chunk.js";
import { getCurrentSpellcheckLanguageLabel, showSpellcheckLanguageDialog } from "./SpellcheckLanguageDialog-chunk.js";
import { WizardEventType, createWizardDialog, emitWizardEvent, wizardPageWrapper } from "./WizardDialog-chunk.js";
import "./SegmentControl-chunk.js";
import { getAvailableMatchingPlans, getAvailablePlansWithAutoResponder, getAvailablePlansWithTemplates, getAvailablePlansWithWhitelabel, isWhitelabelActive, toFeatureType } from "./SubscriptionUtils-chunk.js";
import { show$2 as show, showBuyOrSetNotificationEmailDialog } from "./EditNotificationEmailDialog-chunk.js";
import { showChangeOwnPasswordDialog, showChangeUserPasswordAsAdminDialog } from "./ChangePasswordDialogs-chunk.js";
import { showRecoverCodeDialogAfterPasswordVerification, showRecoverCodeDialogAfterPasswordVerificationAndInfoDialog } from "./RecoverCodeDialog-chunk.js";
import { getAvailableDomains } from "./MailAddressesUtils-chunk.js";
import { AddressStatus } from "./MailAddressTableModel-chunk.js";
import { ReceivedGroupInvitationsModel } from "./ReceivedGroupInvitationsModel-chunk.js";
import { PaymentInterval, asPaymentInterval, formatPrice, getPriceItem } from "./PriceUtils-chunk.js";
import { require_qrcode } from "./PurchaseGiftCardDialog-chunk.js";
import { PaymentViewer, SelectMailAddressForm, SettingsExpander, SubscriptionViewer, showUpgradeWizard } from "./SwitchSubscriptionDialog-chunk.js";
import "./MessageBox-chunk.js";
import { SURVEY_VERSION_NUMBER, showLeavingUserSurveyWizard } from "./LeavingUserSurveyWizard-chunk.js";
import { showSupportDialog } from "./SupportDialog-chunk.js";
import "./Badge-chunk.js";
import { MailRow } from "./MailRow-chunk.js";
import { BaseSearchBar } from "./BaseSearchBar-chunk.js";
import { createInboxRuleTemplate, show$1 } from "./AddInboxRuleDialog-chunk.js";
import { getSpamRuleFieldToName, getSpamRuleTypeNameMapping, showAddSpamRuleDialog } from "./AddSpamRuleDialog-chunk.js";
import { showKnowledgeBaseEditor } from "./KnowledgeBaseEditor-chunk.js";
import { getLanguageCode, showTemplateEditor } from "./TemplateEditor-chunk.js";

//#region src/common/settings/SettingsFolder.ts
assertMainOrNode();
var SettingsFolder = class {
	url;
	_isVisibleHandler;
	constructor(name, icon, path, viewerCreator, data) {
		this.name = name;
		this.icon = icon;
		this.path = path;
		this.viewerCreator = viewerCreator;
		this.data = data;
		this.url = typeof path === "string" ? `/settings/${encodeURIComponent(path)}` : `/settings/${encodeURIComponent(path.folder)}/${encodeURIComponent(path.id)}`;
		this._isVisibleHandler = () => true;
	}
	isActive() {
		return isSelectedPrefix(this.url);
	}
	isVisible() {
		return this._isVisibleHandler();
	}
	setIsVisibleHandler(isVisibleHandler) {
		this._isVisibleHandler = isVisibleHandler;
		return this;
	}
	get folder() {
		return typeof this.path === "string" ? null : this.path.folder;
	}
	get id() {
		return typeof this.path === "string" ? null : this.path.id;
	}
};

//#endregion
//#region src/common/settings/login/secondfactor/SecondFactorEditModel.ts
var import_qrcode = __toESM(require_qrcode(), 1);
let VerificationStatus = function(VerificationStatus$1) {
	VerificationStatus$1["Initial"] = "Initial";
	VerificationStatus$1["Progress"] = "Progress";
	VerificationStatus$1["Failed"] = "Failed";
	VerificationStatus$1["Success"] = "Success";
	return VerificationStatus$1;
}({});
const DEFAULT_U2F_NAME = "U2F";
const DEFAULT_TOTP_NAME = "TOTP";
let NameValidationStatus = function(NameValidationStatus$1) {
	NameValidationStatus$1[NameValidationStatus$1["Valid"] = 0] = "Valid";
	NameValidationStatus$1[NameValidationStatus$1["Invalid"] = 1] = "Invalid";
	return NameValidationStatus$1;
}({});
const SecondFactorTypeToNameTextId = Object.freeze({
	[SecondFactorType.totp]: "totpAuthenticator_label",
	[SecondFactorType.u2f]: "u2fSecurityKey_label",
	[SecondFactorType.webauthn]: "u2fSecurityKey_label"
});
var SecondFactorEditModel = class {
	totpCode = "";
	selectedType;
	name = "";
	nameValidationStatus = NameValidationStatus.Valid;
	verificationStatus = VerificationStatus.Initial;
	otpInfo;
	u2fRegistrationData = null;
	constructor(entityClient, user, webauthnClient, totpKeys, webauthnSupported, loginFacade, hostname, domainConfig, updateViewCallback, token) {
		this.entityClient = entityClient;
		this.user = user;
		this.webauthnClient = webauthnClient;
		this.totpKeys = totpKeys;
		this.webauthnSupported = webauthnSupported;
		this.loginFacade = loginFacade;
		this.hostname = hostname;
		this.domainConfig = domainConfig;
		this.updateViewCallback = updateViewCallback;
		this.token = token;
		this.selectedType = webauthnSupported ? SecondFactorType.webauthn : SecondFactorType.totp;
		this.setDefaultNameIfNeeded();
		this.otpInfo = new LazyLoaded(async () => {
			const url = await this.getOtpAuthUrl(this.totpKeys.readableKey);
			const totpQRCodeSvg = isApp() ? null : htmlSanitizer.sanitizeSVG(new import_qrcode.default({
				height: 150,
				width: 150,
				content: url,
				padding: 2,
				xmlDeclaration: false
			}).svg()).html;
			return {
				qrCodeSvg: totpQRCodeSvg,
				url
			};
		});
		this.otpInfo.getAsync().then(() => this.updateViewCallback());
	}
	/**
	* if the user cancels the second factor creation while it's already talking to webAuthn, we want to cancel that
	* process before closing the dialog.
	*/
	abort() {
		this.webauthnClient.abortCurrentOperation();
	}
	/**
	* validation message for use in dialog validators
	*/
	validationMessage() {
		return this.nameValidationStatus === NameValidationStatus.Valid ? null : "textTooLong_msg";
	}
	/**
	* get a list of supported second factor types
	*/
	getFactorTypesOptions() {
		const options = [];
		options.push(SecondFactorType.totp);
		if (this.webauthnSupported) options.push(SecondFactorType.webauthn);
		return options;
	}
	/**
	* call when the selected second factor type changes
	*/
	onTypeSelected(newValue) {
		this.selectedType = newValue;
		this.verificationStatus = newValue === SecondFactorType.webauthn ? VerificationStatus.Initial : VerificationStatus.Progress;
		this.setDefaultNameIfNeeded();
		this.updateNameValidation();
		if (newValue !== SecondFactorType.webauthn) this.webauthnClient.abortCurrentOperation();
	}
	/**
	* call when the display name of the second factor instance changes
	*/
	onNameChange(newValue) {
		this.name = newValue;
		this.updateNameValidation();
	}
	/**
	* call when the validation code for setting up TOTP changes
	*/
	async onTotpValueChange(newValue) {
		this.totpCode = newValue;
		let cleanedValue = newValue.replace(/ /g, "");
		if (cleanedValue.length === 6) {
			const expectedCode = Number(cleanedValue);
			this.verificationStatus = await this.tryCodes(expectedCode, this.totpKeys.key);
		} else this.verificationStatus = VerificationStatus.Progress;
		this.updateViewCallback();
	}
	/**
	* re-validates the input and makes the server calls to actually create a second factor
	* returns the user that the second factor was created in case any follow-up operations
	* are needed
	*/
	async save() {
		this.setDefaultNameIfNeeded();
		if (this.selectedType === SecondFactorType.webauthn) {
			if (this.verificationStatus === VerificationStatus.Progress) return null;
			try {
				this.u2fRegistrationData = await this.webauthnClient.register(this.user._id, this.name);
				this.verificationStatus = VerificationStatus.Success;
			} catch (e) {
				console.log("Webauthn registration failed: ", e);
				this.u2fRegistrationData = null;
				this.verificationStatus = VerificationStatus.Failed;
				return null;
			}
		}
		this.updateViewCallback();
		if (this.selectedType === SecondFactorType.u2f) throw new ProgrammingError(`invalid factor type: ${this.selectedType}`);
		const sf = createSecondFactor({
			_ownerGroup: this.user._ownerGroup,
			name: this.name,
			type: this.selectedType,
			otpSecret: null,
			u2f: null
		});
		if (this.selectedType === SecondFactorType.webauthn) if (this.verificationStatus !== VerificationStatus.Success) throw new UserError("unrecognizedU2fDevice_msg");
else sf.u2f = this.u2fRegistrationData;
else if (this.selectedType === SecondFactorType.totp) if (this.verificationStatus === VerificationStatus.Failed) throw new UserError("totpCodeWrong_msg");
else if (this.verificationStatus === VerificationStatus.Initial || this.verificationStatus === VerificationStatus.Progress) throw new UserError("totpCodeEnter_msg");
else sf.otpSecret = this.totpKeys.key;
		await this.entityClient.setup(assertNotNull(this.user.auth).secondFactors, sf, this.token ? { token: this.token } : undefined);
		return this.user;
	}
	/** see https://github.com/google/google-authenticator/wiki/Key-Uri-Format */
	async getOtpAuthUrl(secret) {
		const userGroupInfo = await this.entityClient.load(GroupInfoTypeRef, this.user.userGroup.groupInfo);
		const issuer = this.domainConfig.firstPartyDomain ? "Tutanota" : this.hostname;
		const account = encodeURI(issuer + ":" + neverNull(userGroupInfo.mailAddress));
		const url = new URL("otpauth://totp/" + account);
		url.searchParams.set("issuer", issuer);
		url.searchParams.set("secret", secret.replace(/ /g, ""));
		url.searchParams.set("algorithm", "SHA1");
		url.searchParams.set("digits", "6");
		url.searchParams.set("period", "30");
		return url.toString();
	}
	/**
	* re-check if the given display name is valid for the current second factor type
	*/
	updateNameValidation() {
		this.nameValidationStatus = this.selectedType !== SecondFactorType.webauthn || validateWebauthnDisplayName(this.name) ? NameValidationStatus.Valid : NameValidationStatus.Invalid;
	}
	/**
	* empty names sometimes lead to errors, so we make sure we have something semi-sensible set in the field.
	*/
	setDefaultNameIfNeeded() {
		const trimmed = this.name.trim();
		if (this.selectedType === SecondFactorType.webauthn && (trimmed === DEFAULT_TOTP_NAME || trimmed.length === 0)) this.name = DEFAULT_U2F_NAME;
else if (this.selectedType === SecondFactorType.totp && (trimmed === DEFAULT_U2F_NAME || trimmed.length === 0)) this.name = DEFAULT_TOTP_NAME;
	}
	/**
	* check if the given validation code is the current, next or last code for the TOTP
	*/
	async tryCodes(expectedCode, key) {
		const time = Math.floor(new Date().getTime() / 1e3 / 30);
		const number = await this.loginFacade.generateTotpCode(time, key);
		if (number === expectedCode) return VerificationStatus.Success;
		const number2 = await this.loginFacade.generateTotpCode(time - 1, key);
		if (number2 === expectedCode) return VerificationStatus.Success;
		const number3 = await this.loginFacade.generateTotpCode(time + 1, key);
		if (number3 === expectedCode) return VerificationStatus.Success;
		return VerificationStatus.Failed;
	}
};

//#endregion
//#region src/common/settings/login/secondfactor/SecondFactorEditDialog.ts
var SecondFactorEditDialog = class SecondFactorEditDialog {
	dialog;
	constructor(model) {
		this.model = model;
		this.dialog = Dialog.createActionDialog({
			title: "add_action",
			allowOkWithReturn: true,
			child: { view: () => this.render() },
			okAction: () => showProgressDialog("pleaseWait_msg", this.okAction()),
			allowCancel: true,
			okActionTextId: "save_action",
			cancelAction: () => this.model.abort(),
			validator: () => this.model.validationMessage()
		});
	}
	async okAction() {
		try {
			const user = await this.model.save();
			if (user != null) this.finalize(user);
		} catch (e) {
			if (e instanceof UserError) Dialog.message(lang.makeTranslation("error_msg", e.message));
else if (e instanceof NotAuthorizedError) {
				this.dialog.close();
				Dialog.message("contactFormSubmitError_msg");
				return;
			} else throw e;
		}
	}
	finalize(user) {
		this.dialog.close();
		showRecoverCodeDialogAfterPasswordVerificationAndInfoDialog(user);
	}
	static async loadAndShow(entityClient, lazyUser, token) {
		const dialog = await showProgressDialog("pleaseWait_msg", this.loadWebauthnClient(entityClient, lazyUser, token));
		dialog.dialog.show();
	}
	render() {
		const optionsItems = this.model.getFactorTypesOptions().map((o) => ({
			name: lang.get(SecondFactorTypeToNameTextId[o]),
			value: o
		}));
		const typeDropdownAttrs = {
			label: "type_label",
			selectedValue: this.model.selectedType,
			selectionChangedHandler: (newValue) => this.model.onTypeSelected(newValue),
			items: optionsItems,
			dropdownWidth: 300
		};
		const nameFieldAttrs = {
			label: "name_label",
			helpLabel: () => this.renderHelpLabel(),
			value: this.model.name,
			oninput: (value) => this.model.onNameChange(value)
		};
		return [
			mithril_default(DropDownSelector, typeDropdownAttrs),
			mithril_default(TextField, nameFieldAttrs),
			this.renderTypeSpecificFields()
		];
	}
	renderHelpLabel() {
		return this.model.nameValidationStatus === NameValidationStatus.Valid ? mithril_default("", lang.get("secondFactorNameInfo_msg")) : mithril_default(".b.content-accent-fg", lang.get("textTooLong_msg"));
	}
	renderTypeSpecificFields() {
		switch (this.model.selectedType) {
			case SecondFactorType.totp: return this.renderOtpFields();
			case SecondFactorType.webauthn: return this.renderU2FFields();
			default: throw new ProgrammingError(`Invalid 2fa type: ${this.model.selectedType}`);
		}
	}
	renderU2FFields() {
		return this.model.verificationStatus === VerificationStatus.Initial ? null : mithril_default("p.flex.items-center", [mithril_default(".mr-s", this.statusIcon()), mithril_default("", this.statusMessage())]);
	}
	renderOtpFields() {
		const copyButtonAttrs = {
			title: "copy_action",
			click: () => copyToClipboard(this.model.totpKeys.readableKey),
			icon: Icons.Clipboard,
			size: ButtonSize.Compact
		};
		return mithril_default(".mb", [
			mithril_default(TextField, {
				label: "totpSecret_label",
				helpLabel: () => lang.get(isApp() ? "totpTransferSecretApp_msg" : "totpTransferSecret_msg"),
				value: this.model.totpKeys.readableKey,
				injectionsRight: () => mithril_default(IconButton, copyButtonAttrs),
				isReadOnly: true
			}),
			isApp() ? mithril_default(".pt", mithril_default(LoginButton, {
				label: "addOpenOTPApp_action",
				onclick: () => this.openOtpLink()
			})) : this.renderOtpQrCode(),
			mithril_default(TextField, {
				label: "totpCode_label",
				value: this.model.totpCode,
				helpLabel: () => this.statusMessage(),
				autocompleteAs: Autocomplete.oneTimeCode,
				oninput: (newValue) => this.model.onTotpValueChange(newValue)
			})
		]);
	}
	renderOtpQrCode() {
		const otpInfo = this.model.otpInfo.getSync();
		if (otpInfo) {
			const qrCodeSvg = assertNotNull(otpInfo.qrCodeSvg);
			return mithril_default(".flex-center.pt", mithril_default.trust(qrCodeSvg));
		} else return null;
	}
	async openOtpLink() {
		const { url } = await this.model.otpInfo.getAsync();
		const successful = await locator.systemFacade.openLink(url);
		if (!successful) Dialog.message("noAppAvailable_msg");
	}
	static async loadWebauthnClient(entityClient, lazyUser, token) {
		const totpKeys = await locator.loginFacade.generateTotpSecret();
		const user = await lazyUser.getAsync();
		const webauthnSupported = await locator.webAuthn.isSupported();
		const model = new SecondFactorEditModel(entityClient, user, locator.webAuthn, totpKeys, webauthnSupported, locator.loginFacade, location.hostname, locator.domainConfigProvider().getCurrentDomainConfig(), mithril_default.redraw, token);
		return new SecondFactorEditDialog(model);
	}
	statusIcon() {
		switch (this.model.verificationStatus) {
			case VerificationStatus.Progress: return progressIcon();
			case VerificationStatus.Success: return mithril_default(Icon, {
				icon: Icons.Checkmark,
				size: IconSize.Medium,
				style: { fill: theme.content_accent }
			});
			case VerificationStatus.Failed: return mithril_default(Icon, {
				icon: Icons.Cancel,
				size: IconSize.Medium,
				style: { fill: theme.content_accent }
			});
			default: return null;
		}
	}
	statusMessage() {
		if (this.model.selectedType === SecondFactorType.webauthn) return this.model.verificationStatus === VerificationStatus.Success ? lang.get("registeredU2fDevice_msg") : lang.get("unrecognizedU2fDevice_msg");
else if (this.model.verificationStatus === VerificationStatus.Success) return lang.get("totpCodeConfirmed_msg");
else if (this.model.verificationStatus === VerificationStatus.Failed) return lang.get("totpCodeWrong_msg");
else return lang.get("totpCodeEnter_msg");
	}
};

//#endregion
//#region src/common/settings/login/secondfactor/SecondFactorsEditForm.ts
assertMainOrNode();
var SecondFactorsEditForm = class {
	_2FALineAttrs;
	constructor(user, domainConfigProvider, loginFacade, askForPassword, isDeactivated) {
		this.user = user;
		this.domainConfigProvider = domainConfigProvider;
		this.loginFacade = loginFacade;
		this.askForPassword = askForPassword;
		this.isDeactivated = isDeactivated;
		this._2FALineAttrs = [];
		this._updateSecondFactors();
		this.view = this.view.bind(this);
	}
	view() {
		const secondFactorTableAttrs = {
			columnHeading: ["name_label", "type_label"],
			columnWidths: [ColumnWidth.Largest, ColumnWidth.Largest],
			lines: this._2FALineAttrs,
			showActionButtonColumn: true,
			addButtonAttrs: {
				title: "addSecondFactor_action",
				click: () => {
					if (this.isDeactivated) Dialog.message("userAccountDeactivated_msg");
else if (this.askForPassword) this.showAddSecondFactorDialogWithPasswordCheck();
else this.showAddSecondFactorDialog();
				},
				icon: Icons.Add,
				size: ButtonSize.Compact
			}
		};
		return [
			mithril_default(".h4.mt-l", lang.get("secondFactorAuthentication_label")),
			mithril_default(Table, secondFactorTableAttrs),
			this.domainConfigProvider.getCurrentDomainConfig().firstPartyDomain ? [ifAllowedTutaLinks(locator.logins, InfoLink.SecondFactor, (link) => mithril_default(MoreInfoLink, {
				link,
				isSmall: true
			}))] : null
		];
	}
	async _updateSecondFactors() {
		const user = await this.user.getAsync();
		const factors = await locator.entityClient.loadAll(SecondFactorTypeRef, neverNull(user.auth).secondFactors);
		const loginDomains = new Set();
		for (const f of factors) {
			const isU2F = f.type === SecondFactorType.u2f || f.type === SecondFactorType.webauthn;
			if (isU2F) {
				const loginDomain = appIdToLoginUrl(assertNotNull(f.u2f).appId, this.domainConfigProvider);
				loginDomains.add(loginDomain);
			}
		}
		this._2FALineAttrs = factors.map((f) => {
			const removeButtonAttrs = {
				title: "remove_action",
				click: () => {
					if (this.isDeactivated) Dialog.message("userAccountDeactivated_msg");
else if (this.askForPassword) this.removeSecondFactorWithPasswordCheck(f);
else this.removeSecondFactor(f);
				},
				icon: Icons.Cancel,
				size: ButtonSize.Compact
			};
			const factorName = this.formatSecondFactorName(f, loginDomains);
			const type = assertEnumValue(SecondFactorType, f.type);
			return {
				cells: [factorName, lang.get(SecondFactorTypeToNameTextId[type])],
				actionButtonAttrs: locator.logins.getUserController().isGlobalAdmin() ? removeButtonAttrs : null
			};
		});
		mithril_default.redraw();
	}
	formatSecondFactorName(factor, loginDomains) {
		const isU2F = factor.type === SecondFactorType.u2f || factor.type === SecondFactorType.webauthn;
		const requiresDomainDisambiguation = isU2F && loginDomains.size > 1;
		if (requiresDomainDisambiguation) {
			const prefix = factor.name.length > 0 ? " - " : "";
			const loginUrlString = appIdToLoginUrl(neverNull(factor.u2f).appId, this.domainConfigProvider);
			const loginDomain = new URL(loginUrlString).hostname;
			return factor.name + prefix + loginDomain;
		} else return factor.name;
	}
	showAddSecondFactorDialogWithPasswordCheck() {
		const dialog = showRequestPasswordDialog({
			action: async (passphrase) => {
				try {
					const token = await this.loginFacade.getVerifierToken(passphrase);
					this.showAddSecondFactorDialog(token);
				} catch (e) {
					if (e instanceof NotAuthorizedError) return lang.get("invalidPassword_msg");
else throw e;
				}
				dialog.close();
				return "";
			},
			cancel: {
				textId: "cancel_action",
				action: noOp
			}
		});
	}
	showAddSecondFactorDialog(token) {
		SecondFactorEditDialog.loadAndShow(locator.entityClient, this.user, token);
	}
	removeSecondFactorWithPasswordCheck(secondFactorToRemove) {
		const dialog = showRequestPasswordDialog({
			action: async (passphrase) => {
				let token = undefined;
				try {
					token = await this.loginFacade.getVerifierToken(passphrase);
				} catch (e) {
					if (e instanceof NotAuthorizedError) return lang.get("invalidPassword_msg");
else throw e;
				}
				this.removeSecondFactor(secondFactorToRemove, token);
				dialog.close();
				return "";
			},
			messageText: lang.get("confirmDeleteSecondFactor_msg"),
			cancel: {
				textId: "cancel_action",
				action: noOp
			}
		});
	}
	removeSecondFactor(secondFactorToRemove, token) {
		try {
			let options = undefined;
			if (token) options = { extraHeaders: { token } };
			showProgressDialog("pleaseWait_msg", locator.entityClient.erase(secondFactorToRemove, options));
		} catch (e) {
			if (e instanceof NotFoundError) console.log("could not delete second factor (already deleted)");
else throw e;
		}
	}
	entityEventReceived(update) {
		if (isUpdateForTypeRef(SecondFactorTypeRef, update)) return this._updateSecondFactors();
else return Promise.resolve();
	}
};

//#endregion
//#region src/common/settings/login/LoginSettingsViewer.ts
var import_stream$13 = __toESM(require_stream(), 1);
assertMainOrNode();
var LoginSettingsViewer = class {
	_mailAddress = (0, import_stream$13.default)(neverNull(locator.logins.getUserController().userGroupInfo.mailAddress));
	_stars = (0, import_stream$13.default)("***");
	_closedSessionsExpanded = (0, import_stream$13.default)(false);
	_sessions = [];
	_secondFactorsForm = new SecondFactorsEditForm(new LazyLoaded(() => Promise.resolve(locator.logins.getUserController().user)), locator.domainConfigProvider(), locator.loginFacade, true, false);
	_usageTestModel;
	credentialEncryptionMode = null;
	appLockMethod = null;
	constructor(credentialsProvider, mobileSystemFacade) {
		this.credentialsProvider = credentialsProvider;
		this.mobileSystemFacade = mobileSystemFacade;
		this._usageTestModel = locator.usageTestModel;
		this._updateSessions();
		this.updateAppLockData();
	}
	async updateAppLockData() {
		if (isDesktop()) this.credentialEncryptionMode = await this.credentialsProvider.getCredentialEncryptionMode();
else if (this.mobileSystemFacade) this.appLockMethod = await this.mobileSystemFacade.getAppLockMethod();
		mithril_default.redraw();
	}
	view() {
		const mailAddressAttrs = {
			label: "mailAddress_label",
			value: this._mailAddress(),
			oninput: this._mailAddress,
			isReadOnly: true
		};
		const changePasswordButtonAttrs = {
			title: "changePassword_label",
			click: () => showChangeOwnPasswordDialog(),
			icon: Icons.Edit,
			size: ButtonSize.Compact
		};
		const passwordAttrs = {
			label: "password_label",
			value: this._stars(),
			oninput: this._stars,
			isReadOnly: true,
			injectionsRight: () => mithril_default(IconButton, changePasswordButtonAttrs)
		};
		const recoveryCodeDropdownButtonAttrs = attachDropdown({
			mainButtonAttrs: {
				title: "edit_action",
				icon: Icons.Edit,
				size: ButtonSize.Compact
			},
			childAttrs: () => [locator.logins.getUserController().user.auth?.recoverCode ? {
				label: "show_action",
				click: () => showRecoverCodeDialogAfterPasswordVerification("get")
			} : null, {
				label: neverNull(locator.logins.getUserController().user.auth).recoverCode ? "update_action" : "setUp_action",
				click: () => showRecoverCodeDialogAfterPasswordVerification("create")
			}],
			showDropdown: () => true
		});
		const recoveryCodeFieldAttrs = {
			label: "recoveryCode_label",
			helpLabel: () => {
				return ifAllowedTutaLinks(locator.logins, InfoLink.RecoverCode, (link) => [mithril_default(MoreInfoLink, { link })]);
			},
			value: this._stars(),
			oninput: this._stars,
			isReadOnly: true,
			injectionsRight: () => mithril_default(IconButton, recoveryCodeDropdownButtonAttrs)
		};
		const usageDataOptInAttrs = {
			label: "userUsageDataOptIn_label",
			items: [
				{
					name: lang.get("activated_label"),
					value: true
				},
				{
					name: lang.get("deactivated_label"),
					value: false
				},
				{
					name: lang.get("undecided_label"),
					value: null,
					selectable: false
				}
			],
			selectedValue: locator.logins.getUserController().userSettingsGroupRoot.usageDataOptedIn,
			selectionChangedHandler: (v) => {
				this._usageTestModel.setOptInDecision(assertNotNull(v));
			},
			helpLabel: () => {
				return ifAllowedTutaLinks(locator.logins, InfoLink.Usage, (link) => [mithril_default("span", lang.get("userUsageDataOptInInfo_msg") + " "), mithril_default(MoreInfoLink, { link })]);
			},
			dropdownWidth: 250
		};
		if (locator.logins.isUserLoggedIn()) {
			const user = locator.logins.getUserController();
			return mithril_default("", [mithril_default("#user-settings.fill-absolute.scroll.plr-l.pb-xl", [
				mithril_default(".h4.mt-l", lang.get("loginCredentials_label")),
				mithril_default(TextField, mailAddressAttrs),
				mithril_default(TextField, passwordAttrs),
				user.isGlobalAdmin() ? mithril_default(TextField, recoveryCodeFieldAttrs) : null,
				this.renderAppLockField(),
				mithril_default(this._secondFactorsForm),
				mithril_default(".h4.mt-l", lang.get("activeSessions_label")),
				this._renderActiveSessions(),
				mithril_default(".small", lang.get("sessionsInfo_msg")),
				mithril_default(".flex-space-between.items-center.mt-l.mb-s", [mithril_default(".h4", lang.get("closedSessions_label")), mithril_default(ExpanderButton, {
					label: "show_action",
					expanded: this._closedSessionsExpanded(),
					onExpandedChange: this._closedSessionsExpanded,
					showWarning: false
				})]),
				mithril_default(ExpanderPanel, { expanded: this._closedSessionsExpanded() }, this._renderClosedSessions()),
				mithril_default(".small", lang.get("sessionsWillBeDeleted_msg")),
				mithril_default(".small", lang.get("sessionsInfo_msg")),
				this._usageTestModel.isCustomerOptedOut() ? null : mithril_default("", [mithril_default(".h4.mt-l", lang.get("usageData_label")), mithril_default(DropDownSelector, usageDataOptInAttrs)])
			])]);
		} else return null;
	}
	renderAppLockField() {
		const mobileSystemFacade = this.mobileSystemFacade;
		if (mobileSystemFacade) {
			const onEdit = async () => {
				const { showAppLockMethodDialog } = await import("./SelectAppLockMethodDialog2-chunk.js");
				await showAppLockMethodDialog(mobileSystemFacade);
				await this.updateAppLockData();
			};
			return mithril_default(TextField, {
				label: "credentialsEncryptionMode_label",
				value: this.appLockMethodName(this.appLockMethod ?? AppLockMethod.None),
				isReadOnly: true,
				injectionsRight: () => mithril_default(IconButton, {
					title: "edit_action",
					icon: Icons.Edit,
					click: () => onEdit()
				})
			});
		} else if (isDesktop()) {
			const usedMode = this.credentialEncryptionMode ?? CredentialEncryptionMode.DEVICE_LOCK;
			return mithril_default(TextField, {
				label: "credentialsEncryptionMode_label",
				value: this.credentialsEncryptionModeName(usedMode),
				isReadOnly: true,
				injectionsRight: () => mithril_default(IconButton, {
					title: "edit_action",
					icon: Icons.Edit,
					click: () => showCredentialsEncryptionModeDialog(this.credentialsProvider).then(() => this.updateAppLockData())
				})
			});
		}
	}
	async _updateSessions() {
		const sessions = await locator.entityClient.loadAll(SessionTypeRef, neverNull(locator.logins.getUserController().user.auth).sessions);
		sessions.sort((s1, s2) => s2.lastAccessTime.getTime() - s1.lastAccessTime.getTime());
		this._sessions = sessions;
		mithril_default.redraw();
	}
	_renderActiveSessions() {
		return mithril_default(Table, {
			columnHeading: ["client_label"],
			columnWidths: [ColumnWidth.Largest],
			showActionButtonColumn: true,
			lines: this._sessions.filter((session) => session.state === SessionState.SESSION_STATE_ACTIVE).map((session) => {
				const thisSession = elementIdPart(locator.logins.getUserController().sessionId) === getElementId(session);
				return {
					cells: () => [{
						main: thisSession ? lang.get("thisClient_label") : session.clientIdentifier,
						info: [lang.get("lastAccessWithTime_label", { "{time}": formatDateTimeFromYesterdayOn(session.lastAccessTime) }), session.loginIpAddress ? session.loginIpAddress : ""],
						click: () => this.showActiveSessionInfoDialog(session, thisSession)
					}],
					actionButtonAttrs: thisSession ? null : {
						title: "closeSession_action",
						click: () => {
							this._closeSession(session);
						},
						icon: Icons.Cancel,
						size: ButtonSize.Compact
					}
				};
			})
		});
	}
	showActiveSessionInfoDialog(session, isThisSession) {
		const actionDialogProperties = {
			title: "details_label",
			child: { view: () => {
				return [
					mithril_default(TextField, {
						label: "client_label",
						value: isThisSession ? lang.get("thisClient_label") : session.clientIdentifier,
						isReadOnly: true
					}),
					mithril_default(TextField, {
						label: "lastAccess_label",
						value: `${formatDateTimeFromYesterdayOn(session.lastAccessTime)}`,
						isReadOnly: true
					}),
					mithril_default(TextField, {
						label: "IpAddress_label",
						value: session.loginIpAddress ? session.loginIpAddress : "",
						isReadOnly: true
					})
				];
			} },
			okAction: null,
			allowCancel: true,
			allowOkWithReturn: false,
			cancelActionTextId: "close_alt"
		};
		Dialog.showActionDialog(actionDialogProperties);
	}
	_closeSession(session) {
		locator.entityClient.erase(session).catch(ofClass(NotFoundError, () => {
			console.log(`session ${JSON.stringify(session._id)} already deleted`);
		}));
	}
	async entityEventsReceived(updates) {
		for (const update of updates) {
			if (isUpdateForTypeRef(SessionTypeRef, update)) await this._updateSessions();
else if (isUpdateForTypeRef(CustomerPropertiesTypeRef, update) || isUpdateForTypeRef(UserSettingsGroupRootTypeRef, update)) mithril_default.redraw();
			await this._secondFactorsForm.entityEventReceived(update);
		}
	}
	credentialsEncryptionModeName(credentialsEncryptionMode) {
		const mapping = {
			[CredentialEncryptionMode.DEVICE_LOCK]: "credentialsEncryptionModeDeviceLock_label",
			[CredentialEncryptionMode.SYSTEM_PASSWORD]: "credentialsEncryptionModeDeviceCredentials_label",
			[CredentialEncryptionMode.BIOMETRICS]: "credentialsEncryptionModeBiometrics_label",
			[CredentialEncryptionMode.APP_PASSWORD]: "credentialsEncryptionModeAppPassword_label"
		};
		return lang.get(mapping[credentialsEncryptionMode]);
	}
	appLockMethodName(appLockMethod) {
		const mapping = {
			[AppLockMethod.None]: "credentialsEncryptionModeDeviceLock_label",
			[AppLockMethod.SystemPassOrBiometrics]: "credentialsEncryptionModeDeviceCredentials_label",
			[AppLockMethod.Biometrics]: "credentialsEncryptionModeBiometrics_label"
		};
		return lang.get(mapping[appLockMethod]);
	}
	_renderClosedSessions() {
		const lines = this._sessions.filter((session) => session.state !== SessionState.SESSION_STATE_ACTIVE).map((session) => {
			return { cells: [
				session.clientIdentifier,
				formatDateTimeFromYesterdayOn(session.lastAccessTime),
				session.loginIpAddress ? session.loginIpAddress : ""
			] };
		});
		return mithril_default(Table, {
			columnHeading: [
				"client_label",
				"lastAccess_label",
				"IpAddress_label"
			],
			columnWidths: [
				ColumnWidth.Small,
				ColumnWidth.Largest,
				ColumnWidth.Small
			],
			showActionButtonColumn: true,
			lines
		});
	}
};

//#endregion
//#region src/mail-app/settings/LoadingUtils.ts
var GroupData = class {
	groupId;
	displayName;
	constructor(groupId, displayName) {
		this.groupId = groupId;
		this.displayName = displayName;
	}
};
function loadGroupDisplayName(groupId) {
	return locator.entityClient.load(GroupTypeRef, groupId).then((group) => {
		if (group.user && group.type !== GroupType.User) return locator.entityClient.load(UserTypeRef, group.user).then((user) => {
			return locator.entityClient.load(GroupInfoTypeRef, user.userGroup.groupInfo);
		});
else return locator.entityClient.load(GroupInfoTypeRef, group.groupInfo);
	}).then((groupInfo) => {
		return getGroupInfoDisplayName(groupInfo);
	});
}
async function loadEnabledTeamMailGroups(customer) {
	const infos = await locator.entityClient.loadAll(GroupInfoTypeRef, customer.teamGroups);
	return infos.filter((teamGroupInfo) => {
		if (teamGroupInfo.deleted) return false;
else return locator.entityClient.load(GroupTypeRef, teamGroupInfo.group).then((teamGroup) => teamGroup.type === GroupType.Mail);
	}).map((mailTeamGroupInfo) => new GroupData(mailTeamGroupInfo.group, getGroupInfoDisplayName(mailTeamGroupInfo)));
}
async function loadEnabledUserMailGroups(customer) {
	const groupInfos = await locator.entityClient.loadAll(GroupInfoTypeRef, customer.userGroups);
	return pMap(groupInfos.filter((g) => !g.deleted), async (userGroupInfo) => {
		const userGroup = await locator.entityClient.load(GroupTypeRef, userGroupInfo.group);
		const user = await locator.entityClient.load(UserTypeRef, neverNull(userGroup.user));
		return new GroupData(getUserGroupMemberships(user, GroupType.Mail)[0].group, getGroupInfoDisplayName(userGroupInfo));
	});
}

//#endregion
//#region src/mail-app/settings/DomainDnsStatus.ts
assertMainOrNode();
var DomainDnsStatus = class {
	status;
	domain;
	constructor(cleanDomainName, customerId) {
		this.domain = cleanDomainName;
		this.status = new LazyLoaded(() => {
			let data = createCustomDomainCheckGetIn({
				domain: cleanDomainName,
				customer: customerId ?? null
			});
			return locator.serviceExecutor.get(CustomDomainCheckService, data);
		});
	}
	getLoadedCustomDomainCheckGetOut() {
		return this.status.getLoaded();
	}
	/**
	* Only checks for the required records (MX and spf) to be fine.
	* We have this less strict check because one can already use the custom domain (with limitations) even if certain records like dmarc are not yet set properly.
	* We want to allow finishing the dialogs succesfully even if just these basic check pass.
	* @returns {boolean} true if records are fine.
	*/
	areRecordsFine() {
		if (!this.status.isLoaded() || this.status.getLoaded().checkResult !== CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_OK) return false;
		const requiredMissingRecords = this.status.getLoaded().missingRecords.filter((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_MX || r.type === DnsRecordType.DNS_RECORD_TYPE_TXT_SPF);
		return !requiredMissingRecords.length;
	}
	/**
	* Checks that ALL records are fine. Even the ones that are only recommended.
	* We need this check on top of areRecordsFine() because we want to display if some records are not yet set correctly even if the domain can already be used.
	* @returns {boolean} true if all records are fine.
	*/
	areAllRecordsFine() {
		return this.status.isLoaded() && this.status.getLoaded().checkResult === CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_OK && this.status.getLoaded().missingRecords.length === 0 && this.status.getLoaded().invalidRecords.length === 0;
	}
	getDnsStatusInfo() {
		if (this.status.isLoaded()) {
			let result = this.status.getLoaded();
			if (result.checkResult === CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_OK) {
				let mxOk = !result.missingRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_MX) && !result.invalidRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_MX);
				let spfOk = !result.missingRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_TXT_SPF) && !result.invalidRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_TXT_SPF);
				let dkimOk = !result.missingRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_DKIM) && !result.invalidRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_DKIM);
				let mtaStsOk = !result.missingRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_MTA_STS) && !result.invalidRecords.some((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_MTA_STS);
				let dmarcWarn = result.missingRecords.find((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_TXT_DMARC);
				let dmarcBad = result.invalidRecords.find((r) => r.type === DnsRecordType.DNS_RECORD_TYPE_TXT_DMARC);
				return "MX " + (mxOk ? DnsRecordValidation.OK : DnsRecordValidation.BAD) + ", SPF " + (spfOk ? DnsRecordValidation.OK : DnsRecordValidation.BAD) + ", MTA-STS " + (mtaStsOk ? DnsRecordValidation.OK : DnsRecordValidation.BAD) + ", DKIM " + (dkimOk ? DnsRecordValidation.OK : DnsRecordValidation.BAD) + ", DMARC " + (dmarcBad || dmarcWarn ? DnsRecordValidation.BAD : DnsRecordValidation.OK);
			} else return "DNS " + DnsRecordValidation.BAD;
		} else return lang.get("loading_msg");
	}
	loadCurrentStatus() {
		if (this.status.isLoaded()) return this.status.reload().then(noOp);
else return this.status.getAsync().then(noOp);
	}
};

//#endregion
//#region src/mail-app/settings/emaildomain/DnsRecordTable.ts
var ActualDnsRecordType = function(ActualDnsRecordType$1) {
	ActualDnsRecordType$1["MX"] = "MX";
	ActualDnsRecordType$1["TXT"] = "TXT";
	ActualDnsRecordType$1["CNAME"] = "CNAME";
	return ActualDnsRecordType$1;
}(ActualDnsRecordType || {});
const DnsRecordTable = Object.freeze({
	[DnsRecordType.DNS_RECORD_TYPE_MX]: ActualDnsRecordType.MX,
	[DnsRecordType.DNS_RECORD_TYPE_TXT_SPF]: ActualDnsRecordType.TXT,
	[DnsRecordType.DNS_RECORD_TYPE_CNAME_DKIM]: ActualDnsRecordType.CNAME,
	[DnsRecordType.DNS_RECORD_TYPE_TXT_DMARC]: ActualDnsRecordType.TXT,
	[DnsRecordType.DNS_RECORD_TYPE_CNAME_MTA_STS]: ActualDnsRecordType.CNAME,
	[DnsRecordType.DNS_RECORD_TYPE_TXT_VERIFY]: ActualDnsRecordType.TXT
});
function createDnsRecordTable(records) {
	return mithril_default(Table, {
		columnHeading: ["type_label", "dnsRecordHostOrName_label"],
		columnWidths: [ColumnWidth.Small, ColumnWidth.Largest],
		showActionButtonColumn: false,
		lines: records.map((r) => ({ cells: () => [{ main: DnsRecordTable[r.type] }, {
			main: r.subdomain ? r.subdomain : "@",
			info: [r.value]
		}] }))
	});
}

//#endregion
//#region src/mail-app/settings/emaildomain/VerifyDnsRecordsPage.ts
assertMainOrNode();
var VerifyDnsRecordsPage = class {
	oncreate(vnode) {
		const data = vnode.attrs.data;
		data.domainStatus = new DomainDnsStatus(data.domain());
		_updateDnsStatus(data.domainStatus);
	}
	view(vnode) {
		const a = vnode.attrs;
		return [
			mithril_default("h4.mt-l.text-center", lang.get("verifyDNSRecords_title")),
			mithril_default("p", lang.get("verifyDNSRecords_msg")),
			a.data.domainStatus.status.isLoaded() ? mithril_default("", [renderCheckResult(a.data.domainStatus), mithril_default(".flex-center.full-width.pt-l.mb-l", mithril_default(LoginButton, {
				label: "finish_action",
				class: "small-login-button",
				onclick: () => this._finishDialog(a.data, downcast(vnode)?.dom ?? null)
			}))]) : mithril_default("", [lang.get("loadingDNSRecords_msg"), mithril_default(".flex-center.full-width.pt-l.mb-l", mithril_default(Button, {
				type: ButtonType.Secondary,
				label: "refresh_action",
				click: () => _updateDnsStatus(a.data.domainStatus)
			}))])
		];
	}
	_finishDialog(data, dom) {
		const leaveUnfinishedDialogAttrs = {
			title: "quitSetup_title",
			child: { view: () => {
				return [mithril_default("p", lang.get("quitDNSSetup_msg"))];
			} },
			okAction: (dialog) => {
				dialog.close();
				emitWizardEvent(dom, WizardEventType.CLOSE_DIALOG);
			}
		};
		return _updateDnsStatus(data.domainStatus).then(() => {
			if (data.domainStatus.areRecordsFine()) emitWizardEvent(dom, WizardEventType.SHOW_NEXT_PAGE);
else Dialog.showActionDialog(leaveUnfinishedDialogAttrs);
		});
	}
};
function _updateDnsStatus(domainStatus) {
	return domainStatus.loadCurrentStatus().then(() => {
		mithril_default.redraw();
	});
}
function _getDisplayableRecordValue(record) {
	if (!record.value.endsWith(".") && (record.type === DnsRecordType.DNS_RECORD_TYPE_MX || record.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_DKIM || record.type === DnsRecordType.DNS_RECORD_TYPE_CNAME_MTA_STS)) return record.value + ".";
	return record.value;
}
function createDnsRecordTableN(records, refreshButtonAttrs) {
	return mithril_default(Table, {
		columnHeading: [
			"type_label",
			"dnsRecordHostOrName_label",
			"dnsRecordValueOrPointsTo_label"
		],
		addButtonAttrs: refreshButtonAttrs,
		columnWidths: [
			ColumnWidth.Small,
			ColumnWidth.Small,
			ColumnWidth.Largest
		],
		showActionButtonColumn: true,
		lines: records.map((r) => {
			return { cells: () => [
				{ main: DnsRecordTable[r.record.type] },
				{ main: r.record.subdomain ? r.record.subdomain : "@" },
				{
					main: r.record.value,
					info: r.helpInfo
				}
			] };
		})
	});
}
function renderCheckResult(domainStatus, hideRefreshButton = false) {
	const checkReturn = domainStatus.getLoadedCustomDomainCheckGetOut();
	const { requiredRecords, missingRecords, invalidRecords } = checkReturn;
	const checkResult = assertEnumValue(CustomDomainCheckResult, checkReturn.checkResult);
	if (checkResult === CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_OK) {
		const validatedRecords = requiredRecords.map((record) => {
			const displayableRecordValue = _getDisplayableRecordValue(record);
			const helpInfo = [];
			let validatedRecord = null;
			for (let missingRecord of findDnsRecordInList(record, missingRecords)) {
				validatedRecord = record;
				if (record.type === DnsRecordType.DNS_RECORD_TYPE_TXT_DMARC) helpInfo.push(`${DnsRecordValidation.BAD} ${lang.get("recommendedDNSValue_label")}: ${displayableRecordValue}`);
else helpInfo.push(`${DnsRecordValidation.BAD} ${lang.get("addDNSValue_label")}: ${displayableRecordValue}`);
			}
			for (let invalidRecord of findDnsRecordInList(record, invalidRecords)) {
				validatedRecord = record;
				helpInfo.push(`${DnsRecordValidation.BAD} ${lang.get("removeDNSValue_label")}: ${invalidRecord.value}`);
			}
			if (validatedRecord == null) {
				validatedRecord = record;
				helpInfo.push(`${DnsRecordValidation.OK} ${lang.get("correctDNSValue_label")}`);
			}
			validatedRecord.value = displayableRecordValue;
			return {
				record: validatedRecord,
				helpInfo
			};
		});
		return [
			mithril_default(".mt-m.mb-s", lang.get("setDnsRecords_msg")),
			createDnsRecordTableN(validatedRecords, hideRefreshButton ? null : {
				title: "refresh_action",
				icon: BootIcons.Progress,
				size: ButtonSize.Compact,
				click: () => _updateDnsStatus(domainStatus)
			}),
			mithril_default(MoreInfoLink, {
				link: InfoLink.DomainInfo,
				class: "mt-m",
				isSmall: true
			})
		];
	} else {
		const errorMessageMap = {
			[CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_OK]: "emptyString_msg",
			[CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_DNS_LOOKUP_FAILED]: "customDomainErrorDnsLookupFailure_msg",
			[CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_DOMAIN_NOT_FOUND]: "customDomainErrorDomainNotFound_msg",
			[CustomDomainCheckResult.CUSTOM_DOMAIN_CHECK_RESULT_NAMESERVER_NOT_FOUND]: "customDomainErrorNameserverNotFound_msg"
		};
		return lang.get(errorMessageMap[checkResult]);
	}
}
function findDnsRecordInList(record, recordList) {
	return recordList.filter((r) => r.type === record.type && r.subdomain === record.subdomain);
}
var VerifyDnsRecordsPageAttrs = class {
	data;
	constructor(domainData) {
		this.data = domainData;
	}
	headerTitle() {
		return "domainSetup_title";
	}
	nextAction(showErrorDialog) {
		return Promise.resolve(true);
	}
	isSkipAvailable() {
		return false;
	}
	isEnabled() {
		return true;
	}
};

//#endregion
//#region src/mail-app/settings/CheckDomainDnsStatusDialog.ts
assertMainOrNode();
function showDnsCheckDialog(domainStatus) {
	let dialog = Dialog.showActionDialog({
		type: DialogType.EditLarger,
		title: "checkDnsRecords_action",
		okActionTextId: "checkAgain_action",
		cancelActionTextId: "close_alt",
		child: () => renderCheckResult(domainStatus, true),
		okAction: () => {
			domainStatus.loadCurrentStatus().then(() => {
				if (domainStatus.areRecordsFine()) dialog.close();
else mithril_default.redraw();
			});
		}
	});
}

//#endregion
//#region src/mail-app/settings/RejectedSendersInfoDialog.ts
function showRejectedSendersInfoDialog(rejectedSender) {
	const actionDialogProperties = {
		title: "details_label",
		child: { view: () => {
			return [
				mithril_default(TextField, {
					label: "emailSender_label",
					value: rejectedSender.senderMailAddress,
					isReadOnly: true
				}),
				mithril_default(TextField, {
					label: "mailServer_label",
					value: `${rejectedSender.senderHostname} (${rejectedSender.senderIp})`,
					isReadOnly: true
				}),
				mithril_default(TextField, {
					label: "emailRecipient_label",
					value: rejectedSender.recipientMailAddress,
					isReadOnly: true
				}),
				mithril_default(TextField, {
					label: "rejectReason_label",
					value: rejectedSender.reason,
					isReadOnly: true
				})
			];
		} },
		okAction: null,
		allowCancel: true,
		allowOkWithReturn: false,
		cancelActionTextId: "close_alt"
	};
	Dialog.showActionDialog(actionDialogProperties);
}

//#endregion
//#region src/common/settings/mailaddress/AddAliasDialog.ts
const FAILURE_USER_DISABLED = "mailaddressaliasservice.group_disabled";
function showAddAliasDialog(model, isNewPaidPlan) {
	model.getAvailableDomains().then((domains) => {
		const hasCustomDomains = domains.some((domain) => !TUTA_MAIL_ADDRESS_DOMAINS.includes(domain.domain));
		if (model.aliasCount && filterInt(model.aliasCount.usedAliases) >= filterInt(model.aliasCount.totalAliases)) {
			if (!(isNewPaidPlan && hasCustomDomains)) {
				model.handleTooManyAliases().catch(ofClass(UpgradeRequiredError, (e) => showPlanUpgradeRequiredDialog(e.plans, e.message)));
				return;
			}
		}
		let isVerificationBusy = false;
		let mailAddress;
		let formErrorId = "mailAddressNeutral_msg";
		let formDomain = getFirstOrThrow(domains);
		if (!isNewPaidPlan && !hasCustomDomains) formDomain = domains.find((domain) => domain.domain === DEFAULT_FREE_MAIL_ADDRESS_SIGNUP_DOMAIN) ?? formDomain;
		let senderName = model.defaultSenderName();
		const addEmailAliasOkAction = (dialog) => {
			if (isVerificationBusy) return;
			if (formErrorId) {
				Dialog.message(formErrorId);
				return;
			}
			addAlias(model, mailAddress, senderName);
			dialog.close();
		};
		Dialog.showActionDialog({
			title: "addEmailAlias_label",
			child: { view: () => {
				return [
					mithril_default(SelectMailAddressForm, {
						selectedDomain: formDomain,
						availableDomains: domains,
						onValidationResult: (email, validationResult) => {
							if (validationResult.isValid) {
								mailAddress = email;
								formErrorId = null;
							} else formErrorId = validationResult.errorId;
						},
						onBusyStateChanged: (isBusy) => isVerificationBusy = isBusy,
						onDomainChanged: (domain) => {
							if (!domain.isPaid || isNewPaidPlan) formDomain = domain;
else Dialog.confirm(lang.makeTranslation("confirm_msg", `${lang.get("paidEmailDomainLegacy_msg")}\n${lang.get("changePaidPlan_msg")}`)).then(async (confirmed) => {
								if (confirmed) isNewPaidPlan = await showPlanUpgradeRequiredDialog(NewPaidPlans);
							});
						}
					}),
					mithril_default(ExpanderPanel, { expanded: TUTA_MAIL_ADDRESS_DOMAINS.includes(formDomain.domain) }, mithril_default(".pt", lang.get("permanentAliasWarning_msg"))),
					mithril_default(TextField, {
						label: "mailName_label",
						value: senderName,
						autocompleteAs: Autocomplete.username,
						oninput: (name) => senderName = name
					})
				];
			} },
			allowOkWithReturn: true,
			okAction: addEmailAliasOkAction
		});
	});
}
async function addAlias(model, alias, senderName) {
	try {
		await showProgressDialog("pleaseWait_msg", model.addAlias(alias, senderName));
	} catch (error) {
		if (error instanceof InvalidDataError) Dialog.message("mailAddressNA_msg");
else if (error instanceof PreconditionFailedError) {
			let errorMsg = error.toString();
			if (error.data === FAILURE_USER_DISABLED) errorMsg = lang.get("addAliasUserDisabled_msg");
			return Dialog.message(lang.makeTranslation("confirm_msg", errorMsg));
		} else if (error instanceof UpgradeRequiredError) showPlanUpgradeRequiredDialog(error.plans, error.message);
else throw error;
	}
}

//#endregion
//#region src/common/settings/mailaddress/MailAddressTable.ts
assertMainOrNode();
var MailAddressTable = class {
	view({ attrs }) {
		const { model } = attrs;
		if (attrs.expanded) model.init();
		const addAliasButtonAttrs = model.userCanModifyAliases() ? {
			title: "addEmailAlias_label",
			click: () => this.onAddAlias(attrs),
			icon: Icons.Add,
			size: ButtonSize.Compact
		} : null;
		return [
			mithril_default(".flex-space-between.items-center.mt-l.mb-s", [mithril_default(".h4", lang.get("mailAddresses_label")), mithril_default(ExpanderButton, {
				label: "show_action",
				expanded: attrs.expanded,
				onExpandedChange: (v) => {
					attrs.onExpanded(v);
				}
			})]),
			mithril_default(ExpanderPanel, { expanded: attrs.expanded }, mithril_default(Table, {
				columnHeading: ["mailAddress_label", "state_label"],
				columnWidths: [ColumnWidth.Largest, ColumnWidth.Small],
				showActionButtonColumn: true,
				addButtonAttrs: addAliasButtonAttrs,
				lines: getAliasLineAttrs(attrs)
			})),
			model.aliasCount ? [mithril_default(".mt-s", lang.get("amountUsedAndActivatedOf_label", {
				"{used}": model.aliasCount.usedAliases,
				"{active}": model.aliasCount.enabledAliases,
				"{totalAmount}": model.aliasCount.totalAliases
			})), mithril_default(".small.mt-s", lang.get(model.aliasLimitIncludesCustomDomains() ? "mailAddressInfoLegacy_msg" : "mailAddressInfo_msg"))] : null
		];
	}
	async onAddAlias(attrs) {
		const userController = locator.logins.getUserController();
		if (userController.isFreeAccount()) showNotAvailableForFreeDialog();
else {
			const isNewPaidPlan = await userController.isNewPaidPlan();
			showAddAliasDialog(attrs.model, isNewPaidPlan);
		}
	}
};
function setNameDropdownButton(model, addressInfo) {
	return {
		label: "setSenderName_action",
		click: () => showSenderNameChangeDialog(model, addressInfo)
	};
}
function addressDropdownButtons(attrs, addressInfo) {
	switch (addressInfo.status) {
		case AddressStatus.Primary: return [setNameDropdownButton(attrs.model, addressInfo)];
		case AddressStatus.Alias: {
			const buttons = [setNameDropdownButton(attrs.model, addressInfo)];
			if (attrs.model.userCanModifyAliases()) buttons.push({
				label: "deactivate_action",
				click: () => {
					switchAliasStatus(addressInfo, attrs);
				}
			});
			return buttons;
		}
		case AddressStatus.DisabledAlias: return attrs.model.userCanModifyAliases() ? [{
			label: "activate_action",
			click: () => {
				switchAliasStatus(addressInfo, attrs);
			}
		}] : [];
		case AddressStatus.Custom: {
			const buttons = [setNameDropdownButton(attrs.model, addressInfo)];
			if (attrs.model.userCanModifyAliases()) buttons.push({
				label: "delete_action",
				click: () => {
					switchAliasStatus(addressInfo, attrs);
				}
			});
			return buttons;
		}
	}
}
function statusLabel(addressInfo) {
	switch (addressInfo.status) {
		case AddressStatus.Primary: return lang.get("primaryMailAddress_label");
		case AddressStatus.Alias:
		case AddressStatus.Custom: return lang.get("activated_label");
		case AddressStatus.DisabledAlias: return lang.get("deactivated_label");
	}
}
function getAliasLineAttrs(attrs) {
	return attrs.model.addresses().map((addressInfo) => {
		const dropdownButtons = addressDropdownButtons(attrs, addressInfo);
		const actionButtonAttrs = dropdownButtons.length === 0 ? null : attachDropdown({
			mainButtonAttrs: {
				title: "edit_action",
				icon: Icons.More,
				size: ButtonSize.Compact
			},
			showDropdown: () => true,
			width: 250,
			childAttrs: () => dropdownButtons
		});
		return {
			cells: () => [{
				main: addressInfo.address,
				info: [addressInfo.name]
			}, { main: statusLabel(addressInfo) }],
			actionButtonAttrs
		};
	});
}
async function switchAliasStatus(alias, attrs) {
	const deactivateOrDeleteAlias = alias.status !== AddressStatus.DisabledAlias;
	if (deactivateOrDeleteAlias) {
		const message = alias.status === AddressStatus.Custom ? "deleteAlias_msg" : "deactivateAlias_msg";
		const confirmed = await Dialog.confirm(lang.getTranslation(message, { "{1}": alias.address }));
		if (!confirmed) return;
	}
	const updateModel = attrs.model.setAliasStatus(alias.address, !deactivateOrDeleteAlias).catch(ofClass(LimitReachedError, () => attrs.model.handleTooManyAliases())).catch(ofClass(UpgradeRequiredError, (e) => showPlanUpgradeRequiredDialog(e.plans, e.message)));
	await showProgressDialog("pleaseWait_msg", updateModel);
}
function showSenderNameChangeDialog(model, alias) {
	Dialog.showTextInputDialog({
		title: "edit_action",
		label: "mailName_label",
		infoMsgId: lang.makeTranslation("alias_addr", alias.address),
		defaultValue: alias.name
	}).then((newName) => showProgressDialog("pleaseWait_msg", model.setAliasName(alias.address, newName)));
}

//#endregion
//#region src/mail-app/settings/emaildomain/AddEmailAddressesPage.ts
assertMainOrNode();
var AddEmailAddressesPage = class {
	oncreate({ attrs }) {
		attrs.data.editAliasFormAttrs.model.init();
	}
	onremove({ attrs }) {}
	view(vnode) {
		const a = vnode.attrs;
		const aliasesTableAttrs = {
			columnWidths: [ColumnWidth.Largest],
			showActionButtonColumn: true,
			addButtonAttrs: null,
			lines: getAliasLineAttrs(a.data.editAliasFormAttrs).map((row) => {
				return {
					actionButtonAttrs: row.actionButtonAttrs ?? null,
					cells: row.cells
				};
			})
		};
		let domainInfo = {
			domain: a.data.domain(),
			isPaid: false
		};
		const mailFormAttrs = {
			selectedDomain: domainInfo,
			availableDomains: [domainInfo],
			onValidationResult: (email, validationResult) => {
				if (validationResult.isValid) {
					a.mailAddress = email;
					a.errorMessageId = null;
				} else a.errorMessageId = validationResult.errorId;
			},
			onDomainChanged: (domain) => domainInfo = domain,
			onBusyStateChanged: (isBusy) => a.isMailVerificationBusy = isBusy,
			injectionsRightButtonAttrs: {
				title: "addEmailAlias_label",
				icon: Icons.Add,
				size: ButtonSize.Compact,
				click: () => vnode.attrs.addAliasFromInput().then(() => {
					mithril_default.redraw();
				})
			}
		};
		return mithril_default("", [
			mithril_default("h4.mt-l.text-center", lang.get("addCustomDomainAddresses_title")),
			mithril_default(".mt.mb", lang.get("addCustomDomainAddAdresses_msg")),
			mithril_default(SelectMailAddressForm, mailFormAttrs),
			locator.logins.getUserController().userGroupInfo.mailAddressAliases.length ? mithril_default(Table, aliasesTableAttrs) : null,
			mithril_default(".flex-center.full-width.pt-l.mb-l", mithril_default(LoginButton, {
				label: "next_action",
				class: "small-login-button",
				onclick: () => emitWizardEvent(vnode.dom, WizardEventType.SHOW_NEXT_PAGE)
			}))
		]);
	}
};
var AddEmailAddressesPageAttrs = class {
	data;
	mailAddress;
	errorMessageId;
	isMailVerificationBusy;
	constructor(domainData) {
		this.data = domainData;
		this.mailAddress = "";
		this.errorMessageId = "mailAddressNeutral_msg";
		this.isMailVerificationBusy = false;
	}
	headerTitle() {
		return "domainSetup_title";
	}
	nextAction(showErrorDialog) {
		if (this.isMailVerificationBusy) return Promise.resolve(false);
		if (showErrorDialog && this.errorMessageId) return this.addAliasFromInput();
		const checkMailAddresses = Promise.resolve().then(() => {
			const hasAliases = locator.logins.getUserController().userGroupInfo.mailAddressAliases.some((alias) => alias.mailAddress.endsWith(`@${this.data.domain()}`));
			if (hasAliases) return true;
else return locator.entityClient.load(CustomerTypeRef, neverNull(locator.logins.getUserController().user.customer)).then((customer) => locator.entityClient.loadAll(GroupInfoTypeRef, customer.userGroups)).then((allUserGroupInfos) => {
				return allUserGroupInfos.some((u) => neverNull(u.mailAddress).endsWith("@" + this.data.domain()) || u.mailAddressAliases.some((a) => neverNull(a.mailAddress).endsWith("@" + this.data.domain())));
			});
		});
		return showProgressDialog("pleaseWait_msg", checkMailAddresses).then((nextAllowed) => {
			if (showErrorDialog && !nextAllowed) Dialog.message("enforceAliasSetup_msg");
			return nextAllowed;
		});
	}
	isSkipAvailable() {
		return true;
	}
	isEnabled() {
		return true;
	}
	/**
	* Try to add an alias from input field and return true if it succeeded
	*/
	async addAliasFromInput() {
		const error = this.errorMessageId;
		if (error) {
			await Dialog.message(error);
			return false;
		} else {
			const mailAddressTableModel = this.data.editAliasFormAttrs.model;
			try {
				await showProgressDialog(
					"pleaseWait_msg",
					// Using default sender name for now
					mailAddressTableModel.addAlias(this.mailAddress, mailAddressTableModel.defaultSenderName())
);
				return true;
			} catch (e) {
				if (e instanceof InvalidDataError) await Dialog.message("mailAddressNA_msg");
else if (e instanceof LimitReachedError) {} else if (e instanceof UpgradeRequiredError) await showPlanUpgradeRequiredDialog(e.plans, e.message);
else throw e;
				return false;
			}
		}
	}
};

//#endregion
//#region src/mail-app/settings/emaildomain/VerifyOwnershipPage.ts
assertMainOrNode();
let CustomDomainFailureReasons = function(CustomDomainFailureReasons$1) {
	CustomDomainFailureReasons$1["LIMIT_REACHED"] = "customdomainservice.limit_reached";
	CustomDomainFailureReasons$1["DOMAIN_IN_USE"] = "customdomainservice.domain_in_use";
	return CustomDomainFailureReasons$1;
}({});
var VerifyOwnershipPage = class {
	dom;
	oncreate(vnode) {
		this.dom = vnode.dom;
		const { data } = vnode.attrs;
		locator.customerFacade.getDomainValidationRecord(data.domain()).then((recordValue) => {
			data.expectedVerificationRecord.value = recordValue;
			mithril_default.redraw();
		});
	}
	view(vnode) {
		const a = vnode.attrs;
		return [
			mithril_default("h4.mt-l.text-center", lang.get("verifyDomainOwnership_title")),
			mithril_default("p", lang.get("verifyDomainOwnershipExplanation_msg", { "{domain}": a.data.domain() })),
			mithril_default("p", lang.get("verifyOwnershipTXTrecord_msg")),
			createDnsRecordTable([vnode.attrs.data.expectedVerificationRecord]),
			mithril_default(".flex-center.full-width.pt-l.mb-l", mithril_default(LoginButton, {
				label: "next_action",
				class: "small-login-button",
				onclick: () => emitWizardEvent(this.dom, WizardEventType.SHOW_NEXT_PAGE)
			}))
		];
	}
};
var VerifyOwnershipPageAttrs = class {
	data;
	constructor(domainData) {
		this.data = domainData;
	}
	headerTitle() {
		return "domainSetup_title";
	}
	nextAction(showErrorDialog = true) {
		return showProgressDialog("pleaseWait_msg", locator.customerFacade.addDomain(this.data.domain()).then((result) => {
			const validationResult = assertEnumValue(CustomDomainValidationResult, result.validationResult);
			if (validationResult === CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_OK) return null;
else if (validationResult === CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_DOMAIN_NOT_AVAILABLE) {
				let customDomainInfos = getCustomMailDomains(this.data.customerInfo);
				if (customDomainInfos.some((domainInfo) => domainInfo.domain === this.data.domain())) return null;
				return () => lang.get("customDomainErrorDomainNotAvailable_msg");
			} else {
				const errorMessageMap = {
					[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_OK]: "emptyString_msg",
					[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_DNS_LOOKUP_FAILED]: "customDomainErrorDnsLookupFailure_msg",
					[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_DOMAIN_NOT_FOUND]: "customDomainErrorDomainNotFound_msg",
					[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_NAMESERVER_NOT_FOUND]: "customDomainErrorNameserverNotFound_msg",
					[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_DOMAIN_NOT_AVAILABLE]: "customDomainErrorDomainNotAvailable_msg",
					[CustomDomainValidationResult.CUSTOM_DOMAIN_VALIDATION_RESULT_VALIDATION_FAILED]: "customDomainErrorValidationFailed_msg"
				};
				return lang.makeTranslation("error_msg", lang.get(errorMessageMap[validationResult]) + (result.invalidDnsRecords.length > 0 ? " " + lang.get("customDomainErrorOtherTxtRecords_msg") + "\n" + result.invalidDnsRecords.map((r) => r.value).join("\n") : ""));
			}
		})).then((message) => {
			if (message) return showErrorDialog ? Dialog.message(downcast(message)).then(() => false) : false;
			return true;
		}).catch(ofClass(PreconditionFailedError, async (e) => {
			if (e.data === CustomDomainFailureReasons.LIMIT_REACHED) {
				const nbrOfCustomDomains = this.data.customerInfo.domainInfos.filter((domainInfo) => domainInfo.whitelabelConfig == null).length;
				const plans = await getAvailableMatchingPlans(locator.serviceExecutor, (config) => {
					if (config.customDomainType in CustomDomainTypeCount) {
						const planDomains = CustomDomainTypeCount[config.customDomainType];
						return planDomains === -1 || planDomains > nbrOfCustomDomains;
					}
					return false;
				});
				if (isEmpty(plans)) Dialog.message("tooManyCustomDomains_msg");
else showPlanUpgradeRequiredDialog(plans, "moreCustomDomainsRequired_msg");
			} else Dialog.message(lang.makeTranslation("error_msg", e.toString()));
			return false;
		}));
	}
	isSkipAvailable() {
		return false;
	}
	isEnabled() {
		return true;
	}
};

//#endregion
//#region src/mail-app/settings/emaildomain/EnterDomainPage.ts
assertMainOrNode();
var EnterDomainPage = class {
	dom = null;
	oncreate(vnode) {
		this.dom = vnode.dom;
	}
	view(vnode) {
		return mithril_default("", [
			mithril_default("h4.mt-l.text-center", lang.get("enterCustomDomain_title")),
			mithril_default(".mt", lang.get("enterDomainIntroduction_msg")),
			mithril_default(".mt", lang.get("enterDomainGetReady_msg")),
			mithril_default(TextField, {
				label: "customDomain_label",
				autocapitalize: Autocapitalize.none,
				value: vnode.attrs.data.domain(),
				oninput: vnode.attrs.data.domain,
				helpLabel: () => {
					const domain = vnode.attrs.data.domain();
					const errorMsg = validateDomain(domain);
					if (errorMsg) return lang.get(errorMsg);
else return lang.get("enterDomainFieldHelp_label", { "{domain}": domain.toLocaleLowerCase().trim() });
				}
			}),
			mithril_default(".flex-center.full-width.pt-l.mb-l", mithril_default(LoginButton, {
				label: "next_action",
				class: "small-login-button",
				onclick: () => emitWizardEvent(this.dom, WizardEventType.SHOW_NEXT_PAGE)
			}))
		]);
	}
};
function validateDomain(domain) {
	let cleanDomainName = domain.toLocaleLowerCase().trim();
	if (!cleanDomainName.length) return "customDomainNeutral_msg";
	if (!isDomainName(cleanDomainName)) return "customDomainInvalid_msg";
else return null;
}
var EnterDomainPageAttrs = class {
	data;
	constructor(domainData) {
		this.data = domainData;
	}
	headerTitle() {
		return "domainSetup_title";
	}
	nextAction(showErrorDialog = true) {
		const errorMsg = validateDomain(this.data.domain());
		if (errorMsg) return showErrorDialog ? Dialog.message(errorMsg).then(() => false) : Promise.resolve(false);
else return Promise.resolve(true);
	}
	isSkipAvailable() {
		return false;
	}
	isEnabled() {
		return true;
	}
};

//#endregion
//#region src/mail-app/settings/emaildomain/AddDomainWizard.ts
var import_stream$12 = __toESM(require_stream(), 1);
assertMainOrNode();
function showAddDomainWizard(domain, customerInfo, mailAddressTableModel) {
	let mailAddressTableExpanded = false;
	const domainData = {
		domain: (0, import_stream$12.default)(domain),
		customerInfo,
		expectedVerificationRecord: createDnsRecord({
			subdomain: null,
			type: DnsRecordType.DNS_RECORD_TYPE_TXT_SPF,
			value: ""
		}),
		editAliasFormAttrs: {
			model: mailAddressTableModel,
			expanded: mailAddressTableExpanded,
			onExpanded: (newExpanded) => mailAddressTableExpanded = newExpanded
		},
		domainStatus: new DomainDnsStatus(domain)
	};
	const wizardPages = [
		wizardPageWrapper(EnterDomainPage, new EnterDomainPageAttrs(domainData)),
		wizardPageWrapper(VerifyOwnershipPage, new VerifyOwnershipPageAttrs(domainData)),
		wizardPageWrapper(AddEmailAddressesPage, new AddEmailAddressesPageAttrs(domainData)),
		wizardPageWrapper(VerifyDnsRecordsPage, new VerifyDnsRecordsPageAttrs(domainData))
	];
	return new Promise((resolve) => {
		const wizardBuilder = createWizardDialog(domainData, wizardPages, () => {
			mailAddressTableModel.dispose();
			resolve();
			return Promise.resolve();
		}, DialogType.EditLarge);
		const wizard = wizardBuilder.dialog;
		const wizardAttrs = wizardBuilder.attrs;
		wizard.show();
		if (domain.length) {
			wizardAttrs.goToNextPageOrCloseWizard();
			wizardAttrs.goToNextPageOrCloseWizard();
			if (wizardAttrs.currentPage) wizardAttrs.currentPage.attrs.nextAction(false).then((ready) => {
				if (ready) wizardAttrs.goToNextPageOrCloseWizard();
			});
		}
	});
}

//#endregion
//#region src/common/settings/ExpandableTable.ts
var import_stream$11 = __toESM(require_stream(), 1);
var ExpandableTable = class {
	expanded;
	constructor() {
		this.expanded = (0, import_stream$11.default)(false);
	}
	view(vnode) {
		const { title, table, infoLinkId, infoMsg, expanded, onExpand } = vnode.attrs;
		return mithril_default(SettingsExpander, {
			title,
			infoLinkId,
			infoMsg,
			onExpand,
			expanded: expanded || this.expanded
		}, mithril_default(Table, table));
	}
};

//#endregion
//#region src/common/subscription/DeleteAccountDialog.ts
function showDeleteAccountDialog(surveyData = null) {
	let takeover = "";
	let password = "";
	const userId = getEtId(locator.logins.getUserController().user);
	Dialog.showActionDialog({
		title: "adminDeleteAccount_action",
		child: { view: () => mithril_default("#delete-account-dialog", [!(isIOSApp() && client.isCalendarApp()) ? mithril_default(TextField, {
			label: "targetAddress_label",
			value: takeover,
			type: TextFieldType.Email,
			oninput: (value) => takeover = value,
			helpLabel: () => lang.get("takeoverMailAddressInfo_msg")
		}) : null, mithril_default(PasswordField, {
			value: password,
			autocompleteAs: Autocomplete.currentPassword,
			oninput: (value) => password = value,
			status: {
				type: "neutral",
				text: "passwordEnterNeutral_msg"
			}
		})]) },
		okAction: async () => {
			const isDeleted = await deleteAccount(takeover, password, surveyData);
			if (isDeleted) {
				await locator.credentialsProvider.deleteByUserId(userId);
				mithril_default.route.set("/login", { noAutoLogin: true });
			}
		},
		allowCancel: true,
		okActionTextId: "delete_action"
	});
}
async function deleteAccount(takeover, password, surveyData = null) {
	const cleanedTakeover = takeover === "" ? "" : getCleanedMailAddress(takeover);
	if (cleanedTakeover === null) {
		await Dialog.message("mailAddressInvalid_msg");
		return false;
	} else {
		const message = lang.makeTranslation("confirm_msg", cleanedTakeover === "" ? lang.get("deleteAccountConfirm_msg") : lang.get("deleteAccountWithTakeoverConfirm_msg", { "{1}": cleanedTakeover }));
		const ok = await Dialog.confirm(message);
		if (!ok) return false;
		await locator.connectivityModel.close(CloseEventBusOption.Terminate);
		try {
			await locator.loginFacade.deleteAccount(password, neverNull(cleanedTakeover), surveyData);
			return true;
		} catch (e) {
			if (e instanceof PreconditionFailedError) await Dialog.message("passwordWrongInvalid_msg");
			if (e instanceof InvalidDataError) await Dialog.message("takeoverAccountInvalid_msg");
			if (e instanceof LockedError) await Dialog.message("operationStillActive_msg");
			return false;
		}
	}
}

//#endregion
//#region src/common/settings/AccountMaintenanceSettings.ts
var import_stream$10 = __toESM(require_stream(), 1);
var AccountMaintenanceSettings = class {
	requirePasswordUpdateAfterReset = false;
	saveIpAddress = false;
	usageDataExpanded = (0, import_stream$10.default)(false);
	deleteAccountExpanded = (0, import_stream$10.default)(false);
	auditLogLines = [];
	auditLogLoaded = false;
	customer = null;
	customerInfo = new LazyLoaded(() => locator.logins.getUserController().loadCustomerInfo());
	customerProperties = new LazyLoaded(() => locator.entityClient.load(CustomerTypeRef, neverNull(locator.logins.getUserController().user.customer)).then((customer) => locator.entityClient.load(CustomerPropertiesTypeRef, neverNull(customer.properties))));
	constructor(vnode) {
		vnode.attrs.customerServerProperties.map((props) => {
			this.requirePasswordUpdateAfterReset = props.requirePasswordUpdateAfterReset;
			this.saveIpAddress = props.saveEncryptedIpAddressInSession;
		});
		this.customerProperties.getAsync().then(mithril_default.redraw);
		vnode.attrs.setOnUpdateHandler((updates) => this.handleEventUpdates(updates));
		this.view = this.view.bind(this);
		this.updateAuditLog();
	}
	view({ attrs }) {
		const auditLogTableAttrs = {
			columnHeading: [
				"action_label",
				"modified_label",
				"time_label"
			],
			columnWidths: [
				ColumnWidth.Largest,
				ColumnWidth.Largest,
				ColumnWidth.Small
			],
			showActionButtonColumn: true,
			lines: this.auditLogLines,
			addButtonAttrs: {
				title: "refresh_action",
				click: () => showProgressDialog("loading_msg", this.updateAuditLog()).then(() => mithril_default.redraw()),
				icon: BootIcons.Progress,
				size: ButtonSize.Compact
			}
		};
		return [
			mithril_default(".mt-l", [
				mithril_default(".h4", lang.get("security_title")),
				mithril_default(DropDownSelector, {
					label: "saveEncryptedIpAddress_title",
					helpLabel: () => lang.get("saveEncryptedIpAddress_label"),
					selectedValue: this.saveIpAddress,
					selectionChangedHandler: (value) => {
						const newProps = Object.assign({}, attrs.customerServerProperties(), { saveEncryptedIpAddressInSession: value });
						locator.entityClient.update(newProps);
					},
					items: [{
						name: lang.get("yes_label"),
						value: true
					}, {
						name: lang.get("no_label"),
						value: false
					}],
					dropdownWidth: 250
				}),
				locator.logins.getUserController().isGlobalAdmin() ? mithril_default("", [locator.logins.getUserController().isPaidAccount() ? mithril_default(DropDownSelector, {
					label: "enforcePasswordUpdate_title",
					helpLabel: () => lang.get("enforcePasswordUpdate_msg"),
					selectedValue: this.requirePasswordUpdateAfterReset,
					selectionChangedHandler: (value) => {
						const newProps = Object.assign({}, attrs.customerServerProperties(), { requirePasswordUpdateAfterReset: value });
						locator.entityClient.update(newProps);
					},
					items: [{
						name: lang.get("yes_label"),
						value: true
					}, {
						name: lang.get("no_label"),
						value: false
					}],
					dropdownWidth: 250
				}) : null, this.customer ? mithril_default(".mt-l", mithril_default(ExpandableTable, {
					title: "auditLog_title",
					table: auditLogTableAttrs,
					infoMsg: "auditLogInfo_msg",
					onExpand: () => {
						if (!this.auditLogLoaded) showProgressDialog("loading_msg", this.updateAuditLog()).then(() => mithril_default.redraw());
					}
				})) : null]) : null
			]),
			locator.logins.getUserController().isPaidAccount() ? mithril_default(SettingsExpander, {
				title: "usageData_label",
				expanded: this.usageDataExpanded
			}, this.customerProperties.isLoaded() ? mithril_default(DropDownSelector, {
				label: "customerUsageDataOptOut_label",
				items: [{
					name: lang.get("customerUsageDataGloballyDeactivated_label"),
					value: true
				}, {
					name: lang.get("customerUsageDataGloballyPossible_label"),
					value: false
				}],
				selectedValue: this.customerProperties.getSync().usageDataOptedOut,
				selectionChangedHandler: (v) => {
					if (this.customerProperties.isLoaded()) {
						const customerProps = this.customerProperties.getSync();
						customerProps.usageDataOptedOut = v;
						locator.entityClient.update(customerProps);
					}
				},
				dropdownWidth: 250
			}) : null) : null,
			mithril_default(".mb-l", mithril_default(SettingsExpander, {
				title: "adminDeleteAccount_action",
				buttonText: "adminDeleteAccount_action",
				expanded: this.deleteAccountExpanded
			}, mithril_default(".flex-center", mithril_default("", { style: { width: "200px" } }, mithril_default(LoginButton, {
				label: "adminDeleteAccount_action",
				onclick: () => {
					const isPremium = locator.logins.getUserController().isPaidAccount();
					showLeavingUserSurveyWizard(isPremium, false).then((reason) => {
						if (reason.submitted && reason.category && reason.reason) {
							const surveyData = createSurveyData({
								category: reason.category,
								details: reason.details,
								reason: reason.reason,
								version: SURVEY_VERSION_NUMBER
							});
							showDeleteAccountDialog(surveyData);
						} else showDeleteAccountDialog();
					});
				}
			})))))
		];
	}
	updateAuditLog() {
		return locator.logins.getUserController().loadCustomer().then((customer) => {
			this.customer = customer;
			return locator.entityClient.loadRange(AuditLogEntryTypeRef, neverNull(customer.auditLog).items, GENERATED_MAX_ID, 200, true).then((auditLog) => {
				this.auditLogLoaded = true;
				this.auditLogLines = auditLog.map((auditLogEntry) => {
					return {
						cells: [
							auditLogEntry.action,
							auditLogEntry.modifiedEntity,
							formatDateTimeFromYesterdayOn(auditLogEntry.date)
						],
						actionButtonAttrs: {
							title: "showMore_action",
							icon: Icons.More,
							click: () => this.showAuditLogDetails(auditLogEntry, customer),
							size: ButtonSize.Compact
						}
					};
				});
			}).finally(mithril_default.redraw);
		});
	}
	showAuditLogDetails(entry, customer) {
		let modifiedGroupInfo = (0, import_stream$10.default)();
		let groupInfo = (0, import_stream$10.default)();
		let groupInfoLoadingPromises = [];
		if (entry.modifiedGroupInfo) groupInfoLoadingPromises.push(locator.entityClient.load(GroupInfoTypeRef, entry.modifiedGroupInfo).then((gi) => {
			modifiedGroupInfo(gi);
		}).catch(ofClass(NotAuthorizedError, () => {})));
		if (entry.groupInfo) groupInfoLoadingPromises.push(locator.entityClient.load(GroupInfoTypeRef, entry.groupInfo).then((gi) => {
			groupInfo(gi);
		}).catch(ofClass(NotAuthorizedError, () => {})));
		Promise.all(groupInfoLoadingPromises).then(() => {
			const groupInfoValue = groupInfo();
			let dialog = Dialog.showActionDialog({
				title: "auditLog_title",
				child: { view: () => mithril_default("table.pt", [
					mithril_default("tr", [mithril_default("td", lang.get("action_label")), mithril_default("td.pl", entry.action)]),
					mithril_default("tr", [mithril_default("td", lang.get("actor_label")), mithril_default("td.pl", entry.actorMailAddress)]),
					mithril_default("tr", [mithril_default("td", lang.get("IpAddress_label")), mithril_default("td.pl", entry.actorIpAddress ? entry.actorIpAddress : "")]),
					mithril_default("tr", [mithril_default("td", lang.get("modified_label")), mithril_default("td.pl", modifiedGroupInfo() && this.getGroupInfoDisplayText(modifiedGroupInfo()) ? this.getGroupInfoDisplayText(modifiedGroupInfo()) : entry.modifiedEntity)]),
					groupInfoValue ? mithril_default("tr", [mithril_default("td", lang.get("group_label")), mithril_default("td.pl", customer.adminGroup === groupInfoValue.group ? lang.get("globalAdmin_label") : this.getGroupInfoDisplayText(groupInfoValue))]) : null,
					mithril_default("tr", [mithril_default("td", lang.get("time_label")), mithril_default("td.pl", formatDateTime(entry.date))])
				]) },
				allowOkWithReturn: true,
				okAction: () => dialog.close(),
				allowCancel: false
			});
		});
	}
	getGroupInfoDisplayText(groupInfo) {
		if (groupInfo.name && groupInfo.mailAddress) return groupInfo.name + " <" + groupInfo.mailAddress + ">";
else if (groupInfo.mailAddress) return groupInfo.mailAddress;
else return groupInfo.name;
	}
	handleEventUpdates(updates) {
		return pMap(updates, (update) => {
			if (isUpdateForTypeRef(AuditLogEntryTypeRef, update)) return this.updateAuditLog();
else if (isUpdateForTypeRef(CustomerPropertiesTypeRef, update)) {
				this.customerProperties.reset();
				this.customerProperties.getAsync().then(mithril_default.redraw);
			}
		}).then(noOp);
	}
};

//#endregion
//#region src/mail-app/settings/GlobalSettingsViewer.ts
var import_stream$9 = __toESM(require_stream(), 1);
assertMainOrNode();
const REJECTED_SENDERS_TO_LOAD_MS = 5 * DAY_IN_MILLIS;
const REJECTED_SENDERS_MAX_NUMBER = 100;
var GlobalSettingsViewer = class {
	props = (0, import_stream$9.default)();
	customer = null;
	customerInfo = new LazyLoaded(() => locator.logins.getUserController().loadCustomerInfo());
	accountMaintenanceUpdateNotifier = null;
	spamRuleLines = [];
	rejectedSenderLines = [];
	customDomainLines = [];
	/**
	* caches the current status for the custom email domains
	* map from domain name to status
	*/
	domainDnsStatus = {};
	customerProperties = new LazyLoaded(() => locator.entityClient.load(CustomerTypeRef, neverNull(locator.logins.getUserController().user.customer)).then((customer) => locator.entityClient.load(CustomerPropertiesTypeRef, neverNull(customer.properties))));
	constructor() {
		this.customerProperties.getAsync().then(mithril_default.redraw);
		this.updateCustomerServerProperties();
		this.view = this.view.bind(this);
		this.updateDomains();
	}
	view() {
		const spamRuleTableAttrs = {
			columnHeading: ["emailSender_label", "emailSenderRule_label"],
			columnWidths: [ColumnWidth.Largest, ColumnWidth.Small],
			showActionButtonColumn: true,
			addButtonAttrs: {
				title: "addSpamRule_action",
				click: () => showAddSpamRuleDialog(null),
				icon: Icons.Add,
				size: ButtonSize.Compact
			},
			lines: this.spamRuleLines
		};
		const rejectedSenderTableAttrs = {
			columnHeading: ["emailSender_label"],
			columnWidths: [ColumnWidth.Largest],
			showActionButtonColumn: true,
			addButtonAttrs: {
				title: "refresh_action",
				click: () => {
					this.updateRejectedSenderTable();
				},
				icon: BootIcons.Progress,
				size: ButtonSize.Compact
			},
			lines: this.rejectedSenderLines
		};
		const customDomainTableAttrs = {
			columnHeading: ["adminCustomDomain_label", "catchAllMailbox_label"],
			columnWidths: [ColumnWidth.Largest, ColumnWidth.Small],
			showActionButtonColumn: true,
			addButtonAttrs: {
				title: "addCustomDomain_action",
				click: async () => {
					const customerInfo = await this.customerInfo.getAsync();
					if (locator.logins.getUserController().isFreeAccount()) showNotAvailableForFreeDialog();
else {
						const mailAddressTableModel = await locator.mailAddressTableModelForOwnMailbox();
						await showAddDomainWizard("", customerInfo, mailAddressTableModel);
						this.updateDomains();
					}
				},
				icon: Icons.Add,
				size: ButtonSize.Compact
			},
			lines: this.customDomainLines
		};
		return [mithril_default("#global-settings.fill-absolute.scroll.plr-l", [
			mithril_default(ExpandableTable, {
				title: "adminSpam_action",
				table: spamRuleTableAttrs,
				infoMsg: "adminSpamRuleInfo_msg",
				infoLinkId: InfoLink.SpamRules
			}),
			mithril_default(ExpandableTable, {
				title: "rejectedEmails_label",
				table: rejectedSenderTableAttrs,
				infoMsg: "rejectedSenderListInfo_msg",
				onExpand: () => this.updateRejectedSenderTable()
			}),
			mithril_default(ExpandableTable, {
				title: "customEmailDomains_label",
				table: customDomainTableAttrs,
				infoMsg: "moreInfo_msg",
				infoLinkId: InfoLink.DomainInfo
			}),
			mithril_default(AccountMaintenanceSettings, {
				customerServerProperties: this.props,
				setOnUpdateHandler: (fn) => {
					this.accountMaintenanceUpdateNotifier = fn;
				}
			})
		])];
	}
	updateCustomerServerProperties() {
		return locator.customerFacade.loadCustomerServerProperties().then((props) => {
			this.props(props);
			const fieldToName = getSpamRuleFieldToName();
			this.spamRuleLines = props.emailSenderList.map((rule, index) => {
				return {
					cells: () => [{
						main: fieldToName[getSpamRuleField(rule)],
						info: [rule.value]
					}, { main: neverNull(getSpamRuleTypeNameMapping().find((t) => t.value === rule.type)).name }],
					actionButtonAttrs: createRowActions({
						getArray: () => props.emailSenderList,
						updateInstance: () => locator.entityClient.update(props).catch(ofClass(LockedError, noOp))
					}, rule, index, [{
						label: "edit_action",
						click: () => showAddSpamRuleDialog(rule)
					}])
				};
			});
			mithril_default.redraw();
		});
	}
	updateRejectedSenderTable() {
		const customer = this.customer;
		if (customer && customer.rejectedSenders) {
			const senderListId = customer.rejectedSenders.items;
			const startId = timestampToGeneratedId(Date.now() - REJECTED_SENDERS_TO_LOAD_MS);
			const loadingPromise = locator.entityClient.loadRange(RejectedSenderTypeRef, senderListId, startId, REJECTED_SENDERS_MAX_NUMBER, false).then((rejectedSenders) => {
				if (REJECTED_SENDERS_MAX_NUMBER === rejectedSenders.length) return locator.entityClient.loadRange(RejectedSenderTypeRef, senderListId, GENERATED_MAX_ID, REJECTED_SENDERS_MAX_NUMBER, true);
else return rejectedSenders.sort(sortCompareByReverseId);
			}).then((rejectedSenders) => {
				this.rejectedSenderLines = rejectedSenders.map((rejectedSender) => {
					const rejectDate = formatDateTime(new Date(generatedIdToTimestamp(getElementId(rejectedSender))));
					return {
						cells: () => {
							return [{
								main: rejectedSender.senderMailAddress,
								info: [`${rejectDate}, ${rejectedSender.senderHostname} (${rejectedSender.senderIp})`],
								click: () => showRejectedSendersInfoDialog(rejectedSender)
							}];
						},
						actionButtonAttrs: attachDropdown({
							mainButtonAttrs: {
								title: "showMore_action",
								icon: Icons.More,
								size: ButtonSize.Compact
							},
							childAttrs: () => [{
								label: "showRejectReason_action",
								click: () => showRejectedSendersInfoDialog(rejectedSender)
							}, {
								label: "addSpamRule_action",
								click: () => {
									const domainPart = getDomainPart(rejectedSender.senderMailAddress);
									showAddSpamRuleDialog(createEmailSenderListElement({
										value: domainPart ? domainPart : "",
										type: SpamRuleType.WHITELIST,
										field: SpamRuleFieldType.FROM,
										hashedValue: ""
									}));
								}
							}]
						})
					};
				});
			});
			showProgressDialog("loading_msg", loadingPromise).then(() => mithril_default.redraw());
		}
	}
	async updateDomains() {
		const customerInfo = await this.customerInfo.getAsync();
		let customDomainInfos = getCustomMailDomains(customerInfo);
		for (const domain of Object.keys(this.domainDnsStatus)) if (!customDomainInfos.some((di) => di.domain === domain)) delete this.domainDnsStatus[domain];
		return pMap(customDomainInfos, (domainInfo) => {
			if (!this.domainDnsStatus[domainInfo.domain]) {
				this.domainDnsStatus[domainInfo.domain] = new DomainDnsStatus(domainInfo.domain);
				this.domainDnsStatus[domainInfo.domain].loadCurrentStatus().then(() => {
					mithril_default.redraw();
				});
			}
			let domainDnsStatus = this.domainDnsStatus[domainInfo.domain];
			let p = Promise.resolve(lang.get("comboBoxSelectionNone_msg"));
			if (domainInfo.catchAllMailGroup) p = loadGroupDisplayName(domainInfo.catchAllMailGroup);
			return p.then((catchAllGroupName) => {
				return {
					cells: () => [{
						main: domainInfo.domain,
						info: [domainDnsStatus.getDnsStatusInfo()],
						click: domainDnsStatus.status.isLoaded() && !domainDnsStatus.areAllRecordsFine() ? () => {
							showDnsCheckDialog(domainDnsStatus);
						} : noOp
					}, { main: catchAllGroupName }],
					actionButtonAttrs: {
						title: "action_label",
						icon: Icons.More,
						size: ButtonSize.Compact,
						click: createDropdown({
							lazyButtons: () => {
								const buttons = [{
									label: "setCatchAllMailbox_action",
									click: () => this.editCatchAllMailbox(domainInfo)
								}, {
									label: "delete_action",
									click: () => this.deleteCustomDomain(domainInfo)
								}];
								if (domainDnsStatus.status.isLoaded() && !domainDnsStatus.areAllRecordsFine()) buttons.unshift({
									label: "resumeSetup_label",
									click: () => this.onResumeSetup(domainDnsStatus, customerInfo)
								});
								return buttons;
							},
							width: 260
						})
					}
				};
			});
		}).then((tableLines) => {
			this.customDomainLines = tableLines;
			mithril_default.redraw();
		});
	}
	async onResumeSetup(domainDnsStatus, customerInfo) {
		const mailAddressTableModel = await locator.mailAddressTableModelForOwnMailbox();
		showAddDomainWizard(domainDnsStatus.domain, customerInfo, mailAddressTableModel).then(() => {
			domainDnsStatus.loadCurrentStatus().then(() => mithril_default.redraw());
		});
	}
	async editCatchAllMailbox(domainInfo) {
		const groupDatas = await showProgressDialog("pleaseWait_msg", this.loadMailboxGroupDataAndCatchAllId(domainInfo));
		const initialValue = groupDatas.selected?.groupId ?? null;
		const selectedMailGroupId = await Dialog.showDropDownSelectionDialog("setCatchAllMailbox_action", "catchAllMailbox_label", null, [{
			name: lang.get("comboBoxSelectionNone_msg"),
			value: null
		}, ...groupDatas.available.map((groupData) => {
			return {
				name: groupData.displayName,
				value: groupData.groupId
			};
		})], initialValue, 250);
		return locator.customerFacade.setCatchAllGroup(domainInfo.domain, selectedMailGroupId);
	}
	async loadMailboxGroupDataAndCatchAllId(domainInfo) {
		const customer = await locator.logins.getUserController().loadCustomer();
		const teamMailGroups = await loadEnabledTeamMailGroups(customer);
		const userMailGroups = await loadEnabledUserMailGroups(customer);
		const allMailGroups = teamMailGroups.concat(userMailGroups);
		let catchAllMailGroupId = null;
		if (domainInfo.catchAllMailGroup) {
			const catchAllGroup = await locator.entityClient.load(GroupTypeRef, domainInfo.catchAllMailGroup);
			if (catchAllGroup.type === GroupType.User) {
				const user = await locator.entityClient.load(UserTypeRef, neverNull(catchAllGroup.user));
				catchAllMailGroupId = getUserGroupMemberships(user, GroupType.Mail)[0].group;
			} else catchAllMailGroupId = domainInfo.catchAllMailGroup;
		}
		return {
			available: allMailGroups,
			selected: allMailGroups.find((g) => g.groupId === catchAllMailGroupId) ?? null
		};
	}
	deleteCustomDomain(domainInfo) {
		Dialog.confirm(lang.getTranslation("confirmCustomDomainDeletion_msg", { "{domain}": domainInfo.domain })).then((confirmed) => {
			if (confirmed) locator.customerFacade.removeDomain(domainInfo.domain).catch(ofClass(PreconditionFailedError, () => {
				Dialog.message(lang.getTranslation("customDomainDeletePreconditionFailed_msg", { "{domainName}": domainInfo.domain }));
			})).catch(ofClass(LockedError, () => Dialog.message("operationStillActive_msg")));
		});
	}
	entityEventsReceived(updates) {
		this.accountMaintenanceUpdateNotifier?.(updates);
		return pMap(updates, (update) => {
			if (isUpdateForTypeRef(CustomerServerPropertiesTypeRef, update) && update.operation === OperationType.UPDATE) return this.updateCustomerServerProperties();
else if (isUpdateForTypeRef(CustomerInfoTypeRef, update) && update.operation === OperationType.UPDATE) {
				this.customerInfo.reset();
				return this.updateDomains();
			} else if (isUpdateForTypeRef(CustomerPropertiesTypeRef, update)) {
				this.customerProperties.reset();
				this.customerProperties.getAsync().then(mithril_default.redraw);
			}
		}).then(noOp);
	}
};

//#endregion
//#region src/mail-app/settings/DesktopUpdateHelpLabel.ts
var DesktopUpdateHelpLabel = class {
	_waiting = false;
	_error = false;
	getActionLink({ updateAvailable, manualUpdate }) {
		if (this._waiting || this._error) return null;
		const onclick = async () => {
			if (updateAvailable()) manualUpdate();
else if (!this._waiting) {
				this._waiting = true;
				const [hasUpdate] = await Promise.all([manualUpdate(), delay(500)]);
				this._waiting = false;
				updateAvailable(hasUpdate);
				mithril_default.redraw();
			}
		};
		return mithril_default("span.text-break.pr-s", mithril_default("button.underline", {
			type: "button",
			href: "#",
			tabindex: "0",
			role: "button",
			onclick
		}, lang.get(updateAvailable() ? "installNow_action" : "checkAgain_action")));
	}
	getLabel(updateAvailable) {
		let ret = "";
		if (updateAvailable()) ret = lang.get("updateFound_label");
else if (this._error) ret = lang.get("serviceUnavailable_msg");
else if (this._waiting) ret = lang.get("checkingForUpdate_action");
else ret = lang.get("noUpdateAvailable_msg");
		return mithril_default("span.pr-s", ret + " ");
	}
	getIcon() {
		return this._waiting && !this._error ? mithril_default(Icon, {
			icon: BootIcons.Progress,
			class: "flex-center items-center icon-progress-tiny icon-progress"
		}) : null;
	}
	view(vnode) {
		return mithril_default(".flex.items-center", [
			this.getLabel(vnode.attrs.updateAvailable),
			this.getActionLink(vnode.attrs),
			this.getIcon()
		]);
	}
};

//#endregion
//#region src/mail-app/settings/DesktopSettingsViewer.ts
var import_stream$8 = __toESM(require_stream(), 1);
assertMainOrNode();
var DownloadLocationStrategy = function(DownloadLocationStrategy$1) {
	DownloadLocationStrategy$1[DownloadLocationStrategy$1["ALWAYS_ASK"] = 0] = "ALWAYS_ASK";
	DownloadLocationStrategy$1[DownloadLocationStrategy$1["CHOOSE_DIRECTORY"] = 1] = "CHOOSE_DIRECTORY";
	return DownloadLocationStrategy$1;
}(DownloadLocationStrategy || {});
var DesktopSettingsViewer = class {
	isDefaultMailtoHandler;
	defaultDownloadPath;
	runAsTrayApp;
	runOnStartup;
	spellCheckLang;
	isIntegrated;
	isAutoUpdateEnabled;
	showAutoUpdateOption;
	updateAvailable;
	mailExportMode;
	isPathDialogOpen = false;
	offlineStorageValue;
	constructor() {
		this.isDefaultMailtoHandler = (0, import_stream$8.default)(false);
		this.runAsTrayApp = (0, import_stream$8.default)(true);
		this.runOnStartup = (0, import_stream$8.default)(false);
		this.spellCheckLang = (0, import_stream$8.default)("");
		this.isIntegrated = (0, import_stream$8.default)(false);
		this.isAutoUpdateEnabled = (0, import_stream$8.default)(false);
		this.showAutoUpdateOption = true;
		this.updateAvailable = (0, import_stream$8.default)(false);
		this.mailExportMode = (0, import_stream$8.default)("msg");
		this.offlineStorageValue = (0, import_stream$8.default)(false);
	}
	oninit() {
		this.requestDesktopConfig();
	}
	view() {
		const setDefaultMailtoHandlerAttrs = {
			label: "defaultMailHandler_label",
			helpLabel: () => lang.get("defaultMailHandler_msg"),
			items: [{
				name: lang.get("unregistered_label"),
				value: false
			}, {
				name: lang.get("registered_label"),
				value: true
			}],
			selectedValue: this.isDefaultMailtoHandler(),
			selectionChangedHandler: (v) => {
				showProgressDialog("pleaseWait_msg", this.updateDefaultMailtoHandler(v)).then(() => {
					this.isDefaultMailtoHandler(v);
					mithril_default.redraw();
				});
			}
		};
		const setRunInBackgroundAttrs = {
			label: "runInBackground_action",
			helpLabel: () => {
				return ifAllowedTutaLinks(locator.logins, InfoLink.RunInBackground, (link) => [mithril_default("span", lang.get("runInBackground_msg") + " "), mithril_default(MoreInfoLink, { link })]);
			},
			items: [{
				name: lang.get("yes_label"),
				value: true
			}, {
				name: lang.get("no_label"),
				value: false
			}],
			selectedValue: this.runAsTrayApp(),
			selectionChangedHandler: (v) => {
				this.runAsTrayApp(v);
				this.setBooleanValue(DesktopConfigKey.runAsTrayApp, v);
			}
		};
		const setRunOnStartupAttrs = {
			label: "runOnStartup_action",
			items: [{
				name: lang.get("yes_label"),
				value: true
			}, {
				name: lang.get("no_label"),
				value: false
			}],
			selectedValue: this.runOnStartup(),
			selectionChangedHandler: (v) => {
				showProgressDialog("pleaseWait_msg", this.toggleAutoLaunchInNative(v)).then(() => {
					this.runOnStartup(v);
					mithril_default.redraw();
				});
			}
		};
		const editSpellcheckLanguageButtonAttrs = {
			title: "checkSpelling_action",
			click: () => showSpellcheckLanguageDialog().then((newLabel) => this.spellCheckLang(newLabel)),
			icon: Icons.Edit,
			size: ButtonSize.Compact
		};
		const spellcheckLanguageAttrs = {
			label: "checkSpelling_action",
			value: this.spellCheckLang(),
			oninput: this.spellCheckLang,
			isReadOnly: true,
			injectionsRight: () => mithril_default(IconButton, editSpellcheckLanguageButtonAttrs),
			helpLabel: () => lang.get("requiresNewWindow_msg")
		};
		const setDesktopIntegrationAttrs = {
			label: "desktopIntegration_label",
			items: [{
				name: lang.get("activated_label"),
				value: true
			}, {
				name: lang.get("deactivated_label"),
				value: false
			}],
			selectedValue: this.isIntegrated(),
			selectionChangedHandler: (v) => {
				showProgressDialog("pleaseWait_msg", this.updateDesktopIntegration(v)).then(() => {
					this.isIntegrated(v);
					mithril_default.redraw();
				}).catch((e) => Dialog.message("unknownError_msg", e.message));
			}
		};
		const setMailExportModeAttrs = {
			label: "mailExportMode_label",
			helpLabel: () => lang.get("mailExportModeHelp_msg"),
			items: [{
				name: "EML",
				value: "eml"
			}, {
				name: "MSG (Outlook)",
				value: "msg"
			}],
			selectedValue: this.mailExportMode(),
			selectionChangedHandler: (v) => {
				this.mailExportMode(v);
				this.setStringValue(DesktopConfigKey.mailExportMode, v);
			}
		};
		const updateHelpLabelAttrs = {
			updateAvailable: this.updateAvailable,
			manualUpdate: () => locator.desktopSettingsFacade.manualUpdate()
		};
		const setAutoUpdateAttrs = {
			label: "autoUpdate_label",
			helpLabel: () => mithril_default(DesktopUpdateHelpLabel, updateHelpLabelAttrs),
			items: [{
				name: lang.get("activated_label"),
				value: true
			}, {
				name: lang.get("deactivated_label"),
				value: false
			}],
			selectedValue: this.isAutoUpdateEnabled(),
			selectionChangedHandler: (v) => {
				this.isAutoUpdateEnabled(v);
				this.setBooleanValue(DesktopConfigKey.enableAutoUpdate, v);
			}
		};
		const changeDefaultDownloadPathAttrs = attachDropdown({
			mainButtonAttrs: {
				title: "edit_action",
				icon: Icons.Edit,
				size: ButtonSize.Compact
			},
			childAttrs: () => [{
				label: "alwaysAsk_action",
				click: () => this.setDefaultDownloadPath(DownloadLocationStrategy.ALWAYS_ASK)
			}, {
				label: "chooseDirectory_action",
				click: () => this.setDefaultDownloadPath(DownloadLocationStrategy.CHOOSE_DIRECTORY)
			}],
			showDropdown: () => !this.isPathDialogOpen,
			width: 200
		});
		const defaultDownloadPathAttrs = {
			label: "defaultDownloadPath_label",
			value: this.defaultDownloadPath(),
			oninput: this.defaultDownloadPath,
			injectionsRight: () => mithril_default(IconButton, changeDefaultDownloadPathAttrs),
			isReadOnly: true
		};
		return [mithril_default("#user-settings.fill-absolute.scroll.plr-l.pb-xl", [
			mithril_default(".h4.mt-l", lang.get("desktopSettings_label")),
			env.platformId === "darwin" ? null : mithril_default(TextField, spellcheckLanguageAttrs),
			env.platformId === "linux" ? null : mithril_default(DropDownSelector, setDefaultMailtoHandlerAttrs),
			env.platformId === "darwin" ? null : mithril_default(DropDownSelector, setRunInBackgroundAttrs),
			mithril_default(DropDownSelector, setRunOnStartupAttrs),
			mithril_default(TextField, defaultDownloadPathAttrs),
			mithril_default(DropDownSelector, setMailExportModeAttrs),
			env.platformId === "linux" ? mithril_default(DropDownSelector, setDesktopIntegrationAttrs) : null,
			this.showAutoUpdateOption ? mithril_default(DropDownSelector, setAutoUpdateAttrs) : null
		])];
	}
	toggleAutoLaunchInNative(enable) {
		return enable ? locator.desktopSettingsFacade.enableAutoLaunch() : locator.desktopSettingsFacade.disableAutoLaunch();
	}
	updateDefaultMailtoHandler(shouldBeDefaultMailtoHandler) {
		return shouldBeDefaultMailtoHandler ? locator.desktopSettingsFacade.registerMailto() : locator.desktopSettingsFacade.unregisterMailto();
	}
	updateDesktopIntegration(shouldIntegrate) {
		return shouldIntegrate ? locator.desktopSettingsFacade.integrateDesktop() : locator.desktopSettingsFacade.unIntegrateDesktop();
	}
	async requestDesktopConfig() {
		this.defaultDownloadPath = (0, import_stream$8.default)(lang.get("alwaysAsk_action"));
		const [integrationInfo, defaultDownloadPath, runAsTrayApp, showAutoUpdateOption, enableAutoUpdate, mailExportMode, spellcheckLabel] = await Promise.all([
			locator.desktopSettingsFacade.getIntegrationInfo(),
			locator.desktopSettingsFacade.getStringConfigValue(DesktopConfigKey.defaultDownloadPath),
			locator.desktopSettingsFacade.getBooleanConfigValue(DesktopConfigKey.runAsTrayApp),
			locator.desktopSettingsFacade.getBooleanConfigValue(DesktopConfigKey.showAutoUpdateOption),
			locator.desktopSettingsFacade.getBooleanConfigValue(DesktopConfigKey.enableAutoUpdate),
			locator.desktopSettingsFacade.getStringConfigValue(DesktopConfigKey.mailExportMode),
			getCurrentSpellcheckLanguageLabel()
		]);
		const { isMailtoHandler, isAutoLaunchEnabled, isIntegrated, isUpdateAvailable } = integrationInfo;
		this.isDefaultMailtoHandler(isMailtoHandler);
		this.defaultDownloadPath(defaultDownloadPath || lang.get("alwaysAsk_action"));
		this.runAsTrayApp(runAsTrayApp);
		this.runOnStartup(isAutoLaunchEnabled);
		this.isIntegrated(isIntegrated);
		this.showAutoUpdateOption = showAutoUpdateOption;
		this.isAutoUpdateEnabled(enableAutoUpdate);
		this.updateAvailable(isUpdateAvailable);
		this.mailExportMode(mailExportMode);
		this.spellCheckLang(spellcheckLabel);
		mithril_default.redraw();
	}
	async setBooleanValue(setting, value) {
		await locator.desktopSettingsFacade.setBooleanConfigValue(setting, value);
		mithril_default.redraw();
	}
	async setStringValue(setting, value) {
		await locator.desktopSettingsFacade.setStringConfigValue(setting, value);
		mithril_default.redraw();
	}
	async setDefaultDownloadPath(v) {
		this.isPathDialogOpen = true;
		let savePath;
		if (v === DownloadLocationStrategy.ALWAYS_ASK) savePath = null;
else savePath = await locator.fileApp.openFolderChooser();
		this.defaultDownloadPath(savePath ?? lang.get("alwaysAsk_action"));
		await this.setStringValue(DesktopConfigKey.defaultDownloadPath, savePath);
		this.isPathDialogOpen = false;
	}
	onAppUpdateAvailable() {
		this.updateAvailable(true);
		mithril_default.redraw();
	}
	entityEventsReceived = () => Promise.resolve();
};

//#endregion
//#region src/mail-app/settings/EditOutOfOfficeNotificationDialogModel.ts
var import_stream$7 = __toESM(require_stream(), 1);
let RecipientMessageType = function(RecipientMessageType$1) {
	RecipientMessageType$1[RecipientMessageType$1["EXTERNAL_TO_EVERYONE"] = 0] = "EXTERNAL_TO_EVERYONE";
	RecipientMessageType$1[RecipientMessageType$1["INTERNAL_AND_EXTERNAL"] = 1] = "INTERNAL_AND_EXTERNAL";
	RecipientMessageType$1[RecipientMessageType$1["INTERNAL_ONLY"] = 2] = "INTERNAL_ONLY";
	return RecipientMessageType$1;
}({});
const FAILURE_UPGRADE_REQUIRED = "outofoffice.not_available_on_current_plan";
var EditOutOfOfficeNotificationDialogModel = class {
	outOfOfficeNotification;
	enabled = (0, import_stream$7.default)(false);
	startDate = (0, import_stream$7.default)(new Date());
	endDate = (0, import_stream$7.default)(new Date());
	indefiniteTimeRange = (0, import_stream$7.default)(true);
	timeRangeEnabled = (0, import_stream$7.default)(false);
	organizationSubject = (0, import_stream$7.default)("");
	organizationMessage = (0, import_stream$7.default)("");
	defaultSubject = (0, import_stream$7.default)("");
	defaultMessage = (0, import_stream$7.default)("");
	recipientMessageTypes = (0, import_stream$7.default)(RecipientMessageType.EXTERNAL_TO_EVERYONE);
	_entityClient;
	_userController;
	_languageViewModel;
	constructor(outOfOfficeNotification, entityClient, userController, languageViewModel, serviceExecutor) {
		this.serviceExecutor = serviceExecutor;
		this._entityClient = entityClient;
		this._userController = userController;
		this._languageViewModel = languageViewModel;
		this._setDefaultMessages();
		if (!outOfOfficeNotification) {
			this.startDate(getStartOfDay(new Date()));
			this.outOfOfficeNotification = createOutOfOfficeNotification({
				notifications: [],
				enabled: false,
				endDate: null,
				startDate: null
			});
		} else {
			this.outOfOfficeNotification = outOfOfficeNotification;
			this.enabled(outOfOfficeNotification.enabled);
			let defaultEnabled = false;
			let organizationEnabled = false;
			for (const notification of outOfOfficeNotification.notifications) if (notification.type === OutOfOfficeNotificationMessageType.Default) {
				defaultEnabled = true;
				this.defaultSubject(notification.subject);
				this.defaultMessage(notification.message);
			} else if (notification.type === OutOfOfficeNotificationMessageType.InsideOrganization) {
				organizationEnabled = true;
				this.organizationSubject(notification.subject);
				this.organizationMessage(notification.message);
			}
			if (defaultEnabled && organizationEnabled) this.recipientMessageTypes(RecipientMessageType.INTERNAL_AND_EXTERNAL);
else if (organizationEnabled) this.recipientMessageTypes(RecipientMessageType.INTERNAL_ONLY);
else this.recipientMessageTypes(RecipientMessageType.EXTERNAL_TO_EVERYONE);
			if (outOfOfficeNotification.startDate) {
				this.startDate(outOfOfficeNotification.startDate);
				this.timeRangeEnabled(true);
				if (outOfOfficeNotification.endDate) {
					const shiftedEndDate = getDayShifted(outOfOfficeNotification.endDate, -1);
					this.endDate(shiftedEndDate);
					this.indefiniteTimeRange(false);
				} else this.indefiniteTimeRange(true);
			}
		}
	}
	_setDefaultMessages() {
		const templateSubject = this._languageViewModel.get("outOfOfficeDefaultSubject_msg");
		const templateMessage = appendEmailSignature(this._languageViewModel.get("outOfOfficeDefault_msg"), this._userController.props);
		this.organizationSubject(templateSubject);
		this.defaultSubject(templateSubject);
		this.defaultMessage(templateMessage);
		this.organizationMessage(templateMessage);
	}
	/**
	* Return OutOfOfficeNotification created from input data.
	* @throws UserError if time period is invalid
	* */
	getNotificationFromData() {
		let startDate = null;
		let endDate = null;
		if (this.timeRangeEnabled()) {
			startDate = this.startDate();
			if (!this.indefiniteTimeRange()) {
				endDate = getStartOfNextDay(this.endDate());
				if (startDate.getTime() > endDate.getTime() || endDate.getTime() < Date.now()) throw new UserError("invalidTimePeriod_msg");
			}
		}
		const notificationMessages = [];
		if (this.isDefaultMessageEnabled()) {
			const defaultNotification = createOutOfOfficeNotificationMessage({
				subject: this.defaultSubject().trim(),
				message: this.defaultMessage().trim(),
				type: OutOfOfficeNotificationMessageType.Default
			});
			notificationMessages.push(defaultNotification);
		}
		if (this.isOrganizationMessageEnabled()) {
			const organizationNotification = createOutOfOfficeNotificationMessage({
				subject: this.organizationSubject().trim(),
				message: this.organizationMessage().trim(),
				type: OutOfOfficeNotificationMessageType.InsideOrganization
			});
			notificationMessages.push(organizationNotification);
		}
		this.outOfOfficeNotification._ownerGroup = this._userController.getUserMailGroupMembership().group;
		this.outOfOfficeNotification.enabled = this.enabled();
		this.outOfOfficeNotification.startDate = startDate;
		this.outOfOfficeNotification.endDate = endDate;
		this.outOfOfficeNotification.notifications = notificationMessages;
		return this.outOfOfficeNotification;
	}
	isOrganizationMessageEnabled() {
		return this.recipientMessageTypes() === RecipientMessageType.INTERNAL_ONLY || this.recipientMessageTypes() === RecipientMessageType.INTERNAL_AND_EXTERNAL;
	}
	isDefaultMessageEnabled() {
		return this.recipientMessageTypes() === RecipientMessageType.EXTERNAL_TO_EVERYONE || this.recipientMessageTypes() === RecipientMessageType.INTERNAL_AND_EXTERNAL;
	}
	/**
	* @throws UserError
	* @throws UpgradeRequiredError
	*/
	saveOutOfOfficeNotification() {
		return Promise.resolve().then(() => this.getNotificationFromData()).then(async (sendableNotification) => {
			if (this._isNewNotification()) await this._entityClient.setup(null, sendableNotification);
else await this._entityClient.update(sendableNotification);
		}).catch(ofClass(InvalidDataError, (e) => {
			throw new UserError("outOfOfficeMessageInvalid_msg");
		})).catch(ofClass(PreconditionFailedError, async (e) => {
			if (e.data === FAILURE_UPGRADE_REQUIRED) throw new UpgradeRequiredError("upgradeRequired_msg", await getAvailablePlansWithAutoResponder());
else throw new UserError(lang.makeTranslation("error_msg", e.toString()));
		}));
	}
	_isNewNotification() {
		return !this.outOfOfficeNotification._id;
	}
};

//#endregion
//#region src/mail-app/settings/EditOutOfOfficeNotificationDialog.ts
function showEditOutOfOfficeNotificationDialog(outOfOfficeNotification) {
	const dialogModel = new EditOutOfOfficeNotificationDialogModel(outOfOfficeNotification, locator.entityClient, locator.logins.getUserController(), lang, locator.serviceExecutor);
	const organizationMessageEditor = new HtmlEditor("message_label").setMinHeight(100).showBorders().setValue(dialogModel.organizationMessage()).enableToolbar();
	const defaultMessageEditor = new HtmlEditor("message_label").setMinHeight(100).showBorders().setValue(dialogModel.defaultMessage()).enableToolbar();
	const saveOutOfOfficeNotification = () => {
		dialogModel.organizationMessage(organizationMessageEditor.getValue());
		dialogModel.defaultMessage(defaultMessageEditor.getValue());
		dialogModel.saveOutOfOfficeNotification().then(() => cancel()).catch(ofClass(UserError, (e) => showUserError(e))).catch(ofClass(UpgradeRequiredError, (e) => {
			showPlanUpgradeRequiredDialog(e.plans);
		}));
	};
	function cancel() {
		dialog.close();
	}
	const dialogHeaderAttrs = {
		left: [{
			label: "cancel_action",
			click: cancel,
			type: ButtonType.Secondary
		}],
		right: [{
			label: "save_action",
			click: saveOutOfOfficeNotification,
			type: ButtonType.Primary
		}],
		middle: "outOfOfficeNotification_title"
	};
	const dialog = Dialog.editDialog(dialogHeaderAttrs, EditOutOfOfficeNotificationDialog, {
		model: dialogModel,
		organizationMessageEditor,
		defaultMessageEditor
	}).addShortcut({
		key: Keys.ESC,
		exec: cancel,
		help: "close_alt"
	}).addShortcut({
		key: Keys.S,
		ctrlOrCmd: true,
		exec: saveOutOfOfficeNotification,
		help: "save_action"
	});
	dialog.show();
}
var EditOutOfOfficeNotificationDialog = class {
	view(vnode) {
		const { model, defaultMessageEditor, organizationMessageEditor } = vnode.attrs;
		const defaultEnabled = model.isDefaultMessageEnabled();
		const organizationEnabled = model.isOrganizationMessageEnabled();
		const startOfTheWeekOffset = getStartOfTheWeekOffsetForUser(locator.logins.getUserController().userSettingsGroupRoot);
		return [
			this.renderEnabled(model),
			this.renderRecipients(model),
			mithril_default(".mt.flex-start", mithril_default(Checkbox, {
				label: () => lang.get("outOfOfficeTimeRange_msg"),
				checked: model.timeRangeEnabled(),
				onChecked: model.timeRangeEnabled,
				helpLabel: "outOfOfficeTimeRangeHelp_msg"
			})),
			model.timeRangeEnabled() ? this.renderTimeRangeSelector(model, startOfTheWeekOffset) : null,
			mithril_default(".mt-l", lang.get("outOfOfficeUnencrypted_msg")),
			organizationEnabled ? this.renderOrganizations(model, organizationMessageEditor) : null,
			defaultEnabled ? this.renderDefault(organizationEnabled, model, defaultMessageEditor) : null,
			mithril_default(".pb", "")
		];
	}
	renderEnabled(model) {
		const statusItems = [{
			name: lang.get("deactivated_label"),
			value: false
		}, {
			name: lang.get("activated_label"),
			value: true
		}];
		return mithril_default(DropDownSelector, {
			label: "state_label",
			items: statusItems,
			selectedValue: model.enabled(),
			selectionChangedHandler: model.enabled
		});
	}
	renderDefault(organizationEnabled, model, defaultMessageEditor) {
		return [
			mithril_default(".h4.text-center.mt-l", getDefaultNotificationLabel(organizationEnabled)),
			mithril_default(TextField, {
				label: "subject_label",
				value: model.defaultSubject(),
				oninput: model.defaultSubject,
				injectionsLeft: () => mithril_default(".flex-no-grow-no-shrink-auto.pr-s", { style: {
					"line-height": px(24),
					opacity: "1"
				} }, OUT_OF_OFFICE_SUBJECT_PREFIX)
			}),
			mithril_default(defaultMessageEditor)
		];
	}
	renderOrganizations(model, organizationMessageEditor) {
		return [
			mithril_default(".h4.text-center.mt-l", lang.get("outOfOfficeInternal_msg")),
			mithril_default(TextField, {
				label: "subject_label",
				value: model.organizationSubject(),
				oninput: model.organizationSubject,
				injectionsLeft: () => mithril_default(".flex-no-grow-no-shrink-auto.pr-s", { style: {
					"line-height": px(24),
					opacity: "1"
				} }, OUT_OF_OFFICE_SUBJECT_PREFIX)
			}),
			mithril_default(organizationMessageEditor)
		];
	}
	renderRecipients(model) {
		const recipientItems = [
			{
				name: lang.get("everyone_label"),
				value: RecipientMessageType.EXTERNAL_TO_EVERYONE
			},
			{
				name: lang.get("insideOutside_label"),
				value: RecipientMessageType.INTERNAL_AND_EXTERNAL
			},
			{
				name: lang.get("insideOnly_label"),
				value: RecipientMessageType.INTERNAL_ONLY
			}
		];
		const recipientHelpLabel = () => {
			switch (model.recipientMessageTypes()) {
				case RecipientMessageType.EXTERNAL_TO_EVERYONE: return lang.get("outOfOfficeRecipientsEveryoneHelp_label");
				case RecipientMessageType.INTERNAL_AND_EXTERNAL: return lang.get("outOfOfficeRecipientsInternalExternalHelp_label");
				case RecipientMessageType.INTERNAL_ONLY: return lang.get("outOfOfficeRecipientsInternalOnlyHelp_label");
				default: return "";
			}
		};
		return mithril_default(DropDownSelector, {
			label: "outOfOfficeRecipients_label",
			items: recipientItems,
			selectedValue: model.recipientMessageTypes(),
			selectionChangedHandler: model.recipientMessageTypes,
			helpLabel: recipientHelpLabel
		});
	}
	renderTimeRangeSelector(model, startOfTheWeekOffset) {
		return mithril_default(".flex.col", [
			mithril_default(DatePicker, {
				date: model.startDate(),
				onDateSelected: model.startDate,
				label: "dateFrom_label",
				nullSelectionText: "emptyString_msg",
				startOfTheWeekOffset
			}),
			mithril_default(Checkbox, {
				label: () => lang.get("unlimited_label"),
				checked: model.indefiniteTimeRange(),
				onChecked: model.indefiniteTimeRange
			}),
			!model.indefiniteTimeRange() ? mithril_default(DatePicker, {
				date: model.endDate(),
				onDateSelected: model.endDate,
				label: "dateTo_label",
				nullSelectionText: "emptyString_msg",
				startOfTheWeekOffset
			}) : null
		]);
	}
};

//#endregion
//#region src/mail-app/settings/EditSignatureDialog.ts
assertMainOrNode();
const RECOMMENDED_SIGNATURE_SIZE_LIMIT = 15360;
function show$6(props) {
	import("./Signature2-chunk.js").then(({ getDefaultSignature }) => {
		const defaultSignature = getDefaultSignature();
		let currentCustomSignature = locator.logins.getUserController().props.customEmailSignature;
		if (currentCustomSignature === "" && !locator.logins.isEnabled(FeatureType.DisableDefaultSignature)) currentCustomSignature = defaultSignature;
		let selectedType = locator.logins.getUserController().props.emailSignatureType;
		const editor = new HtmlEditor("preview_label").showBorders().setMinHeight(200).setValue(getSignature(selectedType, defaultSignature, currentCustomSignature)).enableToolbar().setToolbarOptions({ imageButtonClickHandler: insertInlineImageB64ClickHandler }).setEnabled(selectedType === EmailSignatureType.EMAIL_SIGNATURE_TYPE_CUSTOM);
		const signatureTypes = getSignatureTypes(props);
		const form = { view: () => {
			return [mithril_default(DropDownSelector, {
				label: "userEmailSignature_label",
				items: signatureTypes,
				selectedValue: selectedType,
				selectionChangedHandler: (type) => {
					if (selectedType === EmailSignatureType.EMAIL_SIGNATURE_TYPE_CUSTOM) currentCustomSignature = editor.getValue();
					selectedType = type;
					editor.setValue(getSignature(type, defaultSignature, currentCustomSignature));
					editor.setEnabled(type === EmailSignatureType.EMAIL_SIGNATURE_TYPE_CUSTOM);
				}
			}), mithril_default(editor)];
		} };
		let editSignatureOkAction = (dialog) => {
			const props$1 = locator.logins.getUserController().props;
			const newType = selectedType;
			const newCustomValue = editor.getValue();
			const oldType = props$1.emailSignatureType;
			const oldCustomValue = props$1.customEmailSignature;
			const updateSignature = () => {
				props$1.emailSignatureType = newType;
				if (newType === EmailSignatureType.EMAIL_SIGNATURE_TYPE_CUSTOM) props$1.customEmailSignature = newCustomValue;
				const updatePromise = locator.entityClient.update(props$1);
				return showProgressDialog("pleaseWait_msg", updatePromise).then(() => dialog.close()).catch(ofClass(PayloadTooLargeError, () => {
					props$1.emailSignatureType = oldType;
					props$1.customEmailSignature = oldCustomValue;
					return Dialog.message("requestTooLarge_msg");
				}));
			};
			if (newType === oldType && (newType !== EmailSignatureType.EMAIL_SIGNATURE_TYPE_CUSTOM || newCustomValue === oldCustomValue)) return dialog.close();
else if (newType === EmailSignatureType.EMAIL_SIGNATURE_TYPE_CUSTOM && newCustomValue.length > RECOMMENDED_SIGNATURE_SIZE_LIMIT) {
				const signatureSizeKb = Math.floor(newCustomValue.length / 1024);
				const confirmLargeSignatureAttrs = {
					title: downcast("userEmailSignature_label"),
					child: { view: () => mithril_default("p", lang.get("largeSignature_msg", { "{1}": signatureSizeKb })) },
					okAction: (dialog$1) => {
						dialog$1.close();
						updateSignature();
					},
					allowOkWithReturn: true
				};
				Dialog.showActionDialog(confirmLargeSignatureAttrs);
			} else updateSignature();
		};
		Dialog.showActionDialog({
			title: "userEmailSignature_label",
			child: form,
			type: DialogType.EditLarge,
			okAction: editSignatureOkAction
		});
	});
}
function getSignatureTypes(props) {
	let signatureTypes = [{
		name: lang.get("emailSignatureTypeCustom_msg"),
		value: EmailSignatureType.EMAIL_SIGNATURE_TYPE_CUSTOM
	}, {
		name: lang.get("comboBoxSelectionNone_msg"),
		value: EmailSignatureType.EMAIL_SIGNATURE_TYPE_NONE
	}];
	if (!locator.logins.isEnabled(FeatureType.DisableDefaultSignature) || props.emailSignatureType === EmailSignatureType.EMAIL_SIGNATURE_TYPE_DEFAULT) signatureTypes.splice(0, 0, {
		name: lang.get("emailSignatureTypeDefault_msg"),
		value: EmailSignatureType.EMAIL_SIGNATURE_TYPE_DEFAULT
	});
	return signatureTypes;
}
function getSignature(type, defaultSignature, currentCustomSignature) {
	if (type === EmailSignatureType.EMAIL_SIGNATURE_TYPE_DEFAULT) return defaultSignature;
else if (type === EmailSignatureType.EMAIL_SIGNATURE_TYPE_CUSTOM) return currentCustomSignature;
else return "";
}
function getSignatureType(props) {
	return neverNull(getSignatureTypes(props).find((t) => t.value === props.emailSignatureType));
}

//#endregion
//#region src/mail-app/settings/OfflineStorageSettings.ts
var OfflineStorageSettingsModel = class {
	_isInitialized = false;
	isEnabled = null;
	timeRange = OFFLINE_STORAGE_DEFAULT_TIME_RANGE_DAYS;
	constructor(userController, deviceConfig$1) {
		this.userController = userController;
		this.deviceConfig = deviceConfig$1;
	}
	available() {
		return this._isInitialized && isOfflineStorageAvailable() && !!this.isEnabled;
	}
	assertAvailable() {
		assert(this.available(), "Not initialized or not available");
	}
	/**
	* get stored time range, will error out if offlineStorage isn't available.
	* if the user account is free, always returns the default time range and
	* resets the stored value if it's different from the default.
	*/
	getTimeRange() {
		this.assertAvailable();
		if (this.userController.isFreeAccount() && this.timeRange !== OFFLINE_STORAGE_DEFAULT_TIME_RANGE_DAYS) {
			this.setTimeRange(OFFLINE_STORAGE_DEFAULT_TIME_RANGE_DAYS).catch((e) => console.log("error while resetting storage time range:", e));
			this.timeRange = OFFLINE_STORAGE_DEFAULT_TIME_RANGE_DAYS;
			return OFFLINE_STORAGE_DEFAULT_TIME_RANGE_DAYS;
		}
		return this.timeRange;
	}
	async setTimeRange(days) {
		this.assertAvailable();
		await this.deviceConfig.setOfflineTimeRangeDays(this.userController.userId, days);
		this.timeRange = days;
	}
	async init() {
		this.isEnabled = isOfflineStorageAvailable();
		if (this.isEnabled) {
			const stored = this.deviceConfig.getOfflineTimeRangeDays(this.userController.userId);
			if (stored != null) this.timeRange = stored;
		}
		this._isInitialized = true;
	}
};

//#endregion
//#region src/mail-app/settings/MailSettingsViewer.ts
var import_stream$6 = __toESM(require_stream(), 1);
assertMainOrNode();
var MailSettingsViewer = class {
	_signature;
	_mailboxProperties;
	_reportMovedMails;
	_defaultSender;
	_defaultUnconfidential;
	_sendPlaintext;
	_noAutomaticContacts;
	_enableMailIndexing;
	_inboxRulesTableLines;
	_inboxRulesExpanded;
	_indexStateWatch;
	_outOfOfficeNotification;
	_outOfOfficeStatus;
	_storageFieldValue;
	customerInfo;
	mailAddressTableModel = null;
	mailAddressTableExpanded;
	offlineStorageSettings = new OfflineStorageSettingsModel(mailLocator.logins.getUserController(), deviceConfig);
	constructor() {
		this._defaultSender = getDefaultSenderFromUser(mailLocator.logins.getUserController());
		this._signature = (0, import_stream$6.default)(getSignatureType(mailLocator.logins.getUserController().props).name);
		this._reportMovedMails = getReportMovedMailsType(null);
		this._defaultUnconfidential = mailLocator.logins.getUserController().props.defaultUnconfidential;
		this._sendPlaintext = mailLocator.logins.getUserController().props.sendPlaintextOnly;
		this._noAutomaticContacts = mailLocator.logins.getUserController().props.noAutomaticContacts;
		this._enableMailIndexing = mailLocator.search.indexState().mailIndexEnabled;
		this._inboxRulesExpanded = (0, import_stream$6.default)(false);
		this.mailAddressTableExpanded = false;
		this._inboxRulesTableLines = (0, import_stream$6.default)([]);
		this._outOfOfficeStatus = (0, import_stream$6.default)(lang.get("deactivated_label"));
		this._indexStateWatch = null;
		mailLocator.mailAddressTableModelForOwnMailbox().then((model) => {
			this.mailAddressTableModel = model;
			mithril_default.redraw();
		});
		mithril_default.redraw();
		this._updateInboxRules(mailLocator.logins.getUserController().props);
		this._mailboxProperties = new LazyLoaded(async () => {
			const mailboxGroupRoot = await this.getMailboxGroupRoot();
			return mailLocator.mailboxModel.getMailboxProperties(mailboxGroupRoot);
		});
		this._updateMailboxPropertiesSettings();
		this._outOfOfficeNotification = new LazyLoaded(() => loadOutOfOfficeNotification(), null);
		this._outOfOfficeNotification.getAsync().then(() => this._updateOutOfOfficeNotification());
		this.customerInfo = null;
		this._storageFieldValue = (0, import_stream$6.default)("");
		this.offlineStorageSettings.init().then(() => mithril_default.redraw());
	}
	async oninit() {
		this.customerInfo = await mailLocator.logins.getUserController().loadCustomerInfo();
		this.updateStorageField(this.customerInfo).then(() => mithril_default.redraw());
	}
	async getMailboxGroupRoot() {
		const { mailboxGroupRoot } = await mailLocator.mailboxModel.getUserMailboxDetails();
		return mailboxGroupRoot;
	}
	async updateStorageField(customerInfo) {
		const user = mailLocator.logins.getUserController().user;
		const usedStorage = formatStorageSize(Number(await mailLocator.userManagementFacade.readUsedUserStorage(user)));
		const totalStorage = formatStorageSize(Number(customerInfo.perUserStorageCapacity) * Const.MEMORY_GB_FACTOR);
		this._storageFieldValue(lang.get("amountUsedOf_label", {
			"{amount}": usedStorage,
			"{totalAmount}": totalStorage
		}));
	}
	view() {
		this._defaultSender = getDefaultSenderFromUser(mailLocator.logins.getUserController());
		const defaultSenderAttrs = {
			label: "defaultSenderMailAddress_label",
			items: getEnabledMailAddressesForGroupInfo(mailLocator.logins.getUserController().userGroupInfo).sort().map((a) => ({
				name: a,
				value: a
			})),
			selectedValue: this._defaultSender,
			selectedValueDisplay: getMailAddressDisplayText(this.mailAddressTableModel?.addresses().find(({ address }) => address === this._defaultSender)?.name ?? "", this._defaultSender, false),
			selectionChangedHandler: (defaultSenderAddress) => {
				mailLocator.logins.getUserController().props.defaultSender = defaultSenderAddress;
				mailLocator.entityClient.update(mailLocator.logins.getUserController().props);
			},
			helpLabel: () => lang.get("defaultSenderMailAddressInfo_msg"),
			dropdownWidth: 300
		};
		const changeSignatureButtonAttrs = {
			title: "userEmailSignature_label",
			click: () => show$6(mailLocator.logins.getUserController().props),
			icon: Icons.Edit,
			size: ButtonSize.Compact
		};
		const signatureAttrs = {
			label: "userEmailSignature_label",
			value: this._signature(),
			oninput: this._signature,
			isReadOnly: true,
			injectionsRight: () => [mithril_default(IconButton, changeSignatureButtonAttrs)]
		};
		const editOutOfOfficeNotificationButtonAttrs = {
			title: "outOfOfficeNotification_title",
			click: () => {
				this._outOfOfficeNotification.getAsync().then((notification) => showEditOutOfOfficeNotificationDialog(notification));
			},
			icon: Icons.Edit,
			size: ButtonSize.Compact
		};
		const outOfOfficeAttrs = {
			label: "outOfOfficeNotification_title",
			value: this._outOfOfficeStatus(),
			oninput: this._outOfOfficeStatus,
			isReadOnly: true,
			injectionsRight: () => [mithril_default(IconButton, editOutOfOfficeNotificationButtonAttrs)]
		};
		const defaultUnconfidentialAttrs = {
			label: "defaultExternalDelivery_label",
			items: [{
				name: lang.get("confidential_action"),
				value: false
			}, {
				name: lang.get("nonConfidential_action"),
				value: true
			}],
			selectedValue: this._defaultUnconfidential,
			selectionChangedHandler: (v) => {
				mailLocator.logins.getUserController().props.defaultUnconfidential = v;
				mailLocator.entityClient.update(mailLocator.logins.getUserController().props);
			},
			helpLabel: () => lang.get("defaultExternalDeliveryInfo_msg"),
			dropdownWidth: 250
		};
		const sendPlaintextAttrs = {
			label: "externalFormatting_label",
			helpLabel: () => lang.get("externalFormattingInfo_msg"),
			items: [{
				name: lang.get("html_action"),
				value: false
			}, {
				name: lang.get("plaintext_action"),
				value: true
			}],
			selectedValue: this._sendPlaintext,
			selectionChangedHandler: (v) => {
				mailLocator.logins.getUserController().props.sendPlaintextOnly = v;
				mailLocator.entityClient.update(mailLocator.logins.getUserController().props);
			},
			dropdownWidth: 250
		};
		const enableMailIndexingAttrs = {
			label: "searchMailbox_label",
			helpLabel: () => lang.get("enableSearchMailbox_msg"),
			items: [{
				name: lang.get("activated_label"),
				value: true
			}, {
				name: lang.get("deactivated_label"),
				value: false
			}],
			selectedValue: this._enableMailIndexing,
			selectionChangedHandler: (mailIndexEnabled) => {
				if (mailIndexEnabled) showProgressDialog("pleaseWait_msg", mailLocator.indexerFacade.enableMailIndexing()).catch(ofClass(IndexingNotSupportedError, () => {
					Dialog.message(isApp() ? "searchDisabledApp_msg" : "searchDisabled_msg");
				}));
else showProgressDialog("pleaseWait_msg", mailLocator.indexerFacade.disableMailIndexing());
			},
			dropdownWidth: 250
		};
		const behaviorAfterMoveEmailAction = {
			label: "behaviorAfterMovingEmail_label",
			helpLabel: () => "",
			items: [
				{
					name: lang.get("showOlder_label"),
					value: ListAutoSelectBehavior.OLDER
				},
				{
					name: lang.get("showNewer_label"),
					value: ListAutoSelectBehavior.NEWER
				},
				{
					name: lang.get("showNone_label"),
					value: ListAutoSelectBehavior.NONE
				}
			],
			selectedValue: deviceConfig.getMailAutoSelectBehavior(),
			selectionChangedHandler: (behavior) => deviceConfig.setMailAutoSelectBehavior(behavior),
			dropdownWidth: 250
		};
		const reportMovedMailsAttrs = this.makeReportMovedMailsDropdownAttrs();
		const templateRule = createInboxRuleTemplate(InboxRuleType.RECIPIENT_TO_EQUALS, "");
		const addInboxRuleButtonAttrs = {
			title: "addInboxRule_action",
			click: () => mailLocator.mailboxModel.getUserMailboxDetails().then((mailboxDetails) => show$1(mailboxDetails, templateRule)),
			icon: Icons.Add,
			size: ButtonSize.Compact
		};
		const inboxRulesTableAttrs = {
			columnHeading: [
				"inboxRuleField_label",
				"inboxRuleValue_label",
				"inboxRuleTargetFolder_label"
			],
			columnWidths: [
				ColumnWidth.Small,
				ColumnWidth.Largest,
				ColumnWidth.Small
			],
			showActionButtonColumn: true,
			addButtonAttrs: addInboxRuleButtonAttrs,
			lines: this._inboxRulesTableLines()
		};
		const conversationViewDropdownAttrs = {
			label: "conversationViewPref_label",
			items: [{
				name: lang.get("showAllMailsInThread_label"),
				value: false
			}, {
				name: lang.get("showOnlySelectedMail_label"),
				value: true
			}],
			selectedValue: deviceConfig.getConversationViewShowOnlySelectedMail(),
			selectionChangedHandler: (arg) => {
				deviceConfig.setConversationViewShowOnlySelectedMail(arg);
			},
			dropdownWidth: 350
		};
		return [mithril_default("#user-settings.fill-absolute.scroll.plr-l.pb-xl", {
			role: "group",
			oncreate: () => {
				this._indexStateWatch = mailLocator.search.indexState.map((newValue) => {
					this._enableMailIndexing = newValue.mailIndexEnabled;
					mithril_default.redraw();
				});
			},
			onremove: () => {
				if (this._indexStateWatch) this._indexStateWatch.end(true);
			}
		}, [
			this.customerInfo != null && Number(this.customerInfo.perUserStorageCapacity) > 0 ? [mithril_default(".h4.mt-l", lang.get("storageCapacity_label")), mithril_default(TextField, {
				label: "storageCapacity_label",
				value: this._storageFieldValue(),
				oninput: this._storageFieldValue,
				isReadOnly: true
			})] : null,
			mithril_default(".h4.mt-l", lang.get("general_label")),
			mithril_default(DropDownSelector, conversationViewDropdownAttrs),
			mithril_default(DropDownSelector, enableMailIndexingAttrs),
			mithril_default(DropDownSelector, behaviorAfterMoveEmailAction),
			mithril_default(".h4.mt-l", lang.get("emailSending_label")),
			mithril_default(DropDownSelector, defaultSenderAttrs),
			mithril_default(TextField, signatureAttrs),
			mailLocator.logins.isEnabled(FeatureType.InternalCommunication) ? null : mithril_default(DropDownSelector, defaultUnconfidentialAttrs),
			mailLocator.logins.isEnabled(FeatureType.InternalCommunication) ? null : mithril_default(DropDownSelector, sendPlaintextAttrs),
			mithril_default(DropDownSelector, reportMovedMailsAttrs),
			mithril_default(TextField, outOfOfficeAttrs),
			this.renderLocalDataSection(),
			this.mailAddressTableModel ? mithril_default(MailAddressTable, {
				model: this.mailAddressTableModel,
				expanded: this.mailAddressTableExpanded,
				onExpanded: (newExpanded) => this.mailAddressTableExpanded = newExpanded
			}) : null,
			mailLocator.logins.isEnabled(FeatureType.InternalCommunication) ? null : [
				mithril_default(".flex-space-between.items-center.mt-l.mb-s", [mithril_default(".h4", lang.get("inboxRulesSettings_action")), mithril_default(ExpanderButton, {
					label: "showInboxRules_action",
					expanded: this._inboxRulesExpanded(),
					onExpandedChange: this._inboxRulesExpanded
				})]),
				mithril_default(ExpanderPanel, { expanded: this._inboxRulesExpanded() }, mithril_default(Table, inboxRulesTableAttrs)),
				mithril_default(".small", lang.get("nbrOfInboxRules_msg", { "{1}": mailLocator.logins.getUserController().props.inboxRules.length }))
			]
		])];
	}
	renderLocalDataSection() {
		if (!this.offlineStorageSettings.available()) return null;
		return [mithril_default(".h4.mt-l", lang.get("localDataSection_label")), mithril_default(TextField, {
			label: "emptyString_msg",
			class: "mt-negative-s",
			value: lang.get("storedDataTimeRange_label", { "{numDays}": this.offlineStorageSettings.getTimeRange() }),
			isReadOnly: true,
			injectionsRight: () => [mithril_default(IconButton, {
				title: "edit_action",
				click: () => this.onEditStoredDataTimeRangeClicked(),
				icon: Icons.Edit,
				size: ButtonSize.Compact
			})]
		})];
	}
	async onEditStoredDataTimeRangeClicked() {
		if (mailLocator.logins.getUserController().isFreeAccount()) showNotAvailableForFreeDialog();
else {
			await showEditStoredDataTimeRangeDialog(this.offlineStorageSettings);
			mithril_default.redraw();
		}
	}
	_updateTutanotaPropertiesSettings(props) {
		if (props.defaultSender) this._defaultSender = props.defaultSender;
		this._defaultUnconfidential = props.defaultUnconfidential;
		this._noAutomaticContacts = props.noAutomaticContacts;
		this._sendPlaintext = props.sendPlaintextOnly;
		this._signature(getSignatureType(props).name);
	}
	_updateMailboxPropertiesSettings() {
		this._mailboxProperties.getAsync().then((props) => {
			this._reportMovedMails = getReportMovedMailsType(props);
			mithril_default.redraw();
		});
	}
	_updateInboxRules(props) {
		mailLocator.mailboxModel.getUserMailboxDetails().then(async (mailboxDetails) => {
			this._inboxRulesTableLines(await pMap(props.inboxRules, async (rule, index) => {
				return {
					cells: [
						getInboxRuleTypeName(rule.type),
						rule.value,
						await this.getTextForTarget(mailboxDetails, rule.targetFolder)
					],
					actionButtonAttrs: createRowActions({
						getArray: () => props.inboxRules,
						updateInstance: () => mailLocator.entityClient.update(props).catch(ofClass(LockedError, noOp))
					}, rule, index, [{
						label: "edit_action",
						click: () => show$1(mailboxDetails, rule)
					}])
				};
			}));
			mithril_default.redraw();
		});
	}
	_updateOutOfOfficeNotification() {
		const notification = this._outOfOfficeNotification.getLoaded();
		this._outOfOfficeStatus(formatActivateState(notification));
		mithril_default.redraw();
	}
	async getTextForTarget(mailboxDetail, targetFolderId) {
		const folders = await mailLocator.mailModel.getMailboxFoldersForId(assertNotNull(mailboxDetail.mailbox.folders)._id);
		let folder = folders.getFolderById(elementIdPart(targetFolderId));
		if (folder) return getFolderName(folder);
else return lang.get("deletedFolder_label");
	}
	async entityEventsReceived(updates) {
		for (const update of updates) {
			const { operation } = update;
			if (isUpdateForTypeRef(TutanotaPropertiesTypeRef, update) && operation === OperationType.UPDATE) {
				const props = await mailLocator.entityClient.load(TutanotaPropertiesTypeRef, mailLocator.logins.getUserController().props._id);
				this._updateTutanotaPropertiesSettings(props);
				this._updateInboxRules(props);
			} else if (isUpdateForTypeRef(MailFolderTypeRef, update)) this._updateInboxRules(mailLocator.logins.getUserController().props);
else if (isUpdateForTypeRef(OutOfOfficeNotificationTypeRef, update)) this._outOfOfficeNotification.reload().then(() => this._updateOutOfOfficeNotification());
else if (isUpdateForTypeRef(MailboxPropertiesTypeRef, update)) this._mailboxProperties.reload().then(() => this._updateMailboxPropertiesSettings());
		}
		mithril_default.redraw();
	}
	makeReportMovedMailsDropdownAttrs() {
		return {
			label: "spamReports_label",
			helpLabel: () => lang.get("unencryptedTransmission_msg"),
			items: [
				{
					name: lang.get("alwaysAsk_action"),
					value: ReportMovedMailsType.ALWAYS_ASK
				},
				{
					name: lang.get("alwaysReport_action"),
					value: ReportMovedMailsType.AUTOMATICALLY_ONLY_SPAM
				},
				{
					name: lang.get("neverReport_action"),
					value: ReportMovedMailsType.NEVER
				}
			],
			selectedValue: this._reportMovedMails,
			selectionChangedHandler: async (reportMovedMails) => {
				const mailboxGroupRoot = await this.getMailboxGroupRoot();
				await mailLocator.mailModel.saveReportMovedMails(mailboxGroupRoot, reportMovedMails);
			},
			dropdownWidth: 250
		};
	}
};
async function showEditStoredDataTimeRangeDialog(settings) {
	const initialTimeRange = settings.getTimeRange();
	let timeRange = initialTimeRange;
	const newTimeRangeDeferred = defer();
	const dialog = Dialog.showActionDialog({
		title: "emptyString_msg",
		child: () => mithril_default(TextField, {
			label: lang.makeTranslation("days_label", capitalizeFirstLetter(lang.get("days_label"))),
			helpLabel: () => lang.get("storedDataTimeRangeHelpText_msg"),
			type: TextFieldType.Number,
			value: `${timeRange}`,
			oninput: (newValue) => {
				timeRange = Math.max(0, Number(newValue));
			}
		}),
		okAction: async () => {
			try {
				if (initialTimeRange !== timeRange) await settings.setTimeRange(timeRange);
			} finally {
				dialog.close();
			}
		}
	});
	return newTimeRangeDeferred.promise;
}

//#endregion
//#region src/common/subscription/BuyDialog.ts
assertMainOrNode();
async function showBuyDialog(params) {
	if (locator.logins.isEnabled(FeatureType.HideBuyDialogs)) return true;
	const priceChangeModel = await showProgressDialog("pleaseWait_msg", prepareDialog(params));
	if (priceChangeModel) return showDialog(priceChangeModel.getActionLabel(), () => mithril_default(ConfirmSubscriptionView, {
		priceChangeModel,
		count: params.count,
		freeAmount: params.freeAmount,
		bookingText: params.bookingText
	}));
else return false;
}
async function prepareDialog({ featureType, count, reactivate }) {
	const price = await locator.bookingFacade.getPrice(featureType, count, reactivate);
	const priceChangeModel = new PriceChangeModel(price, featureType);
	const customerInfo = await locator.logins.getUserController().loadCustomerInfo();
	const accountingInfo = await locator.entityClient.load(AccountingInfoTypeRef, customerInfo.accountingInfo).catch(ofClass(NotAuthorizedError, () => null));
	if (accountingInfo && accountingInfo.paymentMethod == null) {
		const confirm = await Dialog.confirm("enterPaymentDataFirst_msg");
		if (confirm) mithril_default.route.set("/settings/invoice");
		return null;
	} else return priceChangeModel;
}
function showDialog(okLabel, view) {
	return new Promise((resolve) => {
		let dialog;
		const doAction = (res) => {
			dialog.close();
			resolve(res);
		};
		dialog = Dialog.showActionDialog({
			okActionTextId: okLabel,
			title: "bookingSummary_label",
			child: () => view(),
			okAction: () => doAction(true),
			cancelAction: () => doAction(false),
			type: DialogType.EditSmall
		});
	});
}
var ConfirmSubscriptionView = class {
	view({ attrs }) {
		const { priceChangeModel, count, freeAmount } = attrs;
		const chargeDate = incrementDate(priceChangeModel.periodEndDate(), 1);
		return mithril_default("", [
			mithril_default(TextField, {
				label: "bookingOrder_label",
				value: lang.get(attrs.bookingText, { "{1}": Math.abs(count) }),
				type: TextFieldType.Area,
				isReadOnly: true
			}),
			priceChangeModel.isBuy() ? mithril_default(TextField, {
				label: "subscription_label",
				helpLabel: () => lang.get("nextChargeOn_label", { "{chargeDate}": formatDate(chargeDate) }),
				value: this.getSubscriptionText(priceChangeModel),
				isReadOnly: true
			}) : null,
			mithril_default(TextField, {
				label: "price_label",
				helpLabel: () => this.getPriceInfoText(priceChangeModel),
				value: this.getPriceText(priceChangeModel),
				isReadOnly: true
			})
		]);
	}
	getSubscriptionText(model) {
		if (model.isYearly()) return lang.get("pricing.yearly_label");
else return lang.get("pricing.monthly_label");
	}
	getPriceText(model) {
		let netGrossText = model.taxIncluded() ? lang.get("gross_label") : lang.get("net_label");
		let periodText = model.isYearly() ? lang.get("pricing.perYear_label") : lang.get("pricing.perMonth_label");
		const futurePriceNextPeriod = model.futurePrice;
		let currentPriceNextPeriod = model.currentPrice;
		if (model.isSinglePriceType()) {
			const priceDiff = futurePriceNextPeriod - currentPriceNextPeriod;
			return `${formatPrice(priceDiff, true)} ${periodText} (${netGrossText})`;
		} else return `${formatPrice(futurePriceNextPeriod, true)} ${periodText} (${netGrossText})`;
	}
	getPriceInfoText(model) {
		if (model.isUnbuy()) return lang.get("priceChangeValidFrom_label", { "{1}": formatDate(model.periodEndDate()) });
else if (model.addedPriceForCurrentPeriod() > 0) return lang.get("priceForCurrentAccountingPeriod_label", { "{1}": formatPrice(model.addedPriceForCurrentPeriod(), true) });
else return "";
	}
};
var PriceChangeModel = class {
	currentItem;
	futureItem;
	currentPrice;
	futurePrice;
	additionalFeatures;
	constructor(price, featureType) {
		this.price = price;
		this.featureType = featureType;
		this.currentItem = getPriceItem(price.currentPriceNextPeriod, featureType);
		this.futureItem = getPriceItem(price.futurePriceNextPeriod, featureType);
		this.currentPrice = this.getPriceFromPriceData(price.currentPriceNextPeriod, featureType);
		this.futurePrice = this.getPriceFromPriceData(price.futurePriceNextPeriod, featureType);
		if (this.featureType === BookingItemFeatureType.LegacyUsers) this.additionalFeatures = new Set([
			BookingItemFeatureType.Whitelabel,
			BookingItemFeatureType.Sharing,
			BookingItemFeatureType.Business
		].filter((f) => this.getFuturePrice(f) > 0));
else this.additionalFeatures = new Set();
	}
	getActionLabel() {
		if (!this.isPriceChange()) return "accept_action";
		if (this.isBuy()) return "buy_action";
		return "order_action";
	}
	isBuy() {
		return this.currentPrice < this.futurePrice;
	}
	isUnbuy() {
		return this.currentPrice > this.futurePrice;
	}
	isPriceChange() {
		return this.currentPrice !== this.futurePrice;
	}
	isSinglePriceType() {
		return this.anyItem().singleType;
	}
	getCurrentCount() {
		return filterInt(assertNotNull(this.currentItem).count);
	}
	getFutureCount() {
		return filterInt(assertNotNull(this.futureItem).count);
	}
	isYearly() {
		const period = assertNotNull(this.price.futurePriceNextPeriod ?? this.price.currentPriceNextPeriod);
		return asPaymentInterval(period.paymentInterval) === PaymentInterval.Yearly;
	}
	taxIncluded() {
		return assertNotNull(this.price.futurePriceNextPeriod).taxIncluded;
	}
	periodEndDate() {
		return new Date(this.price.periodEndDate);
	}
	addedPriceForCurrentPeriod() {
		return this.price.currentPeriodAddedPrice ? filterInt(this.price.currentPeriodAddedPrice) : 0;
	}
	anyItem() {
		return assertNotNull(this.futureItem ?? this.currentItem);
	}
	getFuturePrice(featureType) {
		return this.getPriceFromPriceData(this.price.futurePriceNextPeriod, featureType);
	}
	/**
	* Returns the price for the feature type from the price data if available, otherwise 0.
	*/
	getPriceFromPriceData(priceData, featureType) {
		let item = getPriceItem(priceData, featureType);
		let itemPrice = item ? Number(item.price) : 0;
		if (featureType === BookingItemFeatureType.LegacyUsers) {
			itemPrice += this.getPriceFromPriceData(priceData, BookingItemFeatureType.Whitelabel);
			itemPrice += this.getPriceFromPriceData(priceData, BookingItemFeatureType.Sharing);
			itemPrice += this.getPriceFromPriceData(priceData, BookingItemFeatureType.Business);
		}
		return itemPrice;
	}
};

//#endregion
//#region src/common/settings/groups/GroupDetailsView.ts
assertMainOrNode();
var GroupDetailsView = class {
	constructor(model) {
		this.model = model;
	}
	/**
	* render the header that tells us what type of group we have here
	* @private
	*/
	renderHeader() {
		return mithril_default(".h4.mt-l", getGroupTypeDisplayName(this.model.getGroupType()));
	}
	renderView() {
		return mithril_default("#user-viewer.fill-absolute.scroll.plr-l", [
			this.renderHeader(),
			this.renderCommonInfo(),
			this.renderMailGroupInfo()
		]);
	}
	/**
	* render the fields that are common to all group types
	* @private
	*/
	renderCommonInfo() {
		return [
			this.renderCreatedTextField(),
			this.renderNameField(),
			this.renderStatusSelector(),
			this.renderMembersTable()
		];
	}
	renderCreatedTextField() {
		return mithril_default(TextField, {
			label: "created_label",
			value: formatDateWithMonth(this.model.getCreationDate()),
			isReadOnly: true
		});
	}
	/**
	* render the information that only shared mailboxes have
	* @private
	*/
	renderMailGroupInfo() {
		return [
			this.renderUsedStorage(),
			mithril_default(TextField, {
				label: "mailAddress_label",
				value: this.model.getGroupMailAddress(),
				isReadOnly: true
			}),
			mithril_default(TextField, {
				label: "mailName_label",
				value: this.model.getGroupSenderName(),
				isReadOnly: true,
				injectionsRight: () => mithril_default(IconButton, {
					icon: Icons.Edit,
					title: "setSenderName_action",
					click: () => {
						this.showChangeSenderNameDialog();
					}
				})
			})
		];
	}
	renderStatusSelector() {
		const attrs = {
			label: "state_label",
			items: [{
				name: lang.get("activated_label"),
				value: false
			}, {
				name: lang.get("deactivated_label"),
				value: true
			}],
			selectedValue: !this.model.isGroupActive(),
			selectionChangedHandler: (deactivate) => this.onActivationStatusChanged(deactivate)
		};
		return mithril_default(DropDownSelector, attrs);
	}
	async onActivationStatusChanged(deactivate) {
		const buyParams = await showProgressDialog("pleaseWait_msg", this.model.validateGroupActivationStatus(deactivate));
		if (!buyParams) return;
		const confirmed = await showBuyDialog(buyParams);
		if (!confirmed) return;
		await showProgressDialog("pleaseWait_msg", this.model.executeGroupBuy(deactivate));
	}
	renderNameField() {
		return mithril_default(TextField, {
			label: "name_label",
			value: this.model.getGroupName(),
			isReadOnly: true,
			injectionsRight: () => mithril_default(IconButton, {
				title: "edit_action",
				click: () => this.showChangeNameDialog(),
				icon: Icons.Edit,
				size: ButtonSize.Compact
			})
		});
	}
	showChangeNameDialog() {
		Dialog.showProcessTextInputDialog({
			title: "edit_action",
			label: "name_label",
			defaultValue: this.model.getGroupName(),
			inputValidator: (newName) => this.model.validateGroupName(newName)
		}, (newName) => this.model.changeGroupName(newName));
	}
	showChangeSenderNameDialog() {
		Dialog.showProcessTextInputDialog({
			title: "edit_action",
			label: "name_label",
			defaultValue: this.model.getGroupSenderName()
		}, (newName) => this.model.changeGroupSenderName(newName));
	}
	renderUsedStorage() {
		const usedStorage = this.model.getUsedStorage();
		const formattedStorage = usedStorage ? formatStorageSize(usedStorage) : lang.get("loading_msg");
		return mithril_default(TextField, {
			label: "storageCapacityUsed_label",
			value: formattedStorage,
			isReadOnly: true
		});
	}
	async showAddMemberDialog() {
		const possibleMembers = await this.model.getPossibleMembers();
		if (possibleMembers.length === 0) return Dialog.message("noValidMembersToAdd_msg");
		let currentSelection = getFirstOrThrow(possibleMembers).value;
		const addUserToGroupOkAction = (dialog) => {
			showProgressDialog("pleaseWait_msg", this.model.addUserToGroup(currentSelection));
			dialog.close();
		};
		Dialog.showActionDialog({
			title: "addUserToGroup_label",
			child: { view: () => mithril_default(DropDownSelector, {
				label: "account_label",
				items: possibleMembers,
				selectedValue: currentSelection,
				selectionChangedHandler: (newSelected) => currentSelection = newSelected,
				dropdownWidth: 250
			}) },
			allowOkWithReturn: true,
			okAction: addUserToGroupOkAction
		});
	}
	async entityEventsReceived(updates) {
		return this.model.entityEventsReceived(updates);
	}
	renderMembersTable() {
		if (!this.model.isGroupActive()) return null;
		const addUserButtonAttrs = {
			title: "addUserToGroup_label",
			click: () => this.showAddMemberDialog(),
			icon: Icons.Add,
			size: ButtonSize.Compact
		};
		const lines = this.model.getMembersInfo().map((userGroupInfo) => {
			const removeButtonAttrs = {
				title: "remove_action",
				click: () => showProgressDialog("pleaseWait_msg", this.model.removeGroupMember(userGroupInfo)),
				icon: Icons.Cancel,
				size: ButtonSize.Compact
			};
			return {
				cells: [userGroupInfo.name, neverNull(userGroupInfo.mailAddress)],
				actionButtonAttrs: removeButtonAttrs
			};
		});
		const membersTableAttrs = {
			columnHeading: ["name_label", "mailAddress_label"],
			columnWidths: [ColumnWidth.Largest, ColumnWidth.Largest],
			showActionButtonColumn: true,
			addButtonAttrs: addUserButtonAttrs,
			lines
		};
		return [mithril_default(".h5.mt-l.mb-s", lang.get("groupMembers_label")), mithril_default(Table, membersTableAttrs)];
	}
};
function getGroupTypeDisplayName(groupType) {
	if (groupType == null) return "";
else if (groupType === GroupType.Mail) return lang.get("sharedMailbox_label");
else if (groupType === GroupType.User) return lang.get("userColumn_label");
else if (groupType === GroupType.Template) return lang.get("templateGroup_label");
else return groupType;
}

//#endregion
//#region src/common/settings/ImportUsersViewer.ts
const delayTime = 900;
const CSV_USER_FORMAT = "username;user@domain.com;password";
function checkAndImportUserData(userDetailsInputCsv, availableDomains) {
	let userData = csvToUserDetails(userDetailsInputCsv);
	if (!userData) {
		Dialog.message(lang.getTranslation("wrongUserCsvFormat_msg", { "{format}": CSV_USER_FORMAT }));
		return false;
	} else {
		const errorMessage = checkAndGetErrorMessage(userData, availableDomains);
		if (!errorMessage) {
			if (userData.length > 0) showBookingDialog(userData);
			return true;
		} else {
			Dialog.message(lang.makeTranslation("error_msg", errorMessage));
			return false;
		}
	}
}
/**
* Returns the user data from the given csv string or null if the scv string is not valid
*/
function csvToUserDetails(csvString) {
	let lines = csvString.replace("\r", "").split("\n").filter((l) => "" !== l.trim());
	let error = false;
	let userData = lines.map((a) => {
		let parts = a.trim().split(";");
		if (parts.length !== 3) {
			error = true;
			return null;
		} else return {
			username: parts[0],
			mailAddress: parts[1],
			password: parts[2]
		};
	});
	if (error) return null;
else return userData;
}
/**
* Check the user data for validity. Returns an error message for the first user with invalid data, otherwise null.
*/
function checkAndGetErrorMessage(userData, availableDomains) {
	if (userData.length === 0) return lang.get("noInputWasMade_msg");
else {
		let errorMessageArray = [];
		let errorMessage = null;
		userData.find((u, index) => {
			let mailAddress = u.mailAddress;
			let domain = u.mailAddress.split("@")[1].toLowerCase().trim();
			if (!isMailAddress(u.mailAddress, true)) errorMessageArray.push("mailAddressInvalid_msg");
			if (!contains(availableDomains, domain)) errorMessageArray.push("customDomainErrorDomainNotAvailable_msg");
			if (u.password.trim() === "") errorMessageArray.push("enterMissingPassword_msg");
			if (userData.some((otherUser) => otherUser.mailAddress === mailAddress && otherUser !== u)) errorMessageArray.push("duplicatedMailAddressInUserList_msg");
			if (errorMessageArray.length > 0) {
				errorMessage = errorMessageArray.map((e) => lang.get(e)).join("\n") + "\n" + lang.get("errorAtLine_msg", {
					"{index}": index + 1,
					"{error}": `"${u.username || ""};${u.mailAddress || ""};${u.password || ""}"`
				});
				return true;
			}
		});
		return errorMessage;
	}
}
async function showBookingDialog(userDetailsArray) {
	const userController = locator.logins.getUserController();
	const planType = await userController.getPlanType();
	const accepted = await showBuyDialog({
		featureType: await userController.isNewPaidPlan() ? toFeatureType(planType) : BookingItemFeatureType.LegacyUsers,
		bookingText: "bookingItemUsersIncluding_label",
		count: userDetailsArray.length,
		freeAmount: 0,
		reactivate: false
	});
	if (!accepted) return;
	let nbrOfCreatedUsers = 0;
	let notAvailableUsers = [];
	const operation = locator.operationProgressTracker.startNewOperation();
	await showProgressDialog(lang.getTranslation("createActionStatus_msg", {
		"{index}": nbrOfCreatedUsers,
		"{count}": userDetailsArray.length
	}), pMap(userDetailsArray, (user, userIndex) => {
		return createUserIfMailAddressAvailable(user, userIndex, userDetailsArray.length, operation.id).then((created) => {
			if (created) {
				nbrOfCreatedUsers++;
				mithril_default.redraw();
			} else notAvailableUsers.push(user);
		});
	}), operation.progress).catch(ofClass(PreconditionFailedError, () => Dialog.message("createUserFailed_msg"))).finally(() => operation.done);
	if (notAvailableUsers.length > 0) await Dialog.message(lang.makeTranslation("addressesAlreadyInUse_msg", lang.get("addressesAlreadyInUse_msg") + " " + notAvailableUsers.map((u) => u.mailAddress).join(", ")));
	await Dialog.message(lang.getTranslation("createdUsersCount_msg", { "{1}": nbrOfCreatedUsers }));
}
/**
* @returns True if the user was created, false if the email address is not available.
*/
function createUserIfMailAddressAvailable(user, index, overallNumberOfUsers, operationId) {
	let cleanMailAddress = user.mailAddress.trim().toLowerCase();
	return locator.mailAddressFacade.isMailAddressAvailable(cleanMailAddress).then(async (available) => {
		if (available) return locator.userManagementFacade.createUser(user.username ? user.username : "", cleanMailAddress, user.password, index, overallNumberOfUsers, operationId).then(() => {
			return delay(delayTime).then(() => true);
		});
else return delay(delayTime).then(() => false);
	});
}

//#endregion
//#region src/common/settings/UserViewer.ts
assertMainOrNode();
var UserViewer = class {
	user = new LazyLoaded(() => this.loadUser());
	customer = new LazyLoaded(() => this.loadCustomer());
	teamGroupInfos = new LazyLoaded(() => this.loadTeamGroupInfos());
	groupsTableAttrs = null;
	secondFactorsForm;
	usedStorage = null;
	mailAddressTableModel = null;
	mailAddressTableExpanded;
	constructor(userGroupInfo, isAdmin) {
		this.userGroupInfo = userGroupInfo;
		this.isAdmin = isAdmin;
		this.userGroupInfo = userGroupInfo;
		this.mailAddressTableExpanded = false;
		this.secondFactorsForm = new SecondFactorsEditForm(this.user, locator.domainConfigProvider(), locator.loginFacade, this.isAdmin, !!this.userGroupInfo.deleted);
		this.teamGroupInfos.getAsync().then(async (availableTeamGroupInfos) => {
			if (availableTeamGroupInfos.length > 0) {
				this.groupsTableAttrs = {
					columnHeading: ["name_label", "groupType_label"],
					columnWidths: [ColumnWidth.Largest, ColumnWidth.Small],
					showActionButtonColumn: true,
					addButtonAttrs: {
						title: "addGroup_label",
						icon: Icons.Add,
						click: () => this.showAddUserToGroupDialog()
					},
					lines: []
				};
				await this.updateGroups();
			}
		});
		this.user.getAsync().then(async (user) => {
			const mailMembership = await asyncFind(user.memberships, async (ship) => {
				return ship.groupType === GroupType.Mail && (await locator.entityClient.load(GroupTypeRef, ship.group)).user === user._id;
			});
			if (mailMembership == null) {
				console.error("User doesn't have a mailbox?", user._id);
				return;
			}
			this.mailAddressTableModel = this.isItMe() ? await locator.mailAddressTableModelForOwnMailbox() : await locator.mailAddressTableModelForAdmin(mailMembership.group, user._id, this.userGroupInfo);
			mithril_default.redraw();
		});
		this.updateUsedStorageAndAdminFlag();
	}
	renderView() {
		const changePasswordButtonAttrs = {
			title: "changePassword_label",
			click: () => this.changePassword(),
			icon: Icons.Edit,
			size: ButtonSize.Compact
		};
		const passwordFieldAttrs = {
			label: "password_label",
			value: "***",
			injectionsRight: () => [mithril_default(IconButton, changePasswordButtonAttrs)],
			isReadOnly: true
		};
		return mithril_default("#user-viewer.fill-absolute.scroll.plr-l.pb-floating", [
			mithril_default(".h4.mt-l", lang.get("userSettings_label")),
			mithril_default("", [
				mithril_default(TextField, {
					label: "mailAddress_label",
					value: this.userGroupInfo.mailAddress ?? "",
					isReadOnly: true
				}),
				mithril_default(TextField, {
					label: "created_label",
					value: formatDateWithMonth(this.userGroupInfo.created),
					isReadOnly: true
				}),
				mithril_default(TextField, {
					label: "storageCapacityUsed_label",
					value: this.usedStorage ? formatStorageSize(this.usedStorage) : lang.get("loading_msg"),
					isReadOnly: true
				})
			]),
			mithril_default("", [
				this.renderName(),
				mithril_default(TextField, passwordFieldAttrs),
				locator.logins.getUserController().isGlobalAdmin() ? this.renderAdminStatusSelector() : null,
				this.renderUserStatusSelector()
			]),
			mithril_default(this.secondFactorsForm),
			this.groupsTableAttrs ? mithril_default(".h4.mt-l.mb-s", lang.get("groups_label")) : null,
			this.groupsTableAttrs ? mithril_default(Table, this.groupsTableAttrs) : null,
			this.mailAddressTableModel ? mithril_default(MailAddressTable, {
				model: this.mailAddressTableModel,
				expanded: this.mailAddressTableExpanded,
				onExpanded: (newExpanded) => this.mailAddressTableExpanded = newExpanded
			}) : progressIcon()
		]);
	}
	renderName() {
		const name = this.userGroupInfo.name;
		return mithril_default(TextField, {
			label: "name_label",
			value: name,
			isReadOnly: true,
			injectionsRight: () => mithril_default(IconButton, {
				title: "edit_action",
				click: () => this.onChangeName(name),
				icon: Icons.Edit,
				size: ButtonSize.Compact
			})
		});
	}
	onChangeName(name) {
		Dialog.showProcessTextInputDialog({
			title: "edit_action",
			label: "name_label",
			defaultValue: name
		}, (newName) => {
			this.userGroupInfo.name = newName;
			return locator.entityClient.update(this.userGroupInfo);
		});
	}
	renderAdminStatusSelector() {
		return mithril_default(DropDownSelector, {
			label: "globalAdmin_label",
			items: [{
				name: lang.get("no_label"),
				value: false
			}, {
				name: lang.get("yes_label"),
				value: true
			}],
			selectedValue: this.isAdmin,
			selectionChangedHandler: (value) => {
				if (this.userGroupInfo.deleted) Dialog.message("userAccountDeactivated_msg");
else if (this.isItMe()) Dialog.message("removeOwnAdminFlagInfo_msg");
else showProgressDialog("pleaseWait_msg", this.user.getAsync().then((user) => locator.userManagementFacade.changeAdminFlag(user, value)).catch(ofClass(PreconditionFailedError, (e) => {
					if (e.data && e.data === "usergroup.pending-key-rotation") Dialog.message("makeAdminPendingUserGroupKeyRotationError_msg");
else if (e.data === "multiadmingroup.pending-key-rotation") Dialog.message("cannotAddAdminWhenMultiAdminKeyRotationScheduled_msg");
else throw e;
				})));
			}
		});
	}
	renderUserStatusSelector() {
		return mithril_default(DropDownSelector, {
			label: "state_label",
			items: [{
				name: lang.get("activated_label"),
				value: true
			}, {
				name: lang.get("deactivated_label"),
				value: false
			}],
			selectedValue: this.userGroupInfo.deleted == null,
			selectionChangedHandler: (activate) => {
				if (this.isAdmin) Dialog.message("deactivateOwnAccountInfo_msg");
else if (activate) this.restoreUser();
else this.deleteUser();
			}
		});
	}
	isItMe() {
		return isSameId(locator.logins.getUserController().userGroupInfo._id, this.userGroupInfo._id);
	}
	changePassword() {
		if (this.isItMe()) showChangeOwnPasswordDialog();
else if (this.isAdmin) Dialog.message("changeAdminPassword_msg");
else this.user.getAsync().then((user) => {
			showChangeUserPasswordAsAdminDialog(user);
		});
	}
	async updateGroups() {
		if (this.groupsTableAttrs) {
			const user = await this.user.getAsync();
			const customer = await this.customer.getAsync();
			this.groupsTableAttrs.lines = await pMap(this.getTeamMemberships(user, customer), async (m) => {
				const groupInfo = await locator.entityClient.load(GroupInfoTypeRef, m.groupInfo);
				return {
					cells: [getGroupInfoDisplayName(groupInfo), getGroupTypeDisplayName(neverNull(m.groupType))],
					actionButtonAttrs: {
						title: "remove_action",
						click: () => {
							showProgressDialog("pleaseWait_msg", locator.groupManagementFacade.removeUserFromGroup(user._id, groupInfo.group)).catch(ofClass(NotAuthorizedError, (e) => {
								Dialog.message("removeUserFromGroupNotAdministratedUserError_msg");
							}));
						},
						icon: Icons.Cancel
					}
				};
			}, { concurrency: 5 });
		}
	}
	async showAddUserToGroupDialog() {
		const user = await this.user.getAsync();
		if (this.userGroupInfo.deleted) Dialog.message("userAccountDeactivated_msg");
else {
			const globalAdmin = locator.logins.isGlobalAdminUserLoggedIn();
			const availableGroupInfos = this.teamGroupInfos.getLoaded().filter((g) => globalAdmin && !g.deleted && !user.memberships.some((m) => isSameId(m.groupInfo, g._id))).sort(compareGroupInfos);
			if (availableGroupInfos.length > 0) {
				const dropdownItems = availableGroupInfos.map((g) => ({
					name: getGroupInfoDisplayName(g),
					value: g
				}));
				let selectedGroupInfo = getFirstOrThrow(availableGroupInfos);
				Dialog.showActionDialog({
					title: "addUserToGroup_label",
					child: { view: () => mithril_default(DropDownSelector, {
						label: "group_label",
						items: dropdownItems,
						selectedValue: selectedGroupInfo,
						selectionChangedHandler: (selection) => selectedGroupInfo = selection,
						dropdownWidth: 250
					}) },
					allowOkWithReturn: true,
					okAction: (dialog) => {
						showProgressDialog("pleaseWait_msg", locator.groupManagementFacade.addUserToGroup(user, selectedGroupInfo.group));
						dialog.close();
					}
				});
			}
		}
	}
	async updateUsedStorageAndAdminFlag() {
		const user = await this.user.getAsync();
		this.isAdmin = this.isAdminUser(user);
		try {
			this.usedStorage = await locator.userManagementFacade.readUsedUserStorage(user);
			mithril_default.redraw();
		} catch (e) {
			if (!(e instanceof BadRequestError)) throw e;
		}
	}
	getTeamMemberships(user, customer) {
		return user.memberships.filter((m) => m.groupInfo[0] === customer.teamGroups);
	}
	isAdminUser(user) {
		return user.memberships.some((m) => m.groupType === GroupType.Admin);
	}
	async deleteUser() {
		const planType = await locator.logins.getUserController().getPlanType();
		const newPlan = await locator.logins.getUserController().isNewPaidPlan();
		const confirmed = await showBuyDialog({
			featureType: newPlan ? toFeatureType(planType) : BookingItemFeatureType.LegacyUsers,
			bookingText: "cancelUserAccounts_label",
			count: -1,
			freeAmount: 0,
			reactivate: false
		});
		if (confirmed) return locator.userManagementFacade.deleteUser(await this.user.getAsync(), false).catch(ofClass(PreconditionFailedError, () => Dialog.message("stillReferencedFromContactForm_msg")));
	}
	async restoreUser() {
		const planType = await locator.logins.getUserController().getPlanType();
		const newPlan = await locator.logins.getUserController().isNewPaidPlan();
		const confirmed = await showBuyDialog({
			featureType: newPlan ? toFeatureType(planType) : BookingItemFeatureType.LegacyUsers,
			bookingText: "bookingItemUsersIncluding_label",
			count: 1,
			freeAmount: 0,
			reactivate: true
		});
		if (confirmed) await locator.userManagementFacade.deleteUser(await this.user.getAsync(), true).catch(ofClass(PreconditionFailedError, () => Dialog.message("emailAddressInUse_msg")));
	}
	async entityEventsReceived(updates) {
		for (const update of updates) {
			const { instanceListId, instanceId, operation } = update;
			if (isUpdateForTypeRef(GroupInfoTypeRef, update) && operation === OperationType.UPDATE && isSameId(this.userGroupInfo._id, [neverNull(instanceListId), instanceId])) {
				this.userGroupInfo = await locator.entityClient.load(GroupInfoTypeRef, this.userGroupInfo._id);
				await this.updateUsedStorageAndAdminFlag();
				mithril_default.redraw();
			} else if (isUpdateForTypeRef(UserTypeRef, update) && operation === OperationType.UPDATE && this.user.isLoaded() && isSameId(this.user.getLoaded()._id, instanceId)) {
				this.user.reset();
				await this.updateUsedStorageAndAdminFlag();
				await this.updateGroups();
			}
			await this.secondFactorsForm.entityEventReceived(update);
		}
		mithril_default.redraw();
	}
	loadUser() {
		return locator.entityClient.load(GroupTypeRef, this.userGroupInfo.group).then((userGroup) => {
			return locator.entityClient.load(UserTypeRef, neverNull(userGroup.user));
		});
	}
	loadCustomer() {
		return locator.logins.getUserController().loadCustomer();
	}
	loadTeamGroupInfos() {
		return this.customer.getAsync().then((customer) => locator.entityClient.loadAll(GroupInfoTypeRef, customer.teamGroups));
	}
};
function showUserImportDialog(customDomains) {
	let editor = new HtmlEditor("enterAsCSV_msg").showBorders().setMode(HtmlEditorMode.HTML).setValue(CSV_USER_FORMAT).setMinHeight(200);
	let form = { view: () => {
		return [mithril_default(editor)];
	} };
	Dialog.showActionDialog({
		title: "importUsers_action",
		child: form,
		okAction: (csvDialog) => {
			let closeCsvDialog = checkAndImportUserData(editor.getValue(), customDomains);
			if (closeCsvDialog) csvDialog.close();
		}
	});
}

//#endregion
//#region src/common/settings/AddUserDialog.ts
assertMainOrNode();
async function show$5() {
	const availableDomains = await getAvailableDomains(locator.logins);
	const onNewPaidPlan = await locator.logins.getUserController().isNewPaidPlan();
	let emailAddress = null;
	let errorMsg = "mailAddressNeutral_msg";
	let isVerificationBusy = false;
	let userName = "";
	const passwordModel = new PasswordModel(locator.usageTestController, locator.logins, {
		checkOldPassword: false,
		enforceStrength: false,
		hideConfirmation: true
	});
	let selectedDomain = getFirstOrThrow(availableDomains);
	let form = { view: () => {
		return [
			mithril_default(TextField, {
				label: "name_label",
				helpLabel: () => lang.get("loginNameInfoAdmin_msg"),
				value: userName,
				oninput: (value) => userName = value
			}),
			mithril_default(SelectMailAddressForm, {
				selectedDomain,
				availableDomains,
				onDomainChanged: (domain) => {
					if (domain.isPaid && !onNewPaidPlan) showUpgradeWizard(locator.logins, NewPaidPlans, lang.makeTranslation("change_to_new_plan", `${lang.get("paidEmailDomainLegacy_msg")}\n${lang.get("changePaidPlan_msg")}`));
else selectedDomain = domain;
				},
				onValidationResult: (email, verificationResult) => {
					if (verificationResult.isValid) {
						emailAddress = email;
						errorMsg = null;
					} else errorMsg = verificationResult.errorId;
				},
				onBusyStateChanged: (isBusy) => {
					isVerificationBusy = isBusy;
				}
			}),
			mithril_default(PasswordForm, { model: passwordModel })
		];
	} };
	let addUserOkAction = async (dialog) => {
		if (isVerificationBusy) return;
		const passwordFormError = passwordModel.getErrorMessageId();
		if (errorMsg) {
			Dialog.message(errorMsg);
			return;
		} else if (passwordFormError) {
			Dialog.message(passwordFormError);
			return;
		}
		const userController = locator.logins.getUserController();
		const planType = await userController.getPlanType();
		const newPlan = await userController.isNewPaidPlan();
		showProgressDialog("pleaseWait_msg", showBuyDialog({
			featureType: newPlan ? toFeatureType(planType) : BookingItemFeatureType.LegacyUsers,
			bookingText: "bookingItemUsers_label",
			count: 1,
			freeAmount: 0,
			reactivate: false
		})).then(async (accepted) => {
			if (accepted) {
				const operation = locator.operationProgressTracker.startNewOperation();
				const p = locator.userManagementFacade.createUser(userName.trim(), assertNotNull(emailAddress), passwordModel.getNewPassword(), 0, 1, operation.id);
				showProgressDialog(lang.getTranslation("createActionStatus_msg", {
					"{index}": 0,
					"{count}": 1
				}), p, operation.progress).catch(ofClass(PreconditionFailedError, (e) => Dialog.message("createUserFailed_msg"))).then(() => dialog.close()).finally(() => operation.done());
			}
		});
	};
	Dialog.showActionDialog({
		title: "addUsers_action",
		child: form,
		okAction: addUserOkAction
	});
}

//#endregion
//#region src/common/settings/UserListView.ts
assertMainOrNode();
var UserListView = class {
	searchQuery = "";
	listModel;
	renderConfig = {
		createElement: (dom) => {
			const row = new UserRow((groupInfo) => this.isAdmin(groupInfo));
			mithril_default.render(dom, row.render());
			return row;
		},
		itemHeight: size.list_row_height,
		swipe: null,
		multiselectionAllowed: MultiselectMode.Disabled
	};
	listId;
	adminUserGroupInfoIds = [];
	listStateSubscription = null;
	listSelectionSubscription = null;
	constructor(updateDetailsViewer, focusDetailsViewer, canImportUsers, onImportUsers, onExportUsers) {
		this.updateDetailsViewer = updateDetailsViewer;
		this.focusDetailsViewer = focusDetailsViewer;
		this.canImportUsers = canImportUsers;
		this.onImportUsers = onImportUsers;
		this.onExportUsers = onExportUsers;
		this.listModel = this.makeListModel();
		this.listId = new LazyLoaded(async () => {
			const customer = await locator.logins.getUserController().loadCustomer();
			return customer.userGroups;
		});
		this.listModel.loadInitial();
		this.oncreate = this.oncreate.bind(this);
		this.onremove = this.onremove.bind(this);
		this.view = this.view.bind(this);
	}
	shortcuts = listSelectionKeyboardShortcuts(MultiselectMode.Disabled, () => this.listModel);
	oncreate() {
		keyManager.registerShortcuts(this.shortcuts);
	}
	view() {
		if (locator.logins.isEnabled(FeatureType.WhitelabelChild)) return null;
		return mithril_default(ListColumnWrapper, { headerContent: mithril_default(".flex.flex-space-between.center-vertically.plr-l", mithril_default(BaseSearchBar, {
			text: this.searchQuery,
			onInput: (text) => this.updateQuery(text),
			busy: false,
			onKeyDown: (e) => e.stopPropagation(),
			onClear: () => {
				this.searchQuery = "";
				this.listModel.reapplyFilter();
			},
			placeholder: lang.get("searchUsers_placeholder")
		}), mithril_default(".mr-negative-s", mithril_default(IconButton, {
			title: "addUsers_action",
			icon: Icons.Add,
			click: () => this.addButtonClicked()
		}), this.renderImportButton())) }, this.listModel.isEmptyAndDone() ? mithril_default(ColumnEmptyMessageBox, {
			color: theme.list_message_bg,
			icon: BootIcons.Contacts,
			message: "noEntries_msg"
		}) : mithril_default(List, {
			renderConfig: this.renderConfig,
			state: this.listModel.state,
			onLoadMore: () => this.listModel.loadMore(),
			onRetryLoading: () => this.listModel.retryLoading(),
			onStopLoading: () => this.listModel.stopLoading(),
			onSingleSelection: (item) => {
				this.listModel.onSingleSelection(item);
				this.focusDetailsViewer();
			},
			onSingleTogglingMultiselection: noOp,
			onRangeSelectionTowards: noOp
		}));
	}
	renderImportButton() {
		if (this.canImportUsers()) return mithril_default(IconButton, attachDropdown({
			mainButtonAttrs: {
				title: "more_label",
				icon: Icons.More
			},
			childAttrs: () => [{
				label: "importUsers_action",
				click: () => {
					this.onImportUsers();
				}
			}, {
				label: "exportUsers_action",
				click: () => {
					this.onExportUsers();
				}
			}]
		}));
else return null;
	}
	onremove() {
		keyManager.unregisterShortcuts(this.shortcuts);
		this.listStateSubscription?.end(true);
		this.listSelectionSubscription?.end(true);
	}
	async loadAdmins() {
		const adminGroupMembership = locator.logins.getUserController().user.memberships.find((gm) => gm.groupType === GroupType.Admin);
		if (adminGroupMembership == null) return;
		const members = await locator.entityClient.loadAll(GroupMemberTypeRef, adminGroupMembership.groupMember[0]);
		this.adminUserGroupInfoIds = members.map((adminGroupMember) => elementIdPart(adminGroupMember.userGroupInfo));
	}
	isAdmin(userGroupInfo) {
		return contains(this.adminUserGroupInfoIds, userGroupInfo._id[1]);
	}
	addButtonClicked() {
		show$5();
	}
	async entityEventsReceived(updates) {
		for (const update of updates) {
			const { instanceListId, instanceId, operation } = update;
			if (isUpdateForTypeRef(GroupInfoTypeRef, update) && this.listId.getSync() === instanceListId) await this.listModel.entityEventReceived(instanceListId, instanceId, operation);
else if (isUpdateFor(locator.logins.getUserController().user, update)) {
				await this.loadAdmins();
				this.listModel.reapplyFilter();
			}
			mithril_default.redraw();
		}
	}
	makeListModel() {
		const listModel = new ListElementListModel({
			sortCompare: compareGroupInfos,
			fetch: async (_lastFetchedEntity) => {
				await this.loadAdmins();
				const listId = await this.listId.getAsync();
				const allUserGroupInfos = await locator.entityClient.loadAll(GroupInfoTypeRef, listId);
				return {
					items: allUserGroupInfos,
					complete: true
				};
			},
			loadSingle: async (_listId, elementId) => {
				const listId = await this.listId.getAsync();
				try {
					return await locator.entityClient.load(GroupInfoTypeRef, [listId, elementId]);
				} catch (e) {
					if (e instanceof NotFoundError) return null;
else throw e;
				}
			},
			autoSelectBehavior: () => ListAutoSelectBehavior.OLDER
		});
		listModel.setFilter((gi) => this.groupFilter() && this.queryFilter(gi));
		this.listStateSubscription?.end(true);
		this.listStateSubscription = listModel.stateStream.map((state) => {
			mithril_default.redraw();
		});
		this.listSelectionSubscription?.end(true);
		this.listSelectionSubscription = listModel.differentItemsSelected.map((newSelection) => {
			let detailsViewer;
			if (newSelection.size === 0) detailsViewer = null;
else {
				const item = newSelection.values().next().value;
				detailsViewer = new UserViewer(item, this.isAdmin(item));
			}
			this.updateDetailsViewer(detailsViewer);
			mithril_default.redraw();
		});
		return listModel;
	}
	queryFilter(gi) {
		const lowercaseSearch = this.searchQuery.toLowerCase();
		return gi.name.toLowerCase().includes(lowercaseSearch) || !!gi.mailAddress && gi.mailAddress?.toLowerCase().includes(lowercaseSearch) || gi.mailAddressAliases.some((mai) => mai.mailAddress.toLowerCase().includes(lowercaseSearch));
	}
	groupFilter = () => {
		return locator.logins.getUserController().isGlobalAdmin();
	};
	updateQuery(query) {
		this.searchQuery = query;
		this.listModel.reapplyFilter();
	}
};
var UserRow = class {
	top = 0;
	domElement = null;
	entity = null;
	nameDom;
	addressDom;
	adminIconDom;
	deletedIconDom;
	selectionUpdater;
	constructor(isAdmin) {
		this.isAdmin = isAdmin;
	}
	update(groupInfo, selected) {
		this.entity = groupInfo;
		this.selectionUpdater(selected, false);
		this.nameDom.textContent = groupInfo.name;
		this.addressDom.textContent = groupInfo.mailAddress ? groupInfo.mailAddress : "";
		setVisibility(this.adminIconDom, this.isAdmin(groupInfo));
		setVisibility(this.deletedIconDom, groupInfo.deleted != null);
	}
	/**
	* Only the structure is managed by mithril. We set all contents on our own (see update) in order to avoid the vdom overhead (not negligible on mobiles)
	*/
	render() {
		return mithril_default(SelectableRowContainer, { onSelectedChangeRef: (updater) => this.selectionUpdater = updater }, mithril_default(".flex.col.flex-grow", [mithril_default(".badge-line-height", [mithril_default("", { oncreate: (vnode) => this.nameDom = vnode.dom })]), mithril_default(".flex-space-between.mt-xxs", [mithril_default(".smaller", { oncreate: (vnode) => this.addressDom = vnode.dom }), mithril_default(".icons.flex", [mithril_default(Icon, {
			icon: BootIcons.Settings,
			oncreate: (vnode) => this.adminIconDom = vnode.dom,
			class: "svg-list-accent-fg",
			style: { display: "none" }
		}), mithril_default(Icon, {
			icon: Icons.Trash,
			oncreate: (vnode) => this.deletedIconDom = vnode.dom,
			class: "svg-list-accent-fg",
			style: { display: "none" }
		})])])]));
	}
};

//#endregion
//#region src/mail-app/settings/groups/AddGroupDialog.ts
assertMainOrNode();
var AddGroupDialog = class {
	view(vnode) {
		const { availableGroupTypes, groupType, availableDomains, onEmailChanged, onBusyStateChanged, selectedDomain, onDomainChanged } = vnode.attrs;
		return [
			availableGroupTypes.length > 1 ? mithril_default(DropDownSelector, {
				label: "groupType_label",
				items: availableGroupTypes.map((t) => {
					return {
						name: getGroupTypeDisplayName(t),
						value: t
					};
				}),
				selectedValue: groupType,
				selectionChangedHandler: vnode.attrs.onGroupTypeChanged
			}) : null,
			mithril_default(TextField, {
				label: "name_label",
				value: vnode.attrs.name,
				oninput: vnode.attrs.onGroupNameChanged
			}),
			groupType === GroupType.Mail ? mithril_default("", [
				mithril_default(SelectMailAddressForm, {
					selectedDomain,
					availableDomains,
					onValidationResult: onEmailChanged,
					onBusyStateChanged,
					onDomainChanged
				}),
				mithril_default(".mt-m", ""),
				mithril_default(MoreInfoLink, {
					link: InfoLink.SharedMailboxes,
					isSmall: true
				})
			]) : mithril_default("")
		];
	}
};
var AddGroupDialogViewModel = class {
	groupName;
	mailAddress;
	groupTypes;
	errorMessageId;
	availableDomains;
	selectedDomain;
	groupType;
	isVerifactionBusy;
	_groupManagementFacade;
	constructor(availableDomains, groupManagementFacade) {
		this.availableDomains = availableDomains;
		this._groupManagementFacade = groupManagementFacade;
		this.groupTypes = this.getAvailableGroupTypes();
		this.groupType = getFirstOrThrow(this.groupTypes);
		this.groupName = "";
		this.mailAddress = "";
		this.errorMessageId = "mailAddressNeutral_msg";
		this.isVerifactionBusy = false;
		this.selectedDomain = getFirstOrThrow(availableDomains);
	}
	createMailGroup() {
		return this._groupManagementFacade.createMailGroup(this.groupName, this.mailAddress);
	}
	validateAddGroupInput() {
		if (this.groupType === GroupType.Mail) return this.errorMessageId;
else if (this.groupType === GroupType.Template || this.groupType === GroupType.MailingList && this.groupName.trim() === "") return "enterName_msg";
else return null;
	}
	getAvailableGroupTypes() {
		if (locator.logins.isEnabled(FeatureType.WhitelabelChild)) return [];
else return [GroupType.Mail];
	}
	onEmailChanged(email, validationResult) {
		this.errorMessageId = validationResult.errorId;
		if (validationResult.isValid) this.mailAddress = email;
	}
};
function show$4() {
	getAvailableDomains(locator.logins).then((availableDomains) => {
		const viewModel = new AddGroupDialogViewModel(availableDomains, locator.groupManagementFacade);
		if (viewModel.getAvailableGroupTypes().length === 0) return Dialog.message("selectionNotAvailable_msg");
		let addGroupOkAction = async (dialog) => {
			if (viewModel.isVerifactionBusy) return;
			const errorId = viewModel.validateAddGroupInput();
			if (errorId) {
				Dialog.message(errorId);
				return;
			}
			const userController = locator.logins.getUserController();
			const planType = await userController.getPlanType();
			const useLegacyBookingItem = await userController.useLegacyBookingItem();
			if (viewModel.groupType === GroupType.Mail) showProgressDialog("pleaseWait_msg", showBuyDialog({
				featureType: useLegacyBookingItem ? toFeatureType(planType) : BookingItemFeatureType.SharedMailGroup,
				bookingText: "sharedMailbox_label",
				count: 1,
				freeAmount: 0,
				reactivate: false
			}).then((accepted) => {
				if (accepted) {
					dialog.close();
					return viewModel.createMailGroup();
				}
			}));
else if (viewModel.groupType === GroupType.Template) addTemplateGroup(viewModel.groupName).then((success) => {
				if (success) dialog.close();
			});
		};
		Dialog.showActionDialog({
			title: viewModel.groupType == GroupType.Mail ? "createSharedMailbox_label" : "addGroup_label",
			child: () => mithril_default(AddGroupDialog, {
				selectedDomain: viewModel.selectedDomain,
				groupType: viewModel.groupType,
				availableDomains,
				availableGroupTypes: viewModel.groupTypes,
				name: viewModel.groupName,
				onGroupNameChanged: (newName) => viewModel.groupName = newName,
				onGroupTypeChanged: (newType) => viewModel.groupType = newType,
				onEmailChanged: (mailAddress, validationResult) => viewModel.onEmailChanged(mailAddress, validationResult),
				onBusyStateChanged: (isBusy) => viewModel.isVerifactionBusy = isBusy,
				onDomainChanged: (domain) => viewModel.selectedDomain = domain
			}),
			okAction: addGroupOkAction
		});
	});
}
/**
* @returns {Promise<boolean>} true if group was added, false otherwise
*/
function addTemplateGroup(name) {
	return showProgressDialog("pleaseWait_msg", locator.groupManagementFacade.createTemplateGroup(name).then(() => true).catch(ofClass(PreconditionFailedError, async (e) => {
		if (e.data === TemplateGroupPreconditionFailedReason.BUSINESS_FEATURE_REQUIRED || e.data === TemplateGroupPreconditionFailedReason.UNLIMITED_REQUIRED) {
			const plans = await getAvailablePlansWithTemplates();
			showPlanUpgradeRequiredDialog(plans);
		} else Dialog.message(lang.makeTranslation("confirm_msg", e.message));
		return false;
	})));
}

//#endregion
//#region src/mail-app/settings/groups/GroupDetailsModel.ts
var GroupDetailsModel = class {
	groupInfo;
	group;
	usedStorageInBytes;
	members;
	senderName;
	constructor(groupInfo, entityClient, updateViewCallback) {
		this.entityClient = entityClient;
		this.updateViewCallback = updateViewCallback;
		this.entityClient = entityClient;
		this.groupInfo = groupInfo;
		this.group = new LazyLoaded(() => this.entityClient.load(GroupTypeRef, this.groupInfo.group));
		this.group.getAsync().then(() => this.updateViewCallback());
		this.members = new LazyLoaded(async () => {
			const group = await this.group.getAsync();
			const groupMembers = await this.entityClient.loadRange(GroupMemberTypeRef, group.members, GENERATED_MIN_ID, 200, false);
			return pMap(groupMembers, (member) => this.entityClient.load(GroupInfoTypeRef, member.userGroupInfo));
		});
		this.updateMembers();
		if (this.groupInfo.groupType === GroupType.Mail) {
			this.senderName = new LazyLoaded(() => this.loadSenderName());
			this.updateSenderName();
		}
		this.updateUsedStorage();
	}
	isMailGroup() {
		return this.groupInfo.groupType === GroupType.Mail;
	}
	async loadSenderName() {
		const names = await locator.mailAddressFacade.getSenderNames(this.groupInfo.group);
		return getFirstOrThrow(Array.from(names.values()));
	}
	isGroupActive() {
		return this.groupInfo.deleted == null;
	}
	getGroupType() {
		return this.group.isLoaded() ? this.group.getLoaded().type : null;
	}
	getGroupName() {
		return this.groupInfo.name;
	}
	getUsedStorage() {
		return this.usedStorageInBytes;
	}
	getCreationDate() {
		return this.groupInfo.created;
	}
	getMembersInfo() {
		return this.members.isLoaded() ? this.members.getLoaded() : [];
	}
	getGroupMailAddress() {
		return this.groupInfo.mailAddress ?? "";
	}
	getGroupSenderName() {
		return this.senderName.isLoaded() ? this.senderName.getLoaded() : lang.get("loading_msg");
	}
	/**
	* remove the group of the given groupInfo from this group
	*/
	async removeGroupMember(userGroupInfo) {
		try {
			const userGroup = await this.entityClient.load(GroupTypeRef, userGroupInfo.group);
			return locator.groupManagementFacade.removeUserFromGroup(assertNotNull(userGroup.user), this.groupInfo.group);
		} catch (e) {
			if (!(e instanceof NotAuthorizedError)) throw e;
			throw new UserError("removeUserFromGroupNotAdministratedError_msg");
		}
	}
	async executeGroupBuy(deactivate) {
		const group = await this.group.getAsync();
		try {
			return await locator.groupManagementFacade.deactivateGroup(group, !deactivate);
		} catch (e) {
			if (!(e instanceof PreconditionFailedError)) throw e;
			if (!deactivate) throw new UserError("emailAddressInUse_msg");
else throw new UserError("stillReferencedFromContactForm_msg");
		}
	}
	changeGroupName(newName) {
		const newGroupInfo = createGroupInfo(this.groupInfo);
		newGroupInfo.name = newName;
		return this.entityClient.update(newGroupInfo);
	}
	async changeGroupSenderName(newName) {
		if (this.senderName.isLoaded() && this.senderName.getLoaded() === newName) return;
		const mailGroupId = await this.groupInfo.group;
		await locator.mailAddressFacade.setSenderName(mailGroupId, this.getGroupMailAddress(), newName);
		this.senderName.reset();
		this.senderName.getAsync();
		this.updateViewCallback();
	}
	validateGroupName(newName) {
		if (this.group.isLoaded() && this.group.getLoaded().type === GroupType.MailingList && newName.trim() === "") return "enterName_msg";
else return null;
	}
	/**
	* validate if the given deactivation/activation is valid for this group and return information about the item to book, if any
	* @param deactivate true if the group should be deactivated
	* @return the relevant BookingParams if the activation/deactivatian may go ahead, null otherwise (no action necessary)
	*/
	async validateGroupActivationStatus(deactivate) {
		if (deactivate !== this.isGroupActive()) {
			console.log("tried to set activation status to current status.");
			return null;
		}
		const members = await this.members.getAsync();
		if (deactivate && members.length > 0) throw new UserError("groupNotEmpty_msg");
else {
			const userController = locator.logins.getUserController();
			const planType = await userController.getPlanType();
			const useLegacyBookingItem = await userController.useLegacyBookingItem();
			const bookingItemType = useLegacyBookingItem ? toFeatureType(planType) : BookingItemFeatureType.SharedMailGroup;
			const bookingText = deactivate ? "cancelSharedMailbox_label" : "sharedMailbox_label";
			return {
				featureType: bookingItemType,
				bookingText,
				count: deactivate ? -1 : 1,
				freeAmount: 0,
				reactivate: !deactivate
			};
		}
	}
	async getPossibleMembers() {
		const customer = await this.entityClient.load(CustomerTypeRef, neverNull(locator.logins.getUserController().user.customer));
		const userGroupInfos = await this.entityClient.loadAll(GroupInfoTypeRef, customer.userGroups);
		let globalAdmin = locator.logins.isGlobalAdminUserLoggedIn();
		let availableUserGroupInfos = userGroupInfos.filter((userGroupInfo) => {
			if (!globalAdmin) return false;
else return !userGroupInfo.deleted && !this.members.getLoaded().some((m) => isSameId(m._id, userGroupInfo._id));
		});
		availableUserGroupInfos.sort(compareGroupInfos);
		return availableUserGroupInfos.map((g) => ({
			name: getGroupInfoDisplayName(g),
			value: g.group
		}));
	}
	async addUserToGroup(group) {
		const userGroup = await this.entityClient.load(GroupTypeRef, group);
		const user = await this.entityClient.load(UserTypeRef, neverNull(userGroup.user));
		return locator.groupManagementFacade.addUserToGroup(user, this.groupInfo.group);
	}
	async updateMembers() {
		this.members.reset();
		await this.members.getAsync();
		this.updateViewCallback();
	}
	async updateSenderName() {
		this.senderName.reset();
		await this.senderName.getAsync();
		this.updateViewCallback();
	}
	async updateUsedStorage() {
		if (this.isMailGroup()) try {
			this.usedStorageInBytes = await locator.groupManagementFacade.readUsedSharedMailGroupStorage(await this.group.getAsync());
		} catch (e) {
			if (!(e instanceof BadRequestError)) throw e;
		}
else this.usedStorageInBytes = 0;
		this.updateViewCallback();
	}
	async entityEventsReceived(updates) {
		await pMap(updates, async (update) => {
			const { instanceListId, instanceId, operation } = update;
			if (isUpdateForTypeRef(GroupInfoTypeRef, update) && operation === OperationType.UPDATE) {
				const updatedUserGroupInfo = await this.entityClient.load(GroupInfoTypeRef, this.groupInfo._id);
				if (isSameId(this.groupInfo._id, [assertNotNull(instanceListId, "got groupInfo update without instanceListId"), instanceId])) {
					this.groupInfo = updatedUserGroupInfo;
					return this.updateUsedStorage();
				} else return this.updateMembers();
			} else if (isUpdateForTypeRef(GroupMemberTypeRef, update) && this.group.isLoaded() && this.group.getLoaded().members === assertNotNull(instanceListId, "got a groupMember update without instanceListId")) return this.updateMembers();
else if (this.isMailGroup() && isUpdateForTypeRef(MailboxPropertiesTypeRef, update) && update.operation === OperationType.UPDATE) this.updateSenderName();
		});
	}
};

//#endregion
//#region src/mail-app/settings/groups/GroupListView.ts
assertMainOrNode();
var GroupListView = class {
	searchQuery = "";
	listModel;
	renderConfig = {
		itemHeight: size.list_row_height,
		multiselectionAllowed: MultiselectMode.Disabled,
		swipe: null,
		createElement: (dom) => {
			const groupRow = new GroupRow();
			mithril_default.render(dom, groupRow.render());
			return groupRow;
		}
	};
	listId;
	listStateSubscription = null;
	constructor(updateDetailsViewer, focusDetailsViewer) {
		this.updateDetailsViewer = updateDetailsViewer;
		this.focusDetailsViewer = focusDetailsViewer;
		this.listModel = this.makeListModel();
		this.listId = new LazyLoaded(() => {
			return locator.logins.getUserController().loadCustomer().then((customer) => {
				return customer.teamGroups;
			});
		});
		this.listModel.loadInitial();
		this.oncreate = this.oncreate.bind(this);
		this.onremove = this.onremove.bind(this);
		this.view = this.view.bind(this);
	}
	shortcuts = listSelectionKeyboardShortcuts(MultiselectMode.Disabled, () => this.listModel);
	oncreate() {
		keyManager.registerShortcuts(this.shortcuts);
	}
	view() {
		return mithril_default(ListColumnWrapper, { headerContent: mithril_default(".flex.flex-space-between.center-vertically.plr-l", mithril_default(BaseSearchBar, {
			text: this.searchQuery,
			onInput: (text) => this.updateQuery(text),
			busy: false,
			onKeyDown: (e) => e.stopPropagation(),
			onClear: () => {
				this.searchQuery = "";
				this.listModel.reapplyFilter();
			},
			placeholder: lang.get("searchMailboxes_placeholder")
		}), mithril_default(".mr-negative-s", mithril_default(IconButton, {
			title: "createSharedMailbox_label",
			icon: Icons.Add,
			click: () => this.addButtonClicked()
		}))) }, this.listModel.isEmptyAndDone() ? mithril_default(ColumnEmptyMessageBox, {
			color: theme.list_message_bg,
			icon: Icons.People,
			message: "noEntries_msg"
		}) : mithril_default(List, {
			renderConfig: this.renderConfig,
			state: this.listModel.state,
			onLoadMore: () => this.listModel.loadMore(),
			onRetryLoading: () => this.listModel.retryLoading(),
			onStopLoading: () => this.listModel.stopLoading(),
			onSingleSelection: (item) => {
				this.listModel.onSingleSelection(item);
				this.focusDetailsViewer();
			},
			onSingleTogglingMultiselection: noOp,
			onRangeSelectionTowards: noOp
		}));
	}
	onremove() {
		keyManager.unregisterShortcuts(this.shortcuts);
		this.listStateSubscription?.end(true);
	}
	async addButtonClicked() {
		if (await locator.logins.getUserController().isNewPaidPlan()) show$4();
else {
			const msg = lang.makeTranslation("upgrade_text", lang.get("newPaidPlanRequired_msg") + " " + lang.get("sharedMailboxesMultiUser_msg"));
			const wizard = await import("./UpgradeSubscriptionWizard-chunk.js");
			await wizard.showUpgradeWizard(locator.logins, NewPaidPlans, msg);
		}
	}
	async entityEventsReceived(updates) {
		for (const update of updates) {
			const { instanceListId, instanceId, operation } = update;
			if (isUpdateForTypeRef(GroupInfoTypeRef, update) && this.listId.getSync() === instanceListId) await this.listModel.entityEventReceived(instanceListId, instanceId, operation);
else if (isUpdateForTypeRef(GroupMemberTypeRef, update)) this.listModel.reapplyFilter();
			mithril_default.redraw();
		}
	}
	makeListModel() {
		const listModel = new ListElementListModel({
			sortCompare: compareGroupInfos,
			fetch: async (_lastFetchedEntity, _count) => {
				const listId = await this.listId.getAsync();
				const allGroupInfos = await locator.entityClient.loadAll(GroupInfoTypeRef, listId);
				return {
					items: allGroupInfos,
					complete: true
				};
			},
			loadSingle: async (_listId, elementId) => {
				const listId = await this.listId.getAsync();
				try {
					return await locator.entityClient.load(GroupInfoTypeRef, [listId, elementId]);
				} catch (e) {
					if (e instanceof NotFoundError) return null;
else throw e;
				}
			},
			autoSelectBehavior: () => ListAutoSelectBehavior.OLDER
		});
		listModel.setFilter((item) => this.groupFilter() && this.queryFilter(item));
		this.listStateSubscription?.end(true);
		this.listStateSubscription = listModel.stateStream.map((state) => {
			this.onSelectionChanged(onlySingleSelection(state));
			mithril_default.redraw();
		});
		return listModel;
	}
	onSelectionChanged = memoized((item) => {
		if (item) {
			const newSelectionModel = new GroupDetailsModel(item, locator.entityClient, mithril_default.redraw);
			const detailsViewer = item == null ? null : new GroupDetailsView(newSelectionModel);
			this.updateDetailsViewer(detailsViewer);
		}
	});
	queryFilter(gi) {
		const lowercaseSearch = this.searchQuery.toLowerCase();
		return gi.name.toLowerCase().includes(lowercaseSearch) || !!gi.mailAddress && gi.mailAddress?.toLowerCase().includes(lowercaseSearch);
	}
	groupFilter = () => {
		return locator.logins.getUserController().isGlobalAdmin();
	};
	updateQuery(query) {
		this.searchQuery = query;
		this.listModel.reapplyFilter();
	}
};
var GroupRow = class {
	top = 0;
	domElement = null;
	entity = null;
	nameDom;
	addressDom;
	deletedIconDom;
	localAdminIconDom;
	mailIconDom;
	selectionUpdater;
	constructor() {}
	update(groupInfo, selected) {
		this.entity = groupInfo;
		this.selectionUpdater(selected, false);
		this.nameDom.textContent = groupInfo.name;
		this.addressDom.textContent = groupInfo.mailAddress ?? "";
		setVisibility(this.deletedIconDom, groupInfo.deleted != null);
		if (groupInfo.mailAddress) {
			this.localAdminIconDom.style.display = "none";
			this.mailIconDom.style.display = "";
		} else {
			this.localAdminIconDom.style.display = "";
			this.mailIconDom.style.display = "none";
		}
	}
	/**
	* Only the structure is managed by mithril. We set all contents on our own (see update) in order to avoid the vdom overhead (not negligible on mobiles)
	*/
	render() {
		return mithril_default(SelectableRowContainer, { onSelectedChangeRef: (updater) => this.selectionUpdater = updater }, mithril_default(".flex.col.flex-grow", [mithril_default(".badge-line-height", [mithril_default("", { oncreate: (vnode) => this.nameDom = vnode.dom })]), mithril_default(".flex-space-between.mt-xxs", [mithril_default(".smaller", { oncreate: (vnode) => this.addressDom = vnode.dom }), mithril_default(".icons.flex", [
			mithril_default(Icon, {
				icon: Icons.Trash,
				oncreate: (vnode) => this.deletedIconDom = vnode.dom,
				class: "svg-list-accent-fg",
				style: { display: "none" }
			}),
			mithril_default(Icon, {
				icon: BootIcons.Settings,
				oncreate: (vnode) => this.localAdminIconDom = vnode.dom,
				class: "svg-list-accent-fg",
				style: { display: "none" }
			}),
			mithril_default(Icon, {
				icon: BootIcons.Mail,
				oncreate: (vnode) => this.mailIconDom = vnode.dom,
				class: "svg-list-accent-fg",
				style: { display: "none" }
			})
		])])]));
	}
};

//#endregion
//#region src/common/settings/SetDomainCertificateDialog.ts
var import_stream$5 = __toESM(require_stream(), 1);
assertMainOrNode();
function orderWhitelabelCertificate(domain, dialog) {
	showProgressDialog("pleaseWait_msg", locator.customerFacade.orderWhitelabelCertificate(domain).then(() => {
		dialog.close();
	}).catch(ofClass(InvalidDataError, (e) => {
		Dialog.message("certificateError_msg");
	})).catch(ofClass(LockedError, (e) => Dialog.message("operationStillActive_msg"))).catch(ofClass(PreconditionFailedError, (e) => {
		switch (e.data) {
			case "lock.locked":
				Dialog.message("operationStillActive_msg");
				break;
			case "domain.invalid_cname":
				Dialog.message("invalidCnameRecord_msg");
				break;
			case "domain.not_a_subdomain":
				Dialog.message("notASubdomain_msg");
				break;
			case "domain.invalid":
			case "domain.exists":
				Dialog.message("customDomainErrorDomainNotAvailable_msg");
				break;
			default: throw e;
		}
	})));
}
function show$3(customerInfo) {
	const whitelabelDomainInfo = getWhitelabelDomainInfo(customerInfo);
	const domain = whitelabelDomainInfo ? (0, import_stream$5.default)(whitelabelDomainInfo.domain) : (0, import_stream$5.default)("");
	let form = { view: () => {
		return mithril_default(TextField, {
			label: "whitelabelDomain_label",
			value: domain(),
			oninput: domain,
			isReadOnly: whitelabelDomainInfo ? true : false
		});
	} };
	let dialog = Dialog.showActionDialog({
		title: "whitelabelDomain_label",
		child: form,
		okAction: () => {
			const domainAllLowercase = domain().trim().toLowerCase();
			if (!isDomainName(domainAllLowercase) || domainAllLowercase.split(".").length < 3) Dialog.message("notASubdomain_msg");
else if (customerInfo.domainInfos.some((di) => !di.whitelabelConfig && di.domain === domainAllLowercase)) Dialog.message("customDomainErrorDomainNotAvailable_msg");
else orderWhitelabelCertificate(domainAllLowercase, dialog);
		}
	});
}

//#endregion
//#region src/common/settings/whitelabel/WhitelabelBrandingDomainSettings.ts
const FAILURE_LOCKED = "lock.locked";
const FAILURE_CONTACT_FORM_ACTIVE = "domain.contact_form_active";
var WhitelabelBrandingDomainSettings = class {
	view(vnode) {
		const { customerInfo, certificateInfo, whitelabelDomain, isWhitelabelFeatureEnabled } = vnode.attrs;
		return mithril_default(TextField, {
			label: "whitelabelDomain_label",
			value: whitelabelDomain ? whitelabelDomain : lang.get("deactivated_label"),
			helpLabel: this.renderWhitelabelInfo(certificateInfo),
			isReadOnly: true,
			injectionsRight: () => mithril_default(".ml-between-s", [whitelabelDomain ? this.renderDeactivateButton(whitelabelDomain) : null, customerInfo ? this._renderEditButton(customerInfo, certificateInfo, isWhitelabelFeatureEnabled) : null])
		});
	}
	renderDeactivateButton(whitelabelDomain) {
		return mithril_default(IconButton, {
			title: "deactivate_action",
			click: () => this.deactivate(whitelabelDomain),
			icon: Icons.Cancel,
			size: ButtonSize.Compact
		});
	}
	async deactivate(whitelabelDomain) {
		if (await Dialog.confirm("confirmDeactivateWhitelabelDomain_msg")) try {
			return await showProgressDialog("pleaseWait_msg", locator.customerFacade.deleteCertificate(whitelabelDomain));
		} catch (e) {
			if (e instanceof PreconditionFailedError) {
				if (e.data === FAILURE_LOCKED) return await Dialog.message("operationStillActive_msg");
else if (e.data === FAILURE_CONTACT_FORM_ACTIVE) return await Dialog.message(lang.getTranslation("domainStillHasContactForms_msg", { "{domain}": whitelabelDomain }));
			}
			throw e;
		}
	}
	_renderEditButton(customerInfo, certificateInfo, isWhitelabelFeatureEnabled) {
		return mithril_default(IconButton, {
			title: "edit_action",
			click: () => this.edit(isWhitelabelFeatureEnabled, customerInfo),
			icon: Icons.Edit,
			size: ButtonSize.Compact
		});
	}
	async edit(isWhitelabelFeatureEnabled, customerInfo) {
		if (locator.logins.getUserController().isFreeAccount()) showNotAvailableForFreeDialog([PlanType.Unlimited]);
else {
			if (!isWhitelabelFeatureEnabled) {
				const plansWithWhitelabel = await getAvailablePlansWithWhitelabel();
				isWhitelabelFeatureEnabled = await showPlanUpgradeRequiredDialog(plansWithWhitelabel);
			}
			if (isWhitelabelFeatureEnabled) show$3(customerInfo);
		}
	}
	renderWhitelabelInfo(certificateInfo) {
		let components;
		if (certificateInfo) switch (certificateInfo.state) {
			case CertificateState.VALID:
				components = [lang.get("certificateExpiryDate_label", { "{date}": formatDateTime(neverNull(certificateInfo.expiryDate)) }), this.certificateTypeString(certificateInfo)];
				break;
			case CertificateState.VALIDATING:
				components = [lang.get("certificateStateProcessing_label")];
				break;
			case CertificateState.INVALID:
				components = [lang.get("certificateStateInvalid_label")];
				break;
			default: components = [lang.get("emptyString_msg")];
		}
else components = [lang.get("emptyString_msg")];
		return () => mithril_default(".flex", components.map((c) => mithril_default(".pr-s", c)));
	}
	certificateTypeString(certificateInfo) {
		switch (certificateInfo.type) {
			case CertificateType.LETS_ENCRYPT: return lang.get("certificateTypeAutomatic_label");
			case CertificateType.MANUAL: return lang.get("certificateTypeManual_label");
			default: return lang.get("emptyString_msg");
		}
	}
};

//#endregion
//#region src/common/settings/whitelabel/CustomColorEditorPreview.ts
const BUTTON_WIDTH = 270;
var CustomColorEditorPreview = class {
	_mailRow;
	_mailRow2;
	toggleSelected = false;
	constructor() {
		this._mailRow = new MailRow(false, () => [], noOp);
		this._mailRow2 = new MailRow(false, () => [], noOp);
	}
	view() {
		return mithril_default(".editor-border.mt-l.flex.col", { style: { alignItems: "center" } }, [
			mithril_default(".pt", { style: { width: px(BUTTON_WIDTH) } }, mithril_default(LoginButton, {
				label: isApp() || isDesktop() ? "addAccount_action" : "login_action",
				onclick: noOp
			})),
			mithril_default(".pt", [mithril_default(Button, {
				label: lang.makeTranslation("secondary", "Secondary"),
				click: noOp,
				type: ButtonType.Secondary
			}), mithril_default(Button, {
				label: lang.makeTranslation("primary", "Primary"),
				click: noOp,
				type: ButtonType.Primary
			})]),
			mithril_default(".pt", [mithril_default(IconButton, {
				title: lang.makeTranslation("icon_button", "Icon button"),
				icon: Icons.Folder,
				click: noOp
			}), mithril_default(ToggleButton, {
				title: lang.makeTranslation("toggle_button", "Toggle button"),
				icon: this.toggleSelected ? Icons.Lock : Icons.Unlock,
				toggled: this.toggleSelected,
				onToggled: () => this.toggleSelected = !this.toggleSelected
			})]),
			mithril_default(".pt", this.renderPreviewMailRow())
		]);
	}
	renderPreviewMailRow() {
		const mailTemplate = {
			receivedDate: new Date(),
			attachments: [],
			state: "2",
			mailDetails: null,
			authStatus: null,
			encryptionAuthStatus: null,
			method: "0",
			bucketKey: null,
			conversationEntry: ["listId", "conversationId"],
			differentEnvelopeSender: null,
			firstRecipient: null,
			listUnsubscribe: false,
			mailDetailsDraft: null,
			movedTime: null,
			phishingStatus: "0",
			recipientCount: "0",
			sets: []
		};
		const mail = createMail({
			sender: createMailAddress({
				address: "m.mustermann@example.com",
				name: "Max Mustermann",
				contact: null
			}),
			subject: "Mail 1",
			unread: false,
			replyType: "0",
			confidential: true,
			...mailTemplate
		});
		const mail2 = createMail({
			sender: createMailAddress({
				address: "m.mustermann@example.com",
				name: "Max Mustermann",
				contact: null
			}),
			subject: "Mail 2",
			unread: true,
			replyType: "1",
			confidential: false,
			...mailTemplate
		});
		return mithril_default(".rel", { style: {
			width: px(size.second_col_max_width),
			height: px(size.list_row_height * 2)
		} }, [mithril_default(".list-row.pl.pr-l.odd-row", { oncreate: (vnode) => {
			this._mailRow.domElement = vnode.dom;
			requestAnimationFrame(() => this._mailRow.update(mail, false, false));
		} }, this._mailRow.render()), mithril_default(".list-row.pl.pr-l", {
			oncreate: (vnode) => {
				this._mailRow2.domElement = vnode.dom;
				requestAnimationFrame(() => this._mailRow2.update(mail2, true, false));
			},
			style: { top: px(size.list_row_height) }
		}, this._mailRow2.render())]);
	}
};

//#endregion
//#region src/common/settings/whitelabel/CustomColorEditor.ts
var import_stream$4 = __toESM(require_stream(), 1);
const COLOR_PICKER_WIDTH = 400;
const ADVANCED_TEXTFIELD_WIDTH = 344;
const CATEGORY_WIDTH = 750;
var CustomColorEditor = class {
	_colorPickerDom = null;
	_advancedSettingsEnabled;
	constructor() {
		this._advancedSettingsEnabled = (0, import_stream$4.default)(false);
	}
	view(vnode) {
		const { model } = vnode.attrs;
		const simpleColorPickerAttrs = {
			label: "accentColor_label",
			value: vnode.attrs.model.accentColor,
			injectionsRight: () => renderColorPicker((inputEvent) => {
				vnode.attrs.model.changeAccentColor(downcast(inputEvent.target).value);
				mithril_default.redraw();
			}, vnode.attrs.model.accentColor, ({ dom }) => this._colorPickerDom = dom),
			maxWidth: COLOR_PICKER_WIDTH,
			isReadOnly: true
		};
		return mithril_default("", [mithril_default("", [mithril_default(".flex", [mithril_default(".flex-grow", mithril_default(TextField, simpleColorPickerAttrs)), mithril_default(".ml-s.flex-grow", mithril_default(DropDownSelector, {
			label: "baseTheme_label",
			items: [{
				name: lang.get("light_label"),
				value: "light"
			}, {
				name: lang.get("dark_label"),
				value: "dark"
			}],
			selectedValue: vnode.attrs.model.baseThemeId,
			selectionChangedHandler: (v) => {
				vnode.attrs.model.changeBaseTheme(v);
			}
		}))]), mithril_default(CustomColorEditorPreview)]), mithril_default("", [mithril_default(ExpanderButton, {
			label: "advanced_label",
			expanded: this._advancedSettingsEnabled(),
			onExpandedChange: this._advancedSettingsEnabled
		}), mithril_default(ExpanderPanel, { expanded: this._advancedSettingsEnabled() }, [mithril_default(".small.mt", lang.get("customColorsInfo_msg")), mithril_default(".flex.flex-column", [Object.entries(this._getGroupedColors(model.customColors)).map(([name, colors]) => {
			return mithril_default("", [mithril_default(".h4.mt-l", capitalizeFirstLetterOfString(name)), mithril_default(".editor-border.text-break.wrapping-row", { style: { maxWidth: px(CATEGORY_WIDTH) } }, [colors.map((c) => renderCustomColorField(model, c))])]);
		})])])])]);
	}
	/**
	*
	*/
	_getGroupedColors(colors) {
		const groupedColors = {
			content: [],
			header: [],
			navigation: [],
			other: []
		};
		for (const color of colors) if (color.name.startsWith("content") || color.name.startsWith("list")) groupedColors.content.push(color);
else if (color.name.startsWith("header")) groupedColors.header.push(color);
else if (color.name.startsWith("navigation")) groupedColors.navigation.push(color);
else groupedColors.other.push(color);
		return groupedColors;
	}
};
function renderCustomColorField(model, { name, value, defaultValue, valid }) {
	return mithril_default("", { style: { maxWidth: px(ADVANCED_TEXTFIELD_WIDTH) } }, [mithril_default(TextField, {
		label: lang.makeTranslation(name, name),
		value,
		injectionsRight: () => renderColorPicker((event) => model.addCustomization(name, downcast(event.target).value), processColorInputValue(value)),
		oninput: (val) => {
			model.addCustomization(name, val);
		}
	}), renderDefaultColorLine(defaultValue, valid)]);
}
function renderColorPicker(onInput, value, oncreate) {
	return mithril_default("input.color-picker.mb-xs", {
		type: "color",
		value,
		oninput: onInput,
		oncreate
	});
}
function renderDefaultColorLine(defaultColor, valid) {
	if (valid) return mithril_default(".small.flex-space-between", [mithril_default("", lang.get("defaultColor_label", { "{1}": defaultColor })), mithril_default("", { style: {
		width: "100px",
		height: "10px",
		"margin-top": "2px",
		"background-color": defaultColor
	} })]);
else return mithril_default(".small", lang.get("invalidInputFormat_msg"));
}
/**
* If the provided value is a 3-digit hex string, it expands it to a 6-digit one (#RGB #RRGGBB)
* Otherwise, it returns the provided value
*/
function processColorInputValue(value) {
	const isHexTriplet = /^#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]$/.test(value);
	if (isHexTriplet) {
		const withoutHash = value.slice(1);
		return "#" + expandHexTriplet(withoutHash);
	} else return value;
}
function capitalizeFirstLetterOfString(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
}

//#endregion
//#region src/common/settings/whitelabel/EditCustomColorsDialog.ts
assertMainOrNode();
function show$2(model) {
	model.init();
	model.builtTheme.map(() => mithril_default.redraw());
	const form = { view: () => {
		return mithril_default(".pb", [mithril_default(CustomColorEditor, { model })]);
	} };
	const cancelAction = () => {
		model.resetActiveClientTheme().then(() => dialog.close());
	};
	const okAction = async () => {
		if (await model.save()) dialog.close();
else return Dialog.message("correctValues_msg");
	};
	let actionBarAttrs = {
		left: [{
			label: "cancel_action",
			click: cancelAction,
			type: ButtonType.Secondary
		}],
		right: [{
			label: "ok_action",
			click: okAction,
			type: ButtonType.Primary
		}],
		middle: "customColors_label"
	};
	let dialog = Dialog.largeDialog(actionBarAttrs, form).addShortcut({
		key: Keys.ESC,
		exec: cancelAction,
		help: "close_alt"
	}).setCloseHandler(cancelAction).show();
}

//#endregion
//#region src/common/settings/whitelabel/CustomColorsEditorViewModel.ts
var import_stream$3 = __toESM(require_stream(), 1);
assertMainOrNode();
var CustomColorsEditorViewModel = class {
	_customizations;
	_whitelabelConfig;
	_whitelabelDomainInfo;
	_accentColor;
	_baseTheme;
	_themeController;
	_entityClient;
	_loginController;
	_themeBeforePreview;
	builtTheme;
	constructor(currentTheme, themeCustomizations, whitelabelConfig, whitelabelDomainInfo, themeController, entityClient, loginController) {
		this._themeBeforePreview = Object.freeze(currentTheme);
		this._customizations = clone(themeCustomizations);
		this._whitelabelDomainInfo = whitelabelDomainInfo;
		this._whitelabelConfig = whitelabelConfig;
		this._themeController = themeController;
		this._entityClient = entityClient;
		this._loginController = loginController;
		this.builtTheme = (0, import_stream$3.default)();
		const baseThemeId = themeCustomizations.base ?? "light";
		const accentColor = themeCustomizations.content_accent ?? this._themeController.getDefaultTheme().content_accent;
		this.changeBaseTheme(baseThemeId);
		this.changeAccentColor(accentColor);
	}
	init() {
		this._applyEditedTheme();
	}
	get customColors() {
		const base = this._themeController.getBaseTheme(this.baseThemeId);
		return Object.keys(base).map((key) => key).filter((name) => !this._shallBeExcluded(name)).map((key) => key).sort((a, b) => a.localeCompare(b)).map((key) => {
			const value = this._customizations[key] ?? "";
			const defaultValue = base[key];
			return {
				name: key,
				value,
				defaultValue: assertNotNull(defaultValue),
				valid: this._isValidColorValue(value)
			};
		});
	}
	get accentColor() {
		return this._accentColor;
	}
	get customizations() {
		return this._customizations;
	}
	get baseThemeId() {
		return this._baseTheme;
	}
	getDefaultColor(colorName) {
		return assertNotNull(this._themeController.getBaseTheme(this.baseThemeId)[colorName]);
	}
	changeAccentColor(accentColor) {
		this._accentColor = accentColor;
		this.addCustomization("list_accent_fg", accentColor);
		this.addCustomization("content_accent", accentColor);
		this.addCustomization("content_button_selected", accentColor);
		this.addCustomization("navigation_button_selected", accentColor);
		this.addCustomization("header_button_selected", accentColor);
		this._applyEditedTheme();
	}
	changeBaseTheme(baseThemeId) {
		this._baseTheme = baseThemeId;
		this.addCustomization("base", baseThemeId);
		this._applyEditedTheme();
	}
	/**
	* Try to save changes. if there are invalid color values in the theme doesn't save and returns false, else saves and returns true
	*/
	async save() {
		const colors = Object.keys(this.customizations).filter((name) => name !== "logo" && name !== "themeId" && name !== "base");
		for (let i = 0; i < colors.length; i++) if (!this._isValidColorValue(this.customizations[colors[i]] ?? "")) return false;
		this.addCustomization("themeId", this._whitelabelDomainInfo.domain);
		this._whitelabelConfig.jsonTheme = JSON.stringify(this.customizations);
		await this._entityClient.update(this._whitelabelConfig);
		if (!this._loginController.isWhitelabel()) await this.resetActiveClientTheme();
		return true;
	}
	async resetActiveClientTheme() {
		await this._themeController.applyCustomizations(downcast(Object.assign({}, { base: null }, this._themeBeforePreview)), false);
	}
	addCustomization(nameOfKey, colorValue) {
		this.customizations[nameOfKey] = colorValue;
		this._applyEditedTheme();
	}
	_isValidColorValue(colorValue) {
		return isValidColorCode(colorValue.trim()) || colorValue.trim() === "";
	}
	/**
	* These values shall be excluded when rendering the advanced TextFields
	* @return boolean, true iff provided parameter 'name' shall be excluded
	*/
	_shallBeExcluded(name) {
		const excludedColors = [
			"logo",
			"themeId",
			"base",
			"list_accent_fg",
			"content_button_selected",
			"navigation_button_selected",
			"header_button_selected",
			"content_accent",
			"content_accent_cyber_monday",
			"content_bg_cyber_monday",
			"content_border_cyber_monday"
		];
		return excludedColors.includes(name);
	}
	_applyEditedTheme = debounceStart(100, () => {
		this._removeEmptyCustomizations();
		this._themeController.applyCustomizations(this._filterAndReturnCustomizations(), false);
	});
	_removeEmptyCustomizations() {
		this._customizations = downcast(Object.fromEntries(Object.entries(this.customizations).filter(([k, v]) => v !== "")));
	}
	/**
	*  filters out all invalid color values from ThemeCustomizations whilst keeping logo, base and themeId
	*/
	_filterAndReturnCustomizations() {
		const colorValues = Object.entries(this.customizations).filter(([n, v]) => n !== "themeId" && n !== "base" && n !== "logo");
		const filteredColorValues = colorValues.filter(([n, v]) => this._isValidColorValue(downcast(v)));
		for (const [n, v] of Object.entries(this.customizations)) if (n === "themeId" || n === "base" || n === "logo") filteredColorValues.push([n, v]);
		return downcast(Object.fromEntries(filteredColorValues));
	}
};

//#endregion
//#region src/common/settings/whitelabel/WhitelabelThemeSettings.ts
var WhitelabelThemeSettings = class {
	view(vnode) {
		const { whitelabelData } = vnode.attrs;
		return [this.renderCustomColorsField(whitelabelData), this.renderCustomLogoField(whitelabelData)];
	}
	renderCustomColorsField(data) {
		return mithril_default(TextField, {
			label: "customColors_label",
			value: this.areCustomColorsDefined(data?.customTheme ?? null) ? lang.get("activated_label") : lang.get("deactivated_label"),
			isReadOnly: true,
			injectionsRight: () => data ? this.renderCustomColorsFieldButtons(data) : null
		});
	}
	renderCustomColorsFieldButtons(whitelabelData) {
		return [this.areCustomColorsDefined(whitelabelData.customTheme) ? mithril_default(IconButton, {
			title: "deactivate_action",
			click: () => this.deactivateCustomColors(whitelabelData),
			icon: Icons.Cancel,
			size: ButtonSize.Compact
		}) : null, mithril_default(IconButton, {
			title: "edit_action",
			click: () => this.showCustomColorsDialog(whitelabelData),
			icon: Icons.Edit,
			size: ButtonSize.Compact
		})];
	}
	async deactivateCustomColors({ customTheme, whitelabelConfig, whitelabelDomainInfo }) {
		const confirmed = await Dialog.confirm("confirmDeactivateCustomColors_msg");
		if (confirmed) {
			for (const key of Object.keys(customTheme)) if (key !== "logo") delete downcast(customTheme)[key];
			this.saveCustomTheme(customTheme, whitelabelConfig, whitelabelDomainInfo);
			if (locator.logins.isWhitelabel()) await locator.themeController.applyCustomizations(customTheme);
		}
	}
	renderCustomLogoField(data) {
		const customLogoTextfieldAttrs = {
			label: "customLogo_label",
			helpLabel: () => lang.get("customLogoInfo_msg"),
			value: lang.get(data?.customTheme.logo != null ? "activated_label" : "deactivated_label"),
			isReadOnly: true,
			injectionsRight: () => data ? this.renderCustomLogoFieldButtons(data) : null
		};
		return mithril_default(TextField, customLogoTextfieldAttrs);
	}
	renderCustomLogoFieldButtons(whitelabelData) {
		return [whitelabelData.customTheme.logo ? mithril_default(IconButton, {
			title: "deactivate_action",
			click: async () => {
				await this.deactivateCustomLogo(whitelabelData);
			},
			icon: Icons.Cancel,
			size: ButtonSize.Compact
		}) : null, mithril_default(IconButton, {
			title: "edit_action",
			click: () => this.editCustomLogo(whitelabelData),
			icon: Icons.Edit,
			size: ButtonSize.Compact
		})];
	}
	async editCustomLogo({ customTheme, whitelabelConfig, whitelabelDomainInfo }) {
		const files = await showFileChooser(false);
		let extension = files[0].name.toLowerCase().substring(files[0].name.lastIndexOf(".") + 1);
		if (files[0].size > MAX_LOGO_SIZE || !contains(ALLOWED_IMAGE_FORMATS, extension)) Dialog.message("customLogoInfo_msg");
else {
			let imageData;
			if (extension === "svg") imageData = utf8Uint8ArrayToString(files[0].data);
else {
				const ext = extension === "jpeg" ? "jpg" : extension;
				const b64 = uint8ArrayToBase64(files[0].data);
				imageData = `<img src="data:image/${ext};base64,${b64}">`;
			}
			customTheme.logo = imageData;
			this.saveCustomTheme(customTheme, whitelabelConfig, whitelabelDomainInfo);
			if (locator.logins.isWhitelabel()) await locator.themeController.applyCustomizations(customTheme);
		}
	}
	async deactivateCustomLogo({ customTheme, whitelabelConfig, whitelabelDomainInfo }) {
		const confirmed = await Dialog.confirm("confirmDeactivateCustomLogo_msg");
		if (confirmed) {
			delete customTheme.logo;
			this.saveCustomTheme(customTheme, whitelabelConfig, whitelabelDomainInfo);
			if (locator.logins.isWhitelabel()) await locator.themeController.applyCustomizations(customTheme);
		}
	}
	async showCustomColorsDialog({ customTheme, whitelabelConfig, whitelabelDomainInfo }) {
		const currentTheme = locator.themeController.getCurrentTheme();
		const viewModel = new CustomColorsEditorViewModel(currentTheme, customTheme, whitelabelConfig, assertNotNull(whitelabelDomainInfo), locator.themeController, locator.entityClient, locator.logins);
		show$2(viewModel);
	}
	areCustomColorsDefined(theme$1) {
		if (theme$1) return Object.keys(theme$1).some((key) => key !== "logo" && theme$1?.[key]);
else return false;
	}
	saveCustomTheme(customTheme, whitelabelConfig, whitelabelDomainInfo) {
		whitelabelConfig.jsonTheme = JSON.stringify(customTheme);
		locator.entityClient.update(whitelabelConfig);
		customTheme.themeId = whitelabelDomainInfo.domain;
	}
};

//#endregion
//#region src/common/settings/whitelabel/WhitelabelImprintAndPrivacySettings.ts
var WhitelabelImprintAndPrivacySettings = class {
	view(vnode) {
		const { privacyStatementUrl, onPrivacyStatementUrlChanged, imprintUrl, onImprintUrlChanged } = vnode.attrs;
		return [this.renderWhitelabelImprintSetting(imprintUrl, onImprintUrlChanged), this.renderPrivacyPolicySetting(privacyStatementUrl, onPrivacyStatementUrlChanged)];
	}
	renderPrivacyPolicySetting(privacyStatementUrl, onPrivacyStatementUrlChanged) {
		return mithril_default(TextField, {
			label: "privacyPolicyUrl_label",
			value: privacyStatementUrl,
			isReadOnly: true,
			injectionsRight: () => onPrivacyStatementUrlChanged ? mithril_default(IconButton, {
				title: "edit_action",
				click: () => this.editPrivacyStatementUrl(privacyStatementUrl, onPrivacyStatementUrlChanged),
				icon: Icons.Edit,
				size: ButtonSize.Compact
			}) : null
		});
	}
	editPrivacyStatementUrl(privacyStatementUrl, onPrivacyStatementUrlChanged) {
		let dialog = Dialog.showActionDialog({
			title: "privacyLink_label",
			child: { view: () => mithril_default(TextField, {
				label: "privacyPolicyUrl_label",
				value: privacyStatementUrl,
				type: TextFieldType.Url,
				oninput: (value) => privacyStatementUrl = value.trim()
			}) },
			allowOkWithReturn: true,
			okAction: (ok) => {
				if (ok) {
					onPrivacyStatementUrlChanged(privacyStatementUrl);
					dialog.close();
				}
			}
		});
		return privacyStatementUrl;
	}
	renderWhitelabelImprintSetting(imprintUrl, onImprintUrlChanged) {
		return mithril_default(TextField, {
			label: "imprintUrl_label",
			value: imprintUrl,
			isReadOnly: true,
			injectionsRight: () => onImprintUrlChanged ? mithril_default(IconButton, {
				title: "edit_action",
				click: () => this.showEditImprintDialog(imprintUrl, onImprintUrlChanged),
				icon: Icons.Edit,
				size: ButtonSize.Compact
			}) : null
		});
	}
	showEditImprintDialog(imprintUrl, onImprintUrlChanged) {
		const dialog = Dialog.showActionDialog({
			title: "imprintUrl_label",
			child: { view: () => mithril_default(TextField, {
				label: "imprintUrl_label",
				value: imprintUrl,
				type: TextFieldType.Url,
				oninput: (value) => imprintUrl = value.trim()
			}) },
			allowOkWithReturn: true,
			okAction: (ok) => {
				if (ok) {
					onImprintUrlChanged(imprintUrl);
					dialog.close();
				}
			}
		});
		return imprintUrl;
	}
};

//#endregion
//#region src/common/settings/whitelabel/WhitelabelRegistrationSettings.ts
var WhitelabelRegistrationSettings = class {
	constructor(vnode) {}
	view(vnode) {
		const { currentRegistrationDomain, possibleRegistrationDomains, onRegistrationDomainSelected, whitelabelCode, onWhitelabelCodeChanged } = vnode.attrs;
		return mithril_default("", [this._renderRegistrationDomain(currentRegistrationDomain, possibleRegistrationDomains, onRegistrationDomainSelected), this._renderWhitelabelCodeField(whitelabelCode, onWhitelabelCodeChanged)]);
	}
	_renderRegistrationDomain(currentRegistrationDomain, possibleRegistrationDomains, onRegistrationDomainSelected) {
		return mithril_default(DropDownSelector, {
			label: "whitelabelRegistrationEmailDomain_label",
			selectedValue: currentRegistrationDomain,
			items: possibleRegistrationDomains,
			selectionChangedHandler: onRegistrationDomainSelected ? (selectedValue) => {
				onRegistrationDomainSelected(selectedValue);
			} : null,
			disabled: !onRegistrationDomainSelected
		});
	}
	_renderWhitelabelCodeField(whitelabelCode, onWhitelabelCodeChanged) {
		return mithril_default(TextField, {
			label: "whitelabelRegistrationCode_label",
			value: whitelabelCode,
			isReadOnly: true,
			injectionsRight: () => onWhitelabelCodeChanged ? mithril_default(IconButton, {
				title: "edit_action",
				click: () => this.editRegistrationCode(whitelabelCode, onWhitelabelCodeChanged),
				icon: Icons.Edit,
				size: ButtonSize.Compact
			}) : null
		});
	}
	editRegistrationCode(whitelabelCode, onWhitelabelCodeChanged) {
		Dialog.showTextInputDialog({
			title: "edit_action",
			label: "whitelabelRegistrationCode_label",
			defaultValue: whitelabelCode
		}).then((newCode) => {
			onWhitelabelCodeChanged(newCode);
		});
	}
};

//#endregion
//#region src/common/settings/whitelabel/WhitelabelCustomMetaTagsSettings.ts
var WhitelabelCustomMetaTagsSettings = class {
	view(vnode) {
		const { metaTags, onMetaTagsChanged } = vnode.attrs;
		const customMetaTagsDefined = metaTags.length > 0;
		return mithril_default(TextField, {
			label: "customMetaTags_label",
			value: customMetaTagsDefined ? lang.get("activated_label") : lang.get("deactivated_label"),
			isReadOnly: true,
			injectionsRight: () => onMetaTagsChanged ? mithril_default(IconButton, {
				title: "edit_action",
				click: () => this.showEditMetaTagsDialog(metaTags, onMetaTagsChanged),
				icon: Icons.Edit,
				size: ButtonSize.Compact
			}) : null
		});
	}
	showEditMetaTagsDialog(metaTags, onMetaTagsChanged) {
		let dialog = Dialog.showActionDialog({
			title: "customMetaTags_label",
			child: { view: () => mithril_default(TextField, {
				label: "customMetaTags_label",
				value: metaTags,
				type: TextFieldType.Area,
				oninput: (value) => {
					metaTags = value;
				}
			}) },
			okAction: (ok) => {
				if (ok) {
					onMetaTagsChanged(metaTags);
					dialog.close();
				}
			}
		});
	}
};

//#endregion
//#region src/common/settings/whitelabel/WhitelabelStatusSettings.ts
var WhitelabelStatusSettings = class {
	view({ attrs }) {
		const { isWhitelabelActive: isWhitelabelActive$1 } = attrs;
		return mithril_default(TextField, {
			label: "state_label",
			value: isWhitelabelActive$1 ? lang.get("active_label") : lang.get("deactivated_label"),
			isReadOnly: true,
			injectionsRight: () => isWhitelabelActive$1 ? null : this.renderEnable()
		});
	}
	renderEnable() {
		return mithril_default(IconButton, {
			title: "whitelabelDomain_label",
			click: async () => {
				const plansWithWhitelabel = await getAvailablePlansWithWhitelabel();
				showPlanUpgradeRequiredDialog(plansWithWhitelabel);
			},
			icon: Icons.Edit,
			size: ButtonSize.Compact
		});
	}
};

//#endregion
//#region src/common/settings/whitelabel/WhitelabelNotificationEmailSettings.ts
var import_stream$2 = __toESM(require_stream(), 1);
var WhitelabelNotificationEmailSettings = class {
	_notificationEmailsExpanded;
	constructor(vnode) {
		this._notificationEmailsExpanded = (0, import_stream$2.default)(false);
	}
	view(vnode) {
		const { onAddTemplate, onEditTemplate, onRemoveTemplate, notificationMailTemplates } = vnode.attrs;
		return this._renderNotificationEmailSettings(notificationMailTemplates, onAddTemplate, onEditTemplate, onRemoveTemplate);
	}
	_renderNotificationEmailSettings(notificationMailTemplates, onAddTemplate, onEditTemplate, onRemoveTemplate) {
		return [
			mithril_default(".flex-space-between.items-center.mt-l.mb-s", [mithril_default(".h4", lang.get("customNotificationEmails_label")), mithril_default(ExpanderButton, {
				label: "show_action",
				expanded: this._notificationEmailsExpanded(),
				onExpandedChange: this._notificationEmailsExpanded
			})]),
			mithril_default(ExpanderPanel, { expanded: this._notificationEmailsExpanded() }, mithril_default(Table, {
				columnHeading: ["language_label", "subject_label"],
				columnWidths: [ColumnWidth.Largest, ColumnWidth.Largest],
				showActionButtonColumn: true,
				addButtonAttrs: {
					title: "add_action",
					click: () => {
						onAddTemplate();
					},
					icon: Icons.Add,
					size: ButtonSize.Compact
				},
				lines: notificationMailTemplates.map((template) => {
					const languageCode = downcast(template.language);
					const langName = lang.get(languageByCode[languageCode].textId);
					return {
						cells: [langName, template.subject],
						actionButtonAttrs: attachDropdown({
							mainButtonAttrs: {
								title: "edit_action",
								icon: Icons.Edit,
								size: ButtonSize.Compact
							},
							childAttrs: () => [{
								label: "edit_action",
								click: () => onEditTemplate(template)
							}, {
								label: "remove_action",
								click: () => onRemoveTemplate(template)
							}]
						})
					};
				})
			})),
			mithril_default(".small", lang.get("customNotificationEmailsHelp_msg"))
		];
	}
};

//#endregion
//#region src/common/settings/whitelabel/WhitelabelGermanLanguageFileSettings.ts
var WhitelabelGermanLanguageFileSettings = class {
	constructor(vnode) {}
	view(vnode) {
		const { customGermanLanguageFile, onGermanLanguageFileChanged } = vnode.attrs;
		return this._renderDefaultGermanLanguageFileSettings(customGermanLanguageFile, onGermanLanguageFileChanged);
	}
	_renderDefaultGermanLanguageFileSettings(customGermanLanguageFile, onGermanLanguageFileChanged) {
		const items = [{
			name: "Deutsch (Du)",
			value: "de"
		}, {
			name: "Deutsch (Sie)",
			value: "de_sie"
		}];
		const selectedValue = customGermanLanguageFile ?? items[0].value;
		const defaultGermanLanguageFileDropDownAttrs = {
			label: "germanLanguageFile_label",
			items,
			selectedValue,
			selectionChangedHandler: onGermanLanguageFileChanged
		};
		return mithril_default(DropDownSelector, defaultGermanLanguageFileDropDownAttrs);
	}
};

//#endregion
//#region src/common/settings/whitelabel/WhitelabelSettingsViewer.ts
assertMainOrNode();
var WhitelabelSettingsViewer = class {
	_whitelabelConfig = null;
	_certificateInfo = null;
	_whitelabelDomainInfo = null;
	_customJsonTheme = null;
	_customer;
	_customerInfo;
	_planConfig;
	_customerProperties;
	_lastBooking;
	_entityClient;
	_logins;
	constructor(entityClient, logins) {
		this.view = this.view.bind(this);
		this._entityClient = entityClient;
		this._logins = logins;
		this._customer = new LazyLoaded(() => locator.logins.getUserController().loadCustomer());
		this._customerInfo = new LazyLoaded(() => locator.logins.getUserController().loadCustomerInfo());
		this._planConfig = new LazyLoaded(() => locator.logins.getUserController().getPlanConfig());
		this._customerProperties = new LazyLoaded(() => this._customer.getAsync().then((customer) => locator.entityClient.load(CustomerPropertiesTypeRef, neverNull(customer.properties))));
		this._lastBooking = null;
		this._updateFields();
	}
	view() {
		const brandingDomainConfig = this._renderBrandingDomainConfig();
		return mithril_default("#global-settings.fill-absolute.scroll.plr-l", brandingDomainConfig ? [
			mithril_default(".h4.mt-l", lang.get("whitelabel_label")),
			mithril_default(".small", lang.get("whitelabelDomainLinkInfo_msg") + " "),
			mithril_default("small.text-break", [mithril_default(`a[href=${InfoLink.Whitelabel}][target=_blank]`, InfoLink.Whitelabel)]),
			this._renderWhitelabelStatusSettings(),
			this._renderNotificationEmailSettings(),
			mithril_default(".h4.mt-l", lang.get("whitelabelDomain_label")),
			brandingDomainConfig,
			this._renderThemeSettings(),
			this._renderCustomMetaTagsSettings(),
			this._renderImprintAndPrivacySettings(),
			this._renderDefaultGermanLanguageFileSettings(),
			this._renderWhitelabelRegistrationSettings(),
			mithril_default(".mb-l")
		] : [mithril_default(".flex-center.items-center.button-height.mt-l", progressIcon())]);
	}
	_renderImprintAndPrivacySettings() {
		const whitelabelConfig = this._whitelabelConfig;
		const privacyStatementUrl = whitelabelConfig?.privacyStatementUrl ?? "";
		let onPrivacyStatementUrlChanged = null;
		if (whitelabelConfig) onPrivacyStatementUrlChanged = (privacyStatementUrl$1) => {
			whitelabelConfig.privacyStatementUrl = privacyStatementUrl$1;
			this._entityClient.update(whitelabelConfig);
		};
		const imprintUrl = whitelabelConfig?.imprintUrl ?? "";
		let onImprintUrlChanged = null;
		if (whitelabelConfig) onImprintUrlChanged = (imprintUrl$1) => {
			whitelabelConfig.imprintUrl = imprintUrl$1;
			this._entityClient.update(whitelabelConfig);
		};
		return mithril_default(WhitelabelImprintAndPrivacySettings, {
			privacyStatementUrl,
			onPrivacyStatementUrlChanged,
			imprintUrl,
			onImprintUrlChanged
		});
	}
	_renderThemeSettings() {
		const customTheme = this._customJsonTheme;
		const whitelabelConfig = this._whitelabelConfig;
		const whitelabelDomainInfo = this._whitelabelDomainInfo;
		const whitelabelThemeSettingsAttrs = { whitelabelData: whitelabelConfig && whitelabelDomainInfo && customTheme ? {
			customTheme,
			whitelabelConfig,
			whitelabelDomainInfo
		} : null };
		return mithril_default(WhitelabelThemeSettings, whitelabelThemeSettingsAttrs);
	}
	_renderWhitelabelRegistrationSettings() {
		if (!this._isWhitelabelRegistrationVisible()) return null;
		const possibleRegistrationDomains = [{
			name: lang.get("deactivated_label"),
			value: null
		}].concat(getCustomMailDomains(this._customerInfo.getLoaded()).map((d) => {
			return {
				name: d.domain,
				value: d.domain
			};
		}));
		let onRegistrationDomainSelected = noOp;
		let currentRegistrationDomain = null;
		if (this._whitelabelConfig) {
			onRegistrationDomainSelected = (domain) => {
				clear(neverNull(this._whitelabelConfig).whitelabelRegistrationDomains);
				if (domain) {
					const domainWrapper = createStringWrapper({ value: domain });
					neverNull(this._whitelabelConfig).whitelabelRegistrationDomains.push(domainWrapper);
				}
				this._entityClient.update(neverNull(this._whitelabelConfig));
			};
			if (this._whitelabelConfig.whitelabelRegistrationDomains.length > 0) currentRegistrationDomain = this._whitelabelConfig.whitelabelRegistrationDomains[0].value;
		}
		const whitelabelCode = this._whitelabelConfig ? this._whitelabelConfig.whitelabelCode : "";
		let onWhitelabelCodeChanged = noOp;
		if (this._whitelabelConfig) onWhitelabelCodeChanged = (code) => {
			neverNull(this._whitelabelConfig).whitelabelCode = code;
			this._entityClient.update(neverNull(this._whitelabelConfig));
		};
		return mithril_default(WhitelabelRegistrationSettings, {
			whitelabelCode,
			onWhitelabelCodeChanged,
			possibleRegistrationDomains,
			currentRegistrationDomain,
			onRegistrationDomainSelected
		});
	}
	_renderDefaultGermanLanguageFileSettings() {
		if (!this._whitelabelConfig) return null;
		if (lang.code !== "de" && lang.code !== "de_sie") return null;
		const customGermanLanguageFile = downcast(this._whitelabelConfig.germanLanguageCode);
		const onGermanLanguageFileChanged = (languageFile) => {
			if (languageFile) {
				neverNull(this._whitelabelConfig).germanLanguageCode = languageFile;
				this._entityClient.update(neverNull(this._whitelabelConfig));
				lang.setLanguage({
					code: languageFile,
					languageTag: lang.languageTag
				});
			}
		};
		const whitelabelGermanLanguageFileSettingsAttrs = {
			customGermanLanguageFile,
			onGermanLanguageFileChanged
		};
		return mithril_default(WhitelabelGermanLanguageFileSettings, whitelabelGermanLanguageFileSettingsAttrs);
	}
	_renderCustomMetaTagsSettings() {
		let metaTags = "";
		let onMetaTagsChanged = null;
		if (this._whitelabelConfig) {
			metaTags = this._whitelabelConfig.metaTags;
			onMetaTagsChanged = (metaTags$1) => {
				neverNull(this._whitelabelConfig).metaTags = metaTags$1;
				this._entityClient.update(neverNull(this._whitelabelConfig));
			};
		}
		const whitelabelCustomMetaTagsSettingsAttrs = {
			metaTags,
			onMetaTagsChanged
		};
		return mithril_default(WhitelabelCustomMetaTagsSettings, whitelabelCustomMetaTagsSettingsAttrs);
	}
	_renderWhitelabelStatusSettings() {
		const planConfig = this._planConfig.getSync();
		if (planConfig == null) return null;
		const whitelabelActive = isWhitelabelActive(this._lastBooking, planConfig);
		const whitelabelStatusSettingsAttrs = { isWhitelabelActive: whitelabelActive };
		return mithril_default(WhitelabelStatusSettings, whitelabelStatusSettingsAttrs);
	}
	_renderBrandingDomainConfig() {
		const customerInfo = this._customerInfo.getSync();
		const planConfig = this._planConfig.getSync();
		if (!customerInfo || !planConfig) return null;
		const certificateInfo = this._certificateInfo;
		const isWhitelabelFeatureEnabled = isWhitelabelActive(this._lastBooking, planConfig);
		const whitelabelDomain = this._whitelabelDomainInfo ? this._whitelabelDomainInfo.domain : "";
		const whitelabelBrandingDomainSettingsAttrs = {
			customerInfo,
			isWhitelabelFeatureEnabled,
			certificateInfo,
			whitelabelDomain
		};
		return mithril_default(WhitelabelBrandingDomainSettings, whitelabelBrandingDomainSettingsAttrs);
	}
	_isWhitelabelRegistrationVisible() {
		return this._customer.isLoaded() && this._customer.getLoaded().customizations.some((c) => c.feature === FeatureType.WhitelabelParent) && this._customerInfo.isLoaded() && getWhitelabelDomainInfo(this._customerInfo.getLoaded()) != null;
	}
	_tryLoadWhitelabelConfig(domainInfo) {
		if (domainInfo && domainInfo.whitelabelConfig) return Promise.all([locator.entityClient.load(WhitelabelConfigTypeRef, domainInfo.whitelabelConfig), locator.serviceExecutor.get(BrandingDomainService, null).then((response) => neverNull(response.certificateInfo))]).then(([whitelabelConfig, certificateInfo]) => ({
			whitelabelConfig,
			certificateInfo
		}));
else return Promise.resolve(null);
	}
	async _updateFields() {
		await this._planConfig.getAsync();
		const customerInfo = await this._customerInfo.getAsync();
		this._whitelabelDomainInfo = getWhitelabelDomainInfo(customerInfo);
		const data = await this._tryLoadWhitelabelConfig(this._whitelabelDomainInfo);
		this._whitelabelConfig = data?.whitelabelConfig ?? null;
		this._certificateInfo = data?.certificateInfo ?? null;
		return locator.entityClient.loadRange(BookingTypeRef, neverNull(customerInfo.bookings).items, GENERATED_MAX_ID, 1, true).then((bookings) => {
			this._lastBooking = bookings.length === 1 ? bookings[0] : null;
			this._customJsonTheme = this._whitelabelConfig ? getThemeCustomizations(this._whitelabelConfig) : null;
			mithril_default.redraw();
			this._customerProperties.getAsync().then(mithril_default.redraw);
		});
	}
	_renderNotificationEmailSettings() {
		const customerProperties = this._customerProperties.getSync();
		if (!customerProperties) return null;
		const notificationMailTemplates = customerProperties.notificationMailTemplates;
		const onAddTemplate = () => {
			showBuyOrSetNotificationEmailDialog(this._lastBooking, this._customerProperties);
		};
		const onEditTemplate = (template) => {
			show(template, this._customerProperties);
		};
		const onRemoveTemplate = (template) => {
			this._removeNotificationMailTemplate(template);
		};
		const whitelabelNotificationEmailSettingsAttrs = {
			notificationMailTemplates,
			onAddTemplate,
			onEditTemplate,
			onRemoveTemplate
		};
		return mithril_default(WhitelabelNotificationEmailSettings, whitelabelNotificationEmailSettingsAttrs);
	}
	_removeNotificationMailTemplate(template) {
		showProgressDialog("pleaseWait_msg", this._customerProperties.getAsync().then((customerProps) => {
			const index = customerProps.notificationMailTemplates.findIndex((t) => t.language === template.language);
			if (index !== -1) {
				customerProps.notificationMailTemplates.splice(index, 1);
				this._entityClient.update(customerProps);
			}
		}));
	}
	entityEventsReceived(updates) {
		return pMap(updates, (update) => {
			if (isUpdateForTypeRef(CustomerTypeRef, update) && update.operation === OperationType.UPDATE) {
				this._customer.reset();
				return this._customer.getAsync().then(() => mithril_default.redraw());
			} else if (isUpdateForTypeRef(CustomerInfoTypeRef, update) && update.operation === OperationType.UPDATE) {
				this._customerInfo.reset();
				return this._updateFields();
			} else if (isUpdateForTypeRef(WhitelabelConfigTypeRef, update) && update.operation === OperationType.UPDATE) return this._updateFields();
else if (isUpdateForTypeRef(CustomerPropertiesTypeRef, update) && update.operation === OperationType.UPDATE) {
				this._customerProperties.reset();
				return this._updateFields();
			} else if (isUpdateForTypeRef(BookingTypeRef, update)) return this._updateFields();
		}).then(noOp);
	}
};

//#endregion
//#region src/common/settings/AppearanceSettingsViewer.ts
var AppearanceSettingsViewer = class {
	_customThemes = null;
	oncreate() {
		locator.themeController.getCustomThemes().then((themes) => {
			this._customThemes = themes;
			mithril_default.redraw();
		});
	}
	view() {
		const actualLanguageItems = languageNative.map((language) => {
			return {
				name: language.textName,
				value: language.code
			};
		}).sort((l1, l2) => l1.name.localeCompare(l2.name));
		const languageItems = actualLanguageItems.concat({
			name: lang.get("automatic_label"),
			value: null
		});
		const languageDropDownAttrs = {
			label: "language_label",
			items: languageItems,
			selectedValue: deviceConfig.getLanguage() || null,
			selectionChangedHandler: async (value) => {
				deviceConfig.setLanguage(value);
				const newLanguage = value ? {
					code: value,
					languageTag: languageCodeToTag(value)
				} : getLanguage();
				await lang.setLanguage(newLanguage);
				if (isDesktop()) await locator.desktopSettingsFacade.changeLanguage(newLanguage.code, newLanguage.languageTag);
				styles.updateStyle("main");
				mithril_default.redraw();
			}
		};
		const userSettingsGroupRoot = locator.logins.getUserController().userSettingsGroupRoot;
		const hourFormatDropDownAttrs = {
			label: "timeFormat_label",
			items: [{
				name: lang.get("timeFormatTwentyFourHour_label"),
				value: TimeFormat.TWENTY_FOUR_HOURS
			}, {
				name: lang.get("timeFormatTwelveHour_label"),
				value: TimeFormat.TWELVE_HOURS
			}],
			selectedValue: downcast(userSettingsGroupRoot.timeFormat),
			selectionChangedHandler: (value) => {
				userSettingsGroupRoot.timeFormat = value;
				locator.entityClient.update(userSettingsGroupRoot);
			}
		};
		const weekdayFormat = new Intl.DateTimeFormat(lang.languageTag, { weekday: "long" });
		const calcDate = new Date();
		const sundayName = weekdayFormat.format(incrementDate(calcDate, -calcDate.getDay()));
		const mondayName = weekdayFormat.format(incrementDate(calcDate, 1));
		const saturdayName = weekdayFormat.format(incrementDate(calcDate, 5));
		const weekStartDropDownAttrs = {
			label: "weekStart_label",
			items: [
				{
					name: mondayName,
					value: WeekStart.MONDAY
				},
				{
					name: saturdayName,
					value: WeekStart.SATURDAY
				},
				{
					name: sundayName,
					value: WeekStart.SUNDAY
				}
			],
			selectedValue: downcast(userSettingsGroupRoot.startOfTheWeek),
			selectionChangedHandler: (value) => {
				userSettingsGroupRoot.startOfTheWeek = value;
				locator.entityClient.update(userSettingsGroupRoot);
			}
		};
		return mithril_default(".fill-absolute.scroll.plr-l.pb-xl", [
			mithril_default(".h4.mt-l", lang.get("settingsForDevice_label")),
			mithril_default(DropDownSelector, languageDropDownAttrs),
			this._renderThemeSelector(),
			mithril_default(".h4.mt-l", lang.get("userSettings_label")),
			mithril_default(DropDownSelector, hourFormatDropDownAttrs),
			mithril_default(DropDownSelector, weekStartDropDownAttrs)
		]);
	}
	_renderThemeSelector() {
		if (!locator.themeController.shouldAllowChangingTheme() || this._customThemes == null) return null;
		const customOptions = this._customThemes.map((themeId) => {
			return {
				name: themeId,
				value: themeId
			};
		});
		const themeDropDownAttrs = {
			label: "switchColorTheme_action",
			items: [...themeOptions(client.isCalendarApp()).map(({ name, value }) => ({
				name: lang.get(name),
				value
			})), ...customOptions],
			selectedValue: locator.themeController.themePreference,
			selectionChangedHandler: (value) => locator.themeController.setThemePreference(value),
			dropdownWidth: 300
		};
		return mithril_default(DropDownSelector, themeDropDownAttrs);
	}
	entityEventsReceived(updates) {
		return pMap(updates, (update) => {
			if (isUpdateForTypeRef(UserSettingsGroupRootTypeRef, update)) return locator.entityClient.load(UserSettingsGroupRootTypeRef, update.instanceId).then((settings) => {
				lang.updateFormats({ hourCycle: getHourCycle(settings) });
				mithril_default.redraw();
			});
		}).then(noOp);
	}
};

//#endregion
//#region src/mail-app/settings/KnowledgeBaseListView.ts
assertMainOrNode();
var KnowledgeBaseListView = class {
	searchQuery = "";
	resultItemIds = [];
	listModel;
	listStateSubscription = null;
	renderConfig = {
		itemHeight: size.list_row_height,
		multiselectionAllowed: MultiselectMode.Disabled,
		swipe: null,
		createElement: (dom) => {
			const knowledgebaseRow = new KnowledgeBaseRow();
			mithril_default.render(dom, knowledgebaseRow.render());
			return knowledgebaseRow;
		}
	};
	shortcuts = listSelectionKeyboardShortcuts(MultiselectMode.Disabled, () => this.listModel);
	constructor(entityClient, logins, templateGroupRoot, templateGroup, updateDetailsViewer, focusDetailsViewer) {
		this.entityClient = entityClient;
		this.logins = logins;
		this.templateGroupRoot = templateGroupRoot;
		this.templateGroup = templateGroup;
		this.updateDetailsViewer = updateDetailsViewer;
		this.focusDetailsViewer = focusDetailsViewer;
		this.listModel = this.makeListModel();
		this.listModel.loadInitial();
		this.view = this.view.bind(this);
		this.oncreate = this.oncreate.bind(this);
		this.onremove = this.onremove.bind(this);
	}
	oncreate() {
		keyManager.registerShortcuts(this.shortcuts);
	}
	onremove() {
		keyManager.unregisterShortcuts(this.shortcuts);
	}
	makeListModel() {
		const listModel = new ListElementListModel({
			sortCompare: (a, b) => {
				const titleA = a.title.toUpperCase();
				const titleB = b.title.toUpperCase();
				return titleA < titleB ? -1 : titleA > titleB ? 1 : 0;
			},
			fetch: async (_lastFetchedEntity, _count) => {
				const allEntries = await this.entityClient.loadAll(KnowledgeBaseEntryTypeRef, this.getListId());
				return {
					items: allEntries,
					complete: true
				};
			},
			loadSingle: (_listId, elementId) => {
				return this.entityClient.load(KnowledgeBaseEntryTypeRef, [this.getListId(), elementId]);
			},
			autoSelectBehavior: () => ListAutoSelectBehavior.OLDER
		});
		listModel.setFilter((item) => this.queryFilter(item));
		this.listStateSubscription?.end(true);
		this.listStateSubscription = listModel.stateStream.map((state) => {
			this.onSelectionChanged(onlySingleSelection(state));
			mithril_default.redraw();
		});
		return listModel;
	}
	view() {
		return mithril_default(ListColumnWrapper, { headerContent: mithril_default(".flex.flex-space-between.center-vertically.plr-l", mithril_default(BaseSearchBar, {
			text: this.searchQuery,
			onInput: (text) => this.updateQuery(text),
			busy: false,
			onKeyDown: (e) => e.stopPropagation(),
			onClear: () => {
				this.searchQuery = "";
				this.resultItemIds = [];
				this.listModel.reapplyFilter();
			},
			placeholder: lang.get("searchKnowledgebase_placeholder")
		}), this.userCanEdit() ? mithril_default(".mr-negative-s", mithril_default(IconButton, {
			title: "addEntry_label",
			icon: Icons.Add,
			click: () => {
				showKnowledgeBaseEditor(null, this.templateGroupRoot);
			}
		})) : null) }, this.listModel.isEmptyAndDone() ? mithril_default(ColumnEmptyMessageBox, {
			color: theme.list_message_bg,
			icon: Icons.Book,
			message: "noEntries_msg"
		}) : mithril_default(List, {
			renderConfig: this.renderConfig,
			state: this.listModel.state,
			onLoadMore: () => this.listModel.loadMore(),
			onRetryLoading: () => this.listModel.retryLoading(),
			onStopLoading: () => this.listModel.stopLoading(),
			onSingleSelection: (item) => {
				this.listModel.onSingleSelection(item);
				this.focusDetailsViewer();
			},
			onSingleTogglingMultiselection: noOp,
			onRangeSelectionTowards: noOp
		}));
	}
	async entityEventsReceived(updates) {
		for (const update of updates) if (isUpdateForTypeRef(KnowledgeBaseEntryTypeRef, update) && isSameId(this.getListId(), update.instanceListId)) await this.listModel.entityEventReceived(update.instanceListId, update.instanceId, update.operation);
		this.updateQuery(this.searchQuery);
		mithril_default.redraw();
	}
	onSelectionChanged = memoized((item) => {
		const detailsViewer = item == null ? null : new KnowledgeBaseSettingsDetailsViewer(item, !this.userCanEdit());
		this.updateDetailsViewer(detailsViewer);
	});
	queryFilter(item) {
		return this.searchQuery === "" ? true : this.resultItemIds.includes(item._id);
	}
	updateQuery(query) {
		this.searchQuery = query;
		this.resultItemIds = knowledgeBaseSearch(this.searchQuery, this.listModel.getUnfilteredAsArray()).map((item) => item._id);
		this.listModel.reapplyFilter();
	}
	userCanEdit() {
		return hasCapabilityOnGroup(this.logins.getUserController().user, this.templateGroup, ShareCapability.Write);
	}
	getListId() {
		return this.templateGroupRoot.knowledgeBase;
	}
};
var KnowledgeBaseRow = class {
	top = 0;
	domElement = null;
	entity = null;
	entryTitleDom;
	selectionUpdater;
	update(entry, selected) {
		this.entity = entry;
		this.selectionUpdater(selected, false);
		this.entryTitleDom.textContent = entry.title;
	}
	render() {
		return mithril_default(SelectableRowContainer, { onSelectedChangeRef: (updater) => this.selectionUpdater = updater }, mithril_default(".flex.col", [mithril_default(".text-ellipsis.badge-line-height", { oncreate: (vnode) => this.entryTitleDom = vnode.dom }), mithril_default(".smaller.mt-xxs", NBSP)]));
	}
};
var KnowledgeBaseSettingsDetailsViewer = class {
	constructor(entry, readonly) {
		this.entry = entry;
		this.readonly = readonly;
	}
	renderView() {
		return mithril_default(".plr-l", mithril_default(KnowledgeBaseEntryView, {
			entry: this.entry,
			onTemplateSelected: (templateId) => mithril_default.route.set(`/settings/templates/${listIdPart(templateId)}}`),
			readonly: this.readonly
		}));
	}
	entityEventsReceived(updates) {
		return Promise.resolve();
	}
};

//#endregion
//#region src/mail-app/settings/DummyTemplateListView.ts
var DummyTemplateListView = class {
	searchQuery = "";
	view(vnode) {
		return mithril_default(ListColumnWrapper, { headerContent: mithril_default(".flex.flex-space-between.center-vertically.plr-l", mithril_default(BaseSearchBar, {
			text: this.searchQuery,
			onInput: (text) => this.searchQuery = text,
			busy: false,
			onKeyDown: (e) => e.stopPropagation(),
			onClear: () => {
				this.searchQuery = "";
			},
			placeholder: lang.get("searchTemplates_placeholder")
		}), mithril_default(".mr-negative-s", mithril_default(IconButton, {
			title: "addTemplate_label",
			icon: Icons.Add,
			click: () => {
				createInitialTemplateListIfAllowed().then((groupRoot) => {
					if (groupRoot) showTemplateEditor(null, groupRoot);
				});
			}
		}))) }, mithril_default(".fill-absolute.overflow-hidden", mithril_default(ColumnEmptyMessageBox, {
			color: theme.list_message_bg,
			icon: Icons.ListAlt,
			message: "noEntries_msg"
		})));
	}
};

//#endregion
//#region src/common/settings/SettingsFolderRow.ts
var SettingsFolderRow = class {
	view(vnode) {
		const { mainButtonAttrs, extraButton } = vnode.attrs;
		const isSelected = isNavButtonSelected(mainButtonAttrs);
		const selector = `.folder-row.flex-start.pl-button.pr-m${isSelected ? ".row-selected" : ""}`;
		return mithril_default(selector, [mithril_default(NavButton, mainButtonAttrs), extraButton && isSelected ? extraButton : null]);
	}
};

//#endregion
//#region src/common/settings/UserDataExporter.ts
const CSV_MIMETYPE = "text/csv";
const USER_CSV_FILENAME = "users.csv";
async function exportUserCsv(entityClient, logins, fileController, counterFacade) {
	const data = await loadUserExportData(entityClient, logins, counterFacade);
	const csv = renderCsv([
		"name",
		"mail address",
		"date created",
		"date deleted",
		"storage used (in bytes)",
		"aliases"
	], data.map((user) => [
		user.name,
		user.mailAddress,
		formatDate$1(user.created),
		mapNullable(user.deleted, formatDate$1) ?? "",
		`${user.usedStorage}`,
		user.aliases.join(" ")
	]));
	const dataFile = createDataFile(USER_CSV_FILENAME, CSV_MIMETYPE, stringToUtf8Uint8Array(csv));
	await fileController.saveDataFile(dataFile);
}
function formatDate$1(date) {
	return `${date.getFullYear()}-${pad(date.getMonth() + 1, 2)}-${pad(date.getDate(), 2)}`;
}
async function loadUserExportData(entityClient, logins, counterFacade) {
	const { user } = logins.getUserController();
	const { userGroups } = await entityClient.load(CustomerTypeRef, assertNotNull(user.customer));
	const groupsAdministeredByUser = await entityClient.loadAll(GroupInfoTypeRef, userGroups);
	const usedCustomerStorageCounterValues = await counterFacade.readAllCustomerCounterValues(CounterType.UserStorageLegacy, neverNull(user.customer));
	return pMap(groupsAdministeredByUser, async (info) => {
		const group = await entityClient.load(GroupTypeRef, info.group);
		const userStorageCounterValue = usedCustomerStorageCounterValues.find((counterValue) => counterValue.counterId === group.storageCounter);
		const usedStorage = userStorageCounterValue != null ? Number(userStorageCounterValue.value) : 0;
		return {
			name: info.name,
			mailAddress: info.mailAddress ?? "",
			created: info.created,
			deleted: info.deleted,
			usedStorage,
			aliases: info.mailAddressAliases.map((alias) => alias.mailAddress)
		};
	});
}

//#endregion
//#region src/common/settings/ReferralSettingsViewer.ts
var ReferralSettingsViewer = class {
	referralLink = "";
	constructor() {
		this.refreshReferralLink();
	}
	view() {
		return mithril_default(".mt-l.plr-l.pb-xl", mithril_default(ReferralLinkViewer, { referralLink: this.referralLink }));
	}
	async entityEventsReceived(updates) {}
	refreshReferralLink() {
		getReferralLink(locator.logins.getUserController()).then((link) => {
			this.referralLink = link;
			mithril_default.redraw();
		});
	}
};

//#endregion
//#region src/common/settings/AboutDialog.ts
var AboutDialog = class {
	view(vnode) {
		return mithril_default(".flex.col", [
			mithril_default(".center.mt", "Powered by"),
			mithril_default(
				".center",
				// Our logo must be padded but at least a certain amount.
				// This might be a bit more than needed but it's safe.
				{ style: { margin: px(size.vpad_xl) } },
				mithril_default.trust(getLightOrDarkTutaLogo(client.isCalendarApp()))
),
			mithril_default(".flex.justify-center.flex-wrap", [mithril_default(ExternalLink, {
				href: InfoLink.HomePage,
				text: "Website",
				isCompanySite: true,
				specialType: "me",
				class: "mlr mt"
			}), mithril_default(ExternalLink, {
				href: "https://github.com/tutao/tutanota/releases",
				text: "Releases",
				isCompanySite: false,
				class: "mlr mt"
			})]),
			mithril_default(".flex.justify-center.selectable.flex-wrap", [
				mithril_default("p.center.mt.mlr", `v${env.versionNumber}`),
				mithril_default("p.text-center.mlr", "GPL-v3"),
				mithril_default("p", "© 2024 Tutao GmbH")
			]),
			this._sendLogsLink(),
			isApp() ? mithril_default("", mithril_default(Button, {
				label: "showWelcomeDialog_action",
				type: ButtonType.Primary,
				click: vnode.attrs.onShowSetupWizard
			})) : null
		]);
	}
	_sendLogsLink() {
		return mithril_default(".mt", mithril_default(Button, {
			label: "sendLogs_action",
			click: () => this._sendDeviceLogs(),
			type: ButtonType.Primary
		}));
	}
	async _sendDeviceLogs() {
		const timestamp = new Date();
		const attachments = await getLogAttachments(timestamp);
		const mailboxDetails = await locator.mailboxModel.getUserMailboxDetails();
		let { message, type, client: client$1 } = clientInfoString(timestamp, true);
		message = message.split("\n").filter(Boolean).map((l) => `<div>${l}<br></div>`).join("");
		try {
			const editor = await newMailEditorFromTemplate(mailboxDetails, {}, `Device logs v${env.versionNumber} - ${type} - ${client$1}`, message, attachments, true);
			editor.show();
		} catch (e) {
			if (e instanceof UserError) await showUserError(e);
else throw e;
		}
	}
};

//#endregion
//#region src/common/gui/base/ActionBar.ts
assertMainOrNode();
var ActionBar = class {
	view(vnode) {
		return mithril_default(".action-bar.flex-end.items-center.ml-between-s", vnode.attrs.buttons.map((b) => mithril_default(IconButton, b)));
	}
};

//#endregion
//#region src/mail-app/settings/TemplateDetailsViewer.ts
var TemplateDetailsViewer = class {
	sanitizedContents;
	constructor(template, entityClient, isReadOnly) {
		this.template = template;
		this.entityClient = entityClient;
		this.isReadOnly = isReadOnly;
		this.sanitizedContents = template.contents.map((emailTemplateContent) => ({
			text: htmlSanitizer.sanitizeHTML(emailTemplateContent.text, {
				blockExternalContent: false,
				allowRelativeLinks: true
			}).html,
			languageCodeTextId: languageByCode[getLanguageCode(emailTemplateContent)].textId
		}));
	}
	renderView = () => {
		return mithril_default("#user-viewer.fill-absolute.scroll.plr-l.pb-floating", [this.renderTitleLine(), this.renderContent()]);
	};
	renderTitleLine() {
		return mithril_default(".flex.mt-l.center-vertically", [mithril_default(".h4.text-ellipsis", this.template.title), !this.isReadOnly() ? mithril_default(ActionBar, { buttons: [{
			title: "edit_action",
			icon: Icons.Edit,
			click: () => this.editTemplate()
		}, {
			title: "remove_action",
			icon: Icons.Trash,
			click: () => this.deleteTemplate()
		}] }) : null]);
	}
	renderContent() {
		return mithril_default("", [mithril_default(TextField, {
			label: "shortcut_label",
			value: TEMPLATE_SHORTCUT_PREFIX + assertNotNull(this.template.tag, "template without tag!"),
			isReadOnly: true
		}), this.sanitizedContents.map(({ text, languageCodeTextId }) => {
			return mithril_default(".flex.flex-column", [mithril_default(".h4.mt-l", lang.get(languageCodeTextId)), mithril_default(".editor-border.text-break", mithril_default.trust(text))]);
		})]);
	}
	async deleteTemplate() {
		if (!await Dialog.confirm("deleteTemplate_msg")) return;
		await this.entityClient.erase(this.template);
	}
	async editTemplate() {
		const { template } = this;
		const groupRoot = await locator.entityClient.load(TemplateGroupRootTypeRef, assertNotNull(template._ownerGroup, "template without ownerGroup!"));
		showTemplateEditor(template, groupRoot);
	}
	entityEventsReceived(updates) {
		return Promise.resolve();
	}
};

//#endregion
//#region src/mail-app/settings/TemplateListView.ts
assertMainOrNode();
var TemplateListView = class {
	searchQuery = "";
	resultItemIds = [];
	listModel;
	listStateSubscription = null;
	renderConfig = {
		itemHeight: size.list_row_height,
		multiselectionAllowed: MultiselectMode.Disabled,
		swipe: null,
		createElement: (dom) => {
			const templateRow = new TemplateRow();
			mithril_default.render(dom, templateRow.render());
			return templateRow;
		}
	};
	shortcuts = listSelectionKeyboardShortcuts(MultiselectMode.Disabled, () => this.listModel);
	constructor(groupInstance, entityClient, logins, updateDetailsViewer, focusDetailsViewer) {
		this.groupInstance = groupInstance;
		this.entityClient = entityClient;
		this.logins = logins;
		this.updateDetailsViewer = updateDetailsViewer;
		this.focusDetailsViewer = focusDetailsViewer;
		this.listModel = this.makeListModel();
		this.listModel.loadInitial();
		this.view = this.view.bind(this);
		this.oncreate = this.oncreate.bind(this);
		this.onremove = this.onremove.bind(this);
	}
	oncreate() {
		keyManager.registerShortcuts(this.shortcuts);
	}
	onremove() {
		keyManager.unregisterShortcuts(this.shortcuts);
	}
	makeListModel() {
		const listModel = new ListElementListModel({
			sortCompare: (a, b) => {
				const titleA = a.title.toUpperCase();
				const titleB = b.title.toUpperCase();
				return titleA < titleB ? -1 : titleA > titleB ? 1 : 0;
			},
			fetch: async (_lastFetchedEntity, _count) => {
				const allEntries = await this.entityClient.loadAll(EmailTemplateTypeRef, this.templateListId());
				return {
					items: allEntries,
					complete: true
				};
			},
			loadSingle: (_listId, elementId) => {
				return this.entityClient.load(EmailTemplateTypeRef, [this.templateListId(), elementId]);
			},
			autoSelectBehavior: () => ListAutoSelectBehavior.OLDER
		});
		listModel.setFilter((item) => this.queryFilter(item));
		this.listStateSubscription?.end(true);
		this.listStateSubscription = listModel.stateStream.map((state) => {
			this.onSelectionChanged(onlySingleSelection(state));
			mithril_default.redraw();
		});
		return listModel;
	}
	view() {
		return mithril_default(ListColumnWrapper, { headerContent: mithril_default(".flex.flex-space-between.center-vertically.plr-l", mithril_default(BaseSearchBar, {
			text: this.searchQuery,
			onInput: (text) => this.updateQuery(text),
			busy: false,
			onKeyDown: (e) => e.stopPropagation(),
			onClear: () => {
				this.searchQuery = "";
				this.resultItemIds = [];
				this.listModel.reapplyFilter();
			},
			placeholder: lang.get("searchTemplates_placeholder")
		}), this.userCanEdit() ? mithril_default(".mr-negative-s", mithril_default(IconButton, {
			title: "addTemplate_label",
			icon: Icons.Add,
			click: () => {
				showTemplateEditor(null, this.groupInstance.groupRoot);
			}
		})) : null) }, this.listModel.isEmptyAndDone() ? mithril_default(ColumnEmptyMessageBox, {
			color: theme.list_message_bg,
			icon: Icons.ListAlt,
			message: "noEntries_msg"
		}) : mithril_default(List, {
			renderConfig: this.renderConfig,
			state: this.listModel.state,
			onLoadMore: () => this.listModel.loadMore(),
			onRetryLoading: () => this.listModel.retryLoading(),
			onStopLoading: () => this.listModel.stopLoading(),
			onSingleSelection: (item) => {
				this.listModel.onSingleSelection(item);
				this.focusDetailsViewer();
			},
			onSingleTogglingMultiselection: noOp,
			onRangeSelectionTowards: noOp
		}));
	}
	async entityEventsReceived(updates) {
		for (const update of updates) {
			const { instanceListId, instanceId, operation } = update;
			if (isUpdateForTypeRef(EmailTemplateTypeRef, update) && isSameId(this.templateListId(), instanceListId)) await this.listModel.entityEventReceived(instanceListId, instanceId, operation);
		}
		this.updateQuery(this.searchQuery);
		mithril_default.redraw();
	}
	onSelectionChanged = memoized((item) => {
		const detailsViewer = item == null ? null : new TemplateDetailsViewer(item, this.entityClient, () => !this.userCanEdit());
		this.updateDetailsViewer(detailsViewer);
	});
	queryFilter(item) {
		return this.searchQuery === "" ? true : this.resultItemIds.includes(item._id);
	}
	updateQuery(query) {
		this.searchQuery = query;
		this.resultItemIds = searchInTemplates(this.searchQuery, this.listModel.getUnfilteredAsArray()).map((item) => item._id);
		this.listModel.reapplyFilter();
	}
	userCanEdit() {
		return hasCapabilityOnGroup(this.logins.getUserController().user, this.groupInstance.group, ShareCapability.Write);
	}
	templateListId() {
		return this.groupInstance.groupRoot.templates;
	}
};
var TemplateRow = class {
	top = 0;
	domElement = null;
	entity = null;
	selectionUpdater;
	titleDom;
	idDom;
	constructor() {}
	update(template, selected) {
		this.entity = template;
		this.selectionUpdater(selected, false);
		this.titleDom.textContent = template.title;
		this.idDom.textContent = TEMPLATE_SHORTCUT_PREFIX + template.tag;
	}
	render() {
		return mithril_default(SelectableRowContainer, { onSelectedChangeRef: (updater) => this.selectionUpdater = updater }, mithril_default(".flex.col", [mithril_default("", [mithril_default(".text-ellipsis.badge-line-height", { oncreate: (vnode) => this.titleDom = vnode.dom })]), mithril_default(".smaller.mt-xxs", { oncreate: (vnode) => this.idDom = vnode.dom })]));
	}
};

//#endregion
//#region src/mail-app/settings/ContactsSettingsViewer.ts
assertMainOrNode();
var ContactsSettingsViewer = class {
	noAutomaticContacts = false;
	constructor() {
		this.noAutomaticContacts = locator.logins.getUserController().props.noAutomaticContacts;
	}
	view() {
		return [mithril_default(".fill-absolute.scroll.plr-l.pb-xl", { role: "group" }, [
			mithril_default(".h4.mt-l", lang.get("contactsManagement_label")),
			this.renderImportContactsButton(),
			locator.logins.isEnabled(FeatureType.DisableContacts) ? null : this.renderAutoCreateContactsPreference(),
			this.renderContactsSyncDropdown()
		])];
	}
	renderAutoCreateContactsPreference() {
		return mithril_default(DropDownSelector, {
			label: "createContacts_label",
			helpLabel: () => lang.get("createContactsForRecipients_action"),
			items: [{
				name: lang.get("activated_label"),
				value: false
			}, {
				name: lang.get("deactivated_label"),
				value: true
			}],
			selectedValue: this.noAutomaticContacts,
			selectionChangedHandler: (v) => {
				locator.logins.getUserController().props.noAutomaticContacts = v;
				locator.entityClient.update(locator.logins.getUserController().props);
			},
			dropdownWidth: 250
		});
	}
	renderImportContactsButton() {
		if (!isApp()) return null;
		return mithril_default(".flex.flex-space-between.items-center", [lang.get("importFromContactBook_label"), mithril_default(Button, {
			label: "import_action",
			click: () => this.importContactsFromDevice(),
			type: ButtonType.Primary
		})]);
	}
	renderContactsSyncDropdown() {
		if (!isApp()) return null;
		return mithril_default(DropDownSelector, {
			label: "contactsSynchronization_label",
			helpLabel: () => lang.get("contactsSynchronizationWarning_msg"),
			items: [{
				name: lang.get("activated_label"),
				value: true
			}, {
				name: lang.get("deactivated_label"),
				value: false
			}],
			selectedValue: mailLocator.nativeContactsSyncManager().isEnabled(),
			selectionChangedHandler: async (contactSyncEnabled) => {
				await this.onContactSyncSelectionChanged(contactSyncEnabled);
			},
			dropdownWidth: 250
		});
	}
	async onContactSyncSelectionChanged(contactSyncEnabled) {
		assert(isApp(), "isApp");
		const syncManager = mailLocator.nativeContactsSyncManager();
		if (!contactSyncEnabled) syncManager.disableSync();
else {
			const canSync = await syncManager.canSync();
			if (!canSync) return;
			await syncManager.enableSync();
			const isSyncAllowed = await syncManager.syncContacts();
			if (!isSyncAllowed) this.handleContactsSynchronizationFail();
			mithril_default.redraw();
		}
	}
	updateTutaPropertiesSettings(props) {
		this.noAutomaticContacts = props.noAutomaticContacts;
	}
	async entityEventsReceived(updates) {
		for (const update of updates) {
			const { operation } = update;
			if (isUpdateForTypeRef(TutanotaPropertiesTypeRef, update) && operation === OperationType.UPDATE) {
				const props = await locator.entityClient.load(TutanotaPropertiesTypeRef, locator.logins.getUserController().props._id);
				this.updateTutaPropertiesSettings(props);
			}
		}
		mithril_default.redraw();
	}
	handleContactsSynchronizationFail() {
		mailLocator.nativeContactsSyncManager()?.disableSync();
		this.showContactsPermissionDialog();
	}
	async showContactsPermissionDialog() {
		await Dialog.message("allowContactReadWrite_msg");
		await locator.systemFacade.goToSettings();
	}
	async importContactsFromDevice() {
		const importer = await mailLocator.contactImporter();
		await importer.importContactsFromDeviceSafely();
	}
};

//#endregion
//#region src/common/settings/NotificationTargetsList.ts
var NotificationTargetsList = class {
	view(vnode) {
		return mithril_default("", [
			mithril_default(".flex-space-between.items-center.mt-s.mb-s", [mithril_default(".h5", lang.get("notificationTargets_label")), mithril_default(ExpanderButton, {
				label: "show_action",
				expanded: vnode.attrs.onExpandedChange(),
				onExpandedChange: vnode.attrs.onExpandedChange
			})]),
			mithril_default(ExpanderPanel, { expanded: vnode.attrs.onExpandedChange() }, mithril_default(".flex.flex-column.items-end.mb", [vnode.attrs.rowAdd, ...vnode.attrs.rows])),
			mithril_default(".small", lang.get("pushIdentifierInfoMessage_msg"))
		]);
	}
};

//#endregion
//#region src/common/settings/IdentifierRow.ts
var IdentifierRow = class {
	view(vnode) {
		const dropdownAttrs = attachDropdown({
			mainButtonAttrs: {
				title: "edit_action",
				icon: Icons.More,
				size: ButtonSize.Compact
			},
			childAttrs: () => [{
				label: vnode.attrs.disabled ? "activate_action" : "deactivate_action",
				click: vnode.attrs.disableClicked
			}, {
				label: "delete_action",
				click: vnode.attrs.removeClicked
			}]
		});
		return mithril_default(".flex.flex-column.full-width", [mithril_default(".flex.items-center.selectable", [
			mithril_default("span" + (vnode.attrs.current ? ".b" : ""), vnode.attrs.name),
			vnode.attrs.disabled ? mithril_default(".mlr", `(${lang.get("notificationsDisabled_label")})`) : null,
			mithril_default(".flex-grow"),
			mithril_default(IconButton, dropdownAttrs)
		]), this.renderIdentifier(vnode.attrs)]);
	}
	renderIdentifier({ identifier, formatIdentifier }) {
		const identifierText = formatIdentifier ? neverNull(identifier.match(/.{2}/g)).map((el, i) => mithril_default("span.pr-s" + (i % 2 === 0 ? ".b" : ""), el)) : identifier;
		return mithril_default(".text-break.small.monospace.mt-negative-hpad-button.selectable", identifierText);
	}
};

//#endregion
//#region src/mail-app/settings/NotificationSettingsViewer.ts
var import_stream$1 = __toESM(require_stream(), 1);
var NotificationSettingsViewer = class {
	currentIdentifier = null;
	extendedNotificationMode = null;
	expanded;
	user;
	identifiers;
	hasNotificationPermission = true;
	receiveCalendarNotifications = true;
	constructor() {
		this.expanded = (0, import_stream$1.default)(false);
		this.identifiers = [];
		this.user = locator.logins.getUserController().user;
		this.loadPushIdentifiers();
		if (isApp() || isDesktop()) {
			const promises = [locator.pushService.getExtendedNotificationMode()];
			if (isApp()) promises.push(locator.systemPermissionHandler.hasPermission(PermissionType.Notification), locator.pushService.getReceiveCalendarNotificationConfig());
			Promise.all(promises).then(([extendedNotificationMode, hasPermission, canReceiveCalendarNotifications]) => {
				this.extendedNotificationMode = extendedNotificationMode;
				if (isApp()) {
					if (this.hasNotificationPermission !== hasPermission) this.hasNotificationPermission = hasPermission;
					if (this.receiveCalendarNotifications !== canReceiveCalendarNotifications) this.receiveCalendarNotifications = canReceiveCalendarNotifications;
				}
				mithril_default.redraw();
			});
		}
	}
	togglePushIdentifier(identifier) {
		identifier.disabled = !identifier.disabled;
		locator.entityClient.update(identifier).then(() => mithril_default.redraw);
		if (!isBrowser() && identifier.identifier === this.currentIdentifier) if (identifier.disabled) locator.pushService.invalidateAlarmsForUser(this.user._id);
else locator.pushService.reRegister();
	}
	view() {
		const rowAdd = mithril_default(".full-width.flex-space-between.items-center.mb-s", [lang.get("emailPushNotification_action"), mithril_default(IconButton, {
			title: "emailPushNotification_action",
			click: () => this.showAddEmailNotificationDialog(),
			icon: Icons.Add,
			size: ButtonSize.Compact
		})]);
		const rows = this.identifiers.map((identifier) => {
			const isCurrentDevice = (isApp() || isDesktop()) && identifier.identifier === this.currentIdentifier;
			return mithril_default(IdentifierRow, {
				name: this.identifierDisplayName(isCurrentDevice, identifier.pushServiceType, identifier.displayName),
				disabled: identifier.disabled,
				identifier: identifier.identifier,
				current: isCurrentDevice,
				removeClicked: () => {
					locator.entityClient.erase(identifier).catch(ofClass(NotFoundError, noOp));
				},
				formatIdentifier: identifier.pushServiceType !== PushServiceType.EMAIL,
				disableClicked: () => this.togglePushIdentifier(identifier)
			});
		}).sort((l, r) => +r.attrs.current - +l.attrs.current);
		return mithril_default(".fill-absolute.scroll.plr-l.pb-xl", [mithril_default(".flex.col", [
			mithril_default(".flex-space-between.items-center.mt-l.mb-s", [mithril_default(".h4", lang.get("notificationSettings_action"))]),
			this.extendedNotificationMode ? mithril_default(NotificationContentSelector, {
				extendedNotificationMode: this.extendedNotificationMode,
				onChange: (value) => {
					locator.pushService.setExtendedNotificationMode(value);
					this.extendedNotificationMode = value;
					this.hasNotificationPermission = true;
				}
			}) : null,
			isApp() ? this.renderCalendarNotificationsDropdown() : null,
			mithril_default(NotificationTargetsList, {
				rows,
				rowAdd,
				onExpandedChange: this.expanded
			})
		])]);
	}
	renderCalendarNotificationsDropdown() {
		return mithril_default(DropDownSelector, {
			label: "receiveCalendarNotifications_label",
			items: [{
				name: lang.get("activated_label"),
				value: true
			}, {
				name: lang.get("deactivated_label"),
				value: false
			}],
			selectedValue: this.receiveCalendarNotifications,
			selectionChangedHandler: async (value) => {
				if (this.receiveCalendarNotifications !== value) {
					locator.pushService.setReceiveCalendarNotificationConfig(value);
					this.receiveCalendarNotifications = value;
					if (value) await locator.pushService.reRegister();
else await locator.pushService.invalidateAlarmsForUser(this.user._id);
				}
			},
			disabled: !this.hasNotificationPermission,
			selectedValueDisplay: !this.hasNotificationPermission ? lang.get("deactivated_label") : undefined
		});
	}
	async showAddEmailNotificationDialog() {
		const dialog = await mailLocator.addNotificationEmailDialog();
		dialog.show();
	}
	identifierDisplayName(current, type, displayName) {
		if (current) return lang.get("pushIdentifierCurrentDevice_label");
else if (displayName) return displayName;
else return [
			"Android FCM",
			"iOS",
			lang.get("adminEmailSettings_action"),
			"Android Tutanota"
		][Number(type)];
	}
	async loadPushIdentifiers() {
		this.currentIdentifier = this.getCurrentIdentifier();
		const list = this.user.pushIdentifierList;
		if (list) {
			this.identifiers = (await locator.entityClient.loadAll(PushIdentifierTypeRef, list.list)).filter((identifier) => identifier.app === AppType.Mail || identifier.app === AppType.Integrated);
			mithril_default.redraw();
		}
	}
	getCurrentIdentifier() {
		if (isApp() || isDesktop()) {
			const identifier = mailLocator.pushService.getLoadedPushIdentifier()?.identifier;
			return identifier ? identifier : null;
		}
		return null;
	}
	async entityEventsReceived(updates) {
		for (let update of updates) if (isUpdateForTypeRef(PushIdentifierTypeRef, update)) await this.loadPushIdentifiers();
	}
};

//#endregion
//#region src/common/settings/AffiliateSettingsViewer.ts
var AffiliateSettingsViewer = class {
	affiliateViewModel = new LazyLoaded(async () => await mailLocator.affiliateViewModel());
	domainConfig = locator.domainConfigProvider().getCurrentDomainConfig();
	constructor(getIsShowingKpis, toggleKpiColumn) {
		this.getIsShowingKpis = getIsShowingKpis;
		this.toggleKpiColumn = toggleKpiColumn;
	}
	oninit() {
		this.affiliateViewModel.getAsync().then((avm) => avm.load().finally(mithril_default.redraw));
	}
	view() {
		if (this.affiliateViewModel.isLoaded()) {
			const avm = this.affiliateViewModel.getSync();
			if (avm.isLoading) return mithril_default(ListColumnWrapper, mithril_default("p", "Loading..."));
			if (avm.data === null) return mithril_default(ListColumnWrapper, mithril_default("p", "Error"));
			const shareUrl = `${this.domainConfig.websiteBaseUrl}?t-src=${avm.data.promotionId}`;
			return mithril_default(ListColumnWrapper, mithril_default("section.fill-absolute.scroll.plr-l", mithril_default("h4.mt-l", lang.get("affiliateSettings_label")), mithril_default(TextField, {
				isReadOnly: true,
				label: "referralLink_label",
				value: shareUrl,
				injectionsRight: () => mithril_default(IconButton, {
					title: "copy_action",
					click: () => this.onCopyButtonClick(shareUrl),
					icon: Icons.Copy,
					size: ButtonSize.Compact
				})
			}), mithril_default(TextField, {
				isReadOnly: true,
				label: "affiliateSettingsAccumulated_label",
				helpLabel: () => lang.get("affiliateSettingsAccumulated_msg"),
				value: formatPrice(Number(avm.data.accumulatedCommission), true)
			}), mithril_default(TextField, {
				isReadOnly: true,
				label: "affiliateSettingsCredited_label",
				helpLabel: () => lang.get("affiliateSettingsCredited_msg"),
				value: formatPrice(Number(avm.data.creditedCommission), true)
			}), mithril_default(".flex.center-horizontally.mt-m", mithril_default(Button, {
				label: this.getIsShowingKpis() ? "affiliateSettingsHideKpis_label" : "affiliateSettingsShowKpis_label",
				type: ButtonType.Secondary,
				click: () => this.toggleKpiColumn()
			}))));
		} else return mithril_default("");
	}
	onCopyButtonClick(shareUrl) {
		copyToClipboard(shareUrl).then(() => {
			showSnackBar({
				message: "linkCopied_msg",
				button: {
					label: "close_alt",
					click: () => {}
				}
			});
		});
	}
	async entityEventsReceived(updates) {}
};

//#endregion
//#region src/common/settings/AffiliateKpisViewer.ts
var AffiliateKpisViewer = class {
	affiliateViewModel = new LazyLoaded(async () => await mailLocator.affiliateViewModel());
	renderView() {
		return mithril_default(ListColumnWrapper, mithril_default(".flex.flex-column.fill-absolute.plr-l", mithril_default("h4.mt-l", "KPIs"), mithril_default(".overflow-auto.pt-s", { style: { height: "100%" } }, mithril_default("", { style: { minWidth: "800px" } }, mithril_default(Table, {
			columnHeading: [
				{ label: "month_label" },
				{
					label: "affiliateSettingsNewFree_label",
					helpText: "affiliateSettingsNewFree_msg"
				},
				{
					label: "affiliateSettingsNewPaid_label",
					helpText: "affiliateSettingsNewPaid_msg"
				},
				{
					label: "affiliateSettingsTotalFree_label",
					helpText: "affiliateSettingsTotalFree_msg"
				},
				{
					label: "affiliateSettingsTotalPaid_label",
					helpText: "affiliateSettingsTotalPaid_msg"
				},
				{
					label: "affiliateSettingsCommission_label",
					helpText: "affiliateSettingsCommission_msg"
				}
			],
			columnWidths: [
				ColumnWidth.Largest,
				ColumnWidth.Largest,
				ColumnWidth.Largest,
				ColumnWidth.Largest,
				ColumnWidth.Largest,
				ColumnWidth.Largest
			],
			showActionButtonColumn: false,
			addButtonAttrs: null,
			lines: this.renderRows()
		})))));
	}
	renderRows() {
		if (this.affiliateViewModel.isLoaded()) {
			const avm = this.affiliateViewModel.getSync();
			return (avm.data?.kpis ?? []).slice().sort((a, b) => Number(b.monthTimestamp) - Number(a.monthTimestamp)).map((month) => {
				const date = DateTime.fromJSDate(new Date(Number(month.monthTimestamp))).minus({ day: 3 }).toJSDate();
				return { cells: [
					formatShortMonthYear2Digit(date),
					month.newFree,
					month.newPaid,
					month.totalFree,
					month.totalPaid,
					formatPrice(Number(month.commission), true)
				] };
			});
		} else {
			this.affiliateViewModel.getAsync().then(() => mithril_default.redraw());
			return [];
		}
	}
	entityEventsReceived(updates) {
		return Promise.resolve();
	}
};

//#endregion
//#region src/mail-app/settings/DesktopMailImportSettingsViewer.ts
var DesktopMailImportSettingsViewer = class {
	isImportHistoryExpanded = true;
	importStatePoolHandle;
	constructor(mailImporter) {
		this.mailImporter = mailImporter;
	}
	async oninit() {
		await this.mailImporter().initImportMailStates();
	}
	onbeforeremove() {
		clearInterval(this.importStatePoolHandle);
	}
	view() {
		return mithril_default(".fill-absolute.scroll.plr-l.pb-xl", [
			mithril_default(".h4.mt-l", lang.get("mailImportSettings_label")),
			this.renderTargetFolderControls(),
			!this.mailImporter().shouldRenderImportStatus() ? this.renderStartNewImportControls() : null,
			this.mailImporter().shouldRenderImportStatus() ? this.renderImportStatus() : null,
			this.renderImportHistory()
		]);
	}
	async onImportButtonClick(dom) {
		const currentPlanType = await mailLocator.logins.getUserController().getPlanType();
		const isHighestTierPlan = HighestTierPlans.includes(currentPlanType);
		if (!isHighestTierPlan) {
			showNotAvailableForFreeDialog([PlanType.Legend, PlanType.Unlimited]).then();
			return;
		}
		const allowedExtensions = ["eml", "mbox"];
		const filePaths = await mailLocator.fileApp.openFileChooser(dom.getBoundingClientRect(), allowedExtensions, true);
		await this.mailImporter().onStartBtnClick(filePaths.map((fp) => fp.location));
	}
	renderTargetFolderControls() {
		let folders = this.mailImporter().foldersForMailbox;
		if (folders) {
			const loadingMsg = lang.get("loading_msg");
			const emptyLabel = mithril_default("br");
			const selectedTargetFolder = this.mailImporter().selectedTargetFolder;
			const selectedTargetFolderPath = selectedTargetFolder ? getPathToFolderString(folders, selectedTargetFolder) : "";
			const isNotSubfolder = selectedTargetFolder ? selectedTargetFolderPath == getFolderName(selectedTargetFolder) : false;
			const helpLabel = selectedTargetFolder ? isNotSubfolder ? emptyLabel : selectedTargetFolderPath : emptyLabel;
			const selectableFolders = folders.getIndentedList().filter((folderInfo) => folderInfo.folder.folderType !== MailSetKind.INBOX);
			let targetFolders = selectableFolders.map((folderInfo) => {
				return {
					name: getIndentedFolderNameForDropdown(folderInfo),
					value: folderInfo.folder
				};
			});
			return mithril_default(DropDownSelector, {
				label: "mailImportTargetFolder_label",
				items: targetFolders,
				disabled: this.mailImporter().shouldRenderImportStatus(),
				selectedValue: selectedTargetFolder,
				selectedValueDisplay: selectedTargetFolder ? getFolderName(selectedTargetFolder) : loadingMsg,
				selectionChangedHandler: (newFolder) => this.mailImporter().selectedTargetFolder = newFolder,
				helpLabel: () => helpLabel
			});
		} else return null;
	}
	renderStartNewImportControls() {
		return [mithril_default(".flex-start.mt-m", this.renderImportInfoText()), mithril_default(".flex-start.mt-s", mithril_default(LoginButton, {
			type: LoginButtonType.FlexWidth,
			label: "import_action",
			onclick: (_, dom) => this.onImportButtonClick(dom)
		}))];
	}
	renderImportInfoText() {
		return [mithril_default(".small", lang.get("mailImportInfoText_label"))];
	}
	renderImportStatus() {
		const processedMailsCountLabel = mithril_default(".flex-start.p.small", lang.get("mailImportStateProcessedMailsTotalMails_label", {
			"{processedMails}": this.mailImporter().getProcessedMailsCount(),
			"{totalMails}": this.mailImporter().getTotalMailsCount()
		}));
		const resumeMailImportIconButtonAttrs = {
			title: "resumeMailImport_action",
			icon: Icons.Play,
			click: () => this.mailImporter().onResumeBtnClick(),
			size: ButtonSize.Normal,
			disabled: this.mailImporter().shouldDisableResumeButton()
		};
		const pauseMailImportIconButtonAttrs = {
			title: "pauseMailImport_action",
			icon: Icons.Pause,
			click: () => {
				this.mailImporter().onPauseBtnClick();
			},
			size: ButtonSize.Normal,
			disabled: this.mailImporter().shouldDisablePauseButton()
		};
		const cancelMailImportIconButtonAttrs = {
			title: "cancelMailImport_action",
			icon: Icons.Cancel,
			click: () => {
				this.mailImporter().onCancelBtnClick();
			},
			size: ButtonSize.Normal,
			disabled: this.mailImporter().shouldDisableCancelButton()
		};
		let buttonControls = [];
		if (this.mailImporter().shouldRenderPauseButton()) buttonControls.push(mithril_default(IconButton, pauseMailImportIconButtonAttrs));
		if (this.mailImporter().shouldRenderResumeButton()) buttonControls.push(mithril_default(IconButton, resumeMailImportIconButtonAttrs));
		if (this.mailImporter().shouldRenderCancelButton()) buttonControls.push(mithril_default(IconButton, cancelMailImportIconButtonAttrs));
		return [[mithril_default(".flex-space-between.p.small.mt-m", getReadableUiImportStatus(assertNotNull(this.mailImporter().getUiStatus())), this.mailImporter().shouldRenderProcessedMails() ? processedMailsCountLabel : null)], [mithril_default(".flex-space-between.border-radius-big.mt-s.rel.nav-bg.full-width", this.renderMailImportProgressBar(), ...buttonControls)]];
	}
	renderMailImportProgressBar() {
		return mithril_default(".rel.border-radius-big.full-width", mithril_default(ProgressBar, {
			progress: this.mailImporter().getProgress() / 100,
			type: ProgressBarType.Large
		}));
	}
	renderImportHistory() {
		return [mithril_default(".flex-space-between.items-center.mt-l.mb-s", [mithril_default(".h4", lang.get("mailImportHistory_label")), mithril_default(ExpanderButton, {
			label: "show_action",
			expanded: this.isImportHistoryExpanded,
			onExpandedChange: () => {
				this.isImportHistoryExpanded = !this.isImportHistoryExpanded;
			}
		})]), mithril_default(ExpanderPanel, { expanded: this.isImportHistoryExpanded }, mithril_default(Table, {
			columnHeading: ["mailImportHistoryTableHeading_label"],
			columnWidths: [ColumnWidth.Small, ColumnWidth.Largest],
			showActionButtonColumn: true,
			lines: this.makeMailImportHistoryTableLines()
		}))];
	}
	/**
	* Parses the importMailStates into displayable table lines.
	* @returns array of the parsed table lines.
	*/
	makeMailImportHistoryTableLines() {
		let folders = this.mailImporter().foldersForMailbox?.getIndentedList();
		if (folders) return this.mailImporter().getFinalisedImports().sort(sortCompareByReverseId).map((im) => {
			const targetFolderId = im.targetFolder;
			const displayTargetFolder = folders.find((f) => isSameId(f.folder._id, targetFolderId));
			return { cells: () => [{
				main: lang.get("mailImportHistoryTableRowTitle_label", {
					"{status}": getReadableImportStatus(parseInt(im.status)),
					"{folder}": displayTargetFolder ? getFolderName(displayTargetFolder.folder) : lang.get("mailImportHistoryTableRowFolderDeleted_label")
				}),
				info: [lang.get("mailImportHistoryTableRowSubtitle_label", {
					"{date}": formatDate(new Date(generatedIdToTimestamp(elementIdPart(im._id)))),
					"{successfulMails}": im.successfulMails,
					"{failedMails}": im.failedMails
				})]
			}] };
		});
else return [];
	}
	async entityEventsReceived(updates) {}
};
function getReadableUiImportStatus(uiStatus) {
	return lang.get(getUiImportStatusTranslationKey(uiStatus));
}
function getUiImportStatusTranslationKey(uiStatus) {
	switch (uiStatus) {
		case UiImportStatus.Starting: return "mailImportStatusStarting_label";
		case UiImportStatus.Resuming: return "mailImportStatusResuming_label";
		case UiImportStatus.Running: return "mailImportStatusRunning_label";
		case UiImportStatus.Pausing: return "mailImportStatusPausing_label";
		case UiImportStatus.Paused: return "mailImportStatusPaused_label";
		case UiImportStatus.Cancelling: return "mailImportStatusCancelling_label";
	}
}
function getReadableImportStatus(importStatus) {
	return lang.get(getImportStatusTranslationKey(importStatus));
}
function getImportStatusTranslationKey(importStatus) {
	switch (importStatus) {
		case ImportStatus.Running: return "mailImportStatusRunning_label";
		case ImportStatus.Paused: return "mailImportStatusPaused_label";
		case ImportStatus.Canceled: return "mailImportStatusCanceled_label";
		case ImportStatus.Finished: return "mailImportStatusFinished_label";
	}
}

//#endregion
//#region src/mail-app/settings/WebMailImportSettingsViewer.ts
var WebMailImportSettingsViewer = class {
	constructor() {}
	view() {
		return mithril_default(".fill-absolute.scroll.plr-l.pb-xl", [mithril_default(".h4.mt-l", lang.get("mailImportSettings_label")), this.renderNoImportOnWebText()]);
	}
	renderNoImportOnWebText() {
		return [mithril_default(".flex-column.mt", mithril_default(".p", lang.get("mailImportNoImportOnWeb_label")), mithril_default(".flex-start.mt-l", mithril_default(LoginButton, {
			type: LoginButtonType.FlexWidth,
			label: "mailImportDownloadDesktopClient_label",
			onclick: () => {
				const desktopClientDownloadUri = "https://tuta.com#download";
				if (isWebClient()) open(desktopClientDownloadUri);
else mailLocator.systemFacade.openLink(desktopClientDownloadUri);
			}
		})), mithril_default(".flex-v-center.full-width.mt-xl", mithril_default("img", {
			src: `${window.tutao.appState.prefixWithoutFile}/images/mail-import/email-import-webapp.svg`,
			alt: "",
			rel: "noreferrer",
			loading: "lazy",
			decoding: "async",
			class: "settings-illustration-large"
		})))];
	}
	async entityEventsReceived(updates) {}
};

//#endregion
//#region src/mail-app/settings/MailExportSettings.ts
var MailExportSettings = class {
	selectedMailbox = null;
	controllerSubscription = null;
	isExportHistoryExpanded = false;
	oncreate(vnode) {
		this.controllerSubscription = vnode.attrs.mailExportController.state.map(mithril_default.redraw);
	}
	onremove() {
		if (this.controllerSubscription) {
			this.controllerSubscription.end();
			this.controllerSubscription = null;
		}
	}
	view(vnode) {
		const { mailboxDetails } = vnode.attrs;
		this.selectedMailbox = this.selectedMailbox ?? first(mailboxDetails);
		const state = vnode.attrs.mailExportController.state();
		const emptyLabel = mithril_default("br");
		return [mithril_default(DropDownSelector, {
			label: "mailboxToExport_label",
			items: mailboxDetails.map((mailboxDetail) => {
				return {
					name: getMailboxName(mailLocator.logins, mailboxDetail),
					value: mailboxDetail
				};
			}),
			selectedValue: this.selectedMailbox,
			selectionChangedHandler: (selectedMailbox) => {
				this.selectedMailbox = selectedMailbox;
			},
			dropdownWidth: 300,
			disabled: state.type === "exporting",
			helpLabel: () => emptyLabel
		}), this.renderState(vnode.attrs.mailExportController)];
	}
	renderState(controller) {
		const state = controller.state();
		switch (state.type) {
			case "exporting": return [mithril_default(".flex-start.mt-m.small", lang.get("exportingEmails_label", { "{count}": state.exportedMails })), mithril_default(".flex-space-between.border-radius-big.mt-s.rel.nav-bg.full-width.center-vertically", [mithril_default(Icon, {
				icon: BootIcons.Progress,
				class: "flex-center items-center icon-progress-tiny icon-progress ml-s",
				size: IconSize.Medium
			}), mithril_default(IconButton, {
				title: "cancel_action",
				icon: Icons.Cancel,
				click: () => {
					controller.cancelExport();
				},
				size: ButtonSize.Normal
			})])];
			case "idle": return [mithril_default(".flex-start.mt-m", this.renderExportInfoText()), mithril_default(".flex-start.mt-s", mithril_default(LoginButton, {
				type: LoginButtonType.FlexWidth,
				label: "export_action",
				onclick: () => {
					if (this.selectedMailbox) controller.startExport(this.selectedMailbox);
				}
			}))];
			case "error": return [mithril_default(".flex-space-between.items-center.mt.mb-s", [mithril_default("small.noselect", state.message), mithril_default(Button, {
				label: "retry_action",
				click: () => {
					controller.cancelExport();
					if (this.selectedMailbox) controller.startExport(this.selectedMailbox);
				},
				type: ButtonType.Secondary
			})])];
			case "finished": return [mithril_default("small.noselect", lang.get("exportFinished_label")), mithril_default(".flex-start.mt-s", mithril_default(LoginButton, {
				type: LoginButtonType.FlexWidth,
				label: "open_action",
				onclick: () => this.onOpenClicked(controller)
			}))];
			case "locked": return [mithril_default(".flex-space-between.items-center.mt.mb-s.button-height", [mithril_default("small.noselect", `${lang.get("exportRunningElsewhere_label")} ${lang.get("pleaseWait_msg")}`)])];
		}
	}
	async onOpenClicked(controller) {
		await controller.openExportDirectory();
		await controller.cancelExport();
	}
	renderExportInfoText() {
		return [mithril_default(".small", lang.get("mailExportInfoText_label"))];
	}
};

//#endregion
//#region src/mail-app/settings/MailExportViewer.ts
assertMainOrNode();
var MailExportViewer = class {
	mailExportController = null;
	constructor() {
		this.view = this.view.bind(this);
		if (isDesktop()) mailLocator.mailExportController().then((controller) => {
			this.mailExportController = controller;
			mithril_default.redraw();
		});
	}
	view() {
		return [mithril_default(".fill-absolute.scroll.plr-l.pb-xl", mithril_default(".h4.mt-l", lang.get("mailExportSettings_label")), isDesktop() ? this.renderMailExportSettings() : this.renderExportOnlyOnDesktopText())];
	}
	renderMailExportSettings() {
		return this.mailExportController != null ? mithril_default(MailExportSettings, {
			mailboxDetails: mailLocator.mailboxModel.mailboxDetails(),
			logins: mailLocator.logins,
			mailExportController: this.mailExportController
		}) : null;
	}
	renderExportOnlyOnDesktopText() {
		return [mithril_default(".flex-column.mt", mithril_default(".p", lang.get("mailExportOnlyOnDesktop_label")), mithril_default(".flex-start.mt-l", mithril_default(LoginButton, {
			type: LoginButtonType.FlexWidth,
			label: "downloadDesktopClient_label",
			onclick: () => {
				const desktopClientDownloadUri = "https://tuta.com#download";
				if (isWebClient()) open(desktopClientDownloadUri);
else mailLocator.systemFacade.openLink(desktopClientDownloadUri);
			}
		})), mithril_default(".flex-v-center.full-width.mt-xl", mithril_default("img", {
			src: `${window.tutao.appState.prefixWithoutFile}/images/mail-import/email-import-webapp.svg`,
			alt: "",
			rel: "noreferrer",
			loading: "lazy",
			decoding: "async",
			class: "settings-illustration-large"
		})))];
	}
	async entityEventsReceived() {
		return Promise.resolve();
	}
};

//#endregion
//#region src/mail-app/settings/SettingsView.ts
var import_stream = __toESM(require_stream(), 1);
assertMainOrNode();
var SettingsView = class extends BaseTopLevelView {
	viewSlider;
	_settingsFoldersColumn;
	_settingsColumn;
	_settingsDetailsColumn;
	_userFolders;
	_adminFolders;
	logins;
	_templateFolders;
	_dummyTemplateFolder;
	_knowledgeBaseFolders;
	_selectedFolder;
	_currentViewer = null;
	showBusinessSettings = (0, import_stream.default)(false);
	showAffiliateSettings = false;
	_targetFolder;
	_targetRoute;
	detailsViewer = null;
	_customDomains;
	_templateInvitations;
	constructor(vnode) {
		super();
		this.logins = vnode.attrs.logins;
		this._userFolders = [
			new SettingsFolder(() => "login_label", () => BootIcons.Contacts, "login", () => new LoginSettingsViewer(locator.credentialsProvider, isApp() ? locator.systemFacade : null), undefined),
			new SettingsFolder(() => "email_label", () => BootIcons.Mail, "mail", () => new MailSettingsViewer(), undefined),
			new SettingsFolder(() => "contacts_label", () => BootIcons.Contacts, "contacts", () => new ContactsSettingsViewer(), undefined),
			new SettingsFolder(() => "appearanceSettings_label", () => Icons.Palette, "appearance", () => new AppearanceSettingsViewer(), undefined),
			new SettingsFolder(() => "notificationSettings_action", () => Icons.Bell, "notifications", () => new NotificationSettingsViewer(), undefined)
		];
		if (isDesktop()) this._userFolders.push(new SettingsFolder(() => "desktop_label", () => Icons.Desktop, "desktop", () => {
			const desktopSettingsViewer = new DesktopSettingsViewer();
			locator.initialized.then(() => {
				locator.native.setAppUpdateListener(() => desktopSettingsViewer.onAppUpdateAvailable());
			});
			return desktopSettingsViewer;
		}, undefined));
		mailLocator.mailboxModel.getMailboxDetails().then((mailboxes) => {
			this._userFolders.push(new SettingsFolder(() => "mailImportSettings_label", () => Icons.Import, "mailImport", () => {
				if (isDesktop()) return new DesktopMailImportSettingsViewer(() => mailLocator.getMailImporter());
else return new WebMailImportSettingsViewer();
			}, undefined));
		});
		this._userFolders.push(new SettingsFolder(() => "mailExportSettings_label", () => Icons.Export, "mailExport", () => new MailExportViewer(), undefined));
		this._adminFolders = [];
		this._templateFolders = [];
		this._makeTemplateFolders().then((folders) => {
			this._templateFolders = folders;
			mithril_default.redraw();
		});
		this._dummyTemplateFolder = new SettingsFolder(() => "templateGroupDefaultName_label", () => Icons.ListAlt, {
			folder: "templates",
			id: "init"
		}, () => {
			return {
				view: () => {
					return mithril_default(DummyTemplateListView);
				},
				entityEventsReceived: () => Promise.resolve()
			};
		}, undefined);
		this._knowledgeBaseFolders = [];
		this._makeKnowledgeBaseFolders().then((folders) => {
			this._knowledgeBaseFolders = folders;
			mithril_default.redraw();
		});
		this._selectedFolder = this._userFolders[0];
		this._templateInvitations = new ReceivedGroupInvitationsModel(GroupType.Template, locator.eventController, locator.entityClient, this.logins);
		this._templateInvitations.invitations.map(() => mithril_default.redraw());
		this._templateInvitations.init();
		this._settingsFoldersColumn = new ViewColumn({
			onbeforeremove: () => {
				this._templateInvitations.dispose();
			},
			view: () => {
				const [ownTemplates, sharedTemplates] = partition(this._templateFolders, (folder) => isSharedGroupOwner(folder.data.group, this.logins.getUserController().user));
				const templateInvitations = this._templateInvitations.invitations();
				return mithril_default(FolderColumnView, {
					drawer: vnode.attrs.drawerAttrs,
					button: null,
					content: mithril_default(".flex.flex-grow.col", [
						mithril_default(SidebarSection, { name: "userSettings_label" }, [
							this._renderSidebarSectionChildren(this._userFolders),
							ownTemplates.length > 0 ? ownTemplates.map((folder) => this._renderTemplateFolderRow(folder)) : mithril_default(SettingsFolderRow, { mainButtonAttrs: this._createSettingsFolderNavButton(this._dummyTemplateFolder) }),
							sharedTemplates.map((folder) => this._renderTemplateFolderRow(folder))
						]),
						this.logins.isUserLoggedIn() && this.logins.getUserController().isGlobalAdmin() ? mithril_default(SidebarSection, { name: "adminSettings_label" }, this._renderSidebarSectionChildren(this._adminFolders)) : null,
						templateInvitations.length > 0 ? mithril_default(SidebarSection, { name: "templateGroupInvitations_label" }, templateInvitations.map((invitation) => this._renderTemplateInvitationFolderRow(invitation))) : null,
						this._knowledgeBaseFolders.length > 0 ? mithril_default(SidebarSection, { name: "knowledgebase_label" }, this._renderSidebarSectionChildren(this._knowledgeBaseFolders)) : null,
						this._bottomSection()
					]),
					ariaLabel: "settings_label"
				});
			}
		}, ColumnType.Foreground, {
			minWidth: size.first_col_min_width,
			maxWidth: size.first_col_max_width,
			headerCenter: "settings_label"
		});
		this._settingsColumn = new ViewColumn({ view: () => mithril_default(BackgroundColumnLayout, {
			backgroundColor: theme.navigation_bg,
			columnLayout: mithril_default(".mlr-safe-inset.fill-absolute.content-bg", { class: styles.isUsingBottomNavigation() ? "" : "border-radius-top-left-big" }, mithril_default(this._getCurrentViewer())),
			mobileHeader: () => mithril_default(MobileHeader, {
				...vnode.attrs.header,
				backAction: () => this.viewSlider.focusPreviousColumn(),
				columnType: "first",
				title: this._selectedFolder.name(),
				actions: [],
				primaryAction: () => null
			}),
			desktopToolbar: () => null
		}) }, ColumnType.Background, {
			minWidth: 400,
			maxWidth: 600,
			headerCenter: this._selectedFolder.name
		});
		this._settingsDetailsColumn = new ViewColumn({ view: () => mithril_default(BackgroundColumnLayout, {
			backgroundColor: theme.navigation_bg,
			columnLayout: mithril_default(".mlr-safe-inset.fill-absolute.content-bg", this.detailsViewer ? this.detailsViewer.renderView() : mithril_default("")),
			mobileHeader: () => mithril_default(MobileHeader, {
				...vnode.attrs.header,
				backAction: () => this.viewSlider.focusPreviousColumn(),
				columnType: "other",
				title: this._selectedFolder.name(),
				actions: [],
				primaryAction: () => null
			}),
			desktopToolbar: () => null
		}) }, ColumnType.Background, {
			minWidth: 500,
			maxWidth: 2400,
			headerCenter: "settings_label"
		});
		this.viewSlider = new ViewSlider([
			this._settingsFoldersColumn,
			this._settingsColumn,
			this._settingsDetailsColumn
		]);
		this._customDomains = new LazyLoaded(async () => {
			const domainInfos = await getAvailableDomains(this.logins, true);
			return domainInfos.map((info) => info.domain);
		});
		this._customDomains.getAsync().then(() => mithril_default.redraw());
		this._targetFolder = mithril_default.route.param("folder");
		this._targetRoute = mithril_default.route.get();
	}
	async populateAdminFolders() {
		await this.updateShowBusinessSettings();
		await this.updateShowAffiliateSettings();
		const currentPlanType = await this.logins.getUserController().getPlanType();
		const isLegacyPlan = LegacyPlans.includes(currentPlanType);
		if (await this.logins.getUserController().canHaveUsers()) {
			this._adminFolders.push(new SettingsFolder(() => "adminUserList_action", () => BootIcons.Contacts, "users", () => new UserListView((viewer) => this.replaceDetailsViewer(viewer), () => this.focusSettingsDetailsColumn(), () => !isApp() && this._customDomains.isLoaded() && this._customDomains.getLoaded().length > 0, () => showUserImportDialog(this._customDomains.getLoaded()), () => exportUserCsv(locator.entityClient, this.logins, locator.fileController, locator.counterFacade)), undefined));
			if (!this.logins.isEnabled(FeatureType.WhitelabelChild)) this._adminFolders.push(new SettingsFolder(() => "sharedMailboxes_label", () => Icons.People, "groups", () => new GroupListView((viewer) => this.replaceDetailsViewer(viewer), () => this.focusSettingsDetailsColumn()), undefined));
		}
		if (this.logins.getUserController().isGlobalAdmin()) {
			this._adminFolders.push(new SettingsFolder(() => "globalSettings_label", () => BootIcons.Settings, "global", () => new GlobalSettingsViewer(), undefined));
			if (!this.logins.isEnabled(FeatureType.WhitelabelChild) && !isIOSApp()) this._adminFolders.push(new SettingsFolder(() => "whitelabel_label", () => Icons.Wand, "whitelabel", () => new WhitelabelSettingsViewer(locator.entityClient, this.logins), undefined));
		}
		if (!this.logins.isEnabled(FeatureType.WhitelabelChild)) {
			if (this.logins.getUserController().isGlobalAdmin()) {
				this._adminFolders.push(new SettingsFolder(() => "adminSubscription_action", () => BootIcons.Premium, "subscription", () => new SubscriptionViewer(currentPlanType, isIOSApp() ? locator.mobilePaymentsFacade : null), undefined));
				this._adminFolders.push(new SettingsFolder(() => "adminPayment_action", () => Icons.CreditCard, "invoice", () => new PaymentViewer(), undefined));
				this._adminFolders.push(new SettingsFolder(() => "referralSettings_label", () => BootIcons.Share, "referral", () => new ReferralSettingsViewer(), undefined).setIsVisibleHandler(() => !this.showBusinessSettings()));
				this._adminFolders.push(new SettingsFolder(() => "affiliateSettings_label", () => BootIcons.Share, "affiliate", () => new AffiliateSettingsViewer(() => this.viewSlider.focusedColumn === this._settingsDetailsColumn, () => {
					if (this.viewSlider.focusedColumn !== this._settingsDetailsColumn) {
						this.replaceDetailsViewer(new AffiliateKpisViewer());
						this.focusSettingsDetailsColumn();
					} else {
						this.replaceDetailsViewer(null);
						this.viewSlider.focus(this._settingsColumn);
					}
				}), undefined).setIsVisibleHandler(() => this.showAffiliateSettings));
			}
		}
		mithril_default.redraw();
	}
	replaceDetailsViewer(viewer) {
		return this.detailsViewer = viewer;
	}
	oncreate(vnode) {
		locator.eventController.addEntityListener(this.entityListener);
		this.populateAdminFolders().then(() => {
			const stillAtDefaultUrl = mithril_default.route.get() === this._userFolders[0].url;
			if (stillAtDefaultUrl) this.onNewUrl({ folder: this._targetFolder }, this._targetRoute);
		});
	}
	onremove(vnode) {
		locator.eventController.removeEntityListener(this.entityListener);
	}
	entityListener = (updates, eventOwnerGroupId) => {
		return this.entityEventsReceived(updates, eventOwnerGroupId);
	};
	view({ attrs }) {
		return mithril_default("#settings.main-view", mithril_default(this.viewSlider, {
			header: mithril_default(Header, { ...attrs.header }),
			bottomNav: mithril_default(BottomNav)
		}));
	}
	_createSettingsFolderNavButton(folder) {
		return {
			label: folder.name(),
			icon: folder.icon,
			href: folder.url,
			colors: NavButtonColor.Nav,
			click: () => this.viewSlider.focus(this._settingsColumn),
			persistentBackground: true
		};
	}
	_renderTemplateFolderRow(folder) {
		const instance = folder.data;
		const isGroupOwner = isSharedGroupOwner(instance.group, getEtId(this.logins.getUserController().user));
		return mithril_default(SettingsFolderRow, {
			mainButtonAttrs: this._createSettingsFolderNavButton(folder),
			extraButton: mithril_default(IconButton, createMoreActionButtonAttrs(() => [
				isGroupOwner ? {
					label: "delete_action",
					click: () => this._deleteTemplateGroup(folder.data),
					icon: Icons.Trash
				} : {
					label: "leaveGroup_action",
					click: () => this._leaveTemplateGroup(folder.data),
					icon: Icons.Trash
				},
				{
					label: "sharing_label",
					click: () => showGroupSharingDialog(folder.data.groupInfo, true),
					icon: Icons.ContactImport
				},
				{
					label: "rename_action",
					click: () => showRenameTemplateListDialog(folder.data),
					icon: Icons.Edit
				}
			]))
		});
	}
	_leaveTemplateGroup(templateInfo) {
		return getConfirmation(lang.getTranslation("confirmLeaveSharedGroup_msg", { "{groupName}": getSharedGroupName(templateInfo.groupInfo, this.logins.getUserController(), false) })).confirmed(() => locator.groupManagementFacade.removeUserFromGroup(getEtId(this.logins.getUserController().user), templateInfo.groupInfo.group));
	}
	_deleteTemplateGroup(templateInfo) {
		return getConfirmation("confirmDeleteTemplateGroup_msg").confirmed(() => showProgressDialog("pleaseWait_msg", locator.serviceExecutor.delete(TemplateGroupService, createUserAreaGroupDeleteData({ group: templateInfo.groupInfo.group }))));
	}
	_renderTemplateInvitationFolderRow(invitation) {
		return mithril_default(GroupInvitationFolderRow, {
			invitation,
			icon: BootIcons.Mail
		});
	}
	_renderSidebarSectionChildren(folders) {
		return mithril_default("", folders.filter((folder) => folder.isVisible()).map((folder) => {
			const buttonAttrs = this._createSettingsFolderNavButton(folder);
			return mithril_default(SettingsFolderRow, { mainButtonAttrs: buttonAttrs });
		}));
	}
	_getCurrentViewer() {
		if (!this._currentViewer) {
			this.detailsViewer = null;
			this._currentViewer = this._selectedFolder.viewerCreator();
		}
		return this._currentViewer;
	}
	/**
	* Notifies the current view about changes of the url within its scope.
	*/
	onNewUrl(args, requestedPath) {
		if (!args.folder) this._setUrl(this._userFolders[0].url);
else if (args.folder || !mithril_default.route.get().startsWith("/settings")) {
			const folder = this._allSettingsFolders().find((folder$1) => folder$1.url === requestedPath);
			if (!folder) this._setUrl(this._userFolders[0].url);
else if (this._selectedFolder.path === folder.path) {
				this._selectedFolder = folder;
				mithril_default.redraw();
			} else {
				this._setUrl(folder.url);
				this._selectedFolder = folder;
				this._currentViewer = null;
				this.detailsViewer = null;
				this._getCurrentViewer();
				mithril_default.redraw();
			}
		}
	}
	_getUserOwnedTemplateSettingsFolder() {
		return this._templateFolders.find((folder) => isSharedGroupOwner(folder.data.group, this.logins.getUserController().user)) || this._dummyTemplateFolder;
	}
	_allSettingsFolders() {
		const hasOwnTemplates = this._templateFolders.some((folder) => isSharedGroupOwner(folder.data.group, this.logins.getUserController().user));
		return [
			...this._userFolders,
			...this._adminFolders,
			...!hasOwnTemplates ? [this._dummyTemplateFolder] : [],
			...this._templateFolders,
			...this._knowledgeBaseFolders
		];
	}
	_setUrl(url) {
		mithril_default.route.set(url + location.hash);
	}
	_isGlobalAdmin(user) {
		return user.memberships.some((m) => m.groupType === GroupType.Admin);
	}
	focusSettingsDetailsColumn() {
		void this.viewSlider.focus(this._settingsDetailsColumn);
	}
	async updateShowBusinessSettings() {
		this.showBusinessSettings((await this.logins.getUserController().loadCustomer()).businessUse === true);
	}
	async entityEventsReceived(updates, eventOwnerGroupId) {
		for (const update of updates) if (isUpdateForTypeRef(CustomerTypeRef, update)) await this.updateShowBusinessSettings();
else if (this.logins.getUserController().isUpdateForLoggedInUserInstance(update, eventOwnerGroupId)) {
			const user = this.logins.getUserController().user;
			if (!this._isGlobalAdmin(user) && this._currentViewer && this._adminFolders.some((f) => f.isActive())) this._setUrl(this._userFolders[0].url);
			if (this._templateFolders.length !== this.logins.getUserController().getTemplateMemberships().length) {
				const templates = await this.reloadTemplateData();
				const currentRoute = mithril_default.route.get();
				if (currentRoute.startsWith(SETTINGS_PREFIX)) {
					const folder = mithril_default.route.param("folder");
					if (folder === "templates") {
						const templateListId = mithril_default.route.param("id");
						const haveOpenedFolder = templates.some((t) => t.id === templateListId);
						if (this._dummyTemplateFolder.url || !haveOpenedFolder) this._setUrl(this._getUserOwnedTemplateSettingsFolder().url);
					}
				}
			}
			mithril_default.redraw();
		} else if (isUpdateForTypeRef(CustomerInfoTypeRef, update)) {
			this._customDomains.reset();
			this._adminFolders.length = 0;
			await this.populateAdminFolders();
			await this._customDomains.getAsync();
			mithril_default.redraw();
		} else if (isUpdateForTypeRef(UserSettingsGroupRootTypeRef, update)) {
			await this.reloadTemplateData();
			mithril_default.redraw();
		}
		await this._currentViewer?.entityEventsReceived(updates);
		await this.detailsViewer?.entityEventsReceived(updates);
	}
	async reloadTemplateData() {
		const [templates, knowledgeBases] = await Promise.all([this._makeTemplateFolders(), this._makeKnowledgeBaseFolders()]);
		this._templateFolders = templates;
		this._knowledgeBaseFolders = knowledgeBases;
		return templates;
	}
	getViewSlider() {
		return this.viewSlider;
	}
	_bottomSection() {
		const isFirstPartyDomain = locator.domainConfigProvider().getCurrentDomainConfig().firstPartyDomain;
		return mithril_default(".pb.pt-l.flex-no-shrink.flex.col.justify-end.gap-vpad", [mithril_default(BaseButton, {
			class: "flash flex justify-center center-vertically pt-s pb-s plr-2l border-radius",
			style: {
				marginInline: "auto",
				border: `1px solid ${theme.navigation_button}`,
				color: theme.navigation_button
			},
			label: "supportMenu_label",
			text: mithril_default(".pl-m", lang.getTranslation("supportMenu_label").text),
			icon: mithril_default(Icon, {
				icon: Icons.SpeechBubbleFill,
				size: IconSize.Medium,
				class: "center-h",
				container: "div",
				style: { fill: theme.navigation_button }
			}),
			onclick: () => void showSupportDialog(locator.logins)
		}), isFirstPartyDomain ? this._aboutThisSoftwareLink() : null]);
	}
	_aboutThisSoftwareLink() {
		const label = lang.get("about_label");
		const versionLabel = `Tuta v${env.versionNumber}`;
		return mithril_default("button.text-center.small.no-text-decoration", {
			style: { backgroundColor: "transparent" },
			href: "#",
			"aria-label": label,
			"aria-description": versionLabel,
			"aria-haspopup": "dialog",
			onclick: () => {
				this.viewSlider.focusNextColumn();
				setTimeout(() => {
					const dialog = Dialog.showActionDialog({
						title: "about_label",
						child: () => mithril_default(AboutDialog, { onShowSetupWizard: () => {
							dialog.close();
							locator.showSetupWizard();
						} }),
						allowOkWithReturn: true,
						okAction: (dialog$1) => dialog$1.close(),
						allowCancel: false
					});
				}, 200);
			}
		}, [mithril_default("", versionLabel), mithril_default(".b", { style: { color: theme.navigation_button_selected } }, label)]);
	}
	async _makeTemplateFolders() {
		const userController = this.logins.getUserController();
		const templateMemberships = userController.getTemplateMemberships();
		return pMap(await loadTemplateGroupInstances(templateMemberships, locator.entityClient), (groupInstance) => {
			const sharedGroupName = getNullableSharedGroupName(groupInstance.groupInfo, userController.userSettingsGroupRoot, true);
			return new SettingsFolder(() => sharedGroupName ? lang.makeTranslation("templateGroupDefaultName_label", sharedGroupName) : "templateGroupDefaultName_label", () => Icons.ListAlt, {
				folder: "templates",
				id: getEtId(groupInstance.group)
			}, () => new TemplateListView(groupInstance, locator.entityClient, this.logins, (viewer) => this.replaceDetailsViewer(viewer), () => this.focusSettingsDetailsColumn()), groupInstance);
		});
	}
	async _makeKnowledgeBaseFolders() {
		const userController = this.logins.getUserController();
		const customer = await userController.loadCustomer();
		if (isCustomizationEnabledForCustomer(customer, FeatureType.KnowledgeBase)) {
			const templateMemberships = this.logins.getUserController() && this.logins.getUserController().getTemplateMemberships() || [];
			return pMap(await loadTemplateGroupInstances(templateMemberships, locator.entityClient), (groupInstance) => {
				const sharedGroupName = getNullableSharedGroupName(groupInstance.groupInfo, userController.userSettingsGroupRoot, true);
				return new SettingsFolder(() => sharedGroupName ? lang.makeTranslation("templateGroupDefaultName_label", sharedGroupName) : "templateGroupDefaultName_label", () => Icons.Book, {
					folder: "knowledgebase",
					id: getEtId(groupInstance.group)
				}, () => new KnowledgeBaseListView(locator.entityClient, this.logins, groupInstance.groupRoot, groupInstance.group, (viewer) => this.replaceDetailsViewer(viewer), () => this.focusSettingsDetailsColumn()), undefined);
			});
		} else return [];
	}
	async updateShowAffiliateSettings() {
		const customer = await this.logins.getUserController().loadCustomer();
		this.showAffiliateSettings = isCustomizationEnabledForCustomer(customer, FeatureType.AffiliatePartner);
	}
};
function showRenameTemplateListDialog(instance) {
	const logins = locator.logins;
	const name = (0, import_stream.default)(getSharedGroupName(instance.groupInfo, logins.getUserController(), true));
	Dialog.showActionDialog({
		title: "renameTemplateList_label",
		allowOkWithReturn: true,
		child: { view: () => mithril_default(TextField, {
			value: name(),
			oninput: name,
			label: "templateGroupName_label"
		}) },
		okAction: (dialog) => {
			dialog.close();
			const { userSettingsGroupRoot } = logins.getUserController();
			const existingGroupSettings = userSettingsGroupRoot.groupSettings.find((gc) => gc.group === instance.groupInfo.group);
			const newName = name();
			if (existingGroupSettings) existingGroupSettings.name = newName;
else {
				const newSettings = createGroupSettings({
					group: getEtId(instance.group),
					color: "",
					name: newName,
					defaultAlarmsList: [],
					sourceUrl: null
				});
				logins.getUserController().userSettingsGroupRoot.groupSettings.push(newSettings);
			}
			locator.entityClient.update(userSettingsGroupRoot).then(() => {
				if (isSharedGroupOwner(instance.group, logins.getUserController().user)) {
					instance.groupInfo.name = newName;
					locator.entityClient.update(instance.groupInfo);
				}
			});
		}
	});
}

//#endregion
export { SettingsView };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,