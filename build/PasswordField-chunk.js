import { assertMainOrNode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { Autocomplete, TextField, TextFieldType } from "./Dialog-chunk.js";
import { ButtonSize } from "./IconButton-chunk.js";
import { CompletenessIndicator } from "./ProgressDialog-chunk.js";
import { isSecurePassword, scaleToVisualPasswordStrength } from "./PasswordUtils-chunk.js";
import { ToggleButton } from "./ToggleButton-chunk.js";

//#region src/common/gui/base/StatusField.ts
assertMainOrNode();
var StatusField = class {
	view(vnode) {
		const { status } = vnode.attrs;
		if (!status) return null;
		return mithril_default("", lang.get(status.text));
	}
};

//#endregion
//#region src/common/misc/passwords/PasswordField.ts
var PasswordField = class PasswordField {
	isPasswordRevealed = false;
	view(vnode) {
		const attrs = vnode.attrs;
		const { passwordStrength, status, label,...textFieldAttrs } = attrs;
		return mithril_default(TextField, {
			...textFieldAttrs,
			label: label === undefined ? "password_label" : label,
			autocompleteAs: attrs.autocompleteAs ? attrs.autocompleteAs : Autocomplete.currentPassword,
			type: this.isPasswordRevealed ? TextFieldType.Text : TextFieldType.Password,
			helpLabel: () => PasswordField.renderHelpLabel(textFieldAttrs.value, passwordStrength, status, textFieldAttrs.helpLabel ?? null),
			injectionsRight: () => {
				return [PasswordField.renderRevealIcon(this.isPasswordRevealed, (newValue) => this.isPasswordRevealed = newValue), textFieldAttrs.injectionsRight ? textFieldAttrs.injectionsRight() : null];
			}
		});
	}
	static renderRevealIcon(isPasswordRevealed, onRevealToggled) {
		return mithril_default(ToggleButton, {
			title: isPasswordRevealed ? "concealPassword_action" : "revealPassword_action",
			toggled: isPasswordRevealed,
			onToggled: (value, e) => {
				onRevealToggled(value);
				e.stopPropagation();
			},
			icon: isPasswordRevealed ? Icons.NoEye : Icons.Eye,
			size: ButtonSize.Compact
		});
	}
	static renderHelpLabel(value, strength, status, helpLabel) {
		const displayedStatus = PasswordField.parseStatusSetting(status, value, strength);
		return mithril_default(".mt-xs", [mithril_default(".flex.items-center", [strength != undefined ? mithril_default(CompletenessIndicator, {
			class: "mr-s",
			percentageCompleted: scaleToVisualPasswordStrength(strength)
		}) : null, displayedStatus ? mithril_default(StatusField, { status: displayedStatus }) : null]), helpLabel ? helpLabel() : null]);
	}
	static parseStatusSetting(status, password, strength) {
		if (status === "auto" && strength != undefined) return PasswordField.getPasswordStatus(password, strength);
else if (status && typeof status !== "string") return status;
else return null;
	}
	static getPasswordStatus(password, strength) {
		if (password === "") return {
			type: "neutral",
			text: "password1Neutral_msg"
		};
else if (isSecurePassword(strength)) return {
			type: "valid",
			text: "passwordValid_msg"
		};
else return {
			type: "invalid",
			text: "password1InvalidUnsecure_msg"
		};
	}
};

//#endregion
export { PasswordField };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,