import "./dist-chunk.js";
import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { assertWorkerOrNode } from "./Env-chunk.js";
import { assertNotNull, freshVersioned, getFirstOrThrow, isNotEmpty, neverNull } from "./dist2-chunk.js";
import { CounterType, GroupType, PublicKeyIdentifierType } from "./TutanotaConstants-chunk.js";
import "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { createCreateMailGroupData, createDeleteGroupData, createInternalGroupData, createUserAreaGroupData, createUserAreaGroupDeleteData, createUserAreaGroupPostData } from "./TypeRefs-chunk.js";
import "./TypeModels2-chunk.js";
import { AdministratedGroupTypeRef, CustomerTypeRef, GroupInfoTypeRef, GroupTypeRef, UserTypeRef, createLocalAdminGroupReplacementData, createLocalAdminRemovalPostIn, createMembershipAddData, createMembershipRemoveData } from "./TypeRefs2-chunk.js";
import "./CryptoError-chunk.js";
import { LocalAdminRemovalService, MembershipService } from "./Services-chunk.js";
import "./dist3-chunk.js";
import { encryptKeyWithVersionedKey, encryptString } from "./CryptoWrapper-chunk.js";
import { CalendarService, ContactListGroupService, MailGroupService, TemplateGroupService } from "./Services2-chunk.js";
import { isGlobalAdmin } from "./UserUtils-chunk.js";

//#region src/common/api/worker/facades/lazy/GroupManagementFacade.ts
assertWorkerOrNode();
var GroupManagementFacade = class {
	constructor(userFacade, counters, entityClient, serviceExecutor, pqFacade, keyLoaderFacade, cacheManagementFacade, asymmetricCryptoFacade, cryptoWrapper) {
		this.userFacade = userFacade;
		this.counters = counters;
		this.entityClient = entityClient;
		this.serviceExecutor = serviceExecutor;
		this.pqFacade = pqFacade;
		this.keyLoaderFacade = keyLoaderFacade;
		this.cacheManagementFacade = cacheManagementFacade;
		this.asymmetricCryptoFacade = asymmetricCryptoFacade;
		this.cryptoWrapper = cryptoWrapper;
	}
	async readUsedSharedMailGroupStorage(group) {
		return this.counters.readCounterValue(CounterType.UserStorageLegacy, neverNull(group.customer), group._id);
	}
	async createMailGroup(name, mailAddress) {
		const adminGroupIds = this.userFacade.getGroupIds(GroupType.Admin);
		const adminGroupId = getFirstOrThrow(adminGroupIds);
		let adminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId);
		let customerGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(this.userFacade.getGroupId(GroupType.Customer));
		let mailGroupKey = freshVersioned(this.cryptoWrapper.aes256RandomKey());
		let mailGroupInfoSessionKey = this.cryptoWrapper.aes256RandomKey();
		let mailboxSessionKey = this.cryptoWrapper.aes256RandomKey();
		const keyPair = await this.pqFacade.generateKeyPairs();
		const mailGroupData = this.generateInternalGroupData(keyPair, mailGroupKey.object, mailGroupInfoSessionKey, adminGroupId, adminGroupKey, customerGroupKey);
		const mailEncMailboxSessionKey = encryptKeyWithVersionedKey(mailGroupKey, mailboxSessionKey);
		const data = createCreateMailGroupData({
			mailAddress,
			encryptedName: encryptString(mailGroupInfoSessionKey, name),
			mailEncMailboxSessionKey: mailEncMailboxSessionKey.key,
			groupData: mailGroupData
		});
		await this.serviceExecutor.post(MailGroupService, data);
	}
	/**
	* Generates keys for the new group and prepares the group data object to create the group.
	*
	* @param name Name of the group
	*/
	async generateUserAreaGroupData(name) {
		const userGroup = await this.entityClient.load(GroupTypeRef, this.userFacade.getUserGroupId());
		const adminGroupId = neverNull(userGroup.admin);
		let adminGroupKey = null;
		if (this.userFacade.getAllGroupIds().indexOf(adminGroupId) !== -1) adminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId);
		const customerGroupId = this.userFacade.getGroupId(GroupType.Customer);
		const customerGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(customerGroupId);
		const userGroupKey = this.userFacade.getCurrentUserGroupKey();
		const groupKey = freshVersioned(this.cryptoWrapper.aes256RandomKey());
		const groupRootSessionKey = this.cryptoWrapper.aes256RandomKey();
		const groupInfoSessionKey = this.cryptoWrapper.aes256RandomKey();
		const userEncGroupKey = encryptKeyWithVersionedKey(userGroupKey, groupKey.object);
		const adminEncGroupKey = adminGroupKey ? encryptKeyWithVersionedKey(adminGroupKey, groupKey.object) : null;
		const customerEncGroupInfoSessionKey = encryptKeyWithVersionedKey(customerGroupKey, groupInfoSessionKey);
		const groupEncGroupRootSessionKey = encryptKeyWithVersionedKey(groupKey, groupRootSessionKey);
		return createUserAreaGroupData({
			groupEncGroupRootSessionKey: groupEncGroupRootSessionKey.key,
			customerEncGroupInfoSessionKey: customerEncGroupInfoSessionKey.key,
			userEncGroupKey: userEncGroupKey.key,
			groupInfoEncName: encryptString(groupInfoSessionKey, name),
			adminEncGroupKey: adminEncGroupKey?.key ?? null,
			adminGroup: adminGroupId,
			customerKeyVersion: customerEncGroupInfoSessionKey.encryptingKeyVersion.toString(),
			userKeyVersion: userGroupKey.version.toString(),
			adminKeyVersion: adminEncGroupKey?.encryptingKeyVersion.toString() ?? null
		});
	}
	async createCalendar(name) {
		const groupData = await this.generateUserAreaGroupData(name);
		const postData = createUserAreaGroupPostData({ groupData });
		const postGroupData = await this.serviceExecutor.post(CalendarService, postData, { sessionKey: this.cryptoWrapper.aes256RandomKey() });
		const group = await this.entityClient.load(GroupTypeRef, postGroupData.group);
		const user = await this.cacheManagementFacade.reloadUser();
		return {
			user,
			group
		};
	}
	async createTemplateGroup(name) {
		const groupData = await this.generateUserAreaGroupData(name);
		const serviceData = createUserAreaGroupPostData({ groupData });
		const postGroupData = await this.serviceExecutor.post(TemplateGroupService, serviceData, { sessionKey: this.cryptoWrapper.aes256RandomKey() });
		await this.cacheManagementFacade.reloadUser();
		return postGroupData.group;
	}
	async createContactListGroup(name) {
		const groupData = await this.generateUserAreaGroupData(name);
		const serviceData = createUserAreaGroupPostData({ groupData });
		const postGroupData = await this.serviceExecutor.post(ContactListGroupService, serviceData, { sessionKey: this.cryptoWrapper.aes256RandomKey() });
		const group = await this.entityClient.load(GroupTypeRef, postGroupData.group);
		await this.cacheManagementFacade.reloadUser();
		return group;
	}
	async deleteContactListGroup(groupRoot) {
		const serviceData = createUserAreaGroupDeleteData({ group: groupRoot._id });
		await this.serviceExecutor.delete(ContactListGroupService, serviceData);
	}
	/**
	* Assemble the data transfer type to create a new internal group on the server.
	* The group key version is not needed because it is always zero.
	*/
	generateInternalGroupData(keyPair, groupKey, groupInfoSessionKey, adminGroupId, adminGroupKey, ownerGroupKey) {
		const adminEncGroupKey = encryptKeyWithVersionedKey(adminGroupKey, groupKey);
		const ownerEncGroupInfoSessionKey = encryptKeyWithVersionedKey(ownerGroupKey, groupInfoSessionKey);
		return createInternalGroupData({
			pubRsaKey: null,
			groupEncPrivRsaKey: null,
			pubEccKey: keyPair.eccKeyPair.publicKey,
			groupEncPrivEccKey: this.cryptoWrapper.encryptEccKey(groupKey, keyPair.eccKeyPair.privateKey),
			pubKyberKey: this.cryptoWrapper.kyberPublicKeyToBytes(keyPair.kyberKeyPair.publicKey),
			groupEncPrivKyberKey: this.cryptoWrapper.encryptKyberKey(groupKey, keyPair.kyberKeyPair.privateKey),
			adminGroup: adminGroupId,
			adminEncGroupKey: adminEncGroupKey.key,
			ownerEncGroupInfoSessionKey: ownerEncGroupInfoSessionKey.key,
			adminKeyVersion: adminEncGroupKey.encryptingKeyVersion.toString(),
			ownerKeyVersion: ownerEncGroupInfoSessionKey.encryptingKeyVersion.toString()
		});
	}
	async addUserToGroup(user, groupId) {
		const userGroupKey = await this.getCurrentGroupKeyViaAdminEncGKey(user.userGroup.group);
		const groupKey = await this.getCurrentGroupKeyViaAdminEncGKey(groupId);
		const symEncGKey = encryptKeyWithVersionedKey(userGroupKey, groupKey.object);
		const data = createMembershipAddData({
			user: user._id,
			group: groupId,
			symEncGKey: symEncGKey.key,
			groupKeyVersion: String(groupKey.version),
			symKeyVersion: symEncGKey.encryptingKeyVersion.toString()
		});
		await this.serviceExecutor.post(MembershipService, data);
	}
	async removeUserFromGroup(userId, groupId) {
		const data = createMembershipRemoveData({
			user: userId,
			group: groupId
		});
		await this.serviceExecutor.delete(MembershipService, data);
	}
	async deactivateGroup(group, restore) {
		const data = createDeleteGroupData({
			group: group._id,
			restore
		});
		if (group.type === GroupType.Mail) await this.serviceExecutor.delete(MailGroupService, data);
else throw new Error("invalid group type for deactivation");
	}
	async getGroupKeyViaUser(groupId, version, viaUser) {
		const currentGroupKey = await this.getCurrentGroupKeyViaUser(groupId, viaUser);
		return this.keyLoaderFacade.loadSymGroupKey(groupId, version, currentGroupKey);
	}
	/**
	* Get a group key for any group we are admin and know some member of.
	*
	* Unlike {@link getCurrentGroupKeyViaAdminEncGKey} this should work for any group because we will actually go a "long" route of decrypting userGroupKey of the
	* member and decrypting group key with that.
	*/
	async getCurrentGroupKeyViaUser(groupId, viaUser) {
		const user = await this.entityClient.load(UserTypeRef, viaUser);
		const membership = user.memberships.find((m) => m.group === groupId);
		if (membership == null) throw new Error(`User doesn't have this group membership! User: ${viaUser} groupId: ${groupId}`);
		const requiredUserGroupKeyVersion = membership.symKeyVersion;
		const requiredUserGroupKey = await this.getGroupKeyViaAdminEncGKey(user.userGroup.group, Number(requiredUserGroupKeyVersion));
		const key = this.cryptoWrapper.decryptKey(requiredUserGroupKey, membership.symEncGKey);
		const version = Number(membership.groupKeyVersion);
		return {
			object: key,
			version
		};
	}
	async getGroupKeyViaAdminEncGKey(groupId, version) {
		if (this.userFacade.hasGroup(groupId)) return this.keyLoaderFacade.loadSymGroupKey(groupId, version);
else {
			const currentGroupKey = await this.getCurrentGroupKeyViaAdminEncGKey(groupId);
			return this.keyLoaderFacade.loadSymGroupKey(groupId, version, currentGroupKey);
		}
	}
	/**
	* @returns true if the group currently has an adminEncGKey. This may be an asymmetrically encrypted one.
	*/
	hasAdminEncGKey(group) {
		return group.adminGroupEncGKey != null && group.adminGroupEncGKey.length !== 0 || group.pubAdminGroupEncGKey != null;
	}
	/**
	* Get a group key for certain group types.
	*
	* Some groups (e.g. user groups or shared mailboxes) have adminGroupEncGKey set on creation. For those groups we can fairly easily get a group key without
	* decrypting userGroupKey of some member of that group.
	*/
	async getCurrentGroupKeyViaAdminEncGKey(groupId) {
		if (this.userFacade.hasGroup(groupId)) return this.keyLoaderFacade.getCurrentSymGroupKey(groupId);
else {
			const group = await this.cacheManagementFacade.reloadGroup(groupId);
			if (!this.hasAdminEncGKey(group)) throw new ProgrammingError("Group doesn't have adminGroupEncGKey, you can't get group key this way");
			if (!(group.admin && this.userFacade.hasGroup(group.admin))) throw new Error(`The user is not a member of the admin group ${group.admin} when trying to get the group key for group ${groupId}`);
			const requiredAdminKeyVersion = Number(group.adminGroupKeyVersion ?? 0);
			if (group.adminGroupEncGKey != null) return await this.decryptViaSymmetricAdminGKey(group, requiredAdminKeyVersion);
else return await this.decryptViaAsymmetricAdminGKey(group, requiredAdminKeyVersion);
		}
	}
	async decryptViaSymmetricAdminGKey(group, requiredAdminKeyVersion) {
		const requiredAdminGroupKey = await this.keyLoaderFacade.loadSymGroupKey(assertNotNull(group.admin), requiredAdminKeyVersion);
		const decryptedKey = this.cryptoWrapper.decryptKey(requiredAdminGroupKey, assertNotNull(group.adminGroupEncGKey));
		return {
			object: decryptedKey,
			version: Number(group.groupKeyVersion)
		};
	}
	async decryptViaAsymmetricAdminGKey(group, requiredAdminKeyVersion) {
		const requiredAdminGroupKeyPair = await this.keyLoaderFacade.loadKeypair(assertNotNull(group.admin), requiredAdminKeyVersion);
		const pubEncKeyData = assertNotNull(group.pubAdminGroupEncGKey);
		const decryptedKey = await this.asymmetricCryptoFacade.decryptSymKeyWithKeyPairAndAuthenticate(requiredAdminGroupKeyPair, pubEncKeyData, {
			identifier: group._id,
			identifierType: PublicKeyIdentifierType.GROUP_ID
		});
		return {
			object: decryptedKey.decryptedAesKey,
			version: Number(group.groupKeyVersion)
		};
	}
	/**
	* Context: removal of local admins
	* Problem: local admins encrypted the user group key of their users with their admin group key but global admin can't
	* decrypt these with their admin group key.
	* We want the global admin to still be able to decrypt user data.
	*
	* This function will decrypt the user group key with the local admin group key and then encrypt it with the global admin group key
	* Please note that this function is free of side effects, it only returns a new reference of the newly modified group.
	*
	* @param globalAdminGroupKey the key of the global admin that will encrypt the user group key
	* @param localAdminGroupKey the key of the local admin that was used to encrypt the user group key and will be used to decrypt the user group key
	* @param userGroup the user group that needs its adminEncGroupKey to be replaced
	*/
	async replaceLocalAdminEncGroupKeyWithGlobalAdminEncGroupKey(globalAdminGroupKey, localAdminGroupKey, userGroup) {
		const localAdminEncUserGroupKey = assertNotNull(userGroup.adminGroupEncGKey);
		const decryptedUserGroupKey = this.cryptoWrapper.decryptKey(localAdminGroupKey, localAdminEncUserGroupKey);
		const globalAdminEncUserGroupKey = this.cryptoWrapper.encryptKey(globalAdminGroupKey.object, decryptedUserGroupKey);
		const groupUpdate = createLocalAdminGroupReplacementData({
			adminGroupKeyVersion: String(globalAdminGroupKey.version),
			adminGroupEncGKey: globalAdminEncUserGroupKey,
			groupId: userGroup._id,
			groupKeyVersion: userGroup.groupKeyVersion
		});
		return groupUpdate;
	}
	/**
	* Since local admins won't be supported anymore and will be removed we need to let the
	* global admin access the locally administrated group data.
	* As its name suggest this function migrate the users administrated by the local admins
	* to the global admin of the customer so that the global admin can have direct
	* encryption and decryption of its users group keys.
	*/
	async migrateLocalAdminsToGlobalAdmins() {
		const user = this.userFacade.getLoggedInUser();
		if (!isGlobalAdmin(user)) return;
		const customer = await this.entityClient.load(CustomerTypeRef, assertNotNull(user.customer));
		const teamGroupInfos = await this.entityClient.loadAll(GroupInfoTypeRef, customer.teamGroups);
		const localAdminGroupInfos = teamGroupInfos.filter((group) => group.groupType === GroupType.LocalAdmin);
		const adminGroupId = customer.adminGroup;
		const adminGroupKey = await this.keyLoaderFacade.getCurrentSymGroupKey(adminGroupId);
		const postIn = createLocalAdminRemovalPostIn({ groupUpdates: [] });
		for (let localAdminGroupInfo of localAdminGroupInfos) {
			const localAdminGroup = await this.entityClient.load(GroupTypeRef, localAdminGroupInfo.group);
			const administratedGroupsListId = localAdminGroup.administratedGroups?.items;
			if (administratedGroupsListId == null) return null;
			const administratedGroups = await this.entityClient.loadAll(AdministratedGroupTypeRef, administratedGroupsListId);
			const thisLocalAdminGroupKey = await this.getCurrentGroupKeyViaAdminEncGKey(localAdminGroup._id);
			for (let ag of administratedGroups) {
				const thisRelatedGroupInfo = await this.entityClient.load(GroupInfoTypeRef, ag.groupInfo);
				const thisRelatedGroup = await this.entityClient.load(GroupTypeRef, thisRelatedGroupInfo.group);
				const groupUpdate = await this.replaceLocalAdminEncGroupKeyWithGlobalAdminEncGroupKey(adminGroupKey, thisLocalAdminGroupKey.object, thisRelatedGroup);
				postIn.groupUpdates.push(groupUpdate);
			}
		}
		if (isNotEmpty(postIn.groupUpdates)) await this.serviceExecutor.post(LocalAdminRemovalService, postIn);
	}
};

//#endregion
export { GroupManagementFacade };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,