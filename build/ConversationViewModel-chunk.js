import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import { assertNotNull, findLastIndex, groupBy, makeSingleUse, ofClass } from "./dist2-chunk.js";
import { ConversationType, MailSetKind, MailState, OperationType } from "./TutanotaConstants-chunk.js";
import { elementIdPart, firstBiggerThanSecond, getElementId, haveSameId, isSameId, listIdPart } from "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { ConversationEntryTypeRef, MailTypeRef } from "./TypeRefs-chunk.js";
import "./ParserCombinator-chunk.js";
import "./stream-chunk.js";
import "./ErrorUtils-chunk.js";
import { NotAuthorizedError, NotFoundError } from "./RestError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import { isUpdateForTypeRef } from "./EntityUpdateUtils-chunk.js";
import { isOfTypeOrSubfolderOf } from "./MailChecks-chunk.js";
import { LoadingStateTracker } from "./LoadingState-chunk.js";

//#region src/mail-app/mail/view/ConversationViewModel.ts
var ConversationViewModel = class {
	/** Primary viewModel is for the mail that was selected from the list. */
	_primaryViewModel;
	loadingState = new LoadingStateTracker();
	loadingPromise = null;
	/** Is not set until {@link loadConversation is finished. Until it is finished we display primary mail and subject. */
	conversation = null;
	constructor(options, viewModelFactory, entityClient, eventController, conversationPrefProvider, mailModel, onUiUpdate) {
		this.options = options;
		this.viewModelFactory = viewModelFactory;
		this.entityClient = entityClient;
		this.eventController = eventController;
		this.conversationPrefProvider = conversationPrefProvider;
		this.mailModel = mailModel;
		this.onUiUpdate = onUiUpdate;
		this._primaryViewModel = viewModelFactory(options);
	}
	init = makeSingleUse((delayBodyRendering) => {
		this.loadingPromise = this.loadingState.trackPromise(this.loadConversation());
		this.eventController.addEntityListener(this.onEntityEvent);
		this._primaryViewModel.expandMail(delayBodyRendering);
	});
	onEntityEvent = async (updates, eventOwnerGroupId) => {
		for (const update of updates) if (isUpdateForTypeRef(ConversationEntryTypeRef, update) && update.instanceListId === this.conversationListId()) {
			if (this.conversationPrefProvider.getConversationViewShowOnlySelectedMail()) continue;
			switch (update.operation) {
				case OperationType.CREATE:
					await this.processCreateConversationEntry(update);
					break;
				case OperationType.UPDATE:
					await this.processUpdateConversationEntry(update);
					break;
			}
		}
	};
	async processCreateConversationEntry(update) {
		const id = [update.instanceListId, update.instanceId];
		try {
			const entry = await this.entityClient.load(ConversationEntryTypeRef, id);
			if (entry.mail) {
				try {
					await this.loadingPromise;
				} catch (e) {
					return;
				}
				const conversation = assertNotNull(this.conversation);
				if (conversation.some((item) => item.type === "mail" && isSameId(item.viewModel.mail.conversationEntry, id))) return;
				const mail = await this.entityClient.load(MailTypeRef, entry.mail);
				let index = findLastIndex(conversation, (i) => firstBiggerThanSecond(getElementId(entry), elementIdPart(i.entryId)));
				if (index < 0) index = conversation.length;
else index = index + 1;
				conversation.splice(index, 0, {
					type: "mail",
					viewModel: this.viewModelFactory({
						...this.options,
						mail
					}),
					entryId: entry._id
				});
				this.onUiUpdate();
			}
		} catch (e) {
			if (e instanceof NotFoundError) {} else throw e;
		}
	}
	async processUpdateConversationEntry(update) {
		try {
			await this.loadingPromise;
		} catch (e) {
			return;
		}
		const conversation = assertNotNull(this.conversation);
		const ceId = [update.instanceListId, update.instanceId];
		let conversationEntry;
		let mail;
		try {
			conversationEntry = await this.entityClient.load(ConversationEntryTypeRef, ceId);
			mail = conversationEntry.conversationType !== ConversationType.UNKNOWN && conversationEntry.mail ? await this.entityClient.load(MailTypeRef, conversationEntry.mail).catch(ofClass(NotFoundError, () => {
				console.log(`Could not find updated mail ${JSON.stringify(conversationEntry.mail)}`);
				return null;
			})) : null;
		} catch (e) {
			if (e instanceof NotFoundError) return;
else throw e;
		}
		const oldItemIndex = conversation.findIndex((e) => e.type === "mail" && isSameId(e.viewModel.mail.conversationEntry, ceId));
		if (oldItemIndex === -1) return;
		const oldItem = conversation[oldItemIndex];
		if (mail && oldItem.type === "mail" && haveSameId(oldItem.viewModel.mail, mail)) console.log("Noop entry update?", oldItem.viewModel.mail);
else {
			if (oldItem.type === "mail") oldItem.viewModel.dispose();
			if (mail) if (mail.state === MailState.DRAFT && await this.isInTrash(mail)) conversation.splice(oldItemIndex, 1);
else conversation[oldItemIndex] = {
				type: "mail",
				viewModel: this.viewModelFactory({
					...this.options,
					mail
				}),
				entryId: conversationEntry._id
			};
else conversation.splice(oldItemIndex, 1);
			this.onUiUpdate();
		}
	}
	conversationListId() {
		return listIdPart(this._primaryViewModel.mail.conversationEntry);
	}
	async loadConversation() {
		try {
			if (this.conversationPrefProvider.getConversationViewShowOnlySelectedMail()) this.conversation = this.conversationItemsForSelectedMailOnly();
else this.conversation = await this.entityClient.loadAll(ConversationEntryTypeRef, listIdPart(this.primaryMail.conversationEntry)).then(async (entries) => {
				if (!entries.some((entry) => isSameId(entry.mail, this.primaryMail._id))) return this.conversationItemsForSelectedMailOnly();
else {
					const allMails = await this.loadMails(entries);
					return this.createConversationItems(entries, allMails);
				}
			}, async (e) => {
				if (e instanceof NotAuthorizedError) return this.conversationItemsForSelectedMailOnly();
else throw e;
			});
		} finally {
			this.onUiUpdate();
		}
	}
	createConversationItems(conversationEntries, allMails) {
		const newConversation = [];
		for (const c of conversationEntries) {
			const mail = c.mail && allMails.get(elementIdPart(c.mail));
			if (mail) newConversation.push({
				type: "mail",
				viewModel: isSameId(mail._id, this.options.mail._id) ? this._primaryViewModel : this.viewModelFactory({
					...this.options,
					mail
				}),
				entryId: c._id
			});
		}
		return newConversation;
	}
	async loadMails(conversationEntries) {
		const byList = groupBy(conversationEntries, (c) => c.mail && listIdPart(c.mail));
		const allMails = new Map();
		for (const [listId, conversations] of byList.entries()) {
			if (!listId) continue;
			const loaded = await this.entityClient.loadMultiple(MailTypeRef, listId, conversations.map((c) => elementIdPart(assertNotNull(c.mail))));
			for (const mail of loaded) if (isSameId(mail._id, this.primaryMail._id) || mail.state !== MailState.DRAFT || !await this.isInTrash(mail)) allMails.set(getElementId(mail), mail);
		}
		return allMails;
	}
	async isInTrash(mail) {
		const mailboxDetail = await this.mailModel.getMailboxDetailsForMail(mail);
		const mailFolder = this.mailModel.getMailFolderForMail(mail);
		if (mailFolder == null || mailboxDetail == null || mailboxDetail.mailbox.folders == null) return;
		const folders = await this.mailModel.getMailboxFoldersForId(mailboxDetail.mailbox.folders._id);
		return isOfTypeOrSubfolderOf(folders, mailFolder, MailSetKind.TRASH);
	}
	conversationItems() {
		return this.conversation ?? this.conversationItemsForSelectedMailOnly();
	}
	conversationItemsForSelectedMailOnly() {
		return [{
			type: "mail",
			viewModel: this._primaryViewModel,
			entryId: this._primaryViewModel.mail.conversationEntry
		}];
	}
	get primaryMail() {
		return this._primaryViewModel.mail;
	}
	primaryViewModel() {
		return this._primaryViewModel;
	}
	isFinished() {
		return this.loadingState.isIdle();
	}
	isConnectionLost() {
		return this.loadingState.isConnectionLost();
	}
	retry() {
		if (this.loadingState.isConnectionLost()) this.loadingState.trackPromise(this.loadConversation().then(async () => {
			const mails = this.conversation?.filter((e) => e.type === "mail") ?? [];
			await Promise.all(mails.map((m) => m.viewModel.loadAll(Promise.resolve())));
		}));
	}
	dispose() {
		if (this.loadingPromise != null) {
			this.eventController.removeEntityListener(this.onEntityEvent);
			for (const item of this.conversationItems()) if (item.type === "mail") item.viewModel.dispose();
		}
	}
};

//#endregion
export { ConversationViewModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,