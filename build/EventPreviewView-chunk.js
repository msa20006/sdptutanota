import { mithril_default } from "./mithril-chunk.js";
import { downcast, memoized } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { theme } from "./theme-chunk.js";
import { CalendarAttendeeStatus, EndType, RepeatPeriod, getAttendeeStatus } from "./TutanotaConstants-chunk.js";
import { createCalendarEventAttendee, createEncryptedMailAddress } from "./TypeRefs-chunk.js";
import { cleanMailAddress, findAttendeeInAddresses, isAllDayEvent } from "./CommonCalendarUtils-chunk.js";
import { getRepeatEndTimeForDisplay, getTimeZone } from "./CalendarUtils-chunk.js";
import { hasError } from "./ErrorUtils-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { pureComponent } from "./Dialog-chunk.js";
import { BootIcons, Icon, IconSize } from "./Icon-chunk.js";
import { formatDateWithMonth } from "./Formatter-chunk.js";
import { createRepeatRuleFrequencyValues, formatEventDuration, getDisplayEventTitle, iconForAttendeeStatus } from "./CalendarGuiUtils-chunk.js";
import { UpgradeRequiredError } from "./UpgradeRequiredError-chunk.js";
import { BannerButton } from "./BannerButton-chunk.js";
import { showPlanUpgradeRequiredDialog } from "./SubscriptionDialogs-chunk.js";
import { ExternalLink } from "./ExternalLink-chunk.js";

//#region src/calendar-app/calendar/gui/eventpopup/EventPreviewView.ts
const ReplyButtons = pureComponent((participation) => {
	const colors = {
		borderColor: theme.content_button,
		color: theme.content_fg
	};
	const highlightColors = {
		borderColor: theme.content_accent,
		color: theme.content_accent
	};
	const makeStatusButtonAttrs = (status, text) => Object.assign({
		text,
		class: "width-min-content",
		click: async () => {
			try {
				await participation.setParticipation(status);
			} catch (e) {
				if (e instanceof UpgradeRequiredError) {
					const ordered = await showPlanUpgradeRequiredDialog(e.plans, e.message);
					if (!ordered) return;
					await participation.setParticipation(status);
				} else throw e;
			}
		}
	}, participation.ownAttendee.status === status ? highlightColors : colors);
	return mithril_default(".flex.col", [mithril_default(".small", lang.get("invitedToEvent_msg")), mithril_default(".flex.items-center.mt-s", [
		mithril_default(BannerButton, makeStatusButtonAttrs(CalendarAttendeeStatus.ACCEPTED, "yes_label")),
		mithril_default(BannerButton, makeStatusButtonAttrs(CalendarAttendeeStatus.TENTATIVE, "maybe_label")),
		mithril_default(BannerButton, makeStatusButtonAttrs(CalendarAttendeeStatus.DECLINED, "no_label"))
	])]);
});
var EventPreviewView = class {
	getLocationUrl;
	constructor() {
		this.getLocationUrl = memoized(getLocationUrl);
	}
	view(vnode) {
		const { event, sanitizedDescription, participation } = vnode.attrs;
		const attendees = prepareAttendees(event.attendees, event.organizer);
		const eventTitle = getDisplayEventTitle(event.summary);
		return mithril_default(".flex.col.smaller.scroll.visible-scrollbar", [
			this.renderRow(BootIcons.Calendar, [mithril_default("span.h3", eventTitle)]),
			this.renderRow(Icons.Time, [formatEventDuration(event, getTimeZone(), false), this.renderRepeatRule(event.repeatRule, isAllDayEvent(event))]),
			this.renderLocation(event.location),
			this.renderAttendeesSection(attendees, participation),
			this.renderAttendanceSection(event, attendees, participation),
			this.renderDescription(sanitizedDescription)
		]);
	}
	renderRow(headerIcon, children, isAlignedLeft) {
		return mithril_default(".flex.pb-s", { class: isAlignedLeft ? "items-start" : "items-center" }, [this.renderSectionIndicator(headerIcon, isAlignedLeft ? { marginTop: "2px" } : undefined), mithril_default(".selectable.text-break.full-width", children)]);
	}
	renderSectionIndicator(icon, style = {}) {
		return mithril_default(Icon, {
			icon,
			class: "pr",
			size: IconSize.Medium,
			style: Object.assign({
				fill: theme.content_button,
				display: "block"
			}, style)
		});
	}
	renderRepeatRule(rule, isAllDay) {
		if (rule == null) return null;
		const frequency = formatRepetitionFrequency(rule);
		if (frequency) return mithril_default("", frequency + formatRepetitionEnd(rule, isAllDay));
else return mithril_default("", lang.get("unknownRepetition_msg"));
	}
	renderLocation(location) {
		if (location == null || location.trim().length === 0) return null;
		return this.renderRow(Icons.Pin, [mithril_default(".text-ellipsis.selectable", mithril_default(ExternalLink, {
			href: this.getLocationUrl(location.trim()).toString(),
			text: location,
			isCompanySite: false
		}))]);
	}
	renderAttendeesSection(attendees, participation) {
		if (attendees.length === 0) return null;
		return this.renderRow(Icons.People, [mithril_default(".flex-wrap", attendees.map((a) => this.renderAttendee(a, participation)))], true);
	}
	/**
	* if we're an attendee of this event, this renders a selector to be able to set our own attendance.
	* @param event if the event is not in a calendar, we don't want to set our attendance from here.
	* @param attendees list of attendees (including the organizer)
	* @param participation
	* @private
	*/
	renderAttendanceSection(event, attendees, participation) {
		if (attendees.length === 0 || participation == null || event._ownerGroup == null) return null;
		return mithril_default(".flex.pb-s", [this.renderSectionIndicator(BootIcons.Contacts), mithril_default(ReplyButtons, participation)]);
	}
	renderAttendee(attendee, participation) {
		const attendeeField = hasError(attendee.address) ? lang.get("corruptedValue_msg") : attendee.address.address;
		/** we might have a more current local attendance for ourselves. */
		const status = participation != null && cleanMailAddress(attendee.address.address) === participation.ownAttendee.address.address ? getAttendeeStatus(participation.ownAttendee) : getAttendeeStatus(attendee);
		return mithril_default(".flex.items-center", [mithril_default(Icon, {
			icon: iconForAttendeeStatus[status],
			style: { fill: theme.content_fg },
			class: "mr-s"
		}), mithril_default(".span.line-break-anywhere.selectable", attendeeField)]);
	}
	renderDescription(sanitizedDescription) {
		if (sanitizedDescription == null || sanitizedDescription.length === 0) return null;
		return this.renderRow(Icons.AlignLeft, [mithril_default.trust(sanitizedDescription)], true);
	}
};
function getLocationUrl(text) {
	const osmHref = `https://www.openstreetmap.org/search?query=${text}`;
	let url;
	try {
		url = new URL(text);
	} catch {
		url = new URL(osmHref);
	}
	return url;
}
function formatRepetitionFrequency(repeatRule) {
	if (repeatRule.interval === "1") {
		const frequency = createRepeatRuleFrequencyValues().find((frequency$1) => frequency$1.value === repeatRule.frequency);
		if (frequency) return frequency.name;
	} else return lang.get("repetition_msg", {
		"{interval}": repeatRule.interval,
		"{timeUnit}": getFrequencyTimeUnit(downcast(repeatRule.frequency))
	});
	return null;
}
function formatRepetitionEnd(repeatRule, isAllDay) {
	switch (repeatRule.endType) {
		case EndType.Count:
			if (!repeatRule.endValue) return "";
			return ", " + lang.get("times_msg", { "{amount}": repeatRule.endValue });
		case EndType.UntilDate: {
			const repeatEndTime = getRepeatEndTimeForDisplay(repeatRule, isAllDay, getTimeZone());
			return " " + lang.get("until_label") + " " + formatDateWithMonth(repeatEndTime);
		}
		default: return "";
	}
}
function getFrequencyTimeUnit(frequency) {
	switch (frequency) {
		case RepeatPeriod.DAILY: return lang.get("days_label");
		case RepeatPeriod.WEEKLY: return lang.get("weeks_label");
		case RepeatPeriod.MONTHLY: return lang.get("pricing.months_label");
		case RepeatPeriod.ANNUALLY: return lang.get("years_label");
		default: throw new Error("Unknown calendar event repeat rule frequency: " + frequency);
	}
}
function prepareAttendees(attendees, organizer) {
	const attendeesCopy = attendees.slice();
	if (organizer != null && attendeesCopy.length > 0 && !findAttendeeInAddresses(attendeesCopy, [organizer.address])) attendeesCopy.unshift(createCalendarEventAttendee({
		address: createEncryptedMailAddress({
			address: organizer.address,
			name: ""
		}),
		status: CalendarAttendeeStatus.ADDED
	}));
	return attendeesCopy;
}

//#endregion
export { EventPreviewView, ReplyButtons, formatRepetitionEnd, formatRepetitionFrequency, getLocationUrl };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,