import { downcast, groupByAndMap, last, pMap } from "./dist2-chunk.js";
import { CUSTOM_MIN_ID, GENERATED_MIN_ID, RANGE_ITEM_LIMIT, Type, ValueType, elementIdPart, firstBiggerThanSecond, getElementId, getLetId, listIdPart } from "./EntityUtils-chunk.js";
import { RootInstanceTypeRef } from "./TypeRefs2-chunk.js";
import { resolveTypeReference } from "./EntityFunctions-chunk.js";
import { NotAuthorizedError, NotFoundError } from "./RestError-chunk.js";

//#region src/common/api/common/EntityClient.ts
var EntityClient = class {
	_target;
	constructor(target) {
		this._target = target;
	}
	/**
	* Important: we can't pass functions through the bridge, so we can't pass ownerKeyProvider from the page context.
	*/
	load(typeRef, id, opts = {}) {
		return this._target.load(typeRef, id, opts);
	}
	async loadAll(typeRef, listId, start) {
		const typeModel = await resolveTypeReference(typeRef);
		if (!start) start = typeModel.values["_id"].type === ValueType.GeneratedId ? GENERATED_MIN_ID : CUSTOM_MIN_ID;
		const elements = await this.loadRange(typeRef, listId, start, RANGE_ITEM_LIMIT, false);
		if (elements.length === RANGE_ITEM_LIMIT) {
			let lastElementId = getLetId(elements[elements.length - 1])[1];
			const nextElements = await this.loadAll(typeRef, listId, lastElementId);
			return elements.concat(nextElements);
		} else return elements;
	}
	async loadReverseRangeBetween(typeRef, listId, start, end, rangeItemLimit = RANGE_ITEM_LIMIT) {
		const typeModel = await resolveTypeReference(typeRef);
		if (typeModel.type !== Type.ListElement) throw new Error("only ListElement types are permitted");
		const loadedEntities = await this._target.loadRange(typeRef, listId, start, rangeItemLimit, true);
		const filteredEntities = loadedEntities.filter((entity) => firstBiggerThanSecond(getElementId(entity), end, typeModel));
		if (filteredEntities.length === rangeItemLimit) {
			const lastElementId = getElementId(filteredEntities[loadedEntities.length - 1]);
			const { elements: remainingEntities, loadedCompletely } = await this.loadReverseRangeBetween(typeRef, listId, lastElementId, end, rangeItemLimit);
			return {
				elements: filteredEntities.concat(remainingEntities),
				loadedCompletely
			};
		} else return {
			elements: filteredEntities,
			loadedCompletely: wasReverseRangeCompletelyLoaded(rangeItemLimit, loadedEntities, filteredEntities)
		};
	}
	loadRange(typeRef, listId, start, count, reverse, opts = {}) {
		return this._target.loadRange(typeRef, listId, start, count, reverse, opts);
	}
	/**
	* load multiple does not guarantee order or completeness of returned elements.
	*/
	loadMultiple(typeRef, listId, elementIds, ownerEncSessionKeyProvider, opts = {}) {
		return this._target.loadMultiple(typeRef, listId, elementIds, ownerEncSessionKeyProvider, opts);
	}
	setup(listId, instance, extraHeaders, options) {
		return this._target.setup(listId, instance, extraHeaders, options);
	}
	setupMultipleEntities(listId, instances) {
		return this._target.setupMultiple(listId, instances);
	}
	update(instance, options) {
		return this._target.update(instance, options);
	}
	erase(instance, options) {
		return this._target.erase(instance, options);
	}
	async loadRoot(typeRef, groupId, opts = {}) {
		const typeModel = await resolveTypeReference(typeRef);
		const rootId = [groupId, typeModel.rootId];
		const root = await this.load(RootInstanceTypeRef, rootId, opts);
		return this.load(typeRef, downcast(root.reference), opts);
	}
};
function wasReverseRangeCompletelyLoaded(rangeItemLimit, loadedEntities, filteredEntities) {
	if (loadedEntities.length < rangeItemLimit) {
		const lastLoaded = last(loadedEntities);
		const lastFiltered = last(filteredEntities);
		if (!lastLoaded) return true;
		return lastLoaded === lastFiltered;
	}
	return false;
}
async function loadMultipleFromLists(type, entityClient, toLoad) {
	if (toLoad.length === 0) return [];
	const indexedEventIds = groupByAndMap(toLoad, listIdPart, elementIdPart);
	return (await pMap(indexedEventIds, async ([listId, elementIds]) => {
		try {
			return await entityClient.loadMultiple(type, listId, elementIds);
		} catch (e) {
			if (e instanceof NotFoundError || e instanceof NotAuthorizedError) {
				console.log(`could not load entities of type ${type} from list ${listId}: ${e.name}`);
				return [];
			} else throw e;
		}
	}, { concurrency: 3 })).flat();
}

//#endregion
export { EntityClient, loadMultipleFromLists };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50aXR5Q2xpZW50LWNodW5rLmpzIiwibmFtZXMiOlsidGFyZ2V0OiBFbnRpdHlSZXN0SW50ZXJmYWNlIiwidHlwZVJlZjogVHlwZVJlZjxUPiIsImlkOiBQcm9wZXJ0eVR5cGU8VCwgXCJfaWRcIj4iLCJvcHRzOiBFbnRpdHlSZXN0Q2xpZW50TG9hZE9wdGlvbnMiLCJsaXN0SWQ6IElkIiwic3RhcnQ/OiBJZCIsInN0YXJ0OiBJZCIsImVuZDogSWQiLCJyYW5nZUl0ZW1MaW1pdDogbnVtYmVyIiwiY291bnQ6IG51bWJlciIsInJldmVyc2U6IGJvb2xlYW4iLCJsaXN0SWQ6IElkIHwgbnVsbCIsImVsZW1lbnRJZHM6IElkW10iLCJvd25lckVuY1Nlc3Npb25LZXlQcm92aWRlcj86IE93bmVyRW5jU2Vzc2lvbktleVByb3ZpZGVyIiwiaW5zdGFuY2U6IFQiLCJleHRyYUhlYWRlcnM/OiBEaWN0Iiwib3B0aW9ucz86IEVudGl0eVJlc3RDbGllbnRTZXR1cE9wdGlvbnMiLCJpbnN0YW5jZXM6IFJlYWRvbmx5QXJyYXk8VD4iLCJvcHRpb25zPzogRW50aXR5UmVzdENsaWVudFVwZGF0ZU9wdGlvbnMiLCJvcHRpb25zPzogRW50aXR5UmVzdENsaWVudEVyYXNlT3B0aW9ucyIsImdyb3VwSWQ6IElkIiwibG9hZGVkRW50aXRpZXM6IEFycmF5PFQ+IiwiZmlsdGVyZWRFbnRpdGllczogQXJyYXk8VD4iLCJ0eXBlOiBUeXBlUmVmPFQ+IiwiZW50aXR5Q2xpZW50OiBFbnRpdHlDbGllbnQiLCJ0b0xvYWQ6IEFycmF5PElkVHVwbGU+Il0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9hcGkvY29tbW9uL0VudGl0eUNsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRFbnRpdHlSZXN0Q2xpZW50RXJhc2VPcHRpb25zLFxuXHRFbnRpdHlSZXN0Q2xpZW50TG9hZE9wdGlvbnMsXG5cdEVudGl0eVJlc3RDbGllbnRTZXR1cE9wdGlvbnMsXG5cdEVudGl0eVJlc3RDbGllbnRVcGRhdGVPcHRpb25zLFxuXHRFbnRpdHlSZXN0SW50ZXJmYWNlLFxuXHRPd25lckVuY1Nlc3Npb25LZXlQcm92aWRlcixcbn0gZnJvbSBcIi4uL3dvcmtlci9yZXN0L0VudGl0eVJlc3RDbGllbnRcIlxuaW1wb3J0IHR5cGUgeyBSb290SW5zdGFuY2UgfSBmcm9tIFwiLi4vZW50aXRpZXMvc3lzL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IFJvb3RJbnN0YW5jZVR5cGVSZWYgfSBmcm9tIFwiLi4vZW50aXRpZXMvc3lzL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7XG5cdENVU1RPTV9NSU5fSUQsXG5cdGVsZW1lbnRJZFBhcnQsXG5cdGZpcnN0QmlnZ2VyVGhhblNlY29uZCxcblx0R0VORVJBVEVEX01JTl9JRCxcblx0Z2V0RWxlbWVudElkLFxuXHRnZXRMZXRJZCxcblx0bGlzdElkUGFydCxcblx0UkFOR0VfSVRFTV9MSU1JVCxcbn0gZnJvbSBcIi4vdXRpbHMvRW50aXR5VXRpbHNcIlxuaW1wb3J0IHsgVHlwZSwgVmFsdWVUeXBlIH0gZnJvbSBcIi4vRW50aXR5Q29uc3RhbnRzLmpzXCJcbmltcG9ydCB7IGRvd25jYXN0LCBncm91cEJ5QW5kTWFwLCBsYXN0LCBwcm9taXNlTWFwLCBUeXBlUmVmIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5pbXBvcnQgeyByZXNvbHZlVHlwZVJlZmVyZW5jZSB9IGZyb20gXCIuL0VudGl0eUZ1bmN0aW9uc1wiXG5pbXBvcnQgdHlwZSB7IEVsZW1lbnRFbnRpdHksIExpc3RFbGVtZW50RW50aXR5LCBTb21lRW50aXR5IH0gZnJvbSBcIi4vRW50aXR5VHlwZXNcIlxuaW1wb3J0IHsgTm90QXV0aG9yaXplZEVycm9yLCBOb3RGb3VuZEVycm9yIH0gZnJvbSBcIi4vZXJyb3IvUmVzdEVycm9yLmpzXCJcblxuZXhwb3J0IGNsYXNzIEVudGl0eUNsaWVudCB7XG5cdF90YXJnZXQ6IEVudGl0eVJlc3RJbnRlcmZhY2VcblxuXHRjb25zdHJ1Y3Rvcih0YXJnZXQ6IEVudGl0eVJlc3RJbnRlcmZhY2UpIHtcblx0XHR0aGlzLl90YXJnZXQgPSB0YXJnZXRcblx0fVxuXG5cdC8qKlxuXHQgKiBJbXBvcnRhbnQ6IHdlIGNhbid0IHBhc3MgZnVuY3Rpb25zIHRocm91Z2ggdGhlIGJyaWRnZSwgc28gd2UgY2FuJ3QgcGFzcyBvd25lcktleVByb3ZpZGVyIGZyb20gdGhlIHBhZ2UgY29udGV4dC5cblx0ICovXG5cdGxvYWQ8VCBleHRlbmRzIFNvbWVFbnRpdHk+KHR5cGVSZWY6IFR5cGVSZWY8VD4sIGlkOiBQcm9wZXJ0eVR5cGU8VCwgXCJfaWRcIj4sIG9wdHM6IEVudGl0eVJlc3RDbGllbnRMb2FkT3B0aW9ucyA9IHt9KTogUHJvbWlzZTxUPiB7XG5cdFx0cmV0dXJuIHRoaXMuX3RhcmdldC5sb2FkKHR5cGVSZWYsIGlkLCBvcHRzKVxuXHR9XG5cblx0YXN5bmMgbG9hZEFsbDxUIGV4dGVuZHMgTGlzdEVsZW1lbnRFbnRpdHk+KHR5cGVSZWY6IFR5cGVSZWY8VD4sIGxpc3RJZDogSWQsIHN0YXJ0PzogSWQpOiBQcm9taXNlPFRbXT4ge1xuXHRcdGNvbnN0IHR5cGVNb2RlbCA9IGF3YWl0IHJlc29sdmVUeXBlUmVmZXJlbmNlKHR5cGVSZWYpXG5cblx0XHRpZiAoIXN0YXJ0KSB7XG5cdFx0XHRzdGFydCA9IHR5cGVNb2RlbC52YWx1ZXNbXCJfaWRcIl0udHlwZSA9PT0gVmFsdWVUeXBlLkdlbmVyYXRlZElkID8gR0VORVJBVEVEX01JTl9JRCA6IENVU1RPTV9NSU5fSURcblx0XHR9XG5cblx0XHRjb25zdCBlbGVtZW50cyA9IGF3YWl0IHRoaXMubG9hZFJhbmdlPFQ+KHR5cGVSZWYsIGxpc3RJZCwgc3RhcnQsIFJBTkdFX0lURU1fTElNSVQsIGZhbHNlKVxuXHRcdGlmIChlbGVtZW50cy5sZW5ndGggPT09IFJBTkdFX0lURU1fTElNSVQpIHtcblx0XHRcdGxldCBsYXN0RWxlbWVudElkID0gZ2V0TGV0SWQoZWxlbWVudHNbZWxlbWVudHMubGVuZ3RoIC0gMV0pWzFdXG5cdFx0XHRjb25zdCBuZXh0RWxlbWVudHMgPSBhd2FpdCB0aGlzLmxvYWRBbGw8VD4odHlwZVJlZiwgbGlzdElkLCBsYXN0RWxlbWVudElkKVxuXHRcdFx0cmV0dXJuIGVsZW1lbnRzLmNvbmNhdChuZXh0RWxlbWVudHMpXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBlbGVtZW50c1xuXHRcdH1cblx0fVxuXG5cdGFzeW5jIGxvYWRSZXZlcnNlUmFuZ2VCZXR3ZWVuPFQgZXh0ZW5kcyBMaXN0RWxlbWVudEVudGl0eT4oXG5cdFx0dHlwZVJlZjogVHlwZVJlZjxUPixcblx0XHRsaXN0SWQ6IElkLFxuXHRcdHN0YXJ0OiBJZCxcblx0XHRlbmQ6IElkLFxuXHRcdHJhbmdlSXRlbUxpbWl0OiBudW1iZXIgPSBSQU5HRV9JVEVNX0xJTUlULFxuXHQpOiBQcm9taXNlPHtcblx0XHRlbGVtZW50czogVFtdXG5cdFx0bG9hZGVkQ29tcGxldGVseTogYm9vbGVhblxuXHR9PiB7XG5cdFx0Y29uc3QgdHlwZU1vZGVsID0gYXdhaXQgcmVzb2x2ZVR5cGVSZWZlcmVuY2UodHlwZVJlZilcblx0XHRpZiAodHlwZU1vZGVsLnR5cGUgIT09IFR5cGUuTGlzdEVsZW1lbnQpIHRocm93IG5ldyBFcnJvcihcIm9ubHkgTGlzdEVsZW1lbnQgdHlwZXMgYXJlIHBlcm1pdHRlZFwiKVxuXHRcdGNvbnN0IGxvYWRlZEVudGl0aWVzID0gYXdhaXQgdGhpcy5fdGFyZ2V0LmxvYWRSYW5nZTxUPih0eXBlUmVmLCBsaXN0SWQsIHN0YXJ0LCByYW5nZUl0ZW1MaW1pdCwgdHJ1ZSlcblx0XHRjb25zdCBmaWx0ZXJlZEVudGl0aWVzID0gbG9hZGVkRW50aXRpZXMuZmlsdGVyKChlbnRpdHkpID0+IGZpcnN0QmlnZ2VyVGhhblNlY29uZChnZXRFbGVtZW50SWQoZW50aXR5KSwgZW5kLCB0eXBlTW9kZWwpKVxuXG5cdFx0aWYgKGZpbHRlcmVkRW50aXRpZXMubGVuZ3RoID09PSByYW5nZUl0ZW1MaW1pdCkge1xuXHRcdFx0Y29uc3QgbGFzdEVsZW1lbnRJZCA9IGdldEVsZW1lbnRJZChmaWx0ZXJlZEVudGl0aWVzW2xvYWRlZEVudGl0aWVzLmxlbmd0aCAtIDFdKVxuXHRcdFx0Y29uc3QgeyBlbGVtZW50czogcmVtYWluaW5nRW50aXRpZXMsIGxvYWRlZENvbXBsZXRlbHkgfSA9IGF3YWl0IHRoaXMubG9hZFJldmVyc2VSYW5nZUJldHdlZW48VD4odHlwZVJlZiwgbGlzdElkLCBsYXN0RWxlbWVudElkLCBlbmQsIHJhbmdlSXRlbUxpbWl0KVxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZWxlbWVudHM6IGZpbHRlcmVkRW50aXRpZXMuY29uY2F0KHJlbWFpbmluZ0VudGl0aWVzKSxcblx0XHRcdFx0bG9hZGVkQ29tcGxldGVseSxcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZWxlbWVudHM6IGZpbHRlcmVkRW50aXRpZXMsXG5cdFx0XHRcdGxvYWRlZENvbXBsZXRlbHk6IHdhc1JldmVyc2VSYW5nZUNvbXBsZXRlbHlMb2FkZWQocmFuZ2VJdGVtTGltaXQsIGxvYWRlZEVudGl0aWVzLCBmaWx0ZXJlZEVudGl0aWVzKSxcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRsb2FkUmFuZ2U8VCBleHRlbmRzIExpc3RFbGVtZW50RW50aXR5Pihcblx0XHR0eXBlUmVmOiBUeXBlUmVmPFQ+LFxuXHRcdGxpc3RJZDogSWQsXG5cdFx0c3RhcnQ6IElkLFxuXHRcdGNvdW50OiBudW1iZXIsXG5cdFx0cmV2ZXJzZTogYm9vbGVhbixcblx0XHRvcHRzOiBFbnRpdHlSZXN0Q2xpZW50TG9hZE9wdGlvbnMgPSB7fSxcblx0KTogUHJvbWlzZTxUW10+IHtcblx0XHRyZXR1cm4gdGhpcy5fdGFyZ2V0LmxvYWRSYW5nZSh0eXBlUmVmLCBsaXN0SWQsIHN0YXJ0LCBjb3VudCwgcmV2ZXJzZSwgb3B0cylcblx0fVxuXG5cdC8qKlxuXHQgKiBsb2FkIG11bHRpcGxlIGRvZXMgbm90IGd1YXJhbnRlZSBvcmRlciBvciBjb21wbGV0ZW5lc3Mgb2YgcmV0dXJuZWQgZWxlbWVudHMuXG5cdCAqL1xuXHRsb2FkTXVsdGlwbGU8VCBleHRlbmRzIFNvbWVFbnRpdHk+KFxuXHRcdHR5cGVSZWY6IFR5cGVSZWY8VD4sXG5cdFx0bGlzdElkOiBJZCB8IG51bGwsXG5cdFx0ZWxlbWVudElkczogSWRbXSxcblx0XHRvd25lckVuY1Nlc3Npb25LZXlQcm92aWRlcj86IE93bmVyRW5jU2Vzc2lvbktleVByb3ZpZGVyLFxuXHRcdG9wdHM6IEVudGl0eVJlc3RDbGllbnRMb2FkT3B0aW9ucyA9IHt9LFxuXHQpOiBQcm9taXNlPFRbXT4ge1xuXHRcdHJldHVybiB0aGlzLl90YXJnZXQubG9hZE11bHRpcGxlKHR5cGVSZWYsIGxpc3RJZCwgZWxlbWVudElkcywgb3duZXJFbmNTZXNzaW9uS2V5UHJvdmlkZXIsIG9wdHMpXG5cdH1cblxuXHRzZXR1cDxUIGV4dGVuZHMgU29tZUVudGl0eT4obGlzdElkOiBJZCB8IG51bGwsIGluc3RhbmNlOiBULCBleHRyYUhlYWRlcnM/OiBEaWN0LCBvcHRpb25zPzogRW50aXR5UmVzdENsaWVudFNldHVwT3B0aW9ucyk6IFByb21pc2U8SWQ+IHtcblx0XHRyZXR1cm4gdGhpcy5fdGFyZ2V0LnNldHVwKGxpc3RJZCwgaW5zdGFuY2UsIGV4dHJhSGVhZGVycywgb3B0aW9ucylcblx0fVxuXG5cdHNldHVwTXVsdGlwbGVFbnRpdGllczxUIGV4dGVuZHMgU29tZUVudGl0eT4obGlzdElkOiBJZCB8IG51bGwsIGluc3RhbmNlczogUmVhZG9ubHlBcnJheTxUPik6IFByb21pc2U8QXJyYXk8SWQ+PiB7XG5cdFx0cmV0dXJuIHRoaXMuX3RhcmdldC5zZXR1cE11bHRpcGxlKGxpc3RJZCwgaW5zdGFuY2VzKVxuXHR9XG5cblx0dXBkYXRlPFQgZXh0ZW5kcyBTb21lRW50aXR5PihpbnN0YW5jZTogVCwgb3B0aW9ucz86IEVudGl0eVJlc3RDbGllbnRVcGRhdGVPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0cmV0dXJuIHRoaXMuX3RhcmdldC51cGRhdGUoaW5zdGFuY2UsIG9wdGlvbnMpXG5cdH1cblxuXHRlcmFzZTxUIGV4dGVuZHMgU29tZUVudGl0eT4oaW5zdGFuY2U6IFQsIG9wdGlvbnM/OiBFbnRpdHlSZXN0Q2xpZW50RXJhc2VPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0cmV0dXJuIHRoaXMuX3RhcmdldC5lcmFzZShpbnN0YW5jZSwgb3B0aW9ucylcblx0fVxuXG5cdGFzeW5jIGxvYWRSb290PFQgZXh0ZW5kcyBFbGVtZW50RW50aXR5Pih0eXBlUmVmOiBUeXBlUmVmPFQ+LCBncm91cElkOiBJZCwgb3B0czogRW50aXR5UmVzdENsaWVudExvYWRPcHRpb25zID0ge30pOiBQcm9taXNlPFQ+IHtcblx0XHRjb25zdCB0eXBlTW9kZWwgPSBhd2FpdCByZXNvbHZlVHlwZVJlZmVyZW5jZSh0eXBlUmVmKVxuXHRcdGNvbnN0IHJvb3RJZCA9IFtncm91cElkLCB0eXBlTW9kZWwucm9vdElkXSBhcyBjb25zdFxuXHRcdGNvbnN0IHJvb3QgPSBhd2FpdCB0aGlzLmxvYWQ8Um9vdEluc3RhbmNlPihSb290SW5zdGFuY2VUeXBlUmVmLCByb290SWQsIG9wdHMpXG5cdFx0cmV0dXJuIHRoaXMubG9hZDxUPih0eXBlUmVmLCBkb3duY2FzdChyb290LnJlZmVyZW5jZSksIG9wdHMpXG5cdH1cbn1cblxuZnVuY3Rpb24gd2FzUmV2ZXJzZVJhbmdlQ29tcGxldGVseUxvYWRlZDxUIGV4dGVuZHMgTGlzdEVsZW1lbnRFbnRpdHk+KHJhbmdlSXRlbUxpbWl0OiBudW1iZXIsIGxvYWRlZEVudGl0aWVzOiBBcnJheTxUPiwgZmlsdGVyZWRFbnRpdGllczogQXJyYXk8VD4pOiBib29sZWFuIHtcblx0aWYgKGxvYWRlZEVudGl0aWVzLmxlbmd0aCA8IHJhbmdlSXRlbUxpbWl0KSB7XG5cdFx0Y29uc3QgbGFzdExvYWRlZCA9IGxhc3QobG9hZGVkRW50aXRpZXMpXG5cdFx0Y29uc3QgbGFzdEZpbHRlcmVkID0gbGFzdChmaWx0ZXJlZEVudGl0aWVzKVxuXG5cdFx0aWYgKCFsYXN0TG9hZGVkKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdH1cblxuXHRcdHJldHVybiBsYXN0TG9hZGVkID09PSBsYXN0RmlsdGVyZWRcblx0fVxuXG5cdHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIGxvYWQgbXVsdGlwbGUgaW5zdGFuY2VzIG9mIHRoZSBzYW1lIHR5cGUgY29uY3VycmVudGx5IGZyb20gbXVsdGlwbGUgbGlzdHMgdXNpbmdcbiAqIG9uZSByZXF1ZXN0IHBlciBsaXN0IGlmIHBvc3NpYmxlXG4gKlxuICogQHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHRoZSBpbnN0YW5jZXMgZXhjbHVkaW5nIHRoZSBvbmVzIHRocm93aW5nIE5vdEZvdW5kRXJyb3Igb3IgTm90QXV0aG9yaXplZEVycm9yLCBpbiBhcmJpdHJhcnkgb3JkZXIuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkTXVsdGlwbGVGcm9tTGlzdHM8VCBleHRlbmRzIExpc3RFbGVtZW50RW50aXR5Pihcblx0dHlwZTogVHlwZVJlZjxUPixcblx0ZW50aXR5Q2xpZW50OiBFbnRpdHlDbGllbnQsXG5cdHRvTG9hZDogQXJyYXk8SWRUdXBsZT4sXG4pOiBQcm9taXNlPEFycmF5PFQ+PiB7XG5cdGlmICh0b0xvYWQubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIFtdXG5cdH1cblx0Y29uc3QgaW5kZXhlZEV2ZW50SWRzID0gZ3JvdXBCeUFuZE1hcDxJZFR1cGxlLCBJZCwgSWQ+KHRvTG9hZCwgbGlzdElkUGFydCwgZWxlbWVudElkUGFydClcblxuXHRyZXR1cm4gKFxuXHRcdGF3YWl0IHByb21pc2VNYXAoXG5cdFx0XHRpbmRleGVkRXZlbnRJZHMsXG5cdFx0XHRhc3luYyAoW2xpc3RJZCwgZWxlbWVudElkc10pID0+IHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRyZXR1cm4gYXdhaXQgZW50aXR5Q2xpZW50LmxvYWRNdWx0aXBsZSh0eXBlLCBsaXN0SWQsIGVsZW1lbnRJZHMpXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHQvLyB0aGVzZSBhcmUgdGhyb3duIGlmIHRoZSBsaXN0IGl0c2VsZiBpcyBpbmFjY2Vzc2libGUuIGVsZW1lbnRzIHdpbGwganVzdCBiZSBtaXNzaW5nXG5cdFx0XHRcdFx0Ly8gaW4gdGhlIGxvYWRNdWx0aXBsZSByZXN1bHQuXG5cdFx0XHRcdFx0aWYgKGUgaW5zdGFuY2VvZiBOb3RGb3VuZEVycm9yIHx8IGUgaW5zdGFuY2VvZiBOb3RBdXRob3JpemVkRXJyb3IpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGBjb3VsZCBub3QgbG9hZCBlbnRpdGllcyBvZiB0eXBlICR7dHlwZX0gZnJvbSBsaXN0ICR7bGlzdElkfTogJHtlLm5hbWV9YClcblx0XHRcdFx0XHRcdHJldHVybiBbXVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0eyBjb25jdXJyZW5jeTogMyB9LFxuXHRcdClcblx0KS5mbGF0KClcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztJQTBCYSxlQUFOLE1BQW1CO0NBQ3pCO0NBRUEsWUFBWUEsUUFBNkI7QUFDeEMsT0FBSyxVQUFVO0NBQ2Y7Ozs7Q0FLRCxLQUEyQkMsU0FBcUJDLElBQTRCQyxPQUFvQyxDQUFFLEdBQWM7QUFDL0gsU0FBTyxLQUFLLFFBQVEsS0FBSyxTQUFTLElBQUksS0FBSztDQUMzQztDQUVELE1BQU0sUUFBcUNGLFNBQXFCRyxRQUFZQyxPQUEwQjtFQUNyRyxNQUFNLFlBQVksTUFBTSxxQkFBcUIsUUFBUTtBQUVyRCxPQUFLLE1BQ0osU0FBUSxVQUFVLE9BQU8sT0FBTyxTQUFTLFVBQVUsY0FBYyxtQkFBbUI7RUFHckYsTUFBTSxXQUFXLE1BQU0sS0FBSyxVQUFhLFNBQVMsUUFBUSxPQUFPLGtCQUFrQixNQUFNO0FBQ3pGLE1BQUksU0FBUyxXQUFXLGtCQUFr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