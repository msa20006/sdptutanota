import { arrayEquals, assertNotNull, defer } from "./dist2-chunk.js";

//#region src/common/api/main/PageContextLoginListener.ts
let LoginFailReason = function(LoginFailReason$1) {
	LoginFailReason$1[LoginFailReason$1["SessionExpired"] = 0] = "SessionExpired";
	LoginFailReason$1[LoginFailReason$1["Error"] = 1] = "Error";
	return LoginFailReason$1;
}({});
var PageContextLoginListener = class {
	loginPromise = defer();
	fullLoginFailed = false;
	constructor(secondFactorHandler, credentialsProvider) {
		this.secondFactorHandler = secondFactorHandler;
		this.credentialsProvider = credentialsProvider;
	}
	/** e.g. after temp logout */
	reset() {
		this.loginPromise = defer();
		this.fullLoginFailed = false;
	}
	waitForFullLogin() {
		return this.loginPromise.promise;
	}
	/**
	* Full login reached: any network requests can be made
	*/
	async onFullLoginSuccess(_sessionType, _cacheInfo, credentials) {
		this.fullLoginFailed = false;
		const persistedCredentials = (await this.credentialsProvider.getAllInternalCredentials()).find((a) => a.credentialInfo.userId === credentials.userId);
		if (persistedCredentials != null && this.isPassphraseKeyUpdatedNeeded(persistedCredentials, credentials)) await this.credentialsProvider.replacePassword(persistedCredentials.credentialInfo, assertNotNull(credentials.encryptedPassword), assertNotNull(credentials.encryptedPassphraseKey));
		this.loginPromise.resolve();
	}
	/**
	* It is possible that a KDF migration was executed by a different client. This would change the passphrase key, so we need to check if we have to update the stored one.
	* @private
	*/
	isPassphraseKeyUpdatedNeeded(persistedCredentials, credentials) {
		const persistedEncryptedPassphraseKey = persistedCredentials.encryptedPassphraseKey;
		const credentialsEncryptedPassphraseKey = credentials.encryptedPassphraseKey;
		if (persistedCredentials.encryptedPassword != credentials.encryptedPassword) return false;
		if (persistedEncryptedPassphraseKey != null && credentialsEncryptedPassphraseKey != null) return !arrayEquals(persistedEncryptedPassphraseKey, credentialsEncryptedPassphraseKey);
else if (persistedEncryptedPassphraseKey == null && credentialsEncryptedPassphraseKey == null) return false;
else return true;
	}
	/**
	* call when the login fails for invalid session or other reasons
	*/
	async onLoginFailure(reason) {
		this.fullLoginFailed = true;
		if (reason === LoginFailReason.SessionExpired) {
			const { reloginForExpiredSession } = await import("./ErrorHandlerImpl2-chunk.js");
			await reloginForExpiredSession();
		}
	}
	/**
	* call when retrying full login
	*/
	onRetryLogin() {
		this.fullLoginFailed = false;
	}
	/**
	* Shows a dialog with possibility to use second factor and with a message that the login can be approved from another client.
	*/
	onSecondFactorChallenge(sessionId, challenges, mailAddress) {
		return this.secondFactorHandler.showSecondFactorAuthenticationDialog(sessionId, challenges, mailAddress);
	}
	/**
	* true if the last full login attempt failed
	* may revert to false when retrying.
	*/
	getFullLoginFailed() {
		return this.fullLoginFailed;
	}
};

//#endregion
export { LoginFailReason, PageContextLoginListener };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,