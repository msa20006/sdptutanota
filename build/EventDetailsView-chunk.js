import { mithril_default } from "./mithril-chunk.js";
import { styles } from "./styles-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { Dialog, createAsyncDropdown } from "./Dialog-chunk.js";
import { BootIcons } from "./Icon-chunk.js";
import { IconButton } from "./IconButton-chunk.js";
import { EventPreviewView } from "./EventPreviewView-chunk.js";

//#region src/calendar-app/calendar/view/EventDetailsView.ts
var EventDetailsView = class {
	model = null;
	view({ attrs }) {
		this.model = attrs.eventPreviewModel;
		return mithril_default(".content-bg.border-radius-big.pl-l.pb-s.flex.pr", [mithril_default(".flex-grow", { style: { paddingTop: "6px" } }, mithril_default(EventPreviewView, {
			event: this.model.calendarEvent,
			sanitizedDescription: this.model.getSanitizedDescription(),
			participation: this.model.getParticipationSetterAndThen(() => null)
		})), mithril_default(".flex.mt-xs", [
			this.renderSendUpdateButton(),
			this.renderEditButton(),
			this.renderDeleteButton()
		])]);
	}
	renderEditButton() {
		if (this.model == null || !this.model.canEdit || styles.isSingleColumnLayout()) return null;
		return mithril_default(IconButton, {
			title: "edit_action",
			icon: Icons.Edit,
			click: (event, dom) => handleEventEditButtonClick(this.model, event, dom)
		});
	}
	renderDeleteButton() {
		if (this.model == null || !this.model.canDelete || styles.isSingleColumnLayout()) return null;
		return mithril_default(IconButton, {
			title: "delete_action",
			icon: Icons.Trash,
			click: (event, dom) => handleEventDeleteButtonClick(this.model, event, dom)
		});
	}
	renderSendUpdateButton() {
		if (this.model == null || !this.model.canSendUpdates || styles.isSingleColumnLayout()) return null;
		return mithril_default(IconButton, {
			title: "sendUpdates_label",
			click: () => handleSendUpdatesClick(this.model),
			icon: BootIcons.Mail
		});
	}
	async confirmDeleteClose() {
		if (!await Dialog.confirm("deleteEventConfirmation_msg")) return;
		await this.model?.deleteAll();
	}
};
async function handleSendUpdatesClick(previewModel) {
	const confirmed = await Dialog.confirm("sendUpdates_msg");
	if (confirmed) await previewModel?.sendUpdates();
}
function handleEventEditButtonClick(previewModel, ev, receiver) {
	if (previewModel?.isRepeatingForEditing) createAsyncDropdown({
		lazyButtons: () => Promise.resolve([{
			label: "updateOneCalendarEvent_action",
			click: () => {
				previewModel?.editSingle();
			}
		}, {
			label: "updateAllCalendarEvents_action",
			click: () => {
				previewModel?.editAll();
			}
		}]),
		width: 300
	})(ev, receiver);
else previewModel?.editAll();
}
async function handleEventDeleteButtonClick(previewModel, ev, receiver) {
	if (await previewModel?.isRepeatingForDeleting()) createAsyncDropdown({
		lazyButtons: () => Promise.resolve([{
			label: "deleteSingleEventRecurrence_action",
			click: async () => {
				await previewModel?.deleteSingle();
			}
		}, {
			label: "deleteAllEventRecurrence_action",
			click: () => confirmDeleteClose(previewModel)
		}]),
		width: 300
	})(ev, receiver);
else confirmDeleteClose(previewModel);
}
async function confirmDeleteClose(previewModel) {
	if (!await Dialog.confirm("deleteEventConfirmation_msg")) return;
	await previewModel?.deleteAll();
}

//#endregion
export { EventDetailsView, handleEventDeleteButtonClick, handleEventEditButtonClick, handleSendUpdatesClick };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnREZXRhaWxzVmlldy1jaHVuay5qcyIsIm5hbWVzIjpbInByZXZpZXdNb2RlbDogQ2FsZW5kYXJFdmVudFByZXZpZXdWaWV3TW9kZWwgfCBudWxsIiwiZXY6IE1vdXNlRXZlbnQiLCJyZWNlaXZlcjogSFRNTEVsZW1lbnQiXSwic291cmNlcyI6WyIuLi9zcmMvY2FsZW5kYXItYXBwL2NhbGVuZGFyL3ZpZXcvRXZlbnREZXRhaWxzVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbSwgeyBDaGlsZHJlbiwgQ29tcG9uZW50LCBWbm9kZSB9IGZyb20gXCJtaXRocmlsXCJcbmltcG9ydCB7IEljb25CdXR0b24sIEljb25CdXR0b25BdHRycyB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vZ3VpL2Jhc2UvSWNvbkJ1dHRvbi5qc1wiXG5pbXBvcnQgeyBJY29ucyB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vZ3VpL2Jhc2UvaWNvbnMvSWNvbnMuanNcIlxuaW1wb3J0IHsgQnV0dG9uLCBCdXR0b25Db2xvciwgQnV0dG9uVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vZ3VpL2Jhc2UvQnV0dG9uLmpzXCJcbmltcG9ydCB7IEJvb3RJY29ucyB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vZ3VpL2Jhc2UvaWNvbnMvQm9vdEljb25zLmpzXCJcbmltcG9ydCB7IEV2ZW50UHJldmlld1ZpZXcgfSBmcm9tIFwiLi4vZ3VpL2V2ZW50cG9wdXAvRXZlbnRQcmV2aWV3Vmlldy5qc1wiXG5pbXBvcnQgeyBjcmVhdGVBc3luY0Ryb3Bkb3duIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9ndWkvYmFzZS9Ecm9wZG93bi5qc1wiXG5pbXBvcnQgeyBEaWFsb2cgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2d1aS9iYXNlL0RpYWxvZy5qc1wiXG5pbXBvcnQgeyBDYWxlbmRhckV2ZW50UHJldmlld1ZpZXdNb2RlbCB9IGZyb20gXCIuLi9ndWkvZXZlbnRwb3B1cC9DYWxlbmRhckV2ZW50UHJldmlld1ZpZXdNb2RlbC5qc1wiXG5pbXBvcnQgeyBzdHlsZXMgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2d1aS9zdHlsZXMuanNcIlxuaW1wb3J0IHsgQ2FsZW5kYXJQcmV2aWV3TW9kZWxzIH0gZnJvbSBcIi4vQ2FsZW5kYXJWaWV3TW9kZWwuanNcIlxuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50RGV0YWlsc1ZpZXdBdHRycyB7XG5cdGV2ZW50UHJldmlld01vZGVsOiBDYWxlbmRhckV2ZW50UHJldmlld1ZpZXdNb2RlbFxufVxuXG5leHBvcnQgY2xhc3MgRXZlbnREZXRhaWxzVmlldyBpbXBsZW1lbnRzIENvbXBvbmVudDxFdmVudERldGFpbHNWaWV3QXR0cnM+IHtcblx0cHJpdmF0ZSBtb2RlbDogQ2FsZW5kYXJFdmVudFByZXZpZXdWaWV3TW9kZWwgfCBudWxsID0gbnVsbFxuXG5cdHZpZXcoeyBhdHRycyB9OiBWbm9kZTxFdmVudERldGFpbHNWaWV3QXR0cnM+KSB7XG5cdFx0dGhpcy5tb2RlbCA9IGF0dHJzLmV2ZW50UHJldmlld01vZGVsXG5cdFx0cmV0dXJuIG0oXCIuY29udGVudC1iZy5ib3JkZXItcmFkaXVzLWJpZy5wbC1sLnBiLXMuZmxleC5wclwiLCBbXG5cdFx0XHRtKFxuXHRcdFx0XHRcIi5mbGV4LWdyb3dcIixcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHQvLyBhbGlnbiB0ZXh0IHRvIHRoZSBidXR0b25zIG9uIHRoZSByaWdodFxuXHRcdFx0XHRcdFx0cGFkZGluZ1RvcDogXCI2cHhcIixcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRtKEV2ZW50UHJldmlld1ZpZXcsIHtcblx0XHRcdFx0XHRldmVudDogdGhpcy5tb2RlbC5jYWxlbmRhckV2ZW50LFxuXHRcdFx0XHRcdHNhbml0aXplZERlc2NyaXB0aW9uOiB0aGlzLm1vZGVsLmdldFNhbml0aXplZERlc2NyaXB0aW9uKCksXG5cdFx0XHRcdFx0cGFydGljaXBhdGlvbjogdGhpcy5tb2RlbC5nZXRQYXJ0aWNpcGF0aW9uU2V0dGVyQW5kVGhlbigoKSA9PiBudWxsKSxcblx0XHRcdFx0fSksXG5cdFx0XHQpLFxuXHRcdFx0bShcIi5mbGV4Lm10LXhzXCIsIFt0aGlzLnJlbmRlclNlbmRVcGRhdGVCdXR0b24oKSwgdGhpcy5yZW5kZXJFZGl0QnV0dG9uKCksIHRoaXMucmVuZGVyRGVsZXRlQnV0dG9uKCldKSxcblx0XHRdKVxuXHR9XG5cblx0cHJpdmF0ZSByZW5kZXJFZGl0QnV0dG9uKCk6IENoaWxkcmVuIHtcblx0XHRpZiAodGhpcy5tb2RlbCA9PSBudWxsIHx8ICF0aGlzLm1vZGVsLmNhbkVkaXQgfHwgc3R5bGVzLmlzU2luZ2xlQ29sdW1uTGF5b3V0KCkpIHJldHVybiBudWxsXG5cdFx0cmV0dXJuIG0oSWNvbkJ1dHRvbiwge1xuXHRcdFx0dGl0bGU6IFwiZWRpdF9hY3Rpb25cIixcblx0XHRcdGljb246IEljb25zLkVkaXQsXG5cdFx0XHRjbGljazogKGV2ZW50LCBkb20pID0+IGhhbmRsZUV2ZW50RWRpdEJ1dHRvbkNsaWNrKHRoaXMubW9kZWwsIGV2ZW50LCBkb20pLFxuXHRcdH0pXG5cdH1cblxuXHRwcml2YXRlIHJlbmRlckRlbGV0ZUJ1dHRvbigpOiBDaGlsZHJlbiB7XG5cdFx0aWYgKHRoaXMubW9kZWwgPT0gbnVsbCB8fCAhdGhpcy5tb2RlbC5jYW5EZWxldGUgfHwgc3R5bGVzLmlzU2luZ2xlQ29sdW1uTGF5b3V0KCkpIHJldHVybiBudWxsXG5cdFx0cmV0dXJuIG0oSWNvbkJ1dHRvbiwge1xuXHRcdFx0dGl0bGU6IFwiZGVsZXRlX2FjdGlvblwiLFxuXHRcdFx0aWNvbjogSWNvbnMuVHJhc2gsXG5cdFx0XHRjbGljazogKGV2ZW50LCBkb20pID0+IGhhbmRsZUV2ZW50RGVsZXRlQnV0dG9uQ2xpY2sodGhpcy5tb2RlbCwgZXZlbnQsIGRvbSksXG5cdFx0fSlcblx0fVxuXG5cdHByaXZhdGUgcmVuZGVyU2VuZFVwZGF0ZUJ1dHRvbigpOiBDaGlsZHJlbiB7XG5cdFx0aWYgKHRoaXMubW9kZWwgPT0gbnVsbCB8fCAhdGhpcy5tb2RlbC5jYW5TZW5kVXBkYXRlcyB8fCBzdHlsZXMuaXNTaW5nbGVDb2x1bW5MYXlvdXQoKSkgcmV0dXJuIG51bGxcblx0XHRyZXR1cm4gbShJY29uQnV0dG9uLCB7XG5cdFx0XHR0aXRsZTogXCJzZW5kVXBkYXRlc19sYWJlbFwiLFxuXHRcdFx0Y2xpY2s6ICgpID0+IGhhbmRsZVNlbmRVcGRhdGVzQ2xpY2sodGhpcy5tb2RlbCksXG5cdFx0XHRpY29uOiBCb290SWNvbnMuTWFpbCxcblx0XHR9KVxuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBjb25maXJtRGVsZXRlQ2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0aWYgKCEoYXdhaXQgRGlhbG9nLmNvbmZpcm0oXCJkZWxldGVFdmVudENvbmZpcm1hdGlvbl9tc2dcIikpKSByZXR1cm5cblx0XHRhd2FpdCB0aGlzLm1vZGVsPy5kZWxldGVBbGwoKVxuXHR9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVTZW5kVXBkYXRlc0NsaWNrKHByZXZpZXdNb2RlbDogQ2FsZW5kYXJFdmVudFByZXZpZXdWaWV3TW9kZWwgfCBudWxsKSB7XG5cdGNvbnN0IGNvbmZpcm1lZCA9IGF3YWl0IERpYWxvZy5jb25maXJtKFwic2VuZFVwZGF0ZXNfbXNnXCIpXG5cdGlmIChjb25maXJtZWQpIGF3YWl0IHByZXZpZXdNb2RlbD8uc2VuZFVwZGF0ZXMoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRXZlbnRFZGl0QnV0dG9uQ2xpY2socHJldmlld01vZGVsOiBDYWxlbmRhckV2ZW50UHJldmlld1ZpZXdNb2RlbCB8IG51bGwsIGV2OiBNb3VzZUV2ZW50LCByZWNlaXZlcjogSFRNTEVsZW1lbnQpIHtcblx0aWYgKHByZXZpZXdNb2RlbD8uaXNSZXBlYXRpbmdGb3JFZGl0aW5nKSB7XG5cdFx0Y3JlYXRlQXN5bmNEcm9wZG93bih7XG5cdFx0XHRsYXp5QnV0dG9uczogKCkgPT5cblx0XHRcdFx0UHJvbWlzZS5yZXNvbHZlKFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsYWJlbDogXCJ1cGRhdGVPbmVDYWxlbmRhckV2ZW50X2FjdGlvblwiLFxuXHRcdFx0XHRcdFx0Y2xpY2s6ICgpID0+IHtcblx0XHRcdFx0XHRcdFx0Ly8gbm9pbnNwZWN0aW9uIEpTSWdub3JlZFByb21pc2VGcm9tQ2FsbFxuXHRcdFx0XHRcdFx0XHRwcmV2aWV3TW9kZWw/LmVkaXRTaW5nbGUoKVxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiBcInVwZGF0ZUFsbENhbGVuZGFyRXZlbnRzX2FjdGlvblwiLFxuXHRcdFx0XHRcdFx0Y2xpY2s6ICgpID0+IHtcblx0XHRcdFx0XHRcdFx0Ly8gbm9pbnNwZWN0aW9uIEpTSWdub3JlZFByb21pc2VGcm9tQ2FsbFxuXHRcdFx0XHRcdFx0XHRwcmV2aWV3TW9kZWw/LmVkaXRBbGwoKVxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdKSxcblx0XHRcdHdpZHRoOiAzMDAsXG5cdFx0fSkoZXYsIHJlY2VpdmVyKVxuXHR9IGVsc2Uge1xuXHRcdC8vIG5vaW5zcGVjdGlvbiBKU0lnbm9yZWRQcm9taXNlRnJvbUNhbGxcblx0XHRwcmV2aWV3TW9kZWw/LmVkaXRBbGwoKVxuXHR9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVFdmVudERlbGV0ZUJ1dHRvbkNsaWNrKHByZXZpZXdNb2RlbDogQ2FsZW5kYXJFdmVudFByZXZpZXdWaWV3TW9kZWwgfCBudWxsLCBldjogTW91c2VFdmVudCwgcmVjZWl2ZXI6IEhUTUxFbGVtZW50KSB7XG5cdGlmIChhd2FpdCBwcmV2aWV3TW9kZWw/LmlzUmVwZWF0aW5nRm9yRGVsZXRpbmcoKSkge1xuXHRcdGNyZWF0ZUFzeW5jRHJvcGRvd24oe1xuXHRcdFx0bGF6eUJ1dHRvbnM6ICgpID0+XG5cdFx0XHRcdFByb21pc2UucmVzb2x2ZShbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGFiZWw6IFwiZGVsZXRlU2luZ2xlRXZlbnRSZWN1cnJlbmNlX2FjdGlvblwiLFxuXHRcdFx0XHRcdFx0Y2xpY2s6IGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcdFx0YXdhaXQgcHJldmlld01vZGVsPy5kZWxldGVTaW5nbGUoKVxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxhYmVsOiBcImRlbGV0ZUFsbEV2ZW50UmVjdXJyZW5jZV9hY3Rpb25cIixcblx0XHRcdFx0XHRcdGNsaWNrOiAoKSA9PiBjb25maXJtRGVsZXRlQ2xvc2UocHJldmlld01vZGVsKSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdKSxcblx0XHRcdHdpZHRoOiAzMDAsXG5cdFx0fSkoZXYsIHJlY2VpdmVyKVxuXHR9IGVsc2Uge1xuXHRcdC8vIG5vaW5zcGVjdGlvbiBKU0lnbm9yZWRQcm9taXNlRnJvbUNhbGwsIEVTNk1pc3NpbmdBd2FpdFxuXHRcdGNvbmZpcm1EZWxldGVDbG9zZShwcmV2aWV3TW9kZWwpXG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY29uZmlybURlbGV0ZUNsb3NlKHByZXZpZXdNb2RlbDogQ2FsZW5kYXJFdmVudFByZXZpZXdWaWV3TW9kZWwgfCBudWxsKTogUHJvbWlzZTx2b2lkPiB7XG5cdGlmICghKGF3YWl0IERpYWxvZy5jb25maXJtKFwiZGVsZXRlRXZlbnRDb25maXJtYXRpb25fbXNnXCIpKSkgcmV0dXJuXG5cdGF3YWl0IHByZXZpZXdNb2RlbD8uZGVsZXRlQWxsKClcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0lBZ0JhLG1CQUFOLE1BQW1FO0NBQ3pFLEFBQVEsUUFBOEM7Q0FFdEQsS0FBSyxFQUFFLE9BQXFDLEVBQUU7QUFDN0MsT0FBSyxRQUFRLE1BQU07QUFDbkIsU0FBTyxnQkFBRSxtREFBbUQsQ0FDM0QsZ0JBQ0MsY0FDQSxFQUNDLE9BQU8s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