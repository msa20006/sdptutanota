import { downcast, intersection, isSameTypeRef, toLowerCase } from "./dist2-chunk.js";
import { FileTypeRef } from "./TypeRefs-chunk.js";

//#region src/common/api/common/utils/FileUtils.ts
function getFileExtension(fileName) {
	return (fileName.match(/\..+$/) || [""])[0];
}
function getFileBaseName(fileName) {
	const extension = getFileExtension(fileName);
	return fileName.substring(0, extension ? fileName.lastIndexOf(extension) : fileName.length);
}
function unreserveFileName(fileName) {
	if (fileName === "." || fileName === "..") return `${fileName}_`;
	const winReservedRe = /^(CON|PRN|LPT[0-9]|COM[0-9]|AUX|NUL)($|\..*$)/i;
	const extension = getFileExtension(fileName);
	const baseName = getFileBaseName(fileName);
	return env.platformId === "win32" && winReservedRe.test(baseName) ? `${baseName}_${extension}` : fileName;
}
function sanitizeFilename(filename) {
	const illegalRe = /[/?<>\\:*|"]/g;
	const controlRe = /[\x00-\x1f\x80-\x9f]/g;
	const windowsTrailingRe = /[. ]+$/;
	return unreserveFileName(filename).replace(illegalRe, "_").replace(controlRe, "_").replace(windowsTrailingRe, "_");
}
function deduplicateFilenames(filenames, _taken = new Set()) {
	const taken = new Set(Array.from(_taken).map(toLowerCase));
	const deduplicatedNames = new Set(filenames.map(toLowerCase));
	if (deduplicatedNames.size === filenames.length && intersection(deduplicatedNames, taken).size === 0) return Object.fromEntries(filenames.map((f) => [f, [f]]));
	const suffix = (name, number) => {
		const basename = name.substring(0, name.indexOf(".")) || name;
		const ext = (name.match(/\..+$/) || [""])[0];
		return `${basename} (${number})${ext}`;
	};
	const out = {};
	const duplicateCounts = {};
	for (let name of filenames) {
		const lower = name.toLowerCase();
		let dedupName;
		if (duplicateCounts[lower] === undefined) {
			duplicateCounts[lower] = 0;
			dedupName = taken.has(lower) ? suffix(name, ++duplicateCounts[lower]) : name;
		} else dedupName = suffix(name, ++duplicateCounts[lower]);
		if (!out[name]) out[name] = [];
		out[name].push(dedupName);
	}
	return out;
}
function isTutanotaFile(file) {
	return file._type && typeof file._type === "object" && Object.hasOwn(file._type, "app") && Object.hasOwn(file._type, "type") && isSameTypeRef(downcast(file._type), FileTypeRef);
}
function isDataFile(file) {
	return file._type === "DataFile";
}
function isFileReference(file) {
	return file._type === "FileReference";
}
function assertOnlyFileReferences(files) {
	if (files.some((f) => !isFileReference(f))) throw new TypeError("not only FileReference");
}
function assertOnlyDataFiles(files) {
	if (files.some((f) => !isDataFile(f))) throw new TypeError("not only DataFiles");
}
function fileListToArray(fileList) {
	let nativeFiles = [];
	for (let i = 0; i < fileList.length; i++) nativeFiles.push(fileList[i]);
	return nativeFiles;
}

//#endregion
export { assertOnlyDataFiles, assertOnlyFileReferences, deduplicateFilenames, fileListToArray, getFileBaseName, getFileExtension, isDataFile, isFileReference, isTutanotaFile, sanitizeFilename };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,