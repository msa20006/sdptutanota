import { mithril_default } from "./mithril-chunk.js";
import { defer } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import { CredentialAuthenticationError } from "./ErrorUtils-chunk.js";
import { CancelledError } from "./CancelledError-chunk.js";
import { BaseButton } from "./Button-chunk.js";
import { Dialog, DialogType } from "./Dialog-chunk.js";
import { liveDataAttrs } from "./AriaUtils-chunk.js";
import { AppLockMethod } from "./AppLockMethod-chunk.js";
import { RadioSelector } from "./RadioSelector-chunk.js";

//#region src/common/native/main/SelectAppLockMethodDialog.ts
async function showAppLockMethodDialog(mobileSystemFacade) {
	await AppLockMethodDialog.showAndWaitForSelection(mobileSystemFacade);
}
var AppLockMethodDialog = class AppLockMethodDialog {
	error;
	finished;
	dialog;
	/** @private */
	constructor(mobileSystemFacade, supportedModes, previousSelection) {
		this.mobileSystemFacade = mobileSystemFacade;
		this.supportedModes = supportedModes;
		this.previousSelection = previousSelection;
		this.error = null;
		this.finished = defer();
		this.dialog = new Dialog(DialogType.EditMedium, { view: () => {
			return mithril_default("", [null, mithril_default(SelectAppLockMethodView, {
				class: "scroll pt plr-l height-100p",
				error: this.error,
				onConfirm: (mode) => this.onMethodSelected(mode),
				supportedModes: this.supportedModes,
				previousSelection: this.previousSelection
			})]);
		} }).addShortcut({
			help: "close_alt",
			key: Keys.ESC,
			exec: () => this.dialog.close()
		});
		this.dialog.setCloseHandler(() => {
			this.finished.resolve();
			this.dialog.close();
		});
	}
	static async showAndWaitForSelection(mobileSystemFacade) {
		const supportedModes = await mobileSystemFacade.getSupportedAppLockMethods();
		const previousSelection = await mobileSystemFacade.getAppLockMethod();
		const credentialsDialog = new AppLockMethodDialog(mobileSystemFacade, supportedModes, previousSelection);
		credentialsDialog.dialog.show();
		await credentialsDialog.finished.promise;
	}
	async onMethodSelected(mode) {
		try {
			await this.mobileSystemFacade.enforceAppLock(mode);
			await this.mobileSystemFacade.setAppLockMethod(mode);
			this.dialog.close();
			this.finished.resolve();
		} catch (e) {
			if (e instanceof CredentialAuthenticationError) {
				this.error = e.message;
				mithril_default.redraw();
			} else if (e instanceof CancelledError) {} else throw e;
		}
	}
};
var SelectAppLockMethodView = class {
	currentMethod;
	constructor({ attrs }) {
		this.currentMethod = attrs.previousSelection;
	}
	view({ attrs }) {
		const options = this.getSupportedOptions(attrs);
		const { onConfirm } = attrs;
		return [mithril_default(".flex.col", { class: attrs.class }, [
			attrs.error ? mithril_default(".small.center.statusTextColor.pb-s", liveDataAttrs(), attrs.error) : null,
			mithril_default("", lang.get("credentialsEncryptionModeSelection_msg")),
			mithril_default(".mt", mithril_default(RadioSelector, {
				name: "credentialsEncryptionMode_label",
				options,
				selectedOption: this.currentMethod,
				onOptionSelected: (mode) => {
					this.currentMethod = mode;
					attrs.onModeSelected?.(mode);
				}
			}))
		]), onConfirm ? this.renderSelectButton(() => onConfirm(this.currentMethod)) : null];
	}
	getSupportedOptions(attrs) {
		const generateOption = (name, value) => ({
			name,
			value
		});
		const options = [
			generateOption("credentialsEncryptionModeDeviceLock_label", AppLockMethod.None),
			generateOption("credentialsEncryptionModeDeviceCredentials_label", AppLockMethod.SystemPassOrBiometrics),
			generateOption("credentialsEncryptionModeBiometrics_label", AppLockMethod.Biometrics)
		];
		return options.filter((option) => attrs.supportedModes.includes(option.value));
	}
	renderSelectButton(onclick) {
		return mithril_default(BaseButton, {
			label: "ok_action",
			text: lang.get("ok_action"),
			class: "uppercase accent-bg full-width center b content-fg flash",
			style: { height: "60px" },
			onclick
		});
	}
};

//#endregion
export { SelectAppLockMethodView, showAppLockMethodDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,