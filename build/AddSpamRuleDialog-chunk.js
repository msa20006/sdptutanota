import { __toESM } from "./chunk-chunk.js";
import { assertMainOrNode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { contains, objectEntries } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { SpamRuleFieldType, SpamRuleType, TUTA_MAIL_ADDRESS_DOMAINS, getSpamRuleField, getSpamRuleType } from "./TutanotaConstants-chunk.js";
import { isDomainOrTopLevelDomain, isMailAddress } from "./FormatValidator-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { isOfflineError } from "./ErrorUtils-chunk.js";
import { Autocapitalize, Dialog, DropDownSelector, TextField } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";

//#region src/mail-app/settings/AddSpamRuleDialog.ts
var import_stream = __toESM(require_stream(), 1);
assertMainOrNode();
function showAddSpamRuleDialog(existingSpamRuleOrTemplate) {
	let loadedData = null;
	const typeItems = getSpamRuleTypeNameMapping();
	const selectedType = (0, import_stream.default)(existingSpamRuleOrTemplate && getSpamRuleType(existingSpamRuleOrTemplate) || typeItems[0].value);
	const valueFieldValue = (0, import_stream.default)(existingSpamRuleOrTemplate ? existingSpamRuleOrTemplate.value : "");
	const fieldValues = getSpamRuleFieldMapping();
	const selectedField = (0, import_stream.default)(existingSpamRuleOrTemplate ? getSpamRuleField(existingSpamRuleOrTemplate) : fieldValues[0].value);
	let form = () => [
		mithril_default(DropDownSelector, {
			items: fieldValues,
			label: "field_label",
			selectedValue: selectedField(),
			selectionChangedHandler: selectedField
		}),
		mithril_default(TextField, {
			label: "emailSenderPlaceholder_label",
			autocapitalize: Autocapitalize.none,
			value: valueFieldValue(),
			oninput: valueFieldValue,
			helpLabel: () => lang.get(validate(selectedType(), valueFieldValue(), selectedField(), loadedData, existingSpamRuleOrTemplate) ?? "emptyString_msg")
		}),
		mithril_default(DropDownSelector, {
			items: typeItems,
			label: "emailSenderRule_label",
			selectedValue: selectedType(),
			selectionChangedHandler: selectedType
		})
	];
	let addSpamRuleOkAction = async (dialog$1) => {
		try {
			if (existingSpamRuleOrTemplate && existingSpamRuleOrTemplate._id) await locator.customerFacade.editSpamRule(Object.assign({}, existingSpamRuleOrTemplate, {
				value: valueFieldValue(),
				field: selectedField(),
				type: selectedType()
			}));
else await locator.customerFacade.addSpamRule(selectedField(), selectedType(), valueFieldValue());
			dialog$1.close();
		} catch (error) {
			if (!isOfflineError(error)) dialog$1.close();
			throw error;
		}
	};
	const dialog = Dialog.showActionDialog({
		title: "addSpamRule_action",
		child: form,
		validator: () => validate(selectedType(), valueFieldValue(), selectedField(), loadedData, existingSpamRuleOrTemplate),
		allowOkWithReturn: true,
		okAction: addSpamRuleOkAction
	});
	loadData().then((loaded) => {
		loadedData = loaded;
		mithril_default.redraw();
	}, (e) => {
		dialog.close();
		throw e;
	});
}
async function loadData() {
	const customerServerProperties = await locator.customerFacade.loadCustomerServerProperties();
	const customer = await locator.logins.getUserController().loadCustomer();
	const customerInfo = await locator.logins.getUserController().loadCustomerInfo();
	const customDomains = customerInfo.domainInfos.map((d) => d.domain);
	const existingSpamRules = customerServerProperties.emailSenderList;
	return {
		customDomains,
		existingSpamRules
	};
}
/** @return translation key if validation fails or null if it succeeds */
function validate(type, value, field, loadedData, existingSpamRuleOrTemplate) {
	let currentValue = value.toLowerCase().trim();
	if (loadedData == null) return "loading_msg";
else if (currentValue === "") return "spamRuleEnterValue_msg";
else if (!isDomainOrTopLevelDomain(currentValue) && !isMailAddress(currentValue, false) && currentValue !== "*") return "invalidInputFormat_msg";
else if (isInvalidRule(type, currentValue, loadedData.customDomains)) return "emailSenderInvalidRule_msg";
else if (loadedData.existingSpamRules.some((r) => r.value === currentValue && (existingSpamRuleOrTemplate == null || r._id !== existingSpamRuleOrTemplate._id) && r.field === field)) return "emailSenderExistingRule_msg";
	return null;
}
function isInvalidRule(type, value, customDomains) {
	if (type !== SpamRuleType.WHITELIST) {
		if (isDomainOrTopLevelDomain(value)) return value === "tutao.de" || contains(TUTA_MAIL_ADDRESS_DOMAINS, value) || contains(customDomains, value);
else if (isMailAddress(value, false)) {
			let domain = value.split("@")[1];
			return domain === "tutao.de" || contains(customDomains, domain);
		}
	}
	return false;
}
function getSpamRuleFieldToName() {
	return {
		[SpamRuleFieldType.FROM]: lang.get("inboxRuleSenderEquals_action"),
		[SpamRuleFieldType.TO]: lang.get("inboxRuleToRecipientEquals_action"),
		[SpamRuleFieldType.CC]: lang.get("inboxRuleCCRecipientEquals_action"),
		[SpamRuleFieldType.BCC]: lang.get("inboxRuleBCCRecipientEquals_action")
	};
}
function getSpamRuleFieldMapping() {
	return objectEntries(getSpamRuleFieldToName()).map(([value, name]) => ({
		value,
		name
	}));
}
function getSpamRuleTypeNameMapping() {
	return [
		{
			value: SpamRuleType.WHITELIST,
			name: lang.get("emailSenderWhitelist_action")
		},
		{
			value: SpamRuleType.BLACKLIST,
			name: lang.get("emailSenderBlacklist_action")
		},
		{
			value: SpamRuleType.DISCARD,
			name: lang.get("emailSenderDiscardlist_action")
		}
	];
}

//#endregion
export { getSpamRuleFieldMapping, getSpamRuleFieldToName, getSpamRuleTypeNameMapping, showAddSpamRuleDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,