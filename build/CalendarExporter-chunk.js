import { assertNotNull, downcast, incrementDate, mapAndFilterNull, neverNull, pad, stringToUtf8Uint8Array } from "./dist2-chunk.js";
import { EndType, RepeatPeriod, SECOND_MS, assertEnumValue } from "./TutanotaConstants-chunk.js";
import { DateTime } from "./luxon-chunk.js";
import { getLetId } from "./EntityUtils-chunk.js";
import { createFile } from "./TypeRefs-chunk.js";
import { getAllDayDateLocal, isAllDayEvent } from "./CommonCalendarUtils-chunk.js";
import { AlarmIntervalUnit, generateUid, getTimeZone, parseAlarmInterval } from "./CalendarUtils-chunk.js";
import { calendarAttendeeStatusToParstat, iCalReplacements, repeatPeriodToIcalFrequency } from "./ImportExportUtils-chunk.js";
import { convertToDataFile } from "./BlobUtils-chunk.js";
import { CALENDAR_MIME_TYPE } from "./SharedMailUtils-chunk.js";

//#region src/calendar-app/calendar/export/CalendarExporter.ts
function makeInvitationCalendarFile(event, method, now, zone) {
	const stringValue = makeInvitationCalendar(env.versionNumber, event, method, now, zone);
	const data = stringToUtf8Uint8Array(stringValue);
	const date = new Date();
	const tmpFile = createFile({
		name: `${method.toLowerCase()}-${date.getFullYear()}${date.getMonth() + 1}${date.getDate()}.ics`,
		mimeType: CALENDAR_MIME_TYPE,
		size: String(data.byteLength),
		cid: null,
		blobs: [],
		parent: null,
		subFiles: null
	});
	return convertToDataFile(tmpFile, data);
}
function serializeCalendar(versionNumber, events, now, zone) {
	return wrapIntoCalendar(versionNumber, "PUBLISH", events.map(({ event, alarms }) => serializeEvent(event, alarms, now, zone)).flat());
}
function serializeEvent(event, alarms, now, timeZone) {
	const repeatRule = event.repeatRule;
	const isAllDay = isAllDayEvent(event);
	const localZone = getTimeZone();
	let dateStart, dateEnd;
	if (isAllDay) {
		dateStart = `DTSTART;VALUE=DATE:${formatDate(getAllDayDateLocal(event.startTime), localZone)}`;
		dateEnd = `DTEND;VALUE=DATE:${formatDate(getAllDayDateLocal(event.endTime), localZone)}`;
	} else if (repeatRule) {
		dateStart = `DTSTART;TZID=${repeatRule.timeZone}:${formatDateTime(event.startTime, repeatRule.timeZone)}`;
		dateEnd = `DTEND;TZID=${repeatRule.timeZone}:${formatDateTime(event.endTime, repeatRule.timeZone)}`;
	} else {
		dateStart = `DTSTART:${formatDateTimeUTC(event.startTime)}`;
		dateEnd = `DTEND:${formatDateTimeUTC(event.endTime)}`;
	}
	return [
		"BEGIN:VEVENT",
		dateStart,
		dateEnd,
		`DTSTAMP:${formatDateTimeUTC(now)}`,
		`UID:${event.uid ? event.uid : generateUid(assertNotNull(event._ownerGroup), now.getTime())}`,
		`SEQUENCE:${event.sequence}`,
		`SUMMARY:${serializeIcalText(event.summary)}`
	].concat(event.recurrenceId != null ? isAllDay ? `RECURRENCE-ID;VALUE=DATE:${formatDate(getAllDayDateLocal(event.recurrenceId), localZone)}` : `RECURRENCE-ID;VALUE=DATETIME:${formatDateTimeUTC(event.recurrenceId)}` : []).concat(event.description && event.description !== "" ? `DESCRIPTION:${serializeIcalText(event.description)}` : []).concat(event.recurrenceId == null ? serializeRepeatRule(repeatRule, isAllDay, timeZone) : []).concat(event.location && event.location.length > 0 ? `LOCATION:${serializeIcalText(event.location)}` : []).concat(...mapAndFilterNull(alarms, (alarm) => {
		try {
			return serializeAlarm(event, alarm);
		} catch (e) {
			console.log(`error serializing alarm ${getLetId(alarm).toString()} for event ${getLetId(event).toString()}:`, e);
			return null;
		}
	})).concat(serializeParticipants(event)).concat("END:VEVENT");
}
function serializeRepeatRule(repeatRule, isAllDayEvent$1, localTimeZone) {
	if (repeatRule) {
		let endType = "";
		if (repeatRule.endType === EndType.Count) endType = `;COUNT=${neverNull(repeatRule.endValue)}`;
else if (repeatRule.endType === EndType.UntilDate) {
			const date = new Date(Number(repeatRule.endValue));
			const value = isAllDayEvent$1 ? formatDate(incrementDate(date, -1), localTimeZone) : formatDateTimeUTC(new Date(date.getTime() - SECOND_MS));
			endType = `;UNTIL=${value}`;
		}
		const excludedDates = serializeExcludedDates(repeatRule.excludedDates, repeatRule.timeZone);
		return [`RRULE:FREQ=${repeatPeriodToIcalFrequency(assertEnumValue(RepeatPeriod, repeatRule.frequency))}` + `;INTERVAL=${repeatRule.interval}` + endType].concat(excludedDates);
	} else return [];
}
function serializeExcludedDates(excludedDates, timeZone) {
	if (excludedDates.length > 0) {
		let dates = "";
		for (let i = 0; i < excludedDates.length; i++) {
			dates += formatDateTime(excludedDates[i].date, timeZone);
			if (i < excludedDates.length - 1) dates += ",";
		}
		return [`EXDATE;TZID=${timeZone}:${dates}`];
	} else return [];
}
function formatDateTimeUTC(date) {
	return `${date.getUTCFullYear()}${pad2(date.getUTCMonth() + 1)}${pad2(date.getUTCDate())}T${pad2(date.getUTCHours())}${pad2(date.getUTCMinutes())}${pad2(date.getUTCSeconds())}Z`;
}
function formatDateTime(date, timeZone) {
	const dateTime = DateTime.fromJSDate(date, { zone: timeZone });
	return `${dateTime.year}${pad2(dateTime.month)}${pad2(dateTime.day)}T${pad2(dateTime.hour)}${pad2(dateTime.minute)}${pad2(dateTime.second)}`;
}
function formatDate(date, timeZone) {
	const dateTime = DateTime.fromJSDate(date, { zone: timeZone });
	return `${dateTime.year}${pad2(dateTime.month)}${pad2(dateTime.day)}`;
}
function makeInvitationCalendar(versionNumber, event, method, now, zone) {
	const eventSerialized = serializeEvent(event, [], now, zone);
	return wrapIntoCalendar(versionNumber, method, eventSerialized);
}
function serializeTrigger(dbAlarmInterval) {
	const alarmInterval = parseAlarmInterval(dbAlarmInterval);
	let timeMarker = "";
	if (alarmInterval.unit === AlarmIntervalUnit.MINUTE || alarmInterval.unit === AlarmIntervalUnit.HOUR) timeMarker += "T";
	return "-P" + timeMarker + alarmInterval.value.toString() + alarmInterval.unit;
}
function serializeParticipants(event) {
	const { organizer, attendees } = event;
	if (attendees.length === 0 && organizer == null) return [];
	const lines = [];
	if (organizer) {
		const namePart = organizer.name ? `;CN=${quotedString(organizer.name)}` : "";
		lines.push(`ORGANIZER${namePart};EMAIL=${organizer.address}:mailto:${organizer.address}`);
	}
	const attendeesProperties = attendees.map(({ address, status }) => {
		const namePart = address.name ? `;CN=${quotedString(address.name)}` : "";
		const partstat = calendarAttendeeStatusToParstat[downcast(status)];
		return `ATTENDEE;CUTYPE=INDIVIDUAL;ROLE=REQ-PARTICIPANT;PARTSTAT=${partstat}` + `;RSVP=TRUE${namePart};EMAIL=${address.address}:mailto:${address.address}`;
	});
	return lines.concat(attendeesProperties);
}
/**
* Create an ical quoted-string param-value
* double quotes are not allowed inside of param-value properties so they are removed
*/
function quotedString(input) {
	return `"${input.replace(/"/g, "")}"`;
}
/**
* Serialize text properties according to the iCal standard.
* https://icalendar.org/iCalendar-RFC-5545/3-3-11-text.html
*/
function serializeIcalText(value) {
	let text = value;
	for (const rawEscape in iCalReplacements) text = text.replaceAll(rawEscape, iCalReplacements[rawEscape]);
	return text;
}
function pad2(number) {
	return pad(number, 2);
}
function wrapIntoCalendar(versionNumber, method, contents) {
	let value = [
		"BEGIN:VCALENDAR",
		`PRODID:-//Tutao GmbH//Tutanota ${versionNumber}//EN`,
		"VERSION:2.0",
		"CALSCALE:GREGORIAN",
		`METHOD:${method}`
	];
	value.push(...contents);
	value.push("END:VCALENDAR");
	return value.join("\r\n");
}
function serializeAlarm(event, alarm) {
	return [
		"BEGIN:VALARM",
		"ACTION:DISPLAY",
		"DESCRIPTION:This is an event reminder",
		`TRIGGER:${serializeTrigger(alarm.alarmInfo.trigger)}`,
		"END:VALARM"
	];
}

//#endregion
export { makeInvitationCalendarFile, serializeCalendar };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,