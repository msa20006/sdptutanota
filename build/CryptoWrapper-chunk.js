import { stringToUtf8Uint8Array } from "./dist2-chunk.js";
import { ENABLE_MAC, IV_BYTE_LENGTH, KEY_LENGTH_BYTES_AES_256, aes256RandomKey, aesDecrypt, aesEncrypt, bytesToKyberPublicKey, decryptKey, decryptKeyPair, encryptEccKey, encryptKey, encryptKyberKey, generateEccKeyPair, hkdf, keyToUint8Array, kyberPublicKeyToBytes, random, sha256Hash, uint8ArrayToKey } from "./dist3-chunk.js";

//#region src/common/api/worker/crypto/CryptoWrapper.ts
var CryptoWrapper = class {
	aes256RandomKey() {
		return aes256RandomKey();
	}
	aesDecrypt(key, encryptedBytes, usePadding) {
		return aesDecrypt(key, encryptedBytes, usePadding);
	}
	aesEncrypt(key, bytes, iv, usePadding, useMac) {
		return aesEncrypt(key, bytes, iv, usePadding, useMac);
	}
	decryptKey(encryptionKey, key) {
		return decryptKey(encryptionKey, key);
	}
	encryptEccKey(encryptionKey, privateKey) {
		return encryptEccKey(encryptionKey, privateKey);
	}
	encryptKey(encryptingKey, keyToBeEncrypted) {
		return encryptKey(encryptingKey, keyToBeEncrypted);
	}
	encryptKeyWithVersionedKey(encryptingKey, key) {
		return encryptKeyWithVersionedKey(encryptingKey, key);
	}
	generateEccKeyPair() {
		return generateEccKeyPair();
	}
	encryptKyberKey(encryptionKey, privateKey) {
		return encryptKyberKey(encryptionKey, privateKey);
	}
	kyberPublicKeyToBytes(kyberPublicKey) {
		return kyberPublicKeyToBytes(kyberPublicKey);
	}
	bytesToKyberPublicKey(encodedPublicKey) {
		return bytesToKyberPublicKey(encodedPublicKey);
	}
	encryptBytes(sk, value) {
		return encryptBytes(sk, value);
	}
	encryptString(sk, value) {
		return encryptString(sk, value);
	}
	decryptKeyPair(encryptionKey, keyPair) {
		return decryptKeyPair(encryptionKey, keyPair);
	}
	sha256Hash(data) {
		return sha256Hash(data);
	}
	deriveKeyWithHkdf({ key, salt, context }) {
		return deriveKey({
			salt,
			key,
			info: context,
			length: KEY_LENGTH_BYTES_AES_256
		});
	}
};
function deriveKey({ salt, key, info, length }) {
	return uint8ArrayToKey(hkdf(sha256Hash(stringToUtf8Uint8Array(salt)), keyToUint8Array(key), stringToUtf8Uint8Array(info), length));
}
function encryptBytes(sk, value) {
	return aesEncrypt(sk, value, random.generateRandomData(IV_BYTE_LENGTH), true, ENABLE_MAC);
}
function encryptString(sk, value) {
	return aesEncrypt(sk, stringToUtf8Uint8Array(value), random.generateRandomData(IV_BYTE_LENGTH), true, ENABLE_MAC);
}
function encryptKeyWithVersionedKey(encryptingKey, key) {
	return {
		encryptingKeyVersion: encryptingKey.version,
		key: encryptKey(encryptingKey.object, key)
	};
}

//#endregion
export { CryptoWrapper, encryptBytes, encryptKeyWithVersionedKey, encryptString };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,