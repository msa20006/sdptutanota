import { assertMainOrNode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { assertNotNull, base64ToBase64Url, base64UrlToBase64, decodeBase64, filterInt, getDayShifted, getEndOfDay, getStartOfDay, incrementMonth, isSameTypeRef, stringToBase64 } from "./dist2-chunk.js";
import { LEGACY_BCC_RECIPIENTS_ID, LEGACY_BODY_ID, LEGACY_CC_RECIPIENTS_ID, LEGACY_TO_RECIPIENTS_ID, getElementId } from "./EntityUtils-chunk.js";
import { typeModels$2 as typeModels } from "./TypeModels-chunk.js";
import { CalendarEventTypeRef, ContactTypeRef, MailTypeRef } from "./TypeRefs-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { throttleRoute } from "./RouteChange-chunk.js";

//#region src/mail-app/search/model/SearchUtils.ts
assertMainOrNode();
const FIXED_FREE_SEARCH_DAYS = 28;
let SearchCategoryTypes = function(SearchCategoryTypes$1) {
	SearchCategoryTypes$1["mail"] = "mail";
	SearchCategoryTypes$1["contact"] = "contact";
	SearchCategoryTypes$1["calendar"] = "calendar";
	return SearchCategoryTypes$1;
}({});
const SEARCH_CATEGORIES = [
	{
		name: SearchCategoryTypes.mail,
		typeRef: MailTypeRef
	},
	{
		name: SearchCategoryTypes.contact,
		typeRef: ContactTypeRef
	},
	{
		name: SearchCategoryTypes.calendar,
		typeRef: CalendarEventTypeRef
	}
];
function getSearchType(category) {
	return assertNotNull(SEARCH_CATEGORIES.find((c) => c.name === category)).typeRef;
}
const SEARCH_MAIL_FIELDS = [
	{
		textId: "all_label",
		field: null,
		attributeIds: null
	},
	{
		textId: "subject_label",
		field: "subject",
		attributeIds: [typeModels.Mail.values["subject"].id]
	},
	{
		textId: "mailBody_label",
		field: "body",
		attributeIds: [LEGACY_BODY_ID]
	},
	{
		textId: "from_label",
		field: "from",
		attributeIds: [typeModels.Mail.associations["sender"].id]
	},
	{
		textId: "to_label",
		field: "to",
		attributeIds: [
			LEGACY_TO_RECIPIENTS_ID,
			LEGACY_CC_RECIPIENTS_ID,
			LEGACY_BCC_RECIPIENTS_ID
		]
	},
	{
		textId: "attachmentName_label",
		field: "attachment",
		attributeIds: [typeModels.Mail.associations["attachments"].id]
	}
];
const routeSetThrottled = throttleRoute();
function searchCategoryForRestriction(restriction) {
	return assertNotNull(SEARCH_CATEGORIES.find((c) => isSameTypeRef(c.typeRef, restriction.type))).name;
}
function getSearchUrl(query, restriction, selectionKey = null) {
	const { path, params } = getSearchParameters(query, restriction, selectionKey);
	return mithril_default.buildPathname(path, params);
}
function getSearchParameters(query, restriction, selectionKey) {
	const category = searchCategoryForRestriction(restriction);
	const params = {
		query: query ?? "",
		category
	};
	if (restriction.start) params.start = restriction.start;
	if (restriction.end) params.end = restriction.end;
	if (restriction.folderIds.length > 0) params.folder = restriction.folderIds;
	if (restriction.field) params.field = restriction.field;
	if (restriction.eventSeries != null) params.eventSeries = String(restriction.eventSeries);
	return {
		path: "/search/:category" + (selectionKey ? "/" + selectionKey : ""),
		params
	};
}
function getFreeSearchStartDate() {
	return getStartOfDay(getDayShifted(new Date(), -FIXED_FREE_SEARCH_DAYS));
}
function createRestriction(searchCategory, start, end, field, folderIds, eventSeries) {
	if (locator.logins.getUserController().isFreeAccount() && searchCategory === SearchCategoryTypes.mail) {
		start = null;
		end = getFreeSearchStartDate().getTime();
		field = null;
		folderIds = [];
		eventSeries = null;
	}
	let r = {
		type: getSearchType(searchCategory),
		start,
		end,
		field: null,
		attributeIds: null,
		folderIds,
		eventSeries
	};
	if (!field) return r;
	if (searchCategory === SearchCategoryTypes.mail) {
		let fieldData = SEARCH_MAIL_FIELDS.find((f) => f.field === field);
		if (fieldData) {
			r.field = field;
			r.attributeIds = fieldData.attributeIds;
		}
	} else if (searchCategory === SearchCategoryTypes.contact) {} else if (searchCategory === SearchCategoryTypes.calendar) {
		if (field === "recipient") {
			r.field = field;
			r.attributeIds = [
				typeModels.Contact.values["firstName"].id,
				typeModels.Contact.values["lastName"].id,
				typeModels.Contact.associations["mailAddresses"].id
			];
		} else if (field === "mailAddress") {
			r.field = field;
			r.attributeIds = [typeModels.Contact.associations["mailAddresses"].id];
		}
	}
	return r;
}
function getRestriction(route) {
	let category;
	let start = null;
	let end = null;
	let field = null;
	let folderIds = [];
	let eventSeries = null;
	if (route.startsWith("/mail") || route.startsWith("/search/mail")) {
		category = SearchCategoryTypes.mail;
		if (route.startsWith("/search/mail")) try {
			const { params } = mithril_default.parsePathname(route);
			if (typeof params["start"] === "string") start = filterInt(params["start"]);
			if (typeof params["end"] === "string") end = filterInt(params["end"]);
			if (typeof params["field"] === "string") {
				const fieldString = params["field"];
				field = SEARCH_MAIL_FIELDS.find((f) => f.field === fieldString)?.field ?? null;
			}
			if (Array.isArray(params["folder"])) folderIds = params["folder"];
		} catch (e) {
			console.log("invalid query: " + route, e);
		}
	} else if (route.startsWith("/contact") || route.startsWith("/search/contact")) category = SearchCategoryTypes.contact;
else if (route.startsWith("/calendar") || route.startsWith("/search/calendar")) {
		const { params } = mithril_default.parsePathname(route);
		try {
			if (typeof params["eventSeries"] === "boolean") eventSeries = params["eventSeries"];
			if (typeof params["start"] === "string") start = filterInt(params["start"]);
			if (typeof params["end"] === "string") end = filterInt(params["end"]);
			const folder = params["folder"];
			if (Array.isArray(folder)) folderIds = folder;
		} catch (e) {
			console.log("invalid query: " + route, e);
		}
		category = SearchCategoryTypes.calendar;
		if (start == null || locator.logins.getUserController().isFreeAccount()) {
			const now = new Date();
			now.setDate(1);
			start = getStartOfDay(now).getTime();
		}
		if (end == null || locator.logins.getUserController().isFreeAccount()) {
			const endDate = incrementMonth(new Date(start), 3);
			endDate.setDate(0);
			end = getEndOfDay(endDate).getTime();
		}
	} else throw new Error("invalid type " + route);
	return createRestriction(category, start, end, field, folderIds, eventSeries);
}
function decodeCalendarSearchKey(searchKey) {
	return JSON.parse(decodeBase64("utf-8", base64UrlToBase64(searchKey)));
}
function encodeCalendarSearchKey(event) {
	const eventStartTime = event.startTime.getTime();
	return base64ToBase64Url(stringToBase64(JSON.stringify({
		start: eventStartTime,
		id: getElementId(event)
	})));
}

//#endregion
export { SEARCH_MAIL_FIELDS, SearchCategoryTypes, createRestriction, decodeCalendarSearchKey, encodeCalendarSearchKey, getFreeSearchStartDate, getRestriction, getSearchParameters, getSearchType, getSearchUrl, searchCategoryForRestriction };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,