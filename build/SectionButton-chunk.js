import { mithril_default } from "./mithril-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { Keys, TabIndex } from "./TutanotaConstants-chunk.js";
import { isKeyPressed } from "./KeyManager-chunk.js";
import { BaseButton, ButtonColor, getColors } from "./Button-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { Icon, IconSize } from "./Icon-chunk.js";
import { AriaRole } from "./AriaUtils-chunk.js";

//#region src/common/gui/base/Card.ts
var Card = class {
	view({ attrs, children }) {
		return mithril_default(`${attrs.rootElementType ?? "div"}.tutaui-card-container${attrs.shouldDivide ? ".tutaui-card-container-divide" : ""}`, {
			class: attrs.classes?.join(" "),
			style: attrs.style
		}, children);
	}
};

//#endregion
//#region src/common/gui/base/Switch.ts
var Switch = class {
	checkboxDom;
	view({ attrs: { disabled, variant, ariaLabel, checked, onclick, togglePillPosition, classes }, children }) {
		const childrenArr = [children, this.buildTogglePillComponent(checked, onclick, disabled)];
		if (togglePillPosition === "left") childrenArr.reverse();
		return mithril_default("label.tutaui-switch.flash", {
			class: this.resolveClasses(classes, disabled, variant),
			role: AriaRole.Switch,
			ariaLabel,
			ariaChecked: String(checked),
			ariaDisabled: disabled ? "true" : undefined,
			tabIndex: Number(disabled ? TabIndex.Programmatic : TabIndex.Default),
			onkeydown: (e) => {
				if (isKeyPressed(e.key, Keys.SPACE, Keys.RETURN)) {
					e.preventDefault();
					this.checkboxDom?.click();
				}
			}
		}, childrenArr);
	}
	buildTogglePillComponent(checked = false, onclick, disabled) {
		return mithril_default("span.tutaui-toggle-pill", { class: this.checkboxDom?.checked ? "checked" : "unchecked" }, mithril_default("input[type='checkbox']", {
			role: AriaRole.Switch,
			onclick: () => {
				onclick(this.checkboxDom?.checked ?? false);
			},
			oncreate: ({ dom }) => {
				this.checkboxDom = dom;
				this.checkboxDom.checked = checked;
			},
			tabIndex: TabIndex.Programmatic,
			disabled: disabled ? true : undefined
		}));
	}
	resolveClasses(classes = [], disabled = false, variant = "normal") {
		const classList = [...classes];
		if (disabled) classList.push("disabled", "click-disabled");
else classList.push("click");
		if (variant === "expanded") classList.push("justify-between", "full-width");
else classList.push("fit-content");
		return classList.join(" ");
	}
};

//#endregion
//#region src/common/gui/base/buttons/SectionButton.ts
var SectionButton = class {
	view(vnode) {
		const { leftIcon, injectionLeft, onclick, injectionRight, rightIcon, isDisabled, text } = vnode.attrs;
		const leftPart = mithril_default.fragment({}, [leftIcon == null ? null : mithril_default(Icon, {
			icon: leftIcon.icon,
			style: { fill: leftIcon.fill ?? getColors(ButtonColor.Content).button },
			title: lang.get(leftIcon.title),
			size: IconSize.Medium
		}), injectionLeft == null ? null : injectionLeft]);
		const rightPart = mithril_default.fragment({}, [injectionRight == null ? null : injectionRight, rightIcon == null ? mithril_default(Icon, {
			icon: Icons.ArrowForward,
			style: { fill: getColors(ButtonColor.Content).button },
			title: lang.get("next_action"),
			size: IconSize.Medium
		}) : mithril_default(Icon, {
			icon: rightIcon.icon,
			style: { fill: rightIcon.fill ?? getColors(ButtonColor.Content).button },
			title: lang.get(rightIcon.title),
			size: IconSize.Medium
		})]);
		return mithril_default(BaseButton, {
			class: `flash button-min-height flex items-center full-width ${vnode.attrs.classes ?? ""}`,
			label: text,
			disabled: isDisabled,
			role: AriaRole.MenuItem,
			onclick
		}, mithril_default(Card, { classes: [
			"flex",
			"justify-between",
			"flex-grow",
			"items-start"
		] }, [
			leftIcon || injectionLeft ? mithril_default(".flex.items-center.mr-s", [leftPart]) : null,
			mithril_default("span.flex-grow.full-width.white-space", lang.getTranslationText(text)),
			rightPart
		]));
	}
};

//#endregion
export { Card, SectionButton, Switch };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,