import { startsWith } from "./dist2-chunk.js";

//#region src/common/misc/FormatValidator.ts
const DOMAIN_PART_REGEX = "[\\w\\-\\+_]+";
const DOMAIN_REGEXP = new RegExp(`^${DOMAIN_PART_REGEX}\\.${DOMAIN_PART_REGEX}(\\.${DOMAIN_PART_REGEX})*\\s*$`);
const DOMAIN_OR_TLD_REGEXP = new RegExp(`^(${DOMAIN_PART_REGEX}.)*${DOMAIN_PART_REGEX}$`);
const STRICT_USERNAME_MAIL_ADDR_REGEXP = new RegExp(`^\\s*${DOMAIN_PART_REGEX}(\\.${DOMAIN_PART_REGEX})*\\@${DOMAIN_PART_REGEX}\\.${DOMAIN_PART_REGEX}(\\.${DOMAIN_PART_REGEX})*\\s*$`);
const EMAIL_ADDR_REGEXP = new RegExp(`^[^\\s\\@]+\\@${DOMAIN_PART_REGEX}\\.${DOMAIN_PART_REGEX}(\\.${DOMAIN_PART_REGEX})*\\s*$`);
function isMailAddress(string, strictUserName) {
	if (string == null || string !== string.trim()) return false;
	if (string.indexOf("-") === 0) return false;
	if (string.indexOf(",") !== -1 || string.indexOf("(") !== -1 || string.indexOf(")") !== -1 || string.indexOf(":") !== -1 || string.indexOf(";") !== -1 || string.indexOf("<") !== -1 || string.indexOf(">") !== -1 || string.indexOf("[") !== -1 || string.indexOf("]") !== -1 || string.indexOf("\\") !== -1) return false;
	if (string.length > 254) return false;
	if (strictUserName) {
		if (string.indexOf("@") > 64) return false;
		return STRICT_USERNAME_MAIL_ADDR_REGEXP.test(string);
	} else return EMAIL_ADDR_REGEXP.test(string);
}
function isDomainName(domainName) {
	if (domainName == null || domainName !== domainName.trim()) return false;
	if (startsWith(domainName, "-")) return false;
	return DOMAIN_REGEXP.test(domainName);
}
function isDomainOrTopLevelDomain(value) {
	if (startsWith(value, "-")) return false;
	return DOMAIN_OR_TLD_REGEXP.test(value);
}
function isRegularExpression(value) {
	return /^\/.*\/$/.test(value) || /^\/.*\/(?!.*(.)\1)[gimsuy]+$/.test(value);
}
function isValidCreditCardNumber(input) {
	const cleaned = input.match(/^[0123456789 ]+$/);
	if (!cleaned || cleaned.length !== 1) return false;
	const digits = cleaned[0].split("").filter((c) => !/\s/.test(c));
	if (digits.length < 6 || digits.length > 20) return false;
	return digits.reverse().map((num) => Number(num)).reduce((acc, cur, idx) => {
		const num = idx % 2 === 0 ? cur : cur * 2 - (cur > 4 ? 9 : 0);
		return acc + num;
	}, 0) % 10 === 0;
}

//#endregion
export { isDomainName, isDomainOrTopLevelDomain, isMailAddress, isRegularExpression, isValidCreditCardNumber };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,