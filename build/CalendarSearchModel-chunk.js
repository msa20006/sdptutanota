import { __toESM } from "./chunk-chunk.js";
import { assertMainOrNode } from "./Env-chunk.js";
import { arrayEquals, assertNonNull, assertNotNull, incrementMonth, isSameTypeRef, tokenize } from "./dist2-chunk.js";
import { listIdPart } from "./EntityUtils-chunk.js";
import { require_stream } from "./stream-chunk.js";

//#region src/calendar-app/calendar/search/model/CalendarSearchModel.ts
var import_stream = __toESM(require_stream(), 1);
assertMainOrNode();
var CalendarSearchModel = class {
	result;
	lastQueryString;
	lastQuery;
	lastSearchPromise;
	cancelSignal;
	constructor(calendarModel) {
		this.calendarModel = calendarModel;
		this.result = (0, import_stream.default)();
		this.lastQueryString = (0, import_stream.default)("");
		this.lastQuery = null;
		this.lastSearchPromise = Promise.resolve();
		this.cancelSignal = (0, import_stream.default)(false);
	}
	async search(searchQuery, progressTracker) {
		if (this.lastQuery && searchQueryEquals(searchQuery, this.lastQuery)) return this.lastSearchPromise;
		this.lastQuery = searchQuery;
		const { query, restriction, minSuggestionCount, maxResults } = searchQuery;
		this.lastQueryString(query);
		let result = this.result();
		if (result && !isSameTypeRef(restriction.type, result.restriction.type)) this.result(null);
		if (query.trim() === "") {
			const result$1 = {
				query,
				restriction,
				results: [],
				currentIndexTimestamp: 0,
				lastReadSearchIndexRow: [],
				maxResults: 0,
				matchWordOrder: false,
				moreResults: [],
				moreResultsEntries: []
			};
			this.result(result$1);
			this.lastSearchPromise = Promise.resolve(result$1);
		} else {
			let currentDate = new Date(assertNotNull(restriction.start));
			const endDate = new Date(assertNotNull(restriction.end));
			const calendarModel = await this.calendarModel();
			const daysInMonths = [];
			while (currentDate.getTime() <= endDate.getTime()) {
				daysInMonths.push(currentDate);
				currentDate = incrementMonth(currentDate, 1);
			}
			const calendarResult = {
				currentIndexTimestamp: 0,
				moreResults: [],
				moreResultsEntries: [],
				lastReadSearchIndexRow: [],
				matchWordOrder: false,
				restriction,
				results: [],
				query
			};
			const monitorHandle = progressTracker.registerMonitorSync(daysInMonths.length);
			const monitor = assertNotNull(progressTracker.getMonitor(monitorHandle));
			if (this.cancelSignal()) {
				this.result(calendarResult);
				this.lastSearchPromise = Promise.resolve(calendarResult);
				return this.lastSearchPromise;
			}
			const hasNewPaidPlan = await calendarModel.canLoadBirthdaysCalendar();
			if (hasNewPaidPlan) await calendarModel.loadContactsBirthdays();
			await calendarModel.loadMonthsIfNeeded(daysInMonths, monitor, this.cancelSignal);
			monitor.completed();
			const eventsForDays = calendarModel.getEventsForMonths()();
			assertNonNull(restriction.start);
			assertNonNull(restriction.end);
			const tokens = tokenize(query.trim());
			const alreadyAdded = new Set();
			if (this.cancelSignal()) {
				this.result(calendarResult);
				this.lastSearchPromise = Promise.resolve(calendarResult);
				return this.lastSearchPromise;
			}
			const followCommonRestrictions = (key, event) => {
				if (alreadyAdded.has(key)) return false;
				if (restriction.folderIds.length > 0 && !restriction.folderIds.includes(listIdPart(event._id))) return false;
				if (restriction.eventSeries === false && event.repeatRule != null) return false;
				return true;
			};
			if (tokens.length > 0) {
				for (const [startOfDay, eventsOnDay] of eventsForDays) eventLoop: for (const event of eventsOnDay) {
					if (!(startOfDay >= restriction.start && startOfDay <= restriction.end)) continue;
					const key = idToKey(event._id);
					if (!followCommonRestrictions(key, event)) continue;
					for (const token of tokens) if (event.summary.toLowerCase().includes(token)) {
						alreadyAdded.add(key);
						calendarResult.results.push(event._id);
						continue eventLoop;
					}
					const descriptionToSearch = event.description.replaceAll(/(<[^>]+>)/gi, " ").toLowerCase();
					for (const token of tokens) if (descriptionToSearch.includes(token)) {
						alreadyAdded.add(key);
						calendarResult.results.push(event._id);
						continue eventLoop;
					}
					if (this.cancelSignal()) {
						this.result(calendarResult);
						this.lastSearchPromise = Promise.resolve(calendarResult);
						return this.lastSearchPromise;
					}
				}
				const startDate = new Date(restriction.start);
				const endDate$1 = new Date(restriction.end);
				if (hasNewPaidPlan) {
					const birthdayEvents = Array.from(calendarModel.getBirthdayEvents().values()).flat();
					eventLoop: for (const eventRegistry of birthdayEvents) {
						const month = eventRegistry.event.startTime.getMonth();
						if (!(month >= startDate.getMonth() && month <= endDate$1.getMonth())) continue;
						const key = idToKey(eventRegistry.event._id);
						if (!followCommonRestrictions(key, eventRegistry.event)) continue;
						for (const token of tokens) if (eventRegistry.event.summary.toLowerCase().includes(token)) {
							alreadyAdded.add(key);
							calendarResult.results.push(eventRegistry.event._id);
							continue eventLoop;
						}
						if (this.cancelSignal()) {
							this.result(calendarResult);
							this.lastSearchPromise = Promise.resolve(calendarResult);
							return this.lastSearchPromise;
						}
					}
				}
			}
			this.result(calendarResult);
			this.lastSearchPromise = Promise.resolve(calendarResult);
		}
		return this.lastSearchPromise;
	}
	isNewSearch(query, restriction) {
		let isNew = false;
		let lastQuery = this.lastQuery;
		if (lastQuery == null) isNew = true;
else if (lastQuery.query !== query) isNew = true;
else if (lastQuery.restriction !== restriction) isNew = !isSameSearchRestriction(restriction, lastQuery.restriction);
		if (isNew) this.sendCancelSignal();
		return isNew;
	}
	sendCancelSignal() {
		this.cancelSignal(true);
		this.cancelSignal.end(true);
		this.cancelSignal = (0, import_stream.default)(false);
	}
};
function idToKey(id) {
	return id.join("/");
}
function searchQueryEquals(a, b) {
	return a.query === b.query && isSameSearchRestriction(a.restriction, b.restriction) && a.minSuggestionCount === b.minSuggestionCount && a.maxResults === b.maxResults;
}
function isSameSearchRestriction(a, b) {
	const isSameAttributeIds = a.attributeIds === b.attributeIds || !!a.attributeIds && !!b.attributeIds && arrayEquals(a.attributeIds, b.attributeIds);
	return isSameTypeRef(a.type, b.type) && a.start === b.start && a.end === b.end && isSameAttributeIds && (a.eventSeries === b.eventSeries || a.eventSeries === null && b.eventSeries === true || a.eventSeries === true && b.eventSeries === null) && arrayEquals(a.folderIds, b.folderIds);
}
function areResultsForTheSameQuery(a, b) {
	return a.query === b.query && isSameSearchRestriction(a.restriction, b.restriction);
}
function hasMoreResults(searchResult) {
	return searchResult.moreResults.length > 0 || searchResult.lastReadSearchIndexRow.length > 0 && searchResult.lastReadSearchIndexRow.every(([word, id]) => id !== 0);
}

//#endregion
export { CalendarSearchModel, areResultsForTheSameQuery as areResultsForTheSameQuery$1, hasMoreResults as hasMoreResults$1, isSameSearchRestriction as isSameSearchRestriction$1 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,