import { assertMainOrNode } from "./Env-chunk.js";
import { InfoLink, lang } from "./LanguageViewModel-chunk.js";
import { EmailSignatureType } from "./TutanotaConstants-chunk.js";
import { LINE_BREAK } from "./SharedMailUtils-chunk.js";
import { htmlSanitizer } from "./HtmlSanitizer-chunk.js";

//#region src/mail-app/mail/signature/Signature.ts
assertMainOrNode();
function getDefaultSignature() {
	return LINE_BREAK + htmlSanitizer.sanitizeHTML(lang.get("defaultEmailSignature_msg", { "{1}": `<a href=${InfoLink.HomePageFreeSignup}>${InfoLink.HomePageFreeSignup}</a>` })).html;
}
function getEmailSignature(tutanotaProperties) {
	const type = tutanotaProperties.emailSignatureType;
	if (type === EmailSignatureType.EMAIL_SIGNATURE_TYPE_DEFAULT) return getDefaultSignature();
else if (EmailSignatureType.EMAIL_SIGNATURE_TYPE_CUSTOM === type) return tutanotaProperties.customEmailSignature;
else return "";
}
function appendEmailSignature(body, properties) {
	const signature = getEmailSignature(properties);
	if (signature) return body + LINE_BREAK + signature;
else return body;
}
function prependEmailSignature(body, logins) {
	let bodyWithSignature = "";
	let signature = getEmailSignature(logins.getUserController().props);
	if (body) bodyWithSignature = LINE_BREAK + LINE_BREAK + LINE_BREAK + body;
	if (logins.getUserController().isInternalUser() && signature) bodyWithSignature = LINE_BREAK + signature + bodyWithSignature;
	return bodyWithSignature;
}

//#endregion
export { appendEmailSignature, getDefaultSignature, getEmailSignature, prependEmailSignature };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbmF0dXJlLWNodW5rLmpzIiwibmFtZXMiOlsidHV0YW5vdGFQcm9wZXJ0aWVzOiBUdXRhbm90YVByb3BlcnRpZXMiLCJUdXRhbm90YUNvbnN0YW50cyIsImJvZHk6IHN0cmluZyIsInByb3BlcnRpZXM6IFR1dGFub3RhUHJvcGVydGllcyIsImxvZ2luczogTG9naW5Db250cm9sbGVyIl0sInNvdXJjZXMiOlsiLi4vc3JjL21haWwtYXBwL21haWwvc2lnbmF0dXJlL1NpZ25hdHVyZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmZvTGluaywgbGFuZyB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vbWlzYy9MYW5ndWFnZVZpZXdNb2RlbFwiXG5pbXBvcnQgdHlwZSB7IFR1dGFub3RhUHJvcGVydGllcyB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vYXBpL2VudGl0aWVzL3R1dGFub3RhL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IEVtYWlsU2lnbmF0dXJlVHlwZSBhcyBUdXRhbm90YUNvbnN0YW50cyB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vYXBpL2NvbW1vbi9UdXRhbm90YUNvbnN0YW50c1wiXG5pbXBvcnQgeyBodG1sU2FuaXRpemVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9taXNjL0h0bWxTYW5pdGl6ZXJcIlxuaW1wb3J0IHR5cGUgeyBMb2dpbkNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2FwaS9tYWluL0xvZ2luQ29udHJvbGxlclwiXG5pbXBvcnQgeyBhc3NlcnRNYWluT3JOb2RlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9hcGkvY29tbW9uL0VudlwiXG5pbXBvcnQgeyBMSU5FX0JSRUFLIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9tYWlsRnVuY3Rpb25hbGl0eS9TaGFyZWRNYWlsVXRpbHMuanNcIlxuXG5hc3NlcnRNYWluT3JOb2RlKClcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRTaWduYXR1cmUoKTogc3RyaW5nIHtcblx0Ly8gYWRkIG9uZSBsaW5lIGJyZWFrIHRvIHRoZSBkZWZhdWx0IHNpZ25hdHVyZSB0byBhZGQgb25lIGVtcHR5IGxpbmUgYmV0d2VlbiBzaWduYXR1cmUgYW5kIGJvZHlcblx0cmV0dXJuIChcblx0XHRMSU5FX0JSRUFLICtcblx0XHRodG1sU2FuaXRpemVyLnNhbml0aXplSFRNTChcblx0XHRcdGxhbmcuZ2V0KFwiZGVmYXVsdEVtYWlsU2lnbmF0dXJlX21zZ1wiLCB7XG5cdFx0XHRcdFwiezF9XCI6IGA8YSBocmVmPSR7SW5mb0xpbmsuSG9tZVBhZ2VGcmVlU2lnbnVwfT4ke0luZm9MaW5rLkhvbWVQYWdlRnJlZVNpZ251cH08L2E+YCxcblx0XHRcdH0pLFxuXHRcdCkuaHRtbFxuXHQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbWFpbFNpZ25hdHVyZSh0dXRhbm90YVByb3BlcnRpZXM6IFR1dGFub3RhUHJvcGVydGllcyk6IHN0cmluZyB7XG5cdC8vIHByb3ZpZGUgdGhlIHVzZXIgc2lnbmF0dXJlLCBldmVuIGZvciBzaGFyZWQgbWFpbCBncm91cHNcblx0Y29uc3QgdHlwZSA9IHR1dGFub3RhUHJvcGVydGllcy5lbWFpbFNpZ25hdHVyZVR5cGVcblxuXHRpZiAodHlwZSA9PT0gVHV0YW5vdGFDb25zdGFudHMuRU1BSUxfU0lHTkFUVVJFX1RZUEVfREVGQVVMVCkge1xuXHRcdHJldHVybiBnZXREZWZhdWx0U2lnbmF0dXJlKClcblx0fSBlbHNlIGlmIChUdXRhbm90YUNvbnN0YW50cy5FTUFJTF9TSUdOQVRVUkVfVFlQRV9DVVNUT00gPT09IHR5cGUpIHtcblx0XHRyZXR1cm4gdHV0YW5vdGFQcm9wZXJ0aWVzLmN1c3RvbUVtYWlsU2lnbmF0dXJlXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIFwiXCJcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kRW1haWxTaWduYXR1cmUoYm9keTogc3RyaW5nLCBwcm9wZXJ0aWVzOiBUdXRhbm90YVByb3BlcnRpZXMpOiBzdHJpbmcge1xuXHRjb25zdCBzaWduYXR1cmUgPSBnZXRFbWFpbFNpZ25hdHVyZShwcm9wZXJ0aWVzKVxuXG5cdGlmIChzaWduYXR1cmUpIHtcblx0XHQvLyBlbnN1cmUgdGhhdCBzaWduYXR1cmUgaXMgb24gdGhlIG5leHQgbGluZVxuXHRcdHJldHVybiBib2R5ICsgTElORV9CUkVBSyArIHNpZ25hdHVyZVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBib2R5XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXBlbmRFbWFpbFNpZ25hdHVyZShib2R5OiBzdHJpbmcsIGxvZ2luczogTG9naW5Db250cm9sbGVyKTogc3RyaW5nIHtcblx0Ly8gYWRkIHNwYWNlIGJldHdlZW4gc2lnbmF0dXJlIGFuZCBleGlzdGluZyBib2R5XG5cdGxldCBib2R5V2l0aFNpZ25hdHVyZSA9IFwiXCJcblx0bGV0IHNpZ25hdHVyZSA9IGdldEVtYWlsU2lnbmF0dXJlKGxvZ2lucy5nZXRVc2VyQ29udHJvbGxlcigpLnByb3BzKVxuXG5cdGlmIChib2R5KSB7XG5cdFx0Ym9keVdpdGhTaWduYXR1cmUgPSBMSU5FX0JSRUFLICsgTElORV9CUkVBSyArIExJTkVfQlJFQUsgKyBib2R5XG5cdH1cblxuXHRpZiAobG9naW5zLmdldFVzZXJDb250cm9sbGVyKCkuaXNJbnRlcm5hbFVzZXIoKSAmJiBzaWduYXR1cmUpIHtcblx0XHQvLyBlbnN1cmUgdGhhdCBzaWduYXR1cmUgaXMgb24gdGhlIG5leHQgbGluZVxuXHRcdGJvZHlXaXRoU2lnbmF0dXJlID0gTElORV9CUkVBSyArIHNpZ25hdHVyZSArIGJvZHlXaXRoU2lnbmF0dXJlXG5cdH1cblxuXHRyZXR1cm4gYm9keVdpdGhTaWduYXR1cmVcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVFBLGtCQUFrQjtBQUVYLFNBQVMsc0JBQThCO0FBRTdDLFFBQ0MsYUFDQSxjQUFjLGFBQ2IsS0FBSyxJQUFJLDZCQUE2QixFQUNyQyxRQUFRLFVBQVUsU0FBUyxtQkFBbUIsR0FBRyxTQUFTLG1CQUFtQixNQUM3RSxFQUFDLENBQ0YsQ0FBQztBQUVIO0FBRU0sU0FBUyxrQkFBa0JBLG9CQUFnRDtDQUVqRixNQUFNLE9BQU8sbUJBQW1CO0FBRWhDLEtBQUksU0FBU0MsbUJBQWtCLDZCQUM5QixRQUFPLHFCQUFxQjtTQUNsQkEsbUJBQWtCLGdDQUFnQyxLQUM1RCxRQUFPLG1CQUFtQjtJQUUxQixRQUFPO0FBRVI7QUFFTSxTQUFTLHFCQUFxQkMsTUFBY0MsWUFBd0M7Q0FDMUYsTUFBTSxZQUFZLGtCQUFrQixXQUFXO0FBRS9DLEtBQUksVUFFSCxRQUFPLE9BQU8sYUFBYTtJQUUzQixRQUFPO0FBRVI7QUFFTSxTQUFTLHNCQUFzQkQsTUFBY0UsUUFBaUM7Q0FFcEYsSUFBSSxvQkFBb0I7Q0FDeEIsSUFBSSxZQUFZLGtCQUFrQixPQUFPLG1CQUFtQixDQUFDLE1BQU07QUFFbkUsS0FBSSxLQUNILHFCQUFvQixhQUFhLGFBQWEsYUFBYTtBQUc1RCxLQUFJLE9BQU8sbUJBQW1CLENBQUMsZ0JBQWdCLElBQUksVUFFbEQscUJBQW9CLGFBQWEsWUFBWTtBQUc5QyxRQUFPO0FBQ1AifQ==