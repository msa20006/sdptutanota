import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { assertWorkerOrNode } from "./Env-chunk.js";
import "./dist2-chunk.js";
import { isSameId } from "./EntityUtils-chunk.js";
import "./TypeModels2-chunk.js";
import { GroupTypeRef, UserGroupKeyDistributionTypeRef, UserTypeRef } from "./TypeRefs2-chunk.js";

//#region src/common/api/worker/facades/lazy/CacheManagementFacade.ts
assertWorkerOrNode();
var CacheManagementFacade = class {
	constructor(userFacade, cachingEntityClient, entityRestCache) {
		this.userFacade = userFacade;
		this.cachingEntityClient = cachingEntityClient;
		this.entityRestCache = entityRestCache;
	}
	/**
	* Refreshes group and user (because of the memberships) in the rest cache and updates the key cache if possible.
	* @param groupId
	*/
	async refreshKeyCache(groupId) {
		const group = await this.reloadGroup(groupId);
		const user = await this.reloadUser();
		if (isSameId(groupId, this.userFacade.getUserGroupId())) await this.tryUpdatingUserGroupKey();
		return {
			user,
			group
		};
	}
	/**
	* Refreshes a group in the rest cache.
	* @param groupId
	*/
	async reloadGroup(groupId) {
		await this.entityRestCache.deleteFromCacheIfExists(GroupTypeRef, null, groupId);
		return await this.cachingEntityClient.load(GroupTypeRef, groupId);
	}
	async reloadUser() {
		const userId = this.userFacade.getLoggedInUser()._id;
		await this.entityRestCache.deleteFromCacheIfExists(UserTypeRef, null, userId);
		const user = await this.cachingEntityClient.load(UserTypeRef, userId);
		await this.userFacade.updateUser(user);
		return user;
	}
	/**
	* Tries updating the user group key in the key cache by loading and decrypting the UserGroupKeyDistribution entity.
	*/
	async tryUpdatingUserGroupKey() {
		try {
			const userGroupKeyDistribution = await this.cachingEntityClient.load(UserGroupKeyDistributionTypeRef, this.userFacade.getUserGroupId());
			this.userFacade.updateUserGroupKey(userGroupKeyDistribution);
		} catch (e) {
			console.log("Could not update user group key", e);
		}
	}
};

//#endregion
export { CacheManagementFacade };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FjaGVNYW5hZ2VtZW50RmFjYWRlLWNodW5rLmpzIiwibmFtZXMiOlsidXNlckZhY2FkZTogVXNlckZhY2FkZSIsImNhY2hpbmdFbnRpdHlDbGllbnQ6IEVudGl0eUNsaWVudCIsImVudGl0eVJlc3RDYWNoZTogRGVmYXVsdEVudGl0eVJlc3RDYWNoZSIsImdyb3VwSWQ6IElkIl0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9hcGkvd29ya2VyL2ZhY2FkZXMvbGF6eS9DYWNoZU1hbmFnZW1lbnRGYWNhZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JvdXAsIEdyb3VwS2V5VHlwZVJlZiwgR3JvdXBUeXBlUmVmLCBVc2VyLCBVc2VyR3JvdXBLZXlEaXN0cmlidXRpb25UeXBlUmVmLCBVc2VyVHlwZVJlZiB9IGZyb20gXCIuLi8uLi8uLi9lbnRpdGllcy9zeXMvVHlwZVJlZnMuanNcIlxuaW1wb3J0IHsgRW50aXR5Q2xpZW50IH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9FbnRpdHlDbGllbnQuanNcIlxuaW1wb3J0IHsgYXNzZXJ0V29ya2VyT3JOb2RlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9FbnYuanNcIlxuaW1wb3J0IHsgVXNlckZhY2FkZSB9IGZyb20gXCIuLi9Vc2VyRmFjYWRlLmpzXCJcbmltcG9ydCB7IERlZmF1bHRFbnRpdHlSZXN0Q2FjaGUgfSBmcm9tIFwiLi4vLi4vcmVzdC9EZWZhdWx0RW50aXR5UmVzdENhY2hlLmpzXCJcbmltcG9ydCB7IGlzU2FtZUlkIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi91dGlscy9FbnRpdHlVdGlscy5qc1wiXG5cbmFzc2VydFdvcmtlck9yTm9kZSgpXG5cbi8qKlxuICogVGhpcyBmYWNhZGUgaXMgcmVzcG9uc2libGUgZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHdlIG5lZWQgdG8gbWFudWFsbHkgdXBkYXRlIGFuIGVudGl0eSBpbiB0aGUgcmVzdCBjYWNoZS5cbiAqIEl0IGlzIGFsc28gc3VpdGFibGUgdG8gbWFudWFsbHkgZW5zdXJlIGNvbnNpc3RlbmN5IGJldHdlZW4gdGhlIHJlc3QgY2FjaGUgYW5kIHRoZSBrZXkgY2FjaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBDYWNoZU1hbmFnZW1lbnRGYWNhZGUge1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIHJlYWRvbmx5IHVzZXJGYWNhZGU6IFVzZXJGYWNhZGUsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBjYWNoaW5nRW50aXR5Q2xpZW50OiBFbnRpdHlDbGllbnQsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBlbnRpdHlSZXN0Q2FjaGU6IERlZmF1bHRFbnRpdHlSZXN0Q2FjaGUsXG5cdCkge31cblxuXHQvKipcblx0ICogUmVmcmVzaGVzIGdyb3VwIGFuZCB1c2VyIChiZWNhdXNlIG9mIHRoZSBtZW1iZXJzaGlwcykgaW4gdGhlIHJlc3QgY2FjaGUgYW5kIHVwZGF0ZXMgdGhlIGtleSBjYWNoZSBpZiBwb3NzaWJsZS5cblx0ICogQHBhcmFtIGdyb3VwSWRcblx0ICovXG5cdGFzeW5jIHJlZnJlc2hLZXlDYWNoZShncm91cElkOiBJZCk6IFByb21pc2U8eyB1c2VyOiBVc2VyOyBncm91cDogR3JvdXAgfT4ge1xuXHRcdGNvbnN0IGdyb3VwID0gYXdhaXQgdGhpcy5yZWxvYWRHcm91cChncm91cElkKVxuXHRcdGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLnJlbG9hZFVzZXIoKVxuXHRcdGlmIChpc1NhbWVJZChncm91cElkLCB0aGlzLnVzZXJGYWNhZGUuZ2V0VXNlckdyb3VwSWQoKSkpIHtcblx0XHRcdGF3YWl0IHRoaXMudHJ5VXBkYXRpbmdVc2VyR3JvdXBLZXkoKVxuXHRcdH1cblx0XHRyZXR1cm4geyB1c2VyLCBncm91cCB9XG5cdH1cblxuXHQvKipcblx0ICogUmVmcmVzaGVzIGEgZ3JvdXAgaW4gdGhlIHJlc3QgY2FjaGUuXG5cdCAqIEBwYXJhbSBncm91cElkXG5cdCAqL1xuXHRhc3luYyByZWxvYWRHcm91cChncm91cElkOiBJZCk6IFByb21pc2U8R3JvdXA+IHtcblx0XHRhd2FpdCB0aGlzLmVudGl0eVJlc3RDYWNoZS5kZWxldGVGcm9tQ2FjaGVJZkV4aXN0cyhHcm91cFR5cGVSZWYsIG51bGwsIGdyb3VwSWQpXG5cdFx0cmV0dXJuIGF3YWl0IHRoaXMuY2FjaGluZ0VudGl0eUNsaWVudC5sb2FkKEdyb3VwVHlwZVJlZiwgZ3JvdXBJZClcblx0fVxuXG5cdC8qXG5cdCAqIERlbGV0ZXMgdGhlIGxvZ2dlZC1pbiB1c2VyIGZyb20gdGhlIGNhY2hlLCBhbmQgcmVsb2FkcyBhbmQgcmV0dXJucyB0aGUgbmV3IHVzZXIgb2JqZWN0LlxuXHQgKiBJcyB1c2VkIHRvIGVuc3VyZSB3ZSBoYXZlIHRoZSBsYXRlc3QgdmVyc2lvbiwgdGhlcmUgY2FuIGJlIHRpbWVzIHdoZW4gdGhlIG9iamVjdCBiZWNvbWVzIGEgbGl0dGxlIG91dGRhdGVkLCByZXN1bHRpbmcgaW4gZXJyb3JzLlxuXHQgKiBJdCBhbHNvIGVuc3VyZXMgdGhhdCB0aGUga2V5IGNhY2hlIGlzIHVwZGF0ZWQuXG5cdCAqL1xuXHRhc3luYyByZWxvYWRVc2VyKCk6IFByb21pc2U8VXNlcj4ge1xuXHRcdGNvbnN0IHVzZXJJZCA9IHRoaXMudXNlckZhY2FkZS5nZXRMb2dnZWRJblVzZXIoKS5faWRcblxuXHRcdGF3YWl0IHRoaXMuZW50aXR5UmVzdENhY2hlLmRlbGV0ZUZyb21DYWNoZUlmRXhpc3RzKFVzZXJUeXBlUmVmLCBudWxsLCB1c2VySWQpXG5cblx0XHRjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5jYWNoaW5nRW50aXR5Q2xpZW50LmxvYWQoVXNlclR5cGVSZWYsIHVzZXJJZClcblx0XHRhd2FpdCB0aGlzLnVzZXJGYWNhZGUudXBkYXRlVXNlcih1c2VyKSAvLyB1cGRhdGVzIHRoZSBrZXkgY2FjaGUgdG9vXG5cblx0XHRyZXR1cm4gdXNlclxuXHR9XG5cblx0LyoqXG5cdCAqIFRyaWVzIHVwZGF0aW5nIHRoZSB1c2VyIGdyb3VwIGtleSBpbiB0aGUga2V5IGNhY2hlIGJ5IGxvYWRpbmcgYW5kIGRlY3J5cHRpbmcgdGhlIFVzZXJHcm91cEtleURpc3RyaWJ1dGlvbiBlbnRpdHkuXG5cdCAqL1xuXHRhc3luYyB0cnlVcGRhdGluZ1VzZXJHcm91cEtleSgpIHtcblx0XHQvLyB0aGlzIGhhbmRsZXMgdXBkYXRlcyBvZiB0aGUgdXNlciBncm91cCBrZXkgd2hpY2ggaXMgYWxzbyBzdG9yZWQgb24gdGhlIHVzZXIgYXMgYSBtZW1iZXJzaGlwXG5cdFx0Ly8gd2UgbWlnaHQgbm90IGhhdmUgYWNjZXNzIHRvIHRoZSBwYXNzd29yZCB0byBkZWNyeXB0IGl0LCB0aG91Z2guIHRoZXJlZm9yZSB3ZSBoYW5kbGUgaXQgaGVyZVxuXHRcdHRyeSB7XG5cdFx0XHQvLyBOb3RlIHRoYXQgVXNlckdyb3VwS2V5RGlzdHJpYnV0aW9uIGlzIG5ldmVyIGNhY2hlZCBpbiB0aGUgcmVzdCBjYWNoZS4gbm8gbmVlZCB0byBkZWxldGUgaXRcblx0XHRcdGNvbnN0IHVzZXJHcm91cEtleURpc3RyaWJ1dGlvbiA9IGF3YWl0IHRoaXMuY2FjaGluZ0VudGl0eUNsaWVudC5sb2FkKFVzZXJHcm91cEtleURpc3RyaWJ1dGlvblR5cGVSZWYsIHRoaXMudXNlckZhY2FkZS5nZXRVc2VyR3JvdXBJZCgpKVxuXHRcdFx0dGhpcy51c2VyRmFjYWRlLnVwZGF0ZVVzZXJHcm91cEtleSh1c2VyR3JvdXBLZXlEaXN0cmlidXRpb24pXG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Ly8gd2UgZG8gbm90IHdhbnQgdG8gZmFpbCBoZXJlLCBhcyB0aGlzIHVwZGF0ZSBtaWdodCBiZSBhbiBvdXRkYXRlZCBlbnRpdHkgdXBkYXRlXG5cdFx0XHQvLyBpbiBjYXNlIHdlIG9ubHkgcHJvY2VzcyB1cGRhdGVzIGFmdGVyIGEgbG9uZ2VyIHBlcmlvZCBvZiBiZWluZyBvZmZsaW5lXG5cdFx0XHQvLyBpbiBzdWNoIGNhc2Ugd2Ugc2hvdWxkIGhhdmUgc2V0IHRoZSBjb3JyZWN0IHVzZXIgZ3JvdXAga2V5IGFscmVhZHkgZHVyaW5nIHRoZSByZWd1bGFyIGxvZ2luXG5cdFx0XHRjb25zb2xlLmxvZyhcIkNvdWxkIG5vdCB1cGRhdGUgdXNlciBncm91cCBrZXlcIiwgZSlcblx0XHR9XG5cdH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBT0Esb0JBQW9CO0lBTVAsd0JBQU4sTUFBNEI7Q0FDbEMsWUFDa0JBLFlBQ0FDLHFCQUNBQyxpQkFDaEI7RUEwREYsS0E3RGtCO0VBNkRqQixLQTVEaUI7RUE0RGhCLEtBM0RnQjtDQUNkOzs7OztDQU1KLE1BQU0sZ0JBQWdCQyxTQUFvRDtFQUN6RSxNQUFNLFFBQVEsTUFBTSxLQUFLLFlBQVksUUFBUTtFQUM3QyxNQUFNLE9BQU8sTUFBTSxLQUFLLFlBQVk7QUFDcEMsTUFBSSxTQUFTLFNBQVMsS0FBSyxXQUFXLGdCQUFnQixDQUFDLENBQ3RELE9BQU0sS0FBSyx5QkFBeUI7QUFFckMsU0FBTztHQUFFO0dBQU07RUFBTztDQUN0Qjs7Ozs7Q0FNRCxNQUFNLFlBQVlBLFNBQTZCO0FBQzlDLFFBQU0sS0FBSyxnQkFBZ0Isd0JBQXdCLGNBQWMsTUFBTSxRQUFRO0FBQy9FLFNBQU8sTUFBTSxLQUFLLG9CQUFvQixLQUFLLGNBQWMsUUFBUTtDQUNqRTtDQU9ELE1BQU0sYUFBNEI7RUFDakMsTUFBTSxTQUFTLEtBQUssV0FBVyxpQkFBaUIsQ0FBQztBQUVqRCxRQUFNLEtBQUssZ0JBQWdCLHdCQUF3QixhQUFhLE1BQU0sT0FBTztFQUU3RSxNQUFNLE9BQU8sTUFBTSxLQUFLLG9CQUFvQixLQUFLLGFBQWEsT0FBTztBQUNyRSxRQUFNLEtBQUssV0FBVyxXQUFXLEtBQUs7QUFFdEMsU0FBTztDQUNQOzs7O0NBS0QsTUFBTSwwQkFBMEI7QUFHL0IsTUFBSTtHQUVILE1BQU0sMkJBQTJCLE1BQU0sS0FBSyxvQkFBb0IsS0FBSyxpQ0FBaUMsS0FBSyxXQUFXLGdCQUFnQixDQUFDO0FBQ3ZJLFFBQUssV0FBVyxtQkFBbUIseUJBQXlCO0VBQzVELFNBQVEsR0FBRztBQUlYLFdBQVEsSUFBSSxtQ0FBbUMsRUFBRTtFQUNqRDtDQUNEO0FBQ0QifQ==