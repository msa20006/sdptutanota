import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import { assertWorkerOrNode } from "./Env-chunk.js";
import "./dist2-chunk.js";
import { isSameId } from "./EntityUtils-chunk.js";
import "./TypeModels2-chunk.js";
import { GroupTypeRef, UserGroupKeyDistributionTypeRef, UserTypeRef } from "./TypeRefs2-chunk.js";

//#region src/common/api/worker/facades/lazy/CacheManagementFacade.ts
assertWorkerOrNode();
var CacheManagementFacade = class {
	constructor(userFacade, cachingEntityClient, entityRestCache) {
		this.userFacade = userFacade;
		this.cachingEntityClient = cachingEntityClient;
		this.entityRestCache = entityRestCache;
	}
	/**
	* Refreshes group and user (because of the memberships) in the rest cache and updates the key cache if possible.
	* @param groupId
	*/
	async refreshKeyCache(groupId) {
		const group = await this.reloadGroup(groupId);
		const user = await this.reloadUser();
		if (isSameId(groupId, this.userFacade.getUserGroupId())) await this.tryUpdatingUserGroupKey();
		return {
			user,
			group
		};
	}
	/**
	* Refreshes a group in the rest cache.
	* @param groupId
	*/
	async reloadGroup(groupId) {
		await this.entityRestCache.deleteFromCacheIfExists(GroupTypeRef, null, groupId);
		return await this.cachingEntityClient.load(GroupTypeRef, groupId);
	}
	async reloadUser() {
		const userId = this.userFacade.getLoggedInUser()._id;
		await this.entityRestCache.deleteFromCacheIfExists(UserTypeRef, null, userId);
		const user = await this.cachingEntityClient.load(UserTypeRef, userId);
		await this.userFacade.updateUser(user);
		return user;
	}
	/**
	* Tries updating the user group key in the key cache by loading and decrypting the UserGroupKeyDistribution entity.
	*/
	async tryUpdatingUserGroupKey() {
		try {
			const userGroupKeyDistribution = await this.cachingEntityClient.load(UserGroupKeyDistributionTypeRef, this.userFacade.getUserGroupId());
			this.userFacade.updateUserGroupKey(userGroupKeyDistribution);
		} catch (e) {
			console.log("Could not update user group key", e);
		}
	}
};

//#endregion
export { CacheManagementFacade };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FjaGVNYW5hZ2VtZW50RmFjYWRlLWNodW5rLmpzIiwibmFtZXMiOlsidXNlckZhY2FkZTogVXNlckZhY2FkZSIsImNhY2hpbmdFbnRpdHlDbGllbnQ6IEVudGl0eUNsaWVudCIsImVudGl0eVJlc3RDYWNoZTogRGVmYXVsdEVudGl0eVJlc3RDYWNoZSIsImdyb3VwSWQ6IElkIl0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9hcGkvd29ya2VyL2ZhY2FkZXMvbGF6eS9DYWNoZU1hbmFnZW1lbnRGYWNhZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JvdXAsIEdyb3VwVHlwZVJlZiwgVXNlciwgVXNlckdyb3VwS2V5RGlzdHJpYnV0aW9uVHlwZVJlZiwgVXNlclR5cGVSZWYgfSBmcm9tIFwiLi4vLi4vLi4vZW50aXRpZXMvc3lzL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IEVudGl0eUNsaWVudCB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vRW50aXR5Q2xpZW50LmpzXCJcbmltcG9ydCB7IGFzc2VydFdvcmtlck9yTm9kZSB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vRW52LmpzXCJcbmltcG9ydCB7IFVzZXJGYWNhZGUgfSBmcm9tIFwiLi4vVXNlckZhY2FkZS5qc1wiXG5pbXBvcnQgeyBEZWZhdWx0RW50aXR5UmVzdENhY2hlIH0gZnJvbSBcIi4uLy4uL3Jlc3QvRGVmYXVsdEVudGl0eVJlc3RDYWNoZS5qc1wiXG5pbXBvcnQgeyBpc1NhbWVJZCB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdXRpbHMvRW50aXR5VXRpbHMuanNcIlxuXG5hc3NlcnRXb3JrZXJPck5vZGUoKVxuXG4vKipcbiAqIFRoaXMgZmFjYWRlIGlzIHJlc3BvbnNpYmxlIGZvciBoYW5kbGluZyBjYXNlcyB3aGVyZSB3ZSBuZWVkIHRvIG1hbnVhbGx5IHVwZGF0ZSBhbiBlbnRpdHkgaW4gdGhlIHJlc3QgY2FjaGUuXG4gKiBJdCBpcyBhbHNvIHN1aXRhYmxlIHRvIG1hbnVhbGx5IGVuc3VyZSBjb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZSByZXN0IGNhY2hlIGFuZCB0aGUga2V5IGNhY2hlLlxuICovXG5leHBvcnQgY2xhc3MgQ2FjaGVNYW5hZ2VtZW50RmFjYWRlIHtcblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSByZWFkb25seSB1c2VyRmFjYWRlOiBVc2VyRmFjYWRlLFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgY2FjaGluZ0VudGl0eUNsaWVudDogRW50aXR5Q2xpZW50LFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgZW50aXR5UmVzdENhY2hlOiBEZWZhdWx0RW50aXR5UmVzdENhY2hlLFxuXHQpIHt9XG5cblx0LyoqXG5cdCAqIFJlZnJlc2hlcyBncm91cCBhbmQgdXNlciAoYmVjYXVzZSBvZiB0aGUgbWVtYmVyc2hpcHMpIGluIHRoZSByZXN0IGNhY2hlIGFuZCB1cGRhdGVzIHRoZSBrZXkgY2FjaGUgaWYgcG9zc2libGUuXG5cdCAqIEBwYXJhbSBncm91cElkXG5cdCAqL1xuXHRhc3luYyByZWZyZXNoS2V5Q2FjaGUoZ3JvdXBJZDogSWQpOiBQcm9taXNlPHsgdXNlcjogVXNlcjsgZ3JvdXA6IEdyb3VwIH0+IHtcblx0XHRjb25zdCBncm91cCA9IGF3YWl0IHRoaXMucmVsb2FkR3JvdXAoZ3JvdXBJZClcblx0XHRjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5yZWxvYWRVc2VyKClcblx0XHRpZiAoaXNTYW1lSWQoZ3JvdXBJZCwgdGhpcy51c2VyRmFjYWRlLmdldFVzZXJHcm91cElkKCkpKSB7XG5cdFx0XHRhd2FpdCB0aGlzLnRyeVVwZGF0aW5nVXNlckdyb3VwS2V5KClcblx0XHR9XG5cdFx0cmV0dXJuIHsgdXNlciwgZ3JvdXAgfVxuXHR9XG5cblx0LyoqXG5cdCAqIFJlZnJlc2hlcyBhIGdyb3VwIGluIHRoZSByZXN0IGNhY2hlLlxuXHQgKiBAcGFyYW0gZ3JvdXBJZFxuXHQgKi9cblx0YXN5bmMgcmVsb2FkR3JvdXAoZ3JvdXBJZDogSWQpOiBQcm9taXNlPEdyb3VwPiB7XG5cdFx0YXdhaXQgdGhpcy5lbnRpdHlSZXN0Q2FjaGUuZGVsZXRlRnJvbUNhY2hlSWZFeGlzdHMoR3JvdXBUeXBlUmVmLCBudWxsLCBncm91cElkKVxuXHRcdHJldHVybiBhd2FpdCB0aGlzLmNhY2hpbmdFbnRpdHlDbGllbnQubG9hZChHcm91cFR5cGVSZWYsIGdyb3VwSWQpXG5cdH1cblxuXHQvKlxuXHQgKiBEZWxldGVzIHRoZSBsb2dnZWQtaW4gdXNlciBmcm9tIHRoZSBjYWNoZSwgYW5kIHJlbG9hZHMgYW5kIHJldHVybnMgdGhlIG5ldyB1c2VyIG9iamVjdC5cblx0ICogSXMgdXNlZCB0byBlbnN1cmUgd2UgaGF2ZSB0aGUgbGF0ZXN0IHZlcnNpb24sIHRoZXJlIGNhbiBiZSB0aW1lcyB3aGVuIHRoZSBvYmplY3QgYmVjb21lcyBhIGxpdHRsZSBvdXRkYXRlZCwgcmVzdWx0aW5nIGluIGVycm9ycy5cblx0ICogSXQgYWxzbyBlbnN1cmVzIHRoYXQgdGhlIGtleSBjYWNoZSBpcyB1cGRhdGVkLlxuXHQgKi9cblx0YXN5bmMgcmVsb2FkVXNlcigpOiBQcm9taXNlPFVzZXI+IHtcblx0XHRjb25zdCB1c2VySWQgPSB0aGlzLnVzZXJGYWNhZGUuZ2V0TG9nZ2VkSW5Vc2VyKCkuX2lkXG5cblx0XHRhd2FpdCB0aGlzLmVudGl0eVJlc3RDYWNoZS5kZWxldGVGcm9tQ2FjaGVJZkV4aXN0cyhVc2VyVHlwZVJlZiwgbnVsbCwgdXNlcklkKVxuXG5cdFx0Y29uc3QgdXNlciA9IGF3YWl0IHRoaXMuY2FjaGluZ0VudGl0eUNsaWVudC5sb2FkKFVzZXJUeXBlUmVmLCB1c2VySWQpXG5cdFx0YXdhaXQgdGhpcy51c2VyRmFjYWRlLnVwZGF0ZVVzZXIodXNlcikgLy8gdXBkYXRlcyB0aGUga2V5IGNhY2hlIHRvb1xuXG5cdFx0cmV0dXJuIHVzZXJcblx0fVxuXG5cdC8qKlxuXHQgKiBUcmllcyB1cGRhdGluZyB0aGUgdXNlciBncm91cCBrZXkgaW4gdGhlIGtleSBjYWNoZSBieSBsb2FkaW5nIGFuZCBkZWNyeXB0aW5nIHRoZSBVc2VyR3JvdXBLZXlEaXN0cmlidXRpb24gZW50aXR5LlxuXHQgKi9cblx0YXN5bmMgdHJ5VXBkYXRpbmdVc2VyR3JvdXBLZXkoKSB7XG5cdFx0Ly8gdGhpcyBoYW5kbGVzIHVwZGF0ZXMgb2YgdGhlIHVzZXIgZ3JvdXAga2V5IHdoaWNoIGlzIGFsc28gc3RvcmVkIG9uIHRoZSB1c2VyIGFzIGEgbWVtYmVyc2hpcFxuXHRcdC8vIHdlIG1pZ2h0IG5vdCBoYXZlIGFjY2VzcyB0byB0aGUgcGFzc3dvcmQgdG8gZGVjcnlwdCBpdCwgdGhvdWdoLiB0aGVyZWZvcmUgd2UgaGFuZGxlIGl0IGhlcmVcblx0XHR0cnkge1xuXHRcdFx0Ly8gTm90ZSB0aGF0IFVzZXJHcm91cEtleURpc3RyaWJ1dGlvbiBpcyBuZXZlciBjYWNoZWQgaW4gdGhlIHJlc3QgY2FjaGUuIG5vIG5lZWQgdG8gZGVsZXRlIGl0XG5cdFx0XHRjb25zdCB1c2VyR3JvdXBLZXlEaXN0cmlidXRpb24gPSBhd2FpdCB0aGlzLmNhY2hpbmdFbnRpdHlDbGllbnQubG9hZChVc2VyR3JvdXBLZXlEaXN0cmlidXRpb25UeXBlUmVmLCB0aGlzLnVzZXJGYWNhZGUuZ2V0VXNlckdyb3VwSWQoKSlcblx0XHRcdHRoaXMudXNlckZhY2FkZS51cGRhdGVVc2VyR3JvdXBLZXkodXNlckdyb3VwS2V5RGlzdHJpYnV0aW9uKVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdC8vIHdlIGRvIG5vdCB3YW50IHRvIGZhaWwgaGVyZSwgYXMgdGhpcyB1cGRhdGUgbWlnaHQgYmUgYW4gb3V0ZGF0ZWQgZW50aXR5IHVwZGF0ZVxuXHRcdFx0Ly8gaW4gY2FzZSB3ZSBvbmx5IHByb2Nlc3MgdXBkYXRlcyBhZnRlciBhIGxvbmdlciBwZXJpb2Qgb2YgYmVpbmcgb2ZmbGluZVxuXHRcdFx0Ly8gaW4gc3VjaCBjYXNlIHdlIHNob3VsZCBoYXZlIHNldCB0aGUgY29ycmVjdCB1c2VyIGdyb3VwIGtleSBhbHJlYWR5IGR1cmluZyB0aGUgcmVndWxhciBsb2dpblxuXHRcdFx0Y29uc29sZS5sb2coXCJDb3VsZCBub3QgdXBkYXRlIHVzZXIgZ3JvdXAga2V5XCIsIGUpXG5cdFx0fVxuXHR9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU9BLG9CQUFvQjtJQU1QLHdCQUFOLE1BQTRCO0NBQ2xDLFlBQ2tCQSxZQUNBQyxxQkFDQUMsaUJBQ2hCO0VBMERGLEtBN0RrQjtFQTZEakIsS0E1RGlCO0VBNERoQixLQTNEZ0I7Q0FDZDs7Ozs7Q0FNSixNQUFNLGdCQUFnQkMsU0FBb0Q7RUFDekUsTUFBTSxRQUFRLE1BQU0sS0FBSyxZQUFZLFFBQVE7RUFDN0MsTUFBTSxPQUFPLE1BQU0sS0FBSyxZQUFZO0FBQ3BDLE1BQUksU0FBUyxTQUFTLEtBQUssV0FBVyxnQkFBZ0IsQ0FBQyxDQUN0RCxPQUFNLEtBQUsseUJBQXlCO0FBRXJDLFNBQU87R0FBRTtHQUFNO0VBQU87Q0FDdEI7Ozs7O0NBTUQsTUFBTSxZQUFZQSxTQUE2QjtBQUM5QyxRQUFNLEtBQUssZ0JBQWdCLHdCQUF3QixjQUFjLE1BQU0sUUFBUTtBQUMvRSxTQUFPLE1BQU0sS0FBSyxvQkFBb0IsS0FBSyxjQUFjLFFBQVE7Q0FDakU7Q0FPRCxNQUFNLGFBQTRCO0VBQ2pDLE1BQU0sU0FBUyxLQUFLLFdBQVcsaUJBQWlCLENBQUM7QUFFakQsUUFBTSxLQUFLLGdCQUFnQix3QkFBd0IsYUFBYSxNQUFNLE9BQU87RUFFN0UsTUFBTSxPQUFPLE1BQU0sS0FBSyxvQkFBb0IsS0FBSyxhQUFhLE9BQU87QUFDckUsUUFBTSxLQUFLLFdBQVcsV0FBVyxLQUFLO0FBRXRDLFNBQU87Q0FDUDs7OztDQUtELE1BQU0sMEJBQTBCO0FBRy9CLE1BQUk7R0FFSCxNQUFNLDJCQUEyQixNQUFNLEtBQUssb0JBQW9CLEtBQUssaUNBQWlDLEtBQUssV0FBVyxnQkFBZ0IsQ0FBQztBQUN2SSxRQUFLLFdBQVcsbUJBQW1CLHlCQUF5QjtFQUM1RCxTQUFRLEdBQUc7QUFJWCxXQUFRLElBQUksbUNBQW1DLEVBQUU7RUFDakQ7Q0FDRDtBQUNEIn0=