import { companyTeamLabel } from "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { NBSP, noOp } from "./dist2-chunk.js";
import { isColorLight, theme } from "./theme-chunk.js";
import { MailSetKind, MailState, ReplyType, getMailFolderType } from "./TutanotaConstants-chunk.js";
import { px, size } from "./size-chunk.js";
import { colorForBg, pureComponent } from "./Dialog-chunk.js";
import { formatTimeOrDateOrYesterday } from "./Formatter-chunk.js";
import { SelectableRowContainer, checkboxOpacity, scaleXHide, scaleXShow, selectableRowAnimParams, setVisibility, shouldAlwaysShowMultiselectCheckbox } from "./SelectableRowContainer-chunk.js";
import { mailLocator } from "./mailLocator-chunk.js";
import { getConfidentialFontIcon, isTutanotaTeamMail } from "./MailGuiUtils-chunk.js";
import { FontIcons } from "./FontIcons-chunk.js";
import { getSenderOrRecipientHeading } from "./MailViewerViewModel-chunk.js";
import { Badge } from "./Badge-chunk.js";

//#region src/common/gui/base/Label.ts
const supportsRelativeHslColors = CSS.supports("color", `hsl(from #ccc h calc(min(50, s)) l)`);
function getLabelColor(backgroundColor) {
	const labelColor = backgroundColor ?? theme.content_accent;
	const isDarkTheme = !isColorLight(theme.content_bg);
	return isDarkTheme ? limitedSaturationColor(labelColor) : labelColor;
}
function limitedSaturationColor(color) {
	return supportsRelativeHslColors ? `hsl(from ${color} h calc(min(50, s)) l)` : `hsl(from ${color} h calc(min(50%, s)) l)`;
}
const Label = pureComponent(function Label$1({ text, color }) {
	const labelColor = getLabelColor(color);
	return mithril_default("span.small.text-center.text-ellipsis.border-radius-m", { style: {
		backgroundColor: labelColor,
		color: colorForBg(color ?? theme.content_accent),
		padding: `1px ${size.vpad_xsm}px`
	} }, text);
});

//#endregion
//#region src/mail-app/mail/view/MailRow.ts
const iconMap = {
	[MailSetKind.CUSTOM]: FontIcons.Folder,
	[MailSetKind.INBOX]: FontIcons.Inbox,
	[MailSetKind.SENT]: FontIcons.Sent,
	[MailSetKind.TRASH]: FontIcons.Trash,
	[MailSetKind.ARCHIVE]: FontIcons.Archive,
	[MailSetKind.SPAM]: FontIcons.Spam,
	[MailSetKind.DRAFT]: FontIcons.Draft,
	[MailSetKind.ALL]: FontIcons.Folder,
	[MailSetKind.LABEL]: FontIcons.Folder,
	[MailSetKind.Imported]: FontIcons.Folder
};
const MAIL_ROW_V_MARGIN = 3;
const shiftByForCheckbox = px(10);
const translateXHide = "translateX(0)";
const translateXShow = `translateX(${shiftByForCheckbox})`;
const ELLIPSIS = "â€¦";
const MAX_DISPLAYED_LABELS = 6;
var MailRow = class {
	top;
	domElement = null;
	entity = null;
	subjectDom;
	senderDom;
	dateDom;
	iconsDom;
	unreadDom;
	teamLabelDom;
	labelsDom = [];
	moreLabelsIndicatorDom;
	checkboxDom;
	checkboxWasVisible = shouldAlwaysShowMultiselectCheckbox();
	selectionSetter;
	constructor(showFolderIcon, getLabelsForMail, onSelected) {
		this.showFolderIcon = showFolderIcon;
		this.getLabelsForMail = getLabelsForMail;
		this.onSelected = onSelected;
		this.top = 0;
		this.entity = null;
	}
	update(mail, selected, isInMultiSelect) {
		this.entity = mail;
		this.selectionSetter(selected, isInMultiSelect);
		this.checkboxDom.checked = isInMultiSelect && selected;
		this.iconsDom.textContent = this.iconsText(mail);
		this.dateDom.textContent = formatTimeOrDateOrYesterday(mail.receivedDate);
		this.senderDom.textContent = getSenderOrRecipientHeading(mail, true);
		this.subjectDom.textContent = mail.subject || NBSP;
		if (mail.unread) {
			this.unreadDom.classList.remove("hidden");
			this.subjectDom.classList.add("b");
			this.senderDom.classList.add("b");
		} else {
			this.unreadDom.classList.add("hidden");
			this.subjectDom.classList.remove("b");
			this.senderDom.classList.remove("b");
		}
		this.updateLabels(mail);
		setVisibility(this.teamLabelDom, isTutanotaTeamMail(mail));
		this.showCheckboxAnimated(shouldAlwaysShowMultiselectCheckbox() || isInMultiSelect);
		checkboxOpacity(this.checkboxDom, selected);
	}
	updateLabels(mail) {
		const labels = this.getLabelsForMail(mail);
		for (const [i, element] of this.labelsDom.entries()) {
			const label = labels[i];
			if (label) {
				element.style.display = "";
				element.style.backgroundColor = getLabelColor(label.color);
				element.style.color = colorForBg(label.color ?? theme.content_accent);
				element.textContent = label.name;
			} else element.style.display = "none";
		}
		this.moreLabelsIndicatorDom.style.display = labels.length > this.labelsDom.length ? "" : "none";
	}
	showCheckboxAnimated(show) {
		const shouldShowCheckbox = show;
		if (this.checkboxWasVisible === shouldShowCheckbox) return;
		if (shouldShowCheckbox) {
			this.senderDom.style.paddingRight = shiftByForCheckbox;
			this.subjectDom.style.paddingRight = shiftByForCheckbox;
			const showTranslateTransform = { transform: [translateXHide, translateXShow] };
			const senderAnim = this.senderDom.animate(showTranslateTransform, selectableRowAnimParams);
			const subjectAnim = this.subjectDom.animate(showTranslateTransform, selectableRowAnimParams);
			const badgeAnim = this.teamLabelDom.animate(showTranslateTransform, selectableRowAnimParams);
			const checkboxAnim = this.checkboxDom.animate({ transform: [scaleXHide, scaleXShow] }, selectableRowAnimParams);
			Promise.all([
				senderAnim.finished,
				subjectAnim.finished,
				checkboxAnim.finished
			]).then(() => {
				this.showCheckbox(true);
				senderAnim.cancel();
				subjectAnim.cancel();
				badgeAnim.cancel();
				checkboxAnim.cancel();
			}, noOp);
		} else {
			this.senderDom.style.paddingRight = "0";
			this.subjectDom.style.paddingRight = "0";
			const hideTranslateTransform = { transform: [translateXShow, translateXHide] };
			const senderAnim = this.senderDom.animate(hideTranslateTransform, selectableRowAnimParams);
			const subjectAnim = this.subjectDom.animate(hideTranslateTransform, selectableRowAnimParams);
			const badgeAnim = this.teamLabelDom.animate(hideTranslateTransform, selectableRowAnimParams);
			const checkboxAnim = this.checkboxDom.animate({ transform: [scaleXShow, scaleXHide] }, selectableRowAnimParams);
			Promise.all([
				senderAnim.finished,
				subjectAnim.finished,
				checkboxAnim.finished
			]).then(() => {
				this.showCheckbox(false);
				senderAnim.cancel();
				subjectAnim.cancel();
				badgeAnim.cancel();
				checkboxAnim.cancel();
			}, noOp);
		}
		this.checkboxWasVisible = shouldShowCheckbox;
	}
	showCheckbox(show) {
		let translate;
		let scale;
		let padding;
		if (show) {
			translate = translateXShow;
			scale = scaleXShow;
			padding = shiftByForCheckbox;
		} else {
			translate = translateXHide;
			scale = scaleXHide;
			padding = "0";
		}
		this.senderDom.style.transform = translate;
		this.subjectDom.style.transform = translate;
		this.teamLabelDom.style.transform = translate;
		this.checkboxDom.style.transform = scale;
		this.senderDom.style.paddingRight = padding;
		this.subjectDom.style.paddingRight = padding;
		this.checkboxDom.disabled = !show;
		this.checkboxDom.tabIndex = show ? 0 : -1;
	}
	/**
	* Only the structure is managed by mithril. We set all contents on our own (see update) in order to avoid the vdom overhead (not negligible on mobiles)
	*/
	render() {
		return mithril_default(SelectableRowContainer, {
			onSelectedChangeRef: (changer) => {
				this.selectionSetter = changer;
			},
			oncreate: (vnode) => {
				this.domElement = vnode.dom;
				Promise.resolve().then(() => this.showCheckbox(shouldAlwaysShowMultiselectCheckbox()));
			}
		}, [mithril_default(".flex.col.items-center.flex-no-grow.no-shrink.pt-xs.abs", mithril_default("input.checkbox.list-checkbox", {
			type: "checkbox",
			style: {
				marginBottom: "7px",
				transformOrigin: "left"
			},
			onclick: (e) => {
				e.stopPropagation();
			},
			onchange: () => {
				if (this.entity) this.onSelected(this.entity, this.checkboxDom.checked);
			},
			oncreate: (vnode) => {
				this.checkboxDom = vnode.dom;
				checkboxOpacity(this.checkboxDom, false);
			}
		}), mithril_default(".dot.bg-accent-fg.hidden", {
			style: { marginTop: px(MAIL_ROW_V_MARGIN) },
			oncreate: (vnode) => this.unreadDom = vnode.dom
		})), mithril_default(".flex-grow.min-width-0", { style: { marginLeft: px(size.checkbox_size + size.vpad_xs) } }, [mithril_default(".flex.badge-line-height", [
			mithril_default(Badge, {
				classes: ".small.mr-s",
				oncreate: (vnode) => this.teamLabelDom = vnode.dom
			}, companyTeamLabel),
			mithril_default(".text-ellipsis", { oncreate: (vnode) => this.senderDom = vnode.dom }),
			mithril_default(".flex.flex-grow-shrink-0.justify-end", { style: { minWidth: px(34) } }, this.renderLabels(), this.renderLabelsMoreIndicator()),
			mithril_default("small.text-ellipsis.flex-fixed", { oncreate: (vnode) => this.dateDom = vnode.dom })
		]), mithril_default(".flex.mt-xxs", [
			mithril_default(".smaller.text-ellipsis", { oncreate: (vnode) => this.subjectDom = vnode.dom }),
			mithril_default(".flex-grow"),
			mithril_default("span.ion.ml-s.list-font-icons", { oncreate: (vnode) => this.iconsDom = vnode.dom })
		])])]);
	}
	renderLabelsMoreIndicator() {
		return mithril_default("span.smaller.text-center.text-ellipsis.border-radius-m", {
			style: {
				border: `2px solid ${getLabelColor(theme.content_button)}`,
				color: getLabelColor(theme.content_button),
				padding: `0px ${size.vpad_xsm}px 1px`,
				marginRight: px(size.vpad_xsm),
				minWidth: px(16),
				lineHeight: px(8)
			},
			oncreate: (vnode) => {
				this.moreLabelsIndicatorDom = vnode.dom;
			}
		}, ELLIPSIS);
	}
	renderLabels() {
		return mithril_default(".flex.overflow-hidden", { style: {
			margin: `0 ${size.vpad_xsm}px`,
			columnGap: px(size.vpad_xsm),
			maxWidth: "fit-content"
		} }, Array(MAX_DISPLAYED_LABELS).fill(0).map((_, i) => mithril_default("span.small.text-center.text-ellipsis.border-radius-m", {
			style: {
				padding: `2px ${size.vpad_xsm}px`,
				minWidth: "4ch",
				maxWidth: px(48),
				lineHeight: "100%",
				textOverflow: "'â€¥'"
			},
			oncreate: (vnode) => {
				this.labelsDom[i] = vnode.dom;
			}
		})));
	}
	iconsText(mail) {
		let iconText = "";
		if (this.showFolderIcon) {
			let folder = mailLocator.mailModel.getMailFolderForMail(mail);
			iconText += folder ? this.folderIcon(getMailFolderType(folder)) : "";
		}
		iconText += mail._errors ? FontIcons.Warning : "";
		if (mail.state === MailState.DRAFT) iconText += FontIcons.Edit;
		switch (mail.replyType) {
			case ReplyType.REPLY:
				iconText += FontIcons.Reply;
				break;
			case ReplyType.FORWARD:
				iconText += FontIcons.Forward;
				break;
			case ReplyType.REPLY_FORWARD:
				iconText += FontIcons.Reply;
				iconText += FontIcons.Forward;
				break;
		}
		if (mail.confidential) iconText += getConfidentialFontIcon(mail);
		if (mail.attachments.length > 0) iconText += FontIcons.Attach;
		return iconText;
	}
	folderIcon(type) {
		return iconMap[type];
	}
};

//#endregion
export { Label, MailRow, getLabelColor };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,