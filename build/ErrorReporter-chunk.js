import { __toESM } from "./chunk-chunk.js";
import { Mode, isApp, isDesktop } from "./Env-chunk.js";
import { ErrorReportClientType, client } from "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { downcast, errorToString, neverNull, typedKeys, uint8ArrayToString } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { AccountType, ConversationType, Keys, MailMethod } from "./TutanotaConstants-chunk.js";
import { px } from "./size-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { createLogFile } from "./Logger-chunk.js";
import { Button, ButtonType } from "./Button-chunk.js";
import { Dialog, DialogType, TextField, TextFieldType } from "./Dialog-chunk.js";
import { convertTextToHtml } from "./Formatter-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { RecipientType } from "./Recipient-chunk.js";
import { show } from "./NotificationOverlay-chunk.js";
import { Checkbox } from "./Checkbox-chunk.js";
import { ExpanderButton, ExpanderPanel } from "./Expander-chunk.js";
import { copyToClipboard } from "./ClipboardUtils-chunk.js";
import { ReportErrorService, createErrorReportData, createErrorReportFile, createReportErrorIn } from "./Services4-chunk.js";
import { BubbleButton } from "./BubbleButton-chunk.js";

//#region src/common/misc/ErrorReporter.ts
var import_stream = __toESM(require_stream(), 1);
async function showErrorNotification(e) {
	const loggedIn = locator.logins.isUserLoggedIn();
	const logs = await getLogAttachments();
	const { decision, ignore } = await showErrorOverlay();
	if (decision === "cancel") return { ignored: ignore };
	const preparedContent = prepareFeedbackContent(e, loggedIn);
	const reportDialogResult = await showReportDialog(preparedContent.subject, preparedContent.message, logs);
	if (reportDialogResult.decision === "cancel") return { ignored: ignore };
	preparedContent.logs = reportDialogResult.sendLogs ? logs : [];
	preparedContent.message = reportDialogResult.userMessage + "\n" + preparedContent.message;
	sendToServer(e, reportDialogResult.userMessage, reportDialogResult.sendLogs ? logs : []);
	sendFeedbackMail(preparedContent);
	return { ignored: ignore };
}
async function showErrorOverlay() {
	let ignore = false;
	const decision = await new Promise((resolve) => {
		show({ view: () => mithril_default("", ["An error occurred", mithril_default(Checkbox, {
			label: () => "Ignore the error for this session",
			checked: ignore,
			onChecked: (checked) => ignore = checked
		})]) }, {
			label: "close_alt",
			click: () => resolve("cancel")
		}, [{
			label: "sendReport_label",
			click: () => resolve("send"),
			type: ButtonType.Secondary
		}]);
	});
	return {
		decision,
		ignore
	};
}
function showReportDialog(subject, message, logs) {
	let sendLogs = true;
	let detailsExpanded = false;
	let userMessage = "";
	const dialogContent = { view: () => {
		return [
			mithril_default(TextField, {
				label: "yourMessage_label",
				helpLabel: () => lang.get("feedbackOnErrorInfo_msg"),
				value: userMessage,
				type: TextFieldType.Area,
				oninput: (value) => userMessage = value
			}),
			mithril_default(Checkbox, {
				label: () => lang.get("sendLogs_action"),
				helpLabel: "sendLogsInfo_msg",
				checked: sendLogs,
				onChecked: (checked) => sendLogs = checked
			}),
			mithril_default(".flex.flex-column.space-around.items-center", logs.map((l) => mithril_default(BubbleButton, {
				label: lang.makeTranslation("filename", l.name),
				onclick: () => showLogDialog(l.name, uint8ArrayToString("utf-8", l.data))
			}))),
			mithril_default(".flex-end", mithril_default(".right", mithril_default(ExpanderButton, {
				label: "details_label",
				expanded: detailsExpanded,
				onExpandedChange: (expanded) => detailsExpanded = expanded
			}))),
			mithril_default(ExpanderPanel, { expanded: detailsExpanded }, mithril_default(".selectable", [mithril_default(".selectable", subject), message.split("\n").map((l) => l.trim() === "" ? mithril_default(".pb", "") : mithril_default("", l))]))
		];
	} };
	return new Promise((resolve) => {
		Dialog.showActionDialog({
			okActionTextId: "send_action",
			title: "sendErrorReport_action",
			type: DialogType.EditMedium,
			child: dialogContent,
			okAction: (dialog) => {
				resolve({
					decision: "send",
					sendLogs,
					userMessage
				});
				dialog.close();
			},
			cancelAction: () => resolve({ decision: "cancel" })
		});
	});
}
/**
* show the contents of a log file in a large dialog.
* @param heading the title of the dialog
* @param text the text to display
*/
async function showLogDialog(heading, text) {
	let logDialog;
	const closeLogDialog = () => logDialog?.close();
	logDialog = Dialog.largeDialog({
		right: [{
			label: "ok_action",
			click: closeLogDialog,
			type: ButtonType.Secondary
		}],
		middle: lang.makeTranslation("heading", heading)
	}, { view: () => mithril_default(".white-space-pre.pt.pb.selectable", text) }).addShortcut({
		key: Keys.ESC,
		exec: closeLogDialog,
		help: "close_alt"
	}).setCloseHandler(closeLogDialog).show();
}
async function showErrorDialogNotLoggedIn(e) {
	const content = prepareFeedbackContent(e, false);
	const expanded = (0, import_stream.default)(false);
	const message = content.subject + "\n\n" + content.message;
	const info = () => [mithril_default(".flex.col.items-end.plr", { style: { marginTop: "-16px" } }, [mithril_default("div.mr-negative-xs", mithril_default(ExpanderButton, {
		expanded: expanded(),
		onExpandedChange: expanded,
		label: "showMore_action"
	}))]), mithril_default(ExpanderPanel, { expanded: expanded() }, [mithril_default(".flex-end.plr", mithril_default(Button, {
		label: "copy_action",
		click: () => copyToClipboard(message),
		type: ButtonType.Secondary
	})), mithril_default(".plr.selectable.pb.scroll.text-pre", { style: { height: px(200) } }, message)])];
	return Dialog.message("unknownError_msg", info);
}
async function sendFeedbackMail(content) {
	const name = "";
	const mailAddress = "reports@tutao.de";
	const escapedBody = new Option(content.message).innerHTML;
	const logins = locator.logins;
	const draft = await locator.mailFacade.createDraft({
		subject: content.subject,
		bodyText: convertTextToHtml(escapedBody),
		senderMailAddress: neverNull(logins.getUserController().userGroupInfo.mailAddress),
		senderName: "",
		toRecipients: [{
			name,
			address: mailAddress
		}],
		ccRecipients: [],
		bccRecipients: [],
		conversationType: ConversationType.NEW,
		previousMessageId: null,
		attachments: content.logs,
		confidential: true,
		replyTos: [],
		method: MailMethod.NONE
	});
	await locator.mailFacade.sendDraft(draft, [{
		name,
		address: mailAddress,
		type: RecipientType.INTERNAL,
		contact: null
	}], "de");
}
async function sendToServer(error, userMessage, logs) {
	function getReportingClientType() {
		if (env.mode === Mode.Browser) return ErrorReportClientType.Browser;
else switch (env.platformId) {
			case "ios": return ErrorReportClientType.Ios;
			case "android": return ErrorReportClientType.Android;
			case "darwin": return ErrorReportClientType.MacOS;
			case "linux": return ErrorReportClientType.Linux;
			case "win32": return ErrorReportClientType.Windows;
			default: return ErrorReportClientType.Linux;
		}
	}
	const clientType = getReportingClientType();
	const errorData = createReportErrorIn({
		data: createErrorReportData({
			clientType,
			appVersion: env.versionNumber,
			userId: locator.logins.getUserController().userId,
			errorClass: error.name ?? "?",
			errorMessage: error.message,
			userMessage,
			stackTrace: error.stack ?? "",
			additionalInfo: client.userAgent,
			time: new Date()
		}),
		files: logs.map((log) => {
			const stringData = uint8ArrayToString("utf-8", log.data);
			return createErrorReportFile({
				name: log.name,
				content: stringData
			});
		})
	});
	await locator.serviceExecutor.post(ReportErrorService, errorData);
}
function prepareFeedbackContent(error, loggedIn) {
	const timestamp = new Date();
	let { message, client: client$1, type } = clientInfoString(timestamp, loggedIn);
	if (error) message += errorToString(error);
	const subject = `Feedback v${env.versionNumber} - ${error && error.name ? error.name : "?"} - ${type} - ${client$1}`;
	return {
		message,
		subject,
		logs: []
	};
}
function clientInfoString(timestamp, loggedIn) {
	const type = loggedIn ? neverNull(typedKeys(AccountType).find((typeName) => AccountType[typeName] === locator.logins.getUserController().user.accountType)) : "UNKNOWN";
	const client$1 = (() => {
		switch (env.mode) {
			case Mode.Browser:
			case Mode.Test: return env.mode;
			default: return env.platformId ?? "";
		}
	})();
	let message = `\n\n Client: ${client$1}`;
	message += `\n Type: ${type}`;
	message += `\n Tutanota version: ${env.versionNumber}`;
	message += `\n Timestamp (UTC): ${timestamp.toUTCString()}`;
	message += `\n User agent:\n${navigator.userAgent}` + "\n";
	return {
		message,
		client: client$1,
		type
	};
}
async function getLogAttachments(timestamp) {
	const logs = [];
	const global = downcast(window);
	if (global.logger) {
		const mainEntries = global.logger.getEntries();
		const mainLogFile = createLogFile(mainEntries.join("\n"), "main", timestamp?.getTime());
		logs.push(mainLogFile);
		const workerLogEntries = await locator.workerFacade.getLog();
		const workerLogFile = await createLogFile(workerLogEntries.join("\n"), "worker", timestamp?.getTime());
		logs.push(workerLogFile);
	}
	if (isDesktop() || isApp()) {
		const nativeLog = await locator.commonSystemFacade.getLog();
		const nativeLogFile = createLogFile(nativeLog, isDesktop() ? "desktop" : "device", timestamp?.getTime());
		logs.push(nativeLogFile);
	}
	return logs;
}

//#endregion
export { clientInfoString, getLogAttachments, sendFeedbackMail, showErrorDialogNotLoggedIn, showErrorNotification };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,