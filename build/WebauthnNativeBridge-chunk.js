import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import { assertNotNull, defer } from "./dist2-chunk.js";
import "./ParserCombinator-chunk.js";
import "./ErrorUtils-chunk.js";
import "./RestError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import { MessageDispatcher, Request } from "./MessageDispatcher-chunk.js";
import { exposeLocalDelayed } from "./WorkerProxy-chunk.js";
import { DesktopNativeTransport } from "./DesktopNativeTransport-chunk.js";

//#region src/common/native/main/WebauthnNativeBridge.ts
var WebauthnNativeBridge = class {
	dispatcher;
	impl = defer();
	constructor() {
		const nativeApp = assertNotNull(window.nativeAppWebDialog);
		const transport = new DesktopNativeTransport(nativeApp);
		const that = this;
		const commands = { facade: exposeLocalDelayed({ WebAuthnFacade() {
			return that.impl.promise;
		} }) };
		this.dispatcher = new MessageDispatcher(transport, commands, "webauthn-node");
	}
	async init(impl) {
		this.impl.resolve(impl);
		return this.dispatcher.postRequest(new Request("init", []));
	}
};

//#endregion
export { WebauthnNativeBridge };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViYXV0aG5OYXRpdmVCcmlkZ2UtY2h1bmsuanMiLCJuYW1lcyI6WyJ0cmFuc3BvcnQ6IERlc2t0b3BOYXRpdmVUcmFuc3BvcnQ8V2ViVG9OYXRpdmVSZXF1ZXN0LCBOYXRpdmVUb1dlYlJlcXVlc3Q+IiwiY29tbWFuZHM6IENvbW1hbmRzPE5hdGl2ZVRvV2ViUmVxdWVzdD4iLCJpbXBsOiBCcm93c2VyV2ViYXV0aG4iXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL25hdGl2ZS9tYWluL1dlYmF1dGhuTmF0aXZlQnJpZGdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmRzLCBNZXNzYWdlRGlzcGF0Y2hlciwgUmVxdWVzdCB9IGZyb20gXCIuLi8uLi9hcGkvY29tbW9uL3RocmVhZGluZy9NZXNzYWdlRGlzcGF0Y2hlci5qc1wiXG5pbXBvcnQgeyBleHBvc2VMb2NhbERlbGF5ZWQgfSBmcm9tIFwiLi4vLi4vYXBpL2NvbW1vbi9Xb3JrZXJQcm94eVwiXG5pbXBvcnQgeyBhc3NlcnROb3ROdWxsLCBkZWZlciwgRGVmZXJyZWRPYmplY3QgfSBmcm9tIFwiQHR1dGFvL3R1dGFub3RhLXV0aWxzXCJcbmltcG9ydCB7IERlc2t0b3BOYXRpdmVUcmFuc3BvcnQgfSBmcm9tIFwiLi9EZXNrdG9wTmF0aXZlVHJhbnNwb3J0LmpzXCJcbmltcG9ydCB7IEJyb3dzZXJXZWJhdXRobiB9IGZyb20gXCIuLi8uLi9taXNjLzJmYS93ZWJhdXRobi9Ccm93c2VyV2ViYXV0aG4uanNcIlxuXG5leHBvcnQgdHlwZSBXZWJUb05hdGl2ZVJlcXVlc3QgPSBcImluaXRcIlxuZXhwb3J0IHR5cGUgTmF0aXZlVG9XZWJSZXF1ZXN0ID0gXCJmYWNhZGVcIlxuXG4vKipcbiAqIHRoaXMgaXMgaG9zdGVkIG9uIHRoZSBzZXJ2ZXIsIGJ1dCB3aWxsIG9ubHkgYmUgdXNlZCBpbnNpZGUgYSBXZWJEaWFsb2cgZm9yIHRoZSBkZXNrdG9wIGNsaWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIFdlYmF1dGhuTmF0aXZlQnJpZGdlIHtcblx0cHJpdmF0ZSByZWFkb25seSBkaXNwYXRjaGVyOiBNZXNzYWdlRGlzcGF0Y2hlcjxXZWJUb05hdGl2ZVJlcXVlc3QsIE5hdGl2ZVRvV2ViUmVxdWVzdD5cblx0cHJpdmF0ZSByZWFkb25seSBpbXBsOiBEZWZlcnJlZE9iamVjdDxCcm93c2VyV2ViYXV0aG4+ID0gZGVmZXIoKVxuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdGNvbnN0IG5hdGl2ZUFwcCA9IGFzc2VydE5vdE51bGwod2luZG93Lm5hdGl2ZUFwcFdlYkRpYWxvZylcblx0XHRjb25zdCB0cmFuc3BvcnQ6IERlc2t0b3BOYXRpdmVUcmFuc3BvcnQ8V2ViVG9OYXRpdmVSZXF1ZXN0LCBOYXRpdmVUb1dlYlJlcXVlc3Q+ID0gbmV3IERlc2t0b3BOYXRpdmVUcmFuc3BvcnQobmF0aXZlQXBwKVxuXHRcdGNvbnN0IHRoYXQgPSB0aGlzXG5cdFx0Y29uc3QgY29tbWFuZHM6IENvbW1hbmRzPE5hdGl2ZVRvV2ViUmVxdWVzdD4gPSB7XG5cdFx0XHRmYWNhZGU6IGV4cG9zZUxvY2FsRGVsYXllZCh7XG5cdFx0XHRcdFdlYkF1dGhuRmFjYWRlKCk6IFByb21pc2U8QnJvd3NlcldlYmF1dGhuPiB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoYXQuaW1wbC5wcm9taXNlXG5cdFx0XHRcdH0sXG5cdFx0XHR9KSxcblx0XHR9XG5cdFx0dGhpcy5kaXNwYXRjaGVyID0gbmV3IE1lc3NhZ2VEaXNwYXRjaGVyPFdlYlRvTmF0aXZlUmVxdWVzdCwgTmF0aXZlVG9XZWJSZXF1ZXN0Pih0cmFuc3BvcnQsIGNvbW1hbmRzLCBcIndlYmF1dGhuLW5vZGVcIilcblx0fVxuXG5cdGFzeW5jIGluaXQoaW1wbDogQnJvd3NlcldlYmF1dGhuKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0dGhpcy5pbXBsLnJlc29sdmUoaW1wbClcblx0XHRyZXR1cm4gdGhpcy5kaXNwYXRjaGVyLnBvc3RSZXF1ZXN0KG5ldyBSZXF1ZXN0KFwiaW5pdFwiLCBbXSkpXG5cdH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFZYSx1QkFBTixNQUEyQjtDQUNqQyxBQUFpQjtDQUNqQixBQUFpQixPQUF3QyxPQUFPO0NBRWhFLGNBQWM7RUFDYixNQUFNLFlBQVksY0FBYyxPQUFPLG1CQUFtQjtFQUMxRCxNQUFNQSxZQUE0RSxJQUFJLHVCQUF1QjtFQUM3RyxNQUFNLE9BQU87RUFDYixNQUFNQyxXQUF5QyxFQUM5QyxRQUFRLG1CQUFtQixFQUMxQixpQkFBMkM7QUFDMUMsVUFBTyxLQUFLLEtBQUs7RUFDakIsRUFDRCxFQUFDLENBQ0Y7QUFDRCxPQUFLLGFBQWEsSUFBSSxrQkFBMEQsV0FBVyxVQUFVO0NBQ3JHO0NBRUQsTUFBTSxLQUFLQyxNQUFzQztBQUNoRCxPQUFLLEtBQUssUUFBUSxLQUFLO0FBQ3ZCLFNBQU8sS0FBSyxXQUFXLFlBQVksSUFBSSxRQUFRLFFBQVEsQ0FBRSxHQUFFO0NBQzNEO0FBQ0QifQ==