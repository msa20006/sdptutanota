import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { Mode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { debounce, findAllAndRemove, isNotNull, ofClass, remove } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { FileNotFoundError, FileOpenError } from "./ErrorUtils-chunk.js";
import { PermissionError } from "./PermissionError-chunk.js";
import { Dialog } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { UserError } from "./UserError-chunk.js";
import { isDataFile, isFileReference, isTutanotaFile } from "./FileUtils-chunk.js";
import { showFileChooser } from "./SharedMailUtils-chunk.js";
import { showUserError } from "./ErrorHandlerImpl-chunk.js";
import { AttachmentType } from "./AttachmentBubble-chunk.js";

//#region src/mail-app/mail/editor/MailEditorViewModel.ts
async function chooseAndAttachFile(model, boundingRect, fileTypes) {
	boundingRect.height = Math.round(boundingRect.height);
	boundingRect.width = Math.round(boundingRect.width);
	boundingRect.x = Math.round(boundingRect.x);
	boundingRect.y = Math.round(boundingRect.y);
	try {
		const files = await showFileChooserForAttachments(boundingRect, fileTypes);
		if (!files || files.length === 0) return;
		switch (env.mode) {
			case Mode.App:
				model.attachFiles(files);
				return files;
			case Mode.Desktop: {
				const dataFiles = (await Promise.all(files.map(async (f) => locator.fileApp.readDataFile(f.location)))).filter(isNotNull);
				model.attachFiles(dataFiles);
				return dataFiles;
			}
			default:
				model.attachFiles(files);
				return files;
		}
	} catch (e) {
		if (e instanceof UserError) await showUserError(e);
else {
			const msg = e.message || "unknown error";
			console.error("could not attach files:", msg);
		}
	}
}
function showFileChooserForAttachments(boundingRect, fileTypes) {
	const fileSelector = [Mode.App, Mode.Desktop].includes(env.mode) ? locator.fileApp.openFileChooser(boundingRect, fileTypes) : showFileChooser(true, fileTypes);
	return fileSelector.catch(ofClass(PermissionError, () => {
		Dialog.message("fileAccessDeniedMobile_msg");
	})).catch(ofClass(FileNotFoundError, () => {
		Dialog.message("couldNotAttachFile_msg");
	}));
}
function createAttachmentBubbleAttrs(model, inlineImageElements) {
	return model.getAttachments().map((attachment) => ({
		attachment,
		open: null,
		download: () => _downloadAttachment(attachment),
		remove: () => {
			model.removeAttachment(attachment);
			if (attachment.cid) {
				const imageElement = inlineImageElements.find((e) => e.getAttribute("cid") === attachment.cid);
				if (imageElement) {
					imageElement.remove();
					remove(inlineImageElements, imageElement);
				}
			}
			mithril_default.redraw();
		},
		fileImport: null,
		type: AttachmentType.GENERIC
	}));
}
async function _downloadAttachment(attachment) {
	try {
		if (isFileReference(attachment)) await locator.fileApp.open(attachment);
else if (isDataFile(attachment)) await locator.fileController.saveDataFile(attachment);
else if (isTutanotaFile(attachment)) await locator.fileController.download(attachment);
else throw new ProgrammingError("attachment is neither reference, datafile nor tutanotafile!");
	} catch (e) {
		if (e instanceof FileOpenError) return Dialog.message("canNotOpenFileOnDevice_msg");
else {
			const msg = e.message || "unknown error";
			console.error("could not open file:", msg);
			return Dialog.message("errorDuringFileOpen_msg");
		}
	}
}
const cleanupInlineAttachments = debounce(50, (domElement, inlineImageElements, attachments) => {
	const elementsToRemove = [];
	for (const inlineImage of inlineImageElements) if (domElement && !domElement.contains(inlineImage)) {
		const cid = inlineImage.getAttribute("cid");
		const attachmentIndex = attachments.findIndex((a) => a.cid === cid);
		if (attachmentIndex !== -1) {
			attachments.splice(attachmentIndex, 1);
			elementsToRemove.push(inlineImage);
			mithril_default.redraw();
		}
	}
	findAllAndRemove(inlineImageElements, (imageElement) => elementsToRemove.includes(imageElement));
});
function getConfidentialStateMessage(isConfidential) {
	return isConfidential ? lang.get("confidentialStatus_msg") : lang.get("nonConfidentialStatus_msg");
}

//#endregion
export { chooseAndAttachFile, cleanupInlineAttachments, createAttachmentBubbleAttrs, getConfidentialStateMessage };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,