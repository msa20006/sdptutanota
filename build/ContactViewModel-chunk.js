import "./dist-chunk.js";
import "./ProgrammingError-chunk.js";
import "./Env-chunk.js";
import "./ClientDetector-chunk.js";
import "./mithril-chunk.js";
import { assertNotNull, lazyMemoized } from "./dist2-chunk.js";
import "./WhitelabelCustomizations-chunk.js";
import "./LanguageViewModel-chunk.js";
import "./styles-chunk.js";
import "./theme-chunk.js";
import "./TutanotaConstants-chunk.js";
import "./KeyManager-chunk.js";
import "./WindowFacade-chunk.js";
import "./size-chunk.js";
import "./HtmlUtils-chunk.js";
import "./luxon-chunk.js";
import { getElementId } from "./EntityUtils-chunk.js";
import "./TypeModels-chunk.js";
import { ContactTypeRef } from "./TypeRefs-chunk.js";
import "./CommonCalendarUtils-chunk.js";
import "./TypeModels2-chunk.js";
import "./TypeRefs2-chunk.js";
import "./ParserCombinator-chunk.js";
import "./CalendarUtils-chunk.js";
import "./ImportExportUtils-chunk.js";
import "./FormatValidator-chunk.js";
import "./stream-chunk.js";
import { ListAutoSelectBehavior } from "./DeviceConfig-chunk.js";
import "./ErrorUtils-chunk.js";
import "./RestError-chunk.js";
import "./OutOfSyncError-chunk.js";
import "./CancelledError-chunk.js";
import "./SuspensionError-chunk.js";
import "./LoginIncompleteError-chunk.js";
import "./CryptoError-chunk.js";
import "./error-chunk.js";
import "./RecipientsNotFoundError-chunk.js";
import "./DbError-chunk.js";
import "./QuotaExceededError-chunk.js";
import "./DeviceStorageUnavailableError-chunk.js";
import "./MailBodyTooLargeError-chunk.js";
import "./ImportError-chunk.js";
import "./WebauthnError-chunk.js";
import "./PermissionError-chunk.js";
import { isUpdateForTypeRef } from "./EntityUpdateUtils-chunk.js";
import "./Button-chunk.js";
import "./Icon-chunk.js";
import "./List-chunk.js";
import "./ListModel-chunk.js";
import { ListElementListModel } from "./ListElementListModel-chunk.js";
import { compareContacts } from "./ContactGuiUtils-chunk.js";

//#region src/mail-app/contacts/view/ContactViewModel.ts
var ContactViewModel = class {
	contactListId;
	/** id of the contact we are trying to load based on the url */
	targetContactId = null;
	sortByFirstName = true;
	listModelStateStream = null;
	constructor(contactModel, entityClient, eventController, router, updateUi) {
		this.contactModel = contactModel;
		this.entityClient = entityClient;
		this.eventController = eventController;
		this.router = router;
		this.updateUi = updateUi;
	}
	listModel = new ListElementListModel({
		fetch: async () => {
			const items = await this.entityClient.loadAll(ContactTypeRef, this.contactListId);
			return {
				items,
				complete: true
			};
		},
		loadSingle: async (_listId, elementId) => {
			const listId = await this.contactModel.getContactListId();
			if (listId == null) return null;
			return this.entityClient.load(ContactTypeRef, [listId, elementId]);
		},
		sortCompare: (c1, c2) => compareContacts(c1, c2, this.sortByFirstName),
		autoSelectBehavior: () => ListAutoSelectBehavior.NONE
	});
	async init(contactListId) {
		if (contactListId == null) this.updateUrl();
		if (this.contactListId) return;
		this.contactListId = assertNotNull(await this.contactModel.getContactListId(), "not available for external users");
		this.initOnce();
		await this.listModel.loadInitial();
	}
	async selectContact(contactId) {
		await this.loadAndSelect(contactId);
	}
	initOnce = lazyMemoized(() => {
		this.eventController.addEntityListener(this.entityListener);
		this.listModelStateStream = this.listModel.stateStream.map(() => {
			this.updateUi();
			this.updateUrl();
		});
	});
	updateUrl() {
		const contactId = this.targetContactId ?? (!this.listModel.state.inMultiselect && this.listModel.getSelectedAsArray().length === 1 ? getElementId(this.listModel.getSelectedAsArray()[0]) : null);
		if (contactId) this.router.routeTo(`/contact/:listId/:contactId`, {
			listId: this.contactListId,
			contactId
		});
else this.router.routeTo(`/contact/:listId`, { listId: this.contactListId });
	}
	entityListener = async (updates) => {
		for (const update of updates) {
			const { instanceListId, instanceId, operation } = update;
			if (isUpdateForTypeRef(ContactTypeRef, update) && instanceListId === this.contactListId) await this.listModel.entityEventReceived(instanceListId, instanceId, operation);
		}
	};
	async loadAndSelect(contactId) {
		const listId = this.contactListId;
		this.targetContactId = contactId;
		await this.listModel.loadAndSelect(contactId, () => this.contactListId !== listId && this.targetContactId === contactId);
		if (this.targetContactId === contactId) this.targetContactId = null;
	}
	setSortByFirstName(sorting) {
		this.sortByFirstName = sorting;
		this.listModel.sort();
	}
	listState() {
		return this.listModel.state;
	}
	dispose() {
		this.eventController.removeEntityListener(this.entityListener);
		this.listModelStateStream?.end(true);
		this.listModelStateStream = null;
	}
};

//#endregion
export { ContactViewModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,