import { locator } from "./CommonLocator-chunk.js";

//#region src/common/gui/dialogs/SpellcheckLanguageDialog.ts
async function showSpellcheckLanguageDialog() {
	const { DesktopConfigKey } = await import("./ConfigKeys2-chunk.js");
	const current = await getCurrentSpellcheckLanguage();
	const { Dialog } = await import("./Dialog2-chunk.js");
	const items = await getItems();
	const newLang = await Dialog.showDropDownSelectionDialog("spelling_label", "language_label", null, items, current);
	await locator.desktopSettingsFacade.setStringConfigValue(DesktopConfigKey.spellcheck, newLang);
	const selectedItem = items.find((i) => i.value === newLang);
	return selectedItem ? selectedItem.name : items[0].name;
}
async function getCurrentSpellcheckLanguageLabel() {
	const current = await getCurrentSpellcheckLanguage();
	const items = await getItems();
	const selectedItem = items.find((i) => i.value === current);
	return selectedItem ? selectedItem.name : items[0].name;
}
async function getCurrentSpellcheckLanguage() {
	const { DesktopConfigKey } = await import("./ConfigKeys2-chunk.js");
	return await locator.desktopSettingsFacade.getStringConfigValue(DesktopConfigKey.spellcheck) ?? "";
}
async function getItems() {
	const { languages, lang } = await import("./LanguageViewModel2-chunk.js");
	const options = await locator.desktopSettingsFacade.getSpellcheckLanguages();
	return [{
		name: lang.get("comboBoxSelectionNone_msg"),
		value: ""
	}, ...options.map((code) => {
		const [langCode, locale] = code.split("-");
		const language = languages.find((language$1) => locale && language$1.code === `${langCode}_${locale.toLowerCase()}`) || languages.find((language$1) => language$1.code === langCode) || getMissingLanguage(langCode) || languages.find((language$1) => language$1.code.slice(0, 2) === langCode);
		const textId = language?.textId;
		const name = textId ? lang.get(textId) + ` (${code})` : code;
		return {
			name,
			value: code
		};
	}).sort((a, b) => a.name.localeCompare(b.name))];
}
/**
* Electron has a different selection of spellchecker languages from what our client supports,
* so we can't get all of the names from the LanguageViewModel
*/
function getMissingLanguage(code) {
	const mapping = {
		af: "languageAfrikaans_label",
		cy: "languageWelsh_label",
		fo: "languageFaroese_label",
		hy: "languageArmenian_label",
		nb: "languageNorwegianBokmal_label",
		sh: "languageSerboCroatian_label",
		sq: "languageAlbanian_label",
		ta: "languageTamil_label",
		tg: "languageTajik_label",
		pt: "languagePortugese_label"
	};
	const id = mapping[code];
	return id ? {
		textId: id,
		code
	} : null;
}

//#endregion
export { getCurrentSpellcheckLanguageLabel, showSpellcheckLanguageDialog };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3BlbGxjaGVja0xhbmd1YWdlRGlhbG9nLWNodW5rLmpzIiwibmFtZXMiOlsibGFuZ3VhZ2UiLCJjb2RlOiBzdHJpbmciLCJtYXBwaW5nOiBSZWNvcmQ8c3RyaW5nLCBUcmFuc2xhdGlvbktleT4iXSwic291cmNlcyI6WyIuLi9zcmMvY29tbW9uL2d1aS9kaWFsb2dzL1NwZWxsY2hlY2tMYW5ndWFnZURpYWxvZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFNlbGVjdG9ySXRlbSB9IGZyb20gXCIuLi9iYXNlL0Ryb3BEb3duU2VsZWN0b3IuanNcIlxuaW1wb3J0IHR5cGUgeyBUcmFuc2xhdGlvbktleSB9IGZyb20gXCIuLi8uLi9taXNjL0xhbmd1YWdlVmlld01vZGVsXCJcbmltcG9ydCB7IGxvY2F0b3IgfSBmcm9tIFwiLi4vLi4vYXBpL21haW4vQ29tbW9uTG9jYXRvclwiXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaG93U3BlbGxjaGVja0xhbmd1YWdlRGlhbG9nKCk6IFByb21pc2U8c3RyaW5nPiB7XG5cdGNvbnN0IHsgRGVza3RvcENvbmZpZ0tleSB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vLi4vLi4vY29tbW9uL2Rlc2t0b3AvY29uZmlnL0NvbmZpZ0tleXNcIilcblx0Y29uc3QgY3VycmVudCA9IGF3YWl0IGdldEN1cnJlbnRTcGVsbGNoZWNrTGFuZ3VhZ2UoKVxuXHRjb25zdCB7IERpYWxvZyB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vYmFzZS9EaWFsb2cuanNcIilcblx0Y29uc3QgaXRlbXMgPSBhd2FpdCBnZXRJdGVtcygpXG5cdC8vIHRoaXMgaXMgYSBsYW5ndWFnZSBjb2RlXG5cdGNvbnN0IG5ld0xhbmcgPSBhd2FpdCBEaWFsb2cuc2hvd0Ryb3BEb3duU2VsZWN0aW9uRGlhbG9nKFwic3BlbGxpbmdfbGFiZWxcIiwgXCJsYW5ndWFnZV9sYWJlbFwiLCBudWxsLCBpdGVtcywgY3VycmVudClcblx0YXdhaXQgbG9jYXRvci5kZXNrdG9wU2V0dGluZ3NGYWNhZGUuc2V0U3RyaW5nQ29uZmlnVmFsdWUoRGVza3RvcENvbmZpZ0tleS5zcGVsbGNoZWNrLCBuZXdMYW5nKVxuXHQvLyByZXR1cm4gZGlzcGxheWFibGUgbGFuZ3VhZ2UgbmFtZVxuXHRjb25zdCBzZWxlY3RlZEl0ZW0gPSBpdGVtcy5maW5kKChpKSA9PiBpLnZhbHVlID09PSBuZXdMYW5nKVxuXHRyZXR1cm4gc2VsZWN0ZWRJdGVtID8gc2VsZWN0ZWRJdGVtLm5hbWUgOiBpdGVtc1swXS5uYW1lXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDdXJyZW50U3BlbGxjaGVja0xhbmd1YWdlTGFiZWwoKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0Y29uc3QgY3VycmVudCA9IGF3YWl0IGdldEN1cnJlbnRTcGVsbGNoZWNrTGFuZ3VhZ2UoKVxuXHRjb25zdCBpdGVtcyA9IGF3YWl0IGdldEl0ZW1zKClcblx0Y29uc3Qgc2VsZWN0ZWRJdGVtID0gaXRlbXMuZmluZCgoaSkgPT4gaS52YWx1ZSA9PT0gY3VycmVudClcblx0cmV0dXJuIHNlbGVjdGVkSXRlbSA/IHNlbGVjdGVkSXRlbS5uYW1lIDogaXRlbXNbMF0ubmFtZVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRDdXJyZW50U3BlbGxjaGVja0xhbmd1YWdlKCk6IFByb21pc2U8c3RyaW5nPiB7XG5cdGNvbnN0IHsgRGVza3RvcENvbmZpZ0tleSB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vLi4vLi4vY29tbW9uL2Rlc2t0b3AvY29uZmlnL0NvbmZpZ0tleXNcIilcblx0cmV0dXJuIChhd2FpdCBsb2NhdG9yLmRlc2t0b3BTZXR0aW5nc0ZhY2FkZS5nZXRTdHJpbmdDb25maWdWYWx1ZShEZXNrdG9wQ29uZmlnS2V5LnNwZWxsY2hlY2spKSA/PyBcIlwiXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEl0ZW1zKCk6IFByb21pc2U8QXJyYXk8U2VsZWN0b3JJdGVtPHN0cmluZz4+PiB7XG5cdGNvbnN0IHsgbGFuZ3VhZ2VzLCBsYW5nIH0gPSBhd2FpdCBpbXBvcnQoXCIuLi8uLi9taXNjL0xhbmd1YWdlVmlld01vZGVsLmpzXCIpXG5cdGNvbnN0IG9wdGlvbnMgPSBhd2FpdCBsb2NhdG9yLmRlc2t0b3BTZXR0aW5nc0ZhY2FkZS5nZXRTcGVsbGNoZWNrTGFuZ3VhZ2VzKClcblx0cmV0dXJuIFtcblx0XHR7XG5cdFx0XHRuYW1lOiBsYW5nLmdldChcImNvbWJvQm94U2VsZWN0aW9uTm9uZV9tc2dcIiksXG5cdFx0XHR2YWx1ZTogXCJcIixcblx0XHR9LFxuXHRcdC4uLm9wdGlvbnNcblx0XHRcdC5tYXAoKGNvZGUpID0+IHtcblx0XHRcdFx0Y29uc3QgW2xhbmdDb2RlLCBsb2NhbGVdID0gY29kZS5zcGxpdChcIi1cIilcblx0XHRcdFx0Ly8gZmlyc3QsIGZpbmQgdGhlIG5hbWUgZm9yIGEgbGFuZ3VhZ2UgZ2l2ZW4gYSBsb2NhbGUgd2l0aCBhIHBlcmZlY3QgbWF0Y2hcblx0XHRcdFx0Y29uc3QgbGFuZ3VhZ2UgPVxuXHRcdFx0XHRcdGxhbmd1YWdlcy5maW5kKChsYW5ndWFnZSkgPT4gbG9jYWxlICYmIGxhbmd1YWdlLmNvZGUgPT09IGAke2xhbmdDb2RlfV8ke2xvY2FsZS50b0xvd2VyQ2FzZSgpfWApIHx8IC8vIGZpbmQgdGhlIG5hbWUgZm9yIGEgbGFuZ3VhZ2Ugd2l0aG91dCBhIGxvY2FsZSwgd2l0aCBhIHBlcmZlY3QgbWF0Y2hcblx0XHRcdFx0XHRsYW5ndWFnZXMuZmluZCgobGFuZ3VhZ2UpID0+IGxhbmd1YWdlLmNvZGUgPT09IGxhbmdDb2RlKSB8fCAvLyB0cnkgdG8gZ2V0IGEgbWlzc2luZyBvbmUgYmVmb3JlIHNwbGl0dGluZ1xuXHRcdFx0XHRcdGdldE1pc3NpbmdMYW5ndWFnZShsYW5nQ29kZSkgfHwgLy8gdGhlIGNvZGUgZ2l2ZW4gYnkgZWxlY3Ryb24gZG9lc24ndCBhbHdheXMgaGF2ZSBhIGxvY2FsZSB3aGVuIHdlIGRvLFxuXHRcdFx0XHRcdC8vIGUuZy4gZm9yIFBlcnNpYW4gd2UgaGF2ZSBcImZhX2lyXCIgaW4gTGFuZ3VhZ2VWaWV3TW9kZWwsIGJ1dCBlbGVjdHJvbiBvbmx5IGdpdmVzIHVzIFwiZmFcIlxuXHRcdFx0XHRcdGxhbmd1YWdlcy5maW5kKChsYW5ndWFnZSkgPT4gbGFuZ3VhZ2UuY29kZS5zbGljZSgwLCAyKSA9PT0gbGFuZ0NvZGUpXG5cdFx0XHRcdGNvbnN0IHRleHRJZCA9IGxhbmd1YWdlPy50ZXh0SWRcblx0XHRcdFx0Y29uc3QgbmFtZSA9IHRleHRJZCA/IGxhbmcuZ2V0KHRleHRJZCkgKyBgICgke2NvZGV9KWAgOiBjb2RlXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHR2YWx1ZTogY29kZSxcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHRcdC5zb3J0KChhLCBiKSA9PiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpKSxcblx0XVxufVxuXG4vKipcbiAqIEVsZWN0cm9uIGhhcyBhIGRpZmZlcmVudCBzZWxlY3Rpb24gb2Ygc3BlbGxjaGVja2VyIGxhbmd1YWdlcyBmcm9tIHdoYXQgb3VyIGNsaWVudCBzdXBwb3J0cyxcbiAqIHNvIHdlIGNhbid0IGdldCBhbGwgb2YgdGhlIG5hbWVzIGZyb20gdGhlIExhbmd1YWdlVmlld01vZGVsXG4gKi9cbmZ1bmN0aW9uIGdldE1pc3NpbmdMYW5ndWFnZShjb2RlOiBzdHJpbmcpOiB7IHRleHRJZDogVHJhbnNsYXRpb25LZXk7IGNvZGU6IHN0cmluZyB9IHwgbnVsbCB7XG5cdGNvbnN0IG1hcHBpbmc6IFJlY29yZDxzdHJpbmcsIFRyYW5zbGF0aW9uS2V5PiA9IHtcblx0XHRhZjogXCJsYW5ndWFnZUFmcmlrYWFuc19sYWJlbFwiLFxuXHRcdGN5OiBcImxhbmd1YWdlV2Vsc2hfbGFiZWxcIixcblx0XHRmbzogXCJsYW5ndWFnZUZhcm9lc2VfbGFiZWxcIixcblx0XHRoeTogXCJsYW5ndWFnZUFybWVuaWFuX2xhYmVsXCIsXG5cdFx0bmI6IFwibGFuZ3VhZ2VOb3J3ZWdpYW5Cb2ttYWxfbGFiZWxcIixcblx0XHRzaDogXCJsYW5ndWFnZVNlcmJvQ3JvYXRpYW5fbGFiZWxcIixcblx0XHRzcTogXCJsYW5ndWFnZUFsYmFuaWFuX2xhYmVsXCIsXG5cdFx0dGE6IFwibGFuZ3VhZ2VUYW1pbF9sYWJlbFwiLFxuXHRcdHRnOiBcImxhbmd1YWdlVGFqaWtfbGFiZWxcIixcblx0XHRwdDogXCJsYW5ndWFnZVBvcnR1Z2VzZV9sYWJlbFwiLFxuXHR9XG5cdGNvbnN0IGlkID0gbWFwcGluZ1tjb2RlXVxuXHRyZXR1cm4gaWQgPyB7IHRleHRJZDogaWQsIGNvZGUgfSA6IG51bGxcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7O0FBSU8sZUFBZSwrQkFBZ0Q7Q0FDckUsTUFBTSxFQUFFLGtCQUFrQixHQUFHLE1BQU0sT0FBTztDQUMxQyxNQUFNLFVBQVUsTUFBTSw4QkFBOEI7Q0FDcEQsTUFBTSxFQUFFLFFBQVEsR0FBRyxNQUFNLE9BQU87Q0FDaEMsTUFBTSxRQUFRLE1BQU0sVUFBVTtDQUU5QixNQUFNLFVBQVUsTUFBTSxPQUFPLDRCQUE0QixrQkFBa0Isa0JBQWtCLE1BQU0sT0FBTyxRQUFRO0FBQ2xILE9BQU0sUUFBUSxzQkFBc0IscUJBQXFCLGlCQUFpQixZQUFZLFFBQVE7Q0FFOUYsTUFBTSxlQUFlLE1BQU0sS0FBSyxDQUFDLE1BQU0sRUFBRSxVQUFVLFFBQVE7QUFDM0QsUUFBTyxlQUFlLGFBQWEsT0FBTyxNQUFNLEdBQUc7QUFDbkQ7QUFFTSxlQUFlLG9DQUFxRDtDQUMxRSxNQUFNLFVBQVUsTUFBTSw4QkFBOEI7Q0FDcEQsTUFBTSxRQUFRLE1BQU0sVUFBVTtDQUM5QixNQUFNLGVBQWUsTUFBTSxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsUUFBUTtBQUMzRCxRQUFPLGVBQWUsYUFBYSxPQUFPLE1BQU0sR0FBRztBQUNuRDtBQUVELGVBQWUsK0JBQWdEO0NBQzlELE1BQU0sRUFBRSxrQkFBa0IsR0FBRyxNQUFNLE9BQU87QUFDMUMsUUFBUSxNQUFNLFFBQVEsc0JBQXNCLHFCQUFxQixpQkFBaUIsV0FBVyxJQUFLO0FBQ2xHO0FBRUQsZUFBZSxXQUFpRDtDQUMvRCxNQUFNLEVBQUUsV0FBVyxNQUFNLEdBQUcsTUFBTSxPQUFPO0NBQ3pDLE1BQU0sVUFBVSxNQUFNLFFBQVEsc0JBQXNCLHdCQUF3QjtBQUM1RSxRQUFPLENBQ047RUFDQyxNQUFNLEtBQUssSUFBSSw0QkFBNEI7RUFDM0MsT0FBTztDQUNQLEdBQ0QsR0FBRyxRQUNELElBQUksQ0FBQyxTQUFTO0VBQ2QsTUFBTSxDQUFDLFVBQVUsT0FBTyxHQUFHLEtBQUssTUFBTSxJQUFJO0VBRTFDLE1BQU0sV0FDTCxVQUFVLEtBQUssQ0FBQ0EsZUFBYSxVQUFVQSxXQUFTLFVBQVUsRUFBRSxTQUFTLEdBQUcsT0FBTyxhQUFhLENBQUMsRUFBRSxJQUMvRixVQUFVLEtBQUssQ0FBQ0EsZUFBYUEsV0FBUyxTQUFTLFNBQVMsSUFDeEQsbUJBQW1CLFNBQVMsSUFFNUIsVUFBVSxLQUFLLENBQUNBLGVBQWEsV0FBUyxLQUFLLE1BQU0sR0FBRyxFQUFFLEtBQUssU0FBUztFQUNyRSxNQUFNLFNBQVMsVUFBVTtFQUN6QixNQUFNLE9BQU8sU0FBUyxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksS0FBSyxLQUFLO0FBQ3hELFNBQU87R0FDTjtHQUNBLE9BQU87RUFDUDtDQUNELEVBQUMsQ0FDRCxLQUFLLENBQUMsR0FBRyxNQUFNLEVBQUUsS0FBSyxjQUFjLEVBQUUsS0FBSyxDQUFDLEFBQzlDO0FBQ0Q7Ozs7O0FBTUQsU0FBUyxtQkFBbUJDLE1BQStEO0NBQzFGLE1BQU1DLFVBQTBDO0VBQy9DLElBQUk7RUFDSixJQUFJO0VBQ0osSUFBSTtFQUNKLElBQUk7RUFDSixJQUFJO0VBQ0osSUFBSTtFQUNKLElBQUk7RUFDSixJQUFJO0VBQ0osSUFBSTtFQUNKLElBQUk7Q0FDSjtDQUNELE1BQU0sS0FBSyxRQUFRO0FBQ25CLFFBQU8sS0FBSztFQUFFLFFBQVE7RUFBSTtDQUFNLElBQUc7QUFDbkMifQ==