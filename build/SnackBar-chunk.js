import { assertMainOrNode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { debounce } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { DefaultAnimationTime, styles } from "./styles-chunk.js";
import { LayerType, displayOverlay } from "./RootView-chunk.js";
import { px, size } from "./size-chunk.js";
import { Button, ButtonType } from "./Button-chunk.js";

//#region src/common/gui/base/SnackBar.ts
assertMainOrNode();
const SNACKBAR_SHOW_TIME = 6e3;
const MAX_SNACKBAR_WIDTH = 400;
const notificationQueue = [];
let currentAnimationTimeout = null;
var SnackBar = class {
	view(vnode) {
		return mithril_default(".snackbar-content.flex.flex-space-between.border-radius.plr.pb-xs.pt-xs", [mithril_default(".flex.center-vertically.smaller", lang.getTranslationText(vnode.attrs.message)), vnode.attrs.button ? mithril_default(".flex-end.center-vertically.pl", mithril_default(Button, vnode.attrs.button)) : null]);
	}
};
function makeButtonAttrsForSnackBar(button) {
	return {
		label: button.label,
		click: button.click,
		type: ButtonType.Secondary
	};
}
async function showSnackBar(args) {
	const { message, button, onClose, waitingTime } = args;
	const triggerSnackbar = () => {
		const buttonAttrs = makeButtonAttrsForSnackBar(button);
		notificationQueue.push({
			message,
			button: buttonAttrs,
			onClose: onClose ?? null
		});
		if (notificationQueue.length > 1) return;
		showNextNotification();
	};
	if (waitingTime) {
		debounce(waitingTime, triggerSnackbar)();
		return;
	} else triggerSnackbar();
}
function getSnackBarPosition() {
	const snackBarMargin = styles.isUsingBottomNavigation() ? size.hpad : size.hpad_medium;
	const leftOffset = styles.isDesktopLayout() ? size.drawer_menu_width : 0;
	const snackBarWidth = Math.min(window.innerWidth - leftOffset - 2 * snackBarMargin, MAX_SNACKBAR_WIDTH);
	return {
		bottom: px(snackBarMargin),
		left: styles.isSingleColumnLayout() ? px(window.innerWidth - snackBarMargin - snackBarWidth) : px(leftOffset + snackBarMargin),
		width: px(snackBarWidth),
		zIndex: LayerType.Overlay
	};
}
function showNextNotification() {
	const { message, button, onClose } = notificationQueue[0];
	currentAnimationTimeout = null;
	const closeFunction = displayOverlay(() => getSnackBarPosition(), { view: () => mithril_default(SnackBar, {
		message,
		button
	}) }, "slide-bottom", undefined, "minimized-shadow");
	const closeAndOpenNext = () => {
		if (currentAnimationTimeout !== null) return;
		closeFunction();
		if (onClose) onClose();
		notificationQueue.shift();
		if (notificationQueue.length > 0) currentAnimationTimeout = setTimeout(showNextNotification, 2 * DefaultAnimationTime);
	};
	if (button) {
		const originClickHandler = button.click;
		button.click = (e, dom) => {
			clearTimeout(autoRemoveTimer);
			originClickHandler?.(e, dom);
			closeAndOpenNext();
		};
	}
	const autoRemoveTimer = setTimeout(closeAndOpenNext, SNACKBAR_SHOW_TIME);
	mithril_default.redraw();
}

//#endregion
export { showSnackBar };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,