import { ProgrammingError } from "./ProgrammingError-chunk.js";
import { isIOSApp } from "./Env-chunk.js";
import { assertNotNull, downcast, getFromMap, neverNull } from "./dist2-chunk.js";
import { assertTranslation, lang } from "./LanguageViewModel-chunk.js";
import { AvailablePlans, Const, PaymentMethodType, PlanType, PlanTypeToName } from "./TutanotaConstants-chunk.js";
import { DateTime, Interval } from "./luxon-chunk.js";
import { createUpgradePriceServiceData } from "./TypeRefs2-chunk.js";
import { UpgradePriceService } from "./Services-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { UserError } from "./UserError-chunk.js";

//#region src/common/subscription/FeatureListProvider.ts
let dataProvider = null;
const IOS_EXCLUDED_FEATURES = ["pricing.family_label"];
var FeatureListProvider = class FeatureListProvider {
	featureList = null;
	constructor(domainConfig) {
		this.domainConfig = domainConfig;
	}
	async init() {
		if ("undefined" === typeof fetch) return;
		const listResourceUrl = `${this.domainConfig.websiteBaseUrl}/resources/data/features.json`;
		try {
			const featureList = await fetch(listResourceUrl).then((r) => r.json());
			if (isIOSApp()) this.stripUnsupportedIosFeatures(featureList);
			this.countFeatures([
				...featureList.Free.categories,
				...featureList.Revolutionary.categories,
				...featureList.Legend.categories
			]);
			this.countFeatures([
				...featureList.Essential.categories,
				...featureList.Advanced.categories,
				...featureList.Unlimited.categories
			]);
			this.featureList = featureList;
		} catch (e) {
			console.warn(`failed to fetch feature list from  ${listResourceUrl}`, e);
		}
	}
	countFeatures(categories) {
		const featureCounts = new Map();
		for (const category of categories) {
			const count = featureCounts.get(category.title);
			const numberOfFeatures = category.features.length;
			if (count == null || numberOfFeatures > count.max) featureCounts.set(category.title, { max: numberOfFeatures });
		}
		for (const category of categories) category.featureCount = getFromMap(featureCounts, category.title, () => {
			return { max: 0 };
		});
	}
	static async getInitializedInstance(domainConfig) {
		if (dataProvider == null) {
			dataProvider = new FeatureListProvider(domainConfig);
			await dataProvider.init();
		}
		return dataProvider;
	}
	getFeatureList(targetSubscription) {
		if (this.featureList == null) return {
			subtitle: "emptyString_msg",
			categories: []
		};
else return this.featureList[PlanTypeToName[targetSubscription]];
	}
	featureLoadingDone() {
		return this.featureList != null;
	}
	/**
	* Remove features from the feature list that are unsupported for iOS and shouldn't be displayed to iOS users.
	* @param featureList feature list obtained from the server
	* @private
	*/
	stripUnsupportedIosFeatures(featureList) {
		for (const plan of AvailablePlans) {
			const features = featureList[PlanTypeToName[plan]];
			for (const category of features.categories) category.features = category.features.filter(({ text }) => {
				return !IOS_EXCLUDED_FEATURES.includes(text);
			});
		}
	}
};
function getDisplayNameOfPlanType(planType) {
	switch (planType) {
		case PlanType.PremiumBusiness: return downcast(PlanTypeToName[PlanType.Premium]);
		case PlanType.TeamsBusiness: return downcast(PlanTypeToName[PlanType.Teams]);
		default: return downcast(PlanTypeToName[planType]);
	}
}
let UpgradePriceType = function(UpgradePriceType$1) {
	UpgradePriceType$1["PlanReferencePrice"] = "0";
	UpgradePriceType$1["PlanActualPrice"] = "1";
	UpgradePriceType$1["PlanNextYearsPrice"] = "2";
	UpgradePriceType$1["AdditionalUserPrice"] = "3";
	UpgradePriceType$1["ContactFormPrice_UNUSED"] = "4";
	return UpgradePriceType$1;
}({});

//#endregion
//#region src/common/misc/CyberMondayUtils.ts
function isReferenceDateWithinCyberMondayCampaign(referenceDate) {
	const startIso = "2024-11-15T10:00:00+01:00";
	const endIso = "2024-12-05T10:00:00+01:00";
	const cyberMonday2024Interval = Interval.fromDateTimes(DateTime.fromISO(startIso), DateTime.fromISO(endIso));
	return cyberMonday2024Interval.contains(DateTime.fromJSDate(referenceDate));
}

//#endregion
//#region src/common/subscription/PriceUtils.ts
let PaymentInterval = function(PaymentInterval$1) {
	PaymentInterval$1[PaymentInterval$1["Monthly"] = 1] = "Monthly";
	PaymentInterval$1[PaymentInterval$1["Yearly"] = 12] = "Yearly";
	return PaymentInterval$1;
}({});
let PriceType = function(PriceType$1) {
	PriceType$1[PriceType$1["MonthlyPerMonth"] = 0] = "MonthlyPerMonth";
	PriceType$1[PriceType$1["YearlyPerMonth"] = 1] = "YearlyPerMonth";
	PriceType$1[PriceType$1["YearlyPerYear"] = 2] = "YearlyPerYear";
	return PriceType$1;
}({});
function asPaymentInterval(paymentInterval) {
	if (typeof paymentInterval === "string") paymentInterval = Number(paymentInterval);
	switch (paymentInterval) {
		case Number(PaymentInterval.Monthly): return PaymentInterval.Monthly;
		case Number(PaymentInterval.Yearly): return PaymentInterval.Yearly;
		default: throw new ProgrammingError(`invalid payment interval: ${paymentInterval}`);
	}
}
function getPaymentMethodName(paymentMethod) {
	if (paymentMethod === PaymentMethodType.Invoice) return lang.get("paymentMethodOnAccount_label");
else if (paymentMethod === PaymentMethodType.CreditCard) return lang.get("paymentMethodCreditCard_label");
else if (paymentMethod === PaymentMethodType.Sepa) return "SEPA";
else if (paymentMethod === PaymentMethodType.Paypal) return "PayPal";
else if (paymentMethod === PaymentMethodType.AccountBalance) return lang.get("paymentMethodAccountBalance_label");
else if (paymentMethod === PaymentMethodType.AppStore) return "App Store";
else return "<" + lang.get("comboBoxSelectionNone_msg") + ">";
}
function getPaymentMethodInfoText(accountingInfo) {
	if (accountingInfo.paymentMethodInfo) return accountingInfo.paymentMethod === PaymentMethodType.CreditCard ? lang.get("endsWith_label") + " " + neverNull(accountingInfo.paymentMethodInfo) : neverNull(accountingInfo.paymentMethodInfo);
else return "";
}
function formatPriceDataWithInfo(priceData) {
	return formatPriceWithInfo(formatPrice(Number(priceData.price), true), asPaymentInterval(priceData.paymentInterval), priceData.taxIncluded);
}
function formatPrice(value, includeCurrency) {
	value = Math.round(value * 100) / 100;
	if (includeCurrency) return value % 1 !== 0 ? lang.formats.priceWithCurrency.format(value) : lang.formats.priceWithCurrencyWithoutFractionDigits.format(value);
else return value % 1 !== 0 ? lang.formats.priceWithoutCurrency.format(value) : lang.formats.priceWithoutCurrencyWithoutFractionDigits.format(value);
}
function formatMonthlyPrice(subscriptionPrice, paymentInterval) {
	const monthlyPrice = paymentInterval === PaymentInterval.Yearly ? subscriptionPrice / Number(PaymentInterval.Yearly) : subscriptionPrice;
	return formatPrice(monthlyPrice, true);
}
function formatPriceWithInfo(formattedPrice, paymentInterval, taxIncluded) {
	const netOrGross = taxIncluded ? lang.get("gross_label") : lang.get("net_label");
	const yearlyOrMonthly = paymentInterval === PaymentInterval.Yearly ? lang.get("pricing.perYear_label") : lang.get("pricing.perMonth_label");
	return `${formattedPrice} ${yearlyOrMonthly} (${netOrGross})`;
}
function getPriceItem(priceData, featureType) {
	return priceData?.items.find((item) => item.featureType === featureType) ?? null;
}
var PriceAndConfigProvider = class PriceAndConfigProvider {
	upgradePriceData = null;
	planPrices = null;
	isReferralCodeSignup = false;
	mobilePrices = null;
	constructor() {}
	async init(registrationDataId, serviceExecutor, referralCode) {
		const data = createUpgradePriceServiceData({
			date: Const.CURRENT_DATE,
			campaign: registrationDataId,
			referralCode
		});
		this.upgradePriceData = await serviceExecutor.get(UpgradePriceService, data);
		if (isIOSApp()) {
			this.mobilePrices = new Map();
			const allPrices = await locator.mobilePaymentsFacade.getPlanPrices();
			for (const plan of allPrices) this.mobilePrices.set(plan.name, plan);
		}
		this.isReferralCodeSignup = referralCode != null;
		this.planPrices = this.upgradePriceData.plans;
	}
	static async getInitializedInstance(registrationDataId, serviceExecutor, referralCode) {
		if (referralCode != null && registrationDataId != null) throw new UserError("referralSignupCampaignError_msg");
		const priceDataProvider = new PriceAndConfigProvider();
		await priceDataProvider.init(registrationDataId, serviceExecutor, referralCode);
		return priceDataProvider;
	}
	getSubscriptionPrice(paymentInterval, subscription, type) {
		return paymentInterval === PaymentInterval.Yearly ? this.getYearlySubscriptionPrice(subscription, type) : this.getMonthlySubscriptionPrice(subscription, type);
	}
	/**
	* Returns the subscription price with the currency formatting on iOS and as a plain period seperated number on other platforms
	*/
	getSubscriptionPriceWithCurrency(paymentInterval, subscription, type) {
		const price = this.getSubscriptionPrice(paymentInterval, subscription, type);
		const rawPrice = price.toString();
		if (isIOSApp()) return this.getAppStorePaymentsSubscriptionPrice(subscription, paymentInterval, rawPrice, type);
else {
			const price$1 = this.getSubscriptionPrice(paymentInterval, subscription, type);
			return {
				displayPrice: formatPrice(price$1, true),
				rawPrice: price$1.toString()
			};
		}
	}
	getAppStorePaymentsSubscriptionPrice(subscription, paymentInterval, rawPrice, type) {
		const planName = PlanTypeToName[subscription];
		const applePrices = this.getMobilePrices().get(planName.toLowerCase());
		if (!applePrices) throw new Error(`no such iOS plan ${planName}`);
		const isCyberMonday = isReferenceDateWithinCyberMondayCampaign(Const.CURRENT_DATE ?? new Date());
		switch (paymentInterval) {
			case PaymentInterval.Monthly: return {
				displayPrice: applePrices.displayMonthlyPerMonth,
				rawPrice: applePrices.rawMonthlyPerMonth
			};
			case PaymentInterval.Yearly: return {
				displayPrice: applePrices.displayYearlyPerYear,
				rawPrice: applePrices.rawYearlyPerYear
			};
		}
	}
	getRawPricingData() {
		return assertNotNull(this.upgradePriceData);
	}
	getYearlySubscriptionPrice(subscription, upgrade) {
		const prices = this.getPlanPricesForPlan(subscription);
		const monthlyPrice = getPriceForUpgradeType(upgrade, prices);
		const discount = upgrade === UpgradePriceType.PlanActualPrice ? Number(prices.firstYearDiscount) : 0;
		return monthlyPrice * 10 - discount;
	}
	getMonthlySubscriptionPrice(subscription, upgrade) {
		const prices = this.getPlanPricesForPlan(subscription);
		return getPriceForUpgradeType(upgrade, prices);
	}
	getMobilePrices() {
		return assertNotNull(this.mobilePrices);
	}
	getPlanPricesForPlan(subscription) {
		const planPrices = assertNotNull(this.planPrices, "called getPlanPricesForPlan before init");
		return assertNotNull(planPrices.find((prices) => PlanTypeToName[subscription] === prices.planName), "plan type not found");
	}
	getPriceInfoMessage() {
		const rawData = this.getRawPricingData();
		const bonusMonthMessage = getReasonForBonusMonths(Number(rawData.bonusMonthsForYearlyPlan), this.isReferralCodeSignup);
		if (bonusMonthMessage) return bonusMonthMessage;
else if (rawData.messageTextId) return assertTranslation(rawData.messageTextId);
else return null;
	}
};
function getPriceForUpgradeType(upgrade, prices) {
	switch (upgrade) {
		case UpgradePriceType.PlanReferencePrice: return Number(prices.monthlyReferencePrice);
		case UpgradePriceType.PlanActualPrice:
		case UpgradePriceType.PlanNextYearsPrice: return Number(prices.monthlyPrice);
		case UpgradePriceType.AdditionalUserPrice: return Number(prices.additionalUserPriceMonthly);
		case UpgradePriceType.ContactFormPrice_UNUSED: throw new ProgrammingError("invalid price type");
	}
}
/**
* Helper function to determine the reason for bonus months that have be provided by the UpgradePriceService
* @param bonusMonths The amount of bonus month
* @param isReferralCodeSignup Indication if a referral code has been used to query the bonus months.
*/
function getReasonForBonusMonths(bonusMonths, isReferralCodeSignup) {
	if (bonusMonths == 12) return "chooseYearlyForOffer_msg";
else if (bonusMonths == 1) return "referralSignup_msg";
else if (bonusMonths == 0 && isReferralCodeSignup) return "referralSignupInvalid_msg";
else return null;
}

//#endregion
export { FeatureListProvider, PaymentInterval, PriceAndConfigProvider, PriceType, UpgradePriceType, asPaymentInterval, formatMonthlyPrice, formatPrice, formatPriceDataWithInfo, formatPriceWithInfo, getDisplayNameOfPlanType, getPaymentMethodInfoText, getPaymentMethodName, getPriceItem, isReferenceDateWithinCyberMondayCampaign };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJpY2VVdGlscy1jaHVuay5qcyIsIm5hbWVzIjpbImRhdGFQcm92aWRlcjogRmVhdHVyZUxpc3RQcm92aWRlciB8IG51bGwiLCJJT1NfRVhDTFVERURfRkVBVFVSRVM6IFRyYW5zbGF0aW9uS2V5W10iLCJkb21haW5Db25maWc6IERvbWFpbkNvbmZpZyIsImNhdGVnb3JpZXM6IEZlYXR1cmVDYXRlZ29yeVtdIiwidGFyZ2V0U3Vic2NyaXB0aW9uOiBQbGFuVHlwZSIsImZlYXR1cmVMaXN0OiBhbnkiLCJmZWF0dXJlczogeyBjYXRlZ29yaWVzOiBGZWF0dXJlQ2F0ZWdvcnlbXSB9IiwicGxhblR5cGU6IFBsYW5UeXBlIiwicmVmZXJlbmNlRGF0ZTogRGF0ZSIsInBheW1lbnRJbnRlcnZhbDogc3RyaW5nIHwgbnVtYmVyIiwicGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZFR5cGUiLCJhY2NvdW50aW5nSW5mbzogQWNjb3VudGluZ0luZm8iLCJwcmljZURhdGE6IFByaWNlRGF0YSIsInZhbHVlOiBudW1iZXIiLCJpbmNsdWRlQ3VycmVuY3k6IGJvb2xlYW4iLCJzdWJzY3JpcHRpb25QcmljZTogbnVtYmVyIiwicGF5bWVudEludGVydmFsOiBQYXltZW50SW50ZXJ2YWwiLCJmb3JtYXR0ZWRQcmljZTogc3RyaW5nIiwidGF4SW5jbHVkZWQ6IGJvb2xlYW4iLCJwcmljZURhdGE6IFByaWNlRGF0YSB8IG51bGwiLCJmZWF0dXJlVHlwZTogTnVtYmVyU3RyaW5nIiwicmVnaXN0cmF0aW9uRGF0YUlkOiBzdHJpbmcgfCBudWxsIiwic2VydmljZUV4ZWN1dG9yOiBJU2VydmljZUV4ZWN1dG9yIiwicmVmZXJyYWxDb2RlOiBzdHJpbmcgfCBudWxsIiwic3Vic2NyaXB0aW9uOiBQbGFuVHlwZSIsInR5cGU6IFVwZ3JhZGVQcmljZVR5cGUiLCJwcmljZSIsInJhd1ByaWNlOiBzdHJpbmciLCJ1cGdyYWRlOiBVcGdyYWRlUHJpY2VUeXBlIiwicHJpY2VzOiBXZWJzaXRlUGxhblByaWNlcyIsImJvbnVzTW9udGhzOiBudW1iZXIiLCJpc1JlZmVycmFsQ29kZVNpZ251cDogYm9vbGVhbiJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vc3Vic2NyaXB0aW9uL0ZlYXR1cmVMaXN0UHJvdmlkZXIudHMiLCIuLi9zcmMvY29tbW9uL21pc2MvQ3liZXJNb25kYXlVdGlscy50cyIsIi4uL3NyYy9jb21tb24vc3Vic2NyaXB0aW9uL1ByaWNlVXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0cmVhbSBmcm9tIFwibWl0aHJpbC9zdHJlYW1cIlxuaW1wb3J0IHsgUGxhblByaWNlcyB9IGZyb20gXCIuLi9hcGkvZW50aXRpZXMvc3lzL1R5cGVSZWZzXCJcbmltcG9ydCB7IFRyYW5zbGF0aW9uS2V5IH0gZnJvbSBcIi4uL21pc2MvTGFuZ3VhZ2VWaWV3TW9kZWxcIlxuaW1wb3J0IHsgUGF5bWVudEludGVydmFsIH0gZnJvbSBcIi4vUHJpY2VVdGlscy5qc1wiXG5pbXBvcnQgeyBBdmFpbGFibGVQbGFucywgUGxhbk5hbWUsIFBsYW5UeXBlLCBQbGFuVHlwZVRvTmFtZSB9IGZyb20gXCIuLi9hcGkvY29tbW9uL1R1dGFub3RhQ29uc3RhbnRzLmpzXCJcbmltcG9ydCB7IGRvd25jYXN0LCBnZXRGcm9tTWFwIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5pbXBvcnQgeyBpc0lPU0FwcCB9IGZyb20gXCIuLi9hcGkvY29tbW9uL0Vudi5qc1wiXG5cbmxldCBkYXRhUHJvdmlkZXI6IEZlYXR1cmVMaXN0UHJvdmlkZXIgfCBudWxsID0gbnVsbFxuXG5jb25zdCBJT1NfRVhDTFVERURfRkVBVFVSRVM6IFRyYW5zbGF0aW9uS2V5W10gPSBbXCJwcmljaW5nLmZhbWlseV9sYWJlbFwiXVxuXG5leHBvcnQgY2xhc3MgRmVhdHVyZUxpc3RQcm92aWRlciB7XG5cdHByaXZhdGUgZmVhdHVyZUxpc3Q6IEZlYXR1cmVMaXN0cyB8IG51bGwgPSBudWxsXG5cblx0cHJpdmF0ZSBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRvbWFpbkNvbmZpZzogRG9tYWluQ29uZmlnKSB7fVxuXG5cdHByaXZhdGUgYXN5bmMgaW5pdCgpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIGZldGNoKSByZXR1cm5cblx0XHRjb25zdCBsaXN0UmVzb3VyY2VVcmwgPSBgJHt0aGlzLmRvbWFpbkNvbmZpZy53ZWJzaXRlQmFzZVVybH0vcmVzb3VyY2VzL2RhdGEvZmVhdHVyZXMuanNvbmBcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgZmVhdHVyZUxpc3QgPSBhd2FpdCBmZXRjaChsaXN0UmVzb3VyY2VVcmwpLnRoZW4oKHIpID0+IHIuanNvbigpKVxuXHRcdFx0aWYgKGlzSU9TQXBwKCkpIHtcblx0XHRcdFx0dGhpcy5zdHJpcFVuc3VwcG9ydGVkSW9zRmVhdHVyZXMoZmVhdHVyZUxpc3QpXG5cdFx0XHR9XG5cdFx0XHR0aGlzLmNvdW50RmVhdHVyZXMoWy4uLmZlYXR1cmVMaXN0LkZyZWUuY2F0ZWdvcmllcywgLi4uZmVhdHVyZUxpc3QuUmV2b2x1dGlvbmFyeS5jYXRlZ29yaWVzLCAuLi5mZWF0dXJlTGlzdC5MZWdlbmQuY2F0ZWdvcmllc10pXG5cdFx0XHR0aGlzLmNvdW50RmVhdHVyZXMoWy4uLmZlYXR1cmVMaXN0LkVzc2VudGlhbC5jYXRlZ29yaWVzLCAuLi5mZWF0dXJlTGlzdC5BZHZhbmNlZC5jYXRlZ29yaWVzLCAuLi5mZWF0dXJlTGlzdC5VbmxpbWl0ZWQuY2F0ZWdvcmllc10pXG5cdFx0XHR0aGlzLmZlYXR1cmVMaXN0ID0gZmVhdHVyZUxpc3Rcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oYGZhaWxlZCB0byBmZXRjaCBmZWF0dXJlIGxpc3QgZnJvbSAgJHtsaXN0UmVzb3VyY2VVcmx9YCwgZSlcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGNvdW50RmVhdHVyZXMoY2F0ZWdvcmllczogRmVhdHVyZUNhdGVnb3J5W10pOiB2b2lkIHtcblx0XHRjb25zdCBmZWF0dXJlQ291bnRzID0gbmV3IE1hcDxzdHJpbmcsIHsgbWF4OiBudW1iZXIgfT4oKVxuXHRcdGZvciAoY29uc3QgY2F0ZWdvcnkgb2YgY2F0ZWdvcmllcykge1xuXHRcdFx0Y29uc3QgY291bnQgPSBmZWF0dXJlQ291bnRzLmdldChjYXRlZ29yeS50aXRsZSlcblx0XHRcdGNvbnN0IG51bWJlck9mRmVhdHVyZXMgPSBjYXRlZ29yeS5mZWF0dXJlcy5sZW5ndGhcblx0XHRcdGlmIChjb3VudCA9PSBudWxsIHx8IG51bWJlck9mRmVhdHVyZXMgPiBjb3VudC5tYXgpIHtcblx0XHRcdFx0ZmVhdHVyZUNvdW50cy5zZXQoY2F0ZWdvcnkudGl0bGUsIHsgbWF4OiBudW1iZXJPZkZlYXR1cmVzIH0pXG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvciAoY29uc3QgY2F0ZWdvcnkgb2YgY2F0ZWdvcmllcykge1xuXHRcdFx0Y2F0ZWdvcnkuZmVhdHVyZUNvdW50ID0gZ2V0RnJvbU1hcChmZWF0dXJlQ291bnRzLCBjYXRlZ29yeS50aXRsZSwgKCkgPT4ge1xuXHRcdFx0XHRyZXR1cm4geyBtYXg6IDAgfVxuXHRcdFx0fSlcblx0XHR9XG5cdH1cblxuXHRzdGF0aWMgYXN5bmMgZ2V0SW5pdGlhbGl6ZWRJbnN0YW5jZShkb21haW5Db25maWc6IERvbWFpbkNvbmZpZyk6IFByb21pc2U8RmVhdHVyZUxpc3RQcm92aWRlcj4ge1xuXHRcdGlmIChkYXRhUHJvdmlkZXIgPT0gbnVsbCkge1xuXHRcdFx0ZGF0YVByb3ZpZGVyID0gbmV3IEZlYXR1cmVMaXN0UHJvdmlkZXIoZG9tYWluQ29uZmlnKVxuXHRcdFx0YXdhaXQgZGF0YVByb3ZpZGVyLmluaXQoKVxuXHRcdH1cblx0XHRyZXR1cm4gZGF0YVByb3ZpZGVyXG5cdH1cblxuXHRnZXRGZWF0dXJlTGlzdCh0YXJnZXRTdWJzY3JpcHRpb246IFBsYW5UeXBlKTogRmVhdHVyZUxpc3RzW1BsYW5OYW1lXSB7XG5cdFx0aWYgKHRoaXMuZmVhdHVyZUxpc3QgPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIHsgc3VidGl0bGU6IFwiZW1wdHlTdHJpbmdfbXNnXCIsIGNhdGVnb3JpZXM6IFtdIH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuZmVhdHVyZUxpc3RbUGxhblR5cGVUb05hbWVbdGFyZ2V0U3Vic2NyaXB0aW9uXV1cblx0XHR9XG5cdH1cblxuXHRmZWF0dXJlTG9hZGluZ0RvbmUoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuZmVhdHVyZUxpc3QgIT0gbnVsbFxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZSBmZWF0dXJlcyBmcm9tIHRoZSBmZWF0dXJlIGxpc3QgdGhhdCBhcmUgdW5zdXBwb3J0ZWQgZm9yIGlPUyBhbmQgc2hvdWxkbid0IGJlIGRpc3BsYXllZCB0byBpT1MgdXNlcnMuXG5cdCAqIEBwYXJhbSBmZWF0dXJlTGlzdCBmZWF0dXJlIGxpc3Qgb2J0YWluZWQgZnJvbSB0aGUgc2VydmVyXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIHN0cmlwVW5zdXBwb3J0ZWRJb3NGZWF0dXJlcyhmZWF0dXJlTGlzdDogYW55KSB7XG5cdFx0Zm9yIChjb25zdCBwbGFuIG9mIEF2YWlsYWJsZVBsYW5zKSB7XG5cdFx0XHRjb25zdCBmZWF0dXJlczogeyBjYXRlZ29yaWVzOiBGZWF0dXJlQ2F0ZWdvcnlbXSB9ID0gZmVhdHVyZUxpc3RbUGxhblR5cGVUb05hbWVbcGxhbl1dXG5cdFx0XHRmb3IgKGNvbnN0IGNhdGVnb3J5IG9mIGZlYXR1cmVzLmNhdGVnb3JpZXMpIHtcblx0XHRcdFx0Y2F0ZWdvcnkuZmVhdHVyZXMgPSBjYXRlZ29yeS5mZWF0dXJlcy5maWx0ZXIoKHsgdGV4dCB9KSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuICFJT1NfRVhDTFVERURfRkVBVFVSRVMuaW5jbHVkZXModGV4dClcblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiB0dXRhbm90YS0zIGhhcyBhIHR5cGVSZWYgZm9yIHBsYW4gcHJpY2VzLCB3aGlsZSB0aGUgd2ViIHNpdGUgZGVmaW5lcyB0aGUgdHlwZSB3aXRoIG9ubHlcbiAqIHNvbWUgb2YgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG1vZGVsIHR5cGUuIHVzaW5nIHRoaXMgbWV0aG9kIHRvIG1haW50YWluIHN5bW1ldHJ5LlxuICovXG5leHBvcnQgdHlwZSBXZWJzaXRlUGxhblByaWNlcyA9IFBpY2s8UGxhblByaWNlcywgXCJhZGRpdGlvbmFsVXNlclByaWNlTW9udGhseVwiIHwgXCJmaXJzdFllYXJEaXNjb3VudFwiIHwgXCJtb250aGx5UHJpY2VcIiB8IFwibW9udGhseVJlZmVyZW5jZVByaWNlXCI+XG5cbmV4cG9ydCB0eXBlIFNlbGVjdGVkU3Vic2NyaXB0aW9uT3B0aW9ucyA9IHtcblx0YnVzaW5lc3NVc2U6IFN0cmVhbTxib29sZWFuPlxuXHRwYXltZW50SW50ZXJ2YWw6IFN0cmVhbTxQYXltZW50SW50ZXJ2YWw+XG59XG5cbi8qKlxuICogc2luY2Ugc29tZSB0cmFuc2xhdGlvbnMgY29udGFpbiBzbG90cyB0aGF0IHdpbGwgYmUgcG9wdWxhdGVkIHdpdGhcbiAqIGR5bmFtaWMgY29udGVudCAoZGVwZW5kaW5nIG9uIG9wdGlvbnMgJiBsb2NhbGUpLFxuICogd2UgaGF2ZSB0byBwcm92aWRlIGZ1bmN0aW9ucyB0byBwcm9kdWNlIGl0LiB0aGVzZVxuICogYXJlIHVzZWQgdG8gc2VsZWN0IHRoZSBjb3JyZWN0IG9uZS5cbiAqKi9cbmV4cG9ydCB0eXBlIFJlcGxhY2VtZW50S2V5ID0gXCJjdXN0b21Eb21haW5zXCIgfCBcIm1haWxBZGRyZXNzQWxpYXNlc1wiIHwgXCJzdG9yYWdlXCIgfCBcImxhYmVsXCJcblxuLyoqXG4gKiBBIGNhdGVnb3J5IG9mIGZlYXR1cmVzIHRvIGJlIHNob3duXG4gKiB0aXRsZTogdHJhbnNsYXRpb24ga2V5IGZvciB0aGUgdGl0bGVcbiAqIGZlYXR1cmVzOiBMaXN0IG9mIGZlYXR1cmVzIGluIHRoaXMgY2F0ZWdvcnlcbiAqIG9taXQ6IHdoZXRoZXIgdGhpcyBjYW4gYmUgb21pdHRlZCBmcm9tIHRoZSBjb21wYWN0IGZlYXR1cmUgbGlzdCxcbiAqL1xuZXhwb3J0IHR5cGUgRmVhdHVyZUNhdGVnb3J5ID0ge1xuXHR0aXRsZTogVHJhbnNsYXRpb25LZXlcblx0ZmVhdHVyZXM6IEFycmF5PEZlYXR1cmVMaXN0SXRlbT5cblx0ZmVhdHVyZUNvdW50OiB7IG1heDogbnVtYmVyIH1cbn1cblxuLyoqXG4gKiBvbmUgaXRlbSBpbiB0aGUgbGlzdCB0aGF0J3Mgc2hvd24gYmVsb3cgYSBzdWJzY3JpcHRpb24gYm94LFxuICogdGV4dDogdHJhbnNsYXRpb24ga2V5IGZvciB0aGUgbGFiZWwsXG4gKiB0b29sVGlwOiB0cmFuc2xhdGlvbiBrZXkgZm9yIHRoZSB0b29sdGlwIHRoYXQgd2lsbCBiZSBzaG93biBvbiBob3ZlcixcbiAqIG9taXQ6IHdoZXRoZXIgdGhpcyBjYW4gYmUgb21pdHRlZCBmcm9tIHRoZSBjb21wYWN0IGZlYXR1cmUgbGlzdCxcbiAqIGFudGlGZWF0dXJlOiBzb21lIGxpc3QgaXRlbXMgYXJlIGRlbm90aW5nIHRoZSBsYWNrIG9mIGEgZmVhdHVyZSBhbmQgYXJlXG4gKiAgIHJlbmRlcmVkIHdpdGggYW4gZGlmZmVyZW50IGljb24uXG4gKiByZXBsYWNlbWVudHM6IGEga2V5IHRvIHNlbGVjdCB0aGUgY29ycmVjdCBjb250ZW50IHRvIHJlcGxhY2UgdGhlIHNsb3RzIGluIHRoZSB0cmFuc2xhdGlvblxuICovXG5leHBvcnQgdHlwZSBGZWF0dXJlTGlzdEl0ZW0gPSB7XG5cdHRleHQ6IFRyYW5zbGF0aW9uS2V5XG5cdHRvb2xUaXA/OiBUcmFuc2xhdGlvbktleVxuXHRvbWl0OiBib29sZWFuXG5cdGFudGlGZWF0dXJlPzogYm9vbGVhblxuXHRyZXBsYWNlbWVudHM/OiBSZXBsYWNlbWVudEtleVxuXHRoZWFydD86IGJvb2xlYW5cbn1cblxuLyoqXG4gKiBzdWJ0aXRsZTogdGhlIHNob3J0IHRleHQgc2hvd24gYmVsb3cgdGhlIHN1YnNjcmlwdGlvbiBuYW1lIGluIHRoZSBidXkgYm94XG4gKiBmZWF0dXJlczogZmxhdCwgb3JkZXJlZCBsaXN0IG9mIGZlYXR1cmVzIGZvciB0aGlzIHN1YnNjcmlwdGlvbiB0eXBlXG4gKi9cbnR5cGUgRmVhdHVyZUxpc3RzID0geyBbSyBpbiBQbGFuTmFtZV06IHsgc3VidGl0bGU6IHN0cmluZzsgY2F0ZWdvcmllczogQXJyYXk8RmVhdHVyZUNhdGVnb3J5PiB9IH1cblxuLyoqXG4gKiBAcmV0dXJucyB0aGUgbmFtZSB0byBzaG93IHRvIHRoZSB1c2VyIGZvciB0aGUgY3VycmVudCBzdWJzY3JpcHRpb24gKFByZW1pdW1CdXNpbmVzcyAtPiBQcmVtaXVtIGV0Yy4pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZU9mUGxhblR5cGUocGxhblR5cGU6IFBsYW5UeXBlKTogc3RyaW5nIHtcblx0c3dpdGNoIChwbGFuVHlwZSkge1xuXHRcdGNhc2UgUGxhblR5cGUuUHJlbWl1bUJ1c2luZXNzOlxuXHRcdFx0cmV0dXJuIGRvd25jYXN0KFBsYW5UeXBlVG9OYW1lW1BsYW5UeXBlLlByZW1pdW1dKVxuXHRcdGNhc2UgUGxhblR5cGUuVGVhbXNCdXNpbmVzczpcblx0XHRcdHJldHVybiBkb3duY2FzdChQbGFuVHlwZVRvTmFtZVtQbGFuVHlwZS5UZWFtc10pXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBkb3duY2FzdChQbGFuVHlwZVRvTmFtZVtwbGFuVHlwZV0pXG5cdH1cbn1cblxuZXhwb3J0IHR5cGUgU3Vic2NyaXB0aW9uUGxhblByaWNlcyA9IFJlY29yZDxQbGFuVHlwZSwgUGxhblByaWNlcz5cblxuZXhwb3J0IGNvbnN0IGVudW0gVXBncmFkZVByaWNlVHlwZSB7XG5cdFBsYW5SZWZlcmVuY2VQcmljZSA9IFwiMFwiLFxuXHRQbGFuQWN0dWFsUHJpY2UgPSBcIjFcIixcblx0UGxhbk5leHRZZWFyc1ByaWNlID0gXCIyXCIsXG5cdEFkZGl0aW9uYWxVc2VyUHJpY2UgPSBcIjNcIixcblx0Q29udGFjdEZvcm1QcmljZV9VTlVTRUQgPSBcIjRcIixcbn1cbiIsImltcG9ydCB7IERhdGVUaW1lLCBJbnRlcnZhbCB9IGZyb20gXCJsdXhvblwiXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlZmVyZW5jZURhdGVXaXRoaW5DeWJlck1vbmRheUNhbXBhaWduKHJlZmVyZW5jZURhdGU6IERhdGUpIHtcblx0Y29uc3Qgc3RhcnRJc28gPSBcIjIwMjQtMTEtMTVUMTA6MDA6MDArMDE6MDBcIlxuXHRjb25zdCBlbmRJc28gPSBcIjIwMjQtMTItMDVUMTA6MDA6MDArMDE6MDBcIlxuXG5cdGNvbnN0IGN5YmVyTW9uZGF5MjAyNEludGVydmFsID0gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhEYXRlVGltZS5mcm9tSVNPKHN0YXJ0SXNvKSwgRGF0ZVRpbWUuZnJvbUlTTyhlbmRJc28pKVxuXG5cdHJldHVybiBjeWJlck1vbmRheTIwMjRJbnRlcnZhbC5jb250YWlucyhEYXRlVGltZS5mcm9tSlNEYXRlKHJlZmVyZW5jZURhdGUpKVxufVxuIiwiaW1wb3J0IHsgQm9va2luZ0l0ZW1GZWF0dXJlVHlwZSwgQ29uc3QsIFBheW1lbnRNZXRob2RUeXBlLCBQbGFuVHlwZSwgUGxhblR5cGVUb05hbWUgfSBmcm9tIFwiLi4vYXBpL2NvbW1vbi9UdXRhbm90YUNvbnN0YW50c1wiXG5pbXBvcnQgeyBhc3NlcnRUcmFuc2xhdGlvbiwgbGFuZywgVHJhbnNsYXRpb25LZXkgfSBmcm9tIFwiLi4vbWlzYy9MYW5ndWFnZVZpZXdNb2RlbFwiXG5pbXBvcnQgeyBhc3NlcnROb3ROdWxsLCBkb3duY2FzdCwgbmV2ZXJOdWxsIH0gZnJvbSBcIkB0dXRhby90dXRhbm90YS11dGlsc1wiXG5pbXBvcnQgdHlwZSB7IEFjY291bnRpbmdJbmZvLCBQbGFuUHJpY2VzLCBQcmljZURhdGEsIFByaWNlSXRlbURhdGEgfSBmcm9tIFwiLi4vYXBpL2VudGl0aWVzL3N5cy9UeXBlUmVmcy5qc1wiXG5pbXBvcnQgeyBjcmVhdGVVcGdyYWRlUHJpY2VTZXJ2aWNlRGF0YSwgVXBncmFkZVByaWNlU2VydmljZVJldHVybiB9IGZyb20gXCIuLi9hcGkvZW50aXRpZXMvc3lzL1R5cGVSZWZzLmpzXCJcbmltcG9ydCB7IFVwZ3JhZGVQcmljZVR5cGUsIFdlYnNpdGVQbGFuUHJpY2VzIH0gZnJvbSBcIi4vRmVhdHVyZUxpc3RQcm92aWRlclwiXG5pbXBvcnQgeyBVcGdyYWRlUHJpY2VTZXJ2aWNlIH0gZnJvbSBcIi4uL2FwaS9lbnRpdGllcy9zeXMvU2VydmljZXNcIlxuaW1wb3J0IHsgSVNlcnZpY2VFeGVjdXRvciB9IGZyb20gXCIuLi9hcGkvY29tbW9uL1NlcnZpY2VSZXF1ZXN0XCJcbmltcG9ydCB7IFByb2dyYW1taW5nRXJyb3IgfSBmcm9tIFwiLi4vYXBpL2NvbW1vbi9lcnJvci9Qcm9ncmFtbWluZ0Vycm9yLmpzXCJcbmltcG9ydCB7IFVzZXJFcnJvciB9IGZyb20gXCIuLi9hcGkvbWFpbi9Vc2VyRXJyb3IuanNcIlxuaW1wb3J0IHsgaXNJT1NBcHAgfSBmcm9tIFwiLi4vYXBpL2NvbW1vbi9FbnZcIlxuaW1wb3J0IHsgTW9iaWxlUGxhblByaWNlIH0gZnJvbSBcIi4uL25hdGl2ZS9jb21tb24vZ2VuZXJhdGVkaXBjL01vYmlsZVBsYW5QcmljZVwiXG5pbXBvcnQgeyBsb2NhdG9yIH0gZnJvbSBcIi4uL2FwaS9tYWluL0NvbW1vbkxvY2F0b3IuanNcIlxuaW1wb3J0IHsgaXNSZWZlcmVuY2VEYXRlV2l0aGluQ3liZXJNb25kYXlDYW1wYWlnbiB9IGZyb20gXCIuLi9taXNjL0N5YmVyTW9uZGF5VXRpbHMuanNcIlxuXG5leHBvcnQgY29uc3QgZW51bSBQYXltZW50SW50ZXJ2YWwge1xuXHRNb250aGx5ID0gMSxcblx0WWVhcmx5ID0gMTIsXG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIFByaWNlVHlwZSB7XG5cdE1vbnRobHlQZXJNb250aCxcblx0WWVhcmx5UGVyTW9udGgsXG5cdFllYXJseVBlclllYXIsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc1BheW1lbnRJbnRlcnZhbChwYXltZW50SW50ZXJ2YWw6IHN0cmluZyB8IG51bWJlcik6IFBheW1lbnRJbnRlcnZhbCB7XG5cdGlmICh0eXBlb2YgcGF5bWVudEludGVydmFsID09PSBcInN0cmluZ1wiKSB7XG5cdFx0cGF5bWVudEludGVydmFsID0gTnVtYmVyKHBheW1lbnRJbnRlcnZhbClcblx0fVxuXHRzd2l0Y2ggKHBheW1lbnRJbnRlcnZhbCkge1xuXHRcdC8vIGFkZGl0aW9uYWwgY2FzdCB0byBtYWtlIHRoaXMgcm9idXN0IGFnYWluc3QgY2hhbmdlcyB0byB0aGUgUGF5bWVudEludGVydmFsIGVudW0uXG5cdFx0Y2FzZSBOdW1iZXIoUGF5bWVudEludGVydmFsLk1vbnRobHkpOlxuXHRcdFx0cmV0dXJuIFBheW1lbnRJbnRlcnZhbC5Nb250aGx5XG5cdFx0Y2FzZSBOdW1iZXIoUGF5bWVudEludGVydmFsLlllYXJseSk6XG5cdFx0XHRyZXR1cm4gUGF5bWVudEludGVydmFsLlllYXJseVxuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBuZXcgUHJvZ3JhbW1pbmdFcnJvcihgaW52YWxpZCBwYXltZW50IGludGVydmFsOiAke3BheW1lbnRJbnRlcnZhbH1gKVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXltZW50TWV0aG9kTmFtZShwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kVHlwZSk6IHN0cmluZyB7XG5cdGlmIChwYXltZW50TWV0aG9kID09PSBQYXltZW50TWV0aG9kVHlwZS5JbnZvaWNlKSB7XG5cdFx0cmV0dXJuIGxhbmcuZ2V0KFwicGF5bWVudE1ldGhvZE9uQWNjb3VudF9sYWJlbFwiKVxuXHR9IGVsc2UgaWYgKHBheW1lbnRNZXRob2QgPT09IFBheW1lbnRNZXRob2RUeXBlLkNyZWRpdENhcmQpIHtcblx0XHRyZXR1cm4gbGFuZy5nZXQoXCJwYXltZW50TWV0aG9kQ3JlZGl0Q2FyZF9sYWJlbFwiKVxuXHR9IGVsc2UgaWYgKHBheW1lbnRNZXRob2QgPT09IFBheW1lbnRNZXRob2RUeXBlLlNlcGEpIHtcblx0XHRyZXR1cm4gXCJTRVBBXCJcblx0fSBlbHNlIGlmIChwYXltZW50TWV0aG9kID09PSBQYXltZW50TWV0aG9kVHlwZS5QYXlwYWwpIHtcblx0XHRyZXR1cm4gXCJQYXlQYWxcIlxuXHR9IGVsc2UgaWYgKHBheW1lbnRNZXRob2QgPT09IFBheW1lbnRNZXRob2RUeXBlLkFjY291bnRCYWxhbmNlKSB7XG5cdFx0cmV0dXJuIGxhbmcuZ2V0KFwicGF5bWVudE1ldGhvZEFjY291bnRCYWxhbmNlX2xhYmVsXCIpXG5cdH0gZWxzZSBpZiAocGF5bWVudE1ldGhvZCA9PT0gUGF5bWVudE1ldGhvZFR5cGUuQXBwU3RvcmUpIHtcblx0XHRyZXR1cm4gXCJBcHAgU3RvcmVcIlxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBcIjxcIiArIGxhbmcuZ2V0KFwiY29tYm9Cb3hTZWxlY3Rpb25Ob25lX21zZ1wiKSArIFwiPlwiXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBheW1lbnRNZXRob2RJbmZvVGV4dChhY2NvdW50aW5nSW5mbzogQWNjb3VudGluZ0luZm8pOiBzdHJpbmcge1xuXHRpZiAoYWNjb3VudGluZ0luZm8ucGF5bWVudE1ldGhvZEluZm8pIHtcblx0XHRyZXR1cm4gYWNjb3VudGluZ0luZm8ucGF5bWVudE1ldGhvZCA9PT0gUGF5bWVudE1ldGhvZFR5cGUuQ3JlZGl0Q2FyZFxuXHRcdFx0PyBsYW5nLmdldChcImVuZHNXaXRoX2xhYmVsXCIpICsgXCIgXCIgKyBuZXZlck51bGwoYWNjb3VudGluZ0luZm8ucGF5bWVudE1ldGhvZEluZm8pXG5cdFx0XHQ6IG5ldmVyTnVsbChhY2NvdW50aW5nSW5mby5wYXltZW50TWV0aG9kSW5mbylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gXCJcIlxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRQcmljZURhdGFXaXRoSW5mbyhwcmljZURhdGE6IFByaWNlRGF0YSk6IHN0cmluZyB7XG5cdHJldHVybiBmb3JtYXRQcmljZVdpdGhJbmZvKGZvcm1hdFByaWNlKE51bWJlcihwcmljZURhdGEucHJpY2UpLCB0cnVlKSwgYXNQYXltZW50SW50ZXJ2YWwocHJpY2VEYXRhLnBheW1lbnRJbnRlcnZhbCksIHByaWNlRGF0YS50YXhJbmNsdWRlZClcbn1cblxuLy8gVXNlZCBvbiB3ZWJzaXRlLCBrZWVwIGl0IGluIHN5bmNcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRQcmljZSh2YWx1ZTogbnVtYmVyLCBpbmNsdWRlQ3VycmVuY3k6IGJvb2xlYW4pOiBzdHJpbmcge1xuXHQvLyByb3VuZCB0byB0d28gZGlnaXRzIGZpcnN0IGJlY2F1c2Ugc21hbGwgZGV2aWF0aW9ucyBtYXkgZXhpc3QgYXQgZmFyIGF3YXkgZGVjaW1hbCBwbGFjZXNcblx0dmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMFxuXG5cdGlmIChpbmNsdWRlQ3VycmVuY3kpIHtcblx0XHRyZXR1cm4gdmFsdWUgJSAxICE9PSAwID8gbGFuZy5mb3JtYXRzLnByaWNlV2l0aEN1cnJlbmN5LmZvcm1hdCh2YWx1ZSkgOiBsYW5nLmZvcm1hdHMucHJpY2VXaXRoQ3VycmVuY3lXaXRob3V0RnJhY3Rpb25EaWdpdHMuZm9ybWF0KHZhbHVlKVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiB2YWx1ZSAlIDEgIT09IDAgPyBsYW5nLmZvcm1hdHMucHJpY2VXaXRob3V0Q3VycmVuY3kuZm9ybWF0KHZhbHVlKSA6IGxhbmcuZm9ybWF0cy5wcmljZVdpdGhvdXRDdXJyZW5jeVdpdGhvdXRGcmFjdGlvbkRpZ2l0cy5mb3JtYXQodmFsdWUpXG5cdH1cbn1cblxuLyoqXG4gKiBGb3JtYXRzIHRoZSBtb250aGx5IHByaWNlIG9mIHRoZSBzdWJzY3JpcHRpb24gKGV2ZW4gZm9yIHllYXJseSBzdWJzY3JpcHRpb25zKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE1vbnRobHlQcmljZShzdWJzY3JpcHRpb25QcmljZTogbnVtYmVyLCBwYXltZW50SW50ZXJ2YWw6IFBheW1lbnRJbnRlcnZhbCk6IHN0cmluZyB7XG5cdGNvbnN0IG1vbnRobHlQcmljZSA9IHBheW1lbnRJbnRlcnZhbCA9PT0gUGF5bWVudEludGVydmFsLlllYXJseSA/IHN1YnNjcmlwdGlvblByaWNlIC8gTnVtYmVyKFBheW1lbnRJbnRlcnZhbC5ZZWFybHkpIDogc3Vic2NyaXB0aW9uUHJpY2Vcblx0cmV0dXJuIGZvcm1hdFByaWNlKG1vbnRobHlQcmljZSwgdHJ1ZSlcbn1cblxuLyoqXG4gKiBGb3JtYXRzIHRoZSB5ZWFybHkgcHJpY2UgZm9yIHRoZSBmdWxsIHllYXIgKG5vdCBtb250aGx5KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFByaWNlV2l0aEluZm8oZm9ybWF0dGVkUHJpY2U6IHN0cmluZywgcGF5bWVudEludGVydmFsOiBQYXltZW50SW50ZXJ2YWwsIHRheEluY2x1ZGVkOiBib29sZWFuKTogc3RyaW5nIHtcblx0Y29uc3QgbmV0T3JHcm9zcyA9IHRheEluY2x1ZGVkID8gbGFuZy5nZXQoXCJncm9zc19sYWJlbFwiKSA6IGxhbmcuZ2V0KFwibmV0X2xhYmVsXCIpXG5cdGNvbnN0IHllYXJseU9yTW9udGhseSA9IHBheW1lbnRJbnRlcnZhbCA9PT0gUGF5bWVudEludGVydmFsLlllYXJseSA/IGxhbmcuZ2V0KFwicHJpY2luZy5wZXJZZWFyX2xhYmVsXCIpIDogbGFuZy5nZXQoXCJwcmljaW5nLnBlck1vbnRoX2xhYmVsXCIpXG5cdHJldHVybiBgJHtmb3JtYXR0ZWRQcmljZX0gJHt5ZWFybHlPck1vbnRobHl9ICgke25ldE9yR3Jvc3N9KWBcbn1cblxuLyoqXG4gKiBQcm92aWRlcyB0aGUgcHJpY2UgaXRlbSBmcm9tIHRoZSBnaXZlbiBwcmljZURhdGEgZm9yIHRoZSBnaXZlbiBmZWF0dXJlVHlwZS4gUmV0dXJucyBudWxsIGlmIG5vIHN1Y2ggaXRlbSBpcyBhdmFpbGFibGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmljZUl0ZW0ocHJpY2VEYXRhOiBQcmljZURhdGEgfCBudWxsLCBmZWF0dXJlVHlwZTogTnVtYmVyU3RyaW5nKTogUHJpY2VJdGVtRGF0YSB8IG51bGwge1xuXHRyZXR1cm4gcHJpY2VEYXRhPy5pdGVtcy5maW5kKChpdGVtKSA9PiBpdGVtLmZlYXR1cmVUeXBlID09PSBmZWF0dXJlVHlwZSkgPz8gbnVsbFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q291bnRGcm9tUHJpY2VEYXRhKHByaWNlRGF0YTogUHJpY2VEYXRhIHwgbnVsbCwgZmVhdHVyZVR5cGU6IEJvb2tpbmdJdGVtRmVhdHVyZVR5cGUpOiBudW1iZXIge1xuXHRjb25zdCBwcmljZUl0ZW0gPSBnZXRQcmljZUl0ZW0ocHJpY2VEYXRhLCBmZWF0dXJlVHlwZSlcblx0cmV0dXJuIHByaWNlSXRlbSA/IE51bWJlcihwcmljZUl0ZW0uY291bnQpIDogMFxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHByaWNlIGZvciB0aGUgZmVhdHVyZSB0eXBlIGZyb20gdGhlIHByaWNlIGRhdGEgaWYgYXZhaWxhYmxlLiBvdGhlcndpc2UgMC5cbiAqIEByZXR1cm4gVGhlIHByaWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmljZUZyb21QcmljZURhdGEocHJpY2VEYXRhOiBQcmljZURhdGEgfCBudWxsLCBmZWF0dXJlVHlwZTogTnVtYmVyU3RyaW5nKTogbnVtYmVyIHtcblx0bGV0IGl0ZW0gPSBnZXRQcmljZUl0ZW0ocHJpY2VEYXRhLCBmZWF0dXJlVHlwZSlcblxuXHRpZiAoaXRlbSkge1xuXHRcdHJldHVybiBOdW1iZXIoaXRlbS5wcmljZSlcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gMFxuXHR9XG59XG5cbi8vIENvbnRhaW5zIHRoZSBwcmljZSBvZiBhIHN1YnNjcmlwdGlvbiBhcyBib3RoIGZvcm1hdHRlZCBhbmQgdW5mb3JtYXR0ZWQgc3RyaW5nc1xuZXhwb3J0IHR5cGUgU3Vic2NyaXB0aW9uUHJpY2UgPSB7XG5cdC8vIFRoZSBsb2NhbGUgZm9ybWF0dGVkIHByaWNlIG9mIGEgZGVzY3JpcHRpb24gaW4gdGhlIGxvY2FsIGN1cnJlbmN5IG9uIGlPUyBhbmQgaW4gRXVybyBlbHNld2hlcmVcblx0ZGlzcGxheVByaWNlOiBzdHJpbmdcblx0Ly8gVGhlIHJhdyBwcmljZSBpbiB0aGUgbG9jYWwgY3VycmVuY3kgb24gaU9TIGFuZCBpbiBFdXJvIGVsc2V3aGVyZSBhcyBhIGZsb2F0XG5cdHJhd1ByaWNlOiBzdHJpbmdcbn1cblxuZXhwb3J0IGNsYXNzIFByaWNlQW5kQ29uZmlnUHJvdmlkZXIge1xuXHRwcml2YXRlIHVwZ3JhZGVQcmljZURhdGE6IFVwZ3JhZGVQcmljZVNlcnZpY2VSZXR1cm4gfCBudWxsID0gbnVsbFxuXHRwcml2YXRlIHBsYW5QcmljZXM6IEFycmF5PFBsYW5QcmljZXM+IHwgbnVsbCA9IG51bGxcblx0cHJpdmF0ZSBpc1JlZmVycmFsQ29kZVNpZ251cDogYm9vbGVhbiA9IGZhbHNlXG5cdHByaXZhdGUgbW9iaWxlUHJpY2VzOiBNYXA8c3RyaW5nLCBNb2JpbGVQbGFuUHJpY2U+IHwgbnVsbCA9IG51bGxcblxuXHRwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cblxuXHRwcml2YXRlIGFzeW5jIGluaXQocmVnaXN0cmF0aW9uRGF0YUlkOiBzdHJpbmcgfCBudWxsLCBzZXJ2aWNlRXhlY3V0b3I6IElTZXJ2aWNlRXhlY3V0b3IsIHJlZmVycmFsQ29kZTogc3RyaW5nIHwgbnVsbCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IGRhdGEgPSBjcmVhdGVVcGdyYWRlUHJpY2VTZXJ2aWNlRGF0YSh7XG5cdFx0XHRkYXRlOiBDb25zdC5DVVJSRU5UX0RBVEUsXG5cdFx0XHRjYW1wYWlnbjogcmVnaXN0cmF0aW9uRGF0YUlkLFxuXHRcdFx0cmVmZXJyYWxDb2RlOiByZWZlcnJhbENvZGUsXG5cdFx0fSlcblx0XHR0aGlzLnVwZ3JhZGVQcmljZURhdGEgPSBhd2FpdCBzZXJ2aWNlRXhlY3V0b3IuZ2V0KFVwZ3JhZGVQcmljZVNlcnZpY2UsIGRhdGEpXG5cdFx0aWYgKGlzSU9TQXBwKCkpIHtcblx0XHRcdHRoaXMubW9iaWxlUHJpY2VzID0gbmV3IE1hcCgpXG5cblx0XHRcdGNvbnN0IGFsbFByaWNlcyA9IGF3YWl0IGxvY2F0b3IubW9iaWxlUGF5bWVudHNGYWNhZGUuZ2V0UGxhblByaWNlcygpXG5cdFx0XHRmb3IgKGNvbnN0IHBsYW4gb2YgYWxsUHJpY2VzKSB7XG5cdFx0XHRcdHRoaXMubW9iaWxlUHJpY2VzLnNldChwbGFuLm5hbWUsIHBsYW4pXG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuaXNSZWZlcnJhbENvZGVTaWdudXAgPSByZWZlcnJhbENvZGUgIT0gbnVsbFxuXHRcdHRoaXMucGxhblByaWNlcyA9IHRoaXMudXBncmFkZVByaWNlRGF0YS5wbGFuc1xuXHR9XG5cblx0c3RhdGljIGFzeW5jIGdldEluaXRpYWxpemVkSW5zdGFuY2UoXG5cdFx0cmVnaXN0cmF0aW9uRGF0YUlkOiBzdHJpbmcgfCBudWxsLFxuXHRcdHNlcnZpY2VFeGVjdXRvcjogSVNlcnZpY2VFeGVjdXRvcixcblx0XHRyZWZlcnJhbENvZGU6IHN0cmluZyB8IG51bGwsXG5cdCk6IFByb21pc2U8UHJpY2VBbmRDb25maWdQcm92aWRlcj4ge1xuXHRcdC8vIFRoZXJlIHNob3VsZCBiZSBvbmx5IG9uZSBtZXRob2QgdG8gcmVxdWVzdCBhIGRpc2NvdW50IGVpdGhlciByZWZlcnJhbENvZGUgb3IgYSBwcm9tb3Rpb25cblx0XHRpZiAocmVmZXJyYWxDb2RlICE9IG51bGwgJiYgcmVnaXN0cmF0aW9uRGF0YUlkICE9IG51bGwpIHtcblx0XHRcdHRocm93IG5ldyBVc2VyRXJyb3IoXCJyZWZlcnJhbFNpZ251cENhbXBhaWduRXJyb3JfbXNnXCIpXG5cdFx0fVxuXG5cdFx0Y29uc3QgcHJpY2VEYXRhUHJvdmlkZXIgPSBuZXcgUHJpY2VBbmRDb25maWdQcm92aWRlcigpXG5cdFx0YXdhaXQgcHJpY2VEYXRhUHJvdmlkZXIuaW5pdChyZWdpc3RyYXRpb25EYXRhSWQsIHNlcnZpY2VFeGVjdXRvciwgcmVmZXJyYWxDb2RlKVxuXHRcdHJldHVybiBwcmljZURhdGFQcm92aWRlclxuXHR9XG5cblx0Z2V0U3Vic2NyaXB0aW9uUHJpY2UocGF5bWVudEludGVydmFsOiBQYXltZW50SW50ZXJ2YWwsIHN1YnNjcmlwdGlvbjogUGxhblR5cGUsIHR5cGU6IFVwZ3JhZGVQcmljZVR5cGUpOiBudW1iZXIge1xuXHRcdHJldHVybiBwYXltZW50SW50ZXJ2YWwgPT09IFBheW1lbnRJbnRlcnZhbC5ZZWFybHlcblx0XHRcdD8gdGhpcy5nZXRZZWFybHlTdWJzY3JpcHRpb25QcmljZShzdWJzY3JpcHRpb24sIHR5cGUpXG5cdFx0XHQ6IHRoaXMuZ2V0TW9udGhseVN1YnNjcmlwdGlvblByaWNlKHN1YnNjcmlwdGlvbiwgdHlwZSlcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzdWJzY3JpcHRpb24gcHJpY2Ugd2l0aCB0aGUgY3VycmVuY3kgZm9ybWF0dGluZyBvbiBpT1MgYW5kIGFzIGEgcGxhaW4gcGVyaW9kIHNlcGVyYXRlZCBudW1iZXIgb24gb3RoZXIgcGxhdGZvcm1zXG5cdCAqL1xuXHRnZXRTdWJzY3JpcHRpb25QcmljZVdpdGhDdXJyZW5jeShwYXltZW50SW50ZXJ2YWw6IFBheW1lbnRJbnRlcnZhbCwgc3Vic2NyaXB0aW9uOiBQbGFuVHlwZSwgdHlwZTogVXBncmFkZVByaWNlVHlwZSk6IFN1YnNjcmlwdGlvblByaWNlIHtcblx0XHRjb25zdCBwcmljZSA9IHRoaXMuZ2V0U3Vic2NyaXB0aW9uUHJpY2UocGF5bWVudEludGVydmFsLCBzdWJzY3JpcHRpb24sIHR5cGUpXG5cdFx0Y29uc3QgcmF3UHJpY2UgPSBwcmljZS50b1N0cmluZygpXG5cblx0XHRpZiAoaXNJT1NBcHAoKSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0QXBwU3RvcmVQYXltZW50c1N1YnNjcmlwdGlvblByaWNlKHN1YnNjcmlwdGlvbiwgcGF5bWVudEludGVydmFsLCByYXdQcmljZSwgdHlwZSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgcHJpY2UgPSB0aGlzLmdldFN1YnNjcmlwdGlvblByaWNlKHBheW1lbnRJbnRlcnZhbCwgc3Vic2NyaXB0aW9uLCB0eXBlKVxuXHRcdFx0cmV0dXJuIHsgZGlzcGxheVByaWNlOiBmb3JtYXRQcmljZShwcmljZSwgdHJ1ZSksIHJhd1ByaWNlOiBwcmljZS50b1N0cmluZygpIH1cblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGdldEFwcFN0b3JlUGF5bWVudHNTdWJzY3JpcHRpb25QcmljZShzdWJzY3JpcHRpb246IFBsYW5UeXBlLCBwYXltZW50SW50ZXJ2YWw6IFBheW1lbnRJbnRlcnZhbCwgcmF3UHJpY2U6IHN0cmluZywgdHlwZTogVXBncmFkZVByaWNlVHlwZSkge1xuXHRcdGNvbnN0IHBsYW5OYW1lID0gUGxhblR5cGVUb05hbWVbc3Vic2NyaXB0aW9uXVxuXHRcdGNvbnN0IGFwcGxlUHJpY2VzID0gdGhpcy5nZXRNb2JpbGVQcmljZXMoKS5nZXQocGxhbk5hbWUudG9Mb3dlckNhc2UoKSlcblxuXHRcdGlmICghYXBwbGVQcmljZXMpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgbm8gc3VjaCBpT1MgcGxhbiAke3BsYW5OYW1lfWApXG5cdFx0fVxuXG5cdFx0Y29uc3QgaXNDeWJlck1vbmRheSA9IGlzUmVmZXJlbmNlRGF0ZVdpdGhpbkN5YmVyTW9uZGF5Q2FtcGFpZ24oQ29uc3QuQ1VSUkVOVF9EQVRFID8/IG5ldyBEYXRlKCkpXG5cblx0XHRzd2l0Y2ggKHBheW1lbnRJbnRlcnZhbCkge1xuXHRcdFx0Y2FzZSBQYXltZW50SW50ZXJ2YWwuTW9udGhseTpcblx0XHRcdFx0cmV0dXJuIHsgZGlzcGxheVByaWNlOiBhcHBsZVByaWNlcy5kaXNwbGF5TW9udGhseVBlck1vbnRoLCByYXdQcmljZTogYXBwbGVQcmljZXMucmF3TW9udGhseVBlck1vbnRoIH1cblx0XHRcdGNhc2UgUGF5bWVudEludGVydmFsLlllYXJseTpcblx0XHRcdFx0cmV0dXJuIHsgZGlzcGxheVByaWNlOiBhcHBsZVByaWNlcy5kaXNwbGF5WWVhcmx5UGVyWWVhciwgcmF3UHJpY2U6IGFwcGxlUHJpY2VzLnJhd1llYXJseVBlclllYXIgfVxuXHRcdH1cblx0fVxuXG5cdGdldFJhd1ByaWNpbmdEYXRhKCk6IFVwZ3JhZGVQcmljZVNlcnZpY2VSZXR1cm4ge1xuXHRcdHJldHVybiBhc3NlcnROb3ROdWxsKHRoaXMudXBncmFkZVByaWNlRGF0YSlcblx0fVxuXG5cdHByaXZhdGUgZ2V0WWVhcmx5U3Vic2NyaXB0aW9uUHJpY2Uoc3Vic2NyaXB0aW9uOiBQbGFuVHlwZSwgdXBncmFkZTogVXBncmFkZVByaWNlVHlwZSk6IG51bWJlciB7XG5cdFx0Y29uc3QgcHJpY2VzID0gdGhpcy5nZXRQbGFuUHJpY2VzRm9yUGxhbihzdWJzY3JpcHRpb24pXG5cdFx0Y29uc3QgbW9udGhseVByaWNlID0gZ2V0UHJpY2VGb3JVcGdyYWRlVHlwZSh1cGdyYWRlLCBwcmljZXMpXG5cdFx0Y29uc3QgZGlzY291bnQgPSB1cGdyYWRlID09PSBVcGdyYWRlUHJpY2VUeXBlLlBsYW5BY3R1YWxQcmljZSA/IE51bWJlcihwcmljZXMuZmlyc3RZZWFyRGlzY291bnQpIDogMFxuXHRcdHJldHVybiBtb250aGx5UHJpY2UgKiAxMCAtIGRpc2NvdW50XG5cdH1cblxuXHRwcml2YXRlIGdldE1vbnRobHlTdWJzY3JpcHRpb25QcmljZShzdWJzY3JpcHRpb246IFBsYW5UeXBlLCB1cGdyYWRlOiBVcGdyYWRlUHJpY2VUeXBlKTogbnVtYmVyIHtcblx0XHRjb25zdCBwcmljZXMgPSB0aGlzLmdldFBsYW5QcmljZXNGb3JQbGFuKHN1YnNjcmlwdGlvbilcblx0XHRyZXR1cm4gZ2V0UHJpY2VGb3JVcGdyYWRlVHlwZSh1cGdyYWRlLCBwcmljZXMpXG5cdH1cblxuXHRnZXRNb2JpbGVQcmljZXMoKTogTWFwPHN0cmluZywgTW9iaWxlUGxhblByaWNlPiB7XG5cdFx0cmV0dXJuIGFzc2VydE5vdE51bGwodGhpcy5tb2JpbGVQcmljZXMpXG5cdH1cblxuXHRnZXRQbGFuUHJpY2VzRm9yUGxhbihzdWJzY3JpcHRpb246IFBsYW5UeXBlKTogUGxhblByaWNlcyB7XG5cdFx0Y29uc3QgcGxhblByaWNlcyA9IGFzc2VydE5vdE51bGwodGhpcy5wbGFuUHJpY2VzLCBcImNhbGxlZCBnZXRQbGFuUHJpY2VzRm9yUGxhbiBiZWZvcmUgaW5pdFwiKVxuXHRcdHJldHVybiBhc3NlcnROb3ROdWxsKFxuXHRcdFx0cGxhblByaWNlcy5maW5kKChwcmljZXMpID0+IFBsYW5UeXBlVG9OYW1lW3N1YnNjcmlwdGlvbl0gPT09IHByaWNlcy5wbGFuTmFtZSksXG5cdFx0XHRcInBsYW4gdHlwZSBub3QgZm91bmRcIixcblx0XHQpXG5cdH1cblxuXHRnZXRQcmljZUluZm9NZXNzYWdlKCk6IFRyYW5zbGF0aW9uS2V5IHwgbnVsbCB7XG5cdFx0Y29uc3QgcmF3RGF0YSA9IHRoaXMuZ2V0UmF3UHJpY2luZ0RhdGEoKVxuXHRcdGNvbnN0IGJvbnVzTW9udGhNZXNzYWdlID0gZ2V0UmVhc29uRm9yQm9udXNNb250aHMoTnVtYmVyKHJhd0RhdGEuYm9udXNNb250aHNGb3JZZWFybHlQbGFuKSwgdGhpcy5pc1JlZmVycmFsQ29kZVNpZ251cClcblx0XHRpZiAoYm9udXNNb250aE1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiBib251c01vbnRoTWVzc2FnZVxuXHRcdH0gZWxzZSBpZiAocmF3RGF0YS5tZXNzYWdlVGV4dElkKSB7XG5cdFx0XHQvLyB0ZXh0IGlkIHRoYXQgaXMgc3BlY2lmaWVkIGJ5IGEgcHJvbW90aW9uLlxuXHRcdFx0cmV0dXJuIGFzc2VydFRyYW5zbGF0aW9uKHJhd0RhdGEubWVzc2FnZVRleHRJZClcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG51bGxcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0UHJpY2VGb3JVcGdyYWRlVHlwZSh1cGdyYWRlOiBVcGdyYWRlUHJpY2VUeXBlLCBwcmljZXM6IFdlYnNpdGVQbGFuUHJpY2VzKTogbnVtYmVyIHtcblx0c3dpdGNoICh1cGdyYWRlKSB7XG5cdFx0Y2FzZSBVcGdyYWRlUHJpY2VUeXBlLlBsYW5SZWZlcmVuY2VQcmljZTpcblx0XHRcdHJldHVybiBOdW1iZXIocHJpY2VzLm1vbnRobHlSZWZlcmVuY2VQcmljZSlcblx0XHRjYXNlIFVwZ3JhZGVQcmljZVR5cGUuUGxhbkFjdHVhbFByaWNlOlxuXHRcdGNhc2UgVXBncmFkZVByaWNlVHlwZS5QbGFuTmV4dFllYXJzUHJpY2U6XG5cdFx0XHRyZXR1cm4gTnVtYmVyKHByaWNlcy5tb250aGx5UHJpY2UpXG5cdFx0Y2FzZSBVcGdyYWRlUHJpY2VUeXBlLkFkZGl0aW9uYWxVc2VyUHJpY2U6XG5cdFx0XHRyZXR1cm4gTnVtYmVyKHByaWNlcy5hZGRpdGlvbmFsVXNlclByaWNlTW9udGhseSlcblx0XHRjYXNlIFVwZ3JhZGVQcmljZVR5cGUuQ29udGFjdEZvcm1QcmljZV9VTlVTRUQ6XG5cdFx0XHR0aHJvdyBuZXcgUHJvZ3JhbW1pbmdFcnJvcihcImludmFsaWQgcHJpY2UgdHlwZVwiKVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlc2NlbmRpbmdTdWJzY3JpcHRpb25PcmRlcigpOiBBcnJheTxQbGFuVHlwZT4ge1xuXHRyZXR1cm4gW1BsYW5UeXBlLlVubGltaXRlZCwgUGxhblR5cGUuQWR2YW5jZWQsIFBsYW5UeXBlLkxlZ2VuZCwgUGxhblR5cGUuRXNzZW50aWFsLCBQbGFuVHlwZS5SZXZvbHV0aW9uYXJ5XVxufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdGFyZ2V0U3Vic2NyaXB0aW9uIHBsYW4gaXMgY29uc2lkZXJlZCB0byBiZSBhIGxvd2VyICh+IGNoZWFwZXIpIHN1YnNjcmlwdGlvbiBwbGFuXG4gKiBJcyBiYXNlZCBvbiB0aGUgb3JkZXIgb2YgYnVzaW5lc3MgYW5kIG5vbi1idXNpbmVzcyBzdWJzY3JpcHRpb25zIGFzIGRlZmluZWQgaW4gZGVzY2VuZGluZ1N1YnNjcmlwdGlvbk9yZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvbkRvd25ncmFkZSh0YXJnZXRTdWJzY3JpcHRpb246IFBsYW5UeXBlLCBjdXJyZW50U3Vic2NyaXB0aW9uOiBQbGFuVHlwZSk6IGJvb2xlYW4ge1xuXHRjb25zdCBvcmRlciA9IGRlc2NlbmRpbmdTdWJzY3JpcHRpb25PcmRlcigpXG5cdGlmIChPYmplY3QudmFsdWVzKFBsYW5UeXBlKS5pbmNsdWRlcyhkb3duY2FzdChjdXJyZW50U3Vic2NyaXB0aW9uKSkpIHtcblx0XHRyZXR1cm4gb3JkZXIuaW5kZXhPZih0YXJnZXRTdWJzY3JpcHRpb24pID4gb3JkZXIuaW5kZXhPZihkb3duY2FzdChjdXJyZW50U3Vic2NyaXB0aW9uKSlcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgdGhlIHJlYXNvbiBmb3IgYm9udXMgbW9udGhzIHRoYXQgaGF2ZSBiZSBwcm92aWRlZCBieSB0aGUgVXBncmFkZVByaWNlU2VydmljZVxuICogQHBhcmFtIGJvbnVzTW9udGhzIFRoZSBhbW91bnQgb2YgYm9udXMgbW9udGhcbiAqIEBwYXJhbSBpc1JlZmVycmFsQ29kZVNpZ251cCBJbmRpY2F0aW9uIGlmIGEgcmVmZXJyYWwgY29kZSBoYXMgYmVlbiB1c2VkIHRvIHF1ZXJ5IHRoZSBib251cyBtb250aHMuXG4gKi9cbmZ1bmN0aW9uIGdldFJlYXNvbkZvckJvbnVzTW9udGhzKGJvbnVzTW9udGhzOiBudW1iZXIsIGlzUmVmZXJyYWxDb2RlU2lnbnVwOiBib29sZWFuKTogVHJhbnNsYXRpb25LZXkgfCBudWxsIHtcblx0aWYgKGJvbnVzTW9udGhzID09IDEyKSB7XG5cdFx0cmV0dXJuIFwiY2hvb3NlWWVhcmx5Rm9yT2ZmZXJfbXNnXCJcblx0fSBlbHNlIGlmIChib251c01vbnRocyA9PSAxKSB7XG5cdFx0cmV0dXJuIFwicmVmZXJyYWxTaWdudXBfbXNnXCJcblx0fSBlbHNlIGlmIChib251c01vbnRocyA9PSAwICYmIGlzUmVmZXJyYWxDb2RlU2lnbnVwKSB7XG5cdFx0cmV0dXJuIFwicmVmZXJyYWxTaWdudXBJbnZhbGlkX21zZ1wiXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG51bGxcblx0fVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFRQSxJQUFJQSxlQUEyQztBQUUvQyxNQUFNQyx3QkFBMEMsQ0FBQyxzQkFBdUI7SUFFM0Qsc0JBQU4sTUFBTSxvQkFBb0I7Q0FDaEMsQUFBUSxjQUFtQztDQUUzQyxBQUFRLFlBQTZCQyxjQUE0QjtFQXFKakUsS0FySnFDO0NBQThCO0NBRW5FLE1BQWMsT0FBc0I7QUFDbkMsTUFBSSx1QkFBdUIsTUFBTztFQUNsQyxNQUFNLG1CQUFtQixFQUFFLEtBQUssYUFBYSxlQUFlO0FBQzVELE1BQUk7R0FDSCxNQUFNLGNBQWMsTUFBTSxNQUFNLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO0FBQ3RFLE9BQUksVUFBVSxDQUNiLE1BQUssNEJBQTRCLFlBQVk7QUFFOUMsUUFBSyxjQUFjO0lBQUMsR0FBRyxZQUFZLEtBQUs7SUFBWSxHQUFHLFlBQVksY0FBYztJQUFZLEdBQUcsWUFBWSxPQUFPO0dBQVcsRUFBQztBQUMvSCxRQUFLLGNBQWM7SUFBQyxHQUFHLFlBQVksVUFBVTtJQUFZLEdBQUcsWUFBWSxTQUFTO0lBQVksR0FBRyxZQUFZLFVBQVU7R0FBVyxFQUFDO0FBQ2xJLFFBQUssY0FBYztFQUNuQixTQUFRLEdBQUc7QUFDWCxXQUFRLE1BQU0scUNBQXFDLGdCQUFnQixHQUFHLEVBQUU7RUFDeEU7Q0FDRDtDQUVELEFBQVEsY0FBY0MsWUFBcUM7RUFDMUQsTUFBTSxnQkFBZ0IsSUFBSTtBQUMxQixPQUFLLE1BQU0sWUFBWSxZQUFZO0dBQ2xDLE1BQU0sUUFBUSxjQUFjLElBQUksU0FBUyxNQUFNO0dBQy9DLE1BQU0sbUJBQW1CLFNBQVMsU0FBUztBQUMzQyxPQUFJLFNBQVMsUUFBUSxtQkFB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