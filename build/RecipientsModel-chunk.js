import { BoundedExecutor, LazyLoaded } from "./dist2-chunk.js";
import { ContactTypeRef } from "./TypeRefs-chunk.js";
import { cleanMailAddress } from "./CommonCalendarUtils-chunk.js";
import { createNewContact, isTutaMailAddress } from "./SharedMailUtils-chunk.js";
import { RecipientType } from "./Recipient-chunk.js";
import { getContactDisplayName } from "./ContactUtils-chunk.js";

//#region src/common/api/main/RecipientsModel.ts
let ResolveMode = function(ResolveMode$1) {
	ResolveMode$1[ResolveMode$1["Lazy"] = 0] = "Lazy";
	ResolveMode$1[ResolveMode$1["Eager"] = 1] = "Eager";
	return ResolveMode$1;
}({});
var RecipientsModel = class {
	executor = new BoundedExecutor(5);
	constructor(contactModel, loginController, mailFacade, entityClient) {
		this.contactModel = contactModel;
		this.loginController = loginController;
		this.mailFacade = mailFacade;
		this.entityClient = entityClient;
	}
	/**
	* Start resolving a recipient
	* If resolveLazily === true, Then resolution will not be initiated (i.e. no server calls will be made) until the first call to `resolved`
	*/
	resolve(recipient, resolveMode) {
		return new ResolvableRecipientImpl(recipient, this.contactModel, this.loginController, (mailAddress) => this.executor.run(this.resolveRecipientType(mailAddress)), this.entityClient, resolveMode);
	}
	resolveRecipientType = (mailAddress) => async () => {
		const keyData = await this.mailFacade.getRecipientKeyData(mailAddress);
		return keyData == null ? RecipientType.EXTERNAL : RecipientType.INTERNAL;
	};
};
var ResolvableRecipientImpl = class {
	_address;
	_name;
	lazyType;
	lazyContact;
	initialType = RecipientType.UNKNOWN;
	initialContact = null;
	overrideContact = null;
	get address() {
		return this._address;
	}
	get name() {
		return this._name ?? "";
	}
	get type() {
		return this.lazyType.getSync() ?? this.initialType;
	}
	get contact() {
		return this.lazyContact.getSync() ?? this.initialContact;
	}
	constructor(arg, contactModel, loginController, typeResolver, entityClient, resolveMode) {
		this.contactModel = contactModel;
		this.loginController = loginController;
		this.typeResolver = typeResolver;
		this.entityClient = entityClient;
		if (isTutaMailAddress(arg.address) || arg.type === RecipientType.INTERNAL) {
			this.initialType = RecipientType.INTERNAL;
			this._address = cleanMailAddress(arg.address);
		} else if (arg.type) {
			this.initialType = arg.type;
			this._address = arg.address;
		} else this._address = arg.address;
		this._name = arg.name ?? null;
		if (!(arg.contact instanceof Array)) this.initialContact = arg.contact ?? null;
		this.lazyType = new LazyLoaded(() => this.resolveType());
		this.lazyContact = new LazyLoaded(async () => {
			const contact = await this.resolveContact(arg.contact);
			if (contact != null && (this._name == null || this._name === "")) this._name = getContactDisplayName(contact);
			return contact;
		});
		if (resolveMode === ResolveMode.Eager) {
			this.lazyType.load();
			this.lazyContact.load();
		}
	}
	setName(newName) {
		this._name = newName;
	}
	setContact(newContact) {
		this.overrideContact = newContact;
		this.lazyContact.reload();
	}
	async resolved() {
		await Promise.all([this.lazyType.getAsync(), this.lazyContact.getAsync()]);
		return {
			address: this.address,
			name: this.name,
			type: this.type,
			contact: this.contact
		};
	}
	isResolved() {
		return this.lazyType.isLoaded() && this.lazyContact.isLoaded();
	}
	whenResolved(handler) {
		this.resolved().then(handler);
		return this;
	}
	/**
	* Determine whether recipient is INTERNAL or EXTERNAL based on the existence of key data (external recipients don't have any)
	*/
	async resolveType() {
		if (this.initialType === RecipientType.UNKNOWN) {
			const cleanedAddress = cleanMailAddress(this.address);
			const recipientType = await this.typeResolver(cleanedAddress);
			if (recipientType === RecipientType.INTERNAL) this._address = cleanedAddress;
			return recipientType;
		} else return this.initialType;
	}
	/**
	* Resolve the recipients contact.
	* If {@param contact} is an Id, the contact will be loaded directly
	* Otherwise, the contact will be searched for in the ContactModel
	*/
	async resolveContact(contact) {
		try {
			if (this.overrideContact) return this.overrideContact;
else if (await this.contactModel.getContactListId() == null) {
				console.log("can't resolve contacts for users with no contact list id");
				return null;
			} else if (contact instanceof Array) return await this.entityClient.load(ContactTypeRef, contact);
else if (contact == null) {
				const foundContact = await this.contactModel.searchForContact(this.address);
				if (foundContact) return foundContact;
else {
					await this.lazyType;
					return createNewContact(this.loginController.getUserController().user, this.address, this.name);
				}
			} else return contact;
		} catch (e) {
			console.log("error resolving contact", e);
			return null;
		}
	}
};

//#endregion
export { RecipientsModel, ResolveMode };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,