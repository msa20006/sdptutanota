import { TypeRef } from "./dist2-chunk.js";
import { create } from "./EntityUtils-chunk.js";
import { typeModels$2 as typeModels } from "./TypeModels-chunk.js";

//#region src/common/api/entities/tutanota/TypeRefs.ts
const AdvancedRepeatRuleTypeRef = new TypeRef("tutanota", "AdvancedRepeatRule");
const ApplyLabelServicePostInTypeRef = new TypeRef("tutanota", "ApplyLabelServicePostIn");
function createApplyLabelServicePostIn(values) {
	return Object.assign(create(typeModels.ApplyLabelServicePostIn, ApplyLabelServicePostInTypeRef), values);
}
const AttachmentKeyDataTypeRef = new TypeRef("tutanota", "AttachmentKeyData");
function createAttachmentKeyData(values) {
	return Object.assign(create(typeModels.AttachmentKeyData, AttachmentKeyDataTypeRef), values);
}
const BirthdayTypeRef = new TypeRef("tutanota", "Birthday");
function createBirthday(values) {
	return Object.assign(create(typeModels.Birthday, BirthdayTypeRef), values);
}
const BodyTypeRef = new TypeRef("tutanota", "Body");
const CalendarDeleteDataTypeRef = new TypeRef("tutanota", "CalendarDeleteData");
function createCalendarDeleteData(values) {
	return Object.assign(create(typeModels.CalendarDeleteData, CalendarDeleteDataTypeRef), values);
}
const CalendarEventTypeRef = new TypeRef("tutanota", "CalendarEvent");
function createCalendarEvent(values) {
	return Object.assign(create(typeModels.CalendarEvent, CalendarEventTypeRef), values);
}
const CalendarEventAttendeeTypeRef = new TypeRef("tutanota", "CalendarEventAttendee");
function createCalendarEventAttendee(values) {
	return Object.assign(create(typeModels.CalendarEventAttendee, CalendarEventAttendeeTypeRef), values);
}
const CalendarEventIndexRefTypeRef = new TypeRef("tutanota", "CalendarEventIndexRef");
const CalendarEventUidIndexTypeRef = new TypeRef("tutanota", "CalendarEventUidIndex");
const CalendarEventUpdateTypeRef = new TypeRef("tutanota", "CalendarEventUpdate");
const CalendarEventUpdateListTypeRef = new TypeRef("tutanota", "CalendarEventUpdateList");
const CalendarGroupRootTypeRef = new TypeRef("tutanota", "CalendarGroupRoot");
const CalendarRepeatRuleTypeRef = new TypeRef("tutanota", "CalendarRepeatRule");
function createCalendarRepeatRule(values) {
	return Object.assign(create(typeModels.CalendarRepeatRule, CalendarRepeatRuleTypeRef), values);
}
const ContactTypeRef = new TypeRef("tutanota", "Contact");
function createContact(values) {
	return Object.assign(create(typeModels.Contact, ContactTypeRef), values);
}
const ContactAddressTypeRef = new TypeRef("tutanota", "ContactAddress");
function createContactAddress(values) {
	return Object.assign(create(typeModels.ContactAddress, ContactAddressTypeRef), values);
}
const ContactCustomDateTypeRef = new TypeRef("tutanota", "ContactCustomDate");
function createContactCustomDate(values) {
	return Object.assign(create(typeModels.ContactCustomDate, ContactCustomDateTypeRef), values);
}
const ContactListTypeRef = new TypeRef("tutanota", "ContactList");
const ContactListEntryTypeRef = new TypeRef("tutanota", "ContactListEntry");
function createContactListEntry(values) {
	return Object.assign(create(typeModels.ContactListEntry, ContactListEntryTypeRef), values);
}
const ContactListGroupRootTypeRef = new TypeRef("tutanota", "ContactListGroupRoot");
const ContactMailAddressTypeRef = new TypeRef("tutanota", "ContactMailAddress");
function createContactMailAddress(values) {
	return Object.assign(create(typeModels.ContactMailAddress, ContactMailAddressTypeRef), values);
}
const ContactMessengerHandleTypeRef = new TypeRef("tutanota", "ContactMessengerHandle");
function createContactMessengerHandle(values) {
	return Object.assign(create(typeModels.ContactMessengerHandle, ContactMessengerHandleTypeRef), values);
}
const ContactPhoneNumberTypeRef = new TypeRef("tutanota", "ContactPhoneNumber");
function createContactPhoneNumber(values) {
	return Object.assign(create(typeModels.ContactPhoneNumber, ContactPhoneNumberTypeRef), values);
}
const ContactPronounsTypeRef = new TypeRef("tutanota", "ContactPronouns");
function createContactPronouns(values) {
	return Object.assign(create(typeModels.ContactPronouns, ContactPronounsTypeRef), values);
}
const ContactRelationshipTypeRef = new TypeRef("tutanota", "ContactRelationship");
function createContactRelationship(values) {
	return Object.assign(create(typeModels.ContactRelationship, ContactRelationshipTypeRef), values);
}
const ContactSocialIdTypeRef = new TypeRef("tutanota", "ContactSocialId");
function createContactSocialId(values) {
	return Object.assign(create(typeModels.ContactSocialId, ContactSocialIdTypeRef), values);
}
const ContactWebsiteTypeRef = new TypeRef("tutanota", "ContactWebsite");
function createContactWebsite(values) {
	return Object.assign(create(typeModels.ContactWebsite, ContactWebsiteTypeRef), values);
}
const ConversationEntryTypeRef = new TypeRef("tutanota", "ConversationEntry");
const CreateExternalUserGroupDataTypeRef = new TypeRef("tutanota", "CreateExternalUserGroupData");
function createCreateExternalUserGroupData(values) {
	return Object.assign(create(typeModels.CreateExternalUserGroupData, CreateExternalUserGroupDataTypeRef), values);
}
const CreateGroupPostReturnTypeRef = new TypeRef("tutanota", "CreateGroupPostReturn");
const CreateMailFolderDataTypeRef = new TypeRef("tutanota", "CreateMailFolderData");
function createCreateMailFolderData(values) {
	return Object.assign(create(typeModels.CreateMailFolderData, CreateMailFolderDataTypeRef), values);
}
const CreateMailFolderReturnTypeRef = new TypeRef("tutanota", "CreateMailFolderReturn");
const CreateMailGroupDataTypeRef = new TypeRef("tutanota", "CreateMailGroupData");
function createCreateMailGroupData(values) {
	return Object.assign(create(typeModels.CreateMailGroupData, CreateMailGroupDataTypeRef), values);
}
const CustomerAccountCreateDataTypeRef = new TypeRef("tutanota", "CustomerAccountCreateData");
function createCustomerAccountCreateData(values) {
	return Object.assign(create(typeModels.CustomerAccountCreateData, CustomerAccountCreateDataTypeRef), values);
}
const DefaultAlarmInfoTypeRef = new TypeRef("tutanota", "DefaultAlarmInfo");
function createDefaultAlarmInfo(values) {
	return Object.assign(create(typeModels.DefaultAlarmInfo, DefaultAlarmInfoTypeRef), values);
}
const DeleteGroupDataTypeRef = new TypeRef("tutanota", "DeleteGroupData");
function createDeleteGroupData(values) {
	return Object.assign(create(typeModels.DeleteGroupData, DeleteGroupDataTypeRef), values);
}
const DeleteMailDataTypeRef = new TypeRef("tutanota", "DeleteMailData");
function createDeleteMailData(values) {
	return Object.assign(create(typeModels.DeleteMailData, DeleteMailDataTypeRef), values);
}
const DeleteMailFolderDataTypeRef = new TypeRef("tutanota", "DeleteMailFolderData");
function createDeleteMailFolderData(values) {
	return Object.assign(create(typeModels.DeleteMailFolderData, DeleteMailFolderDataTypeRef), values);
}
const DraftAttachmentTypeRef = new TypeRef("tutanota", "DraftAttachment");
function createDraftAttachment(values) {
	return Object.assign(create(typeModels.DraftAttachment, DraftAttachmentTypeRef), values);
}
const DraftCreateDataTypeRef = new TypeRef("tutanota", "DraftCreateData");
function createDraftCreateData(values) {
	return Object.assign(create(typeModels.DraftCreateData, DraftCreateDataTypeRef), values);
}
const DraftCreateReturnTypeRef = new TypeRef("tutanota", "DraftCreateReturn");
const DraftDataTypeRef = new TypeRef("tutanota", "DraftData");
function createDraftData(values) {
	return Object.assign(create(typeModels.DraftData, DraftDataTypeRef), values);
}
const DraftRecipientTypeRef = new TypeRef("tutanota", "DraftRecipient");
function createDraftRecipient(values) {
	return Object.assign(create(typeModels.DraftRecipient, DraftRecipientTypeRef), values);
}
const DraftUpdateDataTypeRef = new TypeRef("tutanota", "DraftUpdateData");
function createDraftUpdateData(values) {
	return Object.assign(create(typeModels.DraftUpdateData, DraftUpdateDataTypeRef), values);
}
const DraftUpdateReturnTypeRef = new TypeRef("tutanota", "DraftUpdateReturn");
const EmailTemplateTypeRef = new TypeRef("tutanota", "EmailTemplate");
function createEmailTemplate(values) {
	return Object.assign(create(typeModels.EmailTemplate, EmailTemplateTypeRef), values);
}
const EmailTemplateContentTypeRef = new TypeRef("tutanota", "EmailTemplateContent");
function createEmailTemplateContent(values) {
	return Object.assign(create(typeModels.EmailTemplateContent, EmailTemplateContentTypeRef), values);
}
const EncryptTutanotaPropertiesDataTypeRef = new TypeRef("tutanota", "EncryptTutanotaPropertiesData");
function createEncryptTutanotaPropertiesData(values) {
	return Object.assign(create(typeModels.EncryptTutanotaPropertiesData, EncryptTutanotaPropertiesDataTypeRef), values);
}
const EncryptedMailAddressTypeRef = new TypeRef("tutanota", "EncryptedMailAddress");
function createEncryptedMailAddress(values) {
	return Object.assign(create(typeModels.EncryptedMailAddress, EncryptedMailAddressTypeRef), values);
}
const EntropyDataTypeRef = new TypeRef("tutanota", "EntropyData");
function createEntropyData(values) {
	return Object.assign(create(typeModels.EntropyData, EntropyDataTypeRef), values);
}
const ExternalUserDataTypeRef = new TypeRef("tutanota", "ExternalUserData");
function createExternalUserData(values) {
	return Object.assign(create(typeModels.ExternalUserData, ExternalUserDataTypeRef), values);
}
const FileTypeRef = new TypeRef("tutanota", "File");
function createFile(values) {
	return Object.assign(create(typeModels.File, FileTypeRef), values);
}
const FileSystemTypeRef = new TypeRef("tutanota", "FileSystem");
const GroupInvitationDeleteDataTypeRef = new TypeRef("tutanota", "GroupInvitationDeleteData");
function createGroupInvitationDeleteData(values) {
	return Object.assign(create(typeModels.GroupInvitationDeleteData, GroupInvitationDeleteDataTypeRef), values);
}
const GroupInvitationPostDataTypeRef = new TypeRef("tutanota", "GroupInvitationPostData");
function createGroupInvitationPostData(values) {
	return Object.assign(create(typeModels.GroupInvitationPostData, GroupInvitationPostDataTypeRef), values);
}
const GroupInvitationPostReturnTypeRef = new TypeRef("tutanota", "GroupInvitationPostReturn");
const GroupInvitationPutDataTypeRef = new TypeRef("tutanota", "GroupInvitationPutData");
function createGroupInvitationPutData(values) {
	return Object.assign(create(typeModels.GroupInvitationPutData, GroupInvitationPutDataTypeRef), values);
}
const GroupSettingsTypeRef = new TypeRef("tutanota", "GroupSettings");
function createGroupSettings(values) {
	return Object.assign(create(typeModels.GroupSettings, GroupSettingsTypeRef), values);
}
const HeaderTypeRef = new TypeRef("tutanota", "Header");
const ImapFolderTypeRef = new TypeRef("tutanota", "ImapFolder");
const ImapSyncConfigurationTypeRef = new TypeRef("tutanota", "ImapSyncConfiguration");
const ImapSyncStateTypeRef = new TypeRef("tutanota", "ImapSyncState");
const ImportAttachmentTypeRef = new TypeRef("tutanota", "ImportAttachment");
const ImportMailDataTypeRef = new TypeRef("tutanota", "ImportMailData");
const ImportMailDataMailReferenceTypeRef = new TypeRef("tutanota", "ImportMailDataMailReference");
const ImportMailGetInTypeRef = new TypeRef("tutanota", "ImportMailGetIn");
const ImportMailGetOutTypeRef = new TypeRef("tutanota", "ImportMailGetOut");
const ImportMailPostInTypeRef = new TypeRef("tutanota", "ImportMailPostIn");
const ImportMailPostOutTypeRef = new TypeRef("tutanota", "ImportMailPostOut");
const ImportMailStateTypeRef = new TypeRef("tutanota", "ImportMailState");
const ImportedMailTypeRef = new TypeRef("tutanota", "ImportedMail");
const InboxRuleTypeRef = new TypeRef("tutanota", "InboxRule");
function createInboxRule(values) {
	return Object.assign(create(typeModels.InboxRule, InboxRuleTypeRef), values);
}
const InternalGroupDataTypeRef = new TypeRef("tutanota", "InternalGroupData");
function createInternalGroupData(values) {
	return Object.assign(create(typeModels.InternalGroupData, InternalGroupDataTypeRef), values);
}
const InternalRecipientKeyDataTypeRef = new TypeRef("tutanota", "InternalRecipientKeyData");
function createInternalRecipientKeyData(values) {
	return Object.assign(create(typeModels.InternalRecipientKeyData, InternalRecipientKeyDataTypeRef), values);
}
const KnowledgeBaseEntryTypeRef = new TypeRef("tutanota", "KnowledgeBaseEntry");
function createKnowledgeBaseEntry(values) {
	return Object.assign(create(typeModels.KnowledgeBaseEntry, KnowledgeBaseEntryTypeRef), values);
}
const KnowledgeBaseEntryKeywordTypeRef = new TypeRef("tutanota", "KnowledgeBaseEntryKeyword");
function createKnowledgeBaseEntryKeyword(values) {
	return Object.assign(create(typeModels.KnowledgeBaseEntryKeyword, KnowledgeBaseEntryKeywordTypeRef), values);
}
const ListUnsubscribeDataTypeRef = new TypeRef("tutanota", "ListUnsubscribeData");
function createListUnsubscribeData(values) {
	return Object.assign(create(typeModels.ListUnsubscribeData, ListUnsubscribeDataTypeRef), values);
}
const MailTypeRef = new TypeRef("tutanota", "Mail");
function createMail(values) {
	return Object.assign(create(typeModels.Mail, MailTypeRef), values);
}
const MailAddressTypeRef = new TypeRef("tutanota", "MailAddress");
function createMailAddress(values) {
	return Object.assign(create(typeModels.MailAddress, MailAddressTypeRef), values);
}
const MailAddressPropertiesTypeRef = new TypeRef("tutanota", "MailAddressProperties");
function createMailAddressProperties(values) {
	return Object.assign(create(typeModels.MailAddressProperties, MailAddressPropertiesTypeRef), values);
}
const MailBagTypeRef = new TypeRef("tutanota", "MailBag");
const MailBoxTypeRef = new TypeRef("tutanota", "MailBox");
function createMailBox(values) {
	return Object.assign(create(typeModels.MailBox, MailBoxTypeRef), values);
}
const MailDetailsTypeRef = new TypeRef("tutanota", "MailDetails");
const MailDetailsBlobTypeRef = new TypeRef("tutanota", "MailDetailsBlob");
const MailDetailsDraftTypeRef = new TypeRef("tutanota", "MailDetailsDraft");
const MailDetailsDraftsRefTypeRef = new TypeRef("tutanota", "MailDetailsDraftsRef");
const MailExportTokenServicePostOutTypeRef = new TypeRef("tutanota", "MailExportTokenServicePostOut");
const MailFolderTypeRef = new TypeRef("tutanota", "MailFolder");
const MailFolderRefTypeRef = new TypeRef("tutanota", "MailFolderRef");
const MailSetEntryTypeRef = new TypeRef("tutanota", "MailSetEntry");
const MailboxGroupRootTypeRef = new TypeRef("tutanota", "MailboxGroupRoot");
const MailboxPropertiesTypeRef = new TypeRef("tutanota", "MailboxProperties");
function createMailboxProperties(values) {
	return Object.assign(create(typeModels.MailboxProperties, MailboxPropertiesTypeRef), values);
}
const MailboxServerPropertiesTypeRef = new TypeRef("tutanota", "MailboxServerProperties");
const ManageLabelServiceDeleteInTypeRef = new TypeRef("tutanota", "ManageLabelServiceDeleteIn");
function createManageLabelServiceDeleteIn(values) {
	return Object.assign(create(typeModels.ManageLabelServiceDeleteIn, ManageLabelServiceDeleteInTypeRef), values);
}
const ManageLabelServiceLabelDataTypeRef = new TypeRef("tutanota", "ManageLabelServiceLabelData");
function createManageLabelServiceLabelData(values) {
	return Object.assign(create(typeModels.ManageLabelServiceLabelData, ManageLabelServiceLabelDataTypeRef), values);
}
const ManageLabelServicePostInTypeRef = new TypeRef("tutanota", "ManageLabelServicePostIn");
function createManageLabelServicePostIn(values) {
	return Object.assign(create(typeModels.ManageLabelServicePostIn, ManageLabelServicePostInTypeRef), values);
}
const MoveMailDataTypeRef = new TypeRef("tutanota", "MoveMailData");
function createMoveMailData(values) {
	return Object.assign(create(typeModels.MoveMailData, MoveMailDataTypeRef), values);
}
const NewDraftAttachmentTypeRef = new TypeRef("tutanota", "NewDraftAttachment");
function createNewDraftAttachment(values) {
	return Object.assign(create(typeModels.NewDraftAttachment, NewDraftAttachmentTypeRef), values);
}
const NewImportAttachmentTypeRef = new TypeRef("tutanota", "NewImportAttachment");
const NewsIdTypeRef = new TypeRef("tutanota", "NewsId");
const NewsInTypeRef = new TypeRef("tutanota", "NewsIn");
function createNewsIn(values) {
	return Object.assign(create(typeModels.NewsIn, NewsInTypeRef), values);
}
const NewsOutTypeRef = new TypeRef("tutanota", "NewsOut");
const NotificationMailTypeRef = new TypeRef("tutanota", "NotificationMail");
const OutOfOfficeNotificationTypeRef = new TypeRef("tutanota", "OutOfOfficeNotification");
function createOutOfOfficeNotification(values) {
	return Object.assign(create(typeModels.OutOfOfficeNotification, OutOfOfficeNotificationTypeRef), values);
}
const OutOfOfficeNotificationMessageTypeRef = new TypeRef("tutanota", "OutOfOfficeNotificationMessage");
function createOutOfOfficeNotificationMessage(values) {
	return Object.assign(create(typeModels.OutOfOfficeNotificationMessage, OutOfOfficeNotificationMessageTypeRef), values);
}
const OutOfOfficeNotificationRecipientListTypeRef = new TypeRef("tutanota", "OutOfOfficeNotificationRecipientList");
const PhishingMarkerWebsocketDataTypeRef = new TypeRef("tutanota", "PhishingMarkerWebsocketData");
const PhotosRefTypeRef = new TypeRef("tutanota", "PhotosRef");
const ReceiveInfoServiceDataTypeRef = new TypeRef("tutanota", "ReceiveInfoServiceData");
function createReceiveInfoServiceData(values) {
	return Object.assign(create(typeModels.ReceiveInfoServiceData, ReceiveInfoServiceDataTypeRef), values);
}
const RecipientsTypeRef = new TypeRef("tutanota", "Recipients");
const RemoteImapSyncInfoTypeRef = new TypeRef("tutanota", "RemoteImapSyncInfo");
const ReportMailPostDataTypeRef = new TypeRef("tutanota", "ReportMailPostData");
function createReportMailPostData(values) {
	return Object.assign(create(typeModels.ReportMailPostData, ReportMailPostDataTypeRef), values);
}
const ReportedMailFieldMarkerTypeRef = new TypeRef("tutanota", "ReportedMailFieldMarker");
const SecureExternalRecipientKeyDataTypeRef = new TypeRef("tutanota", "SecureExternalRecipientKeyData");
function createSecureExternalRecipientKeyData(values) {
	return Object.assign(create(typeModels.SecureExternalRecipientKeyData, SecureExternalRecipientKeyDataTypeRef), values);
}
const SendDraftDataTypeRef = new TypeRef("tutanota", "SendDraftData");
function createSendDraftData(values) {
	return Object.assign(create(typeModels.SendDraftData, SendDraftDataTypeRef), values);
}
const SendDraftReturnTypeRef = new TypeRef("tutanota", "SendDraftReturn");
const SharedGroupDataTypeRef = new TypeRef("tutanota", "SharedGroupData");
function createSharedGroupData(values) {
	return Object.assign(create(typeModels.SharedGroupData, SharedGroupDataTypeRef), values);
}
const SimpleMoveMailPostInTypeRef = new TypeRef("tutanota", "SimpleMoveMailPostIn");
const SpamResultsTypeRef = new TypeRef("tutanota", "SpamResults");
const SubfilesTypeRef = new TypeRef("tutanota", "Subfiles");
const SupportCategoryTypeRef = new TypeRef("tutanota", "SupportCategory");
const SupportDataTypeRef = new TypeRef("tutanota", "SupportData");
const SupportTopicTypeRef = new TypeRef("tutanota", "SupportTopic");
const SymEncInternalRecipientKeyDataTypeRef = new TypeRef("tutanota", "SymEncInternalRecipientKeyData");
function createSymEncInternalRecipientKeyData(values) {
	return Object.assign(create(typeModels.SymEncInternalRecipientKeyData, SymEncInternalRecipientKeyDataTypeRef), values);
}
const TemplateGroupRootTypeRef = new TypeRef("tutanota", "TemplateGroupRoot");
const TranslationGetInTypeRef = new TypeRef("tutanota", "TranslationGetIn");
function createTranslationGetIn(values) {
	return Object.assign(create(typeModels.TranslationGetIn, TranslationGetInTypeRef), values);
}
const TranslationGetOutTypeRef = new TypeRef("tutanota", "TranslationGetOut");
const TutanotaPropertiesTypeRef = new TypeRef("tutanota", "TutanotaProperties");
const UnreadMailStatePostInTypeRef = new TypeRef("tutanota", "UnreadMailStatePostIn");
const UpdateMailFolderDataTypeRef = new TypeRef("tutanota", "UpdateMailFolderData");
function createUpdateMailFolderData(values) {
	return Object.assign(create(typeModels.UpdateMailFolderData, UpdateMailFolderDataTypeRef), values);
}
const UserAccountCreateDataTypeRef = new TypeRef("tutanota", "UserAccountCreateData");
function createUserAccountCreateData(values) {
	return Object.assign(create(typeModels.UserAccountCreateData, UserAccountCreateDataTypeRef), values);
}
const UserAccountUserDataTypeRef = new TypeRef("tutanota", "UserAccountUserData");
function createUserAccountUserData(values) {
	return Object.assign(create(typeModels.UserAccountUserData, UserAccountUserDataTypeRef), values);
}
const UserAreaGroupDataTypeRef = new TypeRef("tutanota", "UserAreaGroupData");
function createUserAreaGroupData(values) {
	return Object.assign(create(typeModels.UserAreaGroupData, UserAreaGroupDataTypeRef), values);
}
const UserAreaGroupDeleteDataTypeRef = new TypeRef("tutanota", "UserAreaGroupDeleteData");
function createUserAreaGroupDeleteData(values) {
	return Object.assign(create(typeModels.UserAreaGroupDeleteData, UserAreaGroupDeleteDataTypeRef), values);
}
const UserAreaGroupPostDataTypeRef = new TypeRef("tutanota", "UserAreaGroupPostData");
function createUserAreaGroupPostData(values) {
	return Object.assign(create(typeModels.UserAreaGroupPostData, UserAreaGroupPostDataTypeRef), values);
}
const UserSettingsGroupRootTypeRef = new TypeRef("tutanota", "UserSettingsGroupRoot");
function createUserSettingsGroupRoot(values) {
	return Object.assign(create(typeModels.UserSettingsGroupRoot, UserSettingsGroupRootTypeRef), values);
}

//#endregion
export { ApplyLabelServicePostInTypeRef, AttachmentKeyDataTypeRef, BirthdayTypeRef, CalendarDeleteDataTypeRef, CalendarEventAttendeeTypeRef, CalendarEventTypeRef, CalendarEventUidIndexTypeRef, CalendarEventUpdateTypeRef, CalendarGroupRootTypeRef, CalendarRepeatRuleTypeRef, ContactAddressTypeRef, ContactCustomDateTypeRef, ContactListEntryTypeRef, ContactListGroupRootTypeRef, ContactListTypeRef, ContactMailAddressTypeRef, ContactMessengerHandleTypeRef, ContactPhoneNumberTypeRef, ContactPronounsTypeRef, ContactRelationshipTypeRef, ContactSocialIdTypeRef, ContactTypeRef, ContactWebsiteTypeRef, ConversationEntryTypeRef, CreateExternalUserGroupDataTypeRef, CreateGroupPostReturnTypeRef, CreateMailFolderDataTypeRef, CreateMailFolderReturnTypeRef, CreateMailGroupDataTypeRef, CustomerAccountCreateDataTypeRef, DefaultAlarmInfoTypeRef, DeleteGroupDataTypeRef, DeleteMailDataTypeRef, DeleteMailFolderDataTypeRef, DraftAttachmentTypeRef, DraftCreateDataTypeRef, DraftCreateReturnTypeRef, DraftDataTypeRef, DraftRecipientTypeRef, DraftUpdateDataTypeRef, DraftUpdateReturnTypeRef, EmailTemplateContentTypeRef, EmailTemplateTypeRef, EncryptTutanotaPropertiesDataTypeRef, EncryptedMailAddressTypeRef, EntropyDataTypeRef, ExternalUserDataTypeRef, FileSystemTypeRef, FileTypeRef, GroupInvitationDeleteDataTypeRef, GroupInvitationPostDataTypeRef, GroupInvitationPostReturnTypeRef, GroupInvitationPutDataTypeRef, GroupSettingsTypeRef, ImportMailGetInTypeRef, ImportMailGetOutTypeRef, ImportMailPostInTypeRef, ImportMailPostOutTypeRef, ImportMailStateTypeRef, ImportedMailTypeRef, InboxRuleTypeRef, InternalGroupDataTypeRef, InternalRecipientKeyDataTypeRef, KnowledgeBaseEntryKeywordTypeRef, KnowledgeBaseEntryTypeRef, ListUnsubscribeDataTypeRef, MailAddressPropertiesTypeRef, MailAddressTypeRef, MailBoxTypeRef, MailDetailsBlobTypeRef, MailDetailsDraftTypeRef, MailExportTokenServicePostOutTypeRef, MailFolderTypeRef, MailSetEntryTypeRef, MailTypeRef, MailboxGroupRootTypeRef, MailboxPropertiesTypeRef, ManageLabelServiceDeleteInTypeRef, ManageLabelServiceLabelDataTypeRef, ManageLabelServicePostInTypeRef, MoveMailDataTypeRef, NewDraftAttachmentTypeRef, NewsInTypeRef, NewsOutTypeRef, OutOfOfficeNotificationMessageTypeRef, OutOfOfficeNotificationTypeRef, PhishingMarkerWebsocketDataTypeRef, ReceiveInfoServiceDataTypeRef, ReportMailPostDataTypeRef, SecureExternalRecipientKeyDataTypeRef, SendDraftDataTypeRef, SendDraftReturnTypeRef, SharedGroupDataTypeRef, SimpleMoveMailPostInTypeRef, SupportDataTypeRef, SymEncInternalRecipientKeyDataTypeRef, TemplateGroupRootTypeRef, TranslationGetInTypeRef, TranslationGetOutTypeRef, TutanotaPropertiesTypeRef, UnreadMailStatePostInTypeRef, UpdateMailFolderDataTypeRef, UserAccountCreateDataTypeRef, UserAccountUserDataTypeRef, UserAreaGroupDataTypeRef, UserAreaGroupDeleteDataTypeRef, UserAreaGroupPostDataTypeRef, UserSettingsGroupRootTypeRef, createApplyLabelServicePostIn, createAttachmentKeyData, createBirthday, createCalendarDeleteData, createCalendarEvent, createCalendarEventAttendee, createCalendarRepeatRule, createContact, createContactAddress, createContactCustomDate, createContactListEntry, createContactMailAddress, createContactMessengerHandle, createContactPhoneNumber, createContactPronouns, createContactRelationship, createContactSocialId, createContactWebsite, createCreateExternalUserGroupData, createCreateMailFolderData, createCreateMailGroupData, createCustomerAccountCreateData, createDefaultAlarmInfo, createDeleteGroupData, createDeleteMailData, createDeleteMailFolderData, createDraftAttachment, createDraftCreateData, createDraftData, createDraftRecipient, createDraftUpdateData, createEmailTemplate, createEmailTemplateContent, createEncryptTutanotaPropertiesData, createEncryptedMailAddress, createEntropyData, createExternalUserData, createFile, createGroupInvitationDeleteData, createGroupInvitationPostData, createGroupInvitationPutData, createGroupSettings, createInboxRule, createInternalGroupData, createInternalRecipientKeyData, createKnowledgeBaseEntry, createKnowledgeBaseEntryKeyword, createListUnsubscribeData, createMail, createMailAddress, createMailAddressProperties, createMailBox, createMailboxProperties, createManageLabelServiceDeleteIn, createManageLabelServiceLabelData, createManageLabelServicePostIn, createMoveMailData, createNewDraftAttachment, createNewsIn, createOutOfOfficeNotification, createOutOfOfficeNotificationMessage, createReceiveInfoServiceData, createReportMailPostData, createSecureExternalRecipientKeyData, createSendDraftData, createSharedGroupData, createSymEncInternalRecipientKeyData, createTranslationGetIn, createUpdateMailFolderData, createUserAccountCreateData, createUserAccountUserData, createUserAreaGroupData, createUserAreaGroupDeleteData, createUserAreaGroupPostData, createUserSettingsGroupRoot };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,