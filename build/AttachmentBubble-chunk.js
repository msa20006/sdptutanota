import { mithril_default } from "./mithril-chunk.js";
import { defer, noOp } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";
import { TransformEnum, animations, ease, height, opacity, transform, width } from "./styles-chunk.js";
import { theme } from "./theme-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";
import { focusNext, focusPrevious } from "./KeyManager-chunk.js";
import { modal } from "./RootView-chunk.js";
import { px } from "./size-chunk.js";
import { getSafeAreaInsetBottom } from "./HtmlUtils-chunk.js";
import { hasError } from "./ErrorUtils-chunk.js";
import { Button, ButtonType } from "./Button-chunk.js";
import { Icons } from "./Icons-chunk.js";
import { BootIcons, Icon } from "./Icon-chunk.js";
import { formatStorageSize } from "./Formatter-chunk.js";
import { getFileBaseName, getFileExtension, isTutanotaFile } from "./FileUtils-chunk.js";
import { CALENDAR_MIME_TYPE, MAIL_MIME_TYPES, VCARD_MIME_TYPES } from "./SharedMailUtils-chunk.js";
import { BubbleButton, bubbleButtonHeight, bubbleButtonPadding } from "./BubbleButton-chunk.js";

//#region src/common/gui/AttachmentBubble.ts
let AttachmentType = function(AttachmentType$1) {
	AttachmentType$1[AttachmentType$1["GENERIC"] = 0] = "GENERIC";
	AttachmentType$1[AttachmentType$1["CONTACT"] = 1] = "CONTACT";
	AttachmentType$1[AttachmentType$1["CALENDAR"] = 2] = "CALENDAR";
	AttachmentType$1[AttachmentType$1["MAIL"] = 3] = "MAIL";
	return AttachmentType$1;
}({});
var AttachmentBubble = class {
	dom = null;
	view(vnode) {
		const { attachment } = vnode.attrs;
		if (isTutanotaFile(attachment) && hasError(attachment)) return mithril_default(BubbleButton, {
			label: "emptyString_msg",
			text: "corrupted_msg",
			icon: Icons.Warning,
			onclick: noOp
		});
else {
			const extension = getFileExtension(attachment.name);
			const rest = getFileBaseName(attachment.name);
			return mithril_default(BubbleButton, {
				label: lang.makeTranslation("attachment_name", attachment.name),
				text: lang.makeTranslation("attachment_base_name", rest),
				icon: getAttachmentIcon(vnode.attrs.type),
				onclick: () => {
					showAttachmentDetailsPopup(this.dom, vnode.attrs).then(() => this.dom?.focus());
				}
			}, `${extension}, ${formatStorageSize(Number(attachment.size))}`);
		}
	}
	oncreate(vnode) {
		this.dom = vnode.dom;
	}
};
async function showAttachmentDetailsPopup(dom, attrs) {
	const parentRect = dom.getBoundingClientRect();
	const panel = new AttachmentDetailsPopup(parentRect, parentRect.width, attrs);
	panel.show();
	return panel.deferAfterClose;
}
function getAttachmentIcon(type) {
	switch (type) {
		case AttachmentType.CONTACT: return Icons.People;
		case AttachmentType.CALENDAR: return BootIcons.Calendar;
		default: return Icons.Attachment;
	}
}
function getAttachmentType(mimeType) {
	if (Object.values(VCARD_MIME_TYPES).includes(mimeType)) return AttachmentType.CONTACT;
else if (mimeType === CALENDAR_MIME_TYPE) return AttachmentType.CALENDAR;
else if (Object.values(MAIL_MIME_TYPES).includes(mimeType)) return AttachmentType.MAIL;
	return AttachmentType.GENERIC;
}
var AttachmentDetailsPopup = class {
	_shortcuts = [];
	domContent = null;
	domPanel = null;
	closeDefer = defer();
	focusedBeforeShown = null;
	get deferAfterClose() {
		return this.closeDefer.promise;
	}
	constructor(targetRect, targetWidth, attrs) {
		this.targetRect = targetRect;
		this.targetWidth = targetWidth;
		this.attrs = attrs;
		this._shortcuts.push({
			key: Keys.ESC,
			exec: () => this.onClose(),
			help: "close_alt"
		});
		this._shortcuts.push({
			key: Keys.TAB,
			shift: true,
			exec: () => this.domContent ? focusPrevious(this.domContent) : false,
			help: "selectPrevious_action"
		});
		this._shortcuts.push({
			key: Keys.TAB,
			shift: false,
			exec: () => this.domContent ? focusNext(this.domContent) : false,
			help: "selectNext_action"
		});
		if (attrs.open) this._shortcuts.push({
			key: Keys.O,
			exec: () => this.thenClose(attrs.open),
			help: "open_action"
		});
		if (attrs.download) this._shortcuts.push({
			key: Keys.D,
			exec: () => this.thenClose(attrs.download),
			help: "download_action"
		});
		if (attrs.remove) this._shortcuts.push({
			key: Keys.DELETE,
			exec: () => this.thenClose(attrs.remove),
			help: "remove_action"
		});
		if (attrs.fileImport) this._shortcuts.push({
			key: Keys.I,
			exec: () => this.thenClose(attrs.fileImport),
			help: "import_action"
		});
		this.view = this.view.bind(this);
	}
	view() {
		return mithril_default(".abs.bubble-color.border-radius.overflow-hidden.flex.flex-column", {
			class: bubbleButtonPadding(),
			style: {
				width: px(this.targetWidth),
				opacity: "0"
			},
			oncreate: (vnode) => {
				this.domPanel = vnode.dom;
				deferToNextFrame(() => this.animatePanel().then(() => this.domContent && focusNext(this.domContent)));
			},
			onclick: () => this.onClose()
		}, this.renderContent());
	}
	renderContent() {
		const { remove, open, download, attachment, fileImport, type } = this.attrs;
		return mithril_default(".flex.mb-s.pr", { oncreate: (vnode) => this.domContent = vnode.dom }, [mithril_default(Icon, {
			icon: getAttachmentIcon(type),
			class: "pr-s flex items-center",
			style: {
				fill: theme.button_bubble_fg,
				"background-color": "initial",
				minHeight: px(bubbleButtonHeight())
			}
		}), mithril_default(
			".flex.col.flex-grow",
			{ style: {
				minHeight: px(bubbleButtonHeight()),
				lineHeight: px(bubbleButtonHeight())
			} },
			mithril_default(".span.break-all.smaller", attachment.name),
			// bottom info is inside the same column as file text to align them
			mithril_default(".flex.row.justify-between.items-center", [mithril_default("span.smaller", `${formatStorageSize(Number(attachment.size))}`), mithril_default(".flex.no-wrap", [
				remove ? mithril_default(Button, {
					type: ButtonType.Secondary,
					label: "remove_action",
					click: () => this.thenClose(remove)
				}) : null,
				fileImport ? mithril_default(Button, {
					type: ButtonType.Secondary,
					label: "import_action",
					click: () => this.thenClose(fileImport)
				}) : null,
				open ? mithril_default(Button, {
					type: ButtonType.Secondary,
					label: "open_action",
					click: () => this.thenClose(open)
				}) : null,
				download ? mithril_default(Button, {
					type: ButtonType.Secondary,
					label: "download_action",
					click: () => this.thenClose(download)
				}) : null
			])])
)]);
	}
	thenClose(action) {
		action?.();
		this.onClose();
	}
	async animatePanel() {
		const { targetRect, domPanel, domContent } = this;
		if (domPanel == null || domContent == null) return;
		const initialHeight = bubbleButtonHeight();
		const targetHeight = domContent.offsetHeight === 0 ? 85 : domContent.offsetHeight;
		if (domContent.offsetHeight === 0) console.log("got offsetHeight 0, panel contains content:", domPanel.contains(domContent), "content style:", domContent.style, "panel style:", domPanel.style);
		const targetWidth = Math.max(targetRect.width, 300);
		domPanel.style.width = px(targetRect.width);
		domPanel.style.height = px(initialHeight);
		domPanel.style.top = px(targetRect.top);
		if (targetRect.left + targetWidth > window.innerWidth) domPanel.style.right = px(24);
else domPanel.style.left = px(targetRect.left);
		const mutations = [opacity(0, 1, true), height(initialHeight, targetHeight)];
		if (targetRect.width !== targetWidth) mutations.push(width(targetRect.width, targetWidth));
		const spaceBelow = window.innerHeight - getSafeAreaInsetBottom() - targetRect.top - targetHeight - initialHeight;
		if (spaceBelow < 0) mutations.push(transform(TransformEnum.TranslateY, 0, spaceBelow));
		await animations.add(domPanel, mutations, { easing: ease.out });
	}
	show() {
		this.focusedBeforeShown = document.activeElement;
		modal.displayUnique(this, true);
	}
	backgroundClick(e) {
		modal.remove(this);
	}
	async hideAnimation() {
		if (this.domPanel == null) return;
		const startHeight = this.domPanel.offsetHeight;
		const startWidth = this.domPanel.offsetWidth;
		await animations.add(this.domPanel, [
			height(startHeight, 30),
			width(startWidth, this.targetWidth),
			opacity(1, 0, false)
		], { easing: ease.out });
	}
	onClose() {
		modal.remove(this);
		this.closeDefer.resolve();
	}
	shortcuts() {
		return this._shortcuts;
	}
	popState(e) {
		modal.remove(this);
		return false;
	}
	callingElement() {
		return this.focusedBeforeShown;
	}
};
/** try and execute stuff after the next rendering frame */
const deferToNextFrame = (fn) => {
	window.requestAnimationFrame(() => {
		window.requestAnimationFrame(fn);
	});
};

//#endregion
export { AttachmentBubble, AttachmentType, getAttachmentType };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,