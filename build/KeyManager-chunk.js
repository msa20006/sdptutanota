import { assertMainOrNodeBoot, isAppleDevice } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { mod } from "./dist2-chunk.js";
import { Keys } from "./TutanotaConstants-chunk.js";

//#region src/common/misc/KeyManager.ts
assertMainOrNodeBoot();
const TABBABLE = "button, input, textarea, div[contenteditable='true'], [tabindex='0'], a, [role=button], [role=input]";
function keyboardEventToKeyPress(event) {
	const ctrlOrCmd = isAppleDevice() ? event.metaKey : event.ctrlKey;
	return {
		key: event.key,
		ctrlOrCmd,
		shift: event.shiftKey,
		alt: event.altKey,
		ctrl: !ctrlOrCmd && event.ctrlKey,
		meta: !ctrlOrCmd && event.metaKey
	};
}
function useKeyHandler(e, onKey) {
	const key = keyboardEventToKeyPress(e);
	return onKey != null ? onKey(key) : true;
}
function isFocusable(e) {
	if ("disabled" in e && !!e.disabled) return false;
	if (e.tabIndex === -1) return false;
	return e.style.display !== "none" && e.closest("[hidden]:not([hidden=false]), [aria-hidden]:not([aria-hidden=false]), [inert]:not([inert=false])") == null;
}
function focusPrevious(dom) {
	const tabbable = Array.from(dom.querySelectorAll(TABBABLE)).filter(isFocusable);
	const selected = tabbable.find((e) => document.activeElement === e);
	if (selected) {
		const selection = window.getSelection();
		if (selection && selection.focusNode && (selection.focusNode.nodeName === "LI" || selection.focusNode.parentNode && selection.focusNode.parentNode.nodeName === "LI")) return true;
else {
			tabbable[mod(tabbable.indexOf(selected) - 1, tabbable.length)].focus();
			return false;
		}
	} else if (tabbable.length > 0) {
		tabbable[tabbable.length - 1].focus();
		return false;
	}
	return true;
}
function focusNext(dom) {
	const tabbable = Array.from(dom.querySelectorAll(TABBABLE)).filter(isFocusable);
	const selected = tabbable.find((e) => document.activeElement === e);
	if (selected) {
		const selection = window.getSelection();
		if (selection && selection.focusNode && (selection.focusNode.nodeName === "LI" || selection.focusNode.parentNode && selection.focusNode.parentNode.nodeName === "LI")) return true;
else {
			tabbable[mod(tabbable.indexOf(selected) + 1, tabbable.length)].focus();
			return false;
		}
	} else if (tabbable.length > 0) {
		tabbable[0].focus();
		return false;
	}
	return true;
}
function createKeyIdentifier(key, modifiers) {
	return key + (modifiers?.ctrlOrCmd ? "X" : "") + (modifiers?.ctrl ? "C" : "") + (modifiers?.alt ? "A" : "") + (modifiers?.shift ? "S" : "") + (modifiers?.meta ? "M" : "");
}
var KeyManager = class {
	keyToShortcut;
	keyToModalShortcut;
	desktopShortcuts;
	isHelpOpen = false;
	constructor() {
		const helpShortcut = {
			key: Keys.F1,
			exec: () => this.openF1Help(),
			help: "showHelp_action"
		};
		const helpId = createKeyIdentifier(helpShortcut.key.code);
		this.keyToShortcut = new Map([[helpId, helpShortcut]]);
		this.keyToModalShortcut = new Map([[helpId, helpShortcut]]);
		this.desktopShortcuts = [];
		if (!window.document.addEventListener) return;
		window.document.addEventListener("keydown", (e) => this.handleKeydown(e), false);
	}
	handleKeydown(e) {
		if (!e.isComposing) {
			const keysToShortcuts = this.keyToModalShortcut.size > 1 ? this.keyToModalShortcut : this.keyToShortcut;
			const keyPress = keyboardEventToKeyPress(e);
			const shortcut = keyPress.key ? keysToShortcuts.get(createKeyIdentifier(e.key.toLowerCase(), keyPress)) : null;
			if (shortcut != null && (shortcut.enabled == null || shortcut.enabled())) {
				if (shortcut.exec(keyPress) !== true) e.preventDefault();
			}
			mithril_default.redraw();
		}
	}
	/**
	* open a dialog listing all currently active shortcuts
	* @param forceBaseShortcuts set to true for the special case where the dialog is opened
	* from the support dropdown (which registers its own shortcuts as modal shortcuts)
	*/
	openF1Help(forceBaseShortcuts = false) {
		if (this.isHelpOpen) return;
		this.isHelpOpen = true;
		const shortcutsToShow = this.keyToModalShortcut.size > 1 && !forceBaseShortcuts ? Array.from(this.keyToModalShortcut.values()) : [...this.keyToShortcut.values(), ...this.desktopShortcuts];
		import("./ShortcutDialog-chunk.js").then(({ showShortcutDialog }) => showShortcutDialog(shortcutsToShow)).then(() => this.isHelpOpen = false);
	}
	registerShortcuts(shortcuts) {
		this.applyOperation(shortcuts, (id, s) => this.keyToShortcut.set(id, s));
	}
	unregisterShortcuts(shortcuts) {
		this.applyOperation(shortcuts, (id, _) => this.keyToShortcut.delete(id));
	}
	registerDesktopShortcuts(shortcuts) {
		this.applyOperation(shortcuts, (_, s) => this.desktopShortcuts.push(s));
	}
	registerModalShortcuts(shortcuts) {
		this.applyOperation(shortcuts, (id, s) => this.keyToModalShortcut.set(id, s));
	}
	unregisterModalShortcuts(shortcuts) {
		this.applyOperation(shortcuts, (id, _) => this.keyToModalShortcut.delete(id));
	}
	/**
	*
	* @param shortcuts list of shortcuts to operate on
	* @param operation operation to execute for every shortcut and its ID
	* @private
	*/
	applyOperation(shortcuts, operation) {
		for (const s of shortcuts) operation(createKeyIdentifier(s.key.code, s), s);
	}
};
function isKeyPressed(key, ...keys) {
	if (key != null) return keys.some((k) => k.code === key.toLowerCase());
	return false;
}
const keyManager = new KeyManager();

//#endregion
export { TABBABLE, focusNext, focusPrevious, isKeyPressed, keyManager, keyboardEventToKeyPress, useKeyHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,