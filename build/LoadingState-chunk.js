import { __toESM } from "./chunk-chunk.js";
import { require_stream } from "./stream-chunk.js";
import { isOfflineError } from "./ErrorUtils-chunk.js";

//#region src/common/offline/LoadingState.ts
var import_stream = __toESM(require_stream(), 1);
let LoadingState = function(LoadingState$1) {
	/** We have not tried to load anything, or the loading is complete */
	LoadingState$1[LoadingState$1["Idle"] = 0] = "Idle";
	/** We are waiting for a resource to load */
	LoadingState$1[LoadingState$1["Loading"] = 1] = "Loading";
	/** We tried to load and got a `ConnectionError` */
	LoadingState$1[LoadingState$1["ConnectionLost"] = 2] = "ConnectionLost";
	return LoadingState$1;
}({});
var LoadingStateTracker = class {
	state;
	loadingStateListener = null;
	constructor(initialState = LoadingState.Idle) {
		this.state = (0, import_stream.default)(initialState);
	}
	get() {
		return this.state();
	}
	isIdle() {
		return this.get() === LoadingState.Idle;
	}
	isLoading() {
		return this.get() === LoadingState.Loading;
	}
	isConnectionLost() {
		return this.get() === LoadingState.ConnectionLost;
	}
	set(state) {
		this.state(state);
	}
	setIdle() {
		this.set(LoadingState.Idle);
	}
	setLoading() {
		this.set(LoadingState.Loading);
	}
	setConnectionLost() {
		this.set(LoadingState.ConnectionLost);
	}
	/**
	* Follow the state of a promise.
	* While the promise is not resolved, this will be in `Loading` state
	* If the promise rejects with a `ConnectionError`, then it will finish in `ConnectionLost` state
	* Otherwise it will finish in `Idle` state
	*/
	async trackPromise(promise) {
		this.set(LoadingState.Loading);
		let connectionLost = false;
		try {
			return await promise;
		} catch (e) {
			if (isOfflineError(e)) connectionLost = true;
			throw e;
		} finally {
			this.set(connectionLost ? LoadingState.ConnectionLost : LoadingState.Idle);
		}
	}
	setStateChangedListener(listener) {
		this.clearStateChangedListener();
		this.loadingStateListener = this.state.map(listener);
	}
	clearStateChangedListener() {
		if (this.loadingStateListener != null) {
			this.loadingStateListener.end(true);
			this.loadingStateListener = null;
		}
	}
};

//#endregion
export { LoadingStateTracker };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9hZGluZ1N0YXRlLWNodW5rLmpzIiwibmFtZXMiOlsiaW5pdGlhbFN0YXRlOiBMb2FkaW5nU3RhdGUiLCJzdGF0ZTogTG9hZGluZ1N0YXRlIiwicHJvbWlzZTogUHJvbWlzZTxUPiIsImxpc3RlbmVyOiAobmV3U3RhdGU6IExvYWRpbmdTdGF0ZSkgPT4gdm9pZCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24vb2ZmbGluZS9Mb2FkaW5nU3RhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0cmVhbSBmcm9tIFwibWl0aHJpbC9zdHJlYW1cIlxuaW1wb3J0IHsgaXNPZmZsaW5lRXJyb3IgfSBmcm9tIFwiLi4vYXBpL2NvbW1vbi91dGlscy9FcnJvclV0aWxzLmpzXCJcblxuZXhwb3J0IGVudW0gTG9hZGluZ1N0YXRlIHtcblx0LyoqIFdlIGhhdmUgbm90IHRyaWVkIHRvIGxvYWQgYW55dGhpbmcsIG9yIHRoZSBsb2FkaW5nIGlzIGNvbXBsZXRlICovXG5cdElkbGUsXG5cdC8qKiBXZSBhcmUgd2FpdGluZyBmb3IgYSByZXNvdXJjZSB0byBsb2FkICovXG5cdExvYWRpbmcsXG5cdC8qKiBXZSB0cmllZCB0byBsb2FkIGFuZCBnb3QgYSBgQ29ubmVjdGlvbkVycm9yYCAqL1xuXHRDb25uZWN0aW9uTG9zdCxcbn1cblxuLyoqXG4gKiBBIHV0aWxpdHkgdG8gdHJhY2sgdGhlIGxvYWRlZCBzdGF0ZSBvZiBzb21lIHJlc291cmNlXG4gKiBQcm92aWRlcyBsaXN0ZW5lcnMgZm9yIGhhbmRsaW5nIHN0YXRlIGNoYW5nZXNcbiAqL1xuZXhwb3J0IGNsYXNzIExvYWRpbmdTdGF0ZVRyYWNrZXIge1xuXHRwcml2YXRlIHJlYWRvbmx5IHN0YXRlOiBzdHJlYW08TG9hZGluZ1N0YXRlPlxuXHRwcml2YXRlIGxvYWRpbmdTdGF0ZUxpc3RlbmVyOiBzdHJlYW08dm9pZD4gfCBudWxsID0gbnVsbFxuXG5cdGNvbnN0cnVjdG9yKGluaXRpYWxTdGF0ZTogTG9hZGluZ1N0YXRlID0gTG9hZGluZ1N0YXRlLklkbGUpIHtcblx0XHR0aGlzLnN0YXRlID0gc3RyZWFtKGluaXRpYWxTdGF0ZSlcblx0fVxuXG5cdGdldCgpOiBMb2FkaW5nU3RhdGUge1xuXHRcdHJldHVybiB0aGlzLnN0YXRlKClcblx0fVxuXG5cdGlzSWRsZSgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5nZXQoKSA9PT0gTG9hZGluZ1N0YXRlLklkbGVcblx0fVxuXG5cdGlzTG9hZGluZygpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5nZXQoKSA9PT0gTG9hZGluZ1N0YXRlLkxvYWRpbmdcblx0fVxuXG5cdGlzQ29ubmVjdGlvbkxvc3QoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0KCkgPT09IExvYWRpbmdTdGF0ZS5Db25uZWN0aW9uTG9zdFxuXHR9XG5cblx0c2V0KHN0YXRlOiBMb2FkaW5nU3RhdGUpIHtcblx0XHR0aGlzLnN0YXRlKHN0YXRlKVxuXHR9XG5cblx0c2V0SWRsZSgpIHtcblx0XHR0aGlzLnNldChMb2FkaW5nU3RhdGUuSWRsZSlcblx0fVxuXG5cdHNldExvYWRpbmcoKSB7XG5cdFx0dGhpcy5zZXQoTG9hZGluZ1N0YXRlLkxvYWRpbmcpXG5cdH1cblxuXHRzZXRDb25uZWN0aW9uTG9zdCgpIHtcblx0XHR0aGlzLnNldChMb2FkaW5nU3RhdGUuQ29ubmVjdGlvbkxvc3QpXG5cdH1cblxuXHQvKipcblx0ICogRm9sbG93IHRoZSBzdGF0ZSBvZiBhIHByb21pc2UuXG5cdCAqIFdoaWxlIHRoZSBwcm9taXNlIGlzIG5vdCByZXNvbHZlZCwgdGhpcyB3aWxsIGJlIGluIGBMb2FkaW5nYCBzdGF0ZVxuXHQgKiBJZiB0aGUgcHJvbWlzZSByZWplY3RzIHdpdGggYSBgQ29ubmVjdGlvbkVycm9yYCwgdGhlbiBpdCB3aWxsIGZpbmlzaCBpbiBgQ29ubmVjdGlvbkxvc3RgIHN0YXRlXG5cdCAqIE90aGVyd2lzZSBpdCB3aWxsIGZpbmlzaCBpbiBgSWRsZWAgc3RhdGVcblx0ICovXG5cdGFzeW5jIHRyYWNrUHJvbWlzZTxUPihwcm9taXNlOiBQcm9taXNlPFQ+KTogUHJvbWlzZTxUPiB7XG5cdFx0dGhpcy5zZXQoTG9hZGluZ1N0YXRlLkxvYWRpbmcpXG5cblx0XHRsZXQgY29ubmVjdGlvbkxvc3QgPSBmYWxzZVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gYXdhaXQgcHJvbWlzZVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGlmIChpc09mZmxpbmVFcnJvcihlKSkge1xuXHRcdFx0XHRjb25uZWN0aW9uTG9zdCA9IHRydWVcblx0XHRcdH1cblx0XHRcdHRocm93IGVcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0dGhpcy5zZXQoY29ubmVjdGlvbkxvc3QgPyBMb2FkaW5nU3RhdGUuQ29ubmVjdGlvbkxvc3QgOiBMb2FkaW5nU3RhdGUuSWRsZSlcblx0XHR9XG5cdH1cblxuXHRzZXRTdGF0ZUNoYW5nZWRMaXN0ZW5lcihsaXN0ZW5lcjogKG5ld1N0YXRlOiBMb2FkaW5nU3RhdGUpID0+IHZvaWQpIHtcblx0XHR0aGlzLmNsZWFyU3RhdGVDaGFuZ2VkTGlzdGVuZXIoKVxuXHRcdHRoaXMubG9hZGluZ1N0YXRlTGlzdGVuZXIgPSB0aGlzLnN0YXRlLm1hcChsaXN0ZW5lcilcblx0fVxuXG5cdGNsZWFyU3RhdGVDaGFuZ2VkTGlzdGVuZXIoKSB7XG5cdFx0aWYgKHRoaXMubG9hZGluZ1N0YXRlTGlzdGVuZXIgIT0gbnVsbCkge1xuXHRcdFx0dGhpcy5sb2FkaW5nU3RhdGVMaXN0ZW5lci5lbmQodHJ1ZSlcblx0XHRcdHRoaXMubG9hZGluZ1N0YXRlTGlzdGVuZXIgPSBudWxsXG5cdFx0fVxuXHR9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztJQUdZLHdDQUFMOztBQUVOOztBQUVBOztBQUVBOztBQUNBO0lBTVksc0JBQU4sTUFBMEI7Q0FDaEMsQUFBaUI7Q0FDakIsQUFBUSx1QkFBNEM7Q0FFcEQsWUFBWUEsZUFBNkIsYUFBYSxNQUFNO0FBQzNELE9BQUssUUFBUSwyQkFBTyxhQUFhO0NBQ2pDO0NBRUQsTUFBb0I7QUFDbkIsU0FBTyxLQUFLLE9BQU87Q0FDbkI7Q0FFRCxTQUFrQjtBQUNqQixTQUFPLEtBQUssS0FBSyxLQUFLLGFBQWE7Q0FDbkM7Q0FFRCxZQUFxQjtBQUNwQixTQUFPLEtBQUssS0FBSyxLQUFLLGFBQWE7Q0FDbkM7Q0FFRCxtQkFBNEI7QUFDM0IsU0FBTyxLQUFLLEtBQUssS0FBSyxhQUFhO0NBQ25DO0NBRUQsSUFBSUMsT0FBcUI7QUFDeEIsT0FBSyxNQUFNLE1BQU07Q0FDakI7Q0FFRCxVQUFVO0FBQ1QsT0FBSyxJQUFJLGFBQWEsS0FBSztDQUMzQjtDQUVELGFBQWE7QUFDWixPQUFLLElBQUksYUFBYSxRQUFRO0NBQzlCO0NBRUQsb0JBQW9CO0FBQ25CLE9BQUssSUFBSSxhQUFhLGVBQWU7Q0FDckM7Ozs7Ozs7Q0FRRCxNQUFNLGFBQWdCQyxTQUFpQztBQUN0RCxPQUFLLElBQUksYUFBYSxRQUFRO0VBRTlCLElBQUksaUJBQWlCO0FBQ3JCLE1BQUk7QUFDSCxVQUFPLE1BQU07RUFDYixTQUFRLEdBQUc7QUFDWCxPQUFJLGVBQWUsRUFBRSxDQUNwQixrQkFBaUI7QUFFbEIsU0FBTTtFQUNOLFVBQVM7QUFDVCxRQUFLLElBQUksaUJBQWlCLGFBQWEsaUJBQWlCLGFBQWEsS0FBSztFQUMxRTtDQUNEO0NBRUQsd0JBQXdCQyxVQUE0QztBQUNuRSxPQUFLLDJCQUEyQjtBQUNoQyxPQUFLLHVCQUF1QixLQUFLLE1BQU0sSUFBSSxTQUFTO0NBQ3BEO0NBRUQsNEJBQTRCO0FBQzNCLE1BQUksS0FBSyx3QkFBd0IsTUFBTTtBQUN0QyxRQUFLLHFCQUFxQixJQUFJLEtBQUs7QUFDbkMsUUFBSyx1QkFBdUI7RUFDNUI7Q0FDRDtBQUNEIn0=