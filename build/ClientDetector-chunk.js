import { Mode, assertMainOrNodeBoot, isApp } from "./Env-chunk.js";

//#region src/common/misc/ClientConstants.ts
assertMainOrNodeBoot();
let ErrorReportClientType = function(ErrorReportClientType$1) {
	ErrorReportClientType$1["Browser"] = "0";
	ErrorReportClientType$1["Android"] = "1";
	ErrorReportClientType$1["Ios"] = "2";
	ErrorReportClientType$1["MacOS"] = "3";
	ErrorReportClientType$1["Linux"] = "4";
	ErrorReportClientType$1["Windows"] = "5";
	return ErrorReportClientType$1;
}({});
let BrowserType = function(BrowserType$1) {
	BrowserType$1["CHROME"] = "Chrome";
	BrowserType$1["FIREFOX"] = "Firefox";
	BrowserType$1["EDGE"] = "Edge";
	BrowserType$1["SAFARI"] = "Safari";
	BrowserType$1["ANDROID"] = "Android";
	BrowserType$1["OPERA"] = "Opera";
	BrowserType$1["OTHER"] = "Other";
	return BrowserType$1;
}({});
let DeviceType = function(DeviceType$1) {
	DeviceType$1["IPHONE"] = "iPhone";
	DeviceType$1["IPAD"] = "iPad";
	DeviceType$1["ANDROID"] = "Android";
	DeviceType$1["DESKTOP"] = "Desktop";
	DeviceType$1["OTHER_MOBILE"] = "Other mobile";
	return DeviceType$1;
}({});
const companyTeamLabel = "Tuta Team";
let AppType = function(AppType$1) {
	/**
	* Desktop app / Web app
	*/
	AppType$1["Integrated"] = "0";
	AppType$1["Mail"] = "1";
	AppType$1["Calendar"] = "2";
	return AppType$1;
}({});

//#endregion
//#region src/common/misc/ClientDetector.ts
assertMainOrNodeBoot();
var ClientDetector = class {
	userAgent;
	browser;
	browserVersion;
	device;
	overflowAuto;
	isMacOS;
	appType;
	constructor() {}
	init(userAgent, platform, appType = AppType.Integrated) {
		this.userAgent = userAgent;
		this.browser = BrowserType.OTHER;
		this.browserVersion = 0;
		this.device = DeviceType.DESKTOP;
		this.appType = appType;
		this._setBrowserAndVersion();
		this._setDeviceInfo();
		this.overflowAuto = this.cssPropertyValueSupported("overflow", "overlay") ? "overlay" : "auto";
		this.isMacOS = platform.indexOf("Mac") !== -1;
	}
	/**
	* This function uses syntax constructs which we want to make sure are supported. If they are not then this file cannot be imported.
	*/
	syntaxChecks() {
		try {
			const arrowFunction = () => {
				return 1;
			};
			let aLet = 2;
			function* testGenerator() {}
			async function testAsync() {}
			function testDefaultArgs(a = 2) {}
			testGenerator();
			testAsync();
			testDefaultArgs();
			const anArray = [
				1,
				2,
				3
			];
			const spreadArray = [...anArray];
			const dynamicString = "";
			const impossibleCondition = arrowFunction() === aLet;
			if (impossibleCondition) import(dynamicString);
			const objectSyntax = {
				[dynamicString]: true,
				testFn() {},
				get accessor() {
					return null;
				},
				set accessor(newValue) {}
			};
			const templateString = `test ${dynamicString}`;
			const x = 1;
			const y = 2;
			const propertyShorthand = {
				x,
				y
			};
			const { x: x2, y: y2 } = propertyShorthand;
			const [a1, a2, ...arest] = anArray;
			class WithStatisMember {
				static aFuncton() {}
			}
			for (const item of testGenerator());
		} catch (e) {}
	}
	testBuiltins() {
		return typeof Set !== "undefined" && typeof Map !== "undefined" && typeof Array.prototype.includes === "function" && typeof Object.entries === "function" && typeof Object.values === "function" && typeof Object.fromEntries === "function" && typeof Symbol !== "undefined" && typeof Uint8Array !== "undefined" && typeof Proxy !== "undefined" && typeof Reflect !== "undefined" && typeof Promise.prototype.finally !== "undefined" && typeof String.prototype.replaceAll === "function" && typeof BigInt !== "undefined";
	}
	testCss() {
		try {
			document.querySelector("blockquote:not(blockquote blockquote)");
			document.querySelectorAll(":where(.mouse-nav)");
			return true;
		} catch (e) {
			return false;
		}
	}
	/**
	* Browsers which support these features are supported
	*/
	isSupported() {
		this.syntaxChecks();
		return this.isSupportedBrowserVersion() && this.testBuiltins() && this.websockets() && this.testCss();
	}
	isMobileDevice() {
		return this.device !== DeviceType.DESKTOP;
	}
	isDesktopDevice() {
		return this.device === DeviceType.DESKTOP;
	}
	/**
	* @see https://github.com/Modernizr/Modernizr/blob/5e3f359bfc9aa511543ece60bd8a6ea8aa7defd3/feature-detects/websockets.js
	*/
	websockets() {
		return "WebSocket" in window && window.WebSocket.CLOSING === 2;
	}
	localStorage() {
		try {
			return localStorage != null;
		} catch (e) {
			return false;
		}
	}
	/**
	* We need WebAssembly for Argon2.
	*
	* @returns true if webassembly is supported
	*/
	webassembly() {
		return typeof WebAssembly === "object" && typeof WebAssembly.instantiate === "function";
	}
	/**
	* @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	*/
	history() {
		return window.history && "pushState" in window.history;
	}
	/**
	* @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/network/xhr2.js
	*/
	xhr2() {
		return "XMLHttpRequest" in window;
	}
	indexedDb() {
		try {
			return window.indexedDB != null;
		} catch (e) {
			return false;
		}
	}
	_setBrowserAndVersion() {
		const operaIndex1 = this.userAgent.indexOf("Opera");
		const operaIndex2 = this.userAgent.indexOf("OPR/");
		const firefoxIndex = this.userAgent.indexOf("Firefox/");
		const paleMoonIndex = this.userAgent.indexOf("PaleMoon/");
		const iceweaselIndex = this.userAgent.indexOf("Iceweasel/");
		const chromeIndex = this.userAgent.indexOf("Chrome/");
		const chromeIosIndex = this.userAgent.indexOf("CriOS/");
		const safariIndex = this.userAgent.indexOf("Safari/");
		const edgeIndex = this.userAgent.indexOf("Edge");
		const androidIndex = this.userAgent.indexOf("Android");
		let versionIndex = -1;
		if (edgeIndex !== -1) {
			this.browser = BrowserType.EDGE;
			versionIndex = edgeIndex + 5;
		} else if (operaIndex1 !== -1) {
			this.browser = BrowserType.OPERA;
			versionIndex = this.userAgent.indexOf("Version/");
			if (versionIndex !== -1) versionIndex += 8;
else versionIndex = operaIndex1 + 6;
		} else if (operaIndex2 !== -1) {
			this.browser = BrowserType.OPERA;
			versionIndex = operaIndex2 + 4;
		} else if ((firefoxIndex !== -1 || iceweaselIndex !== -1) && operaIndex1 === -1 && operaIndex2 === -1 && paleMoonIndex === -1) {
			this.browser = BrowserType.FIREFOX;
			if (firefoxIndex !== -1) versionIndex = firefoxIndex + 8;
else versionIndex = iceweaselIndex + 10;
		} else if (chromeIndex !== -1) {
			this.browser = BrowserType.CHROME;
			versionIndex = chromeIndex + 7;
		} else if (androidIndex !== -1) {
			this.browser = BrowserType.ANDROID;
			versionIndex = androidIndex + 8;
		} else if (chromeIosIndex !== -1) {
			this.browser = BrowserType.CHROME;
			versionIndex = chromeIosIndex + 6;
		} else if (safariIndex !== -1 && chromeIndex === -1) {
			this.browser = BrowserType.SAFARI;
			versionIndex = this.userAgent.indexOf("Version/");
			if (versionIndex !== -1) versionIndex += 8;
else {
				this.extractIosVersion();
				return;
			}
		} else if (this.userAgent.match(/iPad.*AppleWebKit/) || this.userAgent.match(/iPhone.*AppleWebKit/)) {
			this.extractIosVersion();
			return;
		}
		if (versionIndex !== -1) {
			const mainVersionEndIndex = this.userAgent.indexOf(".", versionIndex);
			if (mainVersionEndIndex !== -1) try {
				this.browserVersion = Number(this.userAgent.substring(versionIndex, mainVersionEndIndex + 2));
			} catch (e) {}
		}
		if (this.browserVersion === 0) this.browser = BrowserType.OTHER;
	}
	extractIosVersion() {
		const versionIndex = this.userAgent.indexOf(" OS ");
		if (versionIndex !== -1) {
			this.browser = BrowserType.SAFARI;
			try {
				let pos = versionIndex + 4;
				let hadNan = false;
				while (pos < this.userAgent.length) {
					pos++;
					if (isNaN(Number(this.userAgent.charAt(pos)))) if (hadNan) break;
else hadNan = true;
				}
				const numberString = this.userAgent.substring(versionIndex + 4, pos);
				this.browserVersion = Number(numberString.replace(/_/g, "."));
			} catch (e) {}
		}
	}
	_setDeviceInfo() {
		this.device = DeviceType.DESKTOP;
		if (this.userAgent.match(/iPad.*AppleWebKit/) != null || /Macintosh; Intel Mac OS X.*AppleWebKit/.test(this.userAgent) && window.TouchEvent && /.*Chrome.*/.test(this.userAgent) === false) this.device = DeviceType.IPAD;
else if (this.userAgent.match(/iPhone.*AppleWebKit/) != null) this.device = DeviceType.IPHONE;
else if (this.userAgent.match(/Android/) != null) if (this.userAgent.match(/Ubuntu/) != null) this.device = DeviceType.OTHER_MOBILE;
else this.device = DeviceType.ANDROID;
else if (this.userAgent.match(/Windows NT/) != null) this.device = DeviceType.DESKTOP;
else if (this.userAgent.match(/Mobile/) != null || this.userAgent.match(/Tablet/) != null) this.device = DeviceType.OTHER_MOBILE;
	}
	isTouchSupported() {
		return "ontouchstart" in window;
	}
	isIos() {
		return this.device === DeviceType.IPAD || this.device === DeviceType.IPHONE;
	}
	cssPropertyValueSupported(prop, value) {
		let d = document.createElement("div");
		d.style[prop] = value;
		return d.style[prop] === value;
	}
	getIdentifier() {
		if (env.mode === Mode.App) {
			if (this.appType === AppType.Integrated) throw new Error("AppType.Integrated is not allowed for mobile apps");
			const appType = this.appType === AppType.Mail ? "Mail" : "Calendar";
			return `${client.device} ${appType} App`;
		} else if (env.mode === Mode.Browser) return client.browser + " Browser";
else if (env.platformId === "linux") return "Linux Desktop";
else if (env.platformId === "darwin") return "Mac Desktop";
else if (env.platformId === "win32") return "Windows Desktop";
		return "Unknown";
	}
	isSupportedBrowserVersion() {
		return this.notOldFirefox() && this.notOldChrome();
	}
	notOldFirefox() {
		return this.browser !== BrowserType.FIREFOX || this.browserVersion > 40;
	}
	notOldChrome() {
		return this.browser !== BrowserType.CHROME || this.browserVersion > 55;
	}
	needsMicrotaskHack() {
		return this.isIos() || this.browser === BrowserType.SAFARI || this.browser === BrowserType.FIREFOX && this.browserVersion <= 60 || this.browser === BrowserType.CHROME && this.browserVersion < 59;
	}
	needsExplicitIDBIds() {
		return this.browser === BrowserType.SAFARI && this.browserVersion < 12.2;
	}
	browserData() {
		return {
			needsMicrotaskHack: this.needsMicrotaskHack(),
			needsExplicitIDBIds: this.needsExplicitIDBIds(),
			indexedDbSupported: this.indexedDb()
		};
	}
	compressionStreamSupported() {
		return typeof CompressionStream !== "undefined";
	}
	isCalendarApp() {
		return isApp() && this.appType === AppType.Calendar;
	}
	isMailApp() {
		return isApp() && this.appType === AppType.Mail;
	}
};
const client = new ClientDetector();

//#endregion
export { AppType, BrowserType, DeviceType, ErrorReportClientType, client, companyTeamLabel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,