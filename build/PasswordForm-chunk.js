import { assertMainOrNode } from "./Env-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { assert } from "./dist2-chunk.js";
import { InfoLink, lang } from "./LanguageViewModel-chunk.js";
import { theme } from "./theme-chunk.js";
import { px, size } from "./size-chunk.js";
import { getEnabledMailAddressesForGroupInfo } from "./GroupUtils-chunk.js";
import { Button, ButtonType } from "./Button-chunk.js";
import { Autocomplete, Dialog } from "./Dialog-chunk.js";
import { locator } from "./CommonLocator-chunk.js";
import { getPasswordStrength, isSecurePassword } from "./PasswordUtils-chunk.js";
import { ExternalLink } from "./ExternalLink-chunk.js";
import { copyToClipboard } from "./ClipboardUtils-chunk.js";
import { PasswordField } from "./PasswordField-chunk.js";
import { LoginButton } from "./LoginButton-chunk.js";

//#region src/common/misc/passwords/PasswordGenerator.ts
assertMainOrNode();
const NUMBER_OF_BYTES = 2;
const BYTE_RANGE = Math.pow(2, 8 * NUMBER_OF_BYTES);
var PasswordGenerator = class {
	constructor(randomizer, dictionary$1) {
		this.randomizer = randomizer;
		this.dictionary = dictionary$1;
	}
	async generateRandomPassphrase() {
		const usedWords = new Set();
		while (usedWords.size < 6) {
			const word = await this.pickRandomWordFromDictionary();
			usedWords.add(word);
		}
		return Array.from(usedWords).join(" ");
	}
	async pickRandomWordFromDictionary() {
		const length = this.dictionary.length;
		return this.dictionary[await this.generateRandomNumberInRange(length)];
	}
	async generateRandomNumberInRange(range) {
		assert(range > 0, "range must be greater than 0");
		const byteNumber = await this.randomizer.generateRandomNumber(NUMBER_OF_BYTES);
		return Math.floor(byteNumber / BYTE_RANGE * range);
	}
};

//#endregion
//#region src/common/misc/passwords/PasswordGeneratorDialog.ts
let dictionary = null;
async function showPasswordGeneratorDialog() {
	if (dictionary == null) {
		const appState = window.tutao.appState;
		const baseUrl = location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : "") + appState.prefixWithoutFile;
		dictionary = await fetch(baseUrl + "/wordlibrary.json").then((response) => response.json());
	}
	let password = "";
	const pwGenerator = new PasswordGenerator(locator.random, dictionary);
	return new Promise((resolve) => {
		const insertPasswordOkAction = () => {
			resolve(password);
			dialog.close();
		};
		const updateAction = async () => {
			password = await pwGenerator.generateRandomPassphrase();
			mithril_default.redraw();
		};
		updateAction();
		const dialog = Dialog.showActionDialog({
			title: "passphrase_label",
			child: { view: () => mithril_default(PasswordGeneratorDialog, {
				okAction: insertPasswordOkAction,
				updateAction,
				password
			}) },
			okAction: null
		});
	});
}
var PasswordGeneratorDialog = class {
	view(vnode) {
		const { updateAction, okAction, password } = vnode.attrs;
		return mithril_default("", [
			mithril_default(".editor-border.mt.flex.center-horizontally.center-vertically", { style: { minHeight: px(65) } }, mithril_default(".center.b.monospace", password)),
			mithril_default(".small.mt-xs", [
				lang.get("passphraseGeneratorHelp_msg"),
				" ",
				mithril_default(ExternalLink, {
					href: InfoLink.PasswordGenerator,
					text: lang.get("faqEntry_label"),
					isCompanySite: true
				})
			]),
			mithril_default(".flex-end", [mithril_default(Button, {
				label: "regeneratePassword_action",
				click: () => updateAction(),
				type: ButtonType.Secondary
			}), mithril_default(Button, {
				click: () => copyToClipboard(password),
				label: "copy_action",
				type: ButtonType.Secondary
			})]),
			mithril_default(".flex", mithril_default(LoginButton, {
				label: "apply_action",
				onclick: () => okAction()
			}))
		]);
	}
};

//#endregion
//#region src/common/settings/PasswordForm.ts
assertMainOrNode();
var PasswordFieldType = function(PasswordFieldType$1) {
	PasswordFieldType$1[PasswordFieldType$1["Old"] = 0] = "Old";
	PasswordFieldType$1[PasswordFieldType$1["New"] = 1] = "New";
	PasswordFieldType$1[PasswordFieldType$1["Confirm"] = 2] = "Confirm";
	return PasswordFieldType$1;
}(PasswordFieldType || {});
var PasswordModel = class {
	newPassword = "";
	oldPassword = "";
	repeatedPassword = "";
	passwordStrength;
	__mailValid;
	__signupFreeTest;
	__signupPaidTest;
	constructor(usageTestController, logins, config, mailValid) {
		this.usageTestController = usageTestController;
		this.logins = logins;
		this.config = config;
		this.passwordStrength = this.calculatePasswordStrength();
		this.__mailValid = mailValid;
		this.__signupFreeTest = this.usageTestController.getTest("signup.free");
		this.__signupPaidTest = this.usageTestController.getTest("signup.paid");
	}
	_checkBothValidAndSendPing() {
		if (this.getNewPasswordStatus().type === "valid" && this.getRepeatedPasswordStatus().type === "valid") {
			this.__signupFreeTest?.getStage(3).complete();
			this.__signupPaidTest?.getStage(2).complete();
		}
	}
	getNewPassword() {
		return this.newPassword;
	}
	setNewPassword(newPassword) {
		if (this.__mailValid && this.__mailValid()) {
			this.__signupFreeTest?.getStage(2).complete();
			this.__signupPaidTest?.getStage(1).complete();
		}
		this.newPassword = newPassword;
		this.recalculatePasswordStrength();
	}
	/**
	* Might be needed when reserved strings change in the config
	*/
	recalculatePasswordStrength() {
		this.passwordStrength = this.calculatePasswordStrength();
		this._checkBothValidAndSendPing();
	}
	getOldPassword() {
		return this.oldPassword;
	}
	setOldPassword(oldPassword) {
		this.oldPassword = oldPassword;
		this.passwordStrength = this.calculatePasswordStrength();
	}
	getRepeatedPassword() {
		return this.repeatedPassword;
	}
	setRepeatedPassword(repeatedPassword) {
		this.repeatedPassword = repeatedPassword;
		this.passwordStrength = this.calculatePasswordStrength();
		this._checkBothValidAndSendPing();
	}
	clear() {
		this.newPassword = "";
		this.oldPassword = "";
		this.repeatedPassword = "";
		this.passwordStrength = this.calculatePasswordStrength();
	}
	getErrorMessageId() {
		return this.getErrorFromStatus(this.getOldPasswordStatus()) ?? this.getErrorFromStatus(this.getNewPasswordStatus()) ?? this.getErrorFromStatus(this.getRepeatedPasswordStatus());
	}
	getOldPasswordStatus() {
		if (this.config.checkOldPassword && this.oldPassword === "") return {
			type: "neutral",
			text: "oldPasswordNeutral_msg"
		};
else return {
			type: "valid",
			text: "emptyString_msg"
		};
	}
	getNewPasswordStatus() {
		if (this.newPassword === "") return {
			type: "neutral",
			text: "password1Neutral_msg"
		};
else if (this.config.checkOldPassword && this.oldPassword === this.newPassword) return {
			type: "invalid",
			text: "password1InvalidSame_msg"
		};
else if (this.isPasswordInsecure()) if (this.config.enforceStrength) return {
			type: "invalid",
			text: "password1InvalidUnsecure_msg"
		};
else return {
			type: "valid",
			text: "password1InvalidUnsecure_msg"
		};
else return {
			type: "valid",
			text: "passwordValid_msg"
		};
	}
	getRepeatedPasswordStatus() {
		if (this.config.hideConfirmation) return {
			type: "valid",
			text: "passwordValid_msg"
		};
		const repeatedPassword = this.repeatedPassword;
		const newPassword = this.newPassword;
		if (repeatedPassword === "") return {
			type: "neutral",
			text: "password2Neutral_msg"
		};
else if (repeatedPassword !== newPassword) return {
			type: "invalid",
			text: "password2Invalid_msg"
		};
else return {
			type: "valid",
			text: "passwordValid_msg"
		};
	}
	isPasswordInsecure() {
		return !isSecurePassword(this.getPasswordStrength());
	}
	getPasswordStrength() {
		return this.passwordStrength;
	}
	getErrorFromStatus(status) {
		if (!status) return null;
		return status.type !== "valid" ? status.text : null;
	}
	calculatePasswordStrength() {
		let reserved = this.config.reservedStrings ? this.config.reservedStrings() : [];
		if (this.logins.isUserLoggedIn()) reserved = reserved.concat(getEnabledMailAddressesForGroupInfo(this.logins.getUserController().userGroupInfo)).concat(this.logins.getUserController().userGroupInfo.name);
		return getPasswordStrength(this.newPassword, reserved);
	}
};
var PasswordForm = class {
	view({ attrs }) {
		return mithril_default("", { onremove: () => attrs.model.clear() }, [
			attrs.model.config.checkOldPassword ? mithril_default(PasswordField, {
				label: "oldPassword_label",
				value: attrs.model.getOldPassword(),
				status: attrs.model.getOldPasswordStatus(),
				oninput: (input) => attrs.model.setOldPassword(input),
				autocompleteAs: Autocomplete.currentPassword,
				fontSize: px(size.font_size_smaller)
			}) : null,
			mithril_default(PasswordField, {
				label: "newPassword_label",
				value: attrs.model.getNewPassword(),
				passwordStrength: attrs.model.getPasswordStrength(),
				helpLabel: () => this.renderPasswordGeneratorHelp(attrs),
				status: attrs.model.getNewPasswordStatus(),
				oninput: (input) => attrs.model.setNewPassword(input),
				autocompleteAs: Autocomplete.newPassword,
				fontSize: px(size.font_size_smaller)
			}),
			attrs.model.config.hideConfirmation ? null : mithril_default(PasswordField, {
				label: "repeatedPassword_label",
				value: attrs.model.getRepeatedPassword(),
				autocompleteAs: Autocomplete.newPassword,
				status: attrs.model.getRepeatedPasswordStatus(),
				oninput: (input) => attrs.model.setRepeatedPassword(input),
				fontSize: px(size.font_size_smaller)
			}),
			attrs.passwordInfoKey ? mithril_default(".small.mt-s", lang.get(attrs.passwordInfoKey)) : null
		]);
	}
	renderPasswordGeneratorHelp(attrs) {
		return mithril_default("button.b.mr-xs.hover.click.darkest-hover.mt-xs", {
			style: {
				display: "inline-block",
				color: theme.navigation_button_selected
			},
			onclick: async () => {
				attrs.model.setNewPassword(await showPasswordGeneratorDialog());
				mithril_default.redraw();
			}
		}, lang.get("generatePassphrase_action"));
	}
};

//#endregion
export { PasswordForm, PasswordModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFzc3dvcmRGb3JtLWNodW5rLmpzIiwibmFtZXMiOlsiTlVNQkVSX09GX0JZVEVTOiBudW1iZXIiLCJCWVRFX1JBTkdFOiBudW1iZXIiLCJyYW5kb21pemVyOiBXb3JrZXJSYW5kb21pemVyIiwiZGljdGlvbmFyeTogQXJyYXk8c3RyaW5nPiIsInJhbmdlOiBudW1iZXIiLCJkaWN0aW9uYXJ5OiBzdHJpbmdbXSB8IG51bGwiLCJ2bm9kZTogVm5vZGU8UGFzc3dvcmRHZW5lcmF0b3JEaWFsb2dBdHRycz4iLCJ1c2FnZVRlc3RDb250cm9sbGVyOiBVc2FnZVRlc3RDb250cm9sbGVyIiwibG9naW5zOiBMb2dpbkNvbnRyb2xsZXIiLCJjb25maWc6IFBhc3N3b3JkTW9kZWxDb25maWciLCJtYWlsVmFsaWQ/OiBTdHJlYW08Ym9vbGVhbj4iLCJuZXdQYXNzd29yZDogc3RyaW5nIiwib2xkUGFzc3dvcmQ6IHN0cmluZyIsInJlcGVhdGVkUGFzc3dvcmQ6IHN0cmluZyIsInN0YXR1czogU3RhdHVzIiwicmVzZXJ2ZWQ6IHN0cmluZ1tdIiwiYXR0cnM6IFBhc3N3b3JkRm9ybUF0dHJzIl0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi9taXNjL3Bhc3N3b3Jkcy9QYXNzd29yZEdlbmVyYXRvci50cyIsIi4uL3NyYy9jb21tb24vbWlzYy9wYXNzd29yZHMvUGFzc3dvcmRHZW5lcmF0b3JEaWFsb2cudHMiLCIuLi9zcmMvY29tbW9uL3NldHRpbmdzL1Bhc3N3b3JkRm9ybS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnRNYWluT3JOb2RlIH0gZnJvbSBcIi4uLy4uL2FwaS9jb21tb24vRW52XCJcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCJAdHV0YW8vdHV0YW5vdGEtdXRpbHNcIlxuaW1wb3J0IHsgV29ya2VyUmFuZG9taXplciB9IGZyb20gXCIuLi8uLi9hcGkvd29ya2VyL3dvcmtlckludGVyZmFjZXMuanNcIlxuXG5hc3NlcnRNYWluT3JOb2RlKClcblxuLy8gZXhwb3J0ZWQgZm9yIHRlc3RzXG4vLyBzaXplIG9mIGRpY3Rpb25hcnkgaXMgd2l0aGluIHRoZSAyQnl0ZSByYW5nZVxuZXhwb3J0IGNvbnN0IE5VTUJFUl9PRl9CWVRFUzogbnVtYmVyID0gMlxuZXhwb3J0IGNvbnN0IEJZVEVfUkFOR0U6IG51bWJlciA9IE1hdGgucG93KDIsIDggKiBOVU1CRVJfT0ZfQllURVMpXG5cbmV4cG9ydCBjbGFzcyBQYXNzd29yZEdlbmVyYXRvciB7XG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmFuZG9taXplcjogV29ya2VyUmFuZG9taXplciwgcHJpdmF0ZSBkaWN0aW9uYXJ5OiBBcnJheTxzdHJpbmc+KSB7fVxuXG5cdGFzeW5jIGdlbmVyYXRlUmFuZG9tUGFzc3BocmFzZSgpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdGNvbnN0IHVzZWRXb3JkcyA9IG5ldyBTZXQoKVxuXG5cdFx0d2hpbGUgKHVzZWRXb3Jkcy5zaXplIDwgNikge1xuXHRcdFx0Y29uc3Qgd29yZCA9IGF3YWl0IHRoaXMucGlja1JhbmRvbVdvcmRGcm9tRGljdGlvbmFyeSgpXG5cdFx0XHR1c2VkV29yZHMuYWRkKHdvcmQpXG5cdFx0fVxuXG5cdFx0cmV0dXJuIEFycmF5LmZyb20odXNlZFdvcmRzKS5qb2luKFwiIFwiKVxuXHR9XG5cblx0YXN5bmMgcGlja1JhbmRvbVdvcmRGcm9tRGljdGlvbmFyeSgpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdGNvbnN0IGxlbmd0aCA9IHRoaXMuZGljdGlvbmFyeS5sZW5ndGhcblx0XHRyZXR1cm4gdGhpcy5kaWN0aW9uYXJ5W2F3YWl0IHRoaXMuZ2VuZXJhdGVSYW5kb21OdW1iZXJJblJhbmdlKGxlbmd0aCldXG5cdH1cblxuXHQvLyBUaGUgUmFuZG9taXplciBnZW5lcmF0ZXMgYSBudW1iZXIgd2l0aGluIHJhbmdlIDo9IHswLCAuLi4sIEJZVEVfUkFOR0UgLSAxfSAoMUJ5dGUgLT4gezAsIC4uLiwgMjU1fSBmb3IgQllURV9SQU5HRSA9IDI1Nilcblx0Ly8gVG8gc2NhbGUgdGhlIG51bWJlciBuIHRvIG91ciBkZXNpcmVkIHJhbmdlLCB3ZSBjYW4gZGl2aWRlIG4gYnkgdGhlIEJZVEVfUkFOR0UsIHJlc3VsdGluZyBpbiBhIG51bWJlciBuIHdpdGggMCA8PSBuIDwgMVxuXHQvLyBAcGFyYW0gJ3JhbmdlJyBpcyB0aGUgbGVuZ3RoIG9mIHRoZSBkaWN0aW9uYXJ5LiBNdWx0aXBseWluZyB0aGUgYWJvdmUgbnVtYmVyIGJ5IHRoZSByYW5nZSB3aWxsIHJlc3VsdCBpbiBhIG51bWJlciBpbiByYW5nZSA6PSB7MCwgLi4uLCByYW5nZSAtIDF9XG5cdC8vIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIGtlZXAgdGhlIGRpc3RyaWJ1dGlvbiBvZiBudW1iZXJzIGV2ZW4sIGFzIHdlbGwgYXMgZW5zdXJpbmcgdGhhdCB3ZSBkbyBub3QgYWNjZXNzIGFueSBpbnZhbGlkIEluZGV4XG5cdGFzeW5jIGdlbmVyYXRlUmFuZG9tTnVtYmVySW5SYW5nZShyYW5nZTogbnVtYmVyKTogUHJvbWlzZTxudW1iZXI+IHtcblx0XHRhc3NlcnQocmFuZ2UgPiAwLCBcInJhbmdlIG11c3QgYmUgZ3JlYXRlciB0aGFuIDBcIilcblx0XHRjb25zdCBieXRlTnVtYmVyID0gYXdhaXQgdGhpcy5yYW5kb21pemVyLmdlbmVyYXRlUmFuZG9tTnVtYmVyKE5VTUJFUl9PRl9CWVRFUylcblx0XHRyZXR1cm4gTWF0aC5mbG9vcigoYnl0ZU51bWJlciAvIEJZVEVfUkFOR0UpICogcmFuZ2UpXG5cdH1cbn1cbiIsImltcG9ydCBtLCB7IENoaWxkcmVuLCBDb21wb25lbnQsIFZub2RlIH0gZnJvbSBcIm1pdGhyaWxcIlxuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSBcIi4uLy4uL2d1aS9iYXNlL0RpYWxvZ1wiXG5pbXBvcnQgeyBQYXNzd29yZEdlbmVyYXRvciB9IGZyb20gXCIuL1Bhc3N3b3JkR2VuZXJhdG9yXCJcbmltcG9ydCB7IEJ1dHRvbiwgQnV0dG9uVHlwZSB9IGZyb20gXCIuLi8uLi9ndWkvYmFzZS9CdXR0b24uanNcIlxuaW1wb3J0IHsgbG9jYXRvciB9IGZyb20gXCIuLi8uLi9hcGkvbWFpbi9Db21tb25Mb2NhdG9yXCJcbmltcG9ydCB7IHB4IH0gZnJvbSBcIi4uLy4uL2d1aS9zaXplXCJcbmltcG9ydCB7IGNvcHlUb0NsaXBib2FyZCB9IGZyb20gXCIuLi9DbGlwYm9hcmRVdGlsc1wiXG5pbXBvcnQgeyBJbmZvTGluaywgbGFuZyB9IGZyb20gXCIuLi9MYW5ndWFnZVZpZXdNb2RlbC5qc1wiXG5pbXBvcnQgeyBMb2dpbkJ1dHRvbiB9IGZyb20gXCIuLi8uLi9ndWkvYmFzZS9idXR0b25zL0xvZ2luQnV0dG9uLmpzXCJcbmltcG9ydCB7IEV4dGVybmFsTGluayB9IGZyb20gXCIuLi8uLi9ndWkvYmFzZS9FeHRlcm5hbExpbmsuanNcIlxuXG5sZXQgZGljdGlvbmFyeTogc3RyaW5nW10gfCBudWxsID0gbnVsbFxuXG4vKipcbiAqIFNob3cgYSBkaWFsb2cgdG8gZ2VuZXJhdGUgYSByYW5kb20gcGFzc3BocmFzZVxuICogQHJldHVybnMgYSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIGdlbmVyYXRlZCBwYXNzd29yZFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2hvd1Bhc3N3b3JkR2VuZXJhdG9yRGlhbG9nKCk6IFByb21pc2U8c3RyaW5nPiB7XG5cdGlmIChkaWN0aW9uYXJ5ID09IG51bGwpIHtcblx0XHRjb25zdCBhcHBTdGF0ZSA9IHdpbmRvdy50dXRhby5hcHBTdGF0ZVxuXHRcdGNvbnN0IGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3RuYW1lICsgKGxvY2F0aW9uLnBvcnQgPyBcIjpcIiArIGxvY2F0aW9uLnBvcnQgOiBcIlwiKSArIGFwcFN0YXRlLnByZWZpeFdpdGhvdXRGaWxlXG5cdFx0ZGljdGlvbmFyeSA9IGF3YWl0IGZldGNoKGJhc2VVcmwgKyBcIi93b3JkbGlicmFyeS5qc29uXCIpLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpXG5cdH1cblxuXHRsZXQgcGFzc3dvcmQgPSBcIlwiXG5cdGNvbnN0IHB3R2VuZXJhdG9yID0gbmV3IFBhc3N3b3JkR2VuZXJhdG9yKGxvY2F0b3IucmFuZG9tLCBkaWN0aW9uYXJ5ISlcblxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcblx0XHRjb25zdCBpbnNlcnRQYXNzd29yZE9rQWN0aW9uID0gKCkgPT4ge1xuXHRcdFx0cmVzb2x2ZShwYXNzd29yZClcblx0XHRcdGRpYWxvZy5jbG9zZSgpXG5cdFx0fVxuXG5cdFx0Y29uc3QgdXBkYXRlQWN0aW9uID0gYXN5bmMgKCkgPT4ge1xuXHRcdFx0cGFzc3dvcmQgPSBhd2FpdCBwd0dlbmVyYXRvci5nZW5lcmF0ZVJhbmRvbVBhc3NwaHJhc2UoKVxuXHRcdFx0bS5yZWRyYXcoKVxuXHRcdH1cblxuXHRcdHVwZGF0ZUFjdGlvbigpXG5cblx0XHRjb25zdCBkaWFsb2cgPSBEaWFsb2cuc2hvd0FjdGlvbkRpYWxvZyh7XG5cdFx0XHR0aXRsZTogXCJwYXNzcGhyYXNlX2xhYmVsXCIsXG5cdFx0XHRjaGlsZDoge1xuXHRcdFx0XHR2aWV3OiAoKSA9PlxuXHRcdFx0XHRcdG0oUGFzc3dvcmRHZW5lcmF0b3JEaWFsb2csIHtcblx0XHRcdFx0XHRcdG9rQWN0aW9uOiBpbnNlcnRQYXNzd29yZE9rQWN0aW9uLFxuXHRcdFx0XHRcdFx0dXBkYXRlQWN0aW9uLFxuXHRcdFx0XHRcdFx0cGFzc3dvcmQsXG5cdFx0XHRcdFx0fSksXG5cdFx0XHR9LFxuXHRcdFx0b2tBY3Rpb246IG51bGwsXG5cdFx0fSlcblx0fSlcbn1cblxuaW50ZXJmYWNlIFBhc3N3b3JkR2VuZXJhdG9yRGlhbG9nQXR0cnMge1xuXHRva0FjdGlvbjogKCkgPT4gdm9pZFxuXHR1cGRhdGVBY3Rpb246ICgpID0+IHZvaWRcblx0cGFzc3dvcmQ6IHN0cmluZ1xufVxuXG5jbGFzcyBQYXNzd29yZEdlbmVyYXRvckRpYWxvZyBpbXBsZW1lbnRzIENvbXBvbmVudDxQYXNzd29yZEdlbmVyYXRvckRpYWxvZ0F0dHJzPiB7XG5cdHZpZXcodm5vZGU6IFZub2RlPFBhc3N3b3JkR2VuZXJhdG9yRGlhbG9nQXR0cnM+KTogQ2hpbGRyZW4ge1xuXHRcdGNvbnN0IHsgdXBkYXRlQWN0aW9uLCBva0FjdGlvbiwgcGFzc3dvcmQgfSA9IHZub2RlLmF0dHJzXG5cdFx0cmV0dXJuIG0oXCJcIiwgW1xuXHRcdFx0bShcblx0XHRcdFx0XCIuZWRpdG9yLWJvcmRlci5tdC5mbGV4LmNlbnRlci1ob3Jpem9udGFsbHkuY2VudGVyLXZlcnRpY2FsbHlcIixcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRtaW5IZWlnaHQ6IHB4KDY1KSwgLy8gbmVlZHMgNjVweCBmb3IgZGlzcGxheWluZyB0d28gcm93c1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdG0oXCIuY2VudGVyLmIubW9ub3NwYWNlXCIsIHBhc3N3b3JkKSxcblx0XHRcdCksXG5cdFx0XHRtKFwiLnNtYWxsLm10LXhzXCIsIFtcblx0XHRcdFx0bGFuZy5nZXQoXCJwYXNzcGhyYXNlR2VuZXJhdG9ySGVscF9tc2dcIiksXG5cdFx0XHRcdFwiIFwiLFxuXHRcdFx0XHRtKEV4dGVybmFsTGluaywge1xuXHRcdFx0XHRcdGhyZWY6IEluZm9MaW5rLlBhc3N3b3JkR2VuZXJhdG9yLFxuXHRcdFx0XHRcdHRleHQ6IGxhbmcuZ2V0KFwiZmFxRW50cnlfbGFiZWxcIiksXG5cdFx0XHRcdFx0aXNDb21wYW55U2l0ZTogdHJ1ZSxcblx0XHRcdFx0fSksXG5cdFx0XHRdKSxcblx0XHRcdG0oXCIuZmxleC1lbmRcIiwgW1xuXHRcdFx0XHRtKEJ1dHRvbiwge1xuXHRcdFx0XHRcdGxhYmVsOiBcInJlZ2VuZXJhdGVQYXNzd29yZF9hY3Rpb25cIixcblx0XHRcdFx0XHRjbGljazogKCkgPT4gdXBkYXRlQWN0aW9uKCksXG5cdFx0XHRcdFx0dHlwZTogQnV0dG9uVHlwZS5TZWNvbmRhcnksXG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRtKEJ1dHRvbiwge1xuXHRcdFx0XHRcdGNsaWNrOiAoKSA9PiBjb3B5VG9DbGlwYm9hcmQocGFzc3dvcmQpLFxuXHRcdFx0XHRcdGxhYmVsOiBcImNvcHlfYWN0aW9uXCIsXG5cdFx0XHRcdFx0dHlwZTogQnV0dG9uVHlwZS5TZWNvbmRhcnksXG5cdFx0XHRcdH0pLFxuXHRcdFx0XSksXG5cdFx0XHRtKFxuXHRcdFx0XHRcIi5mbGV4XCIsXG5cdFx0XHRcdG0oTG9naW5CdXR0b24sIHtcblx0XHRcdFx0XHRsYWJlbDogXCJhcHBseV9hY3Rpb25cIixcblx0XHRcdFx0XHRvbmNsaWNrOiAoKSA9PiBva0FjdGlvbigpLFxuXHRcdFx0XHR9KSxcblx0XHRcdCksXG5cdFx0XSlcblx0fVxufVxuIiwiaW1wb3J0IG0sIHsgQ2hpbGRyZW4sIENvbXBvbmVudCwgVm5vZGUgfSBmcm9tIFwibWl0aHJpbFwiXG5pbXBvcnQgeyBBdXRvY29tcGxldGUgfSBmcm9tIFwiLi4vZ3VpL2Jhc2UvVGV4dEZpZWxkLmpzXCJcbmltcG9ydCB7IGdldFBhc3N3b3JkU3RyZW5ndGgsIGlzU2VjdXJlUGFzc3dvcmQgfSBmcm9tIFwiLi4vbWlzYy9wYXNzd29yZHMvUGFzc3dvcmRVdGlscy5qc1wiXG5pbXBvcnQgdHlwZSB7IFRyYW5zbGF0aW9uS2V5IH0gZnJvbSBcIi4uL21pc2MvTGFuZ3VhZ2VWaWV3TW9kZWwuanNcIlxuaW1wb3J0IHsgbGFuZyB9IGZyb20gXCIuLi9taXNjL0xhbmd1YWdlVmlld01vZGVsLmpzXCJcbmltcG9ydCB0eXBlIHsgU3RhdHVzIH0gZnJvbSBcIi4uL2d1aS9iYXNlL1N0YXR1c0ZpZWxkLmpzXCJcbmltcG9ydCB7IExvZ2luQ29udHJvbGxlciB9IGZyb20gXCIuLi9hcGkvbWFpbi9Mb2dpbkNvbnRyb2xsZXIuanNcIlxuaW1wb3J0IHsgYXNzZXJ0TWFpbk9yTm9kZSB9IGZyb20gXCIuLi9hcGkvY29tbW9uL0Vudi5qc1wiXG5pbXBvcnQgeyBnZXRFbmFibGVkTWFpbEFkZHJlc3Nlc0Zvckdyb3VwSW5mbyB9IGZyb20gXCIuLi9hcGkvY29tbW9uL3V0aWxzL0dyb3VwVXRpbHMuanNcIlxuaW1wb3J0IHsgc2hvd1Bhc3N3b3JkR2VuZXJhdG9yRGlhbG9nIH0gZnJvbSBcIi4uL21pc2MvcGFzc3dvcmRzL1Bhc3N3b3JkR2VuZXJhdG9yRGlhbG9nLmpzXCJcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSBcIi4uL2d1aS90aGVtZS5qc1wiXG5pbXBvcnQgeyBweCwgc2l6ZSB9IGZyb20gXCIuLi9ndWkvc2l6ZS5qc1wiXG5pbXBvcnQgeyBVc2FnZVRlc3QsIFVzYWdlVGVzdENvbnRyb2xsZXIgfSBmcm9tIFwiQHR1dGFvL3R1dGFub3RhLXVzYWdldGVzdHNcIlxuaW1wb3J0IFN0cmVhbSBmcm9tIFwibWl0aHJpbC9zdHJlYW1cIlxuaW1wb3J0IHsgUGFzc3dvcmRGaWVsZCwgUGFzc3dvcmRGaWVsZEF0dHJzIH0gZnJvbSBcIi4uL21pc2MvcGFzc3dvcmRzL1Bhc3N3b3JkRmllbGQuanNcIlxuXG5hc3NlcnRNYWluT3JOb2RlKClcblxuZXhwb3J0IGludGVyZmFjZSBQYXNzd29yZEZvcm1BdHRycyB7XG5cdG1vZGVsOiBQYXNzd29yZE1vZGVsXG5cdHBhc3N3b3JkSW5mb0tleT86IFRyYW5zbGF0aW9uS2V5XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFzc3dvcmRNb2RlbENvbmZpZyB7XG5cdHJlYWRvbmx5IGNoZWNrT2xkUGFzc3dvcmQ6IGJvb2xlYW5cblx0cmVhZG9ubHkgZW5mb3JjZVN0cmVuZ3RoOiBib29sZWFuXG5cdC8qKiBpZiBzZXQgdG8gdHJ1ZSB0aGUgc2Vjb25kIHBhc3N3b3JkIGZpZWxkIHdvbid0IGJlIHJlbmRlcmVkLiBJZiBub3Qgc2V0IGF0IGFsbCBvciBmYWxzZSB0aGUgc2Vjb25kIHBhc3N3b3JkIGZpZWxkIGlzIHJlbmRlcmVkICovXG5cdHJlYWRvbmx5IGhpZGVDb25maXJtYXRpb24/OiBib29sZWFuXG5cdHJlYWRvbmx5IHJlc2VydmVkU3RyaW5ncz86ICgpID0+IHN0cmluZ1tdXG59XG5cbmNvbnN0IGVudW0gUGFzc3dvcmRGaWVsZFR5cGUge1xuXHRPbGQsXG5cdE5ldyxcblx0Q29uZmlybSxcbn1cblxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkTW9kZWwge1xuXHRwcml2YXRlIG5ld1Bhc3N3b3JkID0gXCJcIlxuXHRwcml2YXRlIG9sZFBhc3N3b3JkID0gXCJcIlxuXHRwcml2YXRlIHJlcGVhdGVkUGFzc3dvcmQgPSBcIlwiXG5cdHByaXZhdGUgcGFzc3dvcmRTdHJlbmd0aDogbnVtYmVyXG5cdHByaXZhdGUgcmVhZG9ubHkgX19tYWlsVmFsaWQ/OiBTdHJlYW08Ym9vbGVhbj5cblx0cHJpdmF0ZSBfX3NpZ251cEZyZWVUZXN0PzogVXNhZ2VUZXN0XG5cdHByaXZhdGUgX19zaWdudXBQYWlkVGVzdD86IFVzYWdlVGVzdFxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgdXNhZ2VUZXN0Q29udHJvbGxlcjogVXNhZ2VUZXN0Q29udHJvbGxlcixcblx0XHRwcml2YXRlIHJlYWRvbmx5IGxvZ2luczogTG9naW5Db250cm9sbGVyLFxuXHRcdHJlYWRvbmx5IGNvbmZpZzogUGFzc3dvcmRNb2RlbENvbmZpZyxcblx0XHRtYWlsVmFsaWQ/OiBTdHJlYW08Ym9vbGVhbj4sXG5cdCkge1xuXHRcdHRoaXMucGFzc3dvcmRTdHJlbmd0aCA9IHRoaXMuY2FsY3VsYXRlUGFzc3dvcmRTdHJlbmd0aCgpXG5cblx0XHR0aGlzLl9fbWFpbFZhbGlkID0gbWFpbFZhbGlkXG5cdFx0dGhpcy5fX3NpZ251cEZyZWVUZXN0ID0gdGhpcy51c2FnZVRlc3RDb250cm9sbGVyLmdldFRlc3QoXCJzaWdudXAuZnJlZVwiKVxuXHRcdHRoaXMuX19zaWdudXBQYWlkVGVzdCA9IHRoaXMudXNhZ2VUZXN0Q29udHJvbGxlci5nZXRUZXN0KFwic2lnbnVwLnBhaWRcIilcblx0fVxuXG5cdF9jaGVja0JvdGhWYWxpZEFuZFNlbmRQaW5nKCkge1xuXHRcdGlmICh0aGlzLmdldE5ld1Bhc3N3b3JkU3RhdHVzKCkudHlwZSA9PT0gXCJ2YWxpZFwiICYmIHRoaXMuZ2V0UmVwZWF0ZWRQYXNzd29yZFN0YXR1cygpLnR5cGUgPT09IFwidmFsaWRcIikge1xuXHRcdFx0Ly8gUGFzc3dvcmQgZW50cnkgKGJvdGggcGFzc3dvcmRzIGVudGVyZWQgYW5kIHZhbGlkKVxuXHRcdFx0Ly8gT25seSB0aGUgc3RhcnRlZCB0ZXN0J3MgKGVpdGhlciBmcmVlIG9yIHBhaWQgY2xpY2tlZCkgc3RhZ2UgaXMgY29tcGxldGVkIGhlcmVcblx0XHRcdHRoaXMuX19zaWdudXBGcmVlVGVzdD8uZ2V0U3RhZ2UoMykuY29tcGxldGUoKVxuXHRcdFx0dGhpcy5fX3NpZ251cFBhaWRUZXN0Py5nZXRTdGFnZSgyKS5jb21wbGV0ZSgpXG5cdFx0fVxuXHR9XG5cblx0Z2V0TmV3UGFzc3dvcmQoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5uZXdQYXNzd29yZFxuXHR9XG5cblx0c2V0TmV3UGFzc3dvcmQobmV3UGFzc3dvcmQ6IHN0cmluZykge1xuXHRcdGlmICh0aGlzLl9fbWFpbFZhbGlkICYmIHRoaXMuX19tYWlsVmFsaWQoKSkge1xuXHRcdFx0Ly8gRW1haWwgYWRkcmVzcyBzZWxlY3Rpb24gZmluaXNoZWQgKGVtYWlsIGFkZHJlc3MgaXMgYXZhaWxhYmxlIGFuZCBjbGlja2VkIGluIHBhc3N3b3JkIGZpZWxkKVxuXHRcdFx0Ly8gT25seSB0aGUgc3RhcnRlZCB0ZXN0J3MgKGVpdGhlciBmcmVlIG9yIHBhaWQgY2xpY2tlZCkgc3RhZ2UgaXMgY29tcGxldGVkIGhlcmVcblx0XHRcdHRoaXMuX19zaWdudXBGcmVlVGVzdD8uZ2V0U3RhZ2UoMikuY29tcGxldGUoKVxuXHRcdFx0dGhpcy5fX3NpZ251cFBhaWRUZXN0Py5nZXRTdGFnZSgxKS5jb21wbGV0ZSgpXG5cdFx0fVxuXG5cdFx0dGhpcy5uZXdQYXNzd29yZCA9IG5ld1Bhc3N3b3JkXG5cdFx0dGhpcy5yZWNhbGN1bGF0ZVBhc3N3b3JkU3RyZW5ndGgoKVxuXHR9XG5cblx0LyoqXG5cdCAqIE1pZ2h0IGJlIG5lZWRlZCB3aGVuIHJlc2VydmVkIHN0cmluZ3MgY2hhbmdlIGluIHRoZSBjb25maWdcblx0ICovXG5cdHJlY2FsY3VsYXRlUGFzc3dvcmRTdHJlbmd0aCgpIHtcblx0XHR0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSB0aGlzLmNhbGN1bGF0ZVBhc3N3b3JkU3RyZW5ndGgoKVxuXHRcdHRoaXMuX2NoZWNrQm90aFZhbGlkQW5kU2VuZFBpbmcoKVxuXHR9XG5cblx0Z2V0T2xkUGFzc3dvcmQoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5vbGRQYXNzd29yZFxuXHR9XG5cblx0c2V0T2xkUGFzc3dvcmQob2xkUGFzc3dvcmQ6IHN0cmluZykge1xuXHRcdHRoaXMub2xkUGFzc3dvcmQgPSBvbGRQYXNzd29yZFxuXHRcdHRoaXMucGFzc3dvcmRTdHJlbmd0aCA9IHRoaXMuY2FsY3VsYXRlUGFzc3dvcmRTdHJlbmd0aCgpXG5cdH1cblxuXHRnZXRSZXBlYXRlZFBhc3N3b3JkKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMucmVwZWF0ZWRQYXNzd29yZFxuXHR9XG5cblx0c2V0UmVwZWF0ZWRQYXNzd29yZChyZXBlYXRlZFBhc3N3b3JkOiBzdHJpbmcpIHtcblx0XHR0aGlzLnJlcGVhdGVkUGFzc3dvcmQgPSByZXBlYXRlZFBhc3N3b3JkXG5cdFx0dGhpcy5wYXNzd29yZFN0cmVuZ3RoID0gdGhpcy5jYWxjdWxhdGVQYXNzd29yZFN0cmVuZ3RoKClcblxuXHRcdHRoaXMuX2NoZWNrQm90aFZhbGlkQW5kU2VuZFBpbmcoKVxuXHR9XG5cblx0Y2xlYXIoKSB7XG5cdFx0dGhpcy5uZXdQYXNzd29yZCA9IFwiXCJcblx0XHR0aGlzLm9sZFBhc3N3b3JkID0gXCJcIlxuXHRcdHRoaXMucmVwZWF0ZWRQYXNzd29yZCA9IFwiXCJcblx0XHR0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSB0aGlzLmNhbGN1bGF0ZVBhc3N3b3JkU3RyZW5ndGgoKVxuXHR9XG5cblx0Z2V0RXJyb3JNZXNzYWdlSWQoKTogVHJhbnNsYXRpb25LZXkgfCBudWxsIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0dGhpcy5nZXRFcnJvckZyb21TdGF0dXModGhpcy5nZXRPbGRQYXNzd29yZFN0YXR1cygpKSA/P1xuXHRcdFx0dGhpcy5nZXRFcnJvckZyb21TdGF0dXModGhpcy5nZXROZXdQYXNzd29yZFN0YXR1cygpKSA/P1xuXHRcdFx0dGhpcy5nZXRFcnJvckZyb21TdGF0dXModGhpcy5nZXRSZXBlYXRlZFBhc3N3b3JkU3RhdHVzKCkpXG5cdFx0KVxuXHR9XG5cblx0Z2V0T2xkUGFzc3dvcmRTdGF0dXMoKTogU3RhdHVzIHtcblx0XHRpZiAodGhpcy5jb25maWcuY2hlY2tPbGRQYXNzd29yZCAmJiB0aGlzLm9sZFBhc3N3b3JkID09PSBcIlwiKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiBcIm5ldXRyYWxcIixcblx0XHRcdFx0dGV4dDogXCJvbGRQYXNzd29yZE5ldXRyYWxfbXNnXCIsXG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHR5cGU6IFwidmFsaWRcIixcblx0XHRcdFx0dGV4dDogXCJlbXB0eVN0cmluZ19tc2dcIixcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZXROZXdQYXNzd29yZFN0YXR1cygpOiBTdGF0dXMge1xuXHRcdGlmICh0aGlzLm5ld1Bhc3N3b3JkID09PSBcIlwiKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiBcIm5ldXRyYWxcIixcblx0XHRcdFx0dGV4dDogXCJwYXNzd29yZDFOZXV0cmFsX21zZ1wiLFxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodGhpcy5jb25maWcuY2hlY2tPbGRQYXNzd29yZCAmJiB0aGlzLm9sZFBhc3N3b3JkID09PSB0aGlzLm5ld1Bhc3N3b3JkKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiBcImludmFsaWRcIixcblx0XHRcdFx0dGV4dDogXCJwYXNzd29yZDFJbnZhbGlkU2FtZV9tc2dcIixcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHRoaXMuaXNQYXNzd29yZEluc2VjdXJlKCkpIHtcblx0XHRcdGlmICh0aGlzLmNvbmZpZy5lbmZvcmNlU3RyZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcImludmFsaWRcIixcblx0XHRcdFx0XHR0ZXh0OiBcInBhc3N3b3JkMUludmFsaWRVbnNlY3VyZV9tc2dcIixcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInZhbGlkXCIsXG5cdFx0XHRcdFx0dGV4dDogXCJwYXNzd29yZDFJbnZhbGlkVW5zZWN1cmVfbXNnXCIsXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dHlwZTogXCJ2YWxpZFwiLFxuXHRcdFx0XHR0ZXh0OiBcInBhc3N3b3JkVmFsaWRfbXNnXCIsXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Z2V0UmVwZWF0ZWRQYXNzd29yZFN0YXR1cygpOiBTdGF0dXMge1xuXHRcdGlmICh0aGlzLmNvbmZpZy5oaWRlQ29uZmlybWF0aW9uKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiBcInZhbGlkXCIsXG5cdFx0XHRcdHRleHQ6IFwicGFzc3dvcmRWYWxpZF9tc2dcIixcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc3QgcmVwZWF0ZWRQYXNzd29yZCA9IHRoaXMucmVwZWF0ZWRQYXNzd29yZFxuXHRcdGNvbnN0IG5ld1Bhc3N3b3JkID0gdGhpcy5uZXdQYXNzd29yZFxuXG5cdFx0aWYgKHJlcGVhdGVkUGFzc3dvcmQgPT09IFwiXCIpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHR5cGU6IFwibmV1dHJhbFwiLFxuXHRcdFx0XHR0ZXh0OiBcInBhc3N3b3JkMk5ldXRyYWxfbXNnXCIsXG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChyZXBlYXRlZFBhc3N3b3JkICE9PSBuZXdQYXNzd29yZCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dHlwZTogXCJpbnZhbGlkXCIsXG5cdFx0XHRcdHRleHQ6IFwicGFzc3dvcmQySW52YWxpZF9tc2dcIixcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dHlwZTogXCJ2YWxpZFwiLFxuXHRcdFx0XHR0ZXh0OiBcInBhc3N3b3JkVmFsaWRfbXNnXCIsXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aXNQYXNzd29yZEluc2VjdXJlKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAhaXNTZWN1cmVQYXNzd29yZCh0aGlzLmdldFBhc3N3b3JkU3RyZW5ndGgoKSlcblx0fVxuXG5cdGdldFBhc3N3b3JkU3RyZW5ndGgoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5wYXNzd29yZFN0cmVuZ3RoXG5cdH1cblxuXHRwcml2YXRlIGdldEVycm9yRnJvbVN0YXR1cyhzdGF0dXM6IFN0YXR1cyk6IFRyYW5zbGF0aW9uS2V5IHwgbnVsbCB7XG5cdFx0aWYgKCFzdGF0dXMpIHJldHVybiBudWxsXG5cdFx0cmV0dXJuIHN0YXR1cy50eXBlICE9PSBcInZhbGlkXCIgPyBzdGF0dXMudGV4dCA6IG51bGxcblx0fVxuXG5cdHByaXZhdGUgY2FsY3VsYXRlUGFzc3dvcmRTdHJlbmd0aCgpOiBudW1iZXIge1xuXHRcdGxldCByZXNlcnZlZDogc3RyaW5nW10gPSB0aGlzLmNvbmZpZy5yZXNlcnZlZFN0cmluZ3MgPyB0aGlzLmNvbmZpZy5yZXNlcnZlZFN0cmluZ3MoKSA6IFtdXG5cblx0XHRpZiAodGhpcy5sb2dpbnMuaXNVc2VyTG9nZ2VkSW4oKSkge1xuXHRcdFx0cmVzZXJ2ZWQgPSByZXNlcnZlZFxuXHRcdFx0XHQuY29uY2F0KGdldEVuYWJsZWRNYWlsQWRkcmVzc2VzRm9yR3JvdXBJbmZvKHRoaXMubG9naW5zLmdldFVzZXJDb250cm9sbGVyKCkudXNlckdyb3VwSW5mbykpXG5cdFx0XHRcdC5jb25jYXQodGhpcy5sb2dpbnMuZ2V0VXNlckNvbnRyb2xsZXIoKS51c2VyR3JvdXBJbmZvLm5hbWUpXG5cdFx0fVxuXG5cdFx0Ly8gODAlIHN0cmVuZ3RoIGlzIG1pbmltdW0uIHdlIGV4cGFuZCBpdCB0byAxMDAlLCBzbyB0aGUgcGFzc3dvcmQgaW5kaWNhdG9yIGlmIGNvbXBsZXRlbHkgZmlsbGVkIHdoZW4gdGhlIHBhc3N3b3JkIGlzIHN0cm9uZyBlbm91Z2hcblx0XHRyZXR1cm4gZ2V0UGFzc3dvcmRTdHJlbmd0aCh0aGlzLm5ld1Bhc3N3b3JkLCByZXNlcnZlZClcblx0fVxufVxuXG4vKipcbiAqIEEgZm9ybSBmb3IgZW50ZXJpbmcgYSBuZXcgcGFzc3dvcmQuIE9wdGlvbmFsbHkgaXQgYWxsb3dzIHRvIGVudGVyIHRoZSBvbGQgcGFzc3dvcmQgZm9yIHZhbGlkYXRpb24gYW5kL29yIHRvIHJlcGVhdCB0aGUgbmV3IHBhc3N3b3JkLlxuICogc2hvd0NoYW5nZU93blBhc3N3b3JkRGlhbG9nKCkgYW5kIHNob3dDaGFuZ2VVc2VyUGFzc3dvcmRBc0FkbWluRGlhbG9nKCkgc2hvdyB0aGlzIGZvcm0gYXMgZGlhbG9nLlxuICovXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRGb3JtIGltcGxlbWVudHMgQ29tcG9uZW50PFBhc3N3b3JkRm9ybUF0dHJzPiB7XG5cdHZpZXcoeyBhdHRycyB9OiBWbm9kZTxQYXNzd29yZEZvcm1BdHRycz4pOiBDaGlsZHJlbiB7XG5cdFx0cmV0dXJuIG0oXG5cdFx0XHRcIlwiLFxuXHRcdFx0e1xuXHRcdFx0XHRvbnJlbW92ZTogKCkgPT4gYXR0cnMubW9kZWwuY2xlYXIoKSxcblx0XHRcdH0sXG5cdFx0XHRbXG5cdFx0XHRcdGF0dHJzLm1vZGVsLmNvbmZpZy5jaGVja09sZFBhc3N3b3JkXG5cdFx0XHRcdFx0PyBtKFBhc3N3b3JkRmllbGQsIHtcblx0XHRcdFx0XHRcdFx0bGFiZWw6IFwib2xkUGFzc3dvcmRfbGFiZWxcIixcblx0XHRcdFx0XHRcdFx0dmFsdWU6IGF0dHJzLm1vZGVsLmdldE9sZFBhc3N3b3JkKCksXG5cdFx0XHRcdFx0XHRcdHN0YXR1czogYXR0cnMubW9kZWwuZ2V0T2xkUGFzc3dvcmRTdGF0dXMoKSxcblx0XHRcdFx0XHRcdFx0b25pbnB1dDogKGlucHV0KSA9PiBhdHRycy5tb2RlbC5zZXRPbGRQYXNzd29yZChpbnB1dCksXG5cdFx0XHRcdFx0XHRcdGF1dG9jb21wbGV0ZUFzOiBBdXRvY29tcGxldGUuY3VycmVudFBhc3N3b3JkLFxuXHRcdFx0XHRcdFx0XHRmb250U2l6ZTogcHgoc2l6ZS5mb250X3NpemVfc21hbGxlciksXG5cdFx0XHRcdFx0ICB9IHNhdGlzZmllcyBQYXNzd29yZEZpZWxkQXR0cnMpXG5cdFx0XHRcdFx0OiBudWxsLFxuXHRcdFx0XHRtKFBhc3N3b3JkRmllbGQsIHtcblx0XHRcdFx0XHRsYWJlbDogXCJuZXdQYXNzd29yZF9sYWJlbFwiLFxuXHRcdFx0XHRcdHZhbHVlOiBhdHRycy5tb2RlbC5nZXROZXdQYXNzd29yZCgpLFxuXHRcdFx0XHRcdHBhc3N3b3JkU3RyZW5ndGg6IGF0dHJzLm1vZGVsLmdldFBhc3N3b3JkU3RyZW5ndGgoKSxcblx0XHRcdFx0XHRoZWxwTGFiZWw6ICgpID0+IHRoaXMucmVuZGVyUGFzc3dvcmRHZW5lcmF0b3JIZWxwKGF0dHJzKSxcblx0XHRcdFx0XHRzdGF0dXM6IGF0dHJzLm1vZGVsLmdldE5ld1Bhc3N3b3JkU3RhdHVzKCksXG5cdFx0XHRcdFx0b25pbnB1dDogKGlucHV0KSA9PiBhdHRycy5tb2RlbC5zZXROZXdQYXNzd29yZChpbnB1dCksXG5cdFx0XHRcdFx0YXV0b2NvbXBsZXRlQXM6IEF1dG9jb21wbGV0ZS5uZXdQYXNzd29yZCxcblx0XHRcdFx0XHRmb250U2l6ZTogcHgoc2l6ZS5mb250X3NpemVfc21hbGxlciksXG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRhdHRycy5tb2RlbC5jb25maWcuaGlkZUNvbmZpcm1hdGlvblxuXHRcdFx0XHRcdD8gbnVsbFxuXHRcdFx0XHRcdDogbShQYXNzd29yZEZpZWxkLCB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsOiBcInJlcGVhdGVkUGFzc3dvcmRfbGFiZWxcIixcblx0XHRcdFx0XHRcdFx0dmFsdWU6IGF0dHJzLm1vZGVsLmdldFJlcGVhdGVkUGFzc3dvcmQoKSxcblx0XHRcdFx0XHRcdFx0YXV0b2NvbXBsZXRlQXM6IEF1dG9jb21wbGV0ZS5uZXdQYXNzd29yZCxcblx0XHRcdFx0XHRcdFx0c3RhdHVzOiBhdHRycy5tb2RlbC5nZXRSZXBlYXRlZFBhc3N3b3JkU3RhdHVzKCksXG5cdFx0XHRcdFx0XHRcdG9uaW5wdXQ6IChpbnB1dCkgPT4gYXR0cnMubW9kZWwuc2V0UmVwZWF0ZWRQYXNzd29yZChpbnB1dCksXG5cdFx0XHRcdFx0XHRcdGZvbnRTaXplOiBweChzaXplLmZvbnRfc2l6ZV9zbWFsbGVyKSxcblx0XHRcdFx0XHQgIH0pLFxuXHRcdFx0XHRhdHRycy5wYXNzd29yZEluZm9LZXkgPyBtKFwiLnNtYWxsLm10LXNcIiwgbGFuZy5nZXQoYXR0cnMucGFzc3dvcmRJbmZvS2V5KSkgOiBudWxsLFxuXHRcdFx0XSxcblx0XHQpXG5cdH1cblxuXHRwcml2YXRlIHJlbmRlclBhc3N3b3JkR2VuZXJhdG9ySGVscChhdHRyczogUGFzc3dvcmRGb3JtQXR0cnMpOiBDaGlsZHJlbiB7XG5cdFx0cmV0dXJuIG0oXG5cdFx0XHRcImJ1dHRvbi5iLm1yLXhzLmhvdmVyLmNsaWNrLmRhcmtlc3QtaG92ZXIubXQteHNcIixcblx0XHRcdHtcblx0XHRcdFx0c3R5bGU6IHsgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIiwgY29sb3I6IHRoZW1lLm5hdmlnYXRpb25fYnV0dG9uX3NlbGVjdGVkIH0sXG5cdFx0XHRcdG9uY2xpY2s6IGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRhdHRycy5tb2RlbC5zZXROZXdQYXNzd29yZChhd2FpdCBzaG93UGFzc3dvcmRHZW5lcmF0b3JEaWFsb2coKSlcblx0XHRcdFx0XHRtLnJlZHJhdygpXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0bGFuZy5nZXQoXCJnZW5lcmF0ZVBhc3NwaHJhc2VfYWN0aW9uXCIpLFxuXHRcdClcblx0fVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUlBLGtCQUFrQjtNQUlMQSxrQkFBMEI7TUFDMUJDLGFBQXFCLEtBQUssSUFBSSxHQUFHLElBQUksZ0JBQWdCO0lBRXJELG9CQUFOLE1BQXdCO0NBQzlCLFlBQW9CQyxZQUFzQ0MsY0FBMkI7RUE0QnJGLEtBNUJvQjtFQTRCbkIsS0E1QnlEO0NBQTZCO0NBRXZGLE1BQU0sMkJBQTRDO0VBQ2pELE1BQU0sWUFBWSxJQUFJO0FBRXRCLFNBQU8sVUFBVSxPQUFPLEdBQUc7R0FDMUIsTUFBTSxPQUFPLE1BQU0sS0FBSyw4QkFBOEI7QUFDdEQsYUFBVSxJQUFJLEtBQUs7RUFDbkI7QUFFRCxTQUFPLE1BQU0sS0FBSyxVQUFVLENBQUMsS0FBSyxJQUFJO0NBQ3RDO0NBRUQsTUFBTSwrQkFBZ0Q7RUFDckQsTUFBTSxTQUFTLEtBQUssV0FBVztBQUMvQixTQUFPLEtBQUssV0FBVyxNQUFNLEtBQUssNEJBQTRCLE9BQU87Q0FDckU7Q0FNRCxNQUFNLDRCQUE0QkMsT0FBZ0M7QUFDakUsU0FBTyxRQUFRLEdBQUcsK0JBQStCO0VBQ2pELE1BQU0sYUFBYSxNQUFNLEtBQUssV0FBVyxxQkFBcUIsZ0JBQWdCO0FBQzlFLFNBQU8sS0FBSyxNQUFPLGFBQWEsYUFBYyxNQUFNO0NBQ3BEO0FBQ0Q7Ozs7QUM1QkQsSUFBSUMsYUFBOEI7QUFNM0IsZUFBZSw4QkFBK0M7QUFDcEUsS0FBSSxjQUFjLE1BQU07RUFDdkIsTUFBTSxXQUFXLE9BQU8sTUFBTTtFQUM5QixNQUFNLFVBQVUsU0FBUyxXQUFXLE9BQU8sU0FBUyxZQUFZLFNBQVMsT0FBTyxNQUFNLFNBQVMsT0FBTyxNQUFNLFNBQVM7QUFDckgsZUFBYSxNQUFNLE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsYUFB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