import { Mode, assertMainOrNodeBoot, isApp, isElectronClient, isIOSApp } from "./Env-chunk.js";
import { client } from "./ClientDetector-chunk.js";
import { mithril_default } from "./mithril-chunk.js";
import { noOp, remove } from "./dist2-chunk.js";
import { lang } from "./LanguageViewModel-chunk.js";

//#region src/common/misc/WindowFacade.ts
assertMainOrNodeBoot();
var WindowFacade = class {
	_windowSizeListeners;
	resizeTimeout;
	windowCloseConfirmation;
	_windowCloseListeners;
	_historyStateEventListeners = [];
	indexerFacade = null;
	_keyboardSize = 0;
	_keyboardSizeListeners = [];
	_ignoreNextPopstate = false;
	connectivityModel;
	logins = null;
	appBasedVisibilityChage = noOp;
	constructor() {
		this._windowSizeListeners = [];
		this.resizeTimeout = null;
		this.windowCloseConfirmation = false;
		this._windowCloseListeners = new Set();
		const onresize = () => {
			if (!this.resizeTimeout) {
				const cb = () => {
					this.resizeTimeout = null;
					this._resize();
				};
				this.resizeTimeout = client.isMobileDevice() ? setTimeout(cb, 66) : requestAnimationFrame(cb);
			}
		};
		window.onresize = onresize;
		window.onorientationchange = onresize;
	}
	/**
	* Add a window resize listener with a listenerId
	* @param listener Provides the new width and height of the window if the values change.
	*/
	addResizeListener(listener) {
		this._windowSizeListeners.push(listener);
	}
	removeResizeListener(listener) {
		remove(this._windowSizeListeners, listener);
	}
	addWindowCloseListener(listener) {
		this._windowCloseListeners.add(listener);
		this._checkWindowClosing(this._windowCloseListeners.size > 0);
		return () => {
			this._windowCloseListeners.delete(listener);
			this._checkWindowClosing(this._windowCloseListeners.size > 0);
		};
	}
	_notifyCloseListeners(e) {
		for (const f of this._windowCloseListeners) f(e);
	}
	addKeyboardSizeListener(listener) {
		this._keyboardSizeListeners.push(listener);
		listener(this._keyboardSize);
	}
	removeKeyboardSizeListener(listener) {
		remove(this._keyboardSizeListeners, listener);
	}
	openLink(href) {
		if (env.mode === Mode.App) window.open(href, "_system");
else window.open(href, "_blank");
	}
	init(logins, connectivityModel, appBasedVisibilityChage) {
		this.logins = logins;
		if (window.addEventListener && !isApp()) {
			window.addEventListener("beforeunload", (e) => this._beforeUnload(e));
			window.addEventListener("popstate", (e) => this._popState(e));
			window.addEventListener("unload", (e) => this._onUnload());
		}
		this.appBasedVisibilityChage = appBasedVisibilityChage ?? noOp;
		this.connectivityModel = connectivityModel;
		if (env.mode === Mode.App || env.mode === Mode.Desktop || env.mode === Mode.Admin) this.addPageInBackgroundListener();
		if (env.mode === Mode.Desktop && client.isMacOS && window.addEventListener) window.addEventListener("keydown", (e) => {
			if (!e.metaKey || e.key === "Meta") return;
			const target = e.target;
			if (target?.tagName === "INPUT" || target?.contentEditable === "true") e.stopPropagation();
else if (e.key === "ArrowLeft") window.history.back();
else if (e.key === "ArrowRight") window.history.forward();
		});
		this._resize();
	}
	_resize() {
		try {
			for (const listener of this._windowSizeListeners) listener(window.innerWidth, window.innerHeight);
		} finally {
			mithril_default.redraw();
		}
	}
	_checkWindowClosing(enable) {
		this.windowCloseConfirmation = enable;
	}
	_beforeUnload(e) {
		console.log("windowfacade._beforeUnload");
		this._notifyCloseListeners(e);
		if (this.windowCloseConfirmation) {
			let m = lang.get("closeWindowConfirmation_msg");
			e.returnValue = m;
			return m;
		} else {
			this.logins?.logout(true);
			return null;
		}
	}
	/**
	* add a function to call when onpopstate event occurs
	* @param listener: return true if this popstate may go ahead
	* @returns {Function}
	*/
	addHistoryEventListener(listener) {
		this._historyStateEventListeners.push(listener);
		return () => {
			const index = this._historyStateEventListeners.indexOf(listener);
			if (index !== -1) this._historyStateEventListeners.splice(index, 1);
		};
	}
	removeHistoryEventListener(listener) {
		remove(this._historyStateEventListeners, listener);
	}
	/**
	* calls the last history event listener that was added
	* and reverts the state change if it returns false
	* TODO: this also fires for forward-events and when the user jumps around in the history
	* TODO: by long-clicking the back/forward buttons.
	* TODO: solving this requires extensive bookkeeping because the events are indistinguishable by default
	* @param e: popstate DOM event
	* @private
	*/
	_popState(e) {
		const len = this._historyStateEventListeners.length;
		if (len === 0) return;
		if (this._ignoreNextPopstate) {
			this._ignoreNextPopstate = false;
			return;
		}
		if (!this._historyStateEventListeners[len - 1](e)) {
			this._ignoreNextPopstate = true;
			history.go(1);
		}
	}
	_onUnload() {
		if (this.windowCloseConfirmation && this.logins) this.logins.logout(true);
	}
	addOnlineListener(listener) {
		window.addEventListener("online", listener);
	}
	addOfflineListener(listener) {
		window.addEventListener("offline", listener);
	}
	async reload(args) {
		if (isApp() || isElectronClient()) {
			if (!Object.hasOwn(args, "noAutoLogin")) args.noAutoLogin = true;
			const { locator } = await import("./CommonLocator2-chunk.js");
			const stringifiedArgs = {};
			for (const [k, v] of Object.entries(args)) if (v != null) stringifiedArgs[k] = String(v);
			await locator.commonSystemFacade.reload(stringifiedArgs);
		} else window.location.reload();
	}
	addPageInBackgroundListener() {
		if (isIOSApp()) document.addEventListener("visibilitychange", () => {
			console.log("Visibility change, hidden: ", document.hidden);
			this.appBasedVisibilityChage(!document.hidden);
			if (!document.hidden) setTimeout(() => this.connectivityModel?.tryReconnect(false, true), 100);
		});
	}
	onKeyboardSizeChanged(size) {
		this._keyboardSize = size;
		for (let listener of this._keyboardSizeListeners) listener(size);
		if (size > 0) {
			const body = document.body;
			body.style.position = "unset";
			setTimeout(() => {
				body.style.position = "fixed";
			}, 200);
		}
	}
};
const windowFacade = new WindowFacade();

//#endregion
export { WindowFacade, windowFacade };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,