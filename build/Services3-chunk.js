import { TypeRef } from "./dist2-chunk.js";
import { create } from "./EntityUtils-chunk.js";
import { typeModels$2 as typeModels } from "./EntityFunctions-chunk.js";

//#region src/common/api/entities/storage/TypeRefs.ts
const BlobAccessTokenPostInTypeRef = new TypeRef("storage", "BlobAccessTokenPostIn");
function createBlobAccessTokenPostIn(values) {
	return Object.assign(create(typeModels.BlobAccessTokenPostIn, BlobAccessTokenPostInTypeRef), values);
}
const BlobAccessTokenPostOutTypeRef = new TypeRef("storage", "BlobAccessTokenPostOut");
const BlobArchiveRefTypeRef = new TypeRef("storage", "BlobArchiveRef");
const BlobGetInTypeRef = new TypeRef("storage", "BlobGetIn");
function createBlobGetIn(values) {
	return Object.assign(create(typeModels.BlobGetIn, BlobGetInTypeRef), values);
}
const BlobIdTypeRef = new TypeRef("storage", "BlobId");
function createBlobId(values) {
	return Object.assign(create(typeModels.BlobId, BlobIdTypeRef), values);
}
const BlobPostOutTypeRef = new TypeRef("storage", "BlobPostOut");
const BlobReadDataTypeRef = new TypeRef("storage", "BlobReadData");
function createBlobReadData(values) {
	return Object.assign(create(typeModels.BlobReadData, BlobReadDataTypeRef), values);
}
const BlobReferenceDeleteInTypeRef = new TypeRef("storage", "BlobReferenceDeleteIn");
const BlobReferencePutInTypeRef = new TypeRef("storage", "BlobReferencePutIn");
const BlobServerAccessInfoTypeRef = new TypeRef("storage", "BlobServerAccessInfo");
const BlobServerUrlTypeRef = new TypeRef("storage", "BlobServerUrl");
const BlobWriteDataTypeRef = new TypeRef("storage", "BlobWriteData");
function createBlobWriteData(values) {
	return Object.assign(create(typeModels.BlobWriteData, BlobWriteDataTypeRef), values);
}
const InstanceIdTypeRef = new TypeRef("storage", "InstanceId");
function createInstanceId(values) {
	return Object.assign(create(typeModels.InstanceId, InstanceIdTypeRef), values);
}

//#endregion
//#region src/common/api/entities/storage/Services.ts
const BlobAccessTokenService = Object.freeze({
	app: "storage",
	name: "BlobAccessTokenService",
	get: null,
	post: {
		data: BlobAccessTokenPostInTypeRef,
		return: BlobAccessTokenPostOutTypeRef
	},
	put: null,
	delete: null
});
const BlobReferenceService = Object.freeze({
	app: "storage",
	name: "BlobReferenceService",
	get: null,
	post: null,
	put: {
		data: BlobReferencePutInTypeRef,
		return: null
	},
	delete: {
		data: BlobReferenceDeleteInTypeRef,
		return: null
	}
});
const BlobService = Object.freeze({
	app: "storage",
	name: "BlobService",
	get: {
		data: BlobGetInTypeRef,
		return: null
	},
	post: {
		data: null,
		return: BlobPostOutTypeRef
	},
	put: null,
	delete: null
});

//#endregion
export { BlobAccessTokenService, BlobGetInTypeRef, BlobPostOutTypeRef, BlobService, createBlobAccessTokenPostIn, createBlobGetIn, createBlobId, createBlobReadData, createBlobWriteData, createInstanceId };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,